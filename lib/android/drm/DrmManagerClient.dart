// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "../content/ContentValues.dart" as contentvalues_;

import "../net/Uri.dart" as uri_;

import "DrmRights.dart" as drmrights_;

import "DrmInfo.dart" as drminfo_;

import "DrmInfoRequest.dart" as drminforequest_;

import "DrmConvertedStatus.dart" as drmconvertedstatus_;

import "DrmInfoEvent.dart" as drminfoevent_;

import "DrmEvent.dart" as drmevent_;

import "DrmErrorEvent.dart" as drmerrorevent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.drm.DrmManagerClient
///
/// The main programming interface for the DRM framework. An application must instantiate this class
/// to access DRM agents through the DRM framework.
class DrmManagerClient extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/drm/DrmManagerClient");
  DrmManagerClient.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ERROR_NONE
  ///
  /// Indicates that a request was successful or that no error occurred.
  static const ERROR_NONE = 0;

  /// from: static public final int ERROR_UNKNOWN
  ///
  /// Indicates that an error occurred and the reason is not known.
  static const ERROR_UNKNOWN = -2000;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a <code>DrmManagerClient</code>.
  ///@param context Context of the caller.
  DrmManagerClient(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  ///
  /// Releases resources associated with the current session of
  /// DrmManagerClient. It is considered good practice to call this method when
  /// the DrmManagerClient object is no longer needed in your
  /// application. After this method is called, DrmManagerClient is no
  /// longer usable since it has lost all of its required resource.
  ///
  /// This method was added in API 24. In API versions 16 through 23, release()
  /// should be called instead. There is no need to do anything for API
  /// versions prior to 16.
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_release =
      jniAccessors.getMethodIDOf(_classRef, "release", "()V");

  /// from: public void release()
  ///
  /// @deprecated replaced by \#close().
  void release() => jniAccessors.callMethodWithArgs(
      reference, _id_release, jni.JniType.voidType, []).check();

  static final _id_setOnInfoListener = jniAccessors.getMethodIDOf(_classRef,
      "setOnInfoListener", "(Landroid/drm/DrmManagerClient\$OnInfoListener;)V");

  /// from: synchronized public void setOnInfoListener(android.drm.DrmManagerClient.OnInfoListener infoListener)
  ///
  /// Registers an DrmManagerClient.OnInfoListener callback, which is invoked when the
  /// DRM framework sends status or warning information during registration or rights acquisition.
  ///@param infoListener Interface definition for the callback.
  void setOnInfoListener(DrmManagerClient_OnInfoListener infoListener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnInfoListener,
          jni.JniType.voidType, [infoListener.reference]).check();

  static final _id_setOnEventListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnEventListener",
      "(Landroid/drm/DrmManagerClient\$OnEventListener;)V");

  /// from: synchronized public void setOnEventListener(android.drm.DrmManagerClient.OnEventListener eventListener)
  ///
  /// Registers an DrmManagerClient.OnEventListener callback, which is invoked when the
  /// DRM framework sends information about DRM processing.
  ///@param eventListener Interface definition for the callback.
  void setOnEventListener(DrmManagerClient_OnEventListener eventListener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnEventListener,
          jni.JniType.voidType, [eventListener.reference]).check();

  static final _id_setOnErrorListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnErrorListener",
      "(Landroid/drm/DrmManagerClient\$OnErrorListener;)V");

  /// from: synchronized public void setOnErrorListener(android.drm.DrmManagerClient.OnErrorListener errorListener)
  ///
  /// Registers an DrmManagerClient.OnErrorListener callback, which is invoked when
  /// the DRM framework sends error information.
  ///@param errorListener Interface definition for the callback.
  void setOnErrorListener(DrmManagerClient_OnErrorListener errorListener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnErrorListener,
          jni.JniType.voidType, [errorListener.reference]).check();

  static final _id_getAvailableDrmEngines = jniAccessors.getMethodIDOf(
      _classRef, "getAvailableDrmEngines", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] getAvailableDrmEngines()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves information about all the DRM plug-ins (agents) that are registered with
  /// the DRM framework.
  ///@return A <code>String</code> array of DRM plug-in descriptions.
  jni.JniObject getAvailableDrmEngines() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAvailableDrmEngines, jni.JniType.objectType, []).object);

  static final _id_getConstraints = jniAccessors.getMethodIDOf(_classRef,
      "getConstraints", "(Ljava/lang/String;I)Landroid/content/ContentValues;");

  /// from: public android.content.ContentValues getConstraints(java.lang.String path, int action)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves constraint information for rights-protected content.
  ///@param path Path to the content from which you are retrieving DRM constraints.
  ///@param action Action defined in DrmStore.Action.
  ///@return A android.content.ContentValues instance that contains
  /// key-value pairs representing the constraints. Null in case of failure.
  /// The keys are defined in DrmStore.ConstraintsColumns.
  contentvalues_.ContentValues getConstraints(jni.JniString path, int action) =>
      contentvalues_.ContentValues.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getConstraints,
          jni.JniType.objectType,
          [path.reference, action]).object);

  static final _id_getMetadata = jniAccessors.getMethodIDOf(_classRef,
      "getMetadata", "(Ljava/lang/String;)Landroid/content/ContentValues;");

  /// from: public android.content.ContentValues getMetadata(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves metadata information for rights-protected content.
  ///@param path Path to the content from which you are retrieving metadata information.
  ///@return A android.content.ContentValues instance that contains
  /// key-value pairs representing the metadata. Null in case of failure.
  contentvalues_.ContentValues getMetadata(jni.JniString path) =>
      contentvalues_.ContentValues.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getMetadata,
          jni.JniType.objectType,
          [path.reference]).object);

  static final _id_getConstraints1 = jniAccessors.getMethodIDOf(_classRef,
      "getConstraints", "(Landroid/net/Uri;I)Landroid/content/ContentValues;");

  /// from: public android.content.ContentValues getConstraints(android.net.Uri uri, int action)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves constraint information for rights-protected content.
  ///@param uri URI for the content from which you are retrieving DRM constraints.
  ///@param action Action defined in DrmStore.Action.
  ///@return A android.content.ContentValues instance that contains
  /// key-value pairs representing the constraints. Null in case of failure.
  contentvalues_.ContentValues getConstraints1(uri_.Uri uri, int action) =>
      contentvalues_.ContentValues.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getConstraints1,
          jni.JniType.objectType,
          [uri.reference, action]).object);

  static final _id_getMetadata1 = jniAccessors.getMethodIDOf(_classRef,
      "getMetadata", "(Landroid/net/Uri;)Landroid/content/ContentValues;");

  /// from: public android.content.ContentValues getMetadata(android.net.Uri uri)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves metadata information for rights-protected content.
  ///@param uri URI for the content from which you are retrieving metadata information.
  ///@return A android.content.ContentValues instance that contains
  /// key-value pairs representing the constraints. Null in case of failure.
  contentvalues_.ContentValues getMetadata1(uri_.Uri uri) =>
      contentvalues_.ContentValues.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getMetadata1,
          jni.JniType.objectType,
          [uri.reference]).object);

  static final _id_saveRights = jniAccessors.getMethodIDOf(
      _classRef,
      "saveRights",
      "(Landroid/drm/DrmRights;Ljava/lang/String;Ljava/lang/String;)I");

  /// from: public int saveRights(android.drm.DrmRights drmRights, java.lang.String rightsPath, java.lang.String contentPath)
  ///
  /// Saves rights to a specified path and associates that path with the content path.
  ///
  /// <p class="note"><strong>Note:</strong> For OMA or WM-DRM, <code>rightsPath</code> and
  /// <code>contentPath</code> can be null.
  ///
  ///@param drmRights The DrmRights to be saved.
  ///@param rightsPath File path where rights will be saved.
  ///@param contentPath File path where content is saved.
  ///@return ERROR_NONE for success; ERROR_UNKNOWN for failure.
  ///@throws IOException If the call failed to save rights information at the given
  /// <code>rightsPath</code>.
  int saveRights(drmrights_.DrmRights drmRights, jni.JniString rightsPath,
          jni.JniString contentPath) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_saveRights, jni.JniType.intType, [
        drmRights.reference,
        rightsPath.reference,
        contentPath.reference
      ]).integer;

  static final _id_canHandle = jniAccessors.getMethodIDOf(
      _classRef, "canHandle", "(Ljava/lang/String;Ljava/lang/String;)Z");

  /// from: public boolean canHandle(java.lang.String path, java.lang.String mimeType)
  ///
  /// Checks whether the given MIME type or path can be handled.
  ///@param path Path of the content to be handled.
  ///@param mimeType MIME type of the object to be handled.
  ///@return True if the given MIME type or path can be handled; false if they cannot be handled.
  bool canHandle(jni.JniString path, jni.JniString mimeType) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_canHandle,
          jni.JniType.booleanType,
          [path.reference, mimeType.reference]).boolean;

  static final _id_canHandle1 = jniAccessors.getMethodIDOf(
      _classRef, "canHandle", "(Landroid/net/Uri;Ljava/lang/String;)Z");

  /// from: public boolean canHandle(android.net.Uri uri, java.lang.String mimeType)
  ///
  /// Checks whether the given MIME type or URI can be handled.
  ///@param uri URI for the content to be handled.
  ///@param mimeType MIME type of the object to be handled
  ///@return True if the given MIME type or URI can be handled; false if they cannot be handled.
  bool canHandle1(uri_.Uri uri, jni.JniString mimeType) =>
      jniAccessors.callMethodWithArgs(reference, _id_canHandle1,
          jni.JniType.booleanType, [uri.reference, mimeType.reference]).boolean;

  static final _id_processDrmInfo = jniAccessors.getMethodIDOf(
      _classRef, "processDrmInfo", "(Landroid/drm/DrmInfo;)I");

  /// from: public int processDrmInfo(android.drm.DrmInfo drmInfo)
  ///
  /// Processes the given DRM information based on the information type.
  ///@param drmInfo The DrmInfo to be processed.
  ///@return ERROR_NONE for success; ERROR_UNKNOWN for failure.
  int processDrmInfo(drminfo_.DrmInfo drmInfo) =>
      jniAccessors.callMethodWithArgs(reference, _id_processDrmInfo,
          jni.JniType.intType, [drmInfo.reference]).integer;

  static final _id_acquireDrmInfo = jniAccessors.getMethodIDOf(_classRef,
      "acquireDrmInfo", "(Landroid/drm/DrmInfoRequest;)Landroid/drm/DrmInfo;");

  /// from: public android.drm.DrmInfo acquireDrmInfo(android.drm.DrmInfoRequest drmInfoRequest)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves information for registering, unregistering, or acquiring rights.
  ///@param drmInfoRequest The DrmInfoRequest that specifies the type of DRM
  /// information being retrieved.
  ///@return A DrmInfo instance.
  drminfo_.DrmInfo acquireDrmInfo(
          drminforequest_.DrmInfoRequest drmInfoRequest) =>
      drminfo_.DrmInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_acquireDrmInfo,
          jni.JniType.objectType,
          [drmInfoRequest.reference]).object);

  static final _id_acquireRights = jniAccessors.getMethodIDOf(
      _classRef, "acquireRights", "(Landroid/drm/DrmInfoRequest;)I");

  /// from: public int acquireRights(android.drm.DrmInfoRequest drmInfoRequest)
  ///
  /// Processes a given DrmInfoRequest and returns the rights information asynchronously.
  ///
  /// This is a utility method that consists of an
  /// \#acquireDrmInfo(DrmInfoRequest) acquireDrmInfo() and a
  /// \#processDrmInfo(DrmInfo) processDrmInfo() method call. This utility method can be
  /// used only if the selected DRM plug-in (agent) supports this sequence of calls. Some DRM
  /// agents, such as OMA, do not support this utility method, in which case an application must
  /// invoke \#acquireDrmInfo(DrmInfoRequest) acquireDrmInfo() and
  /// \#processDrmInfo(DrmInfo) processDrmInfo() separately.
  ///@param drmInfoRequest The DrmInfoRequest used to acquire the rights.
  ///@return ERROR_NONE for success; ERROR_UNKNOWN for failure.
  int acquireRights(drminforequest_.DrmInfoRequest drmInfoRequest) =>
      jniAccessors.callMethodWithArgs(reference, _id_acquireRights,
          jni.JniType.intType, [drmInfoRequest.reference]).integer;

  static final _id_getDrmObjectType = jniAccessors.getMethodIDOf(
      _classRef, "getDrmObjectType", "(Ljava/lang/String;Ljava/lang/String;)I");

  /// from: public int getDrmObjectType(java.lang.String path, java.lang.String mimeType)
  ///
  /// Retrieves the type of rights-protected object (for example, content object, rights
  /// object, and so on) using the specified path or MIME type. At least one parameter must
  /// be specified to retrieve the DRM object type.
  ///@param path Path to the content or null.
  ///@param mimeType MIME type of the content or null.
  ///@return An <code>int</code> that corresponds to a DrmStore.DrmObjectType.
  int getDrmObjectType(jni.JniString path, jni.JniString mimeType) =>
      jniAccessors.callMethodWithArgs(reference, _id_getDrmObjectType,
          jni.JniType.intType, [path.reference, mimeType.reference]).integer;

  static final _id_getDrmObjectType1 = jniAccessors.getMethodIDOf(
      _classRef, "getDrmObjectType", "(Landroid/net/Uri;Ljava/lang/String;)I");

  /// from: public int getDrmObjectType(android.net.Uri uri, java.lang.String mimeType)
  ///
  /// Retrieves the type of rights-protected object (for example, content object, rights
  /// object, and so on) using the specified URI or MIME type. At least one parameter must
  /// be specified to retrieve the DRM object type.
  ///@param uri URI for the content or null.
  ///@param mimeType MIME type of the content or null.
  ///@return An <code>int</code> that corresponds to a DrmStore.DrmObjectType.
  int getDrmObjectType1(uri_.Uri uri, jni.JniString mimeType) =>
      jniAccessors.callMethodWithArgs(reference, _id_getDrmObjectType1,
          jni.JniType.intType, [uri.reference, mimeType.reference]).integer;

  static final _id_getOriginalMimeType = jniAccessors.getMethodIDOf(_classRef,
      "getOriginalMimeType", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getOriginalMimeType(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves the MIME type embedded in the original content.
  ///@param path Path to the rights-protected content.
  ///@return The MIME type of the original content, such as <code>video/mpeg</code>.
  jni.JniString getOriginalMimeType(jni.JniString path) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getOriginalMimeType,
          jni.JniType.objectType,
          [path.reference]).object);

  static final _id_getOriginalMimeType1 = jniAccessors.getMethodIDOf(_classRef,
      "getOriginalMimeType", "(Landroid/net/Uri;)Ljava/lang/String;");

  /// from: public java.lang.String getOriginalMimeType(android.net.Uri uri)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves the MIME type embedded in the original content.
  ///@param uri URI of the rights-protected content.
  ///@return MIME type of the original content, such as <code>video/mpeg</code>.
  jni.JniString getOriginalMimeType1(uri_.Uri uri) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getOriginalMimeType1,
          jni.JniType.objectType,
          [uri.reference]).object);

  static final _id_checkRightsStatus = jniAccessors.getMethodIDOf(
      _classRef, "checkRightsStatus", "(Ljava/lang/String;)I");

  /// from: public int checkRightsStatus(java.lang.String path)
  ///
  /// Checks whether the given content has valid rights.
  ///@param path Path to the rights-protected content.
  ///@return An <code>int</code> representing the DrmStore.RightsStatus of the content.
  int checkRightsStatus(jni.JniString path) => jniAccessors.callMethodWithArgs(
      reference,
      _id_checkRightsStatus,
      jni.JniType.intType,
      [path.reference]).integer;

  static final _id_checkRightsStatus1 = jniAccessors.getMethodIDOf(
      _classRef, "checkRightsStatus", "(Landroid/net/Uri;)I");

  /// from: public int checkRightsStatus(android.net.Uri uri)
  ///
  /// Check whether the given content has valid rights.
  ///@param uri URI of the rights-protected content.
  ///@return An <code>int</code> representing the DrmStore.RightsStatus of the content.
  int checkRightsStatus1(uri_.Uri uri) => jniAccessors.callMethodWithArgs(
      reference,
      _id_checkRightsStatus1,
      jni.JniType.intType,
      [uri.reference]).integer;

  static final _id_checkRightsStatus2 = jniAccessors.getMethodIDOf(
      _classRef, "checkRightsStatus", "(Ljava/lang/String;I)I");

  /// from: public int checkRightsStatus(java.lang.String path, int action)
  ///
  /// Checks whether the given rights-protected content has valid rights for the specified
  /// DrmStore.Action.
  ///@param path Path to the rights-protected content.
  ///@param action The DrmStore.Action to perform.
  ///@return An <code>int</code> representing the DrmStore.RightsStatus of the content.
  int checkRightsStatus2(jni.JniString path, int action) =>
      jniAccessors.callMethodWithArgs(reference, _id_checkRightsStatus2,
          jni.JniType.intType, [path.reference, action]).integer;

  static final _id_checkRightsStatus3 = jniAccessors.getMethodIDOf(
      _classRef, "checkRightsStatus", "(Landroid/net/Uri;I)I");

  /// from: public int checkRightsStatus(android.net.Uri uri, int action)
  ///
  /// Checks whether the given rights-protected content has valid rights for the specified
  /// DrmStore.Action.
  ///@param uri URI for the rights-protected content.
  ///@param action The DrmStore.Action to perform.
  ///@return An <code>int</code> representing the DrmStore.RightsStatus of the content.
  int checkRightsStatus3(uri_.Uri uri, int action) =>
      jniAccessors.callMethodWithArgs(reference, _id_checkRightsStatus3,
          jni.JniType.intType, [uri.reference, action]).integer;

  static final _id_removeRights = jniAccessors.getMethodIDOf(
      _classRef, "removeRights", "(Ljava/lang/String;)I");

  /// from: public int removeRights(java.lang.String path)
  ///
  /// Removes the rights associated with the given rights-protected content.
  ///@param path Path to the rights-protected content.
  ///@return ERROR_NONE for success; ERROR_UNKNOWN for failure.
  int removeRights(jni.JniString path) => jniAccessors.callMethodWithArgs(
      reference,
      _id_removeRights,
      jni.JniType.intType,
      [path.reference]).integer;

  static final _id_removeRights1 = jniAccessors.getMethodIDOf(
      _classRef, "removeRights", "(Landroid/net/Uri;)I");

  /// from: public int removeRights(android.net.Uri uri)
  ///
  /// Removes the rights associated with the given rights-protected content.
  ///@param uri URI for the rights-protected content.
  ///@return ERROR_NONE for success; ERROR_UNKNOWN for failure.
  int removeRights1(uri_.Uri uri) => jniAccessors.callMethodWithArgs(reference,
      _id_removeRights1, jni.JniType.intType, [uri.reference]).integer;

  static final _id_removeAllRights =
      jniAccessors.getMethodIDOf(_classRef, "removeAllRights", "()I");

  /// from: public int removeAllRights()
  ///
  /// Removes all the rights information of every DRM plug-in (agent) associated with
  /// the DRM framework. Will be used during a master reset.
  ///@return ERROR_NONE for success; ERROR_UNKNOWN for failure.
  int removeAllRights() => jniAccessors.callMethodWithArgs(
      reference, _id_removeAllRights, jni.JniType.intType, []).integer;

  static final _id_openConvertSession = jniAccessors.getMethodIDOf(
      _classRef, "openConvertSession", "(Ljava/lang/String;)I");

  /// from: public int openConvertSession(java.lang.String mimeType)
  ///
  /// Initiates a new conversion session. An application must initiate a conversion session
  /// with this method each time it downloads a rights-protected file that needs to be converted.
  ///
  /// This method applies only to forward-locking (copy protection) DRM schemes.
  ///@param mimeType MIME type of the input data packet.
  ///@return A convert ID that is used used to maintain the conversion session.
  int openConvertSession(jni.JniString mimeType) =>
      jniAccessors.callMethodWithArgs(reference, _id_openConvertSession,
          jni.JniType.intType, [mimeType.reference]).integer;

  static final _id_convertData = jniAccessors.getMethodIDOf(
      _classRef, "convertData", "(I[B)Landroid/drm/DrmConvertedStatus;");

  /// from: public android.drm.DrmConvertedStatus convertData(int convertId, byte[] inputData)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Converts the input data (content) that is part of a rights-protected file. The converted
  /// data and status is returned in a DrmConvertedStatus object. This method should be
  /// called each time there is a new block of data received by the application.
  ///@param convertId Handle for the conversion session.
  ///@param inputData Input data that needs to be converted.
  ///@return A DrmConvertedStatus object that contains the status of the data conversion,
  /// the converted data, and offset for the header and body signature. An application can
  /// ignore the offset because it is only relevant to the
  /// \#closeConvertSession closeConvertSession() method.
  drmconvertedstatus_.DrmConvertedStatus convertData(
          int convertId, jni.JniObject inputData) =>
      drmconvertedstatus_.DrmConvertedStatus.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_convertData,
              jni.JniType.objectType, [convertId, inputData.reference]).object);

  static final _id_closeConvertSession = jniAccessors.getMethodIDOf(
      _classRef, "closeConvertSession", "(I)Landroid/drm/DrmConvertedStatus;");

  /// from: public android.drm.DrmConvertedStatus closeConvertSession(int convertId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Informs the DRM plug-in (agent) that there is no more data to convert or that an error
  /// has occurred. Upon successful conversion of the data, the DRM agent will provide an offset
  /// value indicating where the header and body signature should be added. Appending the
  /// signature is necessary to protect the integrity of the converted file.
  ///@param convertId Handle for the conversion session.
  ///@return A DrmConvertedStatus object that contains the status of the data conversion,
  /// the converted data, and the offset for the header and body signature.
  drmconvertedstatus_.DrmConvertedStatus closeConvertSession(int convertId) =>
      drmconvertedstatus_.DrmConvertedStatus.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_closeConvertSession,
              jni.JniType.objectType, [convertId]).object);
}

/// from: android.drm.DrmManagerClient$OnInfoListener
///
/// Interface definition for a callback that receives status messages and warnings
/// during registration and rights acquisition.
class DrmManagerClient_OnInfoListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/drm/DrmManagerClient\$OnInfoListener");
  DrmManagerClient_OnInfoListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onInfo = jniAccessors.getMethodIDOf(_classRef, "onInfo",
      "(Landroid/drm/DrmManagerClient;Landroid/drm/DrmInfoEvent;)V");

  /// from: public abstract void onInfo(android.drm.DrmManagerClient client, android.drm.DrmInfoEvent event)
  ///
  /// Called when the DRM framework sends status or warning information during registration
  /// and rights acquisition.
  ///@param client The <code>DrmManagerClient</code> instance.
  ///@param event The DrmInfoEvent instance that wraps the status information or
  /// warnings.
  void onInfo(DrmManagerClient client, drminfoevent_.DrmInfoEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onInfo,
          jni.JniType.voidType, [client.reference, event.reference]).check();
}

/// from: android.drm.DrmManagerClient$OnEventListener
///
/// Interface definition for a callback that receives information
/// about DRM processing events.
class DrmManagerClient_OnEventListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/drm/DrmManagerClient\$OnEventListener");
  DrmManagerClient_OnEventListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onEvent = jniAccessors.getMethodIDOf(_classRef, "onEvent",
      "(Landroid/drm/DrmManagerClient;Landroid/drm/DrmEvent;)V");

  /// from: public abstract void onEvent(android.drm.DrmManagerClient client, android.drm.DrmEvent event)
  ///
  /// Called when the DRM framework sends information about a DRM processing request.
  ///@param client The <code>DrmManagerClient</code> instance.
  ///@param event The DrmEvent instance that wraps the information being
  /// conveyed, such as the information type and message.
  void onEvent(DrmManagerClient client, drmevent_.DrmEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onEvent,
          jni.JniType.voidType, [client.reference, event.reference]).check();
}

/// from: android.drm.DrmManagerClient$OnErrorListener
///
/// Interface definition for a callback that receives information about DRM framework errors.
class DrmManagerClient_OnErrorListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/drm/DrmManagerClient\$OnErrorListener");
  DrmManagerClient_OnErrorListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onError = jniAccessors.getMethodIDOf(_classRef, "onError",
      "(Landroid/drm/DrmManagerClient;Landroid/drm/DrmErrorEvent;)V");

  /// from: public abstract void onError(android.drm.DrmManagerClient client, android.drm.DrmErrorEvent event)
  ///
  /// Called when the DRM framework sends error information.
  ///@param client The <code>DrmManagerClient</code> instance.
  ///@param event The DrmErrorEvent instance that wraps the error type and message.
  void onError(DrmManagerClient client, drmerrorevent_.DrmErrorEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onError,
          jni.JniType.voidType, [client.reference, event.reference]).check();
}
