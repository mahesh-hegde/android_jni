// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "DrmEvent.dart" as drmevent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.drm.DrmErrorEvent
///
/// An entity class that is passed to the
/// DrmManagerClient.OnErrorListener\#onError onError() callback.
class DrmErrorEvent extends drmevent_.DrmEvent {
  static final _classRef = jniAccessors.getClassOf("android/drm/DrmErrorEvent");
  DrmErrorEvent.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int TYPE_ACQUIRE_DRM_INFO_FAILED
  ///
  /// Failed to acquire DrmInfo. This error event is sent when an
  /// DrmManagerClient\#acquireDrmInfo acquireDrmInfo() call fails.
  static const TYPE_ACQUIRE_DRM_INFO_FAILED = 2008;

  /// from: static public final int TYPE_NOT_SUPPORTED
  ///
  /// Response from the server cannot be handled by the DRM plug-in (agent).
  static const TYPE_NOT_SUPPORTED = 2003;

  /// from: static public final int TYPE_NO_INTERNET_CONNECTION
  ///
  /// An Internet connection is not available and no attempt can be made to renew rights.
  static const TYPE_NO_INTERNET_CONNECTION = 2005;

  /// from: static public final int TYPE_OUT_OF_MEMORY
  ///
  /// Memory allocation failed during renewal. Can in the future perhaps be used to trigger
  /// garbage collector.
  static const TYPE_OUT_OF_MEMORY = 2004;

  /// from: static public final int TYPE_PROCESS_DRM_INFO_FAILED
  ///
  /// Failed to process DrmInfo. This error event is sent when a
  /// DrmManagerClient\#processDrmInfo processDrmInfo() call fails.
  static const TYPE_PROCESS_DRM_INFO_FAILED = 2006;

  /// from: static public final int TYPE_REMOVE_ALL_RIGHTS_FAILED
  ///
  /// Failed to remove all the rights objects associated with all DRM schemes.
  static const TYPE_REMOVE_ALL_RIGHTS_FAILED = 2007;

  /// from: static public final int TYPE_RIGHTS_NOT_INSTALLED
  ///
  /// Something went wrong installing the rights.
  static const TYPE_RIGHTS_NOT_INSTALLED = 2001;

  /// from: static public final int TYPE_RIGHTS_RENEWAL_NOT_ALLOWED
  ///
  /// The server rejected the renewal of rights.
  static const TYPE_RIGHTS_RENEWAL_NOT_ALLOWED = 2002;

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(IILjava/lang/String;)V");

  /// from: public void <init>(int uniqueId, int type, java.lang.String message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a <code>DrmErrorEvent</code> object with the specified parameters.
  ///@param uniqueId Unique session identifier.
  ///@param type Type of the event. Must be any of the event types defined above.
  ///@param message Message description. It can be null.
  DrmErrorEvent.ctor1(int uniqueId, int type, jni.JniString message)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [uniqueId, type, message.reference]).object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(IILjava/lang/String;Ljava/util/HashMap;)V");

  /// from: public void <init>(int uniqueId, int type, java.lang.String message, java.util.HashMap<java.lang.String,java.lang.Object> attributes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a <code>DrmErrorEvent</code> object with the specified parameters.
  ///@param uniqueId Unique session identifier.
  ///@param type Type of the event. Must be any of the event types defined above.
  ///@param message Message description.
  ///@param attributes Attributes for extensible information. Could be any
  /// information provided by the plug-in. It can be null.
  DrmErrorEvent(
      int uniqueId, int type, jni.JniString message, jni.JniObject attributes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [uniqueId, type, message.reference, attributes.reference]).object);
}
