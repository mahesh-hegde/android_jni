// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.drm.DrmInfo
///
/// An entity class that describes the information required to send transactions
/// between a device and an online DRM server. The DRM framework achieves
/// server registration, license acquisition, and any other server-related transactions
/// by passing an instance of this class to DrmManagerClient\#processDrmInfo.
///
/// The caller can retrieve the DrmInfo instance by passing a DrmInfoRequest
/// instance to DrmManagerClient\#acquireDrmInfo.
class DrmInfo extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/drm/DrmInfo");
  DrmInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(I[BLjava/lang/String;)V");

  /// from: public void <init>(int infoType, byte[] data, java.lang.String mimeType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a <code>DrmInfo</code> object with the given parameters.
  ///@param infoType The type of information.
  ///@param data The trigger data.
  ///@param mimeType The MIME type.
  DrmInfo(int infoType, jni.JniObject data, jni.JniString mimeType)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [infoType, data.reference, mimeType.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(ILjava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(int infoType, java.lang.String path, java.lang.String mimeType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a <code>DrmInfo</code> object with the given parameters.
  ///@param infoType The type of information.
  ///@param path The trigger data.
  ///@param mimeType The MIME type.
  DrmInfo.ctor1(int infoType, jni.JniString path, jni.JniString mimeType)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [infoType, path.reference, mimeType.reference]).object);

  static final _id_put = jniAccessors.getMethodIDOf(
      _classRef, "put", "(Ljava/lang/String;Ljava/lang/Object;)V");

  /// from: public void put(java.lang.String key, java.lang.Object value)
  ///
  /// Adds optional information as key-value pairs to this object. To add a custom object
  /// to the <code>DrmInfo</code> object, you must override the \#toString implementation.
  ///@param key Key to add.
  ///@param value Value to add.
  void put(jni.JniString key, jni.JniObject value) =>
      jniAccessors.callMethodWithArgs(reference, _id_put, jni.JniType.voidType,
          [key.reference, value.reference]).check();

  static final _id_get0 = jniAccessors.getMethodIDOf(
      _classRef, "get", "(Ljava/lang/String;)Ljava/lang/Object;");

  /// from: public java.lang.Object get(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves the value of a given key.
  ///@param key The key whose value is being retrieved.
  ///@return The value of the key being retrieved. Returns null if the key cannot be found.
  jni.JniObject get0(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_get0, jni.JniType.objectType, [key.reference]).object);

  static final _id_keyIterator = jniAccessors.getMethodIDOf(
      _classRef, "keyIterator", "()Ljava/util/Iterator;");

  /// from: public java.util.Iterator<java.lang.String> keyIterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves an iterator object that you can use to iterate over the keys associated with
  /// this <code>DrmInfo</code> object.
  ///@return The iterator object.
  jni.JniObject keyIterator() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_keyIterator, jni.JniType.objectType, []).object);

  static final _id_iterator = jniAccessors.getMethodIDOf(
      _classRef, "iterator", "()Ljava/util/Iterator;");

  /// from: public java.util.Iterator<java.lang.Object> iterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves an iterator object that you can use to iterate over the values associated with
  /// this <code>DrmInfo</code> object.
  ///@return The iterator object.
  jni.JniObject iterator() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_iterator, jni.JniType.objectType, []).object);

  static final _id_getData =
      jniAccessors.getMethodIDOf(_classRef, "getData", "()[B");

  /// from: public byte[] getData()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves the trigger data associated with this object.
  ///@return The trigger data.
  jni.JniObject getData() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getData, jni.JniType.objectType, []).object);

  static final _id_getMimeType = jniAccessors.getMethodIDOf(
      _classRef, "getMimeType", "()Ljava/lang/String;");

  /// from: public java.lang.String getMimeType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves the MIME type associated with this object.
  ///@return The MIME type.
  jni.JniString getMimeType() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMimeType, jni.JniType.objectType, []).object);

  static final _id_getInfoType =
      jniAccessors.getMethodIDOf(_classRef, "getInfoType", "()I");

  /// from: public int getInfoType()
  ///
  /// Retrieves the information type associated with this object.
  ///@return The information type.
  int getInfoType() => jniAccessors.callMethodWithArgs(
      reference, _id_getInfoType, jni.JniType.intType, []).integer;
}
