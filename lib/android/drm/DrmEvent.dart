// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.drm.DrmEvent
///
/// A base class that is used to send asynchronous event information from the DRM framework.
class DrmEvent extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/drm/DrmEvent");
  DrmEvent.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String DRM_INFO_OBJECT
  ///
  /// The key that is used in the <code>attributes</code> HashMap to pass the
  /// DrmInfo object.
  static const DRM_INFO_OBJECT = "drm_info_object";

  /// from: static public final java.lang.String DRM_INFO_STATUS_OBJECT
  ///
  /// The key that is used in the <code>attributes</code> HashMap to pass the return status.
  static const DRM_INFO_STATUS_OBJECT = "drm_info_status_object";

  /// from: static public final int TYPE_ALL_RIGHTS_REMOVED
  ///
  /// All of the rights information associated with all DRM schemes have been successfully removed.
  static const TYPE_ALL_RIGHTS_REMOVED = 1001;

  /// from: static public final int TYPE_DRM_INFO_PROCESSED
  ///
  /// The given DRM information has been successfully processed.
  static const TYPE_DRM_INFO_PROCESSED = 1002;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(IILjava/lang/String;Ljava/util/HashMap;)V");

  /// from: protected void <init>(int uniqueId, int type, java.lang.String message, java.util.HashMap<java.lang.String,java.lang.Object> attributes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a <code>DrmEvent</code> object with the specified parameters.
  ///@param uniqueId Unique session identifier.
  ///@param type Type of information.
  ///@param message Message description.
  ///@param attributes Attributes for extensible information.
  DrmEvent(
      int uniqueId, int type, jni.JniString message, jni.JniObject attributes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [uniqueId, type, message.reference, attributes.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(IILjava/lang/String;)V");

  /// from: protected void <init>(int uniqueId, int type, java.lang.String message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a <code>DrmEvent</code> object with the specified parameters.
  ///@param uniqueId Unique session identifier.
  ///@param type Type of information.
  ///@param message Message description.
  DrmEvent.ctor1(int uniqueId, int type, jni.JniString message)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [uniqueId, type, message.reference]).object);

  static final _id_getUniqueId =
      jniAccessors.getMethodIDOf(_classRef, "getUniqueId", "()I");

  /// from: public int getUniqueId()
  ///
  /// Retrieves the unique session identifier associated with this object.
  ///@return The unique session identifier.
  int getUniqueId() => jniAccessors.callMethodWithArgs(
      reference, _id_getUniqueId, jni.JniType.intType, []).integer;

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public int getType()
  ///
  /// Retrieves the type of information that is associated with this object.
  ///@return The type of information.
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_getMessage = jniAccessors.getMethodIDOf(
      _classRef, "getMessage", "()Ljava/lang/String;");

  /// from: public java.lang.String getMessage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves the message description associated with this object.
  ///@return The message description.
  jni.JniString getMessage() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMessage, jni.JniType.objectType, []).object);

  static final _id_getAttribute = jniAccessors.getMethodIDOf(
      _classRef, "getAttribute", "(Ljava/lang/String;)Ljava/lang/Object;");

  /// from: public java.lang.Object getAttribute(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves the attribute associated with the specified key.
  ///@return One of the attributes or null if no mapping for
  /// the key is found.
  jni.JniObject getAttribute(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAttribute, jni.JniType.objectType, [key.reference]).object);
}
