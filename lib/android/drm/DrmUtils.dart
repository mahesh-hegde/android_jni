// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.drm.DrmUtils
///
/// A utility class that provides operations for parsing extended metadata embedded in
/// DRM constraint information. If a DRM scheme has specific constraints beyond the standard
/// constraints, the constraints will show up in the
/// DrmStore.ConstraintsColumns\#EXTENDED_METADATA key. You can use
/// DrmUtils.ExtendedMetadataParser to iterate over those values.
class DrmUtils extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/drm/DrmUtils");
  DrmUtils.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  DrmUtils()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getExtendedMetadataParser = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getExtendedMetadataParser",
      "([B)Landroid/drm/DrmUtils\$ExtendedMetadataParser;");

  /// from: static public android.drm.DrmUtils.ExtendedMetadataParser getExtendedMetadataParser(byte[] extendedMetadata)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an instance of DrmUtils.ExtendedMetadataParser, which can be used to parse
  /// extended metadata embedded in DRM constraint information.
  ///@param extendedMetadata Object in which key-value pairs of extended metadata are embedded.
  static DrmUtils_ExtendedMetadataParser getExtendedMetadataParser(
          jni.JniObject extendedMetadata) =>
      DrmUtils_ExtendedMetadataParser.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_getExtendedMetadataParser,
              jni.JniType.objectType, [extendedMetadata.reference]).object);
}

/// from: android.drm.DrmUtils$ExtendedMetadataParser
///
/// Utility that parses extended metadata embedded in DRM constraint information.
///
/// Usage example:
///
/// byte[] extendedMetadata<br>
/// &nbsp;&nbsp;&nbsp;&nbsp; =
///         constraints.getAsByteArray(DrmStore.ConstraintsColumns.EXTENDED_METADATA);<br>
/// ExtendedMetadataParser parser = getExtendedMetadataParser(extendedMetadata);<br>
/// Iterator keyIterator = parser.keyIterator();<br>
/// while (keyIterator.hasNext()) {<br>
///     &nbsp;&nbsp;&nbsp;&nbsp;String extendedMetadataKey = keyIterator.next();<br>
///     &nbsp;&nbsp;&nbsp;&nbsp;String extendedMetadataValue =
///             parser.get(extendedMetadataKey);<br>
/// }
class DrmUtils_ExtendedMetadataParser extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/drm/DrmUtils\$ExtendedMetadataParser");
  DrmUtils_ExtendedMetadataParser.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "([B)V");

  /// from: void <init>(byte[] constraintData)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DrmUtils_ExtendedMetadataParser(jni.JniObject constraintData)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [constraintData.reference]).object);

  static final _id_iterator = jniAccessors.getMethodIDOf(
      _classRef, "iterator", "()Ljava/util/Iterator;");

  /// from: public java.util.Iterator<java.lang.String> iterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method returns an iterator object that can be used to iterate over
  /// all values of the metadata.
  ///@return The iterator object.
  jni.JniObject iterator() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_iterator, jni.JniType.objectType, []).object);

  static final _id_keyIterator = jniAccessors.getMethodIDOf(
      _classRef, "keyIterator", "()Ljava/util/Iterator;");

  /// from: public java.util.Iterator<java.lang.String> keyIterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method returns an iterator object that can be used to iterate over
  /// all keys of the metadata.
  ///@return The iterator object.
  jni.JniObject keyIterator() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_keyIterator, jni.JniType.objectType, []).object);

  static final _id_get0 = jniAccessors.getMethodIDOf(
      _classRef, "get", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String get(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method retrieves the metadata value associated with a given key.
  ///@param key The key whose value is being retrieved.
  ///@return The metadata value associated with the given key. Returns null
  /// if the key is not found.
  jni.JniString get0(jni.JniString key) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_get0, jni.JniType.objectType, [key.reference]).object);
}
