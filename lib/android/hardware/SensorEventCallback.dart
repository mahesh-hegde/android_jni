// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "SensorEvent.dart" as sensorevent_;

import "Sensor.dart" as sensor_;

import "SensorAdditionalInfo.dart" as sensoradditionalinfo_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.SensorEventCallback
///
/// Used for receiving sensor additional information frames.
class SensorEventCallback extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/SensorEventCallback");
  SensorEventCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SensorEventCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onSensorChanged = jniAccessors.getMethodIDOf(
      _classRef, "onSensorChanged", "(Landroid/hardware/SensorEvent;)V");

  /// from: public void onSensorChanged(android.hardware.SensorEvent event)
  ///
  /// Called when sensor values have changed.
  ///@see android.hardware.SensorEventListener\#onSensorChanged(SensorEvent)
  void onSensorChanged(sensorevent_.SensorEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSensorChanged,
          jni.JniType.voidType, [event.reference]).check();

  static final _id_onAccuracyChanged = jniAccessors.getMethodIDOf(
      _classRef, "onAccuracyChanged", "(Landroid/hardware/Sensor;I)V");

  /// from: public void onAccuracyChanged(android.hardware.Sensor sensor, int accuracy)
  ///
  /// Called when the accuracy of the registered sensor has changed.
  ///@see android.hardware.SensorEventListener\#onAccuracyChanged(Sensor, int)
  void onAccuracyChanged(sensor_.Sensor sensor, int accuracy) =>
      jniAccessors.callMethodWithArgs(reference, _id_onAccuracyChanged,
          jni.JniType.voidType, [sensor.reference, accuracy]).check();

  static final _id_onFlushCompleted = jniAccessors.getMethodIDOf(
      _classRef, "onFlushCompleted", "(Landroid/hardware/Sensor;)V");

  /// from: public void onFlushCompleted(android.hardware.Sensor sensor)
  ///
  /// Called after flush() is completed.
  ///@see android.hardware.SensorEventListener2\#onFlushCompleted(Sensor)
  void onFlushCompleted(sensor_.Sensor sensor) =>
      jniAccessors.callMethodWithArgs(reference, _id_onFlushCompleted,
          jni.JniType.voidType, [sensor.reference]).check();

  static final _id_onSensorAdditionalInfo = jniAccessors.getMethodIDOf(
      _classRef,
      "onSensorAdditionalInfo",
      "(Landroid/hardware/SensorAdditionalInfo;)V");

  /// from: public void onSensorAdditionalInfo(android.hardware.SensorAdditionalInfo info)
  ///
  /// Called when a sensor additional information frame is available.
  ///@param info A android.hardware.SensorAdditionalInfo SensorAdditionalInfo frame
  /// reported from sensor hardware.
  void onSensorAdditionalInfo(
          sensoradditionalinfo_.SensorAdditionalInfo info) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSensorAdditionalInfo,
          jni.JniType.voidType, [info.reference]).check();
}
