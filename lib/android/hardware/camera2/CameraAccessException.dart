// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../util/AndroidException.dart" as androidexception_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.camera2.CameraAccessException
///
/// <code>CameraAccessException</code> is thrown if a camera device could not
/// be queried or opened by the CameraManager, or if the connection to an
/// opened CameraDevice is no longer valid.
///
///@see CameraManager
///@see CameraDevice
class CameraAccessException extends androidexception_.AndroidException {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/camera2/CameraAccessException");
  CameraAccessException.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CAMERA_DISABLED
  ///
  /// The camera is disabled due to a device policy, and cannot be opened.
  ///@see android.app.admin.DevicePolicyManager\#setCameraDisabled(android.content.ComponentName, boolean)
  static const CAMERA_DISABLED = 1;

  /// from: static public final int CAMERA_DISCONNECTED
  ///
  /// The camera device is removable and has been disconnected from the Android
  /// device, or the camera id used with android.hardware.camera2.CameraManager\#openCamera
  /// is no longer valid, or the camera service has shut down the connection due to a
  /// higher-priority access request for the camera device.
  static const CAMERA_DISCONNECTED = 2;

  /// from: static public final int CAMERA_ERROR
  ///
  /// The camera device is currently in the error state.
  ///
  /// The camera has failed to open or has failed at a later time
  /// as a result of some non-user interaction. Refer to
  /// CameraDevice.StateCallback\#onError for the exact
  /// nature of the error.
  ///
  ///
  /// No further calls to the camera will succeed. Clean up
  /// the camera with CameraDevice\#close and try
  /// handling the error in order to successfully re-open the camera.
  ///
  ///
  static const CAMERA_ERROR = 3;

  /// from: static public final int CAMERA_IN_USE
  ///
  /// The camera device is in use already.
  static const CAMERA_IN_USE = 4;

  /// from: static public final int MAX_CAMERAS_IN_USE
  ///
  /// The system-wide limit for number of open cameras or camera resources has
  /// been reached, and more camera devices cannot be opened or torch mode
  /// cannot be turned on until previous instances are closed.
  static const MAX_CAMERAS_IN_USE = 5;

  static final _id_ctor4 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int problem)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param problem Value is android.hardware.camera2.CameraAccessException\#CAMERA_IN_USE, android.hardware.camera2.CameraAccessException\#MAX_CAMERAS_IN_USE, android.hardware.camera2.CameraAccessException\#CAMERA_DISABLED, android.hardware.camera2.CameraAccessException\#CAMERA_DISCONNECTED, or android.hardware.camera2.CameraAccessException\#CAMERA_ERROR
  CameraAccessException.ctor4(int problem)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor4, [problem]).object);

  static final _id_ctor5 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ILjava/lang/String;)V");

  /// from: public void <init>(int problem, java.lang.String message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param problem Value is android.hardware.camera2.CameraAccessException\#CAMERA_IN_USE, android.hardware.camera2.CameraAccessException\#MAX_CAMERAS_IN_USE, android.hardware.camera2.CameraAccessException\#CAMERA_DISABLED, android.hardware.camera2.CameraAccessException\#CAMERA_DISCONNECTED, or android.hardware.camera2.CameraAccessException\#CAMERA_ERROR
  CameraAccessException.ctor5(int problem, jni.JniString message)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor5, [problem, message.reference]).object);

  static final _id_ctor6 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(ILjava/lang/String;Ljava/lang/Throwable;)V");

  /// from: public void <init>(int problem, java.lang.String message, java.lang.Throwable cause)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param problem Value is android.hardware.camera2.CameraAccessException\#CAMERA_IN_USE, android.hardware.camera2.CameraAccessException\#MAX_CAMERAS_IN_USE, android.hardware.camera2.CameraAccessException\#CAMERA_DISABLED, android.hardware.camera2.CameraAccessException\#CAMERA_DISCONNECTED, or android.hardware.camera2.CameraAccessException\#CAMERA_ERROR
  CameraAccessException.ctor6(
      int problem, jni.JniString message, jni.JniObject cause)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor6,
            [problem, message.reference, cause.reference]).object);

  static final _id_ctor7 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(ILjava/lang/Throwable;)V");

  /// from: public void <init>(int problem, java.lang.Throwable cause)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param problem Value is android.hardware.camera2.CameraAccessException\#CAMERA_IN_USE, android.hardware.camera2.CameraAccessException\#MAX_CAMERAS_IN_USE, android.hardware.camera2.CameraAccessException\#CAMERA_DISABLED, android.hardware.camera2.CameraAccessException\#CAMERA_DISCONNECTED, or android.hardware.camera2.CameraAccessException\#CAMERA_ERROR
  CameraAccessException.ctor7(int problem, jni.JniObject cause)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor7, [problem, cause.reference]).object);

  static final _id_getReason =
      jniAccessors.getMethodIDOf(_classRef, "getReason", "()I");

  /// from: public final int getReason()
  ///
  /// The reason for the failure to access the camera.
  ///@see \#CAMERA_DISABLED
  ///@see \#CAMERA_DISCONNECTED
  ///@see \#CAMERA_ERROR
  ///@return Value is android.hardware.camera2.CameraAccessException\#CAMERA_IN_USE, android.hardware.camera2.CameraAccessException\#MAX_CAMERAS_IN_USE, android.hardware.camera2.CameraAccessException\#CAMERA_DISABLED, android.hardware.camera2.CameraAccessException\#CAMERA_DISCONNECTED, or android.hardware.camera2.CameraAccessException\#CAMERA_ERROR
  int getReason() => jniAccessors.callMethodWithArgs(
      reference, _id_getReason, jni.JniType.intType, []).integer;
}
