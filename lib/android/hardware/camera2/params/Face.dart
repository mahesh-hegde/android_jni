// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../graphics/Rect.dart" as rect_;

import "../../../graphics/Point.dart" as point_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.camera2.params.Face
///
/// Describes a face detected in an image.
class Face extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/camera2/params/Face");
  Face.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ID_UNSUPPORTED
  ///
  /// The ID is {@code -1} when the optional set of fields is unsupported.
  ///@see Face\#Face(Rect, int)
  ///@see \#getId()
  static const ID_UNSUPPORTED = -1;

  /// from: static public final int SCORE_MAX
  ///
  /// The maximum possible value for the confidence level.
  ///@see \#getScore()
  static const SCORE_MAX = 100;

  /// from: static public final int SCORE_MIN
  ///
  /// The minimum possible value for the confidence level.
  ///@see \#getScore()
  static const SCORE_MIN = 1;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/Rect;I)V");

  /// from: void <init>(android.graphics.Rect bounds, int score)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new face without the optional fields.
  ///
  /// The id, leftEyePosition, rightEyePosition, and mouthPosition are considered optional.
  /// If the id is {@value \#ID_UNSUPPORTED} then the leftEyePosition, rightEyePosition, and
  /// mouthPositions are guaranteed to be {@code null}. Otherwise, each of leftEyePosition,
  /// rightEyePosition, and mouthPosition may be independently null or not-null. When devices
  /// report the value of key CaptureResult\#STATISTICS_FACE_DETECT_MODE as
  /// CameraMetadata\#STATISTICS_FACE_DETECT_MODE_SIMPLE in CaptureResult,
  /// the face id of each face is expected to be {@value \#ID_UNSUPPORTED}, the leftEyePosition,
  /// rightEyePosition, and mouthPositions are expected to be {@code null} for each face.
  ///
  ///@param bounds Bounds of the face.
  ///@param score Confidence level between {@value \#SCORE_MIN}-{@value \#SCORE_MAX}.
  ///@throws IllegalArgumentException if bounds is {@code null},
  ///             or if the confidence is not in the range of
  ///             {@value \#SCORE_MIN}-{@value \#SCORE_MAX}.
  ///@hide
  Face(rect_.Rect bounds, int score)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [bounds.reference, score]).object);

  static final _id_getBounds = jniAccessors.getMethodIDOf(
      _classRef, "getBounds", "()Landroid/graphics/Rect;");

  /// from: public android.graphics.Rect getBounds()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Bounds of the face.
  ///
  /// A rectangle relative to the sensor's
  /// CameraCharacteristics\#SENSOR_INFO_ACTIVE_ARRAY_SIZE, with (0,0)
  /// representing the top-left corner of the active array rectangle.
  ///
  ///
  /// There is no constraints on the the Rectangle value other than it
  /// is not-{@code null}.
  ///
  rect_.Rect getBounds() => rect_.Rect.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getBounds, jni.JniType.objectType, []).object);

  static final _id_getScore =
      jniAccessors.getMethodIDOf(_classRef, "getScore", "()I");

  /// from: public int getScore()
  ///
  /// The confidence level for the detection of the face.
  ///
  /// The range is {@value \#SCORE_MIN} to {@value \#SCORE_MAX}.
  /// {@value \#SCORE_MAX} is the highest confidence.
  ///
  ///
  /// Depending on the device, even very low-confidence faces may be
  /// listed, so applications should filter out faces with low confidence,
  /// depending on the use case. For a typical point-and-shoot camera
  /// application that wishes to display rectangles around detected faces,
  /// filtering out faces with confidence less than half of {@value \#SCORE_MAX}
  /// is recommended.
  ///
  ///@see \#SCORE_MAX
  ///@see \#SCORE_MIN
  int getScore() => jniAccessors.callMethodWithArgs(
      reference, _id_getScore, jni.JniType.intType, []).integer;

  static final _id_getId =
      jniAccessors.getMethodIDOf(_classRef, "getId", "()I");

  /// from: public int getId()
  ///
  /// An unique id per face while the face is visible to the tracker.
  ///
  ///
  /// If the face leaves the field-of-view and comes back, it will get a new
  /// id.
  ///
  ///
  /// This is an optional field, may not be supported on all devices.
  /// If the id is {@value \#ID_UNSUPPORTED} then the leftEyePosition, rightEyePosition, and
  /// mouthPositions are guaranteed to be {@code null}. Otherwise, each of leftEyePosition,
  /// rightEyePosition, and mouthPosition may be independently null or not-null. When devices
  /// report the value of key CaptureResult\#STATISTICS_FACE_DETECT_MODE as
  /// CameraMetadata\#STATISTICS_FACE_DETECT_MODE_SIMPLE in CaptureResult,
  /// the face id of each face is expected to be {@value \#ID_UNSUPPORTED}.
  ///
  ///
  /// This value will either be {@value \#ID_UNSUPPORTED} or
  /// otherwise greater than {@code 0}.
  ///
  ///@see \#ID_UNSUPPORTED
  int getId() => jniAccessors.callMethodWithArgs(
      reference, _id_getId, jni.JniType.intType, []).integer;

  static final _id_getLeftEyePosition = jniAccessors.getMethodIDOf(
      _classRef, "getLeftEyePosition", "()Landroid/graphics/Point;");

  /// from: public android.graphics.Point getLeftEyePosition()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The coordinates of the center of the left eye.
  ///
  /// The coordinates are in
  /// the same space as the ones for \#getBounds. This is an
  /// optional field, may not be supported on all devices. If not
  /// supported, the value will always be set to null.
  /// This value will  always be null only if \#getId() returns
  /// {@value \#ID_UNSUPPORTED}.
  ///
  ///@return The left eye position, or {@code null} if unknown.
  point_.Point getLeftEyePosition() =>
      point_.Point.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getLeftEyePosition, jni.JniType.objectType, []).object);

  static final _id_getRightEyePosition = jniAccessors.getMethodIDOf(
      _classRef, "getRightEyePosition", "()Landroid/graphics/Point;");

  /// from: public android.graphics.Point getRightEyePosition()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The coordinates of the center of the right eye.
  ///
  /// The coordinates are
  /// in the same space as the ones for \#getBounds.This is an
  /// optional field, may not be supported on all devices. If not
  /// supported, the value will always be set to null.
  /// This value will  always be null only if \#getId() returns
  /// {@value \#ID_UNSUPPORTED}.
  ///
  ///@return The right eye position, or {@code null} if unknown.
  point_.Point getRightEyePosition() =>
      point_.Point.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getRightEyePosition, jni.JniType.objectType, []).object);

  static final _id_getMouthPosition = jniAccessors.getMethodIDOf(
      _classRef, "getMouthPosition", "()Landroid/graphics/Point;");

  /// from: public android.graphics.Point getMouthPosition()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The coordinates of the center of the mouth.
  ///
  /// The coordinates are in
  /// the same space as the ones for \#getBounds. This is an optional
  /// field, may not be supported on all devices. If not
  /// supported, the value will always be set to null.
  /// This value will  always be null only if \#getId() returns
  /// {@value \#ID_UNSUPPORTED}.
  ///
  ///
  ///
  ///@return The mouth position, or {@code null} if unknown.
  point_.Point getMouthPosition() =>
      point_.Point.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMouthPosition, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Represent the Face as a string for debugging purposes.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
