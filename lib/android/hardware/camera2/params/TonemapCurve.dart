// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../graphics/PointF.dart" as pointf_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.camera2.params.TonemapCurve
///
/// Immutable class for describing a {@code 2 x M x 3} tonemap curve of floats.
///
/// This defines red, green, and blue curves that the CameraDevice will
/// use as the tonemapping/contrast/gamma curve when CaptureRequest\#TONEMAP_MODE is
/// set to CameraMetadata\#TONEMAP_MODE_CONTRAST_CURVE.
///
///
/// The total number of points {@code (Pin, Pout)} for each color channel can be no more than
/// CameraCharacteristics\#TONEMAP_MAX_CURVE_POINTS.
///
///
/// The coordinate system for each point is within the inclusive range
/// [{@value \#LEVEL_BLACK}, {@value \#LEVEL_WHITE}].
///
///@see CaptureRequest\#TONEMAP_CURVE_BLUE
///@see CaptureRequest\#TONEMAP_CURVE_GREEN
///@see CaptureRequest\#TONEMAP_CURVE_RED
///@see CameraMetadata\#TONEMAP_MODE_CONTRAST_CURVE
///@see CameraCharacteristics\#TONEMAP_MAX_CURVE_POINTS
class TonemapCurve extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/camera2/params/TonemapCurve");
  TonemapCurve.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CHANNEL_BLUE
  ///
  /// Index of the blue color channel curve.
  static const CHANNEL_BLUE = 2;

  /// from: static public final int CHANNEL_GREEN
  ///
  /// Index of the green color channel curve.
  static const CHANNEL_GREEN = 1;

  /// from: static public final int CHANNEL_RED
  ///
  /// Index of the red color channel curve.
  static const CHANNEL_RED = 0;

  /// from: static public final float LEVEL_BLACK
  ///
  /// Lower bound tonemap value corresponding to pure black for a single color channel.
  static const LEVEL_BLACK = 0.0;

  /// from: static public final float LEVEL_WHITE
  ///
  /// Upper bound tonemap value corresponding to a pure white for a single color channel.
  static const LEVEL_WHITE = 1.0;

  /// from: static public final int POINT_SIZE
  ///
  /// Number of elements in a {@code (Pin, Pout)} point;
  static const POINT_SIZE = 2;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "([F[F[F)V");

  /// from: public void <init>(float[] red, float[] green, float[] blue)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new immutable TonemapCurve instance.
  ///
  /// Values are stored as a contiguous array of {@code (Pin, Pout)} points.
  ///
  ///
  /// All parameters may have independent length but should have at most
  /// CameraCharacteristics\#TONEMAP_MAX_CURVE_POINTS * {@value \#POINT_SIZE} elements and
  /// at least 2 * {@value \#POINT_SIZE} elements.
  ///
  ///
  /// All sub-elements must be in the inclusive range of
  /// [{@value \#LEVEL_BLACK}, {@value \#LEVEL_WHITE}].
  ///
  ///
  /// This constructor copies the array contents and does not retain ownership of the array.
  ///
  ///@param red An array of elements whose length is divisible by {@value \#POINT_SIZE}
  ///@param green An array of elements whose length is divisible by {@value \#POINT_SIZE}
  ///@param blue An array of elements whose length is divisible by {@value \#POINT_SIZE}
  ///@throws IllegalArgumentException if any of input array length is invalid,
  ///            or if any of the elements in the array are not in the range of
  ///            [{@value \#LEVEL_BLACK}, {@value \#LEVEL_WHITE}]
  ///@throws NullPointerException if any of the parameters are {@code null}
  TonemapCurve(jni.JniObject red, jni.JniObject green, jni.JniObject blue)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [red.reference, green.reference, blue.reference]).object);

  static final _id_getPointCount =
      jniAccessors.getMethodIDOf(_classRef, "getPointCount", "(I)I");

  /// from: public int getPointCount(int colorChannel)
  ///
  /// Get the number of points stored in this tonemap curve for the specified color channel.
  ///@param colorChannel one of \#CHANNEL_RED, \#CHANNEL_GREEN, \#CHANNEL_BLUE
  ///@return number of points stored in this tonemap for that color's curve (>= 0)
  ///@throws IllegalArgumentException if {@code colorChannel} was out of range
  int getPointCount(int colorChannel) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getPointCount,
      jni.JniType.intType,
      [colorChannel]).integer;

  static final _id_getPoint = jniAccessors.getMethodIDOf(
      _classRef, "getPoint", "(II)Landroid/graphics/PointF;");

  /// from: public android.graphics.PointF getPoint(int colorChannel, int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the point for a color channel at a specified index.
  ///
  /// The index must be at least 0 but no greater than \#getPointCount(int) for
  /// that {@code colorChannel}.
  ///
  ///
  /// All returned coordinates in the point are between the range of
  /// [{@value \#LEVEL_BLACK}, {@value \#LEVEL_WHITE}].
  ///
  ///@param colorChannel \#CHANNEL_RED, \#CHANNEL_GREEN, or \#CHANNEL_BLUE
  ///@param index at least 0 but no greater than {@code getPointCount(colorChannel)}
  ///@return the {@code (Pin, Pout)} pair mapping the tone for that index
  ///@throws IllegalArgumentException if {@code colorChannel} or {@code index} was out of range
  ///@see \#LEVEL_BLACK
  ///@see \#LEVEL_WHITE
  pointf_.PointF getPoint(int colorChannel, int index) =>
      pointf_.PointF.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getPoint, jni.JniType.objectType, [colorChannel, index]).object);

  static final _id_copyColorCurve =
      jniAccessors.getMethodIDOf(_classRef, "copyColorCurve", "(I[FI)V");

  /// from: public void copyColorCurve(int colorChannel, float[] destination, int offset)
  ///
  /// Copy the color curve for a single color channel from this tonemap curve into the destination.
  ///
  ///
  /// <!--The output is encoded the same as in the constructor -->
  /// Values are stored as packed {@code (Pin, Pout}) points, and there are a total of
  /// \#getPointCount points for that respective channel.
  ///
  ///
  /// All returned coordinates are between the range of
  /// [{@value \#LEVEL_BLACK}, {@value \#LEVEL_WHITE}].
  ///
  ///@param destination an array big enough to hold at least \#getPointCount {@code *}
  ///          \#POINT_SIZE elements after the {@code offset}
  ///@param offset a non-negative offset into the array
  ///@throws NullPointerException If {@code destination} was {@code null}
  ///@throws IllegalArgumentException If offset was negative
  ///@throws ArrayIndexOutOfBoundsException If there's not enough room to write the elements at the specified destination and
  ///          offset.
  ///@see CaptureRequest\#TONEMAP_CURVE_BLUE
  ///@see CaptureRequest\#TONEMAP_CURVE_RED
  ///@see CaptureRequest\#TONEMAP_CURVE_GREEN
  ///@see \#LEVEL_BLACK
  ///@see \#LEVEL_WHITE
  void copyColorCurve(
          int colorChannel, jni.JniObject destination, int offset) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_copyColorCurve,
          jni.JniType.voidType,
          [colorChannel, destination.reference, offset]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  ///
  /// Check if this TonemapCurve is equal to another TonemapCurve.
  ///
  /// Two matrices are equal if and only if all of their elements are
  /// Object\#equals equal.
  ///
  ///@return {@code true} if the objects were equal, {@code false} otherwise
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// {@inheritDoc}
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the TonemapCurve as a string representation.
  ///
  ///  {@code "TonemapCurve{R:[(%f, %f), (%f, %f) ... (%f, %f)], G:[(%f, %f), (%f, %f) ...
  /// (%f, %f)], B:[(%f, %f), (%f, %f) ... (%f, %f)]}"},
  /// where each {@code (%f, %f)} respectively represents one point of the corresponding
  /// tonemap curve.
  ///
  ///@return string representation of TonemapCurve
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
