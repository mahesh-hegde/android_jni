// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../graphics/Point.dart" as point_;

import "../../../util/Size.dart" as size_;

import "../../../graphics/Rect.dart" as rect_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.camera2.params.MeteringRectangle
///
/// An immutable class to represent a rectangle {@code (x, y, width, height)} with an additional
/// weight component.
///
/// The rectangle is defined to be inclusive of the specified coordinates.
///
///
///
/// When used with a CaptureRequest, the coordinate system is based on the active pixel
/// array, with {@code (0,0)} being the top-left pixel in the
/// CameraCharacteristics\#SENSOR_INFO_ACTIVE_ARRAY_SIZE active pixel array, and
/// {@code (android.sensor.info.activeArraySize.width - 1,
/// android.sensor.info.activeArraySize.height - 1)} being the bottom-right pixel in the active pixel
/// array.
///
///
///
/// The weight must range from {@value \#METERING_WEIGHT_MIN} to {@value \#METERING_WEIGHT_MAX}
/// inclusively, and represents a weight for every pixel in the area. This means that a large
/// metering area with the same weight as a smaller area will have more effect in the metering
/// result. Metering areas can partially overlap and the camera device will add the weights in the
/// overlap rectangle.
///
///
///
/// If all rectangles have 0 weight, then no specific metering area needs to be used by the camera
/// device. If the metering rectangle is outside the used android.scaler.cropRegion returned in
/// capture result metadata, the camera device will ignore the sections outside the rectangle and
/// output the used sections in the result metadata.
///
///
class MeteringRectangle extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/hardware/camera2/params/MeteringRectangle");
  MeteringRectangle.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int METERING_WEIGHT_DONT_CARE
  ///
  /// Weights set to this value will cause the camera device to ignore this rectangle.
  /// If all metering rectangles are weighed with 0, the camera device will choose its own metering
  /// rectangles.
  static const METERING_WEIGHT_DONT_CARE = 0;

  /// from: static public final int METERING_WEIGHT_MAX
  ///
  /// The maximum value of valid metering weight.
  static const METERING_WEIGHT_MAX = 1000;

  /// from: static public final int METERING_WEIGHT_MIN
  ///
  /// The minimum value of valid metering weight.
  static const METERING_WEIGHT_MIN = 0;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIIII)V");

  /// from: public void <init>(int x, int y, int width, int height, int meteringWeight)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new metering rectangle.
  ///@param x coordinate >= 0
  ///@param y coordinate >= 0
  ///@param width width >= 0
  ///@param height height >= 0
  ///@param meteringWeight weight between {@value \#METERING_WEIGHT_MIN} and
  ///        {@value \#METERING_WEIGHT_MAX} inclusively
  ///@throws IllegalArgumentException if any of the parameters were negative
  MeteringRectangle(int x, int y, int width, int height, int meteringWeight)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [x, y, width, height, meteringWeight]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/Point;Landroid/util/Size;I)V");

  /// from: public void <init>(android.graphics.Point xy, android.util.Size dimensions, int meteringWeight)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new metering rectangle.
  ///
  /// The point {@code xy}'s data is copied; the reference is not retained.
  ///
  ///@param xy a non-{@code null} Point with both x,y >= 0
  ///@param dimensions a non-{@code null} android.util.Size Size with width, height >= 0
  ///@param meteringWeight weight >= 0
  ///@throws IllegalArgumentException if any of the parameters were negative
  ///@throws NullPointerException if any of the arguments were null
  MeteringRectangle.ctor1(
      point_.Point xy, size_.Size dimensions, int meteringWeight)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [xy.reference, dimensions.reference, meteringWeight]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/Rect;I)V");

  /// from: public void <init>(android.graphics.Rect rect, int meteringWeight)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new metering rectangle.
  ///
  /// The rectangle data is copied; the reference is not retained.
  ///
  ///@param rect a non-{@code null} rectangle with all x,y,w,h dimensions >= 0
  ///@param meteringWeight weight >= 0
  ///@throws IllegalArgumentException if any of the parameters were negative
  ///@throws NullPointerException if any of the arguments were null
  MeteringRectangle.ctor2(rect_.Rect rect, int meteringWeight)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [rect.reference, meteringWeight]).object);

  static final _id_getX = jniAccessors.getMethodIDOf(_classRef, "getX", "()I");

  /// from: public int getX()
  ///
  /// Return the X coordinate of the left side of the rectangle.
  ///@return x coordinate >= 0
  int getX() => jniAccessors
      .callMethodWithArgs(reference, _id_getX, jni.JniType.intType, []).integer;

  static final _id_getY = jniAccessors.getMethodIDOf(_classRef, "getY", "()I");

  /// from: public int getY()
  ///
  /// Return the Y coordinate of the upper side of the rectangle.
  ///@return y coordinate >= 0
  int getY() => jniAccessors
      .callMethodWithArgs(reference, _id_getY, jni.JniType.intType, []).integer;

  static final _id_getWidth =
      jniAccessors.getMethodIDOf(_classRef, "getWidth", "()I");

  /// from: public int getWidth()
  ///
  /// Return the width of the rectangle.
  ///@return width >= 0
  int getWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getWidth, jni.JniType.intType, []).integer;

  static final _id_getHeight =
      jniAccessors.getMethodIDOf(_classRef, "getHeight", "()I");

  /// from: public int getHeight()
  ///
  /// Return the height of the rectangle.
  ///@return height >= 0
  int getHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getHeight, jni.JniType.intType, []).integer;

  static final _id_getMeteringWeight =
      jniAccessors.getMethodIDOf(_classRef, "getMeteringWeight", "()I");

  /// from: public int getMeteringWeight()
  ///
  /// Return the metering weight of the rectangle.
  ///@return weight >= 0
  int getMeteringWeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getMeteringWeight, jni.JniType.intType, []).integer;

  static final _id_getUpperLeftPoint = jniAccessors.getMethodIDOf(
      _classRef, "getUpperLeftPoint", "()Landroid/graphics/Point;");

  /// from: public android.graphics.Point getUpperLeftPoint()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method to create the upper-left (X,Y) coordinate as a Point.
  ///@return a new {@code (x,y)} Point with both x,y >= 0
  point_.Point getUpperLeftPoint() =>
      point_.Point.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUpperLeftPoint, jni.JniType.objectType, []).object);

  static final _id_getSize =
      jniAccessors.getMethodIDOf(_classRef, "getSize", "()Landroid/util/Size;");

  /// from: public android.util.Size getSize()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method to create the size from this metering rectangle.
  ///
  /// This strips away the X,Y,weight from the rectangle.
  ///
  ///@return a new Size with non-negative width and height
  size_.Size getSize() => size_.Size.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getSize, jni.JniType.objectType, []).object);

  static final _id_getRect = jniAccessors.getMethodIDOf(
      _classRef, "getRect", "()Landroid/graphics/Rect;");

  /// from: public android.graphics.Rect getRect()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method to create a Rect from this metering rectangle.
  ///
  /// This strips away the weight from the rectangle.
  ///
  ///@return a new Rect with non-negative x1, y1, x2, y2
  rect_.Rect getRect() => rect_.Rect.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getRect, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object other)
  ///
  /// {@inheritDoc}
  bool equals1(jni.JniObject other) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [other.reference]).boolean;

  static final _id_equals2 = jniAccessors.getMethodIDOf(_classRef, "equals",
      "(Landroid/hardware/camera2/params/MeteringRectangle;)Z");

  /// from: public boolean equals(android.hardware.camera2.params.MeteringRectangle other)
  ///
  /// Compare two metering rectangles to see if they are equal.
  ///
  /// Two weighted rectangles are only considered equal if each of their components
  /// (x, y, width, height, weight) is respectively equal.
  ///@param other Another MeteringRectangle
  ///@return {@code true} if the metering rectangles are equal, {@code false} otherwise
  bool equals2(MeteringRectangle other) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals2,
      jni.JniType.booleanType,
      [other.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// {@inheritDoc}
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the metering rectangle as a string representation
  /// {@code "(x:%d, y:%d, w:%d, h:%d, wt:%d)"} where each {@code %d} respectively represents
  /// the x, y, width, height, and weight points.
  ///@return string representation of the metering rectangle
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
