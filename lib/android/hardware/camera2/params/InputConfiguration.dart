// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.camera2.params.InputConfiguration
///
/// Immutable class to store an input configuration that is used to create a reprocessable capture
/// session.
///@see android.hardware.camera2.CameraDevice\#createReprocessableCaptureSession
///@see android.hardware.camera2.CameraCharacteristics\#SCALER_STREAM_CONFIGURATION_MAP
class InputConfiguration extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/hardware/camera2/params/InputConfiguration");
  InputConfiguration.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(III)V");

  /// from: public void <init>(int width, int height, int format)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an input configration with the width, height, and user-defined format.
  ///
  /// Images of an user-defined format are accessible by applications. Use
  /// android.hardware.camera2.CameraCharacteristics\#SCALER_STREAM_CONFIGURATION_MAP
  /// to query supported input formats
  ///
  ///@param width Width of the input buffers.
  ///@param height Height of the input buffers.
  ///@param format Format of the input buffers. One of ImageFormat or PixelFormat constants.
  ///@see android.graphics.ImageFormat
  ///@see android.graphics.PixelFormat
  ///@see android.hardware.camera2.CameraCharacteristics\#SCALER_STREAM_CONFIGURATION_MAP
  InputConfiguration(int width, int height, int format)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [width, height, format]).object);

  static final _id_getWidth =
      jniAccessors.getMethodIDOf(_classRef, "getWidth", "()I");

  /// from: public int getWidth()
  ///
  /// Get the width of this input configration.
  ///@return width of this input configuration.
  int getWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getWidth, jni.JniType.intType, []).integer;

  static final _id_getHeight =
      jniAccessors.getMethodIDOf(_classRef, "getHeight", "()I");

  /// from: public int getHeight()
  ///
  /// Get the height of this input configration.
  ///@return height of this input configuration.
  int getHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getHeight, jni.JniType.intType, []).integer;

  static final _id_getFormat =
      jniAccessors.getMethodIDOf(_classRef, "getFormat", "()I");

  /// from: public int getFormat()
  ///
  /// Get the format of this input configration.
  ///@return format of this input configuration.
  int getFormat() => jniAccessors.callMethodWithArgs(
      reference, _id_getFormat, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  ///
  /// Check if this InputConfiguration is equal to another InputConfiguration.
  ///
  /// Two input configurations are equal if and only if they have the same widths, heights, and
  /// formats.
  ///
  ///@param obj the object to compare this instance with.
  ///@return {@code true} if the objects were equal, {@code false} otherwise.
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// {@inheritDoc}
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return this InputConfiguration as a string representation.
  ///
  ///  {@code "InputConfiguration(w:%d, h:%d, format:%d)"}, where {@code %d} represents
  /// the width, height, and format, respectively.
  ///
  ///@return string representation of InputConfiguration
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
