// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "CaptureResult.dart" as captureresult_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.camera2.TotalCaptureResult
///
/// The total assembled results of a single image capture from the image sensor.
///
///
/// Contains the final configuration for the capture hardware (sensor, lens,
/// flash), the processing pipeline, the control algorithms, and the output
/// buffers.
///
///
/// A {@code TotalCaptureResult} is produced by a CameraDevice after processing a
/// CaptureRequest. All properties listed for capture requests can also
/// be queried on the capture result, to determine the final values used for
/// capture. The result also includes additional metadata about the state of the
/// camera device during the capture.
///
///
/// All properties returned by CameraCharacteristics\#getAvailableCaptureResultKeys()
/// are available (that is CaptureResult\#get will return non-{@code null}, if and only if
/// that key that was enabled by the request. A few keys such as
/// CaptureResult\#STATISTICS_FACES are disabled by default unless enabled with a switch (such
/// as CaptureRequest\#STATISTICS_FACE_DETECT_MODE). Refer to each key documentation on
/// a case-by-case basis.
///
///
/// For a logical multi-camera device, if the CaptureRequest contains a surface for an underlying
/// physical camera, the corresponding TotalCaptureResult object will include the metadata
/// for that physical camera. And the mapping between the physical camera id and result metadata
/// can be accessed via \#getPhysicalCameraResults. If all requested surfaces are for the
/// logical camera, no metadata for physical camera will be included.
///
///
/// TotalCaptureResult objects are immutable.
///
///@see CameraDevice.CaptureCallback\#onCaptureCompleted
class TotalCaptureResult extends captureresult_.CaptureResult {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/camera2/TotalCaptureResult");
  TotalCaptureResult.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getPartialResults = jniAccessors.getMethodIDOf(
      _classRef, "getPartialResults", "()Ljava/util/List;");

  /// from: public java.util.List<android.hardware.camera2.CaptureResult> getPartialResults()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the read-only list of partial results that compose this total result.
  ///
  /// The list is returned is unmodifiable; attempting to modify it will result in a
  /// {@code UnsupportedOperationException} being thrown.
  ///
  ///
  /// The list size will be inclusive between {@code 0} and
  /// CameraCharacteristics\#REQUEST_PARTIAL_RESULT_COUNT, with elements in ascending order
  /// of when CameraCaptureSession.CaptureCallback\#onCaptureProgressed was invoked.
  ///
  ///@return unmodifiable list of partial results
  ///
  /// This value will never be {@code null}.
  jni.JniObject getPartialResults() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPartialResults, jni.JniType.objectType, []).object);

  static final _id_getPhysicalCameraResults = jniAccessors.getMethodIDOf(
      _classRef, "getPhysicalCameraResults", "()Ljava/util/Map;");

  /// from: public java.util.Map<java.lang.String,android.hardware.camera2.CaptureResult> getPhysicalCameraResults()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the map between physical camera ids and their capture result metadata
  ///
  /// This function can be called for logical multi-camera devices, which are devices that have
  /// REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA capability and calls to CameraCharacteristics\#getPhysicalCameraIds return a non-empty set of physical devices that
  /// are backing the logical camera.
  ///
  ///
  /// If one or more streams from the underlying physical cameras were requested by the
  /// corresponding capture request, this function returns the result metadata for those physical
  /// cameras. Otherwise, an empty map is returned.
  ///
  ///@return unmodifiable map between physical camera ids and their capture result metadata
  jni.JniObject getPhysicalCameraResults() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getPhysicalCameraResults, jni.JniType.objectType, []).object);
}
