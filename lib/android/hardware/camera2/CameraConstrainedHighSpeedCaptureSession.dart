// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "CameraCaptureSession.dart" as cameracapturesession_;

import "CaptureRequest.dart" as capturerequest_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession
///
/// A constrained high speed capture session for a CameraDevice, used for capturing high
/// speed images from the CameraDevice for high speed video recording use case.
///
/// A CameraHighSpeedCaptureSession is created by providing a set of target output surfaces to
/// CameraDevice\#createConstrainedHighSpeedCaptureSession, Once created, the session is
/// active until a new session is created by the camera device, or the camera device is closed.
///
///
///
/// An active high speed capture session is a specialized capture session that is only targeted at
/// high speed video recording (>=120fps) use case if the camera device supports high speed video
/// capability (i.e., CameraCharacteristics\#REQUEST_AVAILABLE_CAPABILITIES contains
/// CameraMetadata\#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO). It only
/// accepts request lists created via \#createHighSpeedRequestList, and the request list can
/// only be submitted to this session via CameraCaptureSession\#captureBurst captureBurst, or
/// CameraCaptureSession\#setRepeatingBurst setRepeatingBurst. See
/// CameraDevice\#createConstrainedHighSpeedCaptureSession for more details of the
/// limitations.
///
///
///
/// Creating a session is an expensive operation and can take several hundred milliseconds, since it
/// requires configuring the camera device's internal pipelines and allocating memory buffers for
/// sending images to the desired targets. Therefore the setup is done asynchronously, and
/// CameraDevice\#createConstrainedHighSpeedCaptureSession will send the ready-to-use
/// CameraCaptureSession to the provided listener's
/// CameraCaptureSession.StateCallback\#onConfigured callback. If configuration cannot be
/// completed, then the CameraCaptureSession.StateCallback\#onConfigureFailed is called, and
/// the session will not become active.
///
///
/// <!--
///
/// Any capture requests (repeating or non-repeating) submitted before the session is ready will be
/// queued up and will begin capture once the session becomes ready. In case the session cannot be
/// configured and CameraCaptureSession.StateCallback\#onConfigureFailed onConfigureFailed is
/// called, all queued capture requests are discarded.
///
/// -->
///
/// If a new session is created by the camera device, then the previous session is closed, and its
/// associated CameraCaptureSession.StateCallback\#onClosed onClosed callback will be
/// invoked. All of the session methods will throw an IllegalStateException if called once the
/// session is closed.
///
///
///
/// A closed session clears any repeating requests (as if \#stopRepeating had been called),
/// but will still complete all of its in-progress capture requests as normal, before a newly created
/// session takes over and reconfigures the camera device.
///
///
class CameraConstrainedHighSpeedCaptureSession
    extends cameracapturesession_.CameraCaptureSession {
  static final _classRef = jniAccessors.getClassOf(
      "android/hardware/camera2/CameraConstrainedHighSpeedCaptureSession");
  CameraConstrainedHighSpeedCaptureSession.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  CameraConstrainedHighSpeedCaptureSession()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_createHighSpeedRequestList = jniAccessors.getMethodIDOf(
      _classRef,
      "createHighSpeedRequestList",
      "(Landroid/hardware/camera2/CaptureRequest;)Ljava/util/List;");

  /// from: public abstract java.util.List<android.hardware.camera2.CaptureRequest> createHighSpeedRequestList(android.hardware.camera2.CaptureRequest request)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a unmodifiable list of requests that is suitable for constrained high speed capture
  /// session streaming.
  ///
  ///
  /// High speed video streaming creates significant performance pressure on the camera device,
  /// so to achieve efficient high speed streaming, the camera device may have to aggregate
  /// multiple frames together. This means requests must be sent in batched groups, with all
  /// requests sharing the same settings. This method takes the list of output target
  /// Surfaces (subject to the output Surface requirements specified by the constrained high speed
  /// session) and a CaptureRequest request, and generates a request list that has the same
  /// controls for each request. The input CaptureRequest request must contain the target
  /// output Surfaces and target high speed FPS range that is one of the
  /// StreamConfigurationMap\#getHighSpeedVideoFpsRangesFor for the Surface size.
  ///
  ///
  /// If both preview and recording Surfaces are specified in the {@code request}, the
  /// CaptureRequest\#CONTROL_AE_TARGET_FPS_RANGE target FPS range in the input
  /// CaptureRequest request must be a fixed frame rate FPS range, where the
  /// android.util.Range\#getLower minimal FPS ==
  /// android.util.Range\#getUpper() maximum FPS. The created request list will contain
  /// a interleaved request pattern such that the preview output FPS is at least 30fps, the
  /// recording output FPS is android.util.Range\#getUpper() maximum FPS of the requested
  /// FPS range. The application can submit this request list directly to an active high speed
  /// capture session to achieve high speed video recording. When only preview or recording
  /// Surface is specified, this method will return a list of request that have the same controls
  /// and output targets for all requests.
  ///
  ///
  /// Submitting a request list created by this method to a normal capture session will result
  /// in an IllegalArgumentException if the high speed
  /// CaptureRequest\#CONTROL_AE_TARGET_FPS_RANGE FPS range is not supported by
  /// CameraCharacteristics\#CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES.
  ///
  ///@param request The high speed capture request that will be used to generate the high speed
  ///                request list.
  /// This value must never be {@code null}.
  ///@return A unmodifiable CaptureRequest list that is suitable for constrained high speed
  ///         capture.
  ///
  /// This value will never be {@code null}.
  ///@throws IllegalArgumentException if the set of output Surfaces in the request do not meet the
  ///                                  high speed video capability requirements, or the camera
  ///                                  device doesn't support high speed video capability, or the
  ///                                  request doesn't meet the high speed video capability
  ///                                  requirements, or the request doesn't contain the required
  ///                                  controls for high speed capture.
  ///@throws CameraAccessException if the camera device is no longer connected or has
  ///                               encountered a fatal error
  ///@throws IllegalStateException if the camera device has been closed
  ///@see CameraDevice\#createConstrainedHighSpeedCaptureSession
  ///@see CaptureRequest\#CONTROL_AE_TARGET_FPS_RANGE
  ///@see android.hardware.camera2.params.StreamConfigurationMap\#getHighSpeedVideoSizes
  ///@see android.hardware.camera2.params.StreamConfigurationMap\#getHighSpeedVideoFpsRangesFor
  ///@see CameraCharacteristics\#REQUEST_AVAILABLE_CAPABILITIES
  ///@see CameraMetadata\#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO
  jni.JniObject createHighSpeedRequestList(
          capturerequest_.CaptureRequest request) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createHighSpeedRequestList,
          jni.JniType.objectType,
          [request.reference]).object);
}
