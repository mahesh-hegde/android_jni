// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Sensor.dart" as sensor_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.TriggerEvent
///
/// This class represents a Trigger Event - the event
/// associated with a Trigger Sensor. When the sensor detects a trigger
/// event condition, such as significant motion in the case of the
/// Sensor\#TYPE_SIGNIFICANT_MOTION, the TriggerEventListener
/// is called with the TriggerEvent. The sensor is automatically canceled
/// after the trigger.
///
/// This class holds information such as the value of the sensor
/// when the trigger happened, the timestamp along with detailed
/// information regarding the Sensor itself.
///
///
///@see android.hardware.SensorManager
///@see android.hardware.TriggerEvent
///@see android.hardware.Sensor
class TriggerEvent extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/TriggerEvent");
  TriggerEvent.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_sensor = jniAccessors.getFieldIDOf(
      _classRef, "sensor", "Landroid/hardware/Sensor;");

  /// from: public android.hardware.Sensor sensor
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The sensor that generated this event. See
  /// android.hardware.SensorManager SensorManager for details.
  sensor_.Sensor get sensor => sensor_.Sensor.fromRef(jniAccessors
      .getField(reference, _id_sensor, jni.JniType.objectType)
      .object);

  /// from: public android.hardware.Sensor sensor
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The sensor that generated this event. See
  /// android.hardware.SensorManager SensorManager for details.
  set sensor(sensor_.Sensor value) =>
      jniEnv.SetObjectField(reference, _id_sensor, value.reference);

  static final _id_timestamp =
      jniAccessors.getFieldIDOf(_classRef, "timestamp", "J");

  /// from: public long timestamp
  ///
  /// The time in nanosecond at which the event happened
  int get timestamp => jniAccessors
      .getField(reference, _id_timestamp, jni.JniType.longType)
      .long;

  /// from: public long timestamp
  ///
  /// The time in nanosecond at which the event happened
  set timestamp(int value) =>
      jniEnv.SetLongField(reference, _id_timestamp, value);

  static final _id_values =
      jniAccessors.getFieldIDOf(_classRef, "values", "[F");

  /// from: public final float[] values
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  ///
  /// The length and contents of the \#values values array depends on
  /// which android.hardware.Sensor sensor type is being monitored (see
  /// also SensorEvent for a definition of the coordinate system used).
  ///
  ///
  /// <h4> Sensor\#TYPE_SIGNIFICANT_MOTION </h4>
  /// The value field is of length 1. value[0] = 1.0 when the sensor triggers.
  /// 1.0 is the only allowed value.
  jni.JniObject get values => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_values, jni.JniType.objectType)
      .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: void <init>(int size)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TriggerEvent(int size)
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [size]).object);
}
