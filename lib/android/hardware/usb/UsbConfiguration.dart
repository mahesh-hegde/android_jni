// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "UsbInterface.dart" as usbinterface_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.usb.UsbConfiguration
///
/// A class representing a configuration on a UsbDevice.
/// A USB configuration can have one or more interfaces, each one providing a different
/// piece of functionality, separate from the other interfaces.
/// An interface will have one or more UsbEndpoints, which are the
/// channels by which the host transfers data with the device.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about communicating with USB hardware, read the
/// <a href="{@docRoot}guide/topics/usb/index.html">USB</a> developer guide.
///
/// </div>
class UsbConfiguration extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/usb/UsbConfiguration");
  UsbConfiguration.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.hardware.usb.UsbConfiguration> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(ILjava/lang/String;II)V");

  /// from: void <init>(int id, java.lang.String name, int attributes, int maxPower)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// UsbConfiguration should only be instantiated by UsbService implementation
  ///@hide
  UsbConfiguration(int id, jni.JniString name, int attributes, int maxPower)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [id, name.reference, attributes, maxPower]).object);

  static final _id_getId =
      jniAccessors.getMethodIDOf(_classRef, "getId", "()I");

  /// from: public int getId()
  ///
  /// Returns the configuration's ID field.
  /// This is an integer that uniquely identifies the configuration on the device.
  ///@return the configuration's ID
  int getId() => jniAccessors.callMethodWithArgs(
      reference, _id_getId, jni.JniType.intType, []).integer;

  static final _id_getName =
      jniAccessors.getMethodIDOf(_classRef, "getName", "()Ljava/lang/String;");

  /// from: public java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the configuration's name.
  ///@return the configuration's name, or {@code null} if the property could not be read
  jni.JniString getName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_isSelfPowered =
      jniAccessors.getMethodIDOf(_classRef, "isSelfPowered", "()Z");

  /// from: public boolean isSelfPowered()
  ///
  /// Returns the self-powered attribute value configuration's attributes field.
  /// This attribute indicates that the device has a power source other than the USB connection.
  ///@return the configuration's self-powered attribute
  bool isSelfPowered() => jniAccessors.callMethodWithArgs(
      reference, _id_isSelfPowered, jni.JniType.booleanType, []).boolean;

  static final _id_isRemoteWakeup =
      jniAccessors.getMethodIDOf(_classRef, "isRemoteWakeup", "()Z");

  /// from: public boolean isRemoteWakeup()
  ///
  /// Returns the remote-wakeup attribute value configuration's attributes field.
  /// This attributes that the device may signal the host to wake from suspend.
  ///@return the configuration's remote-wakeup attribute
  bool isRemoteWakeup() => jniAccessors.callMethodWithArgs(
      reference, _id_isRemoteWakeup, jni.JniType.booleanType, []).boolean;

  static final _id_getMaxPower =
      jniAccessors.getMethodIDOf(_classRef, "getMaxPower", "()I");

  /// from: public int getMaxPower()
  ///
  /// Returns the configuration's max power consumption, in milliamps.
  ///@return the configuration's max power
  int getMaxPower() => jniAccessors.callMethodWithArgs(
      reference, _id_getMaxPower, jni.JniType.intType, []).integer;

  static final _id_getInterfaceCount =
      jniAccessors.getMethodIDOf(_classRef, "getInterfaceCount", "()I");

  /// from: public int getInterfaceCount()
  ///
  /// Returns the number of UsbInterfaces this configuration contains.
  ///@return the number of endpoints
  int getInterfaceCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getInterfaceCount, jni.JniType.intType, []).integer;

  static final _id_getInterface = jniAccessors.getMethodIDOf(
      _classRef, "getInterface", "(I)Landroid/hardware/usb/UsbInterface;");

  /// from: public android.hardware.usb.UsbInterface getInterface(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the UsbInterface at the given index.
  ///@return the interface
  ///
  /// This value will never be {@code null}.
  usbinterface_.UsbInterface getInterface(int index) =>
      usbinterface_.UsbInterface.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getInterface, jni.JniType.objectType, [index]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}
