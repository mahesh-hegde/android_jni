// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "UsbDeviceConnection.dart" as usbdeviceconnection_;

import "UsbDevice.dart" as usbdevice_;

import "../../os/ParcelFileDescriptor.dart" as parcelfiledescriptor_;

import "UsbAccessory.dart" as usbaccessory_;

import "../../app/PendingIntent.dart" as pendingintent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.usb.UsbManager
///
/// This class allows you to access the state of USB and communicate with USB devices.
/// Currently only host mode is supported in the public API.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about communicating with USB hardware, read the
/// <a href="{@docRoot}guide/topics/connectivity/usb/index.html">USB developer guide</a>.
///
/// </div>
class UsbManager extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/usb/UsbManager");
  UsbManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_USB_ACCESSORY_ATTACHED
  ///
  /// Activity intent sent when user attaches a USB accessory.
  ///
  /// <ul>
  /// <li> \#EXTRA_ACCESSORY containing the android.hardware.usb.UsbAccessory
  /// for the attached accessory
  /// </ul>
  static const ACTION_USB_ACCESSORY_ATTACHED =
      "android.hardware.usb.action.USB_ACCESSORY_ATTACHED";

  /// from: static public final java.lang.String ACTION_USB_ACCESSORY_DETACHED
  ///
  /// Broadcast Action:  A broadcast for USB accessory detached event.
  ///
  /// This intent is sent when a USB accessory is detached.
  /// <ul>
  /// <li> \#EXTRA_ACCESSORY containing the UsbAccessory
  /// for the attached accessory that was detached
  /// </ul>
  static const ACTION_USB_ACCESSORY_DETACHED =
      "android.hardware.usb.action.USB_ACCESSORY_DETACHED";

  /// from: static public final java.lang.String ACTION_USB_DEVICE_ATTACHED
  ///
  /// Activity intent sent when user attaches a USB device.
  ///
  /// This intent is sent when a USB device is attached to the USB bus when in host mode.
  /// <ul>
  /// <li> \#EXTRA_DEVICE containing the android.hardware.usb.UsbDevice
  /// for the attached device
  /// </ul>
  static const ACTION_USB_DEVICE_ATTACHED =
      "android.hardware.usb.action.USB_DEVICE_ATTACHED";

  /// from: static public final java.lang.String ACTION_USB_DEVICE_DETACHED
  ///
  /// Broadcast Action:  A broadcast for USB device detached event.
  ///
  /// This intent is sent when a USB device is detached from the USB bus when in host mode.
  /// <ul>
  /// <li> \#EXTRA_DEVICE containing the android.hardware.usb.UsbDevice
  /// for the detached device
  /// </ul>
  static const ACTION_USB_DEVICE_DETACHED =
      "android.hardware.usb.action.USB_DEVICE_DETACHED";

  /// from: static public final java.lang.String EXTRA_ACCESSORY
  ///
  /// Name of extra for \#ACTION_USB_ACCESSORY_ATTACHED and
  /// \#ACTION_USB_ACCESSORY_DETACHED broadcasts
  /// containing the UsbAccessory object for the accessory.
  static const EXTRA_ACCESSORY = "accessory";

  /// from: static public final java.lang.String EXTRA_DEVICE
  ///
  /// Name of extra for \#ACTION_USB_DEVICE_ATTACHED and
  /// \#ACTION_USB_DEVICE_DETACHED broadcasts
  /// containing the UsbDevice object for the device.
  static const EXTRA_DEVICE = "device";

  /// from: static public final java.lang.String EXTRA_PERMISSION_GRANTED
  ///
  /// Name of extra added to the android.app.PendingIntent
  /// passed into \#requestPermission(UsbDevice, PendingIntent)
  /// or \#requestPermission(UsbAccessory, PendingIntent)
  /// containing a boolean value indicating whether the user granted permission or not.
  static const EXTRA_PERMISSION_GRANTED = "permission";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  UsbManager()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getDeviceList = jniAccessors.getMethodIDOf(
      _classRef, "getDeviceList", "()Ljava/util/HashMap;");

  /// from: public java.util.HashMap<java.lang.String,android.hardware.usb.UsbDevice> getDeviceList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a HashMap containing all USB devices currently attached.
  /// USB device name is the key for the returned HashMap.
  /// The result will be empty if no devices are attached, or if
  /// USB host mode is inactive or unsupported.
  ///
  /// Requires the android.content.pm.PackageManager\#FEATURE_USB_HOST PackageManager\#FEATURE_USB_HOST feature which can be detected using android.content.pm.PackageManager\#hasSystemFeature(String) PackageManager.hasSystemFeature(String).
  ///@return HashMap containing all connected USB devices.
  jni.JniObject getDeviceList() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDeviceList, jni.JniType.objectType, []).object);

  static final _id_openDevice = jniAccessors.getMethodIDOf(
      _classRef,
      "openDevice",
      "(Landroid/hardware/usb/UsbDevice;)Landroid/hardware/usb/UsbDeviceConnection;");

  /// from: public android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice device)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Opens the device so it can be used to send and receive
  /// data using android.hardware.usb.UsbRequest.
  ///
  /// Requires the android.content.pm.PackageManager\#FEATURE_USB_HOST PackageManager\#FEATURE_USB_HOST feature which can be detected using android.content.pm.PackageManager\#hasSystemFeature(String) PackageManager.hasSystemFeature(String).
  ///@param device the device to open
  ///@return a UsbDeviceConnection, or {@code null} if open failed
  usbdeviceconnection_.UsbDeviceConnection openDevice(
          usbdevice_.UsbDevice device) =>
      usbdeviceconnection_.UsbDeviceConnection.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_openDevice, jni.JniType.objectType,
              [device.reference]).object);

  static final _id_getAccessoryList = jniAccessors.getMethodIDOf(
      _classRef, "getAccessoryList", "()[Landroid/hardware/usb/UsbAccessory;");

  /// from: public android.hardware.usb.UsbAccessory[] getAccessoryList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a list of currently attached USB accessories.
  /// (in the current implementation there can be at most one)
  ///
  /// Requires the android.content.pm.PackageManager\#FEATURE_USB_ACCESSORY PackageManager\#FEATURE_USB_ACCESSORY feature which can be detected using android.content.pm.PackageManager\#hasSystemFeature(String) PackageManager.hasSystemFeature(String).
  ///@return list of USB accessories, or null if none are attached.
  jni.JniObject getAccessoryList() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAccessoryList, jni.JniType.objectType, []).object);

  static final _id_openAccessory = jniAccessors.getMethodIDOf(
      _classRef,
      "openAccessory",
      "(Landroid/hardware/usb/UsbAccessory;)Landroid/os/ParcelFileDescriptor;");

  /// from: public android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory accessory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Opens a file descriptor for reading and writing data to the USB accessory.
  ///
  /// If data is read from the java.io.InputStream created from this file descriptor all
  /// data of a USB transfer should be read at once. If only a partial request is read the rest of
  /// the transfer is dropped.
  ///
  /// Requires the android.content.pm.PackageManager\#FEATURE_USB_ACCESSORY PackageManager\#FEATURE_USB_ACCESSORY feature which can be detected using android.content.pm.PackageManager\#hasSystemFeature(String) PackageManager.hasSystemFeature(String).
  ///@param accessory the USB accessory to open
  ///@return file descriptor, or null if the accessory could not be opened.
  parcelfiledescriptor_.ParcelFileDescriptor openAccessory(
          usbaccessory_.UsbAccessory accessory) =>
      parcelfiledescriptor_.ParcelFileDescriptor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_openAccessory,
              jni.JniType.objectType, [accessory.reference]).object);

  static final _id_hasPermission = jniAccessors.getMethodIDOf(
      _classRef, "hasPermission", "(Landroid/hardware/usb/UsbDevice;)Z");

  /// from: public boolean hasPermission(android.hardware.usb.UsbDevice device)
  ///
  /// Returns true if the caller has permission to access the device.
  /// Permission might have been granted temporarily via
  /// \#requestPermission(UsbDevice, PendingIntent) or
  /// by the user choosing the caller as the default application for the device.
  /// Permission for USB devices of class UsbConstants\#USB_CLASS_VIDEO for clients that
  /// target SDK android.os.Build.VERSION_CODES\#P and above can be granted only if they
  /// have additionally the android.Manifest.permission\#CAMERA permission.
  ///
  /// Requires the android.content.pm.PackageManager\#FEATURE_USB_HOST PackageManager\#FEATURE_USB_HOST feature which can be detected using android.content.pm.PackageManager\#hasSystemFeature(String) PackageManager.hasSystemFeature(String).
  ///@param device to check permissions for
  ///@return true if caller has permission
  bool hasPermission(usbdevice_.UsbDevice device) =>
      jniAccessors.callMethodWithArgs(reference, _id_hasPermission,
          jni.JniType.booleanType, [device.reference]).boolean;

  static final _id_hasPermission1 = jniAccessors.getMethodIDOf(
      _classRef, "hasPermission", "(Landroid/hardware/usb/UsbAccessory;)Z");

  /// from: public boolean hasPermission(android.hardware.usb.UsbAccessory accessory)
  ///
  /// Returns true if the caller has permission to access the accessory.
  /// Permission might have been granted temporarily via
  /// \#requestPermission(UsbAccessory, PendingIntent) or
  /// by the user choosing the caller as the default application for the accessory.
  ///
  /// Requires the android.content.pm.PackageManager\#FEATURE_USB_ACCESSORY PackageManager\#FEATURE_USB_ACCESSORY feature which can be detected using android.content.pm.PackageManager\#hasSystemFeature(String) PackageManager.hasSystemFeature(String).
  ///@param accessory to check permissions for
  ///@return true if caller has permission
  bool hasPermission1(usbaccessory_.UsbAccessory accessory) =>
      jniAccessors.callMethodWithArgs(reference, _id_hasPermission1,
          jni.JniType.booleanType, [accessory.reference]).boolean;

  static final _id_requestPermission = jniAccessors.getMethodIDOf(
      _classRef,
      "requestPermission",
      "(Landroid/hardware/usb/UsbDevice;Landroid/app/PendingIntent;)V");

  /// from: public void requestPermission(android.hardware.usb.UsbDevice device, android.app.PendingIntent pi)
  ///
  /// Requests temporary permission for the given package to access the device.
  /// This may result in a system dialog being displayed to the user
  /// if permission had not already been granted.
  /// Success or failure is returned via the android.app.PendingIntent pi.
  /// If successful, this grants the caller permission to access the device only
  /// until the device is disconnected.
  ///
  /// The following extras will be added to pi:
  /// <ul>
  /// <li> \#EXTRA_DEVICE containing the device passed into this call
  /// <li> \#EXTRA_PERMISSION_GRANTED containing boolean indicating whether
  /// permission was granted by the user
  /// </ul>
  ///
  /// Permission for USB devices of class UsbConstants\#USB_CLASS_VIDEO for clients that
  /// target SDK android.os.Build.VERSION_CODES\#P and above can be granted only if they
  /// have additionally the android.Manifest.permission\#CAMERA permission.
  ///
  /// Requires the android.content.pm.PackageManager\#FEATURE_USB_HOST PackageManager\#FEATURE_USB_HOST feature which can be detected using android.content.pm.PackageManager\#hasSystemFeature(String) PackageManager.hasSystemFeature(String).
  ///@param device to request permissions for
  ///@param pi PendingIntent for returning result
  void requestPermission(
          usbdevice_.UsbDevice device, pendingintent_.PendingIntent pi) =>
      jniAccessors.callMethodWithArgs(reference, _id_requestPermission,
          jni.JniType.voidType, [device.reference, pi.reference]).check();

  static final _id_requestPermission1 = jniAccessors.getMethodIDOf(
      _classRef,
      "requestPermission",
      "(Landroid/hardware/usb/UsbAccessory;Landroid/app/PendingIntent;)V");

  /// from: public void requestPermission(android.hardware.usb.UsbAccessory accessory, android.app.PendingIntent pi)
  ///
  /// Requests temporary permission for the given package to access the accessory.
  /// This may result in a system dialog being displayed to the user
  /// if permission had not already been granted.
  /// Success or failure is returned via the android.app.PendingIntent pi.
  /// If successful, this grants the caller permission to access the accessory only
  /// until the device is disconnected.
  ///
  /// The following extras will be added to pi:
  /// <ul>
  /// <li> \#EXTRA_ACCESSORY containing the accessory passed into this call
  /// <li> \#EXTRA_PERMISSION_GRANTED containing boolean indicating whether
  /// permission was granted by the user
  /// </ul>
  ///
  /// Requires the android.content.pm.PackageManager\#FEATURE_USB_ACCESSORY PackageManager\#FEATURE_USB_ACCESSORY feature which can be detected using android.content.pm.PackageManager\#hasSystemFeature(String) PackageManager.hasSystemFeature(String).
  ///@param accessory to request permissions for
  ///@param pi PendingIntent for returning result
  void requestPermission1(usbaccessory_.UsbAccessory accessory,
          pendingintent_.PendingIntent pi) =>
      jniAccessors.callMethodWithArgs(reference, _id_requestPermission1,
          jni.JniType.voidType, [accessory.reference, pi.reference]).check();
}
