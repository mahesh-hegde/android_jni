// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.usb.UsbConstants
///
/// Contains constants for the USB protocol.
/// These constants correspond to definitions in linux/usb/ch9.h in the linux kernel.
class UsbConstants extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/usb/UsbConstants");
  UsbConstants.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int USB_CLASS_APP_SPEC
  ///
  /// Application specific USB class.
  static const USB_CLASS_APP_SPEC = 254;

  /// from: static public final int USB_CLASS_AUDIO
  ///
  /// USB class for audio devices.
  static const USB_CLASS_AUDIO = 1;

  /// from: static public final int USB_CLASS_CDC_DATA
  ///
  /// USB class for CDC devices (communications device class).
  static const USB_CLASS_CDC_DATA = 10;

  /// from: static public final int USB_CLASS_COMM
  ///
  /// USB class for communication devices.
  static const USB_CLASS_COMM = 2;

  /// from: static public final int USB_CLASS_CONTENT_SEC
  ///
  /// USB class for content security devices.
  static const USB_CLASS_CONTENT_SEC = 13;

  /// from: static public final int USB_CLASS_CSCID
  ///
  /// USB class for content smart card devices.
  static const USB_CLASS_CSCID = 11;

  /// from: static public final int USB_CLASS_HID
  ///
  /// USB class for human interface devices (for example, mice and keyboards).
  static const USB_CLASS_HID = 3;

  /// from: static public final int USB_CLASS_HUB
  ///
  /// USB class for USB hubs.
  static const USB_CLASS_HUB = 9;

  /// from: static public final int USB_CLASS_MASS_STORAGE
  ///
  /// USB class for mass storage devices.
  static const USB_CLASS_MASS_STORAGE = 8;

  /// from: static public final int USB_CLASS_MISC
  ///
  /// USB class for wireless miscellaneous devices.
  static const USB_CLASS_MISC = 239;

  /// from: static public final int USB_CLASS_PER_INTERFACE
  ///
  /// USB class indicating that the class is determined on a per-interface basis.
  static const USB_CLASS_PER_INTERFACE = 0;

  /// from: static public final int USB_CLASS_PHYSICA
  ///
  /// USB class for physical devices.
  static const USB_CLASS_PHYSICA = 5;

  /// from: static public final int USB_CLASS_PRINTER
  ///
  /// USB class for printers.
  static const USB_CLASS_PRINTER = 7;

  /// from: static public final int USB_CLASS_STILL_IMAGE
  ///
  /// USB class for still image devices (digital cameras).
  static const USB_CLASS_STILL_IMAGE = 6;

  /// from: static public final int USB_CLASS_VENDOR_SPEC
  ///
  /// Vendor specific USB class.
  static const USB_CLASS_VENDOR_SPEC = 255;

  /// from: static public final int USB_CLASS_VIDEO
  ///
  /// USB class for video devices.
  static const USB_CLASS_VIDEO = 14;

  /// from: static public final int USB_CLASS_WIRELESS_CONTROLLER
  ///
  /// USB class for wireless controller devices.
  static const USB_CLASS_WIRELESS_CONTROLLER = 224;

  /// from: static public final int USB_DIR_IN
  ///
  /// Used to signify direction of data for a UsbEndpoint is IN (device to host)
  ///@see UsbEndpoint\#getDirection
  static const USB_DIR_IN = 128;

  /// from: static public final int USB_DIR_OUT
  ///
  /// Used to signify direction of data for a UsbEndpoint is OUT (host to device)
  ///@see UsbEndpoint\#getDirection
  static const USB_DIR_OUT = 0;

  /// from: static public final int USB_ENDPOINT_DIR_MASK
  ///
  /// Bitmask used for extracting the UsbEndpoint direction from its address field.
  ///@see UsbEndpoint\#getAddress
  ///@see UsbEndpoint\#getDirection
  ///@see \#USB_DIR_OUT
  ///@see \#USB_DIR_IN
  static const USB_ENDPOINT_DIR_MASK = 128;

  /// from: static public final int USB_ENDPOINT_NUMBER_MASK
  ///
  /// Bitmask used for extracting the UsbEndpoint number its address field.
  ///@see UsbEndpoint\#getAddress
  ///@see UsbEndpoint\#getEndpointNumber
  static const USB_ENDPOINT_NUMBER_MASK = 15;

  /// from: static public final int USB_ENDPOINT_XFERTYPE_MASK
  ///
  /// Bitmask used for extracting the UsbEndpoint type from its address field.
  ///@see UsbEndpoint\#getAddress
  ///@see UsbEndpoint\#getType
  ///@see \#USB_ENDPOINT_XFER_CONTROL
  ///@see \#USB_ENDPOINT_XFER_ISOC
  ///@see \#USB_ENDPOINT_XFER_BULK
  ///@see \#USB_ENDPOINT_XFER_INT
  static const USB_ENDPOINT_XFERTYPE_MASK = 3;

  /// from: static public final int USB_ENDPOINT_XFER_BULK
  ///
  /// Bulk endpoint type
  ///@see UsbEndpoint\#getType
  static const USB_ENDPOINT_XFER_BULK = 2;

  /// from: static public final int USB_ENDPOINT_XFER_CONTROL
  ///
  /// Control endpoint type (endpoint zero)
  ///@see UsbEndpoint\#getType
  static const USB_ENDPOINT_XFER_CONTROL = 0;

  /// from: static public final int USB_ENDPOINT_XFER_INT
  ///
  /// Interrupt endpoint type
  ///@see UsbEndpoint\#getType
  static const USB_ENDPOINT_XFER_INT = 3;

  /// from: static public final int USB_ENDPOINT_XFER_ISOC
  ///
  /// Isochronous endpoint type (currently not supported)
  ///@see UsbEndpoint\#getType
  static const USB_ENDPOINT_XFER_ISOC = 1;

  /// from: static public final int USB_INTERFACE_SUBCLASS_BOOT
  ///
  /// Boot subclass for HID devices.
  static const USB_INTERFACE_SUBCLASS_BOOT = 1;

  /// from: static public final int USB_SUBCLASS_VENDOR_SPEC
  ///
  /// Vendor specific USB subclass.
  static const USB_SUBCLASS_VENDOR_SPEC = 255;

  /// from: static public final int USB_TYPE_CLASS
  ///
  /// Used to specify that an endpoint zero control request is a class specific request.
  static const USB_TYPE_CLASS = 32;

  /// from: static public final int USB_TYPE_MASK
  ///
  /// Bitmask used for encoding the request type for a control request on endpoint zero.
  static const USB_TYPE_MASK = 96;

  /// from: static public final int USB_TYPE_RESERVED
  ///
  /// Reserved endpoint zero control request type (currently unused).
  static const USB_TYPE_RESERVED = 96;

  /// from: static public final int USB_TYPE_STANDARD
  ///
  /// Used to specify that an endpoint zero control request is a standard request.
  static const USB_TYPE_STANDARD = 0;

  /// from: static public final int USB_TYPE_VENDOR
  ///
  /// Used to specify that an endpoint zero control request is a vendor specific request.
  static const USB_TYPE_VENDOR = 64;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  UsbConstants()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
