// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.usb.UsbEndpoint
///
/// A class representing an endpoint on a UsbInterface.
/// Endpoints are the channels for sending and receiving data over USB.
/// Typically bulk endpoints are used for sending non-trivial amounts of data.
/// Interrupt endpoints are used for sending small amounts of data, typically events,
/// separately from the main data streams.
/// The endpoint zero is a special endpoint for control messages sent from the host
/// to device.
/// Isochronous endpoints are currently unsupported.
class UsbEndpoint extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/usb/UsbEndpoint");
  UsbEndpoint.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.hardware.usb.UsbEndpoint> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_getAddress =
      jniAccessors.getMethodIDOf(_classRef, "getAddress", "()I");

  /// from: public int getAddress()
  ///
  /// Returns the endpoint's address field.
  /// The address is a bitfield containing both the endpoint number
  /// as well as the data direction of the endpoint.
  /// the endpoint number and direction can also be accessed via
  /// \#getEndpointNumber and \#getDirection.
  ///@return the endpoint's address
  int getAddress() => jniAccessors.callMethodWithArgs(
      reference, _id_getAddress, jni.JniType.intType, []).integer;

  static final _id_getEndpointNumber =
      jniAccessors.getMethodIDOf(_classRef, "getEndpointNumber", "()I");

  /// from: public int getEndpointNumber()
  ///
  /// Extracts the endpoint's endpoint number from its address
  ///@return the endpoint's endpoint number
  int getEndpointNumber() => jniAccessors.callMethodWithArgs(
      reference, _id_getEndpointNumber, jni.JniType.intType, []).integer;

  static final _id_getDirection =
      jniAccessors.getMethodIDOf(_classRef, "getDirection", "()I");

  /// from: public int getDirection()
  ///
  /// Returns the endpoint's direction.
  /// Returns UsbConstants\#USB_DIR_OUT
  /// if the direction is host to device, and
  /// UsbConstants\#USB_DIR_IN if the
  /// direction is device to host.
  ///@see UsbConstants\#USB_DIR_IN
  ///@see UsbConstants\#USB_DIR_OUT
  ///@return the endpoint's direction
  int getDirection() => jniAccessors.callMethodWithArgs(
      reference, _id_getDirection, jni.JniType.intType, []).integer;

  static final _id_getAttributes =
      jniAccessors.getMethodIDOf(_classRef, "getAttributes", "()I");

  /// from: public int getAttributes()
  ///
  /// Returns the endpoint's attributes field.
  ///@return the endpoint's attributes
  int getAttributes() => jniAccessors.callMethodWithArgs(
      reference, _id_getAttributes, jni.JniType.intType, []).integer;

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public int getType()
  ///
  /// Returns the endpoint's type.
  /// Possible results are:
  /// <ul>
  /// <li>UsbConstants\#USB_ENDPOINT_XFER_CONTROL (endpoint zero)
  /// <li>UsbConstants\#USB_ENDPOINT_XFER_ISOC (isochronous endpoint)
  /// <li>UsbConstants\#USB_ENDPOINT_XFER_BULK (bulk endpoint)
  /// <li>UsbConstants\#USB_ENDPOINT_XFER_INT (interrupt endpoint)
  /// </ul>
  ///@return the endpoint's type
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_getMaxPacketSize =
      jniAccessors.getMethodIDOf(_classRef, "getMaxPacketSize", "()I");

  /// from: public int getMaxPacketSize()
  ///
  /// Returns the endpoint's maximum packet size.
  ///@return the endpoint's maximum packet size
  int getMaxPacketSize() => jniAccessors.callMethodWithArgs(
      reference, _id_getMaxPacketSize, jni.JniType.intType, []).integer;

  static final _id_getInterval =
      jniAccessors.getMethodIDOf(_classRef, "getInterval", "()I");

  /// from: public int getInterval()
  ///
  /// Returns the endpoint's interval field.
  ///@return the endpoint's interval
  int getInterval() => jniAccessors.callMethodWithArgs(
      reference, _id_getInterval, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}
