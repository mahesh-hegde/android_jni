// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "SensorEvent.dart" as sensorevent_;

import "Sensor.dart" as sensor_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.SensorEventListener
///
/// Used for receiving notifications from the SensorManager when
/// there is new sensor data.
class SensorEventListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/SensorEventListener");
  SensorEventListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onSensorChanged = jniAccessors.getMethodIDOf(
      _classRef, "onSensorChanged", "(Landroid/hardware/SensorEvent;)V");

  /// from: public abstract void onSensorChanged(android.hardware.SensorEvent event)
  ///
  /// Called when there is a new sensor event.  Note that "on changed"
  /// is somewhat of a misnomer, as this will also be called if we have a
  /// new reading from a sensor with the exact same sensor values (but a
  /// newer timestamp).
  ///
  /// See android.hardware.SensorManager SensorManager
  /// for details on possible sensor types.
  /// See also android.hardware.SensorEvent SensorEvent.
  ///
  /// __NOTE:__ The application doesn't own the
  /// android.hardware.SensorEvent event
  /// object passed as a parameter and therefore cannot hold on to it.
  /// The object may be part of an internal pool and may be reused by
  /// the framework.
  ///@param event the android.hardware.SensorEvent SensorEvent.
  void onSensorChanged(sensorevent_.SensorEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSensorChanged,
          jni.JniType.voidType, [event.reference]).check();

  static final _id_onAccuracyChanged = jniAccessors.getMethodIDOf(
      _classRef, "onAccuracyChanged", "(Landroid/hardware/Sensor;I)V");

  /// from: public abstract void onAccuracyChanged(android.hardware.Sensor sensor, int accuracy)
  ///
  /// Called when the accuracy of the registered sensor has changed.  Unlike
  /// onSensorChanged(), this is only called when this accuracy value changes.
  ///
  /// See the SENSOR_STATUS_* constants in
  /// android.hardware.SensorManager SensorManager for details.
  ///@param accuracy The new accuracy of this sensor, one of
  ///         {@code SensorManager.SENSOR_STATUS_*}
  void onAccuracyChanged(sensor_.Sensor sensor, int accuracy) =>
      jniAccessors.callMethodWithArgs(reference, _id_onAccuracyChanged,
          jni.JniType.voidType, [sensor.reference, accuracy]).check();
}
