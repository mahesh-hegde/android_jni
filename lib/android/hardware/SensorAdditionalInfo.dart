// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Sensor.dart" as sensor_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.SensorAdditionalInfo
///
/// This class represents a android.hardware.Sensor Sensor additional information frame,
/// which is reported through listener callback android.hardware.SensorEventCallback\#onSensorAdditionalInfo onSensorAdditionalInfo.
///@see SensorManager
///@see SensorEventCallback
///@see Sensor
class SensorAdditionalInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/SensorAdditionalInfo");
  SensorAdditionalInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int TYPE_FRAME_BEGIN
  ///
  /// Mark the beginning of a set of additional info frames.
  static const TYPE_FRAME_BEGIN = 0;

  /// from: static public final int TYPE_FRAME_END
  ///
  /// Mark the end of a set of additional info frames.
  static const TYPE_FRAME_END = 1;

  /// from: static public final int TYPE_INTERNAL_TEMPERATURE
  ///
  /// Internal temperature. Sensor hardware device internal temperature.
  ///
  /// Payload:
  ///     floatValues[0]: internal temperature in Celsius.
  static const TYPE_INTERNAL_TEMPERATURE = 65537;

  /// from: static public final int TYPE_SAMPLING
  ///
  /// Sampling parameter. Describes the raw sample period and estimated jitter of sample time in
  /// terms of standard deviation.
  ///
  /// Payload:
  ///     floatValues[0]: raw sample period in seconds.
  ///     floatValues[1]: standard deviation of sampling period.
  static const TYPE_SAMPLING = 65540;

  /// from: static public final int TYPE_SENSOR_PLACEMENT
  ///
  /// Sensor placement. Describes location and installation angle of the sensor device.
  ///
  /// Payload:
  ///     floatValues[0..11]: First 3 rows of homogeneous matrix in row major order that describes
  ///     the location and orientation of the sensor. Origin of reference will be the mobile device
  ///     geometric sensor. Reference frame is defined as the same as Android sensor frame.
  static const TYPE_SENSOR_PLACEMENT = 65539;

  /// from: static public final int TYPE_UNTRACKED_DELAY
  ///
  /// Untracked delay. Delays that are introduced by data processing, such as filtering, which is
  /// not taken into account by sensor timestamps.
  ///
  /// Payload:
  ///     floatValues[0]: delay estimation in seconds
  ///     floatValues[1]: delay estimation standard deviation
  static const TYPE_UNTRACKED_DELAY = 65536;

  /// from: static public final int TYPE_VEC3_CALIBRATION
  ///
  /// Vector calibration parameter. Calibration applied to a sensor with 3 elements vector output,
  /// such as accelerometer, gyro, etc.
  ///
  /// Payload:
  ///     floatValues[0..11]: First 3 rows of a homogeneous matrix in row major order that captures
  ///     any linear transformation, including rotation, scaling, shear, shift.
  static const TYPE_VEC3_CALIBRATION = 65538;

  static final _id_floatValues =
      jniAccessors.getFieldIDOf(_classRef, "floatValues", "[F");

  /// from: public final float[] floatValues
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Additional info payload data represented in float values. Depending on the type of
  /// information, this may be null.
  jni.JniObject get floatValues => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_floatValues, jni.JniType.objectType)
      .object);

  static final _id_intValues =
      jniAccessors.getFieldIDOf(_classRef, "intValues", "[I");

  /// from: public final int[] intValues
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Additional info payload data represented in int values. Depending on the type of information,
  /// this may be null.
  jni.JniObject get intValues => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_intValues, jni.JniType.objectType)
      .object);

  static final _id_sensor = jniAccessors.getFieldIDOf(
      _classRef, "sensor", "Landroid/hardware/Sensor;");

  /// from: public final android.hardware.Sensor sensor
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The sensor that generated this event. See
  /// android.hardware.SensorManager SensorManager for details.
  sensor_.Sensor get sensor => sensor_.Sensor.fromRef(jniAccessors
      .getField(reference, _id_sensor, jni.JniType.objectType)
      .object);

  static final _id_serial = jniAccessors.getFieldIDOf(_classRef, "serial", "I");

  /// from: public final int serial
  ///
  /// Sequence number of frame for a certain type.
  int get serial =>
      jniAccessors.getField(reference, _id_serial, jni.JniType.intType).integer;

  static final _id_type = jniAccessors.getFieldIDOf(_classRef, "type", "I");

  /// from: public final int type
  ///
  /// Type of this additional info frame.
  int get type =>
      jniAccessors.getField(reference, _id_type, jni.JniType.intType).integer;
}
