// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "TriggerEvent.dart" as triggerevent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.TriggerEventListener
///
/// This class is the listener used to handle Trigger Sensors.
/// Trigger Sensors are sensors that trigger an event and are automatically
/// disabled. Sensor\#TYPE_SIGNIFICANT_MOTION is one such example.
///
/// SensorManager lets you access the device's android.hardware.Sensor sensors. Get an instance of SensorManager by calling
/// android.content.Context\#getSystemService(java.lang.String) Context.getSystemService() with the argument
/// android.content.Context\#SENSOR_SERVICE.
/// Here's an example setup for a TriggerEventListener:
///
/// <pre>
/// class TriggerListener extends TriggerEventListener {
///     public void onTrigger(TriggerEvent event) {
///          // Do Work.
///
///     // As it is a one shot sensor, it will be canceled automatically.
///     // SensorManager.requestTriggerSensor(this, mSigMotion); needs to
///     // be called again, if needed.
///     }
/// }
/// public class SensorActivity extends Activity {
///     private final SensorManager mSensorManager;
///     private final Sensor mSigMotion;
///     private final TriggerEventListener mListener = new TriggerEventListener();
///
///     public SensorActivity() {
///         mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);
///         mSigMotion = mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION);
///     }
///
///     protected void onResume() {
///         super.onResume();
///         mSensorManager.requestTriggerSensor(mListener, mSigMotion);
///     }
///
///     protected void onPause() {
///         super.onPause();
///         // Call disable to ensure that the trigger request has been canceled.
///         mSensorManager.cancelTriggerSensor(mListener, mSigMotion);
///     }
///
/// }
/// </pre>
///@see TriggerEvent
///@see Sensor
class TriggerEventListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/TriggerEventListener");
  TriggerEventListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  TriggerEventListener()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onTrigger = jniAccessors.getMethodIDOf(
      _classRef, "onTrigger", "(Landroid/hardware/TriggerEvent;)V");

  /// from: public abstract void onTrigger(android.hardware.TriggerEvent event)
  ///
  /// The method that will be called when the sensor
  /// is triggered. Override this method in your implementation
  /// of this class.
  ///@param event The details of the event.
  void onTrigger(triggerevent_.TriggerEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTrigger,
          jni.JniType.voidType, [event.reference]).check();
}
