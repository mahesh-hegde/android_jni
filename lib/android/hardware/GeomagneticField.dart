// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.GeomagneticField
///
/// Estimates magnetic field at a given point on
/// Earth, and in particular, to compute the magnetic declination from true
/// north.
///
/// This uses the World Magnetic Model produced by the United States National
/// Geospatial-Intelligence Agency.  More details about the model can be found at
/// <a href="http://www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml">http://www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml</a>.
/// This class currently uses WMM-2015 which is valid until 2020, but should
/// produce acceptable results for several years after that. Future versions of
/// Android may use a newer version of the model.
class GeomagneticField extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/GeomagneticField");
  GeomagneticField.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(FFFJ)V");

  /// from: public void <init>(float gdLatitudeDeg, float gdLongitudeDeg, float altitudeMeters, long timeMillis)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Estimate the magnetic field at a given point and time.
  ///@param gdLatitudeDeg Latitude in WGS84 geodetic coordinates -- positive is east.
  ///@param gdLongitudeDeg Longitude in WGS84 geodetic coordinates -- positive is north.
  ///@param altitudeMeters Altitude in WGS84 geodetic coordinates, in meters.
  ///@param timeMillis Time at which to evaluate the declination, in milliseconds
  ///            since January 1, 1970. (approximate is fine -- the declination
  ///            changes very slowly).
  GeomagneticField(double gdLatitudeDeg, double gdLongitudeDeg,
      double altitudeMeters, int timeMillis)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          gdLatitudeDeg,
          gdLongitudeDeg,
          altitudeMeters,
          timeMillis
        ]).object);

  static final _id_getX = jniAccessors.getMethodIDOf(_classRef, "getX", "()F");

  /// from: public float getX()
  ///
  /// @return The X (northward) component of the magnetic field in nanoteslas.
  double getX() => jniAccessors
      .callMethodWithArgs(reference, _id_getX, jni.JniType.floatType, []).float;

  static final _id_getY = jniAccessors.getMethodIDOf(_classRef, "getY", "()F");

  /// from: public float getY()
  ///
  /// @return The Y (eastward) component of the magnetic field in nanoteslas.
  double getY() => jniAccessors
      .callMethodWithArgs(reference, _id_getY, jni.JniType.floatType, []).float;

  static final _id_getZ = jniAccessors.getMethodIDOf(_classRef, "getZ", "()F");

  /// from: public float getZ()
  ///
  /// @return The Z (downward) component of the magnetic field in nanoteslas.
  double getZ() => jniAccessors
      .callMethodWithArgs(reference, _id_getZ, jni.JniType.floatType, []).float;

  static final _id_getDeclination =
      jniAccessors.getMethodIDOf(_classRef, "getDeclination", "()F");

  /// from: public float getDeclination()
  ///
  /// @return The declination of the horizontal component of the magnetic
  ///         field from true north, in degrees (i.e. positive means the
  ///         magnetic field is rotated east that much from true north).
  double getDeclination() => jniAccessors.callMethodWithArgs(
      reference, _id_getDeclination, jni.JniType.floatType, []).float;

  static final _id_getInclination =
      jniAccessors.getMethodIDOf(_classRef, "getInclination", "()F");

  /// from: public float getInclination()
  ///
  /// @return The inclination of the magnetic field in degrees -- positive
  ///         means the magnetic field is rotated downwards.
  double getInclination() => jniAccessors.callMethodWithArgs(
      reference, _id_getInclination, jni.JniType.floatType, []).float;

  static final _id_getHorizontalStrength =
      jniAccessors.getMethodIDOf(_classRef, "getHorizontalStrength", "()F");

  /// from: public float getHorizontalStrength()
  ///
  /// @return Horizontal component of the field strength in nonoteslas.
  double getHorizontalStrength() => jniAccessors.callMethodWithArgs(
      reference, _id_getHorizontalStrength, jni.JniType.floatType, []).float;

  static final _id_getFieldStrength =
      jniAccessors.getMethodIDOf(_classRef, "getFieldStrength", "()F");

  /// from: public float getFieldStrength()
  ///
  /// @return Total field strength in nanoteslas.
  double getFieldStrength() => jniAccessors.callMethodWithArgs(
      reference, _id_getFieldStrength, jni.JniType.floatType, []).float;
}
