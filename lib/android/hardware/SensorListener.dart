// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.hardware.SensorListener
///
/// Used for receiving notifications from the SensorManager when
/// sensor values have changed.
///@deprecated Use
/// android.hardware.SensorEventListener SensorEventListener instead.
class SensorListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/hardware/SensorListener");
  SensorListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onSensorChanged =
      jniAccessors.getMethodIDOf(_classRef, "onSensorChanged", "(I[F)V");

  /// from: public abstract void onSensorChanged(int sensor, float[] values)
  ///
  /// Called when sensor values have changed.
  /// The length and contents of the values array vary
  /// depending on which sensor is being monitored.
  /// See android.hardware.SensorManager SensorManager
  /// for details on possible sensor types.
  ///
  /// <u>Definition of the coordinate system used below.</u>
  /// The X axis refers to the screen's horizontal axis
  /// (the small edge in portrait mode, the long edge in landscape mode) and
  /// points to the right.
  /// The Y axis refers to the screen's vertical axis and points towards
  /// the top of the screen (the origin is in the lower-left corner).
  /// The Z axis points toward the sky when the device is lying on its back
  /// on a table.
  ///  __IMPORTANT NOTE:__ The axis __<u>are swapped</u>__ when the
  /// device's screen orientation changes. To access the unswapped values,
  /// use indices 3, 4 and 5 in values[].
  ///
  /// android.hardware.SensorManager\#SENSOR_ORIENTATION SENSOR_ORIENTATION,
  /// android.hardware.SensorManager\#SENSOR_ORIENTATION_RAW SENSOR_ORIENTATION_RAW:
  ///  All values are angles in degrees.
  ///
  /// values[0]: Azimuth, rotation around the Z axis (0<=azimuth<360).
  /// 0 = North, 90 = East, 180 = South, 270 = West
  ///
  /// values[1]: Pitch, rotation around X axis (-180<=pitch<=180), with positive
  /// values when the z-axis moves toward the y-axis.
  ///
  /// values[2]: Roll, rotation around Y axis (-90<=roll<=90), with positive values
  /// when the z-axis moves toward the x-axis.
  ///
  /// Note that this definition of yaw, pitch and roll is different from the
  /// traditional definition used in aviation where the X axis is along the long
  /// side of the plane (tail to nose).
  ///
  /// android.hardware.SensorManager\#SENSOR_ACCELEROMETER SENSOR_ACCELEROMETER:
  ///  All values are in SI units (m/s^2) and measure contact forces.
  ///
  ///  values[0]: force applied by the device on the x-axis
  ///  values[1]: force applied by the device on the y-axis
  ///  values[2]: force applied by the device on the z-axis
  ///
  ///  <u>Examples</u>:
  ///    <li>When the device is pushed on its left side toward the right, the
  ///    x acceleration value is negative (the device applies a reaction force
  ///    to the push toward the left)</li>
  ///
  ///    <li>When the device lies flat on a table, the acceleration value is
  ///    android.hardware.SensorManager\#STANDARD_GRAVITY -STANDARD_GRAVITY,
  ///    which correspond to the force the device applies on the table in reaction
  ///    to gravity.</li>
  ///
  /// android.hardware.SensorManager\#SENSOR_MAGNETIC_FIELD SENSOR_MAGNETIC_FIELD:
  ///  All values are in micro-Tesla (uT) and measure the ambient magnetic
  ///  field in the X, Y and -Z axis.
  ///  __<u>Note:</u>__ the magnetic field's Z axis is inverted.
  ///@param sensor The ID of the sensor being monitored
  ///@param values The new values for the sensor.
  void onSensorChanged(int sensor, jni.JniObject values) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSensorChanged,
          jni.JniType.voidType, [sensor, values.reference]).check();

  static final _id_onAccuracyChanged =
      jniAccessors.getMethodIDOf(_classRef, "onAccuracyChanged", "(II)V");

  /// from: public abstract void onAccuracyChanged(int sensor, int accuracy)
  ///
  /// Called when the accuracy of a sensor has changed.
  /// See android.hardware.SensorManager SensorManager
  /// for details.
  ///@param sensor The ID of the sensor being monitored
  ///@param accuracy The new accuracy of this sensor.
  void onAccuracyChanged(int sensor, int accuracy) =>
      jniAccessors.callMethodWithArgs(reference, _id_onAccuracyChanged,
          jni.JniType.voidType, [sensor, accuracy]).check();
}
