// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;

import "../os/ParcelUuid.dart" as parceluuid_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.companion.BluetoothDeviceFilter
///
/// A filter for Bluetooth(non-LE) devices
class BluetoothDeviceFilter extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/companion/BluetoothDeviceFilter");
  BluetoothDeviceFilter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.companion.BluetoothDeviceFilter> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}

/// from: android.companion.BluetoothDeviceFilter$Builder
///
/// A builder for BluetoothDeviceFilter
class BluetoothDeviceFilter_Builder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/companion/BluetoothDeviceFilter\$Builder");
  BluetoothDeviceFilter_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BluetoothDeviceFilter_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setNamePattern = jniAccessors.getMethodIDOf(
      _classRef,
      "setNamePattern",
      "(Ljava/util/regex/Pattern;)Landroid/companion/BluetoothDeviceFilter\$Builder;");

  /// from: public android.companion.BluetoothDeviceFilter.Builder setNamePattern(java.util.regex.Pattern regex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param regex if set, only devices with BluetoothDevice\#getName name matching the
  ///              given regular expression will be shown
  ///
  /// This value may be {@code null}.
  BluetoothDeviceFilter_Builder setNamePattern(jni.JniObject regex) =>
      BluetoothDeviceFilter_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setNamePattern,
          jni.JniType.objectType,
          [regex.reference]).object);

  static final _id_setAddress = jniAccessors.getMethodIDOf(
      _classRef,
      "setAddress",
      "(Ljava/lang/String;)Landroid/companion/BluetoothDeviceFilter\$Builder;");

  /// from: public android.companion.BluetoothDeviceFilter.Builder setAddress(java.lang.String address)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param address if set, only devices with MAC address exactly matching the given one will
  ///                pass the filter
  ///
  /// This value may be {@code null}.
  ///@return This value will never be {@code null}.
  BluetoothDeviceFilter_Builder setAddress(jni.JniString address) =>
      BluetoothDeviceFilter_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAddress,
          jni.JniType.objectType,
          [address.reference]).object);

  static final _id_addServiceUuid = jniAccessors.getMethodIDOf(
      _classRef,
      "addServiceUuid",
      "(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/companion/BluetoothDeviceFilter\$Builder;");

  /// from: public android.companion.BluetoothDeviceFilter.Builder addServiceUuid(android.os.ParcelUuid serviceUuid, android.os.ParcelUuid serviceUuidMask)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Add filtering by certain bits of BluetoothDevice\#getUuids()
  ///
  /// A device with any uuid matching the given bits is considered passing
  ///@param serviceUuid the values for the bits to match
  /// This value may be {@code null}.
  ///@param serviceUuidMask if provided, only those bits would have to match.
  ///
  /// This value may be {@code null}.
  ///@return This value will never be {@code null}.
  BluetoothDeviceFilter_Builder addServiceUuid(
          parceluuid_.ParcelUuid serviceUuid,
          parceluuid_.ParcelUuid serviceUuidMask) =>
      BluetoothDeviceFilter_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addServiceUuid,
          jni.JniType.objectType,
          [serviceUuid.reference, serviceUuidMask.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/companion/BluetoothDeviceFilter;");

  /// from: public android.companion.BluetoothDeviceFilter build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @inheritDoc
  BluetoothDeviceFilter build() =>
      BluetoothDeviceFilter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);

  static final _id_markUsed =
      jniAccessors.getMethodIDOf(_classRef, "markUsed", "()V");

  /// from: protected void markUsed()
  void markUsed() => jniAccessors.callMethodWithArgs(
      reference, _id_markUsed, jni.JniType.voidType, []).check();

  static final _id_checkNotUsed =
      jniAccessors.getMethodIDOf(_classRef, "checkNotUsed", "()V");

  /// from: protected void checkNotUsed()
  void checkNotUsed() => jniAccessors.callMethodWithArgs(
      reference, _id_checkNotUsed, jni.JniType.voidType, []).check();
}
