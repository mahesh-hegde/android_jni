// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../bluetooth/le/ScanFilter.dart" as scanfilter_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.companion.BluetoothLeDeviceFilter
///
/// A filter for Bluetooth LE devices
///@see ScanFilter
class BluetoothLeDeviceFilter extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/companion/BluetoothLeDeviceFilter");
  BluetoothLeDeviceFilter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.companion.BluetoothLeDeviceFilter> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/util/regex/Pattern;Landroid/bluetooth/le/ScanFilter;[B[BLjava/lang/String;Ljava/lang/String;IIIIZ)V");

  /// from: void <init>(java.util.regex.Pattern namePattern, android.bluetooth.le.ScanFilter scanFilter, byte[] rawDataFilter, byte[] rawDataFilterMask, java.lang.String renamePrefix, java.lang.String renameSuffix, int renameBytesFrom, int renameBytesLength, int renameNameFrom, int renameNameLength, boolean renameBytesReverseOrder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  BluetoothLeDeviceFilter(
      jni.JniObject namePattern,
      scanfilter_.ScanFilter scanFilter,
      jni.JniObject rawDataFilter,
      jni.JniObject rawDataFilterMask,
      jni.JniString renamePrefix,
      jni.JniString renameSuffix,
      int renameBytesFrom,
      int renameBytesLength,
      int renameNameFrom,
      int renameNameLength,
      bool renameBytesReverseOrder)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          namePattern.reference,
          scanFilter.reference,
          rawDataFilter.reference,
          rawDataFilterMask.reference,
          renamePrefix.reference,
          renameSuffix.reference,
          renameBytesFrom,
          renameBytesLength,
          renameNameFrom,
          renameNameLength,
          renameBytesReverseOrder
        ]).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_getRenamePrefixLengthLimit = jniAccessors
      .getStaticMethodIDOf(_classRef, "getRenamePrefixLengthLimit", "()I");

  /// from: static public int getRenamePrefixLengthLimit()
  static int getRenamePrefixLengthLimit() =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getRenamePrefixLengthLimit, jni.JniType.intType, []).integer;
}

/// from: android.companion.BluetoothLeDeviceFilter$Builder
///
/// Builder for BluetoothLeDeviceFilter
class BluetoothLeDeviceFilter_Builder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/companion/BluetoothLeDeviceFilter\$Builder");
  BluetoothLeDeviceFilter_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BluetoothLeDeviceFilter_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setNamePattern = jniAccessors.getMethodIDOf(
      _classRef,
      "setNamePattern",
      "(Ljava/util/regex/Pattern;)Landroid/companion/BluetoothLeDeviceFilter\$Builder;");

  /// from: public android.companion.BluetoothLeDeviceFilter.Builder setNamePattern(java.util.regex.Pattern regex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param regex if set, only devices with BluetoothDevice\#getName name matching the
  ///              given regular expression will be shown
  /// This value may be {@code null}.
  ///@return self for chaining
  BluetoothLeDeviceFilter_Builder setNamePattern(jni.JniObject regex) =>
      BluetoothLeDeviceFilter_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setNamePattern,
          jni.JniType.objectType,
          [regex.reference]).object);

  static final _id_setScanFilter = jniAccessors.getMethodIDOf(
      _classRef,
      "setScanFilter",
      "(Landroid/bluetooth/le/ScanFilter;)Landroid/companion/BluetoothLeDeviceFilter\$Builder;");

  /// from: public android.companion.BluetoothLeDeviceFilter.Builder setScanFilter(android.bluetooth.le.ScanFilter scanFilter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param scanFilter a ScanFilter to filter devices by
  ///
  /// This value may be {@code null}.
  ///@return self for chaining
  /// This value will never be {@code null}.
  ///@see ScanFilter for specific details on its various fields
  BluetoothLeDeviceFilter_Builder setScanFilter(
          scanfilter_.ScanFilter scanFilter) =>
      BluetoothLeDeviceFilter_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setScanFilter,
          jni.JniType.objectType,
          [scanFilter.reference]).object);

  static final _id_setRawDataFilter = jniAccessors.getMethodIDOf(
      _classRef,
      "setRawDataFilter",
      "([B[B)Landroid/companion/BluetoothLeDeviceFilter\$Builder;");

  /// from: public android.companion.BluetoothLeDeviceFilter.Builder setRawDataFilter(byte[] rawDataFilter, byte[] rawDataFilterMask)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Filter devices by raw advertisement data, as obtained by ScanRecord\#getBytes
  ///@param rawDataFilter bit values that have to match against advertized data
  /// This value must never be {@code null}.
  ///@param rawDataFilterMask bits that have to be matched
  /// This value may be {@code null}.
  ///@return self for chaining
  ///
  /// This value will never be {@code null}.
  BluetoothLeDeviceFilter_Builder setRawDataFilter(
          jni.JniObject rawDataFilter, jni.JniObject rawDataFilterMask) =>
      BluetoothLeDeviceFilter_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setRawDataFilter,
          jni.JniType.objectType,
          [rawDataFilter.reference, rawDataFilterMask.reference]).object);

  static final _id_setRenameFromBytes = jniAccessors.getMethodIDOf(
      _classRef,
      "setRenameFromBytes",
      "(Ljava/lang/String;Ljava/lang/String;IILjava/nio/ByteOrder;)Landroid/companion/BluetoothLeDeviceFilter\$Builder;");

  /// from: public android.companion.BluetoothLeDeviceFilter.Builder setRenameFromBytes(java.lang.String prefix, java.lang.String suffix, int bytesFrom, int bytesLength, java.nio.ByteOrder byteOrder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Rename the devices shown in the list, using specific bytes from the raw advertisement
  /// data (ScanRecord\#getBytes) in hexadecimal format, as well as a custom
  /// prefix/suffix around them
  ///
  /// Note that the prefix length is limited to \#getRenamePrefixLengthLimit characters
  /// to ensure that there's enough space to display the byte data
  ///
  /// The range of bytes to be displayed cannot be empty
  ///@param prefix to be displayed before the byte data
  /// This value must never be {@code null}.
  ///@param suffix to be displayed after the byte data
  /// This value must never be {@code null}.
  ///@param bytesFrom the start byte index to be displayed (inclusive)
  ///@param bytesLength the number of bytes to be displayed from the given index
  ///@param byteOrder whether the given range of bytes is big endian (will be displayed
  ///                   in same order) or little endian (will be flipped before displaying)
  ///@return self for chaining
  ///
  /// This value will never be {@code null}.
  BluetoothLeDeviceFilter_Builder setRenameFromBytes(
          jni.JniString prefix,
          jni.JniString suffix,
          int bytesFrom,
          int bytesLength,
          jni.JniObject byteOrder) =>
      BluetoothLeDeviceFilter_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setRenameFromBytes, jni.JniType.objectType, [
        prefix.reference,
        suffix.reference,
        bytesFrom,
        bytesLength,
        byteOrder.reference
      ]).object);

  static final _id_setRenameFromName = jniAccessors.getMethodIDOf(
      _classRef,
      "setRenameFromName",
      "(Ljava/lang/String;Ljava/lang/String;II)Landroid/companion/BluetoothLeDeviceFilter\$Builder;");

  /// from: public android.companion.BluetoothLeDeviceFilter.Builder setRenameFromName(java.lang.String prefix, java.lang.String suffix, int nameFrom, int nameLength)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Rename the devices shown in the list, using specific characters from the advertised name,
  /// as well as a custom prefix/suffix around them
  ///
  /// Note that the prefix length is limited to \#getRenamePrefixLengthLimit characters
  /// to ensure that there's enough space to display the byte data
  ///
  /// The range of name characters to be displayed cannot be empty
  ///@param prefix to be displayed before the byte data
  /// This value must never be {@code null}.
  ///@param suffix to be displayed after the byte data
  /// This value must never be {@code null}.
  ///@param nameFrom the start name character index to be displayed (inclusive)
  ///@param nameLength the number of characters to be displayed from the given index
  ///@return self for chaining
  ///
  /// This value will never be {@code null}.
  BluetoothLeDeviceFilter_Builder setRenameFromName(jni.JniString prefix,
          jni.JniString suffix, int nameFrom, int nameLength) =>
      BluetoothLeDeviceFilter_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setRenameFromName,
          jni.JniType.objectType,
          [prefix.reference, suffix.reference, nameFrom, nameLength]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/companion/BluetoothLeDeviceFilter;");

  /// from: public android.companion.BluetoothLeDeviceFilter build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @inheritDoc
  BluetoothLeDeviceFilter build() =>
      BluetoothLeDeviceFilter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);

  static final _id_markUsed =
      jniAccessors.getMethodIDOf(_classRef, "markUsed", "()V");

  /// from: protected void markUsed()
  void markUsed() => jniAccessors.callMethodWithArgs(
      reference, _id_markUsed, jni.JniType.voidType, []).check();

  static final _id_checkNotUsed =
      jniAccessors.getMethodIDOf(_classRef, "checkNotUsed", "()V");

  /// from: protected void checkNotUsed()
  void checkNotUsed() => jniAccessors.callMethodWithArgs(
      reference, _id_checkNotUsed, jni.JniType.voidType, []).check();
}
