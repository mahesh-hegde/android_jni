// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "../../content/pm/ServiceInfo.dart" as serviceinfo_;

import "../../content/Intent.dart" as intent_;

import "../../os/Bundle.dart" as bundle_;

import "../../content/Context.dart" as context_;

import "../../graphics/drawable/Drawable.dart" as drawable_;

import "../../content/ComponentName.dart" as componentname_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.tv.TvInputInfo
///
/// This class is used to specify meta information of a TV input.
class TvInputInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvInputInfo");
  TvInputInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.media.tv.TvInputInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final java.lang.String EXTRA_INPUT_ID
  ///
  /// Used as a String extra field in setup intents created by \#createSetupIntent() to
  /// supply the ID of a specific TV input to set up.
  static const EXTRA_INPUT_ID = "android.media.tv.extra.INPUT_ID";

  /// from: static public final int TYPE_COMPONENT
  ///
  /// TV input type: the TV input service represents a component port.
  static const TYPE_COMPONENT = 1004;

  /// from: static public final int TYPE_COMPOSITE
  ///
  /// TV input type: the TV input service represents a composite port.
  static const TYPE_COMPOSITE = 1001;

  /// from: static public final int TYPE_DISPLAY_PORT
  ///
  /// TV input type: the TV input service represents a display port.
  static const TYPE_DISPLAY_PORT = 1008;

  /// from: static public final int TYPE_DVI
  ///
  /// TV input type: the TV input service represents a DVI port.
  static const TYPE_DVI = 1006;

  /// from: static public final int TYPE_HDMI
  ///
  /// TV input type: the TV input service is HDMI. (e.g. HDMI 1)
  static const TYPE_HDMI = 1007;

  /// from: static public final int TYPE_OTHER
  ///
  /// TV input type: a generic hardware TV input type.
  static const TYPE_OTHER = 1000;

  /// from: static public final int TYPE_SCART
  ///
  /// TV input type: the TV input service represents a SCART port.
  static const TYPE_SCART = 1003;

  /// from: static public final int TYPE_SVIDEO
  ///
  /// TV input type: the TV input service represents a SVIDEO port.
  static const TYPE_SVIDEO = 1002;

  /// from: static public final int TYPE_TUNER
  ///
  /// TV input type: the TV input service is a tuner which provides channels.
  static const TYPE_TUNER = 0;

  /// from: static public final int TYPE_VGA
  ///
  /// TV input type: the TV input service represents a VGA port.
  static const TYPE_VGA = 1005;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TvInputInfo(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [in0.reference]).object);

  static final _id_getId =
      jniAccessors.getMethodIDOf(_classRef, "getId", "()Ljava/lang/String;");

  /// from: public java.lang.String getId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a unique ID for this TV input. The ID is generated from the package and class name
  /// implementing the TV input service.
  jni.JniString getId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getId, jni.JniType.objectType, []).object);

  static final _id_getParentId = jniAccessors.getMethodIDOf(
      _classRef, "getParentId", "()Ljava/lang/String;");

  /// from: public java.lang.String getParentId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the parent input ID.
  ///
  /// A TV input may have a parent input if the TV input is actually a logical representation of
  /// a device behind the hardware port represented by the parent input.
  /// For example, a HDMI CEC logical device, connected to a HDMI port, appears as another TV
  /// input. In this case, the parent input of this logical device is the HDMI port.
  ///
  /// Applications may group inputs by parent input ID to provide an easier access to inputs
  /// sharing the same physical port. In the example of HDMI CEC, logical HDMI CEC devices behind
  /// the same HDMI port have the same parent ID, which is the ID representing the port. Thus
  /// applications can group the hardware HDMI port and the logical HDMI CEC devices behind it
  /// together using this method.
  ///@return the ID of the parent input, if exists. Returns {@code null} if the parent input is
  ///         not specified.
  jni.JniString getParentId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getParentId, jni.JniType.objectType, []).object);

  static final _id_getServiceInfo = jniAccessors.getMethodIDOf(
      _classRef, "getServiceInfo", "()Landroid/content/pm/ServiceInfo;");

  /// from: public android.content.pm.ServiceInfo getServiceInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the information of the service that implements this TV input.
  serviceinfo_.ServiceInfo getServiceInfo() =>
      serviceinfo_.ServiceInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getServiceInfo, jni.JniType.objectType, []).object);

  static final _id_createSetupIntent = jniAccessors.getMethodIDOf(
      _classRef, "createSetupIntent", "()Landroid/content/Intent;");

  /// from: public android.content.Intent createSetupIntent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an intent to start the setup activity for this TV input.
  intent_.Intent createSetupIntent() =>
      intent_.Intent.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_createSetupIntent, jni.JniType.objectType, []).object);

  static final _id_createSettingsIntent = jniAccessors.getMethodIDOf(
      _classRef, "createSettingsIntent", "()Landroid/content/Intent;");

  /// from: public android.content.Intent createSettingsIntent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an intent to start the settings activity for this TV input.
  ///@deprecated Use \#createSetupIntent() instead. Settings activity is deprecated.
  ///             Use setup activity instead to provide settings.
  intent_.Intent createSettingsIntent() =>
      intent_.Intent.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_createSettingsIntent, jni.JniType.objectType, []).object);

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public int getType()
  ///
  /// Returns the type of this TV input.
  ///@return Value is android.media.tv.TvInputInfo\#TYPE_TUNER, android.media.tv.TvInputInfo\#TYPE_OTHER, android.media.tv.TvInputInfo\#TYPE_COMPOSITE, android.media.tv.TvInputInfo\#TYPE_SVIDEO, android.media.tv.TvInputInfo\#TYPE_SCART, android.media.tv.TvInputInfo\#TYPE_COMPONENT, android.media.tv.TvInputInfo\#TYPE_VGA, android.media.tv.TvInputInfo\#TYPE_DVI, android.media.tv.TvInputInfo\#TYPE_HDMI, or android.media.tv.TvInputInfo\#TYPE_DISPLAY_PORT
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_getTunerCount =
      jniAccessors.getMethodIDOf(_classRef, "getTunerCount", "()I");

  /// from: public int getTunerCount()
  ///
  /// Returns the number of tuners this TV input has.
  ///
  /// This method is valid only for inputs of type \#TYPE_TUNER. For inputs of other
  /// types, it returns 0.
  ///
  /// Tuners correspond to physical/logical resources that allow reception of TV signal. Having
  /// <i>N</i> tuners means that the TV input is capable of receiving <i>N</i> different channels
  /// concurrently.
  int getTunerCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getTunerCount, jni.JniType.intType, []).integer;

  static final _id_canRecord =
      jniAccessors.getMethodIDOf(_classRef, "canRecord", "()Z");

  /// from: public boolean canRecord()
  ///
  /// Returns {@code true} if this TV input can record TV programs, {@code false} otherwise.
  bool canRecord() => jniAccessors.callMethodWithArgs(
      reference, _id_canRecord, jni.JniType.booleanType, []).boolean;

  static final _id_getExtras = jniAccessors.getMethodIDOf(
      _classRef, "getExtras", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns domain-specific extras associated with this TV input.
  bundle_.Bundle getExtras() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtras, jni.JniType.objectType, []).object);

  static final _id_isPassthroughInput =
      jniAccessors.getMethodIDOf(_classRef, "isPassthroughInput", "()Z");

  /// from: public boolean isPassthroughInput()
  ///
  /// Returns {@code true} if this TV input is pass-though which does not have any real channels in
  /// TvProvider. {@code false} otherwise.
  ///@see TvContract\#buildChannelUriForPassthroughInput(String)
  bool isPassthroughInput() => jniAccessors.callMethodWithArgs(
      reference, _id_isPassthroughInput, jni.JniType.booleanType, []).boolean;

  static final _id_isHidden = jniAccessors.getMethodIDOf(
      _classRef, "isHidden", "(Landroid/content/Context;)Z");

  /// from: public boolean isHidden(android.content.Context context)
  ///
  /// Checks if this TV input is marked hidden by the user in the settings.
  ///@param context Supplies a Context used to check if this TV input is hidden.
  ///@return {@code true} if the user marked this TV input hidden in settings. {@code false}
  ///         otherwise.
  bool isHidden(context_.Context context) => jniAccessors.callMethodWithArgs(
      reference,
      _id_isHidden,
      jni.JniType.booleanType,
      [context.reference]).boolean;

  static final _id_loadLabel = jniAccessors.getMethodIDOf(_classRef,
      "loadLabel", "(Landroid/content/Context;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadLabel(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Loads the user-displayed label for this TV input.
  ///@param context Supplies a Context used to load the label.
  /// This value must never be {@code null}.
  ///@return a CharSequence containing the TV input's label. If the TV input does not have
  ///         a label, its name is returned.
  jni.JniObject loadLabel(context_.Context context) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadLabel, jni.JniType.objectType, [context.reference]).object);

  static final _id_loadCustomLabel = jniAccessors.getMethodIDOf(_classRef,
      "loadCustomLabel", "(Landroid/content/Context;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadCustomLabel(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Loads the custom label set by user in settings.
  ///@param context Supplies a Context used to load the custom label.
  ///@return a CharSequence containing the TV input's custom label. {@code null} if there is no
  ///         custom label.
  jni.JniObject loadCustomLabel(context_.Context context) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_loadCustomLabel,
          jni.JniType.objectType,
          [context.reference]).object);

  static final _id_loadIcon = jniAccessors.getMethodIDOf(_classRef, "loadIcon",
      "(Landroid/content/Context;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadIcon(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Loads the user-displayed icon for this TV input.
  ///@param context Supplies a Context used to load the icon.
  /// This value must never be {@code null}.
  ///@return a Drawable containing the TV input's icon. If the TV input does not have an icon,
  ///         application's icon is returned. If it's unavailable too, {@code null} is returned.
  drawable_.Drawable loadIcon(context_.Context context) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadIcon, jni.JniType.objectType, [context.reference]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  /// This value must never be {@code null}.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.media.tv.TvInputInfo$Builder
///
/// A convenience builder for creating TvInputInfo objects.
class TvInputInfo_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvInputInfo\$Builder");
  TvInputInfo_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/content/ComponentName;)V");

  /// from: public void <init>(android.content.Context context, android.content.ComponentName component)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new builder for TvInputInfo.
  ///@param context A Context of the application package implementing this class.
  ///@param component The name of the application component to be used for the
  ///            TvInputService.
  TvInputInfo_Builder(
      context_.Context context, componentname_.ComponentName component)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [context.reference, component.reference]).object);

  static final _id_setTunerCount = jniAccessors.getMethodIDOf(
      _classRef, "setTunerCount", "(I)Landroid/media/tv/TvInputInfo\$Builder;");

  /// from: public android.media.tv.TvInputInfo.Builder setTunerCount(int tunerCount)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the tuner count. Valid only for \#TYPE_TUNER.
  ///@param tunerCount The number of tuners this TV input has.
  ///@return This Builder object to allow for chaining of calls to builder methods.
  TvInputInfo_Builder setTunerCount(int tunerCount) =>
      TvInputInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setTunerCount, jni.JniType.objectType, [tunerCount]).object);

  static final _id_setCanRecord = jniAccessors.getMethodIDOf(
      _classRef, "setCanRecord", "(Z)Landroid/media/tv/TvInputInfo\$Builder;");

  /// from: public android.media.tv.TvInputInfo.Builder setCanRecord(boolean canRecord)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets whether this TV input can record TV programs or not.
  ///@param canRecord Whether this TV input can record TV programs.
  ///@return This Builder object to allow for chaining of calls to builder methods.
  TvInputInfo_Builder setCanRecord(bool canRecord) =>
      TvInputInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setCanRecord, jni.JniType.objectType, [canRecord]).object);

  static final _id_setExtras = jniAccessors.getMethodIDOf(
      _classRef,
      "setExtras",
      "(Landroid/os/Bundle;)Landroid/media/tv/TvInputInfo\$Builder;");

  /// from: public android.media.tv.TvInputInfo.Builder setExtras(android.os.Bundle extras)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets domain-specific extras associated with this TV input.
  ///@param extras Domain-specific extras associated with this TV input. Keys _must_ be
  ///            a scoped name, i.e. prefixed with a package name you own, so that different
  ///            developers will not create conflicting keys.
  ///@return This Builder object to allow for chaining of calls to builder methods.
  TvInputInfo_Builder setExtras(bundle_.Bundle extras) =>
      TvInputInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setExtras, jni.JniType.objectType, [extras.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/media/tv/TvInputInfo;");

  /// from: public android.media.tv.TvInputInfo build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TvInputInfo instance with the specified fields. Most of the information
  /// is obtained by parsing the AndroidManifest and TvInputService\#SERVICE_META_DATA
  /// for the TvInputService this TV input implements.
  ///@return TvInputInfo containing information about this TV input.
  TvInputInfo build() => TvInputInfo.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
