// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "../../os/Bundle.dart" as bundle_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.tv.TvTrackInfo
///
/// Encapsulates the format of tracks played in TvInputService.
class TvTrackInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvTrackInfo");
  TvTrackInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.media.tv.TvTrackInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int TYPE_AUDIO
  ///
  /// The type value for audio tracks.
  static const TYPE_AUDIO = 0;

  /// from: static public final int TYPE_SUBTITLE
  ///
  /// The type value for subtitle tracks.
  static const TYPE_SUBTITLE = 2;

  /// from: static public final int TYPE_VIDEO
  ///
  /// The type value for video tracks.
  static const TYPE_VIDEO = 1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TvTrackInfo(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [in0.reference]).object);

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public int getType()
  ///
  /// Returns the type of the track. The type should be one of the followings:
  /// \#TYPE_AUDIO, \#TYPE_VIDEO and \#TYPE_SUBTITLE.
  ///@return Value is android.media.tv.TvTrackInfo\#TYPE_AUDIO, android.media.tv.TvTrackInfo\#TYPE_VIDEO, or android.media.tv.TvTrackInfo\#TYPE_SUBTITLE
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_getId =
      jniAccessors.getMethodIDOf(_classRef, "getId", "()Ljava/lang/String;");

  /// from: public java.lang.String getId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the ID of the track.
  jni.JniString getId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getId, jni.JniType.objectType, []).object);

  static final _id_getLanguage = jniAccessors.getMethodIDOf(
      _classRef, "getLanguage", "()Ljava/lang/String;");

  /// from: public java.lang.String getLanguage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the language information encoded by either ISO 639-1 or ISO 639-2/T. If the language
  /// is unknown or could not be determined, the corresponding value will be {@code null}.
  jni.JniString getLanguage() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLanguage, jni.JniType.objectType, []).object);

  static final _id_getDescription = jniAccessors.getMethodIDOf(
      _classRef, "getDescription", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a user readable description for the current track.
  jni.JniObject getDescription() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDescription, jni.JniType.objectType, []).object);

  static final _id_getAudioChannelCount =
      jniAccessors.getMethodIDOf(_classRef, "getAudioChannelCount", "()I");

  /// from: public int getAudioChannelCount()
  ///
  /// Returns the audio channel count. Valid only for \#TYPE_AUDIO tracks.
  ///@throws IllegalStateException if not called on an audio track
  int getAudioChannelCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getAudioChannelCount, jni.JniType.intType, []).integer;

  static final _id_getAudioSampleRate =
      jniAccessors.getMethodIDOf(_classRef, "getAudioSampleRate", "()I");

  /// from: public int getAudioSampleRate()
  ///
  /// Returns the audio sample rate, in the unit of Hz. Valid only for \#TYPE_AUDIO tracks.
  ///@throws IllegalStateException if not called on an audio track
  int getAudioSampleRate() => jniAccessors.callMethodWithArgs(
      reference, _id_getAudioSampleRate, jni.JniType.intType, []).integer;

  static final _id_getVideoWidth =
      jniAccessors.getMethodIDOf(_classRef, "getVideoWidth", "()I");

  /// from: public int getVideoWidth()
  ///
  /// Returns the width of the video, in the unit of pixels. Valid only for \#TYPE_VIDEO
  /// tracks.
  ///@throws IllegalStateException if not called on a video track
  int getVideoWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getVideoWidth, jni.JniType.intType, []).integer;

  static final _id_getVideoHeight =
      jniAccessors.getMethodIDOf(_classRef, "getVideoHeight", "()I");

  /// from: public int getVideoHeight()
  ///
  /// Returns the height of the video, in the unit of pixels. Valid only for \#TYPE_VIDEO
  /// tracks.
  ///@throws IllegalStateException if not called on a video track
  int getVideoHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getVideoHeight, jni.JniType.intType, []).integer;

  static final _id_getVideoFrameRate =
      jniAccessors.getMethodIDOf(_classRef, "getVideoFrameRate", "()F");

  /// from: public float getVideoFrameRate()
  ///
  /// Returns the frame rate of the video, in the unit of fps (frames per second). Valid only for
  /// \#TYPE_VIDEO tracks.
  ///@throws IllegalStateException if not called on a video track
  double getVideoFrameRate() => jniAccessors.callMethodWithArgs(
      reference, _id_getVideoFrameRate, jni.JniType.floatType, []).float;

  static final _id_getVideoPixelAspectRatio =
      jniAccessors.getMethodIDOf(_classRef, "getVideoPixelAspectRatio", "()F");

  /// from: public float getVideoPixelAspectRatio()
  ///
  /// Returns the pixel aspect ratio (the ratio of a pixel's width to its height) of the video.
  /// Valid only for \#TYPE_VIDEO tracks.
  ///@throws IllegalStateException if not called on a video track
  double getVideoPixelAspectRatio() => jniAccessors.callMethodWithArgs(
      reference, _id_getVideoPixelAspectRatio, jni.JniType.floatType, []).float;

  static final _id_getVideoActiveFormatDescription = jniAccessors.getMethodIDOf(
      _classRef, "getVideoActiveFormatDescription", "()B");

  /// from: public byte getVideoActiveFormatDescription()
  ///
  /// Returns the Active Format Description (AFD) code of the video.
  /// Valid only for \#TYPE_VIDEO tracks.
  ///
  /// The complete list of values are defined in ETSI TS 101 154 V1.7.1 Annex B, ATSC A/53 Part
  /// 4 and SMPTE 2016-1-2007.
  ///@throws IllegalStateException if not called on a video track
  int getVideoActiveFormatDescription() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getVideoActiveFormatDescription,
      jni.JniType.byteType, []).byte;

  static final _id_getExtra = jniAccessors.getMethodIDOf(
      _classRef, "getExtra", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getExtra()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the extra information about the current track.
  bundle_.Bundle getExtra() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtra, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}

/// from: android.media.tv.TvTrackInfo$Builder
///
/// A builder class for creating TvTrackInfo objects.
class TvTrackInfo_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvTrackInfo\$Builder");
  TvTrackInfo_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ILjava/lang/String;)V");

  /// from: public void <init>(int type, java.lang.String id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a Builder. Any field that should be included in the TvTrackInfo
  /// must be added.
  ///@param type The type of the track.
  /// Value is android.media.tv.TvTrackInfo\#TYPE_AUDIO, android.media.tv.TvTrackInfo\#TYPE_VIDEO, or android.media.tv.TvTrackInfo\#TYPE_SUBTITLE
  ///@param id The ID of the track that uniquely identifies the current track among all the
  ///            other tracks in the same TV program.
  /// This value must never be {@code null}.
  ///@throws IllegalArgumentException if the type is not any of \#TYPE_AUDIO,
  ///                                  \#TYPE_VIDEO and \#TYPE_SUBTITLE
  TvTrackInfo_Builder(int type, jni.JniString id)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [type, id.reference]).object);

  static final _id_setLanguage = jniAccessors.getMethodIDOf(
      _classRef,
      "setLanguage",
      "(Ljava/lang/String;)Landroid/media/tv/TvTrackInfo\$Builder;");

  /// from: public android.media.tv.TvTrackInfo.Builder setLanguage(java.lang.String language)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the language information of the current track.
  ///@param language The language string encoded by either ISO 639-1 or ISO 639-2/T.
  TvTrackInfo_Builder setLanguage(jni.JniString language) =>
      TvTrackInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setLanguage,
          jni.JniType.objectType,
          [language.reference]).object);

  static final _id_setDescription = jniAccessors.getMethodIDOf(
      _classRef,
      "setDescription",
      "(Ljava/lang/CharSequence;)Landroid/media/tv/TvTrackInfo\$Builder;");

  /// from: public android.media.tv.TvTrackInfo.Builder setDescription(java.lang.CharSequence description)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a user readable description for the current track.
  ///@param description The user readable description.
  TvTrackInfo_Builder setDescription(jni.JniObject description) =>
      TvTrackInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setDescription,
          jni.JniType.objectType,
          [description.reference]).object);

  static final _id_setAudioChannelCount = jniAccessors.getMethodIDOf(_classRef,
      "setAudioChannelCount", "(I)Landroid/media/tv/TvTrackInfo\$Builder;");

  /// from: public android.media.tv.TvTrackInfo.Builder setAudioChannelCount(int audioChannelCount)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the audio channel count. Valid only for \#TYPE_AUDIO tracks.
  ///@param audioChannelCount The audio channel count.
  ///@throws IllegalStateException if not called on an audio track
  TvTrackInfo_Builder setAudioChannelCount(int audioChannelCount) =>
      TvTrackInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAudioChannelCount,
          jni.JniType.objectType,
          [audioChannelCount]).object);

  static final _id_setAudioSampleRate = jniAccessors.getMethodIDOf(_classRef,
      "setAudioSampleRate", "(I)Landroid/media/tv/TvTrackInfo\$Builder;");

  /// from: public android.media.tv.TvTrackInfo.Builder setAudioSampleRate(int audioSampleRate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the audio sample rate, in the unit of Hz. Valid only for \#TYPE_AUDIO
  /// tracks.
  ///@param audioSampleRate The audio sample rate.
  ///@throws IllegalStateException if not called on an audio track
  TvTrackInfo_Builder setAudioSampleRate(int audioSampleRate) =>
      TvTrackInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAudioSampleRate,
          jni.JniType.objectType,
          [audioSampleRate]).object);

  static final _id_setVideoWidth = jniAccessors.getMethodIDOf(
      _classRef, "setVideoWidth", "(I)Landroid/media/tv/TvTrackInfo\$Builder;");

  /// from: public android.media.tv.TvTrackInfo.Builder setVideoWidth(int videoWidth)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the width of the video, in the unit of pixels. Valid only for \#TYPE_VIDEO
  /// tracks.
  ///@param videoWidth The width of the video.
  ///@throws IllegalStateException if not called on a video track
  TvTrackInfo_Builder setVideoWidth(int videoWidth) =>
      TvTrackInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setVideoWidth, jni.JniType.objectType, [videoWidth]).object);

  static final _id_setVideoHeight = jniAccessors.getMethodIDOf(_classRef,
      "setVideoHeight", "(I)Landroid/media/tv/TvTrackInfo\$Builder;");

  /// from: public android.media.tv.TvTrackInfo.Builder setVideoHeight(int videoHeight)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the height of the video, in the unit of pixels. Valid only for \#TYPE_VIDEO
  /// tracks.
  ///@param videoHeight The height of the video.
  ///@throws IllegalStateException if not called on a video track
  TvTrackInfo_Builder setVideoHeight(int videoHeight) =>
      TvTrackInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setVideoHeight, jni.JniType.objectType, [videoHeight]).object);

  static final _id_setVideoFrameRate = jniAccessors.getMethodIDOf(_classRef,
      "setVideoFrameRate", "(F)Landroid/media/tv/TvTrackInfo\$Builder;");

  /// from: public android.media.tv.TvTrackInfo.Builder setVideoFrameRate(float videoFrameRate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the frame rate of the video, in the unit fps (frames per rate). Valid only for
  /// \#TYPE_VIDEO tracks.
  ///@param videoFrameRate The frame rate of the video.
  ///@throws IllegalStateException if not called on a video track
  TvTrackInfo_Builder setVideoFrameRate(double videoFrameRate) =>
      TvTrackInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setVideoFrameRate,
          jni.JniType.objectType,
          [videoFrameRate]).object);

  static final _id_setVideoPixelAspectRatio = jniAccessors.getMethodIDOf(
      _classRef,
      "setVideoPixelAspectRatio",
      "(F)Landroid/media/tv/TvTrackInfo\$Builder;");

  /// from: public android.media.tv.TvTrackInfo.Builder setVideoPixelAspectRatio(float videoPixelAspectRatio)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the pixel aspect ratio (the ratio of a pixel's width to its height) of the video.
  /// Valid only for \#TYPE_VIDEO tracks.
  ///
  /// This is needed for applications to be able to scale the video properly for some video
  /// formats such as 720x576 4:3 and 720x576 16:9 where pixels are not square. By default,
  /// applications assume the value of 1.0 (square pixels), so it is not necessary to set the
  /// pixel aspect ratio for most video formats.
  ///@param videoPixelAspectRatio The pixel aspect ratio of the video.
  ///@throws IllegalStateException if not called on a video track
  TvTrackInfo_Builder setVideoPixelAspectRatio(double videoPixelAspectRatio) =>
      TvTrackInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setVideoPixelAspectRatio,
          jni.JniType.objectType,
          [videoPixelAspectRatio]).object);

  static final _id_setVideoActiveFormatDescription = jniAccessors.getMethodIDOf(
      _classRef,
      "setVideoActiveFormatDescription",
      "(B)Landroid/media/tv/TvTrackInfo\$Builder;");

  /// from: public android.media.tv.TvTrackInfo.Builder setVideoActiveFormatDescription(byte videoActiveFormatDescription)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the Active Format Description (AFD) code of the video.
  /// Valid only for \#TYPE_VIDEO tracks.
  ///
  /// This is needed for applications to be able to scale the video properly based on the
  /// information about where in the coded picture the active video is.
  /// The complete list of values are defined in ETSI TS 101 154 V1.7.1 Annex B, ATSC A/53 Part
  /// 4 and SMPTE 2016-1-2007.
  ///@param videoActiveFormatDescription The AFD code of the video.
  ///@throws IllegalStateException if not called on a video track
  TvTrackInfo_Builder setVideoActiveFormatDescription(
          int videoActiveFormatDescription) =>
      TvTrackInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setVideoActiveFormatDescription,
          jni.JniType.objectType,
          [videoActiveFormatDescription]).object);

  static final _id_setExtra = jniAccessors.getMethodIDOf(_classRef, "setExtra",
      "(Landroid/os/Bundle;)Landroid/media/tv/TvTrackInfo\$Builder;");

  /// from: public android.media.tv.TvTrackInfo.Builder setExtra(android.os.Bundle extra)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the extra information about the current track.
  ///@param extra The extra information.
  TvTrackInfo_Builder setExtra(bundle_.Bundle extra) =>
      TvTrackInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setExtra, jni.JniType.objectType, [extra.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/media/tv/TvTrackInfo;");

  /// from: public android.media.tv.TvTrackInfo build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TvTrackInfo instance with the specified fields.
  ///@return The new TvTrackInfo instance
  TvTrackInfo build() => TvTrackInfo.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
