// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../content/ComponentName.dart" as componentname_;

import "../../net/Uri.dart" as uri_;

import "../../content/Context.dart" as context_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.tv.TvContract
///
/// The contract between the TV provider and applications. Contains definitions for the supported
/// URIs and columns.
/// <h3>Overview</h3>
///
/// TvContract defines a basic database of TV content metadata such as channel and program
/// information. The information is stored in Channels and Programs tables.
///
/// <ul>
///     <li>A row in the Channels table represents information about a TV channel. The data
///         format can vary greatly from standard to standard or according to service provider, thus
///         the columns here are mostly comprised of basic entities that are usually seen to users
///         regardless of standard such as channel number and name.</li>
///     <li>A row in the Programs table represents a set of data describing a TV program such
///         as program title and start time.</li>
/// </ul>
class TvContract extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvContract");
  TvContract.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_INITIALIZE_PROGRAMS
  ///
  /// Broadcast Action: sent to the target TV input after it is first installed to notify the input
  /// to initialize its channels and programs to the system content provider.
  ///
  /// Note that this intent is sent only on devices with
  /// android.content.pm.PackageManager\#FEATURE_LEANBACK enabled. Besides that, in order
  /// to receive this intent, the target TV input must:
  /// <ul>
  ///     <li>Declare a broadcast receiver for this intent in its
  ///         <code>AndroidManifest.xml</code>.</li>
  ///     <li>Declare appropriate permissions to write channel and program data in its
  ///         <code>AndroidManifest.xml</code>.</li>
  /// </ul>
  static const ACTION_INITIALIZE_PROGRAMS =
      "android.media.tv.action.INITIALIZE_PROGRAMS";

  /// from: static public final java.lang.String ACTION_PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT
  ///
  /// Broadcast Action: sent by the system to tell the target TV input that one of its existing
  /// preview programs is added to the watch next programs table by user.
  ///
  /// The intent must contain the following bundle parameters:
  /// <ul>
  ///     <li>\#EXTRA_PREVIEW_PROGRAM_ID: the ID of the existing preview program.</li>
  ///     <li>\#EXTRA_WATCH_NEXT_PROGRAM_ID: the ID of the new watch next program.</li>
  /// </ul>
  static const ACTION_PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT =
      "android.media.tv.action.PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT";

  /// from: static public final java.lang.String ACTION_PREVIEW_PROGRAM_BROWSABLE_DISABLED
  ///
  /// Broadcast Action: sent by the system to tell the target TV input that one of its preview
  /// program's browsable state is disabled, i.e., it will no longer be shown to users, which, for
  /// example, might be a result of users' interaction with UI. The input is expected to delete the
  /// preview program from the content provider.
  ///
  /// The intent must contain the following bundle parameter:
  /// <ul>
  ///     <li>\#EXTRA_PREVIEW_PROGRAM_ID: the disabled preview program ID.</li>
  /// </ul>
  static const ACTION_PREVIEW_PROGRAM_BROWSABLE_DISABLED =
      "android.media.tv.action.PREVIEW_PROGRAM_BROWSABLE_DISABLED";

  /// from: static public final java.lang.String ACTION_REQUEST_CHANNEL_BROWSABLE
  ///
  /// Activity Action: sent by an application telling the system to make the given channel
  /// browsable with user interaction. The system may show UI to ask user to approve the channel.
  /// This is only relevant to channels with Channels\#TYPE_PREVIEW type. Use
  /// Activity\#startActivityForResult to get the result of the request.
  ///
  /// The intent must contain the following bundle parameters:
  /// <ul>
  ///     <li>\#EXTRA_CHANNEL_ID: ID for the Channels\#TYPE_PREVIEW channel as a long
  ///     integer.</li>
  /// </ul>
  static const ACTION_REQUEST_CHANNEL_BROWSABLE =
      "android.media.tv.action.REQUEST_CHANNEL_BROWSABLE";

  /// from: static public final java.lang.String ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED
  ///
  /// Broadcast Action: sent by the system to tell the target TV input that one of its "watch next"
  /// program's browsable state is disabled, i.e., it will no longer be shown to users, which, for
  /// example, might be a result of users' interaction with UI. The input is expected to delete the
  /// "watch next" program from the content provider.
  ///
  /// The intent must contain the following bundle parameter:
  /// <ul>
  ///     <li>\#EXTRA_WATCH_NEXT_PROGRAM_ID: the disabled "watch next" program ID.</li>
  /// </ul>
  static const ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED =
      "android.media.tv.action.WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED";

  /// from: static public final java.lang.String AUTHORITY
  ///
  /// The authority for the TV provider.
  static const AUTHORITY = "android.media.tv";

  /// from: static public final java.lang.String EXTRA_CHANNEL_ID
  ///
  /// The key for a bundle parameter containing a channel ID as a long integer
  static const EXTRA_CHANNEL_ID = "android.media.tv.extra.CHANNEL_ID";

  /// from: static public final java.lang.String EXTRA_PREVIEW_PROGRAM_ID
  ///
  /// The key for a bundle parameter containing a program ID as a long integer.
  static const EXTRA_PREVIEW_PROGRAM_ID =
      "android.media.tv.extra.PREVIEW_PROGRAM_ID";

  /// from: static public final java.lang.String EXTRA_WATCH_NEXT_PROGRAM_ID
  ///
  /// The key for a bundle parameter containing a watch next program ID as a long integer.
  static const EXTRA_WATCH_NEXT_PROGRAM_ID =
      "android.media.tv.extra.WATCH_NEXT_PROGRAM_ID";

  static final _id_buildInputId = jniAccessors.getStaticMethodIDOf(_classRef,
      "buildInputId", "(Landroid/content/ComponentName;)Ljava/lang/String;");

  /// from: static public java.lang.String buildInputId(android.content.ComponentName name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds an ID that uniquely identifies a TV input service.
  ///@param name The ComponentName of the TV input service to build ID for.
  ///@return the ID for the given TV input service.
  static jni.JniString buildInputId(componentname_.ComponentName name) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_buildInputId, jni.JniType.objectType, [name.reference]).object);

  static final _id_buildChannelUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "buildChannelUri", "(J)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildChannelUri(long channelId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to a specific channel.
  ///@param channelId The ID of the channel to point to.
  static uri_.Uri buildChannelUri(int channelId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_buildChannelUri, jni.JniType.objectType, [channelId]).object);

  static final _id_buildChannelUriForPassthroughInput =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "buildChannelUriForPassthroughInput",
          "(Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildChannelUriForPassthroughInput(java.lang.String inputId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Build a special channel URI intended to be used with pass-through inputs. (e.g. HDMI)
  ///@param inputId The ID of the pass-through input to build a channels URI for.
  ///@see TvInputInfo\#isPassthroughInput()
  static uri_.Uri buildChannelUriForPassthroughInput(jni.JniString inputId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildChannelUriForPassthroughInput,
          jni.JniType.objectType,
          [inputId.reference]).object);

  static final _id_buildChannelLogoUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "buildChannelLogoUri", "(J)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildChannelLogoUri(long channelId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to a channel logo. See Channels.Logo.
  ///@param channelId The ID of the channel whose logo is pointed to.
  static uri_.Uri buildChannelLogoUri(int channelId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_buildChannelLogoUri, jni.JniType.objectType, [channelId]).object);

  static final _id_buildChannelLogoUri1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "buildChannelLogoUri", "(Landroid/net/Uri;)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildChannelLogoUri(android.net.Uri channelUri)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to a channel logo. See Channels.Logo.
  ///@param channelUri The URI of the channel whose logo is pointed to.
  static uri_.Uri buildChannelLogoUri1(uri_.Uri channelUri) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildChannelLogoUri1,
          jni.JniType.objectType,
          [channelUri.reference]).object);

  static final _id_buildChannelsUriForInput = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "buildChannelsUriForInput",
      "(Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildChannelsUriForInput(java.lang.String inputId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to all channels from a given TV input.
  ///@param inputId The ID of the TV input to build a channels URI for. If {@code null}, builds a
  ///            URI for all the TV inputs.
  ///
  /// This value may be {@code null}.
  static uri_.Uri buildChannelsUriForInput(jni.JniString inputId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildChannelsUriForInput,
          jni.JniType.objectType,
          [inputId.reference]).object);

  static final _id_buildProgramUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "buildProgramUri", "(J)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildProgramUri(long programId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to a specific program.
  ///@param programId The ID of the program to point to.
  static uri_.Uri buildProgramUri(int programId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_buildProgramUri, jni.JniType.objectType, [programId]).object);

  static final _id_buildProgramsUriForChannel =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "buildProgramsUriForChannel", "(J)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildProgramsUriForChannel(long channelId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to all programs on a given channel.
  ///@param channelId The ID of the channel to return programs for.
  static uri_.Uri buildProgramsUriForChannel(int channelId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildProgramsUriForChannel,
          jni.JniType.objectType,
          [channelId]).object);

  static final _id_buildProgramsUriForChannel1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "buildProgramsUriForChannel",
          "(Landroid/net/Uri;)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildProgramsUriForChannel(android.net.Uri channelUri)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to all programs on a given channel.
  ///@param channelUri The URI of the channel to return programs for.
  static uri_.Uri buildProgramsUriForChannel1(uri_.Uri channelUri) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildProgramsUriForChannel1,
          jni.JniType.objectType,
          [channelUri.reference]).object);

  static final _id_buildProgramsUriForChannel2 =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "buildProgramsUriForChannel", "(JJJ)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildProgramsUriForChannel(long channelId, long startTime, long endTime)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to programs on a specific channel whose schedules overlap with the
  /// given time frame.
  ///@param channelId The ID of the channel to return programs for.
  ///@param startTime The start time used to filter programs. The returned programs will have a
  ///            Programs\#COLUMN_END_TIME_UTC_MILLIS that is greater than or equal to
  ///             {@code startTime}.
  ///@param endTime The end time used to filter programs. The returned programs will have
  ///            Programs\#COLUMN_START_TIME_UTC_MILLIS that is less than or equal to
  ///            {@code endTime}.
  static uri_.Uri buildProgramsUriForChannel2(
          int channelId, int startTime, int endTime) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildProgramsUriForChannel2,
          jni.JniType.objectType,
          [channelId, startTime, endTime]).object);

  static final _id_buildProgramsUriForChannel3 =
      jniAccessors.getStaticMethodIDOf(_classRef, "buildProgramsUriForChannel",
          "(Landroid/net/Uri;JJ)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildProgramsUriForChannel(android.net.Uri channelUri, long startTime, long endTime)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to programs on a specific channel whose schedules overlap with the
  /// given time frame.
  ///@param channelUri The URI of the channel to return programs for.
  ///@param startTime The start time used to filter programs. The returned programs should have
  ///            Programs\#COLUMN_END_TIME_UTC_MILLIS that is greater than this time.
  ///@param endTime The end time used to filter programs. The returned programs should have
  ///            Programs\#COLUMN_START_TIME_UTC_MILLIS that is less than this time.
  static uri_.Uri buildProgramsUriForChannel3(
          uri_.Uri channelUri, int startTime, int endTime) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildProgramsUriForChannel3,
          jni.JniType.objectType,
          [channelUri.reference, startTime, endTime]).object);

  static final _id_buildRecordedProgramUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "buildRecordedProgramUri", "(J)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildRecordedProgramUri(long recordedProgramId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to a specific recorded program.
  ///@param recordedProgramId The ID of the recorded program to point to.
  static uri_.Uri buildRecordedProgramUri(int recordedProgramId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildRecordedProgramUri,
          jni.JniType.objectType,
          [recordedProgramId]).object);

  static final _id_buildPreviewProgramUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "buildPreviewProgramUri", "(J)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildPreviewProgramUri(long previewProgramId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to a specific preview program.
  ///@param previewProgramId The ID of the preview program to point to.
  static uri_.Uri buildPreviewProgramUri(int previewProgramId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildPreviewProgramUri,
          jni.JniType.objectType,
          [previewProgramId]).object);

  static final _id_buildPreviewProgramsUriForChannel =
      jniAccessors.getStaticMethodIDOf(_classRef,
          "buildPreviewProgramsUriForChannel", "(J)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildPreviewProgramsUriForChannel(long channelId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to all preview programs on a given channel.
  ///@param channelId The ID of the channel to return preview programs for.
  static uri_.Uri buildPreviewProgramsUriForChannel(int channelId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildPreviewProgramsUriForChannel,
          jni.JniType.objectType,
          [channelId]).object);

  static final _id_buildPreviewProgramsUriForChannel1 =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "buildPreviewProgramsUriForChannel",
          "(Landroid/net/Uri;)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildPreviewProgramsUriForChannel(android.net.Uri channelUri)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to all preview programs on a given channel.
  ///@param channelUri The URI of the channel to return preview programs for.
  static uri_.Uri buildPreviewProgramsUriForChannel1(uri_.Uri channelUri) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildPreviewProgramsUriForChannel1,
          jni.JniType.objectType,
          [channelUri.reference]).object);

  static final _id_buildWatchNextProgramUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "buildWatchNextProgramUri", "(J)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildWatchNextProgramUri(long watchNextProgramId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds a URI that points to a specific watch next program.
  ///@param watchNextProgramId The ID of the watch next program to point to.
  static uri_.Uri buildWatchNextProgramUri(int watchNextProgramId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildWatchNextProgramUri,
          jni.JniType.objectType,
          [watchNextProgramId]).object);

  static final _id_isChannelUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "isChannelUri", "(Landroid/net/Uri;)Z");

  /// from: static public boolean isChannelUri(android.net.Uri uri)
  ///
  /// @param uri This value must never be {@code null}.
  ///@return {@code true} if {@code uri} is a channel URI.
  static bool isChannelUri(uri_.Uri uri) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isChannelUri,
          jni.JniType.booleanType, [uri.reference]).boolean;

  static final _id_isChannelUriForTunerInput = jniAccessors.getStaticMethodIDOf(
      _classRef, "isChannelUriForTunerInput", "(Landroid/net/Uri;)Z");

  /// from: static public boolean isChannelUriForTunerInput(android.net.Uri uri)
  ///
  /// @param uri This value must never be {@code null}.
  ///@return {@code true} if {@code uri} is a channel URI for a tuner input.
  static bool isChannelUriForTunerInput(uri_.Uri uri) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_isChannelUriForTunerInput,
          jni.JniType.booleanType,
          [uri.reference]).boolean;

  static final _id_isChannelUriForPassthroughInput =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "isChannelUriForPassthroughInput", "(Landroid/net/Uri;)Z");

  /// from: static public boolean isChannelUriForPassthroughInput(android.net.Uri uri)
  ///
  /// @param uri This value must never be {@code null}.
  ///@return {@code true} if {@code uri} is a channel URI for a pass-through input.
  static bool isChannelUriForPassthroughInput(uri_.Uri uri) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_isChannelUriForPassthroughInput,
          jni.JniType.booleanType,
          [uri.reference]).boolean;

  static final _id_isProgramUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "isProgramUri", "(Landroid/net/Uri;)Z");

  /// from: static public boolean isProgramUri(android.net.Uri uri)
  ///
  /// @param uri This value must never be {@code null}.
  ///@return {@code true} if {@code uri} is a program URI.
  static bool isProgramUri(uri_.Uri uri) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isProgramUri,
          jni.JniType.booleanType, [uri.reference]).boolean;

  static final _id_isRecordedProgramUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "isRecordedProgramUri", "(Landroid/net/Uri;)Z");

  /// from: static public boolean isRecordedProgramUri(android.net.Uri uri)
  ///
  /// @param uri This value must never be {@code null}.
  ///@return {@code true} if {@code uri} is a recorded program URI.
  static bool isRecordedProgramUri(uri_.Uri uri) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isRecordedProgramUri,
          jni.JniType.booleanType, [uri.reference]).boolean;

  static final _id_requestChannelBrowsable = jniAccessors.getStaticMethodIDOf(
      _classRef, "requestChannelBrowsable", "(Landroid/content/Context;J)V");

  /// from: static public void requestChannelBrowsable(android.content.Context context, long channelId)
  ///
  /// Requests to make a channel browsable.
  ///
  /// Once called, the system will review the request and make the channel browsable based on
  /// its policy. The first request from a package is guaranteed to be approved. This is only
  /// relevant to channels with Channels\#TYPE_PREVIEW type.
  ///@param context The context for accessing content provider.
  ///@param channelId The channel ID to be browsable.
  ///@see Channels\#COLUMN_BROWSABLE
  static void requestChannelBrowsable(
          context_.Context context, int channelId) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_requestChannelBrowsable,
          jni.JniType.voidType,
          [context.reference, channelId]).check();
}

/// from: android.media.tv.TvContract$WatchNextPrograms
///
/// Column definitions for the "watch next" TV programs table.
class TvContract_WatchNextPrograms extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvContract\$WatchNextPrograms");
  TvContract_WatchNextPrograms.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ASPECT_RATIO_16_9
  ///
  /// The aspect ratio for 16:9.
  ///@see \#COLUMN_POSTER_ART_ASPECT_RATIO
  ///@see \#COLUMN_THUMBNAIL_ASPECT_RATIO
  static const ASPECT_RATIO_16_9 = 0;

  /// from: static public final int ASPECT_RATIO_1_1
  ///
  /// The aspect ratio for 1:1.
  ///@see \#COLUMN_POSTER_ART_ASPECT_RATIO
  ///@see \#COLUMN_THUMBNAIL_ASPECT_RATIO
  static const ASPECT_RATIO_1_1 = 3;

  /// from: static public final int ASPECT_RATIO_2_3
  ///
  /// The aspect ratio for 2:3.
  ///@see \#COLUMN_POSTER_ART_ASPECT_RATIO
  ///@see \#COLUMN_THUMBNAIL_ASPECT_RATIO
  static const ASPECT_RATIO_2_3 = 4;

  /// from: static public final int ASPECT_RATIO_3_2
  ///
  /// The aspect ratio for 3:2.
  ///@see \#COLUMN_POSTER_ART_ASPECT_RATIO
  ///@see \#COLUMN_THUMBNAIL_ASPECT_RATIO
  static const ASPECT_RATIO_3_2 = 1;

  /// from: static public final int ASPECT_RATIO_4_3
  ///
  /// The aspect ratio for 4:3.
  ///@see \#COLUMN_POSTER_ART_ASPECT_RATIO
  ///@see \#COLUMN_THUMBNAIL_ASPECT_RATIO
  static const ASPECT_RATIO_4_3 = 2;

  /// from: static public final int AVAILABILITY_AVAILABLE
  ///
  /// The availability for "available to this user".
  ///@see \#COLUMN_AVAILABILITY
  static const AVAILABILITY_AVAILABLE = 0;

  /// from: static public final int AVAILABILITY_FREE_WITH_SUBSCRIPTION
  ///
  /// The availability for "free with subscription".
  ///@see \#COLUMN_AVAILABILITY
  static const AVAILABILITY_FREE_WITH_SUBSCRIPTION = 1;

  /// from: static public final int AVAILABILITY_PAID_CONTENT
  ///
  /// The availability for "paid content, either to-own or rental
  /// (user has not purchased/rented).
  ///@see \#COLUMN_AVAILABILITY
  static const AVAILABILITY_PAID_CONTENT = 2;

  /// from: static public final java.lang.String COLUMN_AUDIO_LANGUAGE
  ///
  /// The comma-separated audio languages of this TV program.
  ///
  /// This is used to describe available audio languages included in the program. Use either
  /// ISO 639-1 or 639-2/T codes.
  ///
  /// Type: TEXT
  static const COLUMN_AUDIO_LANGUAGE = "audio_language";

  /// from: static public final java.lang.String COLUMN_AUTHOR
  ///
  /// The author or artist of this content.
  ///
  /// Type: TEXT
  static const COLUMN_AUTHOR = "author";

  /// from: static public final java.lang.String COLUMN_AVAILABILITY
  ///
  /// The availability of this TV program.
  ///
  /// The value should match one of the followings:
  /// \#AVAILABILITY_AVAILABLE,
  /// \#AVAILABILITY_FREE_WITH_SUBSCRIPTION, and
  /// \#AVAILABILITY_PAID_CONTENT.
  ///
  /// Type: INTEGER
  static const COLUMN_AVAILABILITY = "availability";

  /// from: static public final java.lang.String COLUMN_BROWSABLE
  ///
  /// The flag indicating whether this TV program is browsable or not.
  ///
  /// This column can only be set by applications having proper system permission. For
  /// other applications, this is a read-only column.
  ///
  /// A value of 1 indicates that the program is browsable and can be shown to users in
  /// the UI. A value of 0 indicates that the program should be hidden from users and the
  /// application who changes this value to 0 should send
  /// \#ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED to the owner of the program
  /// to notify this change.
  ///
  /// This value is set to 1 (browsable) by default.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_BROWSABLE = "browsable";

  /// from: static public final java.lang.String COLUMN_CANONICAL_GENRE
  ///
  /// The comma-separated canonical genre string of this TV program.
  ///
  /// Canonical genres are defined in Genres. Use Genres\#encode to create a
  /// text that can be stored in this column. Use Genres\#decode to get the canonical
  /// genre strings from the text stored in the column.
  ///
  /// Type: TEXT
  ///@see Genres
  ///@see Genres\#encode
  ///@see Genres\#decode
  static const COLUMN_CANONICAL_GENRE = "canonical_genre";

  /// from: static public final java.lang.String COLUMN_CONTENT_ID
  ///
  /// The content ID of this TV program.
  ///
  /// A public ID of the content which allows the application to apply the same operation to
  /// all the program copies in different channels.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_CONTENT_ID = "content_id";

  /// from: static public final java.lang.String COLUMN_CONTENT_RATING
  ///
  /// The comma-separated content ratings of this TV program.
  ///
  /// This is used to describe the content rating(s) of this program. Each comma-separated
  /// content rating sub-string should be generated by calling
  /// TvContentRating\#flattenToString. Note that in most cases the program content is
  /// rated by a single rating system, thus resulting in a corresponding single sub-string that
  /// does not require comma separation and multiple sub-strings appear only when the program
  /// content is rated by two or more content rating systems. If any of those ratings is
  /// specified as "blocked rating" in the user's parental control settings, the TV input
  /// service should block the current content and wait for the signal that it is okay to
  /// unblock.
  ///
  /// Type: TEXT
  static const COLUMN_CONTENT_RATING = "content_rating";

  /// from: static public final java.lang.String COLUMN_DURATION_MILLIS
  ///
  /// The duration (in milliseconds) of the original content of this preview program.
  ///
  /// Can be empty.
  ///
  /// Type: INTEGER
  static const COLUMN_DURATION_MILLIS = "duration_millis";

  /// from: static public final java.lang.String COLUMN_EPISODE_DISPLAY_NUMBER
  ///
  /// The episode display number of this TV program for episodic TV shows.
  ///
  /// This is used to indicate the episode number. (e.g. 1, 2 or 3) Note that the value
  /// does not necessarily be numeric. (e.g. 12B)
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_EPISODE_DISPLAY_NUMBER = "episode_display_number";

  /// from: static public final java.lang.String COLUMN_EPISODE_TITLE
  ///
  /// The episode title of this TV program for episodic TV shows.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_EPISODE_TITLE = "episode_title";

  /// from: static public final java.lang.String COLUMN_INTENT_URI
  ///
  /// The intent URI which is launched when the preview program is selected.
  ///
  /// The URI is created using Intent\#toUri with Intent\#URI_INTENT_SCHEME
  /// and converted back to the original intent with Intent\#parseUri. The intent is
  /// launched when the user selects the preview program item.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_INTENT_URI = "intent_uri";

  /// from: static public final java.lang.String COLUMN_INTERACTION_COUNT
  ///
  /// The interaction count for this program.
  ///
  /// This indicates the number of times interaction has happened.
  ///
  /// Type: INTEGER (long)
  ///@see \#COLUMN_INTERACTION_TYPE
  static const COLUMN_INTERACTION_COUNT = "interaction_count";

  /// from: static public final java.lang.String COLUMN_INTERACTION_TYPE
  ///
  /// The type of interaction for this TV program.
  ///
  ///  The value should match one of the followings:
  /// \#INTERACTION_TYPE_VIEWS,
  /// \#INTERACTION_TYPE_LISTENS,
  /// \#INTERACTION_TYPE_FOLLOWERS,
  /// \#INTERACTION_TYPE_FANS,
  /// \#INTERACTION_TYPE_LIKES,
  /// \#INTERACTION_TYPE_THUMBS, and
  /// \#INTERACTION_TYPE_VIEWERS.
  ///
  /// Type: INTEGER
  ///@see \#COLUMN_INTERACTION_COUNT
  static const COLUMN_INTERACTION_TYPE = "interaction_type";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_DATA
  ///
  /// Internal data used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: BLOB
  static const COLUMN_INTERNAL_PROVIDER_DATA = "internal_provider_data";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG1 = "internal_provider_flag1";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG2 = "internal_provider_flag2";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG3 = "internal_provider_flag3";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG4 = "internal_provider_flag4";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_ID
  ///
  /// The internal ID used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_INTERNAL_PROVIDER_ID = "internal_provider_id";

  /// from: static public final java.lang.String COLUMN_ITEM_COUNT
  ///
  /// The count of the items included in this TV program.
  ///
  /// This is only relevant if the program represents a collection of items such as series,
  /// episodes, or music tracks.
  ///
  /// Type: INTEGER
  static const COLUMN_ITEM_COUNT = "item_count";

  /// from: static public final java.lang.String COLUMN_LAST_ENGAGEMENT_TIME_UTC_MILLIS
  ///
  /// The last UTC time that the user engaged in this TV program, in milliseconds since the
  /// epoch. This is a hint for the application that is used for ordering of "watch next"
  /// programs.
  ///
  /// The meaning of the value varies depending on the \#COLUMN_WATCH_NEXT_TYPE:
  /// <ul>
  ///     <li>\#WATCH_NEXT_TYPE_CONTINUE: the date that the user was last watching the
  ///     content.</li>
  ///     <li>\#WATCH_NEXT_TYPE_NEXT: the date of the last episode watched.</li>
  ///     <li>\#WATCH_NEXT_TYPE_NEW: the release date of the new episode.</li>
  ///     <li>\#WATCH_NEXT_TYPE_WATCHLIST: the date the item was added to the Watchlist.
  ///     </li>
  /// </ul>
  ///
  /// This is a required field.
  ///
  /// Type: INTEGER (long)
  static const COLUMN_LAST_ENGAGEMENT_TIME_UTC_MILLIS =
      "last_engagement_time_utc_millis";

  /// from: static public final java.lang.String COLUMN_LAST_PLAYBACK_POSITION_MILLIS
  ///
  /// The last playback position (in milliseconds) of the original content of this preview
  /// program.
  ///
  /// Can be empty.
  ///
  /// Type: INTEGER
  static const COLUMN_LAST_PLAYBACK_POSITION_MILLIS =
      "last_playback_position_millis";

  /// from: static public final java.lang.String COLUMN_LIVE
  ///
  /// The flag indicating whether this TV program is live or not.
  ///
  /// A value of 1 indicates that the content is airing and should be consumed now, a value
  /// of 0 indicates that the content is off the air and does not need to be consumed at the
  /// present time. If not specified, the value is set to 0 (not live) by default.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_LIVE = "live";

  /// from: static public final java.lang.String COLUMN_LOGO_URI
  ///
  /// The URI for the logo of this TV program.
  ///
  /// This is a small badge shown on top of the poster art or thumbnail representing the
  /// source of the content.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_LOGO_URI = "logo_uri";

  /// from: static public final java.lang.String COLUMN_LONG_DESCRIPTION
  ///
  /// The detailed, lengthy description of this TV program that is displayed only when the user
  /// wants to see more information.
  ///
  /// TV input services should leave this field empty if they have no additional details
  /// beyond \#COLUMN_SHORT_DESCRIPTION.
  ///
  /// Type: TEXT
  static const COLUMN_LONG_DESCRIPTION = "long_description";

  /// from: static public final java.lang.String COLUMN_OFFER_PRICE
  ///
  /// The offer price of this TV program.
  ///
  /// This is the promotional cost of the content. It is only used if the availability of
  /// the program is \#AVAILABILITY_PAID_CONTENT.
  ///
  /// Type: TEXT
  ///@see \#COLUMN_STARTING_PRICE
  static const COLUMN_OFFER_PRICE = "offer_price";

  /// from: static public final java.lang.String COLUMN_POSTER_ART_ASPECT_RATIO
  ///
  /// The aspect ratio of the poster art for this TV program.
  ///
  /// The value should match one of the followings:
  /// \#ASPECT_RATIO_16_9,
  /// \#ASPECT_RATIO_3_2,
  /// \#ASPECT_RATIO_4_3,
  /// \#ASPECT_RATIO_1_1, and
  /// \#ASPECT_RATIO_2_3.
  ///
  /// Type: INTEGER
  static const COLUMN_POSTER_ART_ASPECT_RATIO = "poster_art_aspect_ratio";

  /// from: static public final java.lang.String COLUMN_POSTER_ART_URI
  ///
  /// The URI for the poster art of this TV program.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_POSTER_ART_URI = "poster_art_uri";

  /// from: static public final java.lang.String COLUMN_PREVIEW_VIDEO_URI
  ///
  /// The URI for the preview video.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_PREVIEW_VIDEO_URI = "preview_video_uri";

  /// from: static public final java.lang.String COLUMN_RELEASE_DATE
  ///
  /// The release date of this TV program.
  ///
  /// The value should be in one of the following formats:
  /// "yyyy", "yyyy-MM-dd", and "yyyy-MM-ddTHH:mm:ssZ" (UTC in ISO 8601).
  ///
  /// Type: TEXT
  static const COLUMN_RELEASE_DATE = "release_date";

  /// from: static public final java.lang.String COLUMN_REVIEW_RATING
  ///
  /// The review rating score for this program.
  ///
  /// The format of the value is dependent on \#COLUMN_REVIEW_RATING_STYLE. If the
  /// style is \#REVIEW_RATING_STYLE_STARS, the value should be a real number between
  /// 0.0 and 5.0. (e.g. "4.5") If the style is \#REVIEW_RATING_STYLE_THUMBS_UP_DOWN,
  /// the value should be two integers, one for thumbs-up count and the other for thumbs-down
  /// count, with a comma between them. (e.g. "200,40") If the style is
  /// \#REVIEW_RATING_STYLE_PERCENTAGE, the value shoule be a real number between 0 and
  /// 100. (e.g. "99.9")
  ///
  /// Type: TEXT
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const COLUMN_REVIEW_RATING = "review_rating";

  /// from: static public final java.lang.String COLUMN_REVIEW_RATING_STYLE
  ///
  /// The review rating score style used for \#COLUMN_REVIEW_RATING.
  ///
  ///  The value should match one of the followings: \#REVIEW_RATING_STYLE_STARS,
  /// \#REVIEW_RATING_STYLE_THUMBS_UP_DOWN, and \#REVIEW_RATING_STYLE_PERCENTAGE.
  ///
  /// Type: INTEGER
  ///@see \#COLUMN_REVIEW_RATING
  static const COLUMN_REVIEW_RATING_STYLE = "review_rating_style";

  /// from: static public final java.lang.String COLUMN_SEARCHABLE
  ///
  /// The flag indicating whether this TV program is searchable or not.
  ///
  /// The columns of searchable programs can be read by other applications that have proper
  /// permission. Care must be taken not to open sensitive data.
  ///
  /// A value of 1 indicates that the program is searchable and its columns can be read by
  /// other applications, a value of 0 indicates that the program is hidden and its columns can
  /// be read only by the package that owns the program and the system. If not specified, this
  /// value is set to 1 (searchable) by default.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_SEARCHABLE = "searchable";

  /// from: static public final java.lang.String COLUMN_SEASON_DISPLAY_NUMBER
  ///
  /// The season display number of this TV program for episodic TV shows.
  ///
  /// This is used to indicate the season number. (e.g. 1, 2 or 3) Note that the value
  /// does not necessarily be numeric. (e.g. 12B)
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_SEASON_DISPLAY_NUMBER = "season_display_number";

  /// from: static public final java.lang.String COLUMN_SEASON_TITLE
  ///
  /// The title of the season for this TV program for episodic TV shows.
  ///
  /// This is an optional field supplied only when the season has a special title
  /// (e.g. The Final Season). If provided, the applications should display it instead of
  /// \#COLUMN_SEASON_DISPLAY_NUMBER, and should display it without alterations.
  /// (e.g. for "The Final Season", displayed string should be "The Final Season", not
  /// "Season The Final Season"). When displaying multiple programs, the order should be based
  /// on \#COLUMN_SEASON_DISPLAY_NUMBER, even when \#COLUMN_SEASON_TITLE exists.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_SEASON_TITLE = "season_title";

  /// from: static public final java.lang.String COLUMN_SHORT_DESCRIPTION
  ///
  /// The short description of this TV program that is displayed to the user by default.
  ///
  /// It is recommended to limit the length of the descriptions to 256 characters.
  ///
  /// Type: TEXT
  static const COLUMN_SHORT_DESCRIPTION = "short_description";

  /// from: static public final java.lang.String COLUMN_STARTING_PRICE
  ///
  /// The starting price of this TV program.
  ///
  /// This indicates the lowest regular acquisition cost of the content. It is only used
  /// if the availability of the program is \#AVAILABILITY_PAID_CONTENT.
  ///
  /// Type: TEXT
  ///@see \#COLUMN_OFFER_PRICE
  static const COLUMN_STARTING_PRICE = "starting_price";

  /// from: static public final java.lang.String COLUMN_THUMBNAIL_ASPECT_RATIO
  ///
  /// The aspect ratio of the thumbnail for this TV program.
  ///
  /// The value should match one of the followings:
  /// \#ASPECT_RATIO_16_9,
  /// \#ASPECT_RATIO_3_2,
  /// \#ASPECT_RATIO_4_3,
  /// \#ASPECT_RATIO_1_1, and
  /// \#ASPECT_RATIO_2_3.
  ///
  /// Type: INTEGER
  static const COLUMN_THUMBNAIL_ASPECT_RATIO = "poster_thumbnail_aspect_ratio";

  /// from: static public final java.lang.String COLUMN_THUMBNAIL_URI
  ///
  /// The URI for the thumbnail of this TV program.
  ///
  /// The system can generate a thumbnail from the poster art if this column is not
  /// specified. Thus it is not necessary for TV input services to include a thumbnail if it is
  /// just a scaled image of the poster art.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_THUMBNAIL_URI = "thumbnail_uri";

  /// from: static public final java.lang.String COLUMN_TITLE
  ///
  /// The title of this TV program.
  ///
  /// If this program is an episodic TV show, it is recommended that the title is the series
  /// title and its related fields (\#COLUMN_SEASON_TITLE and/or
  /// \#COLUMN_SEASON_DISPLAY_NUMBER, \#COLUMN_SEASON_DISPLAY_NUMBER,
  /// \#COLUMN_EPISODE_DISPLAY_NUMBER, and \#COLUMN_EPISODE_TITLE) are filled in.
  ///
  /// Type: TEXT
  static const COLUMN_TITLE = "title";

  /// from: static public final java.lang.String COLUMN_TRANSIENT
  ///
  /// The flag indicating whether this program is transient or not.
  ///
  /// A value of 1 indicates that the channel will be automatically removed by the system on
  /// reboot, and a value of 0 indicates that the channel is persistent across reboot. If not
  /// specified, this value is set to 0 (not transient) by default.
  ///
  /// Type: INTEGER (boolean)
  ///@see Channels\#COLUMN_TRANSIENT
  static const COLUMN_TRANSIENT = "transient";

  /// from: static public final java.lang.String COLUMN_TYPE
  ///
  /// The type of this program content.
  ///
  /// The value should match one of the followings:
  /// \#TYPE_MOVIE,
  /// \#TYPE_TV_SERIES,
  /// \#TYPE_TV_SEASON,
  /// \#TYPE_TV_EPISODE,
  /// \#TYPE_CLIP,
  /// \#TYPE_EVENT,
  /// \#TYPE_CHANNEL,
  /// \#TYPE_TRACK,
  /// \#TYPE_ALBUM,
  /// \#TYPE_ARTIST,
  /// \#TYPE_PLAYLIST, and
  /// \#TYPE_STATION.
  ///
  /// This is a required field if the program is from a Channels\#TYPE_PREVIEW
  /// channel.
  ///
  /// Type: INTEGER
  static const COLUMN_TYPE = "type";

  /// from: static public final java.lang.String COLUMN_VERSION_NUMBER
  ///
  /// The version number of this row entry used by TV input services.
  ///
  /// This is best used by sync adapters to identify the rows to update. The number can be
  /// defined by individual TV input services. One may assign the same value as
  /// {@code version_number} in ETSI EN 300 468 or ATSC A/65, if the data are coming from a TV
  /// broadcast.
  ///
  /// Type: INTEGER
  static const COLUMN_VERSION_NUMBER = "version_number";

  /// from: static public final java.lang.String COLUMN_VIDEO_HEIGHT
  ///
  /// The height of the video for this TV program, in the unit of pixels.
  ///
  /// Together with \#COLUMN_VIDEO_WIDTH this is used to determine the video
  /// resolution of the current TV program. Can be empty if it is not known initially or the
  /// program does not convey any video such as the programs from type
  /// Channels\#SERVICE_TYPE_AUDIO channels.
  ///
  /// Type: INTEGER
  static const COLUMN_VIDEO_HEIGHT = "video_height";

  /// from: static public final java.lang.String COLUMN_VIDEO_WIDTH
  ///
  /// The width of the video for this TV program, in the unit of pixels.
  ///
  /// Together with \#COLUMN_VIDEO_HEIGHT this is used to determine the video
  /// resolution of the current TV program. Can be empty if it is not known initially or the
  /// program does not convey any video such as the programs from type
  /// Channels\#SERVICE_TYPE_AUDIO channels.
  ///
  /// Type: INTEGER
  static const COLUMN_VIDEO_WIDTH = "video_width";

  /// from: static public final java.lang.String COLUMN_WATCH_NEXT_TYPE
  ///
  /// The "watch next" type of this program content.
  ///
  /// The value should match one of the followings:
  /// \#WATCH_NEXT_TYPE_CONTINUE,
  /// \#WATCH_NEXT_TYPE_NEXT,
  /// \#WATCH_NEXT_TYPE_NEW, and
  /// \#WATCH_NEXT_TYPE_WATCHLIST.
  ///
  /// This is a required field.
  ///
  /// Type: INTEGER
  static const COLUMN_WATCH_NEXT_TYPE = "watch_next_type";

  /// from: static public final java.lang.String CONTENT_ITEM_TYPE
  ///
  /// The MIME type of a single preview TV program.
  static const CONTENT_ITEM_TYPE = "vnd.android.cursor.item/watch_next_program";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of a directory of "watch next" TV programs.
  static const CONTENT_TYPE = "vnd.android.cursor.dir/watch_next_program";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URI for this table.
  ///
  /// SQL selection is not supported for ContentResolver\#query,
  /// ContentResolver\#update and ContentResolver\#delete operations.
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final int INTERACTION_TYPE_FANS
  ///
  /// The interaction type for "fans".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_FANS = 3;

  /// from: static public final int INTERACTION_TYPE_FOLLOWERS
  ///
  /// The interaction type for "followers".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_FOLLOWERS = 2;

  /// from: static public final int INTERACTION_TYPE_LIKES
  ///
  /// The interaction type for "likes".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_LIKES = 4;

  /// from: static public final int INTERACTION_TYPE_LISTENS
  ///
  /// The interaction type for "listens".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_LISTENS = 1;

  /// from: static public final int INTERACTION_TYPE_THUMBS
  ///
  /// The interaction type for "thumbs".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_THUMBS = 5;

  /// from: static public final int INTERACTION_TYPE_VIEWERS
  ///
  /// The interaction type for "viewers".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_VIEWERS = 6;

  /// from: static public final int INTERACTION_TYPE_VIEWS
  ///
  /// The interaction type for "views".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_VIEWS = 0;

  /// from: static public final int REVIEW_RATING_STYLE_PERCENTAGE
  ///
  /// The review rating style for 0 to 100 point system.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_PERCENTAGE = 2;

  /// from: static public final int REVIEW_RATING_STYLE_STARS
  ///
  /// The review rating style for five star rating.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_STARS = 0;

  /// from: static public final int REVIEW_RATING_STYLE_THUMBS_UP_DOWN
  ///
  /// The review rating style for thumbs-up and thumbs-down rating.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_THUMBS_UP_DOWN = 1;

  /// from: static public final int TYPE_ALBUM
  ///
  /// The program type for album.
  ///@see \#COLUMN_TYPE
  static const TYPE_ALBUM = 8;

  /// from: static public final int TYPE_ARTIST
  ///
  /// The program type for artist.
  ///@see \#COLUMN_TYPE
  static const TYPE_ARTIST = 9;

  /// from: static public final int TYPE_CHANNEL
  ///
  /// The program type for channel.
  ///@see \#COLUMN_TYPE
  static const TYPE_CHANNEL = 6;

  /// from: static public final int TYPE_CLIP
  ///
  /// The program type for clip.
  ///@see \#COLUMN_TYPE
  static const TYPE_CLIP = 4;

  /// from: static public final int TYPE_EVENT
  ///
  /// The program type for event.
  ///@see \#COLUMN_TYPE
  static const TYPE_EVENT = 5;

  /// from: static public final int TYPE_MOVIE
  ///
  /// The program type for movie.
  ///@see \#COLUMN_TYPE
  static const TYPE_MOVIE = 0;

  /// from: static public final int TYPE_PLAYLIST
  ///
  /// The program type for playlist.
  ///@see \#COLUMN_TYPE
  static const TYPE_PLAYLIST = 10;

  /// from: static public final int TYPE_STATION
  ///
  /// The program type for station.
  ///@see \#COLUMN_TYPE
  static const TYPE_STATION = 11;

  /// from: static public final int TYPE_TRACK
  ///
  /// The program type for track.
  ///@see \#COLUMN_TYPE
  static const TYPE_TRACK = 7;

  /// from: static public final int TYPE_TV_EPISODE
  ///
  /// The program type for TV episode.
  ///@see \#COLUMN_TYPE
  static const TYPE_TV_EPISODE = 3;

  /// from: static public final int TYPE_TV_SEASON
  ///
  /// The program type for TV season.
  ///@see \#COLUMN_TYPE
  static const TYPE_TV_SEASON = 2;

  /// from: static public final int TYPE_TV_SERIES
  ///
  /// The program type for TV series.
  ///@see \#COLUMN_TYPE
  static const TYPE_TV_SERIES = 1;

  /// from: static public final int WATCH_NEXT_TYPE_CONTINUE
  ///
  /// The watch next type for CONTINUE. Use this type when the user has already watched more
  /// than 1 minute of this content.
  ///@see \#COLUMN_WATCH_NEXT_TYPE
  static const WATCH_NEXT_TYPE_CONTINUE = 0;

  /// from: static public final int WATCH_NEXT_TYPE_NEW
  ///
  /// The watch next type for NEW. Use this type when the user had watched all of the available
  /// episodes from some episodic content, but a new episode became available since the user
  /// started watching the first episode and now there is exactly one unwatched episode. This
  /// could also work for recorded events in a series e.g. soccer matches or football games.
  ///@see \#COLUMN_WATCH_NEXT_TYPE
  static const WATCH_NEXT_TYPE_NEW = 2;

  /// from: static public final int WATCH_NEXT_TYPE_NEXT
  ///
  /// The watch next type for NEXT. Use this type when the user has watched one or more
  /// complete episodes from some episodic content, but there remains more than one episode
  /// remaining or there is one last episode remaining, but it is not \u201cnew\u201d in that it was
  /// released before the user started watching the show.
  ///@see \#COLUMN_WATCH_NEXT_TYPE
  static const WATCH_NEXT_TYPE_NEXT = 1;

  /// from: static public final int WATCH_NEXT_TYPE_WATCHLIST
  ///
  /// The watch next type for WATCHLIST. Use this type when the user has elected to explicitly
  /// add a movie, event or series to a \u201cwatchlist\u201d as a manual way of curating what they
  /// want to watch next.
  ///@see \#COLUMN_WATCH_NEXT_TYPE
  static const WATCH_NEXT_TYPE_WATCHLIST = 3;
}

/// from: android.media.tv.TvContract$RecordedPrograms
///
/// Column definitions for the recorded TV programs table.
///
/// By default, the query results will be sorted by \#COLUMN_START_TIME_UTC_MILLIS in
/// ascending order.
class TvContract_RecordedPrograms extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvContract\$RecordedPrograms");
  TvContract_RecordedPrograms.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String COLUMN_AUDIO_LANGUAGE
  ///
  /// The comma-separated audio languages of this TV program.
  ///
  /// This is used to describe available audio languages included in the program. Use either
  /// ISO 639-1 or 639-2/T codes.
  ///
  /// Type: TEXT
  static const COLUMN_AUDIO_LANGUAGE = "audio_language";

  /// from: static public final java.lang.String COLUMN_BROADCAST_GENRE
  ///
  /// The comma-separated genre string of this recorded TV program.
  ///
  /// Use the same language appeared in the underlying broadcast standard, if applicable.
  /// (For example, one can refer to the genre strings used in Genre Descriptor of ATSC A/65 or
  /// Content Descriptor of ETSI EN 300 468, if appropriate.) Otherwise, leave empty. Use
  /// Genres\#encode Genres.encode() to create a text that can be stored in this column.
  /// Use Genres\#decode Genres.decode() to get the broadcast genre strings from the
  /// text stored in the column.
  ///
  /// Type: TEXT
  ///@see Programs\#COLUMN_BROADCAST_GENRE
  static const COLUMN_BROADCAST_GENRE = "broadcast_genre";

  /// from: static public final java.lang.String COLUMN_CANONICAL_GENRE
  ///
  /// The comma-separated canonical genre string of this TV program.
  ///
  /// Canonical genres are defined in Genres. Use Genres\#encode to create a
  /// text that can be stored in this column. Use Genres\#decode to get the canonical
  /// genre strings from the text stored in the column.
  ///
  /// Type: TEXT
  ///@see Genres
  ///@see Genres\#encode
  ///@see Genres\#decode
  static const COLUMN_CANONICAL_GENRE = "canonical_genre";

  /// from: static public final java.lang.String COLUMN_CHANNEL_ID
  ///
  /// The ID of the TV channel that provides this recorded program.
  ///
  /// This is a part of the channel URI and matches to BaseColumns\#_ID.
  ///
  /// Type: INTEGER (long)
  static const COLUMN_CHANNEL_ID = "channel_id";

  /// from: static public final java.lang.String COLUMN_CONTENT_RATING
  ///
  /// The comma-separated content ratings of this TV program.
  ///
  /// This is used to describe the content rating(s) of this program. Each comma-separated
  /// content rating sub-string should be generated by calling
  /// TvContentRating\#flattenToString. Note that in most cases the program content is
  /// rated by a single rating system, thus resulting in a corresponding single sub-string that
  /// does not require comma separation and multiple sub-strings appear only when the program
  /// content is rated by two or more content rating systems. If any of those ratings is
  /// specified as "blocked rating" in the user's parental control settings, the TV input
  /// service should block the current content and wait for the signal that it is okay to
  /// unblock.
  ///
  /// Type: TEXT
  static const COLUMN_CONTENT_RATING = "content_rating";

  /// from: static public final java.lang.String COLUMN_END_TIME_UTC_MILLIS
  ///
  /// The end time of the original TV program, in milliseconds since the epoch.
  ///
  /// Type: INTEGER (long)
  ///@see Programs\#COLUMN_END_TIME_UTC_MILLIS
  static const COLUMN_END_TIME_UTC_MILLIS = "end_time_utc_millis";

  /// from: static public final java.lang.String COLUMN_EPISODE_DISPLAY_NUMBER
  ///
  /// The episode display number of this TV program for episodic TV shows.
  ///
  /// This is used to indicate the episode number. (e.g. 1, 2 or 3) Note that the value
  /// does not necessarily be numeric. (e.g. 12B)
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_EPISODE_DISPLAY_NUMBER = "episode_display_number";

  /// from: static public final java.lang.String COLUMN_EPISODE_TITLE
  ///
  /// The episode title of this TV program for episodic TV shows.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_EPISODE_TITLE = "episode_title";

  /// from: static public final java.lang.String COLUMN_INPUT_ID
  ///
  /// The ID of the TV input service that is associated with this recorded program.
  ///
  /// Use \#buildInputId to build the ID.
  ///
  /// This is a required field.
  ///
  /// Type: TEXT
  static const COLUMN_INPUT_ID = "input_id";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_DATA
  ///
  /// Internal data used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: BLOB
  static const COLUMN_INTERNAL_PROVIDER_DATA = "internal_provider_data";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG1 = "internal_provider_flag1";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG2 = "internal_provider_flag2";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG3 = "internal_provider_flag3";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG4 = "internal_provider_flag4";

  /// from: static public final java.lang.String COLUMN_LONG_DESCRIPTION
  ///
  /// The detailed, lengthy description of this TV program that is displayed only when the user
  /// wants to see more information.
  ///
  /// TV input services should leave this field empty if they have no additional details
  /// beyond \#COLUMN_SHORT_DESCRIPTION.
  ///
  /// Type: TEXT
  static const COLUMN_LONG_DESCRIPTION = "long_description";

  /// from: static public final java.lang.String COLUMN_POSTER_ART_URI
  ///
  /// The URI for the poster art of this TV program.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_POSTER_ART_URI = "poster_art_uri";

  /// from: static public final java.lang.String COLUMN_RECORDING_DATA_BYTES
  ///
  /// The data size (in bytes) for this recorded program.
  ///
  /// Together with \#COLUMN_RECORDING_DATA_URI, applications can use this
  /// information to manage recording storage.
  ///
  /// Type: INTEGER (long)
  ///@see \#COLUMN_RECORDING_DATA_URI
  static const COLUMN_RECORDING_DATA_BYTES = "recording_data_bytes";

  /// from: static public final java.lang.String COLUMN_RECORDING_DATA_URI
  ///
  /// The URI of the recording data for this recorded program.
  ///
  /// Together with \#COLUMN_RECORDING_DATA_BYTES, applications can use this
  /// information to manage recording storage. The URI should indicate a file or directory with
  /// the scheme android.content.ContentResolver\#SCHEME_FILE.
  ///
  /// Type: TEXT
  ///@see \#COLUMN_RECORDING_DATA_BYTES
  static const COLUMN_RECORDING_DATA_URI = "recording_data_uri";

  /// from: static public final java.lang.String COLUMN_RECORDING_DURATION_MILLIS
  ///
  /// The duration (in milliseconds) of this recorded program.
  ///
  /// The actual duration of the recorded program can differ from the one calculated by
  /// \#COLUMN_END_TIME_UTC_MILLIS - \#COLUMN_START_TIME_UTC_MILLIS as program
  /// recording can be interrupted in the middle for some reason, resulting in a partially
  /// recorded program, which is still playable.
  ///
  /// Type: INTEGER
  static const COLUMN_RECORDING_DURATION_MILLIS = "recording_duration_millis";

  /// from: static public final java.lang.String COLUMN_RECORDING_EXPIRE_TIME_UTC_MILLIS
  ///
  /// The expiration time for this recorded program, in milliseconds since the epoch.
  ///
  /// Recorded TV programs do not expire by default unless explicitly requested by the user
  /// or the user allows applications to delete them in order to free up disk space for future
  /// recording. However, some TV content can have expiration date set by the content provider
  /// when recorded. This field is used to indicate such a restriction.
  ///
  /// Can be empty.
  ///
  /// Type: INTEGER (long)
  static const COLUMN_RECORDING_EXPIRE_TIME_UTC_MILLIS =
      "recording_expire_time_utc_millis";

  /// from: static public final java.lang.String COLUMN_REVIEW_RATING
  ///
  /// The review rating score for this program.
  ///
  /// The format of the value is dependent on \#COLUMN_REVIEW_RATING_STYLE. If the
  /// style is \#REVIEW_RATING_STYLE_STARS, the value should be a real number between
  /// 0.0 and 5.0. (e.g. "4.5") If the style is \#REVIEW_RATING_STYLE_THUMBS_UP_DOWN,
  /// the value should be two integers, one for thumbs-up count and the other for thumbs-down
  /// count, with a comma between them. (e.g. "200,40") If the style is
  /// \#REVIEW_RATING_STYLE_PERCENTAGE, the value shoule be a real number between 0 and
  /// 100. (e.g. "99.9")
  ///
  /// Type: TEXT
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const COLUMN_REVIEW_RATING = "review_rating";

  /// from: static public final java.lang.String COLUMN_REVIEW_RATING_STYLE
  ///
  /// The review rating score style used for \#COLUMN_REVIEW_RATING.
  ///
  ///  The value should match one of the followings: \#REVIEW_RATING_STYLE_STARS,
  /// \#REVIEW_RATING_STYLE_THUMBS_UP_DOWN, and \#REVIEW_RATING_STYLE_PERCENTAGE.
  ///
  /// Type: INTEGER
  ///@see \#COLUMN_REVIEW_RATING
  static const COLUMN_REVIEW_RATING_STYLE = "review_rating_style";

  /// from: static public final java.lang.String COLUMN_SEARCHABLE
  ///
  /// The flag indicating whether this TV program is searchable or not.
  ///
  /// The columns of searchable programs can be read by other applications that have proper
  /// permission. Care must be taken not to open sensitive data.
  ///
  /// A value of 1 indicates that the program is searchable and its columns can be read by
  /// other applications, a value of 0 indicates that the program is hidden and its columns can
  /// be read only by the package that owns the program and the system. If not specified, this
  /// value is set to 1 (searchable) by default.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_SEARCHABLE = "searchable";

  /// from: static public final java.lang.String COLUMN_SEASON_DISPLAY_NUMBER
  ///
  /// The season display number of this TV program for episodic TV shows.
  ///
  /// This is used to indicate the season number. (e.g. 1, 2 or 3) Note that the value
  /// does not necessarily be numeric. (e.g. 12B)
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_SEASON_DISPLAY_NUMBER = "season_display_number";

  /// from: static public final java.lang.String COLUMN_SEASON_TITLE
  ///
  /// The title of the season for this TV program for episodic TV shows.
  ///
  /// This is an optional field supplied only when the season has a special title
  /// (e.g. The Final Season). If provided, the applications should display it instead of
  /// \#COLUMN_SEASON_DISPLAY_NUMBER, and should display it without alterations.
  /// (e.g. for "The Final Season", displayed string should be "The Final Season", not
  /// "Season The Final Season"). When displaying multiple programs, the order should be based
  /// on \#COLUMN_SEASON_DISPLAY_NUMBER, even when \#COLUMN_SEASON_TITLE exists.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_SEASON_TITLE = "season_title";

  /// from: static public final java.lang.String COLUMN_SHORT_DESCRIPTION
  ///
  /// The short description of this TV program that is displayed to the user by default.
  ///
  /// It is recommended to limit the length of the descriptions to 256 characters.
  ///
  /// Type: TEXT
  static const COLUMN_SHORT_DESCRIPTION = "short_description";

  /// from: static public final java.lang.String COLUMN_START_TIME_UTC_MILLIS
  ///
  /// The start time of the original TV program, in milliseconds since the epoch.
  ///
  /// Type: INTEGER (long)
  ///@see Programs\#COLUMN_START_TIME_UTC_MILLIS
  static const COLUMN_START_TIME_UTC_MILLIS = "start_time_utc_millis";

  /// from: static public final java.lang.String COLUMN_THUMBNAIL_URI
  ///
  /// The URI for the thumbnail of this TV program.
  ///
  /// The system can generate a thumbnail from the poster art if this column is not
  /// specified. Thus it is not necessary for TV input services to include a thumbnail if it is
  /// just a scaled image of the poster art.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_THUMBNAIL_URI = "thumbnail_uri";

  /// from: static public final java.lang.String COLUMN_TITLE
  ///
  /// The title of this TV program.
  ///
  /// If this program is an episodic TV show, it is recommended that the title is the series
  /// title and its related fields (\#COLUMN_SEASON_TITLE and/or
  /// \#COLUMN_SEASON_DISPLAY_NUMBER, \#COLUMN_SEASON_DISPLAY_NUMBER,
  /// \#COLUMN_EPISODE_DISPLAY_NUMBER, and \#COLUMN_EPISODE_TITLE) are filled in.
  ///
  /// Type: TEXT
  static const COLUMN_TITLE = "title";

  /// from: static public final java.lang.String COLUMN_VERSION_NUMBER
  ///
  /// The version number of this row entry used by TV input services.
  ///
  /// This is best used by sync adapters to identify the rows to update. The number can be
  /// defined by individual TV input services. One may assign the same value as
  /// {@code version_number} in ETSI EN 300 468 or ATSC A/65, if the data are coming from a TV
  /// broadcast.
  ///
  /// Type: INTEGER
  static const COLUMN_VERSION_NUMBER = "version_number";

  /// from: static public final java.lang.String COLUMN_VIDEO_HEIGHT
  ///
  /// The height of the video for this TV program, in the unit of pixels.
  ///
  /// Together with \#COLUMN_VIDEO_WIDTH this is used to determine the video
  /// resolution of the current TV program. Can be empty if it is not known initially or the
  /// program does not convey any video such as the programs from type
  /// Channels\#SERVICE_TYPE_AUDIO channels.
  ///
  /// Type: INTEGER
  static const COLUMN_VIDEO_HEIGHT = "video_height";

  /// from: static public final java.lang.String COLUMN_VIDEO_WIDTH
  ///
  /// The width of the video for this TV program, in the unit of pixels.
  ///
  /// Together with \#COLUMN_VIDEO_HEIGHT this is used to determine the video
  /// resolution of the current TV program. Can be empty if it is not known initially or the
  /// program does not convey any video such as the programs from type
  /// Channels\#SERVICE_TYPE_AUDIO channels.
  ///
  /// Type: INTEGER
  static const COLUMN_VIDEO_WIDTH = "video_width";

  /// from: static public final java.lang.String CONTENT_ITEM_TYPE
  ///
  /// The MIME type of a single recorded TV program.
  static const CONTENT_ITEM_TYPE = "vnd.android.cursor.item/recorded_program";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of a directory of recorded TV programs.
  static const CONTENT_TYPE = "vnd.android.cursor.dir/recorded_program";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URI for this table.
  ///
  /// SQL selection is not supported for ContentResolver\#query,
  /// ContentResolver\#update and ContentResolver\#delete operations.
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final int REVIEW_RATING_STYLE_PERCENTAGE
  ///
  /// The review rating style for 0 to 100 point system.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_PERCENTAGE = 2;

  /// from: static public final int REVIEW_RATING_STYLE_STARS
  ///
  /// The review rating style for five star rating.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_STARS = 0;

  /// from: static public final int REVIEW_RATING_STYLE_THUMBS_UP_DOWN
  ///
  /// The review rating style for thumbs-up and thumbs-down rating.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_THUMBS_UP_DOWN = 1;
}

/// from: android.media.tv.TvContract$Programs
///
/// Column definitions for the TV programs table.
///
/// By default, the query results will be sorted by
/// Programs\#COLUMN_START_TIME_UTC_MILLIS in ascending order.
class TvContract_Programs extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvContract\$Programs");
  TvContract_Programs.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String COLUMN_AUDIO_LANGUAGE
  ///
  /// The comma-separated audio languages of this TV program.
  ///
  /// This is used to describe available audio languages included in the program. Use either
  /// ISO 639-1 or 639-2/T codes.
  ///
  /// Type: TEXT
  static const COLUMN_AUDIO_LANGUAGE = "audio_language";

  /// from: static public final java.lang.String COLUMN_BROADCAST_GENRE
  ///
  /// The comma-separated genre string of this TV program.
  ///
  /// Use the same language appeared in the underlying broadcast standard, if applicable.
  /// (For example, one can refer to the genre strings used in Genre Descriptor of ATSC A/65 or
  /// Content Descriptor of ETSI EN 300 468, if appropriate.) Otherwise, leave empty. Use
  /// Genres\#encode to create a text that can be stored in this column. Use
  /// Genres\#decode to get the broadcast genre strings from the text stored in the
  /// column.
  ///
  /// Type: TEXT
  ///@see Genres\#encode
  ///@see Genres\#decode
  static const COLUMN_BROADCAST_GENRE = "broadcast_genre";

  /// from: static public final java.lang.String COLUMN_CANONICAL_GENRE
  ///
  /// The comma-separated canonical genre string of this TV program.
  ///
  /// Canonical genres are defined in Genres. Use Genres\#encode to create a
  /// text that can be stored in this column. Use Genres\#decode to get the canonical
  /// genre strings from the text stored in the column.
  ///
  /// Type: TEXT
  ///@see Genres
  ///@see Genres\#encode
  ///@see Genres\#decode
  static const COLUMN_CANONICAL_GENRE = "canonical_genre";

  /// from: static public final java.lang.String COLUMN_CHANNEL_ID
  ///
  /// The ID of the TV channel that provides this TV program.
  ///
  /// This is a part of the channel URI and matches to BaseColumns\#_ID.
  ///
  /// This is a required field.
  ///
  /// Type: INTEGER (long)
  static const COLUMN_CHANNEL_ID = "channel_id";

  /// from: static public final java.lang.String COLUMN_CONTENT_RATING
  ///
  /// The comma-separated content ratings of this TV program.
  ///
  /// This is used to describe the content rating(s) of this program. Each comma-separated
  /// content rating sub-string should be generated by calling
  /// TvContentRating\#flattenToString. Note that in most cases the program content is
  /// rated by a single rating system, thus resulting in a corresponding single sub-string that
  /// does not require comma separation and multiple sub-strings appear only when the program
  /// content is rated by two or more content rating systems. If any of those ratings is
  /// specified as "blocked rating" in the user's parental control settings, the TV input
  /// service should block the current content and wait for the signal that it is okay to
  /// unblock.
  ///
  /// Type: TEXT
  static const COLUMN_CONTENT_RATING = "content_rating";

  /// from: static public final java.lang.String COLUMN_END_TIME_UTC_MILLIS
  ///
  /// The end time of this TV program, in milliseconds since the epoch.
  ///
  /// The value should be equal to or less than \#COLUMN_START_TIME_UTC_MILLIS of the
  /// next program in the same channel. In practice, end time will usually be the start time of
  /// the next program.
  ///
  /// Can be empty if this program belongs to a Channels\#TYPE_PREVIEW channel.
  ///
  /// Type: INTEGER (long)
  static const COLUMN_END_TIME_UTC_MILLIS = "end_time_utc_millis";

  /// from: static public final java.lang.String COLUMN_EPISODE_DISPLAY_NUMBER
  ///
  /// The episode display number of this TV program for episodic TV shows.
  ///
  /// This is used to indicate the episode number. (e.g. 1, 2 or 3) Note that the value
  /// does not necessarily be numeric. (e.g. 12B)
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_EPISODE_DISPLAY_NUMBER = "episode_display_number";

  /// from: static public final java.lang.String COLUMN_EPISODE_NUMBER
  ///
  /// The episode number of this TV program for episodic TV shows.
  ///
  /// Can be empty.
  ///
  /// Type: INTEGER
  ///@deprecated Use \#COLUMN_EPISODE_DISPLAY_NUMBER instead.
  static const COLUMN_EPISODE_NUMBER = "episode_number";

  /// from: static public final java.lang.String COLUMN_EPISODE_TITLE
  ///
  /// The episode title of this TV program for episodic TV shows.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_EPISODE_TITLE = "episode_title";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_DATA
  ///
  /// Internal data used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: BLOB
  static const COLUMN_INTERNAL_PROVIDER_DATA = "internal_provider_data";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG1 = "internal_provider_flag1";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG2 = "internal_provider_flag2";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG3 = "internal_provider_flag3";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG4 = "internal_provider_flag4";

  /// from: static public final java.lang.String COLUMN_LONG_DESCRIPTION
  ///
  /// The detailed, lengthy description of this TV program that is displayed only when the user
  /// wants to see more information.
  ///
  /// TV input services should leave this field empty if they have no additional details
  /// beyond \#COLUMN_SHORT_DESCRIPTION.
  ///
  /// Type: TEXT
  static const COLUMN_LONG_DESCRIPTION = "long_description";

  /// from: static public final java.lang.String COLUMN_POSTER_ART_URI
  ///
  /// The URI for the poster art of this TV program.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_POSTER_ART_URI = "poster_art_uri";

  /// from: static public final java.lang.String COLUMN_RECORDING_PROHIBITED
  ///
  /// The flag indicating whether recording of this program is prohibited.
  ///
  /// A value of 1 indicates that recording of this program is prohibited and application
  /// will not schedule any recording for this program. A value of 0 indicates that the
  /// recording is not prohibited. If not specified, this value is set to 0 (not prohibited) by
  /// default.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_RECORDING_PROHIBITED = "recording_prohibited";

  /// from: static public final java.lang.String COLUMN_REVIEW_RATING
  ///
  /// The review rating score for this program.
  ///
  /// The format of the value is dependent on \#COLUMN_REVIEW_RATING_STYLE. If the
  /// style is \#REVIEW_RATING_STYLE_STARS, the value should be a real number between
  /// 0.0 and 5.0. (e.g. "4.5") If the style is \#REVIEW_RATING_STYLE_THUMBS_UP_DOWN,
  /// the value should be two integers, one for thumbs-up count and the other for thumbs-down
  /// count, with a comma between them. (e.g. "200,40") If the style is
  /// \#REVIEW_RATING_STYLE_PERCENTAGE, the value shoule be a real number between 0 and
  /// 100. (e.g. "99.9")
  ///
  /// Type: TEXT
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const COLUMN_REVIEW_RATING = "review_rating";

  /// from: static public final java.lang.String COLUMN_REVIEW_RATING_STYLE
  ///
  /// The review rating score style used for \#COLUMN_REVIEW_RATING.
  ///
  ///  The value should match one of the followings: \#REVIEW_RATING_STYLE_STARS,
  /// \#REVIEW_RATING_STYLE_THUMBS_UP_DOWN, and \#REVIEW_RATING_STYLE_PERCENTAGE.
  ///
  /// Type: INTEGER
  ///@see \#COLUMN_REVIEW_RATING
  static const COLUMN_REVIEW_RATING_STYLE = "review_rating_style";

  /// from: static public final java.lang.String COLUMN_SEARCHABLE
  ///
  /// The flag indicating whether this TV program is searchable or not.
  ///
  /// The columns of searchable programs can be read by other applications that have proper
  /// permission. Care must be taken not to open sensitive data.
  ///
  /// A value of 1 indicates that the program is searchable and its columns can be read by
  /// other applications, a value of 0 indicates that the program is hidden and its columns can
  /// be read only by the package that owns the program and the system. If not specified, this
  /// value is set to 1 (searchable) by default.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_SEARCHABLE = "searchable";

  /// from: static public final java.lang.String COLUMN_SEASON_DISPLAY_NUMBER
  ///
  /// The season display number of this TV program for episodic TV shows.
  ///
  /// This is used to indicate the season number. (e.g. 1, 2 or 3) Note that the value
  /// does not necessarily be numeric. (e.g. 12B)
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_SEASON_DISPLAY_NUMBER = "season_display_number";

  /// from: static public final java.lang.String COLUMN_SEASON_NUMBER
  ///
  /// The season number of this TV program for episodic TV shows.
  ///
  /// Can be empty.
  ///
  /// Type: INTEGER
  ///@deprecated Use \#COLUMN_SEASON_DISPLAY_NUMBER instead.
  static const COLUMN_SEASON_NUMBER = "season_number";

  /// from: static public final java.lang.String COLUMN_SEASON_TITLE
  ///
  /// The title of the season for this TV program for episodic TV shows.
  ///
  /// This is an optional field supplied only when the season has a special title
  /// (e.g. The Final Season). If provided, the applications should display it instead of
  /// \#COLUMN_SEASON_DISPLAY_NUMBER, and should display it without alterations.
  /// (e.g. for "The Final Season", displayed string should be "The Final Season", not
  /// "Season The Final Season"). When displaying multiple programs, the order should be based
  /// on \#COLUMN_SEASON_DISPLAY_NUMBER, even when \#COLUMN_SEASON_TITLE exists.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_SEASON_TITLE = "season_title";

  /// from: static public final java.lang.String COLUMN_SHORT_DESCRIPTION
  ///
  /// The short description of this TV program that is displayed to the user by default.
  ///
  /// It is recommended to limit the length of the descriptions to 256 characters.
  ///
  /// Type: TEXT
  static const COLUMN_SHORT_DESCRIPTION = "short_description";

  /// from: static public final java.lang.String COLUMN_START_TIME_UTC_MILLIS
  ///
  /// The start time of this TV program, in milliseconds since the epoch.
  ///
  /// The value should be equal to or larger than \#COLUMN_END_TIME_UTC_MILLIS of the
  /// previous program in the same channel. In practice, start time will usually be the end
  /// time of the previous program.
  ///
  /// Can be empty if this program belongs to a Channels\#TYPE_PREVIEW channel.
  ///
  /// Type: INTEGER (long)
  static const COLUMN_START_TIME_UTC_MILLIS = "start_time_utc_millis";

  /// from: static public final java.lang.String COLUMN_THUMBNAIL_URI
  ///
  /// The URI for the thumbnail of this TV program.
  ///
  /// The system can generate a thumbnail from the poster art if this column is not
  /// specified. Thus it is not necessary for TV input services to include a thumbnail if it is
  /// just a scaled image of the poster art.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_THUMBNAIL_URI = "thumbnail_uri";

  /// from: static public final java.lang.String COLUMN_TITLE
  ///
  /// The title of this TV program.
  ///
  /// If this program is an episodic TV show, it is recommended that the title is the series
  /// title and its related fields (\#COLUMN_SEASON_TITLE and/or
  /// \#COLUMN_SEASON_DISPLAY_NUMBER, \#COLUMN_SEASON_DISPLAY_NUMBER,
  /// \#COLUMN_EPISODE_DISPLAY_NUMBER, and \#COLUMN_EPISODE_TITLE) are filled in.
  ///
  /// Type: TEXT
  static const COLUMN_TITLE = "title";

  /// from: static public final java.lang.String COLUMN_VERSION_NUMBER
  ///
  /// The version number of this row entry used by TV input services.
  ///
  /// This is best used by sync adapters to identify the rows to update. The number can be
  /// defined by individual TV input services. One may assign the same value as
  /// {@code version_number} in ETSI EN 300 468 or ATSC A/65, if the data are coming from a TV
  /// broadcast.
  ///
  /// Type: INTEGER
  static const COLUMN_VERSION_NUMBER = "version_number";

  /// from: static public final java.lang.String COLUMN_VIDEO_HEIGHT
  ///
  /// The height of the video for this TV program, in the unit of pixels.
  ///
  /// Together with \#COLUMN_VIDEO_WIDTH this is used to determine the video
  /// resolution of the current TV program. Can be empty if it is not known initially or the
  /// program does not convey any video such as the programs from type
  /// Channels\#SERVICE_TYPE_AUDIO channels.
  ///
  /// Type: INTEGER
  static const COLUMN_VIDEO_HEIGHT = "video_height";

  /// from: static public final java.lang.String COLUMN_VIDEO_WIDTH
  ///
  /// The width of the video for this TV program, in the unit of pixels.
  ///
  /// Together with \#COLUMN_VIDEO_HEIGHT this is used to determine the video
  /// resolution of the current TV program. Can be empty if it is not known initially or the
  /// program does not convey any video such as the programs from type
  /// Channels\#SERVICE_TYPE_AUDIO channels.
  ///
  /// Type: INTEGER
  static const COLUMN_VIDEO_WIDTH = "video_width";

  /// from: static public final java.lang.String CONTENT_ITEM_TYPE
  ///
  /// The MIME type of a single TV program.
  static const CONTENT_ITEM_TYPE = "vnd.android.cursor.item/program";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of a directory of TV programs.
  static const CONTENT_TYPE = "vnd.android.cursor.dir/program";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URI for this table.
  ///
  /// SQL selection is not supported for ContentResolver\#query,
  /// ContentResolver\#update and ContentResolver\#delete operations.
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final int REVIEW_RATING_STYLE_PERCENTAGE
  ///
  /// The review rating style for 0 to 100 point system.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_PERCENTAGE = 2;

  /// from: static public final int REVIEW_RATING_STYLE_STARS
  ///
  /// The review rating style for five star rating.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_STARS = 0;

  /// from: static public final int REVIEW_RATING_STYLE_THUMBS_UP_DOWN
  ///
  /// The review rating style for thumbs-up and thumbs-down rating.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_THUMBS_UP_DOWN = 1;
}

/// from: android.media.tv.TvContract$Programs$Genres
///
/// Canonical genres for TV programs.
class TvContract_Programs_Genres extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvContract\$Programs\$Genres");
  TvContract_Programs_Genres.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ANIMAL_WILDLIFE
  ///
  /// The genre for Animal/Wildlife.
  static const ANIMAL_WILDLIFE = "ANIMAL_WILDLIFE";

  /// from: static public final java.lang.String ARTS
  ///
  /// The genre for Arts.
  static const ARTS = "ARTS";

  /// from: static public final java.lang.String COMEDY
  ///
  /// The genre for Comedy.
  static const COMEDY = "COMEDY";

  /// from: static public final java.lang.String DRAMA
  ///
  /// The genre for Drama.
  static const DRAMA = "DRAMA";

  /// from: static public final java.lang.String EDUCATION
  ///
  /// The genre for Education.
  static const EDUCATION = "EDUCATION";

  /// from: static public final java.lang.String ENTERTAINMENT
  ///
  /// The genre for Entertainment.
  static const ENTERTAINMENT = "ENTERTAINMENT";

  /// from: static public final java.lang.String FAMILY_KIDS
  ///
  /// The genre for Family/Kids.
  static const FAMILY_KIDS = "FAMILY_KIDS";

  /// from: static public final java.lang.String GAMING
  ///
  /// The genre for Gaming.
  static const GAMING = "GAMING";

  /// from: static public final java.lang.String LIFE_STYLE
  ///
  /// The genre for Life Style.
  static const LIFE_STYLE = "LIFE_STYLE";

  /// from: static public final java.lang.String MOVIES
  ///
  /// The genre for Movies.
  static const MOVIES = "MOVIES";

  /// from: static public final java.lang.String MUSIC
  ///
  /// The genre for Music.
  static const MUSIC = "MUSIC";

  /// from: static public final java.lang.String NEWS
  ///
  /// The genre for News.
  static const NEWS = "NEWS";

  /// from: static public final java.lang.String PREMIER
  ///
  /// The genre for Premier.
  static const PREMIER = "PREMIER";

  /// from: static public final java.lang.String SHOPPING
  ///
  /// The genre for Shopping.
  static const SHOPPING = "SHOPPING";

  /// from: static public final java.lang.String SPORTS
  ///
  /// The genre for Sports.
  static const SPORTS = "SPORTS";

  /// from: static public final java.lang.String TECH_SCIENCE
  ///
  /// The genre for Tech/Science.
  static const TECH_SCIENCE = "TECH_SCIENCE";

  /// from: static public final java.lang.String TRAVEL
  ///
  /// The genre for Travel.
  static const TRAVEL = "TRAVEL";

  static final _id_encode = jniAccessors.getStaticMethodIDOf(
      _classRef, "encode", "([Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String encode(java.lang.String[] genres)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Encodes genre strings to a text that can be put into the database.
  ///@param genres Genre strings.
  /// This value must never be {@code null}.
  /// Value is android.media.tv.TvContract.Programs.Genres\#FAMILY_KIDS, android.media.tv.TvContract.Programs.Genres\#SPORTS, android.media.tv.TvContract.Programs.Genres\#SHOPPING, android.media.tv.TvContract.Programs.Genres\#MOVIES, android.media.tv.TvContract.Programs.Genres\#COMEDY, android.media.tv.TvContract.Programs.Genres\#TRAVEL, android.media.tv.TvContract.Programs.Genres\#DRAMA, android.media.tv.TvContract.Programs.Genres\#EDUCATION, android.media.tv.TvContract.Programs.Genres\#ANIMAL_WILDLIFE, android.media.tv.TvContract.Programs.Genres\#NEWS, android.media.tv.TvContract.Programs.Genres\#GAMING, android.media.tv.TvContract.Programs.Genres\#ARTS, android.media.tv.TvContract.Programs.Genres\#ENTERTAINMENT, android.media.tv.TvContract.Programs.Genres\#LIFE_STYLE, android.media.tv.TvContract.Programs.Genres\#MUSIC, android.media.tv.TvContract.Programs.Genres\#PREMIER, or android.media.tv.TvContract.Programs.Genres\#TECH_SCIENCE
  ///@return an encoded genre string that can be inserted into the
  ///         \#COLUMN_BROADCAST_GENRE or \#COLUMN_CANONICAL_GENRE column.
  static jni.JniString encode(jni.JniObject genres) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_encode, jni.JniType.objectType, [genres.reference]).object);

  static final _id_decode = jniAccessors.getStaticMethodIDOf(
      _classRef, "decode", "(Ljava/lang/String;)[Ljava/lang/String;");

  /// from: static public java.lang.String[] decode(java.lang.String genres)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Decodes the genre strings from the text stored in the database.
  ///@param genres The encoded genre string retrieved from the
  ///            \#COLUMN_BROADCAST_GENRE or \#COLUMN_CANONICAL_GENRE column.
  /// This value must never be {@code null}.
  ///@return genre strings.
  ///
  /// Value is android.media.tv.TvContract.Programs.Genres\#FAMILY_KIDS, android.media.tv.TvContract.Programs.Genres\#SPORTS, android.media.tv.TvContract.Programs.Genres\#SHOPPING, android.media.tv.TvContract.Programs.Genres\#MOVIES, android.media.tv.TvContract.Programs.Genres\#COMEDY, android.media.tv.TvContract.Programs.Genres\#TRAVEL, android.media.tv.TvContract.Programs.Genres\#DRAMA, android.media.tv.TvContract.Programs.Genres\#EDUCATION, android.media.tv.TvContract.Programs.Genres\#ANIMAL_WILDLIFE, android.media.tv.TvContract.Programs.Genres\#NEWS, android.media.tv.TvContract.Programs.Genres\#GAMING, android.media.tv.TvContract.Programs.Genres\#ARTS, android.media.tv.TvContract.Programs.Genres\#ENTERTAINMENT, android.media.tv.TvContract.Programs.Genres\#LIFE_STYLE, android.media.tv.TvContract.Programs.Genres\#MUSIC, android.media.tv.TvContract.Programs.Genres\#PREMIER, or android.media.tv.TvContract.Programs.Genres\#TECH_SCIENCE
  static jni.JniObject decode(jni.JniString genres) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_decode, jni.JniType.objectType, [genres.reference]).object);

  static final _id_isCanonical = jniAccessors.getStaticMethodIDOf(
      _classRef, "isCanonical", "(Ljava/lang/String;)Z");

  /// from: static public boolean isCanonical(java.lang.String genre)
  ///
  /// Returns whether a given text is a canonical genre defined in Genres.
  ///@param genre The name of genre to be checked.
  ///@return {@code true} if the genre is canonical, otherwise {@code false}.
  static bool isCanonical(jni.JniString genre) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isCanonical,
          jni.JniType.booleanType, [genre.reference]).boolean;
}

/// from: android.media.tv.TvContract$PreviewPrograms
///
/// Column definitions for the preview TV programs table.
class TvContract_PreviewPrograms extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvContract\$PreviewPrograms");
  TvContract_PreviewPrograms.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ASPECT_RATIO_16_9
  ///
  /// The aspect ratio for 16:9.
  ///@see \#COLUMN_POSTER_ART_ASPECT_RATIO
  ///@see \#COLUMN_THUMBNAIL_ASPECT_RATIO
  static const ASPECT_RATIO_16_9 = 0;

  /// from: static public final int ASPECT_RATIO_1_1
  ///
  /// The aspect ratio for 1:1.
  ///@see \#COLUMN_POSTER_ART_ASPECT_RATIO
  ///@see \#COLUMN_THUMBNAIL_ASPECT_RATIO
  static const ASPECT_RATIO_1_1 = 3;

  /// from: static public final int ASPECT_RATIO_2_3
  ///
  /// The aspect ratio for 2:3.
  ///@see \#COLUMN_POSTER_ART_ASPECT_RATIO
  ///@see \#COLUMN_THUMBNAIL_ASPECT_RATIO
  static const ASPECT_RATIO_2_3 = 4;

  /// from: static public final int ASPECT_RATIO_3_2
  ///
  /// The aspect ratio for 3:2.
  ///@see \#COLUMN_POSTER_ART_ASPECT_RATIO
  ///@see \#COLUMN_THUMBNAIL_ASPECT_RATIO
  static const ASPECT_RATIO_3_2 = 1;

  /// from: static public final int ASPECT_RATIO_4_3
  ///
  /// The aspect ratio for 4:3.
  ///@see \#COLUMN_POSTER_ART_ASPECT_RATIO
  ///@see \#COLUMN_THUMBNAIL_ASPECT_RATIO
  static const ASPECT_RATIO_4_3 = 2;

  /// from: static public final int AVAILABILITY_AVAILABLE
  ///
  /// The availability for "available to this user".
  ///@see \#COLUMN_AVAILABILITY
  static const AVAILABILITY_AVAILABLE = 0;

  /// from: static public final int AVAILABILITY_FREE_WITH_SUBSCRIPTION
  ///
  /// The availability for "free with subscription".
  ///@see \#COLUMN_AVAILABILITY
  static const AVAILABILITY_FREE_WITH_SUBSCRIPTION = 1;

  /// from: static public final int AVAILABILITY_PAID_CONTENT
  ///
  /// The availability for "paid content, either to-own or rental
  /// (user has not purchased/rented).
  ///@see \#COLUMN_AVAILABILITY
  static const AVAILABILITY_PAID_CONTENT = 2;

  /// from: static public final java.lang.String COLUMN_AUDIO_LANGUAGE
  ///
  /// The comma-separated audio languages of this TV program.
  ///
  /// This is used to describe available audio languages included in the program. Use either
  /// ISO 639-1 or 639-2/T codes.
  ///
  /// Type: TEXT
  static const COLUMN_AUDIO_LANGUAGE = "audio_language";

  /// from: static public final java.lang.String COLUMN_AUTHOR
  ///
  /// The author or artist of this content.
  ///
  /// Type: TEXT
  static const COLUMN_AUTHOR = "author";

  /// from: static public final java.lang.String COLUMN_AVAILABILITY
  ///
  /// The availability of this TV program.
  ///
  /// The value should match one of the followings:
  /// \#AVAILABILITY_AVAILABLE,
  /// \#AVAILABILITY_FREE_WITH_SUBSCRIPTION, and
  /// \#AVAILABILITY_PAID_CONTENT.
  ///
  /// Type: INTEGER
  static const COLUMN_AVAILABILITY = "availability";

  /// from: static public final java.lang.String COLUMN_BROWSABLE
  ///
  /// The flag indicating whether this TV program is browsable or not.
  ///
  /// This column can only be set by applications having proper system permission. For
  /// other applications, this is a read-only column.
  ///
  /// A value of 1 indicates that the program is browsable and can be shown to users in
  /// the UI. A value of 0 indicates that the program should be hidden from users and the
  /// application who changes this value to 0 should send
  /// \#ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED to the owner of the program
  /// to notify this change.
  ///
  /// This value is set to 1 (browsable) by default.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_BROWSABLE = "browsable";

  /// from: static public final java.lang.String COLUMN_CANONICAL_GENRE
  ///
  /// The comma-separated canonical genre string of this TV program.
  ///
  /// Canonical genres are defined in Genres. Use Genres\#encode to create a
  /// text that can be stored in this column. Use Genres\#decode to get the canonical
  /// genre strings from the text stored in the column.
  ///
  /// Type: TEXT
  ///@see Genres
  ///@see Genres\#encode
  ///@see Genres\#decode
  static const COLUMN_CANONICAL_GENRE = "canonical_genre";

  /// from: static public final java.lang.String COLUMN_CHANNEL_ID
  ///
  /// The ID of the TV channel that provides this TV program.
  ///
  /// This value cannot be changed once it's set. Trying to modify it will make the update
  /// fail.
  ///
  /// This is a part of the channel URI and matches to BaseColumns\#_ID.
  ///
  /// This is a required field.
  ///
  /// Type: INTEGER (long)
  static const COLUMN_CHANNEL_ID = "channel_id";

  /// from: static public final java.lang.String COLUMN_CONTENT_ID
  ///
  /// The content ID of this TV program.
  ///
  /// A public ID of the content which allows the application to apply the same operation to
  /// all the program copies in different channels.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_CONTENT_ID = "content_id";

  /// from: static public final java.lang.String COLUMN_CONTENT_RATING
  ///
  /// The comma-separated content ratings of this TV program.
  ///
  /// This is used to describe the content rating(s) of this program. Each comma-separated
  /// content rating sub-string should be generated by calling
  /// TvContentRating\#flattenToString. Note that in most cases the program content is
  /// rated by a single rating system, thus resulting in a corresponding single sub-string that
  /// does not require comma separation and multiple sub-strings appear only when the program
  /// content is rated by two or more content rating systems. If any of those ratings is
  /// specified as "blocked rating" in the user's parental control settings, the TV input
  /// service should block the current content and wait for the signal that it is okay to
  /// unblock.
  ///
  /// Type: TEXT
  static const COLUMN_CONTENT_RATING = "content_rating";

  /// from: static public final java.lang.String COLUMN_DURATION_MILLIS
  ///
  /// The duration (in milliseconds) of the original content of this preview program.
  ///
  /// Can be empty.
  ///
  /// Type: INTEGER
  static const COLUMN_DURATION_MILLIS = "duration_millis";

  /// from: static public final java.lang.String COLUMN_EPISODE_DISPLAY_NUMBER
  ///
  /// The episode display number of this TV program for episodic TV shows.
  ///
  /// This is used to indicate the episode number. (e.g. 1, 2 or 3) Note that the value
  /// does not necessarily be numeric. (e.g. 12B)
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_EPISODE_DISPLAY_NUMBER = "episode_display_number";

  /// from: static public final java.lang.String COLUMN_EPISODE_TITLE
  ///
  /// The episode title of this TV program for episodic TV shows.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_EPISODE_TITLE = "episode_title";

  /// from: static public final java.lang.String COLUMN_INTENT_URI
  ///
  /// The intent URI which is launched when the preview program is selected.
  ///
  /// The URI is created using Intent\#toUri with Intent\#URI_INTENT_SCHEME
  /// and converted back to the original intent with Intent\#parseUri. The intent is
  /// launched when the user selects the preview program item.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_INTENT_URI = "intent_uri";

  /// from: static public final java.lang.String COLUMN_INTERACTION_COUNT
  ///
  /// The interaction count for this program.
  ///
  /// This indicates the number of times interaction has happened.
  ///
  /// Type: INTEGER (long)
  ///@see \#COLUMN_INTERACTION_TYPE
  static const COLUMN_INTERACTION_COUNT = "interaction_count";

  /// from: static public final java.lang.String COLUMN_INTERACTION_TYPE
  ///
  /// The type of interaction for this TV program.
  ///
  ///  The value should match one of the followings:
  /// \#INTERACTION_TYPE_VIEWS,
  /// \#INTERACTION_TYPE_LISTENS,
  /// \#INTERACTION_TYPE_FOLLOWERS,
  /// \#INTERACTION_TYPE_FANS,
  /// \#INTERACTION_TYPE_LIKES,
  /// \#INTERACTION_TYPE_THUMBS, and
  /// \#INTERACTION_TYPE_VIEWERS.
  ///
  /// Type: INTEGER
  ///@see \#COLUMN_INTERACTION_COUNT
  static const COLUMN_INTERACTION_TYPE = "interaction_type";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_DATA
  ///
  /// Internal data used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: BLOB
  static const COLUMN_INTERNAL_PROVIDER_DATA = "internal_provider_data";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG1 = "internal_provider_flag1";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG2 = "internal_provider_flag2";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG3 = "internal_provider_flag3";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG4 = "internal_provider_flag4";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_ID
  ///
  /// The internal ID used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_INTERNAL_PROVIDER_ID = "internal_provider_id";

  /// from: static public final java.lang.String COLUMN_ITEM_COUNT
  ///
  /// The count of the items included in this TV program.
  ///
  /// This is only relevant if the program represents a collection of items such as series,
  /// episodes, or music tracks.
  ///
  /// Type: INTEGER
  static const COLUMN_ITEM_COUNT = "item_count";

  /// from: static public final java.lang.String COLUMN_LAST_PLAYBACK_POSITION_MILLIS
  ///
  /// The last playback position (in milliseconds) of the original content of this preview
  /// program.
  ///
  /// Can be empty.
  ///
  /// Type: INTEGER
  static const COLUMN_LAST_PLAYBACK_POSITION_MILLIS =
      "last_playback_position_millis";

  /// from: static public final java.lang.String COLUMN_LIVE
  ///
  /// The flag indicating whether this TV program is live or not.
  ///
  /// A value of 1 indicates that the content is airing and should be consumed now, a value
  /// of 0 indicates that the content is off the air and does not need to be consumed at the
  /// present time. If not specified, the value is set to 0 (not live) by default.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_LIVE = "live";

  /// from: static public final java.lang.String COLUMN_LOGO_URI
  ///
  /// The URI for the logo of this TV program.
  ///
  /// This is a small badge shown on top of the poster art or thumbnail representing the
  /// source of the content.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_LOGO_URI = "logo_uri";

  /// from: static public final java.lang.String COLUMN_LONG_DESCRIPTION
  ///
  /// The detailed, lengthy description of this TV program that is displayed only when the user
  /// wants to see more information.
  ///
  /// TV input services should leave this field empty if they have no additional details
  /// beyond \#COLUMN_SHORT_DESCRIPTION.
  ///
  /// Type: TEXT
  static const COLUMN_LONG_DESCRIPTION = "long_description";

  /// from: static public final java.lang.String COLUMN_OFFER_PRICE
  ///
  /// The offer price of this TV program.
  ///
  /// This is the promotional cost of the content. It is only used if the availability of
  /// the program is \#AVAILABILITY_PAID_CONTENT.
  ///
  /// Type: TEXT
  ///@see \#COLUMN_STARTING_PRICE
  static const COLUMN_OFFER_PRICE = "offer_price";

  /// from: static public final java.lang.String COLUMN_POSTER_ART_ASPECT_RATIO
  ///
  /// The aspect ratio of the poster art for this TV program.
  ///
  /// The value should match one of the followings:
  /// \#ASPECT_RATIO_16_9,
  /// \#ASPECT_RATIO_3_2,
  /// \#ASPECT_RATIO_4_3,
  /// \#ASPECT_RATIO_1_1, and
  /// \#ASPECT_RATIO_2_3.
  ///
  /// Type: INTEGER
  static const COLUMN_POSTER_ART_ASPECT_RATIO = "poster_art_aspect_ratio";

  /// from: static public final java.lang.String COLUMN_POSTER_ART_URI
  ///
  /// The URI for the poster art of this TV program.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_POSTER_ART_URI = "poster_art_uri";

  /// from: static public final java.lang.String COLUMN_PREVIEW_VIDEO_URI
  ///
  /// The URI for the preview video.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_PREVIEW_VIDEO_URI = "preview_video_uri";

  /// from: static public final java.lang.String COLUMN_RELEASE_DATE
  ///
  /// The release date of this TV program.
  ///
  /// The value should be in one of the following formats:
  /// "yyyy", "yyyy-MM-dd", and "yyyy-MM-ddTHH:mm:ssZ" (UTC in ISO 8601).
  ///
  /// Type: TEXT
  static const COLUMN_RELEASE_DATE = "release_date";

  /// from: static public final java.lang.String COLUMN_REVIEW_RATING
  ///
  /// The review rating score for this program.
  ///
  /// The format of the value is dependent on \#COLUMN_REVIEW_RATING_STYLE. If the
  /// style is \#REVIEW_RATING_STYLE_STARS, the value should be a real number between
  /// 0.0 and 5.0. (e.g. "4.5") If the style is \#REVIEW_RATING_STYLE_THUMBS_UP_DOWN,
  /// the value should be two integers, one for thumbs-up count and the other for thumbs-down
  /// count, with a comma between them. (e.g. "200,40") If the style is
  /// \#REVIEW_RATING_STYLE_PERCENTAGE, the value shoule be a real number between 0 and
  /// 100. (e.g. "99.9")
  ///
  /// Type: TEXT
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const COLUMN_REVIEW_RATING = "review_rating";

  /// from: static public final java.lang.String COLUMN_REVIEW_RATING_STYLE
  ///
  /// The review rating score style used for \#COLUMN_REVIEW_RATING.
  ///
  ///  The value should match one of the followings: \#REVIEW_RATING_STYLE_STARS,
  /// \#REVIEW_RATING_STYLE_THUMBS_UP_DOWN, and \#REVIEW_RATING_STYLE_PERCENTAGE.
  ///
  /// Type: INTEGER
  ///@see \#COLUMN_REVIEW_RATING
  static const COLUMN_REVIEW_RATING_STYLE = "review_rating_style";

  /// from: static public final java.lang.String COLUMN_SEARCHABLE
  ///
  /// The flag indicating whether this TV program is searchable or not.
  ///
  /// The columns of searchable programs can be read by other applications that have proper
  /// permission. Care must be taken not to open sensitive data.
  ///
  /// A value of 1 indicates that the program is searchable and its columns can be read by
  /// other applications, a value of 0 indicates that the program is hidden and its columns can
  /// be read only by the package that owns the program and the system. If not specified, this
  /// value is set to 1 (searchable) by default.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_SEARCHABLE = "searchable";

  /// from: static public final java.lang.String COLUMN_SEASON_DISPLAY_NUMBER
  ///
  /// The season display number of this TV program for episodic TV shows.
  ///
  /// This is used to indicate the season number. (e.g. 1, 2 or 3) Note that the value
  /// does not necessarily be numeric. (e.g. 12B)
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_SEASON_DISPLAY_NUMBER = "season_display_number";

  /// from: static public final java.lang.String COLUMN_SEASON_TITLE
  ///
  /// The title of the season for this TV program for episodic TV shows.
  ///
  /// This is an optional field supplied only when the season has a special title
  /// (e.g. The Final Season). If provided, the applications should display it instead of
  /// \#COLUMN_SEASON_DISPLAY_NUMBER, and should display it without alterations.
  /// (e.g. for "The Final Season", displayed string should be "The Final Season", not
  /// "Season The Final Season"). When displaying multiple programs, the order should be based
  /// on \#COLUMN_SEASON_DISPLAY_NUMBER, even when \#COLUMN_SEASON_TITLE exists.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_SEASON_TITLE = "season_title";

  /// from: static public final java.lang.String COLUMN_SHORT_DESCRIPTION
  ///
  /// The short description of this TV program that is displayed to the user by default.
  ///
  /// It is recommended to limit the length of the descriptions to 256 characters.
  ///
  /// Type: TEXT
  static const COLUMN_SHORT_DESCRIPTION = "short_description";

  /// from: static public final java.lang.String COLUMN_STARTING_PRICE
  ///
  /// The starting price of this TV program.
  ///
  /// This indicates the lowest regular acquisition cost of the content. It is only used
  /// if the availability of the program is \#AVAILABILITY_PAID_CONTENT.
  ///
  /// Type: TEXT
  ///@see \#COLUMN_OFFER_PRICE
  static const COLUMN_STARTING_PRICE = "starting_price";

  /// from: static public final java.lang.String COLUMN_THUMBNAIL_ASPECT_RATIO
  ///
  /// The aspect ratio of the thumbnail for this TV program.
  ///
  /// The value should match one of the followings:
  /// \#ASPECT_RATIO_16_9,
  /// \#ASPECT_RATIO_3_2,
  /// \#ASPECT_RATIO_4_3,
  /// \#ASPECT_RATIO_1_1, and
  /// \#ASPECT_RATIO_2_3.
  ///
  /// Type: INTEGER
  static const COLUMN_THUMBNAIL_ASPECT_RATIO = "poster_thumbnail_aspect_ratio";

  /// from: static public final java.lang.String COLUMN_THUMBNAIL_URI
  ///
  /// The URI for the thumbnail of this TV program.
  ///
  /// The system can generate a thumbnail from the poster art if this column is not
  /// specified. Thus it is not necessary for TV input services to include a thumbnail if it is
  /// just a scaled image of the poster art.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_THUMBNAIL_URI = "thumbnail_uri";

  /// from: static public final java.lang.String COLUMN_TITLE
  ///
  /// The title of this TV program.
  ///
  /// If this program is an episodic TV show, it is recommended that the title is the series
  /// title and its related fields (\#COLUMN_SEASON_TITLE and/or
  /// \#COLUMN_SEASON_DISPLAY_NUMBER, \#COLUMN_SEASON_DISPLAY_NUMBER,
  /// \#COLUMN_EPISODE_DISPLAY_NUMBER, and \#COLUMN_EPISODE_TITLE) are filled in.
  ///
  /// Type: TEXT
  static const COLUMN_TITLE = "title";

  /// from: static public final java.lang.String COLUMN_TRANSIENT
  ///
  /// The flag indicating whether this program is transient or not.
  ///
  /// A value of 1 indicates that the channel will be automatically removed by the system on
  /// reboot, and a value of 0 indicates that the channel is persistent across reboot. If not
  /// specified, this value is set to 0 (not transient) by default.
  ///
  /// Type: INTEGER (boolean)
  ///@see Channels\#COLUMN_TRANSIENT
  static const COLUMN_TRANSIENT = "transient";

  /// from: static public final java.lang.String COLUMN_TYPE
  ///
  /// The type of this program content.
  ///
  /// The value should match one of the followings:
  /// \#TYPE_MOVIE,
  /// \#TYPE_TV_SERIES,
  /// \#TYPE_TV_SEASON,
  /// \#TYPE_TV_EPISODE,
  /// \#TYPE_CLIP,
  /// \#TYPE_EVENT,
  /// \#TYPE_CHANNEL,
  /// \#TYPE_TRACK,
  /// \#TYPE_ALBUM,
  /// \#TYPE_ARTIST,
  /// \#TYPE_PLAYLIST, and
  /// \#TYPE_STATION.
  ///
  /// This is a required field if the program is from a Channels\#TYPE_PREVIEW
  /// channel.
  ///
  /// Type: INTEGER
  static const COLUMN_TYPE = "type";

  /// from: static public final java.lang.String COLUMN_VERSION_NUMBER
  ///
  /// The version number of this row entry used by TV input services.
  ///
  /// This is best used by sync adapters to identify the rows to update. The number can be
  /// defined by individual TV input services. One may assign the same value as
  /// {@code version_number} in ETSI EN 300 468 or ATSC A/65, if the data are coming from a TV
  /// broadcast.
  ///
  /// Type: INTEGER
  static const COLUMN_VERSION_NUMBER = "version_number";

  /// from: static public final java.lang.String COLUMN_VIDEO_HEIGHT
  ///
  /// The height of the video for this TV program, in the unit of pixels.
  ///
  /// Together with \#COLUMN_VIDEO_WIDTH this is used to determine the video
  /// resolution of the current TV program. Can be empty if it is not known initially or the
  /// program does not convey any video such as the programs from type
  /// Channels\#SERVICE_TYPE_AUDIO channels.
  ///
  /// Type: INTEGER
  static const COLUMN_VIDEO_HEIGHT = "video_height";

  /// from: static public final java.lang.String COLUMN_VIDEO_WIDTH
  ///
  /// The width of the video for this TV program, in the unit of pixels.
  ///
  /// Together with \#COLUMN_VIDEO_HEIGHT this is used to determine the video
  /// resolution of the current TV program. Can be empty if it is not known initially or the
  /// program does not convey any video such as the programs from type
  /// Channels\#SERVICE_TYPE_AUDIO channels.
  ///
  /// Type: INTEGER
  static const COLUMN_VIDEO_WIDTH = "video_width";

  /// from: static public final java.lang.String COLUMN_WEIGHT
  ///
  /// The weight of the preview program within the channel.
  ///
  /// The UI may choose to show this item in a different position in the channel row.
  /// A larger weight value means the program is more important than other programs having
  /// smaller weight values. The value is relevant for the preview programs in the same
  /// channel. This is only relevant to Channels\#TYPE_PREVIEW.
  ///
  /// Can be empty.
  ///
  /// Type: INTEGER
  static const COLUMN_WEIGHT = "weight";

  /// from: static public final java.lang.String CONTENT_ITEM_TYPE
  ///
  /// The MIME type of a single preview TV program.
  static const CONTENT_ITEM_TYPE = "vnd.android.cursor.item/preview_program";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of a directory of preview TV programs.
  static const CONTENT_TYPE = "vnd.android.cursor.dir/preview_program";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URI for this table.
  ///
  /// SQL selection is not supported for ContentResolver\#query,
  /// ContentResolver\#update and ContentResolver\#delete operations.
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final int INTERACTION_TYPE_FANS
  ///
  /// The interaction type for "fans".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_FANS = 3;

  /// from: static public final int INTERACTION_TYPE_FOLLOWERS
  ///
  /// The interaction type for "followers".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_FOLLOWERS = 2;

  /// from: static public final int INTERACTION_TYPE_LIKES
  ///
  /// The interaction type for "likes".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_LIKES = 4;

  /// from: static public final int INTERACTION_TYPE_LISTENS
  ///
  /// The interaction type for "listens".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_LISTENS = 1;

  /// from: static public final int INTERACTION_TYPE_THUMBS
  ///
  /// The interaction type for "thumbs".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_THUMBS = 5;

  /// from: static public final int INTERACTION_TYPE_VIEWERS
  ///
  /// The interaction type for "viewers".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_VIEWERS = 6;

  /// from: static public final int INTERACTION_TYPE_VIEWS
  ///
  /// The interaction type for "views".
  ///@see \#COLUMN_INTERACTION_TYPE
  static const INTERACTION_TYPE_VIEWS = 0;

  /// from: static public final int REVIEW_RATING_STYLE_PERCENTAGE
  ///
  /// The review rating style for 0 to 100 point system.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_PERCENTAGE = 2;

  /// from: static public final int REVIEW_RATING_STYLE_STARS
  ///
  /// The review rating style for five star rating.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_STARS = 0;

  /// from: static public final int REVIEW_RATING_STYLE_THUMBS_UP_DOWN
  ///
  /// The review rating style for thumbs-up and thumbs-down rating.
  ///@see \#COLUMN_REVIEW_RATING_STYLE
  static const REVIEW_RATING_STYLE_THUMBS_UP_DOWN = 1;

  /// from: static public final int TYPE_ALBUM
  ///
  /// The program type for album.
  ///@see \#COLUMN_TYPE
  static const TYPE_ALBUM = 8;

  /// from: static public final int TYPE_ARTIST
  ///
  /// The program type for artist.
  ///@see \#COLUMN_TYPE
  static const TYPE_ARTIST = 9;

  /// from: static public final int TYPE_CHANNEL
  ///
  /// The program type for channel.
  ///@see \#COLUMN_TYPE
  static const TYPE_CHANNEL = 6;

  /// from: static public final int TYPE_CLIP
  ///
  /// The program type for clip.
  ///@see \#COLUMN_TYPE
  static const TYPE_CLIP = 4;

  /// from: static public final int TYPE_EVENT
  ///
  /// The program type for event.
  ///@see \#COLUMN_TYPE
  static const TYPE_EVENT = 5;

  /// from: static public final int TYPE_MOVIE
  ///
  /// The program type for movie.
  ///@see \#COLUMN_TYPE
  static const TYPE_MOVIE = 0;

  /// from: static public final int TYPE_PLAYLIST
  ///
  /// The program type for playlist.
  ///@see \#COLUMN_TYPE
  static const TYPE_PLAYLIST = 10;

  /// from: static public final int TYPE_STATION
  ///
  /// The program type for station.
  ///@see \#COLUMN_TYPE
  static const TYPE_STATION = 11;

  /// from: static public final int TYPE_TRACK
  ///
  /// The program type for track.
  ///@see \#COLUMN_TYPE
  static const TYPE_TRACK = 7;

  /// from: static public final int TYPE_TV_EPISODE
  ///
  /// The program type for TV episode.
  ///@see \#COLUMN_TYPE
  static const TYPE_TV_EPISODE = 3;

  /// from: static public final int TYPE_TV_SEASON
  ///
  /// The program type for TV season.
  ///@see \#COLUMN_TYPE
  static const TYPE_TV_SEASON = 2;

  /// from: static public final int TYPE_TV_SERIES
  ///
  /// The program type for TV series.
  ///@see \#COLUMN_TYPE
  static const TYPE_TV_SERIES = 1;
}

/// from: android.media.tv.TvContract$Channels
///
/// Column definitions for the TV channels table.
class TvContract_Channels extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvContract\$Channels");
  TvContract_Channels.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String COLUMN_APP_LINK_COLOR
  ///
  /// The accent color of the app link template for this channel. This is primarily used for
  /// the background color of the text box in the template.
  ///
  /// The app-linking allows channel input sources to provide activity links from their live
  /// channel programming to another activity. This enables content providers to increase user
  /// engagement by offering the viewer other content or actions.
  ///
  /// Type: INTEGER (color value)
  ///@see \#COLUMN_APP_LINK_ICON_URI
  ///@see \#COLUMN_APP_LINK_INTENT_URI
  ///@see \#COLUMN_APP_LINK_POSTER_ART_URI
  ///@see \#COLUMN_APP_LINK_TEXT
  static const COLUMN_APP_LINK_COLOR = "app_link_color";

  /// from: static public final java.lang.String COLUMN_APP_LINK_ICON_URI
  ///
  /// The URI for the app badge icon of the app link template for this channel.
  ///
  /// This small icon is overlaid at the bottom of the poster art specified by
  /// \#COLUMN_APP_LINK_POSTER_ART_URI. The data in the column must be a URI in one of
  /// the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// The app-linking allows channel input sources to provide activity links from their live
  /// channel programming to another activity. This enables content providers to increase user
  /// engagement by offering the viewer other content or actions.
  ///
  /// Type: TEXT
  ///@see \#COLUMN_APP_LINK_COLOR
  ///@see \#COLUMN_APP_LINK_INTENT_URI
  ///@see \#COLUMN_APP_LINK_POSTER_ART_URI
  ///@see \#COLUMN_APP_LINK_TEXT
  static const COLUMN_APP_LINK_ICON_URI = "app_link_icon_uri";

  /// from: static public final java.lang.String COLUMN_APP_LINK_INTENT_URI
  ///
  /// The intent URI of the app link for this channel.
  ///
  /// The URI is created using Intent\#toUri with Intent\#URI_INTENT_SCHEME
  /// and converted back to the original intent with Intent\#parseUri. The intent is
  /// launched when the user clicks the corresponding app link for the current channel.
  ///
  /// The app-linking allows channel input sources to provide activity links from their live
  /// channel programming to another activity. This enables content providers to increase user
  /// engagement by offering the viewer other content or actions.
  ///
  /// Type: TEXT
  ///@see \#COLUMN_APP_LINK_COLOR
  ///@see \#COLUMN_APP_LINK_ICON_URI
  ///@see \#COLUMN_APP_LINK_POSTER_ART_URI
  ///@see \#COLUMN_APP_LINK_TEXT
  static const COLUMN_APP_LINK_INTENT_URI = "app_link_intent_uri";

  /// from: static public final java.lang.String COLUMN_APP_LINK_POSTER_ART_URI
  ///
  /// The URI for the poster art used as the background of the app link template for this
  /// channel.
  ///
  /// The data in the column must be a URL, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)
  /// </li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// The app-linking allows channel input sources to provide activity links from their live
  /// channel programming to another activity. This enables content providers to increase user
  /// engagement by offering the viewer other content or actions.
  ///
  /// Type: TEXT
  ///@see \#COLUMN_APP_LINK_COLOR
  ///@see \#COLUMN_APP_LINK_ICON_URI
  ///@see \#COLUMN_APP_LINK_INTENT_URI
  ///@see \#COLUMN_APP_LINK_TEXT
  static const COLUMN_APP_LINK_POSTER_ART_URI = "app_link_poster_art_uri";

  /// from: static public final java.lang.String COLUMN_APP_LINK_TEXT
  ///
  /// The link text of the app link template for this channel.
  ///
  /// This provides a short description of the action that happens when the corresponding
  /// app link is clicked.
  ///
  /// The app-linking allows channel input sources to provide activity links from their live
  /// channel programming to another activity. This enables content providers to increase user
  /// engagement by offering the viewer other content or actions.
  ///
  /// Type: TEXT
  ///@see \#COLUMN_APP_LINK_COLOR
  ///@see \#COLUMN_APP_LINK_ICON_URI
  ///@see \#COLUMN_APP_LINK_INTENT_URI
  ///@see \#COLUMN_APP_LINK_POSTER_ART_URI
  static const COLUMN_APP_LINK_TEXT = "app_link_text";

  /// from: static public final java.lang.String COLUMN_BROWSABLE
  ///
  /// The flag indicating whether this TV channel is browsable or not.
  ///
  /// This column can only be set by applications having proper system permission. For
  /// other applications, this is a read-only column.
  ///
  /// A value of 1 indicates the channel is included in the channel list that applications
  /// use to browse channels, a value of 0 indicates the channel is not included in the list.
  /// If not specified, this value is set to 0 (not browsable) by default.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_BROWSABLE = "browsable";

  /// from: static public final java.lang.String COLUMN_DESCRIPTION
  ///
  /// The description of this TV channel.
  ///
  /// Can be empty initially.
  ///
  /// Type: TEXT
  static const COLUMN_DESCRIPTION = "description";

  /// from: static public final java.lang.String COLUMN_DISPLAY_NAME
  ///
  /// The channel name that is displayed to the user.
  ///
  /// A call sign is a good candidate to use for this purpose but any name that helps the
  /// user recognize the current channel will be enough. Can also be empty depending on
  /// broadcast standard.
  ///
  ///  Type: TEXT
  static const COLUMN_DISPLAY_NAME = "display_name";

  /// from: static public final java.lang.String COLUMN_DISPLAY_NUMBER
  ///
  /// The channel number that is displayed to the user.
  ///
  /// The format can vary depending on broadcast standard and product specification.
  ///
  /// Type: TEXT
  static const COLUMN_DISPLAY_NUMBER = "display_number";

  /// from: static public final java.lang.String COLUMN_INPUT_ID
  ///
  /// The ID of the TV input service that provides this TV channel.
  ///
  /// Use \#buildInputId to build the ID.
  ///
  /// This is a required field.
  ///
  /// Type: TEXT
  static const COLUMN_INPUT_ID = "input_id";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_DATA
  ///
  /// Internal data used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: BLOB
  static const COLUMN_INTERNAL_PROVIDER_DATA = "internal_provider_data";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG1 = "internal_provider_flag1";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG2 = "internal_provider_flag2";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG3 = "internal_provider_flag3";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4
  ///
  /// Internal integer flag used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Type: INTEGER
  static const COLUMN_INTERNAL_PROVIDER_FLAG4 = "internal_provider_flag4";

  /// from: static public final java.lang.String COLUMN_INTERNAL_PROVIDER_ID
  ///
  /// The internal ID used by individual TV input services.
  ///
  /// This is internal to the provider that inserted it, and should not be decoded by other
  /// apps.
  ///
  /// Can be empty.
  ///
  /// Type: TEXT
  static const COLUMN_INTERNAL_PROVIDER_ID = "internal_provider_id";

  /// from: static public final java.lang.String COLUMN_LOCKED
  ///
  /// The flag indicating whether this TV channel is locked or not.
  ///
  /// This is primarily used for alternative parental control to prevent unauthorized users
  /// from watching the current channel regardless of the content rating. A value of 1
  /// indicates the channel is locked and the user is required to enter passcode to unlock it
  /// in order to watch the current program from the channel, a value of 0 indicates the
  /// channel is not locked thus the user is not prompted to enter passcode If not specified,
  /// this value is set to 0 (not locked) by default.
  ///
  /// This column can only be set by applications having proper system permission to
  /// modify parental control settings. For other applications, this is a read-only column.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_LOCKED = "locked";

  /// from: static public final java.lang.String COLUMN_NETWORK_AFFILIATION
  ///
  /// The network affiliation for this TV channel.
  ///
  /// This is used to identify a channel that is commonly called by its network affiliation
  /// instead of the display name. Examples include ABC for the channel KGO-HD, FOX for the
  /// channel KTVU-HD and NBC for the channel KNTV-HD. Can be empty if not applicable.
  ///
  /// Type: TEXT
  static const COLUMN_NETWORK_AFFILIATION = "network_affiliation";

  /// from: static public final java.lang.String COLUMN_ORIGINAL_NETWORK_ID
  ///
  /// The original network ID of this TV channel.
  ///
  /// It is used to identify the originating delivery system, if applicable. Use the same
  /// coding for {@code original_network_id} for ETSI EN 300 468/TR 101 211 and ARIB STD-B10.
  ///
  /// This is a required field only if the underlying broadcast standard defines the same
  /// name field. Otherwise, leave empty.
  ///
  /// Type: INTEGER
  static const COLUMN_ORIGINAL_NETWORK_ID = "original_network_id";

  /// from: static public final java.lang.String COLUMN_SEARCHABLE
  ///
  /// The flag indicating whether this TV channel is searchable or not.
  ///
  /// The columns of searchable channels can be read by other applications that have proper
  /// permission. Care must be taken not to open sensitive data.
  ///
  /// A value of 1 indicates that the channel is searchable and its columns can be read by
  /// other applications, a value of 0 indicates that the channel is hidden and its columns can
  /// be read only by the package that owns the channel and the system. If not specified, this
  /// value is set to 1 (searchable) by default.
  ///
  /// Type: INTEGER (boolean)
  static const COLUMN_SEARCHABLE = "searchable";

  /// from: static public final java.lang.String COLUMN_SERVICE_ID
  ///
  /// The service ID of this channel.
  ///
  /// It is used to identify the current service, or channel from any other services within
  /// a given Transport Stream, if applicable. Use the same coding for {@code service_id} in
  /// ETSI EN 300 468 and ARIB STD-B10 or {@code program_number} in ISO/IEC 13818-1.
  ///
  /// This is a required field only if the underlying broadcast standard defines the same
  /// name field, or the current channel is transmitted via the MPEG Transport Stream. Leave
  /// empty otherwise.
  ///
  /// Type: INTEGER
  static const COLUMN_SERVICE_ID = "service_id";

  /// from: static public final java.lang.String COLUMN_SERVICE_TYPE
  ///
  /// The predefined service type of this TV channel.
  ///
  /// This is primarily used to indicate whether the current channel is a regular TV channel
  /// or a radio-like channel. Use the same coding for {@code service_type} in the underlying
  /// broadcast standard if it is defined there (e.g. ATSC A/53, ETSI EN 300 468 and ARIB
  /// STD-B10). Otherwise use one of the followings: \#SERVICE_TYPE_OTHER,
  /// \#SERVICE_TYPE_AUDIO_VIDEO, \#SERVICE_TYPE_AUDIO
  ///
  /// This is a required field.
  ///
  /// Type: TEXT
  static const COLUMN_SERVICE_TYPE = "service_type";

  /// from: static public final java.lang.String COLUMN_TRANSIENT
  ///
  /// The flag indicating whether this TV channel is transient or not.
  ///
  /// A value of 1 indicates that the channel will be automatically removed by the system on
  /// reboot, and a value of 0 indicates that the channel is persistent across reboot. If not
  /// specified, this value is set to 0 (not transient) by default.
  ///
  /// Type: INTEGER (boolean)
  ///@see PreviewPrograms\#COLUMN_TRANSIENT
  ///@see WatchNextPrograms\#COLUMN_TRANSIENT
  static const COLUMN_TRANSIENT = "transient";

  /// from: static public final java.lang.String COLUMN_TRANSPORT_STREAM_ID
  ///
  /// The transport stream ID of this channel.
  ///
  /// It is used to identify the Transport Stream that contains the current channel from any
  /// other multiplex within a network, if applicable. Use the same coding for
  /// {@code transport_stream_id} defined in ISO/IEC 13818-1 if the channel is transmitted via
  /// the MPEG Transport Stream.
  ///
  /// This is a required field only if the current channel is transmitted via the MPEG
  /// Transport Stream. Leave empty otherwise.
  ///
  /// Type: INTEGER
  static const COLUMN_TRANSPORT_STREAM_ID = "transport_stream_id";

  /// from: static public final java.lang.String COLUMN_TYPE
  ///
  /// The broadcast system type of this TV channel.
  ///
  /// This is used to indicate the broadcast standard (e.g. ATSC, DVB or ISDB) the current
  /// channel conforms to. Use \#TYPE_OTHER for streaming-based channels, which is the
  /// default channel type. The value should match one of the followings:
  /// \#TYPE_1SEG,
  /// \#TYPE_ATSC_C,
  /// \#TYPE_ATSC_M_H,
  /// \#TYPE_ATSC_T,
  /// \#TYPE_CMMB,
  /// \#TYPE_DTMB,
  /// \#TYPE_DVB_C,
  /// \#TYPE_DVB_C2,
  /// \#TYPE_DVB_H,
  /// \#TYPE_DVB_S,
  /// \#TYPE_DVB_S2,
  /// \#TYPE_DVB_SH,
  /// \#TYPE_DVB_T,
  /// \#TYPE_DVB_T2,
  /// \#TYPE_ISDB_C,
  /// \#TYPE_ISDB_S,
  /// \#TYPE_ISDB_T,
  /// \#TYPE_ISDB_TB,
  /// \#TYPE_NTSC,
  /// \#TYPE_OTHER,
  /// \#TYPE_PAL,
  /// \#TYPE_SECAM,
  /// \#TYPE_S_DMB,
  /// \#TYPE_T_DMB, and
  /// \#TYPE_PREVIEW.
  ///
  /// This value cannot be changed once it's set. Trying to modify it will make the update
  /// fail.
  ///
  /// This is a required field.
  ///
  /// Type: TEXT
  static const COLUMN_TYPE = "type";

  /// from: static public final java.lang.String COLUMN_VERSION_NUMBER
  ///
  /// The version number of this row entry used by TV input services.
  ///
  /// This is best used by sync adapters to identify the rows to update. The number can be
  /// defined by individual TV input services. One may assign the same value as
  /// {@code version_number} that appears in ETSI EN 300 468 or ATSC A/65, if the data are
  /// coming from a TV broadcast.
  ///
  /// Type: INTEGER
  static const COLUMN_VERSION_NUMBER = "version_number";

  /// from: static public final java.lang.String COLUMN_VIDEO_FORMAT
  ///
  /// The typical video format for programs from this TV channel.
  ///
  /// This is primarily used to filter out channels based on video format by applications.
  /// The value should match one of the followings: \#VIDEO_FORMAT_240P,
  /// \#VIDEO_FORMAT_360P, \#VIDEO_FORMAT_480I, \#VIDEO_FORMAT_480P,
  /// \#VIDEO_FORMAT_576I, \#VIDEO_FORMAT_576P, \#VIDEO_FORMAT_720P,
  /// \#VIDEO_FORMAT_1080I, \#VIDEO_FORMAT_1080P, \#VIDEO_FORMAT_2160P,
  /// \#VIDEO_FORMAT_4320P. Note that the actual video resolution of each program from a
  /// given channel can vary thus one should use Programs\#COLUMN_VIDEO_WIDTH and
  /// Programs\#COLUMN_VIDEO_HEIGHT to get more accurate video resolution.
  ///
  /// Type: TEXT
  ///@see \#getVideoResolution
  static const COLUMN_VIDEO_FORMAT = "video_format";

  /// from: static public final java.lang.String CONTENT_ITEM_TYPE
  ///
  /// The MIME type of a single TV channel.
  static const CONTENT_ITEM_TYPE = "vnd.android.cursor.item/channel";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of a directory of TV channels.
  static const CONTENT_TYPE = "vnd.android.cursor.dir/channel";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URI for this table.
  ///
  /// SQL selection is not supported for ContentResolver\#query,
  /// ContentResolver\#update and ContentResolver\#delete operations.
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String SERVICE_TYPE_AUDIO
  ///
  /// The service type for radio channels that have audio only.
  static const SERVICE_TYPE_AUDIO = "SERVICE_TYPE_AUDIO";

  /// from: static public final java.lang.String SERVICE_TYPE_AUDIO_VIDEO
  ///
  /// The service type for regular TV channels that have both audio and video.
  static const SERVICE_TYPE_AUDIO_VIDEO = "SERVICE_TYPE_AUDIO_VIDEO";

  /// from: static public final java.lang.String SERVICE_TYPE_OTHER
  ///
  /// A generic service type.
  static const SERVICE_TYPE_OTHER = "SERVICE_TYPE_OTHER";

  /// from: static public final java.lang.String TYPE_1SEG
  ///
  /// The channel type for 1seg (handheld).
  ///@see \#COLUMN_TYPE
  static const TYPE_1SEG = "TYPE_1SEG";

  /// from: static public final java.lang.String TYPE_ATSC_C
  ///
  /// The channel type for ATSC (cable).
  ///@see \#COLUMN_TYPE
  static const TYPE_ATSC_C = "TYPE_ATSC_C";

  /// from: static public final java.lang.String TYPE_ATSC_M_H
  ///
  /// The channel type for ATSC-M/H (mobile/handheld).
  ///@see \#COLUMN_TYPE
  static const TYPE_ATSC_M_H = "TYPE_ATSC_M_H";

  /// from: static public final java.lang.String TYPE_ATSC_T
  ///
  /// The channel type for ATSC (terrestrial).
  ///@see \#COLUMN_TYPE
  static const TYPE_ATSC_T = "TYPE_ATSC_T";

  /// from: static public final java.lang.String TYPE_CMMB
  ///
  /// The channel type for CMMB (handheld).
  ///@see \#COLUMN_TYPE
  static const TYPE_CMMB = "TYPE_CMMB";

  /// from: static public final java.lang.String TYPE_DTMB
  ///
  /// The channel type for DTMB (terrestrial).
  ///@see \#COLUMN_TYPE
  static const TYPE_DTMB = "TYPE_DTMB";

  /// from: static public final java.lang.String TYPE_DVB_C
  ///
  /// The channel type for DVB-C (cable).
  ///@see \#COLUMN_TYPE
  static const TYPE_DVB_C = "TYPE_DVB_C";

  /// from: static public final java.lang.String TYPE_DVB_C2
  ///
  /// The channel type for DVB-C2 (cable).
  ///@see \#COLUMN_TYPE
  static const TYPE_DVB_C2 = "TYPE_DVB_C2";

  /// from: static public final java.lang.String TYPE_DVB_H
  ///
  /// The channel type for DVB-H (handheld).
  ///@see \#COLUMN_TYPE
  static const TYPE_DVB_H = "TYPE_DVB_H";

  /// from: static public final java.lang.String TYPE_DVB_S
  ///
  /// The channel type for DVB-S (satellite).
  ///@see \#COLUMN_TYPE
  static const TYPE_DVB_S = "TYPE_DVB_S";

  /// from: static public final java.lang.String TYPE_DVB_S2
  ///
  /// The channel type for DVB-S2 (satellite).
  ///@see \#COLUMN_TYPE
  static const TYPE_DVB_S2 = "TYPE_DVB_S2";

  /// from: static public final java.lang.String TYPE_DVB_SH
  ///
  /// The channel type for DVB-SH (satellite).
  ///@see \#COLUMN_TYPE
  static const TYPE_DVB_SH = "TYPE_DVB_SH";

  /// from: static public final java.lang.String TYPE_DVB_T
  ///
  /// The channel type for DVB-T (terrestrial).
  ///@see \#COLUMN_TYPE
  static const TYPE_DVB_T = "TYPE_DVB_T";

  /// from: static public final java.lang.String TYPE_DVB_T2
  ///
  /// The channel type for DVB-T2 (terrestrial).
  ///@see \#COLUMN_TYPE
  static const TYPE_DVB_T2 = "TYPE_DVB_T2";

  /// from: static public final java.lang.String TYPE_ISDB_C
  ///
  /// The channel type for ISDB-C (cable).
  ///@see \#COLUMN_TYPE
  static const TYPE_ISDB_C = "TYPE_ISDB_C";

  /// from: static public final java.lang.String TYPE_ISDB_S
  ///
  /// The channel type for ISDB-S (satellite).
  ///@see \#COLUMN_TYPE
  static const TYPE_ISDB_S = "TYPE_ISDB_S";

  /// from: static public final java.lang.String TYPE_ISDB_T
  ///
  /// The channel type for ISDB-T (terrestrial).
  ///@see \#COLUMN_TYPE
  static const TYPE_ISDB_T = "TYPE_ISDB_T";

  /// from: static public final java.lang.String TYPE_ISDB_TB
  ///
  /// The channel type for ISDB-Tb (Brazil).
  ///@see \#COLUMN_TYPE
  static const TYPE_ISDB_TB = "TYPE_ISDB_TB";

  /// from: static public final java.lang.String TYPE_NTSC
  ///
  /// The channel type for NTSC.
  ///@see \#COLUMN_TYPE
  static const TYPE_NTSC = "TYPE_NTSC";

  /// from: static public final java.lang.String TYPE_OTHER
  ///
  /// A generic channel type.
  ///
  /// Use this if the current channel is streaming-based or its broadcast system type does not
  /// fit under any other types. This is the default channel type.
  ///@see \#COLUMN_TYPE
  static const TYPE_OTHER = "TYPE_OTHER";

  /// from: static public final java.lang.String TYPE_PAL
  ///
  /// The channel type for PAL.
  ///@see \#COLUMN_TYPE
  static const TYPE_PAL = "TYPE_PAL";

  /// from: static public final java.lang.String TYPE_PREVIEW
  ///
  /// The channel type for preview videos.
  ///
  /// <P>Unlike other broadcast TV channel types, the programs in the preview channel usually
  /// are promotional videos. The UI may treat the preview channels differently from the other
  /// broadcast channels.
  ///@see \#COLUMN_TYPE
  static const TYPE_PREVIEW = "TYPE_PREVIEW";

  /// from: static public final java.lang.String TYPE_SECAM
  ///
  /// The channel type for SECAM.
  ///@see \#COLUMN_TYPE
  static const TYPE_SECAM = "TYPE_SECAM";

  /// from: static public final java.lang.String TYPE_S_DMB
  ///
  /// The channel type for S-DMB (satellite).
  ///@see \#COLUMN_TYPE
  static const TYPE_S_DMB = "TYPE_S_DMB";

  /// from: static public final java.lang.String TYPE_T_DMB
  ///
  /// The channel type for T-DMB (terrestrial).
  ///@see \#COLUMN_TYPE
  static const TYPE_T_DMB = "TYPE_T_DMB";

  /// from: static public final java.lang.String VIDEO_FORMAT_1080I
  ///
  /// The video format for 1080i.
  static const VIDEO_FORMAT_1080I = "VIDEO_FORMAT_1080I";

  /// from: static public final java.lang.String VIDEO_FORMAT_1080P
  ///
  /// The video format for 1080p.
  static const VIDEO_FORMAT_1080P = "VIDEO_FORMAT_1080P";

  /// from: static public final java.lang.String VIDEO_FORMAT_2160P
  ///
  /// The video format for 2160p.
  static const VIDEO_FORMAT_2160P = "VIDEO_FORMAT_2160P";

  /// from: static public final java.lang.String VIDEO_FORMAT_240P
  ///
  /// The video format for 240p.
  static const VIDEO_FORMAT_240P = "VIDEO_FORMAT_240P";

  /// from: static public final java.lang.String VIDEO_FORMAT_360P
  ///
  /// The video format for 360p.
  static const VIDEO_FORMAT_360P = "VIDEO_FORMAT_360P";

  /// from: static public final java.lang.String VIDEO_FORMAT_4320P
  ///
  /// The video format for 4320p.
  static const VIDEO_FORMAT_4320P = "VIDEO_FORMAT_4320P";

  /// from: static public final java.lang.String VIDEO_FORMAT_480I
  ///
  /// The video format for 480i.
  static const VIDEO_FORMAT_480I = "VIDEO_FORMAT_480I";

  /// from: static public final java.lang.String VIDEO_FORMAT_480P
  ///
  /// The video format for 480p.
  static const VIDEO_FORMAT_480P = "VIDEO_FORMAT_480P";

  /// from: static public final java.lang.String VIDEO_FORMAT_576I
  ///
  /// The video format for 576i.
  static const VIDEO_FORMAT_576I = "VIDEO_FORMAT_576I";

  /// from: static public final java.lang.String VIDEO_FORMAT_576P
  ///
  /// The video format for 576p.
  static const VIDEO_FORMAT_576P = "VIDEO_FORMAT_576P";

  /// from: static public final java.lang.String VIDEO_FORMAT_720P
  ///
  /// The video format for 720p.
  static const VIDEO_FORMAT_720P = "VIDEO_FORMAT_720P";

  /// from: static public final java.lang.String VIDEO_RESOLUTION_ED
  ///
  /// The video resolution for enhanced-definition.
  static const VIDEO_RESOLUTION_ED = "VIDEO_RESOLUTION_ED";

  /// from: static public final java.lang.String VIDEO_RESOLUTION_FHD
  ///
  /// The video resolution for full high-definition.
  static const VIDEO_RESOLUTION_FHD = "VIDEO_RESOLUTION_FHD";

  /// from: static public final java.lang.String VIDEO_RESOLUTION_HD
  ///
  /// The video resolution for high-definition.
  static const VIDEO_RESOLUTION_HD = "VIDEO_RESOLUTION_HD";

  /// from: static public final java.lang.String VIDEO_RESOLUTION_SD
  ///
  /// The video resolution for standard-definition.
  static const VIDEO_RESOLUTION_SD = "VIDEO_RESOLUTION_SD";

  /// from: static public final java.lang.String VIDEO_RESOLUTION_UHD
  ///
  /// The video resolution for ultra high-definition.
  static const VIDEO_RESOLUTION_UHD = "VIDEO_RESOLUTION_UHD";

  static final _id_getVideoResolution = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getVideoResolution",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getVideoResolution(java.lang.String videoFormat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the video resolution (definition) for a given video format.
  ///@param videoFormat The video format defined in Channels.
  /// Value is android.media.tv.TvContract.Channels\#VIDEO_FORMAT_240P, android.media.tv.TvContract.Channels\#VIDEO_FORMAT_360P, android.media.tv.TvContract.Channels\#VIDEO_FORMAT_480I, android.media.tv.TvContract.Channels\#VIDEO_FORMAT_576I, android.media.tv.TvContract.Channels\#VIDEO_FORMAT_576P, android.media.tv.TvContract.Channels\#VIDEO_FORMAT_720P, android.media.tv.TvContract.Channels\#VIDEO_FORMAT_1080I, android.media.tv.TvContract.Channels\#VIDEO_FORMAT_1080P, android.media.tv.TvContract.Channels\#VIDEO_FORMAT_2160P, or android.media.tv.TvContract.Channels\#VIDEO_FORMAT_4320P
  ///@return the corresponding video resolution string. {@code null} if the resolution string
  ///         is not defined for the given video format.
  ///@see \#COLUMN_VIDEO_FORMAT
  static jni.JniString getVideoResolution(jni.JniString videoFormat) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getVideoResolution,
          jni.JniType.objectType,
          [videoFormat.reference]).object);
}

/// from: android.media.tv.TvContract$Channels$Logo
///
/// A sub-directory of a single TV channel that represents its primary logo.
///
/// To access this directory, append Channels.Logo\#CONTENT_DIRECTORY to the raw
/// channel URI.  The resulting URI represents an image file, and should be interacted
/// using ContentResolver.openAssetFileDescriptor.
///
/// Note that this sub-directory also supports opening the logo as an asset file in write
/// mode.  Callers can create or replace the primary logo associated with this channel by
/// opening the asset file and writing the full-size photo contents into it. (Make sure there
/// is no padding around the logo image.) When the file is closed, the image will be parsed,
/// sized down if necessary, and stored.
///
/// Usage example:
/// <pre>
/// public void writeChannelLogo(long channelId, byte[] logo) {
///     Uri channelLogoUri = TvContract.buildChannelLogoUri(channelId);
///     try {
///         AssetFileDescriptor fd =
///             getContentResolver().openAssetFileDescriptor(channelLogoUri, "rw");
///         OutputStream os = fd.createOutputStream();
///         os.write(logo);
///         os.close();
///         fd.close();
///     } catch (IOException e) {
///         // Handle error cases.
///     }
/// }
/// </pre>
class TvContract_Channels_Logo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvContract\$Channels\$Logo");
  TvContract_Channels_Logo.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  ///
  /// The directory twig for this sub-table.
  static const CONTENT_DIRECTORY = "logo";
}

/// from: android.media.tv.TvContract$BaseTvColumns
///
/// Common base for the tables of TV channels/programs.
class TvContract_BaseTvColumns extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/tv/TvContract\$BaseTvColumns");
  TvContract_BaseTvColumns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String COLUMN_PACKAGE_NAME
  ///
  /// The name of the package that owns the current row.
  ///
  /// The TV provider fills in this column with the name of the package that provides the
  /// initial data of the row. If the package is later uninstalled, the rows it owns are
  /// automatically removed from the tables.
  ///
  /// Type: TEXT
  static const COLUMN_PACKAGE_NAME = "package_name";
}
