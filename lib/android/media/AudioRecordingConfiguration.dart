// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "AudioFormat.dart" as audioformat_;

import "AudioDeviceInfo.dart" as audiodeviceinfo_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.AudioRecordingConfiguration
///
/// The AudioRecordingConfiguration class collects the information describing an audio recording
/// session.
/// Direct polling (see AudioManager\#getActiveRecordingConfigurations()) or callback
/// (see AudioManager\#registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback, android.os.Handler)
/// methods are ways to receive information about the current recording configuration of the device.
/// An audio recording configuration contains information about the recording format as used by
/// the application (\#getClientFormat(), as well as the recording format actually used by
/// the device (\#getFormat()). The two recording formats may, for instance, be at different
/// sampling rates due to hardware limitations (e.g. application recording at 44.1kHz whereas the
/// device always records at 48kHz, and the Android framework resamples for the application).
/// The configuration also contains the use case for which audio is recorded
/// (\#getClientAudioSource()), enabling the ability to distinguish between different
/// activities such as ongoing voice recognition or camcorder recording.
class AudioRecordingConfiguration extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/AudioRecordingConfiguration");
  AudioRecordingConfiguration.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.media.AudioRecordingConfiguration> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_getClientAudioSource =
      jniAccessors.getMethodIDOf(_classRef, "getClientAudioSource", "()I");

  /// from: public int getClientAudioSource()
  ///
  /// Returns the audio source being used for the recording.
  ///@return one of MediaRecorder.AudioSource\#DEFAULT,
  ///       MediaRecorder.AudioSource\#MIC,
  ///       MediaRecorder.AudioSource\#VOICE_UPLINK,
  ///       MediaRecorder.AudioSource\#VOICE_DOWNLINK,
  ///       MediaRecorder.AudioSource\#VOICE_CALL,
  ///       MediaRecorder.AudioSource\#CAMCORDER,
  ///       MediaRecorder.AudioSource\#VOICE_RECOGNITION,
  ///       MediaRecorder.AudioSource\#VOICE_COMMUNICATION,
  ///       MediaRecorder.AudioSource\#UNPROCESSED.
  ///
  /// Value is android.media.MediaRecorder.AudioSource\#DEFAULT, android.media.MediaRecorder.AudioSource\#MIC, android.media.MediaRecorder.AudioSource\#VOICE_UPLINK, android.media.MediaRecorder.AudioSource\#VOICE_DOWNLINK, android.media.MediaRecorder.AudioSource\#VOICE_CALL, android.media.MediaRecorder.AudioSource\#CAMCORDER, android.media.MediaRecorder.AudioSource\#VOICE_RECOGNITION, android.media.MediaRecorder.AudioSource\#VOICE_COMMUNICATION, or android.media.MediaRecorder.AudioSource\#UNPROCESSED
  int getClientAudioSource() => jniAccessors.callMethodWithArgs(
      reference, _id_getClientAudioSource, jni.JniType.intType, []).integer;

  static final _id_getClientAudioSessionId =
      jniAccessors.getMethodIDOf(_classRef, "getClientAudioSessionId", "()I");

  /// from: public int getClientAudioSessionId()
  ///
  /// Returns the session number of the recording, see AudioRecord\#getAudioSessionId().
  ///@return the session number.
  int getClientAudioSessionId() => jniAccessors.callMethodWithArgs(
      reference, _id_getClientAudioSessionId, jni.JniType.intType, []).integer;

  static final _id_getFormat = jniAccessors.getMethodIDOf(
      _classRef, "getFormat", "()Landroid/media/AudioFormat;");

  /// from: public android.media.AudioFormat getFormat()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the audio format at which audio is recorded on this Android device.
  /// Note that it may differ from the client application recording format
  /// (see \#getClientFormat()).
  ///@return the device recording format
  audioformat_.AudioFormat getFormat() =>
      audioformat_.AudioFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFormat, jni.JniType.objectType, []).object);

  static final _id_getClientFormat = jniAccessors.getMethodIDOf(
      _classRef, "getClientFormat", "()Landroid/media/AudioFormat;");

  /// from: public android.media.AudioFormat getClientFormat()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the audio format at which the client application is recording audio.
  /// Note that it may differ from the actual recording format (see \#getFormat()).
  ///@return the recording format
  audioformat_.AudioFormat getClientFormat() =>
      audioformat_.AudioFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getClientFormat, jni.JniType.objectType, []).object);

  static final _id_getAudioDevice = jniAccessors.getMethodIDOf(
      _classRef, "getAudioDevice", "()Landroid/media/AudioDeviceInfo;");

  /// from: public android.media.AudioDeviceInfo getAudioDevice()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns information about the audio input device used for this recording.
  ///@return the audio recording device or null if this information cannot be retrieved
  audiodeviceinfo_.AudioDeviceInfo getAudioDevice() =>
      audiodeviceinfo_.AudioDeviceInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAudioDevice, jni.JniType.objectType, []).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;
}
