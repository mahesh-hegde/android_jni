// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Bundle.dart" as bundle_;

import "Rating.dart" as rating_;

import "../graphics/Bitmap.dart" as bitmap_;

import "../os/Parcel.dart" as parcel_;

import "MediaDescription.dart" as mediadescription_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.MediaMetadata
///
/// Contains metadata about an item, such as the title, artist, etc.
class MediaMetadata extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/MediaMetadata");
  MediaMetadata.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.media.MediaMetadata> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final java.lang.String METADATA_KEY_ALBUM
  ///
  /// The album title for the media.
  static const METADATA_KEY_ALBUM = "android.media.metadata.ALBUM";

  /// from: static public final java.lang.String METADATA_KEY_ALBUM_ART
  ///
  /// The artwork for the album of the media's original source as a
  /// Bitmap.
  ///
  /// The artwork should be relatively small and may be scaled down by the
  /// system if it is too large. For higher resolution artwork
  /// \#METADATA_KEY_ALBUM_ART_URI should be used instead.
  static const METADATA_KEY_ALBUM_ART = "android.media.metadata.ALBUM_ART";

  /// from: static public final java.lang.String METADATA_KEY_ALBUM_ARTIST
  ///
  /// The artist for the album of the media's original source.
  static const METADATA_KEY_ALBUM_ARTIST =
      "android.media.metadata.ALBUM_ARTIST";

  /// from: static public final java.lang.String METADATA_KEY_ALBUM_ART_URI
  ///
  /// The artwork for the album of the media's original source as a Uri
  /// formatted String. The artwork can be loaded using a combination of
  /// ContentResolver\#openInputStream and
  /// BitmapFactory\#decodeStream.
  ///
  /// For the best results, Uris should use the content:// style and support
  /// ContentResolver\#EXTRA_SIZE for retrieving scaled artwork through
  /// ContentResolver\#openTypedAssetFileDescriptor(Uri, String, Bundle).
  static const METADATA_KEY_ALBUM_ART_URI =
      "android.media.metadata.ALBUM_ART_URI";

  /// from: static public final java.lang.String METADATA_KEY_ART
  ///
  /// The artwork for the media as a Bitmap.
  ///
  /// The artwork should be relatively small and may be scaled down by the
  /// system if it is too large. For higher resolution artwork
  /// \#METADATA_KEY_ART_URI should be used instead.
  static const METADATA_KEY_ART = "android.media.metadata.ART";

  /// from: static public final java.lang.String METADATA_KEY_ARTIST
  ///
  /// The artist of the media.
  static const METADATA_KEY_ARTIST = "android.media.metadata.ARTIST";

  /// from: static public final java.lang.String METADATA_KEY_ART_URI
  ///
  /// The artwork for the media as a Uri formatted String. The artwork can be
  /// loaded using a combination of ContentResolver\#openInputStream and
  /// BitmapFactory\#decodeStream.
  ///
  /// For the best results, Uris should use the content:// style and support
  /// ContentResolver\#EXTRA_SIZE for retrieving scaled artwork through
  /// ContentResolver\#openTypedAssetFileDescriptor(Uri, String, Bundle).
  static const METADATA_KEY_ART_URI = "android.media.metadata.ART_URI";

  /// from: static public final java.lang.String METADATA_KEY_AUTHOR
  ///
  /// The author of the media.
  static const METADATA_KEY_AUTHOR = "android.media.metadata.AUTHOR";

  /// from: static public final java.lang.String METADATA_KEY_BT_FOLDER_TYPE
  ///
  /// The bluetooth folder type of the media specified in the section 6.10.2.2 of the Bluetooth
  /// AVRCP 1.5. It should be one of the following:
  /// <ul>
  /// <li>MediaDescription\#BT_FOLDER_TYPE_MIXED</li>
  /// <li>MediaDescription\#BT_FOLDER_TYPE_TITLES</li>
  /// <li>MediaDescription\#BT_FOLDER_TYPE_ALBUMS</li>
  /// <li>MediaDescription\#BT_FOLDER_TYPE_ARTISTS</li>
  /// <li>MediaDescription\#BT_FOLDER_TYPE_GENRES</li>
  /// <li>MediaDescription\#BT_FOLDER_TYPE_PLAYLISTS</li>
  /// <li>MediaDescription\#BT_FOLDER_TYPE_YEARS</li>
  /// </ul>
  static const METADATA_KEY_BT_FOLDER_TYPE =
      "android.media.metadata.BT_FOLDER_TYPE";

  /// from: static public final java.lang.String METADATA_KEY_COMPILATION
  ///
  /// The compilation status of the media.
  static const METADATA_KEY_COMPILATION = "android.media.metadata.COMPILATION";

  /// from: static public final java.lang.String METADATA_KEY_COMPOSER
  ///
  /// The composer of the media.
  static const METADATA_KEY_COMPOSER = "android.media.metadata.COMPOSER";

  /// from: static public final java.lang.String METADATA_KEY_DATE
  ///
  /// The date the media was created or published. The format is unspecified
  /// but RFC 3339 is recommended.
  static const METADATA_KEY_DATE = "android.media.metadata.DATE";

  /// from: static public final java.lang.String METADATA_KEY_DISC_NUMBER
  ///
  /// The disc number for the media's original source.
  static const METADATA_KEY_DISC_NUMBER = "android.media.metadata.DISC_NUMBER";

  /// from: static public final java.lang.String METADATA_KEY_DISPLAY_DESCRIPTION
  ///
  /// A description that is suitable for display to the user. When displaying
  /// more information for media described by this metadata this should be
  /// preferred to other fields if present.
  static const METADATA_KEY_DISPLAY_DESCRIPTION =
      "android.media.metadata.DISPLAY_DESCRIPTION";

  /// from: static public final java.lang.String METADATA_KEY_DISPLAY_ICON
  ///
  /// An icon or thumbnail that is suitable for display to the user. When
  /// displaying an icon for media described by this metadata this should be
  /// preferred to other fields if present. This must be a Bitmap.
  ///
  /// The icon should be relatively small and may be scaled down by the system
  /// if it is too large. For higher resolution artwork
  /// \#METADATA_KEY_DISPLAY_ICON_URI should be used instead.
  static const METADATA_KEY_DISPLAY_ICON =
      "android.media.metadata.DISPLAY_ICON";

  /// from: static public final java.lang.String METADATA_KEY_DISPLAY_ICON_URI
  ///
  /// A Uri formatted String for an icon or thumbnail that is suitable for
  /// display to the user. When displaying more information for media described
  /// by this metadata the display description should be preferred to other
  /// fields when present. The icon can be loaded using a combination of
  /// ContentResolver\#openInputStream and
  /// BitmapFactory\#decodeStream.
  ///
  /// For the best results, Uris should use the content:// style and support
  /// ContentResolver\#EXTRA_SIZE for retrieving scaled artwork through
  /// ContentResolver\#openTypedAssetFileDescriptor(Uri, String, Bundle).
  static const METADATA_KEY_DISPLAY_ICON_URI =
      "android.media.metadata.DISPLAY_ICON_URI";

  /// from: static public final java.lang.String METADATA_KEY_DISPLAY_SUBTITLE
  ///
  /// A subtitle that is suitable for display to the user. When displaying a
  /// second line for media described by this metadata this should be preferred
  /// to other fields if present.
  static const METADATA_KEY_DISPLAY_SUBTITLE =
      "android.media.metadata.DISPLAY_SUBTITLE";

  /// from: static public final java.lang.String METADATA_KEY_DISPLAY_TITLE
  ///
  /// A title that is suitable for display to the user. This will generally be
  /// the same as \#METADATA_KEY_TITLE but may differ for some formats.
  /// When displaying media described by this metadata this should be preferred
  /// if present.
  static const METADATA_KEY_DISPLAY_TITLE =
      "android.media.metadata.DISPLAY_TITLE";

  /// from: static public final java.lang.String METADATA_KEY_DURATION
  ///
  /// The duration of the media in ms. A negative duration indicates that the
  /// duration is unknown (or infinite).
  static const METADATA_KEY_DURATION = "android.media.metadata.DURATION";

  /// from: static public final java.lang.String METADATA_KEY_GENRE
  ///
  /// The genre of the media.
  static const METADATA_KEY_GENRE = "android.media.metadata.GENRE";

  /// from: static public final java.lang.String METADATA_KEY_MEDIA_ID
  ///
  /// A String key for identifying the content. This value is specific to the
  /// service providing the content. If used, this should be a persistent
  /// unique key for the underlying content. It may be used with
  /// MediaController.TransportControls\#playFromMediaId(String, Bundle)
  /// to initiate playback when provided by a MediaBrowser connected to
  /// the same app.
  static const METADATA_KEY_MEDIA_ID = "android.media.metadata.MEDIA_ID";

  /// from: static public final java.lang.String METADATA_KEY_MEDIA_URI
  ///
  /// A Uri formatted String representing the content. This value is specific to the
  /// service providing the content. It may be used with
  /// MediaController.TransportControls\#playFromUri(Uri, Bundle)
  /// to initiate playback when provided by a MediaBrowser connected to
  /// the same app.
  static const METADATA_KEY_MEDIA_URI = "android.media.metadata.MEDIA_URI";

  /// from: static public final java.lang.String METADATA_KEY_NUM_TRACKS
  ///
  /// The number of tracks in the media's original source.
  static const METADATA_KEY_NUM_TRACKS = "android.media.metadata.NUM_TRACKS";

  /// from: static public final java.lang.String METADATA_KEY_RATING
  ///
  /// The overall rating for the media.
  ///@see Rating
  static const METADATA_KEY_RATING = "android.media.metadata.RATING";

  /// from: static public final java.lang.String METADATA_KEY_TITLE
  ///
  /// The title of the media.
  static const METADATA_KEY_TITLE = "android.media.metadata.TITLE";

  /// from: static public final java.lang.String METADATA_KEY_TRACK_NUMBER
  ///
  /// The track number for the media.
  static const METADATA_KEY_TRACK_NUMBER =
      "android.media.metadata.TRACK_NUMBER";

  /// from: static public final java.lang.String METADATA_KEY_USER_RATING
  ///
  /// The user's rating for the media.
  ///@see Rating
  static const METADATA_KEY_USER_RATING = "android.media.metadata.USER_RATING";

  /// from: static public final java.lang.String METADATA_KEY_WRITER
  ///
  /// The writer of the media.
  static const METADATA_KEY_WRITER = "android.media.metadata.WRITER";

  /// from: static public final java.lang.String METADATA_KEY_YEAR
  ///
  /// The year the media was created or published as a long.
  static const METADATA_KEY_YEAR = "android.media.metadata.YEAR";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Bundle;)V");

  /// from: void <init>(android.os.Bundle bundle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MediaMetadata(bundle_.Bundle bundle)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [bundle.reference]).object);

  static final _id_containsKey = jniAccessors.getMethodIDOf(
      _classRef, "containsKey", "(Ljava/lang/String;)Z");

  /// from: public boolean containsKey(java.lang.String key)
  ///
  /// Returns true if the given key is contained in the metadata
  ///@param key a String key
  ///@return true if the key exists in this metadata, false otherwise
  bool containsKey(jni.JniString key) => jniAccessors.callMethodWithArgs(
      reference,
      _id_containsKey,
      jni.JniType.booleanType,
      [key.reference]).boolean;

  static final _id_getText = jniAccessors.getMethodIDOf(
      _classRef, "getText", "(Ljava/lang/String;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getText(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the value associated with the given key, or null if no mapping of
  /// the desired type exists for the given key or a null value is explicitly
  /// associated with the key.
  ///@param key The key the value is stored under
  /// Value is android.media.MediaMetadata\#METADATA_KEY_TITLE, android.media.MediaMetadata\#METADATA_KEY_ARTIST, android.media.MediaMetadata\#METADATA_KEY_ALBUM, android.media.MediaMetadata\#METADATA_KEY_AUTHOR, android.media.MediaMetadata\#METADATA_KEY_WRITER, android.media.MediaMetadata\#METADATA_KEY_COMPOSER, android.media.MediaMetadata\#METADATA_KEY_COMPILATION, android.media.MediaMetadata\#METADATA_KEY_DATE, android.media.MediaMetadata\#METADATA_KEY_GENRE, android.media.MediaMetadata\#METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata\#METADATA_KEY_ART_URI, android.media.MediaMetadata\#METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata\#METADATA_KEY_MEDIA_ID, or android.media.MediaMetadata\#METADATA_KEY_MEDIA_URI
  ///@return a CharSequence value, or null
  jni.JniObject getText(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getText, jni.JniType.objectType, [key.reference]).object);

  static final _id_getString = jniAccessors.getMethodIDOf(
      _classRef, "getString", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getString(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the text value associated with the given key as a String, or null
  /// if no mapping of the desired type exists for the given key or a null
  /// value is explicitly associated with the key. This is equivalent to
  /// calling \#getText getText().toString() if the value is not null.
  ///@param key The key the value is stored under
  /// Value is android.media.MediaMetadata\#METADATA_KEY_TITLE, android.media.MediaMetadata\#METADATA_KEY_ARTIST, android.media.MediaMetadata\#METADATA_KEY_ALBUM, android.media.MediaMetadata\#METADATA_KEY_AUTHOR, android.media.MediaMetadata\#METADATA_KEY_WRITER, android.media.MediaMetadata\#METADATA_KEY_COMPOSER, android.media.MediaMetadata\#METADATA_KEY_COMPILATION, android.media.MediaMetadata\#METADATA_KEY_DATE, android.media.MediaMetadata\#METADATA_KEY_GENRE, android.media.MediaMetadata\#METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata\#METADATA_KEY_ART_URI, android.media.MediaMetadata\#METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata\#METADATA_KEY_MEDIA_ID, or android.media.MediaMetadata\#METADATA_KEY_MEDIA_URI
  ///@return a String value, or null
  jni.JniString getString(jni.JniString key) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getString, jni.JniType.objectType, [key.reference]).object);

  static final _id_getLong =
      jniAccessors.getMethodIDOf(_classRef, "getLong", "(Ljava/lang/String;)J");

  /// from: public long getLong(java.lang.String key)
  ///
  /// Returns the value associated with the given key, or 0L if no long exists
  /// for the given key.
  ///@param key The key the value is stored under
  /// Value is android.media.MediaMetadata\#METADATA_KEY_DURATION, android.media.MediaMetadata\#METADATA_KEY_YEAR, android.media.MediaMetadata\#METADATA_KEY_TRACK_NUMBER, android.media.MediaMetadata\#METADATA_KEY_NUM_TRACKS, android.media.MediaMetadata\#METADATA_KEY_DISC_NUMBER, or android.media.MediaMetadata\#METADATA_KEY_BT_FOLDER_TYPE
  ///@return a long value
  int getLong(jni.JniString key) => jniAccessors.callMethodWithArgs(
      reference, _id_getLong, jni.JniType.longType, [key.reference]).long;

  static final _id_getRating = jniAccessors.getMethodIDOf(
      _classRef, "getRating", "(Ljava/lang/String;)Landroid/media/Rating;");

  /// from: public android.media.Rating getRating(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Rating for the given key or null if no rating exists
  /// for the given key.
  ///@param key The key the value is stored under
  /// Value is android.media.MediaMetadata\#METADATA_KEY_USER_RATING, or android.media.MediaMetadata\#METADATA_KEY_RATING
  ///@return A Rating or null
  rating_.Rating getRating(jni.JniString key) =>
      rating_.Rating.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getRating, jni.JniType.objectType, [key.reference]).object);

  static final _id_getBitmap = jniAccessors.getMethodIDOf(
      _classRef, "getBitmap", "(Ljava/lang/String;)Landroid/graphics/Bitmap;");

  /// from: public android.graphics.Bitmap getBitmap(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Bitmap for the given key or null if no bitmap exists
  /// for the given key.
  ///@param key The key the value is stored under
  /// Value is android.media.MediaMetadata\#METADATA_KEY_ART, android.media.MediaMetadata\#METADATA_KEY_ALBUM_ART, or android.media.MediaMetadata\#METADATA_KEY_DISPLAY_ICON
  ///@return A Bitmap or null
  bitmap_.Bitmap getBitmap(jni.JniString key) =>
      bitmap_.Bitmap.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getBitmap, jni.JniType.objectType, [key.reference]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_size = jniAccessors.getMethodIDOf(_classRef, "size", "()I");

  /// from: public int size()
  ///
  /// Returns the number of fields in this metadata.
  ///@return The number of fields in the metadata.
  int size() => jniAccessors
      .callMethodWithArgs(reference, _id_size, jni.JniType.intType, []).integer;

  static final _id_keySet =
      jniAccessors.getMethodIDOf(_classRef, "keySet", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.String> keySet()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Set containing the Strings used as keys in this metadata.
  ///@return a Set of String keys
  jni.JniObject keySet() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_keySet, jni.JniType.objectType, []).object);

  static final _id_getDescription = jniAccessors.getMethodIDOf(
      _classRef, "getDescription", "()Landroid/media/MediaDescription;");

  /// from: public android.media.MediaDescription getDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a simple description of this metadata for display purposes.
  ///@return A simple description of this metadata.
  ///
  /// This value will never be {@code null}.
  mediadescription_.MediaDescription getDescription() =>
      mediadescription_.MediaDescription.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getDescription,
              jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  ///
  /// Compares the contents of this object to another MediaMetadata object. It
  /// does not compare Bitmaps and Ratings as the media player can choose to
  /// forgo these fields depending on how you retrieve the MediaMetadata.
  ///@param o The Metadata object to compare this object against
  ///@return Whether or not the two objects have matching fields (excluding
  /// Bitmaps and Ratings)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}

/// from: android.media.MediaMetadata$Builder
///
/// Use to build MediaMetadata objects. The system defined metadata keys must
/// use the appropriate data type.
class MediaMetadata_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/MediaMetadata\$Builder");
  MediaMetadata_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an empty Builder. Any field that should be included in the
  /// MediaMetadata must be added.
  MediaMetadata_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/media/MediaMetadata;)V");

  /// from: public void <init>(android.media.MediaMetadata source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a Builder using a MediaMetadata instance to set the
  /// initial values. All fields in the source metadata will be included in
  /// the new metadata. Fields can be overwritten by adding the same key.
  ///@param source
  MediaMetadata_Builder.ctor1(MediaMetadata source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [source.reference]).object);

  static final _id_putText = jniAccessors.getMethodIDOf(_classRef, "putText",
      "(Ljava/lang/String;Ljava/lang/CharSequence;)Landroid/media/MediaMetadata\$Builder;");

  /// from: public android.media.MediaMetadata.Builder putText(java.lang.String key, java.lang.CharSequence value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Put a CharSequence value into the metadata. Custom keys may be used,
  /// but if the METADATA_KEYs defined in this class are used they may only
  /// be one of the following:
  /// <ul>
  /// <li>\#METADATA_KEY_TITLE</li>
  /// <li>\#METADATA_KEY_ARTIST</li>
  /// <li>\#METADATA_KEY_ALBUM</li>
  /// <li>\#METADATA_KEY_AUTHOR</li>
  /// <li>\#METADATA_KEY_WRITER</li>
  /// <li>\#METADATA_KEY_COMPOSER</li>
  /// <li>\#METADATA_KEY_DATE</li>
  /// <li>\#METADATA_KEY_GENRE</li>
  /// <li>\#METADATA_KEY_ALBUM_ARTIST</li>
  /// <li>\#METADATA_KEY_ART_URI</li>
  /// <li>\#METADATA_KEY_ALBUM_ART_URI</li>
  /// <li>\#METADATA_KEY_DISPLAY_TITLE</li>
  /// <li>\#METADATA_KEY_DISPLAY_SUBTITLE</li>
  /// <li>\#METADATA_KEY_DISPLAY_DESCRIPTION</li>
  /// <li>\#METADATA_KEY_DISPLAY_ICON_URI</li>
  /// </ul>
  ///@param key The key for referencing this value
  /// Value is android.media.MediaMetadata\#METADATA_KEY_TITLE, android.media.MediaMetadata\#METADATA_KEY_ARTIST, android.media.MediaMetadata\#METADATA_KEY_ALBUM, android.media.MediaMetadata\#METADATA_KEY_AUTHOR, android.media.MediaMetadata\#METADATA_KEY_WRITER, android.media.MediaMetadata\#METADATA_KEY_COMPOSER, android.media.MediaMetadata\#METADATA_KEY_COMPILATION, android.media.MediaMetadata\#METADATA_KEY_DATE, android.media.MediaMetadata\#METADATA_KEY_GENRE, android.media.MediaMetadata\#METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata\#METADATA_KEY_ART_URI, android.media.MediaMetadata\#METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata\#METADATA_KEY_MEDIA_ID, or android.media.MediaMetadata\#METADATA_KEY_MEDIA_URI
  ///@param value The CharSequence value to store
  ///@return The Builder to allow chaining
  MediaMetadata_Builder putText(jni.JniString key, jni.JniObject value) =>
      MediaMetadata_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_putText,
          jni.JniType.objectType,
          [key.reference, value.reference]).object);

  static final _id_putString = jniAccessors.getMethodIDOf(
      _classRef,
      "putString",
      "(Ljava/lang/String;Ljava/lang/String;)Landroid/media/MediaMetadata\$Builder;");

  /// from: public android.media.MediaMetadata.Builder putString(java.lang.String key, java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Put a String value into the metadata. Custom keys may be used, but if
  /// the METADATA_KEYs defined in this class are used they may only be one
  /// of the following:
  /// <ul>
  /// <li>\#METADATA_KEY_TITLE</li>
  /// <li>\#METADATA_KEY_ARTIST</li>
  /// <li>\#METADATA_KEY_ALBUM</li>
  /// <li>\#METADATA_KEY_AUTHOR</li>
  /// <li>\#METADATA_KEY_WRITER</li>
  /// <li>\#METADATA_KEY_COMPOSER</li>
  /// <li>\#METADATA_KEY_DATE</li>
  /// <li>\#METADATA_KEY_GENRE</li>
  /// <li>\#METADATA_KEY_ALBUM_ARTIST</li>
  /// <li>\#METADATA_KEY_ART_URI</li>
  /// <li>\#METADATA_KEY_ALBUM_ART_URI</li>
  /// <li>\#METADATA_KEY_DISPLAY_TITLE</li>
  /// <li>\#METADATA_KEY_DISPLAY_SUBTITLE</li>
  /// <li>\#METADATA_KEY_DISPLAY_DESCRIPTION</li>
  /// <li>\#METADATA_KEY_DISPLAY_ICON_URI</li>
  /// </ul>
  ///
  /// Uris for artwork should use the content:// style and support
  /// ContentResolver\#EXTRA_SIZE for retrieving scaled artwork
  /// through ContentResolver\#openTypedAssetFileDescriptor(Uri,
  /// String, Bundle).
  ///@param key The key for referencing this value
  /// Value is android.media.MediaMetadata\#METADATA_KEY_TITLE, android.media.MediaMetadata\#METADATA_KEY_ARTIST, android.media.MediaMetadata\#METADATA_KEY_ALBUM, android.media.MediaMetadata\#METADATA_KEY_AUTHOR, android.media.MediaMetadata\#METADATA_KEY_WRITER, android.media.MediaMetadata\#METADATA_KEY_COMPOSER, android.media.MediaMetadata\#METADATA_KEY_COMPILATION, android.media.MediaMetadata\#METADATA_KEY_DATE, android.media.MediaMetadata\#METADATA_KEY_GENRE, android.media.MediaMetadata\#METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata\#METADATA_KEY_ART_URI, android.media.MediaMetadata\#METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata\#METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata\#METADATA_KEY_MEDIA_ID, or android.media.MediaMetadata\#METADATA_KEY_MEDIA_URI
  ///@param value The String value to store
  ///@return The Builder to allow chaining
  MediaMetadata_Builder putString(jni.JniString key, jni.JniString value) =>
      MediaMetadata_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_putString,
          jni.JniType.objectType,
          [key.reference, value.reference]).object);

  static final _id_putLong = jniAccessors.getMethodIDOf(_classRef, "putLong",
      "(Ljava/lang/String;J)Landroid/media/MediaMetadata\$Builder;");

  /// from: public android.media.MediaMetadata.Builder putLong(java.lang.String key, long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Put a long value into the metadata. Custom keys may be used, but if
  /// the METADATA_KEYs defined in this class are used they may only be one
  /// of the following:
  /// <ul>
  /// <li>\#METADATA_KEY_DURATION</li>
  /// <li>\#METADATA_KEY_TRACK_NUMBER</li>
  /// <li>\#METADATA_KEY_NUM_TRACKS</li>
  /// <li>\#METADATA_KEY_DISC_NUMBER</li>
  /// <li>\#METADATA_KEY_YEAR</li>
  /// </ul>
  ///@param key The key for referencing this value
  /// Value is android.media.MediaMetadata\#METADATA_KEY_DURATION, android.media.MediaMetadata\#METADATA_KEY_YEAR, android.media.MediaMetadata\#METADATA_KEY_TRACK_NUMBER, android.media.MediaMetadata\#METADATA_KEY_NUM_TRACKS, android.media.MediaMetadata\#METADATA_KEY_DISC_NUMBER, or android.media.MediaMetadata\#METADATA_KEY_BT_FOLDER_TYPE
  ///@param value The long value to store
  ///@return The Builder to allow chaining
  MediaMetadata_Builder putLong(jni.JniString key, int value) =>
      MediaMetadata_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_putLong, jni.JniType.objectType, [key.reference, value]).object);

  static final _id_putRating = jniAccessors.getMethodIDOf(
      _classRef,
      "putRating",
      "(Ljava/lang/String;Landroid/media/Rating;)Landroid/media/MediaMetadata\$Builder;");

  /// from: public android.media.MediaMetadata.Builder putRating(java.lang.String key, android.media.Rating value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Put a Rating into the metadata. Custom keys may be used, but
  /// if the METADATA_KEYs defined in this class are used they may only be
  /// one of the following:
  /// <ul>
  /// <li>\#METADATA_KEY_RATING</li>
  /// <li>\#METADATA_KEY_USER_RATING</li>
  /// </ul>
  ///@param key The key for referencing this value
  /// Value is android.media.MediaMetadata\#METADATA_KEY_USER_RATING, or android.media.MediaMetadata\#METADATA_KEY_RATING
  ///@param value The Rating value to store
  ///@return The Builder to allow chaining
  MediaMetadata_Builder putRating(jni.JniString key, rating_.Rating value) =>
      MediaMetadata_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_putRating,
          jni.JniType.objectType,
          [key.reference, value.reference]).object);

  static final _id_putBitmap = jniAccessors.getMethodIDOf(
      _classRef,
      "putBitmap",
      "(Ljava/lang/String;Landroid/graphics/Bitmap;)Landroid/media/MediaMetadata\$Builder;");

  /// from: public android.media.MediaMetadata.Builder putBitmap(java.lang.String key, android.graphics.Bitmap value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Put a Bitmap into the metadata. Custom keys may be used, but
  /// if the METADATA_KEYs defined in this class are used they may only be
  /// one of the following:
  /// <ul>
  /// <li>\#METADATA_KEY_ART</li>
  /// <li>\#METADATA_KEY_ALBUM_ART</li>
  /// <li>\#METADATA_KEY_DISPLAY_ICON</li>
  /// </ul>
  ///
  /// Large bitmaps may be scaled down by the system when
  /// android.media.session.MediaSession\#setMetadata is called.
  /// To pass full resolution images Uri Uris should be used with
  /// \#putString.
  ///@param key The key for referencing this value
  /// Value is android.media.MediaMetadata\#METADATA_KEY_ART, android.media.MediaMetadata\#METADATA_KEY_ALBUM_ART, or android.media.MediaMetadata\#METADATA_KEY_DISPLAY_ICON
  ///@param value The Bitmap to store
  ///@return The Builder to allow chaining
  MediaMetadata_Builder putBitmap(jni.JniString key, bitmap_.Bitmap value) =>
      MediaMetadata_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_putBitmap,
          jni.JniType.objectType,
          [key.reference, value.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/media/MediaMetadata;");

  /// from: public android.media.MediaMetadata build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a MediaMetadata instance with the specified fields.
  ///@return The new MediaMetadata instance
  MediaMetadata build() =>
      MediaMetadata.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
