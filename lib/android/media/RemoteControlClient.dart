// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../app/PendingIntent.dart" as pendingintent_;

import "../os/Looper.dart" as looper_;

import "session/MediaSession.dart" as mediasession_;

import "MediaMetadataEditor.dart" as mediametadataeditor_;

import "../graphics/Bitmap.dart" as bitmap_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.RemoteControlClient
///
/// RemoteControlClient enables exposing information meant to be consumed by remote controls
/// capable of displaying metadata, artwork and media transport control buttons.
///
/// A remote control client object is associated with a media button event receiver. This
/// event receiver must have been previously registered with
/// AudioManager\#registerMediaButtonEventReceiver(ComponentName) before the
/// RemoteControlClient can be registered through
/// AudioManager\#registerRemoteControlClient(RemoteControlClient).
///
/// Here is an example of creating a RemoteControlClient instance after registering a media
/// button event receiver:
/// <pre>ComponentName myEventReceiver = new ComponentName(getPackageName(), MyRemoteControlEventReceiver.class.getName());
/// AudioManager myAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
/// myAudioManager.registerMediaButtonEventReceiver(myEventReceiver);
/// // build the PendingIntent for the remote control client
/// Intent mediaButtonIntent = new Intent(Intent.ACTION_MEDIA_BUTTON);
/// mediaButtonIntent.setComponent(myEventReceiver);
/// PendingIntent mediaPendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, mediaButtonIntent, 0);
/// // create and register the remote control client
/// RemoteControlClient myRemoteControlClient = new RemoteControlClient(mediaPendingIntent);
/// myAudioManager.registerRemoteControlClient(myRemoteControlClient);</pre>
///@deprecated Use MediaSession instead.
class RemoteControlClient extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/RemoteControlClient");
  RemoteControlClient.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int FLAG_KEY_MEDIA_FAST_FORWARD
  ///
  /// Flag indicating a RemoteControlClient makes use of the "fast forward" media key.
  ///@see \#setTransportControlFlags(int)
  ///@see android.view.KeyEvent\#KEYCODE_MEDIA_FAST_FORWARD
  static const FLAG_KEY_MEDIA_FAST_FORWARD = 64;

  /// from: static public final int FLAG_KEY_MEDIA_NEXT
  ///
  /// Flag indicating a RemoteControlClient makes use of the "next" media key.
  ///@see \#setTransportControlFlags(int)
  ///@see android.view.KeyEvent\#KEYCODE_MEDIA_NEXT
  static const FLAG_KEY_MEDIA_NEXT = 128;

  /// from: static public final int FLAG_KEY_MEDIA_PAUSE
  ///
  /// Flag indicating a RemoteControlClient makes use of the "pause" media key.
  ///@see \#setTransportControlFlags(int)
  ///@see android.view.KeyEvent\#KEYCODE_MEDIA_PAUSE
  static const FLAG_KEY_MEDIA_PAUSE = 16;

  /// from: static public final int FLAG_KEY_MEDIA_PLAY
  ///
  /// Flag indicating a RemoteControlClient makes use of the "play" media key.
  ///@see \#setTransportControlFlags(int)
  ///@see android.view.KeyEvent\#KEYCODE_MEDIA_PLAY
  static const FLAG_KEY_MEDIA_PLAY = 4;

  /// from: static public final int FLAG_KEY_MEDIA_PLAY_PAUSE
  ///
  /// Flag indicating a RemoteControlClient makes use of the "play/pause" media key.
  ///@see \#setTransportControlFlags(int)
  ///@see android.view.KeyEvent\#KEYCODE_MEDIA_PLAY_PAUSE
  static const FLAG_KEY_MEDIA_PLAY_PAUSE = 8;

  /// from: static public final int FLAG_KEY_MEDIA_POSITION_UPDATE
  ///
  /// Flag indicating a RemoteControlClient can receive changes in the media playback position
  /// through the OnPlaybackPositionUpdateListener interface. This flag must be set
  /// in order for components that display the RemoteControlClient information, to display and
  /// let the user control media playback position.
  ///@see \#setTransportControlFlags(int)
  ///@see \#setOnGetPlaybackPositionListener(OnGetPlaybackPositionListener)
  ///@see \#setPlaybackPositionUpdateListener(OnPlaybackPositionUpdateListener)
  static const FLAG_KEY_MEDIA_POSITION_UPDATE = 256;

  /// from: static public final int FLAG_KEY_MEDIA_PREVIOUS
  ///
  /// Flag indicating a RemoteControlClient makes use of the "previous" media key.
  ///@see \#setTransportControlFlags(int)
  ///@see android.view.KeyEvent\#KEYCODE_MEDIA_PREVIOUS
  static const FLAG_KEY_MEDIA_PREVIOUS = 1;

  /// from: static public final int FLAG_KEY_MEDIA_RATING
  ///
  /// Flag indicating a RemoteControlClient supports ratings.
  /// This flag must be set in order for components that display the RemoteControlClient
  /// information, to display ratings information, and, if ratings are declared editable
  /// (by calling MediaMetadataEditor\#addEditableKey(int) with the
  /// MediaMetadataEditor\#RATING_KEY_BY_USER key), it will enable the user to rate
  /// the media, with values being received through the interface set with
  /// \#setMetadataUpdateListener(OnMetadataUpdateListener).
  ///@see \#setTransportControlFlags(int)
  static const FLAG_KEY_MEDIA_RATING = 512;

  /// from: static public final int FLAG_KEY_MEDIA_REWIND
  ///
  /// Flag indicating a RemoteControlClient makes use of the "rewind" media key.
  ///@see \#setTransportControlFlags(int)
  ///@see android.view.KeyEvent\#KEYCODE_MEDIA_REWIND
  static const FLAG_KEY_MEDIA_REWIND = 2;

  /// from: static public final int FLAG_KEY_MEDIA_STOP
  ///
  /// Flag indicating a RemoteControlClient makes use of the "stop" media key.
  ///@see \#setTransportControlFlags(int)
  ///@see android.view.KeyEvent\#KEYCODE_MEDIA_STOP
  static const FLAG_KEY_MEDIA_STOP = 32;

  /// from: static public final int PLAYSTATE_BUFFERING
  ///
  /// Playback state of a RemoteControlClient which is buffering data to play before it can
  ///    start or resume playback.
  ///@see \#setPlaybackState(int)
  static const PLAYSTATE_BUFFERING = 8;

  /// from: static public final int PLAYSTATE_ERROR
  ///
  /// Playback state of a RemoteControlClient which cannot perform any playback related
  ///    operation because of an internal error. Examples of such situations are no network
  ///    connectivity when attempting to stream data from a server, or expired user credentials
  ///    when trying to play subscription-based content.
  ///@see \#setPlaybackState(int)
  static const PLAYSTATE_ERROR = 9;

  /// from: static public final int PLAYSTATE_FAST_FORWARDING
  ///
  /// Playback state of a RemoteControlClient which is fast forwarding in the media
  ///    it is currently playing.
  ///@see \#setPlaybackState(int)
  static const PLAYSTATE_FAST_FORWARDING = 4;

  /// from: static public final int PLAYSTATE_PAUSED
  ///
  /// Playback state of a RemoteControlClient which is paused.
  ///@see \#setPlaybackState(int)
  static const PLAYSTATE_PAUSED = 2;

  /// from: static public final int PLAYSTATE_PLAYING
  ///
  /// Playback state of a RemoteControlClient which is playing media.
  ///@see \#setPlaybackState(int)
  static const PLAYSTATE_PLAYING = 3;

  /// from: static public final int PLAYSTATE_REWINDING
  ///
  /// Playback state of a RemoteControlClient which is fast rewinding in the media
  ///    it is currently playing.
  ///@see \#setPlaybackState(int)
  static const PLAYSTATE_REWINDING = 5;

  /// from: static public final int PLAYSTATE_SKIPPING_BACKWARDS
  ///
  /// Playback state of a RemoteControlClient which is skipping back to the previous
  ///    logical chapter (such as a song in a playlist) in the media it is currently playing.
  ///@see \#setPlaybackState(int)
  static const PLAYSTATE_SKIPPING_BACKWARDS = 7;

  /// from: static public final int PLAYSTATE_SKIPPING_FORWARDS
  ///
  /// Playback state of a RemoteControlClient which is skipping to the next
  ///    logical chapter (such as a song in a playlist) in the media it is currently playing.
  ///@see \#setPlaybackState(int)
  static const PLAYSTATE_SKIPPING_FORWARDS = 6;

  /// from: static public final int PLAYSTATE_STOPPED
  ///
  /// Playback state of a RemoteControlClient which is stopped.
  ///@see \#setPlaybackState(int)
  static const PLAYSTATE_STOPPED = 1;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/app/PendingIntent;)V");

  /// from: public void <init>(android.app.PendingIntent mediaButtonIntent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor.
  ///@param mediaButtonIntent The intent that will be sent for the media button events sent
  ///     by remote controls.
  ///     This intent needs to have been constructed with the Intent\#ACTION_MEDIA_BUTTON
  ///     action, and have a component that will handle the intent (set with
  ///     Intent\#setComponent(ComponentName)) registered with
  ///     AudioManager\#registerMediaButtonEventReceiver(ComponentName)
  ///     before this new RemoteControlClient can itself be registered with
  ///     AudioManager\#registerRemoteControlClient(RemoteControlClient).
  ///@see AudioManager\#registerMediaButtonEventReceiver(ComponentName)
  ///@see AudioManager\#registerRemoteControlClient(RemoteControlClient)
  RemoteControlClient(pendingintent_.PendingIntent mediaButtonIntent)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [mediaButtonIntent.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/app/PendingIntent;Landroid/os/Looper;)V");

  /// from: public void <init>(android.app.PendingIntent mediaButtonIntent, android.os.Looper looper)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for a remote control client whose internal event handling
  /// happens on a user-provided Looper.
  ///@param mediaButtonIntent The intent that will be sent for the media button events sent
  ///     by remote controls.
  ///     This intent needs to have been constructed with the Intent\#ACTION_MEDIA_BUTTON
  ///     action, and have a component that will handle the intent (set with
  ///     Intent\#setComponent(ComponentName)) registered with
  ///     AudioManager\#registerMediaButtonEventReceiver(ComponentName)
  ///     before this new RemoteControlClient can itself be registered with
  ///     AudioManager\#registerRemoteControlClient(RemoteControlClient).
  ///@param looper The Looper running the event loop.
  ///@see AudioManager\#registerMediaButtonEventReceiver(ComponentName)
  ///@see AudioManager\#registerRemoteControlClient(RemoteControlClient)
  RemoteControlClient.ctor1(
      pendingintent_.PendingIntent mediaButtonIntent, looper_.Looper looper)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [mediaButtonIntent.reference, looper.reference]).object);

  static final _id_getMediaSession = jniAccessors.getMethodIDOf(
      _classRef, "getMediaSession", "()Landroid/media/session/MediaSession;");

  /// from: public android.media.session.MediaSession getMediaSession()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a MediaSession associated with this RCC. It will only have a
  /// session while it is registered with
  /// AudioManager\#registerRemoteControlClient. The session returned
  /// should not be modified directly by the application but may be used with
  /// other APIs that require a session.
  ///@return A media session object or null.
  mediasession_.MediaSession getMediaSession() =>
      mediasession_.MediaSession.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMediaSession, jni.JniType.objectType, []).object);

  static final _id_editMetadata = jniAccessors.getMethodIDOf(_classRef,
      "editMetadata", "(Z)Landroid/media/RemoteControlClient\$MetadataEditor;");

  /// from: public android.media.RemoteControlClient.MetadataEditor editMetadata(boolean startEmpty)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a MetadataEditor.
  ///@param startEmpty Set to false if you want the MetadataEditor to contain the metadata that
  ///     was previously applied to the RemoteControlClient, or true if it is to be created empty.
  ///@return a new MetadataEditor instance.
  RemoteControlClient_MetadataEditor editMetadata(bool startEmpty) =>
      RemoteControlClient_MetadataEditor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_editMetadata,
              jni.JniType.objectType, [startEmpty]).object);

  static final _id_setPlaybackState =
      jniAccessors.getMethodIDOf(_classRef, "setPlaybackState", "(I)V");

  /// from: public void setPlaybackState(int state)
  ///
  /// Sets the current playback state.
  ///@param state The current playback state, one of the following values:
  ///       \#PLAYSTATE_STOPPED,
  ///       \#PLAYSTATE_PAUSED,
  ///       \#PLAYSTATE_PLAYING,
  ///       \#PLAYSTATE_FAST_FORWARDING,
  ///       \#PLAYSTATE_REWINDING,
  ///       \#PLAYSTATE_SKIPPING_FORWARDS,
  ///       \#PLAYSTATE_SKIPPING_BACKWARDS,
  ///       \#PLAYSTATE_BUFFERING,
  ///       \#PLAYSTATE_ERROR.
  void setPlaybackState(int state) => jniAccessors.callMethodWithArgs(
      reference, _id_setPlaybackState, jni.JniType.voidType, [state]).check();

  static final _id_setPlaybackState1 =
      jniAccessors.getMethodIDOf(_classRef, "setPlaybackState", "(IJF)V");

  /// from: public void setPlaybackState(int state, long timeInMs, float playbackSpeed)
  ///
  /// Sets the current playback state and the matching media position for the current playback
  ///   speed.
  ///@param state The current playback state, one of the following values:
  ///       \#PLAYSTATE_STOPPED,
  ///       \#PLAYSTATE_PAUSED,
  ///       \#PLAYSTATE_PLAYING,
  ///       \#PLAYSTATE_FAST_FORWARDING,
  ///       \#PLAYSTATE_REWINDING,
  ///       \#PLAYSTATE_SKIPPING_FORWARDS,
  ///       \#PLAYSTATE_SKIPPING_BACKWARDS,
  ///       \#PLAYSTATE_BUFFERING,
  ///       \#PLAYSTATE_ERROR.
  ///@param timeInMs a 0 or positive value for the current media position expressed in ms
  ///    (same unit as for when sending the media duration, if applicable, with
  ///    android.media.MediaMetadataRetriever\#METADATA_KEY_DURATION in the
  ///    RemoteControlClient.MetadataEditor). Negative values imply that position is not
  ///    known (e.g. listening to a live stream of a radio) or not applicable (e.g. when state
  ///    is \#PLAYSTATE_BUFFERING and nothing had played yet).
  ///@param playbackSpeed a value expressed as a ratio of 1x playback: 1.0f is normal playback,
  ///    2.0f is 2x, 0.5f is half-speed, -2.0f is rewind at 2x speed. 0.0f means nothing is
  ///    playing (e.g. when state is \#PLAYSTATE_ERROR).
  void setPlaybackState1(int state, int timeInMs, double playbackSpeed) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPlaybackState1,
          jni.JniType.voidType, [state, timeInMs, playbackSpeed]).check();

  static final _id_setTransportControlFlags =
      jniAccessors.getMethodIDOf(_classRef, "setTransportControlFlags", "(I)V");

  /// from: public void setTransportControlFlags(int transportControlFlags)
  ///
  /// Sets the flags for the media transport control buttons that this client supports.
  ///@param transportControlFlags A combination of the following flags:
  ///      \#FLAG_KEY_MEDIA_PREVIOUS,
  ///      \#FLAG_KEY_MEDIA_REWIND,
  ///      \#FLAG_KEY_MEDIA_PLAY,
  ///      \#FLAG_KEY_MEDIA_PLAY_PAUSE,
  ///      \#FLAG_KEY_MEDIA_PAUSE,
  ///      \#FLAG_KEY_MEDIA_STOP,
  ///      \#FLAG_KEY_MEDIA_FAST_FORWARD,
  ///      \#FLAG_KEY_MEDIA_NEXT,
  ///      \#FLAG_KEY_MEDIA_POSITION_UPDATE,
  ///      \#FLAG_KEY_MEDIA_RATING.
  void setTransportControlFlags(int transportControlFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_setTransportControlFlags,
          jni.JniType.voidType, [transportControlFlags]).check();

  static final _id_setMetadataUpdateListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setMetadataUpdateListener",
      "(Landroid/media/RemoteControlClient\$OnMetadataUpdateListener;)V");

  /// from: public void setMetadataUpdateListener(android.media.RemoteControlClient.OnMetadataUpdateListener l)
  ///
  /// Sets the listener to be called whenever the metadata is updated.
  /// New metadata values will be received in the same thread as the one in which
  /// RemoteControlClient was created.
  ///@param l the metadata update listener
  void setMetadataUpdateListener(
          RemoteControlClient_OnMetadataUpdateListener l) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMetadataUpdateListener,
          jni.JniType.voidType, [l.reference]).check();

  static final _id_setPlaybackPositionUpdateListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setPlaybackPositionUpdateListener",
      "(Landroid/media/RemoteControlClient\$OnPlaybackPositionUpdateListener;)V");

  /// from: public void setPlaybackPositionUpdateListener(android.media.RemoteControlClient.OnPlaybackPositionUpdateListener l)
  ///
  /// Sets the listener to be called whenever the media playback position is requested
  /// to be updated.
  /// Notifications will be received in the same thread as the one in which RemoteControlClient
  /// was created.
  ///@param l the position update listener to be called
  void setPlaybackPositionUpdateListener(
          RemoteControlClient_OnPlaybackPositionUpdateListener l) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setPlaybackPositionUpdateListener,
          jni.JniType.voidType,
          [l.reference]).check();

  static final _id_setOnGetPlaybackPositionListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnGetPlaybackPositionListener",
      "(Landroid/media/RemoteControlClient\$OnGetPlaybackPositionListener;)V");

  /// from: public void setOnGetPlaybackPositionListener(android.media.RemoteControlClient.OnGetPlaybackPositionListener l)
  ///
  /// Sets the listener to be called whenever the media current playback position is needed.
  /// Queries will be received in the same thread as the one in which RemoteControlClient
  /// was created.
  ///@param l the listener to be called to retrieve the playback position
  void setOnGetPlaybackPositionListener(
          RemoteControlClient_OnGetPlaybackPositionListener l) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setOnGetPlaybackPositionListener,
          jni.JniType.voidType,
          [l.reference]).check();
}

/// from: android.media.RemoteControlClient$OnPlaybackPositionUpdateListener
///
/// Interface definition for a callback to be invoked when the media playback position is
/// requested to be updated.
///@see RemoteControlClient\#FLAG_KEY_MEDIA_POSITION_UPDATE
class RemoteControlClient_OnPlaybackPositionUpdateListener
    extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/media/RemoteControlClient\$OnPlaybackPositionUpdateListener");
  RemoteControlClient_OnPlaybackPositionUpdateListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onPlaybackPositionUpdate =
      jniAccessors.getMethodIDOf(_classRef, "onPlaybackPositionUpdate", "(J)V");

  /// from: public abstract void onPlaybackPositionUpdate(long newPositionMs)
  ///
  /// Called on the implementer to notify it that the playback head should be set at the given
  /// position. If the position can be changed from its current value, the implementor of
  /// the interface must also update the playback position using
  /// \#setPlaybackState(int, long, float) to reflect the actual new
  /// position being used, regardless of whether it differs from the requested position.
  /// Failure to do so would cause the system to not know the new actual playback position,
  /// and user interface components would fail to show the user where playback resumed after
  /// the position was updated.
  ///@param newPositionMs the new requested position in the current media, expressed in ms.
  void onPlaybackPositionUpdate(int newPositionMs) =>
      jniAccessors.callMethodWithArgs(reference, _id_onPlaybackPositionUpdate,
          jni.JniType.voidType, [newPositionMs]).check();
}

/// from: android.media.RemoteControlClient$OnMetadataUpdateListener
///
/// Interface definition for a callback to be invoked when one of the metadata values has
/// been updated.
/// Implement this interface to receive metadata updates after registering your listener
/// through RemoteControlClient\#setMetadataUpdateListener(OnMetadataUpdateListener).
class RemoteControlClient_OnMetadataUpdateListener extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/media/RemoteControlClient\$OnMetadataUpdateListener");
  RemoteControlClient_OnMetadataUpdateListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onMetadataUpdate = jniAccessors.getMethodIDOf(
      _classRef, "onMetadataUpdate", "(ILjava/lang/Object;)V");

  /// from: public abstract void onMetadataUpdate(int key, java.lang.Object newValue)
  ///
  /// Called on the implementer to notify that the metadata field for the given key has
  /// been updated to the new value.
  ///@param key the identifier of the updated metadata field.
  ///@param newValue the Object storing the new value for the key.
  void onMetadataUpdate(int key, jni.JniObject newValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_onMetadataUpdate,
          jni.JniType.voidType, [key, newValue.reference]).check();
}

/// from: android.media.RemoteControlClient$OnGetPlaybackPositionListener
///
/// Interface definition for a callback to be invoked when the media playback position is
/// queried.
///@see RemoteControlClient\#FLAG_KEY_MEDIA_POSITION_UPDATE
class RemoteControlClient_OnGetPlaybackPositionListener extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/media/RemoteControlClient\$OnGetPlaybackPositionListener");
  RemoteControlClient_OnGetPlaybackPositionListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onGetPlaybackPosition =
      jniAccessors.getMethodIDOf(_classRef, "onGetPlaybackPosition", "()J");

  /// from: public abstract long onGetPlaybackPosition()
  ///
  /// Called on the implementer of the interface to query the current playback position.
  ///@return a negative value if the current playback position (or the last valid playback
  ///     position) is not known, or a zero or positive value expressed in ms indicating the
  ///     current position, or the last valid known position.
  int onGetPlaybackPosition() => jniAccessors.callMethodWithArgs(
      reference, _id_onGetPlaybackPosition, jni.JniType.longType, []).long;
}

/// from: android.media.RemoteControlClient$MetadataEditor
///
/// Class used to modify metadata in a RemoteControlClient object.
/// Use RemoteControlClient\#editMetadata(boolean) to create an instance of an editor,
/// on which you set the metadata for the RemoteControlClient instance. Once all the information
/// has been set, use \#apply() to make it the new metadata that should be displayed
/// for the associated client. Once the metadata has been "applied", you cannot reuse this
/// instance of the MetadataEditor.
///@deprecated Use MediaMetadata and MediaSession instead.
class RemoteControlClient_MetadataEditor
    extends mediametadataeditor_.MediaMetadataEditor {
  static final _classRef = jniAccessors
      .getClassOf("android/media/RemoteControlClient\$MetadataEditor");
  RemoteControlClient_MetadataEditor.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  /// from: static public final int BITMAP_KEY_ARTWORK
  ///
  /// The metadata key for the content artwork / album art.
  static const BITMAP_KEY_ARTWORK1 = 100;

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, "clone", "()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  jni.JniObject clone() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_putString1 = jniAccessors.getMethodIDOf(
      _classRef,
      "putString",
      "(ILjava/lang/String;)Landroid/media/RemoteControlClient\$MetadataEditor;");

  /// from: synchronized public android.media.RemoteControlClient.MetadataEditor putString(int key, java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds textual information to be displayed.
  /// Note that none of the information added after \#apply() has been called,
  /// will be displayed.
  ///@param key The identifier of a the metadata field to set. Valid values are
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_ALBUM,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_ALBUMARTIST,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_TITLE,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_ARTIST,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_AUTHOR,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_COMPILATION,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_COMPOSER,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_DATE,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_GENRE,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_TITLE,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_WRITER.
  ///@param value The text for the given key, or {@code null} to signify there is no valid
  ///      information for the field.
  ///@return Returns a reference to the same MetadataEditor object, so you can chain put
  ///      calls together.
  RemoteControlClient_MetadataEditor putString1(int key, jni.JniString value) =>
      RemoteControlClient_MetadataEditor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_putString1, jni.JniType.objectType,
              [key, value.reference]).object);

  static final _id_putLong1 = jniAccessors.getMethodIDOf(_classRef, "putLong",
      "(IJ)Landroid/media/RemoteControlClient\$MetadataEditor;");

  /// from: synchronized public android.media.RemoteControlClient.MetadataEditor putLong(int key, long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds numerical information to be displayed.
  /// Note that none of the information added after \#apply() has been called,
  /// will be displayed.
  ///@param key the identifier of a the metadata field to set. Valid values are
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_CD_TRACK_NUMBER,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_DISC_NUMBER,
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_DURATION (with a value
  ///      expressed in milliseconds),
  ///      android.media.MediaMetadataRetriever\#METADATA_KEY_YEAR.
  ///@param value The long value for the given key
  ///@return Returns a reference to the same MetadataEditor object, so you can chain put
  ///      calls together.
  ///@throws IllegalArgumentException
  RemoteControlClient_MetadataEditor putLong1(int key, int value) =>
      RemoteControlClient_MetadataEditor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_putLong1, jni.JniType.objectType,
              [key, value]).object);

  static final _id_putBitmap1 = jniAccessors.getMethodIDOf(
      _classRef,
      "putBitmap",
      "(ILandroid/graphics/Bitmap;)Landroid/media/RemoteControlClient\$MetadataEditor;");

  /// from: synchronized public android.media.RemoteControlClient.MetadataEditor putBitmap(int key, android.graphics.Bitmap bitmap)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the album / artwork picture to be displayed on the remote control.
  ///@param key the identifier of the bitmap to set. The only valid value is
  ///      \#BITMAP_KEY_ARTWORK
  ///@param bitmap The bitmap for the artwork, or null if there isn't any.
  ///@return Returns a reference to the same MetadataEditor object, so you can chain put
  ///      calls together.
  ///@throws IllegalArgumentException
  ///@see android.graphics.Bitmap
  RemoteControlClient_MetadataEditor putBitmap1(
          int key, bitmap_.Bitmap bitmap) =>
      RemoteControlClient_MetadataEditor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_putBitmap1, jni.JniType.objectType,
              [key, bitmap.reference]).object);

  static final _id_putObject1 = jniAccessors.getMethodIDOf(
      _classRef,
      "putObject",
      "(ILjava/lang/Object;)Landroid/media/RemoteControlClient\$MetadataEditor;");

  /// from: synchronized public android.media.RemoteControlClient.MetadataEditor putObject(int key, java.lang.Object object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  RemoteControlClient_MetadataEditor putObject1(
          int key, jni.JniObject object) =>
      RemoteControlClient_MetadataEditor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_putObject1, jni.JniType.objectType,
              [key, object.reference]).object);

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, "clear", "()V");

  /// from: synchronized public void clear()
  ///
  /// Clears all the metadata that has been set since the MetadataEditor instance was created
  /// (with RemoteControlClient\#editMetadata(boolean)).
  /// Note that clearing the metadata doesn't reset the editable keys
  /// (use MediaMetadataEditor\#removeEditableKeys() instead).
  void clear() => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniType.voidType, []).check();

  static final _id_apply =
      jniAccessors.getMethodIDOf(_classRef, "apply", "()V");

  /// from: synchronized public void apply()
  ///
  /// Associates all the metadata that has been set since the MetadataEditor instance was
  ///     created with RemoteControlClient\#editMetadata(boolean), or since
  ///     \#clear() was called, with the RemoteControlClient. Once "applied",
  ///     this MetadataEditor cannot be reused to edit the RemoteControlClient's metadata.
  void apply() => jniAccessors.callMethodWithArgs(
      reference, _id_apply, jni.JniType.voidType, []).check();
}
