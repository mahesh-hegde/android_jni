// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../app/Activity.dart" as activity_;

import "../content/Context.dart" as context_;

import "../database/Cursor.dart" as cursor_;

import "Ringtone.dart" as ringtone_;

import "../net/Uri.dart" as uri_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.RingtoneManager
///
/// RingtoneManager provides access to ringtones, notification, and other types
/// of sounds. It manages querying the different media providers and combines the
/// results into a single cursor. It also provides a Ringtone for each
/// ringtone. We generically call these sounds ringtones, however the
/// \#TYPE_RINGTONE refers to the type of sounds that are suitable for the
/// phone ringer.
///
/// To show a ringtone picker to the user, use the
/// \#ACTION_RINGTONE_PICKER intent to launch the picker as a subactivity.
///@see Ringtone
class RingtoneManager extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/RingtoneManager");
  RingtoneManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_RINGTONE_PICKER
  ///
  /// Activity Action: Shows a ringtone picker.
  ///
  /// Input: \#EXTRA_RINGTONE_EXISTING_URI,
  /// \#EXTRA_RINGTONE_SHOW_DEFAULT,
  /// \#EXTRA_RINGTONE_SHOW_SILENT, \#EXTRA_RINGTONE_TYPE,
  /// \#EXTRA_RINGTONE_DEFAULT_URI, \#EXTRA_RINGTONE_TITLE,
  ///
  /// Output: \#EXTRA_RINGTONE_PICKED_URI.
  static const ACTION_RINGTONE_PICKER = "android.intent.action.RINGTONE_PICKER";

  /// from: static public final java.lang.String EXTRA_RINGTONE_DEFAULT_URI
  ///
  /// Given to the ringtone picker as a Uri. The Uri of the
  /// ringtone to play when the user attempts to preview the "Default"
  /// ringtone. This can be one of System\#DEFAULT_RINGTONE_URI,
  /// System\#DEFAULT_NOTIFICATION_URI, or
  /// System\#DEFAULT_ALARM_ALERT_URI to have the "Default" point to
  /// the current sound for the given default sound type. If you are showing a
  /// ringtone picker for some other type of sound, you are free to provide any
  /// Uri here.
  static const EXTRA_RINGTONE_DEFAULT_URI =
      "android.intent.extra.ringtone.DEFAULT_URI";

  /// from: static public final java.lang.String EXTRA_RINGTONE_EXISTING_URI
  ///
  /// Given to the ringtone picker as a Uri. The Uri of the
  /// current ringtone, which will be used to show a checkmark next to the item
  /// for this Uri. If showing an item for "Default" (@see
  /// \#EXTRA_RINGTONE_SHOW_DEFAULT), this can also be one of
  /// System\#DEFAULT_RINGTONE_URI,
  /// System\#DEFAULT_NOTIFICATION_URI, or
  /// System\#DEFAULT_ALARM_ALERT_URI to have the "Default" item
  /// checked.
  ///@see \#ACTION_RINGTONE_PICKER
  static const EXTRA_RINGTONE_EXISTING_URI =
      "android.intent.extra.ringtone.EXISTING_URI";

  /// from: static public final java.lang.String EXTRA_RINGTONE_INCLUDE_DRM
  ///
  /// Given to the ringtone picker as a boolean. Whether to include DRM ringtones.
  ///@deprecated DRM ringtones are no longer supported
  static const EXTRA_RINGTONE_INCLUDE_DRM =
      "android.intent.extra.ringtone.INCLUDE_DRM";

  /// from: static public final java.lang.String EXTRA_RINGTONE_PICKED_URI
  ///
  /// Returned from the ringtone picker as a Uri.
  ///
  /// It will be one of:
  /// <li> the picked ringtone,
  /// <li> a Uri that equals System\#DEFAULT_RINGTONE_URI,
  /// System\#DEFAULT_NOTIFICATION_URI, or
  /// System\#DEFAULT_ALARM_ALERT_URI if the default was chosen,
  /// <li> null if the "Silent" item was picked.
  ///@see \#ACTION_RINGTONE_PICKER
  static const EXTRA_RINGTONE_PICKED_URI =
      "android.intent.extra.ringtone.PICKED_URI";

  /// from: static public final java.lang.String EXTRA_RINGTONE_SHOW_DEFAULT
  ///
  /// Given to the ringtone picker as a boolean. Whether to show an item for
  /// "Default".
  ///@see \#ACTION_RINGTONE_PICKER
  static const EXTRA_RINGTONE_SHOW_DEFAULT =
      "android.intent.extra.ringtone.SHOW_DEFAULT";

  /// from: static public final java.lang.String EXTRA_RINGTONE_SHOW_SILENT
  ///
  /// Given to the ringtone picker as a boolean. Whether to show an item for
  /// "Silent". If the "Silent" item is picked,
  /// \#EXTRA_RINGTONE_PICKED_URI will be null.
  ///@see \#ACTION_RINGTONE_PICKER
  static const EXTRA_RINGTONE_SHOW_SILENT =
      "android.intent.extra.ringtone.SHOW_SILENT";

  /// from: static public final java.lang.String EXTRA_RINGTONE_TITLE
  ///
  /// Given to the ringtone picker as a CharSequence. The title to
  /// show for the ringtone picker. This has a default value that is suitable
  /// in most cases.
  static const EXTRA_RINGTONE_TITLE = "android.intent.extra.ringtone.TITLE";

  /// from: static public final java.lang.String EXTRA_RINGTONE_TYPE
  ///
  /// Given to the ringtone picker as an int. Specifies which ringtone type(s) should be
  /// shown in the picker. One or more of \#TYPE_RINGTONE,
  /// \#TYPE_NOTIFICATION, \#TYPE_ALARM, or \#TYPE_ALL
  /// (bitwise-ored together).
  static const EXTRA_RINGTONE_TYPE = "android.intent.extra.ringtone.TYPE";

  /// from: static public final int ID_COLUMN_INDEX
  ///
  /// The column index (in the cursor returned by \#getCursor() for the
  /// row ID.
  static const ID_COLUMN_INDEX = 0;

  /// from: static public final int TITLE_COLUMN_INDEX
  ///
  /// The column index (in the cursor returned by \#getCursor() for the
  /// title.
  static const TITLE_COLUMN_INDEX = 1;

  /// from: static public final int TYPE_ALARM
  ///
  /// Type that refers to sounds that are used for the alarm.
  static const TYPE_ALARM = 4;

  /// from: static public final int TYPE_ALL
  ///
  /// All types of sounds.
  static const TYPE_ALL = 7;

  /// from: static public final int TYPE_NOTIFICATION
  ///
  /// Type that refers to sounds that are used for notifications.
  static const TYPE_NOTIFICATION = 2;

  /// from: static public final int TYPE_RINGTONE
  ///
  /// Type that refers to sounds that are used for the phone ringer.
  static const TYPE_RINGTONE = 1;

  /// from: static public final int URI_COLUMN_INDEX
  ///
  /// The column index (in the cursor returned by \#getCursor() for the
  /// media provider's URI.
  static const URI_COLUMN_INDEX = 2;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/app/Activity;)V");

  /// from: public void <init>(android.app.Activity activity)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a RingtoneManager. This constructor is recommended as its
  /// constructed instance manages cursor(s).
  ///@param activity The activity used to get a managed cursor.
  RingtoneManager(activity_.Activity activity)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [activity.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a RingtoneManager. The instance constructed by this
  /// constructor will not manage the cursor(s), so the client should handle
  /// this itself.
  ///@param context The context to used to get a cursor.
  RingtoneManager.ctor1(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference]).object);

  static final _id_setType =
      jniAccessors.getMethodIDOf(_classRef, "setType", "(I)V");

  /// from: public void setType(int type)
  ///
  /// Sets which type(s) of ringtones will be listed by this.
  ///@param type The type(s), one or more of \#TYPE_RINGTONE,
  ///            \#TYPE_NOTIFICATION, \#TYPE_ALARM,
  ///            \#TYPE_ALL.
  ///@see \#EXTRA_RINGTONE_TYPE
  void setType(int type) => jniAccessors.callMethodWithArgs(
      reference, _id_setType, jni.JniType.voidType, [type]).check();

  static final _id_inferStreamType =
      jniAccessors.getMethodIDOf(_classRef, "inferStreamType", "()I");

  /// from: public int inferStreamType()
  ///
  /// Infers the volume stream type based on what type of ringtones this
  /// manager is returning.
  ///@return The stream type.
  int inferStreamType() => jniAccessors.callMethodWithArgs(
      reference, _id_inferStreamType, jni.JniType.intType, []).integer;

  static final _id_setStopPreviousRingtone =
      jniAccessors.getMethodIDOf(_classRef, "setStopPreviousRingtone", "(Z)V");

  /// from: public void setStopPreviousRingtone(boolean stopPreviousRingtone)
  ///
  /// Whether retrieving another Ringtone will stop playing the
  /// previously retrieved Ringtone.
  ///
  /// If this is false, make sure to Ringtone\#stop() any previous
  /// ringtones to free resources.
  ///@param stopPreviousRingtone If true, the previously retrieved
  ///            Ringtone will be stopped.
  void setStopPreviousRingtone(bool stopPreviousRingtone) =>
      jniAccessors.callMethodWithArgs(reference, _id_setStopPreviousRingtone,
          jni.JniType.voidType, [stopPreviousRingtone]).check();

  static final _id_getStopPreviousRingtone =
      jniAccessors.getMethodIDOf(_classRef, "getStopPreviousRingtone", "()Z");

  /// from: public boolean getStopPreviousRingtone()
  ///
  /// @see \#setStopPreviousRingtone(boolean)
  bool getStopPreviousRingtone() => jniAccessors.callMethodWithArgs(reference,
      _id_getStopPreviousRingtone, jni.JniType.booleanType, []).boolean;

  static final _id_stopPreviousRingtone =
      jniAccessors.getMethodIDOf(_classRef, "stopPreviousRingtone", "()V");

  /// from: public void stopPreviousRingtone()
  ///
  /// Stops playing the last Ringtone retrieved from this.
  void stopPreviousRingtone() => jniAccessors.callMethodWithArgs(
      reference, _id_stopPreviousRingtone, jni.JniType.voidType, []).check();

  static final _id_getIncludeDrm =
      jniAccessors.getMethodIDOf(_classRef, "getIncludeDrm", "()Z");

  /// from: public boolean getIncludeDrm()
  ///
  /// Returns whether DRM ringtones will be included.
  ///@return Whether DRM ringtones will be included.
  ///@see \#setIncludeDrm(boolean) Obsolete - always returns false
  ///@deprecated DRM ringtones are no longer supported
  bool getIncludeDrm() => jniAccessors.callMethodWithArgs(
      reference, _id_getIncludeDrm, jni.JniType.booleanType, []).boolean;

  static final _id_setIncludeDrm =
      jniAccessors.getMethodIDOf(_classRef, "setIncludeDrm", "(Z)V");

  /// from: public void setIncludeDrm(boolean includeDrm)
  ///
  /// Sets whether to include DRM ringtones.
  ///@param includeDrm Whether to include DRM ringtones.
  /// Obsolete - no longer has any effect
  ///@deprecated DRM ringtones are no longer supported
  void setIncludeDrm(bool includeDrm) => jniAccessors.callMethodWithArgs(
      reference, _id_setIncludeDrm, jni.JniType.voidType, [includeDrm]).check();

  static final _id_getCursor = jniAccessors.getMethodIDOf(
      _classRef, "getCursor", "()Landroid/database/Cursor;");

  /// from: public android.database.Cursor getCursor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Cursor of all the ringtones available. The returned
  /// cursor will be the same cursor returned each time this method is called,
  /// so do not Cursor\#close() the cursor. The cursor can be
  /// Cursor\#deactivate() safely.
  ///
  /// If RingtoneManager\#RingtoneManager(Activity) was not used, the
  /// caller should manage the returned cursor through its activity's life
  /// cycle to prevent leaking the cursor.
  ///
  /// Note that the list of ringtones available will differ depending on whether the caller
  /// has the android.Manifest.permission\#READ_EXTERNAL_STORAGE permission.
  ///@return A Cursor of all the ringtones available.
  ///@see \#ID_COLUMN_INDEX
  ///@see \#TITLE_COLUMN_INDEX
  ///@see \#URI_COLUMN_INDEX
  cursor_.Cursor getCursor() =>
      cursor_.Cursor.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCursor, jni.JniType.objectType, []).object);

  static final _id_getRingtone = jniAccessors.getMethodIDOf(
      _classRef, "getRingtone", "(I)Landroid/media/Ringtone;");

  /// from: public android.media.Ringtone getRingtone(int position)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a Ringtone for the ringtone at the given position in the
  /// Cursor.
  ///@param position The position (in the Cursor) of the ringtone.
  ///@return A Ringtone pointing to the ringtone.
  ringtone_.Ringtone getRingtone(int position) =>
      ringtone_.Ringtone.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getRingtone, jni.JniType.objectType, [position]).object);

  static final _id_getRingtoneUri = jniAccessors.getMethodIDOf(
      _classRef, "getRingtoneUri", "(I)Landroid/net/Uri;");

  /// from: public android.net.Uri getRingtoneUri(int position)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a Uri for the ringtone at the given position in the Cursor.
  ///@param position The position (in the Cursor) of the ringtone.
  ///@return A Uri pointing to the ringtone.
  uri_.Uri getRingtoneUri(int position) =>
      uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getRingtoneUri, jni.JniType.objectType, [position]).object);

  static final _id_getRingtonePosition = jniAccessors.getMethodIDOf(
      _classRef, "getRingtonePosition", "(Landroid/net/Uri;)I");

  /// from: public int getRingtonePosition(android.net.Uri ringtoneUri)
  ///
  /// Gets the position of a Uri within this RingtoneManager.
  ///@param ringtoneUri The Uri to retreive the position of.
  ///@return The position of the Uri, or -1 if it cannot be found.
  int getRingtonePosition(uri_.Uri ringtoneUri) =>
      jniAccessors.callMethodWithArgs(reference, _id_getRingtonePosition,
          jni.JniType.intType, [ringtoneUri.reference]).integer;

  static final _id_getValidRingtoneUri = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getValidRingtoneUri",
      "(Landroid/content/Context;)Landroid/net/Uri;");

  /// from: static public android.net.Uri getValidRingtoneUri(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a valid ringtone URI. No guarantees on which it returns. If it
  /// cannot find one, returns null. If it can only find one on external storage and the caller
  /// doesn't have the android.Manifest.permission\#READ_EXTERNAL_STORAGE permission,
  /// returns null.
  ///@param context The context to use for querying.
  ///@return A ringtone URI, or null if one cannot be found.
  static uri_.Uri getValidRingtoneUri(context_.Context context) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getValidRingtoneUri,
          jni.JniType.objectType,
          [context.reference]).object);

  static final _id_getRingtone1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getRingtone",
      "(Landroid/content/Context;Landroid/net/Uri;)Landroid/media/Ringtone;");

  /// from: static public android.media.Ringtone getRingtone(android.content.Context context, android.net.Uri ringtoneUri)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Ringtone for a given sound URI.
  ///
  /// If the given URI cannot be opened for any reason, this method will
  /// attempt to fallback on another sound. If it cannot find any, it will
  /// return null.
  ///@param context A context used to query.
  ///@param ringtoneUri The Uri of a sound or ringtone.
  ///@return A Ringtone for the given URI, or null.
  static ringtone_.Ringtone getRingtone1(
          context_.Context context, uri_.Uri ringtoneUri) =>
      ringtone_.Ringtone.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getRingtone1,
          jni.JniType.objectType,
          [context.reference, ringtoneUri.reference]).object);

  static final _id_getActualDefaultRingtoneUri =
      jniAccessors.getStaticMethodIDOf(_classRef, "getActualDefaultRingtoneUri",
          "(Landroid/content/Context;I)Landroid/net/Uri;");

  /// from: static public android.net.Uri getActualDefaultRingtoneUri(android.content.Context context, int type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the current default sound's Uri. This will give the actual
  /// sound Uri, instead of using this, most clients can use
  /// System\#DEFAULT_RINGTONE_URI.
  ///@param context A context used for querying.
  ///@param type The type whose default sound should be returned. One of
  ///            \#TYPE_RINGTONE, \#TYPE_NOTIFICATION, or
  ///            \#TYPE_ALARM.
  ///@return A Uri pointing to the default sound for the sound type.
  ///@see \#setActualDefaultRingtoneUri(Context, int, Uri)
  static uri_.Uri getActualDefaultRingtoneUri(
          context_.Context context, int type) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getActualDefaultRingtoneUri,
          jni.JniType.objectType,
          [context.reference, type]).object);

  static final _id_setActualDefaultRingtoneUri =
      jniAccessors.getStaticMethodIDOf(_classRef, "setActualDefaultRingtoneUri",
          "(Landroid/content/Context;ILandroid/net/Uri;)V");

  /// from: static public void setActualDefaultRingtoneUri(android.content.Context context, int type, android.net.Uri ringtoneUri)
  ///
  /// Sets the Uri of the default sound for a given sound type.
  ///@param context A context used for querying.
  ///@param type The type whose default sound should be set. One of
  ///            \#TYPE_RINGTONE, \#TYPE_NOTIFICATION, or
  ///            \#TYPE_ALARM.
  ///@param ringtoneUri A Uri pointing to the default sound to set.
  ///@see \#getActualDefaultRingtoneUri(Context, int)
  static void setActualDefaultRingtoneUri(
          context_.Context context, int type, uri_.Uri ringtoneUri) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_setActualDefaultRingtoneUri,
          jni.JniType.voidType,
          [context.reference, type, ringtoneUri.reference]).check();

  static final _id_isDefault = jniAccessors.getStaticMethodIDOf(
      _classRef, "isDefault", "(Landroid/net/Uri;)Z");

  /// from: static public boolean isDefault(android.net.Uri ringtoneUri)
  ///
  /// Returns whether the given Uri is one of the default ringtones.
  ///@param ringtoneUri The ringtone Uri to be checked.
  ///@return Whether the Uri is a default.
  static bool isDefault(uri_.Uri ringtoneUri) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isDefault,
          jni.JniType.booleanType, [ringtoneUri.reference]).boolean;

  static final _id_getDefaultType = jniAccessors.getStaticMethodIDOf(
      _classRef, "getDefaultType", "(Landroid/net/Uri;)I");

  /// from: static public int getDefaultType(android.net.Uri defaultRingtoneUri)
  ///
  /// Returns the type of a default Uri.
  ///@param defaultRingtoneUri The default Uri. For example,
  ///            System\#DEFAULT_RINGTONE_URI,
  ///            System\#DEFAULT_NOTIFICATION_URI, or
  ///            System\#DEFAULT_ALARM_ALERT_URI.
  ///@return The type of the defaultRingtoneUri, or -1.
  static int getDefaultType(uri_.Uri defaultRingtoneUri) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getDefaultType,
          jni.JniType.intType, [defaultRingtoneUri.reference]).integer;

  static final _id_getDefaultUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "getDefaultUri", "(I)Landroid/net/Uri;");

  /// from: static public android.net.Uri getDefaultUri(int type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Uri for the default ringtone of a particular type.
  /// Rather than returning the actual ringtone's sound Uri, this will
  /// return the symbolic Uri which will resolved to the actual sound
  /// when played.
  ///@param type The ringtone type whose default should be returned.
  ///@return The Uri of the default ringtone for the given type.
  static uri_.Uri getDefaultUri(int type) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getDefaultUri, jni.JniType.objectType, [type]).object);
}
