// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "../../os/Bundle.dart" as bundle_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.session.PlaybackState
///
/// Playback state for a MediaSession. This includes a state like
/// PlaybackState\#STATE_PLAYING, the current playback position,
/// and the current control capabilities.
class PlaybackState extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/session/PlaybackState");
  PlaybackState.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final long ACTION_FAST_FORWARD
  ///
  /// Indicates this session supports the fast forward command.
  ///@see Builder\#setActions(long)
  static const ACTION_FAST_FORWARD = 64;

  /// from: static public final long ACTION_PAUSE
  ///
  /// Indicates this session supports the pause command.
  ///@see Builder\#setActions(long)
  static const ACTION_PAUSE = 2;

  /// from: static public final long ACTION_PLAY
  ///
  /// Indicates this session supports the play command.
  ///@see Builder\#setActions(long)
  static const ACTION_PLAY = 4;

  /// from: static public final long ACTION_PLAY_FROM_MEDIA_ID
  ///
  /// Indicates this session supports the play from media id command.
  ///@see Builder\#setActions(long)
  static const ACTION_PLAY_FROM_MEDIA_ID = 1024;

  /// from: static public final long ACTION_PLAY_FROM_SEARCH
  ///
  /// Indicates this session supports the play from search command.
  ///@see Builder\#setActions(long)
  static const ACTION_PLAY_FROM_SEARCH = 2048;

  /// from: static public final long ACTION_PLAY_FROM_URI
  ///
  /// Indicates this session supports the play from URI command.
  ///@see Builder\#setActions(long)
  static const ACTION_PLAY_FROM_URI = 8192;

  /// from: static public final long ACTION_PLAY_PAUSE
  ///
  /// Indicates this session supports the play/pause toggle command.
  ///@see Builder\#setActions(long)
  static const ACTION_PLAY_PAUSE = 512;

  /// from: static public final long ACTION_PREPARE
  ///
  /// Indicates this session supports the prepare command.
  ///@see Builder\#setActions(long)
  static const ACTION_PREPARE = 16384;

  /// from: static public final long ACTION_PREPARE_FROM_MEDIA_ID
  ///
  /// Indicates this session supports the prepare from media id command.
  ///@see Builder\#setActions(long)
  static const ACTION_PREPARE_FROM_MEDIA_ID = 32768;

  /// from: static public final long ACTION_PREPARE_FROM_SEARCH
  ///
  /// Indicates this session supports the prepare from search command.
  ///@see Builder\#setActions(long)
  static const ACTION_PREPARE_FROM_SEARCH = 65536;

  /// from: static public final long ACTION_PREPARE_FROM_URI
  ///
  /// Indicates this session supports the prepare from URI command.
  ///@see Builder\#setActions(long)
  static const ACTION_PREPARE_FROM_URI = 131072;

  /// from: static public final long ACTION_REWIND
  ///
  /// Indicates this session supports the rewind command.
  ///@see Builder\#setActions(long)
  static const ACTION_REWIND = 8;

  /// from: static public final long ACTION_SEEK_TO
  ///
  /// Indicates this session supports the seek to command.
  ///@see Builder\#setActions(long)
  static const ACTION_SEEK_TO = 256;

  /// from: static public final long ACTION_SET_RATING
  ///
  /// Indicates this session supports the set rating command.
  ///@see Builder\#setActions(long)
  static const ACTION_SET_RATING = 128;

  /// from: static public final long ACTION_SKIP_TO_NEXT
  ///
  /// Indicates this session supports the next command.
  ///@see Builder\#setActions(long)
  static const ACTION_SKIP_TO_NEXT = 32;

  /// from: static public final long ACTION_SKIP_TO_PREVIOUS
  ///
  /// Indicates this session supports the previous command.
  ///@see Builder\#setActions(long)
  static const ACTION_SKIP_TO_PREVIOUS = 16;

  /// from: static public final long ACTION_SKIP_TO_QUEUE_ITEM
  ///
  /// Indicates this session supports the skip to queue item command.
  ///@see Builder\#setActions(long)
  static const ACTION_SKIP_TO_QUEUE_ITEM = 4096;

  /// from: static public final long ACTION_STOP
  ///
  /// Indicates this session supports the stop command.
  ///@see Builder\#setActions(long)
  static const ACTION_STOP = 1;

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.media.session.PlaybackState> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final long PLAYBACK_POSITION_UNKNOWN
  ///
  /// Use this value for the position to indicate the position is not known.
  static const PLAYBACK_POSITION_UNKNOWN = -1;

  /// from: static public final int STATE_BUFFERING
  ///
  /// State indicating this item is currently buffering and will begin playing
  /// when enough data has buffered.
  ///@see Builder\#setState
  static const STATE_BUFFERING = 6;

  /// from: static public final int STATE_CONNECTING
  ///
  /// State indicating the class doing playback is currently connecting to a
  /// new destination.  Depending on the implementation you may return to the previous
  /// state when the connection finishes or enter \#STATE_NONE.
  /// If the connection failed \#STATE_ERROR should be used.
  ///@see Builder\#setState
  static const STATE_CONNECTING = 8;

  /// from: static public final int STATE_ERROR
  ///
  /// State indicating this item is currently in an error state. The error
  /// message should also be set when entering this state.
  ///@see Builder\#setState
  static const STATE_ERROR = 7;

  /// from: static public final int STATE_FAST_FORWARDING
  ///
  /// State indicating this item is currently fast forwarding.
  ///@see Builder\#setState
  static const STATE_FAST_FORWARDING = 4;

  /// from: static public final int STATE_NONE
  ///
  /// This is the default playback state and indicates that no media has been
  /// added yet, or the performer has been reset and has no content to play.
  ///@see Builder\#setState(int, long, float)
  ///@see Builder\#setState(int, long, float, long)
  static const STATE_NONE = 0;

  /// from: static public final int STATE_PAUSED
  ///
  /// State indicating this item is currently paused.
  ///@see Builder\#setState
  static const STATE_PAUSED = 2;

  /// from: static public final int STATE_PLAYING
  ///
  /// State indicating this item is currently playing.
  ///@see Builder\#setState
  static const STATE_PLAYING = 3;

  /// from: static public final int STATE_REWINDING
  ///
  /// State indicating this item is currently rewinding.
  ///@see Builder\#setState
  static const STATE_REWINDING = 5;

  /// from: static public final int STATE_SKIPPING_TO_NEXT
  ///
  /// State indicating the player is currently skipping to the next item.
  ///@see Builder\#setState
  static const STATE_SKIPPING_TO_NEXT = 10;

  /// from: static public final int STATE_SKIPPING_TO_PREVIOUS
  ///
  /// State indicating the player is currently skipping to the previous item.
  ///@see Builder\#setState
  static const STATE_SKIPPING_TO_PREVIOUS = 9;

  /// from: static public final int STATE_SKIPPING_TO_QUEUE_ITEM
  ///
  /// State indicating the player is currently skipping to a specific item in
  /// the queue.
  ///@see Builder\#setState
  static const STATE_SKIPPING_TO_QUEUE_ITEM = 11;

  /// from: static public final int STATE_STOPPED
  ///
  /// State indicating this item is currently stopped.
  ///@see Builder\#setState
  static const STATE_STOPPED = 1;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_getState =
      jniAccessors.getMethodIDOf(_classRef, "getState", "()I");

  /// from: public int getState()
  ///
  /// Get the current state of playback. One of the following:
  /// <ul>
  /// <li> PlaybackState\#STATE_NONE</li>
  /// <li> PlaybackState\#STATE_STOPPED</li>
  /// <li> PlaybackState\#STATE_PLAYING</li>
  /// <li> PlaybackState\#STATE_PAUSED</li>
  /// <li> PlaybackState\#STATE_FAST_FORWARDING</li>
  /// <li> PlaybackState\#STATE_REWINDING</li>
  /// <li> PlaybackState\#STATE_BUFFERING</li>
  /// <li> PlaybackState\#STATE_ERROR</li>
  /// <li> PlaybackState\#STATE_CONNECTING</li>
  /// <li> PlaybackState\#STATE_SKIPPING_TO_PREVIOUS</li>
  /// <li> PlaybackState\#STATE_SKIPPING_TO_NEXT</li>
  /// <li> PlaybackState\#STATE_SKIPPING_TO_QUEUE_ITEM</li>
  /// </ul>
  ///@return Value is android.media.session.PlaybackState\#STATE_NONE, android.media.session.PlaybackState\#STATE_STOPPED, android.media.session.PlaybackState\#STATE_PAUSED, android.media.session.PlaybackState\#STATE_PLAYING, android.media.session.PlaybackState\#STATE_FAST_FORWARDING, android.media.session.PlaybackState\#STATE_REWINDING, android.media.session.PlaybackState\#STATE_BUFFERING, android.media.session.PlaybackState\#STATE_ERROR, android.media.session.PlaybackState\#STATE_CONNECTING, android.media.session.PlaybackState\#STATE_SKIPPING_TO_PREVIOUS, android.media.session.PlaybackState\#STATE_SKIPPING_TO_NEXT, or android.media.session.PlaybackState\#STATE_SKIPPING_TO_QUEUE_ITEM
  int getState() => jniAccessors.callMethodWithArgs(
      reference, _id_getState, jni.JniType.intType, []).integer;

  static final _id_getPosition =
      jniAccessors.getMethodIDOf(_classRef, "getPosition", "()J");

  /// from: public long getPosition()
  ///
  /// Get the current playback position in ms.
  int getPosition() => jniAccessors.callMethodWithArgs(
      reference, _id_getPosition, jni.JniType.longType, []).long;

  static final _id_getBufferedPosition =
      jniAccessors.getMethodIDOf(_classRef, "getBufferedPosition", "()J");

  /// from: public long getBufferedPosition()
  ///
  /// Get the current buffered position in ms. This is the farthest playback
  /// point that can be reached from the current position using only buffered
  /// content.
  int getBufferedPosition() => jniAccessors.callMethodWithArgs(
      reference, _id_getBufferedPosition, jni.JniType.longType, []).long;

  static final _id_getPlaybackSpeed =
      jniAccessors.getMethodIDOf(_classRef, "getPlaybackSpeed", "()F");

  /// from: public float getPlaybackSpeed()
  ///
  /// Get the current playback speed as a multiple of normal playback. This
  /// should be negative when rewinding. A value of 1 means normal playback and
  /// 0 means paused.
  ///@return The current speed of playback.
  double getPlaybackSpeed() => jniAccessors.callMethodWithArgs(
      reference, _id_getPlaybackSpeed, jni.JniType.floatType, []).float;

  static final _id_getActions =
      jniAccessors.getMethodIDOf(_classRef, "getActions", "()J");

  /// from: public long getActions()
  ///
  /// Get the current actions available on this session. This should use a
  /// bitmask of the available actions.
  /// <ul>
  /// <li> PlaybackState\#ACTION_SKIP_TO_PREVIOUS</li>
  /// <li> PlaybackState\#ACTION_REWIND</li>
  /// <li> PlaybackState\#ACTION_PLAY</li>
  /// <li> PlaybackState\#ACTION_PAUSE</li>
  /// <li> PlaybackState\#ACTION_STOP</li>
  /// <li> PlaybackState\#ACTION_FAST_FORWARD</li>
  /// <li> PlaybackState\#ACTION_SKIP_TO_NEXT</li>
  /// <li> PlaybackState\#ACTION_SEEK_TO</li>
  /// <li> PlaybackState\#ACTION_SET_RATING</li>
  /// <li> PlaybackState\#ACTION_PLAY_PAUSE</li>
  /// <li> PlaybackState\#ACTION_PLAY_FROM_MEDIA_ID</li>
  /// <li> PlaybackState\#ACTION_PLAY_FROM_SEARCH</li>
  /// <li> PlaybackState\#ACTION_SKIP_TO_QUEUE_ITEM</li>
  /// <li> PlaybackState\#ACTION_PLAY_FROM_URI</li>
  /// <li> PlaybackState\#ACTION_PREPARE</li>
  /// <li> PlaybackState\#ACTION_PREPARE_FROM_MEDIA_ID</li>
  /// <li> PlaybackState\#ACTION_PREPARE_FROM_SEARCH</li>
  /// <li> PlaybackState\#ACTION_PREPARE_FROM_URI</li>
  /// </ul>
  ///@return Value is either <code>0</code> or a combination of android.media.session.PlaybackState\#ACTION_STOP, android.media.session.PlaybackState\#ACTION_PAUSE, android.media.session.PlaybackState\#ACTION_PLAY, android.media.session.PlaybackState\#ACTION_REWIND, android.media.session.PlaybackState\#ACTION_SKIP_TO_PREVIOUS, android.media.session.PlaybackState\#ACTION_SKIP_TO_NEXT, android.media.session.PlaybackState\#ACTION_FAST_FORWARD, android.media.session.PlaybackState\#ACTION_SET_RATING, android.media.session.PlaybackState\#ACTION_SEEK_TO, android.media.session.PlaybackState\#ACTION_PLAY_PAUSE, android.media.session.PlaybackState\#ACTION_PLAY_FROM_MEDIA_ID, android.media.session.PlaybackState\#ACTION_PLAY_FROM_SEARCH, android.media.session.PlaybackState\#ACTION_SKIP_TO_QUEUE_ITEM, android.media.session.PlaybackState\#ACTION_PLAY_FROM_URI, android.media.session.PlaybackState\#ACTION_PREPARE, android.media.session.PlaybackState\#ACTION_PREPARE_FROM_MEDIA_ID, android.media.session.PlaybackState\#ACTION_PREPARE_FROM_SEARCH, and android.media.session.PlaybackState\#ACTION_PREPARE_FROM_URI
  int getActions() => jniAccessors.callMethodWithArgs(
      reference, _id_getActions, jni.JniType.longType, []).long;

  static final _id_getCustomActions = jniAccessors.getMethodIDOf(
      _classRef, "getCustomActions", "()Ljava/util/List;");

  /// from: public java.util.List<android.media.session.PlaybackState.CustomAction> getCustomActions()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the list of custom actions.
  jni.JniObject getCustomActions() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCustomActions, jni.JniType.objectType, []).object);

  static final _id_getErrorMessage = jniAccessors.getMethodIDOf(
      _classRef, "getErrorMessage", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getErrorMessage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a user readable error message. This should be set when the state is
  /// PlaybackState\#STATE_ERROR.
  jni.JniObject getErrorMessage() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getErrorMessage, jni.JniType.objectType, []).object);

  static final _id_getLastPositionUpdateTime =
      jniAccessors.getMethodIDOf(_classRef, "getLastPositionUpdateTime", "()J");

  /// from: public long getLastPositionUpdateTime()
  ///
  /// Get the elapsed real time at which position was last updated. If the
  /// position has never been set this will return 0;
  ///@return The last time the position was updated.
  int getLastPositionUpdateTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getLastPositionUpdateTime, jni.JniType.longType, []).long;

  static final _id_getActiveQueueItemId =
      jniAccessors.getMethodIDOf(_classRef, "getActiveQueueItemId", "()J");

  /// from: public long getActiveQueueItemId()
  ///
  /// Get the id of the currently active item in the queue. If there is no
  /// queue or a queue is not supported by the session this will be
  /// MediaSession.QueueItem\#UNKNOWN_ID.
  ///@return The id of the currently active item in the queue or
  ///         MediaSession.QueueItem\#UNKNOWN_ID.
  int getActiveQueueItemId() => jniAccessors.callMethodWithArgs(
      reference, _id_getActiveQueueItemId, jni.JniType.longType, []).long;

  static final _id_getExtras = jniAccessors.getMethodIDOf(
      _classRef, "getExtras", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get any custom extras that were set on this playback state.
  ///@return The extras for this state or null.
  bundle_.Bundle getExtras() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtras, jni.JniType.objectType, []).object);
}

/// from: android.media.session.PlaybackState$CustomAction
///
/// PlaybackState.CustomAction CustomActions can be used to extend the capabilities of
/// the standard transport controls by exposing app specific actions to
/// MediaController MediaControllers.
class PlaybackState_CustomAction extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/session/PlaybackState\$CustomAction");
  PlaybackState_CustomAction.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.media.session.PlaybackState.CustomAction> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_getAction = jniAccessors.getMethodIDOf(
      _classRef, "getAction", "()Ljava/lang/String;");

  /// from: public java.lang.String getAction()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the action of the CustomAction.
  ///@return The action of the CustomAction.
  jni.JniString getAction() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAction, jni.JniType.objectType, []).object);

  static final _id_getName = jniAccessors.getMethodIDOf(
      _classRef, "getName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name of this action. e.g. "Favorite"
  ///@return The display name of this CustomAction.
  jni.JniObject getName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_getIcon =
      jniAccessors.getMethodIDOf(_classRef, "getIcon", "()I");

  /// from: public int getIcon()
  ///
  /// Returns the resource id of the icon in the MediaSession MediaSession's package.
  ///@return The resource id of the icon in the MediaSession MediaSession's package.
  int getIcon() => jniAccessors.callMethodWithArgs(
      reference, _id_getIcon, jni.JniType.intType, []).integer;

  static final _id_getExtras = jniAccessors.getMethodIDOf(
      _classRef, "getExtras", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns extras which provide additional application-specific information about the
  /// action, or null if none. These arguments are meant to be consumed by a
  /// MediaController if it knows how to handle them.
  ///@return Optional arguments for the CustomAction.
  bundle_.Bundle getExtras() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtras, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.media.session.PlaybackState$CustomAction$Builder
///
/// Builder for CustomAction objects.
class PlaybackState_CustomAction_Builder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/session/PlaybackState\$CustomAction\$Builder");
  PlaybackState_CustomAction_Builder.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Ljava/lang/CharSequence;I)V");

  /// from: public void <init>(java.lang.String action, java.lang.CharSequence name, int icon)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a CustomAction builder with the id, name, and icon set.
  ///@param action The action of the CustomAction.
  ///@param name The display name of the CustomAction. This name will be displayed
  ///             along side the action if the UI supports it.
  ///@param icon The icon resource id of the CustomAction. This resource id
  ///             must be in the same package as the MediaSession. It will be
  ///             displayed with the custom action if the UI supports it.
  PlaybackState_CustomAction_Builder(
      jni.JniString action, jni.JniObject name, int icon)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [action.reference, name.reference, icon]).object);

  static final _id_setExtras = jniAccessors.getMethodIDOf(
      _classRef,
      "setExtras",
      "(Landroid/os/Bundle;)Landroid/media/session/PlaybackState\$CustomAction\$Builder;");

  /// from: public android.media.session.PlaybackState.CustomAction.Builder setExtras(android.os.Bundle extras)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set optional extras for the CustomAction. These extras are meant to be
  /// consumed by a MediaController if it knows how to handle them.
  /// Keys should be fully qualified (e.g. "com.example.MY_ARG") to avoid collisions.
  ///@param extras Optional extras for the CustomAction.
  ///@return this.
  PlaybackState_CustomAction_Builder setExtras(bundle_.Bundle extras) =>
      PlaybackState_CustomAction_Builder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setExtras, jni.JniType.objectType,
              [extras.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(_classRef, "build",
      "()Landroid/media/session/PlaybackState\$CustomAction;");

  /// from: public android.media.session.PlaybackState.CustomAction build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Build and return the CustomAction instance with the specified values.
  ///@return A new CustomAction instance.
  PlaybackState_CustomAction build() =>
      PlaybackState_CustomAction.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}

/// from: android.media.session.PlaybackState$Builder
///
/// Builder for PlaybackState objects.
class PlaybackState_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/session/PlaybackState\$Builder");
  PlaybackState_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an initially empty state builder.
  PlaybackState_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/media/session/PlaybackState;)V");

  /// from: public void <init>(android.media.session.PlaybackState from)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder with the same initial values as those in the from
  /// state.
  ///@param from The state to use for initializing the builder.
  PlaybackState_Builder.ctor1(PlaybackState from)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [from.reference]).object);

  static final _id_setState = jniAccessors.getMethodIDOf(_classRef, "setState",
      "(IJFJ)Landroid/media/session/PlaybackState\$Builder;");

  /// from: public android.media.session.PlaybackState.Builder setState(int state, long position, float playbackSpeed, long updateTime)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the current state of playback.
  ///
  /// The position must be in ms and indicates the current playback
  /// position within the item. If the position is unknown use
  /// \#PLAYBACK_POSITION_UNKNOWN. When not using an unknown
  /// position the time at which the position was updated must be provided.
  /// It is okay to use SystemClock\#elapsedRealtime() if the
  /// current position was just retrieved.
  ///
  /// The speed is a multiple of normal playback and should be 0 when
  /// paused and negative when rewinding. Normal playback speed is 1.0.
  ///
  /// The state must be one of the following:
  /// <ul>
  /// <li> PlaybackState\#STATE_NONE</li>
  /// <li> PlaybackState\#STATE_STOPPED</li>
  /// <li> PlaybackState\#STATE_PLAYING</li>
  /// <li> PlaybackState\#STATE_PAUSED</li>
  /// <li> PlaybackState\#STATE_FAST_FORWARDING</li>
  /// <li> PlaybackState\#STATE_REWINDING</li>
  /// <li> PlaybackState\#STATE_BUFFERING</li>
  /// <li> PlaybackState\#STATE_ERROR</li>
  /// <li> PlaybackState\#STATE_CONNECTING</li>
  /// <li> PlaybackState\#STATE_SKIPPING_TO_PREVIOUS</li>
  /// <li> PlaybackState\#STATE_SKIPPING_TO_NEXT</li>
  /// <li> PlaybackState\#STATE_SKIPPING_TO_QUEUE_ITEM</li>
  /// </ul>
  ///@param state The current state of playback.
  /// Value is android.media.session.PlaybackState\#STATE_NONE, android.media.session.PlaybackState\#STATE_STOPPED, android.media.session.PlaybackState\#STATE_PAUSED, android.media.session.PlaybackState\#STATE_PLAYING, android.media.session.PlaybackState\#STATE_FAST_FORWARDING, android.media.session.PlaybackState\#STATE_REWINDING, android.media.session.PlaybackState\#STATE_BUFFERING, android.media.session.PlaybackState\#STATE_ERROR, android.media.session.PlaybackState\#STATE_CONNECTING, android.media.session.PlaybackState\#STATE_SKIPPING_TO_PREVIOUS, android.media.session.PlaybackState\#STATE_SKIPPING_TO_NEXT, or android.media.session.PlaybackState\#STATE_SKIPPING_TO_QUEUE_ITEM
  ///@param position The position in the current item in ms.
  ///@param playbackSpeed The current speed of playback as a multiple of
  ///            normal playback.
  ///@param updateTime The time in the SystemClock\#elapsedRealtime
  ///            timebase that the position was updated at.
  ///@return this
  PlaybackState_Builder setState(
          int state, int position, double playbackSpeed, int updateTime) =>
      PlaybackState_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setState,
          jni.JniType.objectType,
          [state, position, playbackSpeed, updateTime]).object);

  static final _id_setState1 = jniAccessors.getMethodIDOf(_classRef, "setState",
      "(IJF)Landroid/media/session/PlaybackState\$Builder;");

  /// from: public android.media.session.PlaybackState.Builder setState(int state, long position, float playbackSpeed)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the current state of playback.
  ///
  /// The position must be in ms and indicates the current playback
  /// position within the item. If the position is unknown use
  /// \#PLAYBACK_POSITION_UNKNOWN. The update time will be set to
  /// the current SystemClock\#elapsedRealtime().
  ///
  /// The speed is a multiple of normal playback and should be 0 when
  /// paused and negative when rewinding. Normal playback speed is 1.0.
  ///
  /// The state must be one of the following:
  /// <ul>
  /// <li> PlaybackState\#STATE_NONE</li>
  /// <li> PlaybackState\#STATE_STOPPED</li>
  /// <li> PlaybackState\#STATE_PLAYING</li>
  /// <li> PlaybackState\#STATE_PAUSED</li>
  /// <li> PlaybackState\#STATE_FAST_FORWARDING</li>
  /// <li> PlaybackState\#STATE_REWINDING</li>
  /// <li> PlaybackState\#STATE_BUFFERING</li>
  /// <li> PlaybackState\#STATE_ERROR</li>
  /// <li> PlaybackState\#STATE_CONNECTING</li>
  /// <li> PlaybackState\#STATE_SKIPPING_TO_PREVIOUS</li>
  /// <li> PlaybackState\#STATE_SKIPPING_TO_NEXT</li>
  /// <li> PlaybackState\#STATE_SKIPPING_TO_QUEUE_ITEM</li>
  /// </ul>
  ///@param state The current state of playback.
  /// Value is android.media.session.PlaybackState\#STATE_NONE, android.media.session.PlaybackState\#STATE_STOPPED, android.media.session.PlaybackState\#STATE_PAUSED, android.media.session.PlaybackState\#STATE_PLAYING, android.media.session.PlaybackState\#STATE_FAST_FORWARDING, android.media.session.PlaybackState\#STATE_REWINDING, android.media.session.PlaybackState\#STATE_BUFFERING, android.media.session.PlaybackState\#STATE_ERROR, android.media.session.PlaybackState\#STATE_CONNECTING, android.media.session.PlaybackState\#STATE_SKIPPING_TO_PREVIOUS, android.media.session.PlaybackState\#STATE_SKIPPING_TO_NEXT, or android.media.session.PlaybackState\#STATE_SKIPPING_TO_QUEUE_ITEM
  ///@param position The position in the current item in ms.
  ///@param playbackSpeed The current speed of playback as a multiple of
  ///            normal playback.
  ///@return this
  PlaybackState_Builder setState1(
          int state, int position, double playbackSpeed) =>
      PlaybackState_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setState1,
          jni.JniType.objectType,
          [state, position, playbackSpeed]).object);

  static final _id_setActions = jniAccessors.getMethodIDOf(_classRef,
      "setActions", "(J)Landroid/media/session/PlaybackState\$Builder;");

  /// from: public android.media.session.PlaybackState.Builder setActions(long actions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the current actions available on this session. This should use a
  /// bitmask of possible actions.
  /// <ul>
  /// <li> PlaybackState\#ACTION_SKIP_TO_PREVIOUS</li>
  /// <li> PlaybackState\#ACTION_REWIND</li>
  /// <li> PlaybackState\#ACTION_PLAY</li>
  /// <li> PlaybackState\#ACTION_PAUSE</li>
  /// <li> PlaybackState\#ACTION_STOP</li>
  /// <li> PlaybackState\#ACTION_FAST_FORWARD</li>
  /// <li> PlaybackState\#ACTION_SKIP_TO_NEXT</li>
  /// <li> PlaybackState\#ACTION_SEEK_TO</li>
  /// <li> PlaybackState\#ACTION_SET_RATING</li>
  /// <li> PlaybackState\#ACTION_PLAY_PAUSE</li>
  /// <li> PlaybackState\#ACTION_PLAY_FROM_MEDIA_ID</li>
  /// <li> PlaybackState\#ACTION_PLAY_FROM_SEARCH</li>
  /// <li> PlaybackState\#ACTION_SKIP_TO_QUEUE_ITEM</li>
  /// <li> PlaybackState\#ACTION_PLAY_FROM_URI</li>
  /// <li> PlaybackState\#ACTION_PREPARE</li>
  /// <li> PlaybackState\#ACTION_PREPARE_FROM_MEDIA_ID</li>
  /// <li> PlaybackState\#ACTION_PREPARE_FROM_SEARCH</li>
  /// <li> PlaybackState\#ACTION_PREPARE_FROM_URI</li>
  /// </ul>
  ///@param actions The set of actions allowed.
  /// Value is either <code>0</code> or a combination of android.media.session.PlaybackState\#ACTION_STOP, android.media.session.PlaybackState\#ACTION_PAUSE, android.media.session.PlaybackState\#ACTION_PLAY, android.media.session.PlaybackState\#ACTION_REWIND, android.media.session.PlaybackState\#ACTION_SKIP_TO_PREVIOUS, android.media.session.PlaybackState\#ACTION_SKIP_TO_NEXT, android.media.session.PlaybackState\#ACTION_FAST_FORWARD, android.media.session.PlaybackState\#ACTION_SET_RATING, android.media.session.PlaybackState\#ACTION_SEEK_TO, android.media.session.PlaybackState\#ACTION_PLAY_PAUSE, android.media.session.PlaybackState\#ACTION_PLAY_FROM_MEDIA_ID, android.media.session.PlaybackState\#ACTION_PLAY_FROM_SEARCH, android.media.session.PlaybackState\#ACTION_SKIP_TO_QUEUE_ITEM, android.media.session.PlaybackState\#ACTION_PLAY_FROM_URI, android.media.session.PlaybackState\#ACTION_PREPARE, android.media.session.PlaybackState\#ACTION_PREPARE_FROM_MEDIA_ID, android.media.session.PlaybackState\#ACTION_PREPARE_FROM_SEARCH, and android.media.session.PlaybackState\#ACTION_PREPARE_FROM_URI
  ///@return this
  PlaybackState_Builder setActions(int actions) =>
      PlaybackState_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setActions, jni.JniType.objectType, [actions]).object);

  static final _id_addCustomAction = jniAccessors.getMethodIDOf(
      _classRef,
      "addCustomAction",
      "(Ljava/lang/String;Ljava/lang/String;I)Landroid/media/session/PlaybackState\$Builder;");

  /// from: public android.media.session.PlaybackState.Builder addCustomAction(java.lang.String action, java.lang.String name, int icon)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Add a custom action to the playback state. Actions can be used to
  /// expose additional functionality to MediaController MediaControllers beyond what is offered by the standard transport
  /// controls.
  ///
  /// e.g. start a radio station based on the current item or skip ahead by
  /// 30 seconds.
  ///@param action An identifier for this action. It can be sent back to
  ///            the MediaSession through
  ///            MediaController.TransportControls\#sendCustomAction(String, Bundle).
  ///@param name The display name for the action. If text is shown with
  ///            the action or used for accessibility, this is what should
  ///            be used.
  ///@param icon The resource action of the icon that should be displayed
  ///            for the action. The resource should be in the package of
  ///            the MediaSession.
  ///@return this
  PlaybackState_Builder addCustomAction(
          jni.JniString action, jni.JniString name, int icon) =>
      PlaybackState_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addCustomAction,
          jni.JniType.objectType,
          [action.reference, name.reference, icon]).object);

  static final _id_addCustomAction1 = jniAccessors.getMethodIDOf(
      _classRef,
      "addCustomAction",
      "(Landroid/media/session/PlaybackState\$CustomAction;)Landroid/media/session/PlaybackState\$Builder;");

  /// from: public android.media.session.PlaybackState.Builder addCustomAction(android.media.session.PlaybackState.CustomAction customAction)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Add a custom action to the playback state. Actions can be used to expose additional
  /// functionality to MediaController MediaControllers beyond what is offered by the
  /// standard transport controls.
  ///
  /// An example of an action would be to start a radio station based on the current item
  /// or to skip ahead by 30 seconds.
  ///@param customAction The custom action to add to the PlaybackState.
  ///@return this
  PlaybackState_Builder addCustomAction1(
          PlaybackState_CustomAction customAction) =>
      PlaybackState_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addCustomAction1,
          jni.JniType.objectType,
          [customAction.reference]).object);

  static final _id_setBufferedPosition = jniAccessors.getMethodIDOf(
      _classRef,
      "setBufferedPosition",
      "(J)Landroid/media/session/PlaybackState\$Builder;");

  /// from: public android.media.session.PlaybackState.Builder setBufferedPosition(long bufferedPosition)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the current buffered position in ms. This is the farthest
  /// playback point that can be reached from the current position using
  /// only buffered content.
  ///@param bufferedPosition The position in ms that playback is buffered
  ///            to.
  ///@return this
  PlaybackState_Builder setBufferedPosition(int bufferedPosition) =>
      PlaybackState_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setBufferedPosition,
          jni.JniType.objectType,
          [bufferedPosition]).object);

  static final _id_setActiveQueueItemId = jniAccessors.getMethodIDOf(
      _classRef,
      "setActiveQueueItemId",
      "(J)Landroid/media/session/PlaybackState\$Builder;");

  /// from: public android.media.session.PlaybackState.Builder setActiveQueueItemId(long id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the active item in the play queue by specifying its id. The
  /// default value is MediaSession.QueueItem\#UNKNOWN_ID
  ///@param id The id of the active item.
  ///@return this
  PlaybackState_Builder setActiveQueueItemId(int id) =>
      PlaybackState_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setActiveQueueItemId, jni.JniType.objectType, [id]).object);

  static final _id_setErrorMessage = jniAccessors.getMethodIDOf(
      _classRef,
      "setErrorMessage",
      "(Ljava/lang/CharSequence;)Landroid/media/session/PlaybackState\$Builder;");

  /// from: public android.media.session.PlaybackState.Builder setErrorMessage(java.lang.CharSequence error)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a user readable error message. This should be set when the state
  /// is PlaybackState\#STATE_ERROR.
  ///@param error The error message for display to the user.
  ///@return this
  PlaybackState_Builder setErrorMessage(jni.JniObject error) =>
      PlaybackState_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setErrorMessage,
          jni.JniType.objectType,
          [error.reference]).object);

  static final _id_setExtras = jniAccessors.getMethodIDOf(
      _classRef,
      "setExtras",
      "(Landroid/os/Bundle;)Landroid/media/session/PlaybackState\$Builder;");

  /// from: public android.media.session.PlaybackState.Builder setExtras(android.os.Bundle extras)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set any custom extras to be included with the playback state.
  ///@param extras The extras to include.
  ///@return this
  PlaybackState_Builder setExtras(bundle_.Bundle extras) =>
      PlaybackState_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setExtras, jni.JniType.objectType, [extras.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/media/session/PlaybackState;");

  /// from: public android.media.session.PlaybackState build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Build and return the PlaybackState instance with these
  /// values.
  ///@return A new state instance.
  PlaybackState build() =>
      PlaybackState.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
