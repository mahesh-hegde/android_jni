// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.MediaSyncEvent
///
/// The MediaSyncEvent class defines events that can be used to synchronize playback or capture
/// actions between different players and recorders.
/// For instance, AudioRecord\#startRecording(MediaSyncEvent) is used to start capture
/// only when the playback on a particular audio session is complete.
/// The audio session ID is retrieved from a player (e.g MediaPlayer, AudioTrack or
/// ToneGenerator) by use of the getAudioSessionId() method.
class MediaSyncEvent extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/MediaSyncEvent");
  MediaSyncEvent.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int SYNC_EVENT_NONE
  ///
  /// No sync event specified. When used with a synchronized playback or capture method, the
  /// behavior is equivalent to calling the corresponding non synchronized method.
  static const SYNC_EVENT_NONE = 0;

  /// from: static public final int SYNC_EVENT_PRESENTATION_COMPLETE
  ///
  /// The corresponding action is triggered only when the presentation is completed
  /// (meaning the media has been presented to the user) on the specified session.
  /// A synchronization of this type requires a source audio session ID to be set via
  /// \#setAudioSessionId(int) method.
  static const SYNC_EVENT_PRESENTATION_COMPLETE = 1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: void <init>(int eventType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MediaSyncEvent(int eventType)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [eventType]).object);

  static final _id_createEvent = jniAccessors.getStaticMethodIDOf(
      _classRef, "createEvent", "(I)Landroid/media/MediaSyncEvent;");

  /// from: static public android.media.MediaSyncEvent createEvent(int eventType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a synchronization event of the sepcified type.
  ///
  /// The type specifies which kind of event is monitored.
  /// For instance, event \#SYNC_EVENT_PRESENTATION_COMPLETE corresponds to the audio being
  /// presented to the user on a particular audio session.
  ///@param eventType the synchronization event type.
  ///@return the MediaSyncEvent created.
  ///@throws java.lang.IllegalArgumentException
  static MediaSyncEvent createEvent(int eventType) =>
      MediaSyncEvent.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_createEvent, jni.JniType.objectType, [eventType]).object);

  static final _id_setAudioSessionId = jniAccessors.getMethodIDOf(
      _classRef, "setAudioSessionId", "(I)Landroid/media/MediaSyncEvent;");

  /// from: public android.media.MediaSyncEvent setAudioSessionId(int audioSessionId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the event source audio session ID.
  ///
  /// The audio session ID specifies on which audio session the synchronization event should be
  /// monitored.
  /// It is mandatory for certain event types (e.g. \#SYNC_EVENT_PRESENTATION_COMPLETE).
  /// For instance, the audio session ID can be retrieved via
  /// MediaPlayer\#getAudioSessionId() when monitoring an event on a particular MediaPlayer.
  ///@param audioSessionId the audio session ID of the event source being monitored.
  ///@return the MediaSyncEvent the method is called on.
  ///@throws java.lang.IllegalArgumentException
  MediaSyncEvent setAudioSessionId(int audioSessionId) =>
      MediaSyncEvent.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAudioSessionId,
          jni.JniType.objectType,
          [audioSessionId]).object);

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public int getType()
  ///
  /// Gets the synchronization event type.
  ///@return the synchronization event type.
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_getAudioSessionId =
      jniAccessors.getMethodIDOf(_classRef, "getAudioSessionId", "()I");

  /// from: public int getAudioSessionId()
  ///
  /// Gets the synchronization event audio session ID.
  ///@return the synchronization audio session ID. The returned audio session ID is 0 if it has
  /// not been set.
  int getAudioSessionId() => jniAccessors.callMethodWithArgs(
      reference, _id_getAudioSessionId, jni.JniType.intType, []).integer;
}
