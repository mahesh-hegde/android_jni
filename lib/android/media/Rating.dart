// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.Rating
///
/// A class to encapsulate rating information used as content metadata.
/// A rating is defined by its rating style (see \#RATING_HEART,
/// \#RATING_THUMB_UP_DOWN, \#RATING_3_STARS, \#RATING_4_STARS,
/// \#RATING_5_STARS or \#RATING_PERCENTAGE) and the actual rating value (which may
/// be defined as "unrated"), both of which are defined when the rating instance is constructed
/// through one of the factory methods.
class Rating extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/media/Rating");
  Rating.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.media.Rating> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int RATING_3_STARS
  ///
  /// A rating style with 0 to 3 stars.
  static const RATING_3_STARS = 3;

  /// from: static public final int RATING_4_STARS
  ///
  /// A rating style with 0 to 4 stars.
  static const RATING_4_STARS = 4;

  /// from: static public final int RATING_5_STARS
  ///
  /// A rating style with 0 to 5 stars.
  static const RATING_5_STARS = 5;

  /// from: static public final int RATING_HEART
  ///
  /// A rating style with a single degree of rating, "heart" vs "no heart". Can be used to
  /// indicate the content referred to is a favorite (or not).
  static const RATING_HEART = 1;

  /// from: static public final int RATING_NONE
  ///
  /// Indicates a rating style is not supported. A Rating will never have this
  /// type, but can be used by other classes to indicate they do not support
  /// Rating.
  static const RATING_NONE = 0;

  /// from: static public final int RATING_PERCENTAGE
  ///
  /// A rating style expressed as a percentage.
  static const RATING_PERCENTAGE = 6;

  /// from: static public final int RATING_THUMB_UP_DOWN
  ///
  /// A rating style for "thumb up" vs "thumb down".
  static const RATING_THUMB_UP_DOWN = 2;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_newUnratedRating = jniAccessors.getStaticMethodIDOf(
      _classRef, "newUnratedRating", "(I)Landroid/media/Rating;");

  /// from: static public android.media.Rating newUnratedRating(int ratingStyle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a Rating instance with no rating.
  /// Create and return a new Rating instance with no rating known for the given
  /// rating style.
  ///@param ratingStyle one of \#RATING_HEART, \#RATING_THUMB_UP_DOWN,
  ///    \#RATING_3_STARS, \#RATING_4_STARS, \#RATING_5_STARS,
  ///    or \#RATING_PERCENTAGE.
  /// Value is android.media.Rating\#RATING_NONE, android.media.Rating\#RATING_HEART, android.media.Rating\#RATING_THUMB_UP_DOWN, android.media.Rating\#RATING_3_STARS, android.media.Rating\#RATING_4_STARS, android.media.Rating\#RATING_5_STARS, or android.media.Rating\#RATING_PERCENTAGE
  ///@return null if an invalid rating style is passed, a new Rating instance otherwise.
  static Rating newUnratedRating(int ratingStyle) =>
      Rating.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_newUnratedRating, jni.JniType.objectType, [ratingStyle]).object);

  static final _id_newHeartRating = jniAccessors.getStaticMethodIDOf(
      _classRef, "newHeartRating", "(Z)Landroid/media/Rating;");

  /// from: static public android.media.Rating newHeartRating(boolean hasHeart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a Rating instance with a heart-based rating.
  /// Create and return a new Rating instance with a rating style of \#RATING_HEART,
  /// and a heart-based rating.
  ///@param hasHeart true for a "heart selected" rating, false for "heart unselected".
  ///@return a new Rating instance.
  static Rating newHeartRating(bool hasHeart) =>
      Rating.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_newHeartRating, jni.JniType.objectType, [hasHeart]).object);

  static final _id_newThumbRating = jniAccessors.getStaticMethodIDOf(
      _classRef, "newThumbRating", "(Z)Landroid/media/Rating;");

  /// from: static public android.media.Rating newThumbRating(boolean thumbIsUp)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a Rating instance with a thumb-based rating.
  /// Create and return a new Rating instance with a \#RATING_THUMB_UP_DOWN
  /// rating style, and a "thumb up" or "thumb down" rating.
  ///@param thumbIsUp true for a "thumb up" rating, false for "thumb down".
  ///@return a new Rating instance.
  static Rating newThumbRating(bool thumbIsUp) =>
      Rating.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_newThumbRating, jni.JniType.objectType, [thumbIsUp]).object);

  static final _id_newStarRating = jniAccessors.getStaticMethodIDOf(
      _classRef, "newStarRating", "(IF)Landroid/media/Rating;");

  /// from: static public android.media.Rating newStarRating(int starRatingStyle, float starRating)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a Rating instance with a star-based rating.
  /// Create and return a new Rating instance with one of the star-base rating styles
  /// and the given integer or fractional number of stars. Non integer values can for instance
  /// be used to represent an average rating value, which might not be an integer number of stars.
  ///@param starRatingStyle one of \#RATING_3_STARS, \#RATING_4_STARS,
  ///     \#RATING_5_STARS.
  /// Value is android.media.Rating\#RATING_3_STARS, android.media.Rating\#RATING_4_STARS, or android.media.Rating\#RATING_5_STARS
  ///@param starRating a number ranging from 0.0f to 3.0f, 4.0f or 5.0f according to
  ///     the rating style.
  ///@return null if the rating style is invalid, or the rating is out of range,
  ///     a new Rating instance otherwise.
  static Rating newStarRating(int starRatingStyle, double starRating) =>
      Rating.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_newStarRating,
          jni.JniType.objectType,
          [starRatingStyle, starRating]).object);

  static final _id_newPercentageRating = jniAccessors.getStaticMethodIDOf(
      _classRef, "newPercentageRating", "(F)Landroid/media/Rating;");

  /// from: static public android.media.Rating newPercentageRating(float percent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a Rating instance with a percentage-based rating.
  /// Create and return a new Rating instance with a \#RATING_PERCENTAGE
  /// rating style, and a rating of the given percentage.
  ///@param percent the value of the rating
  ///@return null if the rating is out of range, a new Rating instance otherwise.
  static Rating newPercentageRating(double percent) =>
      Rating.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_newPercentageRating, jni.JniType.objectType, [percent]).object);

  static final _id_isRated =
      jniAccessors.getMethodIDOf(_classRef, "isRated", "()Z");

  /// from: public boolean isRated()
  ///
  /// Return whether there is a rating value available.
  ///@return true if the instance was not created with \#newUnratedRating(int).
  bool isRated() => jniAccessors.callMethodWithArgs(
      reference, _id_isRated, jni.JniType.booleanType, []).boolean;

  static final _id_getRatingStyle =
      jniAccessors.getMethodIDOf(_classRef, "getRatingStyle", "()I");

  /// from: public int getRatingStyle()
  ///
  /// Return the rating style.
  ///@return one of \#RATING_HEART, \#RATING_THUMB_UP_DOWN,
  ///    \#RATING_3_STARS, \#RATING_4_STARS, \#RATING_5_STARS,
  ///    or \#RATING_PERCENTAGE.
  ///
  /// Value is android.media.Rating\#RATING_NONE, android.media.Rating\#RATING_HEART, android.media.Rating\#RATING_THUMB_UP_DOWN, android.media.Rating\#RATING_3_STARS, android.media.Rating\#RATING_4_STARS, android.media.Rating\#RATING_5_STARS, or android.media.Rating\#RATING_PERCENTAGE
  int getRatingStyle() => jniAccessors.callMethodWithArgs(
      reference, _id_getRatingStyle, jni.JniType.intType, []).integer;

  static final _id_hasHeart =
      jniAccessors.getMethodIDOf(_classRef, "hasHeart", "()Z");

  /// from: public boolean hasHeart()
  ///
  /// Return whether the rating is "heart selected".
  ///@return true if the rating is "heart selected", false if the rating is "heart unselected",
  ///    if the rating style is not \#RATING_HEART or if it is unrated.
  bool hasHeart() => jniAccessors.callMethodWithArgs(
      reference, _id_hasHeart, jni.JniType.booleanType, []).boolean;

  static final _id_isThumbUp =
      jniAccessors.getMethodIDOf(_classRef, "isThumbUp", "()Z");

  /// from: public boolean isThumbUp()
  ///
  /// Return whether the rating is "thumb up".
  ///@return true if the rating is "thumb up", false if the rating is "thumb down",
  ///    if the rating style is not \#RATING_THUMB_UP_DOWN or if it is unrated.
  bool isThumbUp() => jniAccessors.callMethodWithArgs(
      reference, _id_isThumbUp, jni.JniType.booleanType, []).boolean;

  static final _id_getStarRating =
      jniAccessors.getMethodIDOf(_classRef, "getStarRating", "()F");

  /// from: public float getStarRating()
  ///
  /// Return the star-based rating value.
  ///@return a rating value greater or equal to 0.0f, or a negative value if the rating style is
  ///    not star-based, or if it is unrated.
  double getStarRating() => jniAccessors.callMethodWithArgs(
      reference, _id_getStarRating, jni.JniType.floatType, []).float;

  static final _id_getPercentRating =
      jniAccessors.getMethodIDOf(_classRef, "getPercentRating", "()F");

  /// from: public float getPercentRating()
  ///
  /// Return the percentage-based rating value.
  ///@return a rating value greater or equal to 0.0f, or a negative value if the rating style is
  ///    not percentage-based, or if it is unrated.
  double getPercentRating() => jniAccessors.callMethodWithArgs(
      reference, _id_getPercentRating, jni.JniType.floatType, []).float;
}
