// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../graphics/Bitmap.dart" as bitmap_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.ThumbnailUtils
///
/// Thumbnail generation routines for media provider.
class ThumbnailUtils extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/ThumbnailUtils");
  ThumbnailUtils.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int OPTIONS_RECYCLE_INPUT
  ///
  /// Constant used to indicate we should recycle the input in
  /// \#extractThumbnail(Bitmap, int, int, int) unless the output is the input.
  static const OPTIONS_RECYCLE_INPUT = 2;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ThumbnailUtils()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_createVideoThumbnail = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createVideoThumbnail",
      "(Ljava/lang/String;I)Landroid/graphics/Bitmap;");

  /// from: static public android.graphics.Bitmap createVideoThumbnail(java.lang.String filePath, int kind)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a video thumbnail for a video. May return null if the video is
  /// corrupt or the format is not supported.
  ///@param filePath the path of video file
  ///@param kind could be MINI_KIND or MICRO_KIND
  static bitmap_.Bitmap createVideoThumbnail(
          jni.JniString filePath, int kind) =>
      bitmap_.Bitmap.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createVideoThumbnail,
          jni.JniType.objectType,
          [filePath.reference, kind]).object);

  static final _id_extractThumbnail = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "extractThumbnail",
      "(Landroid/graphics/Bitmap;II)Landroid/graphics/Bitmap;");

  /// from: static public android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap source, int width, int height)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a centered bitmap of the desired size.
  ///@param source original bitmap source
  ///@param width targeted width
  ///@param height targeted height
  static bitmap_.Bitmap extractThumbnail(
          bitmap_.Bitmap source, int width, int height) =>
      bitmap_.Bitmap.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_extractThumbnail,
          jni.JniType.objectType,
          [source.reference, width, height]).object);

  static final _id_extractThumbnail1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "extractThumbnail",
      "(Landroid/graphics/Bitmap;III)Landroid/graphics/Bitmap;");

  /// from: static public android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap source, int width, int height, int options)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a centered bitmap of the desired size.
  ///@param source original bitmap source
  ///@param width targeted width
  ///@param height targeted height
  ///@param options options used during thumbnail extraction
  static bitmap_.Bitmap extractThumbnail1(
          bitmap_.Bitmap source, int width, int height, int options) =>
      bitmap_.Bitmap.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_extractThumbnail1,
          jni.JniType.objectType,
          [source.reference, width, height, options]).object);
}
