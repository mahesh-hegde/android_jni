// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.SyncParams
///
/// Structure for common A/V sync params.
///
/// Used by MediaSync {link MediaSync\#getSyncParams()} and
/// {link MediaSync\#setSyncParams(SyncParams)}
/// to control A/V sync behavior.
///  <strong>audio adjust mode:</strong>
/// select handling of audio track when changing playback speed due to sync.
/// <ul>
/// <li> SyncParams\#AUDIO_ADJUST_MODE_DEFAULT:
///   System will determine best handling. </li>
/// <li> SyncParams\#AUDIO_ADJUST_MODE_STRETCH:
///   Change the speed of audio playback without altering its pitch.</li>
/// <li> SyncParams\#AUDIO_ADJUST_MODE_RESAMPLE:
///   Change the speed of audio playback by resampling the audio.</li>
/// </ul>
///  <strong>sync source:</strong> select
/// clock source for sync.
/// <ul>
/// <li> SyncParams\#SYNC_SOURCE_DEFAULT:
///   System will determine best selection.</li>
/// <li> SyncParams\#SYNC_SOURCE_SYSTEM_CLOCK:
///   Use system clock for sync source.</li>
/// <li> SyncParams\#SYNC_SOURCE_AUDIO:
///   Use audio track for sync source.</li>
/// <li> SyncParams\#SYNC_SOURCE_VSYNC:
///   Syncronize media to vsync.</li>
/// </ul>
///  <strong>tolerance:</strong> specifies the amount of allowed playback rate
/// change to keep media in sync with the sync source. The handling of this depends
/// on the sync source, but must not be negative, and must be less than one.
///  <strong>frameRate:</strong> initial hint for video frame rate. Used when
/// sync source is vsync. Negative values can be used to clear a previous hint.
class SyncParams extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/media/SyncParams");
  SyncParams.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int AUDIO_ADJUST_MODE_DEFAULT
  ///
  /// System will determine best handling of audio for playback rate
  /// adjustments.
  ///
  /// Used by default. This will make audio play faster or slower as required
  /// by the sync source without changing its pitch; however, system may fall
  /// back to some other method (e.g. change the pitch, or mute the audio) if
  /// time stretching is no longer supported for the playback rate.
  static const AUDIO_ADJUST_MODE_DEFAULT = 0;

  /// from: static public final int AUDIO_ADJUST_MODE_RESAMPLE
  ///
  /// Resample audio when playback rate must be adjusted.
  ///
  /// This will make audio play faster or slower as required by the sync source
  /// by changing its pitch (making it lower to play slower, and higher to play
  /// faster.)
  ///@see MediaSync\#PLAYBACK_RATE_AUDIO_MODE_RESAMPLE
  ///@see MediaPlayer\#PLAYBACK_RATE_AUDIO_MODE_RESAMPLE
  static const AUDIO_ADJUST_MODE_RESAMPLE = 2;

  /// from: static public final int AUDIO_ADJUST_MODE_STRETCH
  ///
  /// Time stretch audio when playback rate must be adjusted.
  ///
  /// This will make audio play faster or slower as required by the sync source
  /// without changing its pitch, as long as it is supported for the playback
  /// rate.
  ///@see MediaSync\#PLAYBACK_RATE_AUDIO_MODE_STRETCH
  ///@see MediaPlayer\#PLAYBACK_RATE_AUDIO_MODE_STRETCH
  static const AUDIO_ADJUST_MODE_STRETCH = 1;

  /// from: static public final int SYNC_SOURCE_AUDIO
  ///
  /// Use audio track for sync source. This requires audio data and an audio track.
  ///@see AudioTrack\#getTimeStamp
  static const SYNC_SOURCE_AUDIO = 2;

  /// from: static public final int SYNC_SOURCE_DEFAULT
  ///
  /// Use the default sync source (default). If media has video, the sync renders to a
  /// surface that directly renders to a display, and tolerance is non zero (e.g. not
  /// less than 0.001) vsync source is used for clock source.  Otherwise, if media has
  /// audio, audio track is used. Finally, if media has no audio, system clock is used.
  static const SYNC_SOURCE_DEFAULT = 0;

  /// from: static public final int SYNC_SOURCE_SYSTEM_CLOCK
  ///
  /// Use system monotonic clock for sync source.
  ///@see System\#nanoTime
  static const SYNC_SOURCE_SYSTEM_CLOCK = 1;

  /// from: static public final int SYNC_SOURCE_VSYNC
  ///
  /// Use vsync as the sync source. This requires video data and an output surface that
  /// directly renders to the display, e.g. android.view.SurfaceView
  ///
  /// This mode allows smoother playback experience by adjusting the playback speed
  /// to match the vsync rate, e.g. playing 30fps content on a 59.94Hz display.
  /// When using this mode, the tolerance should be set to greater than 0 (e.g. at least
  /// 1/1000), so that the playback speed can actually be adjusted.
  ///
  /// This mode can also be used to play 25fps content on a 60Hz display using
  /// a 2:3 pulldown (basically playing the content at 24fps), which results on
  /// better playback experience on most devices. In this case the tolerance should be
  /// at least (1/24).
  ///@see android.view.Choreographer.FrameCallback\#doFrame
  ///@see android.view.Display\#getAppVsyncOffsetNanos
  static const SYNC_SOURCE_VSYNC = 3;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SyncParams()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_allowDefaults = jniAccessors.getMethodIDOf(
      _classRef, "allowDefaults", "()Landroid/media/SyncParams;");

  /// from: public android.media.SyncParams allowDefaults()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Allows defaults to be returned for properties not set.
  /// Otherwise a java.lang.IllegalArgumentException exception
  /// is raised when getting those properties
  /// which have defaults but have never been set.
  ///@return this <code>SyncParams</code> instance.
  SyncParams allowDefaults() =>
      SyncParams.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_allowDefaults, jni.JniType.objectType, []).object);

  static final _id_setAudioAdjustMode = jniAccessors.getMethodIDOf(
      _classRef, "setAudioAdjustMode", "(I)Landroid/media/SyncParams;");

  /// from: public android.media.SyncParams setAudioAdjustMode(int audioAdjustMode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the audio adjust mode.
  ///@param audioAdjustMode Value is android.media.SyncParams\#AUDIO_ADJUST_MODE_DEFAULT, android.media.SyncParams\#AUDIO_ADJUST_MODE_STRETCH, or android.media.SyncParams\#AUDIO_ADJUST_MODE_RESAMPLE
  ///@return this <code>SyncParams</code> instance.
  SyncParams setAudioAdjustMode(int audioAdjustMode) =>
      SyncParams.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAudioAdjustMode,
          jni.JniType.objectType,
          [audioAdjustMode]).object);

  static final _id_getAudioAdjustMode =
      jniAccessors.getMethodIDOf(_classRef, "getAudioAdjustMode", "()I");

  /// from: public int getAudioAdjustMode()
  ///
  /// Retrieves the audio adjust mode.
  ///@return audio adjust mode
  /// Value is android.media.SyncParams\#AUDIO_ADJUST_MODE_DEFAULT, android.media.SyncParams\#AUDIO_ADJUST_MODE_STRETCH, or android.media.SyncParams\#AUDIO_ADJUST_MODE_RESAMPLE
  ///@throws IllegalStateException if the audio adjust mode is not set.
  int getAudioAdjustMode() => jniAccessors.callMethodWithArgs(
      reference, _id_getAudioAdjustMode, jni.JniType.intType, []).integer;

  static final _id_setSyncSource = jniAccessors.getMethodIDOf(
      _classRef, "setSyncSource", "(I)Landroid/media/SyncParams;");

  /// from: public android.media.SyncParams setSyncSource(int syncSource)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the sync source.
  ///@param syncSource Value is android.media.SyncParams\#SYNC_SOURCE_DEFAULT, android.media.SyncParams\#SYNC_SOURCE_SYSTEM_CLOCK, android.media.SyncParams\#SYNC_SOURCE_AUDIO, or android.media.SyncParams\#SYNC_SOURCE_VSYNC
  ///@return this <code>SyncParams</code> instance.
  SyncParams setSyncSource(int syncSource) =>
      SyncParams.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setSyncSource, jni.JniType.objectType, [syncSource]).object);

  static final _id_getSyncSource =
      jniAccessors.getMethodIDOf(_classRef, "getSyncSource", "()I");

  /// from: public int getSyncSource()
  ///
  /// Retrieves the sync source.
  ///@return sync source
  /// Value is android.media.SyncParams\#SYNC_SOURCE_DEFAULT, android.media.SyncParams\#SYNC_SOURCE_SYSTEM_CLOCK, android.media.SyncParams\#SYNC_SOURCE_AUDIO, or android.media.SyncParams\#SYNC_SOURCE_VSYNC
  ///@throws IllegalStateException if the sync source is not set.
  int getSyncSource() => jniAccessors.callMethodWithArgs(
      reference, _id_getSyncSource, jni.JniType.intType, []).integer;

  static final _id_setTolerance = jniAccessors.getMethodIDOf(
      _classRef, "setTolerance", "(F)Landroid/media/SyncParams;");

  /// from: public android.media.SyncParams setTolerance(float tolerance)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the tolerance. The default tolerance is platform specific, but is never more than 1/24.
  ///@param tolerance A non-negative number representing
  ///     the maximum deviation of the playback rate from the playback rate
  ///     set. ({@code abs(actual_rate - set_rate) / set_rate})
  ///@return this <code>SyncParams</code> instance.
  ///@throws IllegalArgumentException if the tolerance is negative, or not less than one.
  SyncParams setTolerance(double tolerance) =>
      SyncParams.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setTolerance, jni.JniType.objectType, [tolerance]).object);

  static final _id_getTolerance =
      jniAccessors.getMethodIDOf(_classRef, "getTolerance", "()F");

  /// from: public float getTolerance()
  ///
  /// Retrieves the tolerance factor.
  ///@return tolerance factor. A non-negative number representing
  ///     the maximum deviation of the playback rate from the playback rate
  ///     set. ({@code abs(actual_rate - set_rate) / set_rate})
  ///@throws IllegalStateException if tolerance is not set.
  double getTolerance() => jniAccessors.callMethodWithArgs(
      reference, _id_getTolerance, jni.JniType.floatType, []).float;

  static final _id_setFrameRate = jniAccessors.getMethodIDOf(
      _classRef, "setFrameRate", "(F)Landroid/media/SyncParams;");

  /// from: public android.media.SyncParams setFrameRate(float frameRate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the video frame rate hint to be used. By default the frame rate is unspecified.
  ///@param frameRate A non-negative number used as an initial hint on
  ///     the video frame rate to be used when using vsync as the sync source. A negative
  ///     number is used to clear a previous hint.
  ///@return this <code>SyncParams</code> instance.
  SyncParams setFrameRate(double frameRate) =>
      SyncParams.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setFrameRate, jni.JniType.objectType, [frameRate]).object);

  static final _id_getFrameRate =
      jniAccessors.getMethodIDOf(_classRef, "getFrameRate", "()F");

  /// from: public float getFrameRate()
  ///
  /// Retrieves the video frame rate hint.
  ///@return frame rate factor. A non-negative number representing
  ///     the maximum deviation of the playback rate from the playback rate
  ///     set. ({@code abs(actual_rate - set_rate) / set_rate}), or a negative
  ///     number representing the desire to clear a previous hint using these params.
  ///@throws IllegalStateException if frame rate is not set.
  double getFrameRate() => jniAccessors.callMethodWithArgs(
      reference, _id_getFrameRate, jni.JniType.floatType, []).float;
}
