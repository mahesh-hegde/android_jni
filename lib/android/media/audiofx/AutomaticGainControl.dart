// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AudioEffect.dart" as audioeffect_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.audiofx.AutomaticGainControl
///
/// Automatic Gain Control (AGC).
/// Automatic Gain Control (AGC) is an audio pre-processor which automatically normalizes the
/// output of the captured signal by boosting or lowering input from the microphone to match a preset
/// level so that the output signal level is virtually constant.
/// AGC can be used by applications where the input signal dynamic range is not important but where
/// a constant strong capture level is desired.
/// An application creates a AutomaticGainControl object to instantiate and control an AGC
/// engine in the audio framework.
/// To attach the AutomaticGainControl to a particular android.media.AudioRecord,
/// specify the audio session ID of this AudioRecord when creating the AutomaticGainControl.
/// The audio session is retrieved by calling
/// android.media.AudioRecord\#getAudioSessionId() on the AudioRecord instance.
/// On some devices, an AGC can be inserted by default in the capture path by the platform
/// according to the android.media.MediaRecorder.AudioSource used. The application should
/// call AutomaticGainControl.getEnable() after creating the AGC to check the default AGC activation
/// state on a particular AudioRecord session.
/// See android.media.audiofx.AudioEffect class for more details on
/// controlling audio effects.
class AutomaticGainControl extends audioeffect_.AudioEffect {
  static final _classRef =
      jniAccessors.getClassOf("android/media/audiofx/AutomaticGainControl");
  AutomaticGainControl.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: void <init>(int audioSession)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor.
  ///  The constructor is not guarantied to succeed and throws the following exceptions:
  /// <ul>
  ///  <li>IllegalArgumentException is thrown if the device does not implement an AGC</li>
  ///  <li>UnsupportedOperationException is thrown is the resources allocated to audio
  ///  pre-procesing are currently exceeded.</li>
  ///  <li>RuntimeException is thrown if a memory allocation error occurs.</li>
  /// </ul>
  ///@param audioSession system wide unique audio session identifier. The AutomaticGainControl
  /// will be applied to the AudioRecord with the same audio session.
  ///@throws java.lang.IllegalArgumentException
  ///@throws java.lang.UnsupportedOperationException
  ///@throws java.lang.RuntimeException
  AutomaticGainControl.ctor1(int audioSession)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [audioSession]).object);

  static final _id_isAvailable =
      jniAccessors.getStaticMethodIDOf(_classRef, "isAvailable", "()Z");

  /// from: static public boolean isAvailable()
  ///
  /// Checks if the device implements automatic gain control.
  ///@return true if the device implements automatic gain control, false otherwise.
  static bool isAvailable() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_isAvailable, jni.JniType.booleanType, []).boolean;

  static final _id_create = jniAccessors.getStaticMethodIDOf(
      _classRef, "create", "(I)Landroid/media/audiofx/AutomaticGainControl;");

  /// from: static public android.media.audiofx.AutomaticGainControl create(int audioSession)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an AutomaticGainControl and attaches it to the AudioRecord on the audio
  /// session specified.
  ///@param audioSession system wide unique audio session identifier. The AutomaticGainControl
  /// will be applied to the AudioRecord with the same audio session.
  ///@return AutomaticGainControl created or null if the device does not implement AGC.
  static AutomaticGainControl create(int audioSession) =>
      AutomaticGainControl.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create,
          jni.JniType.objectType,
          [audioSession]).object);
}
