// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AudioEffect.dart" as audioeffect_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.audiofx.DynamicsProcessing
///
/// DynamicsProcessing is an audio effect for equalizing and changing dynamic range properties of the
/// sound. It is composed of multiple stages including equalization, multi-band compression and
/// limiter.
/// The number of bands and active stages is configurable, and most parameters can be controlled
/// in realtime, such as gains, attack/release times, thresholds, etc.
/// The effect is instantiated and controlled by channels. Each channel has the same basic
/// architecture, but all of their parameters are independent from other channels.
/// The basic channel configuration is:
/// <pre>
///
///    Channel 0          Channel 1       ....       Channel N-1
///      Input              Input                       Input
///        |                  |                           |
///   +----v----+        +----v----+                 +----v----+
///   |inputGain|        |inputGain|                 |inputGain|
///   +---------+        +---------+                 +---------+
///        |                  |                           |
///  +-----v-----+      +-----v-----+               +-----v-----+
///  |   PreEQ   |      |   PreEQ   |               |   PreEQ   |
///  +-----------+      +-----------+               +-----------+
///        |                  |                           |
///  +-----v-----+      +-----v-----+               +-----v-----+
///  |    MBC    |      |    MBC    |               |    MBC    |
///  +-----------+      +-----------+               +-----------+
///        |                  |                           |
///  +-----v-----+      +-----v-----+               +-----v-----+
///  |  PostEQ   |      |  PostEQ   |               |  PostEQ   |
///  +-----------+      +-----------+               +-----------+
///        |                  |                           |
///  +-----v-----+      +-----v-----+               +-----v-----+
///  |  Limiter  |      |  Limiter  |               |  Limiter  |
///  +-----------+      +-----------+               +-----------+
///        |                  |                           |
///     Output             Output                      Output
/// </pre>
///
/// Where the stages are:
/// inputGain: input gain factor in decibels (dB). 0 dB means no change in level.
/// PreEQ:  Multi-band Equalizer.
/// MBC:    Multi-band Compressor
/// PostEQ: Multi-band Equalizer
/// Limiter: Single band compressor/limiter.
///
/// An application creates a DynamicsProcessing object to instantiate and control this audio
/// effect in the audio framework. A DynamicsProcessor.Config and DynamicsProcessor.Config.Builder
/// are available to help configure the multiple stages and each band parameters if desired.
/// See each stage documentation for further details.
/// If no Config is specified during creation, a default configuration is chosen.
/// To attach the DynamicsProcessing to a particular AudioTrack or MediaPlayer,
/// specify the audio session ID of this AudioTrack or MediaPlayer when constructing the effect
/// (see AudioTrack\#getAudioSessionId() and MediaPlayer\#getAudioSessionId()).
///
/// To attach the DynamicsProcessing to a particular AudioTrack or MediaPlayer, specify the audio
/// session ID of this AudioTrack or MediaPlayer when constructing the DynamicsProcessing.
/// See android.media.MediaPlayer\#getAudioSessionId() for details on audio sessions.
/// See android.media.audiofx.AudioEffect class for more details on controlling audio
/// effects.
class DynamicsProcessing extends audioeffect_.AudioEffect {
  static final _classRef =
      jniAccessors.getClassOf("android/media/audiofx/DynamicsProcessing");
  DynamicsProcessing.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int VARIANT_FAVOR_FREQUENCY_RESOLUTION
  ///
  /// Index of variant that favors frequency resolution. Frequency domain based implementation.
  static const VARIANT_FAVOR_FREQUENCY_RESOLUTION = 0;

  /// from: static public final int VARIANT_FAVOR_TIME_RESOLUTION
  ///
  /// Index of variant that favors time resolution resolution. Time domain based implementation.
  static const VARIANT_FAVOR_TIME_RESOLUTION = 1;

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int audioSession)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor.
  ///@param audioSession system-wide unique audio session identifier. The DynamicsProcessing
  /// will be attached to the MediaPlayer or AudioTrack in the same audio session.
  DynamicsProcessing.ctor1(int audioSession)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [audioSession]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(IILandroid/media/audiofx/DynamicsProcessing\$Config;)V");

  /// from: public void <init>(int priority, int audioSession, android.media.audiofx.DynamicsProcessing.Config cfg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for the DynamicsProcessing audio effect
  ///@param priority the priority level requested by the application for controlling the
  /// DynamicsProcessing engine. As the same engine can be shared by several applications,
  /// this parameter indicates how much the requesting application needs control of effect
  /// parameters. The normal priority is 0, above normal is a positive number, below normal a
  /// negative number.
  ///@param audioSession system-wide unique audio session identifier. The DynamicsProcessing
  /// will be attached to the MediaPlayer or AudioTrack in the same audio session.
  ///@param cfg Config object used to setup the audio effect, including bands per stage, and
  /// specific parameters for each stage/band. Use
  /// android.media.audiofx.DynamicsProcessing.Config.Builder to create a
  /// Config object that suits your needs. A null cfg parameter will create and use a default
  /// configuration for the effect
  ///
  /// This value may be {@code null}.
  DynamicsProcessing.ctor2(
      int priority, int audioSession, DynamicsProcessing_Config cfg)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [priority, audioSession, cfg.reference]).object);

  static final _id_getConfig = jniAccessors.getMethodIDOf(_classRef,
      "getConfig", "()Landroid/media/audiofx/DynamicsProcessing\$Config;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config getConfig()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Config object used to setup this effect.
  ///@return Config Current Config object used to setup this DynamicsProcessing effect.
  DynamicsProcessing_Config getConfig() =>
      DynamicsProcessing_Config.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getConfig, jni.JniType.objectType, []).object);

  static final _id_getChannelByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getChannelByChannelIndex",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$Channel;");

  /// from: public android.media.audiofx.DynamicsProcessing.Channel getChannelByChannelIndex(int channelIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Channel getChannelByChannelIndex(int channelIndex) =>
      DynamicsProcessing_Channel.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getChannelByChannelIndex,
          jni.JniType.objectType,
          [channelIndex]).object);

  static final _id_setChannelTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setChannelTo",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Channel;)V");

  /// from: public void setChannelTo(int channelIndex, android.media.audiofx.DynamicsProcessing.Channel channel)
  void setChannelTo(int channelIndex, DynamicsProcessing_Channel channel) =>
      jniAccessors.callMethodWithArgs(reference, _id_setChannelTo,
          jni.JniType.voidType, [channelIndex, channel.reference]).check();

  static final _id_setAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Channel;)V");

  /// from: public void setAllChannelsTo(android.media.audiofx.DynamicsProcessing.Channel channel)
  void setAllChannelsTo(DynamicsProcessing_Channel channel) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAllChannelsTo,
          jni.JniType.voidType, [channel.reference]).check();

  static final _id_getInputGainByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef, "getInputGainByChannelIndex", "(I)F");

  /// from: public float getInputGainByChannelIndex(int channelIndex)
  double getInputGainByChannelIndex(int channelIndex) =>
      jniAccessors.callMethodWithArgs(reference, _id_getInputGainByChannelIndex,
          jni.JniType.floatType, [channelIndex]).float;

  static final _id_setInputGainbyChannel =
      jniAccessors.getMethodIDOf(_classRef, "setInputGainbyChannel", "(IF)V");

  /// from: public void setInputGainbyChannel(int channelIndex, float inputGain)
  void setInputGainbyChannel(int channelIndex, double inputGain) =>
      jniAccessors.callMethodWithArgs(reference, _id_setInputGainbyChannel,
          jni.JniType.voidType, [channelIndex, inputGain]).check();

  static final _id_setInputGainAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef, "setInputGainAllChannelsTo", "(F)V");

  /// from: public void setInputGainAllChannelsTo(float inputGain)
  void setInputGainAllChannelsTo(double inputGain) =>
      jniAccessors.callMethodWithArgs(reference, _id_setInputGainAllChannelsTo,
          jni.JniType.voidType, [inputGain]).check();

  static final _id_getPreEqByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getPreEqByChannelIndex",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$Eq;");

  /// from: public android.media.audiofx.DynamicsProcessing.Eq getPreEqByChannelIndex(int channelIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Eq getPreEqByChannelIndex(int channelIndex) =>
      DynamicsProcessing_Eq.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPreEqByChannelIndex,
          jni.JniType.objectType,
          [channelIndex]).object);

  static final _id_setPreEqByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setPreEqByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Eq;)V");

  /// from: public void setPreEqByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Eq preEq)
  void setPreEqByChannelIndex(int channelIndex, DynamicsProcessing_Eq preEq) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPreEqByChannelIndex,
          jni.JniType.voidType, [channelIndex, preEq.reference]).check();

  static final _id_setPreEqAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setPreEqAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Eq;)V");

  /// from: public void setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq preEq)
  void setPreEqAllChannelsTo(DynamicsProcessing_Eq preEq) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPreEqAllChannelsTo,
          jni.JniType.voidType, [preEq.reference]).check();

  static final _id_getPreEqBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getPreEqBandByChannelIndex",
      "(II)Landroid/media/audiofx/DynamicsProcessing\$EqBand;");

  /// from: public android.media.audiofx.DynamicsProcessing.EqBand getPreEqBandByChannelIndex(int channelIndex, int band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_EqBand getPreEqBandByChannelIndex(
          int channelIndex, int band) =>
      DynamicsProcessing_EqBand.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPreEqBandByChannelIndex,
          jni.JniType.objectType,
          [channelIndex, band]).object);

  static final _id_setPreEqBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setPreEqBandByChannelIndex",
      "(IILandroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void setPreEqBandByChannelIndex(int channelIndex, int band, android.media.audiofx.DynamicsProcessing.EqBand preEqBand)
  void setPreEqBandByChannelIndex(
          int channelIndex, int band, DynamicsProcessing_EqBand preEqBand) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setPreEqBandByChannelIndex,
          jni.JniType.voidType,
          [channelIndex, band, preEqBand.reference]).check();

  static final _id_setPreEqBandAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setPreEqBandAllChannelsTo",
      "(ILandroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void setPreEqBandAllChannelsTo(int band, android.media.audiofx.DynamicsProcessing.EqBand preEqBand)
  void setPreEqBandAllChannelsTo(
          int band, DynamicsProcessing_EqBand preEqBand) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPreEqBandAllChannelsTo,
          jni.JniType.voidType, [band, preEqBand.reference]).check();

  static final _id_getMbcByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getMbcByChannelIndex",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$Mbc;");

  /// from: public android.media.audiofx.DynamicsProcessing.Mbc getMbcByChannelIndex(int channelIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Mbc getMbcByChannelIndex(int channelIndex) =>
      DynamicsProcessing_Mbc.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getMbcByChannelIndex,
          jni.JniType.objectType,
          [channelIndex]).object);

  static final _id_setMbcByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setMbcByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Mbc;)V");

  /// from: public void setMbcByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Mbc mbc)
  void setMbcByChannelIndex(int channelIndex, DynamicsProcessing_Mbc mbc) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMbcByChannelIndex,
          jni.JniType.voidType, [channelIndex, mbc.reference]).check();

  static final _id_setMbcAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setMbcAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Mbc;)V");

  /// from: public void setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing.Mbc mbc)
  void setMbcAllChannelsTo(DynamicsProcessing_Mbc mbc) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMbcAllChannelsTo,
          jni.JniType.voidType, [mbc.reference]).check();

  static final _id_getMbcBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getMbcBandByChannelIndex",
      "(II)Landroid/media/audiofx/DynamicsProcessing\$MbcBand;");

  /// from: public android.media.audiofx.DynamicsProcessing.MbcBand getMbcBandByChannelIndex(int channelIndex, int band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_MbcBand getMbcBandByChannelIndex(
          int channelIndex, int band) =>
      DynamicsProcessing_MbcBand.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getMbcBandByChannelIndex,
          jni.JniType.objectType,
          [channelIndex, band]).object);

  static final _id_setMbcBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setMbcBandByChannelIndex",
      "(IILandroid/media/audiofx/DynamicsProcessing\$MbcBand;)V");

  /// from: public void setMbcBandByChannelIndex(int channelIndex, int band, android.media.audiofx.DynamicsProcessing.MbcBand mbcBand)
  void setMbcBandByChannelIndex(
          int channelIndex, int band, DynamicsProcessing_MbcBand mbcBand) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setMbcBandByChannelIndex,
          jni.JniType.voidType,
          [channelIndex, band, mbcBand.reference]).check();

  static final _id_setMbcBandAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setMbcBandAllChannelsTo",
      "(ILandroid/media/audiofx/DynamicsProcessing\$MbcBand;)V");

  /// from: public void setMbcBandAllChannelsTo(int band, android.media.audiofx.DynamicsProcessing.MbcBand mbcBand)
  void setMbcBandAllChannelsTo(int band, DynamicsProcessing_MbcBand mbcBand) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMbcBandAllChannelsTo,
          jni.JniType.voidType, [band, mbcBand.reference]).check();

  static final _id_getPostEqByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getPostEqByChannelIndex",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$Eq;");

  /// from: public android.media.audiofx.DynamicsProcessing.Eq getPostEqByChannelIndex(int channelIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Eq getPostEqByChannelIndex(int channelIndex) =>
      DynamicsProcessing_Eq.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPostEqByChannelIndex,
          jni.JniType.objectType,
          [channelIndex]).object);

  static final _id_setPostEqByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setPostEqByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Eq;)V");

  /// from: public void setPostEqByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Eq postEq)
  void setPostEqByChannelIndex(
          int channelIndex, DynamicsProcessing_Eq postEq) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPostEqByChannelIndex,
          jni.JniType.voidType, [channelIndex, postEq.reference]).check();

  static final _id_setPostEqAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setPostEqAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Eq;)V");

  /// from: public void setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq postEq)
  void setPostEqAllChannelsTo(DynamicsProcessing_Eq postEq) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPostEqAllChannelsTo,
          jni.JniType.voidType, [postEq.reference]).check();

  static final _id_getPostEqBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getPostEqBandByChannelIndex",
      "(II)Landroid/media/audiofx/DynamicsProcessing\$EqBand;");

  /// from: public android.media.audiofx.DynamicsProcessing.EqBand getPostEqBandByChannelIndex(int channelIndex, int band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_EqBand getPostEqBandByChannelIndex(
          int channelIndex, int band) =>
      DynamicsProcessing_EqBand.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPostEqBandByChannelIndex,
          jni.JniType.objectType,
          [channelIndex, band]).object);

  static final _id_setPostEqBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setPostEqBandByChannelIndex",
      "(IILandroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void setPostEqBandByChannelIndex(int channelIndex, int band, android.media.audiofx.DynamicsProcessing.EqBand postEqBand)
  void setPostEqBandByChannelIndex(
          int channelIndex, int band, DynamicsProcessing_EqBand postEqBand) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setPostEqBandByChannelIndex,
          jni.JniType.voidType,
          [channelIndex, band, postEqBand.reference]).check();

  static final _id_setPostEqBandAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setPostEqBandAllChannelsTo",
      "(ILandroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void setPostEqBandAllChannelsTo(int band, android.media.audiofx.DynamicsProcessing.EqBand postEqBand)
  void setPostEqBandAllChannelsTo(
          int band, DynamicsProcessing_EqBand postEqBand) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPostEqBandAllChannelsTo,
          jni.JniType.voidType, [band, postEqBand.reference]).check();

  static final _id_getLimiterByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getLimiterByChannelIndex",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$Limiter;");

  /// from: public android.media.audiofx.DynamicsProcessing.Limiter getLimiterByChannelIndex(int channelIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Limiter getLimiterByChannelIndex(int channelIndex) =>
      DynamicsProcessing_Limiter.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getLimiterByChannelIndex,
          jni.JniType.objectType,
          [channelIndex]).object);

  static final _id_setLimiterByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setLimiterByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Limiter;)V");

  /// from: public void setLimiterByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Limiter limiter)
  void setLimiterByChannelIndex(
          int channelIndex, DynamicsProcessing_Limiter limiter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setLimiterByChannelIndex,
          jni.JniType.voidType, [channelIndex, limiter.reference]).check();

  static final _id_setLimiterAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setLimiterAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Limiter;)V");

  /// from: public void setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing.Limiter limiter)
  void setLimiterAllChannelsTo(DynamicsProcessing_Limiter limiter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setLimiterAllChannelsTo,
          jni.JniType.voidType, [limiter.reference]).check();

  static final _id_getChannelCount =
      jniAccessors.getMethodIDOf(_classRef, "getChannelCount", "()I");

  /// from: public int getChannelCount()
  ///
  /// Gets the number of channels in the effect engine
  ///@return number of channels currently in use by the effect engine
  int getChannelCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getChannelCount, jni.JniType.intType, []).integer;
}

/// from: android.media.audiofx.DynamicsProcessing$Stage
///
/// base class for the different stages.
class DynamicsProcessing_Stage extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/DynamicsProcessing\$Stage");
  DynamicsProcessing_Stage.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ZZ)V");

  /// from: public void <init>(boolean inUse, boolean enabled)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for stage
  ///@param inUse true if this stage is set to be used. False otherwise. Stages that are not
  /// set "inUse" at initialization time are not available to be used at any time.
  ///@param enabled true if this stage is currently used to process sound. When disabled,
  /// the stage is bypassed and the sound is copied unaltered from input to output.
  DynamicsProcessing_Stage(bool inUse, bool enabled)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [inUse, enabled]).object);

  static final _id_isEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isEnabled", "()Z");

  /// from: public boolean isEnabled()
  ///
  /// returns enabled state of the stage
  ///@return true if stage is enabled for processing, false otherwise
  bool isEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_isEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_setEnabled =
      jniAccessors.getMethodIDOf(_classRef, "setEnabled", "(Z)V");

  /// from: public void setEnabled(boolean enabled)
  ///
  /// sets enabled state of the stage
  ///@param enabled true for enabled, false otherwise
  void setEnabled(bool enabled) => jniAccessors.callMethodWithArgs(
      reference, _id_setEnabled, jni.JniType.voidType, [enabled]).check();

  static final _id_isInUse =
      jniAccessors.getMethodIDOf(_classRef, "isInUse", "()Z");

  /// from: public boolean isInUse()
  ///
  /// returns inUse state of the stage.
  ///@return inUse state of the stage. True if this stage is currently used to process sound.
  /// When false, the stage is bypassed and the sound is copied unaltered from input to output.
  bool isInUse() => jniAccessors.callMethodWithArgs(
      reference, _id_isInUse, jni.JniType.booleanType, []).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.media.audiofx.DynamicsProcessing$MbcBand
///
/// Class for Multi-Band compressor bands
/// MBC bands have multiple controllable parameters: enabled/disabled, cutoffFrequency,
/// attackTime, releaseTime, ratio, threshold, kneeWidth, noiseGateThreshold, expanderRatio,
/// preGain and postGain.
class DynamicsProcessing_MbcBand extends DynamicsProcessing_BandBase {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/DynamicsProcessing\$MbcBand");
  DynamicsProcessing_MbcBand.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ZFFFFFFFFFF)V");

  /// from: public void <init>(boolean enabled, float cutoffFrequency, float attackTime, float releaseTime, float ratio, float threshold, float kneeWidth, float noiseGateThreshold, float expanderRatio, float preGain, float postGain)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for MbcBand
  ///@param enabled true if this band is currently used to process sound. When false,
  /// the band is effectively muted and sound set to zero.
  ///@param cutoffFrequency topmost frequency number (in Hz) this band will process. The
  /// effective bandwidth for the band is then computed using this and the previous band
  /// topmost frequency (or 0 Hz for band number 0). Frequencies are expected to increase with
  /// band number, thus band 0 cutoffFrequency <= band 1 cutoffFrequency, and so on.
  ///@param attackTime Attack Time for compressor in milliseconds (ms)
  ///@param releaseTime Release Time for compressor in milliseconds (ms)
  ///@param ratio Compressor ratio (N:1) (input:output)
  ///@param threshold Compressor threshold measured in decibels (dB) from 0 dB Full Scale
  /// (dBFS).
  ///@param kneeWidth Width in decibels (dB) around compressor threshold point.
  ///@param noiseGateThreshold Noise gate threshold in decibels (dB) from 0 dB Full Scale
  /// (dBFS).
  ///@param expanderRatio Expander ratio (1:N) (input:output) for signals below the Noise Gate
  /// Threshold.
  ///@param preGain Gain applied to the signal BEFORE the compression.
  ///@param postGain Gain applied to the signal AFTER compression.
  DynamicsProcessing_MbcBand.ctor1(
      bool enabled,
      double cutoffFrequency,
      double attackTime,
      double releaseTime,
      double ratio,
      double threshold,
      double kneeWidth,
      double noiseGateThreshold,
      double expanderRatio,
      double preGain,
      double postGain)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          enabled,
          cutoffFrequency,
          attackTime,
          releaseTime,
          ratio,
          threshold,
          kneeWidth,
          noiseGateThreshold,
          expanderRatio,
          preGain,
          postGain
        ]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/media/audiofx/DynamicsProcessing\$MbcBand;)V");

  /// from: public void <init>(android.media.audiofx.DynamicsProcessing.MbcBand cfg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for MbcBand
  ///@param cfg copy constructor
  DynamicsProcessing_MbcBand.ctor2(DynamicsProcessing_MbcBand cfg)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [cfg.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_getAttackTime =
      jniAccessors.getMethodIDOf(_classRef, "getAttackTime", "()F");

  /// from: public float getAttackTime()
  ///
  /// gets attack time for compressor in milliseconds (ms)
  ///@return attack time for compressor in milliseconds (ms)
  double getAttackTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getAttackTime, jni.JniType.floatType, []).float;

  static final _id_setAttackTime =
      jniAccessors.getMethodIDOf(_classRef, "setAttackTime", "(F)V");

  /// from: public void setAttackTime(float attackTime)
  ///
  /// sets attack time for compressor in milliseconds (ms)
  ///@param attackTime desired for compressor in milliseconds (ms)
  void setAttackTime(double attackTime) => jniAccessors.callMethodWithArgs(
      reference, _id_setAttackTime, jni.JniType.voidType, [attackTime]).check();

  static final _id_getReleaseTime =
      jniAccessors.getMethodIDOf(_classRef, "getReleaseTime", "()F");

  /// from: public float getReleaseTime()
  ///
  /// gets release time for compressor in milliseconds (ms)
  ///@return release time for compressor in milliseconds (ms)
  double getReleaseTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getReleaseTime, jni.JniType.floatType, []).float;

  static final _id_setReleaseTime =
      jniAccessors.getMethodIDOf(_classRef, "setReleaseTime", "(F)V");

  /// from: public void setReleaseTime(float releaseTime)
  ///
  /// sets release time for compressor in milliseconds (ms)
  ///@param releaseTime desired for compressor in milliseconds (ms)
  void setReleaseTime(double releaseTime) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setReleaseTime,
      jni.JniType.voidType,
      [releaseTime]).check();

  static final _id_getRatio =
      jniAccessors.getMethodIDOf(_classRef, "getRatio", "()F");

  /// from: public float getRatio()
  ///
  /// gets the compressor ratio (N:1)
  ///@return compressor ratio (N:1)
  double getRatio() => jniAccessors.callMethodWithArgs(
      reference, _id_getRatio, jni.JniType.floatType, []).float;

  static final _id_setRatio =
      jniAccessors.getMethodIDOf(_classRef, "setRatio", "(F)V");

  /// from: public void setRatio(float ratio)
  ///
  /// sets compressor ratio (N:1)
  ///@param ratio desired for the compressor (N:1)
  void setRatio(double ratio) => jniAccessors.callMethodWithArgs(
      reference, _id_setRatio, jni.JniType.voidType, [ratio]).check();

  static final _id_getThreshold =
      jniAccessors.getMethodIDOf(_classRef, "getThreshold", "()F");

  /// from: public float getThreshold()
  ///
  /// gets the compressor threshold measured in decibels (dB) from 0 dB Full Scale (dBFS).
  /// Thresholds are negative. A threshold of 0 dB means no compression will take place.
  ///@return compressor threshold in decibels (dB)
  double getThreshold() => jniAccessors.callMethodWithArgs(
      reference, _id_getThreshold, jni.JniType.floatType, []).float;

  static final _id_setThreshold =
      jniAccessors.getMethodIDOf(_classRef, "setThreshold", "(F)V");

  /// from: public void setThreshold(float threshold)
  ///
  /// sets the compressor threshold measured in decibels (dB) from 0 dB Full Scale (dBFS).
  /// Thresholds are negative. A threshold of 0 dB means no compression will take place.
  ///@param threshold desired for compressor in decibels(dB)
  void setThreshold(double threshold) => jniAccessors.callMethodWithArgs(
      reference, _id_setThreshold, jni.JniType.voidType, [threshold]).check();

  static final _id_getKneeWidth =
      jniAccessors.getMethodIDOf(_classRef, "getKneeWidth", "()F");

  /// from: public float getKneeWidth()
  ///
  /// get Knee Width in decibels (dB) around compressor threshold point. Widths are always
  /// positive, with higher values representing a wider area of transition from the linear zone
  /// to the compression zone. A knee of 0 dB means a more abrupt transition.
  ///@return Knee Width in decibels (dB)
  double getKneeWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getKneeWidth, jni.JniType.floatType, []).float;

  static final _id_setKneeWidth =
      jniAccessors.getMethodIDOf(_classRef, "setKneeWidth", "(F)V");

  /// from: public void setKneeWidth(float kneeWidth)
  ///
  /// sets knee width in decibels (dB). See
  /// android.media.audiofx.DynamicsProcessing.MbcBand\#getKneeWidth for more
  /// information.
  ///@param kneeWidth desired in decibels (dB)
  void setKneeWidth(double kneeWidth) => jniAccessors.callMethodWithArgs(
      reference, _id_setKneeWidth, jni.JniType.voidType, [kneeWidth]).check();

  static final _id_getNoiseGateThreshold =
      jniAccessors.getMethodIDOf(_classRef, "getNoiseGateThreshold", "()F");

  /// from: public float getNoiseGateThreshold()
  ///
  /// gets the noise gate threshold in decibels (dB) from 0 dB Full Scale (dBFS). Noise gate
  /// thresholds are negative. Signals below this level will be expanded according the
  /// expanderRatio parameter. A Noise Gate Threshold of -75 dB means very quiet signals might
  /// be effectively removed from the signal.
  ///@return Noise Gate Threshold in decibels (dB)
  double getNoiseGateThreshold() => jniAccessors.callMethodWithArgs(
      reference, _id_getNoiseGateThreshold, jni.JniType.floatType, []).float;

  static final _id_setNoiseGateThreshold =
      jniAccessors.getMethodIDOf(_classRef, "setNoiseGateThreshold", "(F)V");

  /// from: public void setNoiseGateThreshold(float noiseGateThreshold)
  ///
  /// sets noise gate threshod in decibels (dB). See
  /// android.media.audiofx.DynamicsProcessing.MbcBand\#getNoiseGateThreshold for more
  /// information.
  ///@param noiseGateThreshold desired in decibels (dB)
  void setNoiseGateThreshold(double noiseGateThreshold) =>
      jniAccessors.callMethodWithArgs(reference, _id_setNoiseGateThreshold,
          jni.JniType.voidType, [noiseGateThreshold]).check();

  static final _id_getExpanderRatio =
      jniAccessors.getMethodIDOf(_classRef, "getExpanderRatio", "()F");

  /// from: public float getExpanderRatio()
  ///
  /// gets Expander ratio (1:N) for signals below the Noise Gate Threshold.
  ///@return Expander ratio (1:N)
  double getExpanderRatio() => jniAccessors.callMethodWithArgs(
      reference, _id_getExpanderRatio, jni.JniType.floatType, []).float;

  static final _id_setExpanderRatio =
      jniAccessors.getMethodIDOf(_classRef, "setExpanderRatio", "(F)V");

  /// from: public void setExpanderRatio(float expanderRatio)
  ///
  /// sets Expander ratio (1:N) for signals below the Noise Gate Threshold.
  ///@param expanderRatio desired expander ratio (1:N)
  void setExpanderRatio(double expanderRatio) =>
      jniAccessors.callMethodWithArgs(reference, _id_setExpanderRatio,
          jni.JniType.voidType, [expanderRatio]).check();

  static final _id_getPreGain =
      jniAccessors.getMethodIDOf(_classRef, "getPreGain", "()F");

  /// from: public float getPreGain()
  ///
  /// gets the gain applied to the signal BEFORE the compression. Measured in decibels (dB)
  /// where 0 dB means no level change.
  ///@return preGain value in decibels (dB)
  double getPreGain() => jniAccessors.callMethodWithArgs(
      reference, _id_getPreGain, jni.JniType.floatType, []).float;

  static final _id_setPreGain =
      jniAccessors.getMethodIDOf(_classRef, "setPreGain", "(F)V");

  /// from: public void setPreGain(float preGain)
  ///
  /// sets the gain to be applied to the signal BEFORE the compression, measured in decibels
  /// (dB), where 0 dB means no level change.
  ///@param preGain desired in decibels (dB)
  void setPreGain(double preGain) => jniAccessors.callMethodWithArgs(
      reference, _id_setPreGain, jni.JniType.voidType, [preGain]).check();

  static final _id_getPostGain =
      jniAccessors.getMethodIDOf(_classRef, "getPostGain", "()F");

  /// from: public float getPostGain()
  ///
  /// gets the gain applied to the signal AFTER compression. Measured in decibels (dB) where 0
  /// dB means no level change
  ///@return postGain value in decibels (dB)
  double getPostGain() => jniAccessors.callMethodWithArgs(
      reference, _id_getPostGain, jni.JniType.floatType, []).float;

  static final _id_setPostGain =
      jniAccessors.getMethodIDOf(_classRef, "setPostGain", "(F)V");

  /// from: public void setPostGain(float postGain)
  ///
  /// sets the gain to be applied to the siganl AFTER the compression. Measured in decibels
  /// (dB), where 0 dB means no level change.
  ///@param postGain desired value in decibels (dB)
  void setPostGain(double postGain) => jniAccessors.callMethodWithArgs(
      reference, _id_setPostGain, jni.JniType.voidType, [postGain]).check();
}

/// from: android.media.audiofx.DynamicsProcessing$Mbc
///
/// Class for Multi-Band Compressor (MBC) stage
class DynamicsProcessing_Mbc extends DynamicsProcessing_BandStage {
  static final _classRef =
      jniAccessors.getClassOf("android/media/audiofx/DynamicsProcessing\$Mbc");
  DynamicsProcessing_Mbc.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ZZI)V");

  /// from: public void <init>(boolean inUse, boolean enabled, int bandCount)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for Multi-Band Compressor (MBC) stage
  ///@param inUse true if MBC stage will be used, false otherwise.
  ///@param enabled true if MBC stage is enabled/disabled. This can be changed while effect
  /// is running
  ///@param bandCount number of bands for this MBC stage. Can't be changed while effect is
  /// running
  DynamicsProcessing_Mbc.ctor1(bool inUse, bool enabled, int bandCount)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [inUse, enabled, bandCount]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/media/audiofx/DynamicsProcessing\$Mbc;)V");

  /// from: public void <init>(android.media.audiofx.DynamicsProcessing.Mbc cfg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for MBC stage
  ///@param cfg copy constructor
  DynamicsProcessing_Mbc.ctor2(DynamicsProcessing_Mbc cfg)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [cfg.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_setBand = jniAccessors.getMethodIDOf(_classRef, "setBand",
      "(ILandroid/media/audiofx/DynamicsProcessing\$MbcBand;)V");

  /// from: public void setBand(int band, android.media.audiofx.DynamicsProcessing.MbcBand bandCfg)
  ///
  /// Sets MbcBand object for given band index
  ///@param band index of band to be modified
  ///@param bandCfg MbcBand object.
  void setBand(int band, DynamicsProcessing_MbcBand bandCfg) =>
      jniAccessors.callMethodWithArgs(reference, _id_setBand,
          jni.JniType.voidType, [band, bandCfg.reference]).check();

  static final _id_getBand = jniAccessors.getMethodIDOf(_classRef, "getBand",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$MbcBand;");

  /// from: public android.media.audiofx.DynamicsProcessing.MbcBand getBand(int band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets MbcBand object for band of interest.
  ///@param band index of band of interest
  ///@return MbcBand Object
  DynamicsProcessing_MbcBand getBand(int band) =>
      DynamicsProcessing_MbcBand.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getBand, jni.JniType.objectType, [band]).object);
}

/// from: android.media.audiofx.DynamicsProcessing$Limiter
///
/// Class for Limiter Stage
/// Limiter is a single band compressor at the end of the processing chain, commonly used to
/// protect the signal from overloading and distortion. Limiters have multiple controllable
/// parameters: enabled/disabled, linkGroup, attackTime, releaseTime, ratio, threshold, and
/// postGain.
/// Limiters can be linked in groups across multiple channels. Linked limiters will trigger
/// the same limiting if any of the linked limiters starts compressing.
class DynamicsProcessing_Limiter extends DynamicsProcessing_Stage {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/DynamicsProcessing\$Limiter");
  DynamicsProcessing_Limiter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ZZIFFFFF)V");

  /// from: public void <init>(boolean inUse, boolean enabled, int linkGroup, float attackTime, float releaseTime, float ratio, float threshold, float postGain)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for Limiter Stage
  ///@param inUse true if MBC stage will be used, false otherwise.
  ///@param enabled true if MBC stage is enabled/disabled. This can be changed while effect
  /// is running
  ///@param linkGroup index of group assigned to this Limiter. Only limiters that share the
  /// same linkGroup index will react together.
  ///@param attackTime Attack Time for limiter compressor in milliseconds (ms)
  ///@param releaseTime Release Time for limiter compressor in milliseconds (ms)
  ///@param ratio Limiter Compressor ratio (N:1) (input:output)
  ///@param threshold Limiter Compressor threshold measured in decibels (dB) from 0 dB Full
  /// Scale (dBFS).
  ///@param postGain Gain applied to the signal AFTER compression.
  DynamicsProcessing_Limiter.ctor1(
      bool inUse,
      bool enabled,
      int linkGroup,
      double attackTime,
      double releaseTime,
      double ratio,
      double threshold,
      double postGain)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          inUse,
          enabled,
          linkGroup,
          attackTime,
          releaseTime,
          ratio,
          threshold,
          postGain
        ]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/media/audiofx/DynamicsProcessing\$Limiter;)V");

  /// from: public void <init>(android.media.audiofx.DynamicsProcessing.Limiter cfg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class Constructor for Limiter
  ///@param cfg copy constructor
  DynamicsProcessing_Limiter.ctor2(DynamicsProcessing_Limiter cfg)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [cfg.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_getLinkGroup =
      jniAccessors.getMethodIDOf(_classRef, "getLinkGroup", "()I");

  /// from: public int getLinkGroup()
  ///
  /// Gets the linkGroup index for this Limiter Stage. Only limiters that share the same
  /// linkGroup index will react together.
  ///@return linkGroup index.
  int getLinkGroup() => jniAccessors.callMethodWithArgs(
      reference, _id_getLinkGroup, jni.JniType.intType, []).integer;

  static final _id_setLinkGroup =
      jniAccessors.getMethodIDOf(_classRef, "setLinkGroup", "(I)V");

  /// from: public void setLinkGroup(int linkGroup)
  ///
  /// Sets the linkGroup index for this limiter Stage.
  ///@param linkGroup desired linkGroup index
  void setLinkGroup(int linkGroup) => jniAccessors.callMethodWithArgs(
      reference, _id_setLinkGroup, jni.JniType.voidType, [linkGroup]).check();

  static final _id_getAttackTime =
      jniAccessors.getMethodIDOf(_classRef, "getAttackTime", "()F");

  /// from: public float getAttackTime()
  ///
  /// gets attack time for limiter compressor in milliseconds (ms)
  ///@return attack time for limiter compressor in milliseconds (ms)
  double getAttackTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getAttackTime, jni.JniType.floatType, []).float;

  static final _id_setAttackTime =
      jniAccessors.getMethodIDOf(_classRef, "setAttackTime", "(F)V");

  /// from: public void setAttackTime(float attackTime)
  ///
  /// sets attack time for limiter compressor in milliseconds (ms)
  ///@param attackTime desired for limiter compressor in milliseconds (ms)
  void setAttackTime(double attackTime) => jniAccessors.callMethodWithArgs(
      reference, _id_setAttackTime, jni.JniType.voidType, [attackTime]).check();

  static final _id_getReleaseTime =
      jniAccessors.getMethodIDOf(_classRef, "getReleaseTime", "()F");

  /// from: public float getReleaseTime()
  ///
  /// gets release time for limiter compressor in milliseconds (ms)
  ///@return release time for limiter compressor in milliseconds (ms)
  double getReleaseTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getReleaseTime, jni.JniType.floatType, []).float;

  static final _id_setReleaseTime =
      jniAccessors.getMethodIDOf(_classRef, "setReleaseTime", "(F)V");

  /// from: public void setReleaseTime(float releaseTime)
  ///
  /// sets release time for limiter compressor in milliseconds (ms)
  ///@param releaseTime desired for limiter compressor in milliseconds (ms)
  void setReleaseTime(double releaseTime) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setReleaseTime,
      jni.JniType.voidType,
      [releaseTime]).check();

  static final _id_getRatio =
      jniAccessors.getMethodIDOf(_classRef, "getRatio", "()F");

  /// from: public float getRatio()
  ///
  /// gets the limiter compressor ratio (N:1)
  ///@return limiter compressor ratio (N:1)
  double getRatio() => jniAccessors.callMethodWithArgs(
      reference, _id_getRatio, jni.JniType.floatType, []).float;

  static final _id_setRatio =
      jniAccessors.getMethodIDOf(_classRef, "setRatio", "(F)V");

  /// from: public void setRatio(float ratio)
  ///
  /// sets limiter compressor ratio (N:1)
  ///@param ratio desired for the limiter compressor (N:1)
  void setRatio(double ratio) => jniAccessors.callMethodWithArgs(
      reference, _id_setRatio, jni.JniType.voidType, [ratio]).check();

  static final _id_getThreshold =
      jniAccessors.getMethodIDOf(_classRef, "getThreshold", "()F");

  /// from: public float getThreshold()
  ///
  /// gets the limiter compressor threshold measured in decibels (dB) from 0 dB Full Scale
  /// (dBFS). Thresholds are negative. A threshold of 0 dB means no limiting will take place.
  ///@return limiter compressor threshold in decibels (dB)
  double getThreshold() => jniAccessors.callMethodWithArgs(
      reference, _id_getThreshold, jni.JniType.floatType, []).float;

  static final _id_setThreshold =
      jniAccessors.getMethodIDOf(_classRef, "setThreshold", "(F)V");

  /// from: public void setThreshold(float threshold)
  ///
  /// sets the limiter compressor threshold measured in decibels (dB) from 0 dB Full Scale
  /// (dBFS). Thresholds are negative. A threshold of 0 dB means no limiting will take place.
  ///@param threshold desired for limiter compressor in decibels(dB)
  void setThreshold(double threshold) => jniAccessors.callMethodWithArgs(
      reference, _id_setThreshold, jni.JniType.voidType, [threshold]).check();

  static final _id_getPostGain =
      jniAccessors.getMethodIDOf(_classRef, "getPostGain", "()F");

  /// from: public float getPostGain()
  ///
  /// gets the gain applied to the signal AFTER limiting. Measured in decibels (dB) where 0
  /// dB means no level change
  ///@return postGain value in decibels (dB)
  double getPostGain() => jniAccessors.callMethodWithArgs(
      reference, _id_getPostGain, jni.JniType.floatType, []).float;

  static final _id_setPostGain =
      jniAccessors.getMethodIDOf(_classRef, "setPostGain", "(F)V");

  /// from: public void setPostGain(float postGain)
  ///
  /// sets the gain to be applied to the siganl AFTER the limiter. Measured in decibels
  /// (dB), where 0 dB means no level change.
  ///@param postGain desired value in decibels (dB)
  void setPostGain(double postGain) => jniAccessors.callMethodWithArgs(
      reference, _id_setPostGain, jni.JniType.voidType, [postGain]).check();
}

/// from: android.media.audiofx.DynamicsProcessing$EqBand
///
/// Class for Equalizer Bands
/// Equalizer bands have three controllable parameters: enabled/disabled, cutoffFrequency and
/// gain
class DynamicsProcessing_EqBand extends DynamicsProcessing_BandBase {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/DynamicsProcessing\$EqBand");
  DynamicsProcessing_EqBand.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ZFF)V");

  /// from: public void <init>(boolean enabled, float cutoffFrequency, float gain)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for EqBand
  ///@param enabled true if this band is currently used to process sound. When false,
  /// the band is effectively muted and sound set to zero.
  ///@param cutoffFrequency topmost frequency number (in Hz) this band will process. The
  /// effective bandwidth for the band is then computed using this and the previous band
  /// topmost frequency (or 0 Hz for band number 0). Frequencies are expected to increase with
  /// band number, thus band 0 cutoffFrequency <= band 1 cutoffFrequency, and so on.
  ///@param gain of equalizer band in decibels (dB). A gain of 0 dB means no change in level.
  DynamicsProcessing_EqBand.ctor1(
      bool enabled, double cutoffFrequency, double gain)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [enabled, cutoffFrequency, gain]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void <init>(android.media.audiofx.DynamicsProcessing.EqBand cfg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for EqBand
  ///@param cfg copy constructor
  DynamicsProcessing_EqBand.ctor2(DynamicsProcessing_EqBand cfg)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [cfg.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_getGain =
      jniAccessors.getMethodIDOf(_classRef, "getGain", "()F");

  /// from: public float getGain()
  ///
  /// gets current gain of band in decibels (dB)
  ///@return current gain of band in decibels (dB)
  double getGain() => jniAccessors.callMethodWithArgs(
      reference, _id_getGain, jni.JniType.floatType, []).float;

  static final _id_setGain =
      jniAccessors.getMethodIDOf(_classRef, "setGain", "(F)V");

  /// from: public void setGain(float gain)
  ///
  /// sets current gain of band in decibels (dB)
  ///@param gain desired in decibels (db)
  void setGain(double gain) => jniAccessors.callMethodWithArgs(
      reference, _id_setGain, jni.JniType.voidType, [gain]).check();
}

/// from: android.media.audiofx.DynamicsProcessing$Eq
///
/// Class for Equalizer stage
class DynamicsProcessing_Eq extends DynamicsProcessing_BandStage {
  static final _classRef =
      jniAccessors.getClassOf("android/media/audiofx/DynamicsProcessing\$Eq");
  DynamicsProcessing_Eq.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ZZI)V");

  /// from: public void <init>(boolean inUse, boolean enabled, int bandCount)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for Equalizer (Eq) stage
  ///@param inUse true if Eq stage will be used, false otherwise.
  ///@param enabled true if Eq stage is enabled/disabled. This can be changed while effect is
  /// running
  ///@param bandCount number of bands for this Equalizer stage. Can't be changed while effect
  /// is running
  DynamicsProcessing_Eq.ctor1(bool inUse, bool enabled, int bandCount)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [inUse, enabled, bandCount]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/media/audiofx/DynamicsProcessing\$Eq;)V");

  /// from: public void <init>(android.media.audiofx.DynamicsProcessing.Eq cfg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for Eq stage
  ///@param cfg copy constructor
  DynamicsProcessing_Eq.ctor2(DynamicsProcessing_Eq cfg)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [cfg.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_setBand = jniAccessors.getMethodIDOf(_classRef, "setBand",
      "(ILandroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void setBand(int band, android.media.audiofx.DynamicsProcessing.EqBand bandCfg)
  ///
  /// Sets EqBand object for given band index
  ///@param band index of band to be modified
  ///@param bandCfg EqBand object.
  void setBand(int band, DynamicsProcessing_EqBand bandCfg) =>
      jniAccessors.callMethodWithArgs(reference, _id_setBand,
          jni.JniType.voidType, [band, bandCfg.reference]).check();

  static final _id_getBand = jniAccessors.getMethodIDOf(_classRef, "getBand",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$EqBand;");

  /// from: public android.media.audiofx.DynamicsProcessing.EqBand getBand(int band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets EqBand object for band of interest.
  ///@param band index of band of interest
  ///@return EqBand Object
  DynamicsProcessing_EqBand getBand(int band) =>
      DynamicsProcessing_EqBand.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getBand, jni.JniType.objectType, [band]).object);
}

/// from: android.media.audiofx.DynamicsProcessing$Config
///
/// Class for Config object, used by DynamicsProcessing to configure and update the audio effect.
/// use Builder to instantiate objects of this type.
class DynamicsProcessing_Config extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/DynamicsProcessing\$Config");
  DynamicsProcessing_Config.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/media/audiofx/DynamicsProcessing\$Config;)V");

  /// from: void <init>(android.media.audiofx.DynamicsProcessing.Config cfg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide Class constructor for Config
  ///@param cfg Configuration object copy constructor
  DynamicsProcessing_Config(DynamicsProcessing_Config cfg)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [cfg.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_getVariant =
      jniAccessors.getMethodIDOf(_classRef, "getVariant", "()I");

  /// from: public int getVariant()
  ///
  /// Gets variant for effect engine See \#VARIANT_FAVOR_FREQUENCY_RESOLUTION and
  /// \#VARIANT_FAVOR_TIME_RESOLUTION.
  ///@return variant of effect engine
  int getVariant() => jniAccessors.callMethodWithArgs(
      reference, _id_getVariant, jni.JniType.intType, []).integer;

  static final _id_getPreferredFrameDuration =
      jniAccessors.getMethodIDOf(_classRef, "getPreferredFrameDuration", "()F");

  /// from: public float getPreferredFrameDuration()
  ///
  /// Gets preferred frame duration in milliseconds (ms).
  ///@return preferred frame duration in milliseconds (ms)
  double getPreferredFrameDuration() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getPreferredFrameDuration,
      jni.JniType.floatType, []).float;

  static final _id_isPreEqInUse =
      jniAccessors.getMethodIDOf(_classRef, "isPreEqInUse", "()Z");

  /// from: public boolean isPreEqInUse()
  ///
  /// Gets if preEq stage is in use
  ///@return true if preEq stage is in use;
  bool isPreEqInUse() => jniAccessors.callMethodWithArgs(
      reference, _id_isPreEqInUse, jni.JniType.booleanType, []).boolean;

  static final _id_getPreEqBandCount =
      jniAccessors.getMethodIDOf(_classRef, "getPreEqBandCount", "()I");

  /// from: public int getPreEqBandCount()
  ///
  /// Gets number of bands configured for the PreEq stage.
  ///@return number of bands configured for the PreEq stage.
  int getPreEqBandCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getPreEqBandCount, jni.JniType.intType, []).integer;

  static final _id_isMbcInUse =
      jniAccessors.getMethodIDOf(_classRef, "isMbcInUse", "()Z");

  /// from: public boolean isMbcInUse()
  ///
  /// Gets if Mbc stage is in use
  ///@return true if Mbc stage is in use;
  bool isMbcInUse() => jniAccessors.callMethodWithArgs(
      reference, _id_isMbcInUse, jni.JniType.booleanType, []).boolean;

  static final _id_getMbcBandCount =
      jniAccessors.getMethodIDOf(_classRef, "getMbcBandCount", "()I");

  /// from: public int getMbcBandCount()
  ///
  /// Gets number of bands configured for the Mbc stage.
  ///@return number of bands configured for the Mbc stage.
  int getMbcBandCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getMbcBandCount, jni.JniType.intType, []).integer;

  static final _id_isPostEqInUse =
      jniAccessors.getMethodIDOf(_classRef, "isPostEqInUse", "()Z");

  /// from: public boolean isPostEqInUse()
  ///
  /// Gets if PostEq stage is in use
  ///@return true if PostEq stage is in use;
  bool isPostEqInUse() => jniAccessors.callMethodWithArgs(
      reference, _id_isPostEqInUse, jni.JniType.booleanType, []).boolean;

  static final _id_getPostEqBandCount =
      jniAccessors.getMethodIDOf(_classRef, "getPostEqBandCount", "()I");

  /// from: public int getPostEqBandCount()
  ///
  /// Gets number of bands configured for the PostEq stage.
  ///@return number of bands configured for the PostEq stage.
  int getPostEqBandCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getPostEqBandCount, jni.JniType.intType, []).integer;

  static final _id_isLimiterInUse =
      jniAccessors.getMethodIDOf(_classRef, "isLimiterInUse", "()Z");

  /// from: public boolean isLimiterInUse()
  ///
  /// Gets if Limiter stage is in use
  ///@return true if Limiter stage is in use;
  bool isLimiterInUse() => jniAccessors.callMethodWithArgs(
      reference, _id_isLimiterInUse, jni.JniType.booleanType, []).boolean;

  static final _id_getChannelByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getChannelByChannelIndex",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$Channel;");

  /// from: public android.media.audiofx.DynamicsProcessing.Channel getChannelByChannelIndex(int channelIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the Channel configuration object by using the channel index
  ///@param channelIndex of desired Channel object
  ///@return Channel configuration object
  DynamicsProcessing_Channel getChannelByChannelIndex(int channelIndex) =>
      DynamicsProcessing_Channel.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getChannelByChannelIndex,
          jni.JniType.objectType,
          [channelIndex]).object);

  static final _id_setChannelTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setChannelTo",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Channel;)V");

  /// from: public void setChannelTo(int channelIndex, android.media.audiofx.DynamicsProcessing.Channel channel)
  ///
  /// Sets the chosen Channel object in the selected channelIndex
  /// Note that all the stages should have the same number of bands than the existing Channel
  /// object.
  ///@param channelIndex index of channel to be replaced
  ///@param channel Channel configuration object to be set
  void setChannelTo(int channelIndex, DynamicsProcessing_Channel channel) =>
      jniAccessors.callMethodWithArgs(reference, _id_setChannelTo,
          jni.JniType.voidType, [channelIndex, channel.reference]).check();

  static final _id_setAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Channel;)V");

  /// from: public void setAllChannelsTo(android.media.audiofx.DynamicsProcessing.Channel channel)
  ///
  /// Sets ALL channels to the chosen Channel object. Note that all the stages should have the
  /// same number of bands than the existing ones.
  ///@param channel Channel configuration object to be set.
  void setAllChannelsTo(DynamicsProcessing_Channel channel) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAllChannelsTo,
          jni.JniType.voidType, [channel.reference]).check();

  static final _id_getInputGainByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef, "getInputGainByChannelIndex", "(I)F");

  /// from: public float getInputGainByChannelIndex(int channelIndex)
  ///
  /// Gets inputGain value in decibels (dB) for channel indicated by channelIndex
  ///@param channelIndex index of channel of interest
  ///@return inputGain value in decibels (dB). 0 dB means no change.
  double getInputGainByChannelIndex(int channelIndex) =>
      jniAccessors.callMethodWithArgs(reference, _id_getInputGainByChannelIndex,
          jni.JniType.floatType, [channelIndex]).float;

  static final _id_setInputGainByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef, "setInputGainByChannelIndex", "(IF)V");

  /// from: public void setInputGainByChannelIndex(int channelIndex, float inputGain)
  ///
  /// Sets the inputGain value in decibels (dB) for the channel indicated by channelIndex.
  ///@param channelIndex index of channel of interest
  ///@param inputGain desired value in decibels (dB).
  void setInputGainByChannelIndex(int channelIndex, double inputGain) =>
      jniAccessors.callMethodWithArgs(reference, _id_setInputGainByChannelIndex,
          jni.JniType.voidType, [channelIndex, inputGain]).check();

  static final _id_setInputGainAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef, "setInputGainAllChannelsTo", "(F)V");

  /// from: public void setInputGainAllChannelsTo(float inputGain)
  ///
  /// Sets the inputGain value in decibels (dB) for ALL channels
  ///@param inputGain desired value in decibels (dB)
  void setInputGainAllChannelsTo(double inputGain) =>
      jniAccessors.callMethodWithArgs(reference, _id_setInputGainAllChannelsTo,
          jni.JniType.voidType, [inputGain]).check();

  static final _id_getPreEqByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getPreEqByChannelIndex",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$Eq;");

  /// from: public android.media.audiofx.DynamicsProcessing.Eq getPreEqByChannelIndex(int channelIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets PreEq stage from channel indicated by channelIndex
  ///@param channelIndex index of channel of interest
  ///@return PreEq stage configuration object
  DynamicsProcessing_Eq getPreEqByChannelIndex(int channelIndex) =>
      DynamicsProcessing_Eq.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPreEqByChannelIndex,
          jni.JniType.objectType,
          [channelIndex]).object);

  static final _id_setPreEqByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setPreEqByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Eq;)V");

  /// from: public void setPreEqByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Eq preEq)
  ///
  /// Sets the PreEq stage configuration for the channel indicated by channelIndex. Note that
  /// new preEq stage must have the same number of bands than original preEq stage
  ///@param channelIndex index of channel to be set
  ///@param preEq desired PreEq configuration to be set
  void setPreEqByChannelIndex(int channelIndex, DynamicsProcessing_Eq preEq) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPreEqByChannelIndex,
          jni.JniType.voidType, [channelIndex, preEq.reference]).check();

  static final _id_setPreEqAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setPreEqAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Eq;)V");

  /// from: public void setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq preEq)
  ///
  /// Sets the PreEq stage configuration for ALL channels. Note that new preEq stage must have
  /// the same number of bands than original preEq stages.
  ///@param preEq desired PreEq configuration to be set
  void setPreEqAllChannelsTo(DynamicsProcessing_Eq preEq) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPreEqAllChannelsTo,
          jni.JniType.voidType, [preEq.reference]).check();

  static final _id_getPreEqBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getPreEqBandByChannelIndex",
      "(II)Landroid/media/audiofx/DynamicsProcessing\$EqBand;");

  /// from: public android.media.audiofx.DynamicsProcessing.EqBand getPreEqBandByChannelIndex(int channelIndex, int band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_EqBand getPreEqBandByChannelIndex(
          int channelIndex, int band) =>
      DynamicsProcessing_EqBand.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPreEqBandByChannelIndex,
          jni.JniType.objectType,
          [channelIndex, band]).object);

  static final _id_setPreEqBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setPreEqBandByChannelIndex",
      "(IILandroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void setPreEqBandByChannelIndex(int channelIndex, int band, android.media.audiofx.DynamicsProcessing.EqBand preEqBand)
  void setPreEqBandByChannelIndex(
          int channelIndex, int band, DynamicsProcessing_EqBand preEqBand) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setPreEqBandByChannelIndex,
          jni.JniType.voidType,
          [channelIndex, band, preEqBand.reference]).check();

  static final _id_setPreEqBandAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setPreEqBandAllChannelsTo",
      "(ILandroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void setPreEqBandAllChannelsTo(int band, android.media.audiofx.DynamicsProcessing.EqBand preEqBand)
  void setPreEqBandAllChannelsTo(
          int band, DynamicsProcessing_EqBand preEqBand) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPreEqBandAllChannelsTo,
          jni.JniType.voidType, [band, preEqBand.reference]).check();

  static final _id_getMbcByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getMbcByChannelIndex",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$Mbc;");

  /// from: public android.media.audiofx.DynamicsProcessing.Mbc getMbcByChannelIndex(int channelIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Mbc getMbcByChannelIndex(int channelIndex) =>
      DynamicsProcessing_Mbc.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getMbcByChannelIndex,
          jni.JniType.objectType,
          [channelIndex]).object);

  static final _id_setMbcByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setMbcByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Mbc;)V");

  /// from: public void setMbcByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Mbc mbc)
  void setMbcByChannelIndex(int channelIndex, DynamicsProcessing_Mbc mbc) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMbcByChannelIndex,
          jni.JniType.voidType, [channelIndex, mbc.reference]).check();

  static final _id_setMbcAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setMbcAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Mbc;)V");

  /// from: public void setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing.Mbc mbc)
  void setMbcAllChannelsTo(DynamicsProcessing_Mbc mbc) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMbcAllChannelsTo,
          jni.JniType.voidType, [mbc.reference]).check();

  static final _id_getMbcBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getMbcBandByChannelIndex",
      "(II)Landroid/media/audiofx/DynamicsProcessing\$MbcBand;");

  /// from: public android.media.audiofx.DynamicsProcessing.MbcBand getMbcBandByChannelIndex(int channelIndex, int band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_MbcBand getMbcBandByChannelIndex(
          int channelIndex, int band) =>
      DynamicsProcessing_MbcBand.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getMbcBandByChannelIndex,
          jni.JniType.objectType,
          [channelIndex, band]).object);

  static final _id_setMbcBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setMbcBandByChannelIndex",
      "(IILandroid/media/audiofx/DynamicsProcessing\$MbcBand;)V");

  /// from: public void setMbcBandByChannelIndex(int channelIndex, int band, android.media.audiofx.DynamicsProcessing.MbcBand mbcBand)
  void setMbcBandByChannelIndex(
          int channelIndex, int band, DynamicsProcessing_MbcBand mbcBand) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setMbcBandByChannelIndex,
          jni.JniType.voidType,
          [channelIndex, band, mbcBand.reference]).check();

  static final _id_setMbcBandAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setMbcBandAllChannelsTo",
      "(ILandroid/media/audiofx/DynamicsProcessing\$MbcBand;)V");

  /// from: public void setMbcBandAllChannelsTo(int band, android.media.audiofx.DynamicsProcessing.MbcBand mbcBand)
  void setMbcBandAllChannelsTo(int band, DynamicsProcessing_MbcBand mbcBand) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMbcBandAllChannelsTo,
          jni.JniType.voidType, [band, mbcBand.reference]).check();

  static final _id_getPostEqByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getPostEqByChannelIndex",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$Eq;");

  /// from: public android.media.audiofx.DynamicsProcessing.Eq getPostEqByChannelIndex(int channelIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Eq getPostEqByChannelIndex(int channelIndex) =>
      DynamicsProcessing_Eq.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPostEqByChannelIndex,
          jni.JniType.objectType,
          [channelIndex]).object);

  static final _id_setPostEqByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setPostEqByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Eq;)V");

  /// from: public void setPostEqByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Eq postEq)
  void setPostEqByChannelIndex(
          int channelIndex, DynamicsProcessing_Eq postEq) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPostEqByChannelIndex,
          jni.JniType.voidType, [channelIndex, postEq.reference]).check();

  static final _id_setPostEqAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setPostEqAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Eq;)V");

  /// from: public void setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq postEq)
  void setPostEqAllChannelsTo(DynamicsProcessing_Eq postEq) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPostEqAllChannelsTo,
          jni.JniType.voidType, [postEq.reference]).check();

  static final _id_getPostEqBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getPostEqBandByChannelIndex",
      "(II)Landroid/media/audiofx/DynamicsProcessing\$EqBand;");

  /// from: public android.media.audiofx.DynamicsProcessing.EqBand getPostEqBandByChannelIndex(int channelIndex, int band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_EqBand getPostEqBandByChannelIndex(
          int channelIndex, int band) =>
      DynamicsProcessing_EqBand.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPostEqBandByChannelIndex,
          jni.JniType.objectType,
          [channelIndex, band]).object);

  static final _id_setPostEqBandByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setPostEqBandByChannelIndex",
      "(IILandroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void setPostEqBandByChannelIndex(int channelIndex, int band, android.media.audiofx.DynamicsProcessing.EqBand postEqBand)
  void setPostEqBandByChannelIndex(
          int channelIndex, int band, DynamicsProcessing_EqBand postEqBand) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setPostEqBandByChannelIndex,
          jni.JniType.voidType,
          [channelIndex, band, postEqBand.reference]).check();

  static final _id_setPostEqBandAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setPostEqBandAllChannelsTo",
      "(ILandroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void setPostEqBandAllChannelsTo(int band, android.media.audiofx.DynamicsProcessing.EqBand postEqBand)
  void setPostEqBandAllChannelsTo(
          int band, DynamicsProcessing_EqBand postEqBand) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPostEqBandAllChannelsTo,
          jni.JniType.voidType, [band, postEqBand.reference]).check();

  static final _id_getLimiterByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "getLimiterByChannelIndex",
      "(I)Landroid/media/audiofx/DynamicsProcessing\$Limiter;");

  /// from: public android.media.audiofx.DynamicsProcessing.Limiter getLimiterByChannelIndex(int channelIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Limiter getLimiterByChannelIndex(int channelIndex) =>
      DynamicsProcessing_Limiter.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getLimiterByChannelIndex,
          jni.JniType.objectType,
          [channelIndex]).object);

  static final _id_setLimiterByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setLimiterByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Limiter;)V");

  /// from: public void setLimiterByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Limiter limiter)
  void setLimiterByChannelIndex(
          int channelIndex, DynamicsProcessing_Limiter limiter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setLimiterByChannelIndex,
          jni.JniType.voidType, [channelIndex, limiter.reference]).check();

  static final _id_setLimiterAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setLimiterAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Limiter;)V");

  /// from: public void setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing.Limiter limiter)
  void setLimiterAllChannelsTo(DynamicsProcessing_Limiter limiter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setLimiterAllChannelsTo,
          jni.JniType.voidType, [limiter.reference]).check();
}

/// from: android.media.audiofx.DynamicsProcessing$Config$Builder
class DynamicsProcessing_Config_Builder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/DynamicsProcessing\$Config\$Builder");
  DynamicsProcessing_Config_Builder.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIZIZIZIZ)V");

  /// from: public void <init>(int variant, int channelCount, boolean preEqInUse, int preEqBandCount, boolean mbcInUse, int mbcBandCount, boolean postEqInUse, int postEqBandCount, boolean limiterInUse)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder(
      int variant,
      int channelCount,
      bool preEqInUse,
      int preEqBandCount,
      bool mbcInUse,
      int mbcBandCount,
      bool postEqInUse,
      int postEqBandCount,
      bool limiterInUse)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          variant,
          channelCount,
          preEqInUse,
          preEqBandCount,
          mbcInUse,
          mbcBandCount,
          postEqInUse,
          postEqBandCount,
          limiterInUse
        ]).object);

  static final _id_setPreferredFrameDuration = jniAccessors.getMethodIDOf(
      _classRef,
      "setPreferredFrameDuration",
      "(F)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setPreferredFrameDuration(float frameDuration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setPreferredFrameDuration(
          double frameDuration) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setPreferredFrameDuration,
          jni.JniType.objectType,
          [frameDuration]).object);

  static final _id_setInputGainByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setInputGainByChannelIndex",
      "(IF)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setInputGainByChannelIndex(int channelIndex, float inputGain)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setInputGainByChannelIndex(
          int channelIndex, double inputGain) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setInputGainByChannelIndex,
          jni.JniType.objectType,
          [channelIndex, inputGain]).object);

  static final _id_setInputGainAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setInputGainAllChannelsTo",
      "(F)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setInputGainAllChannelsTo(float inputGain)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setInputGainAllChannelsTo(
          double inputGain) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setInputGainAllChannelsTo,
          jni.JniType.objectType,
          [inputGain]).object);

  static final _id_setChannelTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setChannelTo",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Channel;)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setChannelTo(int channelIndex, android.media.audiofx.DynamicsProcessing.Channel channel)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setChannelTo(
          int channelIndex, DynamicsProcessing_Channel channel) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setChannelTo,
          jni.JniType.objectType,
          [channelIndex, channel.reference]).object);

  static final _id_setAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Channel;)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setAllChannelsTo(android.media.audiofx.DynamicsProcessing.Channel channel)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setAllChannelsTo(
          DynamicsProcessing_Channel channel) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAllChannelsTo,
          jni.JniType.objectType,
          [channel.reference]).object);

  static final _id_setPreEqByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setPreEqByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Eq;)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setPreEqByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Eq preEq)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setPreEqByChannelIndex(
          int channelIndex, DynamicsProcessing_Eq preEq) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setPreEqByChannelIndex,
          jni.JniType.objectType,
          [channelIndex, preEq.reference]).object);

  static final _id_setPreEqAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setPreEqAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Eq;)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq preEq)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setPreEqAllChannelsTo(
          DynamicsProcessing_Eq preEq) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setPreEqAllChannelsTo,
          jni.JniType.objectType,
          [preEq.reference]).object);

  static final _id_setMbcByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setMbcByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Mbc;)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setMbcByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Mbc mbc)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setMbcByChannelIndex(
          int channelIndex, DynamicsProcessing_Mbc mbc) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setMbcByChannelIndex,
          jni.JniType.objectType,
          [channelIndex, mbc.reference]).object);

  static final _id_setMbcAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setMbcAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Mbc;)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing.Mbc mbc)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setMbcAllChannelsTo(
          DynamicsProcessing_Mbc mbc) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setMbcAllChannelsTo,
          jni.JniType.objectType,
          [mbc.reference]).object);

  static final _id_setPostEqByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setPostEqByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Eq;)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setPostEqByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Eq postEq)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setPostEqByChannelIndex(
          int channelIndex, DynamicsProcessing_Eq postEq) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setPostEqByChannelIndex,
          jni.JniType.objectType,
          [channelIndex, postEq.reference]).object);

  static final _id_setPostEqAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setPostEqAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Eq;)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq postEq)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setPostEqAllChannelsTo(
          DynamicsProcessing_Eq postEq) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setPostEqAllChannelsTo,
          jni.JniType.objectType,
          [postEq.reference]).object);

  static final _id_setLimiterByChannelIndex = jniAccessors.getMethodIDOf(
      _classRef,
      "setLimiterByChannelIndex",
      "(ILandroid/media/audiofx/DynamicsProcessing\$Limiter;)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setLimiterByChannelIndex(int channelIndex, android.media.audiofx.DynamicsProcessing.Limiter limiter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setLimiterByChannelIndex(
          int channelIndex, DynamicsProcessing_Limiter limiter) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setLimiterByChannelIndex,
          jni.JniType.objectType,
          [channelIndex, limiter.reference]).object);

  static final _id_setLimiterAllChannelsTo = jniAccessors.getMethodIDOf(
      _classRef,
      "setLimiterAllChannelsTo",
      "(Landroid/media/audiofx/DynamicsProcessing\$Limiter;)Landroid/media/audiofx/DynamicsProcessing\$Config\$Builder;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config.Builder setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing.Limiter limiter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config_Builder setLimiterAllChannelsTo(
          DynamicsProcessing_Limiter limiter) =>
      DynamicsProcessing_Config_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setLimiterAllChannelsTo,
          jni.JniType.objectType,
          [limiter.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(_classRef, "build",
      "()Landroid/media/audiofx/DynamicsProcessing\$Config;");

  /// from: public android.media.audiofx.DynamicsProcessing.Config build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  DynamicsProcessing_Config build() =>
      DynamicsProcessing_Config.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}

/// from: android.media.audiofx.DynamicsProcessing$Channel
///
/// Class for Channel configuration parameters. It is composed of multiple stages, which can be
/// used/enabled independently. Stages not used or disabled will be bypassed and the sound would
/// be unaffected by them.
class DynamicsProcessing_Channel extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/DynamicsProcessing\$Channel");
  DynamicsProcessing_Channel.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(FZIZIZIZ)V");

  /// from: public void <init>(float inputGain, boolean preEqInUse, int preEqBandCount, boolean mbcInUse, int mbcBandCount, boolean postEqInUse, int postEqBandCount, boolean limiterInUse)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for Channel configuration.
  ///@param inputGain value in decibels (dB) of level change applied to the audio before
  /// processing. A value of 0 dB means no change.
  ///@param preEqInUse true if PreEq stage will be used, false otherwise. This can't be
  /// changed later.
  ///@param preEqBandCount number of bands for PreEq stage. This can't be changed later.
  ///@param mbcInUse true if Mbc stage will be used, false otherwise. This can't be changed
  /// later.
  ///@param mbcBandCount number of bands for Mbc stage. This can't be changed later.
  ///@param postEqInUse true if PostEq stage will be used, false otherwise. This can't be
  /// changed later.
  ///@param postEqBandCount number of bands for PostEq stage. This can't be changed later.
  ///@param limiterInUse true if Limiter stage will be used, false otherwise. This can't be
  /// changed later.
  DynamicsProcessing_Channel(
      double inputGain,
      bool preEqInUse,
      int preEqBandCount,
      bool mbcInUse,
      int mbcBandCount,
      bool postEqInUse,
      int postEqBandCount,
      bool limiterInUse)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          inputGain,
          preEqInUse,
          preEqBandCount,
          mbcInUse,
          mbcBandCount,
          postEqInUse,
          postEqBandCount,
          limiterInUse
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/media/audiofx/DynamicsProcessing\$Channel;)V");

  /// from: public void <init>(android.media.audiofx.DynamicsProcessing.Channel cfg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for Channel configuration
  ///@param cfg copy constructor
  DynamicsProcessing_Channel.ctor1(DynamicsProcessing_Channel cfg)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [cfg.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_getInputGain =
      jniAccessors.getMethodIDOf(_classRef, "getInputGain", "()F");

  /// from: public float getInputGain()
  ///
  /// Gets inputGain value in decibels (dB). 0 dB means no change;
  ///@return gain value in decibels (dB)
  double getInputGain() => jniAccessors.callMethodWithArgs(
      reference, _id_getInputGain, jni.JniType.floatType, []).float;

  static final _id_setInputGain =
      jniAccessors.getMethodIDOf(_classRef, "setInputGain", "(F)V");

  /// from: public void setInputGain(float inputGain)
  ///
  /// Sets inputGain value in decibels (dB). 0 dB means no change;
  ///@param inputGain desired gain value in decibels (dB)
  void setInputGain(double inputGain) => jniAccessors.callMethodWithArgs(
      reference, _id_setInputGain, jni.JniType.voidType, [inputGain]).check();

  static final _id_getPreEq = jniAccessors.getMethodIDOf(_classRef, "getPreEq",
      "()Landroid/media/audiofx/DynamicsProcessing\$Eq;");

  /// from: public android.media.audiofx.DynamicsProcessing.Eq getPreEq()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets PreEq configuration stage
  ///@return PreEq configuration stage
  DynamicsProcessing_Eq getPreEq() =>
      DynamicsProcessing_Eq.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPreEq, jni.JniType.objectType, []).object);

  static final _id_setPreEq = jniAccessors.getMethodIDOf(_classRef, "setPreEq",
      "(Landroid/media/audiofx/DynamicsProcessing\$Eq;)V");

  /// from: public void setPreEq(android.media.audiofx.DynamicsProcessing.Eq preEq)
  ///
  /// Sets PreEq configuration stage. New PreEq stage must have the same number of bands than
  /// original PreEq stage.
  ///@param preEq configuration
  void setPreEq(DynamicsProcessing_Eq preEq) => jniAccessors.callMethodWithArgs(
      reference, _id_setPreEq, jni.JniType.voidType, [preEq.reference]).check();

  static final _id_getPreEqBand = jniAccessors.getMethodIDOf(_classRef,
      "getPreEqBand", "(I)Landroid/media/audiofx/DynamicsProcessing\$EqBand;");

  /// from: public android.media.audiofx.DynamicsProcessing.EqBand getPreEqBand(int band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets EqBand for PreEq stage for given band index.
  ///@param band index of band of interest from PreEq stage
  ///@return EqBand configuration
  DynamicsProcessing_EqBand getPreEqBand(int band) =>
      DynamicsProcessing_EqBand.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPreEqBand, jni.JniType.objectType, [band]).object);

  static final _id_setPreEqBand = jniAccessors.getMethodIDOf(_classRef,
      "setPreEqBand", "(ILandroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void setPreEqBand(int band, android.media.audiofx.DynamicsProcessing.EqBand preEqBand)
  ///
  /// Sets EqBand for PreEq stage for given band index
  ///@param band index of band of interest from PreEq stage
  ///@param preEqBand configuration to be set.
  void setPreEqBand(int band, DynamicsProcessing_EqBand preEqBand) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPreEqBand,
          jni.JniType.voidType, [band, preEqBand.reference]).check();

  static final _id_getMbc = jniAccessors.getMethodIDOf(
      _classRef, "getMbc", "()Landroid/media/audiofx/DynamicsProcessing\$Mbc;");

  /// from: public android.media.audiofx.DynamicsProcessing.Mbc getMbc()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets Mbc configuration stage
  ///@return Mbc configuration stage
  DynamicsProcessing_Mbc getMbc() =>
      DynamicsProcessing_Mbc.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMbc, jni.JniType.objectType, []).object);

  static final _id_setMbc = jniAccessors.getMethodIDOf(_classRef, "setMbc",
      "(Landroid/media/audiofx/DynamicsProcessing\$Mbc;)V");

  /// from: public void setMbc(android.media.audiofx.DynamicsProcessing.Mbc mbc)
  ///
  /// Sets Mbc configuration stage. New Mbc stage must have the same number of bands than
  /// original Mbc stage.
  ///@param mbc
  void setMbc(DynamicsProcessing_Mbc mbc) => jniAccessors.callMethodWithArgs(
      reference, _id_setMbc, jni.JniType.voidType, [mbc.reference]).check();

  static final _id_getMbcBand = jniAccessors.getMethodIDOf(_classRef,
      "getMbcBand", "(I)Landroid/media/audiofx/DynamicsProcessing\$MbcBand;");

  /// from: public android.media.audiofx.DynamicsProcessing.MbcBand getMbcBand(int band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets MbcBand configuration for Mbc stage, for given band index.
  ///@param band index of band of interest from Mbc stage
  ///@return MbcBand configuration
  DynamicsProcessing_MbcBand getMbcBand(int band) =>
      DynamicsProcessing_MbcBand.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMbcBand, jni.JniType.objectType, [band]).object);

  static final _id_setMbcBand = jniAccessors.getMethodIDOf(_classRef,
      "setMbcBand", "(ILandroid/media/audiofx/DynamicsProcessing\$MbcBand;)V");

  /// from: public void setMbcBand(int band, android.media.audiofx.DynamicsProcessing.MbcBand mbcBand)
  ///
  /// Sets MbcBand for Mbc stage for given band index
  ///@param band index of band of interest from Mbc Stage
  ///@param mbcBand configuration to be set
  void setMbcBand(int band, DynamicsProcessing_MbcBand mbcBand) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMbcBand,
          jni.JniType.voidType, [band, mbcBand.reference]).check();

  static final _id_getPostEq = jniAccessors.getMethodIDOf(_classRef,
      "getPostEq", "()Landroid/media/audiofx/DynamicsProcessing\$Eq;");

  /// from: public android.media.audiofx.DynamicsProcessing.Eq getPostEq()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets PostEq configuration stage
  ///@return PostEq configuration stage
  DynamicsProcessing_Eq getPostEq() =>
      DynamicsProcessing_Eq.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPostEq, jni.JniType.objectType, []).object);

  static final _id_setPostEq = jniAccessors.getMethodIDOf(_classRef,
      "setPostEq", "(Landroid/media/audiofx/DynamicsProcessing\$Eq;)V");

  /// from: public void setPostEq(android.media.audiofx.DynamicsProcessing.Eq postEq)
  ///
  /// Sets PostEq configuration stage. New PostEq stage must have the same number of bands than
  /// original PostEq stage.
  ///@param postEq configuration
  void setPostEq(DynamicsProcessing_Eq postEq) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPostEq,
          jni.JniType.voidType, [postEq.reference]).check();

  static final _id_getPostEqBand = jniAccessors.getMethodIDOf(_classRef,
      "getPostEqBand", "(I)Landroid/media/audiofx/DynamicsProcessing\$EqBand;");

  /// from: public android.media.audiofx.DynamicsProcessing.EqBand getPostEqBand(int band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets EqBand for PostEq stage for given band index.
  ///@param band index of band of interest from PostEq stage
  ///@return EqBand configuration
  DynamicsProcessing_EqBand getPostEqBand(int band) =>
      DynamicsProcessing_EqBand.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPostEqBand, jni.JniType.objectType, [band]).object);

  static final _id_setPostEqBand = jniAccessors.getMethodIDOf(
      _classRef,
      "setPostEqBand",
      "(ILandroid/media/audiofx/DynamicsProcessing\$EqBand;)V");

  /// from: public void setPostEqBand(int band, android.media.audiofx.DynamicsProcessing.EqBand postEqBand)
  ///
  /// Sets EqBand for PostEq stage for given band index
  ///@param band index of band of interest from PostEq stage
  ///@param postEqBand configuration to be set.
  void setPostEqBand(int band, DynamicsProcessing_EqBand postEqBand) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPostEqBand,
          jni.JniType.voidType, [band, postEqBand.reference]).check();

  static final _id_getLimiter = jniAccessors.getMethodIDOf(_classRef,
      "getLimiter", "()Landroid/media/audiofx/DynamicsProcessing\$Limiter;");

  /// from: public android.media.audiofx.DynamicsProcessing.Limiter getLimiter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets Limiter configuration stage
  ///@return Limiter configuration stage
  DynamicsProcessing_Limiter getLimiter() =>
      DynamicsProcessing_Limiter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLimiter, jni.JniType.objectType, []).object);

  static final _id_setLimiter = jniAccessors.getMethodIDOf(_classRef,
      "setLimiter", "(Landroid/media/audiofx/DynamicsProcessing\$Limiter;)V");

  /// from: public void setLimiter(android.media.audiofx.DynamicsProcessing.Limiter limiter)
  ///
  /// Sets Limiter configuration stage.
  ///@param limiter configuration stage.
  void setLimiter(DynamicsProcessing_Limiter limiter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setLimiter,
          jni.JniType.voidType, [limiter.reference]).check();
}

/// from: android.media.audiofx.DynamicsProcessing$BandStage
///
/// Base class for stages that hold bands
class DynamicsProcessing_BandStage extends DynamicsProcessing_Stage {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/DynamicsProcessing\$BandStage");
  DynamicsProcessing_BandStage.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ZZI)V");

  /// from: public void <init>(boolean inUse, boolean enabled, int bandCount)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for BandStage
  ///@param inUse true if this stage is set to be used. False otherwise. Stages that are not
  /// set "inUse" at initialization time are not available to be used at any time.
  ///@param enabled true if this stage is currently used to process sound. When disabled,
  /// the stage is bypassed and the sound is copied unaltered from input to output.
  ///@param bandCount number of bands this stage will handle. If stage is not inUse, bandcount
  /// is set to 0
  DynamicsProcessing_BandStage.ctor1(bool inUse, bool enabled, int bandCount)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [inUse, enabled, bandCount]).object);

  static final _id_getBandCount =
      jniAccessors.getMethodIDOf(_classRef, "getBandCount", "()I");

  /// from: public int getBandCount()
  ///
  /// gets number of bands held in this stage
  ///@return number of bands held in this stage
  int getBandCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getBandCount, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.media.audiofx.DynamicsProcessing$BandBase
///
/// Base class for bands
class DynamicsProcessing_BandBase extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/DynamicsProcessing\$BandBase");
  DynamicsProcessing_BandBase.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ZF)V");

  /// from: public void <init>(boolean enabled, float cutoffFrequency)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor for BandBase
  ///@param enabled true if this band is currently used to process sound. When false,
  /// the band is effectively muted and sound set to zero.
  ///@param cutoffFrequency topmost frequency number (in Hz) this band will process. The
  /// effective bandwidth for the band is then computed using this and the previous band
  /// topmost frequency (or 0 Hz for band number 0). Frequencies are expected to increase with
  /// band number, thus band 0 cutoffFrequency <= band 1 cutoffFrequency, and so on.
  DynamicsProcessing_BandBase(bool enabled, double cutoffFrequency)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [enabled, cutoffFrequency]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_isEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isEnabled", "()Z");

  /// from: public boolean isEnabled()
  ///
  /// returns enabled state of the band
  ///@return true if bands is enabled for processing, false otherwise
  bool isEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_isEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_setEnabled =
      jniAccessors.getMethodIDOf(_classRef, "setEnabled", "(Z)V");

  /// from: public void setEnabled(boolean enabled)
  ///
  /// sets enabled state of the band
  ///@param enabled true for enabled, false otherwise
  void setEnabled(bool enabled) => jniAccessors.callMethodWithArgs(
      reference, _id_setEnabled, jni.JniType.voidType, [enabled]).check();

  static final _id_getCutoffFrequency =
      jniAccessors.getMethodIDOf(_classRef, "getCutoffFrequency", "()F");

  /// from: public float getCutoffFrequency()
  ///
  /// gets cutoffFrequency for this band in Hertz (Hz)
  ///@return cutoffFrequency for this band in Hertz (Hz)
  double getCutoffFrequency() => jniAccessors.callMethodWithArgs(
      reference, _id_getCutoffFrequency, jni.JniType.floatType, []).float;

  static final _id_setCutoffFrequency =
      jniAccessors.getMethodIDOf(_classRef, "setCutoffFrequency", "(F)V");

  /// from: public void setCutoffFrequency(float frequency)
  ///
  /// sets topmost frequency number (in Hz) this band will process. The
  /// effective bandwidth for the band is then computed using this and the previous band
  /// topmost frequency (or 0 Hz for band number 0). Frequencies are expected to increase with
  /// band number, thus band 0 cutoffFrequency <= band 1 cutoffFrequency, and so on.
  ///@param frequency
  void setCutoffFrequency(double frequency) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCutoffFrequency,
      jni.JniType.voidType,
      [frequency]).check();
}
