// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AudioEffect.dart" as audioeffect_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.audiofx.BassBoost
///
/// Bass boost is an audio effect to boost or amplify low frequencies of the sound. It is comparable
/// to a simple equalizer but limited to one band amplification in the low frequency range.
/// An application creates a BassBoost object to instantiate and control a bass boost engine in
/// the audio framework.
/// The methods, parameter types and units exposed by the BassBoost implementation are directly
/// mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/)
/// for the SLBassBoostItf interface. Please refer to this specification for more details.
/// To attach the BassBoost to a particular AudioTrack or MediaPlayer, specify the audio session
/// ID of this AudioTrack or MediaPlayer when constructing the BassBoost.
/// NOTE: attaching a BassBoost to the global audio output mix by use of session 0 is deprecated.
/// See android.media.MediaPlayer\#getAudioSessionId() for details on audio sessions.
/// See android.media.audiofx.AudioEffect class for more details on
/// controlling audio effects.
class BassBoost extends audioeffect_.AudioEffect {
  static final _classRef =
      jniAccessors.getClassOf("android/media/audiofx/BassBoost");
  BassBoost.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int PARAM_STRENGTH
  ///
  /// Bass boost effect strength. Parameter ID for
  /// android.media.audiofx.BassBoost.OnParameterChangeListener
  static const PARAM_STRENGTH = 1;

  /// from: static public final int PARAM_STRENGTH_SUPPORTED
  ///
  /// Is strength parameter supported by bass boost engine. Parameter ID for getParameter().
  static const PARAM_STRENGTH_SUPPORTED = 0;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int priority, int audioSession)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor.
  ///@param priority the priority level requested by the application for controlling the BassBoost
  /// engine. As the same engine can be shared by several applications, this parameter indicates
  /// how much the requesting application needs control of effect parameters. The normal priority
  /// is 0, above normal is a positive number, below normal a negative number.
  ///@param audioSession system wide unique audio session identifier. The BassBoost will be
  /// attached to the MediaPlayer or AudioTrack in the same audio session.
  ///@throws java.lang.IllegalStateException
  ///@throws java.lang.IllegalArgumentException
  ///@throws java.lang.UnsupportedOperationException
  ///@throws java.lang.RuntimeException
  BassBoost(int priority, int audioSession)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [priority, audioSession]).object);

  static final _id_getStrengthSupported =
      jniAccessors.getMethodIDOf(_classRef, "getStrengthSupported", "()Z");

  /// from: public boolean getStrengthSupported()
  ///
  /// Indicates whether setting strength is supported. If this method returns false, only one
  /// strength is supported and the setStrength() method always rounds to that value.
  ///@return true is strength parameter is supported, false otherwise
  bool getStrengthSupported() => jniAccessors.callMethodWithArgs(
      reference, _id_getStrengthSupported, jni.JniType.booleanType, []).boolean;

  static final _id_setStrength =
      jniAccessors.getMethodIDOf(_classRef, "setStrength", "(S)V");

  /// from: public void setStrength(short strength)
  ///
  /// Sets the strength of the bass boost effect. If the implementation does not support per mille
  /// accuracy for setting the strength, it is allowed to round the given strength to the nearest
  /// supported value. You can use the \#getRoundedStrength() method to query the
  /// (possibly rounded) value that was actually set.
  ///@param strength strength of the effect. The valid range for strength strength is [0, 1000],
  /// where 0 per mille designates the mildest effect and 1000 per mille designates the strongest.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setStrength(int strength) => jniAccessors.callMethodWithArgs(
      reference, _id_setStrength, jni.JniType.voidType, [strength]).check();

  static final _id_getRoundedStrength =
      jniAccessors.getMethodIDOf(_classRef, "getRoundedStrength", "()S");

  /// from: public short getRoundedStrength()
  ///
  /// Gets the current strength of the effect.
  ///@return the strength of the effect. The valid range for strength is [0, 1000], where 0 per
  /// mille designates the mildest effect and 1000 per mille the strongest
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getRoundedStrength() => jniAccessors.callMethodWithArgs(
      reference, _id_getRoundedStrength, jni.JniType.shortType, []).short;

  static final _id_setParameterListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setParameterListener",
      "(Landroid/media/audiofx/BassBoost\$OnParameterChangeListener;)V");

  /// from: public void setParameterListener(android.media.audiofx.BassBoost.OnParameterChangeListener listener)
  ///
  /// Registers an OnParameterChangeListener interface.
  ///@param listener OnParameterChangeListener interface registered
  void setParameterListener(BassBoost_OnParameterChangeListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setParameterListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_getProperties = jniAccessors.getMethodIDOf(_classRef,
      "getProperties", "()Landroid/media/audiofx/BassBoost\$Settings;");

  /// from: public android.media.audiofx.BassBoost.Settings getProperties()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the bass boost properties. This method is useful when a snapshot of current
  /// bass boost settings must be saved by the application.
  ///@return a BassBoost.Settings object containing all current parameters values
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  BassBoost_Settings getProperties() =>
      BassBoost_Settings.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getProperties, jni.JniType.objectType, []).object);

  static final _id_setProperties = jniAccessors.getMethodIDOf(_classRef,
      "setProperties", "(Landroid/media/audiofx/BassBoost\$Settings;)V");

  /// from: public void setProperties(android.media.audiofx.BassBoost.Settings settings)
  ///
  /// Sets the bass boost properties. This method is useful when bass boost settings have to
  /// be applied from a previous backup.
  ///@param settings a BassBoost.Settings object containing the properties to apply
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setProperties(BassBoost_Settings settings) =>
      jniAccessors.callMethodWithArgs(reference, _id_setProperties,
          jni.JniType.voidType, [settings.reference]).check();
}

/// from: android.media.audiofx.BassBoost$Settings
///
/// The Settings class regroups all bass boost parameters. It is used in
/// conjuntion with getProperties() and setProperties() methods to backup and restore
/// all parameters in a single call.
class BassBoost_Settings extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/audiofx/BassBoost\$Settings");
  BassBoost_Settings.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_strength =
      jniAccessors.getFieldIDOf(_classRef, "strength", "S");

  /// from: public short strength
  int get strength => jniAccessors
      .getField(reference, _id_strength, jni.JniType.shortType)
      .short;

  /// from: public short strength
  set strength(int value) =>
      jniEnv.SetShortField(reference, _id_strength, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BassBoost_Settings()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String settings)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Settings class constructor from a key=value; pairs formatted string. The string is
  /// typically returned by Settings.toString() method.
  ///@throws IllegalArgumentException if the string is not correctly formatted.
  BassBoost_Settings.ctor1(jni.JniString settings)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [settings.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.media.audiofx.BassBoost$OnParameterChangeListener
///
/// The OnParameterChangeListener interface defines a method called by the BassBoost when a
/// parameter value has changed.
class BassBoost_OnParameterChangeListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/BassBoost\$OnParameterChangeListener");
  BassBoost_OnParameterChangeListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onParameterChange = jniAccessors.getMethodIDOf(_classRef,
      "onParameterChange", "(Landroid/media/audiofx/BassBoost;IIS)V");

  /// from: public abstract void onParameterChange(android.media.audiofx.BassBoost effect, int status, int param, short value)
  ///
  /// Method called when a parameter value has changed. The method is called only if the
  /// parameter was changed by another application having the control of the same
  /// BassBoost engine.
  ///@param effect the BassBoost on which the interface is registered.
  ///@param status status of the set parameter operation.
  ///@param param ID of the modified parameter. See \#PARAM_STRENGTH ...
  ///@param value the new parameter value.
  void onParameterChange(BassBoost effect, int status, int param, int value) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onParameterChange,
          jni.JniType.voidType,
          [effect.reference, status, param, value]).check();
}
