// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AudioEffect.dart" as audioeffect_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.audiofx.Equalizer
///
/// An Equalizer is used to alter the frequency response of a particular music source or of the main
/// output mix.
/// An application creates an Equalizer object to instantiate and control an Equalizer engine
/// in the audio framework. The application can either simply use predefined presets or have a more
/// precise control of the gain in each frequency band controlled by the equalizer.
/// The methods, parameter types and units exposed by the Equalizer implementation are directly
/// mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/)
/// for the SLEqualizerItf interface. Please refer to this specification for more details.
/// To attach the Equalizer to a particular AudioTrack or MediaPlayer, specify the audio session
/// ID of this AudioTrack or MediaPlayer when constructing the Equalizer.
/// NOTE: attaching an Equalizer to the global audio output mix by use of session 0 is deprecated.
/// See android.media.MediaPlayer\#getAudioSessionId() for details on audio sessions.
/// See android.media.audiofx.AudioEffect class for more details on controlling audio
/// effects.
class Equalizer extends audioeffect_.AudioEffect {
  static final _classRef =
      jniAccessors.getClassOf("android/media/audiofx/Equalizer");
  Equalizer.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int PARAM_BAND_FREQ_RANGE
  ///
  /// Band frequency range. Parameter ID for
  /// android.media.audiofx.Equalizer.OnParameterChangeListener
  static const PARAM_BAND_FREQ_RANGE = 4;

  /// from: static public final int PARAM_BAND_LEVEL
  ///
  /// Band level. Parameter ID for OnParameterChangeListener
  static const PARAM_BAND_LEVEL = 2;

  /// from: static public final int PARAM_CENTER_FREQ
  ///
  /// Band center frequency. Parameter ID for OnParameterChangeListener
  static const PARAM_CENTER_FREQ = 3;

  /// from: static public final int PARAM_CURRENT_PRESET
  ///
  /// Current preset. Parameter ID for OnParameterChangeListener
  static const PARAM_CURRENT_PRESET = 6;

  /// from: static public final int PARAM_GET_BAND
  ///
  /// Band for a given frequency. Parameter ID for OnParameterChangeListener
  static const PARAM_GET_BAND = 5;

  /// from: static public final int PARAM_GET_NUM_OF_PRESETS
  ///
  /// Request number of presets. Parameter ID for OnParameterChangeListener
  static const PARAM_GET_NUM_OF_PRESETS = 7;

  /// from: static public final int PARAM_GET_PRESET_NAME
  ///
  /// Request preset name. Parameter ID for OnParameterChangeListener
  static const PARAM_GET_PRESET_NAME = 8;

  /// from: static public final int PARAM_LEVEL_RANGE
  ///
  /// Band level range. Parameter ID for OnParameterChangeListener
  static const PARAM_LEVEL_RANGE = 1;

  /// from: static public final int PARAM_NUM_BANDS
  ///
  /// Number of bands. Parameter ID for OnParameterChangeListener
  static const PARAM_NUM_BANDS = 0;

  /// from: static public final int PARAM_STRING_SIZE_MAX
  ///
  /// Maximum size for preset name
  static const PARAM_STRING_SIZE_MAX = 32;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int priority, int audioSession)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor.
  ///@param priority the priority level requested by the application for controlling the Equalizer
  /// engine. As the same engine can be shared by several applications, this parameter indicates
  /// how much the requesting application needs control of effect parameters. The normal priority
  /// is 0, above normal is a positive number, below normal a negative number.
  ///@param audioSession system wide unique audio session identifier. The Equalizer will be
  /// attached to the MediaPlayer or AudioTrack in the same audio session.
  ///@throws java.lang.IllegalStateException
  ///@throws java.lang.IllegalArgumentException
  ///@throws java.lang.UnsupportedOperationException
  ///@throws java.lang.RuntimeException
  Equalizer(int priority, int audioSession)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [priority, audioSession]).object);

  static final _id_getNumberOfBands =
      jniAccessors.getMethodIDOf(_classRef, "getNumberOfBands", "()S");

  /// from: public short getNumberOfBands()
  ///
  /// Gets the number of frequency bands supported by the Equalizer engine.
  ///@return the number of bands
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getNumberOfBands() => jniAccessors.callMethodWithArgs(
      reference, _id_getNumberOfBands, jni.JniType.shortType, []).short;

  static final _id_getBandLevelRange =
      jniAccessors.getMethodIDOf(_classRef, "getBandLevelRange", "()[S");

  /// from: public short[] getBandLevelRange()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the level range for use by \#setBandLevel(short,short). The level is expressed in
  /// milliBel.
  ///@return the band level range in an array of short integers. The first element is the lower
  /// limit of the range, the second element the upper limit.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  jni.JniObject getBandLevelRange() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getBandLevelRange, jni.JniType.objectType, []).object);

  static final _id_setBandLevel =
      jniAccessors.getMethodIDOf(_classRef, "setBandLevel", "(SS)V");

  /// from: public void setBandLevel(short band, short level)
  ///
  /// Sets the given equalizer band to the given gain value.
  ///@param band frequency band that will have the new gain. The numbering of the bands starts
  /// from 0 and ends at (number of bands - 1).
  ///@param level new gain in millibels that will be set to the given band. getBandLevelRange()
  /// will define the maximum and minimum values.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  ///@see \#getNumberOfBands()
  void setBandLevel(int band, int level) => jniAccessors.callMethodWithArgs(
      reference, _id_setBandLevel, jni.JniType.voidType, [band, level]).check();

  static final _id_getBandLevel =
      jniAccessors.getMethodIDOf(_classRef, "getBandLevel", "(S)S");

  /// from: public short getBandLevel(short band)
  ///
  /// Gets the gain set for the given equalizer band.
  ///@param band frequency band whose gain is requested. The numbering of the bands starts
  /// from 0 and ends at (number of bands - 1).
  ///@return the gain in millibels of the given band.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getBandLevel(int band) => jniAccessors.callMethodWithArgs(
      reference, _id_getBandLevel, jni.JniType.shortType, [band]).short;

  static final _id_getCenterFreq =
      jniAccessors.getMethodIDOf(_classRef, "getCenterFreq", "(S)I");

  /// from: public int getCenterFreq(short band)
  ///
  /// Gets the center frequency of the given band.
  ///@param band frequency band whose center frequency is requested. The numbering of the bands
  /// starts from 0 and ends at (number of bands - 1).
  ///@return the center frequency in milliHertz
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getCenterFreq(int band) => jniAccessors.callMethodWithArgs(
      reference, _id_getCenterFreq, jni.JniType.intType, [band]).integer;

  static final _id_getBandFreqRange =
      jniAccessors.getMethodIDOf(_classRef, "getBandFreqRange", "(S)[I");

  /// from: public int[] getBandFreqRange(short band)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the frequency range of the given frequency band.
  ///@param band frequency band whose frequency range is requested. The numbering of the bands
  /// starts from 0 and ends at (number of bands - 1).
  ///@return the frequency range in millHertz in an array of integers. The first element is the
  /// lower limit of the range, the second element the upper limit.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  jni.JniObject getBandFreqRange(int band) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getBandFreqRange, jni.JniType.objectType, [band]).object);

  static final _id_getBand =
      jniAccessors.getMethodIDOf(_classRef, "getBand", "(I)S");

  /// from: public short getBand(int frequency)
  ///
  /// Gets the band that has the most effect on the given frequency.
  ///@param frequency frequency in milliHertz which is to be equalized via the returned band.
  ///@return the frequency band that has most effect on the given frequency.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getBand(int frequency) => jniAccessors.callMethodWithArgs(
      reference, _id_getBand, jni.JniType.shortType, [frequency]).short;

  static final _id_getCurrentPreset =
      jniAccessors.getMethodIDOf(_classRef, "getCurrentPreset", "()S");

  /// from: public short getCurrentPreset()
  ///
  /// Gets current preset.
  ///@return the preset that is set at the moment.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getCurrentPreset() => jniAccessors.callMethodWithArgs(
      reference, _id_getCurrentPreset, jni.JniType.shortType, []).short;

  static final _id_usePreset =
      jniAccessors.getMethodIDOf(_classRef, "usePreset", "(S)V");

  /// from: public void usePreset(short preset)
  ///
  /// Sets the equalizer according to the given preset.
  ///@param preset new preset that will be taken into use. The valid range is [0,
  /// number of presets-1].
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  ///@see \#getNumberOfPresets()
  void usePreset(int preset) => jniAccessors.callMethodWithArgs(
      reference, _id_usePreset, jni.JniType.voidType, [preset]).check();

  static final _id_getNumberOfPresets =
      jniAccessors.getMethodIDOf(_classRef, "getNumberOfPresets", "()S");

  /// from: public short getNumberOfPresets()
  ///
  /// Gets the total number of presets the equalizer supports. The presets will have indices
  /// [0, number of presets-1].
  ///@return the number of presets the equalizer supports.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getNumberOfPresets() => jniAccessors.callMethodWithArgs(
      reference, _id_getNumberOfPresets, jni.JniType.shortType, []).short;

  static final _id_getPresetName = jniAccessors.getMethodIDOf(
      _classRef, "getPresetName", "(S)Ljava/lang/String;");

  /// from: public java.lang.String getPresetName(short preset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the preset name based on the index.
  ///@param preset index of the preset. The valid range is [0, number of presets-1].
  ///@return a string containing the name of the given preset.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  jni.JniString getPresetName(int preset) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getPresetName, jni.JniType.objectType, [preset]).object);

  static final _id_setParameterListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setParameterListener",
      "(Landroid/media/audiofx/Equalizer\$OnParameterChangeListener;)V");

  /// from: public void setParameterListener(android.media.audiofx.Equalizer.OnParameterChangeListener listener)
  ///
  /// Registers an OnParameterChangeListener interface.
  ///@param listener OnParameterChangeListener interface registered
  void setParameterListener(Equalizer_OnParameterChangeListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setParameterListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_getProperties = jniAccessors.getMethodIDOf(_classRef,
      "getProperties", "()Landroid/media/audiofx/Equalizer\$Settings;");

  /// from: public android.media.audiofx.Equalizer.Settings getProperties()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the equalizer properties. This method is useful when a snapshot of current
  /// equalizer settings must be saved by the application.
  ///@return an Equalizer.Settings object containing all current parameters values
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  Equalizer_Settings getProperties() =>
      Equalizer_Settings.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getProperties, jni.JniType.objectType, []).object);

  static final _id_setProperties = jniAccessors.getMethodIDOf(_classRef,
      "setProperties", "(Landroid/media/audiofx/Equalizer\$Settings;)V");

  /// from: public void setProperties(android.media.audiofx.Equalizer.Settings settings)
  ///
  /// Sets the equalizer properties. This method is useful when equalizer settings have to
  /// be applied from a previous backup.
  ///@param settings an Equalizer.Settings object containing the properties to apply
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setProperties(Equalizer_Settings settings) =>
      jniAccessors.callMethodWithArgs(reference, _id_setProperties,
          jni.JniType.voidType, [settings.reference]).check();
}

/// from: android.media.audiofx.Equalizer$Settings
///
/// The Settings class regroups all equalizer parameters. It is used in
/// conjuntion with getProperties() and setProperties() methods to backup and restore
/// all parameters in a single call.
class Equalizer_Settings extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/audiofx/Equalizer\$Settings");
  Equalizer_Settings.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_bandLevels =
      jniAccessors.getFieldIDOf(_classRef, "bandLevels", "[S");

  /// from: public short[] bandLevels
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject get bandLevels => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_bandLevels, jni.JniType.objectType)
      .object);

  /// from: public short[] bandLevels
  /// The returned object must be deleted after use, by calling the `delete` method.
  set bandLevels(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_bandLevels, value.reference);

  static final _id_curPreset =
      jniAccessors.getFieldIDOf(_classRef, "curPreset", "S");

  /// from: public short curPreset
  int get curPreset => jniAccessors
      .getField(reference, _id_curPreset, jni.JniType.shortType)
      .short;

  /// from: public short curPreset
  set curPreset(int value) =>
      jniEnv.SetShortField(reference, _id_curPreset, value);

  static final _id_numBands =
      jniAccessors.getFieldIDOf(_classRef, "numBands", "S");

  /// from: public short numBands
  int get numBands => jniAccessors
      .getField(reference, _id_numBands, jni.JniType.shortType)
      .short;

  /// from: public short numBands
  set numBands(int value) =>
      jniEnv.SetShortField(reference, _id_numBands, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Equalizer_Settings()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String settings)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Settings class constructor from a key=value; pairs formatted string. The string is
  /// typically returned by Settings.toString() method.
  ///@throws IllegalArgumentException if the string is not correctly formatted.
  Equalizer_Settings.ctor1(jni.JniString settings)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [settings.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.media.audiofx.Equalizer$OnParameterChangeListener
///
/// The OnParameterChangeListener interface defines a method called by the Equalizer when a
/// parameter value has changed.
class Equalizer_OnParameterChangeListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/Equalizer\$OnParameterChangeListener");
  Equalizer_OnParameterChangeListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onParameterChange = jniAccessors.getMethodIDOf(_classRef,
      "onParameterChange", "(Landroid/media/audiofx/Equalizer;IIII)V");

  /// from: public abstract void onParameterChange(android.media.audiofx.Equalizer effect, int status, int param1, int param2, int value)
  ///
  /// Method called when a parameter value has changed. The method is called only if the
  /// parameter was changed by another application having the control of the same
  /// Equalizer engine.
  ///@param effect the Equalizer on which the interface is registered.
  ///@param status status of the set parameter operation.
  ///@param param1 ID of the modified parameter. See \#PARAM_BAND_LEVEL ...
  ///@param param2 additional parameter qualifier (e.g the band for band level parameter).
  ///@param value the new parameter value.
  void onParameterChange(
          Equalizer effect, int status, int param1, int param2, int value) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onParameterChange,
          jni.JniType.voidType,
          [effect.reference, status, param1, param2, value]).check();
}
