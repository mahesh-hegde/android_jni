// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AudioEffect.dart" as audioeffect_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.audiofx.EnvironmentalReverb
///
/// A sound generated within a room travels in many directions. The listener first hears the direct
/// sound from the source itself. Later, he or she hears discrete echoes caused by sound bouncing off
/// nearby walls, the ceiling and the floor. As sound waves arrive after undergoing more and more
/// reflections, individual reflections become indistinguishable and the listener hears continuous
/// reverberation that decays over time.
/// Reverb is vital for modeling a listener's environment. It can be used in music applications
/// to simulate music being played back in various environments, or in games to immerse the
/// listener within the game's environment.
/// The EnvironmentalReverb class allows an application to control each reverb engine property in a
/// global reverb environment and is more suitable for games. For basic control, more suitable for
/// music applications, it is recommended to use the
/// android.media.audiofx.PresetReverb class.
/// An application creates a EnvironmentalReverb object to instantiate and control a reverb engine
/// in the audio framework.
/// The methods, parameter types and units exposed by the EnvironmentalReverb implementation are
/// directly mapping those defined by the OpenSL ES 1.0.1 Specification
/// (http://www.khronos.org/opensles/) for the SLEnvironmentalReverbItf interface.
/// Please refer to this specification for more details.
/// The EnvironmentalReverb is an output mix auxiliary effect and should be created on
/// Audio session 0. In order for a MediaPlayer or AudioTrack to be fed into this effect,
/// they must be explicitely attached to it and a send level must be specified. Use the effect ID
/// returned by getId() method to designate this particular effect when attaching it to the
/// MediaPlayer or AudioTrack.
/// Creating a reverb on the output mix (audio session 0) requires permission
/// android.Manifest.permission\#MODIFY_AUDIO_SETTINGS
/// See android.media.audiofx.AudioEffect class for more details on controlling
/// audio effects.
class EnvironmentalReverb extends audioeffect_.AudioEffect {
  static final _classRef =
      jniAccessors.getClassOf("android/media/audiofx/EnvironmentalReverb");
  EnvironmentalReverb.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int PARAM_DECAY_HF_RATIO
  ///
  /// Decay HF ratio. Parameter ID for
  /// android.media.audiofx.EnvironmentalReverb.OnParameterChangeListener
  static const PARAM_DECAY_HF_RATIO = 3;

  /// from: static public final int PARAM_DECAY_TIME
  ///
  /// Decay time. Parameter ID for OnParameterChangeListener
  static const PARAM_DECAY_TIME = 2;

  /// from: static public final int PARAM_DENSITY
  ///
  /// Density. Parameter ID for OnParameterChangeListener
  static const PARAM_DENSITY = 9;

  /// from: static public final int PARAM_DIFFUSION
  ///
  /// Diffusion. Parameter ID for OnParameterChangeListener
  static const PARAM_DIFFUSION = 8;

  /// from: static public final int PARAM_REFLECTIONS_DELAY
  ///
  /// Early reflections delay. Parameter ID for OnParameterChangeListener
  static const PARAM_REFLECTIONS_DELAY = 5;

  /// from: static public final int PARAM_REFLECTIONS_LEVEL
  ///
  /// Early reflections level. Parameter ID for OnParameterChangeListener
  static const PARAM_REFLECTIONS_LEVEL = 4;

  /// from: static public final int PARAM_REVERB_DELAY
  ///
  /// Reverb delay. Parameter ID for OnParameterChangeListener
  static const PARAM_REVERB_DELAY = 7;

  /// from: static public final int PARAM_REVERB_LEVEL
  ///
  /// Reverb level. Parameter ID for OnParameterChangeListener
  static const PARAM_REVERB_LEVEL = 6;

  /// from: static public final int PARAM_ROOM_HF_LEVEL
  ///
  /// Room HF level. Parameter ID for OnParameterChangeListener
  static const PARAM_ROOM_HF_LEVEL = 1;

  /// from: static public final int PARAM_ROOM_LEVEL
  ///
  /// Room level. Parameter ID for OnParameterChangeListener
  static const PARAM_ROOM_LEVEL = 0;

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int priority, int audioSession)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Class constructor.
  ///@param priority the priority level requested by the application for controlling the
  /// EnvironmentalReverb engine. As the same engine can be shared by several applications, this
  /// parameter indicates how much the requesting application needs control of effect parameters.
  /// The normal priority is 0, above normal is a positive number, below normal a negative number.
  ///@param audioSession system wide unique audio session identifier. If audioSession
  ///  is not 0, the EnvironmentalReverb will be attached to the MediaPlayer or AudioTrack in the
  ///  same audio session. Otherwise, the EnvironmentalReverb will apply to the output mix.
  ///  As the EnvironmentalReverb is an auxiliary effect it is recommended to instantiate it on
  ///  audio session 0 and to attach it to the MediaPLayer auxiliary output.
  ///@throws java.lang.IllegalArgumentException
  ///@throws java.lang.UnsupportedOperationException
  ///@throws java.lang.RuntimeException
  EnvironmentalReverb.ctor1(int priority, int audioSession)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [priority, audioSession]).object);

  static final _id_setRoomLevel =
      jniAccessors.getMethodIDOf(_classRef, "setRoomLevel", "(S)V");

  /// from: public void setRoomLevel(short room)
  ///
  /// Sets the master volume level of the environmental reverb effect.
  ///@param room room level in millibels. The valid range is [-9000, 0].
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setRoomLevel(int room) => jniAccessors.callMethodWithArgs(
      reference, _id_setRoomLevel, jni.JniType.voidType, [room]).check();

  static final _id_getRoomLevel =
      jniAccessors.getMethodIDOf(_classRef, "getRoomLevel", "()S");

  /// from: public short getRoomLevel()
  ///
  /// Gets the master volume level of the environmental reverb effect.
  ///@return the room level in millibels.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getRoomLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getRoomLevel, jni.JniType.shortType, []).short;

  static final _id_setRoomHFLevel =
      jniAccessors.getMethodIDOf(_classRef, "setRoomHFLevel", "(S)V");

  /// from: public void setRoomHFLevel(short roomHF)
  ///
  /// Sets the volume level at 5 kHz relative to the volume level at low frequencies of the
  /// overall reverb effect.
  /// This controls a low-pass filter that will reduce the level of the high-frequency.
  ///@param roomHF high frequency attenuation level in millibels. The valid range is [-9000, 0].
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setRoomHFLevel(int roomHF) => jniAccessors.callMethodWithArgs(
      reference, _id_setRoomHFLevel, jni.JniType.voidType, [roomHF]).check();

  static final _id_getRoomHFLevel =
      jniAccessors.getMethodIDOf(_classRef, "getRoomHFLevel", "()S");

  /// from: public short getRoomHFLevel()
  ///
  /// Gets the room HF level.
  ///@return the room HF level in millibels.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getRoomHFLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getRoomHFLevel, jni.JniType.shortType, []).short;

  static final _id_setDecayTime =
      jniAccessors.getMethodIDOf(_classRef, "setDecayTime", "(I)V");

  /// from: public void setDecayTime(int decayTime)
  ///
  /// Sets the time taken for the level of reverberation to decay by 60 dB.
  ///@param decayTime decay time in milliseconds. The valid range is [100, 20000].
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setDecayTime(int decayTime) => jniAccessors.callMethodWithArgs(
      reference, _id_setDecayTime, jni.JniType.voidType, [decayTime]).check();

  static final _id_getDecayTime =
      jniAccessors.getMethodIDOf(_classRef, "getDecayTime", "()I");

  /// from: public int getDecayTime()
  ///
  /// Gets the decay time.
  ///@return the decay time in milliseconds.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getDecayTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getDecayTime, jni.JniType.intType, []).integer;

  static final _id_setDecayHFRatio =
      jniAccessors.getMethodIDOf(_classRef, "setDecayHFRatio", "(S)V");

  /// from: public void setDecayHFRatio(short decayHFRatio)
  ///
  /// Sets the ratio of high frequency decay time (at 5 kHz) relative to the decay time at low
  /// frequencies.
  ///@param decayHFRatio high frequency decay ratio using a permille scale. The valid range is
  /// [100, 2000]. A ratio of 1000 indicates that all frequencies decay at the same rate.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setDecayHFRatio(int decayHFRatio) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setDecayHFRatio,
      jni.JniType.voidType,
      [decayHFRatio]).check();

  static final _id_getDecayHFRatio =
      jniAccessors.getMethodIDOf(_classRef, "getDecayHFRatio", "()S");

  /// from: public short getDecayHFRatio()
  ///
  /// Gets the ratio of high frequency decay time (at 5 kHz) relative to low frequencies.
  ///@return the decay HF ration. See \#setDecayHFRatio(short) for units.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getDecayHFRatio() => jniAccessors.callMethodWithArgs(
      reference, _id_getDecayHFRatio, jni.JniType.shortType, []).short;

  static final _id_setReflectionsLevel =
      jniAccessors.getMethodIDOf(_classRef, "setReflectionsLevel", "(S)V");

  /// from: public void setReflectionsLevel(short reflectionsLevel)
  ///
  /// Sets the volume level of the early reflections.
  /// This level is combined with the overall room level
  /// (set using \#setRoomLevel(short)).
  ///@param reflectionsLevel reflection level in millibels. The valid range is [-9000, 1000].
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setReflectionsLevel(int reflectionsLevel) =>
      jniAccessors.callMethodWithArgs(reference, _id_setReflectionsLevel,
          jni.JniType.voidType, [reflectionsLevel]).check();

  static final _id_getReflectionsLevel =
      jniAccessors.getMethodIDOf(_classRef, "getReflectionsLevel", "()S");

  /// from: public short getReflectionsLevel()
  ///
  /// Gets the volume level of the early reflections.
  ///@return the early reflections level in millibels.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getReflectionsLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getReflectionsLevel, jni.JniType.shortType, []).short;

  static final _id_setReflectionsDelay =
      jniAccessors.getMethodIDOf(_classRef, "setReflectionsDelay", "(I)V");

  /// from: public void setReflectionsDelay(int reflectionsDelay)
  ///
  /// Sets the delay time for the early reflections.
  /// This method sets the time between when the direct path is heard and when the first
  /// reflection is heard.
  ///@param reflectionsDelay reflections delay in milliseconds. The valid range is [0, 300].
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setReflectionsDelay(int reflectionsDelay) =>
      jniAccessors.callMethodWithArgs(reference, _id_setReflectionsDelay,
          jni.JniType.voidType, [reflectionsDelay]).check();

  static final _id_getReflectionsDelay =
      jniAccessors.getMethodIDOf(_classRef, "getReflectionsDelay", "()I");

  /// from: public int getReflectionsDelay()
  ///
  /// Gets the reflections delay.
  ///@return the early reflections delay in milliseconds.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getReflectionsDelay() => jniAccessors.callMethodWithArgs(
      reference, _id_getReflectionsDelay, jni.JniType.intType, []).integer;

  static final _id_setReverbLevel =
      jniAccessors.getMethodIDOf(_classRef, "setReverbLevel", "(S)V");

  /// from: public void setReverbLevel(short reverbLevel)
  ///
  /// Sets the volume level of the late reverberation.
  /// This level is combined with the overall room level (set using \#setRoomLevel(short)).
  ///@param reverbLevel reverb level in millibels. The valid range is [-9000, 2000].
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setReverbLevel(int reverbLevel) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setReverbLevel,
      jni.JniType.voidType,
      [reverbLevel]).check();

  static final _id_getReverbLevel =
      jniAccessors.getMethodIDOf(_classRef, "getReverbLevel", "()S");

  /// from: public short getReverbLevel()
  ///
  /// Gets the reverb level.
  ///@return the reverb level in millibels.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getReverbLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getReverbLevel, jni.JniType.shortType, []).short;

  static final _id_setReverbDelay =
      jniAccessors.getMethodIDOf(_classRef, "setReverbDelay", "(I)V");

  /// from: public void setReverbDelay(int reverbDelay)
  ///
  /// Sets the time between the first reflection and the reverberation.
  ///@param reverbDelay reverb delay in milliseconds. The valid range is [0, 100].
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setReverbDelay(int reverbDelay) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setReverbDelay,
      jni.JniType.voidType,
      [reverbDelay]).check();

  static final _id_getReverbDelay =
      jniAccessors.getMethodIDOf(_classRef, "getReverbDelay", "()I");

  /// from: public int getReverbDelay()
  ///
  /// Gets the reverb delay.
  ///@return the reverb delay in milliseconds.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getReverbDelay() => jniAccessors.callMethodWithArgs(
      reference, _id_getReverbDelay, jni.JniType.intType, []).integer;

  static final _id_setDiffusion =
      jniAccessors.getMethodIDOf(_classRef, "setDiffusion", "(S)V");

  /// from: public void setDiffusion(short diffusion)
  ///
  /// Sets the echo density in the late reverberation decay.
  /// The scale should approximately map linearly to the perceived change in reverberation.
  ///@param diffusion diffusion specified using a permille scale. The diffusion valid range is
  /// [0, 1000]. A value of 1000 o/oo indicates a smooth reverberation decay.
  /// Values below this level give a more <i>grainy</i> character.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setDiffusion(int diffusion) => jniAccessors.callMethodWithArgs(
      reference, _id_setDiffusion, jni.JniType.voidType, [diffusion]).check();

  static final _id_getDiffusion =
      jniAccessors.getMethodIDOf(_classRef, "getDiffusion", "()S");

  /// from: public short getDiffusion()
  ///
  /// Gets diffusion level.
  ///@return the diffusion level. See \#setDiffusion(short) for units.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getDiffusion() => jniAccessors.callMethodWithArgs(
      reference, _id_getDiffusion, jni.JniType.shortType, []).short;

  static final _id_setDensity =
      jniAccessors.getMethodIDOf(_classRef, "setDensity", "(S)V");

  /// from: public void setDensity(short density)
  ///
  /// Controls the modal density of the late reverberation decay.
  ///  The scale should approximately map linearly to the perceived change in reverberation.
  /// A lower density creates a hollow sound that is useful for simulating small reverberation
  /// spaces such as bathrooms.
  ///@param density density specified using a permille scale. The valid range is [0, 1000].
  /// A value of 1000 o/oo indicates a natural sounding reverberation. Values below this level
  /// produce a more colored effect.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setDensity(int density) => jniAccessors.callMethodWithArgs(
      reference, _id_setDensity, jni.JniType.voidType, [density]).check();

  static final _id_getDensity =
      jniAccessors.getMethodIDOf(_classRef, "getDensity", "()S");

  /// from: public short getDensity()
  ///
  /// Gets the density level.
  ///@return the density level. See \#setDiffusion(short) for units.
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  int getDensity() => jniAccessors.callMethodWithArgs(
      reference, _id_getDensity, jni.JniType.shortType, []).short;

  static final _id_setParameterListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setParameterListener",
      "(Landroid/media/audiofx/EnvironmentalReverb\$OnParameterChangeListener;)V");

  /// from: public void setParameterListener(android.media.audiofx.EnvironmentalReverb.OnParameterChangeListener listener)
  ///
  /// Registers an OnParameterChangeListener interface.
  ///@param listener OnParameterChangeListener interface registered
  void setParameterListener(
          EnvironmentalReverb_OnParameterChangeListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setParameterListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_getProperties = jniAccessors.getMethodIDOf(
      _classRef,
      "getProperties",
      "()Landroid/media/audiofx/EnvironmentalReverb\$Settings;");

  /// from: public android.media.audiofx.EnvironmentalReverb.Settings getProperties()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the environmental reverb properties. This method is useful when a snapshot of current
  /// reverb settings must be saved by the application.
  ///@return an EnvironmentalReverb.Settings object containing all current parameters values
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  EnvironmentalReverb_Settings getProperties() =>
      EnvironmentalReverb_Settings.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getProperties, jni.JniType.objectType, []).object);

  static final _id_setProperties = jniAccessors.getMethodIDOf(
      _classRef,
      "setProperties",
      "(Landroid/media/audiofx/EnvironmentalReverb\$Settings;)V");

  /// from: public void setProperties(android.media.audiofx.EnvironmentalReverb.Settings settings)
  ///
  /// Sets the environmental reverb properties. This method is useful when reverb settings have to
  /// be applied from a previous backup.
  ///@param settings a EnvironmentalReverb.Settings object containing the properties to apply
  ///@throws IllegalStateException
  ///@throws IllegalArgumentException
  ///@throws UnsupportedOperationException
  void setProperties(EnvironmentalReverb_Settings settings) =>
      jniAccessors.callMethodWithArgs(reference, _id_setProperties,
          jni.JniType.voidType, [settings.reference]).check();
}

/// from: android.media.audiofx.EnvironmentalReverb$Settings
///
/// The Settings class regroups all environmental reverb parameters. It is used in
/// conjuntion with getProperties() and setProperties() methods to backup and restore
/// all parameters in a single call.
class EnvironmentalReverb_Settings extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/audiofx/EnvironmentalReverb\$Settings");
  EnvironmentalReverb_Settings.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_decayHFRatio =
      jniAccessors.getFieldIDOf(_classRef, "decayHFRatio", "S");

  /// from: public short decayHFRatio
  int get decayHFRatio => jniAccessors
      .getField(reference, _id_decayHFRatio, jni.JniType.shortType)
      .short;

  /// from: public short decayHFRatio
  set decayHFRatio(int value) =>
      jniEnv.SetShortField(reference, _id_decayHFRatio, value);

  static final _id_decayTime =
      jniAccessors.getFieldIDOf(_classRef, "decayTime", "I");

  /// from: public int decayTime
  int get decayTime => jniAccessors
      .getField(reference, _id_decayTime, jni.JniType.intType)
      .integer;

  /// from: public int decayTime
  set decayTime(int value) =>
      jniEnv.SetIntField(reference, _id_decayTime, value);

  static final _id_density =
      jniAccessors.getFieldIDOf(_classRef, "density", "S");

  /// from: public short density
  int get density => jniAccessors
      .getField(reference, _id_density, jni.JniType.shortType)
      .short;

  /// from: public short density
  set density(int value) => jniEnv.SetShortField(reference, _id_density, value);

  static final _id_diffusion =
      jniAccessors.getFieldIDOf(_classRef, "diffusion", "S");

  /// from: public short diffusion
  int get diffusion => jniAccessors
      .getField(reference, _id_diffusion, jni.JniType.shortType)
      .short;

  /// from: public short diffusion
  set diffusion(int value) =>
      jniEnv.SetShortField(reference, _id_diffusion, value);

  static final _id_reflectionsDelay =
      jniAccessors.getFieldIDOf(_classRef, "reflectionsDelay", "I");

  /// from: public int reflectionsDelay
  int get reflectionsDelay => jniAccessors
      .getField(reference, _id_reflectionsDelay, jni.JniType.intType)
      .integer;

  /// from: public int reflectionsDelay
  set reflectionsDelay(int value) =>
      jniEnv.SetIntField(reference, _id_reflectionsDelay, value);

  static final _id_reflectionsLevel =
      jniAccessors.getFieldIDOf(_classRef, "reflectionsLevel", "S");

  /// from: public short reflectionsLevel
  int get reflectionsLevel => jniAccessors
      .getField(reference, _id_reflectionsLevel, jni.JniType.shortType)
      .short;

  /// from: public short reflectionsLevel
  set reflectionsLevel(int value) =>
      jniEnv.SetShortField(reference, _id_reflectionsLevel, value);

  static final _id_reverbDelay =
      jniAccessors.getFieldIDOf(_classRef, "reverbDelay", "I");

  /// from: public int reverbDelay
  int get reverbDelay => jniAccessors
      .getField(reference, _id_reverbDelay, jni.JniType.intType)
      .integer;

  /// from: public int reverbDelay
  set reverbDelay(int value) =>
      jniEnv.SetIntField(reference, _id_reverbDelay, value);

  static final _id_reverbLevel =
      jniAccessors.getFieldIDOf(_classRef, "reverbLevel", "S");

  /// from: public short reverbLevel
  int get reverbLevel => jniAccessors
      .getField(reference, _id_reverbLevel, jni.JniType.shortType)
      .short;

  /// from: public short reverbLevel
  set reverbLevel(int value) =>
      jniEnv.SetShortField(reference, _id_reverbLevel, value);

  static final _id_roomHFLevel =
      jniAccessors.getFieldIDOf(_classRef, "roomHFLevel", "S");

  /// from: public short roomHFLevel
  int get roomHFLevel => jniAccessors
      .getField(reference, _id_roomHFLevel, jni.JniType.shortType)
      .short;

  /// from: public short roomHFLevel
  set roomHFLevel(int value) =>
      jniEnv.SetShortField(reference, _id_roomHFLevel, value);

  static final _id_roomLevel =
      jniAccessors.getFieldIDOf(_classRef, "roomLevel", "S");

  /// from: public short roomLevel
  int get roomLevel => jniAccessors
      .getField(reference, _id_roomLevel, jni.JniType.shortType)
      .short;

  /// from: public short roomLevel
  set roomLevel(int value) =>
      jniEnv.SetShortField(reference, _id_roomLevel, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  EnvironmentalReverb_Settings()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String settings)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Settings class constructor from a key=value; pairs formatted string. The string is
  /// typically returned by Settings.toString() method.
  ///@throws IllegalArgumentException if the string is not correctly formatted.
  EnvironmentalReverb_Settings.ctor1(jni.JniString settings)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [settings.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.media.audiofx.EnvironmentalReverb$OnParameterChangeListener
///
/// The OnParameterChangeListener interface defines a method called by the EnvironmentalReverb
/// when a parameter value has changed.
class EnvironmentalReverb_OnParameterChangeListener extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/media/audiofx/EnvironmentalReverb\$OnParameterChangeListener");
  EnvironmentalReverb_OnParameterChangeListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onParameterChange = jniAccessors.getMethodIDOf(_classRef,
      "onParameterChange", "(Landroid/media/audiofx/EnvironmentalReverb;III)V");

  /// from: public abstract void onParameterChange(android.media.audiofx.EnvironmentalReverb effect, int status, int param, int value)
  ///
  /// Method called when a parameter value has changed. The method is called only if the
  /// parameter was changed by another application having the control of the same
  /// EnvironmentalReverb engine.
  ///@param effect the EnvironmentalReverb on which the interface is registered.
  ///@param status status of the set parameter operation.
  ///@param param ID of the modified parameter. See \#PARAM_ROOM_LEVEL ...
  ///@param value the new parameter value.
  void onParameterChange(
          EnvironmentalReverb effect, int status, int param, int value) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onParameterChange,
          jni.JniType.voidType,
          [effect.reference, status, param, value]).check();
}
