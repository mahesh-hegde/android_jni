// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../graphics/Bitmap.dart" as bitmap_;

import "../graphics/PointF.dart" as pointf_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.FaceDetector
///
/// Identifies the faces of people in a
/// android.graphics.Bitmap graphic object.
class FaceDetector extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/FaceDetector");
  FaceDetector.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(III)V");

  /// from: public void <init>(int width, int height, int maxFaces)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a FaceDetector, configured with the size of the images to
  /// be analysed and the maximum number of faces that can be detected.
  /// These parameters cannot be changed once the object is constructed.
  /// Note that the width of the image must be even.
  ///@param width the width of the image
  ///@param height the height of the image
  ///@param maxFaces the maximum number of faces to identify
  FaceDetector(int width, int height, int maxFaces)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [width, height, maxFaces]).object);

  static final _id_findFaces = jniAccessors.getMethodIDOf(
      _classRef,
      "findFaces",
      "(Landroid/graphics/Bitmap;[Landroid/media/FaceDetector\$Face;)I");

  /// from: public int findFaces(android.graphics.Bitmap bitmap, android.media.FaceDetector.Face[] faces)
  ///
  /// Finds all the faces found in a given android.graphics.Bitmap.
  /// The supplied array is populated with FaceDetector.Faces for each
  /// face found. The bitmap must be in 565 format (for now).
  ///@param bitmap the android.graphics.Bitmap graphic to be analyzed
  ///@param faces an array in which to place all found
  ///               FaceDetector.Faces. The array must be sized equal
  ///               to the <var>maxFaces</var> value set at initialization
  ///@return the number of faces found
  ///@throws IllegalArgumentException if the Bitmap dimensions don't match
  ///               the dimensions defined at initialization or the given array
  ///               is not sized equal to the <var>maxFaces</var> value defined
  ///               at initialization
  int findFaces(bitmap_.Bitmap bitmap, jni.JniObject faces) =>
      jniAccessors.callMethodWithArgs(reference, _id_findFaces,
          jni.JniType.intType, [bitmap.reference, faces.reference]).integer;

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();
}

/// from: android.media.FaceDetector$Face
///
/// A Face contains all the information identifying the location
/// of a face in a bitmap.
class FaceDetector_Face extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/FaceDetector\$Face");
  FaceDetector_Face.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final float CONFIDENCE_THRESHOLD
  ///
  /// The minimum confidence factor of good face recognition
  static const CONFIDENCE_THRESHOLD = 0.4;

  /// from: static public final int EULER_X
  ///
  /// The x-axis Euler angle of a face.
  static const EULER_X = 0;

  /// from: static public final int EULER_Y
  ///
  /// The y-axis Euler angle of a face.
  static const EULER_Y = 1;

  /// from: static public final int EULER_Z
  ///
  /// The z-axis Euler angle of a face.
  static const EULER_Z = 2;

  static final _id_confidence =
      jniAccessors.getMethodIDOf(_classRef, "confidence", "()F");

  /// from: public float confidence()
  ///
  /// Returns a confidence factor between 0 and 1. This indicates how
  /// certain what has been found is actually a face. A confidence
  /// factor above 0.3 is usually good enough.
  double confidence() => jniAccessors.callMethodWithArgs(
      reference, _id_confidence, jni.JniType.floatType, []).float;

  static final _id_getMidPoint = jniAccessors.getMethodIDOf(
      _classRef, "getMidPoint", "(Landroid/graphics/PointF;)V");

  /// from: public void getMidPoint(android.graphics.PointF point)
  ///
  /// Sets the position of the mid-point between the eyes.
  ///@param point the PointF coordinates (float values) of the
  ///              face's mid-point
  void getMidPoint(pointf_.PointF point) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getMidPoint,
      jni.JniType.voidType,
      [point.reference]).check();

  static final _id_eyesDistance =
      jniAccessors.getMethodIDOf(_classRef, "eyesDistance", "()F");

  /// from: public float eyesDistance()
  ///
  /// Returns the distance between the eyes.
  double eyesDistance() => jniAccessors.callMethodWithArgs(
      reference, _id_eyesDistance, jni.JniType.floatType, []).float;

  static final _id_pose = jniAccessors.getMethodIDOf(_classRef, "pose", "(I)F");

  /// from: public float pose(int euler)
  ///
  /// Returns the face's pose. That is, the rotations around either
  /// the X, Y or Z axis (the positions in 3-dimensional Euclidean space).
  ///@param euler the Euler axis to retrieve an angle from
  ///              (<var>EULER_X</var>, <var>EULER_Y</var> or
  ///              <var>EULER_Z</var>)
  ///@return the Euler angle of the of the face, for the given axis
  double pose(int euler) => jniAccessors.callMethodWithArgs(
      reference, _id_pose, jni.JniType.floatType, [euler]).float;
}
