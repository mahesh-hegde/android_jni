// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "AudioAttributes.dart" as audioattributes_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.Ringtone
///
/// Ringtone provides a quick method for playing a ringtone, notification, or
/// other similar types of sounds.
///
/// For ways of retrieving Ringtone objects or to show a ringtone
/// picker, see RingtoneManager.
///@see RingtoneManager
class Ringtone extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/media/Ringtone");
  Ringtone.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;Z)V");

  /// from: void <init>(android.content.Context context, boolean allowRemote)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@hide }
  Ringtone(context_.Context context, bool allowRemote)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference, allowRemote]).object);

  static final _id_setStreamType =
      jniAccessors.getMethodIDOf(_classRef, "setStreamType", "(I)V");

  /// from: public void setStreamType(int streamType)
  ///
  /// Sets the stream type where this ringtone will be played.
  ///@param streamType The stream, see AudioManager.
  ///@deprecated use \#setAudioAttributes(AudioAttributes)
  void setStreamType(int streamType) => jniAccessors.callMethodWithArgs(
      reference, _id_setStreamType, jni.JniType.voidType, [streamType]).check();

  static final _id_getStreamType =
      jniAccessors.getMethodIDOf(_classRef, "getStreamType", "()I");

  /// from: public int getStreamType()
  ///
  /// Gets the stream type where this ringtone will be played.
  ///@return The stream type, see AudioManager.
  ///@deprecated use of stream types is deprecated, see
  ///     \#setAudioAttributes(AudioAttributes)
  int getStreamType() => jniAccessors.callMethodWithArgs(
      reference, _id_getStreamType, jni.JniType.intType, []).integer;

  static final _id_setAudioAttributes = jniAccessors.getMethodIDOf(
      _classRef, "setAudioAttributes", "(Landroid/media/AudioAttributes;)V");

  /// from: public void setAudioAttributes(android.media.AudioAttributes attributes)
  ///
  /// Sets the AudioAttributes for this ringtone.
  ///@param attributes the non-null attributes characterizing this ringtone.
  void setAudioAttributes(audioattributes_.AudioAttributes attributes) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAudioAttributes,
          jni.JniType.voidType, [attributes.reference]).check();

  static final _id_getAudioAttributes = jniAccessors.getMethodIDOf(
      _classRef, "getAudioAttributes", "()Landroid/media/AudioAttributes;");

  /// from: public android.media.AudioAttributes getAudioAttributes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the AudioAttributes used by this object.
  ///@return the AudioAttributes that were set with
  ///     \#setAudioAttributes(AudioAttributes) or the default attributes if none were set.
  audioattributes_.AudioAttributes getAudioAttributes() =>
      audioattributes_.AudioAttributes.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getAudioAttributes,
          jni.JniType.objectType, []).object);

  static final _id_setLooping =
      jniAccessors.getMethodIDOf(_classRef, "setLooping", "(Z)V");

  /// from: public void setLooping(boolean looping)
  ///
  /// Sets the player to be looping or non-looping.
  ///@param looping whether to loop or not.
  void setLooping(bool looping) => jniAccessors.callMethodWithArgs(
      reference, _id_setLooping, jni.JniType.voidType, [looping]).check();

  static final _id_isLooping =
      jniAccessors.getMethodIDOf(_classRef, "isLooping", "()Z");

  /// from: public boolean isLooping()
  ///
  /// Returns whether the looping mode was enabled on this player.
  ///@return true if this player loops when playing.
  bool isLooping() => jniAccessors.callMethodWithArgs(
      reference, _id_isLooping, jni.JniType.booleanType, []).boolean;

  static final _id_setVolume =
      jniAccessors.getMethodIDOf(_classRef, "setVolume", "(F)V");

  /// from: public void setVolume(float volume)
  ///
  /// Sets the volume on this player.
  ///@param volume a raw scalar in range 0.0 to 1.0, where 0.0 mutes this player, and 1.0
  ///   corresponds to no attenuation being applied.
  void setVolume(double volume) => jniAccessors.callMethodWithArgs(
      reference, _id_setVolume, jni.JniType.voidType, [volume]).check();

  static final _id_getVolume =
      jniAccessors.getMethodIDOf(_classRef, "getVolume", "()F");

  /// from: public float getVolume()
  ///
  /// Returns the volume scalar set on this player.
  ///@return a value between 0.0f and 1.0f.
  double getVolume() => jniAccessors.callMethodWithArgs(
      reference, _id_getVolume, jni.JniType.floatType, []).float;

  static final _id_getTitle = jniAccessors.getMethodIDOf(
      _classRef, "getTitle", "(Landroid/content/Context;)Ljava/lang/String;");

  /// from: public java.lang.String getTitle(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a human-presentable title for ringtone. Looks in media
  /// content provider. If not in either, uses the filename
  ///@param context A context used for querying.
  jni.JniString getTitle(context_.Context context) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getTitle, jni.JniType.objectType, [context.reference]).object);

  static final _id_play = jniAccessors.getMethodIDOf(_classRef, "play", "()V");

  /// from: public void play()
  ///
  /// Plays the ringtone.
  void play() => jniAccessors.callMethodWithArgs(
      reference, _id_play, jni.JniType.voidType, []).check();

  static final _id_stop = jniAccessors.getMethodIDOf(_classRef, "stop", "()V");

  /// from: public void stop()
  ///
  /// Stops a playing ringtone.
  void stop() => jniAccessors.callMethodWithArgs(
      reference, _id_stop, jni.JniType.voidType, []).check();

  static final _id_isPlaying =
      jniAccessors.getMethodIDOf(_classRef, "isPlaying", "()Z");

  /// from: public boolean isPlaying()
  ///
  /// Whether this ringtone is currently playing.
  ///@return True if playing, false otherwise.
  bool isPlaying() => jniAccessors.callMethodWithArgs(
      reference, _id_isPlaying, jni.JniType.booleanType, []).boolean;

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();
}
