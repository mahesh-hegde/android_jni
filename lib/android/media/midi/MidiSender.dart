// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "MidiReceiver.dart" as midireceiver_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.midi.MidiSender
///
/// Interface provided by a device to allow attaching
/// MidiReceivers to a MIDI device.
class MidiSender extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/midi/MidiSender");
  MidiSender.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MidiSender()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_connect = jniAccessors.getMethodIDOf(
      _classRef, "connect", "(Landroid/media/midi/MidiReceiver;)V");

  /// from: public void connect(android.media.midi.MidiReceiver receiver)
  ///
  /// Connects a MidiReceiver to the sender
  ///@param receiver the receiver to connect
  void connect(midireceiver_.MidiReceiver receiver) =>
      jniAccessors.callMethodWithArgs(reference, _id_connect,
          jni.JniType.voidType, [receiver.reference]).check();

  static final _id_disconnect = jniAccessors.getMethodIDOf(
      _classRef, "disconnect", "(Landroid/media/midi/MidiReceiver;)V");

  /// from: public void disconnect(android.media.midi.MidiReceiver receiver)
  ///
  /// Disconnects a MidiReceiver from the sender
  ///@param receiver the receiver to disconnect
  void disconnect(midireceiver_.MidiReceiver receiver) =>
      jniAccessors.callMethodWithArgs(reference, _id_disconnect,
          jni.JniType.voidType, [receiver.reference]).check();

  static final _id_onConnect = jniAccessors.getMethodIDOf(
      _classRef, "onConnect", "(Landroid/media/midi/MidiReceiver;)V");

  /// from: public abstract void onConnect(android.media.midi.MidiReceiver receiver)
  ///
  /// Called to connect a MidiReceiver to the sender
  ///@param receiver the receiver to connect
  void onConnect(midireceiver_.MidiReceiver receiver) =>
      jniAccessors.callMethodWithArgs(reference, _id_onConnect,
          jni.JniType.voidType, [receiver.reference]).check();

  static final _id_onDisconnect = jniAccessors.getMethodIDOf(
      _classRef, "onDisconnect", "(Landroid/media/midi/MidiReceiver;)V");

  /// from: public abstract void onDisconnect(android.media.midi.MidiReceiver receiver)
  ///
  /// Called to disconnect a MidiReceiver from the sender
  ///@param receiver the receiver to disconnect
  void onDisconnect(midireceiver_.MidiReceiver receiver) =>
      jniAccessors.callMethodWithArgs(reference, _id_onDisconnect,
          jni.JniType.voidType, [receiver.reference]).check();
}
