// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "MidiReceiver.dart" as midireceiver_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.midi.MidiInputPort
///
/// This class is used for sending data to a port on a MIDI device
class MidiInputPort extends midireceiver_.MidiReceiver {
  static final _classRef =
      jniAccessors.getClassOf("android/media/midi/MidiInputPort");
  MidiInputPort.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getPortNumber =
      jniAccessors.getMethodIDOf(_classRef, "getPortNumber", "()I");

  /// from: public int getPortNumber()
  ///
  /// Returns the port number of this port
  ///@return the port's port number
  int getPortNumber() => jniAccessors.callMethodWithArgs(
      reference, _id_getPortNumber, jni.JniType.intType, []).integer;

  static final _id_onSend =
      jniAccessors.getMethodIDOf(_classRef, "onSend", "([BIIJ)V");

  /// from: public void onSend(byte[] msg, int offset, int count, long timestamp)
  void onSend(jni.JniObject msg, int offset, int count, int timestamp) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onSend,
          jni.JniType.voidType,
          [msg.reference, offset, count, timestamp]).check();

  static final _id_onFlush =
      jniAccessors.getMethodIDOf(_classRef, "onFlush", "()V");

  /// from: public void onFlush()
  void onFlush() => jniAccessors.callMethodWithArgs(
      reference, _id_onFlush, jni.JniType.voidType, []).check();

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();
}
