// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "MidiSender.dart" as midisender_;

import "MidiReceiver.dart" as midireceiver_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.midi.MidiOutputPort
///
/// This class is used for receiving data from a port on a MIDI device
class MidiOutputPort extends midisender_.MidiSender {
  static final _classRef =
      jniAccessors.getClassOf("android/media/midi/MidiOutputPort");
  MidiOutputPort.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/io/FileDescriptor;I)V");

  /// from: void <init>(java.io.FileDescriptor fd, int portNumber)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MidiOutputPort.ctor1(jni.JniObject fd, int portNumber)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [fd.reference, portNumber]).object);

  static final _id_getPortNumber =
      jniAccessors.getMethodIDOf(_classRef, "getPortNumber", "()I");

  /// from: public int getPortNumber()
  ///
  /// Returns the port number of this port
  ///@return the port's port number
  int getPortNumber() => jniAccessors.callMethodWithArgs(
      reference, _id_getPortNumber, jni.JniType.intType, []).integer;

  static final _id_onConnect = jniAccessors.getMethodIDOf(
      _classRef, "onConnect", "(Landroid/media/midi/MidiReceiver;)V");

  /// from: public void onConnect(android.media.midi.MidiReceiver receiver)
  void onConnect(midireceiver_.MidiReceiver receiver) =>
      jniAccessors.callMethodWithArgs(reference, _id_onConnect,
          jni.JniType.voidType, [receiver.reference]).check();

  static final _id_onDisconnect = jniAccessors.getMethodIDOf(
      _classRef, "onDisconnect", "(Landroid/media/midi/MidiReceiver;)V");

  /// from: public void onDisconnect(android.media.midi.MidiReceiver receiver)
  void onDisconnect(midireceiver_.MidiReceiver receiver) =>
      jniAccessors.callMethodWithArgs(reference, _id_onDisconnect,
          jni.JniType.voidType, [receiver.reference]).check();

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();
}
