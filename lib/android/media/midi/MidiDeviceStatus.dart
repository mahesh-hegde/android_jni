// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "MidiDeviceInfo.dart" as midideviceinfo_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.midi.MidiDeviceStatus
///
/// This is an immutable class that describes the current status of a MIDI device's ports.
class MidiDeviceStatus extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/midi/MidiDeviceStatus");
  MidiDeviceStatus.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.media.midi.MidiDeviceStatus> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/media/midi/MidiDeviceInfo;)V");

  /// from: void <init>(android.media.midi.MidiDeviceInfo deviceInfo)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a MidiDeviceStatus with zero for all port open counts
  ///@hide
  MidiDeviceStatus(midideviceinfo_.MidiDeviceInfo deviceInfo)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [deviceInfo.reference]).object);

  static final _id_getDeviceInfo = jniAccessors.getMethodIDOf(
      _classRef, "getDeviceInfo", "()Landroid/media/midi/MidiDeviceInfo;");

  /// from: public android.media.midi.MidiDeviceInfo getDeviceInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the MidiDeviceInfo of the device.
  ///@return the device info
  midideviceinfo_.MidiDeviceInfo getDeviceInfo() =>
      midideviceinfo_.MidiDeviceInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDeviceInfo, jni.JniType.objectType, []).object);

  static final _id_isInputPortOpen =
      jniAccessors.getMethodIDOf(_classRef, "isInputPortOpen", "(I)Z");

  /// from: public boolean isInputPortOpen(int portNumber)
  ///
  /// Returns true if an input port is open.
  /// An input port can only be opened by one client at a time.
  ///@param portNumber the input port's port number
  ///@return input port open status
  bool isInputPortOpen(int portNumber) => jniAccessors.callMethodWithArgs(
      reference,
      _id_isInputPortOpen,
      jni.JniType.booleanType,
      [portNumber]).boolean;

  static final _id_getOutputPortOpenCount =
      jniAccessors.getMethodIDOf(_classRef, "getOutputPortOpenCount", "(I)I");

  /// from: public int getOutputPortOpenCount(int portNumber)
  ///
  /// Returns the number of clients currently connected to the specified output port.
  /// Unlike input ports, an output port can be opened by multiple clients at the same time.
  ///@param portNumber the output port's port number
  ///@return output port open count
  int getOutputPortOpenCount(int portNumber) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getOutputPortOpenCount,
      jni.JniType.intType,
      [portNumber]).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}
