// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.MediaCrypto
///
/// MediaCrypto class can be used in conjunction with android.media.MediaCodec
/// to decode encrypted media data.
///
/// Crypto schemes are assigned 16 byte UUIDs,
/// the method \#isCryptoSchemeSupported can be used to query if a given
/// scheme is supported on the device.
class MediaCrypto extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/media/MediaCrypto");
  MediaCrypto.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/UUID;[B)V");

  /// from: public void <init>(java.util.UUID uuid, byte[] initData)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Instantiate a MediaCrypto object using opaque, crypto scheme specific
  /// data.
  ///@param uuid The UUID of the crypto scheme.
  /// This value must never be {@code null}.
  ///@param initData Opaque initialization data specific to the crypto scheme.
  ///
  /// This value must never be {@code null}.
  MediaCrypto(jni.JniObject uuid, jni.JniObject initData)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [uuid.reference, initData.reference]).object);

  static final _id_isCryptoSchemeSupported = jniAccessors.getStaticMethodIDOf(
      _classRef, "isCryptoSchemeSupported", "(Ljava/util/UUID;)Z");

  /// from: static public boolean isCryptoSchemeSupported(java.util.UUID uuid)
  ///
  /// Query if the given scheme identified by its UUID is supported on
  /// this device.
  ///@param uuid The UUID of the crypto scheme.
  ///
  /// This value must never be {@code null}.
  static bool isCryptoSchemeSupported(jni.JniObject uuid) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_isCryptoSchemeSupported,
          jni.JniType.booleanType,
          [uuid.reference]).boolean;

  static final _id_requiresSecureDecoderComponent = jniAccessors.getMethodIDOf(
      _classRef, "requiresSecureDecoderComponent", "(Ljava/lang/String;)Z");

  /// from: public native boolean requiresSecureDecoderComponent(java.lang.String mime)
  ///
  /// Query if the crypto scheme requires the use of a secure decoder
  /// to decode data of the given mime type.
  ///@param mime The mime type of the media data
  ///
  /// This value must never be {@code null}.
  bool requiresSecureDecoderComponent(jni.JniString mime) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_requiresSecureDecoderComponent,
          jni.JniType.booleanType,
          [mime.reference]).boolean;

  static final _id_setMediaDrmSession =
      jniAccessors.getMethodIDOf(_classRef, "setMediaDrmSession", "([B)V");

  /// from: public native void setMediaDrmSession(byte[] sessionId)
  ///
  /// Associate a MediaDrm session with this MediaCrypto instance.  The
  /// MediaDrm session is used to securely load decryption keys for a
  /// crypto scheme.  The crypto keys loaded through the MediaDrm session
  /// may be selected for use during the decryption operation performed
  /// by android.media.MediaCodec\#queueSecureInputBuffer by specifying
  /// their key ids in the android.media.MediaCodec.CryptoInfo\#key field.
  ///@param sessionId the MediaDrm sessionId to associate with this
  /// MediaCrypto instance
  /// This value must never be {@code null}.
  ///@throws MediaCryptoException on failure to set the sessionId
  void setMediaDrmSession(jni.JniObject sessionId) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMediaDrmSession,
          jni.JniType.voidType, [sessionId.reference]).check();

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();

  static final _id_release =
      jniAccessors.getMethodIDOf(_classRef, "release", "()V");

  /// from: public native void release()
  void release() => jniAccessors.callMethodWithArgs(
      reference, _id_release, jni.JniType.voidType, []).check();
}
