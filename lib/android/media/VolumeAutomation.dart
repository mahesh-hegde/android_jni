// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "VolumeShaper.dart" as volumeshaper_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.VolumeAutomation
///
/// {@code VolumeAutomation} defines an interface for automatic volume control
/// of AudioTrack and MediaPlayer objects.
class VolumeAutomation extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/VolumeAutomation");
  VolumeAutomation.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_createVolumeShaper = jniAccessors.getMethodIDOf(
      _classRef,
      "createVolumeShaper",
      "(Landroid/media/VolumeShaper\$Configuration;)Landroid/media/VolumeShaper;");

  /// from: public abstract android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper.Configuration configuration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a VolumeShaper object that can be used modify the volume envelope
  /// of the player or track.
  ///@param configuration the VolumeShaper.Configuration configuration
  ///        that specifies the curve and duration to use.
  /// This value must never be {@code null}.
  ///@return a {@code VolumeShaper} object
  /// This value will never be {@code null}.
  ///@throws IllegalArgumentException if the {@code configuration} is not allowed by the player.
  ///@throws IllegalStateException if too many {@code VolumeShaper}s are requested
  ///         or the state of the player does not permit its creation (e.g. player is released).
  volumeshaper_.VolumeShaper createVolumeShaper(
          volumeshaper_.VolumeShaper_Configuration configuration) =>
      volumeshaper_.VolumeShaper.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createVolumeShaper,
          jni.JniType.objectType,
          [configuration.reference]).object);
}
