// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "../net/Uri.dart" as uri_;

import "AudioAttributes.dart" as audioattributes_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.AsyncPlayer
///
/// Plays a series of audio URIs, but does all the hard work on another thread
/// so that any slowness with preparing or loading doesn't block the calling thread.
class AsyncPlayer extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/media/AsyncPlayer");
  AsyncPlayer.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String tag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct an AsyncPlayer object.
  ///@param tag a string to use for debugging
  AsyncPlayer(jni.JniString tag)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [tag.reference]).object);

  static final _id_play = jniAccessors.getMethodIDOf(
      _classRef, "play", "(Landroid/content/Context;Landroid/net/Uri;ZI)V");

  /// from: public void play(android.content.Context context, android.net.Uri uri, boolean looping, int stream)
  ///
  /// Start playing the sound.  It will actually start playing at some
  /// point in the future.  There are no guarantees about latency here.
  /// Calling this before another audio file is done playing will stop
  /// that one and start the new one.
  ///@param context Your application's context.
  ///@param uri The URI to play.  (see MediaPlayer\#setDataSource(Context, Uri))
  ///@param looping Whether the audio should loop forever.
  ///          (see MediaPlayer\#setLooping(boolean))
  ///@param stream the AudioStream to use.
  ///          (see MediaPlayer\#setAudioStreamType(int))
  ///@deprecated use \#play(Context, Uri, boolean, AudioAttributes) instead
  void play(context_.Context context, uri_.Uri uri, bool looping, int stream) =>
      jniAccessors.callMethodWithArgs(reference, _id_play, jni.JniType.voidType,
          [context.reference, uri.reference, looping, stream]).check();

  static final _id_play1 = jniAccessors.getMethodIDOf(_classRef, "play",
      "(Landroid/content/Context;Landroid/net/Uri;ZLandroid/media/AudioAttributes;)V");

  /// from: public void play(android.content.Context context, android.net.Uri uri, boolean looping, android.media.AudioAttributes attributes)
  ///
  /// Start playing the sound.  It will actually start playing at some
  /// point in the future.  There are no guarantees about latency here.
  /// Calling this before another audio file is done playing will stop
  /// that one and start the new one.
  ///@param context the non-null application's context.
  /// This value must never be {@code null}.
  ///@param uri the non-null URI to play.  (see MediaPlayer\#setDataSource(Context, Uri))
  /// This value must never be {@code null}.
  ///@param looping whether the audio should loop forever.
  ///          (see MediaPlayer\#setLooping(boolean))
  ///@param attributes the non-null AudioAttributes to use.
  ///          (see MediaPlayer\#setAudioAttributes(AudioAttributes))
  /// This value must never be {@code null}.
  ///@throws IllegalArgumentException
  void play1(context_.Context context, uri_.Uri uri, bool looping,
          audioattributes_.AudioAttributes attributes) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_play1, jni.JniType.voidType, [
        context.reference,
        uri.reference,
        looping,
        attributes.reference
      ]).check();

  static final _id_stop = jniAccessors.getMethodIDOf(_classRef, "stop", "()V");

  /// from: public void stop()
  ///
  /// Stop a previously played sound.  It can't be played again or unpaused
  /// at this point.  Calling this multiple times has no ill effects.
  void stop() => jniAccessors.callMethodWithArgs(
      reference, _id_stop, jni.JniType.voidType, []).check();
}
