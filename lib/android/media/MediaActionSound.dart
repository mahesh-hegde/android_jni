// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.MediaActionSound
///
/// A class for producing sounds that match those produced by various actions
/// taken by the media and camera APIs.
///
///
/// This class is recommended for use with the android.hardware.camera2 API, since the
/// camera2 API does not play any sounds on its own for any capture or video recording actions.
///
///
/// With the older android.hardware.Camera API, use this class to play an appropriate
/// camera operation sound when implementing a custom still or video recording mechanism (through the
/// Camera preview callbacks with
/// android.hardware.Camera\#setPreviewCallback Camera.setPreviewCallback, or through GPU
/// processing with android.hardware.Camera\#setPreviewTexture Camera.setPreviewTexture, for
/// example), or when implementing some other camera-like function in your application.
///
///
/// There is no need to play sounds when using
/// android.hardware.Camera\#takePicture Camera.takePicture or
/// android.media.MediaRecorder for still images or video, respectively,
/// as the Android framework will play the appropriate sounds when needed for
/// these calls.
///
class MediaActionSound extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/MediaActionSound");
  MediaActionSound.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int FOCUS_COMPLETE
  ///
  /// A sound to indicate that focusing has completed. Because deciding
  /// when this occurs is application-dependent, this sound is not used by
  /// any methods in the media or camera APIs.
  ///@see \#play
  static const FOCUS_COMPLETE = 1;

  /// from: static public final int SHUTTER_CLICK
  ///
  /// The sound used by
  /// android.hardware.Camera\#takePicture Camera.takePicture to
  /// indicate still image capture.
  ///@see \#play
  static const SHUTTER_CLICK = 0;

  /// from: static public final int START_VIDEO_RECORDING
  ///
  /// The sound used by
  /// android.media.MediaRecorder\#start MediaRecorder.start() to
  /// indicate the start of video recording.
  ///@see \#play
  static const START_VIDEO_RECORDING = 2;

  /// from: static public final int STOP_VIDEO_RECORDING
  ///
  /// The sound used by
  /// android.media.MediaRecorder\#stop MediaRecorder.stop() to
  /// indicate the end of video recording.
  ///@see \#play
  static const STOP_VIDEO_RECORDING = 3;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a new MediaActionSound instance. Only a single instance is
  /// needed for playing any platform media action sound; you do not need a
  /// separate instance for each sound type.
  MediaActionSound()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_load = jniAccessors.getMethodIDOf(_classRef, "load", "(I)V");

  /// from: public void load(int soundName)
  ///
  /// Preload a predefined platform sound to minimize latency when the sound is
  /// played later by \#play.
  ///@param soundName The type of sound to preload, selected from
  ///         SHUTTER_CLICK, FOCUS_COMPLETE, START_VIDEO_RECORDING, or
  ///         STOP_VIDEO_RECORDING.
  ///@see \#play
  ///@see \#SHUTTER_CLICK
  ///@see \#FOCUS_COMPLETE
  ///@see \#START_VIDEO_RECORDING
  ///@see \#STOP_VIDEO_RECORDING
  void load(int soundName) => jniAccessors.callMethodWithArgs(
      reference, _id_load, jni.JniType.voidType, [soundName]).check();

  static final _id_play = jniAccessors.getMethodIDOf(_classRef, "play", "(I)V");

  /// from: public void play(int soundName)
  ///
  /// Play one of the predefined platform sounds for media actions.
  ///
  ///
  /// Use this method to play a platform-specific sound for various media
  /// actions. The sound playback is done asynchronously, with the same
  /// behavior and content as the sounds played by
  /// android.hardware.Camera\#takePicture Camera.takePicture,
  /// android.media.MediaRecorder\#start MediaRecorder.start, and
  /// android.media.MediaRecorder\#stop MediaRecorder.stop.
  ///
  ///
  /// With the android.hardware.camera2 camera2 API, this method can be used to play
  /// standard camera operation sounds with the appropriate system behavior for such sounds.
  ///
  ///
  /// With the older android.hardware.Camera API, using this method makes it easy to
  /// match the default device sounds when recording or capturing data through the preview
  /// callbacks, or when implementing custom camera-like features in your application.
  ///
  ///
  /// If the sound has not been loaded by \#load before calling play,
  /// play will load the sound at the cost of some additional latency before
  /// sound playback begins.
  ///
  ///@param soundName The type of sound to play, selected from
  ///         SHUTTER_CLICK, FOCUS_COMPLETE, START_VIDEO_RECORDING, or
  ///         STOP_VIDEO_RECORDING.
  ///@see android.hardware.Camera\#takePicture
  ///@see android.media.MediaRecorder
  ///@see \#SHUTTER_CLICK
  ///@see \#FOCUS_COMPLETE
  ///@see \#START_VIDEO_RECORDING
  ///@see \#STOP_VIDEO_RECORDING
  void play(int soundName) => jniAccessors.callMethodWithArgs(
      reference, _id_play, jni.JniType.voidType, [soundName]).check();

  static final _id_release =
      jniAccessors.getMethodIDOf(_classRef, "release", "()V");

  /// from: public void release()
  ///
  /// Free up all audio resources used by this MediaActionSound instance. Do
  /// not call any other methods on a MediaActionSound instance after calling
  /// release().
  void release() => jniAccessors.callMethodWithArgs(
      reference, _id_release, jni.JniType.voidType, []).check();
}
