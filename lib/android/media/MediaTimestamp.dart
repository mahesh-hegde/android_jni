// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.MediaTimestamp
///
/// An immutable object that represents the linear correlation between the media time
/// and the system time. It contains the media clock rate, together with the media timestamp
/// of an anchor frame and the system time when that frame was presented or is committed
/// to be presented.
///
/// The phrase "present" means that audio/video produced on device is detectable by an external
/// observer off device.
/// The time is based on the implementation's best effort, using whatever knowledge
/// is available to the system, but cannot account for any delay unknown to the implementation.
/// The anchor frame could be any frame, including a just-rendered frame, or even a theoretical
/// or in-between frame, based on the source of the MediaTimestamp.
/// When the anchor frame is a just-rendered one, the media time stands for
/// current position of the playback or recording.
///@see MediaSync\#getTimestamp
///@see MediaPlayer\#getTimestamp
class MediaTimestamp extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/MediaTimestamp");
  MediaTimestamp.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_TIMESTAMP_UNKNOWN = jniAccessors.getStaticFieldIDOf(
      _classRef, "TIMESTAMP_UNKNOWN", "Landroid/media/MediaTimestamp;");

  /// from: static public final android.media.MediaTimestamp TIMESTAMP_UNKNOWN
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// An unknown media timestamp value
  static MediaTimestamp get TIMESTAMP_UNKNOWN =>
      MediaTimestamp.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_TIMESTAMP_UNKNOWN, jni.JniType.objectType)
          .object);

  static final _id_getAnchorMediaTimeUs =
      jniAccessors.getMethodIDOf(_classRef, "getAnchorMediaTimeUs", "()J");

  /// from: public long getAnchorMediaTimeUs()
  ///
  /// Get the media time of the anchor in microseconds.
  int getAnchorMediaTimeUs() => jniAccessors.callMethodWithArgs(
      reference, _id_getAnchorMediaTimeUs, jni.JniType.longType, []).long;

  static final _id_getAnchorSytemNanoTime =
      jniAccessors.getMethodIDOf(_classRef, "getAnchorSytemNanoTime", "()J");

  /// from: public long getAnchorSytemNanoTime()
  ///
  /// Get the java.lang.System\#nanoTime system time corresponding to the media time
  /// in nanoseconds.
  int getAnchorSytemNanoTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getAnchorSytemNanoTime, jni.JniType.longType, []).long;

  static final _id_getMediaClockRate =
      jniAccessors.getMethodIDOf(_classRef, "getMediaClockRate", "()F");

  /// from: public float getMediaClockRate()
  ///
  /// Get the rate of the media clock in relation to the system time.
  ///
  /// It is 1.0 if media clock advances in sync with the system clock;
  /// greater than 1.0 if media clock is faster than the system clock;
  /// less than 1.0 if media clock is slower than the system clock.
  double getMediaClockRate() => jniAccessors.callMethodWithArgs(
      reference, _id_getMediaClockRate, jni.JniType.floatType, []).float;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
