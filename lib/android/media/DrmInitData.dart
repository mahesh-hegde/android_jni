// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.DrmInitData
///
/// Encapsulates initialization data required by a MediaDrm instance.
class DrmInitData extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/media/DrmInitData");
  DrmInitData.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_get0 = jniAccessors.getMethodIDOf(_classRef, "get",
      "(Ljava/util/UUID;)Landroid/media/DrmInitData\$SchemeInitData;");

  /// from: public abstract android.media.DrmInitData.SchemeInitData get(java.util.UUID schemeUuid)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves initialization data for a given DRM scheme, specified by its UUID.
  ///@param schemeUuid The DRM scheme's UUID.
  ///@return The initialization data for the scheme, or null if the scheme is not supported.
  DrmInitData_SchemeInitData get0(jni.JniObject schemeUuid) =>
      DrmInitData_SchemeInitData.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_get0,
          jni.JniType.objectType,
          [schemeUuid.reference]).object);
}

/// from: android.media.DrmInitData$SchemeInitData
///
/// Scheme initialization data.
class DrmInitData_SchemeInitData extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/DrmInitData\$SchemeInitData");
  DrmInitData_SchemeInitData.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_data = jniAccessors.getFieldIDOf(_classRef, "data", "[B");

  /// from: public final byte[] data
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The initialization data.
  jni.JniObject get data => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_data, jni.JniType.objectType)
      .object);

  static final _id_mimeType =
      jniAccessors.getFieldIDOf(_classRef, "mimeType", "Ljava/lang/String;");

  /// from: public final java.lang.String mimeType
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The mimeType of \#data.
  jni.JniString get mimeType => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_mimeType, jni.JniType.objectType)
      .object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}
