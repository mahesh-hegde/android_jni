// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.ToneGenerator
///
/// This class provides methods to play DTMF tones (ITU-T Recommendation Q.23),
/// call supervisory tones (3GPP TS 22.001, CEPT) and proprietary tones (3GPP TS 31.111).
/// Depending on call state and routing options, tones are mixed to the downlink audio
/// or output to the speaker phone or headset.
/// This API is not for generating tones over the uplink audio path.
class ToneGenerator extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/ToneGenerator");
  ToneGenerator.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int MAX_VOLUME
  ///
  /// Maximum volume, for use with \#ToneGenerator(int,int)
  static const MAX_VOLUME = 100;

  /// from: static public final int MIN_VOLUME
  ///
  /// Minimum volume setting, for use with \#ToneGenerator(int,int)
  static const MIN_VOLUME = 0;

  /// from: static public final int TONE_CDMA_ABBR_ALERT
  ///
  /// CDMA_ABBR_ALERT tone: 1150Hz+770Hz 400ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_ABBR_ALERT = 97;

  /// from: static public final int TONE_CDMA_ABBR_INTERCEPT
  ///
  /// CDMA Abbr Intercept tone: 440Hz 250ms ON, 620Hz 250ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_ABBR_INTERCEPT = 37;

  /// from: static public final int TONE_CDMA_ABBR_REORDER
  ///
  /// CDMA Abbr Reorder tone: 480Hz+620Hz 250ms ON, 250ms OFF repeated for 8 times
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_ABBR_REORDER = 39;

  /// from: static public final int TONE_CDMA_ALERT_AUTOREDIAL_LITE
  ///
  /// CDMA Alert Auto Redial tone: {1245Hz 62ms ON, 659Hz 62ms ON} 3 times,
  /// 1245 62ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_ALERT_AUTOREDIAL_LITE = 87;

  /// from: static public final int TONE_CDMA_ALERT_CALL_GUARD
  ///
  /// CDMA ALERT CALL GUARD tone: {1319Hz 125ms ON, 125ms OFF} 3 times
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_ALERT_CALL_GUARD = 93;

  /// from: static public final int TONE_CDMA_ALERT_INCALL_LITE
  ///
  /// CDMA ALERT INCALL LITE tone: 587Hz 62ms, 784 62ms, 831Hz 62ms,
  /// 784Hz 62ms, 1109 62ms, 784Hz 62ms, 831Hz 62ms, 784Hz 62ms
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_ALERT_INCALL_LITE = 91;

  /// from: static public final int TONE_CDMA_ALERT_NETWORK_LITE
  ///
  /// CDMA Alert Network Lite tone: 1109Hz 62ms ON, 784Hz 62ms ON, 740Hz 62ms ON
  /// 622Hz 62ms ON, 1109Hz 62ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_ALERT_NETWORK_LITE = 86;

  /// from: static public final int TONE_CDMA_ANSWER
  ///
  /// CDMA answer tone: silent tone - defintion Frequency 0, 0ms ON, 0ms OFF
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_ANSWER = 42;

  /// from: static public final int TONE_CDMA_CALLDROP_LITE
  ///
  /// CDMA CALLDROP LITE tone: 1480Hz 125ms, 1397Hz 125ms, 784Hz 125ms
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_CALLDROP_LITE = 95;

  /// from: static public final int TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP
  ///
  /// ISDN Call Signal Intergroup tone: {2091Hz 32ms ON, 2556 64ms ON} 8 times,
  /// 2091Hz 32ms ON, 400ms OFF, {2091Hz 32ms ON, 2556Hz 64ms ON} times,
  /// 2091Hz 32ms ON, 4s OFF.
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP = 46;

  /// from: static public final int TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL
  ///
  /// ISDN Call Signal Normal tone: {2091Hz 32ms ON, 2556 64ms ON} 20 times,
  ///  2091 32ms ON, 2556 48ms ON, 4s OFF
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL = 45;

  /// from: static public final int TONE_CDMA_CALL_SIGNAL_ISDN_PAT3
  ///
  /// ISDN Call sign PAT3 tone: silent tone
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_CALL_SIGNAL_ISDN_PAT3 = 48;

  /// from: static public final int TONE_CDMA_CALL_SIGNAL_ISDN_PAT5
  ///
  /// ISDN Pat5 tone: silent tone
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_CALL_SIGNAL_ISDN_PAT5 = 50;

  /// from: static public final int TONE_CDMA_CALL_SIGNAL_ISDN_PAT6
  ///
  /// ISDN Pat6 tone: silent tone
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_CALL_SIGNAL_ISDN_PAT6 = 51;

  /// from: static public final int TONE_CDMA_CALL_SIGNAL_ISDN_PAT7
  ///
  /// ISDN Pat7 tone: silent tone
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_CALL_SIGNAL_ISDN_PAT7 = 52;

  /// from: static public final int TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING
  ///
  /// ISDN Ping Ring tone: {2091Hz 32ms ON, 2556Hz 64ms ON} 5 times
  /// 2091Hz 20ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING = 49;

  /// from: static public final int TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI
  ///
  /// ISDN Call Signal SP PRI tone:{2091Hz 32ms ON, 2556 64ms ON} 4 times
  /// 2091Hz 16ms ON, 200ms OFF, {2091Hz 32ms ON, 2556Hz 64ms ON} 4 times,
  /// 2091Hz 16ms ON, 200ms OFF
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI = 47;

  /// from: static public final int TONE_CDMA_CONFIRM
  ///
  /// CDMA Confirm tone: 350Hz+440Hz 100ms ON, 100ms OFF repeated for 3 times
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_CONFIRM = 41;

  /// from: static public final int TONE_CDMA_DIAL_TONE_LITE
  ///
  /// CDMA Dial tone : 425Hz  continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_DIAL_TONE_LITE = 34;

  /// from: static public final int TONE_CDMA_EMERGENCY_RINGBACK
  ///
  /// CDMA EMERGENCY RINGBACK tone: {941Hz 125ms ON, 10ms OFF} 3times
  /// 4990ms OFF, REPEAT...
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_EMERGENCY_RINGBACK = 92;

  /// from: static public final int TONE_CDMA_HIGH_L
  ///
  /// TONE_CDMA_HIGH_L tone: {3700Hz 25ms, 4000Hz 25ms} 40 times
  /// 4000ms OFF, Repeat ....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_HIGH_L = 53;

  /// from: static public final int TONE_CDMA_HIGH_PBX_L
  ///
  /// CDMA HIGH PBX L: {3700Hz 25ms, 4000Hz 25ms}20 times,
  /// 2000ms OFF,  REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_HIGH_PBX_L = 71;

  /// from: static public final int TONE_CDMA_HIGH_PBX_SLS
  ///
  /// CDMA HIGH PBX SSL tone:{3700Hz 25ms, 4000Hz 25ms} 8 times
  /// 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} 16 times, 200ms OFF,
  /// {3700Hz 25ms, 4000Hz 25ms} 8 times, 1000ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_HIGH_PBX_SLS = 80;

  /// from: static public final int TONE_CDMA_HIGH_PBX_SS
  ///
  /// CDMA HIGH PBX SS tone: {3700Hz 25ms, 4000Hz 25ms} 8 times
  /// 200 ms OFF, {3700Hz 25ms 4000Hz 25ms}8 times,
  /// 2000ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_HIGH_PBX_SS = 74;

  /// from: static public final int TONE_CDMA_HIGH_PBX_SSL
  ///
  /// CDMA HIGH PBX SSL tone:{3700Hz 25ms, 4000Hz 25ms} 8 times
  /// 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} 8 times, 200ms OFF,
  /// {3700Hz 25ms, 4000Hz 25ms} 16 times, 1000ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_HIGH_PBX_SSL = 77;

  /// from: static public final int TONE_CDMA_HIGH_PBX_S_X4
  ///
  /// CDMA HIGH PBX X S4 tone: {3700Hz 25ms 4000Hz 25ms} 8 times,
  /// 200ms OFF, {3700Hz 25ms 4000Hz 25ms} 8 times, 200ms OFF,
  /// {3700Hz 25ms 4000Hz 25ms} 8 times, 200ms OFF,
  /// {3700Hz 25ms 4000Hz 25ms} 8 times, 800ms OFF, REPEAT...
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_HIGH_PBX_S_X4 = 83;

  /// from: static public final int TONE_CDMA_HIGH_SLS
  ///
  /// CDMA HIGH SLS tone: {3700Hz 25ms, 4000Hz 25ms} 10 times,
  ///  500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 20 times, 500ms OFF,
  ///  {3700Hz 25ms, 4000Hz 25ms} 10 times, 3000ms OFF, REPEAT
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_HIGH_SLS = 65;

  /// from: static public final int TONE_CDMA_HIGH_SS
  ///
  /// CDMA HIGH SS tone: {3700Hz 25ms, 4000Hz 25ms} repeat 16 times,
  /// 400ms OFF, repeat ....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_HIGH_SS = 56;

  /// from: static public final int TONE_CDMA_HIGH_SSL
  ///
  /// CDMA HIGH SSL tone: {3700Hz 25ms, 4000Hz 25ms} 8 times,
  /// 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} repeat 8 times,
  /// 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} repeat 16 times,
  /// 4000ms OFF, repeat ...
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_HIGH_SSL = 59;

  /// from: static public final int TONE_CDMA_HIGH_SS_2
  ///
  /// CDMA HIGH SS2 tone: {3700Hz 25ms, 4000Hz 25ms} 20 times,
  /// 1000ms OFF, {3700Hz 25ms, 4000Hz 25ms} 20 times,
  /// 3000ms OFF, repeat ....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_HIGH_SS_2 = 62;

  /// from: static public final int TONE_CDMA_HIGH_S_X4
  ///
  /// CDMA HIGH S X4 tone: {3700Hz 25ms, 4000Hz 25ms} 10 times,
  ///  500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 10 times, 500ms OFF,
  ///  {3700Hz 25ms, 4000Hz 25ms} 10 times, 500ms OFF,
  ///  {3700Hz 25ms, 4000Hz 25ms} 10 times, 2500ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_HIGH_S_X4 = 68;

  /// from: static public final int TONE_CDMA_INTERCEPT
  ///
  /// CDMA Intercept tone: 440Hz 250ms ON, 620Hz 250ms ON ...
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_INTERCEPT = 36;

  /// from: static public final int TONE_CDMA_KEYPAD_VOLUME_KEY_LITE
  ///
  /// CDMA KEYPAD Volume key lite tone: 941Hz+1477Hz 120ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_KEYPAD_VOLUME_KEY_LITE = 89;

  /// from: static public final int TONE_CDMA_LOW_L
  ///
  /// TONE_CDMA_LOW_L tone: {1300Hz 25ms, 1450Hz 25ms} 40 times,
  /// 4000ms OFF, Repeat ....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_LOW_L = 55;

  /// from: static public final int TONE_CDMA_LOW_PBX_L
  ///
  /// CDMA LOW PBX L: {1300Hz 25ms,1450Hz 25ms}20 times,
  /// 2000ms OFF,  REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_LOW_PBX_L = 73;

  /// from: static public final int TONE_CDMA_LOW_PBX_SLS
  ///
  /// CDMA HIGH PBX SLS tone:{1300Hz 25ms, 1450Hz 25ms} 8 times
  /// 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} 16 times, 200ms OFF,
  /// {1300Hz 25ms, 1450Hz 25ms} 8 times, 1000ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_LOW_PBX_SLS = 82;

  /// from: static public final int TONE_CDMA_LOW_PBX_SS
  ///
  /// CDMA LOW PBX SS tone: {1300Hz 25ms, 1450Hz 25ms} 8 times
  /// 200 ms OFF, {1300Hz 25ms 1450Hz 25ms}8 times,
  /// 2000ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_LOW_PBX_SS = 76;

  /// from: static public final int TONE_CDMA_LOW_PBX_SSL
  ///
  /// CDMA LOW PBX SSL tone:{1300Hz 25ms, 1450Hz 25ms} 8 times
  /// 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} 8 times, 200ms OFF,
  /// {1300Hz 25ms, 1450Hz 25ms} 16 times, 1000ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_LOW_PBX_SSL = 79;

  /// from: static public final int TONE_CDMA_LOW_PBX_S_X4
  ///
  /// CDMA LOW PBX X S4 tone: {1300Hz 25ms 1450Hz 25ms} 8 times,
  /// 200ms OFF, {1300Hz 25ms 1450Hz 25ms} 8 times, 200ms OFF,
  /// {1300Hz 25ms 1450Hz 25ms} 8 times, 200ms OFF,
  /// {1300Hz 25ms 1450Hz 25ms} 8 times, 800ms OFF, REPEAT...
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_LOW_PBX_S_X4 = 85;

  /// from: static public final int TONE_CDMA_LOW_SLS
  ///
  /// CDMA LOW SLS tone: {1300Hz 25ms, 1450Hz 25ms} 10 times,
  ///  500ms OFF, {1300Hz 25ms, 1450Hz 25ms} 20 times, 500ms OFF,
  ///  {1300Hz 25ms, 1450Hz 25ms} 10 times, 3000ms OFF, REPEAT
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_LOW_SLS = 67;

  /// from: static public final int TONE_CDMA_LOW_SS
  ///
  /// CDMA LOW SS tone: {1300z 25ms, 1450Hz 25ms} repeat 16 times,
  /// 400ms OFF, repeat ....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_LOW_SS = 58;

  /// from: static public final int TONE_CDMA_LOW_SSL
  ///
  /// CDMA LOW SSL tone: {1300Hz 25ms, 1450Hz 25ms} 8 times,
  /// 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} repeat 8 times,
  /// 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} repeat 16 times,
  /// 4000ms OFF, repeat ...
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_LOW_SSL = 61;

  /// from: static public final int TONE_CDMA_LOW_SS_2
  ///
  /// CDMA LOW SS2 tone: {1300Hz 25ms, 1450Hz 25ms} 20 times,
  /// 1000ms OFF, {1300Hz 25ms, 1450Hz 25ms} 20 times,
  /// 3000ms OFF, repeat ....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_LOW_SS_2 = 64;

  /// from: static public final int TONE_CDMA_LOW_S_X4
  ///
  /// CDMA LOW  S X4 tone: {2600Hz 25ms, 2900Hz 25ms} 10 times,
  ///  500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF,
  ///  {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF,
  ///  {2600Hz 25ms, 2900Hz 25ms} 10 times, 2500ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_LOW_S_X4 = 70;

  /// from: static public final int TONE_CDMA_MED_L
  ///
  /// TONE_CDMA_MED_L tone: {2600Hz 25ms, 2900Hz 25ms} 40 times
  /// 4000ms OFF, Repeat ....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_MED_L = 54;

  /// from: static public final int TONE_CDMA_MED_PBX_L
  ///
  /// CDMA MED PBX L: {2600Hz 25ms, 2900Hz 25ms}20 times,
  /// 2000ms OFF,  REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_MED_PBX_L = 72;

  /// from: static public final int TONE_CDMA_MED_PBX_SLS
  ///
  /// CDMA HIGH PBX SLS tone:{2600Hz 25ms, 2900Hz 25ms} 8 times
  /// 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} 16 times, 200ms OFF,
  /// {2600Hz 25ms, 2900Hz 25ms} 8 times, 1000ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_MED_PBX_SLS = 81;

  /// from: static public final int TONE_CDMA_MED_PBX_SS
  ///
  /// CDMA MED PBX SS tone: {2600Hz 25ms, 2900Hz 25ms} 8 times
  /// 200 ms OFF, {2600Hz 25ms 2900Hz 25ms}8 times,
  /// 2000ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_MED_PBX_SS = 75;

  /// from: static public final int TONE_CDMA_MED_PBX_SSL
  ///
  /// CDMA MED PBX SSL tone:{2600Hz 25ms, 2900Hz 25ms} 8 times
  /// 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} 8 times, 200ms OFF,
  /// {2600Hz 25ms, 2900Hz 25ms} 16 times, 1000ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_MED_PBX_SSL = 78;

  /// from: static public final int TONE_CDMA_MED_PBX_S_X4
  ///
  /// CDMA MED PBX X S4 tone: {2600Hz 25ms 2900Hz 25ms} 8 times,
  /// 200ms OFF, {2600Hz 25ms 2900Hz 25ms} 8 times, 200ms OFF,
  /// {2600Hz 25ms 2900Hz 25ms} 8 times, 200ms OFF,
  /// {2600Hz 25ms 2900Hz 25ms} 8 times, 800ms OFF, REPEAT...
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_MED_PBX_S_X4 = 84;

  /// from: static public final int TONE_CDMA_MED_SLS
  ///
  /// CDMA MED  SLS tone: {2600Hz 25ms, 2900Hz 25ms} 10 times,
  ///  500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 20 times, 500ms OFF,
  ///  {2600Hz 25ms, 2900Hz 25ms} 10 times, 3000ms OFF, REPEAT
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_MED_SLS = 66;

  /// from: static public final int TONE_CDMA_MED_SS
  ///
  /// CDMA MED SS tone: {2600Hz 25ms, 2900Hz 25ms} repeat 16 times,
  /// 400ms OFF, repeat ....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_MED_SS = 57;

  /// from: static public final int TONE_CDMA_MED_SSL
  ///
  /// CDMA MED SSL tone: {2600Hz 25ms, 2900Hz 25ms} 8 times,
  /// 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} repeat 8 times,
  /// 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} repeat 16 times,
  /// 4000ms OFF, repeat ...
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_MED_SSL = 60;

  /// from: static public final int TONE_CDMA_MED_SS_2
  ///
  /// CDMA MED SS2 tone: {2600Hz 25ms, 2900Hz 25ms} 20 times,
  /// 1000ms OFF, {2600Hz 25ms, 2900Hz 25ms} 20 times,
  /// 3000ms OFF, repeat ....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_MED_SS_2 = 63;

  /// from: static public final int TONE_CDMA_MED_S_X4
  ///
  /// CDMA MED S X4 tone: {2600Hz 25ms, 2900Hz 25ms} 10 times,
  ///  500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF,
  ///  {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF,
  ///  {2600Hz 25ms, 2900Hz 25ms} 10 times, 2500ms OFF, REPEAT....
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_MED_S_X4 = 69;

  /// from: static public final int TONE_CDMA_NETWORK_BUSY
  ///
  /// CDMA Network Busy tone: 480Hz+620Hz 500ms ON, 500ms OFF continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_NETWORK_BUSY = 40;

  /// from: static public final int TONE_CDMA_NETWORK_BUSY_ONE_SHOT
  ///
  /// CDMA_NETWORK_BUSY_ONE_SHOT tone: 425Hz 500ms ON, 500ms OFF.
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_NETWORK_BUSY_ONE_SHOT = 96;

  /// from: static public final int TONE_CDMA_NETWORK_CALLWAITING
  ///
  /// CDMA Network Callwaiting tone: 440Hz 300ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_NETWORK_CALLWAITING = 43;

  /// from: static public final int TONE_CDMA_NETWORK_USA_RINGBACK
  ///
  /// CDMA USA Ringback: 440Hz+480Hz 2s ON, 4000 OFF ...
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_NETWORK_USA_RINGBACK = 35;

  /// from: static public final int TONE_CDMA_ONE_MIN_BEEP
  ///
  /// CDMA One Min Beep tone: 1150Hz+770Hz 400ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_ONE_MIN_BEEP = 88;

  /// from: static public final int TONE_CDMA_PIP
  ///
  /// CDMA PIP tone: 480Hz 100ms ON, 100ms OFF repeated for 4 times
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_PIP = 44;

  /// from: static public final int TONE_CDMA_PRESSHOLDKEY_LITE
  ///
  /// CDMA PRESSHOLDKEY LITE tone: 587Hz 375ms ON, 1175Hz 125ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_PRESSHOLDKEY_LITE = 90;

  /// from: static public final int TONE_CDMA_REORDER
  ///
  /// CDMA Reorder tone: 480Hz+620Hz 250ms ON, 250ms OFF...
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_REORDER = 38;

  /// from: static public final int TONE_CDMA_SIGNAL_OFF
  ///
  /// CDMA_SIGNAL_OFF - silent tone
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_SIGNAL_OFF = 98;

  /// from: static public final int TONE_CDMA_SOFT_ERROR_LITE
  ///
  /// CDMA SOFT ERROR LITE  tone: 1047Hz 125ms ON, 370Hz 125ms
  ///@see \#ToneGenerator(int, int)
  static const TONE_CDMA_SOFT_ERROR_LITE = 94;

  /// from: static public final int TONE_DTMF_0
  ///
  /// DTMF tone for key 0: 1336Hz, 941Hz, continuous
  ///
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_0 = 0;

  /// from: static public final int TONE_DTMF_1
  ///
  /// DTMF tone for key 1: 1209Hz, 697Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_1 = 1;

  /// from: static public final int TONE_DTMF_2
  ///
  /// DTMF tone for key 2: 1336Hz, 697Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_2 = 2;

  /// from: static public final int TONE_DTMF_3
  ///
  /// DTMF tone for key 3: 1477Hz, 697Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_3 = 3;

  /// from: static public final int TONE_DTMF_4
  ///
  /// DTMF tone for key 4: 1209Hz, 770Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_4 = 4;

  /// from: static public final int TONE_DTMF_5
  ///
  /// DTMF tone for key 5: 1336Hz, 770Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_5 = 5;

  /// from: static public final int TONE_DTMF_6
  ///
  /// DTMF tone for key 6: 1477Hz, 770Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_6 = 6;

  /// from: static public final int TONE_DTMF_7
  ///
  /// DTMF tone for key 7: 1209Hz, 852Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_7 = 7;

  /// from: static public final int TONE_DTMF_8
  ///
  /// DTMF tone for key 8: 1336Hz, 852Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_8 = 8;

  /// from: static public final int TONE_DTMF_9
  ///
  /// DTMF tone for key 9: 1477Hz, 852Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_9 = 9;

  /// from: static public final int TONE_DTMF_A
  ///
  /// DTMF tone for key A: 1633Hz, 697Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_A = 12;

  /// from: static public final int TONE_DTMF_B
  ///
  /// DTMF tone for key B: 1633Hz, 770Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_B = 13;

  /// from: static public final int TONE_DTMF_C
  ///
  /// DTMF tone for key C: 1633Hz, 852Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_C = 14;

  /// from: static public final int TONE_DTMF_D
  ///
  /// DTMF tone for key D: 1633Hz, 941Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_D = 15;

  /// from: static public final int TONE_DTMF_P
  ///
  /// DTMF tone for key \#: 1477Hz, 941Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_P = 11;

  /// from: static public final int TONE_DTMF_S
  ///
  /// DTMF tone for key *: 1209Hz, 941Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_DTMF_S = 10;

  /// from: static public final int TONE_PROP_ACK
  ///
  /// Proprietary tone, positive acknowlegement: 1200Hz, 100ms ON, 100ms OFF 2 bursts
  ///@see \#ToneGenerator(int, int)
  static const TONE_PROP_ACK = 25;

  /// from: static public final int TONE_PROP_BEEP
  ///
  /// Proprietary tone, general beep: 400Hz+1200Hz, 35ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_PROP_BEEP = 24;

  /// from: static public final int TONE_PROP_BEEP2
  ///
  /// Proprietary tone, general double beep: twice 400Hz+1200Hz, 35ms ON, 200ms OFF, 35ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_PROP_BEEP2 = 28;

  /// from: static public final int TONE_PROP_NACK
  ///
  /// Proprietary tone, negative acknowlegement: 300Hz+400Hz+500Hz, 400ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_PROP_NACK = 26;

  /// from: static public final int TONE_PROP_PROMPT
  ///
  /// Proprietary tone, prompt tone: 400Hz+1200Hz, 200ms ON
  ///@see \#ToneGenerator(int, int)
  static const TONE_PROP_PROMPT = 27;

  /// from: static public final int TONE_SUP_BUSY
  ///
  /// Call supervisory tone, Busy:
  ///      CEPT:           425Hz, 500ms ON, 500ms OFF...
  ///      ANSI (IS-95):   480Hz+620Hz, 500ms ON, 500ms OFF...
  ///      JAPAN:          400Hz, 500ms ON, 500ms OFF...
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_BUSY = 17;

  /// from: static public final int TONE_SUP_CALL_WAITING
  ///
  /// Call supervisory tone, Call Waiting:
  ///      CEPT, JAPAN:    425Hz, 200ms ON, 600ms OFF, 200ms ON, 3s OFF...
  ///      ANSI (IS-95):   440 Hz, 300 ms ON, 9.7 s OFF,
  ///                      (100 ms ON, 100 ms OFF, 100 ms ON, 9.7s OFF ...)
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_CALL_WAITING = 22;

  /// from: static public final int TONE_SUP_CONFIRM
  ///
  /// Call supervisory tone (IS-95), confirm tone: a 350 Hz tone added to a 440 Hz tone
  /// repeated 3 times in a 100 ms on, 100 ms off cycle
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_CONFIRM = 32;

  /// from: static public final int TONE_SUP_CONGESTION
  ///
  /// Call supervisory tone, Congestion:
  ///      CEPT, JAPAN:    425Hz, 200ms ON, 200ms OFF...
  ///      ANSI (IS-95):   480Hz+620Hz, 250ms ON, 250ms OFF...
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_CONGESTION = 18;

  /// from: static public final int TONE_SUP_CONGESTION_ABBREV
  ///
  /// Call supervisory tone (IS-95), abbreviated congestion: congestion tone limited to 4 seconds
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_CONGESTION_ABBREV = 31;

  /// from: static public final int TONE_SUP_DIAL
  ///
  /// Call supervisory tone, Dial tone:
  ///      CEPT:           425Hz, continuous
  ///      ANSI (IS-95):   350Hz+440Hz, continuous
  ///      JAPAN:          400Hz, continuous
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_DIAL = 16;

  /// from: static public final int TONE_SUP_ERROR
  ///
  /// Call supervisory tone, Error/Special info: 950Hz+1400Hz+1800Hz, 330ms ON, 1s OFF...
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_ERROR = 21;

  /// from: static public final int TONE_SUP_INTERCEPT
  ///
  /// Call supervisory tone (IS-95), intercept tone: alternating 440 Hz and 620 Hz tones,
  /// each on for 250 ms
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_INTERCEPT = 29;

  /// from: static public final int TONE_SUP_INTERCEPT_ABBREV
  ///
  /// Call supervisory tone (IS-95), abbreviated intercept: intercept tone limited to 4 seconds
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_INTERCEPT_ABBREV = 30;

  /// from: static public final int TONE_SUP_PIP
  ///
  /// Call supervisory tone (IS-95), pip tone: four bursts of 480 Hz tone (0.1 s on, 0.1 s off).
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_PIP = 33;

  /// from: static public final int TONE_SUP_RADIO_ACK
  ///
  /// Call supervisory tone, Radio path acknowlegment :
  ///      CEPT, ANSI:    425Hz, 200ms ON
  ///      JAPAN:         400Hz, 1s ON, 2s OFF...
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_RADIO_ACK = 19;

  /// from: static public final int TONE_SUP_RADIO_NOTAVAIL
  ///
  /// Call supervisory tone, Radio path not available: 425Hz, 200ms ON, 200 OFF 3 bursts
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_RADIO_NOTAVAIL = 20;

  /// from: static public final int TONE_SUP_RINGTONE
  ///
  /// Call supervisory tone, Ring Tone:
  ///      CEPT, JAPAN:    425Hz, 1s ON, 4s OFF...
  ///      ANSI (IS-95):   440Hz + 480Hz, 2s ON, 4s OFF...
  ///@see \#ToneGenerator(int, int)
  static const TONE_SUP_RINGTONE = 23;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int streamType, int volume)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// ToneGenerator class contructor specifying output stream type and volume.
  ///@param streamType The streame type used for tone playback (e.g. STREAM_MUSIC).
  ///@param volume The volume of the tone, given in percentage of maximum volume (from 0-100).
  ToneGenerator(int streamType, int volume)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [streamType, volume]).object);

  static final _id_startTone =
      jniAccessors.getMethodIDOf(_classRef, "startTone", "(I)Z");

  /// from: public boolean startTone(int toneType)
  ///
  /// This method starts the playback of a tone of the specified type.
  /// only one tone can play at a time: if a tone is playing while this method is called,
  /// this tone is stopped and replaced by the one requested.
  ///@param toneType The type of tone generated chosen from the following list:
  /// <ul>
  /// <li>\#TONE_DTMF_0
  /// <li>\#TONE_DTMF_1
  /// <li>\#TONE_DTMF_2
  /// <li>\#TONE_DTMF_3
  /// <li>\#TONE_DTMF_4
  /// <li>\#TONE_DTMF_5
  /// <li>\#TONE_DTMF_6
  /// <li>\#TONE_DTMF_7
  /// <li>\#TONE_DTMF_8
  /// <li>\#TONE_DTMF_9
  /// <li>\#TONE_DTMF_A
  /// <li>\#TONE_DTMF_B
  /// <li>\#TONE_DTMF_C
  /// <li>\#TONE_DTMF_D
  /// <li>\#TONE_SUP_DIAL
  /// <li>\#TONE_SUP_BUSY
  /// <li>\#TONE_SUP_CONGESTION
  /// <li>\#TONE_SUP_RADIO_ACK
  /// <li>\#TONE_SUP_RADIO_NOTAVAIL
  /// <li>\#TONE_SUP_ERROR
  /// <li>\#TONE_SUP_CALL_WAITING
  /// <li>\#TONE_SUP_RINGTONE
  /// <li>\#TONE_PROP_BEEP
  /// <li>\#TONE_PROP_ACK
  /// <li>\#TONE_PROP_NACK
  /// <li>\#TONE_PROP_PROMPT
  /// <li>\#TONE_PROP_BEEP2
  /// <li>\#TONE_SUP_INTERCEPT
  /// <li>\#TONE_SUP_INTERCEPT_ABBREV
  /// <li>\#TONE_SUP_CONGESTION_ABBREV
  /// <li>\#TONE_SUP_CONFIRM
  /// <li>\#TONE_SUP_PIP
  /// <li>\#TONE_CDMA_DIAL_TONE_LITE
  /// <li>\#TONE_CDMA_NETWORK_USA_RINGBACK
  /// <li>\#TONE_CDMA_INTERCEPT
  /// <li>\#TONE_CDMA_ABBR_INTERCEPT
  /// <li>\#TONE_CDMA_REORDER
  /// <li>\#TONE_CDMA_ABBR_REORDER
  /// <li>\#TONE_CDMA_NETWORK_BUSY
  /// <li>\#TONE_CDMA_CONFIRM
  /// <li>\#TONE_CDMA_ANSWER
  /// <li>\#TONE_CDMA_NETWORK_CALLWAITING
  /// <li>\#TONE_CDMA_PIP
  /// <li>\#TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL
  /// <li>\#TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP
  /// <li>\#TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI
  /// <li>\#TONE_CDMA_CALL_SIGNAL_ISDN_PAT3
  /// <li>\#TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING
  /// <li>\#TONE_CDMA_CALL_SIGNAL_ISDN_PAT5
  /// <li>\#TONE_CDMA_CALL_SIGNAL_ISDN_PAT6
  /// <li>\#TONE_CDMA_CALL_SIGNAL_ISDN_PAT7
  /// <li>\#TONE_CDMA_HIGH_L
  /// <li>\#TONE_CDMA_MED_L
  /// <li>\#TONE_CDMA_LOW_L
  /// <li>\#TONE_CDMA_HIGH_SS
  /// <li>\#TONE_CDMA_MED_SS
  /// <li>\#TONE_CDMA_LOW_SS
  /// <li>\#TONE_CDMA_HIGH_SSL
  /// <li>\#TONE_CDMA_MED_SSL
  /// <li>\#TONE_CDMA_LOW_SSL
  /// <li>\#TONE_CDMA_HIGH_SS_2
  /// <li>\#TONE_CDMA_MED_SS_2
  /// <li>\#TONE_CDMA_LOW_SS_2
  /// <li>\#TONE_CDMA_HIGH_SLS
  /// <li>\#TONE_CDMA_MED_SLS
  /// <li>\#TONE_CDMA_LOW_SLS
  /// <li>\#TONE_CDMA_HIGH_S_X4
  /// <li>\#TONE_CDMA_MED_S_X4
  /// <li>\#TONE_CDMA_LOW_S_X4
  /// <li>\#TONE_CDMA_HIGH_PBX_L
  /// <li>\#TONE_CDMA_MED_PBX_L
  /// <li>\#TONE_CDMA_LOW_PBX_L
  /// <li>\#TONE_CDMA_HIGH_PBX_SS
  /// <li>\#TONE_CDMA_MED_PBX_SS
  /// <li>\#TONE_CDMA_LOW_PBX_SS
  /// <li>\#TONE_CDMA_HIGH_PBX_SSL
  /// <li>\#TONE_CDMA_MED_PBX_SSL
  /// <li>\#TONE_CDMA_LOW_PBX_SSL
  /// <li>\#TONE_CDMA_HIGH_PBX_SLS
  /// <li>\#TONE_CDMA_MED_PBX_SLS
  /// <li>\#TONE_CDMA_LOW_PBX_SLS
  /// <li>\#TONE_CDMA_HIGH_PBX_S_X4
  /// <li>\#TONE_CDMA_MED_PBX_S_X4
  /// <li>\#TONE_CDMA_LOW_PBX_S_X4
  /// <li>\#TONE_CDMA_ALERT_NETWORK_LITE
  /// <li>\#TONE_CDMA_ALERT_AUTOREDIAL_LITE
  /// <li>\#TONE_CDMA_ONE_MIN_BEEP
  /// <li>\#TONE_CDMA_KEYPAD_VOLUME_KEY_LITE
  /// <li>\#TONE_CDMA_PRESSHOLDKEY_LITE
  /// <li>\#TONE_CDMA_ALERT_INCALL_LITE
  /// <li>\#TONE_CDMA_EMERGENCY_RINGBACK
  /// <li>\#TONE_CDMA_ALERT_CALL_GUARD
  /// <li>\#TONE_CDMA_SOFT_ERROR_LITE
  /// <li>\#TONE_CDMA_CALLDROP_LITE
  /// <li>\#TONE_CDMA_NETWORK_BUSY_ONE_SHOT
  /// <li>\#TONE_CDMA_ABBR_ALERT
  /// <li>\#TONE_CDMA_SIGNAL_OFF
  /// </ul>
  ///@see \#ToneGenerator(int, int)
  bool startTone(int toneType) => jniAccessors.callMethodWithArgs(
      reference, _id_startTone, jni.JniType.booleanType, [toneType]).boolean;

  static final _id_startTone1 =
      jniAccessors.getMethodIDOf(_classRef, "startTone", "(II)Z");

  /// from: public native boolean startTone(int toneType, int durationMs)
  ///
  /// This method starts the playback of a tone of the specified type for the specified duration.
  ///@param toneType The type of tone generated @see \#startTone(int).
  ///@param durationMs The tone duration in milliseconds. If the tone is limited in time by definition,
  /// the actual duration will be the minimum of durationMs and the defined tone duration. Setting durationMs to -1,
  /// is equivalent to calling \#startTone(int).
  bool startTone1(int toneType, int durationMs) =>
      jniAccessors.callMethodWithArgs(reference, _id_startTone1,
          jni.JniType.booleanType, [toneType, durationMs]).boolean;

  static final _id_stopTone =
      jniAccessors.getMethodIDOf(_classRef, "stopTone", "()V");

  /// from: public native void stopTone()
  ///
  /// This method stops the tone currently playing playback.
  ///@see \#ToneGenerator(int, int)
  void stopTone() => jniAccessors.callMethodWithArgs(
      reference, _id_stopTone, jni.JniType.voidType, []).check();

  static final _id_release =
      jniAccessors.getMethodIDOf(_classRef, "release", "()V");

  /// from: public native void release()
  ///
  /// Releases resources associated with this ToneGenerator object. It is good
  /// practice to call this method when you're done using the ToneGenerator.
  void release() => jniAccessors.callMethodWithArgs(
      reference, _id_release, jni.JniType.voidType, []).check();

  static final _id_getAudioSessionId =
      jniAccessors.getMethodIDOf(_classRef, "getAudioSessionId", "()I");

  /// from: public native final int getAudioSessionId()
  ///
  /// Returns the audio session ID.
  ///@return the ID of the audio session this ToneGenerator belongs to or 0 if an error
  /// occured.
  int getAudioSessionId() => jniAccessors.callMethodWithArgs(
      reference, _id_getAudioSessionId, jni.JniType.intType, []).integer;

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();
}
