// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../content/Context.dart" as context_;

import "../../content/ComponentName.dart" as componentname_;

import "../../os/Bundle.dart" as bundle_;

import "../session/MediaSession.dart" as mediasession_;

import "../../os/Parcelable.dart" as parcelable_;

import "../MediaDescription.dart" as mediadescription_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.browse.MediaBrowser
///
/// Browses media content offered by a link MediaBrowserService.
///
/// This object is not thread-safe. All calls should happen on the thread on which the browser
/// was constructed.
///
///
/// <h3>Standard Extra Data</h3>
///
/// These are the current standard fields that can be used as extra data via
/// \#subscribe(String, Bundle, SubscriptionCallback),
/// \#unsubscribe(String, SubscriptionCallback), and
/// SubscriptionCallback\#onChildrenLoaded(String, List, Bundle).
///
/// <ul>
///     <li> \#EXTRA_PAGE
///     <li> \#EXTRA_PAGE_SIZE
/// </ul>
class MediaBrowser extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/browse/MediaBrowser");
  MediaBrowser.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String EXTRA_PAGE
  ///
  /// Used as an int extra field to denote the page number to subscribe.
  /// The value of {@code EXTRA_PAGE} should be greater than or equal to 0.
  ///@see \#EXTRA_PAGE_SIZE
  static const EXTRA_PAGE = "android.media.browse.extra.PAGE";

  /// from: static public final java.lang.String EXTRA_PAGE_SIZE
  ///
  /// Used as an int extra field to denote the number of media items in a page.
  /// The value of {@code EXTRA_PAGE_SIZE} should be greater than or equal to 1.
  ///@see \#EXTRA_PAGE
  static const EXTRA_PAGE_SIZE = "android.media.browse.extra.PAGE_SIZE";

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/content/ComponentName;Landroid/media/browse/MediaBrowser\$ConnectionCallback;Landroid/os/Bundle;)V");

  /// from: public void <init>(android.content.Context context, android.content.ComponentName serviceComponent, android.media.browse.MediaBrowser.ConnectionCallback callback, android.os.Bundle rootHints)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a media browser for the specified media browser service.
  ///@param context The context.
  ///@param serviceComponent The component name of the media browser service.
  ///@param callback The connection callback.
  ///@param rootHints An optional bundle of service-specific arguments to send
  /// to the media browser service when connecting and retrieving the root id
  /// for browsing, or null if none. The contents of this bundle may affect
  /// the information returned when browsing.
  ///@see android.service.media.MediaBrowserService.BrowserRoot\#EXTRA_RECENT
  ///@see android.service.media.MediaBrowserService.BrowserRoot\#EXTRA_OFFLINE
  ///@see android.service.media.MediaBrowserService.BrowserRoot\#EXTRA_SUGGESTED
  MediaBrowser(
      context_.Context context,
      componentname_.ComponentName serviceComponent,
      MediaBrowser_ConnectionCallback callback,
      bundle_.Bundle rootHints)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          context.reference,
          serviceComponent.reference,
          callback.reference,
          rootHints.reference
        ]).object);

  static final _id_connect =
      jniAccessors.getMethodIDOf(_classRef, "connect", "()V");

  /// from: public void connect()
  ///
  /// Connects to the media browser service.
  ///
  /// The connection callback specified in the constructor will be invoked
  /// when the connection completes or fails.
  ///
  ///
  void connect() => jniAccessors.callMethodWithArgs(
      reference, _id_connect, jni.JniType.voidType, []).check();

  static final _id_disconnect =
      jniAccessors.getMethodIDOf(_classRef, "disconnect", "()V");

  /// from: public void disconnect()
  ///
  /// Disconnects from the media browser service.
  /// After this, no more callbacks will be received.
  void disconnect() => jniAccessors.callMethodWithArgs(
      reference, _id_disconnect, jni.JniType.voidType, []).check();

  static final _id_isConnected =
      jniAccessors.getMethodIDOf(_classRef, "isConnected", "()Z");

  /// from: public boolean isConnected()
  ///
  /// Returns whether the browser is connected to the service.
  bool isConnected() => jniAccessors.callMethodWithArgs(
      reference, _id_isConnected, jni.JniType.booleanType, []).boolean;

  static final _id_getServiceComponent = jniAccessors.getMethodIDOf(
      _classRef, "getServiceComponent", "()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getServiceComponent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the service component that the media browser is connected to.
  ///@return This value will never be {@code null}.
  componentname_.ComponentName getServiceComponent() =>
      componentname_.ComponentName.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getServiceComponent,
          jni.JniType.objectType, []).object);

  static final _id_getRoot =
      jniAccessors.getMethodIDOf(_classRef, "getRoot", "()Ljava/lang/String;");

  /// from: public java.lang.String getRoot()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the root id.
  ///
  /// Note that the root id may become invalid or change when the
  /// browser is disconnected.
  ///
  ///
  ///@throws IllegalStateException if not connected.
  ///@return This value will never be {@code null}.
  jni.JniString getRoot() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getRoot, jni.JniType.objectType, []).object);

  static final _id_getExtras = jniAccessors.getMethodIDOf(
      _classRef, "getExtras", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets any extras for the media service.
  ///@throws IllegalStateException if not connected.
  ///@return This value may be {@code null}.
  bundle_.Bundle getExtras() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtras, jni.JniType.objectType, []).object);

  static final _id_getSessionToken = jniAccessors.getMethodIDOf(_classRef,
      "getSessionToken", "()Landroid/media/session/MediaSession\$Token;");

  /// from: public android.media.session.MediaSession.Token getSessionToken()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the media session token associated with the media browser.
  ///
  /// Note that the session token may become invalid or change when the
  /// browser is disconnected.
  ///
  ///
  ///@return The session token for the browser, never null.
  ///@throws IllegalStateException if not connected.
  mediasession_.MediaSession_Token getSessionToken() =>
      mediasession_.MediaSession_Token.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSessionToken, jni.JniType.objectType, []).object);

  static final _id_subscribe = jniAccessors.getMethodIDOf(
      _classRef,
      "subscribe",
      "(Ljava/lang/String;Landroid/media/browse/MediaBrowser\$SubscriptionCallback;)V");

  /// from: public void subscribe(java.lang.String parentId, android.media.browse.MediaBrowser.SubscriptionCallback callback)
  ///
  /// Queries for information about the media items that are contained within
  /// the specified id and subscribes to receive updates when they change.
  ///
  /// The list of subscriptions is maintained even when not connected and is
  /// restored after the reconnection. It is ok to subscribe while not connected
  /// but the results will not be returned until the connection completes.
  ///
  ///
  ///
  /// If the id is already subscribed with a different callback then the new
  /// callback will replace the previous one and the child data will be
  /// reloaded.
  ///
  ///
  ///@param parentId The id of the parent media item whose list of children
  ///            will be subscribed.
  /// This value must never be {@code null}.
  ///@param callback The callback to receive the list of children.
  ///
  /// This value must never be {@code null}.
  void subscribe(
          jni.JniString parentId, MediaBrowser_SubscriptionCallback callback) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_subscribe,
          jni.JniType.voidType,
          [parentId.reference, callback.reference]).check();

  static final _id_subscribe1 = jniAccessors.getMethodIDOf(
      _classRef,
      "subscribe",
      "(Ljava/lang/String;Landroid/os/Bundle;Landroid/media/browse/MediaBrowser\$SubscriptionCallback;)V");

  /// from: public void subscribe(java.lang.String parentId, android.os.Bundle options, android.media.browse.MediaBrowser.SubscriptionCallback callback)
  ///
  /// Queries with service-specific arguments for information about the media items
  /// that are contained within the specified id and subscribes to receive updates
  /// when they change.
  ///
  /// The list of subscriptions is maintained even when not connected and is
  /// restored after the reconnection. It is ok to subscribe while not connected
  /// but the results will not be returned until the connection completes.
  ///
  ///
  ///
  /// If the id is already subscribed with a different callback then the new
  /// callback will replace the previous one and the child data will be
  /// reloaded.
  ///
  ///
  ///@param parentId The id of the parent media item whose list of children
  ///            will be subscribed.
  /// This value must never be {@code null}.
  ///@param options The bundle of service-specific arguments to send to the media
  ///            browser service. The contents of this bundle may affect the
  ///            information returned when browsing.
  /// This value must never be {@code null}.
  ///@param callback The callback to receive the list of children.
  ///
  /// This value must never be {@code null}.
  void subscribe1(jni.JniString parentId, bundle_.Bundle options,
          MediaBrowser_SubscriptionCallback callback) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_subscribe1,
          jni.JniType.voidType,
          [parentId.reference, options.reference, callback.reference]).check();

  static final _id_unsubscribe = jniAccessors.getMethodIDOf(
      _classRef, "unsubscribe", "(Ljava/lang/String;)V");

  /// from: public void unsubscribe(java.lang.String parentId)
  ///
  /// Unsubscribes for changes to the children of the specified media id.
  ///
  /// The query callback will no longer be invoked for results associated with
  /// this id once this method returns.
  ///
  ///
  ///@param parentId The id of the parent media item whose list of children
  ///            will be unsubscribed.
  ///
  /// This value must never be {@code null}.
  void unsubscribe(jni.JniString parentId) => jniAccessors.callMethodWithArgs(
      reference,
      _id_unsubscribe,
      jni.JniType.voidType,
      [parentId.reference]).check();

  static final _id_unsubscribe1 = jniAccessors.getMethodIDOf(
      _classRef,
      "unsubscribe",
      "(Ljava/lang/String;Landroid/media/browse/MediaBrowser\$SubscriptionCallback;)V");

  /// from: public void unsubscribe(java.lang.String parentId, android.media.browse.MediaBrowser.SubscriptionCallback callback)
  ///
  /// Unsubscribes for changes to the children of the specified media id through a callback.
  ///
  /// The query callback will no longer be invoked for results associated with
  /// this id once this method returns.
  ///
  ///
  ///@param parentId The id of the parent media item whose list of children
  ///            will be unsubscribed.
  /// This value must never be {@code null}.
  ///@param callback A callback sent to the media browser service to subscribe.
  ///
  /// This value must never be {@code null}.
  void unsubscribe1(
          jni.JniString parentId, MediaBrowser_SubscriptionCallback callback) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_unsubscribe1,
          jni.JniType.voidType,
          [parentId.reference, callback.reference]).check();

  static final _id_getItem = jniAccessors.getMethodIDOf(_classRef, "getItem",
      "(Ljava/lang/String;Landroid/media/browse/MediaBrowser\$ItemCallback;)V");

  /// from: public void getItem(java.lang.String mediaId, android.media.browse.MediaBrowser.ItemCallback cb)
  ///
  /// Retrieves a specific MediaItem from the connected service. Not
  /// all services may support this, so falling back to subscribing to the
  /// parent's id should be used when unavailable.
  ///@param mediaId The id of the item to retrieve.
  /// This value must never be {@code null}.
  ///@param cb The callback to receive the result on.
  ///
  /// This value must never be {@code null}.
  void getItem(jni.JniString mediaId, MediaBrowser_ItemCallback cb) =>
      jniAccessors.callMethodWithArgs(reference, _id_getItem,
          jni.JniType.voidType, [mediaId.reference, cb.reference]).check();
}

/// from: android.media.browse.MediaBrowser$SubscriptionCallback
///
/// Callbacks for subscription related events.
class MediaBrowser_SubscriptionCallback extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/browse/MediaBrowser\$SubscriptionCallback");
  MediaBrowser_SubscriptionCallback.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MediaBrowser_SubscriptionCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onChildrenLoaded = jniAccessors.getMethodIDOf(
      _classRef, "onChildrenLoaded", "(Ljava/lang/String;Ljava/util/List;)V");

  /// from: public void onChildrenLoaded(java.lang.String parentId, java.util.List<android.media.browse.MediaBrowser.MediaItem> children)
  ///
  /// Called when the list of children is loaded or updated.
  ///@param parentId The media id of the parent media item.
  /// This value must never be {@code null}.
  ///@param children The children which were loaded.
  ///
  /// This value must never be {@code null}.
  void onChildrenLoaded(jni.JniString parentId, jni.JniObject children) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onChildrenLoaded,
          jni.JniType.voidType,
          [parentId.reference, children.reference]).check();

  static final _id_onChildrenLoaded1 = jniAccessors.getMethodIDOf(
      _classRef,
      "onChildrenLoaded",
      "(Ljava/lang/String;Ljava/util/List;Landroid/os/Bundle;)V");

  /// from: public void onChildrenLoaded(java.lang.String parentId, java.util.List<android.media.browse.MediaBrowser.MediaItem> children, android.os.Bundle options)
  ///
  /// Called when the list of children is loaded or updated.
  ///@param parentId The media id of the parent media item.
  /// This value must never be {@code null}.
  ///@param children The children which were loaded.
  /// This value must never be {@code null}.
  ///@param options The bundle of service-specific arguments sent to the media
  ///            browser service. The contents of this bundle may affect the
  ///            information returned when browsing.
  ///
  /// This value must never be {@code null}.
  void onChildrenLoaded1(jni.JniString parentId, jni.JniObject children,
          bundle_.Bundle options) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onChildrenLoaded1,
          jni.JniType.voidType,
          [parentId.reference, children.reference, options.reference]).check();

  static final _id_onError =
      jniAccessors.getMethodIDOf(_classRef, "onError", "(Ljava/lang/String;)V");

  /// from: public void onError(java.lang.String parentId)
  ///
  /// Called when the id doesn't exist or other errors in subscribing.
  ///
  /// If this is called, the subscription remains until MediaBrowser\#unsubscribe
  /// called, because some errors may heal themselves.
  ///
  ///
  ///@param parentId The media id of the parent media item whose children could
  ///            not be loaded.
  ///
  /// This value must never be {@code null}.
  void onError(jni.JniString parentId) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onError,
      jni.JniType.voidType,
      [parentId.reference]).check();

  static final _id_onError1 = jniAccessors.getMethodIDOf(
      _classRef, "onError", "(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void onError(java.lang.String parentId, android.os.Bundle options)
  ///
  /// Called when the id doesn't exist or other errors in subscribing.
  ///
  /// If this is called, the subscription remains until MediaBrowser\#unsubscribe
  /// called, because some errors may heal themselves.
  ///
  ///
  ///@param parentId The media id of the parent media item whose children could
  ///            not be loaded.
  /// This value must never be {@code null}.
  ///@param options The bundle of service-specific arguments sent to the media
  ///            browser service.
  ///
  /// This value must never be {@code null}.
  void onError1(jni.JniString parentId, bundle_.Bundle options) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onError1,
          jni.JniType.voidType,
          [parentId.reference, options.reference]).check();
}

/// from: android.media.browse.MediaBrowser$MediaItem
///
/// A class with information on a single media item for use in browsing/searching media.
/// MediaItems are application dependent so we cannot guarantee that they contain the
/// right values.
class MediaBrowser_MediaItem extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/browse/MediaBrowser\$MediaItem");
  MediaBrowser_MediaItem.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.media.browse.MediaBrowser.MediaItem> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int FLAG_BROWSABLE
  ///
  /// Flag: Indicates that the item has children of its own.
  static const FLAG_BROWSABLE = 1;

  /// from: static public final int FLAG_PLAYABLE
  ///
  /// Flag: Indicates that the item is playable.
  ///
  /// The id of this item may be passed to
  /// MediaController.TransportControls\#playFromMediaId(String, Bundle)
  /// to start playing it.
  ///
  ///
  static const FLAG_PLAYABLE = 2;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/media/MediaDescription;I)V");

  /// from: public void <init>(android.media.MediaDescription description, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new MediaItem for use in browsing media.
  ///@param description The description of the media, which must include a
  ///            media id.
  /// This value must never be {@code null}.
  ///@param flags The flags for this item.
  ///
  /// Value is either <code>0</code> or a combination of android.media.browse.MediaBrowser.MediaItem\#FLAG_BROWSABLE, and android.media.browse.MediaBrowser.MediaItem\#FLAG_PLAYABLE
  MediaBrowser_MediaItem(
      mediadescription_.MediaDescription description, int flags)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [description.reference, flags]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_getFlags =
      jniAccessors.getMethodIDOf(_classRef, "getFlags", "()I");

  /// from: public int getFlags()
  ///
  /// Gets the flags of the item.
  ///@return Value is either <code>0</code> or a combination of android.media.browse.MediaBrowser.MediaItem\#FLAG_BROWSABLE, and android.media.browse.MediaBrowser.MediaItem\#FLAG_PLAYABLE
  int getFlags() => jniAccessors.callMethodWithArgs(
      reference, _id_getFlags, jni.JniType.intType, []).integer;

  static final _id_isBrowsable =
      jniAccessors.getMethodIDOf(_classRef, "isBrowsable", "()Z");

  /// from: public boolean isBrowsable()
  ///
  /// Returns whether this item is browsable.
  ///@see \#FLAG_BROWSABLE
  bool isBrowsable() => jniAccessors.callMethodWithArgs(
      reference, _id_isBrowsable, jni.JniType.booleanType, []).boolean;

  static final _id_isPlayable =
      jniAccessors.getMethodIDOf(_classRef, "isPlayable", "()Z");

  /// from: public boolean isPlayable()
  ///
  /// Returns whether this item is playable.
  ///@see \#FLAG_PLAYABLE
  bool isPlayable() => jniAccessors.callMethodWithArgs(
      reference, _id_isPlayable, jni.JniType.booleanType, []).boolean;

  static final _id_getDescription = jniAccessors.getMethodIDOf(
      _classRef, "getDescription", "()Landroid/media/MediaDescription;");

  /// from: public android.media.MediaDescription getDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the description of the media.
  ///@return This value will never be {@code null}.
  mediadescription_.MediaDescription getDescription() =>
      mediadescription_.MediaDescription.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getDescription,
              jni.JniType.objectType, []).object);

  static final _id_getMediaId = jniAccessors.getMethodIDOf(
      _classRef, "getMediaId", "()Ljava/lang/String;");

  /// from: public java.lang.String getMediaId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the media id in the MediaDescription for this item.
  ///@see android.media.MediaMetadata\#METADATA_KEY_MEDIA_ID
  ///@return This value may be {@code null}.
  jni.JniString getMediaId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMediaId, jni.JniType.objectType, []).object);
}

/// from: android.media.browse.MediaBrowser$ItemCallback
///
/// Callback for receiving the result of \#getItem.
class MediaBrowser_ItemCallback extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/browse/MediaBrowser\$ItemCallback");
  MediaBrowser_ItemCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MediaBrowser_ItemCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onItemLoaded = jniAccessors.getMethodIDOf(_classRef,
      "onItemLoaded", "(Landroid/media/browse/MediaBrowser\$MediaItem;)V");

  /// from: public void onItemLoaded(android.media.browse.MediaBrowser.MediaItem item)
  ///
  /// Called when the item has been returned by the connected service.
  ///@param item The item that was returned or null if it doesn't exist.
  void onItemLoaded(MediaBrowser_MediaItem item) =>
      jniAccessors.callMethodWithArgs(reference, _id_onItemLoaded,
          jni.JniType.voidType, [item.reference]).check();

  static final _id_onError =
      jniAccessors.getMethodIDOf(_classRef, "onError", "(Ljava/lang/String;)V");

  /// from: public void onError(java.lang.String mediaId)
  ///
  /// Called there was an error retrieving it or the connected service doesn't support
  /// \#getItem.
  ///@param mediaId The media id of the media item which could not be loaded.
  ///
  /// This value must never be {@code null}.
  void onError(jni.JniString mediaId) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onError,
      jni.JniType.voidType,
      [mediaId.reference]).check();
}

/// from: android.media.browse.MediaBrowser$ConnectionCallback
///
/// Callbacks for connection related events.
class MediaBrowser_ConnectionCallback extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/media/browse/MediaBrowser\$ConnectionCallback");
  MediaBrowser_ConnectionCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MediaBrowser_ConnectionCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onConnected =
      jniAccessors.getMethodIDOf(_classRef, "onConnected", "()V");

  /// from: public void onConnected()
  ///
  /// Invoked after MediaBrowser\#connect() when the request has successfully completed.
  void onConnected() => jniAccessors.callMethodWithArgs(
      reference, _id_onConnected, jni.JniType.voidType, []).check();

  static final _id_onConnectionSuspended =
      jniAccessors.getMethodIDOf(_classRef, "onConnectionSuspended", "()V");

  /// from: public void onConnectionSuspended()
  ///
  /// Invoked when the client is disconnected from the media browser.
  void onConnectionSuspended() => jniAccessors.callMethodWithArgs(
      reference, _id_onConnectionSuspended, jni.JniType.voidType, []).check();

  static final _id_onConnectionFailed =
      jniAccessors.getMethodIDOf(_classRef, "onConnectionFailed", "()V");

  /// from: public void onConnectionFailed()
  ///
  /// Invoked when the connection to the media browser failed.
  void onConnectionFailed() => jniAccessors.callMethodWithArgs(
      reference, _id_onConnectionFailed, jni.JniType.voidType, []).check();
}
