// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../graphics/Rect.dart" as rect_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.TimedText
///
/// Class to hold the timed text's metadata, including:
/// <ul>
/// <li> The characters for rendering</li>
/// <li> The rendering position for the timed text</li>
/// </ul>
///
///  To render the timed text, applications need to do the following:
///
/// <ul>
/// <li> Implement the MediaPlayer.OnTimedTextListener interface</li>
/// <li> Register the MediaPlayer.OnTimedTextListener callback on a MediaPlayer object that is used for playback</li>
/// <li> When a onTimedText callback is received, do the following:
/// <ul>
/// <li> call \#getText to get the characters for rendering</li>
/// <li> call \#getBounds to get the text rendering area/region</li>
/// </ul>
/// </li>
/// </ul>
///@see android.media.MediaPlayer
class TimedText extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/media/TimedText");
  TimedText.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getText =
      jniAccessors.getMethodIDOf(_classRef, "getText", "()Ljava/lang/String;");

  /// from: public java.lang.String getText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the characters in the timed text.
  ///@return the characters as a String object in the TimedText. Applications
  /// should stop rendering previous timed text at the current rendering region if
  /// a null is returned, until the next non-null timed text is received.
  jni.JniString getText() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText, jni.JniType.objectType, []).object);

  static final _id_getBounds = jniAccessors.getMethodIDOf(
      _classRef, "getBounds", "()Landroid/graphics/Rect;");

  /// from: public android.graphics.Rect getBounds()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the rectangle area or region for rendering the timed text as specified
  /// by a Rect object.
  ///@return the rectangle region to render the characters in the timed text.
  /// If no bounds information is available (a null is returned), render the
  /// timed text at the center bottom of the display.
  rect_.Rect getBounds() => rect_.Rect.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getBounds, jni.JniType.objectType, []).object);
}
