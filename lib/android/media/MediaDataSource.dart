// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.MediaDataSource
///
/// For supplying media data to the framework. Implement this if your app has
/// special requirements for the way media data is obtained.
///
/// <p class="note">Methods of this interface may be called on multiple different
/// threads. There will be a thread synchronization point between each call to ensure that
/// modifications to the state of your MediaDataSource are visible to future calls. This means
/// you don't need to do your own synchronization unless you're modifying the
/// MediaDataSource from another thread while it's being used by the framework.
///
class MediaDataSource extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/MediaDataSource");
  MediaDataSource.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MediaDataSource()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_readAt =
      jniAccessors.getMethodIDOf(_classRef, "readAt", "(J[BII)I");

  /// from: public abstract int readAt(long position, byte[] buffer, int offset, int size)
  ///
  /// Called to request data from the given position.
  ///
  /// Implementations should fill {@code buffer} with up to {@code size}
  /// bytes of data, and return the number of valid bytes in the buffer.
  ///
  /// Return {@code 0} if size is zero (thus no bytes are read).
  ///
  /// Return {@code -1} to indicate that end of stream is reached.
  ///@param position the position in the data source to read from.
  ///@param buffer the buffer to read the data into.
  ///@param offset the offset within buffer to read the data into.
  ///@param size the number of bytes to read.
  ///@throws IOException on fatal errors.
  ///@return the number of bytes read, or -1 if there was an error.
  int readAt(int position, jni.JniObject buffer, int offset, int size) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_readAt,
          jni.JniType.intType,
          [position, buffer.reference, offset, size]).integer;

  static final _id_getSize =
      jniAccessors.getMethodIDOf(_classRef, "getSize", "()J");

  /// from: public abstract long getSize()
  ///
  /// Called to get the size of the data source.
  ///@throws IOException on fatal errors
  ///@return the size of data source in bytes, or -1 if the size is unknown.
  int getSize() => jniAccessors.callMethodWithArgs(
      reference, _id_getSize, jni.JniType.longType, []).long;
}
