// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.media.PlaybackParams
///
/// Structure for common playback params.
///
/// Used by AudioTrack AudioTrack\#getPlaybackParams() and
/// AudioTrack\#setPlaybackParams(PlaybackParams)
/// to control playback behavior.
///  <strong>audio fallback mode:</strong>
/// select out-of-range parameter handling.
/// <ul>
/// <li> PlaybackParams\#AUDIO_FALLBACK_MODE_DEFAULT:
///   System will determine best handling. </li>
/// <li> PlaybackParams\#AUDIO_FALLBACK_MODE_MUTE:
///   Play silence for params normally out of range.</li>
/// <li> PlaybackParams\#AUDIO_FALLBACK_MODE_FAIL:
///   Return java.lang.IllegalArgumentException from
///   <code>AudioTrack.setPlaybackParams(PlaybackParams)</code>.</li>
/// </ul>
///  <strong>pitch:</strong> increases or decreases the tonal frequency of the audio content.
/// It is expressed as a multiplicative factor, where normal pitch is 1.0f.
///  <strong>speed:</strong> increases or decreases the time to
/// play back a set of audio or video frames.
/// It is expressed as a multiplicative factor, where normal speed is 1.0f.
///  Different combinations of speed and pitch may be used for audio playback;
/// some common ones:
/// <ul>
/// <li> _Pitch equals 1.0f._ Speed change will be done with pitch preserved,
/// often called _timestretching_.</li>
/// <li> _Pitch equals speed._ Speed change will be done by _resampling_,
/// similar to AudioTrack\#setPlaybackRate(int).</li>
/// </ul>
class PlaybackParams extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/media/PlaybackParams");
  PlaybackParams.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int AUDIO_FALLBACK_MODE_DEFAULT
  static const AUDIO_FALLBACK_MODE_DEFAULT = 0;

  /// from: static public final int AUDIO_FALLBACK_MODE_FAIL
  static const AUDIO_FALLBACK_MODE_FAIL = 2;

  /// from: static public final int AUDIO_FALLBACK_MODE_MUTE
  static const AUDIO_FALLBACK_MODE_MUTE = 1;

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.media.PlaybackParams> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PlaybackParams()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_allowDefaults = jniAccessors.getMethodIDOf(
      _classRef, "allowDefaults", "()Landroid/media/PlaybackParams;");

  /// from: public android.media.PlaybackParams allowDefaults()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Allows defaults to be returned for properties not set.
  /// Otherwise a java.lang.IllegalArgumentException exception
  /// is raised when getting those properties
  /// which have defaults but have never been set.
  ///@return this <code>PlaybackParams</code> instance.
  PlaybackParams allowDefaults() =>
      PlaybackParams.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_allowDefaults, jni.JniType.objectType, []).object);

  static final _id_setAudioFallbackMode = jniAccessors.getMethodIDOf(
      _classRef, "setAudioFallbackMode", "(I)Landroid/media/PlaybackParams;");

  /// from: public android.media.PlaybackParams setAudioFallbackMode(int audioFallbackMode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the audio fallback mode.
  ///@param audioFallbackMode Value is android.media.PlaybackParams\#AUDIO_FALLBACK_MODE_DEFAULT, android.media.PlaybackParams\#AUDIO_FALLBACK_MODE_MUTE, or android.media.PlaybackParams\#AUDIO_FALLBACK_MODE_FAIL
  ///@return this <code>PlaybackParams</code> instance.
  PlaybackParams setAudioFallbackMode(int audioFallbackMode) =>
      PlaybackParams.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAudioFallbackMode,
          jni.JniType.objectType,
          [audioFallbackMode]).object);

  static final _id_getAudioFallbackMode =
      jniAccessors.getMethodIDOf(_classRef, "getAudioFallbackMode", "()I");

  /// from: public int getAudioFallbackMode()
  ///
  /// Retrieves the audio fallback mode.
  ///@return audio fallback mode
  /// Value is android.media.PlaybackParams\#AUDIO_FALLBACK_MODE_DEFAULT, android.media.PlaybackParams\#AUDIO_FALLBACK_MODE_MUTE, or android.media.PlaybackParams\#AUDIO_FALLBACK_MODE_FAIL
  ///@throws IllegalStateException if the audio fallback mode is not set.
  int getAudioFallbackMode() => jniAccessors.callMethodWithArgs(
      reference, _id_getAudioFallbackMode, jni.JniType.intType, []).integer;

  static final _id_setPitch = jniAccessors.getMethodIDOf(
      _classRef, "setPitch", "(F)Landroid/media/PlaybackParams;");

  /// from: public android.media.PlaybackParams setPitch(float pitch)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the pitch factor.
  ///@param pitch
  ///@return this <code>PlaybackParams</code> instance.
  ///@throws IllegalArgumentException if the pitch is negative.
  PlaybackParams setPitch(double pitch) =>
      PlaybackParams.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setPitch, jni.JniType.objectType, [pitch]).object);

  static final _id_getPitch =
      jniAccessors.getMethodIDOf(_classRef, "getPitch", "()F");

  /// from: public float getPitch()
  ///
  /// Retrieves the pitch factor.
  ///@return pitch
  ///@throws IllegalStateException if pitch is not set.
  double getPitch() => jniAccessors.callMethodWithArgs(
      reference, _id_getPitch, jni.JniType.floatType, []).float;

  static final _id_setSpeed = jniAccessors.getMethodIDOf(
      _classRef, "setSpeed", "(F)Landroid/media/PlaybackParams;");

  /// from: public android.media.PlaybackParams setSpeed(float speed)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the speed factor.
  ///@param speed
  ///@return this <code>PlaybackParams</code> instance.
  PlaybackParams setSpeed(double speed) =>
      PlaybackParams.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setSpeed, jni.JniType.objectType, [speed]).object);

  static final _id_getSpeed =
      jniAccessors.getMethodIDOf(_classRef, "getSpeed", "()F");

  /// from: public float getSpeed()
  ///
  /// Retrieves the speed factor.
  ///@return speed
  ///@throws IllegalStateException if speed is not set.
  double getSpeed() => jniAccessors.callMethodWithArgs(
      reference, _id_getSpeed, jni.JniType.floatType, []).float;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
