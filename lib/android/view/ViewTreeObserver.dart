// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "View.dart" as view_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.ViewTreeObserver
///
/// A view tree observer is used to register listeners that can be notified of global
/// changes in the view tree. Such global events include, but are not limited to,
/// layout of the whole tree, beginning of the drawing pass, touch mode change....
///
/// A ViewTreeObserver should never be instantiated by applications as it is provided
/// by the views hierarchy. Refer to android.view.View\#getViewTreeObserver()
/// for more information.
class ViewTreeObserver extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/ViewTreeObserver");
  ViewTreeObserver.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new ViewTreeObserver. This constructor should not be called
  ViewTreeObserver(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_addOnWindowAttachListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnWindowAttachListener",
      "(Landroid/view/ViewTreeObserver\$OnWindowAttachListener;)V");

  /// from: public void addOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener listener)
  ///
  /// Register a callback to be invoked when the view hierarchy is attached to a window.
  ///@param listener The callback to add
  ///@throws IllegalStateException If \#isAlive() returns false
  void addOnWindowAttachListener(
          ViewTreeObserver_OnWindowAttachListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_addOnWindowAttachListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_removeOnWindowAttachListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removeOnWindowAttachListener",
      "(Landroid/view/ViewTreeObserver\$OnWindowAttachListener;)V");

  /// from: public void removeOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener victim)
  ///
  /// Remove a previously installed window attach callback.
  ///@param victim The callback to remove
  ///@throws IllegalStateException If \#isAlive() returns false
  ///@see \#addOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)
  void removeOnWindowAttachListener(
          ViewTreeObserver_OnWindowAttachListener victim) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeOnWindowAttachListener,
          jni.JniType.voidType,
          [victim.reference]).check();

  static final _id_addOnWindowFocusChangeListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnWindowFocusChangeListener",
      "(Landroid/view/ViewTreeObserver\$OnWindowFocusChangeListener;)V");

  /// from: public void addOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener listener)
  ///
  /// Register a callback to be invoked when the window focus state within the view tree changes.
  ///@param listener The callback to add
  ///@throws IllegalStateException If \#isAlive() returns false
  void addOnWindowFocusChangeListener(
          ViewTreeObserver_OnWindowFocusChangeListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addOnWindowFocusChangeListener,
          jni.JniType.voidType,
          [listener.reference]).check();

  static final _id_removeOnWindowFocusChangeListener =
      jniAccessors.getMethodIDOf(_classRef, "removeOnWindowFocusChangeListener",
          "(Landroid/view/ViewTreeObserver\$OnWindowFocusChangeListener;)V");

  /// from: public void removeOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener victim)
  ///
  /// Remove a previously installed window focus change callback.
  ///@param victim The callback to remove
  ///@throws IllegalStateException If \#isAlive() returns false
  ///@see \#addOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)
  void removeOnWindowFocusChangeListener(
          ViewTreeObserver_OnWindowFocusChangeListener victim) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeOnWindowFocusChangeListener,
          jni.JniType.voidType,
          [victim.reference]).check();

  static final _id_addOnGlobalFocusChangeListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnGlobalFocusChangeListener",
      "(Landroid/view/ViewTreeObserver\$OnGlobalFocusChangeListener;)V");

  /// from: public void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener listener)
  ///
  /// Register a callback to be invoked when the focus state within the view tree changes.
  ///@param listener The callback to add
  ///@throws IllegalStateException If \#isAlive() returns false
  void addOnGlobalFocusChangeListener(
          ViewTreeObserver_OnGlobalFocusChangeListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addOnGlobalFocusChangeListener,
          jni.JniType.voidType,
          [listener.reference]).check();

  static final _id_removeOnGlobalFocusChangeListener =
      jniAccessors.getMethodIDOf(_classRef, "removeOnGlobalFocusChangeListener",
          "(Landroid/view/ViewTreeObserver\$OnGlobalFocusChangeListener;)V");

  /// from: public void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener victim)
  ///
  /// Remove a previously installed focus change callback.
  ///@param victim The callback to remove
  ///@throws IllegalStateException If \#isAlive() returns false
  ///@see \#addOnGlobalFocusChangeListener(OnGlobalFocusChangeListener)
  void removeOnGlobalFocusChangeListener(
          ViewTreeObserver_OnGlobalFocusChangeListener victim) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeOnGlobalFocusChangeListener,
          jni.JniType.voidType,
          [victim.reference]).check();

  static final _id_addOnGlobalLayoutListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnGlobalLayoutListener",
      "(Landroid/view/ViewTreeObserver\$OnGlobalLayoutListener;)V");

  /// from: public void addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener listener)
  ///
  /// Register a callback to be invoked when the global layout state or the visibility of views
  /// within the view tree changes
  ///@param listener The callback to add
  ///@throws IllegalStateException If \#isAlive() returns false
  void addOnGlobalLayoutListener(
          ViewTreeObserver_OnGlobalLayoutListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_addOnGlobalLayoutListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_removeGlobalOnLayoutListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removeGlobalOnLayoutListener",
      "(Landroid/view/ViewTreeObserver\$OnGlobalLayoutListener;)V");

  /// from: public void removeGlobalOnLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener victim)
  ///
  /// Remove a previously installed global layout callback
  ///@param victim The callback to remove
  ///@throws IllegalStateException If \#isAlive() returns false
  ///@deprecated Use \#removeOnGlobalLayoutListener instead
  ///@see \#addOnGlobalLayoutListener(OnGlobalLayoutListener)
  void removeGlobalOnLayoutListener(
          ViewTreeObserver_OnGlobalLayoutListener victim) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeGlobalOnLayoutListener,
          jni.JniType.voidType,
          [victim.reference]).check();

  static final _id_removeOnGlobalLayoutListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removeOnGlobalLayoutListener",
      "(Landroid/view/ViewTreeObserver\$OnGlobalLayoutListener;)V");

  /// from: public void removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener victim)
  ///
  /// Remove a previously installed global layout callback
  ///@param victim The callback to remove
  ///@throws IllegalStateException If \#isAlive() returns false
  ///@see \#addOnGlobalLayoutListener(OnGlobalLayoutListener)
  void removeOnGlobalLayoutListener(
          ViewTreeObserver_OnGlobalLayoutListener victim) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeOnGlobalLayoutListener,
          jni.JniType.voidType,
          [victim.reference]).check();

  static final _id_addOnPreDrawListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnPreDrawListener",
      "(Landroid/view/ViewTreeObserver\$OnPreDrawListener;)V");

  /// from: public void addOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener listener)
  ///
  /// Register a callback to be invoked when the view tree is about to be drawn
  ///@param listener The callback to add
  ///@throws IllegalStateException If \#isAlive() returns false
  void addOnPreDrawListener(ViewTreeObserver_OnPreDrawListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_addOnPreDrawListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_removeOnPreDrawListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removeOnPreDrawListener",
      "(Landroid/view/ViewTreeObserver\$OnPreDrawListener;)V");

  /// from: public void removeOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener victim)
  ///
  /// Remove a previously installed pre-draw callback
  ///@param victim The callback to remove
  ///@throws IllegalStateException If \#isAlive() returns false
  ///@see \#addOnPreDrawListener(OnPreDrawListener)
  void removeOnPreDrawListener(ViewTreeObserver_OnPreDrawListener victim) =>
      jniAccessors.callMethodWithArgs(reference, _id_removeOnPreDrawListener,
          jni.JniType.voidType, [victim.reference]).check();

  static final _id_addOnDrawListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnDrawListener",
      "(Landroid/view/ViewTreeObserver\$OnDrawListener;)V");

  /// from: public void addOnDrawListener(android.view.ViewTreeObserver.OnDrawListener listener)
  ///
  /// Register a callback to be invoked when the view tree is about to be drawn.
  ///
  /// <strong>Note:</strong> this method <strong>cannot</strong> be invoked from
  /// android.view.ViewTreeObserver.OnDrawListener\#onDraw().
  ///
  ///@param listener The callback to add
  ///@throws IllegalStateException If \#isAlive() returns false
  void addOnDrawListener(ViewTreeObserver_OnDrawListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_addOnDrawListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_removeOnDrawListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removeOnDrawListener",
      "(Landroid/view/ViewTreeObserver\$OnDrawListener;)V");

  /// from: public void removeOnDrawListener(android.view.ViewTreeObserver.OnDrawListener victim)
  ///
  /// Remove a previously installed pre-draw callback.
  ///
  /// <strong>Note:</strong> this method <strong>cannot</strong> be invoked from
  /// android.view.ViewTreeObserver.OnDrawListener\#onDraw().
  ///
  ///@param victim The callback to remove
  ///@throws IllegalStateException If \#isAlive() returns false
  ///@see \#addOnDrawListener(OnDrawListener)
  void removeOnDrawListener(ViewTreeObserver_OnDrawListener victim) =>
      jniAccessors.callMethodWithArgs(reference, _id_removeOnDrawListener,
          jni.JniType.voidType, [victim.reference]).check();

  static final _id_addOnScrollChangedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnScrollChangedListener",
      "(Landroid/view/ViewTreeObserver\$OnScrollChangedListener;)V");

  /// from: public void addOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener listener)
  ///
  /// Register a callback to be invoked when a view has been scrolled.
  ///@param listener The callback to add
  ///@throws IllegalStateException If \#isAlive() returns false
  void addOnScrollChangedListener(
          ViewTreeObserver_OnScrollChangedListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_addOnScrollChangedListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_removeOnScrollChangedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removeOnScrollChangedListener",
      "(Landroid/view/ViewTreeObserver\$OnScrollChangedListener;)V");

  /// from: public void removeOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener victim)
  ///
  /// Remove a previously installed scroll-changed callback
  ///@param victim The callback to remove
  ///@throws IllegalStateException If \#isAlive() returns false
  ///@see \#addOnScrollChangedListener(OnScrollChangedListener)
  void removeOnScrollChangedListener(
          ViewTreeObserver_OnScrollChangedListener victim) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeOnScrollChangedListener,
          jni.JniType.voidType,
          [victim.reference]).check();

  static final _id_addOnTouchModeChangeListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnTouchModeChangeListener",
      "(Landroid/view/ViewTreeObserver\$OnTouchModeChangeListener;)V");

  /// from: public void addOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener listener)
  ///
  /// Register a callback to be invoked when the invoked when the touch mode changes.
  ///@param listener The callback to add
  ///@throws IllegalStateException If \#isAlive() returns false
  void addOnTouchModeChangeListener(
          ViewTreeObserver_OnTouchModeChangeListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addOnTouchModeChangeListener,
          jni.JniType.voidType,
          [listener.reference]).check();

  static final _id_removeOnTouchModeChangeListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removeOnTouchModeChangeListener",
      "(Landroid/view/ViewTreeObserver\$OnTouchModeChangeListener;)V");

  /// from: public void removeOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener victim)
  ///
  /// Remove a previously installed touch mode change callback
  ///@param victim The callback to remove
  ///@throws IllegalStateException If \#isAlive() returns false
  ///@see \#addOnTouchModeChangeListener(OnTouchModeChangeListener)
  void removeOnTouchModeChangeListener(
          ViewTreeObserver_OnTouchModeChangeListener victim) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeOnTouchModeChangeListener,
          jni.JniType.voidType,
          [victim.reference]).check();

  static final _id_isAlive =
      jniAccessors.getMethodIDOf(_classRef, "isAlive", "()Z");

  /// from: public boolean isAlive()
  ///
  /// Indicates whether this ViewTreeObserver is alive. When an observer is not alive,
  /// any call to a method (except this one) will throw an exception.
  ///
  /// If an application keeps a long-lived reference to this ViewTreeObserver, it should
  /// always check for the result of this method before calling any other method.
  ///@return True if this object is alive and be used, false otherwise.
  bool isAlive() => jniAccessors.callMethodWithArgs(
      reference, _id_isAlive, jni.JniType.booleanType, []).boolean;

  static final _id_dispatchOnGlobalLayout =
      jniAccessors.getMethodIDOf(_classRef, "dispatchOnGlobalLayout", "()V");

  /// from: public void dispatchOnGlobalLayout()
  ///
  /// Notifies registered listeners that a global layout happened. This can be called
  /// manually if you are forcing a layout on a View or a hierarchy of Views that are
  /// not attached to a Window or in the GONE state.
  void dispatchOnGlobalLayout() => jniAccessors.callMethodWithArgs(
      reference, _id_dispatchOnGlobalLayout, jni.JniType.voidType, []).check();

  static final _id_dispatchOnPreDraw =
      jniAccessors.getMethodIDOf(_classRef, "dispatchOnPreDraw", "()Z");

  /// from: public boolean dispatchOnPreDraw()
  ///
  /// Notifies registered listeners that the drawing pass is about to start. If a
  /// listener returns true, then the drawing pass is canceled and rescheduled. This can
  /// be called manually if you are forcing the drawing on a View or a hierarchy of Views
  /// that are not attached to a Window or in the GONE state.
  ///@return True if the current draw should be canceled and resceduled, false otherwise.
  bool dispatchOnPreDraw() => jniAccessors.callMethodWithArgs(
      reference, _id_dispatchOnPreDraw, jni.JniType.booleanType, []).boolean;

  static final _id_dispatchOnDraw =
      jniAccessors.getMethodIDOf(_classRef, "dispatchOnDraw", "()V");

  /// from: public void dispatchOnDraw()
  ///
  /// Notifies registered listeners that the drawing pass is about to start.
  void dispatchOnDraw() => jniAccessors.callMethodWithArgs(
      reference, _id_dispatchOnDraw, jni.JniType.voidType, []).check();
}

/// from: android.view.ViewTreeObserver$OnWindowFocusChangeListener
///
/// Interface definition for a callback to be invoked when the view hierarchy's window
/// focus state changes.
class ViewTreeObserver_OnWindowFocusChangeListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/ViewTreeObserver\$OnWindowFocusChangeListener");
  ViewTreeObserver_OnWindowFocusChangeListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onWindowFocusChanged =
      jniAccessors.getMethodIDOf(_classRef, "onWindowFocusChanged", "(Z)V");

  /// from: public abstract void onWindowFocusChanged(boolean hasFocus)
  ///
  /// Callback method to be invoked when the window focus changes in the view tree.
  ///@param hasFocus Set to true if the window is gaining focus, false if it is
  /// losing focus.
  void onWindowFocusChanged(bool hasFocus) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onWindowFocusChanged,
      jni.JniType.voidType,
      [hasFocus]).check();
}

/// from: android.view.ViewTreeObserver$OnWindowAttachListener
///
/// Interface definition for a callback to be invoked when the view hierarchy is
/// attached to and detached from its window.
class ViewTreeObserver_OnWindowAttachListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/ViewTreeObserver\$OnWindowAttachListener");
  ViewTreeObserver_OnWindowAttachListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onWindowAttached =
      jniAccessors.getMethodIDOf(_classRef, "onWindowAttached", "()V");

  /// from: public abstract void onWindowAttached()
  ///
  /// Callback method to be invoked when the view hierarchy is attached to a window
  void onWindowAttached() => jniAccessors.callMethodWithArgs(
      reference, _id_onWindowAttached, jni.JniType.voidType, []).check();

  static final _id_onWindowDetached =
      jniAccessors.getMethodIDOf(_classRef, "onWindowDetached", "()V");

  /// from: public abstract void onWindowDetached()
  ///
  /// Callback method to be invoked when the view hierarchy is detached from a window
  void onWindowDetached() => jniAccessors.callMethodWithArgs(
      reference, _id_onWindowDetached, jni.JniType.voidType, []).check();
}

/// from: android.view.ViewTreeObserver$OnTouchModeChangeListener
///
/// Interface definition for a callback to be invoked when the touch mode changes.
class ViewTreeObserver_OnTouchModeChangeListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/ViewTreeObserver\$OnTouchModeChangeListener");
  ViewTreeObserver_OnTouchModeChangeListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onTouchModeChanged =
      jniAccessors.getMethodIDOf(_classRef, "onTouchModeChanged", "(Z)V");

  /// from: public abstract void onTouchModeChanged(boolean isInTouchMode)
  ///
  /// Callback method to be invoked when the touch mode changes.
  ///@param isInTouchMode True if the view hierarchy is now in touch mode, false  otherwise.
  void onTouchModeChanged(bool isInTouchMode) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTouchModeChanged,
          jni.JniType.voidType, [isInTouchMode]).check();
}

/// from: android.view.ViewTreeObserver$OnScrollChangedListener
///
/// Interface definition for a callback to be invoked when
/// something in the view tree has been scrolled.
class ViewTreeObserver_OnScrollChangedListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/ViewTreeObserver\$OnScrollChangedListener");
  ViewTreeObserver_OnScrollChangedListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onScrollChanged =
      jniAccessors.getMethodIDOf(_classRef, "onScrollChanged", "()V");

  /// from: public abstract void onScrollChanged()
  ///
  /// Callback method to be invoked when something in the view tree
  /// has been scrolled.
  void onScrollChanged() => jniAccessors.callMethodWithArgs(
      reference, _id_onScrollChanged, jni.JniType.voidType, []).check();
}

/// from: android.view.ViewTreeObserver$OnPreDrawListener
///
/// Interface definition for a callback to be invoked when the view tree is about to be drawn.
class ViewTreeObserver_OnPreDrawListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/ViewTreeObserver\$OnPreDrawListener");
  ViewTreeObserver_OnPreDrawListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onPreDraw =
      jniAccessors.getMethodIDOf(_classRef, "onPreDraw", "()Z");

  /// from: public abstract boolean onPreDraw()
  ///
  /// Callback method to be invoked when the view tree is about to be drawn. At this point, all
  /// views in the tree have been measured and given a frame. Clients can use this to adjust
  /// their scroll bounds or even to request a new layout before drawing occurs.
  ///@return Return true to proceed with the current drawing pass, or false to cancel.
  ///@see android.view.View\#onMeasure
  ///@see android.view.View\#onLayout
  ///@see android.view.View\#onDraw
  bool onPreDraw() => jniAccessors.callMethodWithArgs(
      reference, _id_onPreDraw, jni.JniType.booleanType, []).boolean;
}

/// from: android.view.ViewTreeObserver$OnGlobalLayoutListener
///
/// Interface definition for a callback to be invoked when the global layout state
/// or the visibility of views within the view tree changes.
class ViewTreeObserver_OnGlobalLayoutListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/ViewTreeObserver\$OnGlobalLayoutListener");
  ViewTreeObserver_OnGlobalLayoutListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onGlobalLayout =
      jniAccessors.getMethodIDOf(_classRef, "onGlobalLayout", "()V");

  /// from: public abstract void onGlobalLayout()
  ///
  /// Callback method to be invoked when the global layout state or the visibility of views
  /// within the view tree changes
  void onGlobalLayout() => jniAccessors.callMethodWithArgs(
      reference, _id_onGlobalLayout, jni.JniType.voidType, []).check();
}

/// from: android.view.ViewTreeObserver$OnGlobalFocusChangeListener
///
/// Interface definition for a callback to be invoked when the focus state within
/// the view tree changes.
class ViewTreeObserver_OnGlobalFocusChangeListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/ViewTreeObserver\$OnGlobalFocusChangeListener");
  ViewTreeObserver_OnGlobalFocusChangeListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onGlobalFocusChanged = jniAccessors.getMethodIDOf(_classRef,
      "onGlobalFocusChanged", "(Landroid/view/View;Landroid/view/View;)V");

  /// from: public abstract void onGlobalFocusChanged(android.view.View oldFocus, android.view.View newFocus)
  ///
  /// Callback method to be invoked when the focus changes in the view tree. When
  /// the view tree transitions from touch mode to non-touch mode, oldFocus is null.
  /// When the view tree transitions from non-touch mode to touch mode, newFocus is
  /// null. When focus changes in non-touch mode (without transition from or to
  /// touch mode) either oldFocus or newFocus can be null.
  ///@param oldFocus The previously focused view, if any.
  ///@param newFocus The newly focused View, if any.
  void onGlobalFocusChanged(view_.View oldFocus, view_.View newFocus) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onGlobalFocusChanged,
          jni.JniType.voidType,
          [oldFocus.reference, newFocus.reference]).check();
}

/// from: android.view.ViewTreeObserver$OnDrawListener
///
/// Interface definition for a callback to be invoked when the view tree is about to be drawn.
class ViewTreeObserver_OnDrawListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/ViewTreeObserver\$OnDrawListener");
  ViewTreeObserver_OnDrawListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onDraw =
      jniAccessors.getMethodIDOf(_classRef, "onDraw", "()V");

  /// from: public abstract void onDraw()
  ///
  /// Callback method to be invoked when the view tree is about to be drawn. At this point,
  /// views cannot be modified in any way.
  ///
  ///
  /// Unlike with OnPreDrawListener, this method cannot be used to cancel the
  /// current drawing pass.
  ///
  ///
  /// An OnDrawListener listener <strong>cannot be added or removed</strong>
  /// from this method.
  ///
  ///@see android.view.View\#onMeasure
  ///@see android.view.View\#onLayout
  ///@see android.view.View\#onDraw
  void onDraw() => jniAccessors.callMethodWithArgs(
      reference, _id_onDraw, jni.JniType.voidType, []).check();
}
