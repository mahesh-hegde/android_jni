// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.inputmethod.CorrectionInfo
///
/// Information about a single text correction that an editor has reported to
/// an input method.
class CorrectionInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/inputmethod/CorrectionInfo");
  CorrectionInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.inputmethod.CorrectionInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to make this class parcelable.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(ILjava/lang/CharSequence;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(int offset, java.lang.CharSequence oldText, java.lang.CharSequence newText)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param offset The offset in the edited text where the old and new text start.
  ///@param oldText The old text that has been replaced.
  ///@param newText The replacement text.
  CorrectionInfo(int offset, jni.JniObject oldText, jni.JniObject newText)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [offset, oldText.reference, newText.reference]).object);

  static final _id_getOffset =
      jniAccessors.getMethodIDOf(_classRef, "getOffset", "()I");

  /// from: public int getOffset()
  ///
  /// Return the offset position of this correction in the text. Both the \#getOldText() and
  /// \#getNewText() start at this offset.
  int getOffset() => jniAccessors.callMethodWithArgs(
      reference, _id_getOffset, jni.JniType.intType, []).integer;

  static final _id_getOldText = jniAccessors.getMethodIDOf(
      _classRef, "getOldText", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getOldText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the text that has actually been typed by the user, and which has been corrected.
  jni.JniObject getOldText() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getOldText, jni.JniType.objectType, []).object);

  static final _id_getNewText = jniAccessors.getMethodIDOf(
      _classRef, "getNewText", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getNewText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the new text that corrects what was typed by the user.
  jni.JniObject getNewText() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getNewText, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
