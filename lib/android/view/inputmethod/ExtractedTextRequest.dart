// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.inputmethod.ExtractedTextRequest
///
/// Description of what an input method would like from an application when
/// extract text from its input editor.
class ExtractedTextRequest extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/inputmethod/ExtractedTextRequest");
  ExtractedTextRequest.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.inputmethod.ExtractedTextRequest> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to make this class parcelable.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_flags = jniAccessors.getFieldIDOf(_classRef, "flags", "I");

  /// from: public int flags
  ///
  /// Additional request flags, having the same possible values as the
  /// flags parameter of InputConnection\#getTextBeforeCursor InputConnection.getTextBeforeCursor().
  int get flags =>
      jniAccessors.getField(reference, _id_flags, jni.JniType.intType).integer;

  /// from: public int flags
  ///
  /// Additional request flags, having the same possible values as the
  /// flags parameter of InputConnection\#getTextBeforeCursor InputConnection.getTextBeforeCursor().
  set flags(int value) => jniEnv.SetIntField(reference, _id_flags, value);

  static final _id_hintMaxChars =
      jniAccessors.getFieldIDOf(_classRef, "hintMaxChars", "I");

  /// from: public int hintMaxChars
  ///
  /// Hint for the maximum number of characters to return.
  int get hintMaxChars => jniAccessors
      .getField(reference, _id_hintMaxChars, jni.JniType.intType)
      .integer;

  /// from: public int hintMaxChars
  ///
  /// Hint for the maximum number of characters to return.
  set hintMaxChars(int value) =>
      jniEnv.SetIntField(reference, _id_hintMaxChars, value);

  static final _id_hintMaxLines =
      jniAccessors.getFieldIDOf(_classRef, "hintMaxLines", "I");

  /// from: public int hintMaxLines
  ///
  /// Hint for the maximum number of lines to return.
  int get hintMaxLines => jniAccessors
      .getField(reference, _id_hintMaxLines, jni.JniType.intType)
      .integer;

  /// from: public int hintMaxLines
  ///
  /// Hint for the maximum number of lines to return.
  set hintMaxLines(int value) =>
      jniEnv.SetIntField(reference, _id_hintMaxLines, value);

  static final _id_token = jniAccessors.getFieldIDOf(_classRef, "token", "I");

  /// from: public int token
  ///
  /// Arbitrary integer that can be supplied in the request, which will be
  /// delivered back when reporting updates.
  int get token =>
      jniAccessors.getField(reference, _id_token, jni.JniType.intType).integer;

  /// from: public int token
  ///
  /// Arbitrary integer that can be supplied in the request, which will be
  /// delivered back when reporting updates.
  set token(int value) => jniEnv.SetIntField(reference, _id_token, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ExtractedTextRequest()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
