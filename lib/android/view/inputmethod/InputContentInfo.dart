// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../net/Uri.dart" as uri_;

import "../../content/ClipDescription.dart" as clipdescription_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.inputmethod.InputContentInfo
///
/// A container object with which input methods can send content files to the target application.
class InputContentInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/inputmethod/InputContentInfo");
  InputContentInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.inputmethod.InputContentInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to make this class parcelable.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/net/Uri;Landroid/content/ClipDescription;)V");

  /// from: public void <init>(android.net.Uri contentUri, android.content.ClipDescription description)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs InputContentInfo object only with mandatory data.
  ///@param contentUri Content URI to be exported from the input method.
  /// This cannot be {@code null}.
  /// This value must never be {@code null}.
  ///@param description A ClipDescription object that contains the metadata of
  /// {@code contentUri} such as MIME type(s). This object cannot be {@code null}. Also
  /// ClipDescription\#getLabel() should be describing the content specified by
  /// {@code contentUri} for accessibility reasons.
  ///
  /// This value must never be {@code null}.
  InputContentInfo(
      uri_.Uri contentUri, clipdescription_.ClipDescription description)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [contentUri.reference, description.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/net/Uri;Landroid/content/ClipDescription;Landroid/net/Uri;)V");

  /// from: public void <init>(android.net.Uri contentUri, android.content.ClipDescription description, android.net.Uri linkUri)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs InputContentInfo object with additional link URI.
  ///@param contentUri Content URI to be exported from the input method.
  /// This cannot be {@code null}.
  /// This value must never be {@code null}.
  ///@param description A ClipDescription object that contains the metadata of
  /// {@code contentUri} such as MIME type(s). This object cannot be {@code null}. Also
  /// ClipDescription\#getLabel() should be describing the content specified by
  /// {@code contentUri} for accessibility reasons.
  /// This value must never be {@code null}.
  ///@param linkUri An optional {@code http} or {@code https} URI. The editor author may provide
  /// a way to navigate the user to the specified web page if this is not {@code null}.
  /// This value may be {@code null}.
  ///@throws InvalidParameterException if any invalid parameter is specified.
  InputContentInfo.ctor1(uri_.Uri contentUri,
      clipdescription_.ClipDescription description, uri_.Uri linkUri)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          contentUri.reference,
          description.reference,
          linkUri.reference
        ]).object);

  static final _id_getContentUri = jniAccessors.getMethodIDOf(
      _classRef, "getContentUri", "()Landroid/net/Uri;");

  /// from: public android.net.Uri getContentUri()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return Content URI with which the content can be obtained.
  ///
  /// This value will never be {@code null}.
  uri_.Uri getContentUri() => uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getContentUri, jni.JniType.objectType, []).object);

  static final _id_getDescription = jniAccessors.getMethodIDOf(
      _classRef, "getDescription", "()Landroid/content/ClipDescription;");

  /// from: public android.content.ClipDescription getDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return ClipDescription object that contains the metadata of {@code \#getContentUri()}
  /// such as MIME type(s). ClipDescription\#getLabel() can be used for accessibility
  /// purpose.
  ///
  /// This value will never be {@code null}.
  clipdescription_.ClipDescription getDescription() =>
      clipdescription_.ClipDescription.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDescription, jni.JniType.objectType, []).object);

  static final _id_getLinkUri = jniAccessors.getMethodIDOf(
      _classRef, "getLinkUri", "()Landroid/net/Uri;");

  /// from: public android.net.Uri getLinkUri()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return An optional {@code http} or {@code https} URI that is related to this content.
  ///
  /// This value may be {@code null}.
  uri_.Uri getLinkUri() => uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getLinkUri, jni.JniType.objectType, []).object);

  static final _id_requestPermission =
      jniAccessors.getMethodIDOf(_classRef, "requestPermission", "()V");

  /// from: public void requestPermission()
  ///
  /// Requests a temporary read-only access permission for content URI associated with this object.
  ///
  /// Does nothing if the temporary permission is already granted.
  ///
  void requestPermission() => jniAccessors.callMethodWithArgs(
      reference, _id_requestPermission, jni.JniType.voidType, []).check();

  static final _id_releasePermission =
      jniAccessors.getMethodIDOf(_classRef, "releasePermission", "()V");

  /// from: public void releasePermission()
  ///
  /// Releases a temporary read-only access permission for content URI associated with this object.
  ///
  /// Does nothing if the temporary permission is not granted.
  ///
  void releasePermission() => jniAccessors.callMethodWithArgs(
      reference, _id_releasePermission, jni.JniType.voidType, []).check();

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// {@inheritDoc}
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
