// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.inputmethod.CompletionInfo
///
/// Information about a single text completion that an editor has reported to
/// an input method.
///
/// This class encapsulates a completion offered by an application
/// that wants it to be presented to the user by the IME. Usually, apps
/// present their completions directly in a scrolling list for example
/// (UI developers will usually use or extend
/// {@see android.widget.AutoCompleteTextView} to implement this).
/// However, in some cases, the editor may not be visible, as in the
/// case in extract mode where the IME has taken over the full
/// screen. In this case, the editor can choose to send their
/// completions to the IME for display.
///
/// Most applications who want to send completions to an IME should use
/// android.widget.AutoCompleteTextView as this class makes this
/// process easy. In this case, the application would not have to deal directly
/// with this class.
///
/// An application who implements its own editor and wants direct control
/// over this would create an array of CompletionInfo objects, and send it to the IME using
/// InputMethodManager\#displayCompletions(View, CompletionInfo[]).
/// The IME would present the completions however they see fit, and
/// call back to the editor through
/// InputConnection\#commitCompletion(CompletionInfo).
/// The application can then pick up the commit event by overriding
/// android.widget.TextView\#onCommitCompletion(CompletionInfo).
class CompletionInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/inputmethod/CompletionInfo");
  CompletionInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.inputmethod.CompletionInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to make this class parcelable.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(JILjava/lang/CharSequence;)V");

  /// from: public void <init>(long id, int index, java.lang.CharSequence text)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a simple completion with just text, no label.
  ///@param id An id that get passed as is (to the editor's discretion)
  ///@param index An index that get passed as is. Typically this is the
  /// index in the list of completions inside the editor.
  ///@param text The text that should be inserted into the editor when
  /// this completion is chosen.
  CompletionInfo(int id, int index, jni.JniObject text)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [id, index, text.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(JILjava/lang/CharSequence;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(long id, int index, java.lang.CharSequence text, java.lang.CharSequence label)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a full completion with both text and label. The text is
  /// what will get inserted into the editor, while the label is what
  /// the IME should display. If they are the same, use the version
  /// of the constructor without a `label' argument.
  ///@param id An id that get passed as is (to the editor's discretion)
  ///@param index An index that get passed as is. Typically this is the
  /// index in the list of completions inside the editor.
  ///@param text The text that should be inserted into the editor when
  /// this completion is chosen.
  ///@param label The text that the IME should be showing among the
  /// completions list.
  CompletionInfo.ctor1(
      int id, int index, jni.JniObject text, jni.JniObject label)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [id, index, text.reference, label.reference]).object);

  static final _id_getId =
      jniAccessors.getMethodIDOf(_classRef, "getId", "()J");

  /// from: public long getId()
  ///
  /// Return the abstract identifier for this completion, typically
  /// corresponding to the id associated with it in the original adapter.
  int getId() => jniAccessors
      .callMethodWithArgs(reference, _id_getId, jni.JniType.longType, []).long;

  static final _id_getPosition =
      jniAccessors.getMethodIDOf(_classRef, "getPosition", "()I");

  /// from: public int getPosition()
  ///
  /// Return the original position of this completion, typically
  /// corresponding to its position in the original adapter.
  int getPosition() => jniAccessors.callMethodWithArgs(
      reference, _id_getPosition, jni.JniType.intType, []).integer;

  static final _id_getText = jniAccessors.getMethodIDOf(
      _classRef, "getText", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the actual text associated with this completion.  This is the
  /// real text that will be inserted into the editor if the user selects it.
  jni.JniObject getText() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText, jni.JniType.objectType, []).object);

  static final _id_getLabel = jniAccessors.getMethodIDOf(
      _classRef, "getLabel", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getLabel()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the user-visible label for the completion, or null if the plain
  /// text should be shown.  If non-null, this will be what the user sees as
  /// the completion option instead of the actual text.
  jni.JniObject getLabel() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLabel, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
