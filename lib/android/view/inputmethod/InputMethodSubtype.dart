// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../content/Context.dart" as context_;

import "../../content/pm/ApplicationInfo.dart" as applicationinfo_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.inputmethod.InputMethodSubtype
///
/// This class is used to specify meta information of a subtype contained in an input method editor
/// (IME). Subtype can describe locale (e.g. en_US, fr_FR...) and mode (e.g. voice, keyboard...),
/// and is used for IME switch and settings. The input method subtype allows the system to bring up
/// the specified subtype of the designated IME directly.
///
/// It should be defined in an XML resource file of the input method with the
/// <code>&lt;subtype&gt;</code> element, which resides within an {@code <input-method>} element.
/// For more information, see the guide to
/// <a href="{@docRoot}guide/topics/text/creating-input-method.html">
/// Creating an Input Method</a>.
///
///@see InputMethodInfo
///@attr ref android.R.styleable\#InputMethod_Subtype_label
///@attr ref android.R.styleable\#InputMethod_Subtype_icon
///@attr ref android.R.styleable\#InputMethod_Subtype_languageTag
///@attr ref android.R.styleable\#InputMethod_Subtype_imeSubtypeLocale
///@attr ref android.R.styleable\#InputMethod_Subtype_imeSubtypeMode
///@attr ref android.R.styleable\#InputMethod_Subtype_imeSubtypeExtraValue
///@attr ref android.R.styleable\#InputMethod_Subtype_isAuxiliary
///@attr ref android.R.styleable\#InputMethod_Subtype_overridesImplicitlyEnabledSubtype
///@attr ref android.R.styleable\#InputMethod_Subtype_subtypeId
///@attr ref android.R.styleable\#InputMethod_Subtype_isAsciiCapable
class InputMethodSubtype extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/inputmethod/InputMethodSubtype");
  InputMethodSubtype.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.inputmethod.InputMethodSubtype> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)V");

  /// from: public void <init>(int nameId, int iconId, java.lang.String locale, java.lang.String mode, java.lang.String extraValue, boolean isAuxiliary, boolean overridesImplicitlyEnabledSubtype)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor with no subtype ID specified.
  ///@deprecated use InputMethodSubtypeBuilder instead.
  /// Arguments for this constructor have the same meanings as
  /// InputMethodSubtype\#InputMethodSubtype(int, int, String, String, String, boolean,
  /// boolean, int) except "id".
  InputMethodSubtype(
      int nameId,
      int iconId,
      jni.JniString locale,
      jni.JniString mode,
      jni.JniString extraValue,
      bool isAuxiliary,
      bool overridesImplicitlyEnabledSubtype)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          nameId,
          iconId,
          locale.reference,
          mode.reference,
          extraValue.reference,
          isAuxiliary,
          overridesImplicitlyEnabledSubtype
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZI)V");

  /// from: public void <init>(int nameId, int iconId, java.lang.String locale, java.lang.String mode, java.lang.String extraValue, boolean isAuxiliary, boolean overridesImplicitlyEnabledSubtype, int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@deprecated use InputMethodSubtypeBuilder instead.
  /// "isAsciiCapable" is "false" in this constructor.
  ///@param nameId Resource ID of the subtype name string. The string resource may have exactly
  /// one %s in it. If there is, the %s part will be replaced with the locale's display name by
  /// the formatter. Please refer to \#getDisplayName for details.
  ///@param iconId Resource ID of the subtype icon drawable.
  ///@param locale The locale supported by the subtype
  ///@param mode The mode supported by the subtype
  ///@param extraValue The extra value of the subtype. This string is free-form, but the API
  /// supplies tools to deal with a key-value comma-separated list; see
  /// \#containsExtraValueKey and \#getExtraValueOf.
  ///@param isAuxiliary true when this subtype is auxiliary, false otherwise. An auxiliary
  /// subtype will not be shown in the list of enabled IMEs for choosing the current IME in
  /// the Settings even when this subtype is enabled. Please note that this subtype will still
  /// be shown in the list of IMEs in the IME switcher to allow the user to tentatively switch
  /// to this subtype while an IME is shown. The framework will never switch the current IME to
  /// this subtype by android.view.inputmethod.InputMethodManager\#switchToLastInputMethod.
  /// The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as
  /// auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input).
  ///@param overridesImplicitlyEnabledSubtype true when this subtype should be enabled by default
  /// if no other subtypes in the IME are enabled explicitly. Note that a subtype with this
  /// parameter being true will not be shown in the list of subtypes in each IME's subtype enabler.
  /// Having an "automatic" subtype is an example use of this flag.
  ///@param id The unique ID for the subtype. The input method framework keeps track of enabled
  /// subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even if
  /// other attributes are different. If the ID is unspecified or 0,
  /// Arrays.hashCode(new Object[] {locale, mode, extraValue,
  /// isAuxiliary, overridesImplicitlyEnabledSubtype, isAsciiCapable}) will be used instead.
  InputMethodSubtype.ctor1(
      int nameId,
      int iconId,
      jni.JniString locale,
      jni.JniString mode,
      jni.JniString extraValue,
      bool isAuxiliary,
      bool overridesImplicitlyEnabledSubtype,
      int id)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          nameId,
          iconId,
          locale.reference,
          mode.reference,
          extraValue.reference,
          isAuxiliary,
          overridesImplicitlyEnabledSubtype,
          id
        ]).object);

  static final _id_getNameResId =
      jniAccessors.getMethodIDOf(_classRef, "getNameResId", "()I");

  /// from: public int getNameResId()
  ///
  /// @return Resource ID of the subtype name string.
  int getNameResId() => jniAccessors.callMethodWithArgs(
      reference, _id_getNameResId, jni.JniType.intType, []).integer;

  static final _id_getIconResId =
      jniAccessors.getMethodIDOf(_classRef, "getIconResId", "()I");

  /// from: public int getIconResId()
  ///
  /// @return Resource ID of the subtype icon drawable.
  int getIconResId() => jniAccessors.callMethodWithArgs(
      reference, _id_getIconResId, jni.JniType.intType, []).integer;

  static final _id_getLocale = jniAccessors.getMethodIDOf(
      _classRef, "getLocale", "()Ljava/lang/String;");

  /// from: public java.lang.String getLocale()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The locale of the subtype. This method returns the "locale" string parameter passed
  /// to the constructor.
  ///
  /// This value will never be {@code null}.
  ///@deprecated Use \#getLanguageTag() instead.
  jni.JniString getLocale() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLocale, jni.JniType.objectType, []).object);

  static final _id_getLanguageTag = jniAccessors.getMethodIDOf(
      _classRef, "getLanguageTag", "()Ljava/lang/String;");

  /// from: public java.lang.String getLanguageTag()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the BCP-47 Language Tag of the subtype.  Returns an empty string when no Language Tag
  /// is specified.
  ///
  /// This value will never be {@code null}.
  ///@see Locale\#forLanguageTag(String)
  jni.JniString getLanguageTag() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLanguageTag, jni.JniType.objectType, []).object);

  static final _id_getMode =
      jniAccessors.getMethodIDOf(_classRef, "getMode", "()Ljava/lang/String;");

  /// from: public java.lang.String getMode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The mode of the subtype.
  jni.JniString getMode() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMode, jni.JniType.objectType, []).object);

  static final _id_getExtraValue = jniAccessors.getMethodIDOf(
      _classRef, "getExtraValue", "()Ljava/lang/String;");

  /// from: public java.lang.String getExtraValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The extra value of the subtype.
  jni.JniString getExtraValue() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtraValue, jni.JniType.objectType, []).object);

  static final _id_isAuxiliary =
      jniAccessors.getMethodIDOf(_classRef, "isAuxiliary", "()Z");

  /// from: public boolean isAuxiliary()
  ///
  /// @return true if this subtype is auxiliary, false otherwise. An auxiliary subtype will not be
  /// shown in the list of enabled IMEs for choosing the current IME in the Settings even when this
  /// subtype is enabled. Please note that this subtype will still be shown in the list of IMEs in
  /// the IME switcher to allow the user to tentatively switch to this subtype while an IME is
  /// shown. The framework will never switch the current IME to this subtype by
  /// android.view.inputmethod.InputMethodManager\#switchToLastInputMethod.
  /// The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as
  /// auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input).
  bool isAuxiliary() => jniAccessors.callMethodWithArgs(
      reference, _id_isAuxiliary, jni.JniType.booleanType, []).boolean;

  static final _id_overridesImplicitlyEnabledSubtype = jniAccessors
      .getMethodIDOf(_classRef, "overridesImplicitlyEnabledSubtype", "()Z");

  /// from: public boolean overridesImplicitlyEnabledSubtype()
  ///
  /// @return true when this subtype will be enabled by default if no other subtypes in the IME
  /// are enabled explicitly, false otherwise. Note that a subtype with this method returning true
  /// will not be shown in the list of subtypes in each IME's subtype enabler. Having an
  /// "automatic" subtype is an example use of this flag.
  bool overridesImplicitlyEnabledSubtype() => jniAccessors.callMethodWithArgs(
      reference,
      _id_overridesImplicitlyEnabledSubtype,
      jni.JniType.booleanType, []).boolean;

  static final _id_isAsciiCapable =
      jniAccessors.getMethodIDOf(_classRef, "isAsciiCapable", "()Z");

  /// from: public boolean isAsciiCapable()
  ///
  /// @return true if this subtype is Ascii capable, false otherwise. If the subtype is ASCII
  /// capable, it should guarantee that the user can input ASCII characters with this subtype.
  /// This is important because many password fields only allow ASCII-characters.
  bool isAsciiCapable() => jniAccessors.callMethodWithArgs(
      reference, _id_isAsciiCapable, jni.JniType.booleanType, []).boolean;

  static final _id_getDisplayName = jniAccessors.getMethodIDOf(
      _classRef,
      "getDisplayName",
      "(Landroid/content/Context;Ljava/lang/String;Landroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getDisplayName(android.content.Context context, java.lang.String packageName, android.content.pm.ApplicationInfo appInfo)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a display name for this subtype.
  ///
  /// If {@code subtypeNameResId} is specified (!= 0) text generated from that resource will
  /// be returned. The localized string resource of the label should be capitalized for inclusion
  /// in UI lists. The string resource may contain at most one {@code %s}. If present, the
  /// {@code %s} will be replaced with the display name of the subtype locale in the user's locale.
  ///
  /// If {@code subtypeNameResId} is not specified (== 0) the framework returns the display name
  /// of the subtype locale, as capitalized for use in UI lists, in the user's locale.
  ///@param context Context will be used for getting Locale and
  /// android.content.pm.PackageManager.
  ///@param packageName The package name of the input method.
  ///@param appInfo The ApplicationInfo of the input method.
  ///@return a display name for this subtype.
  ///
  /// This value will never be {@code null}.
  jni.JniObject getDisplayName(
          context_.Context context,
          jni.JniString packageName,
          applicationinfo_.ApplicationInfo appInfo) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDisplayName, jni.JniType.objectType, [
        context.reference,
        packageName.reference,
        appInfo.reference
      ]).object);

  static final _id_containsExtraValueKey = jniAccessors.getMethodIDOf(
      _classRef, "containsExtraValueKey", "(Ljava/lang/String;)Z");

  /// from: public boolean containsExtraValueKey(java.lang.String key)
  ///
  /// The string of ExtraValue in subtype should be defined as follows:
  /// example: key0,key1=value1,key2,key3,key4=value4
  ///@param key The key of extra value
  ///@return The subtype contains specified the extra value
  bool containsExtraValueKey(jni.JniString key) =>
      jniAccessors.callMethodWithArgs(reference, _id_containsExtraValueKey,
          jni.JniType.booleanType, [key.reference]).boolean;

  static final _id_getExtraValueOf = jniAccessors.getMethodIDOf(
      _classRef, "getExtraValueOf", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getExtraValueOf(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The string of ExtraValue in subtype should be defined as follows:
  /// example: key0,key1=value1,key2,key3,key4=value4
  ///@param key The key of extra value
  ///@return The value of the specified key
  jni.JniString getExtraValueOf(jni.JniString key) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getExtraValueOf, jni.JniType.objectType, [key.reference]).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(parcel_.Parcel dest, int parcelableFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, parcelableFlags]).check();
}

/// from: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder
///
/// InputMethodSubtypeBuilder is a builder class of InputMethodSubtype.
/// This class is designed to be used with
/// android.view.inputmethod.InputMethodManager\#setAdditionalInputMethodSubtypes.
/// The developer needs to be aware of what each parameter means.
class InputMethodSubtype_InputMethodSubtypeBuilder extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/view/inputmethod/InputMethodSubtype\$InputMethodSubtypeBuilder");
  InputMethodSubtype_InputMethodSubtypeBuilder.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  InputMethodSubtype_InputMethodSubtypeBuilder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setIsAuxiliary = jniAccessors.getMethodIDOf(
      _classRef,
      "setIsAuxiliary",
      "(Z)Landroid/view/inputmethod/InputMethodSubtype\$InputMethodSubtypeBuilder;");

  /// from: public android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setIsAuxiliary(boolean isAuxiliary)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param isAuxiliary should true when this subtype is auxiliary, false otherwise.
  /// An auxiliary subtype has the following differences with a regular subtype:
  /// - An auxiliary subtype cannot be chosen as the default IME in Settings.
  /// - The framework will never switch to this subtype through
  ///   android.view.inputmethod.InputMethodManager\#switchToLastInputMethod.
  /// Note that the subtype will still be available in the IME switcher.
  /// The intent is to allow for IMEs to specify they are meant to be invoked temporarily
  /// in a one-shot way, and to return to the previous IME once finished (e.g. voice input).
  InputMethodSubtype_InputMethodSubtypeBuilder setIsAuxiliary(
          bool isAuxiliary) =>
      InputMethodSubtype_InputMethodSubtypeBuilder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setIsAuxiliary,
              jni.JniType.objectType, [isAuxiliary]).object);

  static final _id_setOverridesImplicitlyEnabledSubtype =
      jniAccessors.getMethodIDOf(
          _classRef,
          "setOverridesImplicitlyEnabledSubtype",
          "(Z)Landroid/view/inputmethod/InputMethodSubtype\$InputMethodSubtypeBuilder;");

  /// from: public android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setOverridesImplicitlyEnabledSubtype(boolean overridesImplicitlyEnabledSubtype)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param overridesImplicitlyEnabledSubtype should be true if this subtype should be
  /// enabled by default if no other subtypes in the IME are enabled explicitly. Note that a
  /// subtype with this parameter set will not be shown in the list of subtypes in each IME's
  /// subtype enabler. A canonical use of this would be for an IME to supply an "automatic"
  /// subtype that adapts to the current system language.
  InputMethodSubtype_InputMethodSubtypeBuilder
      setOverridesImplicitlyEnabledSubtype(
              bool overridesImplicitlyEnabledSubtype) =>
          InputMethodSubtype_InputMethodSubtypeBuilder.fromRef(jniAccessors
              .callMethodWithArgs(
                  reference,
                  _id_setOverridesImplicitlyEnabledSubtype,
                  jni.JniType.objectType,
                  [overridesImplicitlyEnabledSubtype]).object);

  static final _id_setIsAsciiCapable = jniAccessors.getMethodIDOf(
      _classRef,
      "setIsAsciiCapable",
      "(Z)Landroid/view/inputmethod/InputMethodSubtype\$InputMethodSubtypeBuilder;");

  /// from: public android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setIsAsciiCapable(boolean isAsciiCapable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param isAsciiCapable should be true if this subtype is ASCII capable. If the subtype
  /// is ASCII capable, it should guarantee that the user can input ASCII characters with
  /// this subtype. This is important because many password fields only allow
  /// ASCII-characters.
  InputMethodSubtype_InputMethodSubtypeBuilder setIsAsciiCapable(
          bool isAsciiCapable) =>
      InputMethodSubtype_InputMethodSubtypeBuilder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setIsAsciiCapable,
              jni.JniType.objectType, [isAsciiCapable]).object);

  static final _id_setSubtypeIconResId = jniAccessors.getMethodIDOf(
      _classRef,
      "setSubtypeIconResId",
      "(I)Landroid/view/inputmethod/InputMethodSubtype\$InputMethodSubtypeBuilder;");

  /// from: public android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeIconResId(int subtypeIconResId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param subtypeIconResId is a resource ID of the subtype icon drawable.
  InputMethodSubtype_InputMethodSubtypeBuilder setSubtypeIconResId(
          int subtypeIconResId) =>
      InputMethodSubtype_InputMethodSubtypeBuilder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setSubtypeIconResId,
              jni.JniType.objectType, [subtypeIconResId]).object);

  static final _id_setSubtypeNameResId = jniAccessors.getMethodIDOf(
      _classRef,
      "setSubtypeNameResId",
      "(I)Landroid/view/inputmethod/InputMethodSubtype\$InputMethodSubtypeBuilder;");

  /// from: public android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeNameResId(int subtypeNameResId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param subtypeNameResId is the resource ID of the subtype name string.
  /// The string resource may have exactly one %s in it. If present,
  /// the %s part will be replaced with the locale's display name by
  /// the formatter. Please refer to \#getDisplayName for details.
  InputMethodSubtype_InputMethodSubtypeBuilder setSubtypeNameResId(
          int subtypeNameResId) =>
      InputMethodSubtype_InputMethodSubtypeBuilder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setSubtypeNameResId,
              jni.JniType.objectType, [subtypeNameResId]).object);

  static final _id_setSubtypeId = jniAccessors.getMethodIDOf(
      _classRef,
      "setSubtypeId",
      "(I)Landroid/view/inputmethod/InputMethodSubtype\$InputMethodSubtypeBuilder;");

  /// from: public android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeId(int subtypeId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param subtypeId is the unique ID for this subtype. The input method framework keeps
  /// track of enabled subtypes by ID. When the IME package gets upgraded, enabled IDs will
  /// stay enabled even if other attributes are different. If the ID is unspecified or 0,
  /// Arrays.hashCode(new Object[] {locale, mode, extraValue,
  /// isAuxiliary, overridesImplicitlyEnabledSubtype, isAsciiCapable}) will be used instead.
  InputMethodSubtype_InputMethodSubtypeBuilder setSubtypeId(int subtypeId) =>
      InputMethodSubtype_InputMethodSubtypeBuilder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setSubtypeId,
              jni.JniType.objectType, [subtypeId]).object);

  static final _id_setSubtypeLocale = jniAccessors.getMethodIDOf(
      _classRef,
      "setSubtypeLocale",
      "(Ljava/lang/String;)Landroid/view/inputmethod/InputMethodSubtype\$InputMethodSubtypeBuilder;");

  /// from: public android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeLocale(java.lang.String subtypeLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param subtypeLocale is the locale supported by this subtype.
  InputMethodSubtype_InputMethodSubtypeBuilder setSubtypeLocale(
          jni.JniString subtypeLocale) =>
      InputMethodSubtype_InputMethodSubtypeBuilder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setSubtypeLocale,
              jni.JniType.objectType, [subtypeLocale.reference]).object);

  static final _id_setLanguageTag = jniAccessors.getMethodIDOf(
      _classRef,
      "setLanguageTag",
      "(Ljava/lang/String;)Landroid/view/inputmethod/InputMethodSubtype\$InputMethodSubtypeBuilder;");

  /// from: public android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setLanguageTag(java.lang.String languageTag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param languageTag is the BCP-47 Language Tag supported by this subtype.
  InputMethodSubtype_InputMethodSubtypeBuilder setLanguageTag(
          jni.JniString languageTag) =>
      InputMethodSubtype_InputMethodSubtypeBuilder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setLanguageTag,
              jni.JniType.objectType, [languageTag.reference]).object);

  static final _id_setSubtypeMode = jniAccessors.getMethodIDOf(
      _classRef,
      "setSubtypeMode",
      "(Ljava/lang/String;)Landroid/view/inputmethod/InputMethodSubtype\$InputMethodSubtypeBuilder;");

  /// from: public android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeMode(java.lang.String subtypeMode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param subtypeMode is the mode supported by this subtype.
  InputMethodSubtype_InputMethodSubtypeBuilder setSubtypeMode(
          jni.JniString subtypeMode) =>
      InputMethodSubtype_InputMethodSubtypeBuilder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setSubtypeMode,
              jni.JniType.objectType, [subtypeMode.reference]).object);

  static final _id_setSubtypeExtraValue = jniAccessors.getMethodIDOf(
      _classRef,
      "setSubtypeExtraValue",
      "(Ljava/lang/String;)Landroid/view/inputmethod/InputMethodSubtype\$InputMethodSubtypeBuilder;");

  /// from: public android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder setSubtypeExtraValue(java.lang.String subtypeExtraValue)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param subtypeExtraValue is the extra value of the subtype. This string is free-form,
  /// but the API supplies tools to deal with a key-value comma-separated list; see
  /// \#containsExtraValueKey and \#getExtraValueOf.
  InputMethodSubtype_InputMethodSubtypeBuilder setSubtypeExtraValue(
          jni.JniString subtypeExtraValue) =>
      InputMethodSubtype_InputMethodSubtypeBuilder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setSubtypeExtraValue,
              jni.JniType.objectType, [subtypeExtraValue.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/view/inputmethod/InputMethodSubtype;");

  /// from: public android.view.inputmethod.InputMethodSubtype build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return InputMethodSubtype using parameters in this InputMethodSubtypeBuilder.
  InputMethodSubtype build() =>
      InputMethodSubtype.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
