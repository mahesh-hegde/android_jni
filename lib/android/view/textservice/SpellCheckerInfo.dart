// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "../../content/ComponentName.dart" as componentname_;

import "../../content/pm/PackageManager.dart" as packagemanager_;

import "../../graphics/drawable/Drawable.dart" as drawable_;

import "../../content/pm/ServiceInfo.dart" as serviceinfo_;

import "SpellCheckerSubtype.dart" as spellcheckersubtype_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.textservice.SpellCheckerInfo
///
/// This class is used to specify meta information of a spell checker.
class SpellCheckerInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/textservice/SpellCheckerInfo");
  SpellCheckerInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.textservice.SpellCheckerInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to make this class parcelable.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@hide
  SpellCheckerInfo(parcel_.Parcel source)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [source.reference]).object);

  static final _id_getId =
      jniAccessors.getMethodIDOf(_classRef, "getId", "()Ljava/lang/String;");

  /// from: public java.lang.String getId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a unique ID for this spell checker.  The ID is generated from
  /// the package and class name implementing the method.
  jni.JniString getId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getId, jni.JniType.objectType, []).object);

  static final _id_getComponent = jniAccessors.getMethodIDOf(
      _classRef, "getComponent", "()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getComponent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the component of the service that implements.
  componentname_.ComponentName getComponent() =>
      componentname_.ComponentName.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getComponent, jni.JniType.objectType, []).object);

  static final _id_getPackageName = jniAccessors.getMethodIDOf(
      _classRef, "getPackageName", "()Ljava/lang/String;");

  /// from: public java.lang.String getPackageName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the .apk package that implements this.
  jni.JniString getPackageName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPackageName, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_loadLabel = jniAccessors.getMethodIDOf(
      _classRef,
      "loadLabel",
      "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadLabel(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Load the user-displayed label for this spell checker.
  ///@param pm Supply a PackageManager used to load the spell checker's resources.
  jni.JniObject loadLabel(packagemanager_.PackageManager pm) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadLabel, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadIcon = jniAccessors.getMethodIDOf(_classRef, "loadIcon",
      "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Load the user-displayed icon for this spell checker.
  ///@param pm Supply a PackageManager used to load the spell checker's resources.
  drawable_.Drawable loadIcon(packagemanager_.PackageManager pm) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadIcon, jni.JniType.objectType, [pm.reference]).object);

  static final _id_getServiceInfo = jniAccessors.getMethodIDOf(
      _classRef, "getServiceInfo", "()Landroid/content/pm/ServiceInfo;");

  /// from: public android.content.pm.ServiceInfo getServiceInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the raw information about the Service implementing this
  /// spell checker.  Do not modify the returned object.
  serviceinfo_.ServiceInfo getServiceInfo() =>
      serviceinfo_.ServiceInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getServiceInfo, jni.JniType.objectType, []).object);

  static final _id_getSettingsActivity = jniAccessors.getMethodIDOf(
      _classRef, "getSettingsActivity", "()Ljava/lang/String;");

  /// from: public java.lang.String getSettingsActivity()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the class name of an activity that provides a settings UI.
  /// You can launch this activity be starting it with
  /// an android.content.Intent whose action is MAIN and with an
  /// explicit android.content.ComponentName
  /// composed of \#getPackageName and the class name returned here.
  ///
  /// A null will be returned if there is no settings activity.
  jni.JniString getSettingsActivity() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSettingsActivity, jni.JniType.objectType, []).object);

  static final _id_getSubtypeCount =
      jniAccessors.getMethodIDOf(_classRef, "getSubtypeCount", "()I");

  /// from: public int getSubtypeCount()
  ///
  /// Return the count of the subtypes.
  int getSubtypeCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getSubtypeCount, jni.JniType.intType, []).integer;

  static final _id_getSubtypeAt = jniAccessors.getMethodIDOf(_classRef,
      "getSubtypeAt", "(I)Landroid/view/textservice/SpellCheckerSubtype;");

  /// from: public android.view.textservice.SpellCheckerSubtype getSubtypeAt(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the subtype at the specified index.
  ///@param index the index of the subtype to return.
  spellcheckersubtype_.SpellCheckerSubtype getSubtypeAt(int index) =>
      spellcheckersubtype_.SpellCheckerSubtype.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getSubtypeAt,
              jni.JniType.objectType, [index]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Used to make this class parcelable.
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
