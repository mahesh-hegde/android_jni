// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.textservice.TextInfo
///
/// This class contains a metadata of the input of TextService
class TextInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/textservice/TextInfo");
  TextInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.textservice.TextInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to make this class parcelable.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String text)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param text the text which will be input to TextService
  TextInfo(jni.JniString text)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [text.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;II)V");

  /// from: public void <init>(java.lang.String text, int cookie, int sequenceNumber)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param text the text which will be input to TextService
  ///@param cookie the cookie for this TextInfo
  ///@param sequenceNumber the sequence number for this TextInfo
  TextInfo.ctor1(jni.JniString text, int cookie, int sequenceNumber)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [text.reference, cookie, sequenceNumber]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/CharSequence;IIII)V");

  /// from: public void <init>(java.lang.CharSequence charSequence, int start, int end, int cookie, int sequenceNumber)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param charSequence the text which will be input to TextService. Attached spans that
  /// implement ParcelableSpan will also be marshaled alongside with the text.
  ///@param start the beginning of the range of text (inclusive).
  ///@param end the end of the range of text (exclusive).
  ///@param cookie the cookie for this TextInfo
  ///@param sequenceNumber the sequence number for this TextInfo
  TextInfo.ctor2(jni.JniObject charSequence, int start, int end, int cookie,
      int sequenceNumber)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, [
          charSequence.reference,
          start,
          end,
          cookie,
          sequenceNumber
        ]).object);

  static final _id_ctor3 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TextInfo.ctor3(parcel_.Parcel source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor3, [source.reference]).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_getText =
      jniAccessors.getMethodIDOf(_classRef, "getText", "()Ljava/lang/String;");

  /// from: public java.lang.String getText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the text which is an input of a text service
  jni.JniString getText() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText, jni.JniType.objectType, []).object);

  static final _id_getCharSequence = jniAccessors.getMethodIDOf(
      _classRef, "getCharSequence", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getCharSequence()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the charSequence which is an input of a text service. This may have some parcelable
  /// spans.
  jni.JniObject getCharSequence() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCharSequence, jni.JniType.objectType, []).object);

  static final _id_getCookie =
      jniAccessors.getMethodIDOf(_classRef, "getCookie", "()I");

  /// from: public int getCookie()
  ///
  /// @return the cookie of TextInfo
  int getCookie() => jniAccessors.callMethodWithArgs(
      reference, _id_getCookie, jni.JniType.intType, []).integer;

  static final _id_getSequence =
      jniAccessors.getMethodIDOf(_classRef, "getSequence", "()I");

  /// from: public int getSequence()
  ///
  /// @return the sequence of TextInfo
  int getSequence() => jniAccessors.callMethodWithArgs(
      reference, _id_getSequence, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Used to make this class parcelable.
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
