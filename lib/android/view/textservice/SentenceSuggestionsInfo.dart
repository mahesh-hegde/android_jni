// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "SuggestionsInfo.dart" as suggestionsinfo_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.textservice.SentenceSuggestionsInfo
///
/// This class contains a metadata of suggestions returned from a text service
/// (e.g.&nbsp;android.service.textservice.SpellCheckerService).
/// The text service uses this class to return the suggestions
/// for a sentence. See SuggestionsInfo which is used for suggestions for a word.
/// This class extends the functionality of SuggestionsInfo as far as this class enables
/// you to put multiple SuggestionsInfos on a sentence with the offsets and the lengths
/// of all SuggestionsInfos.
class SentenceSuggestionsInfo extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/textservice/SentenceSuggestionsInfo");
  SentenceSuggestionsInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.textservice.SentenceSuggestionsInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to make this class parcelable.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "([Landroid/view/textservice/SuggestionsInfo;[I[I)V");

  /// from: public void <init>(android.view.textservice.SuggestionsInfo[] suggestionsInfos, int[] offsets, int[] lengths)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param suggestionsInfos from the text service
  ///@param offsets the array of offsets of suggestions
  ///@param lengths the array of lengths of suggestions
  SentenceSuggestionsInfo(jni.JniObject suggestionsInfos, jni.JniObject offsets,
      jni.JniObject lengths)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          suggestionsInfos.reference,
          offsets.reference,
          lengths.reference
        ]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  SentenceSuggestionsInfo.ctor1(parcel_.Parcel source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [source.reference]).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_getSuggestionsCount =
      jniAccessors.getMethodIDOf(_classRef, "getSuggestionsCount", "()I");

  /// from: public int getSuggestionsCount()
  ///
  /// @return the count of SuggestionsInfos this instance holds.
  int getSuggestionsCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getSuggestionsCount, jni.JniType.intType, []).integer;

  static final _id_getSuggestionsInfoAt = jniAccessors.getMethodIDOf(_classRef,
      "getSuggestionsInfoAt", "(I)Landroid/view/textservice/SuggestionsInfo;");

  /// from: public android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param i the id of SuggestionsInfos this instance holds.
  ///@return a SuggestionsInfo at the specified id
  suggestionsinfo_.SuggestionsInfo getSuggestionsInfoAt(int i) =>
      suggestionsinfo_.SuggestionsInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getSuggestionsInfoAt,
          jni.JniType.objectType,
          [i]).object);

  static final _id_getOffsetAt =
      jniAccessors.getMethodIDOf(_classRef, "getOffsetAt", "(I)I");

  /// from: public int getOffsetAt(int i)
  ///
  /// @param i the id of SuggestionsInfos this instance holds
  ///@return the offset of the specified SuggestionsInfo
  int getOffsetAt(int i) => jniAccessors.callMethodWithArgs(
      reference, _id_getOffsetAt, jni.JniType.intType, [i]).integer;

  static final _id_getLengthAt =
      jniAccessors.getMethodIDOf(_classRef, "getLengthAt", "(I)I");

  /// from: public int getLengthAt(int i)
  ///
  /// @param i the id of SuggestionsInfos this instance holds
  ///@return the length of the specified SuggestionsInfo
  int getLengthAt(int i) => jniAccessors.callMethodWithArgs(
      reference, _id_getLengthAt, jni.JniType.intType, [i]).integer;
}
