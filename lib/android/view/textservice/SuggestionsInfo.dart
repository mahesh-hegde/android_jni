// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.textservice.SuggestionsInfo
///
/// This class contains a metadata of suggestions from the text service
class SuggestionsInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/textservice/SuggestionsInfo");
  SuggestionsInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.textservice.SuggestionsInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to make this class parcelable.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS
  ///
  /// Flag of the attributes of the suggestions that can be obtained by
  /// \#getSuggestionsAttributes: this tells that the text service thinks
  /// the result suggestions include highly recommended ones.
  static const RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS = 4;

  /// from: static public final int RESULT_ATTR_IN_THE_DICTIONARY
  ///
  /// Flag of the attributes of the suggestions that can be obtained by
  /// \#getSuggestionsAttributes: this tells that the requested word was found
  /// in the dictionary in the text service.
  static const RESULT_ATTR_IN_THE_DICTIONARY = 1;

  /// from: static public final int RESULT_ATTR_LOOKS_LIKE_TYPO
  ///
  /// Flag of the attributes of the suggestions that can be obtained by
  /// \#getSuggestionsAttributes: this tells that the text service thinks the requested
  /// word looks like a typo.
  static const RESULT_ATTR_LOOKS_LIKE_TYPO = 2;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(I[Ljava/lang/String;)V");

  /// from: public void <init>(int suggestionsAttributes, java.lang.String[] suggestions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param suggestionsAttributes from the text service
  ///@param suggestions from the text service
  SuggestionsInfo(int suggestionsAttributes, jni.JniObject suggestions)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [suggestionsAttributes, suggestions.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(I[Ljava/lang/String;II)V");

  /// from: public void <init>(int suggestionsAttributes, java.lang.String[] suggestions, int cookie, int sequence)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param suggestionsAttributes from the text service
  ///@param suggestions from the text service
  ///@param cookie the cookie of the input TextInfo
  ///@param sequence the cookie of the input TextInfo
  SuggestionsInfo.ctor1(int suggestionsAttributes, jni.JniObject suggestions,
      int cookie, int sequence)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          suggestionsAttributes,
          suggestions.reference,
          cookie,
          sequence
        ]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  SuggestionsInfo.ctor2(parcel_.Parcel source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [source.reference]).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_setCookieAndSequence =
      jniAccessors.getMethodIDOf(_classRef, "setCookieAndSequence", "(II)V");

  /// from: public void setCookieAndSequence(int cookie, int sequence)
  ///
  /// Set the cookie and the sequence of SuggestionsInfo which are set to TextInfo from a client
  /// application
  ///@param cookie the cookie of an input TextInfo
  ///@param sequence the cookie of an input TextInfo
  void setCookieAndSequence(int cookie, int sequence) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCookieAndSequence,
          jni.JniType.voidType, [cookie, sequence]).check();

  static final _id_getCookie =
      jniAccessors.getMethodIDOf(_classRef, "getCookie", "()I");

  /// from: public int getCookie()
  ///
  /// @return the cookie which may be set by a client application
  int getCookie() => jniAccessors.callMethodWithArgs(
      reference, _id_getCookie, jni.JniType.intType, []).integer;

  static final _id_getSequence =
      jniAccessors.getMethodIDOf(_classRef, "getSequence", "()I");

  /// from: public int getSequence()
  ///
  /// @return the sequence which may be set by a client application
  int getSequence() => jniAccessors.callMethodWithArgs(
      reference, _id_getSequence, jni.JniType.intType, []).integer;

  static final _id_getSuggestionsAttributes =
      jniAccessors.getMethodIDOf(_classRef, "getSuggestionsAttributes", "()I");

  /// from: public int getSuggestionsAttributes()
  ///
  /// @return the attributes of suggestions. This includes whether the spell checker has the word
  /// in its dictionary or not and whether the spell checker has confident suggestions for the
  /// word or not.
  int getSuggestionsAttributes() => jniAccessors.callMethodWithArgs(
      reference, _id_getSuggestionsAttributes, jni.JniType.intType, []).integer;

  static final _id_getSuggestionsCount =
      jniAccessors.getMethodIDOf(_classRef, "getSuggestionsCount", "()I");

  /// from: public int getSuggestionsCount()
  ///
  /// @return the count of the suggestions. If there's no suggestions at all, this method returns
  /// -1. Even if this method returns 0, it doesn't necessarily mean that there are no suggestions
  /// for the requested word. For instance, the caller could have been asked to limit the maximum
  /// number of suggestions returned.
  int getSuggestionsCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getSuggestionsCount, jni.JniType.intType, []).integer;

  static final _id_getSuggestionAt = jniAccessors.getMethodIDOf(
      _classRef, "getSuggestionAt", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getSuggestionAt(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param i the id of suggestions
  ///@return the suggestion at the specified id
  jni.JniString getSuggestionAt(int i) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSuggestionAt, jni.JniType.objectType, [i]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Used to make this class parcelable.
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
