// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.InputQueue
///
/// An input queue provides a mechanism for an application to receive incoming
/// input events.  Currently only usable from native code.
class InputQueue extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/view/InputQueue");
  InputQueue.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  InputQueue()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();
}

/// from: android.view.InputQueue$Callback
///
/// Interface to receive notification of when an InputQueue is associated
/// and dissociated with a thread.
class InputQueue_Callback extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/InputQueue\$Callback");
  InputQueue_Callback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onInputQueueCreated = jniAccessors.getMethodIDOf(
      _classRef, "onInputQueueCreated", "(Landroid/view/InputQueue;)V");

  /// from: public abstract void onInputQueueCreated(android.view.InputQueue queue)
  ///
  /// Called when the given InputQueue is now associated with the
  /// thread making this call, so it can start receiving events from it.
  void onInputQueueCreated(InputQueue queue) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onInputQueueCreated,
      jni.JniType.voidType,
      [queue.reference]).check();

  static final _id_onInputQueueDestroyed = jniAccessors.getMethodIDOf(
      _classRef, "onInputQueueDestroyed", "(Landroid/view/InputQueue;)V");

  /// from: public abstract void onInputQueueDestroyed(android.view.InputQueue queue)
  ///
  /// Called when the given InputQueue is no longer associated with
  /// the thread and thus not dispatching events.
  void onInputQueueDestroyed(InputQueue queue) =>
      jniAccessors.callMethodWithArgs(reference, _id_onInputQueueDestroyed,
          jni.JniType.voidType, [queue.reference]).check();
}
