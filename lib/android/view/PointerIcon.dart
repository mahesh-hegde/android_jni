// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../content/Context.dart" as context_;

import "../graphics/Bitmap.dart" as bitmap_;

import "../content/res/Resources.dart" as resources_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.PointerIcon
///
/// Represents an icon that can be used as a mouse pointer.
///
/// Pointer icons can be provided either by the system using system types,
/// or by applications using bitmaps or application resources.
///
///
class PointerIcon extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/view/PointerIcon");
  PointerIcon.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.PointerIcon> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int TYPE_ALIAS
  ///
  /// Type constant: alias (indicating an alias of/shortcut to something is
  /// to be created.
  static const TYPE_ALIAS = 1010;

  /// from: static public final int TYPE_ALL_SCROLL
  ///
  /// Type constant: all-scroll.
  static const TYPE_ALL_SCROLL = 1013;

  /// from: static public final int TYPE_ARROW
  ///
  /// Type constant: Arrow icon.  (Default mouse pointer)
  static const TYPE_ARROW = 1000;

  /// from: static public final int TYPE_CELL
  ///
  /// Type constant: cell.
  static const TYPE_CELL = 1006;

  /// from: static public final int TYPE_CONTEXT_MENU
  ///
  /// Type constant: context-menu.
  static const TYPE_CONTEXT_MENU = 1001;

  /// from: static public final int TYPE_COPY
  ///
  /// Type constant: copy.
  static const TYPE_COPY = 1011;

  /// from: static public final int TYPE_CROSSHAIR
  ///
  /// Type constant: crosshair.
  static const TYPE_CROSSHAIR = 1007;

  /// from: static public final int TYPE_DEFAULT
  ///
  /// The default pointer icon.
  static const TYPE_DEFAULT = 1000;

  /// from: static public final int TYPE_GRAB
  ///
  /// Type constant: grab.
  static const TYPE_GRAB = 1020;

  /// from: static public final int TYPE_GRABBING
  ///
  /// Type constant: grabbing.
  static const TYPE_GRABBING = 1021;

  /// from: static public final int TYPE_HAND
  ///
  /// Type constant: hand.
  static const TYPE_HAND = 1002;

  /// from: static public final int TYPE_HELP
  ///
  /// Type constant: help.
  static const TYPE_HELP = 1003;

  /// from: static public final int TYPE_HORIZONTAL_DOUBLE_ARROW
  ///
  /// Type constant: horizontal double arrow mainly for resizing.
  static const TYPE_HORIZONTAL_DOUBLE_ARROW = 1014;

  /// from: static public final int TYPE_NO_DROP
  ///
  /// Type constant: no-drop.
  static const TYPE_NO_DROP = 1012;

  /// from: static public final int TYPE_NULL
  ///
  /// Type constant: Null icon.  It has no bitmap.
  static const TYPE_NULL = 0;

  /// from: static public final int TYPE_TEXT
  ///
  /// Type constant: text.
  static const TYPE_TEXT = 1008;

  /// from: static public final int TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW
  ///
  /// Type constant: diagonal double arrow -- top-left to bottom-right.
  static const TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW = 1017;

  /// from: static public final int TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW
  ///
  /// Type constant: diagonal double arrow -- top-right to bottom-left.
  static const TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW = 1016;

  /// from: static public final int TYPE_VERTICAL_DOUBLE_ARROW
  ///
  /// Type constant: vertical double arrow mainly for resizing.
  static const TYPE_VERTICAL_DOUBLE_ARROW = 1015;

  /// from: static public final int TYPE_VERTICAL_TEXT
  ///
  /// Type constant: vertical-text.
  static const TYPE_VERTICAL_TEXT = 1009;

  /// from: static public final int TYPE_WAIT
  ///
  /// Type constant: wait.
  static const TYPE_WAIT = 1004;

  /// from: static public final int TYPE_ZOOM_IN
  ///
  /// Type constant: zoom-in.
  static const TYPE_ZOOM_IN = 1018;

  /// from: static public final int TYPE_ZOOM_OUT
  ///
  /// Type constant: zoom-out.
  static const TYPE_ZOOM_OUT = 1019;

  static final _id_getSystemIcon = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getSystemIcon",
      "(Landroid/content/Context;I)Landroid/view/PointerIcon;");

  /// from: static public android.view.PointerIcon getSystemIcon(android.content.Context context, int type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a system pointer icon for the given type.
  /// If typeis not recognized, returns the default pointer icon.
  ///@param context The context.
  /// This value must never be {@code null}.
  ///@param type The pointer icon type.
  ///@return The pointer icon.
  ///@throws IllegalArgumentException if context is null.
  static PointerIcon getSystemIcon(context_.Context context, int type) =>
      PointerIcon.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getSystemIcon,
          jni.JniType.objectType,
          [context.reference, type]).object);

  static final _id_create = jniAccessors.getStaticMethodIDOf(_classRef,
      "create", "(Landroid/graphics/Bitmap;FF)Landroid/view/PointerIcon;");

  /// from: static public android.view.PointerIcon create(android.graphics.Bitmap bitmap, float hotSpotX, float hotSpotY)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a custom pointer icon from the given bitmap and hotspot information.
  ///@param bitmap The bitmap for the icon.
  /// This value must never be {@code null}.
  ///@param hotSpotX The X offset of the pointer icon hotspot in the bitmap.
  ///        Must be within the [0, bitmap.getWidth()) range.
  ///@param hotSpotY The Y offset of the pointer icon hotspot in the bitmap.
  ///        Must be within the [0, bitmap.getHeight()) range.
  ///@return A pointer icon for this bitmap.
  ///@throws IllegalArgumentException if bitmap is null, or if the x/y hotspot
  ///         parameters are invalid.
  static PointerIcon create(
          bitmap_.Bitmap bitmap, double hotSpotX, double hotSpotY) =>
      PointerIcon.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create,
          jni.JniType.objectType,
          [bitmap.reference, hotSpotX, hotSpotY]).object);

  static final _id_load = jniAccessors.getStaticMethodIDOf(_classRef, "load",
      "(Landroid/content/res/Resources;I)Landroid/view/PointerIcon;");

  /// from: static public android.view.PointerIcon load(android.content.res.Resources resources, int resourceId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Loads a custom pointer icon from an XML resource.
  ///
  /// The XML resource should have the following form:
  /// <code>
  /// &lt;?xml version="1.0" encoding="utf-8"?&gt;
  /// &lt;pointer-icon xmlns:android="http://schemas.android.com/apk/res/android"
  ///   android:bitmap="@drawable/my_pointer_bitmap"
  ///   android:hotSpotX="24"
  ///   android:hotSpotY="24" /&gt;
  /// </code>
  ///
  ///
  ///@param resources The resources object.
  /// This value must never be {@code null}.
  ///@param resourceId The resource id.
  ///@return The pointer icon.
  ///@throws IllegalArgumentException if resources is null.
  ///@throws Resources.NotFoundException if the resource was not found or the drawable
  /// linked in the resource was not found.
  static PointerIcon load(resources_.Resources resources, int resourceId) =>
      PointerIcon.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_load,
          jni.JniType.objectType,
          [resources.reference, resourceId]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object other)
  bool equals1(jni.JniObject other) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [other.reference]).boolean;
}
