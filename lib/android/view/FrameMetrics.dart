// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.FrameMetrics
///
/// Class containing timing data for various milestones in a frame
/// lifecycle reported by the rendering subsystem.
///
/// Supported metrics can be queried via their corresponding identifier.
///
///
class FrameMetrics extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/view/FrameMetrics");
  FrameMetrics.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ANIMATION_DURATION
  ///
  /// Metric identifier for animation callback duration.
  ///
  /// Represents the number of nanoseconds elapsed issuing
  /// animation callbacks.
  ///
  ///
  static const ANIMATION_DURATION = 2;

  /// from: static public final int COMMAND_ISSUE_DURATION
  ///
  /// Metric identifier for command issue duration.
  ///
  /// Represents the number of nanoseconds elapsed
  /// issuing draw commands to the GPU.
  ///
  ///
  static const COMMAND_ISSUE_DURATION = 6;

  /// from: static public final int DRAW_DURATION
  ///
  /// Metric identifier for draw duration.
  ///
  /// Represents the number of nanoseconds elapsed computing
  /// DisplayLists for transformations applied to the view
  /// hierarchy.
  ///
  ///
  static const DRAW_DURATION = 4;

  /// from: static public final int FIRST_DRAW_FRAME
  ///
  /// Metric identifier for a boolean value determining whether this frame was
  /// the first to draw in a new Window layout.
  ///
  /// \#getMetric(int) will return 0 for false, 1 for true.
  ///
  ///
  ///
  /// First draw frames are expected to be slow and should usually be exempt
  /// from display jank calculations as they do not cause skips in animations
  /// and are usually hidden by window animations or other tricks.
  ///
  ///
  static const FIRST_DRAW_FRAME = 9;

  /// from: static public final int INPUT_HANDLING_DURATION
  ///
  /// Metric identifier for input handling duration.
  ///
  /// Represents the number of nanoseconds elapsed issuing
  /// input handling callbacks.
  ///
  ///
  static const INPUT_HANDLING_DURATION = 1;

  /// from: static public final int INTENDED_VSYNC_TIMESTAMP
  ///
  /// Metric identifier for the timestamp of the intended vsync for this frame.
  ///
  /// The intended start point for the frame. If this value is different from
  /// \#VSYNC_TIMESTAMP, there was work occurring on the UI thread that
  /// prevented it from responding to the vsync signal in a timely fashion.
  ///
  ///
  static const INTENDED_VSYNC_TIMESTAMP = 10;

  /// from: static public final int LAYOUT_MEASURE_DURATION
  ///
  /// Metric identifier for layout/measure duration.
  ///
  /// Represents the number of nanoseconds elapsed measuring
  /// and laying out the invalidated pieces of the view hierarchy.
  ///
  ///
  static const LAYOUT_MEASURE_DURATION = 3;

  /// from: static public final int SWAP_BUFFERS_DURATION
  ///
  /// Metric identifier for swap buffers duration.
  ///
  /// Represents the number of nanoseconds elapsed issuing
  /// the frame buffer for this frame to the display
  /// subsystem.
  ///
  ///
  static const SWAP_BUFFERS_DURATION = 7;

  /// from: static public final int SYNC_DURATION
  ///
  /// Metric identifier for sync duration.
  ///
  /// Represents the number of nanoseconds elapsed
  /// synchronizing the computed display lists with the render
  /// thread.
  ///
  ///
  static const SYNC_DURATION = 5;

  /// from: static public final int TOTAL_DURATION
  ///
  /// Metric identifier for total frame duration.
  ///
  /// Represents the total time in nanoseconds this frame took to render
  /// and be issued to the display subsystem.
  ///
  ///
  ///
  /// Equal to the sum of the values of all other time-valued metric
  /// identifiers.
  ///
  ///
  static const TOTAL_DURATION = 8;

  /// from: static public final int UNKNOWN_DELAY_DURATION
  ///
  /// Metric identifier for unknown delay.
  ///
  /// Represents the number of nanoseconds elapsed waiting for the
  /// UI thread to become responsive and process the frame. This
  /// should be 0 most of the time.
  ///
  ///
  static const UNKNOWN_DELAY_DURATION = 0;

  /// from: static public final int VSYNC_TIMESTAMP
  ///
  /// Metric identifier for the timestamp of the actual vsync for this frame.
  ///
  /// The time value that was used in all the vsync listeners and drawing for
  /// the frame (Choreographer frame callbacks, animations,
  /// View\#getDrawingTime(), etc\u2026)
  ///
  ///
  static const VSYNC_TIMESTAMP = 11;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/view/FrameMetrics;)V");

  /// from: public void <init>(android.view.FrameMetrics other)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a FrameMetrics object as a copy.
  ///
  /// Use this method to copy out metrics reported by
  /// Window.OnFrameMetricsAvailableListener\#onFrameMetricsAvailable(
  /// Window, FrameMetrics, int)
  ///
  ///
  ///@param other the FrameMetrics object to copy.
  FrameMetrics(FrameMetrics other)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [other.reference]).object);

  static final _id_getMetric =
      jniAccessors.getMethodIDOf(_classRef, "getMetric", "(I)J");

  /// from: public long getMetric(int id)
  ///
  /// Retrieves the value associated with Metric identifier {@code id}
  /// for this frame.
  ///
  /// Boolean metrics are represented in [0,1], with 0 corresponding to
  /// false, and 1 corresponding to true.
  ///
  ///
  ///@param id the metric to retrieve
  /// Value is android.view.FrameMetrics\#UNKNOWN_DELAY_DURATION, android.view.FrameMetrics\#INPUT_HANDLING_DURATION, android.view.FrameMetrics\#ANIMATION_DURATION, android.view.FrameMetrics\#LAYOUT_MEASURE_DURATION, android.view.FrameMetrics\#DRAW_DURATION, android.view.FrameMetrics\#SYNC_DURATION, android.view.FrameMetrics\#COMMAND_ISSUE_DURATION, android.view.FrameMetrics\#SWAP_BUFFERS_DURATION, android.view.FrameMetrics\#TOTAL_DURATION, android.view.FrameMetrics\#FIRST_DRAW_FRAME, android.view.FrameMetrics\#INTENDED_VSYNC_TIMESTAMP, or android.view.FrameMetrics\#VSYNC_TIMESTAMP
  ///@return the value of the metric or -1 if it is not available.
  int getMetric(int id) => jniAccessors.callMethodWithArgs(
      reference, _id_getMetric, jni.JniType.longType, [id]).long;
}
