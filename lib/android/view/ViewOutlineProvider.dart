// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "View.dart" as view_;

import "../graphics/Outline.dart" as outline_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.ViewOutlineProvider
///
/// Interface by which a View builds its Outline, used for shadow casting and clipping.
class ViewOutlineProvider extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/ViewOutlineProvider");
  ViewOutlineProvider.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_BACKGROUND = jniAccessors.getStaticFieldIDOf(
      _classRef, "BACKGROUND", "Landroid/view/ViewOutlineProvider;");

  /// from: static public final android.view.ViewOutlineProvider BACKGROUND
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Default outline provider for Views, which queries the Outline from the View's background,
  /// or generates a 0 alpha, rectangular Outline the size of the View if a background
  /// isn't present.
  ///@see Drawable\#getOutline(Outline)
  static ViewOutlineProvider get BACKGROUND =>
      ViewOutlineProvider.fromRef(jniAccessors
          .getStaticField(_classRef, _id_BACKGROUND, jni.JniType.objectType)
          .object);

  static final _id_BOUNDS = jniAccessors.getStaticFieldIDOf(
      _classRef, "BOUNDS", "Landroid/view/ViewOutlineProvider;");

  /// from: static public final android.view.ViewOutlineProvider BOUNDS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Maintains the outline of the View to match its rectangular bounds,
  /// at <code>1.0f</code> alpha.
  ///
  /// This can be used to enable Views that are opaque but lacking a background cast a shadow.
  static ViewOutlineProvider get BOUNDS =>
      ViewOutlineProvider.fromRef(jniAccessors
          .getStaticField(_classRef, _id_BOUNDS, jni.JniType.objectType)
          .object);

  static final _id_PADDED_BOUNDS = jniAccessors.getStaticFieldIDOf(
      _classRef, "PADDED_BOUNDS", "Landroid/view/ViewOutlineProvider;");

  /// from: static public final android.view.ViewOutlineProvider PADDED_BOUNDS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Maintains the outline of the View to match its rectangular padded bounds,
  /// at <code>1.0f</code> alpha.
  ///
  /// This can be used to enable Views that are opaque but lacking a background cast a shadow.
  static ViewOutlineProvider get PADDED_BOUNDS =>
      ViewOutlineProvider.fromRef(jniAccessors
          .getStaticField(_classRef, _id_PADDED_BOUNDS, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ViewOutlineProvider()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getOutline = jniAccessors.getMethodIDOf(_classRef,
      "getOutline", "(Landroid/view/View;Landroid/graphics/Outline;)V");

  /// from: public abstract void getOutline(android.view.View view, android.graphics.Outline outline)
  ///
  /// Called to get the provider to populate the Outline.
  ///
  /// This method will be called by a View when its owned Drawables are invalidated, when the
  /// View's size changes, or if View\#invalidateOutline() is called
  /// explicitly.
  ///
  /// The input outline is empty and has an alpha of <code>1.0f</code>.
  ///@param view The view building the outline.
  ///@param outline The empty outline to be populated.
  void getOutline(view_.View view, outline_.Outline outline) =>
      jniAccessors.callMethodWithArgs(reference, _id_getOutline,
          jni.JniType.voidType, [view.reference, outline.reference]).check();
}
