// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "InputEvent.dart" as inputevent_;

import "../os/Parcelable.dart" as parcelable_;

import "../graphics/Matrix.dart" as matrix_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.MotionEvent
///
/// Object used to report movement (mouse, pen, finger, trackball) events.
/// Motion events may hold either absolute or relative movements and other data,
/// depending on the type of device.
///
/// <h3>Overview</h3>
///
/// Motion events describe movements in terms of an action code and a set of axis values.
/// The action code specifies the state change that occurred such as a pointer going
/// down or up.  The axis values describe the position and other movement properties.
///
///
/// For example, when the user first touches the screen, the system delivers a touch
/// event to the appropriate View with the action code \#ACTION_DOWN
/// and a set of axis values that include the X and Y coordinates of the touch and
/// information about the pressure, size and orientation of the contact area.
///
///
/// Some devices can report multiple movement traces at the same time.  Multi-touch
/// screens emit one movement trace for each finger.  The individual fingers or
/// other objects that generate movement traces are referred to as _pointers_.
/// Motion events contain information about all of the pointers that are currently active
/// even if some of them have not moved since the last event was delivered.
///
///
/// The number of pointers only ever changes by one as individual pointers go up and down,
/// except when the gesture is canceled.
///
///
/// Each pointer has a unique id that is assigned when it first goes down
/// (indicated by \#ACTION_DOWN or \#ACTION_POINTER_DOWN).  A pointer id
/// remains valid until the pointer eventually goes up (indicated by \#ACTION_UP
/// or \#ACTION_POINTER_UP) or when the gesture is canceled (indicated by
/// \#ACTION_CANCEL).
///
///
/// The MotionEvent class provides many methods to query the position and other properties of
/// pointers, such as \#getX(int), \#getY(int), \#getAxisValue,
/// \#getPointerId(int), \#getToolType(int), and many others.  Most of these
/// methods accept the pointer index as a parameter rather than the pointer id.
/// The pointer index of each pointer in the event ranges from 0 to one less than the value
/// returned by \#getPointerCount().
///
///
/// The order in which individual pointers appear within a motion event is undefined.
/// Thus the pointer index of a pointer can change from one event to the next but
/// the pointer id of a pointer is guaranteed to remain constant as long as the pointer
/// remains active.  Use the \#getPointerId(int) method to obtain the
/// pointer id of a pointer to track it across all subsequent motion events in a gesture.
/// Then for successive motion events, use the \#findPointerIndex(int) method
/// to obtain the pointer index for a given pointer id in that motion event.
///
///
/// Mouse and stylus buttons can be retrieved using \#getButtonState().  It is a
/// good idea to check the button state while handling \#ACTION_DOWN as part
/// of a touch event.  The application may choose to perform some different action
/// if the touch event starts due to a secondary button click, such as presenting a
/// context menu.
///
///
///
/// <h3>Batching</h3>
///
/// For efficiency, motion events with \#ACTION_MOVE may batch together
/// multiple movement samples within a single object.  The most current
/// pointer coordinates are available using \#getX(int) and \#getY(int).
/// Earlier coordinates within the batch are accessed using \#getHistoricalX(int, int)
/// and \#getHistoricalY(int, int).  The coordinates are "historical" only
/// insofar as they are older than the current coordinates in the batch; however,
/// they are still distinct from any other coordinates reported in prior motion events.
/// To process all coordinates in the batch in time order, first consume the historical
/// coordinates then consume the current coordinates.
///
///
/// Example: Consuming all samples for all pointers in a motion event in time order.
///
///<pre><code>
/// void printSamples(MotionEvent ev) {
///     final int historySize = ev.getHistorySize();
///     final int pointerCount = ev.getPointerCount();
///     for (int h = 0; h &lt; historySize; h++) {
///         System.out.printf("At time %d:", ev.getHistoricalEventTime(h));
///         for (int p = 0; p &lt; pointerCount; p++) {
///             System.out.printf("  pointer %d: (%f,%f)",
///                 ev.getPointerId(p), ev.getHistoricalX(p, h), ev.getHistoricalY(p, h));
///         }
///     }
///     System.out.printf("At time %d:", ev.getEventTime());
///     for (int p = 0; p &lt; pointerCount; p++) {
///         System.out.printf("  pointer %d: (%f,%f)",
///             ev.getPointerId(p), ev.getX(p), ev.getY(p));
///     }
/// }
/// </code></pre>
///
///
/// <h3>Device Types</h3>
///
/// The interpretation of the contents of a MotionEvent varies significantly depending
/// on the source class of the device.
///
///
/// On pointing devices with source class InputDevice\#SOURCE_CLASS_POINTER
/// such as touch screens, the pointer coordinates specify absolute
/// positions such as view X/Y coordinates.  Each complete gesture is represented
/// by a sequence of motion events with actions that describe pointer state transitions
/// and movements.  A gesture starts with a motion event with \#ACTION_DOWN
/// that provides the location of the first pointer down.  As each additional
/// pointer that goes down or up, the framework will generate a motion event with
/// \#ACTION_POINTER_DOWN or \#ACTION_POINTER_UP accordingly.
/// Pointer movements are described by motion events with \#ACTION_MOVE.
/// Finally, a gesture end either when the final pointer goes up as represented
/// by a motion event with \#ACTION_UP or when gesture is canceled
/// with \#ACTION_CANCEL.
///
///
/// Some pointing devices such as mice may support vertical and/or horizontal scrolling.
/// A scroll event is reported as a generic motion event with \#ACTION_SCROLL that
/// includes the relative scroll offset in the \#AXIS_VSCROLL and
/// \#AXIS_HSCROLL axes.  See \#getAxisValue(int) for information
/// about retrieving these additional axes.
///
///
/// On trackball devices with source class InputDevice\#SOURCE_CLASS_TRACKBALL,
/// the pointer coordinates specify relative movements as X/Y deltas.
/// A trackball gesture consists of a sequence of movements described by motion
/// events with \#ACTION_MOVE interspersed with occasional \#ACTION_DOWN
/// or \#ACTION_UP motion events when the trackball button is pressed or released.
///
///
/// On joystick devices with source class InputDevice\#SOURCE_CLASS_JOYSTICK,
/// the pointer coordinates specify the absolute position of the joystick axes.
/// The joystick axis values are normalized to a range of -1.0 to 1.0 where 0.0 corresponds
/// to the center position.  More information about the set of available axes and the
/// range of motion can be obtained using InputDevice\#getMotionRange.
/// Some common joystick axes are \#AXIS_X, \#AXIS_Y,
/// \#AXIS_HAT_X, \#AXIS_HAT_Y, \#AXIS_Z and \#AXIS_RZ.
///
///
/// Refer to InputDevice for more information about how different kinds of
/// input devices and sources represent pointer coordinates.
///
///
///
/// <h3>Consistency Guarantees</h3>
///
/// Motion events are always delivered to views as a consistent stream of events.
/// What constitutes a consistent stream varies depending on the type of device.
/// For touch events, consistency implies that pointers go down one at a time,
/// move around as a group and then go up one at a time or are canceled.
///
///
/// While the framework tries to deliver consistent streams of motion events to
/// views, it cannot guarantee it.  Some events may be dropped or modified by
/// containing views in the application before they are delivered thereby making
/// the stream of events inconsistent.  Views should always be prepared to
/// handle \#ACTION_CANCEL and should tolerate anomalous
/// situations such as receiving a new \#ACTION_DOWN without first having
/// received an \#ACTION_UP for the prior gesture.
///
///
class MotionEvent extends inputevent_.InputEvent {
  static final _classRef = jniAccessors.getClassOf("android/view/MotionEvent");
  MotionEvent.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ACTION_BUTTON_PRESS
  ///
  /// Constant for \#getActionMasked: A button has been pressed.
  ///
  ///
  /// Use \#getActionButton() to get which button was pressed.
  ///
  ///
  /// This action is not a touch event so it is delivered to
  /// View\#onGenericMotionEvent(MotionEvent) rather than
  /// View\#onTouchEvent(MotionEvent).
  ///
  ///
  static const ACTION_BUTTON_PRESS = 11;

  /// from: static public final int ACTION_BUTTON_RELEASE
  ///
  /// Constant for \#getActionMasked: A button has been released.
  ///
  ///
  /// Use \#getActionButton() to get which button was released.
  ///
  ///
  /// This action is not a touch event so it is delivered to
  /// View\#onGenericMotionEvent(MotionEvent) rather than
  /// View\#onTouchEvent(MotionEvent).
  ///
  ///
  static const ACTION_BUTTON_RELEASE = 12;

  /// from: static public final int ACTION_CANCEL
  ///
  /// Constant for \#getActionMasked: The current gesture has been aborted.
  /// You will not receive any more points in it.  You should treat this as
  /// an up event, but not perform any action that you normally would.
  static const ACTION_CANCEL = 3;

  /// from: static public final int ACTION_DOWN
  ///
  /// Constant for \#getActionMasked: A pressed gesture has started, the
  /// motion contains the initial starting location.
  ///
  /// This is also a good time to check the button state to distinguish
  /// secondary and tertiary button clicks and handle them appropriately.
  /// Use \#getButtonState to retrieve the button state.
  ///
  ///
  static const ACTION_DOWN = 0;

  /// from: static public final int ACTION_HOVER_ENTER
  ///
  /// Constant for \#getActionMasked: The pointer is not down but has entered the
  /// boundaries of a window or view.
  ///
  /// This action is always delivered to the window or view under the pointer.
  ///
  ///
  /// This action is not a touch event so it is delivered to
  /// View\#onGenericMotionEvent(MotionEvent) rather than
  /// View\#onTouchEvent(MotionEvent).
  ///
  ///
  static const ACTION_HOVER_ENTER = 9;

  /// from: static public final int ACTION_HOVER_EXIT
  ///
  /// Constant for \#getActionMasked: The pointer is not down but has exited the
  /// boundaries of a window or view.
  ///
  /// This action is always delivered to the window or view that was previously under the pointer.
  ///
  ///
  /// This action is not a touch event so it is delivered to
  /// View\#onGenericMotionEvent(MotionEvent) rather than
  /// View\#onTouchEvent(MotionEvent).
  ///
  ///
  static const ACTION_HOVER_EXIT = 10;

  /// from: static public final int ACTION_HOVER_MOVE
  ///
  /// Constant for \#getActionMasked: A change happened but the pointer
  /// is not down (unlike \#ACTION_MOVE).  The motion contains the most
  /// recent point, as well as any intermediate points since the last
  /// hover move event.
  ///
  /// This action is always delivered to the window or view under the pointer.
  ///
  ///
  /// This action is not a touch event so it is delivered to
  /// View\#onGenericMotionEvent(MotionEvent) rather than
  /// View\#onTouchEvent(MotionEvent).
  ///
  ///
  static const ACTION_HOVER_MOVE = 7;

  /// from: static public final int ACTION_MASK
  ///
  /// Bit mask of the parts of the action code that are the action itself.
  static const ACTION_MASK = 255;

  /// from: static public final int ACTION_MOVE
  ///
  /// Constant for \#getActionMasked: A change has happened during a
  /// press gesture (between \#ACTION_DOWN and \#ACTION_UP).
  /// The motion contains the most recent point, as well as any intermediate
  /// points since the last down or move event.
  static const ACTION_MOVE = 2;

  /// from: static public final int ACTION_OUTSIDE
  ///
  /// Constant for \#getActionMasked: A movement has happened outside of the
  /// normal bounds of the UI element.  This does not provide a full gesture,
  /// but only the initial location of the movement/touch.
  ///
  /// Note: Because the location of any event will be outside the
  /// bounds of the view hierarchy, it will not get dispatched to
  /// any children of a ViewGroup by default. Therefore,
  /// movements with ACTION_OUTSIDE should be handled in either the
  /// root View or in the appropriate Window.Callback
  /// (e.g. android.app.Activity or android.app.Dialog).
  ///
  ///
  static const ACTION_OUTSIDE = 4;

  /// from: static public final int ACTION_POINTER_1_DOWN
  ///
  /// @deprecated Use \#ACTION_POINTER_INDEX_MASK to retrieve the
  /// data index associated with \#ACTION_POINTER_DOWN.
  static const ACTION_POINTER_1_DOWN = 5;

  /// from: static public final int ACTION_POINTER_1_UP
  ///
  /// @deprecated Use \#ACTION_POINTER_INDEX_MASK to retrieve the
  /// data index associated with \#ACTION_POINTER_UP.
  static const ACTION_POINTER_1_UP = 6;

  /// from: static public final int ACTION_POINTER_2_DOWN
  ///
  /// @deprecated Use \#ACTION_POINTER_INDEX_MASK to retrieve the
  /// data index associated with \#ACTION_POINTER_DOWN.
  static const ACTION_POINTER_2_DOWN = 261;

  /// from: static public final int ACTION_POINTER_2_UP
  ///
  /// @deprecated Use \#ACTION_POINTER_INDEX_MASK to retrieve the
  /// data index associated with \#ACTION_POINTER_UP.
  static const ACTION_POINTER_2_UP = 262;

  /// from: static public final int ACTION_POINTER_3_DOWN
  ///
  /// @deprecated Use \#ACTION_POINTER_INDEX_MASK to retrieve the
  /// data index associated with \#ACTION_POINTER_DOWN.
  static const ACTION_POINTER_3_DOWN = 517;

  /// from: static public final int ACTION_POINTER_3_UP
  ///
  /// @deprecated Use \#ACTION_POINTER_INDEX_MASK to retrieve the
  /// data index associated with \#ACTION_POINTER_UP.
  static const ACTION_POINTER_3_UP = 518;

  /// from: static public final int ACTION_POINTER_DOWN
  ///
  /// Constant for \#getActionMasked: A non-primary pointer has gone down.
  ///
  /// Use \#getActionIndex to retrieve the index of the pointer that changed.
  ///
  ///
  /// The index is encoded in the \#ACTION_POINTER_INDEX_MASK bits of the
  /// unmasked action returned by \#getAction.
  ///
  ///
  static const ACTION_POINTER_DOWN = 5;

  /// from: static public final int ACTION_POINTER_ID_MASK
  ///
  /// @deprecated Renamed to \#ACTION_POINTER_INDEX_MASK to match
  /// the actual data contained in these bits.
  static const ACTION_POINTER_ID_MASK = 65280;

  /// from: static public final int ACTION_POINTER_ID_SHIFT
  ///
  /// @deprecated Renamed to \#ACTION_POINTER_INDEX_SHIFT to match
  /// the actual data contained in these bits.
  static const ACTION_POINTER_ID_SHIFT = 8;

  /// from: static public final int ACTION_POINTER_INDEX_MASK
  ///
  /// Bits in the action code that represent a pointer index, used with
  /// \#ACTION_POINTER_DOWN and \#ACTION_POINTER_UP.  Shifting
  /// down by \#ACTION_POINTER_INDEX_SHIFT provides the actual pointer
  /// index where the data for the pointer going up or down can be found; you can
  /// get its identifier with \#getPointerId(int) and the actual
  /// data with \#getX(int) etc.
  ///@see \#getActionIndex
  static const ACTION_POINTER_INDEX_MASK = 65280;

  /// from: static public final int ACTION_POINTER_INDEX_SHIFT
  ///
  /// Bit shift for the action bits holding the pointer index as
  /// defined by \#ACTION_POINTER_INDEX_MASK.
  ///@see \#getActionIndex
  static const ACTION_POINTER_INDEX_SHIFT = 8;

  /// from: static public final int ACTION_POINTER_UP
  ///
  /// Constant for \#getActionMasked: A non-primary pointer has gone up.
  ///
  /// Use \#getActionIndex to retrieve the index of the pointer that changed.
  ///
  ///
  /// The index is encoded in the \#ACTION_POINTER_INDEX_MASK bits of the
  /// unmasked action returned by \#getAction.
  ///
  ///
  static const ACTION_POINTER_UP = 6;

  /// from: static public final int ACTION_SCROLL
  ///
  /// Constant for \#getActionMasked: The motion event contains relative
  /// vertical and/or horizontal scroll offsets.  Use \#getAxisValue(int)
  /// to retrieve the information from \#AXIS_VSCROLL and \#AXIS_HSCROLL.
  /// The pointer may or may not be down when this event is dispatched.
  ///
  /// This action is always delivered to the window or view under the pointer, which
  /// may not be the window or view currently touched.
  ///
  ///
  /// This action is not a touch event so it is delivered to
  /// View\#onGenericMotionEvent(MotionEvent) rather than
  /// View\#onTouchEvent(MotionEvent).
  ///
  ///
  static const ACTION_SCROLL = 8;

  /// from: static public final int ACTION_UP
  ///
  /// Constant for \#getActionMasked: A pressed gesture has finished, the
  /// motion contains the final release location as well as any intermediate
  /// points since the last down or move event.
  static const ACTION_UP = 1;

  /// from: static public final int AXIS_BRAKE
  ///
  /// Axis constant: Brake axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute position of the brake control.
  /// The value is normalized to a range from 0.0 (no braking) to 1.0 (maximum braking).
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_BRAKE = 23;

  /// from: static public final int AXIS_DISTANCE
  ///
  /// Axis constant: Distance axis of a motion event.
  ///
  /// <ul>
  /// <li>For a stylus, reports the distance of the stylus from the screen.
  /// A value of 0.0 indicates direct contact and larger values indicate increasing
  /// distance from the surface.
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_DISTANCE = 24;

  /// from: static public final int AXIS_GAS
  ///
  /// Axis constant: Gas axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute position of the gas (accelerator) control.
  /// The value is normalized to a range from 0.0 (no acceleration)
  /// to 1.0 (maximum acceleration).
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GAS = 22;

  /// from: static public final int AXIS_GENERIC_1
  ///
  /// Axis constant: Generic 1 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_1 = 32;

  /// from: static public final int AXIS_GENERIC_10
  ///
  /// Axis constant: Generic 10 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_10 = 41;

  /// from: static public final int AXIS_GENERIC_11
  ///
  /// Axis constant: Generic 11 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_11 = 42;

  /// from: static public final int AXIS_GENERIC_12
  ///
  /// Axis constant: Generic 12 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_12 = 43;

  /// from: static public final int AXIS_GENERIC_13
  ///
  /// Axis constant: Generic 13 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_13 = 44;

  /// from: static public final int AXIS_GENERIC_14
  ///
  /// Axis constant: Generic 14 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_14 = 45;

  /// from: static public final int AXIS_GENERIC_15
  ///
  /// Axis constant: Generic 15 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_15 = 46;

  /// from: static public final int AXIS_GENERIC_16
  ///
  /// Axis constant: Generic 16 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_16 = 47;

  /// from: static public final int AXIS_GENERIC_2
  ///
  /// Axis constant: Generic 2 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_2 = 33;

  /// from: static public final int AXIS_GENERIC_3
  ///
  /// Axis constant: Generic 3 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_3 = 34;

  /// from: static public final int AXIS_GENERIC_4
  ///
  /// Axis constant: Generic 4 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_4 = 35;

  /// from: static public final int AXIS_GENERIC_5
  ///
  /// Axis constant: Generic 5 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_5 = 36;

  /// from: static public final int AXIS_GENERIC_6
  ///
  /// Axis constant: Generic 6 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_6 = 37;

  /// from: static public final int AXIS_GENERIC_7
  ///
  /// Axis constant: Generic 7 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_7 = 38;

  /// from: static public final int AXIS_GENERIC_8
  ///
  /// Axis constant: Generic 8 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_8 = 39;

  /// from: static public final int AXIS_GENERIC_9
  ///
  /// Axis constant: Generic 9 axis of a motion event.
  /// The interpretation of a generic axis is device-specific.
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_GENERIC_9 = 40;

  /// from: static public final int AXIS_HAT_X
  ///
  /// Axis constant: Hat X axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute X position of the directional hat control.
  /// The value is normalized to a range from -1.0 (left) to 1.0 (right).
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_HAT_X = 15;

  /// from: static public final int AXIS_HAT_Y
  ///
  /// Axis constant: Hat Y axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute Y position of the directional hat control.
  /// The value is normalized to a range from -1.0 (up) to 1.0 (down).
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_HAT_Y = 16;

  /// from: static public final int AXIS_HSCROLL
  ///
  /// Axis constant: Horizontal Scroll axis of a motion event.
  ///
  /// <ul>
  /// <li>For a mouse, reports the relative movement of the horizontal scroll wheel.
  /// The value is normalized to a range from -1.0 (left) to 1.0 (right).
  /// </ul>
  ///
  ///
  /// This axis should be used to scroll views horizontally.
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_HSCROLL = 10;

  /// from: static public final int AXIS_LTRIGGER
  ///
  /// Axis constant: Left Trigger axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute position of the left trigger control.
  /// The value is normalized to a range from 0.0 (released) to 1.0 (fully pressed).
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_LTRIGGER = 17;

  /// from: static public final int AXIS_ORIENTATION
  ///
  /// Axis constant: Orientation axis of a motion event.
  ///
  /// <ul>
  /// <li>For a touch screen or touch pad, reports the orientation of the finger
  /// or tool in radians relative to the vertical plane of the device.
  /// An angle of 0 radians indicates that the major axis of contact is oriented
  /// upwards, is perfectly circular or is of unknown orientation.  A positive angle
  /// indicates that the major axis of contact is oriented to the right.  A negative angle
  /// indicates that the major axis of contact is oriented to the left.
  /// The full range is from -PI/2 radians (finger pointing fully left) to PI/2 radians
  /// (finger pointing fully right).
  /// <li>For a stylus, the orientation indicates the direction in which the stylus
  /// is pointing in relation to the vertical axis of the current orientation of the screen.
  /// The range is from -PI radians to PI radians, where 0 is pointing up,
  /// -PI/2 radians is pointing left, -PI or PI radians is pointing down, and PI/2 radians
  /// is pointing right.  See also \#AXIS_TILT.
  /// </ul>
  ///
  ///
  ///@see \#getOrientation(int)
  ///@see \#getHistoricalOrientation(int, int)
  ///@see MotionEvent.PointerCoords\#orientation
  ///@see InputDevice\#getMotionRange
  static const AXIS_ORIENTATION = 8;

  /// from: static public final int AXIS_PRESSURE
  ///
  /// Axis constant: Pressure axis of a motion event.
  ///
  /// <ul>
  /// <li>For a touch screen or touch pad, reports the approximate pressure applied to the surface
  /// by a finger or other tool.  The value is normalized to a range from
  /// 0 (no pressure at all) to 1 (normal pressure), although values higher than 1
  /// may be generated depending on the calibration of the input device.
  /// <li>For a trackball, the value is set to 1 if the trackball button is pressed
  /// or 0 otherwise.
  /// <li>For a mouse, the value is set to 1 if the primary mouse button is pressed
  /// or 0 otherwise.
  /// </ul>
  ///
  ///
  ///@see \#getPressure(int)
  ///@see \#getHistoricalPressure(int, int)
  ///@see MotionEvent.PointerCoords\#pressure
  ///@see InputDevice\#getMotionRange
  static const AXIS_PRESSURE = 2;

  /// from: static public final int AXIS_RELATIVE_X
  ///
  /// Axis constant: The movement of x position of a motion event.
  ///
  /// <ul>
  /// <li>For a mouse, reports a difference of x position between the previous position.
  /// This is useful when pointer is captured, in that case the mouse pointer doesn't change
  /// the location but this axis reports the difference which allows the app to see
  /// how the mouse is moved.
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int, int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_RELATIVE_X = 27;

  /// from: static public final int AXIS_RELATIVE_Y
  ///
  /// Axis constant: The movement of y position of a motion event.
  ///
  /// This is similar to \#AXIS_RELATIVE_X but for y-axis.
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int, int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_RELATIVE_Y = 28;

  /// from: static public final int AXIS_RTRIGGER
  ///
  /// Axis constant: Right Trigger axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute position of the right trigger control.
  /// The value is normalized to a range from 0.0 (released) to 1.0 (fully pressed).
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_RTRIGGER = 18;

  /// from: static public final int AXIS_RUDDER
  ///
  /// Axis constant: Rudder axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute position of the rudder control.
  /// The value is normalized to a range from -1.0 (turn left) to 1.0 (turn right).
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_RUDDER = 20;

  /// from: static public final int AXIS_RX
  ///
  /// Axis constant: X Rotation axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute rotation angle about the X axis.
  /// The value is normalized to a range from -1.0 (counter-clockwise) to 1.0 (clockwise).
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_RX = 12;

  /// from: static public final int AXIS_RY
  ///
  /// Axis constant: Y Rotation axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute rotation angle about the Y axis.
  /// The value is normalized to a range from -1.0 (counter-clockwise) to 1.0 (clockwise).
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_RY = 13;

  /// from: static public final int AXIS_RZ
  ///
  /// Axis constant: Z Rotation axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute rotation angle about the Z axis.
  /// The value is normalized to a range from -1.0 (counter-clockwise) to 1.0 (clockwise).
  /// _On game pads with two analog joysticks, this axis is often reinterpreted
  /// to report the absolute Y position of the second joystick instead._
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_RZ = 14;

  /// from: static public final int AXIS_SCROLL
  ///
  /// Axis constant: Generic scroll axis of a motion event.
  ///
  /// <ul>
  /// <li>Reports the relative movement of the generic scrolling device.
  /// </ul>
  ///
  ///
  /// This axis should be used for scroll events that are neither strictly vertical nor horizontal.
  /// A good example would be the rotation of a rotary encoder input device.
  ///
  ///
  ///@see \#getAxisValue(int, int)
  static const AXIS_SCROLL = 26;

  /// from: static public final int AXIS_SIZE
  ///
  /// Axis constant: Size axis of a motion event.
  ///
  /// <ul>
  /// <li>For a touch screen or touch pad, reports the approximate size of the contact area in
  /// relation to the maximum detectable size for the device.  The value is normalized
  /// to a range from 0 (smallest detectable size) to 1 (largest detectable size),
  /// although it is not a linear scale.  This value is of limited use.
  /// To obtain calibrated size information, use
  /// \#AXIS_TOUCH_MAJOR or \#AXIS_TOOL_MAJOR.
  /// </ul>
  ///
  ///
  ///@see \#getSize(int)
  ///@see \#getHistoricalSize(int, int)
  ///@see MotionEvent.PointerCoords\#size
  ///@see InputDevice\#getMotionRange
  static const AXIS_SIZE = 3;

  /// from: static public final int AXIS_THROTTLE
  ///
  /// Axis constant: Throttle axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute position of the throttle control.
  /// The value is normalized to a range from 0.0 (fully open) to 1.0 (fully closed).
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_THROTTLE = 19;

  /// from: static public final int AXIS_TILT
  ///
  /// Axis constant: Tilt axis of a motion event.
  ///
  /// <ul>
  /// <li>For a stylus, reports the tilt angle of the stylus in radians where
  /// 0 radians indicates that the stylus is being held perpendicular to the
  /// surface, and PI/2 radians indicates that the stylus is being held flat
  /// against the surface.
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int, int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_TILT = 25;

  /// from: static public final int AXIS_TOOL_MAJOR
  ///
  /// Axis constant: ToolMajor axis of a motion event.
  ///
  /// <ul>
  /// <li>For a touch screen, reports the length of the major axis of an ellipse that
  /// represents the size of the approaching finger or tool used to make contact.
  /// <li>For a touch pad, reports the length of the major axis of an ellipse that
  /// represents the size of the approaching finger or tool used to make contact.
  /// The units are device-dependent; use InputDevice\#getMotionRange(int)
  /// to query the effective range of values.
  /// </ul>
  ///
  ///
  /// When the touch is circular, the major and minor axis lengths will be equal to one another.
  ///
  ///
  /// The tool size may be larger than the touch size since the tool may not be fully
  /// in contact with the touch sensor.
  ///
  ///
  ///@see \#getToolMajor(int)
  ///@see \#getHistoricalToolMajor(int, int)
  ///@see MotionEvent.PointerCoords\#toolMajor
  ///@see InputDevice\#getMotionRange
  static const AXIS_TOOL_MAJOR = 6;

  /// from: static public final int AXIS_TOOL_MINOR
  ///
  /// Axis constant: ToolMinor axis of a motion event.
  ///
  /// <ul>
  /// <li>For a touch screen, reports the length of the minor axis of an ellipse that
  /// represents the size of the approaching finger or tool used to make contact.
  /// <li>For a touch pad, reports the length of the minor axis of an ellipse that
  /// represents the size of the approaching finger or tool used to make contact.
  /// The units are device-dependent; use InputDevice\#getMotionRange(int)
  /// to query the effective range of values.
  /// </ul>
  ///
  ///
  /// When the touch is circular, the major and minor axis lengths will be equal to one another.
  ///
  ///
  /// The tool size may be larger than the touch size since the tool may not be fully
  /// in contact with the touch sensor.
  ///
  ///
  ///@see \#getToolMinor(int)
  ///@see \#getHistoricalToolMinor(int, int)
  ///@see MotionEvent.PointerCoords\#toolMinor
  ///@see InputDevice\#getMotionRange
  static const AXIS_TOOL_MINOR = 7;

  /// from: static public final int AXIS_TOUCH_MAJOR
  ///
  /// Axis constant: TouchMajor axis of a motion event.
  ///
  /// <ul>
  /// <li>For a touch screen, reports the length of the major axis of an ellipse that
  /// represents the touch area at the point of contact.
  /// The units are display pixels.
  /// <li>For a touch pad, reports the length of the major axis of an ellipse that
  /// represents the touch area at the point of contact.
  /// The units are device-dependent; use InputDevice\#getMotionRange(int)
  /// to query the effective range of values.
  /// </ul>
  ///
  ///
  ///@see \#getTouchMajor(int)
  ///@see \#getHistoricalTouchMajor(int, int)
  ///@see MotionEvent.PointerCoords\#touchMajor
  ///@see InputDevice\#getMotionRange
  static const AXIS_TOUCH_MAJOR = 4;

  /// from: static public final int AXIS_TOUCH_MINOR
  ///
  /// Axis constant: TouchMinor axis of a motion event.
  ///
  /// <ul>
  /// <li>For a touch screen, reports the length of the minor axis of an ellipse that
  /// represents the touch area at the point of contact.
  /// The units are display pixels.
  /// <li>For a touch pad, reports the length of the minor axis of an ellipse that
  /// represents the touch area at the point of contact.
  /// The units are device-dependent; use InputDevice\#getMotionRange(int)
  /// to query the effective range of values.
  /// </ul>
  ///
  ///
  /// When the touch is circular, the major and minor axis lengths will be equal to one another.
  ///
  ///
  ///@see \#getTouchMinor(int)
  ///@see \#getHistoricalTouchMinor(int, int)
  ///@see MotionEvent.PointerCoords\#touchMinor
  ///@see InputDevice\#getMotionRange
  static const AXIS_TOUCH_MINOR = 5;

  /// from: static public final int AXIS_VSCROLL
  ///
  /// Axis constant: Vertical Scroll axis of a motion event.
  ///
  /// <ul>
  /// <li>For a mouse, reports the relative movement of the vertical scroll wheel.
  /// The value is normalized to a range from -1.0 (down) to 1.0 (up).
  /// </ul>
  ///
  ///
  /// This axis should be used to scroll views vertically.
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_VSCROLL = 9;

  /// from: static public final int AXIS_WHEEL
  ///
  /// Axis constant: Wheel axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute position of the steering wheel control.
  /// The value is normalized to a range from -1.0 (turn left) to 1.0 (turn right).
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_WHEEL = 21;

  /// from: static public final int AXIS_X
  ///
  /// Axis constant: X axis of a motion event.
  ///
  /// <ul>
  /// <li>For a touch screen, reports the absolute X screen position of the center of
  /// the touch contact area.  The units are display pixels.
  /// <li>For a touch pad, reports the absolute X surface position of the center of the touch
  /// contact area.  The units are device-dependent; use InputDevice\#getMotionRange(int)
  /// to query the effective range of values.
  /// <li>For a mouse, reports the absolute X screen position of the mouse pointer.
  /// The units are display pixels.
  /// <li>For a trackball, reports the relative horizontal displacement of the trackball.
  /// The value is normalized to a range from -1.0 (left) to 1.0 (right).
  /// <li>For a joystick, reports the absolute X position of the joystick.
  /// The value is normalized to a range from -1.0 (left) to 1.0 (right).
  /// </ul>
  ///
  ///
  ///@see \#getX(int)
  ///@see \#getHistoricalX(int, int)
  ///@see MotionEvent.PointerCoords\#x
  ///@see InputDevice\#getMotionRange
  static const AXIS_X = 0;

  /// from: static public final int AXIS_Y
  ///
  /// Axis constant: Y axis of a motion event.
  ///
  /// <ul>
  /// <li>For a touch screen, reports the absolute Y screen position of the center of
  /// the touch contact area.  The units are display pixels.
  /// <li>For a touch pad, reports the absolute Y surface position of the center of the touch
  /// contact area.  The units are device-dependent; use InputDevice\#getMotionRange(int)
  /// to query the effective range of values.
  /// <li>For a mouse, reports the absolute Y screen position of the mouse pointer.
  /// The units are display pixels.
  /// <li>For a trackball, reports the relative vertical displacement of the trackball.
  /// The value is normalized to a range from -1.0 (up) to 1.0 (down).
  /// <li>For a joystick, reports the absolute Y position of the joystick.
  /// The value is normalized to a range from -1.0 (up or far) to 1.0 (down or near).
  /// </ul>
  ///
  ///
  ///@see \#getY(int)
  ///@see \#getHistoricalY(int, int)
  ///@see MotionEvent.PointerCoords\#y
  ///@see InputDevice\#getMotionRange
  static const AXIS_Y = 1;

  /// from: static public final int AXIS_Z
  ///
  /// Axis constant: Z axis of a motion event.
  ///
  /// <ul>
  /// <li>For a joystick, reports the absolute Z position of the joystick.
  /// The value is normalized to a range from -1.0 (high) to 1.0 (low).
  /// _On game pads with two analog joysticks, this axis is often reinterpreted
  /// to report the absolute X position of the second joystick instead._
  /// </ul>
  ///
  ///
  ///@see \#getAxisValue(int, int)
  ///@see \#getHistoricalAxisValue(int, int, int)
  ///@see MotionEvent.PointerCoords\#getAxisValue(int)
  ///@see InputDevice\#getMotionRange
  static const AXIS_Z = 11;

  /// from: static public final int BUTTON_BACK
  ///
  /// Button constant: Back button pressed (mouse back button).
  ///
  /// The system may send a KeyEvent\#KEYCODE_BACK key press to the application
  /// when this button is pressed.
  ///
  ///
  ///@see \#getButtonState
  static const BUTTON_BACK = 8;

  /// from: static public final int BUTTON_FORWARD
  ///
  /// Button constant: Forward button pressed (mouse forward button).
  ///
  /// The system may send a KeyEvent\#KEYCODE_FORWARD key press to the application
  /// when this button is pressed.
  ///
  ///
  ///@see \#getButtonState
  static const BUTTON_FORWARD = 16;

  /// from: static public final int BUTTON_PRIMARY
  ///
  /// Button constant: Primary button (left mouse button).
  ///
  /// This button constant is not set in response to simple touches with a finger
  /// or stylus tip.  The user must actually push a button.
  ///@see \#getButtonState
  static const BUTTON_PRIMARY = 1;

  /// from: static public final int BUTTON_SECONDARY
  ///
  /// Button constant: Secondary button (right mouse button).
  ///@see \#getButtonState
  static const BUTTON_SECONDARY = 2;

  /// from: static public final int BUTTON_STYLUS_PRIMARY
  ///
  /// Button constant: Primary stylus button pressed.
  ///@see \#getButtonState
  static const BUTTON_STYLUS_PRIMARY = 32;

  /// from: static public final int BUTTON_STYLUS_SECONDARY
  ///
  /// Button constant: Secondary stylus button pressed.
  ///@see \#getButtonState
  static const BUTTON_STYLUS_SECONDARY = 64;

  /// from: static public final int BUTTON_TERTIARY
  ///
  /// Button constant: Tertiary button (middle mouse button).
  ///@see \#getButtonState
  static const BUTTON_TERTIARY = 4;

  static final _id_CREATOR1 = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.MotionEvent> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR1 =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR1, jni.JniType.objectType)
          .object);

  /// from: static public final int EDGE_BOTTOM
  ///
  /// Flag indicating the motion event intersected the bottom edge of the screen.
  static const EDGE_BOTTOM = 2;

  /// from: static public final int EDGE_LEFT
  ///
  /// Flag indicating the motion event intersected the left edge of the screen.
  static const EDGE_LEFT = 4;

  /// from: static public final int EDGE_RIGHT
  ///
  /// Flag indicating the motion event intersected the right edge of the screen.
  static const EDGE_RIGHT = 8;

  /// from: static public final int EDGE_TOP
  ///
  /// Flag indicating the motion event intersected the top edge of the screen.
  static const EDGE_TOP = 1;

  /// from: static public final int FLAG_WINDOW_IS_OBSCURED
  ///
  /// This flag indicates that the window that received this motion event is partly
  /// or wholly obscured by another visible window above it.  This flag is set to true
  /// even if the event did not directly pass through the obscured area.
  /// A security sensitive application can check this flag to identify situations in which
  /// a malicious application may have covered up part of its content for the purpose
  /// of misleading the user or hijacking touches.  An appropriate response might be
  /// to drop the suspect touches or to take additional precautions to confirm the user's
  /// actual intent.
  static const FLAG_WINDOW_IS_OBSCURED = 1;

  /// from: static public final int INVALID_POINTER_ID
  ///
  /// An invalid pointer id.
  ///
  /// This value (-1) can be used as a placeholder to indicate that a pointer id
  /// has not been assigned or is not available.  It cannot appear as
  /// a pointer id inside a MotionEvent.
  static const INVALID_POINTER_ID = -1;

  /// from: static public final int TOOL_TYPE_ERASER
  ///
  /// Tool type constant: The tool is an eraser or a stylus being used in an inverted posture.
  ///@see \#getToolType
  static const TOOL_TYPE_ERASER = 4;

  /// from: static public final int TOOL_TYPE_FINGER
  ///
  /// Tool type constant: The tool is a finger.
  ///@see \#getToolType
  static const TOOL_TYPE_FINGER = 1;

  /// from: static public final int TOOL_TYPE_MOUSE
  ///
  /// Tool type constant: The tool is a mouse or trackpad.
  ///@see \#getToolType
  static const TOOL_TYPE_MOUSE = 3;

  /// from: static public final int TOOL_TYPE_STYLUS
  ///
  /// Tool type constant: The tool is a stylus.
  ///@see \#getToolType
  static const TOOL_TYPE_STYLUS = 2;

  /// from: static public final int TOOL_TYPE_UNKNOWN
  ///
  /// Tool type constant: Unknown tool type.
  /// This constant is used when the tool type is not known or is not relevant,
  /// such as for a trackball or other non-pointing device.
  ///@see \#getToolType
  static const TOOL_TYPE_UNKNOWN = 0;

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();

  static final _id_obtain = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "obtain",
      "(JJII[Landroid/view/MotionEvent\$PointerProperties;[Landroid/view/MotionEvent\$PointerCoords;IIFFIIII)Landroid/view/MotionEvent;");

  /// from: static public android.view.MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, android.view.MotionEvent.PointerProperties[] pointerProperties, android.view.MotionEvent.PointerCoords[] pointerCoords, int metaState, int buttonState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new MotionEvent, filling in all of the basic values that
  /// define the motion.
  ///@param downTime The time (in ms) when the user originally pressed down to start
  /// a stream of position events.  This must be obtained from SystemClock\#uptimeMillis().
  ///@param eventTime The the time (in ms) when this specific event was generated.  This
  /// must be obtained from SystemClock\#uptimeMillis().
  ///@param action The kind of action being performed, such as \#ACTION_DOWN.
  ///@param pointerCount The number of pointers that will be in this event.
  ///@param pointerProperties An array of _pointerCount_ values providing
  /// a PointerProperties property object for each pointer, which must
  /// include the pointer identifier.
  ///@param pointerCoords An array of _pointerCount_ values providing
  /// a PointerCoords coordinate object for each pointer.
  ///@param metaState The state of any meta / modifier keys that were in effect when
  /// the event was generated.
  ///@param buttonState The state of buttons that are pressed.
  ///@param xPrecision The precision of the X coordinate being reported.
  ///@param yPrecision The precision of the Y coordinate being reported.
  ///@param deviceId The id for the device that this event came from.  An id of
  /// zero indicates that the event didn't come from a physical device; other
  /// numbers are arbitrary and you shouldn't depend on the values.
  ///@param edgeFlags A bitfield indicating which edges, if any, were touched by this
  /// MotionEvent.
  ///@param source The source of this event.
  ///@param flags The motion event flags.
  static MotionEvent obtain(
          int downTime,
          int eventTime,
          int action,
          int pointerCount,
          jni.JniObject pointerProperties,
          jni.JniObject pointerCoords,
          int metaState,
          int buttonState,
          double xPrecision,
          double yPrecision,
          int deviceId,
          int edgeFlags,
          int source,
          int flags) =>
      MotionEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_obtain, jni.JniType.objectType, [
        downTime,
        eventTime,
        action,
        pointerCount,
        pointerProperties.reference,
        pointerCoords.reference,
        metaState,
        buttonState,
        xPrecision,
        yPrecision,
        deviceId,
        edgeFlags,
        source,
        flags
      ]).object);

  static final _id_obtain1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "obtain",
      "(JJII[I[Landroid/view/MotionEvent\$PointerCoords;IFFIIII)Landroid/view/MotionEvent;");

  /// from: static public android.view.MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, int[] pointerIds, android.view.MotionEvent.PointerCoords[] pointerCoords, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new MotionEvent, filling in all of the basic values that
  /// define the motion.
  ///@param downTime The time (in ms) when the user originally pressed down to start
  /// a stream of position events.  This must be obtained from SystemClock\#uptimeMillis().
  ///@param eventTime The the time (in ms) when this specific event was generated.  This
  /// must be obtained from SystemClock\#uptimeMillis().
  ///@param action The kind of action being performed, such as \#ACTION_DOWN.
  ///@param pointerCount The number of pointers that will be in this event.
  ///@param pointerIds An array of _pointerCount_ values providing
  /// an identifier for each pointer.
  ///@param pointerCoords An array of _pointerCount_ values providing
  /// a PointerCoords coordinate object for each pointer.
  ///@param metaState The state of any meta / modifier keys that were in effect when
  /// the event was generated.
  ///@param xPrecision The precision of the X coordinate being reported.
  ///@param yPrecision The precision of the Y coordinate being reported.
  ///@param deviceId The id for the device that this event came from.  An id of
  /// zero indicates that the event didn't come from a physical device; other
  /// numbers are arbitrary and you shouldn't depend on the values.
  ///@param edgeFlags A bitfield indicating which edges, if any, were touched by this
  /// MotionEvent.
  ///@param source The source of this event.
  ///@param flags The motion event flags.
  ///@deprecated Use \#obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int)
  /// instead.
  static MotionEvent obtain1(
          int downTime,
          int eventTime,
          int action,
          int pointerCount,
          jni.JniObject pointerIds,
          jni.JniObject pointerCoords,
          int metaState,
          double xPrecision,
          double yPrecision,
          int deviceId,
          int edgeFlags,
          int source,
          int flags) =>
      MotionEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_obtain1, jni.JniType.objectType, [
        downTime,
        eventTime,
        action,
        pointerCount,
        pointerIds.reference,
        pointerCoords.reference,
        metaState,
        xPrecision,
        yPrecision,
        deviceId,
        edgeFlags,
        source,
        flags
      ]).object);

  static final _id_obtain2 = jniAccessors.getStaticMethodIDOf(
      _classRef, "obtain", "(JJIFFFFIFFII)Landroid/view/MotionEvent;");

  /// from: static public android.view.MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new MotionEvent, filling in all of the basic values that
  /// define the motion.
  ///@param downTime The time (in ms) when the user originally pressed down to start
  /// a stream of position events.  This must be obtained from SystemClock\#uptimeMillis().
  ///@param eventTime The the time (in ms) when this specific event was generated.  This
  /// must be obtained from SystemClock\#uptimeMillis().
  ///@param action The kind of action being performed, such as \#ACTION_DOWN.
  ///@param x The X coordinate of this event.
  ///@param y The Y coordinate of this event.
  ///@param pressure The current pressure of this event.  The pressure generally
  /// ranges from 0 (no pressure at all) to 1 (normal pressure), however
  /// values higher than 1 may be generated depending on the calibration of
  /// the input device.
  ///@param size A scaled value of the approximate size of the area being pressed when
  /// touched with the finger. The actual value in pixels corresponding to the finger
  /// touch is normalized with a device specific range of values
  /// and scaled to a value between 0 and 1.
  ///@param metaState The state of any meta / modifier keys that were in effect when
  /// the event was generated.
  ///@param xPrecision The precision of the X coordinate being reported.
  ///@param yPrecision The precision of the Y coordinate being reported.
  ///@param deviceId The id for the device that this event came from.  An id of
  /// zero indicates that the event didn't come from a physical device; other
  /// numbers are arbitrary and you shouldn't depend on the values.
  ///@param edgeFlags A bitfield indicating which edges, if any, were touched by this
  /// MotionEvent.
  static MotionEvent obtain2(
          int downTime,
          int eventTime,
          int action,
          double x,
          double y,
          double pressure,
          double size,
          int metaState,
          double xPrecision,
          double yPrecision,
          int deviceId,
          int edgeFlags) =>
      MotionEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_obtain2, jni.JniType.objectType, [
        downTime,
        eventTime,
        action,
        x,
        y,
        pressure,
        size,
        metaState,
        xPrecision,
        yPrecision,
        deviceId,
        edgeFlags
      ]).object);

  static final _id_obtain3 = jniAccessors.getStaticMethodIDOf(
      _classRef, "obtain", "(JJIIFFFFIFFII)Landroid/view/MotionEvent;");

  /// from: static public android.view.MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new MotionEvent, filling in all of the basic values that
  /// define the motion.
  ///@param downTime The time (in ms) when the user originally pressed down to start
  /// a stream of position events.  This must be obtained from SystemClock\#uptimeMillis().
  ///@param eventTime The the time (in ms) when this specific event was generated.  This
  /// must be obtained from SystemClock\#uptimeMillis().
  ///@param action The kind of action being performed, such as \#ACTION_DOWN.
  ///@param pointerCount The number of pointers that are active in this event.
  ///@param x The X coordinate of this event.
  ///@param y The Y coordinate of this event.
  ///@param pressure The current pressure of this event.  The pressure generally
  /// ranges from 0 (no pressure at all) to 1 (normal pressure), however
  /// values higher than 1 may be generated depending on the calibration of
  /// the input device.
  ///@param size A scaled value of the approximate size of the area being pressed when
  /// touched with the finger. The actual value in pixels corresponding to the finger
  /// touch is normalized with a device specific range of values
  /// and scaled to a value between 0 and 1.
  ///@param metaState The state of any meta / modifier keys that were in effect when
  /// the event was generated.
  ///@param xPrecision The precision of the X coordinate being reported.
  ///@param yPrecision The precision of the Y coordinate being reported.
  ///@param deviceId The id for the device that this event came from.  An id of
  /// zero indicates that the event didn't come from a physical device; other
  /// numbers are arbitrary and you shouldn't depend on the values.
  ///@param edgeFlags A bitfield indicating which edges, if any, were touched by this
  /// MotionEvent.
  ///@deprecated Use \#obtain(long, long, int, float, float, float, float, int, float, float, int, int)
  /// instead.
  static MotionEvent obtain3(
          int downTime,
          int eventTime,
          int action,
          int pointerCount,
          double x,
          double y,
          double pressure,
          double size,
          int metaState,
          double xPrecision,
          double yPrecision,
          int deviceId,
          int edgeFlags) =>
      MotionEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_obtain3, jni.JniType.objectType, [
        downTime,
        eventTime,
        action,
        pointerCount,
        x,
        y,
        pressure,
        size,
        metaState,
        xPrecision,
        yPrecision,
        deviceId,
        edgeFlags
      ]).object);

  static final _id_obtain4 = jniAccessors.getStaticMethodIDOf(
      _classRef, "obtain", "(JJIFFI)Landroid/view/MotionEvent;");

  /// from: static public android.view.MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, int metaState)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new MotionEvent, filling in a subset of the basic motion
  /// values.  Those not specified here are: device id (always 0), pressure
  /// and size (always 1), x and y precision (always 1), and edgeFlags (always 0).
  ///@param downTime The time (in ms) when the user originally pressed down to start
  /// a stream of position events.  This must be obtained from SystemClock\#uptimeMillis().
  ///@param eventTime The the time (in ms) when this specific event was generated.  This
  /// must be obtained from SystemClock\#uptimeMillis().
  ///@param action The kind of action being performed, such as \#ACTION_DOWN.
  ///@param x The X coordinate of this event.
  ///@param y The Y coordinate of this event.
  ///@param metaState The state of any meta / modifier keys that were in effect when
  /// the event was generated.
  static MotionEvent obtain4(int downTime, int eventTime, int action, double x,
          double y, int metaState) =>
      MotionEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_obtain4,
          jni.JniType.objectType,
          [downTime, eventTime, action, x, y, metaState]).object);

  static final _id_obtain5 = jniAccessors.getStaticMethodIDOf(_classRef,
      "obtain", "(Landroid/view/MotionEvent;)Landroid/view/MotionEvent;");

  /// from: static public android.view.MotionEvent obtain(android.view.MotionEvent other)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new MotionEvent, copying from an existing one.
  static MotionEvent obtain5(MotionEvent other) =>
      MotionEvent.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_obtain5, jni.JniType.objectType, [other.reference]).object);

  static final _id_obtainNoHistory = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "obtainNoHistory",
      "(Landroid/view/MotionEvent;)Landroid/view/MotionEvent;");

  /// from: static public android.view.MotionEvent obtainNoHistory(android.view.MotionEvent other)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new MotionEvent, copying from an existing one, but not including
  /// any historical point information.
  static MotionEvent obtainNoHistory(MotionEvent other) =>
      MotionEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_obtainNoHistory,
          jni.JniType.objectType,
          [other.reference]).object);

  static final _id_recycle =
      jniAccessors.getMethodIDOf(_classRef, "recycle", "()V");

  /// from: public void recycle()
  ///
  /// Recycle the MotionEvent, to be re-used by a later caller.  After calling
  /// this function you must not ever touch the event again.
  void recycle() => jniAccessors.callMethodWithArgs(
      reference, _id_recycle, jni.JniType.voidType, []).check();

  static final _id_getDeviceId =
      jniAccessors.getMethodIDOf(_classRef, "getDeviceId", "()I");

  /// from: public int getDeviceId()
  ///
  /// {@inheritDoc}
  int getDeviceId() => jniAccessors.callMethodWithArgs(
      reference, _id_getDeviceId, jni.JniType.intType, []).integer;

  static final _id_getSource =
      jniAccessors.getMethodIDOf(_classRef, "getSource", "()I");

  /// from: public int getSource()
  ///
  /// {@inheritDoc}
  int getSource() => jniAccessors.callMethodWithArgs(
      reference, _id_getSource, jni.JniType.intType, []).integer;

  static final _id_setSource =
      jniAccessors.getMethodIDOf(_classRef, "setSource", "(I)V");

  /// from: public void setSource(int source)
  ///
  /// {@inheritDoc}
  void setSource(int source) => jniAccessors.callMethodWithArgs(
      reference, _id_setSource, jni.JniType.voidType, [source]).check();

  static final _id_getAction =
      jniAccessors.getMethodIDOf(_classRef, "getAction", "()I");

  /// from: public int getAction()
  ///
  /// Return the kind of action being performed.
  /// Consider using \#getActionMasked and \#getActionIndex to retrieve
  /// the separate masked action and pointer index.
  ///@return The action, such as \#ACTION_DOWN or
  /// the combination of \#ACTION_POINTER_DOWN with a shifted pointer index.
  int getAction() => jniAccessors.callMethodWithArgs(
      reference, _id_getAction, jni.JniType.intType, []).integer;

  static final _id_getActionMasked =
      jniAccessors.getMethodIDOf(_classRef, "getActionMasked", "()I");

  /// from: public int getActionMasked()
  ///
  /// Return the masked action being performed, without pointer index information.
  /// Use \#getActionIndex to return the index associated with pointer actions.
  ///@return The action, such as \#ACTION_DOWN or \#ACTION_POINTER_DOWN.
  int getActionMasked() => jniAccessors.callMethodWithArgs(
      reference, _id_getActionMasked, jni.JniType.intType, []).integer;

  static final _id_getActionIndex =
      jniAccessors.getMethodIDOf(_classRef, "getActionIndex", "()I");

  /// from: public int getActionIndex()
  ///
  /// For \#ACTION_POINTER_DOWN or \#ACTION_POINTER_UP
  /// as returned by \#getActionMasked, this returns the associated
  /// pointer index.
  /// The index may be used with \#getPointerId(int),
  /// \#getX(int), \#getY(int), \#getPressure(int),
  /// and \#getSize(int) to get information about the pointer that has
  /// gone down or up.
  ///@return The index associated with the action.
  int getActionIndex() => jniAccessors.callMethodWithArgs(
      reference, _id_getActionIndex, jni.JniType.intType, []).integer;

  static final _id_getFlags =
      jniAccessors.getMethodIDOf(_classRef, "getFlags", "()I");

  /// from: public int getFlags()
  ///
  /// Gets the motion event flags.
  ///@see \#FLAG_WINDOW_IS_OBSCURED
  int getFlags() => jniAccessors.callMethodWithArgs(
      reference, _id_getFlags, jni.JniType.intType, []).integer;

  static final _id_getDownTime =
      jniAccessors.getMethodIDOf(_classRef, "getDownTime", "()J");

  /// from: public long getDownTime()
  ///
  /// Returns the time (in ms) when the user originally pressed down to start
  /// a stream of position events.
  int getDownTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getDownTime, jni.JniType.longType, []).long;

  static final _id_getEventTime =
      jniAccessors.getMethodIDOf(_classRef, "getEventTime", "()J");

  /// from: public long getEventTime()
  ///
  /// Retrieve the time this event occurred,
  /// in the android.os.SystemClock\#uptimeMillis time base.
  ///@return Returns the time this event occurred,
  /// in the android.os.SystemClock\#uptimeMillis time base.
  int getEventTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getEventTime, jni.JniType.longType, []).long;

  static final _id_getX = jniAccessors.getMethodIDOf(_classRef, "getX", "()F");

  /// from: public float getX()
  ///
  /// \#getX(int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@see \#AXIS_X
  double getX() => jniAccessors
      .callMethodWithArgs(reference, _id_getX, jni.JniType.floatType, []).float;

  static final _id_getY = jniAccessors.getMethodIDOf(_classRef, "getY", "()F");

  /// from: public float getY()
  ///
  /// \#getY(int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@see \#AXIS_Y
  double getY() => jniAccessors
      .callMethodWithArgs(reference, _id_getY, jni.JniType.floatType, []).float;

  static final _id_getPressure =
      jniAccessors.getMethodIDOf(_classRef, "getPressure", "()F");

  /// from: public float getPressure()
  ///
  /// \#getPressure(int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@see \#AXIS_PRESSURE
  double getPressure() => jniAccessors.callMethodWithArgs(
      reference, _id_getPressure, jni.JniType.floatType, []).float;

  static final _id_getSize =
      jniAccessors.getMethodIDOf(_classRef, "getSize", "()F");

  /// from: public float getSize()
  ///
  /// \#getSize(int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@see \#AXIS_SIZE
  double getSize() => jniAccessors.callMethodWithArgs(
      reference, _id_getSize, jni.JniType.floatType, []).float;

  static final _id_getTouchMajor =
      jniAccessors.getMethodIDOf(_classRef, "getTouchMajor", "()F");

  /// from: public float getTouchMajor()
  ///
  /// \#getTouchMajor(int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@see \#AXIS_TOUCH_MAJOR
  double getTouchMajor() => jniAccessors.callMethodWithArgs(
      reference, _id_getTouchMajor, jni.JniType.floatType, []).float;

  static final _id_getTouchMinor =
      jniAccessors.getMethodIDOf(_classRef, "getTouchMinor", "()F");

  /// from: public float getTouchMinor()
  ///
  /// \#getTouchMinor(int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@see \#AXIS_TOUCH_MINOR
  double getTouchMinor() => jniAccessors.callMethodWithArgs(
      reference, _id_getTouchMinor, jni.JniType.floatType, []).float;

  static final _id_getToolMajor =
      jniAccessors.getMethodIDOf(_classRef, "getToolMajor", "()F");

  /// from: public float getToolMajor()
  ///
  /// \#getToolMajor(int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@see \#AXIS_TOOL_MAJOR
  double getToolMajor() => jniAccessors.callMethodWithArgs(
      reference, _id_getToolMajor, jni.JniType.floatType, []).float;

  static final _id_getToolMinor =
      jniAccessors.getMethodIDOf(_classRef, "getToolMinor", "()F");

  /// from: public float getToolMinor()
  ///
  /// \#getToolMinor(int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@see \#AXIS_TOOL_MINOR
  double getToolMinor() => jniAccessors.callMethodWithArgs(
      reference, _id_getToolMinor, jni.JniType.floatType, []).float;

  static final _id_getOrientation =
      jniAccessors.getMethodIDOf(_classRef, "getOrientation", "()F");

  /// from: public float getOrientation()
  ///
  /// \#getOrientation(int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@see \#AXIS_ORIENTATION
  double getOrientation() => jniAccessors.callMethodWithArgs(
      reference, _id_getOrientation, jni.JniType.floatType, []).float;

  static final _id_getAxisValue =
      jniAccessors.getMethodIDOf(_classRef, "getAxisValue", "(I)F");

  /// from: public float getAxisValue(int axis)
  ///
  /// \#getAxisValue(int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@param axis The axis identifier for the axis value to retrieve.
  ///@see \#AXIS_X
  ///@see \#AXIS_Y
  double getAxisValue(int axis) => jniAccessors.callMethodWithArgs(
      reference, _id_getAxisValue, jni.JniType.floatType, [axis]).float;

  static final _id_getPointerCount =
      jniAccessors.getMethodIDOf(_classRef, "getPointerCount", "()I");

  /// from: public int getPointerCount()
  ///
  /// The number of pointers of data contained in this event.  Always
  /// >= 1.
  int getPointerCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getPointerCount, jni.JniType.intType, []).integer;

  static final _id_getPointerId =
      jniAccessors.getMethodIDOf(_classRef, "getPointerId", "(I)I");

  /// from: public int getPointerId(int pointerIndex)
  ///
  /// Return the pointer identifier associated with a particular pointer
  /// data index in this event.  The identifier tells you the actual pointer
  /// number associated with the data, accounting for individual pointers
  /// going up and down since the start of the current gesture.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  int getPointerId(int pointerIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_getPointerId, jni.JniType.intType, [pointerIndex]).integer;

  static final _id_getToolType =
      jniAccessors.getMethodIDOf(_classRef, "getToolType", "(I)I");

  /// from: public int getToolType(int pointerIndex)
  ///
  /// Gets the tool type of a pointer for the given pointer index.
  /// The tool type indicates the type of tool used to make contact such
  /// as a finger or stylus, if known.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@return The tool type of the pointer.
  ///@see \#TOOL_TYPE_UNKNOWN
  ///@see \#TOOL_TYPE_FINGER
  ///@see \#TOOL_TYPE_STYLUS
  ///@see \#TOOL_TYPE_MOUSE
  int getToolType(int pointerIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_getToolType, jni.JniType.intType, [pointerIndex]).integer;

  static final _id_findPointerIndex =
      jniAccessors.getMethodIDOf(_classRef, "findPointerIndex", "(I)I");

  /// from: public int findPointerIndex(int pointerId)
  ///
  /// Given a pointer identifier, find the index of its data in the event.
  ///@param pointerId The identifier of the pointer to be found.
  ///@return Returns either the index of the pointer (for use with
  /// \#getX(int) et al.), or -1 if there is no data available for
  /// that pointer identifier.
  int findPointerIndex(int pointerId) => jniAccessors.callMethodWithArgs(
      reference,
      _id_findPointerIndex,
      jni.JniType.intType,
      [pointerId]).integer;

  static final _id_getX1 =
      jniAccessors.getMethodIDOf(_classRef, "getX", "(I)F");

  /// from: public float getX(int pointerIndex)
  ///
  /// Returns the X coordinate of this event for the given pointer
  /// _index_ (use \#getPointerId(int) to find the pointer
  /// identifier for this index).
  /// Whole numbers are pixels; the
  /// value may have a fraction for input devices that are sub-pixel precise.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@see \#AXIS_X
  double getX1(int pointerIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_getX1, jni.JniType.floatType, [pointerIndex]).float;

  static final _id_getY1 =
      jniAccessors.getMethodIDOf(_classRef, "getY", "(I)F");

  /// from: public float getY(int pointerIndex)
  ///
  /// Returns the Y coordinate of this event for the given pointer
  /// _index_ (use \#getPointerId(int) to find the pointer
  /// identifier for this index).
  /// Whole numbers are pixels; the
  /// value may have a fraction for input devices that are sub-pixel precise.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@see \#AXIS_Y
  double getY1(int pointerIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_getY1, jni.JniType.floatType, [pointerIndex]).float;

  static final _id_getPressure1 =
      jniAccessors.getMethodIDOf(_classRef, "getPressure", "(I)F");

  /// from: public float getPressure(int pointerIndex)
  ///
  /// Returns the current pressure of this event for the given pointer
  /// _index_ (use \#getPointerId(int) to find the pointer
  /// identifier for this index).
  /// The pressure generally
  /// ranges from 0 (no pressure at all) to 1 (normal pressure), however
  /// values higher than 1 may be generated depending on the calibration of
  /// the input device.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@see \#AXIS_PRESSURE
  double getPressure1(int pointerIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_getPressure1, jni.JniType.floatType, [pointerIndex]).float;

  static final _id_getSize1 =
      jniAccessors.getMethodIDOf(_classRef, "getSize", "(I)F");

  /// from: public float getSize(int pointerIndex)
  ///
  /// Returns a scaled value of the approximate size for the given pointer
  /// _index_ (use \#getPointerId(int) to find the pointer
  /// identifier for this index).
  /// This represents some approximation of the area of the screen being
  /// pressed; the actual value in pixels corresponding to the
  /// touch is normalized with the device specific range of values
  /// and scaled to a value between 0 and 1. The value of size can be used to
  /// determine fat touch events.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@see \#AXIS_SIZE
  double getSize1(int pointerIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_getSize1, jni.JniType.floatType, [pointerIndex]).float;

  static final _id_getTouchMajor1 =
      jniAccessors.getMethodIDOf(_classRef, "getTouchMajor", "(I)F");

  /// from: public float getTouchMajor(int pointerIndex)
  ///
  /// Returns the length of the major axis of an ellipse that describes the touch
  /// area at the point of contact for the given pointer
  /// _index_ (use \#getPointerId(int) to find the pointer
  /// identifier for this index).
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@see \#AXIS_TOUCH_MAJOR
  double getTouchMajor1(int pointerIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getTouchMajor1,
      jni.JniType.floatType,
      [pointerIndex]).float;

  static final _id_getTouchMinor1 =
      jniAccessors.getMethodIDOf(_classRef, "getTouchMinor", "(I)F");

  /// from: public float getTouchMinor(int pointerIndex)
  ///
  /// Returns the length of the minor axis of an ellipse that describes the touch
  /// area at the point of contact for the given pointer
  /// _index_ (use \#getPointerId(int) to find the pointer
  /// identifier for this index).
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@see \#AXIS_TOUCH_MINOR
  double getTouchMinor1(int pointerIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getTouchMinor1,
      jni.JniType.floatType,
      [pointerIndex]).float;

  static final _id_getToolMajor1 =
      jniAccessors.getMethodIDOf(_classRef, "getToolMajor", "(I)F");

  /// from: public float getToolMajor(int pointerIndex)
  ///
  /// Returns the length of the major axis of an ellipse that describes the size of
  /// the approaching tool for the given pointer
  /// _index_ (use \#getPointerId(int) to find the pointer
  /// identifier for this index).
  /// The tool area represents the estimated size of the finger or pen that is
  /// touching the device independent of its actual touch area at the point of contact.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@see \#AXIS_TOOL_MAJOR
  double getToolMajor1(int pointerIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getToolMajor1,
      jni.JniType.floatType,
      [pointerIndex]).float;

  static final _id_getToolMinor1 =
      jniAccessors.getMethodIDOf(_classRef, "getToolMinor", "(I)F");

  /// from: public float getToolMinor(int pointerIndex)
  ///
  /// Returns the length of the minor axis of an ellipse that describes the size of
  /// the approaching tool for the given pointer
  /// _index_ (use \#getPointerId(int) to find the pointer
  /// identifier for this index).
  /// The tool area represents the estimated size of the finger or pen that is
  /// touching the device independent of its actual touch area at the point of contact.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@see \#AXIS_TOOL_MINOR
  double getToolMinor1(int pointerIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getToolMinor1,
      jni.JniType.floatType,
      [pointerIndex]).float;

  static final _id_getOrientation1 =
      jniAccessors.getMethodIDOf(_classRef, "getOrientation", "(I)F");

  /// from: public float getOrientation(int pointerIndex)
  ///
  /// Returns the orientation of the touch area and tool area in radians clockwise from vertical
  /// for the given pointer _index_ (use \#getPointerId(int) to find the pointer
  /// identifier for this index).
  /// An angle of 0 radians indicates that the major axis of contact is oriented
  /// upwards, is perfectly circular or is of unknown orientation.  A positive angle
  /// indicates that the major axis of contact is oriented to the right.  A negative angle
  /// indicates that the major axis of contact is oriented to the left.
  /// The full range is from -PI/2 radians (finger pointing fully left) to PI/2 radians
  /// (finger pointing fully right).
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@see \#AXIS_ORIENTATION
  double getOrientation1(int pointerIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getOrientation1,
      jni.JniType.floatType,
      [pointerIndex]).float;

  static final _id_getAxisValue1 =
      jniAccessors.getMethodIDOf(_classRef, "getAxisValue", "(II)F");

  /// from: public float getAxisValue(int axis, int pointerIndex)
  ///
  /// Returns the value of the requested axis for the given pointer _index_
  /// (use \#getPointerId(int) to find the pointer identifier for this index).
  ///@param axis The axis identifier for the axis value to retrieve.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@return The value of the axis, or 0 if the axis is not available.
  ///@see \#AXIS_X
  ///@see \#AXIS_Y
  double getAxisValue1(int axis, int pointerIndex) =>
      jniAccessors.callMethodWithArgs(reference, _id_getAxisValue1,
          jni.JniType.floatType, [axis, pointerIndex]).float;

  static final _id_getPointerCoords = jniAccessors.getMethodIDOf(_classRef,
      "getPointerCoords", "(ILandroid/view/MotionEvent\$PointerCoords;)V");

  /// from: public void getPointerCoords(int pointerIndex, android.view.MotionEvent.PointerCoords outPointerCoords)
  ///
  /// Populates a PointerCoords object with pointer coordinate data for
  /// the specified pointer index.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param outPointerCoords The pointer coordinate object to populate.
  ///@see PointerCoords
  void getPointerCoords(
          int pointerIndex, MotionEvent_PointerCoords outPointerCoords) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getPointerCoords,
          jni.JniType.voidType,
          [pointerIndex, outPointerCoords.reference]).check();

  static final _id_getPointerProperties = jniAccessors.getMethodIDOf(
      _classRef,
      "getPointerProperties",
      "(ILandroid/view/MotionEvent\$PointerProperties;)V");

  /// from: public void getPointerProperties(int pointerIndex, android.view.MotionEvent.PointerProperties outPointerProperties)
  ///
  /// Populates a PointerProperties object with pointer properties for
  /// the specified pointer index.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param outPointerProperties The pointer properties object to populate.
  ///@see PointerProperties
  void getPointerProperties(int pointerIndex,
          MotionEvent_PointerProperties outPointerProperties) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getPointerProperties,
          jni.JniType.voidType,
          [pointerIndex, outPointerProperties.reference]).check();

  static final _id_getMetaState =
      jniAccessors.getMethodIDOf(_classRef, "getMetaState", "()I");

  /// from: public int getMetaState()
  ///
  /// Returns the state of any meta / modifier keys that were in effect when
  /// the event was generated.  This is the same values as those
  /// returned by KeyEvent\#getMetaState() KeyEvent.getMetaState.
  ///@return an integer in which each bit set to 1 represents a pressed
  ///         meta key
  ///@see KeyEvent\#getMetaState()
  int getMetaState() => jniAccessors.callMethodWithArgs(
      reference, _id_getMetaState, jni.JniType.intType, []).integer;

  static final _id_getButtonState =
      jniAccessors.getMethodIDOf(_classRef, "getButtonState", "()I");

  /// from: public int getButtonState()
  ///
  /// Gets the state of all buttons that are pressed such as a mouse or stylus button.
  ///@return The button state.
  ///@see \#BUTTON_PRIMARY
  ///@see \#BUTTON_SECONDARY
  ///@see \#BUTTON_TERTIARY
  ///@see \#BUTTON_FORWARD
  ///@see \#BUTTON_BACK
  ///@see \#BUTTON_STYLUS_PRIMARY
  ///@see \#BUTTON_STYLUS_SECONDARY
  int getButtonState() => jniAccessors.callMethodWithArgs(
      reference, _id_getButtonState, jni.JniType.intType, []).integer;

  static final _id_getActionButton =
      jniAccessors.getMethodIDOf(_classRef, "getActionButton", "()I");

  /// from: public int getActionButton()
  ///
  /// Gets which button has been modified during a press or release action.
  ///
  /// For actions other than \#ACTION_BUTTON_PRESS and \#ACTION_BUTTON_RELEASE
  /// the returned value is undefined.
  ///@see \#getButtonState()
  int getActionButton() => jniAccessors.callMethodWithArgs(
      reference, _id_getActionButton, jni.JniType.intType, []).integer;

  static final _id_getRawX =
      jniAccessors.getMethodIDOf(_classRef, "getRawX", "()F");

  /// from: public float getRawX()
  ///
  /// Returns the original raw X coordinate of this event.  For touch
  /// events on the screen, this is the original location of the event
  /// on the screen, before it had been adjusted for the containing window
  /// and views.
  ///@see \#getX(int)
  ///@see \#AXIS_X
  double getRawX() => jniAccessors.callMethodWithArgs(
      reference, _id_getRawX, jni.JniType.floatType, []).float;

  static final _id_getRawY =
      jniAccessors.getMethodIDOf(_classRef, "getRawY", "()F");

  /// from: public float getRawY()
  ///
  /// Returns the original raw Y coordinate of this event.  For touch
  /// events on the screen, this is the original location of the event
  /// on the screen, before it had been adjusted for the containing window
  /// and views.
  ///@see \#getY(int)
  ///@see \#AXIS_Y
  double getRawY() => jniAccessors.callMethodWithArgs(
      reference, _id_getRawY, jni.JniType.floatType, []).float;

  static final _id_getXPrecision =
      jniAccessors.getMethodIDOf(_classRef, "getXPrecision", "()F");

  /// from: public float getXPrecision()
  ///
  /// Return the precision of the X coordinates being reported.  You can
  /// multiply this number with \#getX to find the actual hardware
  /// value of the X coordinate.
  ///@return Returns the precision of X coordinates being reported.
  ///@see \#AXIS_X
  double getXPrecision() => jniAccessors.callMethodWithArgs(
      reference, _id_getXPrecision, jni.JniType.floatType, []).float;

  static final _id_getYPrecision =
      jniAccessors.getMethodIDOf(_classRef, "getYPrecision", "()F");

  /// from: public float getYPrecision()
  ///
  /// Return the precision of the Y coordinates being reported.  You can
  /// multiply this number with \#getY to find the actual hardware
  /// value of the Y coordinate.
  ///@return Returns the precision of Y coordinates being reported.
  ///@see \#AXIS_Y
  double getYPrecision() => jniAccessors.callMethodWithArgs(
      reference, _id_getYPrecision, jni.JniType.floatType, []).float;

  static final _id_getHistorySize =
      jniAccessors.getMethodIDOf(_classRef, "getHistorySize", "()I");

  /// from: public int getHistorySize()
  ///
  /// Returns the number of historical points in this event.  These are
  /// movements that have occurred between this event and the previous event.
  /// This only applies to ACTION_MOVE events -- all other actions will have
  /// a size of 0.
  ///@return Returns the number of historical points in the event.
  int getHistorySize() => jniAccessors.callMethodWithArgs(
      reference, _id_getHistorySize, jni.JniType.intType, []).integer;

  static final _id_getHistoricalEventTime =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalEventTime", "(I)J");

  /// from: public long getHistoricalEventTime(int pos)
  ///
  /// Returns the time that a historical movement occurred between this event
  /// and the previous event, in the android.os.SystemClock\#uptimeMillis time base.
  ///
  /// This only applies to ACTION_MOVE events.
  ///
  ///
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@return Returns the time that a historical movement occurred between this
  /// event and the previous event,
  /// in the android.os.SystemClock\#uptimeMillis time base.
  ///@see \#getHistorySize
  ///@see \#getEventTime
  int getHistoricalEventTime(int pos) => jniAccessors.callMethodWithArgs(
      reference, _id_getHistoricalEventTime, jni.JniType.longType, [pos]).long;

  static final _id_getHistoricalX =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalX", "(I)F");

  /// from: public float getHistoricalX(int pos)
  ///
  /// \#getHistoricalX(int, int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getX()
  ///@see \#AXIS_X
  double getHistoricalX(int pos) => jniAccessors.callMethodWithArgs(
      reference, _id_getHistoricalX, jni.JniType.floatType, [pos]).float;

  static final _id_getHistoricalY =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalY", "(I)F");

  /// from: public float getHistoricalY(int pos)
  ///
  /// \#getHistoricalY(int, int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getY()
  ///@see \#AXIS_Y
  double getHistoricalY(int pos) => jniAccessors.callMethodWithArgs(
      reference, _id_getHistoricalY, jni.JniType.floatType, [pos]).float;

  static final _id_getHistoricalPressure =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalPressure", "(I)F");

  /// from: public float getHistoricalPressure(int pos)
  ///
  /// \#getHistoricalPressure(int, int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getPressure()
  ///@see \#AXIS_PRESSURE
  double getHistoricalPressure(int pos) => jniAccessors.callMethodWithArgs(
      reference, _id_getHistoricalPressure, jni.JniType.floatType, [pos]).float;

  static final _id_getHistoricalSize =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalSize", "(I)F");

  /// from: public float getHistoricalSize(int pos)
  ///
  /// \#getHistoricalSize(int, int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getSize()
  ///@see \#AXIS_SIZE
  double getHistoricalSize(int pos) => jniAccessors.callMethodWithArgs(
      reference, _id_getHistoricalSize, jni.JniType.floatType, [pos]).float;

  static final _id_getHistoricalTouchMajor =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalTouchMajor", "(I)F");

  /// from: public float getHistoricalTouchMajor(int pos)
  ///
  /// \#getHistoricalTouchMajor(int, int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getTouchMajor()
  ///@see \#AXIS_TOUCH_MAJOR
  double getHistoricalTouchMajor(int pos) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getHistoricalTouchMajor,
      jni.JniType.floatType,
      [pos]).float;

  static final _id_getHistoricalTouchMinor =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalTouchMinor", "(I)F");

  /// from: public float getHistoricalTouchMinor(int pos)
  ///
  /// \#getHistoricalTouchMinor(int, int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getTouchMinor()
  ///@see \#AXIS_TOUCH_MINOR
  double getHistoricalTouchMinor(int pos) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getHistoricalTouchMinor,
      jni.JniType.floatType,
      [pos]).float;

  static final _id_getHistoricalToolMajor =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalToolMajor", "(I)F");

  /// from: public float getHistoricalToolMajor(int pos)
  ///
  /// \#getHistoricalToolMajor(int, int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getToolMajor()
  ///@see \#AXIS_TOOL_MAJOR
  double getHistoricalToolMajor(int pos) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getHistoricalToolMajor,
      jni.JniType.floatType,
      [pos]).float;

  static final _id_getHistoricalToolMinor =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalToolMinor", "(I)F");

  /// from: public float getHistoricalToolMinor(int pos)
  ///
  /// \#getHistoricalToolMinor(int, int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getToolMinor()
  ///@see \#AXIS_TOOL_MINOR
  double getHistoricalToolMinor(int pos) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getHistoricalToolMinor,
      jni.JniType.floatType,
      [pos]).float;

  static final _id_getHistoricalOrientation =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalOrientation", "(I)F");

  /// from: public float getHistoricalOrientation(int pos)
  ///
  /// \#getHistoricalOrientation(int, int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getOrientation()
  ///@see \#AXIS_ORIENTATION
  double getHistoricalOrientation(int pos) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getHistoricalOrientation,
      jni.JniType.floatType,
      [pos]).float;

  static final _id_getHistoricalAxisValue =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalAxisValue", "(II)F");

  /// from: public float getHistoricalAxisValue(int axis, int pos)
  ///
  /// \#getHistoricalAxisValue(int, int, int) for the first pointer index (may be an
  /// arbitrary pointer identifier).
  ///@param axis The axis identifier for the axis value to retrieve.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getAxisValue(int)
  ///@see \#AXIS_X
  ///@see \#AXIS_Y
  double getHistoricalAxisValue(int axis, int pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_getHistoricalAxisValue,
          jni.JniType.floatType, [axis, pos]).float;

  static final _id_getHistoricalX1 =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalX", "(II)F");

  /// from: public float getHistoricalX(int pointerIndex, int pos)
  ///
  /// Returns a historical X coordinate, as per \#getX(int), that
  /// occurred between this event and the previous event for the given pointer.
  /// Only applies to ACTION_MOVE events.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getX(int)
  ///@see \#AXIS_X
  double getHistoricalX1(int pointerIndex, int pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_getHistoricalX1,
          jni.JniType.floatType, [pointerIndex, pos]).float;

  static final _id_getHistoricalY1 =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalY", "(II)F");

  /// from: public float getHistoricalY(int pointerIndex, int pos)
  ///
  /// Returns a historical Y coordinate, as per \#getY(int), that
  /// occurred between this event and the previous event for the given pointer.
  /// Only applies to ACTION_MOVE events.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getY(int)
  ///@see \#AXIS_Y
  double getHistoricalY1(int pointerIndex, int pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_getHistoricalY1,
          jni.JniType.floatType, [pointerIndex, pos]).float;

  static final _id_getHistoricalPressure1 =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalPressure", "(II)F");

  /// from: public float getHistoricalPressure(int pointerIndex, int pos)
  ///
  /// Returns a historical pressure coordinate, as per \#getPressure(int),
  /// that occurred between this event and the previous event for the given
  /// pointer.  Only applies to ACTION_MOVE events.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getPressure(int)
  ///@see \#AXIS_PRESSURE
  double getHistoricalPressure1(int pointerIndex, int pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_getHistoricalPressure1,
          jni.JniType.floatType, [pointerIndex, pos]).float;

  static final _id_getHistoricalSize1 =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalSize", "(II)F");

  /// from: public float getHistoricalSize(int pointerIndex, int pos)
  ///
  /// Returns a historical size coordinate, as per \#getSize(int), that
  /// occurred between this event and the previous event for the given pointer.
  /// Only applies to ACTION_MOVE events.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getSize(int)
  ///@see \#AXIS_SIZE
  double getHistoricalSize1(int pointerIndex, int pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_getHistoricalSize1,
          jni.JniType.floatType, [pointerIndex, pos]).float;

  static final _id_getHistoricalTouchMajor1 =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalTouchMajor", "(II)F");

  /// from: public float getHistoricalTouchMajor(int pointerIndex, int pos)
  ///
  /// Returns a historical touch major axis coordinate, as per \#getTouchMajor(int), that
  /// occurred between this event and the previous event for the given pointer.
  /// Only applies to ACTION_MOVE events.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getTouchMajor(int)
  ///@see \#AXIS_TOUCH_MAJOR
  double getHistoricalTouchMajor1(int pointerIndex, int pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_getHistoricalTouchMajor1,
          jni.JniType.floatType, [pointerIndex, pos]).float;

  static final _id_getHistoricalTouchMinor1 =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalTouchMinor", "(II)F");

  /// from: public float getHistoricalTouchMinor(int pointerIndex, int pos)
  ///
  /// Returns a historical touch minor axis coordinate, as per \#getTouchMinor(int), that
  /// occurred between this event and the previous event for the given pointer.
  /// Only applies to ACTION_MOVE events.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getTouchMinor(int)
  ///@see \#AXIS_TOUCH_MINOR
  double getHistoricalTouchMinor1(int pointerIndex, int pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_getHistoricalTouchMinor1,
          jni.JniType.floatType, [pointerIndex, pos]).float;

  static final _id_getHistoricalToolMajor1 =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalToolMajor", "(II)F");

  /// from: public float getHistoricalToolMajor(int pointerIndex, int pos)
  ///
  /// Returns a historical tool major axis coordinate, as per \#getToolMajor(int), that
  /// occurred between this event and the previous event for the given pointer.
  /// Only applies to ACTION_MOVE events.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getToolMajor(int)
  ///@see \#AXIS_TOOL_MAJOR
  double getHistoricalToolMajor1(int pointerIndex, int pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_getHistoricalToolMajor1,
          jni.JniType.floatType, [pointerIndex, pos]).float;

  static final _id_getHistoricalToolMinor1 =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalToolMinor", "(II)F");

  /// from: public float getHistoricalToolMinor(int pointerIndex, int pos)
  ///
  /// Returns a historical tool minor axis coordinate, as per \#getToolMinor(int), that
  /// occurred between this event and the previous event for the given pointer.
  /// Only applies to ACTION_MOVE events.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getToolMinor(int)
  ///@see \#AXIS_TOOL_MINOR
  double getHistoricalToolMinor1(int pointerIndex, int pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_getHistoricalToolMinor1,
          jni.JniType.floatType, [pointerIndex, pos]).float;

  static final _id_getHistoricalOrientation1 = jniAccessors.getMethodIDOf(
      _classRef, "getHistoricalOrientation", "(II)F");

  /// from: public float getHistoricalOrientation(int pointerIndex, int pos)
  ///
  /// Returns a historical orientation coordinate, as per \#getOrientation(int), that
  /// occurred between this event and the previous event for the given pointer.
  /// Only applies to ACTION_MOVE events.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@see \#getHistorySize
  ///@see \#getOrientation(int)
  ///@see \#AXIS_ORIENTATION
  double getHistoricalOrientation1(int pointerIndex, int pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_getHistoricalOrientation1,
          jni.JniType.floatType, [pointerIndex, pos]).float;

  static final _id_getHistoricalAxisValue1 =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalAxisValue", "(III)F");

  /// from: public float getHistoricalAxisValue(int axis, int pointerIndex, int pos)
  ///
  /// Returns the historical value of the requested axis, as per \#getAxisValue(int, int),
  /// occurred between this event and the previous event for the given pointer.
  /// Only applies to ACTION_MOVE events.
  ///@param axis The axis identifier for the axis value to retrieve.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@return The value of the axis, or 0 if the axis is not available.
  ///@see \#AXIS_X
  ///@see \#AXIS_Y
  double getHistoricalAxisValue1(int axis, int pointerIndex, int pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_getHistoricalAxisValue1,
          jni.JniType.floatType, [axis, pointerIndex, pos]).float;

  static final _id_getHistoricalPointerCoords = jniAccessors.getMethodIDOf(
      _classRef,
      "getHistoricalPointerCoords",
      "(IILandroid/view/MotionEvent\$PointerCoords;)V");

  /// from: public void getHistoricalPointerCoords(int pointerIndex, int pos, android.view.MotionEvent.PointerCoords outPointerCoords)
  ///
  /// Populates a PointerCoords object with historical pointer coordinate data,
  /// as per \#getPointerCoords, that occurred between this event and the previous
  /// event for the given pointer.
  /// Only applies to ACTION_MOVE events.
  ///@param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
  /// (the first pointer that is down) to \#getPointerCount()-1.
  ///@param pos Which historical value to return; must be less than
  /// \#getHistorySize
  ///@param outPointerCoords The pointer coordinate object to populate.
  ///@see \#getHistorySize
  ///@see \#getPointerCoords
  ///@see PointerCoords
  void getHistoricalPointerCoords(int pointerIndex, int pos,
          MotionEvent_PointerCoords outPointerCoords) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getHistoricalPointerCoords,
          jni.JniType.voidType,
          [pointerIndex, pos, outPointerCoords.reference]).check();

  static final _id_getEdgeFlags =
      jniAccessors.getMethodIDOf(_classRef, "getEdgeFlags", "()I");

  /// from: public int getEdgeFlags()
  ///
  /// Returns a bitfield indicating which edges, if any, were touched by this
  /// MotionEvent. For touch events, clients can use this to determine if the
  /// user's finger was touching the edge of the display.
  ///
  /// This property is only set for \#ACTION_DOWN events.
  ///@see \#EDGE_LEFT
  ///@see \#EDGE_TOP
  ///@see \#EDGE_RIGHT
  ///@see \#EDGE_BOTTOM
  int getEdgeFlags() => jniAccessors.callMethodWithArgs(
      reference, _id_getEdgeFlags, jni.JniType.intType, []).integer;

  static final _id_setEdgeFlags =
      jniAccessors.getMethodIDOf(_classRef, "setEdgeFlags", "(I)V");

  /// from: public void setEdgeFlags(int flags)
  ///
  /// Sets the bitfield indicating which edges, if any, were touched by this
  /// MotionEvent.
  ///@see \#getEdgeFlags()
  void setEdgeFlags(int flags) => jniAccessors.callMethodWithArgs(
      reference, _id_setEdgeFlags, jni.JniType.voidType, [flags]).check();

  static final _id_setAction =
      jniAccessors.getMethodIDOf(_classRef, "setAction", "(I)V");

  /// from: public void setAction(int action)
  ///
  /// Sets this event's action.
  void setAction(int action) => jniAccessors.callMethodWithArgs(
      reference, _id_setAction, jni.JniType.voidType, [action]).check();

  static final _id_offsetLocation =
      jniAccessors.getMethodIDOf(_classRef, "offsetLocation", "(FF)V");

  /// from: public void offsetLocation(float deltaX, float deltaY)
  ///
  /// Adjust this event's location.
  ///@param deltaX Amount to add to the current X coordinate of the event.
  ///@param deltaY Amount to add to the current Y coordinate of the event.
  void offsetLocation(double deltaX, double deltaY) =>
      jniAccessors.callMethodWithArgs(reference, _id_offsetLocation,
          jni.JniType.voidType, [deltaX, deltaY]).check();

  static final _id_setLocation =
      jniAccessors.getMethodIDOf(_classRef, "setLocation", "(FF)V");

  /// from: public void setLocation(float x, float y)
  ///
  /// Set this event's location.  Applies \#offsetLocation with a
  /// delta from the current location to the given new location.
  ///@param x New absolute X location.
  ///@param y New absolute Y location.
  void setLocation(double x, double y) => jniAccessors.callMethodWithArgs(
      reference, _id_setLocation, jni.JniType.voidType, [x, y]).check();

  static final _id_transform = jniAccessors.getMethodIDOf(
      _classRef, "transform", "(Landroid/graphics/Matrix;)V");

  /// from: public void transform(android.graphics.Matrix matrix)
  ///
  /// Applies a transformation matrix to all of the points in the event.
  ///@param matrix The transformation matrix to apply.
  void transform(matrix_.Matrix matrix) => jniAccessors.callMethodWithArgs(
      reference,
      _id_transform,
      jni.JniType.voidType,
      [matrix.reference]).check();

  static final _id_addBatch =
      jniAccessors.getMethodIDOf(_classRef, "addBatch", "(JFFFFI)V");

  /// from: public void addBatch(long eventTime, float x, float y, float pressure, float size, int metaState)
  ///
  /// Add a new movement to the batch of movements in this event.  The event's
  /// current location, position and size is updated to the new values.
  /// The current values in the event are added to a list of historical values.
  ///
  /// Only applies to \#ACTION_MOVE or \#ACTION_HOVER_MOVE events.
  ///@param eventTime The time stamp (in ms) for this data.
  ///@param x The new X position.
  ///@param y The new Y position.
  ///@param pressure The new pressure.
  ///@param size The new size.
  ///@param metaState Meta key state.
  void addBatch(int eventTime, double x, double y, double pressure, double size,
          int metaState) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addBatch,
          jni.JniType.voidType,
          [eventTime, x, y, pressure, size, metaState]).check();

  static final _id_addBatch1 = jniAccessors.getMethodIDOf(
      _classRef, "addBatch", "(J[Landroid/view/MotionEvent\$PointerCoords;I)V");

  /// from: public void addBatch(long eventTime, android.view.MotionEvent.PointerCoords[] pointerCoords, int metaState)
  ///
  /// Add a new movement to the batch of movements in this event.  The event's
  /// current location, position and size is updated to the new values.
  /// The current values in the event are added to a list of historical values.
  ///
  /// Only applies to \#ACTION_MOVE or \#ACTION_HOVER_MOVE events.
  ///@param eventTime The time stamp (in ms) for this data.
  ///@param pointerCoords The new pointer coordinates.
  ///@param metaState Meta key state.
  void addBatch1(int eventTime, jni.JniObject pointerCoords, int metaState) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addBatch1,
          jni.JniType.voidType,
          [eventTime, pointerCoords.reference, metaState]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_actionToString = jniAccessors.getStaticMethodIDOf(
      _classRef, "actionToString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String actionToString(int action)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a string that represents the symbolic name of the specified unmasked action
  /// such as "ACTION_DOWN", "ACTION_POINTER_DOWN(3)" or an equivalent numeric constant
  /// such as "35" if unknown.
  ///@param action The unmasked action.
  ///@return The symbolic name of the specified action.
  ///@see \#getAction()
  static jni.JniString actionToString(int action) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_actionToString, jni.JniType.objectType, [action]).object);

  static final _id_axisToString = jniAccessors.getStaticMethodIDOf(
      _classRef, "axisToString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String axisToString(int axis)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a string that represents the symbolic name of the specified axis
  /// such as "AXIS_X" or an equivalent numeric constant such as "42" if unknown.
  ///@param axis The axis.
  ///@return The symbolic name of the specified axis.
  static jni.JniString axisToString(int axis) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_axisToString, jni.JniType.objectType, [axis]).object);

  static final _id_axisFromString = jniAccessors.getStaticMethodIDOf(
      _classRef, "axisFromString", "(Ljava/lang/String;)I");

  /// from: static public int axisFromString(java.lang.String symbolicName)
  ///
  /// Gets an axis by its symbolic name such as "AXIS_X" or an
  /// equivalent numeric constant such as "42".
  ///@param symbolicName The symbolic name of the axis.
  ///@return The axis or -1 if not found.
  ///@see KeyEvent\#keyCodeToString(int)
  static int axisFromString(jni.JniString symbolicName) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_axisFromString,
          jni.JniType.intType, [symbolicName.reference]).integer;

  static final _id_isButtonPressed =
      jniAccessors.getMethodIDOf(_classRef, "isButtonPressed", "(I)Z");

  /// from: public boolean isButtonPressed(int button)
  ///
  /// Checks if a mouse or stylus button (or combination of buttons) is pressed.
  ///@param button Button (or combination of buttons).
  ///@return True if specified buttons are pressed.
  ///@see \#BUTTON_PRIMARY
  ///@see \#BUTTON_SECONDARY
  ///@see \#BUTTON_TERTIARY
  ///@see \#BUTTON_FORWARD
  ///@see \#BUTTON_BACK
  ///@see \#BUTTON_STYLUS_PRIMARY
  ///@see \#BUTTON_STYLUS_SECONDARY
  bool isButtonPressed(int button) => jniAccessors.callMethodWithArgs(reference,
      _id_isButtonPressed, jni.JniType.booleanType, [button]).boolean;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();
}

/// from: android.view.MotionEvent$PointerProperties
///
/// Transfer object for pointer properties.
///
/// Objects of this type can be used to specify the pointer id and tool type
/// when creating new MotionEvent objects and to query pointer properties in bulk.
class MotionEvent_PointerProperties extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/MotionEvent\$PointerProperties");
  MotionEvent_PointerProperties.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_id = jniAccessors.getFieldIDOf(_classRef, "id", "I");

  /// from: public int id
  ///
  /// The pointer id.
  /// Initially set to \#INVALID_POINTER_ID (-1).
  ///@see MotionEvent\#getPointerId(int)
  int get id =>
      jniAccessors.getField(reference, _id_id, jni.JniType.intType).integer;

  /// from: public int id
  ///
  /// The pointer id.
  /// Initially set to \#INVALID_POINTER_ID (-1).
  ///@see MotionEvent\#getPointerId(int)
  set id(int value) => jniEnv.SetIntField(reference, _id_id, value);

  static final _id_toolType =
      jniAccessors.getFieldIDOf(_classRef, "toolType", "I");

  /// from: public int toolType
  ///
  /// The pointer tool type.
  /// Initially set to 0.
  ///@see MotionEvent\#getToolType(int)
  int get toolType => jniAccessors
      .getField(reference, _id_toolType, jni.JniType.intType)
      .integer;

  /// from: public int toolType
  ///
  /// The pointer tool type.
  /// Initially set to 0.
  ///@see MotionEvent\#getToolType(int)
  set toolType(int value) => jniEnv.SetIntField(reference, _id_toolType, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a pointer properties object with an invalid pointer id.
  MotionEvent_PointerProperties()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/view/MotionEvent\$PointerProperties;)V");

  /// from: public void <init>(android.view.MotionEvent.PointerProperties other)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a pointer properties object as a copy of the contents of
  /// another pointer properties object.
  ///@param other
  MotionEvent_PointerProperties.ctor1(MotionEvent_PointerProperties other)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [other.reference]).object);

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, "clear", "()V");

  /// from: public void clear()
  ///
  /// Resets the pointer properties to their initial values.
  void clear() => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniType.voidType, []).check();

  static final _id_copyFrom = jniAccessors.getMethodIDOf(_classRef, "copyFrom",
      "(Landroid/view/MotionEvent\$PointerProperties;)V");

  /// from: public void copyFrom(android.view.MotionEvent.PointerProperties other)
  ///
  /// Copies the contents of another pointer properties object.
  ///@param other The pointer properties object to copy.
  void copyFrom(MotionEvent_PointerProperties other) =>
      jniAccessors.callMethodWithArgs(reference, _id_copyFrom,
          jni.JniType.voidType, [other.reference]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object other)
  bool equals1(jni.JniObject other) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [other.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}

/// from: android.view.MotionEvent$PointerCoords
///
/// Transfer object for pointer coordinates.
///
/// Objects of this type can be used to specify the pointer coordinates when
/// creating new MotionEvent objects and to query pointer coordinates
/// in bulk.
///
/// Refer to InputDevice for information about how different kinds of
/// input devices and sources represent pointer coordinates.
class MotionEvent_PointerCoords extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/MotionEvent\$PointerCoords");
  MotionEvent_PointerCoords.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_orientation =
      jniAccessors.getFieldIDOf(_classRef, "orientation", "F");

  /// from: public float orientation
  ///
  /// The orientation of the touch area and tool area in radians clockwise from vertical.
  /// An angle of 0 radians indicates that the major axis of contact is oriented
  /// upwards, is perfectly circular or is of unknown orientation.  A positive angle
  /// indicates that the major axis of contact is oriented to the right.  A negative angle
  /// indicates that the major axis of contact is oriented to the left.
  /// The full range is from -PI/2 radians (finger pointing fully left) to PI/2 radians
  /// (finger pointing fully right).
  ///@see MotionEvent\#AXIS_ORIENTATION
  double get orientation => jniAccessors
      .getField(reference, _id_orientation, jni.JniType.floatType)
      .float;

  /// from: public float orientation
  ///
  /// The orientation of the touch area and tool area in radians clockwise from vertical.
  /// An angle of 0 radians indicates that the major axis of contact is oriented
  /// upwards, is perfectly circular or is of unknown orientation.  A positive angle
  /// indicates that the major axis of contact is oriented to the right.  A negative angle
  /// indicates that the major axis of contact is oriented to the left.
  /// The full range is from -PI/2 radians (finger pointing fully left) to PI/2 radians
  /// (finger pointing fully right).
  ///@see MotionEvent\#AXIS_ORIENTATION
  set orientation(double value) =>
      jniEnv.SetFloatField(reference, _id_orientation, value);

  static final _id_pressure =
      jniAccessors.getFieldIDOf(_classRef, "pressure", "F");

  /// from: public float pressure
  ///
  /// A normalized value that describes the pressure applied to the device
  /// by a finger or other tool.
  /// The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure),
  /// although values higher than 1 may be generated depending on the calibration of
  /// the input device.
  ///@see MotionEvent\#AXIS_PRESSURE
  double get pressure => jniAccessors
      .getField(reference, _id_pressure, jni.JniType.floatType)
      .float;

  /// from: public float pressure
  ///
  /// A normalized value that describes the pressure applied to the device
  /// by a finger or other tool.
  /// The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure),
  /// although values higher than 1 may be generated depending on the calibration of
  /// the input device.
  ///@see MotionEvent\#AXIS_PRESSURE
  set pressure(double value) =>
      jniEnv.SetFloatField(reference, _id_pressure, value);

  static final _id_size = jniAccessors.getFieldIDOf(_classRef, "size", "F");

  /// from: public float size
  ///
  /// A normalized value that describes the approximate size of the pointer touch area
  /// in relation to the maximum detectable size of the device.
  /// It represents some approximation of the area of the screen being
  /// pressed; the actual value in pixels corresponding to the
  /// touch is normalized with the device specific range of values
  /// and scaled to a value between 0 and 1. The value of size can be used to
  /// determine fat touch events.
  ///@see MotionEvent\#AXIS_SIZE
  double get size =>
      jniAccessors.getField(reference, _id_size, jni.JniType.floatType).float;

  /// from: public float size
  ///
  /// A normalized value that describes the approximate size of the pointer touch area
  /// in relation to the maximum detectable size of the device.
  /// It represents some approximation of the area of the screen being
  /// pressed; the actual value in pixels corresponding to the
  /// touch is normalized with the device specific range of values
  /// and scaled to a value between 0 and 1. The value of size can be used to
  /// determine fat touch events.
  ///@see MotionEvent\#AXIS_SIZE
  set size(double value) => jniEnv.SetFloatField(reference, _id_size, value);

  static final _id_toolMajor =
      jniAccessors.getFieldIDOf(_classRef, "toolMajor", "F");

  /// from: public float toolMajor
  ///
  /// The length of the major axis of an ellipse that describes the size of
  /// the approaching tool.
  /// The tool area represents the estimated size of the finger or pen that is
  /// touching the device independent of its actual touch area at the point of contact.
  /// If the device is a touch screen, the length is reported in pixels, otherwise it is
  /// reported in device-specific units.
  ///@see MotionEvent\#AXIS_TOOL_MAJOR
  double get toolMajor => jniAccessors
      .getField(reference, _id_toolMajor, jni.JniType.floatType)
      .float;

  /// from: public float toolMajor
  ///
  /// The length of the major axis of an ellipse that describes the size of
  /// the approaching tool.
  /// The tool area represents the estimated size of the finger or pen that is
  /// touching the device independent of its actual touch area at the point of contact.
  /// If the device is a touch screen, the length is reported in pixels, otherwise it is
  /// reported in device-specific units.
  ///@see MotionEvent\#AXIS_TOOL_MAJOR
  set toolMajor(double value) =>
      jniEnv.SetFloatField(reference, _id_toolMajor, value);

  static final _id_toolMinor =
      jniAccessors.getFieldIDOf(_classRef, "toolMinor", "F");

  /// from: public float toolMinor
  ///
  /// The length of the minor axis of an ellipse that describes the size of
  /// the approaching tool.
  /// The tool area represents the estimated size of the finger or pen that is
  /// touching the device independent of its actual touch area at the point of contact.
  /// If the device is a touch screen, the length is reported in pixels, otherwise it is
  /// reported in device-specific units.
  ///@see MotionEvent\#AXIS_TOOL_MINOR
  double get toolMinor => jniAccessors
      .getField(reference, _id_toolMinor, jni.JniType.floatType)
      .float;

  /// from: public float toolMinor
  ///
  /// The length of the minor axis of an ellipse that describes the size of
  /// the approaching tool.
  /// The tool area represents the estimated size of the finger or pen that is
  /// touching the device independent of its actual touch area at the point of contact.
  /// If the device is a touch screen, the length is reported in pixels, otherwise it is
  /// reported in device-specific units.
  ///@see MotionEvent\#AXIS_TOOL_MINOR
  set toolMinor(double value) =>
      jniEnv.SetFloatField(reference, _id_toolMinor, value);

  static final _id_touchMajor =
      jniAccessors.getFieldIDOf(_classRef, "touchMajor", "F");

  /// from: public float touchMajor
  ///
  /// The length of the major axis of an ellipse that describes the touch area at
  /// the point of contact.
  /// If the device is a touch screen, the length is reported in pixels, otherwise it is
  /// reported in device-specific units.
  ///@see MotionEvent\#AXIS_TOUCH_MAJOR
  double get touchMajor => jniAccessors
      .getField(reference, _id_touchMajor, jni.JniType.floatType)
      .float;

  /// from: public float touchMajor
  ///
  /// The length of the major axis of an ellipse that describes the touch area at
  /// the point of contact.
  /// If the device is a touch screen, the length is reported in pixels, otherwise it is
  /// reported in device-specific units.
  ///@see MotionEvent\#AXIS_TOUCH_MAJOR
  set touchMajor(double value) =>
      jniEnv.SetFloatField(reference, _id_touchMajor, value);

  static final _id_touchMinor =
      jniAccessors.getFieldIDOf(_classRef, "touchMinor", "F");

  /// from: public float touchMinor
  ///
  /// The length of the minor axis of an ellipse that describes the touch area at
  /// the point of contact.
  /// If the device is a touch screen, the length is reported in pixels, otherwise it is
  /// reported in device-specific units.
  ///@see MotionEvent\#AXIS_TOUCH_MINOR
  double get touchMinor => jniAccessors
      .getField(reference, _id_touchMinor, jni.JniType.floatType)
      .float;

  /// from: public float touchMinor
  ///
  /// The length of the minor axis of an ellipse that describes the touch area at
  /// the point of contact.
  /// If the device is a touch screen, the length is reported in pixels, otherwise it is
  /// reported in device-specific units.
  ///@see MotionEvent\#AXIS_TOUCH_MINOR
  set touchMinor(double value) =>
      jniEnv.SetFloatField(reference, _id_touchMinor, value);

  static final _id_x = jniAccessors.getFieldIDOf(_classRef, "x", "F");

  /// from: public float x
  ///
  /// The X component of the pointer movement.
  ///@see MotionEvent\#AXIS_X
  double get x =>
      jniAccessors.getField(reference, _id_x, jni.JniType.floatType).float;

  /// from: public float x
  ///
  /// The X component of the pointer movement.
  ///@see MotionEvent\#AXIS_X
  set x(double value) => jniEnv.SetFloatField(reference, _id_x, value);

  static final _id_y = jniAccessors.getFieldIDOf(_classRef, "y", "F");

  /// from: public float y
  ///
  /// The Y component of the pointer movement.
  ///@see MotionEvent\#AXIS_Y
  double get y =>
      jniAccessors.getField(reference, _id_y, jni.JniType.floatType).float;

  /// from: public float y
  ///
  /// The Y component of the pointer movement.
  ///@see MotionEvent\#AXIS_Y
  set y(double value) => jniEnv.SetFloatField(reference, _id_y, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a pointer coords object with all axes initialized to zero.
  MotionEvent_PointerCoords()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/view/MotionEvent\$PointerCoords;)V");

  /// from: public void <init>(android.view.MotionEvent.PointerCoords other)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a pointer coords object as a copy of the
  /// contents of another pointer coords object.
  ///@param other The pointer coords object to copy.
  MotionEvent_PointerCoords.ctor1(MotionEvent_PointerCoords other)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [other.reference]).object);

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, "clear", "()V");

  /// from: public void clear()
  ///
  /// Clears the contents of this object.
  /// Resets all axes to zero.
  void clear() => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniType.voidType, []).check();

  static final _id_copyFrom = jniAccessors.getMethodIDOf(
      _classRef, "copyFrom", "(Landroid/view/MotionEvent\$PointerCoords;)V");

  /// from: public void copyFrom(android.view.MotionEvent.PointerCoords other)
  ///
  /// Copies the contents of another pointer coords object.
  ///@param other The pointer coords object to copy.
  void copyFrom(MotionEvent_PointerCoords other) =>
      jniAccessors.callMethodWithArgs(reference, _id_copyFrom,
          jni.JniType.voidType, [other.reference]).check();

  static final _id_getAxisValue =
      jniAccessors.getMethodIDOf(_classRef, "getAxisValue", "(I)F");

  /// from: public float getAxisValue(int axis)
  ///
  /// Gets the value associated with the specified axis.
  ///@param axis The axis identifier for the axis value to retrieve.
  ///@return The value associated with the axis, or 0 if none.
  ///@see MotionEvent\#AXIS_X
  ///@see MotionEvent\#AXIS_Y
  double getAxisValue(int axis) => jniAccessors.callMethodWithArgs(
      reference, _id_getAxisValue, jni.JniType.floatType, [axis]).float;

  static final _id_setAxisValue =
      jniAccessors.getMethodIDOf(_classRef, "setAxisValue", "(IF)V");

  /// from: public void setAxisValue(int axis, float value)
  ///
  /// Sets the value associated with the specified axis.
  ///@param axis The axis identifier for the axis value to assign.
  ///@param value The value to set.
  ///@see MotionEvent\#AXIS_X
  ///@see MotionEvent\#AXIS_Y
  void setAxisValue(int axis, double value) => jniAccessors.callMethodWithArgs(
      reference, _id_setAxisValue, jni.JniType.voidType, [axis, value]).check();
}
