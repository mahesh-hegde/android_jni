// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ViewOverlay.dart" as viewoverlay_;

import "../content/Context.dart" as context_;

import "View.dart" as view_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.ViewGroupOverlay
///
/// A group overlay is an extra layer that sits on top of a ViewGroup
/// (the "host view") which is drawn after all other content in that view
/// (including the view group's children). Interaction with the overlay
/// layer is done by adding and removing views and drawables.
///
/// ViewGroupOverlay is a subclass of ViewOverlay, adding the ability to
/// manage views for overlays on ViewGroups, in addition to the drawable
/// support in ViewOverlay.
///
///@see ViewGroup\#getOverlay()
class ViewGroupOverlay extends viewoverlay_.ViewOverlay {
  static final _classRef =
      jniAccessors.getClassOf("android/view/ViewGroupOverlay");
  ViewGroupOverlay.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;Landroid/view/View;)V");

  /// from: void <init>(android.content.Context context, android.view.View hostView)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ViewGroupOverlay(context_.Context context, view_.View hostView)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [context.reference, hostView.reference]).object);

  static final _id_add1 =
      jniAccessors.getMethodIDOf(_classRef, "add", "(Landroid/view/View;)V");

  /// from: public void add(android.view.View view)
  ///
  /// Adds a {@code View} to the overlay. The bounds of the added view should be
  /// relative to the host view. Any view added to the overlay should be
  /// removed when it is no longer needed or no longer visible.
  ///
  /// Views in the overlay are visual-only; they do not receive input
  /// events and do not participate in focus traversal. Overlay views
  /// are intended to be transient, such as might be needed by a temporary
  /// animation effect.
  ///
  ///
  /// If the view has a parent, the view will be removed from that parent
  /// before being added to the overlay. Also, if that parent is attached
  /// in the current view hierarchy, the view will be repositioned
  /// such that it is in the same relative location inside the activity. For
  /// example, if the view's current parent lies 100 pixels to the right
  /// and 200 pixels down from the origin of the overlay's
  /// host view, then the view will be offset by (100, 200).
  ///
  ///
  /// {@code View}s added with this API will be drawn in the order they were
  /// added. Drawing of the overlay views will happen before drawing of any of the
  /// {@code Drawable}s added with \#add(Drawable) API even if a call to
  /// this API happened after the call to \#add(Drawable).
  ///
  ///
  /// Passing <code>null</code> parameter will result in an
  /// IllegalArgumentException being thrown.
  ///
  ///@param view The {@code View} to be added to the overlay. The added view will be
  /// drawn when the overlay is drawn.
  /// This value must never be {@code null}.
  ///@see \#remove(View)
  ///@see ViewOverlay\#add(Drawable)
  void add1(view_.View view) => jniAccessors.callMethodWithArgs(
      reference, _id_add1, jni.JniType.voidType, [view.reference]).check();

  static final _id_remove1 =
      jniAccessors.getMethodIDOf(_classRef, "remove", "(Landroid/view/View;)V");

  /// from: public void remove(android.view.View view)
  ///
  /// Removes the specified {@code View} from the overlay. Passing <code>null</code> parameter
  /// will result in an IllegalArgumentException being thrown.
  ///@param view The {@code View} to be removed from the overlay.
  /// This value must never be {@code null}.
  ///@see \#add(View)
  ///@see ViewOverlay\#remove(Drawable)
  void remove1(view_.View view) => jniAccessors.callMethodWithArgs(
      reference, _id_remove1, jni.JniType.voidType, [view.reference]).check();
}
