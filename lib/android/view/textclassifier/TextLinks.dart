// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../text/Spannable.dart" as spannable_;

import "../../os/Parcel.dart" as parcel_;

import "../../text/style/ClickableSpan.dart" as clickablespan_;

import "../View.dart" as view_;

import "../../os/LocaleList.dart" as localelist_;

import "TextClassifier.dart" as textclassifier_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.textclassifier.TextLinks
///
/// A collection of links, representing subsequences of text and the entity types (phone number,
/// address, url, etc) they may be.
class TextLinks extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/textclassifier/TextLinks");
  TextLinks.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int APPLY_STRATEGY_IGNORE
  ///
  /// Do not replace ClickableSpans that exist where the TextLinkSpan needs to
  /// be applied to. Do not apply the TextLinkSpan.
  static const APPLY_STRATEGY_IGNORE = 0;

  /// from: static public final int APPLY_STRATEGY_REPLACE
  ///
  /// Replace any ClickableSpans that exist where the TextLinkSpan needs to be
  /// applied to.
  static const APPLY_STRATEGY_REPLACE = 1;

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.textclassifier.TextLinks> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int STATUS_DIFFERENT_TEXT
  ///
  /// The specified text does not match the text used to generate the links.
  static const STATUS_DIFFERENT_TEXT = 3;

  /// from: static public final int STATUS_LINKS_APPLIED
  ///
  /// Links were successfully applied to the text.
  static const STATUS_LINKS_APPLIED = 0;

  /// from: static public final int STATUS_NO_LINKS_APPLIED
  ///
  /// No links applied to text. The links were filtered out.
  static const STATUS_NO_LINKS_APPLIED = 2;

  /// from: static public final int STATUS_NO_LINKS_FOUND
  ///
  /// No links exist to apply to text. Links count is zero.
  static const STATUS_NO_LINKS_FOUND = 1;

  static final _id_getLinks = jniAccessors.getMethodIDOf(
      _classRef, "getLinks", "()Ljava/util/Collection;");

  /// from: public java.util.Collection<android.view.textclassifier.TextLinks.TextLink> getLinks()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an unmodifiable Collection of the links.
  ///@return This value will never be {@code null}.
  jni.JniObject getLinks() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLinks, jni.JniType.objectType, []).object);

  static final _id_apply = jniAccessors.getMethodIDOf(_classRef, "apply",
      "(Landroid/text/Spannable;ILjava/util/function/Function;)I");

  /// from: public int apply(android.text.Spannable text, int applyStrategy, java.util.function.Function<android.view.textclassifier.TextLinks.TextLink,android.view.textclassifier.TextLinks.TextLinkSpan> spanFactory)
  ///
  /// Annotates the given text with the generated links. It will fail if the provided text doesn't
  /// match the original text used to create the TextLinks.
  ///
  /// <strong>NOTE: </strong>It may be necessary to set a LinkMovementMethod on the TextView
  /// widget to properly handle links. See TextView\#setMovementMethod(MovementMethod)
  ///@param text the text to apply the links to. Must match the original text
  /// This value must never be {@code null}.
  ///@param applyStrategy the apply strategy used to determine how to apply links to text.
  ///      e.g TextLinks\#APPLY_STRATEGY_IGNORE
  /// Value is android.view.textclassifier.TextLinks\#APPLY_STRATEGY_IGNORE, or android.view.textclassifier.TextLinks\#APPLY_STRATEGY_REPLACE
  ///@param spanFactory a custom span factory for converting TextLinks to TextLinkSpans.
  ///      Set to {@code null} to use the default span factory.
  ///
  /// This value may be {@code null}.
  ///@return a status code indicating whether or not the links were successfully applied
  ///      e.g. \#STATUS_LINKS_APPLIED
  ///
  /// Value is android.view.textclassifier.TextLinks\#STATUS_LINKS_APPLIED, android.view.textclassifier.TextLinks\#STATUS_NO_LINKS_FOUND, android.view.textclassifier.TextLinks\#STATUS_NO_LINKS_APPLIED, or android.view.textclassifier.TextLinks\#STATUS_DIFFERENT_TEXT
  int apply(spannable_.Spannable text, int applyStrategy,
          jni.JniObject spanFactory) =>
      jniAccessors.callMethodWithArgs(reference, _id_apply, jni.JniType.intType,
          [text.reference, applyStrategy, spanFactory.reference]).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.view.textclassifier.TextLinks$TextLinkSpan
///
/// A ClickableSpan for a TextLink.
///
/// Applies only to TextViews.
class TextLinks_TextLinkSpan extends clickablespan_.ClickableSpan {
  static final _classRef = jniAccessors
      .getClassOf("android/view/textclassifier/TextLinks\$TextLinkSpan");
  TextLinks_TextLinkSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/view/textclassifier/TextLinks\$TextLink;)V");

  /// from: public void <init>(android.view.textclassifier.TextLinks.TextLink textLink)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param textLink This value must never be {@code null}.
  TextLinks_TextLinkSpan.ctor1(TextLinks_TextLink textLink)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [textLink.reference]).object);

  static final _id_onClick = jniAccessors.getMethodIDOf(
      _classRef, "onClick", "(Landroid/view/View;)V");

  /// from: public void onClick(android.view.View widget)
  void onClick(view_.View widget) => jniAccessors.callMethodWithArgs(
      reference, _id_onClick, jni.JniType.voidType, [widget.reference]).check();

  static final _id_getTextLink = jniAccessors.getMethodIDOf(_classRef,
      "getTextLink", "()Landroid/view/textclassifier/TextLinks\$TextLink;");

  /// from: public final android.view.textclassifier.TextLinks.TextLink getTextLink()
  /// The returned object must be deleted after use, by calling the `delete` method.
  TextLinks_TextLink getTextLink() =>
      TextLinks_TextLink.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTextLink, jni.JniType.objectType, []).object);
}

/// from: android.view.textclassifier.TextLinks$TextLink
///
/// A link, identifying a substring of text and possible entity types for it.
class TextLinks_TextLink extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/textclassifier/TextLinks\$TextLink");
  TextLinks_TextLink.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.textclassifier.TextLinks.TextLink> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_getStart =
      jniAccessors.getMethodIDOf(_classRef, "getStart", "()I");

  /// from: public int getStart()
  ///
  /// Returns the start index of this link in the original text.
  ///@return the start index
  int getStart() => jniAccessors.callMethodWithArgs(
      reference, _id_getStart, jni.JniType.intType, []).integer;

  static final _id_getEnd =
      jniAccessors.getMethodIDOf(_classRef, "getEnd", "()I");

  /// from: public int getEnd()
  ///
  /// Returns the end index of this link in the original text.
  ///@return the end index
  int getEnd() => jniAccessors.callMethodWithArgs(
      reference, _id_getEnd, jni.JniType.intType, []).integer;

  static final _id_getEntityCount =
      jniAccessors.getMethodIDOf(_classRef, "getEntityCount", "()I");

  /// from: public int getEntityCount()
  ///
  /// Returns the number of entity types that have confidence scores.
  ///@return the entity count
  int getEntityCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getEntityCount, jni.JniType.intType, []).integer;

  static final _id_getEntity = jniAccessors.getMethodIDOf(
      _classRef, "getEntity", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getEntity(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the entity type at a given index. Entity types are sorted by confidence.
  ///@return the entity type at the provided index
  ///
  /// This value will never be {@code null}.
  ///
  /// Value is android.view.textclassifier.TextClassifier\#TYPE_UNKNOWN, android.view.textclassifier.TextClassifier\#TYPE_OTHER, android.view.textclassifier.TextClassifier\#TYPE_EMAIL, android.view.textclassifier.TextClassifier\#TYPE_PHONE, android.view.textclassifier.TextClassifier\#TYPE_ADDRESS, android.view.textclassifier.TextClassifier\#TYPE_URL, android.view.textclassifier.TextClassifier\#TYPE_DATE, android.view.textclassifier.TextClassifier\#TYPE_DATE_TIME, or android.view.textclassifier.TextClassifier\#TYPE_FLIGHT_NUMBER
  jni.JniString getEntity(int index) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getEntity, jni.JniType.objectType, [index]).object);

  static final _id_getConfidenceScore = jniAccessors.getMethodIDOf(
      _classRef, "getConfidenceScore", "(Ljava/lang/String;)F");

  /// from: public float getConfidenceScore(java.lang.String entityType)
  ///
  /// Returns the confidence score for a particular entity type.
  ///@param entityType the entity type
  ///
  /// Value is android.view.textclassifier.TextClassifier\#TYPE_UNKNOWN, android.view.textclassifier.TextClassifier\#TYPE_OTHER, android.view.textclassifier.TextClassifier\#TYPE_EMAIL, android.view.textclassifier.TextClassifier\#TYPE_PHONE, android.view.textclassifier.TextClassifier\#TYPE_ADDRESS, android.view.textclassifier.TextClassifier\#TYPE_URL, android.view.textclassifier.TextClassifier\#TYPE_DATE, android.view.textclassifier.TextClassifier\#TYPE_DATE_TIME, or android.view.textclassifier.TextClassifier\#TYPE_FLIGHT_NUMBER
  ///@return Value is between 0.0 and 1.0 inclusive
  double getConfidenceScore(jni.JniString entityType) =>
      jniAccessors.callMethodWithArgs(reference, _id_getConfidenceScore,
          jni.JniType.floatType, [entityType.reference]).float;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.view.textclassifier.TextLinks$Request
///
/// A request object for generating TextLinks.
class TextLinks_Request extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/textclassifier/TextLinks\$Request");
  TextLinks_Request.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.textclassifier.TextLinks.Request> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_getText = jniAccessors.getMethodIDOf(
      _classRef, "getText", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the text to generate links for.
  ///@return This value will never be {@code null}.
  jni.JniObject getText() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText, jni.JniType.objectType, []).object);

  static final _id_getDefaultLocales = jniAccessors.getMethodIDOf(
      _classRef, "getDefaultLocales", "()Landroid/os/LocaleList;");

  /// from: public android.os.LocaleList getDefaultLocales()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return ordered list of locale preferences that can be used to disambiguate
  ///      the provided text
  ///
  /// This value may be {@code null}.
  localelist_.LocaleList getDefaultLocales() =>
      localelist_.LocaleList.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDefaultLocales, jni.JniType.objectType, []).object);

  static final _id_getEntityConfig = jniAccessors.getMethodIDOf(
      _classRef,
      "getEntityConfig",
      "()Landroid/view/textclassifier/TextClassifier\$EntityConfig;");

  /// from: public android.view.textclassifier.TextClassifier.EntityConfig getEntityConfig()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The config representing the set of entities to look for
  /// This value may be {@code null}.
  ///@see Builder\#setEntityConfig(TextClassifier.EntityConfig)
  textclassifier_.TextClassifier_EntityConfig getEntityConfig() =>
      textclassifier_.TextClassifier_EntityConfig.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getEntityConfig,
              jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.view.textclassifier.TextLinks$Request$Builder
///
/// A builder for building TextLinks requests.
class TextLinks_Request_Builder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/textclassifier/TextLinks\$Request\$Builder");
  TextLinks_Request_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence text)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param text This value must never be {@code null}.
  TextLinks_Request_Builder(jni.JniObject text)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [text.reference]).object);

  static final _id_setDefaultLocales = jniAccessors.getMethodIDOf(
      _classRef,
      "setDefaultLocales",
      "(Landroid/os/LocaleList;)Landroid/view/textclassifier/TextLinks\$Request\$Builder;");

  /// from: public android.view.textclassifier.TextLinks.Request.Builder setDefaultLocales(android.os.LocaleList defaultLocales)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param defaultLocales ordered list of locale preferences that may be used to
  ///                       disambiguate the provided text. If no locale preferences exist,
  ///                       set this to null or an empty locale list.
  /// This value may be {@code null}.
  ///@return this builder
  TextLinks_Request_Builder setDefaultLocales(
          localelist_.LocaleList defaultLocales) =>
      TextLinks_Request_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setDefaultLocales,
          jni.JniType.objectType,
          [defaultLocales.reference]).object);

  static final _id_setEntityConfig = jniAccessors.getMethodIDOf(
      _classRef,
      "setEntityConfig",
      "(Landroid/view/textclassifier/TextClassifier\$EntityConfig;)Landroid/view/textclassifier/TextLinks\$Request\$Builder;");

  /// from: public android.view.textclassifier.TextLinks.Request.Builder setEntityConfig(android.view.textclassifier.TextClassifier.EntityConfig entityConfig)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the entity configuration to use. This determines what types of entities the
  /// TextClassifier will look for.
  /// Set to {@code null} for the default entity config and teh TextClassifier will
  /// automatically determine what links to generate.
  ///@param entityConfig This value may be {@code null}.
  ///@return this builder
  TextLinks_Request_Builder setEntityConfig(
          textclassifier_.TextClassifier_EntityConfig entityConfig) =>
      TextLinks_Request_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setEntityConfig,
          jni.JniType.objectType,
          [entityConfig.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/view/textclassifier/TextLinks\$Request;");

  /// from: public android.view.textclassifier.TextLinks.Request build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds and returns the request object.
  ///@return This value will never be {@code null}.
  TextLinks_Request build() =>
      TextLinks_Request.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}

/// from: android.view.textclassifier.TextLinks$Builder
///
/// A builder to construct a TextLinks instance.
class TextLinks_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/textclassifier/TextLinks\$Builder");
  TextLinks_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String fullText)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new TextLinks.Builder.
  ///@param fullText The full text to annotate with links
  ///
  /// This value must never be {@code null}.
  TextLinks_Builder(jni.JniString fullText)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [fullText.reference]).object);

  static final _id_addLink = jniAccessors.getMethodIDOf(_classRef, "addLink",
      "(IILjava/util/Map;)Landroid/view/textclassifier/TextLinks\$Builder;");

  /// from: public android.view.textclassifier.TextLinks.Builder addLink(int start, int end, java.util.Map<java.lang.String,java.lang.Float> entityScores)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a TextLink.
  ///@param start The start index of the identified subsequence
  ///@param end The end index of the identified subsequence
  ///@param entityScores A mapping of entity type to confidence score
  ///@throws IllegalArgumentException if entityScores is null or empty.
  TextLinks_Builder addLink(int start, int end, jni.JniObject entityScores) =>
      TextLinks_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addLink,
          jni.JniType.objectType,
          [start, end, entityScores.reference]).object);

  static final _id_clearTextLinks = jniAccessors.getMethodIDOf(_classRef,
      "clearTextLinks", "()Landroid/view/textclassifier/TextLinks\$Builder;");

  /// from: public android.view.textclassifier.TextLinks.Builder clearTextLinks()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Removes all TextLinks.
  ///@return This value will never be {@code null}.
  TextLinks_Builder clearTextLinks() =>
      TextLinks_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clearTextLinks, jni.JniType.objectType, []).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/view/textclassifier/TextLinks;");

  /// from: public android.view.textclassifier.TextLinks build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a TextLinks instance.
  ///@return the constructed TextLinks
  ///
  /// This value will never be {@code null}.
  TextLinks build() => TextLinks.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
