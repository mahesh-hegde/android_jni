// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../graphics/drawable/Drawable.dart" as drawable_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.ViewOverlay
///
/// An overlay is an extra layer that sits on top of a View (the "host view")
/// which is drawn after all other content in that view (including children,
/// if the view is a ViewGroup). Interaction with the overlay layer is done
/// by adding and removing drawables.
///
/// An overlay requested from a ViewGroup is of type ViewGroupOverlay,
/// which also supports adding and removing views.
///
///@see View\#getOverlay() View.getOverlay()
///@see ViewGroup\#getOverlay() ViewGroup.getOverlay()
///@see ViewGroupOverlay
class ViewOverlay extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/view/ViewOverlay");
  ViewOverlay.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_add = jniAccessors.getMethodIDOf(
      _classRef, "add", "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void add(android.graphics.drawable.Drawable drawable)
  ///
  /// Adds a Drawable to the overlay. The bounds of the drawable should be relative to
  /// the host view. Any drawable added to the overlay should be removed when it is no longer
  /// needed or no longer visible. Adding an already existing Drawable
  /// is a no-op. Passing <code>null</code> parameter will result in an
  /// IllegalArgumentException being thrown.
  ///@param drawable The Drawable to be added to the overlay. This drawable will be
  /// drawn when the view redraws its overlay. Drawables will be drawn in the order that
  /// they were added.
  /// This value must never be {@code null}.
  ///@see \#remove(Drawable)
  void add(drawable_.Drawable drawable) => jniAccessors.callMethodWithArgs(
      reference, _id_add, jni.JniType.voidType, [drawable.reference]).check();

  static final _id_remove = jniAccessors.getMethodIDOf(
      _classRef, "remove", "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void remove(android.graphics.drawable.Drawable drawable)
  ///
  /// Removes the specified Drawable from the overlay. Removing a Drawable that was
  /// not added with \#add(Drawable) is a no-op. Passing <code>null</code> parameter will
  /// result in an IllegalArgumentException being thrown.
  ///@param drawable The Drawable to be removed from the overlay.
  /// This value must never be {@code null}.
  ///@see \#add(Drawable)
  void remove(drawable_.Drawable drawable) => jniAccessors.callMethodWithArgs(
      reference,
      _id_remove,
      jni.JniType.voidType,
      [drawable.reference]).check();

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, "clear", "()V");

  /// from: public void clear()
  ///
  /// Removes all content from the overlay.
  void clear() => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniType.voidType, []).check();
}
