// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/IBinder.dart" as ibinder_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.WindowId
///
/// Safe identifier for a window.  This currently allows you to retrieve and observe
/// the input focus state of the window.  Most applications will
/// not use this, instead relying on the simpler (and more efficient) methods available
/// on View.  This classes is useful when window input interactions need to be
/// done across processes: the class itself is a Parcelable that can be passed to other
/// processes for them to interact with your window, and it provides a limited safe API
/// that doesn't allow the other process to negatively harm your window.
class WindowId extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/view/WindowId");
  WindowId.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.WindowId> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/os/IBinder;)V");

  /// from: void <init>(android.os.IBinder target)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  WindowId(ibinder_.IBinder target)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [target.reference]).object);

  static final _id_isFocused =
      jniAccessors.getMethodIDOf(_classRef, "isFocused", "()Z");

  /// from: public boolean isFocused()
  ///
  /// Retrieve the current focus state of the associated window.
  bool isFocused() => jniAccessors.callMethodWithArgs(
      reference, _id_isFocused, jni.JniType.booleanType, []).boolean;

  static final _id_registerFocusObserver = jniAccessors.getMethodIDOf(_classRef,
      "registerFocusObserver", "(Landroid/view/WindowId\$FocusObserver;)V");

  /// from: public void registerFocusObserver(android.view.WindowId.FocusObserver observer)
  ///
  /// Start monitoring for changes in the focus state of the window.
  void registerFocusObserver(WindowId_FocusObserver observer) =>
      jniAccessors.callMethodWithArgs(reference, _id_registerFocusObserver,
          jni.JniType.voidType, [observer.reference]).check();

  static final _id_unregisterFocusObserver = jniAccessors.getMethodIDOf(
      _classRef,
      "unregisterFocusObserver",
      "(Landroid/view/WindowId\$FocusObserver;)V");

  /// from: public void unregisterFocusObserver(android.view.WindowId.FocusObserver observer)
  ///
  /// Stop monitoring changes in the focus state of the window.
  void unregisterFocusObserver(WindowId_FocusObserver observer) =>
      jniAccessors.callMethodWithArgs(reference, _id_unregisterFocusObserver,
          jni.JniType.voidType, [observer.reference]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object otherObj)
  ///
  /// Comparison operator on two IntentSender objects, such that true
  /// is returned then they both represent the same operation from the
  /// same package.
  ///@param otherObj This value may be {@code null}.
  bool equals1(jni.JniObject otherObj) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [otherObj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();
}

/// from: android.view.WindowId$FocusObserver
///
/// Subclass for observing changes to the focus state of an WindowId.
/// You should use the same instance of this class for observing multiple
/// WindowId objects, since this class is fairly heavy-weight -- the
/// base class includes all of the mechanisms for connecting to and receiving updates
/// from the window.
class WindowId_FocusObserver extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/WindowId\$FocusObserver");
  WindowId_FocusObserver.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a new observer.  This observer will be configured so that all
  /// of its callbacks are dispatched on the current calling thread.
  WindowId_FocusObserver()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onFocusGained = jniAccessors.getMethodIDOf(
      _classRef, "onFocusGained", "(Landroid/view/WindowId;)V");

  /// from: public abstract void onFocusGained(android.view.WindowId token)
  ///
  /// Called when one of the monitored windows gains input focus.
  void onFocusGained(WindowId token) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onFocusGained,
      jni.JniType.voidType,
      [token.reference]).check();

  static final _id_onFocusLost = jniAccessors.getMethodIDOf(
      _classRef, "onFocusLost", "(Landroid/view/WindowId;)V");

  /// from: public abstract void onFocusLost(android.view.WindowId token)
  ///
  /// Called when one of the monitored windows loses input focus.
  void onFocusLost(WindowId token) => jniAccessors.callMethodWithArgs(reference,
      _id_onFocusLost, jni.JniType.voidType, [token.reference]).check();
}
