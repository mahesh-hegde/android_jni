// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Animation.dart" as animation_;

import "../../content/Context.dart" as context_;

import "../../util/AttributeSet.dart" as attributeset_;

import "Transformation.dart" as transformation_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.animation.ScaleAnimation
///
/// An animation that controls the scale of an object. You can specify the point
/// to use for the center of scaling.
class ScaleAnimation extends animation_.Animation {
  static final _classRef =
      jniAccessors.getClassOf("android/view/animation/ScaleAnimation");
  ScaleAnimation.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor used when a ScaleAnimation is loaded from a resource.
  ///@param context Application context to use
  ///@param attrs Attribute set from which to read values
  ScaleAnimation.ctor1(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(FFFF)V");

  /// from: public void <init>(float fromX, float toX, float fromY, float toY)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor to use when building a ScaleAnimation from code
  ///@param fromX Horizontal scaling factor to apply at the start of the
  ///        animation
  ///@param toX Horizontal scaling factor to apply at the end of the animation
  ///@param fromY Vertical scaling factor to apply at the start of the
  ///        animation
  ///@param toY Vertical scaling factor to apply at the end of the animation
  ScaleAnimation.ctor2(double fromX, double toX, double fromY, double toY)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [fromX, toX, fromY, toY]).object);

  static final _id_ctor3 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(FFFFFF)V");

  /// from: public void <init>(float fromX, float toX, float fromY, float toY, float pivotX, float pivotY)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor to use when building a ScaleAnimation from code
  ///@param fromX Horizontal scaling factor to apply at the start of the
  ///        animation
  ///@param toX Horizontal scaling factor to apply at the end of the animation
  ///@param fromY Vertical scaling factor to apply at the start of the
  ///        animation
  ///@param toY Vertical scaling factor to apply at the end of the animation
  ///@param pivotX The X coordinate of the point about which the object is
  ///        being scaled, specified as an absolute number where 0 is the left
  ///        edge. (This point remains fixed while the object changes size.)
  ///@param pivotY The Y coordinate of the point about which the object is
  ///        being scaled, specified as an absolute number where 0 is the top
  ///        edge. (This point remains fixed while the object changes size.)
  ScaleAnimation.ctor3(double fromX, double toX, double fromY, double toY,
      double pivotX, double pivotY)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3,
            [fromX, toX, fromY, toY, pivotX, pivotY]).object);

  static final _id_ctor4 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(FFFFIFIF)V");

  /// from: public void <init>(float fromX, float toX, float fromY, float toY, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor to use when building a ScaleAnimation from code
  ///@param fromX Horizontal scaling factor to apply at the start of the
  ///        animation
  ///@param toX Horizontal scaling factor to apply at the end of the animation
  ///@param fromY Vertical scaling factor to apply at the start of the
  ///        animation
  ///@param toY Vertical scaling factor to apply at the end of the animation
  ///@param pivotXType Specifies how pivotXValue should be interpreted. One of
  ///        Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or
  ///        Animation.RELATIVE_TO_PARENT.
  ///@param pivotXValue The X coordinate of the point about which the object
  ///        is being scaled, specified as an absolute number where 0 is the
  ///        left edge. (This point remains fixed while the object changes
  ///        size.) This value can either be an absolute number if pivotXType
  ///        is ABSOLUTE, or a percentage (where 1.0 is 100%) otherwise.
  ///@param pivotYType Specifies how pivotYValue should be interpreted. One of
  ///        Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or
  ///        Animation.RELATIVE_TO_PARENT.
  ///@param pivotYValue The Y coordinate of the point about which the object
  ///        is being scaled, specified as an absolute number where 0 is the
  ///        top edge. (This point remains fixed while the object changes
  ///        size.) This value can either be an absolute number if pivotYType
  ///        is ABSOLUTE, or a percentage (where 1.0 is 100%) otherwise.
  ScaleAnimation.ctor4(double fromX, double toX, double fromY, double toY,
      int pivotXType, double pivotXValue, int pivotYType, double pivotYValue)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor4, [
          fromX,
          toX,
          fromY,
          toY,
          pivotXType,
          pivotXValue,
          pivotYType,
          pivotYValue
        ]).object);

  static final _id_applyTransformation = jniAccessors.getMethodIDOf(_classRef,
      "applyTransformation", "(FLandroid/view/animation/Transformation;)V");

  /// from: protected void applyTransformation(float interpolatedTime, android.view.animation.Transformation t)
  void applyTransformation(
          double interpolatedTime, transformation_.Transformation t) =>
      jniAccessors.callMethodWithArgs(reference, _id_applyTransformation,
          jni.JniType.voidType, [interpolatedTime, t.reference]).check();

  static final _id_initialize =
      jniAccessors.getMethodIDOf(_classRef, "initialize", "(IIII)V");

  /// from: public void initialize(int width, int height, int parentWidth, int parentHeight)
  void initialize(int width, int height, int parentWidth, int parentHeight) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_initialize,
          jni.JniType.voidType,
          [width, height, parentWidth, parentHeight]).check();
}
