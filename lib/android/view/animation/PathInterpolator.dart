// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BaseInterpolator.dart" as baseinterpolator_;

import "../../graphics/Path.dart" as path_;

import "../../content/Context.dart" as context_;

import "../../util/AttributeSet.dart" as attributeset_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.animation.PathInterpolator
///
/// An interpolator that can traverse a Path that extends from <code>Point</code>
/// <code>(0, 0)</code> to <code>(1, 1)</code>. The x coordinate along the <code>Path</code>
/// is the input value and the output is the y coordinate of the line at that point.
/// This means that the Path must conform to a function <code>y = f(x)</code>.
///
/// The <code>Path</code> must not have gaps in the x direction and must not
/// loop back on itself such that there can be two points sharing the same x coordinate.
/// It is alright to have a disjoint line in the vertical direction:
///
/// <blockquote><pre>
///     Path path = new Path();
///     path.lineTo(0.25f, 0.25f);
///     path.moveTo(0.25f, 0.5f);
///     path.lineTo(1f, 1f);
/// </pre></blockquote>
///
class PathInterpolator extends baseinterpolator_.BaseInterpolator {
  static final _classRef =
      jniAccessors.getClassOf("android/view/animation/PathInterpolator");
  PathInterpolator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/Path;)V");

  /// from: public void <init>(android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an interpolator for an arbitrary <code>Path</code>. The <code>Path</code>
  /// must begin at <code>(0, 0)</code> and end at <code>(1, 1)</code>.
  ///@param path The <code>Path</code> to use to make the line representing the interpolator.
  PathInterpolator.ctor1(path_.Path path)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [path.reference]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(FF)V");

  /// from: public void <init>(float controlX, float controlY)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an interpolator for a quadratic Bezier curve. The end points
  /// <code>(0, 0)</code> and <code>(1, 1)</code> are assumed.
  ///@param controlX The x coordinate of the quadratic Bezier control point.
  ///@param controlY The y coordinate of the quadratic Bezier control point.
  PathInterpolator.ctor2(double controlX, double controlY)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [controlX, controlY]).object);

  static final _id_ctor3 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(FFFF)V");

  /// from: public void <init>(float controlX1, float controlY1, float controlX2, float controlY2)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an interpolator for a cubic Bezier curve.  The end points
  /// <code>(0, 0)</code> and <code>(1, 1)</code> are assumed.
  ///@param controlX1 The x coordinate of the first control point of the cubic Bezier.
  ///@param controlY1 The y coordinate of the first control point of the cubic Bezier.
  ///@param controlX2 The x coordinate of the second control point of the cubic Bezier.
  ///@param controlY2 The y coordinate of the second control point of the cubic Bezier.
  PathInterpolator.ctor3(
      double controlX1, double controlY1, double controlX2, double controlY2)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3,
            [controlX1, controlY1, controlX2, controlY2]).object);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PathInterpolator.ctor4(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [context.reference, attrs.reference]).object);

  static final _id_getInterpolation =
      jniAccessors.getMethodIDOf(_classRef, "getInterpolation", "(F)F");

  /// from: public float getInterpolation(float t)
  ///
  /// Using the line in the Path in this interpolator that can be described as
  /// <code>y = f(x)</code>, finds the y coordinate of the line given <code>t</code>
  /// as the x coordinate. Values less than 0 will always return 0 and values greater
  /// than 1 will always return 1.
  ///@param t Treated as the x coordinate along the line.
  ///@return The y coordinate of the Path along the line where x = <code>t</code>.
  ///@see Interpolator\#getInterpolation(float)
  double getInterpolation(double t) => jniAccessors.callMethodWithArgs(
      reference, _id_getInterpolation, jni.JniType.floatType, [t]).float;
}
