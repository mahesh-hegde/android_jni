// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Animation.dart" as animation_;

import "../../content/Context.dart" as context_;

import "../../util/AttributeSet.dart" as attributeset_;

import "Transformation.dart" as transformation_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.animation.AlphaAnimation
///
/// An animation that controls the alpha level of an object.
/// Useful for fading things in and out. This animation ends up
/// changing the alpha property of a Transformation
class AlphaAnimation extends animation_.Animation {
  static final _classRef =
      jniAccessors.getClassOf("android/view/animation/AlphaAnimation");
  AlphaAnimation.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor used when an AlphaAnimation is loaded from a resource.
  ///@param context Application context to use
  ///@param attrs Attribute set from which to read values
  AlphaAnimation.ctor1(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(FF)V");

  /// from: public void <init>(float fromAlpha, float toAlpha)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor to use when building an AlphaAnimation from code
  ///@param fromAlpha Starting alpha value for the animation, where 1.0 means
  ///        fully opaque and 0.0 means fully transparent.
  ///@param toAlpha Ending alpha value for the animation.
  AlphaAnimation.ctor2(double fromAlpha, double toAlpha)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [fromAlpha, toAlpha]).object);

  static final _id_applyTransformation = jniAccessors.getMethodIDOf(_classRef,
      "applyTransformation", "(FLandroid/view/animation/Transformation;)V");

  /// from: protected void applyTransformation(float interpolatedTime, android.view.animation.Transformation t)
  ///
  /// Changes the alpha property of the supplied Transformation
  void applyTransformation(
          double interpolatedTime, transformation_.Transformation t) =>
      jniAccessors.callMethodWithArgs(reference, _id_applyTransformation,
          jni.JniType.voidType, [interpolatedTime, t.reference]).check();

  static final _id_willChangeTransformationMatrix = jniAccessors.getMethodIDOf(
      _classRef, "willChangeTransformationMatrix", "()Z");

  /// from: public boolean willChangeTransformationMatrix()
  bool willChangeTransformationMatrix() => jniAccessors.callMethodWithArgs(
      reference,
      _id_willChangeTransformationMatrix,
      jni.JniType.booleanType, []).boolean;

  static final _id_willChangeBounds =
      jniAccessors.getMethodIDOf(_classRef, "willChangeBounds", "()Z");

  /// from: public boolean willChangeBounds()
  bool willChangeBounds() => jniAccessors.callMethodWithArgs(
      reference, _id_willChangeBounds, jni.JniType.booleanType, []).boolean;
}
