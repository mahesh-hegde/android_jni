// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Animation.dart" as animation_;

import "../../content/Context.dart" as context_;

import "LayoutAnimationController.dart" as layoutanimationcontroller_;

import "Interpolator.dart" as interpolator_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.animation.AnimationUtils
///
/// Defines common utilities for working with animations.
class AnimationUtils extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/animation/AnimationUtils");
  AnimationUtils.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AnimationUtils()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_currentAnimationTimeMillis = jniAccessors
      .getStaticMethodIDOf(_classRef, "currentAnimationTimeMillis", "()J");

  /// from: static public long currentAnimationTimeMillis()
  ///
  /// Returns the current animation time in milliseconds. This time should be used when invoking
  /// Animation\#setStartTime(long). Refer to android.os.SystemClock for more
  /// information about the different available clocks. The clock used by this method is
  /// _not_ the "wall" clock (it is not System\#currentTimeMillis).
  ///@return the current animation time in milliseconds
  ///@see android.os.SystemClock
  static int currentAnimationTimeMillis() =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_currentAnimationTimeMillis, jni.JniType.longType, []).long;

  static final _id_loadAnimation = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "loadAnimation",
      "(Landroid/content/Context;I)Landroid/view/animation/Animation;");

  /// from: static public android.view.animation.Animation loadAnimation(android.content.Context context, int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Loads an Animation object from a resource
  ///@param context Application context used to access resources
  ///@param id The resource id of the animation to load
  ///@return The animation object reference by the specified id
  ///@throws NotFoundException when the animation cannot be loaded
  static animation_.Animation loadAnimation(context_.Context context, int id) =>
      animation_.Animation.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_loadAnimation,
          jni.JniType.objectType,
          [context.reference, id]).object);

  static final _id_loadLayoutAnimation = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "loadLayoutAnimation",
      "(Landroid/content/Context;I)Landroid/view/animation/LayoutAnimationController;");

  /// from: static public android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context context, int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Loads a LayoutAnimationController object from a resource
  ///@param context Application context used to access resources
  ///@param id The resource id of the animation to load
  ///@return The animation object reference by the specified id
  ///@throws NotFoundException when the layout animation controller cannot be loaded
  static layoutanimationcontroller_.LayoutAnimationController
      loadLayoutAnimation(context_.Context context, int id) =>
          layoutanimationcontroller_.LayoutAnimationController.fromRef(
              jniAccessors.callStaticMethodWithArgs(
                  _classRef,
                  _id_loadLayoutAnimation,
                  jni.JniType.objectType,
                  [context.reference, id]).object);

  static final _id_makeInAnimation = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "makeInAnimation",
      "(Landroid/content/Context;Z)Landroid/view/animation/Animation;");

  /// from: static public android.view.animation.Animation makeInAnimation(android.content.Context c, boolean fromLeft)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Make an animation for objects becoming visible. Uses a slide and fade
  /// effect.
  ///@param c Context for loading resources
  ///@param fromLeft is the object to be animated coming from the left
  ///@return The new animation
  static animation_.Animation makeInAnimation(
          context_.Context c, bool fromLeft) =>
      animation_.Animation.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_makeInAnimation,
          jni.JniType.objectType,
          [c.reference, fromLeft]).object);

  static final _id_makeOutAnimation = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "makeOutAnimation",
      "(Landroid/content/Context;Z)Landroid/view/animation/Animation;");

  /// from: static public android.view.animation.Animation makeOutAnimation(android.content.Context c, boolean toRight)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Make an animation for objects becoming invisible. Uses a slide and fade
  /// effect.
  ///@param c Context for loading resources
  ///@param toRight is the object to be animated exiting to the right
  ///@return The new animation
  static animation_.Animation makeOutAnimation(
          context_.Context c, bool toRight) =>
      animation_.Animation.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_makeOutAnimation,
          jni.JniType.objectType,
          [c.reference, toRight]).object);

  static final _id_makeInChildBottomAnimation =
      jniAccessors.getStaticMethodIDOf(_classRef, "makeInChildBottomAnimation",
          "(Landroid/content/Context;)Landroid/view/animation/Animation;");

  /// from: static public android.view.animation.Animation makeInChildBottomAnimation(android.content.Context c)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Make an animation for objects becoming visible. Uses a slide up and fade
  /// effect.
  ///@param c Context for loading resources
  ///@return The new animation
  static animation_.Animation makeInChildBottomAnimation(context_.Context c) =>
      animation_.Animation.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_makeInChildBottomAnimation,
          jni.JniType.objectType,
          [c.reference]).object);

  static final _id_loadInterpolator = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "loadInterpolator",
      "(Landroid/content/Context;I)Landroid/view/animation/Interpolator;");

  /// from: static public android.view.animation.Interpolator loadInterpolator(android.content.Context context, int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Loads an Interpolator object from a resource
  ///@param context Application context used to access resources
  ///@param id The resource id of the animation to load
  ///@return The animation object reference by the specified id
  ///@throws NotFoundException
  static interpolator_.Interpolator loadInterpolator(
          context_.Context context, int id) =>
      interpolator_.Interpolator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_loadInterpolator,
          jni.JniType.objectType,
          [context.reference, id]).object);
}
