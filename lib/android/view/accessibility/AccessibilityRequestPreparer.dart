// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../View.dart" as view_;

import "../../os/Bundle.dart" as bundle_;

import "../../os/Message.dart" as message_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.accessibility.AccessibilityRequestPreparer
///
/// Object responsible to ensuring that a View is prepared to meet a synchronous request for
/// accessibility data.
///
/// Because accessibility requests arrive to Views synchronously on the UI thread, a View
/// that requires information from other processes can struggle to meet those requests. Registering
/// an instance of this class with AccessibilityManager allows a View to be notified when
/// a request is about to be made, and to asynchronously inform the accessibility system when it is
/// ready to meet the request.
///
/// <strong>Note:</strong> This class should only be needed in exceptional situations where a
/// View cannot otherwise synchronously meet the request for accessibility data.
class AccessibilityRequestPreparer extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/accessibility/AccessibilityRequestPreparer");
  AccessibilityRequestPreparer.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int REQUEST_TYPE_EXTRA_DATA
  static const REQUEST_TYPE_EXTRA_DATA = 1;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/view/View;I)V");

  /// from: public void <init>(android.view.View view, int requestTypes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param view The view whose requests need preparation. It must be attached to a
  /// window. This object will retain a weak reference to this view, and will unregister itself
  /// from AccessibilityManager if the view is detached from a window. It will not re-register
  /// itself.
  ///@param requestTypes The types of requests that require preparation. Different types may
  /// be ORed together.
  ///
  /// Value is either <code>0</code> or android.view.accessibility.AccessibilityRequestPreparer\#REQUEST_TYPE_EXTRA_DATA
  ///@throws IllegalStateException if the view is not attached to a window.
  AccessibilityRequestPreparer(view_.View view, int requestTypes)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [view.reference, requestTypes]).object);

  static final _id_onPrepareExtraData = jniAccessors.getMethodIDOf(
      _classRef,
      "onPrepareExtraData",
      "(ILjava/lang/String;Landroid/os/Bundle;Landroid/os/Message;)V");

  /// from: public abstract void onPrepareExtraData(int virtualViewId, java.lang.String extraDataKey, android.os.Bundle args, android.os.Message preparationFinishedMessage)
  ///
  /// Callback to allow preparation for filling extra data. Only called back if
  /// REQUEST_TYPE_EXTRA_DATA is requested.
  ///@param virtualViewId The ID of a virtual child node, if the View for this preparer
  /// supports virtual descendents, or AccessibilityNodeProvider\#HOST_VIEW_ID
  /// if the request is for the view itself.
  ///@param extraDataKey The extra data key for the request
  ///@param args The arguments for the request
  ///@param preparationFinishedMessage A message that must be sent to its target when preparations
  /// are complete.
  ///@see View\#addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo, String, Bundle)
  ///@see AccessibilityDelegate\#addExtraDataToAccessibilityNodeInfo(View, AccessibilityNodeInfo,
  /// String, Bundle)
  ///@see AccessibilityNodeProvider\#addExtraDataToAccessibilityNodeInfo(
  /// int, AccessibilityNodeInfo, String, Bundle)
  void onPrepareExtraData(int virtualViewId, jni.JniString extraDataKey,
          bundle_.Bundle args, message_.Message preparationFinishedMessage) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onPrepareExtraData, jni.JniType.voidType, [
        virtualViewId,
        extraDataKey.reference,
        args.reference,
        preparationFinishedMessage.reference
      ]).check();

  static final _id_getView =
      jniAccessors.getMethodIDOf(_classRef, "getView", "()Landroid/view/View;");

  /// from: public android.view.View getView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the view this object was created with.
  ///@return The view this object was created with, or {@code null} if the weak reference held
  /// to the view is no longer valid.
  view_.View getView() => view_.View.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getView, jni.JniType.objectType, []).object);
}
