// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AccessibilityNodeInfo.dart" as accessibilitynodeinfo_;

import "../../os/Bundle.dart" as bundle_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.accessibility.AccessibilityNodeProvider
///
/// This class is the contract a client should implement to enable support of a
/// virtual view hierarchy rooted at a given view for accessibility purposes. A virtual
/// view hierarchy is a tree of imaginary Views that is reported as a part of the view
/// hierarchy when an AccessibilityService explores the window content.
/// Since the virtual View tree does not exist this class is responsible for
/// managing the AccessibilityNodeInfos describing that tree to accessibility
/// services.
///
///
///
/// The main use case of these APIs is to enable a custom view that draws complex content,
/// for example a monthly calendar grid, to be presented as a tree of logical nodes,
/// for example month days each containing events, thus conveying its logical structure.
///
///
/// A typical use case is to override View\#getAccessibilityNodeProvider() of the
/// View that is a root of a virtual View hierarchy to return an instance of this class.
/// In such a case this instance is responsible for managing AccessibilityNodeInfos
/// describing the virtual sub-tree rooted at the View including the one representing the
/// View itself. Similarly the returned instance is responsible for performing accessibility
/// actions on any virtual view or the root view itself. For example:
///
///
/// <pre>
///     getAccessibilityNodeProvider(
///         if (mAccessibilityNodeProvider == null) {
///             mAccessibilityNodeProvider = new AccessibilityNodeProvider() {
///                 public boolean performAction(int action, int virtualDescendantId) {
///                     // Implementation.
///                     return false;
///                 }
///
///                 public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(String text,
///                         int virtualDescendantId) {
///                     // Implementation.
///                     return null;
///                 }
///
///                 public AccessibilityNodeInfo createAccessibilityNodeInfo(int virtualDescendantId) {
///                     // Implementation.
///                     return null;
///                 }
///             });
///     return mAccessibilityNodeProvider;
/// </pre>
class AccessibilityNodeProvider extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/accessibility/AccessibilityNodeProvider");
  AccessibilityNodeProvider.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int HOST_VIEW_ID
  ///
  /// The virtual id for the hosting View.
  static const HOST_VIEW_ID = -1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AccessibilityNodeProvider()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_createAccessibilityNodeInfo = jniAccessors.getMethodIDOf(
      _classRef,
      "createAccessibilityNodeInfo",
      "(I)Landroid/view/accessibility/AccessibilityNodeInfo;");

  /// from: public android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int virtualViewId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an AccessibilityNodeInfo representing a virtual view,
  /// such as a descendant of the host View, with the given <code>virtualViewId</code>
  /// or the host View itself if <code>virtualViewId</code> equals to \#HOST_VIEW_ID.
  ///
  /// A virtual descendant is an imaginary View that is reported as a part of the view
  /// hierarchy for accessibility purposes. This enables custom views that draw complex
  /// content to report them selves as a tree of virtual views, thus conveying their
  /// logical structure.
  ///
  ///
  ///
  /// The implementer is responsible for obtaining an accessibility node info from the
  /// pool of reusable instances and setting the desired properties of the node info
  /// before returning it.
  ///
  ///
  ///@param virtualViewId A client defined virtual view id.
  ///@return A populated AccessibilityNodeInfo for a virtual descendant or the
  ///     host View.
  ///@see View\#createAccessibilityNodeInfo()
  ///@see AccessibilityNodeInfo
  accessibilitynodeinfo_.AccessibilityNodeInfo createAccessibilityNodeInfo(
          int virtualViewId) =>
      accessibilitynodeinfo_.AccessibilityNodeInfo.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_createAccessibilityNodeInfo,
              jni.JniType.objectType, [virtualViewId]).object);

  static final _id_addExtraDataToAccessibilityNodeInfo = jniAccessors.getMethodIDOf(
      _classRef,
      "addExtraDataToAccessibilityNodeInfo",
      "(ILandroid/view/accessibility/AccessibilityNodeInfo;Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void addExtraDataToAccessibilityNodeInfo(int virtualViewId, android.view.accessibility.AccessibilityNodeInfo info, java.lang.String extraDataKey, android.os.Bundle arguments)
  ///
  /// Adds extra data to an AccessibilityNodeInfo based on an explicit request for the
  /// additional data.
  ///
  /// This method only needs to be implemented if a virtual view offers to provide additional
  /// data.
  ///
  ///
  ///@param virtualViewId The virtual view id used to create the node
  ///@param info The info to which to add the extra data
  ///@param extraDataKey A key specifying the type of extra data to add to the info. The
  ///                     extra data should be added to the Bundle returned by
  ///                     the info's AccessibilityNodeInfo\#getExtras method.
  ///@param arguments A Bundle holding any arguments relevant for this request.
  ///@see AccessibilityNodeInfo\#setExtraAvailableData
  void addExtraDataToAccessibilityNodeInfo(
          int virtualViewId,
          accessibilitynodeinfo_.AccessibilityNodeInfo info,
          jni.JniString extraDataKey,
          bundle_.Bundle arguments) =>
      jniAccessors.callMethodWithArgs(reference,
          _id_addExtraDataToAccessibilityNodeInfo, jni.JniType.voidType, [
        virtualViewId,
        info.reference,
        extraDataKey.reference,
        arguments.reference
      ]).check();

  static final _id_performAction = jniAccessors.getMethodIDOf(
      _classRef, "performAction", "(IILandroid/os/Bundle;)Z");

  /// from: public boolean performAction(int virtualViewId, int action, android.os.Bundle arguments)
  ///
  /// Performs an accessibility action on a virtual view, such as a descendant of the
  /// host View, with the given <code>virtualViewId</code> or the host View itself
  /// if <code>virtualViewId</code> equals to \#HOST_VIEW_ID.
  ///@param virtualViewId A client defined virtual view id.
  ///@param action The action to perform.
  ///@param arguments Optional action arguments.
  ///@return True if the action was performed.
  ///@see View\#performAccessibilityAction(int, Bundle)
  ///@see \#createAccessibilityNodeInfo(int)
  ///@see AccessibilityNodeInfo
  bool performAction(int virtualViewId, int action, bundle_.Bundle arguments) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_performAction,
          jni.JniType.booleanType,
          [virtualViewId, action, arguments.reference]).boolean;

  static final _id_findAccessibilityNodeInfosByText =
      jniAccessors.getMethodIDOf(_classRef, "findAccessibilityNodeInfosByText",
          "(Ljava/lang/String;I)Ljava/util/List;");

  /// from: public java.util.List<android.view.accessibility.AccessibilityNodeInfo> findAccessibilityNodeInfosByText(java.lang.String text, int virtualViewId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Finds AccessibilityNodeInfos by text. The match is case insensitive
  /// containment. The search is relative to the virtual view, i.e. a descendant of the
  /// host View, with the given <code>virtualViewId</code> or the host View itself
  /// <code>virtualViewId</code> equals to \#HOST_VIEW_ID.
  ///@param virtualViewId A client defined virtual view id which defined
  ///     the root of the tree in which to perform the search.
  ///@param text The searched text.
  ///@return A list of node info.
  ///@see \#createAccessibilityNodeInfo(int)
  ///@see AccessibilityNodeInfo
  jni.JniObject findAccessibilityNodeInfosByText(
          jni.JniString text, int virtualViewId) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_findAccessibilityNodeInfosByText,
          jni.JniType.objectType,
          [text.reference, virtualViewId]).object);

  static final _id_findFocus = jniAccessors.getMethodIDOf(_classRef,
      "findFocus", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;");

  /// from: public android.view.accessibility.AccessibilityNodeInfo findFocus(int focus)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Find the virtual view, such as a descendant of the host View, that has the
  /// specified focus type.
  ///@param focus The focus to find. One of
  ///            AccessibilityNodeInfo\#FOCUS_INPUT or
  ///            AccessibilityNodeInfo\#FOCUS_ACCESSIBILITY.
  ///@return The node info of the focused view or null.
  ///@see AccessibilityNodeInfo\#FOCUS_INPUT
  ///@see AccessibilityNodeInfo\#FOCUS_ACCESSIBILITY
  accessibilitynodeinfo_.AccessibilityNodeInfo findFocus(int focus) =>
      accessibilitynodeinfo_.AccessibilityNodeInfo.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_findFocus, jni.JniType.objectType,
              [focus]).object);
}
