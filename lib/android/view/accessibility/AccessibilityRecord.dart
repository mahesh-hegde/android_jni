// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../View.dart" as view_;

import "AccessibilityNodeInfo.dart" as accessibilitynodeinfo_;

import "../../os/Parcelable.dart" as parcelable_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.accessibility.AccessibilityRecord
///
/// Represents a record in an AccessibilityEvent and contains information
/// about state change of its source android.view.View. When a view fires
/// an accessibility event it requests from its parent to dispatch the
/// constructed event. The parent may optionally append a record for itself
/// for providing more context to
/// android.accessibilityservice.AccessibilityServices. Hence,
/// accessibility services can facilitate additional accessibility records
/// to enhance feedback.
///
///
///
/// Once the accessibility event containing a record is dispatched the record is
/// made immutable and calling a state mutation method generates an error.
///
///
///
/// <strong>Note:</strong> Not all properties are applicable to all accessibility
/// event types. For detailed information please refer to AccessibilityEvent.
///
///
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about creating and processing AccessibilityRecords, read the
/// <a href="{@docRoot}guide/topics/ui/accessibility/index.html">Accessibility</a>
/// developer guide.
///
/// </div>
///@see AccessibilityEvent
///@see AccessibilityManager
///@see android.accessibilityservice.AccessibilityService
///@see AccessibilityNodeInfo
class AccessibilityRecord extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/accessibility/AccessibilityRecord");
  AccessibilityRecord.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AccessibilityRecord()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setSource = jniAccessors.getMethodIDOf(
      _classRef, "setSource", "(Landroid/view/View;)V");

  /// from: public void setSource(android.view.View source)
  ///
  /// Sets the event source.
  ///@param source The source.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setSource(view_.View source) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setSource,
      jni.JniType.voidType,
      [source.reference]).check();

  static final _id_setSource1 = jniAccessors.getMethodIDOf(
      _classRef, "setSource", "(Landroid/view/View;I)V");

  /// from: public void setSource(android.view.View root, int virtualDescendantId)
  ///
  /// Sets the source to be a virtual descendant of the given <code>root</code>.
  /// If <code>virtualDescendantId</code> equals to View\#NO_ID the root
  /// is set as the source.
  ///
  /// A virtual descendant is an imaginary View that is reported as a part of the view
  /// hierarchy for accessibility purposes. This enables custom views that draw complex
  /// content to report them selves as a tree of virtual views, thus conveying their
  /// logical structure.
  ///
  ///
  ///@param root The root of the virtual subtree.
  /// This value may be {@code null}.
  ///@param virtualDescendantId The id of the virtual descendant.
  void setSource1(view_.View root, int virtualDescendantId) =>
      jniAccessors.callMethodWithArgs(reference, _id_setSource1,
          jni.JniType.voidType, [root.reference, virtualDescendantId]).check();

  static final _id_getSource = jniAccessors.getMethodIDOf(_classRef,
      "getSource", "()Landroid/view/accessibility/AccessibilityNodeInfo;");

  /// from: public android.view.accessibility.AccessibilityNodeInfo getSource()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the AccessibilityNodeInfo of the event source.
  ///
  ///   <strong>Note:</strong> It is a client responsibility to recycle the received info
  ///   by calling AccessibilityNodeInfo\#recycle() AccessibilityNodeInfo\#recycle()
  ///   to avoid creating of multiple instances.
  ///
  ///
  ///@return The info of the source.
  accessibilitynodeinfo_.AccessibilityNodeInfo getSource() =>
      accessibilitynodeinfo_.AccessibilityNodeInfo.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getSource, jni.JniType.objectType, []).object);

  static final _id_getWindowId =
      jniAccessors.getMethodIDOf(_classRef, "getWindowId", "()I");

  /// from: public int getWindowId()
  ///
  /// Gets the id of the window from which the event comes from.
  ///@return The window id.
  int getWindowId() => jniAccessors.callMethodWithArgs(
      reference, _id_getWindowId, jni.JniType.intType, []).integer;

  static final _id_isChecked =
      jniAccessors.getMethodIDOf(_classRef, "isChecked", "()Z");

  /// from: public boolean isChecked()
  ///
  /// Gets if the source is checked.
  ///@return True if the view is checked, false otherwise.
  bool isChecked() => jniAccessors.callMethodWithArgs(
      reference, _id_isChecked, jni.JniType.booleanType, []).boolean;

  static final _id_setChecked =
      jniAccessors.getMethodIDOf(_classRef, "setChecked", "(Z)V");

  /// from: public void setChecked(boolean isChecked)
  ///
  /// Sets if the source is checked.
  ///@param isChecked True if the view is checked, false otherwise.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setChecked(bool isChecked) => jniAccessors.callMethodWithArgs(
      reference, _id_setChecked, jni.JniType.voidType, [isChecked]).check();

  static final _id_isEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isEnabled", "()Z");

  /// from: public boolean isEnabled()
  ///
  /// Gets if the source is enabled.
  ///@return True if the view is enabled, false otherwise.
  bool isEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_isEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_setEnabled =
      jniAccessors.getMethodIDOf(_classRef, "setEnabled", "(Z)V");

  /// from: public void setEnabled(boolean isEnabled)
  ///
  /// Sets if the source is enabled.
  ///@param isEnabled True if the view is enabled, false otherwise.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setEnabled(bool isEnabled) => jniAccessors.callMethodWithArgs(
      reference, _id_setEnabled, jni.JniType.voidType, [isEnabled]).check();

  static final _id_isPassword =
      jniAccessors.getMethodIDOf(_classRef, "isPassword", "()Z");

  /// from: public boolean isPassword()
  ///
  /// Gets if the source is a password field.
  ///@return True if the view is a password field, false otherwise.
  bool isPassword() => jniAccessors.callMethodWithArgs(
      reference, _id_isPassword, jni.JniType.booleanType, []).boolean;

  static final _id_setPassword =
      jniAccessors.getMethodIDOf(_classRef, "setPassword", "(Z)V");

  /// from: public void setPassword(boolean isPassword)
  ///
  /// Sets if the source is a password field.
  ///@param isPassword True if the view is a password field, false otherwise.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setPassword(bool isPassword) => jniAccessors.callMethodWithArgs(
      reference, _id_setPassword, jni.JniType.voidType, [isPassword]).check();

  static final _id_isFullScreen =
      jniAccessors.getMethodIDOf(_classRef, "isFullScreen", "()Z");

  /// from: public boolean isFullScreen()
  ///
  /// Gets if the source is taking the entire screen.
  ///@return True if the source is full screen, false otherwise.
  bool isFullScreen() => jniAccessors.callMethodWithArgs(
      reference, _id_isFullScreen, jni.JniType.booleanType, []).boolean;

  static final _id_setFullScreen =
      jniAccessors.getMethodIDOf(_classRef, "setFullScreen", "(Z)V");

  /// from: public void setFullScreen(boolean isFullScreen)
  ///
  /// Sets if the source is taking the entire screen.
  ///@param isFullScreen True if the source is full screen, false otherwise.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setFullScreen(bool isFullScreen) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setFullScreen,
      jni.JniType.voidType,
      [isFullScreen]).check();

  static final _id_isScrollable =
      jniAccessors.getMethodIDOf(_classRef, "isScrollable", "()Z");

  /// from: public boolean isScrollable()
  ///
  /// Gets if the source is scrollable.
  ///@return True if the source is scrollable, false otherwise.
  bool isScrollable() => jniAccessors.callMethodWithArgs(
      reference, _id_isScrollable, jni.JniType.booleanType, []).boolean;

  static final _id_setScrollable =
      jniAccessors.getMethodIDOf(_classRef, "setScrollable", "(Z)V");

  /// from: public void setScrollable(boolean scrollable)
  ///
  /// Sets if the source is scrollable.
  ///@param scrollable True if the source is scrollable, false otherwise.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setScrollable(bool scrollable) => jniAccessors.callMethodWithArgs(
      reference, _id_setScrollable, jni.JniType.voidType, [scrollable]).check();

  static final _id_getItemCount =
      jniAccessors.getMethodIDOf(_classRef, "getItemCount", "()I");

  /// from: public int getItemCount()
  ///
  /// Gets the number of items that can be visited.
  ///@return The number of items.
  int getItemCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getItemCount, jni.JniType.intType, []).integer;

  static final _id_setItemCount =
      jniAccessors.getMethodIDOf(_classRef, "setItemCount", "(I)V");

  /// from: public void setItemCount(int itemCount)
  ///
  /// Sets the number of items that can be visited.
  ///@param itemCount The number of items.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setItemCount(int itemCount) => jniAccessors.callMethodWithArgs(
      reference, _id_setItemCount, jni.JniType.voidType, [itemCount]).check();

  static final _id_getCurrentItemIndex =
      jniAccessors.getMethodIDOf(_classRef, "getCurrentItemIndex", "()I");

  /// from: public int getCurrentItemIndex()
  ///
  /// Gets the index of the source in the list of items the can be visited.
  ///@return The current item index.
  int getCurrentItemIndex() => jniAccessors.callMethodWithArgs(
      reference, _id_getCurrentItemIndex, jni.JniType.intType, []).integer;

  static final _id_setCurrentItemIndex =
      jniAccessors.getMethodIDOf(_classRef, "setCurrentItemIndex", "(I)V");

  /// from: public void setCurrentItemIndex(int currentItemIndex)
  ///
  /// Sets the index of the source in the list of items that can be visited.
  ///@param currentItemIndex The current item index.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setCurrentItemIndex(int currentItemIndex) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCurrentItemIndex,
          jni.JniType.voidType, [currentItemIndex]).check();

  static final _id_getFromIndex =
      jniAccessors.getMethodIDOf(_classRef, "getFromIndex", "()I");

  /// from: public int getFromIndex()
  ///
  /// Gets the index of the first character of the changed sequence,
  /// or the beginning of a text selection or the index of the first
  /// visible item when scrolling.
  ///@return The index of the first character or selection
  ///        start or the first visible item.
  int getFromIndex() => jniAccessors.callMethodWithArgs(
      reference, _id_getFromIndex, jni.JniType.intType, []).integer;

  static final _id_setFromIndex =
      jniAccessors.getMethodIDOf(_classRef, "setFromIndex", "(I)V");

  /// from: public void setFromIndex(int fromIndex)
  ///
  /// Sets the index of the first character of the changed sequence
  /// or the beginning of a text selection or the index of the first
  /// visible item when scrolling.
  ///@param fromIndex The index of the first character or selection
  ///        start or the first visible item.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setFromIndex(int fromIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_setFromIndex, jni.JniType.voidType, [fromIndex]).check();

  static final _id_getToIndex =
      jniAccessors.getMethodIDOf(_classRef, "getToIndex", "()I");

  /// from: public int getToIndex()
  ///
  /// Gets the index of text selection end or the index of the last
  /// visible item when scrolling.
  ///@return The index of selection end or last item index.
  int getToIndex() => jniAccessors.callMethodWithArgs(
      reference, _id_getToIndex, jni.JniType.intType, []).integer;

  static final _id_setToIndex =
      jniAccessors.getMethodIDOf(_classRef, "setToIndex", "(I)V");

  /// from: public void setToIndex(int toIndex)
  ///
  /// Sets the index of text selection end or the index of the last
  /// visible item when scrolling.
  ///@param toIndex The index of selection end or last item index.
  void setToIndex(int toIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_setToIndex, jni.JniType.voidType, [toIndex]).check();

  static final _id_getScrollX =
      jniAccessors.getMethodIDOf(_classRef, "getScrollX", "()I");

  /// from: public int getScrollX()
  ///
  /// Gets the scroll offset of the source left edge in pixels.
  ///@return The scroll.
  int getScrollX() => jniAccessors.callMethodWithArgs(
      reference, _id_getScrollX, jni.JniType.intType, []).integer;

  static final _id_setScrollX =
      jniAccessors.getMethodIDOf(_classRef, "setScrollX", "(I)V");

  /// from: public void setScrollX(int scrollX)
  ///
  /// Sets the scroll offset of the source left edge in pixels.
  ///@param scrollX The scroll.
  void setScrollX(int scrollX) => jniAccessors.callMethodWithArgs(
      reference, _id_setScrollX, jni.JniType.voidType, [scrollX]).check();

  static final _id_getScrollY =
      jniAccessors.getMethodIDOf(_classRef, "getScrollY", "()I");

  /// from: public int getScrollY()
  ///
  /// Gets the scroll offset of the source top edge in pixels.
  ///@return The scroll.
  int getScrollY() => jniAccessors.callMethodWithArgs(
      reference, _id_getScrollY, jni.JniType.intType, []).integer;

  static final _id_setScrollY =
      jniAccessors.getMethodIDOf(_classRef, "setScrollY", "(I)V");

  /// from: public void setScrollY(int scrollY)
  ///
  /// Sets the scroll offset of the source top edge in pixels.
  ///@param scrollY The scroll.
  void setScrollY(int scrollY) => jniAccessors.callMethodWithArgs(
      reference, _id_setScrollY, jni.JniType.voidType, [scrollY]).check();

  static final _id_getScrollDeltaX =
      jniAccessors.getMethodIDOf(_classRef, "getScrollDeltaX", "()I");

  /// from: public int getScrollDeltaX()
  ///
  /// Gets the difference in pixels between the horizontal position before the scroll and the
  /// current horizontal position
  ///@return the scroll delta x
  int getScrollDeltaX() => jniAccessors.callMethodWithArgs(
      reference, _id_getScrollDeltaX, jni.JniType.intType, []).integer;

  static final _id_setScrollDeltaX =
      jniAccessors.getMethodIDOf(_classRef, "setScrollDeltaX", "(I)V");

  /// from: public void setScrollDeltaX(int scrollDeltaX)
  ///
  /// Sets the difference in pixels between the horizontal position before the scroll and the
  /// current horizontal position
  ///@param scrollDeltaX the scroll delta x
  void setScrollDeltaX(int scrollDeltaX) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setScrollDeltaX,
      jni.JniType.voidType,
      [scrollDeltaX]).check();

  static final _id_getScrollDeltaY =
      jniAccessors.getMethodIDOf(_classRef, "getScrollDeltaY", "()I");

  /// from: public int getScrollDeltaY()
  ///
  /// Gets the difference in pixels between the vertical position before the scroll and the
  /// current vertical position
  ///@return the scroll delta y
  int getScrollDeltaY() => jniAccessors.callMethodWithArgs(
      reference, _id_getScrollDeltaY, jni.JniType.intType, []).integer;

  static final _id_setScrollDeltaY =
      jniAccessors.getMethodIDOf(_classRef, "setScrollDeltaY", "(I)V");

  /// from: public void setScrollDeltaY(int scrollDeltaY)
  ///
  /// Sets the difference in pixels between the vertical position before the scroll and the
  /// current vertical position
  ///@param scrollDeltaY the scroll delta y
  void setScrollDeltaY(int scrollDeltaY) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setScrollDeltaY,
      jni.JniType.voidType,
      [scrollDeltaY]).check();

  static final _id_getMaxScrollX =
      jniAccessors.getMethodIDOf(_classRef, "getMaxScrollX", "()I");

  /// from: public int getMaxScrollX()
  ///
  /// Gets the max scroll offset of the source left edge in pixels.
  ///@return The max scroll.
  int getMaxScrollX() => jniAccessors.callMethodWithArgs(
      reference, _id_getMaxScrollX, jni.JniType.intType, []).integer;

  static final _id_setMaxScrollX =
      jniAccessors.getMethodIDOf(_classRef, "setMaxScrollX", "(I)V");

  /// from: public void setMaxScrollX(int maxScrollX)
  ///
  /// Sets the max scroll offset of the source left edge in pixels.
  ///@param maxScrollX The max scroll.
  void setMaxScrollX(int maxScrollX) => jniAccessors.callMethodWithArgs(
      reference, _id_setMaxScrollX, jni.JniType.voidType, [maxScrollX]).check();

  static final _id_getMaxScrollY =
      jniAccessors.getMethodIDOf(_classRef, "getMaxScrollY", "()I");

  /// from: public int getMaxScrollY()
  ///
  /// Gets the max scroll offset of the source top edge in pixels.
  ///@return The max scroll.
  int getMaxScrollY() => jniAccessors.callMethodWithArgs(
      reference, _id_getMaxScrollY, jni.JniType.intType, []).integer;

  static final _id_setMaxScrollY =
      jniAccessors.getMethodIDOf(_classRef, "setMaxScrollY", "(I)V");

  /// from: public void setMaxScrollY(int maxScrollY)
  ///
  /// Sets the max scroll offset of the source top edge in pixels.
  ///@param maxScrollY The max scroll.
  void setMaxScrollY(int maxScrollY) => jniAccessors.callMethodWithArgs(
      reference, _id_setMaxScrollY, jni.JniType.voidType, [maxScrollY]).check();

  static final _id_getAddedCount =
      jniAccessors.getMethodIDOf(_classRef, "getAddedCount", "()I");

  /// from: public int getAddedCount()
  ///
  /// Gets the number of added characters.
  ///@return The number of added characters.
  int getAddedCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getAddedCount, jni.JniType.intType, []).integer;

  static final _id_setAddedCount =
      jniAccessors.getMethodIDOf(_classRef, "setAddedCount", "(I)V");

  /// from: public void setAddedCount(int addedCount)
  ///
  /// Sets the number of added characters.
  ///@param addedCount The number of added characters.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setAddedCount(int addedCount) => jniAccessors.callMethodWithArgs(
      reference, _id_setAddedCount, jni.JniType.voidType, [addedCount]).check();

  static final _id_getRemovedCount =
      jniAccessors.getMethodIDOf(_classRef, "getRemovedCount", "()I");

  /// from: public int getRemovedCount()
  ///
  /// Gets the number of removed characters.
  ///@return The number of removed characters.
  int getRemovedCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getRemovedCount, jni.JniType.intType, []).integer;

  static final _id_setRemovedCount =
      jniAccessors.getMethodIDOf(_classRef, "setRemovedCount", "(I)V");

  /// from: public void setRemovedCount(int removedCount)
  ///
  /// Sets the number of removed characters.
  ///@param removedCount The number of removed characters.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setRemovedCount(int removedCount) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setRemovedCount,
      jni.JniType.voidType,
      [removedCount]).check();

  static final _id_getClassName = jniAccessors.getMethodIDOf(
      _classRef, "getClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the class name of the source.
  ///@return The class name.
  jni.JniObject getClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getClassName, jni.JniType.objectType, []).object);

  static final _id_setClassName = jniAccessors.getMethodIDOf(
      _classRef, "setClassName", "(Ljava/lang/CharSequence;)V");

  /// from: public void setClassName(java.lang.CharSequence className)
  ///
  /// Sets the class name of the source.
  ///@param className The lass name.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setClassName(jni.JniObject className) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setClassName,
      jni.JniType.voidType,
      [className.reference]).check();

  static final _id_getText =
      jniAccessors.getMethodIDOf(_classRef, "getText", "()Ljava/util/List;");

  /// from: public java.util.List<java.lang.CharSequence> getText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the text of the event. The index in the list represents the priority
  /// of the text. Specifically, the lower the index the higher the priority.
  ///@return The text.
  jni.JniObject getText() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText, jni.JniType.objectType, []).object);

  static final _id_getBeforeText = jniAccessors.getMethodIDOf(
      _classRef, "getBeforeText", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getBeforeText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the text before a change.
  ///@return The text before the change.
  jni.JniObject getBeforeText() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getBeforeText, jni.JniType.objectType, []).object);

  static final _id_setBeforeText = jniAccessors.getMethodIDOf(
      _classRef, "setBeforeText", "(Ljava/lang/CharSequence;)V");

  /// from: public void setBeforeText(java.lang.CharSequence beforeText)
  ///
  /// Sets the text before a change.
  ///@param beforeText The text before the change.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setBeforeText(jni.JniObject beforeText) =>
      jniAccessors.callMethodWithArgs(reference, _id_setBeforeText,
          jni.JniType.voidType, [beforeText.reference]).check();

  static final _id_getContentDescription = jniAccessors.getMethodIDOf(
      _classRef, "getContentDescription", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getContentDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the description of the source.
  ///@return The description.
  jni.JniObject getContentDescription() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getContentDescription, jni.JniType.objectType, []).object);

  static final _id_setContentDescription = jniAccessors.getMethodIDOf(
      _classRef, "setContentDescription", "(Ljava/lang/CharSequence;)V");

  /// from: public void setContentDescription(java.lang.CharSequence contentDescription)
  ///
  /// Sets the description of the source.
  ///@param contentDescription The description.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setContentDescription(jni.JniObject contentDescription) =>
      jniAccessors.callMethodWithArgs(reference, _id_setContentDescription,
          jni.JniType.voidType, [contentDescription.reference]).check();

  static final _id_getParcelableData = jniAccessors.getMethodIDOf(
      _classRef, "getParcelableData", "()Landroid/os/Parcelable;");

  /// from: public android.os.Parcelable getParcelableData()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the Parcelable data.
  ///@return The parcelable data.
  parcelable_.Parcelable getParcelableData() =>
      parcelable_.Parcelable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getParcelableData, jni.JniType.objectType, []).object);

  static final _id_setParcelableData = jniAccessors.getMethodIDOf(
      _classRef, "setParcelableData", "(Landroid/os/Parcelable;)V");

  /// from: public void setParcelableData(android.os.Parcelable parcelableData)
  ///
  /// Sets the Parcelable data of the event.
  ///@param parcelableData The parcelable data.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setParcelableData(parcelable_.Parcelable parcelableData) =>
      jniAccessors.callMethodWithArgs(reference, _id_setParcelableData,
          jni.JniType.voidType, [parcelableData.reference]).check();

  static final _id_obtain = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "obtain",
      "(Landroid/view/accessibility/AccessibilityRecord;)Landroid/view/accessibility/AccessibilityRecord;");

  /// from: static public android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord record)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a cached instance if such is available or a new one is
  /// instantiated. The instance is initialized with data from the
  /// given record.
  ///@return An instance.
  static AccessibilityRecord obtain(AccessibilityRecord record) =>
      AccessibilityRecord.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_obtain,
          jni.JniType.objectType,
          [record.reference]).object);

  static final _id_obtain1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "obtain", "()Landroid/view/accessibility/AccessibilityRecord;");

  /// from: static public android.view.accessibility.AccessibilityRecord obtain()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a cached instance if such is available or a new one is
  /// instantiated.
  ///@return An instance.
  static AccessibilityRecord obtain1() =>
      AccessibilityRecord.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_obtain1, jni.JniType.objectType, []).object);

  static final _id_recycle =
      jniAccessors.getMethodIDOf(_classRef, "recycle", "()V");

  /// from: public void recycle()
  ///
  /// Return an instance back to be reused.
  ///
  /// <strong>Note:</strong> You must not touch the object after calling this function.
  ///@throws IllegalStateException If the record is already recycled.
  void recycle() => jniAccessors.callMethodWithArgs(
      reference, _id_recycle, jni.JniType.voidType, []).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
