// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AccessibilityEvent.dart" as accessibilityevent_;

import "../../os/Handler.dart" as handler_;

import "AccessibilityRequestPreparer.dart" as accessibilityrequestpreparer_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.accessibility.AccessibilityManager
///
/// System level service that serves as an event dispatch for AccessibilityEvents,
/// and provides facilities for querying the accessibility state of the system.
/// Accessibility events are generated when something notable happens in the user interface,
/// for example an android.app.Activity starts, the focus or selection of a
/// android.view.View changes etc. Parties interested in handling accessibility
/// events implement and register an accessibility service which extends
/// android.accessibilityservice.AccessibilityService.
///@see AccessibilityEvent
///@see AccessibilityNodeInfo
///@see android.accessibilityservice.AccessibilityService
///@see Context\#getSystemService
///@see Context\#ACCESSIBILITY_SERVICE
class AccessibilityManager extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/accessibility/AccessibilityManager");
  AccessibilityManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AccessibilityManager()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_isEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isEnabled", "()Z");

  /// from: public boolean isEnabled()
  ///
  /// Returns if the accessibility in the system is enabled.
  ///@return True if accessibility is enabled, false otherwise.
  bool isEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_isEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_isTouchExplorationEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isTouchExplorationEnabled", "()Z");

  /// from: public boolean isTouchExplorationEnabled()
  ///
  /// Returns if the touch exploration in the system is enabled.
  ///@return True if touch exploration is enabled, false otherwise.
  bool isTouchExplorationEnabled() => jniAccessors.callMethodWithArgs(reference,
      _id_isTouchExplorationEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_sendAccessibilityEvent = jniAccessors.getMethodIDOf(
      _classRef,
      "sendAccessibilityEvent",
      "(Landroid/view/accessibility/AccessibilityEvent;)V");

  /// from: public void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)
  ///
  /// Sends an AccessibilityEvent.
  ///@param event The event to send.
  ///@throws IllegalStateException if accessibility is not enabled.
  ///
  /// <strong>Note:</strong> The preferred mechanism for sending custom accessibility
  /// events is through calling
  /// android.view.ViewParent\#requestSendAccessibilityEvent(View, AccessibilityEvent)
  /// instead of this method to allow predecessors to augment/filter events sent by
  /// their descendants.
  void sendAccessibilityEvent(accessibilityevent_.AccessibilityEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_sendAccessibilityEvent,
          jni.JniType.voidType, [event.reference]).check();

  static final _id_interrupt =
      jniAccessors.getMethodIDOf(_classRef, "interrupt", "()V");

  /// from: public void interrupt()
  ///
  /// Requests feedback interruption from all accessibility services.
  void interrupt() => jniAccessors.callMethodWithArgs(
      reference, _id_interrupt, jni.JniType.voidType, []).check();

  static final _id_getAccessibilityServiceList = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityServiceList", "()Ljava/util/List;");

  /// from: public java.util.List<android.content.pm.ServiceInfo> getAccessibilityServiceList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the ServiceInfos of the installed accessibility services.
  ///@return An unmodifiable list with ServiceInfos.
  ///@deprecated Use \#getInstalledAccessibilityServiceList()
  jni.JniObject getAccessibilityServiceList() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityServiceList, jni.JniType.objectType, []).object);

  static final _id_getInstalledAccessibilityServiceList =
      jniAccessors.getMethodIDOf(_classRef,
          "getInstalledAccessibilityServiceList", "()Ljava/util/List;");

  /// from: public java.util.List<android.accessibilityservice.AccessibilityServiceInfo> getInstalledAccessibilityServiceList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the AccessibilityServiceInfos of the installed accessibility services.
  ///@return An unmodifiable list with AccessibilityServiceInfos.
  jni.JniObject getInstalledAccessibilityServiceList() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getInstalledAccessibilityServiceList,
          jni.JniType.objectType, []).object);

  static final _id_getEnabledAccessibilityServiceList =
      jniAccessors.getMethodIDOf(_classRef,
          "getEnabledAccessibilityServiceList", "(I)Ljava/util/List;");

  /// from: public java.util.List<android.accessibilityservice.AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int feedbackTypeFlags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the AccessibilityServiceInfos of the enabled accessibility services
  /// for a given feedback type.
  ///@param feedbackTypeFlags The feedback type flags.
  ///@return An unmodifiable list with AccessibilityServiceInfos.
  ///@see AccessibilityServiceInfo\#FEEDBACK_AUDIBLE
  ///@see AccessibilityServiceInfo\#FEEDBACK_GENERIC
  ///@see AccessibilityServiceInfo\#FEEDBACK_HAPTIC
  ///@see AccessibilityServiceInfo\#FEEDBACK_SPOKEN
  ///@see AccessibilityServiceInfo\#FEEDBACK_VISUAL
  ///@see AccessibilityServiceInfo\#FEEDBACK_BRAILLE
  jni.JniObject getEnabledAccessibilityServiceList(int feedbackTypeFlags) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getEnabledAccessibilityServiceList,
          jni.JniType.objectType,
          [feedbackTypeFlags]).object);

  static final _id_addAccessibilityStateChangeListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addAccessibilityStateChangeListener",
      "(Landroid/view/accessibility/AccessibilityManager\$AccessibilityStateChangeListener;)Z");

  /// from: public boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener listener)
  ///
  /// Registers an AccessibilityStateChangeListener for changes in
  /// the global accessibility state of the system. Equivalent to calling
  /// \#addAccessibilityStateChangeListener(AccessibilityStateChangeListener, Handler)
  /// with a null handler.
  ///@param listener The listener.
  /// This value must never be {@code null}.
  ///@return Always returns {@code true}.
  bool addAccessibilityStateChangeListener(
          AccessibilityManager_AccessibilityStateChangeListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addAccessibilityStateChangeListener,
          jni.JniType.booleanType,
          [listener.reference]).boolean;

  static final _id_addAccessibilityStateChangeListener1 =
      jniAccessors.getMethodIDOf(
          _classRef,
          "addAccessibilityStateChangeListener",
          "(Landroid/view/accessibility/AccessibilityManager\$AccessibilityStateChangeListener;Landroid/os/Handler;)V");

  /// from: public void addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener listener, android.os.Handler handler)
  ///
  /// Registers an AccessibilityStateChangeListener for changes in
  /// the global accessibility state of the system. If the listener has already been registered,
  /// the handler used to call it back is updated.
  ///@param listener The listener.
  /// This value must never be {@code null}.
  ///@param handler The handler on which the listener should be called back, or {@code null}
  ///                for a callback on the process's main handler.
  ///
  /// This value may be {@code null}.
  void addAccessibilityStateChangeListener1(
          AccessibilityManager_AccessibilityStateChangeListener listener,
          handler_.Handler handler) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addAccessibilityStateChangeListener1,
          jni.JniType.voidType,
          [listener.reference, handler.reference]).check();

  static final _id_removeAccessibilityStateChangeListener =
      jniAccessors.getMethodIDOf(
          _classRef,
          "removeAccessibilityStateChangeListener",
          "(Landroid/view/accessibility/AccessibilityManager\$AccessibilityStateChangeListener;)Z");

  /// from: public boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener listener)
  ///
  /// Unregisters an AccessibilityStateChangeListener.
  ///@param listener The listener.
  /// This value must never be {@code null}.
  ///@return True if the listener was previously registered.
  bool removeAccessibilityStateChangeListener(
          AccessibilityManager_AccessibilityStateChangeListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeAccessibilityStateChangeListener,
          jni.JniType.booleanType,
          [listener.reference]).boolean;

  static final _id_addTouchExplorationStateChangeListener =
      jniAccessors.getMethodIDOf(
          _classRef,
          "addTouchExplorationStateChangeListener",
          "(Landroid/view/accessibility/AccessibilityManager\$TouchExplorationStateChangeListener;)Z");

  /// from: public boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener listener)
  ///
  /// Registers a TouchExplorationStateChangeListener for changes in
  /// the global touch exploration state of the system. Equivalent to calling
  /// \#addTouchExplorationStateChangeListener(TouchExplorationStateChangeListener, Handler)
  /// with a null handler.
  ///@param listener The listener.
  /// This value must never be {@code null}.
  ///@return Always returns {@code true}.
  bool addTouchExplorationStateChangeListener(
          AccessibilityManager_TouchExplorationStateChangeListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addTouchExplorationStateChangeListener,
          jni.JniType.booleanType,
          [listener.reference]).boolean;

  static final _id_addTouchExplorationStateChangeListener1 =
      jniAccessors.getMethodIDOf(
          _classRef,
          "addTouchExplorationStateChangeListener",
          "(Landroid/view/accessibility/AccessibilityManager\$TouchExplorationStateChangeListener;Landroid/os/Handler;)V");

  /// from: public void addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener listener, android.os.Handler handler)
  ///
  /// Registers an TouchExplorationStateChangeListener for changes in
  /// the global touch exploration state of the system. If the listener has already been
  /// registered, the handler used to call it back is updated.
  ///@param listener The listener.
  /// This value must never be {@code null}.
  ///@param handler The handler on which the listener should be called back, or {@code null}
  ///                for a callback on the process's main handler.
  ///
  /// This value may be {@code null}.
  void addTouchExplorationStateChangeListener1(
          AccessibilityManager_TouchExplorationStateChangeListener listener,
          handler_.Handler handler) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addTouchExplorationStateChangeListener1,
          jni.JniType.voidType,
          [listener.reference, handler.reference]).check();

  static final _id_removeTouchExplorationStateChangeListener =
      jniAccessors.getMethodIDOf(
          _classRef,
          "removeTouchExplorationStateChangeListener",
          "(Landroid/view/accessibility/AccessibilityManager\$TouchExplorationStateChangeListener;)Z");

  /// from: public boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener listener)
  ///
  /// Unregisters a TouchExplorationStateChangeListener.
  ///@param listener The listener.
  /// This value must never be {@code null}.
  ///@return True if listener was previously registered.
  bool removeTouchExplorationStateChangeListener(
          AccessibilityManager_TouchExplorationStateChangeListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeTouchExplorationStateChangeListener,
          jni.JniType.booleanType,
          [listener.reference]).boolean;

  static final _id_addAccessibilityRequestPreparer = jniAccessors.getMethodIDOf(
      _classRef,
      "addAccessibilityRequestPreparer",
      "(Landroid/view/accessibility/AccessibilityRequestPreparer;)V");

  /// from: public void addAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer preparer)
  ///
  /// Registers a AccessibilityRequestPreparer.
  void addAccessibilityRequestPreparer(
          accessibilityrequestpreparer_.AccessibilityRequestPreparer
              preparer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addAccessibilityRequestPreparer,
          jni.JniType.voidType,
          [preparer.reference]).check();

  static final _id_removeAccessibilityRequestPreparer =
      jniAccessors.getMethodIDOf(
          _classRef,
          "removeAccessibilityRequestPreparer",
          "(Landroid/view/accessibility/AccessibilityRequestPreparer;)V");

  /// from: public void removeAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer preparer)
  ///
  /// Unregisters a AccessibilityRequestPreparer.
  void removeAccessibilityRequestPreparer(
          accessibilityrequestpreparer_.AccessibilityRequestPreparer
              preparer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeAccessibilityRequestPreparer,
          jni.JniType.voidType,
          [preparer.reference]).check();

  static final _id_isAccessibilityButtonSupported = jniAccessors
      .getStaticMethodIDOf(_classRef, "isAccessibilityButtonSupported", "()Z");

  /// from: static public boolean isAccessibilityButtonSupported()
  ///
  /// Determines if the accessibility button within the system navigation area is supported.
  ///@return {@code true} if the accessibility button is supported on this device,
  /// {@code false} otherwise
  static bool isAccessibilityButtonSupported() =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_isAccessibilityButtonSupported,
          jni.JniType.booleanType, []).boolean;
}

/// from: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener
///
/// Listener for the system touch exploration state. To listen for changes to
/// the touch exploration state on the device, implement this interface and
/// register it with the system by calling
/// \#addTouchExplorationStateChangeListener.
class AccessibilityManager_TouchExplorationStateChangeListener
    extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/view/accessibility/AccessibilityManager\$TouchExplorationStateChangeListener");
  AccessibilityManager_TouchExplorationStateChangeListener.fromRef(
      jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onTouchExplorationStateChanged = jniAccessors.getMethodIDOf(
      _classRef, "onTouchExplorationStateChanged", "(Z)V");

  /// from: public abstract void onTouchExplorationStateChanged(boolean enabled)
  ///
  /// Called when the touch exploration enabled state changes.
  ///@param enabled Whether touch exploration is enabled.
  void onTouchExplorationStateChanged(bool enabled) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onTouchExplorationStateChanged,
          jni.JniType.voidType,
          [enabled]).check();
}

/// from: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener
///
/// Listener for the system accessibility state. To listen for changes to the
/// accessibility state on the device, implement this interface and register
/// it with the system by calling \#addAccessibilityStateChangeListener.
class AccessibilityManager_AccessibilityStateChangeListener
    extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/view/accessibility/AccessibilityManager\$AccessibilityStateChangeListener");
  AccessibilityManager_AccessibilityStateChangeListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onAccessibilityStateChanged = jniAccessors.getMethodIDOf(
      _classRef, "onAccessibilityStateChanged", "(Z)V");

  /// from: public abstract void onAccessibilityStateChanged(boolean enabled)
  ///
  /// Called when the accessibility enabled state changes.
  ///@param enabled Whether accessibility is enabled.
  void onAccessibilityStateChanged(bool enabled) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onAccessibilityStateChanged,
          jni.JniType.voidType,
          [enabled]).check();
}
