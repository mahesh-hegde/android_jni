// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AccessibilityRecord.dart" as accessibilityrecord_;

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.accessibility.AccessibilityEvent
///
///
/// This class represents accessibility events that are sent by the system when
/// something notable happens in the user interface. For example, when a
/// android.widget.Button is clicked, a android.view.View is focused, etc.
///
///
///
/// An accessibility event is fired by an individual view which populates the event with
/// data for its state and requests from its parent to send the event to interested
/// parties. The parent can optionally modify or even block the event based on its broader
/// understanding of the user interface's context.
///
///
///
/// The main purpose of an accessibility event is to communicate changes in the UI to an
/// android.accessibilityservice.AccessibilityService. The service may then inspect,
/// if needed the user interface by examining the View hierarchy, as represented by a tree of
/// AccessibilityNodeInfos (snapshot of a View state)
/// which can be used for exploring the window content. Note that the privilege for accessing
/// an event's source, thus the window content, has to be explicitly requested. For more
/// details refer to android.accessibilityservice.AccessibilityService. If an
/// accessibility service has not requested to retrieve the window content the event will
/// not contain reference to its source. Also for events of type
/// \#TYPE_NOTIFICATION_STATE_CHANGED the source is never available.
///
///
///
/// This class represents various semantically different accessibility event
/// types. Each event type has an associated set of related properties. In other
/// words, each event type is characterized via a subset of the properties exposed
/// by this class. For each event type there is a corresponding constant defined
/// in this class. Follows a specification of the event types and their associated properties:
///
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about creating and processing AccessibilityEvents, read the
/// <a href="{@docRoot}guide/topics/ui/accessibility/index.html">Accessibility</a>
/// developer guide.
///
/// </div>
///
/// __VIEW TYPES__</br>
///
///
///
/// __View clicked__ - represents the event of clicking on a android.view.View
/// like android.widget.Button, android.widget.CompoundButton, etc.</br>
/// _Type:_\#TYPE_VIEW_CLICKED</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
/// </ul>
///
///
///
/// __View long clicked__ - represents the event of long clicking on a android.view.View
/// like android.widget.Button, android.widget.CompoundButton, etc </br>
/// _Type:_\#TYPE_VIEW_LONG_CLICKED</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
/// </ul>
///
///
///
/// __View selected__ - represents the event of selecting an item usually in
/// the context of an android.widget.AdapterView.</br>
/// _Type:_ \#TYPE_VIEW_SELECTED</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
/// </ul>
///
///
///
/// __View focused__ - represents the event of focusing a
/// android.view.View.</br>
/// _Type:_ \#TYPE_VIEW_FOCUSED</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
/// </ul>
///
///
///
/// __View text changed__ - represents the event of changing the text of an
/// android.widget.EditText.</br>
/// _Type:_ \#TYPE_VIEW_TEXT_CHANGED</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
///   <li>\#getText() - The new text of the source.</li>
///   <li>\#getBeforeText() - The text of the source before the change.</li>
///   <li>\#getFromIndex() - The text change start index.</li>
///   <li>\#getAddedCount() - The number of added characters.</li>
///   <li>\#getRemovedCount() - The number of removed characters.</li>
/// </ul>
///
///
///
/// __View text selection changed__ - represents the event of changing the text
/// selection of an android.widget.EditText.</br>
/// _Type:_ \#TYPE_VIEW_TEXT_SELECTION_CHANGED </br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
/// </ul>
///
///
/// __View text traversed at movement granularity__ - represents the event of traversing the
/// text of a view at a given granularity. For example, moving to the next word.</br>
/// _Type:_ \#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY </br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
///   <li>\#getMovementGranularity() - Sets the granularity at which a view's text
///       was traversed.</li>
///   <li>\#getText() -  The text of the source's sub-tree.</li>
///   <li>\#getFromIndex() - The start the text that was skipped over in this movement.
///       This is the starting point when moving forward through the text, but not when moving
///       back.</li>
///   <li>\#getToIndex() - The end of the text that was skipped over in this movement.
///       This is the ending point when moving forward through the text, but not when moving
///       back.</li>
///   <li>\#getAction() - Gets traversal action which specifies the direction.</li>
/// </ul>
///
///
///
/// __View scrolled__ - represents the event of scrolling a view. </br>
/// _Type:_ \#TYPE_VIEW_SCROLLED</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
///   <li>\#getScrollDeltaX() - The difference in the horizontal position.</li>
///   <li>\#getScrollDeltaY() - The difference in the vertical position.</li>
/// </ul>
///
///
///
/// __TRANSITION TYPES__</br>
///
///
///
/// __Window state changed__ - represents the event of a change to a section of
/// the user interface that is visually distinct. Should be sent from either the
/// root view of a window or from a view that is marked as a pane
/// android.view.View\#setAccessibilityPaneTitle(CharSequence). Not that changes
/// to true windows are represented by \#TYPE_WINDOWS_CHANGED.</br>
/// _Type:_ \#TYPE_WINDOW_STATE_CHANGED</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getContentChangeTypes() - The type of state changes.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
///   <li>\#getText() - The text of the source's sub-tree, including the pane titles.</li>
/// </ul>
///
///
///
/// __Window content changed__ - represents the event of change in the
/// content of a window. This change can be adding/removing view, changing
/// a view size, etc.</br>
///
///
///
/// _Type:_ \#TYPE_WINDOW_CONTENT_CHANGED</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getContentChangeTypes() - The type of content changes.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
/// </ul>
///
///
///
/// __Windows changed__ - represents a change in the windows shown on
/// the screen such as a window appeared, a window disappeared, a window size changed,
/// a window layer changed, etc. These events should only come from the system, which is responsible
/// for managing windows. The list of windows is available from
/// android.accessibilityservice.AccessibilityService\#getWindows().
/// For regions of the user interface that are presented as windows but are
/// controlled by an app's process, use \#TYPE_WINDOW_STATE_CHANGED.</br>
/// _Type:_ \#TYPE_WINDOWS_CHANGED</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getEventTime() - The event time.</li>
///   <li>\#getWindowChanges()</li> - The specific change to the source window
/// </ul>
/// _Note:_ You can retrieve the AccessibilityWindowInfo for the window
/// source of the event by looking through the list returned by
/// android.accessibilityservice.AccessibilityService\#getWindows() for the window whose ID
/// matches \#getWindowId().
///
///
///
/// __NOTIFICATION TYPES__</br>
///
///
///
/// __Notification state changed__ - represents the event showing a transient piece of information
/// to the user. This information may be a android.app.Notification or
/// android.widget.Toast.</br>
/// _Type:_ \#TYPE_NOTIFICATION_STATE_CHANGED</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
///   <li>\#getParcelableData() - The posted android.app.Notification, if
///   applicable.</li>
///   <li>\#getText() - Displayed text of the android.widget.Toast, if applicable,
///   or may contain text from the android.app.Notification, although
///   \#getParcelableData() is a richer set of data for android.app.Notification.</li>
/// </ul>
///
///
///
/// __EXPLORATION TYPES__</br>
///
///
///
/// __View hover enter__ - represents the event of beginning to hover
/// over a android.view.View. The hover may be generated via
/// exploring the screen by touch or via a pointing device.</br>
/// _Type:_ \#TYPE_VIEW_HOVER_ENTER</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
/// </ul>
///
///
/// __View hover exit__ - represents the event of stopping to hover
/// over a android.view.View. The hover may be generated via
/// exploring the screen by touch or via a pointing device.</br>
/// _Type:_ \#TYPE_VIEW_HOVER_EXIT</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
/// </ul>
///
///
///
/// __Touch interaction start__ - represents the event of starting a touch
/// interaction, which is the user starts touching the screen.</br>
/// _Type:_ \#TYPE_TOUCH_INTERACTION_START</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
/// </ul>
/// _Note:_ This event is fired only by the system and is not passed to the
/// view tree to be populated.</br>
///
///
///
/// __Touch interaction end__ - represents the event of ending a touch
/// interaction, which is the user stops touching the screen.</br>
/// _Type:_ \#TYPE_TOUCH_INTERACTION_END</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
/// </ul>
/// _Note:_ This event is fired only by the system and is not passed to the
/// view tree to be populated.</br>
///
///
///
/// __Touch exploration gesture start__ - represents the event of starting a touch
/// exploring gesture.</br>
/// _Type:_ \#TYPE_TOUCH_EXPLORATION_GESTURE_START</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
/// </ul>
/// _Note:_ This event is fired only by the system and is not passed to the
/// view tree to be populated.</br>
///
///
///
/// __Touch exploration gesture end__ - represents the event of ending a touch
/// exploring gesture.</br>
/// _Type:_ \#TYPE_TOUCH_EXPLORATION_GESTURE_END</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
/// </ul>
/// _Note:_ This event is fired only by the system and is not passed to the
/// view tree to be populated.</br>
///
///
///
/// __Touch gesture detection start__ - represents the event of starting a user
/// gesture detection.</br>
/// _Type:_ \#TYPE_GESTURE_DETECTION_START</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
/// </ul>
/// _Note:_ This event is fired only by the system and is not passed to the
/// view tree to be populated.</br>
///
///
///
/// __Touch gesture detection end__ - represents the event of ending a user
/// gesture detection.</br>
/// _Type:_ \#TYPE_GESTURE_DETECTION_END</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
/// </ul>
/// _Note:_ This event is fired only by the system and is not passed to the
/// view tree to be populated.</br>
///
///
///
/// __MISCELLANEOUS TYPES__</br>
///
///
///
/// __Announcement__ - represents the event of an application requesting a screen reader to make
/// an announcement. Because the event carries no semantic meaning, this event is appropriate only
/// in exceptional situations where additional screen reader output is needed but other types of
/// accessibility services do not need to be aware of the change.</br>
/// _Type:_ \#TYPE_ANNOUNCEMENT</br>
/// _Properties:_</br>
/// <ul>
///   <li>\#getEventType() - The type of the event.</li>
///   <li>\#getSource() - The source info (for registered clients).</li>
///   <li>\#getClassName() - The class name of the source.</li>
///   <li>\#getPackageName() - The package name of the source.</li>
///   <li>\#getEventTime()  - The event time.</li>
///   <li>\#getText() - The text of the announcement.</li>
/// </ul>
///
///
///@see android.view.accessibility.AccessibilityManager
///@see android.accessibilityservice.AccessibilityService
///@see AccessibilityNodeInfo
class AccessibilityEvent extends accessibilityrecord_.AccessibilityRecord {
  static final _classRef =
      jniAccessors.getClassOf("android/view/accessibility/AccessibilityEvent");
  AccessibilityEvent.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION
  ///
  /// Change type for \#TYPE_WINDOW_CONTENT_CHANGED event:
  /// The node's content description changed.
  static const CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION = 4;

  /// from: static public final int CONTENT_CHANGE_TYPE_PANE_APPEARED
  ///
  /// Change type for \#TYPE_WINDOW_STATE_CHANGED event:
  /// The node has a pane title, and either just appeared or just was assigned a title when it
  /// had none before.
  static const CONTENT_CHANGE_TYPE_PANE_APPEARED = 16;

  /// from: static public final int CONTENT_CHANGE_TYPE_PANE_DISAPPEARED
  ///
  /// Change type for \#TYPE_WINDOW_STATE_CHANGED event:
  /// Can mean one of two slightly different things. The primary meaning is that the node has
  /// a pane title, and was removed from the node hierarchy. It will also be sent if the pane
  /// title is set to {@code null} after it contained a title.
  /// No source will be returned if the node is no longer on the screen. To make the change more
  /// clear for the user, the first entry in \#getText() will return the value that would
  /// have been returned by {@code getSource().getPaneTitle()}.
  static const CONTENT_CHANGE_TYPE_PANE_DISAPPEARED = 32;

  /// from: static public final int CONTENT_CHANGE_TYPE_PANE_TITLE
  ///
  /// Change type for \#TYPE_WINDOW_STATE_CHANGED event:
  /// The node's pane title changed.
  static const CONTENT_CHANGE_TYPE_PANE_TITLE = 8;

  /// from: static public final int CONTENT_CHANGE_TYPE_SUBTREE
  ///
  /// Change type for \#TYPE_WINDOW_CONTENT_CHANGED event:
  /// One or more content changes occurred in the the subtree rooted at the source node,
  /// or the subtree's structure changed when a node was added or removed.
  static const CONTENT_CHANGE_TYPE_SUBTREE = 1;

  /// from: static public final int CONTENT_CHANGE_TYPE_TEXT
  ///
  /// Change type for \#TYPE_WINDOW_CONTENT_CHANGED event:
  /// The node's text changed.
  static const CONTENT_CHANGE_TYPE_TEXT = 2;

  /// from: static public final int CONTENT_CHANGE_TYPE_UNDEFINED
  ///
  /// Change type for \#TYPE_WINDOW_CONTENT_CHANGED event:
  /// The type of change is not defined.
  static const CONTENT_CHANGE_TYPE_UNDEFINED = 0;

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.accessibility.AccessibilityEvent> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @see Parcelable.Creator
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int INVALID_POSITION
  ///
  /// Invalid selection/focus position.
  ///@see \#getCurrentItemIndex()
  static const INVALID_POSITION = -1;

  /// from: static public final int MAX_TEXT_LENGTH
  ///
  /// Maximum length of the text fields.
  ///@see \#getBeforeText()
  ///@see \#getText() </br>
  /// Note: This constant is no longer needed since there
  ///       is no limit on the length of text that is contained
  ///       in an accessibility event anymore.
  static const MAX_TEXT_LENGTH = 500;

  /// from: static public final int TYPES_ALL_MASK
  ///
  /// Mask for AccessibilityEvent all types.
  ///@see \#TYPE_VIEW_CLICKED
  ///@see \#TYPE_VIEW_LONG_CLICKED
  ///@see \#TYPE_VIEW_SELECTED
  ///@see \#TYPE_VIEW_FOCUSED
  ///@see \#TYPE_VIEW_TEXT_CHANGED
  ///@see \#TYPE_WINDOW_STATE_CHANGED
  ///@see \#TYPE_NOTIFICATION_STATE_CHANGED
  ///@see \#TYPE_VIEW_HOVER_ENTER
  ///@see \#TYPE_VIEW_HOVER_EXIT
  ///@see \#TYPE_TOUCH_EXPLORATION_GESTURE_START
  ///@see \#TYPE_TOUCH_EXPLORATION_GESTURE_END
  ///@see \#TYPE_WINDOW_CONTENT_CHANGED
  ///@see \#TYPE_VIEW_SCROLLED
  ///@see \#TYPE_VIEW_TEXT_SELECTION_CHANGED
  ///@see \#TYPE_ANNOUNCEMENT
  ///@see \#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY
  ///@see \#TYPE_GESTURE_DETECTION_START
  ///@see \#TYPE_GESTURE_DETECTION_END
  ///@see \#TYPE_TOUCH_INTERACTION_START
  ///@see \#TYPE_TOUCH_INTERACTION_END
  ///@see \#TYPE_WINDOWS_CHANGED
  ///@see \#TYPE_VIEW_CONTEXT_CLICKED
  static const TYPES_ALL_MASK = -1;

  /// from: static public final int TYPE_ANNOUNCEMENT
  ///
  /// Represents the event of an application making an announcement.
  static const TYPE_ANNOUNCEMENT = 16384;

  /// from: static public final int TYPE_ASSIST_READING_CONTEXT
  ///
  /// Represents the event of the assistant currently reading the users screen context.
  static const TYPE_ASSIST_READING_CONTEXT = 16777216;

  /// from: static public final int TYPE_GESTURE_DETECTION_END
  ///
  /// Represents the event of ending gesture detection.
  static const TYPE_GESTURE_DETECTION_END = 524288;

  /// from: static public final int TYPE_GESTURE_DETECTION_START
  ///
  /// Represents the event of beginning gesture detection.
  static const TYPE_GESTURE_DETECTION_START = 262144;

  /// from: static public final int TYPE_NOTIFICATION_STATE_CHANGED
  ///
  /// Represents the event showing a android.app.Notification.
  static const TYPE_NOTIFICATION_STATE_CHANGED = 64;

  /// from: static public final int TYPE_TOUCH_EXPLORATION_GESTURE_END
  ///
  /// Represents the event of ending a touch exploration gesture.
  static const TYPE_TOUCH_EXPLORATION_GESTURE_END = 1024;

  /// from: static public final int TYPE_TOUCH_EXPLORATION_GESTURE_START
  ///
  /// Represents the event of starting a touch exploration gesture.
  static const TYPE_TOUCH_EXPLORATION_GESTURE_START = 512;

  /// from: static public final int TYPE_TOUCH_INTERACTION_END
  ///
  /// Represents the event of the user ending to touch the screen.
  static const TYPE_TOUCH_INTERACTION_END = 2097152;

  /// from: static public final int TYPE_TOUCH_INTERACTION_START
  ///
  /// Represents the event of the user starting to touch the screen.
  static const TYPE_TOUCH_INTERACTION_START = 1048576;

  /// from: static public final int TYPE_VIEW_ACCESSIBILITY_FOCUSED
  ///
  /// Represents the event of gaining accessibility focus.
  static const TYPE_VIEW_ACCESSIBILITY_FOCUSED = 32768;

  /// from: static public final int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED
  ///
  /// Represents the event of clearing accessibility focus.
  static const TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED = 65536;

  /// from: static public final int TYPE_VIEW_CLICKED
  ///
  /// Represents the event of clicking on a android.view.View like
  /// android.widget.Button, android.widget.CompoundButton, etc.
  static const TYPE_VIEW_CLICKED = 1;

  /// from: static public final int TYPE_VIEW_CONTEXT_CLICKED
  ///
  /// Represents the event of a context click on a android.view.View.
  static const TYPE_VIEW_CONTEXT_CLICKED = 8388608;

  /// from: static public final int TYPE_VIEW_FOCUSED
  ///
  /// Represents the event of setting input focus of a android.view.View.
  static const TYPE_VIEW_FOCUSED = 8;

  /// from: static public final int TYPE_VIEW_HOVER_ENTER
  ///
  /// Represents the event of a hover enter over a android.view.View.
  static const TYPE_VIEW_HOVER_ENTER = 128;

  /// from: static public final int TYPE_VIEW_HOVER_EXIT
  ///
  /// Represents the event of a hover exit over a android.view.View.
  static const TYPE_VIEW_HOVER_EXIT = 256;

  /// from: static public final int TYPE_VIEW_LONG_CLICKED
  ///
  /// Represents the event of long clicking on a android.view.View like
  /// android.widget.Button, android.widget.CompoundButton, etc.
  static const TYPE_VIEW_LONG_CLICKED = 2;

  /// from: static public final int TYPE_VIEW_SCROLLED
  ///
  /// Represents the event of scrolling a view. This event type is generally not sent directly.
  ///@see View\#onScrollChanged(int, int, int, int)
  static const TYPE_VIEW_SCROLLED = 4096;

  /// from: static public final int TYPE_VIEW_SELECTED
  ///
  /// Represents the event of selecting an item usually in the context of an
  /// android.widget.AdapterView.
  static const TYPE_VIEW_SELECTED = 4;

  /// from: static public final int TYPE_VIEW_TEXT_CHANGED
  ///
  /// Represents the event of changing the text of an android.widget.EditText.
  static const TYPE_VIEW_TEXT_CHANGED = 16;

  /// from: static public final int TYPE_VIEW_TEXT_SELECTION_CHANGED
  ///
  /// Represents the event of changing the selection in an android.widget.EditText.
  static const TYPE_VIEW_TEXT_SELECTION_CHANGED = 8192;

  /// from: static public final int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY
  ///
  /// Represents the event of traversing the text of a view at a given movement granularity.
  static const TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY = 131072;

  /// from: static public final int TYPE_WINDOWS_CHANGED
  ///
  /// Represents the event change in the system windows shown on the screen. This event type should
  /// only be dispatched by the system.
  static const TYPE_WINDOWS_CHANGED = 4194304;

  /// from: static public final int TYPE_WINDOW_CONTENT_CHANGED
  ///
  /// Represents the event of changing the content of a window and more
  /// specifically the sub-tree rooted at the event's source.
  static const TYPE_WINDOW_CONTENT_CHANGED = 2048;

  /// from: static public final int TYPE_WINDOW_STATE_CHANGED
  ///
  /// Represents the event of a change to a visually distinct section of the user interface.
  /// These events should only be dispatched from android.view.Views that have
  /// accessibility pane titles, and replaces \#TYPE_WINDOW_CONTENT_CHANGED for those
  /// sources. Details about the change are available from \#getContentChangeTypes().
  static const TYPE_WINDOW_STATE_CHANGED = 32;

  /// from: static public final int WINDOWS_CHANGE_ACCESSIBILITY_FOCUSED
  ///
  /// Change type for \#TYPE_WINDOWS_CHANGED event:
  /// The window's AccessibilityWindowInfo\#isAccessibilityFocused() changed.
  static const WINDOWS_CHANGE_ACCESSIBILITY_FOCUSED = 128;

  /// from: static public final int WINDOWS_CHANGE_ACTIVE
  ///
  /// Change type for \#TYPE_WINDOWS_CHANGED event:
  /// The window's AccessibilityWindowInfo\#isActive() changed.
  static const WINDOWS_CHANGE_ACTIVE = 32;

  /// from: static public final int WINDOWS_CHANGE_ADDED
  ///
  /// Change type for \#TYPE_WINDOWS_CHANGED event:
  /// The window was added.
  static const WINDOWS_CHANGE_ADDED = 1;

  /// from: static public final int WINDOWS_CHANGE_BOUNDS
  ///
  /// Change type for \#TYPE_WINDOWS_CHANGED event:
  /// The window's bounds changed.
  static const WINDOWS_CHANGE_BOUNDS = 8;

  /// from: static public final int WINDOWS_CHANGE_CHILDREN
  ///
  /// Change type for \#TYPE_WINDOWS_CHANGED event:
  /// The window's children changed.
  static const WINDOWS_CHANGE_CHILDREN = 512;

  /// from: static public final int WINDOWS_CHANGE_FOCUSED
  ///
  /// Change type for \#TYPE_WINDOWS_CHANGED event:
  /// The window's AccessibilityWindowInfo\#isFocused() changed.
  static const WINDOWS_CHANGE_FOCUSED = 64;

  /// from: static public final int WINDOWS_CHANGE_LAYER
  ///
  /// Change type for \#TYPE_WINDOWS_CHANGED event:
  /// The window's layer changed.
  static const WINDOWS_CHANGE_LAYER = 16;

  /// from: static public final int WINDOWS_CHANGE_PARENT
  ///
  /// Change type for \#TYPE_WINDOWS_CHANGED event:
  /// The window's parent changed.
  static const WINDOWS_CHANGE_PARENT = 256;

  /// from: static public final int WINDOWS_CHANGE_PIP
  ///
  /// Change type for \#TYPE_WINDOWS_CHANGED event:
  /// The window either entered or exited picture-in-picture mode.
  static const WINDOWS_CHANGE_PIP = 1024;

  /// from: static public final int WINDOWS_CHANGE_REMOVED
  ///
  /// Change type for \#TYPE_WINDOWS_CHANGED event:
  /// A window was removed.
  static const WINDOWS_CHANGE_REMOVED = 2;

  /// from: static public final int WINDOWS_CHANGE_TITLE
  ///
  /// Change type for \#TYPE_WINDOWS_CHANGED event:
  /// The window's title changed.
  static const WINDOWS_CHANGE_TITLE = 4;

  static final _id_getRecordCount =
      jniAccessors.getMethodIDOf(_classRef, "getRecordCount", "()I");

  /// from: public int getRecordCount()
  ///
  /// Gets the number of records contained in the event.
  ///@return The number of records.
  int getRecordCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getRecordCount, jni.JniType.intType, []).integer;

  static final _id_appendRecord = jniAccessors.getMethodIDOf(_classRef,
      "appendRecord", "(Landroid/view/accessibility/AccessibilityRecord;)V");

  /// from: public void appendRecord(android.view.accessibility.AccessibilityRecord record)
  ///
  /// Appends an AccessibilityRecord to the end of event records.
  ///@param record The record to append.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void appendRecord(accessibilityrecord_.AccessibilityRecord record) =>
      jniAccessors.callMethodWithArgs(reference, _id_appendRecord,
          jni.JniType.voidType, [record.reference]).check();

  static final _id_getRecord = jniAccessors.getMethodIDOf(_classRef,
      "getRecord", "(I)Landroid/view/accessibility/AccessibilityRecord;");

  /// from: public android.view.accessibility.AccessibilityRecord getRecord(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the record at a given index.
  ///@param index The index.
  ///@return The record at the specified index.
  accessibilityrecord_.AccessibilityRecord getRecord(int index) =>
      accessibilityrecord_.AccessibilityRecord.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getRecord, jni.JniType.objectType,
              [index]).object);

  static final _id_getEventType =
      jniAccessors.getMethodIDOf(_classRef, "getEventType", "()I");

  /// from: public int getEventType()
  ///
  /// Gets the event type.
  ///@return The event type.
  ///
  /// Value is either <code>0</code> or a combination of android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_CLICKED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_LONG_CLICKED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_SELECTED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_FOCUSED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_WINDOW_STATE_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_NOTIFICATION_STATE_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_HOVER_ENTER, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_HOVER_EXIT, android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_EXPLORATION_GESTURE_START, android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_EXPLORATION_GESTURE_END, android.view.accessibility.AccessibilityEvent\#TYPE_WINDOW_CONTENT_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_SCROLLED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_SELECTION_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_ANNOUNCEMENT, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_ACCESSIBILITY_FOCUSED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY, android.view.accessibility.AccessibilityEvent\#TYPE_GESTURE_DETECTION_START, android.view.accessibility.AccessibilityEvent\#TYPE_GESTURE_DETECTION_END, android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_INTERACTION_START, android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_INTERACTION_END, android.view.accessibility.AccessibilityEvent\#TYPE_WINDOWS_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_CONTEXT_CLICKED, and android.view.accessibility.AccessibilityEvent\#TYPE_ASSIST_READING_CONTEXT
  int getEventType() => jniAccessors.callMethodWithArgs(
      reference, _id_getEventType, jni.JniType.intType, []).integer;

  static final _id_getContentChangeTypes =
      jniAccessors.getMethodIDOf(_classRef, "getContentChangeTypes", "()I");

  /// from: public int getContentChangeTypes()
  ///
  /// Gets the bit mask of change types signaled by a
  /// \#TYPE_WINDOW_CONTENT_CHANGED event or \#TYPE_WINDOW_STATE_CHANGED. A single
  /// event may represent multiple change types.
  ///@return The bit mask of change types. One or more of:
  ///         <ul>
  ///         <li>\#CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION
  ///         <li>\#CONTENT_CHANGE_TYPE_SUBTREE
  ///         <li>\#CONTENT_CHANGE_TYPE_TEXT
  ///         <li>\#CONTENT_CHANGE_TYPE_PANE_TITLE
  ///         <li>\#CONTENT_CHANGE_TYPE_UNDEFINED
  ///         </ul>
  ///
  /// Value is either <code>0</code> or a combination of android.view.accessibility.AccessibilityEvent\#CONTENT_CHANGE_TYPE_UNDEFINED, android.view.accessibility.AccessibilityEvent\#CONTENT_CHANGE_TYPE_SUBTREE, android.view.accessibility.AccessibilityEvent\#CONTENT_CHANGE_TYPE_TEXT, android.view.accessibility.AccessibilityEvent\#CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION, and android.view.accessibility.AccessibilityEvent\#CONTENT_CHANGE_TYPE_PANE_TITLE
  int getContentChangeTypes() => jniAccessors.callMethodWithArgs(
      reference, _id_getContentChangeTypes, jni.JniType.intType, []).integer;

  static final _id_setContentChangeTypes =
      jniAccessors.getMethodIDOf(_classRef, "setContentChangeTypes", "(I)V");

  /// from: public void setContentChangeTypes(int changeTypes)
  ///
  /// Sets the bit mask of node tree changes signaled by an
  /// \#TYPE_WINDOW_CONTENT_CHANGED event.
  ///@param changeTypes The bit mask of change types.
  /// Value is either <code>0</code> or a combination of android.view.accessibility.AccessibilityEvent\#CONTENT_CHANGE_TYPE_UNDEFINED, android.view.accessibility.AccessibilityEvent\#CONTENT_CHANGE_TYPE_SUBTREE, android.view.accessibility.AccessibilityEvent\#CONTENT_CHANGE_TYPE_TEXT, android.view.accessibility.AccessibilityEvent\#CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION, and android.view.accessibility.AccessibilityEvent\#CONTENT_CHANGE_TYPE_PANE_TITLE
  ///@throws IllegalStateException If called from an AccessibilityService.
  ///@see \#getContentChangeTypes()
  void setContentChangeTypes(int changeTypes) =>
      jniAccessors.callMethodWithArgs(reference, _id_setContentChangeTypes,
          jni.JniType.voidType, [changeTypes]).check();

  static final _id_getWindowChanges =
      jniAccessors.getMethodIDOf(_classRef, "getWindowChanges", "()I");

  /// from: public int getWindowChanges()
  ///
  /// Get the bit mask of change types signaled by a \#TYPE_WINDOWS_CHANGED event. A
  /// single event may represent multiple change types.
  ///@return The bit mask of change types.
  ///
  /// Value is either <code>0</code> or a combination of android.view.accessibility.AccessibilityEvent\#WINDOWS_CHANGE_ADDED, android.view.accessibility.AccessibilityEvent\#WINDOWS_CHANGE_REMOVED, android.view.accessibility.AccessibilityEvent\#WINDOWS_CHANGE_TITLE, android.view.accessibility.AccessibilityEvent\#WINDOWS_CHANGE_BOUNDS, android.view.accessibility.AccessibilityEvent\#WINDOWS_CHANGE_LAYER, android.view.accessibility.AccessibilityEvent\#WINDOWS_CHANGE_ACTIVE, android.view.accessibility.AccessibilityEvent\#WINDOWS_CHANGE_FOCUSED, android.view.accessibility.AccessibilityEvent\#WINDOWS_CHANGE_ACCESSIBILITY_FOCUSED, android.view.accessibility.AccessibilityEvent\#WINDOWS_CHANGE_PARENT, android.view.accessibility.AccessibilityEvent\#WINDOWS_CHANGE_CHILDREN, and android.view.accessibility.AccessibilityEvent\#WINDOWS_CHANGE_PIP
  int getWindowChanges() => jniAccessors.callMethodWithArgs(
      reference, _id_getWindowChanges, jni.JniType.intType, []).integer;

  static final _id_setEventType =
      jniAccessors.getMethodIDOf(_classRef, "setEventType", "(I)V");

  /// from: public void setEventType(int eventType)
  ///
  /// Sets the event type.
  ///@param eventType The event type.
  ///
  /// Value is either <code>0</code> or a combination of android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_CLICKED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_LONG_CLICKED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_SELECTED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_FOCUSED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_WINDOW_STATE_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_NOTIFICATION_STATE_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_HOVER_ENTER, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_HOVER_EXIT, android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_EXPLORATION_GESTURE_START, android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_EXPLORATION_GESTURE_END, android.view.accessibility.AccessibilityEvent\#TYPE_WINDOW_CONTENT_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_SCROLLED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_SELECTION_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_ANNOUNCEMENT, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_ACCESSIBILITY_FOCUSED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY, android.view.accessibility.AccessibilityEvent\#TYPE_GESTURE_DETECTION_START, android.view.accessibility.AccessibilityEvent\#TYPE_GESTURE_DETECTION_END, android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_INTERACTION_START, android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_INTERACTION_END, android.view.accessibility.AccessibilityEvent\#TYPE_WINDOWS_CHANGED, android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_CONTEXT_CLICKED, and android.view.accessibility.AccessibilityEvent\#TYPE_ASSIST_READING_CONTEXT
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setEventType(int eventType) => jniAccessors.callMethodWithArgs(
      reference, _id_setEventType, jni.JniType.voidType, [eventType]).check();

  static final _id_getEventTime =
      jniAccessors.getMethodIDOf(_classRef, "getEventTime", "()J");

  /// from: public long getEventTime()
  ///
  /// Gets the time in which this event was sent.
  ///@return The event time.
  int getEventTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getEventTime, jni.JniType.longType, []).long;

  static final _id_setEventTime =
      jniAccessors.getMethodIDOf(_classRef, "setEventTime", "(J)V");

  /// from: public void setEventTime(long eventTime)
  ///
  /// Sets the time in which this event was sent.
  ///@param eventTime The event time.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setEventTime(int eventTime) => jniAccessors.callMethodWithArgs(
      reference, _id_setEventTime, jni.JniType.voidType, [eventTime]).check();

  static final _id_getPackageName = jniAccessors.getMethodIDOf(
      _classRef, "getPackageName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getPackageName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the package name of the source.
  ///@return The package name.
  jni.JniObject getPackageName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPackageName, jni.JniType.objectType, []).object);

  static final _id_setPackageName = jniAccessors.getMethodIDOf(
      _classRef, "setPackageName", "(Ljava/lang/CharSequence;)V");

  /// from: public void setPackageName(java.lang.CharSequence packageName)
  ///
  /// Sets the package name of the source.
  ///@param packageName The package name.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setPackageName(jni.JniObject packageName) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPackageName,
          jni.JniType.voidType, [packageName.reference]).check();

  static final _id_setMovementGranularity =
      jniAccessors.getMethodIDOf(_classRef, "setMovementGranularity", "(I)V");

  /// from: public void setMovementGranularity(int granularity)
  ///
  /// Sets the movement granularity that was traversed.
  ///@param granularity The granularity.
  ///@throws IllegalStateException If called from an AccessibilityService.
  void setMovementGranularity(int granularity) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMovementGranularity,
          jni.JniType.voidType, [granularity]).check();

  static final _id_getMovementGranularity =
      jniAccessors.getMethodIDOf(_classRef, "getMovementGranularity", "()I");

  /// from: public int getMovementGranularity()
  ///
  /// Gets the movement granularity that was traversed.
  ///@return The granularity.
  int getMovementGranularity() => jniAccessors.callMethodWithArgs(
      reference, _id_getMovementGranularity, jni.JniType.intType, []).integer;

  static final _id_setAction =
      jniAccessors.getMethodIDOf(_classRef, "setAction", "(I)V");

  /// from: public void setAction(int action)
  ///
  /// Sets the performed action that triggered this event.
  ///
  /// Valid actions are defined in AccessibilityNodeInfo:
  /// <ul>
  /// <li>AccessibilityNodeInfo\#ACTION_ACCESSIBILITY_FOCUS
  /// <li>AccessibilityNodeInfo\#ACTION_CLEAR_ACCESSIBILITY_FOCUS
  /// <li>AccessibilityNodeInfo\#ACTION_CLEAR_FOCUS
  /// <li>AccessibilityNodeInfo\#ACTION_CLEAR_SELECTION
  /// <li>AccessibilityNodeInfo\#ACTION_CLICK
  /// <li>etc.
  /// </ul>
  ///@param action The action.
  ///@throws IllegalStateException If called from an AccessibilityService.
  ///@see AccessibilityNodeInfo\#performAction(int)
  void setAction(int action) => jniAccessors.callMethodWithArgs(
      reference, _id_setAction, jni.JniType.voidType, [action]).check();

  static final _id_getAction =
      jniAccessors.getMethodIDOf(_classRef, "getAction", "()I");

  /// from: public int getAction()
  ///
  /// Gets the performed action that triggered this event.
  ///@return The action.
  int getAction() => jniAccessors.callMethodWithArgs(
      reference, _id_getAction, jni.JniType.intType, []).integer;

  static final _id_obtain2 = jniAccessors.getStaticMethodIDOf(_classRef,
      "obtain", "(I)Landroid/view/accessibility/AccessibilityEvent;");

  /// from: static public android.view.accessibility.AccessibilityEvent obtain(int eventType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a cached instance if such is available or a new one is
  /// instantiated with its type property set.
  ///@param eventType The event type.
  ///@return An instance.
  static AccessibilityEvent obtain2(int eventType) =>
      AccessibilityEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_obtain2, jni.JniType.objectType, [eventType]).object);

  static final _id_obtain3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "obtain",
      "(Landroid/view/accessibility/AccessibilityEvent;)Landroid/view/accessibility/AccessibilityEvent;");

  /// from: static public android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent event)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a cached instance if such is available or a new one is
  /// created. The returned instance is initialized from the given
  /// <code>event</code>.
  ///@param event The other event.
  ///@return An instance.
  static AccessibilityEvent obtain3(AccessibilityEvent event) =>
      AccessibilityEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_obtain3,
          jni.JniType.objectType,
          [event.reference]).object);

  static final _id_obtain4 = jniAccessors.getStaticMethodIDOf(
      _classRef, "obtain", "()Landroid/view/accessibility/AccessibilityEvent;");

  /// from: static public android.view.accessibility.AccessibilityEvent obtain()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a cached instance if such is available or a new one is
  /// instantiated.
  ///@return An instance.
  static AccessibilityEvent obtain4() =>
      AccessibilityEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_obtain4, jni.JniType.objectType, []).object);

  static final _id_recycle =
      jniAccessors.getMethodIDOf(_classRef, "recycle", "()V");

  /// from: public void recycle()
  ///
  /// Recycles an instance back to be reused.
  ///
  ///   __Note: You must not touch the object after calling this function.__
  ///
  ///
  ///@throws IllegalStateException If the event is already recycled.
  void recycle() => jniAccessors.callMethodWithArgs(
      reference, _id_recycle, jni.JniType.voidType, []).check();

  static final _id_initFromParcel = jniAccessors.getMethodIDOf(
      _classRef, "initFromParcel", "(Landroid/os/Parcel;)V");

  /// from: public void initFromParcel(android.os.Parcel parcel)
  ///
  /// Creates a new instance from a Parcel.
  ///@param parcel A parcel containing the state of a AccessibilityEvent.
  void initFromParcel(parcel_.Parcel parcel) => jniAccessors.callMethodWithArgs(
      reference,
      _id_initFromParcel,
      jni.JniType.voidType,
      [parcel.reference]).check();

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  ///
  /// {@inheritDoc}
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// {@inheritDoc}
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_eventTypeToString = jniAccessors.getStaticMethodIDOf(
      _classRef, "eventTypeToString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String eventTypeToString(int eventType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the string representation of an event type. For example,
  /// \#TYPE_VIEW_CLICKED is represented by the string TYPE_VIEW_CLICKED.
  ///@param eventType The event type
  ///@return The string representation.
  static jni.JniString eventTypeToString(int eventType) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_eventTypeToString, jni.JniType.objectType, [eventType]).object);
}
