// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AccessibilityEvent.dart" as accessibilityevent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.accessibility.AccessibilityEventSource
///
/// This interface is implemented by classes source of AccessibilityEvents.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about making applications accessible, read the
/// <a href="{@docRoot}guide/topics/ui/accessibility/index.html">Accessibility</a>
/// developer guide.
///
/// </div>
class AccessibilityEventSource extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/view/accessibility/AccessibilityEventSource");
  AccessibilityEventSource.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_sendAccessibilityEvent =
      jniAccessors.getMethodIDOf(_classRef, "sendAccessibilityEvent", "(I)V");

  /// from: public abstract void sendAccessibilityEvent(int eventType)
  ///
  /// Handles the request for sending an AccessibilityEvent given
  /// the event type. The method must first check if accessibility is on
  /// via calling AccessibilityManager\#isEnabled() AccessibilityManager.isEnabled(),
  /// obtain an AccessibilityEvent from the event pool through calling
  /// AccessibilityEvent\#obtain(int) AccessibilityEvent.obtain(int), populate the
  /// event, and send it for dispatch via calling
  /// AccessibilityManager\#sendAccessibilityEvent(AccessibilityEvent) AccessibilityManager.sendAccessibilityEvent(AccessibilityEvent).
  ///@see AccessibilityEvent
  ///@see AccessibilityManager
  ///@param eventType The event type.
  void sendAccessibilityEvent(int eventType) => jniAccessors.callMethodWithArgs(
      reference,
      _id_sendAccessibilityEvent,
      jni.JniType.voidType,
      [eventType]).check();

  static final _id_sendAccessibilityEventUnchecked = jniAccessors.getMethodIDOf(
      _classRef,
      "sendAccessibilityEventUnchecked",
      "(Landroid/view/accessibility/AccessibilityEvent;)V");

  /// from: public abstract void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent event)
  ///
  /// Handles the request for sending an AccessibilityEvent. The
  /// method does not guarantee to check if accessibility is on before
  /// sending the event for dispatch. It is responsibility of the caller
  /// to do the check via calling AccessibilityManager\#isEnabled() AccessibilityManager.isEnabled().
  ///@see AccessibilityEvent
  ///@see AccessibilityManager
  ///@param event The event.
  void sendAccessibilityEventUnchecked(
          accessibilityevent_.AccessibilityEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_sendAccessibilityEventUnchecked,
          jni.JniType.voidType,
          [event.reference]).check();
}
