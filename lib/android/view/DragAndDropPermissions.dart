// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.DragAndDropPermissions
///
/// DragAndDropPermissions controls the access permissions for the content URIs associated
/// with a DragEvent.
///
/// Permission are granted when this object is created by android.app.Activity\#requestDragAndDropPermissions(DragEvent) Activity.requestDragAndDropPermissions.
/// Which permissions are granted is defined by the set of flags passed to View\#startDragAndDrop(android.content.ClipData, View.DragShadowBuilder, Object, int) View.startDragAndDrop by the app that started the drag operation.
///
///
///
/// The life cycle of the permissions is bound to the activity used to call android.app.Activity\#requestDragAndDropPermissions(DragEvent) requestDragAndDropPermissions. The
/// permissions are revoked when this activity is destroyed, or when \#release() is called,
/// whichever occurs first.
///
///
///
/// If you anticipate that your application will receive a large number of drops (e.g. document
/// editor), you should try to call \#release() on the obtained permissions as soon as they
/// are no longer required. Permissions can be added to your activity's
/// Activity\#onSaveInstanceState bundle and later retrieved in order to manually release
/// the permissions once they are no longer needed.
///
///
class DragAndDropPermissions extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/DragAndDropPermissions");
  DragAndDropPermissions.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.DragAndDropPermissions> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DragAndDropPermissions(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [in0.reference]).object);

  static final _id_release =
      jniAccessors.getMethodIDOf(_classRef, "release", "()V");

  /// from: public void release()
  ///
  /// Revoke permissions explicitly.
  void release() => jniAccessors.callMethodWithArgs(
      reference, _id_release, jni.JniType.voidType, []).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel destination, int flags)
  void writeToParcel(parcel_.Parcel destination, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [destination.reference, flags]).check();
}
