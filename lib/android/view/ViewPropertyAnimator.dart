// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "View.dart" as view_;

import "../animation/TimeInterpolator.dart" as timeinterpolator_;

import "../animation/Animator.dart" as animator_;

import "../animation/ValueAnimator.dart" as valueanimator_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.ViewPropertyAnimator
///
/// This class enables automatic and optimized animation of select properties on View objects.
/// If only one or two properties on a View object are being animated, then using an
/// android.animation.ObjectAnimator is fine; the property setters called by ObjectAnimator
/// are well equipped to do the right thing to set the property and invalidate the view
/// appropriately. But if several properties are animated simultaneously, or if you just want a
/// more convenient syntax to animate a specific property, then ViewPropertyAnimator might be
/// more well-suited to the task.
///
/// This class may provide better performance for several simultaneous animations, because
/// it will optimize invalidate calls to take place only once for several properties instead of each
/// animated property independently causing its own invalidation. Also, the syntax of using this
/// class could be easier to use because the caller need only tell the View object which
/// property to animate, and the value to animate either to or by, and this class handles the
/// details of configuring the underlying Animator class and starting it.
///
///
/// This class is not constructed by the caller, but rather by the View whose properties
/// it will animate. Calls to android.view.View\#animate() will return a reference
/// to the appropriate ViewPropertyAnimator object for that View.
///
class ViewPropertyAnimator extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/ViewPropertyAnimator");
  ViewPropertyAnimator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/view/View;)V");

  /// from: void <init>(android.view.View view)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor, called by View. This is private by design, as the user should only
  /// get a ViewPropertyAnimator by calling View.animate().
  ///@param view The View associated with this ViewPropertyAnimator
  ViewPropertyAnimator(view_.View view)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [view.reference]).object);

  static final _id_setDuration = jniAccessors.getMethodIDOf(
      _classRef, "setDuration", "(J)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator setDuration(long duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the duration for the underlying animator that animates the requested properties.
  /// By default, the animator uses the default value for ValueAnimator. Calling this method
  /// will cause the declared value to be used instead.
  ///@param duration The length of ensuing property animations, in milliseconds. The value
  /// cannot be negative.
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator setDuration(int duration) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setDuration, jni.JniType.objectType, [duration]).object);

  static final _id_getDuration =
      jniAccessors.getMethodIDOf(_classRef, "getDuration", "()J");

  /// from: public long getDuration()
  ///
  /// Returns the current duration of property animations. If the duration was set on this
  /// object, that value is returned. Otherwise, the default value of the underlying Animator
  /// is returned.
  ///@see \#setDuration(long)
  ///@return The duration of animations, in milliseconds.
  int getDuration() => jniAccessors.callMethodWithArgs(
      reference, _id_getDuration, jni.JniType.longType, []).long;

  static final _id_getStartDelay =
      jniAccessors.getMethodIDOf(_classRef, "getStartDelay", "()J");

  /// from: public long getStartDelay()
  ///
  /// Returns the current startDelay of property animations. If the startDelay was set on this
  /// object, that value is returned. Otherwise, the default value of the underlying Animator
  /// is returned.
  ///@see \#setStartDelay(long)
  ///@return The startDelay of animations, in milliseconds.
  int getStartDelay() => jniAccessors.callMethodWithArgs(
      reference, _id_getStartDelay, jni.JniType.longType, []).long;

  static final _id_setStartDelay = jniAccessors.getMethodIDOf(
      _classRef, "setStartDelay", "(J)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator setStartDelay(long startDelay)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the startDelay for the underlying animator that animates the requested properties.
  /// By default, the animator uses the default value for ValueAnimator. Calling this method
  /// will cause the declared value to be used instead.
  ///@param startDelay The delay of ensuing property animations, in milliseconds. The value
  /// cannot be negative.
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator setStartDelay(int startDelay) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setStartDelay, jni.JniType.objectType, [startDelay]).object);

  static final _id_setInterpolator = jniAccessors.getMethodIDOf(
      _classRef,
      "setInterpolator",
      "(Landroid/animation/TimeInterpolator;)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator interpolator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the interpolator for the underlying animator that animates the requested properties.
  /// By default, the animator uses the default interpolator for ValueAnimator. Calling this method
  /// will cause the declared object to be used instead.
  ///@param interpolator The TimeInterpolator to be used for ensuing property animations. A value
  /// of <code>null</code> will result in linear interpolation.
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator setInterpolator(
          timeinterpolator_.TimeInterpolator interpolator) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setInterpolator,
          jni.JniType.objectType,
          [interpolator.reference]).object);

  static final _id_getInterpolator = jniAccessors.getMethodIDOf(
      _classRef, "getInterpolator", "()Landroid/animation/TimeInterpolator;");

  /// from: public android.animation.TimeInterpolator getInterpolator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the timing interpolator that this animation uses.
  ///@return The timing interpolator for this animation.
  timeinterpolator_.TimeInterpolator getInterpolator() =>
      timeinterpolator_.TimeInterpolator.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getInterpolator,
              jni.JniType.objectType, []).object);

  static final _id_setListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setListener",
      "(Landroid/animation/Animator\$AnimatorListener;)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator setListener(android.animation.Animator.AnimatorListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a listener for events in the underlying Animators that run the property
  /// animations.
  ///@see Animator.AnimatorListener
  ///@param listener The listener to be called with AnimatorListener events. A value of
  /// <code>null</code> removes any existing listener.
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator setListener(
          animator_.Animator_AnimatorListener listener) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setListener,
          jni.JniType.objectType,
          [listener.reference]).object);

  static final _id_setUpdateListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setUpdateListener",
      "(Landroid/animation/ValueAnimator\$AnimatorUpdateListener;)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator setUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a listener for update events in the underlying ValueAnimator that runs
  /// the property animations. Note that the underlying animator is animating between
  /// 0 and 1 (these values are then turned into the actual property values internally
  /// by ViewPropertyAnimator). So the animator cannot give information on the current
  /// values of the properties being animated by this ViewPropertyAnimator, although
  /// the view object itself can be queried to get the current values.
  ///@see android.animation.ValueAnimator.AnimatorUpdateListener
  ///@param listener The listener to be called with update events. A value of
  /// <code>null</code> removes any existing listener.
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator setUpdateListener(
          valueanimator_.ValueAnimator_AnimatorUpdateListener listener) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setUpdateListener,
          jni.JniType.objectType,
          [listener.reference]).object);

  static final _id_start =
      jniAccessors.getMethodIDOf(_classRef, "start", "()V");

  /// from: public void start()
  ///
  /// Starts the currently pending property animations immediately. Calling <code>start()</code>
  /// is optional because all animations start automatically at the next opportunity. However,
  /// if the animations are needed to start immediately and synchronously (not at the time when
  /// the next event is processed by the hierarchy, which is when the animations would begin
  /// otherwise), then this method can be used.
  void start() => jniAccessors.callMethodWithArgs(
      reference, _id_start, jni.JniType.voidType, []).check();

  static final _id_cancel =
      jniAccessors.getMethodIDOf(_classRef, "cancel", "()V");

  /// from: public void cancel()
  ///
  /// Cancels all property animations that are currently running or pending.
  void cancel() => jniAccessors.callMethodWithArgs(
      reference, _id_cancel, jni.JniType.voidType, []).check();

  static final _id_x = jniAccessors.getMethodIDOf(
      _classRef, "x", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator x(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>x</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setX(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator x(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_x, jni.JniType.objectType, [value]).object);

  static final _id_xBy = jniAccessors.getMethodIDOf(
      _classRef, "xBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator xBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>x</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setX(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator xBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_xBy, jni.JniType.objectType, [value]).object);

  static final _id_y = jniAccessors.getMethodIDOf(
      _classRef, "y", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator y(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>y</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setY(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator y(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_y, jni.JniType.objectType, [value]).object);

  static final _id_yBy = jniAccessors.getMethodIDOf(
      _classRef, "yBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator yBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>y</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setY(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator yBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_yBy, jni.JniType.objectType, [value]).object);

  static final _id_z = jniAccessors.getMethodIDOf(
      _classRef, "z", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator z(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>z</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setZ(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator z(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_z, jni.JniType.objectType, [value]).object);

  static final _id_zBy = jniAccessors.getMethodIDOf(
      _classRef, "zBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator zBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>z</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setZ(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator zBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_zBy, jni.JniType.objectType, [value]).object);

  static final _id_rotation = jniAccessors.getMethodIDOf(
      _classRef, "rotation", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator rotation(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>rotation</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setRotation(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator rotation(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_rotation, jni.JniType.objectType, [value]).object);

  static final _id_rotationBy = jniAccessors.getMethodIDOf(
      _classRef, "rotationBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator rotationBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>rotation</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setRotation(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator rotationBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_rotationBy, jni.JniType.objectType, [value]).object);

  static final _id_rotationX = jniAccessors.getMethodIDOf(
      _classRef, "rotationX", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator rotationX(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>rotationX</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setRotationX(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator rotationX(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_rotationX, jni.JniType.objectType, [value]).object);

  static final _id_rotationXBy = jniAccessors.getMethodIDOf(
      _classRef, "rotationXBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator rotationXBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>rotationX</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setRotationX(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator rotationXBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_rotationXBy, jni.JniType.objectType, [value]).object);

  static final _id_rotationY = jniAccessors.getMethodIDOf(
      _classRef, "rotationY", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator rotationY(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>rotationY</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setRotationY(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator rotationY(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_rotationY, jni.JniType.objectType, [value]).object);

  static final _id_rotationYBy = jniAccessors.getMethodIDOf(
      _classRef, "rotationYBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator rotationYBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>rotationY</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setRotationY(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator rotationYBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_rotationYBy, jni.JniType.objectType, [value]).object);

  static final _id_translationX = jniAccessors.getMethodIDOf(
      _classRef, "translationX", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator translationX(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>translationX</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setTranslationX(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator translationX(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_translationX, jni.JniType.objectType, [value]).object);

  static final _id_translationXBy = jniAccessors.getMethodIDOf(
      _classRef, "translationXBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator translationXBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>translationX</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setTranslationX(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator translationXBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_translationXBy, jni.JniType.objectType, [value]).object);

  static final _id_translationY = jniAccessors.getMethodIDOf(
      _classRef, "translationY", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator translationY(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>translationY</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setTranslationY(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator translationY(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_translationY, jni.JniType.objectType, [value]).object);

  static final _id_translationYBy = jniAccessors.getMethodIDOf(
      _classRef, "translationYBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator translationYBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>translationY</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setTranslationY(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator translationYBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_translationYBy, jni.JniType.objectType, [value]).object);

  static final _id_translationZ = jniAccessors.getMethodIDOf(
      _classRef, "translationZ", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator translationZ(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>translationZ</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setTranslationZ(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator translationZ(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_translationZ, jni.JniType.objectType, [value]).object);

  static final _id_translationZBy = jniAccessors.getMethodIDOf(
      _classRef, "translationZBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator translationZBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>translationZ</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setTranslationZ(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator translationZBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_translationZBy, jni.JniType.objectType, [value]).object);

  static final _id_scaleX = jniAccessors.getMethodIDOf(
      _classRef, "scaleX", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator scaleX(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>scaleX</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setScaleX(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator scaleX(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_scaleX, jni.JniType.objectType, [value]).object);

  static final _id_scaleXBy = jniAccessors.getMethodIDOf(
      _classRef, "scaleXBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator scaleXBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>scaleX</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setScaleX(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator scaleXBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_scaleXBy, jni.JniType.objectType, [value]).object);

  static final _id_scaleY = jniAccessors.getMethodIDOf(
      _classRef, "scaleY", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator scaleY(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>scaleY</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setScaleY(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator scaleY(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_scaleY, jni.JniType.objectType, [value]).object);

  static final _id_scaleYBy = jniAccessors.getMethodIDOf(
      _classRef, "scaleYBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator scaleYBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>scaleY</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setScaleY(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator scaleYBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_scaleYBy, jni.JniType.objectType, [value]).object);

  static final _id_alpha = jniAccessors.getMethodIDOf(
      _classRef, "alpha", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator alpha(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>alpha</code> property to be animated to the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The value to be animated to.
  ///@see View\#setAlpha(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator alpha(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_alpha, jni.JniType.objectType, [value]).object);

  static final _id_alphaBy = jniAccessors.getMethodIDOf(
      _classRef, "alphaBy", "(F)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator alphaBy(float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method will cause the View's <code>alpha</code> property to be animated by the
  /// specified value. Animations already running on the property will be canceled.
  ///@param value The amount to be animated by, as an offset from the current value.
  ///@see View\#setAlpha(float)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator alphaBy(double value) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_alphaBy, jni.JniType.objectType, [value]).object);

  static final _id_withLayer = jniAccessors.getMethodIDOf(
      _classRef, "withLayer", "()Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator withLayer()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The View associated with this ViewPropertyAnimator will have its
  /// View\#setLayerType(int, android.graphics.Paint) layer type set to
  /// View\#LAYER_TYPE_HARDWARE for the duration of the next animation.
  /// As stated in the documentation for View\#LAYER_TYPE_HARDWARE,
  /// the actual type of layer used internally depends on the runtime situation of the
  /// view. If the activity and this view are hardware-accelerated, then the layer will be
  /// accelerated as well. If the activity or the view is not accelerated, then the layer will
  /// effectively be the same as View\#LAYER_TYPE_SOFTWARE.
  ///
  /// This state is not persistent, either on the View or on this ViewPropertyAnimator: the
  /// layer type of the View will be restored when the animation ends to what it was when this
  /// method was called, and this setting on ViewPropertyAnimator is only valid for the next
  /// animation. Note that calling this method and then independently setting the layer type of
  /// the View (by a direct call to View\#setLayerType(int, android.graphics.Paint)) will
  /// result in some inconsistency, including having the layer type restored to its pre-withLayer()
  /// value when the animation ends.
  ///
  ///@see View\#setLayerType(int, android.graphics.Paint)
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator withLayer() =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_withLayer, jni.JniType.objectType, []).object);

  static final _id_withStartAction = jniAccessors.getMethodIDOf(
      _classRef,
      "withStartAction",
      "(Ljava/lang/Runnable;)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator withStartAction(java.lang.Runnable runnable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specifies an action to take place when the next animation runs. If there is a
  /// \#setStartDelay(long) startDelay set on this ViewPropertyAnimator, then the
  /// action will run after that startDelay expires, when the actual animation begins.
  /// This method, along with \#withEndAction(Runnable), is intended to help facilitate
  /// choreographing ViewPropertyAnimator animations with other animations or actions
  /// in the application.
  ///@param runnable The action to run when the next animation starts.
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator withStartAction(jni.JniObject runnable) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_withStartAction,
          jni.JniType.objectType,
          [runnable.reference]).object);

  static final _id_withEndAction = jniAccessors.getMethodIDOf(
      _classRef,
      "withEndAction",
      "(Ljava/lang/Runnable;)Landroid/view/ViewPropertyAnimator;");

  /// from: public android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable runnable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specifies an action to take place when the next animation ends. The action is only
  /// run if the animation ends normally; if the ViewPropertyAnimator is canceled during
  /// that animation, the runnable will not run.
  /// This method, along with \#withStartAction(Runnable), is intended to help facilitate
  /// choreographing ViewPropertyAnimator animations with other animations or actions
  /// in the application.
  ///
  /// For example, the following code animates a view to x=200 and then back to 0:
  ///
  /// <pre>
  ///     Runnable endAction = new Runnable() {
  ///         public void run() {
  ///             view.animate().x(0);
  ///         }
  ///     };
  ///     view.animate().x(200).withEndAction(endAction);
  /// </pre>
  ///@param runnable The action to run when the next animation ends.
  ///@return This object, allowing calls to methods in this class to be chained.
  ViewPropertyAnimator withEndAction(jni.JniObject runnable) =>
      ViewPropertyAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_withEndAction,
          jni.JniType.objectType,
          [runnable.reference]).object);
}
