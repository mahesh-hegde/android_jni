// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.OrientationListener
///
/// Helper class for receiving notifications from the SensorManager when
/// the orientation of the device has changed.
///@deprecated use android.view.OrientationEventListener instead.
///  This class internally uses the OrientationEventListener.
class OrientationListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/OrientationListener");
  OrientationListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ORIENTATION_UNKNOWN
  ///
  /// Returned from onOrientationChanged when the device orientation cannot be determined
  /// (typically when the device is in a close to flat position).
  ///@see \#onOrientationChanged
  static const ORIENTATION_UNKNOWN = -1;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new OrientationListener.
  ///@param context for the OrientationListener.
  OrientationListener(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;I)V");

  /// from: public void <init>(android.content.Context context, int rate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new OrientationListener.
  ///@param context for the OrientationListener.
  ///@param rate at which sensor events are processed (see also
  /// android.hardware.SensorManager SensorManager). Use the default
  /// value of android.hardware.SensorManager\#SENSOR_DELAY_NORMAL SENSOR_DELAY_NORMAL for simple screen orientation change detection.
  OrientationListener.ctor1(context_.Context context, int rate)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, rate]).object);

  static final _id_enable =
      jniAccessors.getMethodIDOf(_classRef, "enable", "()V");

  /// from: public void enable()
  ///
  /// Enables the OrientationListener so it will monitor the sensor and call
  /// \#onOrientationChanged when the device orientation changes.
  void enable() => jniAccessors.callMethodWithArgs(
      reference, _id_enable, jni.JniType.voidType, []).check();

  static final _id_disable =
      jniAccessors.getMethodIDOf(_classRef, "disable", "()V");

  /// from: public void disable()
  ///
  /// Disables the OrientationListener.
  void disable() => jniAccessors.callMethodWithArgs(
      reference, _id_disable, jni.JniType.voidType, []).check();

  static final _id_onAccuracyChanged =
      jniAccessors.getMethodIDOf(_classRef, "onAccuracyChanged", "(II)V");

  /// from: public void onAccuracyChanged(int sensor, int accuracy)
  void onAccuracyChanged(int sensor, int accuracy) =>
      jniAccessors.callMethodWithArgs(reference, _id_onAccuracyChanged,
          jni.JniType.voidType, [sensor, accuracy]).check();

  static final _id_onSensorChanged =
      jniAccessors.getMethodIDOf(_classRef, "onSensorChanged", "(I[F)V");

  /// from: public void onSensorChanged(int sensor, float[] values)
  void onSensorChanged(int sensor, jni.JniObject values) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSensorChanged,
          jni.JniType.voidType, [sensor, values.reference]).check();

  static final _id_onOrientationChanged =
      jniAccessors.getMethodIDOf(_classRef, "onOrientationChanged", "(I)V");

  /// from: public abstract void onOrientationChanged(int orientation)
  ///
  /// Look at android.view.OrientationEventListener\#onOrientationChanged
  /// for method description and usage
  ///@param orientation The new orientation of the device.
  ///@see \#ORIENTATION_UNKNOWN
  void onOrientationChanged(int orientation) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onOrientationChanged,
      jni.JniType.voidType,
      [orientation]).check();
}
