// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.KeyboardShortcutInfo
///
/// Information about a Keyboard Shortcut.
class KeyboardShortcutInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/KeyboardShortcutInfo");
  KeyboardShortcutInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.KeyboardShortcutInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/CharSequence;II)V");

  /// from: public void <init>(java.lang.CharSequence label, int keycode, int modifiers)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param label The label that identifies the action performed by this shortcut.
  ///@param keycode The keycode that triggers the shortcut. This should be a valid constant
  ///     defined in KeyEvent.
  ///@param modifiers The set of modifiers that, combined with the key, trigger the shortcut.
  ///     These should be a combination of KeyEvent\#META_CTRL_ON,
  ///     KeyEvent\#META_SHIFT_ON, KeyEvent\#META_META_ON,
  ///     KeyEvent\#META_ALT_ON, KeyEvent\#META_FUNCTION_ON and
  ///     KeyEvent\#META_SYM_ON.
  KeyboardShortcutInfo(jni.JniObject label, int keycode, int modifiers)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [label.reference, keycode, modifiers]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/CharSequence;CI)V");

  /// from: public void <init>(java.lang.CharSequence label, char baseCharacter, int modifiers)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param label The label that identifies the action performed by this shortcut.
  ///@param baseCharacter The character that triggers the shortcut.
  ///@param modifiers The set of modifiers that, combined with the key, trigger the shortcut.
  ///     These should be a combination of KeyEvent\#META_CTRL_ON,
  ///     KeyEvent\#META_SHIFT_ON, KeyEvent\#META_META_ON,
  ///     KeyEvent\#META_ALT_ON, KeyEvent\#META_FUNCTION_ON and
  ///     KeyEvent\#META_SYM_ON.
  KeyboardShortcutInfo.ctor1(
      jni.JniObject label, int baseCharacter, int modifiers)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [label.reference, baseCharacter, modifiers]).object);

  static final _id_getLabel = jniAccessors.getMethodIDOf(
      _classRef, "getLabel", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getLabel()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the label to be used to describe this shortcut.
  ///@return This value may be {@code null}.
  jni.JniObject getLabel() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLabel, jni.JniType.objectType, []).object);

  static final _id_getKeycode =
      jniAccessors.getMethodIDOf(_classRef, "getKeycode", "()I");

  /// from: public int getKeycode()
  ///
  /// Returns the base keycode that, combined with the modifiers, triggers this shortcut. If the
  /// base character was set instead, returns KeyEvent\#KEYCODE_UNKNOWN. Valid keycodes are
  /// defined as constants in KeyEvent.
  int getKeycode() => jniAccessors.callMethodWithArgs(
      reference, _id_getKeycode, jni.JniType.intType, []).integer;

  static final _id_getBaseCharacter =
      jniAccessors.getMethodIDOf(_classRef, "getBaseCharacter", "()C");

  /// from: public char getBaseCharacter()
  ///
  /// Returns the base character that, combined with the modifiers, triggers this shortcut. If the
  /// keycode was set instead, returns Character\#MIN_VALUE.
  int getBaseCharacter() => jniAccessors.callMethodWithArgs(
      reference, _id_getBaseCharacter, jni.JniType.charType, []).char;

  static final _id_getModifiers =
      jniAccessors.getMethodIDOf(_classRef, "getModifiers", "()I");

  /// from: public int getModifiers()
  ///
  /// Returns the set of modifiers that, combined with the key, trigger this shortcut. These can
  /// be a combination of KeyEvent\#META_CTRL_ON, KeyEvent\#META_SHIFT_ON,
  /// KeyEvent\#META_META_ON, KeyEvent\#META_ALT_ON,
  /// KeyEvent\#META_FUNCTION_ON and KeyEvent\#META_SYM_ON.
  int getModifiers() => jniAccessors.callMethodWithArgs(
      reference, _id_getModifiers, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
