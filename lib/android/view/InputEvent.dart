// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "InputDevice.dart" as inputdevice_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.InputEvent
///
/// Common base class for input events.
class InputEvent extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/view/InputEvent");
  InputEvent.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.InputEvent> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  InputEvent()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getDeviceId =
      jniAccessors.getMethodIDOf(_classRef, "getDeviceId", "()I");

  /// from: public abstract int getDeviceId()
  ///
  /// Gets the id for the device that this event came from.  An id of
  /// zero indicates that the event didn't come from a physical device
  /// and maps to the default keymap.  The other numbers are arbitrary and
  /// you shouldn't depend on the values.
  ///@return The device id.
  ///@see InputDevice\#getDevice
  int getDeviceId() => jniAccessors.callMethodWithArgs(
      reference, _id_getDeviceId, jni.JniType.intType, []).integer;

  static final _id_getDevice = jniAccessors.getMethodIDOf(
      _classRef, "getDevice", "()Landroid/view/InputDevice;");

  /// from: public final android.view.InputDevice getDevice()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the device that this event came from.
  ///@return The device, or null if unknown.
  inputdevice_.InputDevice getDevice() =>
      inputdevice_.InputDevice.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDevice, jni.JniType.objectType, []).object);

  static final _id_getSource =
      jniAccessors.getMethodIDOf(_classRef, "getSource", "()I");

  /// from: public abstract int getSource()
  ///
  /// Gets the source of the event.
  ///@return The event source or InputDevice\#SOURCE_UNKNOWN if unknown.
  ///@see InputDevice\#getSources
  int getSource() => jniAccessors.callMethodWithArgs(
      reference, _id_getSource, jni.JniType.intType, []).integer;

  static final _id_isFromSource =
      jniAccessors.getMethodIDOf(_classRef, "isFromSource", "(I)Z");

  /// from: public boolean isFromSource(int source)
  ///
  /// Determines whether the event is from the given source.
  ///@param source The input source to check against. This can be a specific device type, such as
  /// InputDevice\#SOURCE_TOUCH_NAVIGATION, or a more generic device class, such as
  /// InputDevice\#SOURCE_CLASS_POINTER.
  ///@return Whether the event is from the given source.
  bool isFromSource(int source) => jniAccessors.callMethodWithArgs(
      reference, _id_isFromSource, jni.JniType.booleanType, [source]).boolean;

  static final _id_getEventTime =
      jniAccessors.getMethodIDOf(_classRef, "getEventTime", "()J");

  /// from: public abstract long getEventTime()
  ///
  /// Retrieve the time this event occurred,
  /// in the android.os.SystemClock\#uptimeMillis time base.
  ///@return Returns the time this event occurred,
  /// in the android.os.SystemClock\#uptimeMillis time base.
  int getEventTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getEventTime, jni.JniType.longType, []).long;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
