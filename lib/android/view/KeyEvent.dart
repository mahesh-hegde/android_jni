// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "InputEvent.dart" as inputevent_;

import "../os/Parcelable.dart" as parcelable_;

import "KeyCharacterMap.dart" as keycharactermap_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.KeyEvent
///
/// Object used to report key and button events.
///
/// Each key press is described by a sequence of key events.  A key press
/// starts with a key event with \#ACTION_DOWN.  If the key is held
/// sufficiently long that it repeats, then the initial down is followed
/// additional key events with \#ACTION_DOWN and a non-zero value for
/// \#getRepeatCount().  The last key event is a \#ACTION_UP
/// for the key up.  If the key press is canceled, the key up event will have the
/// \#FLAG_CANCELED flag set.
///
///
/// Key events are generally accompanied by a key code (\#getKeyCode()),
/// scan code (\#getScanCode()) and meta state (\#getMetaState()).
/// Key code constants are defined in this class.  Scan code constants are raw
/// device-specific codes obtained from the OS and so are not generally meaningful
/// to applications unless interpreted using the KeyCharacterMap.
/// Meta states describe the pressed state of key modifiers
/// such as \#META_SHIFT_ON or \#META_ALT_ON.
///
///
/// Key codes typically correspond one-to-one with individual keys on an input device.
/// Many keys and key combinations serve quite different functions on different
/// input devices so care must be taken when interpreting them.  Always use the
/// KeyCharacterMap associated with the input device when mapping keys
/// to characters.  Be aware that there may be multiple key input devices active
/// at the same time and each will have its own key character map.
///
///
/// As soft input methods can use multiple and inventive ways of inputting text,
/// there is no guarantee that any key press on a soft keyboard will generate a key
/// event: this is left to the IME's discretion, and in fact sending such events is
/// discouraged.  You should never rely on receiving KeyEvents for any key on a soft
/// input method.  In particular, the default software keyboard will never send any
/// key event to any application targetting Jelly Bean or later, and will only send
/// events for some presses of the delete and return keys to applications targetting
/// Ice Cream Sandwich or earlier.  Be aware that other software input methods may
/// never send key events regardless of the version.  Consider using editor actions
/// like android.view.inputmethod.EditorInfo\#IME_ACTION_DONE if you need
/// specific interaction with the software keyboard, as it gives more visibility to
/// the user as to how your application will react to key presses.
///
///
/// When interacting with an IME, the framework may deliver key events
/// with the special action \#ACTION_MULTIPLE that either specifies
/// that single repeated key code or a sequence of characters to insert.
///
///
/// In general, the framework cannot guarantee that the key events it delivers
/// to a view always constitute complete key sequences since some events may be dropped
/// or modified by containing views before they are delivered.  The view implementation
/// should be prepared to handle \#FLAG_CANCELED and should tolerate anomalous
/// situations such as receiving a new \#ACTION_DOWN without first having
/// received an \#ACTION_UP for the prior key press.
///
///
/// Refer to InputDevice for more information about how different kinds of
/// input devices and sources represent keys and buttons.
///
///
class KeyEvent extends inputevent_.InputEvent {
  static final _classRef = jniAccessors.getClassOf("android/view/KeyEvent");
  KeyEvent.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ACTION_DOWN
  ///
  /// \#getAction value: the key has been pressed down.
  static const ACTION_DOWN = 0;

  /// from: static public final int ACTION_MULTIPLE
  ///
  /// \#getAction value: multiple duplicate key events have
  /// occurred in a row, or a complex string is being delivered.  If the
  /// key code is not {\#link \#KEYCODE_UNKNOWN then the
  /// {\#link \#getRepeatCount() method returns the number of times
  /// the given key code should be executed.
  /// Otherwise, if the key code is \#KEYCODE_UNKNOWN, then
  /// this is a sequence of characters as returned by \#getCharacters.
  static const ACTION_MULTIPLE = 2;

  /// from: static public final int ACTION_UP
  ///
  /// \#getAction value: the key has been released.
  static const ACTION_UP = 1;

  static final _id_CREATOR1 = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.view.KeyEvent> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR1 =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR1, jni.JniType.objectType)
          .object);

  /// from: static public final int FLAG_CANCELED
  ///
  /// When associated with up key events, this indicates that the key press
  /// has been canceled.  Typically this is used with virtual touch screen
  /// keys, where the user can slide from the virtual key area on to the
  /// display: in that case, the application will receive a canceled up
  /// event and should not perform the action normally associated with the
  /// key.  Note that for this to work, the application can not perform an
  /// action for a key until it receives an up or the long press timeout has
  /// expired.
  static const FLAG_CANCELED = 32;

  /// from: static public final int FLAG_CANCELED_LONG_PRESS
  ///
  /// Set when a key event has \#FLAG_CANCELED set because a long
  /// press action was executed while it was down.
  static const FLAG_CANCELED_LONG_PRESS = 256;

  /// from: static public final int FLAG_EDITOR_ACTION
  ///
  /// This mask is used for compatibility, to identify enter keys that are
  /// coming from an IME whose enter key has been auto-labelled "next" or
  /// "done".  This allows TextView to dispatch these as normal enter keys
  /// for old applications, but still do the appropriate action when
  /// receiving them.
  static const FLAG_EDITOR_ACTION = 16;

  /// from: static public final int FLAG_FALLBACK
  ///
  /// Set when a key event has been synthesized to implement default behavior
  /// for an event that the application did not handle.
  /// Fallback key events are generated by unhandled trackball motions
  /// (to emulate a directional keypad) and by certain unhandled key presses
  /// that are declared in the key map (such as special function numeric keypad
  /// keys when numlock is off).
  static const FLAG_FALLBACK = 1024;

  /// from: static public final int FLAG_FROM_SYSTEM
  ///
  /// This mask is set if an event was known to come from a trusted part
  /// of the system.  That is, the event is known to come from the user,
  /// and could not have been spoofed by a third party component.
  static const FLAG_FROM_SYSTEM = 8;

  /// from: static public final int FLAG_KEEP_TOUCH_MODE
  ///
  /// This mask is set if we don't want the key event to cause us to leave
  /// touch mode.
  static const FLAG_KEEP_TOUCH_MODE = 4;

  /// from: static public final int FLAG_LONG_PRESS
  ///
  /// This flag is set for the first key repeat that occurs after the
  /// long press timeout.
  static const FLAG_LONG_PRESS = 128;

  /// from: static public final int FLAG_SOFT_KEYBOARD
  ///
  /// This mask is set if the key event was generated by a software keyboard.
  static const FLAG_SOFT_KEYBOARD = 2;

  /// from: static public final int FLAG_TRACKING
  ///
  /// Set for \#ACTION_UP when this event's key code is still being
  /// tracked from its initial down.  That is, somebody requested that tracking
  /// started on the key down and a long press has not caused
  /// the tracking to be canceled.
  static const FLAG_TRACKING = 512;

  /// from: static public final int FLAG_VIRTUAL_HARD_KEY
  ///
  /// This key event was generated by a virtual (on-screen) hard key area.
  /// Typically this is an area of the touchscreen, outside of the regular
  /// display, dedicated to "hardware" buttons.
  static const FLAG_VIRTUAL_HARD_KEY = 64;

  /// from: static public final int FLAG_WOKE_HERE
  ///
  /// This mask is set if the device woke because of this key event.
  ///@deprecated This flag will never be set by the system since the system
  /// consumes all wake keys itself.
  static const FLAG_WOKE_HERE = 1;

  /// from: static public final int KEYCODE_0
  ///
  /// Key code constant: '0' key.
  static const KEYCODE_0 = 7;

  /// from: static public final int KEYCODE_1
  ///
  /// Key code constant: '1' key.
  static const KEYCODE_1 = 8;

  /// from: static public final int KEYCODE_11
  ///
  /// Key code constant: '11' key.
  static const KEYCODE_11 = 227;

  /// from: static public final int KEYCODE_12
  ///
  /// Key code constant: '12' key.
  static const KEYCODE_12 = 228;

  /// from: static public final int KEYCODE_2
  ///
  /// Key code constant: '2' key.
  static const KEYCODE_2 = 9;

  /// from: static public final int KEYCODE_3
  ///
  /// Key code constant: '3' key.
  static const KEYCODE_3 = 10;

  /// from: static public final int KEYCODE_3D_MODE
  ///
  /// Key code constant: 3D Mode key.
  /// Toggles the display between 2D and 3D mode.
  static const KEYCODE_3D_MODE = 206;

  /// from: static public final int KEYCODE_4
  ///
  /// Key code constant: '4' key.
  static const KEYCODE_4 = 11;

  /// from: static public final int KEYCODE_5
  ///
  /// Key code constant: '5' key.
  static const KEYCODE_5 = 12;

  /// from: static public final int KEYCODE_6
  ///
  /// Key code constant: '6' key.
  static const KEYCODE_6 = 13;

  /// from: static public final int KEYCODE_7
  ///
  /// Key code constant: '7' key.
  static const KEYCODE_7 = 14;

  /// from: static public final int KEYCODE_8
  ///
  /// Key code constant: '8' key.
  static const KEYCODE_8 = 15;

  /// from: static public final int KEYCODE_9
  ///
  /// Key code constant: '9' key.
  static const KEYCODE_9 = 16;

  /// from: static public final int KEYCODE_A
  ///
  /// Key code constant: 'A' key.
  static const KEYCODE_A = 29;

  /// from: static public final int KEYCODE_ALL_APPS
  ///
  /// Key code constant: Show all apps
  static const KEYCODE_ALL_APPS = 284;

  /// from: static public final int KEYCODE_ALT_LEFT
  ///
  /// Key code constant: Left Alt modifier key.
  static const KEYCODE_ALT_LEFT = 57;

  /// from: static public final int KEYCODE_ALT_RIGHT
  ///
  /// Key code constant: Right Alt modifier key.
  static const KEYCODE_ALT_RIGHT = 58;

  /// from: static public final int KEYCODE_APOSTROPHE
  ///
  /// Key code constant: ''' (apostrophe) key.
  static const KEYCODE_APOSTROPHE = 75;

  /// from: static public final int KEYCODE_APP_SWITCH
  ///
  /// Key code constant: App switch key.
  /// Should bring up the application switcher dialog.
  static const KEYCODE_APP_SWITCH = 187;

  /// from: static public final int KEYCODE_ASSIST
  ///
  /// Key code constant: Assist key.
  /// Launches the global assist activity.  Not delivered to applications.
  static const KEYCODE_ASSIST = 219;

  /// from: static public final int KEYCODE_AT
  ///
  /// Key code constant: '@' key.
  static const KEYCODE_AT = 77;

  /// from: static public final int KEYCODE_AVR_INPUT
  ///
  /// Key code constant: A/V Receiver input key.
  /// On TV remotes, switches the input mode on an external A/V Receiver.
  static const KEYCODE_AVR_INPUT = 182;

  /// from: static public final int KEYCODE_AVR_POWER
  ///
  /// Key code constant: A/V Receiver power key.
  /// On TV remotes, toggles the power on an external A/V Receiver.
  static const KEYCODE_AVR_POWER = 181;

  /// from: static public final int KEYCODE_B
  ///
  /// Key code constant: 'B' key.
  static const KEYCODE_B = 30;

  /// from: static public final int KEYCODE_BACK
  ///
  /// Key code constant: Back key.
  static const KEYCODE_BACK = 4;

  /// from: static public final int KEYCODE_BACKSLASH
  ///
  /// Key code constant: '\' key.
  static const KEYCODE_BACKSLASH = 73;

  /// from: static public final int KEYCODE_BOOKMARK
  ///
  /// Key code constant: Bookmark key.
  /// On some TV remotes, bookmarks content or web pages.
  static const KEYCODE_BOOKMARK = 174;

  /// from: static public final int KEYCODE_BREAK
  ///
  /// Key code constant: Break / Pause key.
  static const KEYCODE_BREAK = 121;

  /// from: static public final int KEYCODE_BRIGHTNESS_DOWN
  ///
  /// Key code constant: Brightness Down key.
  /// Adjusts the screen brightness down.
  static const KEYCODE_BRIGHTNESS_DOWN = 220;

  /// from: static public final int KEYCODE_BRIGHTNESS_UP
  ///
  /// Key code constant: Brightness Up key.
  /// Adjusts the screen brightness up.
  static const KEYCODE_BRIGHTNESS_UP = 221;

  /// from: static public final int KEYCODE_BUTTON_1
  ///
  /// Key code constant: Generic Game Pad Button \#1.
  static const KEYCODE_BUTTON_1 = 188;

  /// from: static public final int KEYCODE_BUTTON_10
  ///
  /// Key code constant: Generic Game Pad Button \#10.
  static const KEYCODE_BUTTON_10 = 197;

  /// from: static public final int KEYCODE_BUTTON_11
  ///
  /// Key code constant: Generic Game Pad Button \#11.
  static const KEYCODE_BUTTON_11 = 198;

  /// from: static public final int KEYCODE_BUTTON_12
  ///
  /// Key code constant: Generic Game Pad Button \#12.
  static const KEYCODE_BUTTON_12 = 199;

  /// from: static public final int KEYCODE_BUTTON_13
  ///
  /// Key code constant: Generic Game Pad Button \#13.
  static const KEYCODE_BUTTON_13 = 200;

  /// from: static public final int KEYCODE_BUTTON_14
  ///
  /// Key code constant: Generic Game Pad Button \#14.
  static const KEYCODE_BUTTON_14 = 201;

  /// from: static public final int KEYCODE_BUTTON_15
  ///
  /// Key code constant: Generic Game Pad Button \#15.
  static const KEYCODE_BUTTON_15 = 202;

  /// from: static public final int KEYCODE_BUTTON_16
  ///
  /// Key code constant: Generic Game Pad Button \#16.
  static const KEYCODE_BUTTON_16 = 203;

  /// from: static public final int KEYCODE_BUTTON_2
  ///
  /// Key code constant: Generic Game Pad Button \#2.
  static const KEYCODE_BUTTON_2 = 189;

  /// from: static public final int KEYCODE_BUTTON_3
  ///
  /// Key code constant: Generic Game Pad Button \#3.
  static const KEYCODE_BUTTON_3 = 190;

  /// from: static public final int KEYCODE_BUTTON_4
  ///
  /// Key code constant: Generic Game Pad Button \#4.
  static const KEYCODE_BUTTON_4 = 191;

  /// from: static public final int KEYCODE_BUTTON_5
  ///
  /// Key code constant: Generic Game Pad Button \#5.
  static const KEYCODE_BUTTON_5 = 192;

  /// from: static public final int KEYCODE_BUTTON_6
  ///
  /// Key code constant: Generic Game Pad Button \#6.
  static const KEYCODE_BUTTON_6 = 193;

  /// from: static public final int KEYCODE_BUTTON_7
  ///
  /// Key code constant: Generic Game Pad Button \#7.
  static const KEYCODE_BUTTON_7 = 194;

  /// from: static public final int KEYCODE_BUTTON_8
  ///
  /// Key code constant: Generic Game Pad Button \#8.
  static const KEYCODE_BUTTON_8 = 195;

  /// from: static public final int KEYCODE_BUTTON_9
  ///
  /// Key code constant: Generic Game Pad Button \#9.
  static const KEYCODE_BUTTON_9 = 196;

  /// from: static public final int KEYCODE_BUTTON_A
  ///
  /// Key code constant: A Button key.
  /// On a game controller, the A button should be either the button labeled A
  /// or the first button on the bottom row of controller buttons.
  static const KEYCODE_BUTTON_A = 96;

  /// from: static public final int KEYCODE_BUTTON_B
  ///
  /// Key code constant: B Button key.
  /// On a game controller, the B button should be either the button labeled B
  /// or the second button on the bottom row of controller buttons.
  static const KEYCODE_BUTTON_B = 97;

  /// from: static public final int KEYCODE_BUTTON_C
  ///
  /// Key code constant: C Button key.
  /// On a game controller, the C button should be either the button labeled C
  /// or the third button on the bottom row of controller buttons.
  static const KEYCODE_BUTTON_C = 98;

  /// from: static public final int KEYCODE_BUTTON_L1
  ///
  /// Key code constant: L1 Button key.
  /// On a game controller, the L1 button should be either the button labeled L1 (or L)
  /// or the top left trigger button.
  static const KEYCODE_BUTTON_L1 = 102;

  /// from: static public final int KEYCODE_BUTTON_L2
  ///
  /// Key code constant: L2 Button key.
  /// On a game controller, the L2 button should be either the button labeled L2
  /// or the bottom left trigger button.
  static const KEYCODE_BUTTON_L2 = 104;

  /// from: static public final int KEYCODE_BUTTON_MODE
  ///
  /// Key code constant: Mode Button key.
  /// On a game controller, the button labeled Mode.
  static const KEYCODE_BUTTON_MODE = 110;

  /// from: static public final int KEYCODE_BUTTON_R1
  ///
  /// Key code constant: R1 Button key.
  /// On a game controller, the R1 button should be either the button labeled R1 (or R)
  /// or the top right trigger button.
  static const KEYCODE_BUTTON_R1 = 103;

  /// from: static public final int KEYCODE_BUTTON_R2
  ///
  /// Key code constant: R2 Button key.
  /// On a game controller, the R2 button should be either the button labeled R2
  /// or the bottom right trigger button.
  static const KEYCODE_BUTTON_R2 = 105;

  /// from: static public final int KEYCODE_BUTTON_SELECT
  ///
  /// Key code constant: Select Button key.
  /// On a game controller, the button labeled Select.
  static const KEYCODE_BUTTON_SELECT = 109;

  /// from: static public final int KEYCODE_BUTTON_START
  ///
  /// Key code constant: Start Button key.
  /// On a game controller, the button labeled Start.
  static const KEYCODE_BUTTON_START = 108;

  /// from: static public final int KEYCODE_BUTTON_THUMBL
  ///
  /// Key code constant: Left Thumb Button key.
  /// On a game controller, the left thumb button indicates that the left (or only)
  /// joystick is pressed.
  static const KEYCODE_BUTTON_THUMBL = 106;

  /// from: static public final int KEYCODE_BUTTON_THUMBR
  ///
  /// Key code constant: Right Thumb Button key.
  /// On a game controller, the right thumb button indicates that the right
  /// joystick is pressed.
  static const KEYCODE_BUTTON_THUMBR = 107;

  /// from: static public final int KEYCODE_BUTTON_X
  ///
  /// Key code constant: X Button key.
  /// On a game controller, the X button should be either the button labeled X
  /// or the first button on the upper row of controller buttons.
  static const KEYCODE_BUTTON_X = 99;

  /// from: static public final int KEYCODE_BUTTON_Y
  ///
  /// Key code constant: Y Button key.
  /// On a game controller, the Y button should be either the button labeled Y
  /// or the second button on the upper row of controller buttons.
  static const KEYCODE_BUTTON_Y = 100;

  /// from: static public final int KEYCODE_BUTTON_Z
  ///
  /// Key code constant: Z Button key.
  /// On a game controller, the Z button should be either the button labeled Z
  /// or the third button on the upper row of controller buttons.
  static const KEYCODE_BUTTON_Z = 101;

  /// from: static public final int KEYCODE_C
  ///
  /// Key code constant: 'C' key.
  static const KEYCODE_C = 31;

  /// from: static public final int KEYCODE_CALCULATOR
  ///
  /// Key code constant: Calculator special function key.
  /// Used to launch a calculator application.
  static const KEYCODE_CALCULATOR = 210;

  /// from: static public final int KEYCODE_CALENDAR
  ///
  /// Key code constant: Calendar special function key.
  /// Used to launch a calendar application.
  static const KEYCODE_CALENDAR = 208;

  /// from: static public final int KEYCODE_CALL
  ///
  /// Key code constant: Call key.
  static const KEYCODE_CALL = 5;

  /// from: static public final int KEYCODE_CAMERA
  ///
  /// Key code constant: Camera key.
  /// Used to launch a camera application or take pictures.
  static const KEYCODE_CAMERA = 27;

  /// from: static public final int KEYCODE_CAPS_LOCK
  ///
  /// Key code constant: Caps Lock key.
  static const KEYCODE_CAPS_LOCK = 115;

  /// from: static public final int KEYCODE_CAPTIONS
  ///
  /// Key code constant: Toggle captions key.
  /// Switches the mode for closed-captioning text, for example during television shows.
  static const KEYCODE_CAPTIONS = 175;

  /// from: static public final int KEYCODE_CHANNEL_DOWN
  ///
  /// Key code constant: Channel down key.
  /// On TV remotes, decrements the television channel.
  static const KEYCODE_CHANNEL_DOWN = 167;

  /// from: static public final int KEYCODE_CHANNEL_UP
  ///
  /// Key code constant: Channel up key.
  /// On TV remotes, increments the television channel.
  static const KEYCODE_CHANNEL_UP = 166;

  /// from: static public final int KEYCODE_CLEAR
  ///
  /// Key code constant: Clear key.
  static const KEYCODE_CLEAR = 28;

  /// from: static public final int KEYCODE_COMMA
  ///
  /// Key code constant: ',' key.
  static const KEYCODE_COMMA = 55;

  /// from: static public final int KEYCODE_CONTACTS
  ///
  /// Key code constant: Contacts special function key.
  /// Used to launch an address book application.
  static const KEYCODE_CONTACTS = 207;

  /// from: static public final int KEYCODE_COPY
  ///
  /// Key code constant: Copy key.
  static const KEYCODE_COPY = 278;

  /// from: static public final int KEYCODE_CTRL_LEFT
  ///
  /// Key code constant: Left Control modifier key.
  static const KEYCODE_CTRL_LEFT = 113;

  /// from: static public final int KEYCODE_CTRL_RIGHT
  ///
  /// Key code constant: Right Control modifier key.
  static const KEYCODE_CTRL_RIGHT = 114;

  /// from: static public final int KEYCODE_CUT
  ///
  /// Key code constant: Cut key.
  static const KEYCODE_CUT = 277;

  /// from: static public final int KEYCODE_D
  ///
  /// Key code constant: 'D' key.
  static const KEYCODE_D = 32;

  /// from: static public final int KEYCODE_DEL
  ///
  /// Key code constant: Backspace key.
  /// Deletes characters before the insertion point, unlike \#KEYCODE_FORWARD_DEL.
  static const KEYCODE_DEL = 67;

  /// from: static public final int KEYCODE_DPAD_CENTER
  ///
  /// Key code constant: Directional Pad Center key.
  /// May also be synthesized from trackball motions.
  static const KEYCODE_DPAD_CENTER = 23;

  /// from: static public final int KEYCODE_DPAD_DOWN
  ///
  /// Key code constant: Directional Pad Down key.
  /// May also be synthesized from trackball motions.
  static const KEYCODE_DPAD_DOWN = 20;

  /// from: static public final int KEYCODE_DPAD_DOWN_LEFT
  ///
  /// Key code constant: Directional Pad Down-Left
  static const KEYCODE_DPAD_DOWN_LEFT = 269;

  /// from: static public final int KEYCODE_DPAD_DOWN_RIGHT
  ///
  /// Key code constant: Directional Pad Down-Right
  static const KEYCODE_DPAD_DOWN_RIGHT = 271;

  /// from: static public final int KEYCODE_DPAD_LEFT
  ///
  /// Key code constant: Directional Pad Left key.
  /// May also be synthesized from trackball motions.
  static const KEYCODE_DPAD_LEFT = 21;

  /// from: static public final int KEYCODE_DPAD_RIGHT
  ///
  /// Key code constant: Directional Pad Right key.
  /// May also be synthesized from trackball motions.
  static const KEYCODE_DPAD_RIGHT = 22;

  /// from: static public final int KEYCODE_DPAD_UP
  ///
  /// Key code constant: Directional Pad Up key.
  /// May also be synthesized from trackball motions.
  static const KEYCODE_DPAD_UP = 19;

  /// from: static public final int KEYCODE_DPAD_UP_LEFT
  ///
  /// Key code constant: Directional Pad Up-Left
  static const KEYCODE_DPAD_UP_LEFT = 268;

  /// from: static public final int KEYCODE_DPAD_UP_RIGHT
  ///
  /// Key code constant: Directional Pad Up-Right
  static const KEYCODE_DPAD_UP_RIGHT = 270;

  /// from: static public final int KEYCODE_DVR
  ///
  /// Key code constant: DVR key.
  /// On some TV remotes, switches to a DVR mode for recorded shows.
  static const KEYCODE_DVR = 173;

  /// from: static public final int KEYCODE_E
  ///
  /// Key code constant: 'E' key.
  static const KEYCODE_E = 33;

  /// from: static public final int KEYCODE_EISU
  ///
  /// Key code constant: Japanese alphanumeric key.
  static const KEYCODE_EISU = 212;

  /// from: static public final int KEYCODE_ENDCALL
  ///
  /// Key code constant: End Call key.
  static const KEYCODE_ENDCALL = 6;

  /// from: static public final int KEYCODE_ENTER
  ///
  /// Key code constant: Enter key.
  static const KEYCODE_ENTER = 66;

  /// from: static public final int KEYCODE_ENVELOPE
  ///
  /// Key code constant: Envelope special function key.
  /// Used to launch a mail application.
  static const KEYCODE_ENVELOPE = 65;

  /// from: static public final int KEYCODE_EQUALS
  ///
  /// Key code constant: '=' key.
  static const KEYCODE_EQUALS = 70;

  /// from: static public final int KEYCODE_ESCAPE
  ///
  /// Key code constant: Escape key.
  static const KEYCODE_ESCAPE = 111;

  /// from: static public final int KEYCODE_EXPLORER
  ///
  /// Key code constant: Explorer special function key.
  /// Used to launch a browser application.
  static const KEYCODE_EXPLORER = 64;

  /// from: static public final int KEYCODE_F
  ///
  /// Key code constant: 'F' key.
  static const KEYCODE_F = 34;

  /// from: static public final int KEYCODE_F1
  ///
  /// Key code constant: F1 key.
  static const KEYCODE_F1 = 131;

  /// from: static public final int KEYCODE_F10
  ///
  /// Key code constant: F10 key.
  static const KEYCODE_F10 = 140;

  /// from: static public final int KEYCODE_F11
  ///
  /// Key code constant: F11 key.
  static const KEYCODE_F11 = 141;

  /// from: static public final int KEYCODE_F12
  ///
  /// Key code constant: F12 key.
  static const KEYCODE_F12 = 142;

  /// from: static public final int KEYCODE_F2
  ///
  /// Key code constant: F2 key.
  static const KEYCODE_F2 = 132;

  /// from: static public final int KEYCODE_F3
  ///
  /// Key code constant: F3 key.
  static const KEYCODE_F3 = 133;

  /// from: static public final int KEYCODE_F4
  ///
  /// Key code constant: F4 key.
  static const KEYCODE_F4 = 134;

  /// from: static public final int KEYCODE_F5
  ///
  /// Key code constant: F5 key.
  static const KEYCODE_F5 = 135;

  /// from: static public final int KEYCODE_F6
  ///
  /// Key code constant: F6 key.
  static const KEYCODE_F6 = 136;

  /// from: static public final int KEYCODE_F7
  ///
  /// Key code constant: F7 key.
  static const KEYCODE_F7 = 137;

  /// from: static public final int KEYCODE_F8
  ///
  /// Key code constant: F8 key.
  static const KEYCODE_F8 = 138;

  /// from: static public final int KEYCODE_F9
  ///
  /// Key code constant: F9 key.
  static const KEYCODE_F9 = 139;

  /// from: static public final int KEYCODE_FOCUS
  ///
  /// Key code constant: Camera Focus key.
  /// Used to focus the camera.
  static const KEYCODE_FOCUS = 80;

  /// from: static public final int KEYCODE_FORWARD
  ///
  /// Key code constant: Forward key.
  /// Navigates forward in the history stack.  Complement of \#KEYCODE_BACK.
  static const KEYCODE_FORWARD = 125;

  /// from: static public final int KEYCODE_FORWARD_DEL
  ///
  /// Key code constant: Forward Delete key.
  /// Deletes characters ahead of the insertion point, unlike \#KEYCODE_DEL.
  static const KEYCODE_FORWARD_DEL = 112;

  /// from: static public final int KEYCODE_FUNCTION
  ///
  /// Key code constant: Function modifier key.
  static const KEYCODE_FUNCTION = 119;

  /// from: static public final int KEYCODE_G
  ///
  /// Key code constant: 'G' key.
  static const KEYCODE_G = 35;

  /// from: static public final int KEYCODE_GRAVE
  ///
  /// Key code constant: '`' (backtick) key.
  static const KEYCODE_GRAVE = 68;

  /// from: static public final int KEYCODE_GUIDE
  ///
  /// Key code constant: Guide key.
  /// On TV remotes, shows a programming guide.
  static const KEYCODE_GUIDE = 172;

  /// from: static public final int KEYCODE_H
  ///
  /// Key code constant: 'H' key.
  static const KEYCODE_H = 36;

  /// from: static public final int KEYCODE_HEADSETHOOK
  ///
  /// Key code constant: Headset Hook key.
  /// Used to hang up calls and stop media.
  static const KEYCODE_HEADSETHOOK = 79;

  /// from: static public final int KEYCODE_HELP
  ///
  /// Key code constant: Help key.
  static const KEYCODE_HELP = 259;

  /// from: static public final int KEYCODE_HENKAN
  ///
  /// Key code constant: Japanese conversion key.
  static const KEYCODE_HENKAN = 214;

  /// from: static public final int KEYCODE_HOME
  ///
  /// Key code constant: Home key.
  /// This key is handled by the framework and is never delivered to applications.
  static const KEYCODE_HOME = 3;

  /// from: static public final int KEYCODE_I
  ///
  /// Key code constant: 'I' key.
  static const KEYCODE_I = 37;

  /// from: static public final int KEYCODE_INFO
  ///
  /// Key code constant: Info key.
  /// Common on TV remotes to show additional information related to what is
  /// currently being viewed.
  static const KEYCODE_INFO = 165;

  /// from: static public final int KEYCODE_INSERT
  ///
  /// Key code constant: Insert key.
  /// Toggles insert / overwrite edit mode.
  static const KEYCODE_INSERT = 124;

  /// from: static public final int KEYCODE_J
  ///
  /// Key code constant: 'J' key.
  static const KEYCODE_J = 38;

  /// from: static public final int KEYCODE_K
  ///
  /// Key code constant: 'K' key.
  static const KEYCODE_K = 39;

  /// from: static public final int KEYCODE_KANA
  ///
  /// Key code constant: Japanese kana key.
  static const KEYCODE_KANA = 218;

  /// from: static public final int KEYCODE_KATAKANA_HIRAGANA
  ///
  /// Key code constant: Japanese katakana / hiragana key.
  static const KEYCODE_KATAKANA_HIRAGANA = 215;

  /// from: static public final int KEYCODE_L
  ///
  /// Key code constant: 'L' key.
  static const KEYCODE_L = 40;

  /// from: static public final int KEYCODE_LANGUAGE_SWITCH
  ///
  /// Key code constant: Language Switch key.
  /// Toggles the current input language such as switching between English and Japanese on
  /// a QWERTY keyboard.  On some devices, the same function may be performed by
  /// pressing Shift+Spacebar.
  static const KEYCODE_LANGUAGE_SWITCH = 204;

  /// from: static public final int KEYCODE_LAST_CHANNEL
  ///
  /// Key code constant: Last Channel key.
  /// Goes to the last viewed channel.
  static const KEYCODE_LAST_CHANNEL = 229;

  /// from: static public final int KEYCODE_LEFT_BRACKET
  ///
  /// Key code constant: '[' key.
  static const KEYCODE_LEFT_BRACKET = 71;

  /// from: static public final int KEYCODE_M
  ///
  /// Key code constant: 'M' key.
  static const KEYCODE_M = 41;

  /// from: static public final int KEYCODE_MANNER_MODE
  ///
  /// Key code constant: Manner Mode key.
  /// Toggles silent or vibrate mode on and off to make the device behave more politely
  /// in certain settings such as on a crowded train.  On some devices, the key may only
  /// operate when long-pressed.
  static const KEYCODE_MANNER_MODE = 205;

  /// from: static public final int KEYCODE_MEDIA_AUDIO_TRACK
  ///
  /// Key code constant: Audio Track key.
  /// Switches the audio tracks.
  static const KEYCODE_MEDIA_AUDIO_TRACK = 222;

  /// from: static public final int KEYCODE_MEDIA_CLOSE
  ///
  /// Key code constant: Close media key.
  /// May be used to close a CD tray, for example.
  static const KEYCODE_MEDIA_CLOSE = 128;

  /// from: static public final int KEYCODE_MEDIA_EJECT
  ///
  /// Key code constant: Eject media key.
  /// May be used to eject a CD tray, for example.
  static const KEYCODE_MEDIA_EJECT = 129;

  /// from: static public final int KEYCODE_MEDIA_FAST_FORWARD
  ///
  /// Key code constant: Fast Forward media key.
  static const KEYCODE_MEDIA_FAST_FORWARD = 90;

  /// from: static public final int KEYCODE_MEDIA_NEXT
  ///
  /// Key code constant: Play Next media key.
  static const KEYCODE_MEDIA_NEXT = 87;

  /// from: static public final int KEYCODE_MEDIA_PAUSE
  ///
  /// Key code constant: Pause media key.
  static const KEYCODE_MEDIA_PAUSE = 127;

  /// from: static public final int KEYCODE_MEDIA_PLAY
  ///
  /// Key code constant: Play media key.
  static const KEYCODE_MEDIA_PLAY = 126;

  /// from: static public final int KEYCODE_MEDIA_PLAY_PAUSE
  ///
  /// Key code constant: Play/Pause media key.
  static const KEYCODE_MEDIA_PLAY_PAUSE = 85;

  /// from: static public final int KEYCODE_MEDIA_PREVIOUS
  ///
  /// Key code constant: Play Previous media key.
  static const KEYCODE_MEDIA_PREVIOUS = 88;

  /// from: static public final int KEYCODE_MEDIA_RECORD
  ///
  /// Key code constant: Record media key.
  static const KEYCODE_MEDIA_RECORD = 130;

  /// from: static public final int KEYCODE_MEDIA_REWIND
  ///
  /// Key code constant: Rewind media key.
  static const KEYCODE_MEDIA_REWIND = 89;

  /// from: static public final int KEYCODE_MEDIA_SKIP_BACKWARD
  ///
  /// Key code constant: Skip backward media key.
  static const KEYCODE_MEDIA_SKIP_BACKWARD = 273;

  /// from: static public final int KEYCODE_MEDIA_SKIP_FORWARD
  ///
  /// Key code constant: Skip forward media key.
  static const KEYCODE_MEDIA_SKIP_FORWARD = 272;

  /// from: static public final int KEYCODE_MEDIA_STEP_BACKWARD
  ///
  /// Key code constant: Step backward media key.
  /// Steps media backward, one frame at a time.
  static const KEYCODE_MEDIA_STEP_BACKWARD = 275;

  /// from: static public final int KEYCODE_MEDIA_STEP_FORWARD
  ///
  /// Key code constant: Step forward media key.
  /// Steps media forward, one frame at a time.
  static const KEYCODE_MEDIA_STEP_FORWARD = 274;

  /// from: static public final int KEYCODE_MEDIA_STOP
  ///
  /// Key code constant: Stop media key.
  static const KEYCODE_MEDIA_STOP = 86;

  /// from: static public final int KEYCODE_MEDIA_TOP_MENU
  ///
  /// Key code constant: Media Top Menu key.
  /// Goes to the top of media menu.
  static const KEYCODE_MEDIA_TOP_MENU = 226;

  /// from: static public final int KEYCODE_MENU
  ///
  /// Key code constant: Menu key.
  static const KEYCODE_MENU = 82;

  /// from: static public final int KEYCODE_META_LEFT
  ///
  /// Key code constant: Left Meta modifier key.
  static const KEYCODE_META_LEFT = 117;

  /// from: static public final int KEYCODE_META_RIGHT
  ///
  /// Key code constant: Right Meta modifier key.
  static const KEYCODE_META_RIGHT = 118;

  /// from: static public final int KEYCODE_MINUS
  ///
  /// Key code constant: '-'.
  static const KEYCODE_MINUS = 69;

  /// from: static public final int KEYCODE_MOVE_END
  ///
  /// Key code constant: End Movement key.
  /// Used for scrolling or moving the cursor around to the end of a line
  /// or to the bottom of a list.
  static const KEYCODE_MOVE_END = 123;

  /// from: static public final int KEYCODE_MOVE_HOME
  ///
  /// Key code constant: Home Movement key.
  /// Used for scrolling or moving the cursor around to the start of a line
  /// or to the top of a list.
  static const KEYCODE_MOVE_HOME = 122;

  /// from: static public final int KEYCODE_MUHENKAN
  ///
  /// Key code constant: Japanese non-conversion key.
  static const KEYCODE_MUHENKAN = 213;

  /// from: static public final int KEYCODE_MUSIC
  ///
  /// Key code constant: Music special function key.
  /// Used to launch a music player application.
  static const KEYCODE_MUSIC = 209;

  /// from: static public final int KEYCODE_MUTE
  ///
  /// Key code constant: Mute key.
  /// Mutes the microphone, unlike \#KEYCODE_VOLUME_MUTE.
  static const KEYCODE_MUTE = 91;

  /// from: static public final int KEYCODE_N
  ///
  /// Key code constant: 'N' key.
  static const KEYCODE_N = 42;

  /// from: static public final int KEYCODE_NAVIGATE_IN
  ///
  /// Key code constant: Navigate in key.
  /// Activates the item that currently has focus or expands to the next level of a navigation
  /// hierarchy.
  static const KEYCODE_NAVIGATE_IN = 262;

  /// from: static public final int KEYCODE_NAVIGATE_NEXT
  ///
  /// Key code constant: Navigate to next key.
  /// Advances to the next item in an ordered collection of items.
  static const KEYCODE_NAVIGATE_NEXT = 261;

  /// from: static public final int KEYCODE_NAVIGATE_OUT
  ///
  /// Key code constant: Navigate out key.
  /// Backs out one level of a navigation hierarchy or collapses the item that currently has
  /// focus.
  static const KEYCODE_NAVIGATE_OUT = 263;

  /// from: static public final int KEYCODE_NAVIGATE_PREVIOUS
  ///
  /// Key code constant: Navigate to previous key.
  /// Goes backward by one item in an ordered collection of items.
  static const KEYCODE_NAVIGATE_PREVIOUS = 260;

  /// from: static public final int KEYCODE_NOTIFICATION
  ///
  /// Key code constant: Notification key.
  static const KEYCODE_NOTIFICATION = 83;

  /// from: static public final int KEYCODE_NUM
  ///
  /// Key code constant: Number modifier key.
  /// Used to enter numeric symbols.
  /// This key is not Num Lock; it is more like \#KEYCODE_ALT_LEFT and is
  /// interpreted as an ALT key by android.text.method.MetaKeyKeyListener.
  static const KEYCODE_NUM = 78;

  /// from: static public final int KEYCODE_NUMPAD_0
  ///
  /// Key code constant: Numeric keypad '0' key.
  static const KEYCODE_NUMPAD_0 = 144;

  /// from: static public final int KEYCODE_NUMPAD_1
  ///
  /// Key code constant: Numeric keypad '1' key.
  static const KEYCODE_NUMPAD_1 = 145;

  /// from: static public final int KEYCODE_NUMPAD_2
  ///
  /// Key code constant: Numeric keypad '2' key.
  static const KEYCODE_NUMPAD_2 = 146;

  /// from: static public final int KEYCODE_NUMPAD_3
  ///
  /// Key code constant: Numeric keypad '3' key.
  static const KEYCODE_NUMPAD_3 = 147;

  /// from: static public final int KEYCODE_NUMPAD_4
  ///
  /// Key code constant: Numeric keypad '4' key.
  static const KEYCODE_NUMPAD_4 = 148;

  /// from: static public final int KEYCODE_NUMPAD_5
  ///
  /// Key code constant: Numeric keypad '5' key.
  static const KEYCODE_NUMPAD_5 = 149;

  /// from: static public final int KEYCODE_NUMPAD_6
  ///
  /// Key code constant: Numeric keypad '6' key.
  static const KEYCODE_NUMPAD_6 = 150;

  /// from: static public final int KEYCODE_NUMPAD_7
  ///
  /// Key code constant: Numeric keypad '7' key.
  static const KEYCODE_NUMPAD_7 = 151;

  /// from: static public final int KEYCODE_NUMPAD_8
  ///
  /// Key code constant: Numeric keypad '8' key.
  static const KEYCODE_NUMPAD_8 = 152;

  /// from: static public final int KEYCODE_NUMPAD_9
  ///
  /// Key code constant: Numeric keypad '9' key.
  static const KEYCODE_NUMPAD_9 = 153;

  /// from: static public final int KEYCODE_NUMPAD_ADD
  ///
  /// Key code constant: Numeric keypad '+' key (for addition).
  static const KEYCODE_NUMPAD_ADD = 157;

  /// from: static public final int KEYCODE_NUMPAD_COMMA
  ///
  /// Key code constant: Numeric keypad ',' key (for decimals or digit grouping).
  static const KEYCODE_NUMPAD_COMMA = 159;

  /// from: static public final int KEYCODE_NUMPAD_DIVIDE
  ///
  /// Key code constant: Numeric keypad '/' key (for division).
  static const KEYCODE_NUMPAD_DIVIDE = 154;

  /// from: static public final int KEYCODE_NUMPAD_DOT
  ///
  /// Key code constant: Numeric keypad '.' key (for decimals or digit grouping).
  static const KEYCODE_NUMPAD_DOT = 158;

  /// from: static public final int KEYCODE_NUMPAD_ENTER
  ///
  /// Key code constant: Numeric keypad Enter key.
  static const KEYCODE_NUMPAD_ENTER = 160;

  /// from: static public final int KEYCODE_NUMPAD_EQUALS
  ///
  /// Key code constant: Numeric keypad '=' key.
  static const KEYCODE_NUMPAD_EQUALS = 161;

  /// from: static public final int KEYCODE_NUMPAD_LEFT_PAREN
  ///
  /// Key code constant: Numeric keypad '(' key.
  static const KEYCODE_NUMPAD_LEFT_PAREN = 162;

  /// from: static public final int KEYCODE_NUMPAD_MULTIPLY
  ///
  /// Key code constant: Numeric keypad '*' key (for multiplication).
  static const KEYCODE_NUMPAD_MULTIPLY = 155;

  /// from: static public final int KEYCODE_NUMPAD_RIGHT_PAREN
  ///
  /// Key code constant: Numeric keypad ')' key.
  static const KEYCODE_NUMPAD_RIGHT_PAREN = 163;

  /// from: static public final int KEYCODE_NUMPAD_SUBTRACT
  ///
  /// Key code constant: Numeric keypad '-' key (for subtraction).
  static const KEYCODE_NUMPAD_SUBTRACT = 156;

  /// from: static public final int KEYCODE_NUM_LOCK
  ///
  /// Key code constant: Num Lock key.
  /// This is the Num Lock key; it is different from \#KEYCODE_NUM.
  /// This key alters the behavior of other keys on the numeric keypad.
  static const KEYCODE_NUM_LOCK = 143;

  /// from: static public final int KEYCODE_O
  ///
  /// Key code constant: 'O' key.
  static const KEYCODE_O = 43;

  /// from: static public final int KEYCODE_P
  ///
  /// Key code constant: 'P' key.
  static const KEYCODE_P = 44;

  /// from: static public final int KEYCODE_PAGE_DOWN
  ///
  /// Key code constant: Page Down key.
  static const KEYCODE_PAGE_DOWN = 93;

  /// from: static public final int KEYCODE_PAGE_UP
  ///
  /// Key code constant: Page Up key.
  static const KEYCODE_PAGE_UP = 92;

  /// from: static public final int KEYCODE_PAIRING
  ///
  /// Key code constant: Pairing key.
  /// Initiates peripheral pairing mode. Useful for pairing remote control
  /// devices or game controllers, especially if no other input mode is
  /// available.
  static const KEYCODE_PAIRING = 225;

  /// from: static public final int KEYCODE_PASTE
  ///
  /// Key code constant: Paste key.
  static const KEYCODE_PASTE = 279;

  /// from: static public final int KEYCODE_PERIOD
  ///
  /// Key code constant: '.' key.
  static const KEYCODE_PERIOD = 56;

  /// from: static public final int KEYCODE_PICTSYMBOLS
  ///
  /// Key code constant: Picture Symbols modifier key.
  /// Used to switch symbol sets (Emoji, Kao-moji).
  static const KEYCODE_PICTSYMBOLS = 94;

  /// from: static public final int KEYCODE_PLUS
  ///
  /// Key code constant: '+' key.
  static const KEYCODE_PLUS = 81;

  /// from: static public final int KEYCODE_POUND
  ///
  /// Key code constant: '\#' key.
  static const KEYCODE_POUND = 18;

  /// from: static public final int KEYCODE_POWER
  ///
  /// Key code constant: Power key.
  static const KEYCODE_POWER = 26;

  /// from: static public final int KEYCODE_PROG_BLUE
  ///
  /// Key code constant: Blue "programmable" key.
  /// On TV remotes, acts as a contextual/programmable key.
  static const KEYCODE_PROG_BLUE = 186;

  /// from: static public final int KEYCODE_PROG_GREEN
  ///
  /// Key code constant: Green "programmable" key.
  /// On TV remotes, actsas a contextual/programmable key.
  static const KEYCODE_PROG_GREEN = 184;

  /// from: static public final int KEYCODE_PROG_RED
  ///
  /// Key code constant: Red "programmable" key.
  /// On TV remotes, acts as a contextual/programmable key.
  static const KEYCODE_PROG_RED = 183;

  /// from: static public final int KEYCODE_PROG_YELLOW
  ///
  /// Key code constant: Yellow "programmable" key.
  /// On TV remotes, acts as a contextual/programmable key.
  static const KEYCODE_PROG_YELLOW = 185;

  /// from: static public final int KEYCODE_Q
  ///
  /// Key code constant: 'Q' key.
  static const KEYCODE_Q = 45;

  /// from: static public final int KEYCODE_R
  ///
  /// Key code constant: 'R' key.
  static const KEYCODE_R = 46;

  /// from: static public final int KEYCODE_REFRESH
  ///
  /// Key code constant: Refresh key.
  static const KEYCODE_REFRESH = 285;

  /// from: static public final int KEYCODE_RIGHT_BRACKET
  ///
  /// Key code constant: ']' key.
  static const KEYCODE_RIGHT_BRACKET = 72;

  /// from: static public final int KEYCODE_RO
  ///
  /// Key code constant: Japanese Ro key.
  static const KEYCODE_RO = 217;

  /// from: static public final int KEYCODE_S
  ///
  /// Key code constant: 'S' key.
  static const KEYCODE_S = 47;

  /// from: static public final int KEYCODE_SCROLL_LOCK
  ///
  /// Key code constant: Scroll Lock key.
  static const KEYCODE_SCROLL_LOCK = 116;

  /// from: static public final int KEYCODE_SEARCH
  ///
  /// Key code constant: Search key.
  static const KEYCODE_SEARCH = 84;

  /// from: static public final int KEYCODE_SEMICOLON
  ///
  /// Key code constant: ';' key.
  static const KEYCODE_SEMICOLON = 74;

  /// from: static public final int KEYCODE_SETTINGS
  ///
  /// Key code constant: Settings key.
  /// Starts the system settings activity.
  static const KEYCODE_SETTINGS = 176;

  /// from: static public final int KEYCODE_SHIFT_LEFT
  ///
  /// Key code constant: Left Shift modifier key.
  static const KEYCODE_SHIFT_LEFT = 59;

  /// from: static public final int KEYCODE_SHIFT_RIGHT
  ///
  /// Key code constant: Right Shift modifier key.
  static const KEYCODE_SHIFT_RIGHT = 60;

  /// from: static public final int KEYCODE_SLASH
  ///
  /// Key code constant: '/' key.
  static const KEYCODE_SLASH = 76;

  /// from: static public final int KEYCODE_SLEEP
  ///
  /// Key code constant: Sleep key.
  /// Puts the device to sleep.  Behaves somewhat like \#KEYCODE_POWER but it
  /// has no effect if the device is already asleep.
  static const KEYCODE_SLEEP = 223;

  /// from: static public final int KEYCODE_SOFT_LEFT
  ///
  /// Key code constant: Soft Left key.
  /// Usually situated below the display on phones and used as a multi-function
  /// feature key for selecting a software defined function shown on the bottom left
  /// of the display.
  static const KEYCODE_SOFT_LEFT = 1;

  /// from: static public final int KEYCODE_SOFT_RIGHT
  ///
  /// Key code constant: Soft Right key.
  /// Usually situated below the display on phones and used as a multi-function
  /// feature key for selecting a software defined function shown on the bottom right
  /// of the display.
  static const KEYCODE_SOFT_RIGHT = 2;

  /// from: static public final int KEYCODE_SOFT_SLEEP
  ///
  /// Key code constant: put device to sleep unless a wakelock is held.
  static const KEYCODE_SOFT_SLEEP = 276;

  /// from: static public final int KEYCODE_SPACE
  ///
  /// Key code constant: Space key.
  static const KEYCODE_SPACE = 62;

  /// from: static public final int KEYCODE_STAR
  ///
  /// Key code constant: '*' key.
  static const KEYCODE_STAR = 17;

  /// from: static public final int KEYCODE_STB_INPUT
  ///
  /// Key code constant: Set-top-box input key.
  /// On TV remotes, switches the input mode on an external Set-top-box.
  static const KEYCODE_STB_INPUT = 180;

  /// from: static public final int KEYCODE_STB_POWER
  ///
  /// Key code constant: Set-top-box power key.
  /// On TV remotes, toggles the power on an external Set-top-box.
  static const KEYCODE_STB_POWER = 179;

  /// from: static public final int KEYCODE_STEM_1
  ///
  /// Key code constant: Generic stem key 1 for Wear
  static const KEYCODE_STEM_1 = 265;

  /// from: static public final int KEYCODE_STEM_2
  ///
  /// Key code constant: Generic stem key 2 for Wear
  static const KEYCODE_STEM_2 = 266;

  /// from: static public final int KEYCODE_STEM_3
  ///
  /// Key code constant: Generic stem key 3 for Wear
  static const KEYCODE_STEM_3 = 267;

  /// from: static public final int KEYCODE_STEM_PRIMARY
  ///
  /// Key code constant: Primary stem key for Wear
  /// Main power/reset button on watch.
  static const KEYCODE_STEM_PRIMARY = 264;

  /// from: static public final int KEYCODE_SWITCH_CHARSET
  ///
  /// Key code constant: Switch Charset modifier key.
  /// Used to switch character sets (Kanji, Katakana).
  static const KEYCODE_SWITCH_CHARSET = 95;

  /// from: static public final int KEYCODE_SYM
  ///
  /// Key code constant: Symbol modifier key.
  /// Used to enter alternate symbols.
  static const KEYCODE_SYM = 63;

  /// from: static public final int KEYCODE_SYSRQ
  ///
  /// Key code constant: System Request / Print Screen key.
  static const KEYCODE_SYSRQ = 120;

  /// from: static public final int KEYCODE_SYSTEM_NAVIGATION_DOWN
  ///
  /// Key code constant: Consumed by the system for navigation down
  static const KEYCODE_SYSTEM_NAVIGATION_DOWN = 281;

  /// from: static public final int KEYCODE_SYSTEM_NAVIGATION_LEFT
  ///
  /// Key code constant: Consumed by the system for navigation left
  static const KEYCODE_SYSTEM_NAVIGATION_LEFT = 282;

  /// from: static public final int KEYCODE_SYSTEM_NAVIGATION_RIGHT
  ///
  /// Key code constant: Consumed by the system for navigation right
  static const KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283;

  /// from: static public final int KEYCODE_SYSTEM_NAVIGATION_UP
  ///
  /// Key code constant: Consumed by the system for navigation up
  static const KEYCODE_SYSTEM_NAVIGATION_UP = 280;

  /// from: static public final int KEYCODE_T
  ///
  /// Key code constant: 'T' key.
  static const KEYCODE_T = 48;

  /// from: static public final int KEYCODE_TAB
  ///
  /// Key code constant: Tab key.
  static const KEYCODE_TAB = 61;

  /// from: static public final int KEYCODE_TV
  ///
  /// Key code constant: TV key.
  /// On TV remotes, switches to viewing live TV.
  static const KEYCODE_TV = 170;

  /// from: static public final int KEYCODE_TV_ANTENNA_CABLE
  ///
  /// Key code constant: Antenna/Cable key.
  /// Toggles broadcast input source between antenna and cable.
  static const KEYCODE_TV_ANTENNA_CABLE = 242;

  /// from: static public final int KEYCODE_TV_AUDIO_DESCRIPTION
  ///
  /// Key code constant: Audio description key.
  /// Toggles audio description off / on.
  static const KEYCODE_TV_AUDIO_DESCRIPTION = 252;

  /// from: static public final int KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN
  ///
  /// Key code constant: Audio description mixing volume down key.
  /// Lessen audio description volume as compared with normal audio volume.
  static const KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN = 254;

  /// from: static public final int KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP
  ///
  /// Key code constant: Audio description mixing volume up key.
  /// Louden audio description volume as compared with normal audio volume.
  static const KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP = 253;

  /// from: static public final int KEYCODE_TV_CONTENTS_MENU
  ///
  /// Key code constant: Contents menu key.
  /// Goes to the title list. Corresponds to Contents Menu (0x0B) of CEC User Control
  /// Code
  static const KEYCODE_TV_CONTENTS_MENU = 256;

  /// from: static public final int KEYCODE_TV_DATA_SERVICE
  ///
  /// Key code constant: TV data service key.
  /// Displays data services like weather, sports.
  static const KEYCODE_TV_DATA_SERVICE = 230;

  /// from: static public final int KEYCODE_TV_INPUT
  ///
  /// Key code constant: TV input key.
  /// On TV remotes, switches the input on a television screen.
  static const KEYCODE_TV_INPUT = 178;

  /// from: static public final int KEYCODE_TV_INPUT_COMPONENT_1
  ///
  /// Key code constant: Component \#1 key.
  /// Switches to component video input \#1.
  static const KEYCODE_TV_INPUT_COMPONENT_1 = 249;

  /// from: static public final int KEYCODE_TV_INPUT_COMPONENT_2
  ///
  /// Key code constant: Component \#2 key.
  /// Switches to component video input \#2.
  static const KEYCODE_TV_INPUT_COMPONENT_2 = 250;

  /// from: static public final int KEYCODE_TV_INPUT_COMPOSITE_1
  ///
  /// Key code constant: Composite \#1 key.
  /// Switches to composite video input \#1.
  static const KEYCODE_TV_INPUT_COMPOSITE_1 = 247;

  /// from: static public final int KEYCODE_TV_INPUT_COMPOSITE_2
  ///
  /// Key code constant: Composite \#2 key.
  /// Switches to composite video input \#2.
  static const KEYCODE_TV_INPUT_COMPOSITE_2 = 248;

  /// from: static public final int KEYCODE_TV_INPUT_HDMI_1
  ///
  /// Key code constant: HDMI \#1 key.
  /// Switches to HDMI input \#1.
  static const KEYCODE_TV_INPUT_HDMI_1 = 243;

  /// from: static public final int KEYCODE_TV_INPUT_HDMI_2
  ///
  /// Key code constant: HDMI \#2 key.
  /// Switches to HDMI input \#2.
  static const KEYCODE_TV_INPUT_HDMI_2 = 244;

  /// from: static public final int KEYCODE_TV_INPUT_HDMI_3
  ///
  /// Key code constant: HDMI \#3 key.
  /// Switches to HDMI input \#3.
  static const KEYCODE_TV_INPUT_HDMI_3 = 245;

  /// from: static public final int KEYCODE_TV_INPUT_HDMI_4
  ///
  /// Key code constant: HDMI \#4 key.
  /// Switches to HDMI input \#4.
  static const KEYCODE_TV_INPUT_HDMI_4 = 246;

  /// from: static public final int KEYCODE_TV_INPUT_VGA_1
  ///
  /// Key code constant: VGA \#1 key.
  /// Switches to VGA (analog RGB) input \#1.
  static const KEYCODE_TV_INPUT_VGA_1 = 251;

  /// from: static public final int KEYCODE_TV_MEDIA_CONTEXT_MENU
  ///
  /// Key code constant: Media context menu key.
  /// Goes to the context menu of media contents. Corresponds to Media Context-sensitive
  /// Menu (0x11) of CEC User Control Code.
  static const KEYCODE_TV_MEDIA_CONTEXT_MENU = 257;

  /// from: static public final int KEYCODE_TV_NETWORK
  ///
  /// Key code constant: Toggle Network key.
  /// Toggles selecting broacast services.
  static const KEYCODE_TV_NETWORK = 241;

  /// from: static public final int KEYCODE_TV_NUMBER_ENTRY
  ///
  /// Key code constant: Number entry key.
  /// Initiates to enter multi-digit channel nubmber when each digit key is assigned
  /// for selecting separate channel. Corresponds to Number Entry Mode (0x1D) of CEC
  /// User Control Code.
  static const KEYCODE_TV_NUMBER_ENTRY = 234;

  /// from: static public final int KEYCODE_TV_POWER
  ///
  /// Key code constant: TV power key.
  /// On TV remotes, toggles the power on a television screen.
  static const KEYCODE_TV_POWER = 177;

  /// from: static public final int KEYCODE_TV_RADIO_SERVICE
  ///
  /// Key code constant: Radio key.
  /// Toggles TV service / Radio service.
  static const KEYCODE_TV_RADIO_SERVICE = 232;

  /// from: static public final int KEYCODE_TV_SATELLITE
  ///
  /// Key code constant: Satellite key.
  /// Switches to digital satellite broadcast service.
  static const KEYCODE_TV_SATELLITE = 237;

  /// from: static public final int KEYCODE_TV_SATELLITE_BS
  ///
  /// Key code constant: BS key.
  /// Switches to BS digital satellite broadcasting service available in Japan.
  static const KEYCODE_TV_SATELLITE_BS = 238;

  /// from: static public final int KEYCODE_TV_SATELLITE_CS
  ///
  /// Key code constant: CS key.
  /// Switches to CS digital satellite broadcasting service available in Japan.
  static const KEYCODE_TV_SATELLITE_CS = 239;

  /// from: static public final int KEYCODE_TV_SATELLITE_SERVICE
  ///
  /// Key code constant: BS/CS key.
  /// Toggles between BS and CS digital satellite services.
  static const KEYCODE_TV_SATELLITE_SERVICE = 240;

  /// from: static public final int KEYCODE_TV_TELETEXT
  ///
  /// Key code constant: Teletext key.
  /// Displays Teletext service.
  static const KEYCODE_TV_TELETEXT = 233;

  /// from: static public final int KEYCODE_TV_TERRESTRIAL_ANALOG
  ///
  /// Key code constant: Analog Terrestrial key.
  /// Switches to analog terrestrial broadcast service.
  static const KEYCODE_TV_TERRESTRIAL_ANALOG = 235;

  /// from: static public final int KEYCODE_TV_TERRESTRIAL_DIGITAL
  ///
  /// Key code constant: Digital Terrestrial key.
  /// Switches to digital terrestrial broadcast service.
  static const KEYCODE_TV_TERRESTRIAL_DIGITAL = 236;

  /// from: static public final int KEYCODE_TV_TIMER_PROGRAMMING
  ///
  /// Key code constant: Timer programming key.
  /// Goes to the timer recording menu. Corresponds to Timer Programming (0x54) of
  /// CEC User Control Code.
  static const KEYCODE_TV_TIMER_PROGRAMMING = 258;

  /// from: static public final int KEYCODE_TV_ZOOM_MODE
  ///
  /// Key code constant: Zoom mode key.
  /// Changes Zoom mode (Normal, Full, Zoom, Wide-zoom, etc.)
  static const KEYCODE_TV_ZOOM_MODE = 255;

  /// from: static public final int KEYCODE_U
  ///
  /// Key code constant: 'U' key.
  static const KEYCODE_U = 49;

  /// from: static public final int KEYCODE_UNKNOWN
  ///
  /// Key code constant: Unknown key code.
  static const KEYCODE_UNKNOWN = 0;

  /// from: static public final int KEYCODE_V
  ///
  /// Key code constant: 'V' key.
  static const KEYCODE_V = 50;

  /// from: static public final int KEYCODE_VOICE_ASSIST
  ///
  /// Key code constant: Voice Assist key.
  /// Launches the global voice assist activity. Not delivered to applications.
  static const KEYCODE_VOICE_ASSIST = 231;

  /// from: static public final int KEYCODE_VOLUME_DOWN
  ///
  /// Key code constant: Volume Down key.
  /// Adjusts the speaker volume down.
  static const KEYCODE_VOLUME_DOWN = 25;

  /// from: static public final int KEYCODE_VOLUME_MUTE
  ///
  /// Key code constant: Volume Mute key.
  /// Mutes the speaker, unlike \#KEYCODE_MUTE.
  /// This key should normally be implemented as a toggle such that the first press
  /// mutes the speaker and the second press restores the original volume.
  static const KEYCODE_VOLUME_MUTE = 164;

  /// from: static public final int KEYCODE_VOLUME_UP
  ///
  /// Key code constant: Volume Up key.
  /// Adjusts the speaker volume up.
  static const KEYCODE_VOLUME_UP = 24;

  /// from: static public final int KEYCODE_W
  ///
  /// Key code constant: 'W' key.
  static const KEYCODE_W = 51;

  /// from: static public final int KEYCODE_WAKEUP
  ///
  /// Key code constant: Wakeup key.
  /// Wakes up the device.  Behaves somewhat like \#KEYCODE_POWER but it
  /// has no effect if the device is already awake.
  static const KEYCODE_WAKEUP = 224;

  /// from: static public final int KEYCODE_WINDOW
  ///
  /// Key code constant: Window key.
  /// On TV remotes, toggles picture-in-picture mode or other windowing functions.
  /// On Android Wear devices, triggers a display offset.
  static const KEYCODE_WINDOW = 171;

  /// from: static public final int KEYCODE_X
  ///
  /// Key code constant: 'X' key.
  static const KEYCODE_X = 52;

  /// from: static public final int KEYCODE_Y
  ///
  /// Key code constant: 'Y' key.
  static const KEYCODE_Y = 53;

  /// from: static public final int KEYCODE_YEN
  ///
  /// Key code constant: Japanese Yen key.
  static const KEYCODE_YEN = 216;

  /// from: static public final int KEYCODE_Z
  ///
  /// Key code constant: 'Z' key.
  static const KEYCODE_Z = 54;

  /// from: static public final int KEYCODE_ZENKAKU_HANKAKU
  ///
  /// Key code constant: Japanese full-width / half-width key.
  static const KEYCODE_ZENKAKU_HANKAKU = 211;

  /// from: static public final int KEYCODE_ZOOM_IN
  ///
  /// Key code constant: Zoom in key.
  static const KEYCODE_ZOOM_IN = 168;

  /// from: static public final int KEYCODE_ZOOM_OUT
  ///
  /// Key code constant: Zoom out key.
  static const KEYCODE_ZOOM_OUT = 169;

  /// from: static public final int MAX_KEYCODE
  ///
  /// @deprecated There are now more than MAX_KEYCODE keycodes.
  /// Use \#getMaxKeyCode() instead.
  static const MAX_KEYCODE = 84;

  /// from: static public final int META_ALT_LEFT_ON
  ///
  /// This mask is used to check whether the left ALT meta key is pressed.
  ///
  ///@see \#isAltPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_ALT_LEFT
  static const META_ALT_LEFT_ON = 16;

  /// from: static public final int META_ALT_MASK
  ///
  /// This mask is a combination of \#META_ALT_ON, \#META_ALT_LEFT_ON
  /// and \#META_ALT_RIGHT_ON.
  static const META_ALT_MASK = 50;

  /// from: static public final int META_ALT_ON
  ///
  /// This mask is used to check whether one of the ALT meta keys is pressed.
  ///
  ///@see \#isAltPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_ALT_LEFT
  ///@see \#KEYCODE_ALT_RIGHT
  static const META_ALT_ON = 2;

  /// from: static public final int META_ALT_RIGHT_ON
  ///
  /// This mask is used to check whether the right the ALT meta key is pressed.
  ///
  ///@see \#isAltPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_ALT_RIGHT
  static const META_ALT_RIGHT_ON = 32;

  /// from: static public final int META_CAPS_LOCK_ON
  ///
  /// This mask is used to check whether the CAPS LOCK meta key is on.
  ///
  ///@see \#isCapsLockOn()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_CAPS_LOCK
  static const META_CAPS_LOCK_ON = 1048576;

  /// from: static public final int META_CTRL_LEFT_ON
  ///
  /// This mask is used to check whether the left CTRL meta key is pressed.
  ///
  ///@see \#isCtrlPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_CTRL_LEFT
  static const META_CTRL_LEFT_ON = 8192;

  /// from: static public final int META_CTRL_MASK
  ///
  /// This mask is a combination of \#META_CTRL_ON, \#META_CTRL_LEFT_ON
  /// and \#META_CTRL_RIGHT_ON.
  static const META_CTRL_MASK = 28672;

  /// from: static public final int META_CTRL_ON
  ///
  /// This mask is used to check whether one of the CTRL meta keys is pressed.
  ///
  ///@see \#isCtrlPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_CTRL_LEFT
  ///@see \#KEYCODE_CTRL_RIGHT
  static const META_CTRL_ON = 4096;

  /// from: static public final int META_CTRL_RIGHT_ON
  ///
  /// This mask is used to check whether the right CTRL meta key is pressed.
  ///
  ///@see \#isCtrlPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_CTRL_RIGHT
  static const META_CTRL_RIGHT_ON = 16384;

  /// from: static public final int META_FUNCTION_ON
  ///
  /// This mask is used to check whether the FUNCTION meta key is pressed.
  ///
  ///@see \#isFunctionPressed()
  ///@see \#getMetaState()
  static const META_FUNCTION_ON = 8;

  /// from: static public final int META_META_LEFT_ON
  ///
  /// This mask is used to check whether the left META meta key is pressed.
  ///
  ///@see \#isMetaPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_META_LEFT
  static const META_META_LEFT_ON = 131072;

  /// from: static public final int META_META_MASK
  ///
  /// This mask is a combination of \#META_META_ON, \#META_META_LEFT_ON
  /// and \#META_META_RIGHT_ON.
  static const META_META_MASK = 458752;

  /// from: static public final int META_META_ON
  ///
  /// This mask is used to check whether one of the META meta keys is pressed.
  ///
  ///@see \#isMetaPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_META_LEFT
  ///@see \#KEYCODE_META_RIGHT
  static const META_META_ON = 65536;

  /// from: static public final int META_META_RIGHT_ON
  ///
  /// This mask is used to check whether the right META meta key is pressed.
  ///
  ///@see \#isMetaPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_META_RIGHT
  static const META_META_RIGHT_ON = 262144;

  /// from: static public final int META_NUM_LOCK_ON
  ///
  /// This mask is used to check whether the NUM LOCK meta key is on.
  ///
  ///@see \#isNumLockOn()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_NUM_LOCK
  static const META_NUM_LOCK_ON = 2097152;

  /// from: static public final int META_SCROLL_LOCK_ON
  ///
  /// This mask is used to check whether the SCROLL LOCK meta key is on.
  ///
  ///@see \#isScrollLockOn()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_SCROLL_LOCK
  static const META_SCROLL_LOCK_ON = 4194304;

  /// from: static public final int META_SHIFT_LEFT_ON
  ///
  /// This mask is used to check whether the left SHIFT meta key is pressed.
  ///
  ///@see \#isShiftPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_SHIFT_LEFT
  static const META_SHIFT_LEFT_ON = 64;

  /// from: static public final int META_SHIFT_MASK
  ///
  /// This mask is a combination of \#META_SHIFT_ON, \#META_SHIFT_LEFT_ON
  /// and \#META_SHIFT_RIGHT_ON.
  static const META_SHIFT_MASK = 193;

  /// from: static public final int META_SHIFT_ON
  ///
  /// This mask is used to check whether one of the SHIFT meta keys is pressed.
  ///
  ///@see \#isShiftPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_SHIFT_LEFT
  ///@see \#KEYCODE_SHIFT_RIGHT
  static const META_SHIFT_ON = 1;

  /// from: static public final int META_SHIFT_RIGHT_ON
  ///
  /// This mask is used to check whether the right SHIFT meta key is pressed.
  ///
  ///@see \#isShiftPressed()
  ///@see \#getMetaState()
  ///@see \#KEYCODE_SHIFT_RIGHT
  static const META_SHIFT_RIGHT_ON = 128;

  /// from: static public final int META_SYM_ON
  ///
  /// This mask is used to check whether the SYM meta key is pressed.
  ///
  ///@see \#isSymPressed()
  ///@see \#getMetaState()
  static const META_SYM_ON = 4;

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int action, int code)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new key event.
  ///@param action Action code: either \#ACTION_DOWN,
  /// \#ACTION_UP, or \#ACTION_MULTIPLE.
  ///@param code The key code.
  KeyEvent.ctor1(int action, int code)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [action, code]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(JJIII)V");

  /// from: public void <init>(long downTime, long eventTime, int action, int code, int repeat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new key event.
  ///@param downTime The time (in android.os.SystemClock\#uptimeMillis)
  /// at which this key code originally went down.
  ///@param eventTime The time (in android.os.SystemClock\#uptimeMillis)
  /// at which this event happened.
  ///@param action Action code: either \#ACTION_DOWN,
  /// \#ACTION_UP, or \#ACTION_MULTIPLE.
  ///@param code The key code.
  ///@param repeat A repeat count for down events (> 0 if this is after the
  /// initial down) or event count for multiple events.
  KeyEvent.ctor2(int downTime, int eventTime, int action, int code, int repeat)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [downTime, eventTime, action, code, repeat]).object);

  static final _id_ctor3 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(JJIIII)V");

  /// from: public void <init>(long downTime, long eventTime, int action, int code, int repeat, int metaState)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new key event.
  ///@param downTime The time (in android.os.SystemClock\#uptimeMillis)
  /// at which this key code originally went down.
  ///@param eventTime The time (in android.os.SystemClock\#uptimeMillis)
  /// at which this event happened.
  ///@param action Action code: either \#ACTION_DOWN,
  /// \#ACTION_UP, or \#ACTION_MULTIPLE.
  ///@param code The key code.
  ///@param repeat A repeat count for down events (> 0 if this is after the
  /// initial down) or event count for multiple events.
  ///@param metaState Flags indicating which meta keys are currently pressed.
  KeyEvent.ctor3(int downTime, int eventTime, int action, int code, int repeat,
      int metaState)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3,
            [downTime, eventTime, action, code, repeat, metaState]).object);

  static final _id_ctor4 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(JJIIIIII)V");

  /// from: public void <init>(long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new key event.
  ///@param downTime The time (in android.os.SystemClock\#uptimeMillis)
  /// at which this key code originally went down.
  ///@param eventTime The time (in android.os.SystemClock\#uptimeMillis)
  /// at which this event happened.
  ///@param action Action code: either \#ACTION_DOWN,
  /// \#ACTION_UP, or \#ACTION_MULTIPLE.
  ///@param code The key code.
  ///@param repeat A repeat count for down events (> 0 if this is after the
  /// initial down) or event count for multiple events.
  ///@param metaState Flags indicating which meta keys are currently pressed.
  ///@param deviceId The device ID that generated the key event.
  ///@param scancode Raw device scan code of the event.
  KeyEvent.ctor4(int downTime, int eventTime, int action, int code, int repeat,
      int metaState, int deviceId, int scancode)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor4, [
          downTime,
          eventTime,
          action,
          code,
          repeat,
          metaState,
          deviceId,
          scancode
        ]).object);

  static final _id_ctor5 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(JJIIIIIII)V");

  /// from: public void <init>(long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new key event.
  ///@param downTime The time (in android.os.SystemClock\#uptimeMillis)
  /// at which this key code originally went down.
  ///@param eventTime The time (in android.os.SystemClock\#uptimeMillis)
  /// at which this event happened.
  ///@param action Action code: either \#ACTION_DOWN,
  /// \#ACTION_UP, or \#ACTION_MULTIPLE.
  ///@param code The key code.
  ///@param repeat A repeat count for down events (> 0 if this is after the
  /// initial down) or event count for multiple events.
  ///@param metaState Flags indicating which meta keys are currently pressed.
  ///@param deviceId The device ID that generated the key event.
  ///@param scancode Raw device scan code of the event.
  ///@param flags The flags for this key event
  KeyEvent.ctor5(int downTime, int eventTime, int action, int code, int repeat,
      int metaState, int deviceId, int scancode, int flags)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor5, [
          downTime,
          eventTime,
          action,
          code,
          repeat,
          metaState,
          deviceId,
          scancode,
          flags
        ]).object);

  static final _id_ctor6 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(JJIIIIIIII)V");

  /// from: public void <init>(long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode, int flags, int source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new key event.
  ///@param downTime The time (in android.os.SystemClock\#uptimeMillis)
  /// at which this key code originally went down.
  ///@param eventTime The time (in android.os.SystemClock\#uptimeMillis)
  /// at which this event happened.
  ///@param action Action code: either \#ACTION_DOWN,
  /// \#ACTION_UP, or \#ACTION_MULTIPLE.
  ///@param code The key code.
  ///@param repeat A repeat count for down events (> 0 if this is after the
  /// initial down) or event count for multiple events.
  ///@param metaState Flags indicating which meta keys are currently pressed.
  ///@param deviceId The device ID that generated the key event.
  ///@param scancode Raw device scan code of the event.
  ///@param flags The flags for this key event
  ///@param source The input source such as InputDevice\#SOURCE_KEYBOARD.
  KeyEvent.ctor6(int downTime, int eventTime, int action, int code, int repeat,
      int metaState, int deviceId, int scancode, int flags, int source)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor6, [
          downTime,
          eventTime,
          action,
          code,
          repeat,
          metaState,
          deviceId,
          scancode,
          flags,
          source
        ]).object);

  static final _id_ctor7 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(JLjava/lang/String;II)V");

  /// from: public void <init>(long time, java.lang.String characters, int deviceId, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new key event for a string of characters.  The key code,
  /// action, repeat count and source will automatically be set to
  /// \#KEYCODE_UNKNOWN, \#ACTION_MULTIPLE, 0, and
  /// InputDevice\#SOURCE_KEYBOARD for you.
  ///@param time The time (in android.os.SystemClock\#uptimeMillis)
  /// at which this event occured.
  ///@param characters The string of characters.
  ///@param deviceId The device ID that generated the key event.
  ///@param flags The flags for this key event
  KeyEvent.ctor7(int time, jni.JniString characters, int deviceId, int flags)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor7,
            [time, characters.reference, deviceId, flags]).object);

  static final _id_ctor8 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/view/KeyEvent;)V");

  /// from: public void <init>(android.view.KeyEvent origEvent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Make an exact copy of an existing key event.
  KeyEvent.ctor8(KeyEvent origEvent)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor8, [origEvent.reference]).object);

  static final _id_ctor9 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/view/KeyEvent;JI)V");

  /// from: public void <init>(android.view.KeyEvent origEvent, long eventTime, int newRepeat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Copy an existing key event, modifying its time and repeat count.
  ///@deprecated Use \#changeTimeRepeat(KeyEvent, long, int)
  /// instead.
  ///@param origEvent The existing event to be copied.
  ///@param eventTime The new event time
  /// (in android.os.SystemClock\#uptimeMillis) of the event.
  ///@param newRepeat The new repeat count of the event.
  KeyEvent.ctor9(KeyEvent origEvent, int eventTime, int newRepeat)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor9,
            [origEvent.reference, eventTime, newRepeat]).object);

  static final _id_getMaxKeyCode =
      jniAccessors.getStaticMethodIDOf(_classRef, "getMaxKeyCode", "()I");

  /// from: static public int getMaxKeyCode()
  ///
  /// Returns the maximum keycode.
  static int getMaxKeyCode() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_getMaxKeyCode, jni.JniType.intType, []).integer;

  static final _id_getDeadChar =
      jniAccessors.getStaticMethodIDOf(_classRef, "getDeadChar", "(II)I");

  /// from: static public int getDeadChar(int accent, int c)
  ///
  /// Get the character that is produced by putting accent on the character
  /// c.
  /// For example, getDeadChar('`', 'e') returns &egrave;.
  static int getDeadChar(int accent, int c) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getDeadChar, jni.JniType.intType, [accent, c]).integer;

  static final _id_changeTimeRepeat = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "changeTimeRepeat",
      "(Landroid/view/KeyEvent;JI)Landroid/view/KeyEvent;");

  /// from: static public android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent event, long eventTime, int newRepeat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new key event that is the same as the given one, but whose
  /// event time and repeat count are replaced with the given value.
  ///@param event The existing event to be copied.  This is not modified.
  ///@param eventTime The new event time
  /// (in android.os.SystemClock\#uptimeMillis) of the event.
  ///@param newRepeat The new repeat count of the event.
  static KeyEvent changeTimeRepeat(
          KeyEvent event, int eventTime, int newRepeat) =>
      KeyEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_changeTimeRepeat,
          jni.JniType.objectType,
          [event.reference, eventTime, newRepeat]).object);

  static final _id_changeTimeRepeat1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "changeTimeRepeat",
      "(Landroid/view/KeyEvent;JII)Landroid/view/KeyEvent;");

  /// from: static public android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent event, long eventTime, int newRepeat, int newFlags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new key event that is the same as the given one, but whose
  /// event time and repeat count are replaced with the given value.
  ///@param event The existing event to be copied.  This is not modified.
  ///@param eventTime The new event time
  /// (in android.os.SystemClock\#uptimeMillis) of the event.
  ///@param newRepeat The new repeat count of the event.
  ///@param newFlags New flags for the event, replacing the entire value
  /// in the original event.
  static KeyEvent changeTimeRepeat1(
          KeyEvent event, int eventTime, int newRepeat, int newFlags) =>
      KeyEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_changeTimeRepeat1,
          jni.JniType.objectType,
          [event.reference, eventTime, newRepeat, newFlags]).object);

  static final _id_changeAction = jniAccessors.getStaticMethodIDOf(_classRef,
      "changeAction", "(Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;");

  /// from: static public android.view.KeyEvent changeAction(android.view.KeyEvent event, int action)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new key event that is the same as the given one, but whose
  /// action is replaced with the given value.
  ///@param event The existing event to be copied.  This is not modified.
  ///@param action The new action code of the event.
  static KeyEvent changeAction(KeyEvent event, int action) =>
      KeyEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_changeAction,
          jni.JniType.objectType,
          [event.reference, action]).object);

  static final _id_changeFlags = jniAccessors.getStaticMethodIDOf(_classRef,
      "changeFlags", "(Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;");

  /// from: static public android.view.KeyEvent changeFlags(android.view.KeyEvent event, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new key event that is the same as the given one, but whose
  /// flags are replaced with the given value.
  ///@param event The existing event to be copied.  This is not modified.
  ///@param flags The new flags constant.
  static KeyEvent changeFlags(KeyEvent event, int flags) =>
      KeyEvent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_changeFlags,
          jni.JniType.objectType,
          [event.reference, flags]).object);

  static final _id_isSystem =
      jniAccessors.getMethodIDOf(_classRef, "isSystem", "()Z");

  /// from: public final boolean isSystem()
  ///
  /// Is this a system key?  System keys can not be used for menu shortcuts.
  bool isSystem() => jniAccessors.callMethodWithArgs(
      reference, _id_isSystem, jni.JniType.booleanType, []).boolean;

  static final _id_isGamepadButton =
      jniAccessors.getStaticMethodIDOf(_classRef, "isGamepadButton", "(I)Z");

  /// from: static public final boolean isGamepadButton(int keyCode)
  ///
  /// Returns true if the specified keycode is a gamepad button.
  ///@return True if the keycode is a gamepad button, such as \#KEYCODE_BUTTON_A.
  static bool isGamepadButton(int keyCode) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isGamepadButton,
          jni.JniType.booleanType, [keyCode]).boolean;

  static final _id_getDeviceId =
      jniAccessors.getMethodIDOf(_classRef, "getDeviceId", "()I");

  /// from: public final int getDeviceId()
  ///
  /// {@inheritDoc}
  int getDeviceId() => jniAccessors.callMethodWithArgs(
      reference, _id_getDeviceId, jni.JniType.intType, []).integer;

  static final _id_getSource =
      jniAccessors.getMethodIDOf(_classRef, "getSource", "()I");

  /// from: public final int getSource()
  ///
  /// {@inheritDoc}
  int getSource() => jniAccessors.callMethodWithArgs(
      reference, _id_getSource, jni.JniType.intType, []).integer;

  static final _id_setSource =
      jniAccessors.getMethodIDOf(_classRef, "setSource", "(I)V");

  /// from: public final void setSource(int source)
  ///
  /// {@inheritDoc}
  void setSource(int source) => jniAccessors.callMethodWithArgs(
      reference, _id_setSource, jni.JniType.voidType, [source]).check();

  static final _id_getMetaState =
      jniAccessors.getMethodIDOf(_classRef, "getMetaState", "()I");

  /// from: public final int getMetaState()
  ///
  /// Returns the state of the meta keys.
  ///
  ///@return an integer in which each bit set to 1 represents a pressed
  ///         meta key
  ///@see \#isAltPressed()
  ///@see \#isShiftPressed()
  ///@see \#isSymPressed()
  ///@see \#isCtrlPressed()
  ///@see \#isMetaPressed()
  ///@see \#isFunctionPressed()
  ///@see \#isCapsLockOn()
  ///@see \#isNumLockOn()
  ///@see \#isScrollLockOn()
  ///@see \#META_ALT_ON
  ///@see \#META_ALT_LEFT_ON
  ///@see \#META_ALT_RIGHT_ON
  ///@see \#META_SHIFT_ON
  ///@see \#META_SHIFT_LEFT_ON
  ///@see \#META_SHIFT_RIGHT_ON
  ///@see \#META_SYM_ON
  ///@see \#META_FUNCTION_ON
  ///@see \#META_CTRL_ON
  ///@see \#META_CTRL_LEFT_ON
  ///@see \#META_CTRL_RIGHT_ON
  ///@see \#META_META_ON
  ///@see \#META_META_LEFT_ON
  ///@see \#META_META_RIGHT_ON
  ///@see \#META_CAPS_LOCK_ON
  ///@see \#META_NUM_LOCK_ON
  ///@see \#META_SCROLL_LOCK_ON
  ///@see \#getModifiers
  int getMetaState() => jniAccessors.callMethodWithArgs(
      reference, _id_getMetaState, jni.JniType.intType, []).integer;

  static final _id_getModifiers =
      jniAccessors.getMethodIDOf(_classRef, "getModifiers", "()I");

  /// from: public final int getModifiers()
  ///
  /// Returns the state of the modifier keys.
  ///
  /// For the purposes of this function, \#KEYCODE_CAPS_LOCK,
  /// \#KEYCODE_SCROLL_LOCK, and \#KEYCODE_NUM_LOCK are
  /// not considered modifier keys.  Consequently, this function specifically masks out
  /// \#META_CAPS_LOCK_ON, \#META_SCROLL_LOCK_ON and \#META_NUM_LOCK_ON.
  ///
  ///
  /// The value returned consists of the meta state (from \#getMetaState)
  /// normalized using \#normalizeMetaState(int) and then masked with
  /// \#getModifierMetaStateMask so that only valid modifier bits are retained.
  ///
  ///
  ///@return An integer in which each bit set to 1 represents a pressed modifier key.
  ///@see \#getMetaState
  int getModifiers() => jniAccessors.callMethodWithArgs(
      reference, _id_getModifiers, jni.JniType.intType, []).integer;

  static final _id_getFlags =
      jniAccessors.getMethodIDOf(_classRef, "getFlags", "()I");

  /// from: public final int getFlags()
  ///
  /// Returns the flags for this key event.
  ///@see \#FLAG_WOKE_HERE
  int getFlags() => jniAccessors.callMethodWithArgs(
      reference, _id_getFlags, jni.JniType.intType, []).integer;

  static final _id_getModifierMetaStateMask = jniAccessors.getStaticMethodIDOf(
      _classRef, "getModifierMetaStateMask", "()I");

  /// from: static public int getModifierMetaStateMask()
  ///
  /// Gets a mask that includes all valid modifier key meta state bits.
  ///
  /// For the purposes of this function, \#KEYCODE_CAPS_LOCK,
  /// \#KEYCODE_SCROLL_LOCK, and \#KEYCODE_NUM_LOCK are
  /// not considered modifier keys.  Consequently, the mask specifically excludes
  /// \#META_CAPS_LOCK_ON, \#META_SCROLL_LOCK_ON and \#META_NUM_LOCK_ON.
  ///
  ///
  ///@return The modifier meta state mask which is a combination of
  /// \#META_SHIFT_ON, \#META_SHIFT_LEFT_ON, \#META_SHIFT_RIGHT_ON,
  /// \#META_ALT_ON, \#META_ALT_LEFT_ON, \#META_ALT_RIGHT_ON,
  /// \#META_CTRL_ON, \#META_CTRL_LEFT_ON, \#META_CTRL_RIGHT_ON,
  /// \#META_META_ON, \#META_META_LEFT_ON, \#META_META_RIGHT_ON,
  /// \#META_SYM_ON, \#META_FUNCTION_ON.
  static int getModifierMetaStateMask() =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getModifierMetaStateMask, jni.JniType.intType, []).integer;

  static final _id_isModifierKey =
      jniAccessors.getStaticMethodIDOf(_classRef, "isModifierKey", "(I)Z");

  /// from: static public boolean isModifierKey(int keyCode)
  ///
  /// Returns true if this key code is a modifier key.
  ///
  /// For the purposes of this function, \#KEYCODE_CAPS_LOCK,
  /// \#KEYCODE_SCROLL_LOCK, and \#KEYCODE_NUM_LOCK are
  /// not considered modifier keys.  Consequently, this function return false
  /// for those keys.
  ///
  ///
  ///@return True if the key code is one of
  /// \#KEYCODE_SHIFT_LEFT \#KEYCODE_SHIFT_RIGHT,
  /// \#KEYCODE_ALT_LEFT, \#KEYCODE_ALT_RIGHT,
  /// \#KEYCODE_CTRL_LEFT, \#KEYCODE_CTRL_RIGHT,
  /// \#KEYCODE_META_LEFT, or \#KEYCODE_META_RIGHT,
  /// \#KEYCODE_SYM, \#KEYCODE_NUM, \#KEYCODE_FUNCTION.
  static bool isModifierKey(int keyCode) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isModifierKey,
          jni.JniType.booleanType, [keyCode]).boolean;

  static final _id_normalizeMetaState =
      jniAccessors.getStaticMethodIDOf(_classRef, "normalizeMetaState", "(I)I");

  /// from: static public int normalizeMetaState(int metaState)
  ///
  /// Normalizes the specified meta state.
  ///
  /// The meta state is normalized such that if either the left or right modifier meta state
  /// bits are set then the result will also include the universal bit for that modifier.
  ///
  ///
  /// If the specified meta state contains \#META_ALT_LEFT_ON then
  /// the result will also contain \#META_ALT_ON in addition to \#META_ALT_LEFT_ON
  /// and the other bits that were specified in the input.  The same is process is
  /// performed for shift, control and meta.
  ///
  ///
  /// If the specified meta state contains synthetic meta states defined by
  /// MetaKeyKeyListener, then those states are translated here and the original
  /// synthetic meta states are removed from the result.
  /// MetaKeyKeyListener\#META_CAP_LOCKED is translated to \#META_CAPS_LOCK_ON.
  /// MetaKeyKeyListener\#META_ALT_LOCKED is translated to \#META_ALT_ON.
  /// MetaKeyKeyListener\#META_SYM_LOCKED is translated to \#META_SYM_ON.
  ///
  ///
  /// Undefined meta state bits are removed.
  ///
  ///
  ///@param metaState The meta state.
  ///@return The normalized meta state.
  static int normalizeMetaState(int metaState) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_normalizeMetaState,
          jni.JniType.intType, [metaState]).integer;

  static final _id_metaStateHasNoModifiers = jniAccessors.getStaticMethodIDOf(
      _classRef, "metaStateHasNoModifiers", "(I)Z");

  /// from: static public boolean metaStateHasNoModifiers(int metaState)
  ///
  /// Returns true if no modifiers keys are pressed according to the specified meta state.
  ///
  /// For the purposes of this function, \#KEYCODE_CAPS_LOCK,
  /// \#KEYCODE_SCROLL_LOCK, and \#KEYCODE_NUM_LOCK are
  /// not considered modifier keys.  Consequently, this function ignores
  /// \#META_CAPS_LOCK_ON, \#META_SCROLL_LOCK_ON and \#META_NUM_LOCK_ON.
  ///
  ///
  /// The meta state is normalized prior to comparison using \#normalizeMetaState(int).
  ///
  ///
  ///@param metaState The meta state to consider.
  ///@return True if no modifier keys are pressed.
  ///@see \#hasNoModifiers()
  static bool metaStateHasNoModifiers(int metaState) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_metaStateHasNoModifiers,
          jni.JniType.booleanType,
          [metaState]).boolean;

  static final _id_metaStateHasModifiers = jniAccessors.getStaticMethodIDOf(
      _classRef, "metaStateHasModifiers", "(II)Z");

  /// from: static public boolean metaStateHasModifiers(int metaState, int modifiers)
  ///
  /// Returns true if only the specified modifier keys are pressed according to
  /// the specified meta state.  Returns false if a different combination of modifier
  /// keys are pressed.
  ///
  /// For the purposes of this function, \#KEYCODE_CAPS_LOCK,
  /// \#KEYCODE_SCROLL_LOCK, and \#KEYCODE_NUM_LOCK are
  /// not considered modifier keys.  Consequently, this function ignores
  /// \#META_CAPS_LOCK_ON, \#META_SCROLL_LOCK_ON and \#META_NUM_LOCK_ON.
  ///
  ///
  /// If the specified modifier mask includes directional modifiers, such as
  /// \#META_SHIFT_LEFT_ON, then this method ensures that the
  /// modifier is pressed on that side.
  /// If the specified modifier mask includes non-directional modifiers, such as
  /// \#META_SHIFT_ON, then this method ensures that the modifier
  /// is pressed on either side.
  /// If the specified modifier mask includes both directional and non-directional modifiers
  /// for the same type of key, such as \#META_SHIFT_ON and \#META_SHIFT_LEFT_ON,
  /// then this method throws an illegal argument exception.
  ///
  ///
  ///@param metaState The meta state to consider.
  ///@param modifiers The meta state of the modifier keys to check.  May be a combination
  /// of modifier meta states as defined by \#getModifierMetaStateMask().  May be 0 to
  /// ensure that no modifier keys are pressed.
  ///@return True if only the specified modifier keys are pressed.
  ///@throws IllegalArgumentException if the modifiers parameter contains invalid modifiers
  ///@see \#hasModifiers
  static bool metaStateHasModifiers(int metaState, int modifiers) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_metaStateHasModifiers,
          jni.JniType.booleanType,
          [metaState, modifiers]).boolean;

  static final _id_hasNoModifiers =
      jniAccessors.getMethodIDOf(_classRef, "hasNoModifiers", "()Z");

  /// from: public final boolean hasNoModifiers()
  ///
  /// Returns true if no modifier keys are pressed.
  ///
  /// For the purposes of this function, \#KEYCODE_CAPS_LOCK,
  /// \#KEYCODE_SCROLL_LOCK, and \#KEYCODE_NUM_LOCK are
  /// not considered modifier keys.  Consequently, this function ignores
  /// \#META_CAPS_LOCK_ON, \#META_SCROLL_LOCK_ON and \#META_NUM_LOCK_ON.
  ///
  ///
  /// The meta state is normalized prior to comparison using \#normalizeMetaState(int).
  ///
  ///
  ///@return True if no modifier keys are pressed.
  ///@see \#metaStateHasNoModifiers
  bool hasNoModifiers() => jniAccessors.callMethodWithArgs(
      reference, _id_hasNoModifiers, jni.JniType.booleanType, []).boolean;

  static final _id_hasModifiers =
      jniAccessors.getMethodIDOf(_classRef, "hasModifiers", "(I)Z");

  /// from: public final boolean hasModifiers(int modifiers)
  ///
  /// Returns true if only the specified modifiers keys are pressed.
  /// Returns false if a different combination of modifier keys are pressed.
  ///
  /// For the purposes of this function, \#KEYCODE_CAPS_LOCK,
  /// \#KEYCODE_SCROLL_LOCK, and \#KEYCODE_NUM_LOCK are
  /// not considered modifier keys.  Consequently, this function ignores
  /// \#META_CAPS_LOCK_ON, \#META_SCROLL_LOCK_ON and \#META_NUM_LOCK_ON.
  ///
  ///
  /// If the specified modifier mask includes directional modifiers, such as
  /// \#META_SHIFT_LEFT_ON, then this method ensures that the
  /// modifier is pressed on that side.
  /// If the specified modifier mask includes non-directional modifiers, such as
  /// \#META_SHIFT_ON, then this method ensures that the modifier
  /// is pressed on either side.
  /// If the specified modifier mask includes both directional and non-directional modifiers
  /// for the same type of key, such as \#META_SHIFT_ON and \#META_SHIFT_LEFT_ON,
  /// then this method throws an illegal argument exception.
  ///
  ///
  ///@param modifiers The meta state of the modifier keys to check.  May be a combination
  /// of modifier meta states as defined by \#getModifierMetaStateMask().  May be 0 to
  /// ensure that no modifier keys are pressed.
  ///@return True if only the specified modifier keys are pressed.
  ///@throws IllegalArgumentException if the modifiers parameter contains invalid modifiers
  ///@see \#metaStateHasModifiers
  bool hasModifiers(int modifiers) => jniAccessors.callMethodWithArgs(reference,
      _id_hasModifiers, jni.JniType.booleanType, [modifiers]).boolean;

  static final _id_isAltPressed =
      jniAccessors.getMethodIDOf(_classRef, "isAltPressed", "()Z");

  /// from: public final boolean isAltPressed()
  ///
  /// Returns the pressed state of the ALT meta key.
  ///
  ///@return true if the ALT key is pressed, false otherwise
  ///@see \#KEYCODE_ALT_LEFT
  ///@see \#KEYCODE_ALT_RIGHT
  ///@see \#META_ALT_ON
  bool isAltPressed() => jniAccessors.callMethodWithArgs(
      reference, _id_isAltPressed, jni.JniType.booleanType, []).boolean;

  static final _id_isShiftPressed =
      jniAccessors.getMethodIDOf(_classRef, "isShiftPressed", "()Z");

  /// from: public final boolean isShiftPressed()
  ///
  /// Returns the pressed state of the SHIFT meta key.
  ///
  ///@return true if the SHIFT key is pressed, false otherwise
  ///@see \#KEYCODE_SHIFT_LEFT
  ///@see \#KEYCODE_SHIFT_RIGHT
  ///@see \#META_SHIFT_ON
  bool isShiftPressed() => jniAccessors.callMethodWithArgs(
      reference, _id_isShiftPressed, jni.JniType.booleanType, []).boolean;

  static final _id_isSymPressed =
      jniAccessors.getMethodIDOf(_classRef, "isSymPressed", "()Z");

  /// from: public final boolean isSymPressed()
  ///
  /// Returns the pressed state of the SYM meta key.
  ///
  ///@return true if the SYM key is pressed, false otherwise
  ///@see \#KEYCODE_SYM
  ///@see \#META_SYM_ON
  bool isSymPressed() => jniAccessors.callMethodWithArgs(
      reference, _id_isSymPressed, jni.JniType.booleanType, []).boolean;

  static final _id_isCtrlPressed =
      jniAccessors.getMethodIDOf(_classRef, "isCtrlPressed", "()Z");

  /// from: public final boolean isCtrlPressed()
  ///
  /// Returns the pressed state of the CTRL meta key.
  ///
  ///@return true if the CTRL key is pressed, false otherwise
  ///@see \#KEYCODE_CTRL_LEFT
  ///@see \#KEYCODE_CTRL_RIGHT
  ///@see \#META_CTRL_ON
  bool isCtrlPressed() => jniAccessors.callMethodWithArgs(
      reference, _id_isCtrlPressed, jni.JniType.booleanType, []).boolean;

  static final _id_isMetaPressed =
      jniAccessors.getMethodIDOf(_classRef, "isMetaPressed", "()Z");

  /// from: public final boolean isMetaPressed()
  ///
  /// Returns the pressed state of the META meta key.
  ///
  ///@return true if the META key is pressed, false otherwise
  ///@see \#KEYCODE_META_LEFT
  ///@see \#KEYCODE_META_RIGHT
  ///@see \#META_META_ON
  bool isMetaPressed() => jniAccessors.callMethodWithArgs(
      reference, _id_isMetaPressed, jni.JniType.booleanType, []).boolean;

  static final _id_isFunctionPressed =
      jniAccessors.getMethodIDOf(_classRef, "isFunctionPressed", "()Z");

  /// from: public final boolean isFunctionPressed()
  ///
  /// Returns the pressed state of the FUNCTION meta key.
  ///
  ///@return true if the FUNCTION key is pressed, false otherwise
  ///@see \#KEYCODE_FUNCTION
  ///@see \#META_FUNCTION_ON
  bool isFunctionPressed() => jniAccessors.callMethodWithArgs(
      reference, _id_isFunctionPressed, jni.JniType.booleanType, []).boolean;

  static final _id_isCapsLockOn =
      jniAccessors.getMethodIDOf(_classRef, "isCapsLockOn", "()Z");

  /// from: public final boolean isCapsLockOn()
  ///
  /// Returns the locked state of the CAPS LOCK meta key.
  ///
  ///@return true if the CAPS LOCK key is on, false otherwise
  ///@see \#KEYCODE_CAPS_LOCK
  ///@see \#META_CAPS_LOCK_ON
  bool isCapsLockOn() => jniAccessors.callMethodWithArgs(
      reference, _id_isCapsLockOn, jni.JniType.booleanType, []).boolean;

  static final _id_isNumLockOn =
      jniAccessors.getMethodIDOf(_classRef, "isNumLockOn", "()Z");

  /// from: public final boolean isNumLockOn()
  ///
  /// Returns the locked state of the NUM LOCK meta key.
  ///
  ///@return true if the NUM LOCK key is on, false otherwise
  ///@see \#KEYCODE_NUM_LOCK
  ///@see \#META_NUM_LOCK_ON
  bool isNumLockOn() => jniAccessors.callMethodWithArgs(
      reference, _id_isNumLockOn, jni.JniType.booleanType, []).boolean;

  static final _id_isScrollLockOn =
      jniAccessors.getMethodIDOf(_classRef, "isScrollLockOn", "()Z");

  /// from: public final boolean isScrollLockOn()
  ///
  /// Returns the locked state of the SCROLL LOCK meta key.
  ///
  ///@return true if the SCROLL LOCK key is on, false otherwise
  ///@see \#KEYCODE_SCROLL_LOCK
  ///@see \#META_SCROLL_LOCK_ON
  bool isScrollLockOn() => jniAccessors.callMethodWithArgs(
      reference, _id_isScrollLockOn, jni.JniType.booleanType, []).boolean;

  static final _id_getAction =
      jniAccessors.getMethodIDOf(_classRef, "getAction", "()I");

  /// from: public final int getAction()
  ///
  /// Retrieve the action of this key event.  May be either
  /// \#ACTION_DOWN, \#ACTION_UP, or \#ACTION_MULTIPLE.
  ///@return The event action: ACTION_DOWN, ACTION_UP, or ACTION_MULTIPLE.
  int getAction() => jniAccessors.callMethodWithArgs(
      reference, _id_getAction, jni.JniType.intType, []).integer;

  static final _id_isCanceled =
      jniAccessors.getMethodIDOf(_classRef, "isCanceled", "()Z");

  /// from: public final boolean isCanceled()
  ///
  /// For \#ACTION_UP events, indicates that the event has been
  /// canceled as per \#FLAG_CANCELED.
  bool isCanceled() => jniAccessors.callMethodWithArgs(
      reference, _id_isCanceled, jni.JniType.booleanType, []).boolean;

  static final _id_startTracking =
      jniAccessors.getMethodIDOf(_classRef, "startTracking", "()V");

  /// from: public final void startTracking()
  ///
  /// Call this during Callback\#onKeyDown to have the system track
  /// the key through its final up (possibly including a long press).  Note
  /// that only one key can be tracked at a time -- if another key down
  /// event is received while a previous one is being tracked, tracking is
  /// stopped on the previous event.
  void startTracking() => jniAccessors.callMethodWithArgs(
      reference, _id_startTracking, jni.JniType.voidType, []).check();

  static final _id_isTracking =
      jniAccessors.getMethodIDOf(_classRef, "isTracking", "()Z");

  /// from: public final boolean isTracking()
  ///
  /// For \#ACTION_UP events, indicates that the event is still being
  /// tracked from its initial down event as per
  /// \#FLAG_TRACKING.
  bool isTracking() => jniAccessors.callMethodWithArgs(
      reference, _id_isTracking, jni.JniType.booleanType, []).boolean;

  static final _id_isLongPress =
      jniAccessors.getMethodIDOf(_classRef, "isLongPress", "()Z");

  /// from: public final boolean isLongPress()
  ///
  /// For \#ACTION_DOWN events, indicates that the event has been
  /// canceled as per \#FLAG_LONG_PRESS.
  bool isLongPress() => jniAccessors.callMethodWithArgs(
      reference, _id_isLongPress, jni.JniType.booleanType, []).boolean;

  static final _id_getKeyCode =
      jniAccessors.getMethodIDOf(_classRef, "getKeyCode", "()I");

  /// from: public final int getKeyCode()
  ///
  /// Retrieve the key code of the key event.  This is the physical key that
  /// was pressed, _not_ the Unicode character.
  ///@return The key code of the event.
  int getKeyCode() => jniAccessors.callMethodWithArgs(
      reference, _id_getKeyCode, jni.JniType.intType, []).integer;

  static final _id_getCharacters = jniAccessors.getMethodIDOf(
      _classRef, "getCharacters", "()Ljava/lang/String;");

  /// from: public final java.lang.String getCharacters()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// For the special case of a \#ACTION_MULTIPLE event with key
  /// code of \#KEYCODE_UNKNOWN, this is a raw string of characters
  /// associated with the event.  In all other cases it is null.
  ///@return Returns a String of 1 or more characters associated with
  /// the event.
  jni.JniString getCharacters() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCharacters, jni.JniType.objectType, []).object);

  static final _id_getScanCode =
      jniAccessors.getMethodIDOf(_classRef, "getScanCode", "()I");

  /// from: public final int getScanCode()
  ///
  /// Retrieve the hardware key id of this key event.  These values are not
  /// reliable and vary from device to device.
  ///
  /// {@more }
  /// Mostly this is here for debugging purposes.
  int getScanCode() => jniAccessors.callMethodWithArgs(
      reference, _id_getScanCode, jni.JniType.intType, []).integer;

  static final _id_getRepeatCount =
      jniAccessors.getMethodIDOf(_classRef, "getRepeatCount", "()I");

  /// from: public final int getRepeatCount()
  ///
  /// Retrieve the repeat count of the event.  For both key up and key down
  /// events, this is the number of times the key has repeated with the first
  /// down starting at 0 and counting up from there.  For multiple key
  /// events, this is the number of down/up pairs that have occurred.
  ///@return The number of times the key has repeated.
  int getRepeatCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getRepeatCount, jni.JniType.intType, []).integer;

  static final _id_getDownTime =
      jniAccessors.getMethodIDOf(_classRef, "getDownTime", "()J");

  /// from: public final long getDownTime()
  ///
  /// Retrieve the time of the most recent key down event,
  /// in the android.os.SystemClock\#uptimeMillis time base.  If this
  /// is a down event, this will be the same as \#getEventTime().
  /// Note that when chording keys, this value is the down time of the
  /// most recently pressed key, which may _not_ be the same physical
  /// key of this event.
  ///@return Returns the most recent key down time, in the
  /// android.os.SystemClock\#uptimeMillis time base
  int getDownTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getDownTime, jni.JniType.longType, []).long;

  static final _id_getEventTime =
      jniAccessors.getMethodIDOf(_classRef, "getEventTime", "()J");

  /// from: public final long getEventTime()
  ///
  /// Retrieve the time this event occurred,
  /// in the android.os.SystemClock\#uptimeMillis time base.
  ///@return Returns the time this event occurred,
  /// in the android.os.SystemClock\#uptimeMillis time base.
  int getEventTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getEventTime, jni.JniType.longType, []).long;

  static final _id_getKeyCharacterMap = jniAccessors.getMethodIDOf(
      _classRef, "getKeyCharacterMap", "()Landroid/view/KeyCharacterMap;");

  /// from: public final android.view.KeyCharacterMap getKeyCharacterMap()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the KeyCharacterMap associated with the keyboard device.
  ///@return The associated key character map.
  ///@throws KeyCharacterMap.UnavailableException if the key character map
  /// could not be loaded because it was malformed or the default key character map
  /// is missing from the system.
  ///@see KeyCharacterMap\#load
  keycharactermap_.KeyCharacterMap getKeyCharacterMap() =>
      keycharactermap_.KeyCharacterMap.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getKeyCharacterMap,
          jni.JniType.objectType, []).object);

  static final _id_getDisplayLabel =
      jniAccessors.getMethodIDOf(_classRef, "getDisplayLabel", "()C");

  /// from: public char getDisplayLabel()
  ///
  /// Gets the primary character for this key.
  /// In other words, the label that is physically printed on it.
  ///@return The display label character, or 0 if none (eg. for non-printing keys).
  int getDisplayLabel() => jniAccessors.callMethodWithArgs(
      reference, _id_getDisplayLabel, jni.JniType.charType, []).char;

  static final _id_getUnicodeChar =
      jniAccessors.getMethodIDOf(_classRef, "getUnicodeChar", "()I");

  /// from: public int getUnicodeChar()
  ///
  /// Gets the Unicode character generated by the specified key and meta
  /// key state combination.
  ///
  /// Returns the Unicode character that the specified key would produce
  /// when the specified meta bits (see MetaKeyKeyListener)
  /// were active.
  ///
  ///
  /// Returns 0 if the key is not one that is used to type Unicode
  /// characters.
  ///
  ///
  /// If the return value has bit KeyCharacterMap\#COMBINING_ACCENT set, the
  /// key is a "dead key" that should be combined with another to
  /// actually produce a character -- see KeyCharacterMap\#getDeadChar --
  /// after masking with KeyCharacterMap\#COMBINING_ACCENT_MASK.
  ///
  ///
  ///@return The associated character or combining accent, or 0 if none.
  int getUnicodeChar() => jniAccessors.callMethodWithArgs(
      reference, _id_getUnicodeChar, jni.JniType.intType, []).integer;

  static final _id_getUnicodeChar1 =
      jniAccessors.getMethodIDOf(_classRef, "getUnicodeChar", "(I)I");

  /// from: public int getUnicodeChar(int metaState)
  ///
  /// Gets the Unicode character generated by the specified key and meta
  /// key state combination.
  ///
  /// Returns the Unicode character that the specified key would produce
  /// when the specified meta bits (see MetaKeyKeyListener)
  /// were active.
  ///
  ///
  /// Returns 0 if the key is not one that is used to type Unicode
  /// characters.
  ///
  ///
  /// If the return value has bit KeyCharacterMap\#COMBINING_ACCENT set, the
  /// key is a "dead key" that should be combined with another to
  /// actually produce a character -- see KeyCharacterMap\#getDeadChar --
  /// after masking with KeyCharacterMap\#COMBINING_ACCENT_MASK.
  ///
  ///
  ///@param metaState The meta key modifier state.
  ///@return The associated character or combining accent, or 0 if none.
  int getUnicodeChar1(int metaState) => jniAccessors.callMethodWithArgs(
      reference, _id_getUnicodeChar1, jni.JniType.intType, [metaState]).integer;

  static final _id_getKeyData = jniAccessors.getMethodIDOf(
      _classRef, "getKeyData", "(Landroid/view/KeyCharacterMap\$KeyData;)Z");

  /// from: public boolean getKeyData(android.view.KeyCharacterMap.KeyData results)
  ///
  /// Get the character conversion data for a given key code.
  ///@param results A KeyCharacterMap.KeyData instance that will be
  /// filled with the results.
  ///@return True if the key was mapped.  If the key was not mapped, results is not modified.
  ///@deprecated instead use \#getDisplayLabel(),
  /// \#getNumber() or \#getUnicodeChar(int).
  bool getKeyData(keycharactermap_.KeyCharacterMap_KeyData results) =>
      jniAccessors.callMethodWithArgs(reference, _id_getKeyData,
          jni.JniType.booleanType, [results.reference]).boolean;

  static final _id_getMatch =
      jniAccessors.getMethodIDOf(_classRef, "getMatch", "([C)C");

  /// from: public char getMatch(char[] chars)
  ///
  /// Gets the first character in the character array that can be generated
  /// by the specified key code.
  ///
  /// This is a convenience function that returns the same value as
  /// \#getMatch(char[],int) getMatch(chars, 0).
  ///
  ///
  ///@param chars The array of matching characters to consider.
  ///@return The matching associated character, or 0 if none.
  int getMatch(jni.JniObject chars) => jniAccessors.callMethodWithArgs(
      reference, _id_getMatch, jni.JniType.charType, [chars.reference]).char;

  static final _id_getMatch1 =
      jniAccessors.getMethodIDOf(_classRef, "getMatch", "([CI)C");

  /// from: public char getMatch(char[] chars, int metaState)
  ///
  /// Gets the first character in the character array that can be generated
  /// by the specified key code.  If there are multiple choices, prefers
  /// the one that would be generated with the specified meta key modifier state.
  ///@param chars The array of matching characters to consider.
  ///@param metaState The preferred meta key modifier state.
  ///@return The matching associated character, or 0 if none.
  int getMatch1(jni.JniObject chars, int metaState) =>
      jniAccessors.callMethodWithArgs(reference, _id_getMatch1,
          jni.JniType.charType, [chars.reference, metaState]).char;

  static final _id_getNumber =
      jniAccessors.getMethodIDOf(_classRef, "getNumber", "()C");

  /// from: public char getNumber()
  ///
  /// Gets the number or symbol associated with the key.
  ///
  /// The character value is returned, not the numeric value.
  /// If the key is not a number, but is a symbol, the symbol is retuned.
  ///
  ///
  /// This method is intended to to support dial pads and other numeric or
  /// symbolic entry on keyboards where certain keys serve dual function
  /// as alphabetic and symbolic keys.  This method returns the number
  /// or symbol associated with the key independent of whether the user
  /// has pressed the required modifier.
  ///
  ///
  /// For example, on one particular keyboard the keys on the top QWERTY row generate
  /// numbers when ALT is pressed such that ALT-Q maps to '1'.  So for that keyboard
  /// when \#getNumber is called with KeyEvent\#KEYCODE_Q it returns '1'
  /// so that the user can type numbers without pressing ALT when it makes sense.
  ///
  ///
  ///@return The associated numeric or symbolic character, or 0 if none.
  int getNumber() => jniAccessors.callMethodWithArgs(
      reference, _id_getNumber, jni.JniType.charType, []).char;

  static final _id_isPrintingKey =
      jniAccessors.getMethodIDOf(_classRef, "isPrintingKey", "()Z");

  /// from: public boolean isPrintingKey()
  ///
  /// Returns true if this key produces a glyph.
  ///@return True if the key is a printing key.
  bool isPrintingKey() => jniAccessors.callMethodWithArgs(
      reference, _id_isPrintingKey, jni.JniType.booleanType, []).boolean;

  static final _id_dispatch = jniAccessors.getMethodIDOf(
      _classRef, "dispatch", "(Landroid/view/KeyEvent\$Callback;)Z");

  /// from: public final boolean dispatch(android.view.KeyEvent.Callback receiver)
  ///
  /// @deprecated Use \#dispatch(Callback, DispatcherState, Object) instead.
  bool dispatch(KeyEvent_Callback receiver) => jniAccessors.callMethodWithArgs(
      reference,
      _id_dispatch,
      jni.JniType.booleanType,
      [receiver.reference]).boolean;

  static final _id_dispatch1 = jniAccessors.getMethodIDOf(_classRef, "dispatch",
      "(Landroid/view/KeyEvent\$Callback;Landroid/view/KeyEvent\$DispatcherState;Ljava/lang/Object;)Z");

  /// from: public final boolean dispatch(android.view.KeyEvent.Callback receiver, android.view.KeyEvent.DispatcherState state, java.lang.Object target)
  ///
  /// Deliver this key event to a Callback interface.  If this is
  /// an ACTION_MULTIPLE event and it is not handled, then an attempt will
  /// be made to deliver a single normal event.
  ///@param receiver The Callback that will be given the event.
  ///@param state State information retained across events.
  ///@param target The target of the dispatch, for use in tracking.
  ///@return The return value from the Callback method that was called.
  bool dispatch1(KeyEvent_Callback receiver, KeyEvent_DispatcherState state,
          jni.JniObject target) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_dispatch1,
          jni.JniType.booleanType,
          [receiver.reference, state.reference, target.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_keyCodeToString = jniAccessors.getStaticMethodIDOf(
      _classRef, "keyCodeToString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String keyCodeToString(int keyCode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a string that represents the symbolic name of the specified keycode
  /// such as "KEYCODE_A", "KEYCODE_DPAD_UP", or an equivalent numeric constant
  /// such as "1001" if unknown.
  ///@param keyCode The key code.
  ///@return The symbolic name of the specified keycode.
  ///@see KeyCharacterMap\#getDisplayLabel
  static jni.JniString keyCodeToString(int keyCode) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_keyCodeToString, jni.JniType.objectType, [keyCode]).object);

  static final _id_keyCodeFromString = jniAccessors.getStaticMethodIDOf(
      _classRef, "keyCodeFromString", "(Ljava/lang/String;)I");

  /// from: static public int keyCodeFromString(java.lang.String symbolicName)
  ///
  /// Gets a keycode by its symbolic name such as "KEYCODE_A" or an equivalent
  /// numeric constant such as "1001".
  ///@param symbolicName The symbolic name of the keycode.
  ///@return The keycode or \#KEYCODE_UNKNOWN if not found.
  ///@see \#keycodeToString(int)
  static int keyCodeFromString(jni.JniString symbolicName) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_keyCodeFromString,
          jni.JniType.intType, [symbolicName.reference]).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();
}

/// from: android.view.KeyEvent$DispatcherState
///
/// Use with KeyEvent\#dispatch(Callback, DispatcherState, Object)
/// for more advanced key dispatching, such as long presses.
class KeyEvent_DispatcherState extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/KeyEvent\$DispatcherState");
  KeyEvent_DispatcherState.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  KeyEvent_DispatcherState()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_reset =
      jniAccessors.getMethodIDOf(_classRef, "reset", "()V");

  /// from: public void reset()
  ///
  /// Reset back to initial state.
  void reset() => jniAccessors.callMethodWithArgs(
      reference, _id_reset, jni.JniType.voidType, []).check();

  static final _id_reset1 =
      jniAccessors.getMethodIDOf(_classRef, "reset", "(Ljava/lang/Object;)V");

  /// from: public void reset(java.lang.Object target)
  ///
  /// Stop any tracking associated with this target.
  void reset1(jni.JniObject target) => jniAccessors.callMethodWithArgs(
      reference, _id_reset1, jni.JniType.voidType, [target.reference]).check();

  static final _id_startTracking = jniAccessors.getMethodIDOf(_classRef,
      "startTracking", "(Landroid/view/KeyEvent;Ljava/lang/Object;)V");

  /// from: public void startTracking(android.view.KeyEvent event, java.lang.Object target)
  ///
  /// Start tracking the key code associated with the given event.  This
  /// can only be called on a key down.  It will allow you to see any
  /// long press associated with the key, and will result in
  /// KeyEvent\#isTracking return true on the long press and up
  /// events.
  ///
  /// This is only needed if you are directly dispatching events, rather
  /// than handling them in Callback\#onKeyDown.
  void startTracking(KeyEvent event, jni.JniObject target) =>
      jniAccessors.callMethodWithArgs(reference, _id_startTracking,
          jni.JniType.voidType, [event.reference, target.reference]).check();

  static final _id_isTracking = jniAccessors.getMethodIDOf(
      _classRef, "isTracking", "(Landroid/view/KeyEvent;)Z");

  /// from: public boolean isTracking(android.view.KeyEvent event)
  ///
  /// Return true if the key event is for a key code that is currently
  /// being tracked by the dispatcher.
  bool isTracking(KeyEvent event) => jniAccessors.callMethodWithArgs(reference,
      _id_isTracking, jni.JniType.booleanType, [event.reference]).boolean;

  static final _id_performedLongPress = jniAccessors.getMethodIDOf(
      _classRef, "performedLongPress", "(Landroid/view/KeyEvent;)V");

  /// from: public void performedLongPress(android.view.KeyEvent event)
  ///
  /// Keep track of the given event's key code as having performed an
  /// action with a long press, so no action should occur on the up.
  /// This is only needed if you are directly dispatching events, rather
  /// than handling them in Callback\#onKeyLongPress.
  void performedLongPress(KeyEvent event) => jniAccessors.callMethodWithArgs(
      reference,
      _id_performedLongPress,
      jni.JniType.voidType,
      [event.reference]).check();

  static final _id_handleUpEvent = jniAccessors.getMethodIDOf(
      _classRef, "handleUpEvent", "(Landroid/view/KeyEvent;)V");

  /// from: public void handleUpEvent(android.view.KeyEvent event)
  ///
  /// Handle key up event to stop tracking.  This resets the dispatcher state,
  /// and updates the key event state based on it.
  /// This is only needed if you are directly dispatching events, rather
  /// than handling them in Callback\#onKeyUp.
  void handleUpEvent(KeyEvent event) => jniAccessors.callMethodWithArgs(
      reference,
      _id_handleUpEvent,
      jni.JniType.voidType,
      [event.reference]).check();
}

/// from: android.view.KeyEvent$Callback
class KeyEvent_Callback extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/KeyEvent\$Callback");
  KeyEvent_Callback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onKeyDown = jniAccessors.getMethodIDOf(
      _classRef, "onKeyDown", "(ILandroid/view/KeyEvent;)Z");

  /// from: public abstract boolean onKeyDown(int keyCode, android.view.KeyEvent event)
  ///
  /// Called when a key down event has occurred.  If you return true,
  /// you can first call KeyEvent\#startTracking() KeyEvent.startTracking() to have the framework track the event
  /// through its \#onKeyUp(int, KeyEvent) and also call your
  /// \#onKeyLongPress(int, KeyEvent) if it occurs.
  ///@param keyCode The value in event.getKeyCode().
  ///@param event Description of the key event.
  ///@return If you handled the event, return true.  If you want to allow
  ///         the event to be handled by the next receiver, return false.
  bool onKeyDown(int keyCode, KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyDown,
          jni.JniType.booleanType, [keyCode, event.reference]).boolean;

  static final _id_onKeyLongPress = jniAccessors.getMethodIDOf(
      _classRef, "onKeyLongPress", "(ILandroid/view/KeyEvent;)Z");

  /// from: public abstract boolean onKeyLongPress(int keyCode, android.view.KeyEvent event)
  ///
  /// Called when a long press has occurred.  If you return true,
  /// the final key up will have KeyEvent\#FLAG_CANCELED and
  /// KeyEvent\#FLAG_CANCELED_LONG_PRESS set.  Note that in
  /// order to receive this callback, someone in the event change
  /// _must_ return true from \#onKeyDown _and_
  /// call KeyEvent\#startTracking() on the event.
  ///@param keyCode The value in event.getKeyCode().
  ///@param event Description of the key event.
  ///@return If you handled the event, return true.  If you want to allow
  ///         the event to be handled by the next receiver, return false.
  bool onKeyLongPress(int keyCode, KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyLongPress,
          jni.JniType.booleanType, [keyCode, event.reference]).boolean;

  static final _id_onKeyUp = jniAccessors.getMethodIDOf(
      _classRef, "onKeyUp", "(ILandroid/view/KeyEvent;)Z");

  /// from: public abstract boolean onKeyUp(int keyCode, android.view.KeyEvent event)
  ///
  /// Called when a key up event has occurred.
  ///@param keyCode The value in event.getKeyCode().
  ///@param event Description of the key event.
  ///@return If you handled the event, return true.  If you want to allow
  ///         the event to be handled by the next receiver, return false.
  bool onKeyUp(int keyCode, KeyEvent event) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onKeyUp,
      jni.JniType.booleanType,
      [keyCode, event.reference]).boolean;

  static final _id_onKeyMultiple = jniAccessors.getMethodIDOf(
      _classRef, "onKeyMultiple", "(IILandroid/view/KeyEvent;)Z");

  /// from: public abstract boolean onKeyMultiple(int keyCode, int count, android.view.KeyEvent event)
  ///
  /// Called when a user's interaction with an analog control, such as
  /// flinging a trackball, generates simulated down/up events for the same
  /// key multiple times in quick succession.
  ///@param keyCode The value in event.getKeyCode().
  ///@param count Number of pairs as returned by event.getRepeatCount().
  ///@param event Description of the key event.
  ///@return If you handled the event, return true.  If you want to allow
  ///         the event to be handled by the next receiver, return false.
  bool onKeyMultiple(int keyCode, int count, KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyMultiple,
          jni.JniType.booleanType, [keyCode, count, event.reference]).boolean;
}
