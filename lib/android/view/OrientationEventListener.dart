// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.OrientationEventListener
///
/// Helper class for receiving notifications from the SensorManager when
/// the orientation of the device has changed.
class OrientationEventListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/OrientationEventListener");
  OrientationEventListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ORIENTATION_UNKNOWN
  ///
  /// Returned from onOrientationChanged when the device orientation cannot be determined
  /// (typically when the device is in a close to flat position).
  ///@see \#onOrientationChanged
  static const ORIENTATION_UNKNOWN = -1;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new OrientationEventListener.
  ///@param context for the OrientationEventListener.
  OrientationEventListener(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;I)V");

  /// from: public void <init>(android.content.Context context, int rate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new OrientationEventListener.
  ///@param context for the OrientationEventListener.
  ///@param rate at which sensor events are processed (see also
  /// android.hardware.SensorManager SensorManager). Use the default
  /// value of android.hardware.SensorManager\#SENSOR_DELAY_NORMAL SENSOR_DELAY_NORMAL for simple screen orientation change detection.
  OrientationEventListener.ctor1(context_.Context context, int rate)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, rate]).object);

  static final _id_enable =
      jniAccessors.getMethodIDOf(_classRef, "enable", "()V");

  /// from: public void enable()
  ///
  /// Enables the OrientationEventListener so it will monitor the sensor and call
  /// \#onOrientationChanged when the device orientation changes.
  void enable() => jniAccessors.callMethodWithArgs(
      reference, _id_enable, jni.JniType.voidType, []).check();

  static final _id_disable =
      jniAccessors.getMethodIDOf(_classRef, "disable", "()V");

  /// from: public void disable()
  ///
  /// Disables the OrientationEventListener.
  void disable() => jniAccessors.callMethodWithArgs(
      reference, _id_disable, jni.JniType.voidType, []).check();

  static final _id_canDetectOrientation =
      jniAccessors.getMethodIDOf(_classRef, "canDetectOrientation", "()Z");

  /// from: public boolean canDetectOrientation()
  bool canDetectOrientation() => jniAccessors.callMethodWithArgs(
      reference, _id_canDetectOrientation, jni.JniType.booleanType, []).boolean;

  static final _id_onOrientationChanged =
      jniAccessors.getMethodIDOf(_classRef, "onOrientationChanged", "(I)V");

  /// from: public abstract void onOrientationChanged(int orientation)
  ///
  /// Called when the orientation of the device has changed.
  /// orientation parameter is in degrees, ranging from 0 to 359.
  /// orientation is 0 degrees when the device is oriented in its natural position,
  /// 90 degrees when its left side is at the top, 180 degrees when it is upside down,
  /// and 270 degrees when its right side is to the top.
  /// \#ORIENTATION_UNKNOWN is returned when the device is close to flat
  /// and the orientation cannot be determined.
  ///@param orientation The new orientation of the device.
  ///@see \#ORIENTATION_UNKNOWN
  void onOrientationChanged(int orientation) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onOrientationChanged,
      jni.JniType.voidType,
      [orientation]).check();
}
