// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.view.InflateException
///
/// This exception is thrown by an inflater on error conditions.
class InflateException extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/view/InflateException");
  InflateException.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  InflateException()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

  /// from: public void <init>(java.lang.String detailMessage, java.lang.Throwable throwable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  InflateException.ctor1(jni.JniString detailMessage, jni.JniObject throwable)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [detailMessage.reference, throwable.reference]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String detailMessage)
  /// The returned object must be deleted after use, by calling the `delete` method.
  InflateException.ctor2(jni.JniString detailMessage)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [detailMessage.reference]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/Throwable;)V");

  /// from: public void <init>(java.lang.Throwable throwable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  InflateException.ctor3(jni.JniObject throwable)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor3, [throwable.reference]).object);
}
