// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.util.StateSet
///
/// State sets are arrays of positive ints where each element
/// represents the state of a android.view.View (e.g. focused,
/// selected, visible, etc.).  A android.view.View may be in
/// one or more of those states.
///
/// A state spec is an array of signed ints where each element
/// represents a required (if positive) or an undesired (if negative)
/// android.view.View state.
///
/// Utils dealing with state sets.
///
/// In theory we could encapsulate the state set and state spec arrays
/// and not have static methods here but there is some concern about
/// performance since these methods are called during view drawing.
class StateSet extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/util/StateSet");
  StateSet.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_NOTHING =
      jniAccessors.getStaticFieldIDOf(_classRef, "NOTHING", "[I");

  /// from: static public final int[] NOTHING
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A state set that does not contain any valid states.
  static jni.JniObject get NOTHING => jni.JniObject.fromRef(jniAccessors
      .getStaticField(_classRef, _id_NOTHING, jni.JniType.objectType)
      .object);

  static final _id_WILD_CARD =
      jniAccessors.getStaticFieldIDOf(_classRef, "WILD_CARD", "[I");

  /// from: static public final int[] WILD_CARD
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A state specification that will be matched by all StateSets.
  static jni.JniObject get WILD_CARD => jni.JniObject.fromRef(jniAccessors
      .getStaticField(_classRef, _id_WILD_CARD, jni.JniType.objectType)
      .object);

  static final _id_isWildCard =
      jniAccessors.getStaticMethodIDOf(_classRef, "isWildCard", "([I)Z");

  /// from: static public boolean isWildCard(int[] stateSetOrSpec)
  ///
  /// Return whether the stateSetOrSpec is matched by all StateSets.
  ///@param stateSetOrSpec a state set or state spec.
  static bool isWildCard(jni.JniObject stateSetOrSpec) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isWildCard,
          jni.JniType.booleanType, [stateSetOrSpec.reference]).boolean;

  static final _id_stateSetMatches =
      jniAccessors.getStaticMethodIDOf(_classRef, "stateSetMatches", "([I[I)Z");

  /// from: static public boolean stateSetMatches(int[] stateSpec, int[] stateSet)
  ///
  /// Return whether the stateSet matches the desired stateSpec.
  ///@param stateSpec an array of required (if positive) or
  ///        prohibited (if negative) android.view.View states.
  ///@param stateSet an array of android.view.View states
  static bool stateSetMatches(
          jni.JniObject stateSpec, jni.JniObject stateSet) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_stateSetMatches,
          jni.JniType.booleanType,
          [stateSpec.reference, stateSet.reference]).boolean;

  static final _id_stateSetMatches1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "stateSetMatches", "([II)Z");

  /// from: static public boolean stateSetMatches(int[] stateSpec, int state)
  ///
  /// Return whether the state matches the desired stateSpec.
  ///@param stateSpec an array of required (if positive) or
  ///        prohibited (if negative) android.view.View states.
  ///@param state a android.view.View state
  static bool stateSetMatches1(jni.JniObject stateSpec, int state) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_stateSetMatches1,
          jni.JniType.booleanType, [stateSpec.reference, state]).boolean;

  static final _id_trimStateSet =
      jniAccessors.getStaticMethodIDOf(_classRef, "trimStateSet", "([II)[I");

  /// from: static public int[] trimStateSet(int[] states, int newSize)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject trimStateSet(jni.JniObject states, int newSize) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_trimStateSet,
          jni.JniType.objectType,
          [states.reference, newSize]).object);

  static final _id_dump = jniAccessors.getStaticMethodIDOf(
      _classRef, "dump", "([I)Ljava/lang/String;");

  /// from: static public java.lang.String dump(int[] states)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString dump(jni.JniObject states) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_dump, jni.JniType.objectType, [states.reference]).object);
}
