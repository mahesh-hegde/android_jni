// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.util.TimeUtils
///
/// A class containing utility methods related to time zones.
class TimeUtils extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/util/TimeUtils");
  TimeUtils.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  TimeUtils()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getTimeZone = jniAccessors.getStaticMethodIDOf(
      _classRef, "getTimeZone", "(IZJLjava/lang/String;)Ljava/util/TimeZone;");

  /// from: static public java.util.TimeZone getTimeZone(int offset, boolean dst, long when, java.lang.String country)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Tries to return a time zone that would have had the specified offset
  /// and DST value at the specified moment in the specified country.
  /// Returns null if no suitable zone could be found.
  static jni.JniObject getTimeZone(
          int offset, bool dst, int when, jni.JniString country) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getTimeZone,
          jni.JniType.objectType,
          [offset, dst, when, country.reference]).object);

  static final _id_getTimeZoneDatabaseVersion =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "getTimeZoneDatabaseVersion", "()Ljava/lang/String;");

  /// from: static public java.lang.String getTimeZoneDatabaseVersion()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a String indicating the version of the time zone database currently
  /// in use.  The format of the string is dependent on the underlying time zone
  /// database implementation, but will typically contain the year in which the database
  /// was updated plus a letter from a to z indicating changes made within that year.
  ///
  /// Time zone database updates should be expected to occur periodically due to
  /// political and legal changes that cannot be anticipated in advance.  Therefore,
  /// when computing the UTC time for a future event, applications should be aware that
  /// the results may differ following a time zone database update.  This method allows
  /// applications to detect that a database change has occurred, and to recalculate any
  /// cached times accordingly.
  ///
  /// The time zone database may be assumed to change only when the device runtime
  /// is restarted.  Therefore, it is not necessary to re-query the database version
  /// during the lifetime of an activity.
  static jni.JniString getTimeZoneDatabaseVersion() =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getTimeZoneDatabaseVersion, jni.JniType.objectType, []).object);
}
