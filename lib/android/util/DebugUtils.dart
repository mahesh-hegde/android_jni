// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.util.DebugUtils
///
/// Various utilities for debugging and logging.
///
class DebugUtils extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/util/DebugUtils");
  DebugUtils.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_isObjectSelected = jniAccessors.getStaticMethodIDOf(
      _classRef, "isObjectSelected", "(Ljava/lang/Object;)Z");

  /// from: static public boolean isObjectSelected(java.lang.Object object)
  ///
  /// Filters objects against the <code>ANDROID_OBJECT_FILTER</code>
  /// environment variable. This environment variable can filter objects
  /// based on their class name and attribute values.
  ///
  ///
  /// Here is the syntax for <code>ANDROID_OBJECT_FILTER</code>:
  ///
  ///
  /// <code>ClassName@attribute1=value1@attribute2=value2...</code>
  ///
  ///
  /// Examples:
  ///
  /// <ul>
  /// <li>Select TextView instances: <code>TextView</code></li>
  /// <li>Select TextView instances of text "Loading" and bottom offset of 22:
  /// <code>TextView@text=Loading.*@bottom=22</code></li>
  /// </ul>
  ///
  /// The class name and the values are regular expressions.
  ///
  ///
  /// This class is useful for debugging and logging purpose:
  ///
  /// <pre>
  /// if (DEBUG) {
  ///   if (DebugUtils.isObjectSelected(childView) && LOGV_ENABLED) {
  ///     Log.v(TAG, "Object " + childView + " logged!");
  ///   }
  /// }
  /// </pre>
  ///
  /// <strong>NOTE</strong>: This method is very expensive as it relies
  /// heavily on regular expressions and reflection. Calls to this method
  /// should always be stripped out of the release binaries and avoided
  /// as much as possible in debug mode.
  ///
  ///@param object any object to match against the ANDROID_OBJECT_FILTER
  ///        environement variable
  ///@return true if object is selected by the ANDROID_OBJECT_FILTER
  ///         environment variable, false otherwise
  static bool isObjectSelected(jni.JniObject object) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isObjectSelected,
          jni.JniType.booleanType, [object.reference]).boolean;
}
