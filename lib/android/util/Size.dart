// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.util.Size
///
/// Immutable class for describing width and height dimensions in pixels.
class Size extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/util/Size");
  Size.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int width, int height)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new immutable Size instance.
  ///@param width The width of the size, in pixels
  ///@param height The height of the size, in pixels
  Size(int width, int height)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [width, height]).object);

  static final _id_getWidth =
      jniAccessors.getMethodIDOf(_classRef, "getWidth", "()I");

  /// from: public int getWidth()
  ///
  /// Get the width of the size (in pixels).
  ///@return width
  int getWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getWidth, jni.JniType.intType, []).integer;

  static final _id_getHeight =
      jniAccessors.getMethodIDOf(_classRef, "getHeight", "()I");

  /// from: public int getHeight()
  ///
  /// Get the height of the size (in pixels).
  ///@return height
  int getHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getHeight, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  ///
  /// Check if this size is equal to another size.
  ///
  /// Two sizes are equal if and only if both their widths and heights are
  /// equal.
  ///
  ///
  ///
  /// A size object is never equal to any other type of object.
  ///
  ///
  ///@return {@code true} if the objects were equal, {@code false} otherwise
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the size represented as a string with the format {@code "WxH"}
  ///@return string representation of the size
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_parseSize = jniAccessors.getStaticMethodIDOf(
      _classRef, "parseSize", "(Ljava/lang/String;)Landroid/util/Size;");

  /// from: static public android.util.Size parseSize(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Parses the specified string as a size value.
  ///
  /// The ASCII characters {@code \}{@code u002a} ('*') and
  /// {@code \}{@code u0078} ('x') are recognized as separators between
  /// the width and height.
  ///
  ///
  /// For any {@code Size s}: {@code Size.parseSize(s.toString()).equals(s)}.
  /// However, the method also handles sizes expressed in the
  /// following forms:
  ///
  ///
  /// "<i>width</i>{@code x}<i>height</i>" or
  /// "<i>width</i>{@code *}<i>height</i>" {@code => new Size(width, height)},
  /// where <i>width</i> and <i>height</i> are string integers potentially
  /// containing a sign, such as "-10", "+7" or "5".
  ///
  ///
  /// <pre>{@code
  /// Size.parseSize("3*+6").equals(new Size(3, 6)) == true
  /// Size.parseSize("-3x-6").equals(new Size(-3, -6)) == true
  /// Size.parseSize("4 by 3") => throws NumberFormatException
  /// }</pre>
  ///@param string the string representation of a size value.
  ///@return the size value represented by {@code string}.
  ///@throws NumberFormatException if {@code string} cannot be parsed
  /// as a size value.
  ///@throws NullPointerException if {@code string} was {@code null}
  static Size parseSize(jni.JniString string) =>
      Size.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_parseSize, jni.JniType.objectType, [string.reference]).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// {@inheritDoc}
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}
