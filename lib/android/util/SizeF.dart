// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.util.SizeF
///
/// Immutable class for describing width and height dimensions in some arbitrary
/// unit.
///
/// Width and height are finite values stored as a floating point representation.
///
///
class SizeF extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/util/SizeF");
  SizeF.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(FF)V");

  /// from: public void <init>(float width, float height)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new immutable SizeF instance.
  ///
  /// Both the {@code width} and the {@code height} must be a finite number.
  /// In particular, {@code NaN} and positive/negative infinity are illegal values.
  ///
  ///@param width The width of the size
  ///@param height The height of the size
  ///@throws IllegalArgumentException if either {@code width} or {@code height} was not finite.
  SizeF(double width, double height)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [width, height]).object);

  static final _id_getWidth =
      jniAccessors.getMethodIDOf(_classRef, "getWidth", "()F");

  /// from: public float getWidth()
  ///
  /// Get the width of the size (as an arbitrary unit).
  ///@return width
  double getWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getWidth, jni.JniType.floatType, []).float;

  static final _id_getHeight =
      jniAccessors.getMethodIDOf(_classRef, "getHeight", "()F");

  /// from: public float getHeight()
  ///
  /// Get the height of the size (as an arbitrary unit).
  ///@return height
  double getHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getHeight, jni.JniType.floatType, []).float;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  ///
  /// Check if this size is equal to another size.
  ///
  /// Two sizes are equal if and only if both their widths and heights are the same.
  ///
  ///
  /// For this purpose, the width/height float values are considered to be the same if and only
  /// if the method Float\#floatToIntBits(float) returns the identical {@code int} value
  /// when applied to each.
  ///
  ///@return {@code true} if the objects were equal, {@code false} otherwise
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the size represented as a string with the format {@code "WxH"}
  ///@return string representation of the size
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_parseSizeF = jniAccessors.getStaticMethodIDOf(
      _classRef, "parseSizeF", "(Ljava/lang/String;)Landroid/util/SizeF;");

  /// from: static public android.util.SizeF parseSizeF(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Parses the specified string as a size value.
  ///
  /// The ASCII characters {@code \}{@code u002a} ('*') and
  /// {@code \}{@code u0078} ('x') are recognized as separators between
  /// the width and height.
  ///
  ///
  /// For any {@code SizeF s}: {@code SizeF.parseSizeF(s.toString()).equals(s)}.
  /// However, the method also handles sizes expressed in the
  /// following forms:
  ///
  ///
  /// "<i>width</i>{@code x}<i>height</i>" or
  /// "<i>width</i>{@code *}<i>height</i>" {@code => new SizeF(width, height)},
  /// where <i>width</i> and <i>height</i> are string floats potentially
  /// containing a sign, such as "-10.3", "+7" or "5.2", but not containing
  /// an {@code 'x'} (such as a float in hexadecimal string format).
  ///
  ///
  /// <pre>{@code
  /// SizeF.parseSizeF("3.2*+6").equals(new SizeF(3.2f, 6.0f)) == true
  /// SizeF.parseSizeF("-3x-6").equals(new SizeF(-3.0f, -6.0f)) == true
  /// SizeF.parseSizeF("4 by 3") => throws NumberFormatException
  /// }</pre>
  ///@param string the string representation of a size value.
  ///@return the size value represented by {@code string}.
  ///@throws NumberFormatException if {@code string} cannot be parsed
  /// as a size value.
  ///@throws NullPointerException if {@code string} was {@code null}
  static SizeF parseSizeF(jni.JniString string) =>
      SizeF.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_parseSizeF, jni.JniType.objectType, [string.reference]).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// {@inheritDoc}
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}
