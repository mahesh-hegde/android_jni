// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.util.Base64InputStream
///
/// An InputStream that does Base64 decoding on the data read through
/// it.
class Base64InputStream extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/util/Base64InputStream");
  Base64InputStream.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/io/InputStream;I)V");

  /// from: public void <init>(java.io.InputStream in, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// An InputStream that performs Base64 decoding on the data read
  /// from the wrapped stream.
  ///@param in the InputStream to read the source data from
  ///@param flags bit flags for controlling the decoder; see the
  ///        constants in Base64
  Base64InputStream(jni.JniObject in0, int flags)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [in0.reference, flags]).object);

  static final _id_markSupported =
      jniAccessors.getMethodIDOf(_classRef, "markSupported", "()Z");

  /// from: public boolean markSupported()
  bool markSupported() => jniAccessors.callMethodWithArgs(
      reference, _id_markSupported, jni.JniType.booleanType, []).boolean;

  static final _id_mark = jniAccessors.getMethodIDOf(_classRef, "mark", "(I)V");

  /// from: public void mark(int readlimit)
  void mark(int readlimit) => jniAccessors.callMethodWithArgs(
      reference, _id_mark, jni.JniType.voidType, [readlimit]).check();

  static final _id_reset =
      jniAccessors.getMethodIDOf(_classRef, "reset", "()V");

  /// from: public void reset()
  void reset() => jniAccessors.callMethodWithArgs(
      reference, _id_reset, jni.JniType.voidType, []).check();

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_available =
      jniAccessors.getMethodIDOf(_classRef, "available", "()I");

  /// from: public int available()
  int available() => jniAccessors.callMethodWithArgs(
      reference, _id_available, jni.JniType.intType, []).integer;

  static final _id_skip = jniAccessors.getMethodIDOf(_classRef, "skip", "(J)J");

  /// from: public long skip(long n)
  int skip(int n) => jniAccessors
      .callMethodWithArgs(reference, _id_skip, jni.JniType.longType, [n]).long;

  static final _id_read = jniAccessors.getMethodIDOf(_classRef, "read", "()I");

  /// from: public int read()
  int read() => jniAccessors
      .callMethodWithArgs(reference, _id_read, jni.JniType.intType, []).integer;

  static final _id_read1 =
      jniAccessors.getMethodIDOf(_classRef, "read", "([BII)I");

  /// from: public int read(byte[] b, int off, int len)
  int read1(jni.JniObject b, int off, int len) =>
      jniAccessors.callMethodWithArgs(reference, _id_read1, jni.JniType.intType,
          [b.reference, off, len]).integer;
}
