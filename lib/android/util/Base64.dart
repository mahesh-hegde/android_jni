// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.util.Base64
///
/// Utilities for encoding and decoding the Base64 representation of
/// binary data.  See RFCs <a href="http://www.ietf.org/rfc/rfc2045.txt">2045</a> and <a href="http://www.ietf.org/rfc/rfc3548.txt">3548</a>.
class Base64 extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/util/Base64");
  Base64.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CRLF
  ///
  /// Encoder flag bit to indicate lines should be terminated with a
  /// CRLF pair instead of just an LF.  Has no effect if {@code
  /// NO_WRAP} is specified as well.
  static const CRLF = 4;

  /// from: static public final int DEFAULT
  ///
  /// Default values for encoder/decoder flags.
  static const DEFAULT = 0;

  /// from: static public final int NO_CLOSE
  ///
  /// Flag to pass to Base64OutputStream to indicate that it
  /// should not close the output stream it is wrapping when it
  /// itself is closed.
  static const NO_CLOSE = 16;

  /// from: static public final int NO_PADDING
  ///
  /// Encoder flag bit to omit the padding '=' characters at the end
  /// of the output (if any).
  static const NO_PADDING = 1;

  /// from: static public final int NO_WRAP
  ///
  /// Encoder flag bit to omit all line terminators (i.e., the output
  /// will be on one long line).
  static const NO_WRAP = 2;

  /// from: static public final int URL_SAFE
  ///
  /// Encoder/decoder flag bit to indicate using the "URL and
  /// filename safe" variant of Base64 (see RFC 3548 section 4) where
  /// {@code -} and {@code _} are used in place of {@code +} and
  /// {@code /}.
  static const URL_SAFE = 8;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Base64()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_decode = jniAccessors.getStaticMethodIDOf(
      _classRef, "decode", "(Ljava/lang/String;I)[B");

  /// from: static public byte[] decode(java.lang.String str, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Decode the Base64-encoded data in input and return the data in
  /// a new byte array.
  ///
  /// The padding '=' characters at the end are considered optional, but
  /// if any are present, there must be the correct number of them.
  ///@param str the input String to decode, which is converted to
  ///               bytes using the default charset
  ///@param flags controls certain features of the decoded output.
  ///               Pass {@code DEFAULT} to decode standard Base64.
  ///@throws IllegalArgumentException if the input contains
  /// incorrect padding
  static jni.JniObject decode(jni.JniString str, int flags) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_decode, jni.JniType.objectType, [str.reference, flags]).object);

  static final _id_decode1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "decode", "([BI)[B");

  /// from: static public byte[] decode(byte[] input, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Decode the Base64-encoded data in input and return the data in
  /// a new byte array.
  ///
  /// The padding '=' characters at the end are considered optional, but
  /// if any are present, there must be the correct number of them.
  ///@param input the input array to decode
  ///@param flags controls certain features of the decoded output.
  ///               Pass {@code DEFAULT} to decode standard Base64.
  ///@throws IllegalArgumentException if the input contains
  /// incorrect padding
  static jni.JniObject decode1(jni.JniObject input, int flags) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_decode1,
          jni.JniType.objectType,
          [input.reference, flags]).object);

  static final _id_decode2 =
      jniAccessors.getStaticMethodIDOf(_classRef, "decode", "([BIII)[B");

  /// from: static public byte[] decode(byte[] input, int offset, int len, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Decode the Base64-encoded data in input and return the data in
  /// a new byte array.
  ///
  /// The padding '=' characters at the end are considered optional, but
  /// if any are present, there must be the correct number of them.
  ///@param input the data to decode
  ///@param offset the position within the input array at which to start
  ///@param len the number of bytes of input to decode
  ///@param flags controls certain features of the decoded output.
  ///               Pass {@code DEFAULT} to decode standard Base64.
  ///@throws IllegalArgumentException if the input contains
  /// incorrect padding
  static jni.JniObject decode2(
          jni.JniObject input, int offset, int len, int flags) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_decode2,
          jni.JniType.objectType,
          [input.reference, offset, len, flags]).object);

  static final _id_encodeToString = jniAccessors.getStaticMethodIDOf(
      _classRef, "encodeToString", "([BI)Ljava/lang/String;");

  /// from: static public java.lang.String encodeToString(byte[] input, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Base64-encode the given data and return a newly allocated
  /// String with the result.
  ///@param input the data to encode
  ///@param flags controls certain features of the encoded output.
  ///               Passing {@code DEFAULT} results in output that
  ///               adheres to RFC 2045.
  static jni.JniString encodeToString(jni.JniObject input, int flags) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_encodeToString,
          jni.JniType.objectType,
          [input.reference, flags]).object);

  static final _id_encodeToString1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "encodeToString", "([BIII)Ljava/lang/String;");

  /// from: static public java.lang.String encodeToString(byte[] input, int offset, int len, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Base64-encode the given data and return a newly allocated
  /// String with the result.
  ///@param input the data to encode
  ///@param offset the position within the input array at which to
  ///               start
  ///@param len the number of bytes of input to encode
  ///@param flags controls certain features of the encoded output.
  ///               Passing {@code DEFAULT} results in output that
  ///               adheres to RFC 2045.
  static jni.JniString encodeToString1(
          jni.JniObject input, int offset, int len, int flags) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_encodeToString1,
          jni.JniType.objectType,
          [input.reference, offset, len, flags]).object);

  static final _id_encode =
      jniAccessors.getStaticMethodIDOf(_classRef, "encode", "([BI)[B");

  /// from: static public byte[] encode(byte[] input, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Base64-encode the given data and return a newly allocated
  /// byte[] with the result.
  ///@param input the data to encode
  ///@param flags controls certain features of the encoded output.
  ///               Passing {@code DEFAULT} results in output that
  ///               adheres to RFC 2045.
  static jni.JniObject encode(jni.JniObject input, int flags) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_encode, jni.JniType.objectType, [input.reference, flags]).object);

  static final _id_encode1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "encode", "([BIII)[B");

  /// from: static public byte[] encode(byte[] input, int offset, int len, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Base64-encode the given data and return a newly allocated
  /// byte[] with the result.
  ///@param input the data to encode
  ///@param offset the position within the input array at which to
  ///               start
  ///@param len the number of bytes of input to encode
  ///@param flags controls certain features of the encoded output.
  ///               Passing {@code DEFAULT} results in output that
  ///               adheres to RFC 2045.
  static jni.JniObject encode1(
          jni.JniObject input, int offset, int len, int flags) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_encode1,
          jni.JniType.objectType,
          [input.reference, offset, len, flags]).object);
}
