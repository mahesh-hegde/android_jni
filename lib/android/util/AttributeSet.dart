// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.util.AttributeSet
///
/// A collection of attributes, as found associated with a tag in an XML
/// document.  Often you will not want to use this interface directly, instead
/// passing it to android.content.res.Resources.Theme\#obtainStyledAttributes(AttributeSet, int[], int, int) Resources.Theme.obtainStyledAttributes()
/// which will take care of parsing the attributes for you.  In particular,
/// the Resources API will convert resource references (attribute values such as
/// "@string/my_label" in the original XML) to the desired type
/// for you; if you use AttributeSet directly then you will need to manually
/// check for resource references
/// (with \#getAttributeResourceValue(int, int)) and do the resource
/// lookup yourself if needed.  Direct use of AttributeSet also prevents the
/// application of themes and styles when retrieving attribute values.
///
/// This interface provides an efficient mechanism for retrieving
/// data from compiled XML files, which can be retrieved for a particular
/// XmlPullParser through Xml\#asAttributeSet Xml.asAttributeSet().  Normally this will return an implementation
/// of the interface that works on top of a generic XmlPullParser, however it
/// is more useful in conjunction with compiled XML resources:
///
/// <pre>
/// XmlPullParser parser = resources.getXml(myResource);
/// AttributeSet attributes = Xml.asAttributeSet(parser);</pre>
///
/// The implementation returned here, unlike using
/// the implementation on top of a generic XmlPullParser,
/// is highly optimized by retrieving pre-computed information that was
/// generated by aapt when compiling your resources.  For example,
/// the \#getAttributeFloatValue(int, float) method returns a floating
/// point number previous stored in the compiled resource instead of parsing
/// at runtime the string originally in the XML file.
///
/// This interface also provides additional information contained in the
/// compiled XML resource that is not available in a normal XML file, such
/// as \#getAttributeNameResource(int) which returns the resource
/// identifier associated with a particular XML attribute name.
///@see XmlPullParser
class AttributeSet extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/util/AttributeSet");
  AttributeSet.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getAttributeCount =
      jniAccessors.getMethodIDOf(_classRef, "getAttributeCount", "()I");

  /// from: public abstract int getAttributeCount()
  ///
  /// Returns the number of attributes available in the set.
  ///
  /// See also XmlPullParser\#getAttributeCount XmlPullParser.getAttributeCount(),
  /// which this method corresponds to when parsing a compiled XML file.
  ///
  ///@return A positive integer, or 0 if the set is empty.
  int getAttributeCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getAttributeCount, jni.JniType.intType, []).integer;

  static final _id_getAttributeNamespace = jniAccessors.getMethodIDOf(
      _classRef, "getAttributeNamespace", "(I)Ljava/lang/String;");

  /// from: default public java.lang.String getAttributeNamespace(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the namespace of the specified attribute.
  ///
  /// See also XmlPullParser\#getAttributeNamespace XmlPullParser.getAttributeNamespace(),
  /// which this method corresponds to when parsing a compiled XML file.
  ///
  ///@param index Index of the desired attribute, 0...count-1.
  ///@return A String containing the namespace of the attribute, or null if th
  ///         attribute cannot be found.
  jni.JniString getAttributeNamespace(int index) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAttributeNamespace, jni.JniType.objectType, [index]).object);

  static final _id_getAttributeName = jniAccessors.getMethodIDOf(
      _classRef, "getAttributeName", "(I)Ljava/lang/String;");

  /// from: public abstract java.lang.String getAttributeName(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the name of the specified attribute.
  ///
  /// See also XmlPullParser\#getAttributeName XmlPullParser.getAttributeName(),
  /// which this method corresponds to when parsing a compiled XML file.
  ///
  ///@param index Index of the desired attribute, 0...count-1.
  ///@return A String containing the name of the attribute, or null if the
  ///         attribute cannot be found.
  jni.JniString getAttributeName(int index) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAttributeName, jni.JniType.objectType, [index]).object);

  static final _id_getAttributeValue = jniAccessors.getMethodIDOf(
      _classRef, "getAttributeValue", "(I)Ljava/lang/String;");

  /// from: public abstract java.lang.String getAttributeValue(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the value of the specified attribute as a string representation.
  ///@param index Index of the desired attribute, 0...count-1.
  ///@return A String containing the value of the attribute, or null if the
  ///         attribute cannot be found.
  jni.JniString getAttributeValue(int index) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAttributeValue, jni.JniType.objectType, [index]).object);

  static final _id_getAttributeValue1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getAttributeValue",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: public abstract java.lang.String getAttributeValue(java.lang.String namespace, java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the value of the specified attribute as a string representation.
  /// The lookup is performed using the attribute name.
  ///@param namespace The namespace of the attribute to get the value from.
  ///@param name The name of the attribute to get the value from.
  ///@return A String containing the value of the attribute, or null if the
  ///         attribute cannot be found.
  jni.JniString getAttributeValue1(
          jni.JniString namespace, jni.JniString name) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getAttributeValue1,
          jni.JniType.objectType,
          [namespace.reference, name.reference]).object);

  static final _id_getPositionDescription = jniAccessors.getMethodIDOf(
      _classRef, "getPositionDescription", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getPositionDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a description of the current position of the attribute set.
  /// For instance, if the attribute set is loaded from an XML document,
  /// the position description could indicate the current line number.
  ///@return A string representation of the current position in the set,
  ///         may be null.
  jni.JniString getPositionDescription() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getPositionDescription, jni.JniType.objectType, []).object);

  static final _id_getAttributeNameResource =
      jniAccessors.getMethodIDOf(_classRef, "getAttributeNameResource", "(I)I");

  /// from: public abstract int getAttributeNameResource(int index)
  ///
  /// Return the resource ID associated with the given attribute name.  This
  /// will be the identifier for an attribute resource, which can be used by
  /// styles.  Returns 0 if there is no resource associated with this
  /// attribute.
  ///
  /// Note that this is different than \#getAttributeResourceValue
  /// in that it returns a resource identifier for the attribute name; the
  /// other method returns this attribute's value as a resource identifier.
  ///@param index Index of the desired attribute, 0...count-1.
  ///@return The resource identifier, 0 if none.
  int getAttributeNameResource(int index) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getAttributeNameResource,
      jni.JniType.intType,
      [index]).integer;

  static final _id_getAttributeListValue = jniAccessors.getMethodIDOf(
      _classRef,
      "getAttributeListValue",
      "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)I");

  /// from: public abstract int getAttributeListValue(java.lang.String namespace, java.lang.String attribute, java.lang.String[] options, int defaultValue)
  ///
  /// Return the index of the value of 'attribute' in the list 'options'.
  ///@param namespace Namespace of attribute to retrieve.
  ///@param attribute Name of attribute to retrieve.
  ///@param options List of strings whose values we are checking against.
  ///@param defaultValue Value returned if attribute doesn't exist or no
  ///                     match is found.
  ///@return Index in to 'options' or defaultValue.
  int getAttributeListValue(jni.JniString namespace, jni.JniString attribute,
          jni.JniObject options, int defaultValue) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_getAttributeListValue, jni.JniType.intType, [
        namespace.reference,
        attribute.reference,
        options.reference,
        defaultValue
      ]).integer;

  static final _id_getAttributeBooleanValue = jniAccessors.getMethodIDOf(
      _classRef,
      "getAttributeBooleanValue",
      "(Ljava/lang/String;Ljava/lang/String;Z)Z");

  /// from: public abstract boolean getAttributeBooleanValue(java.lang.String namespace, java.lang.String attribute, boolean defaultValue)
  ///
  /// Return the boolean value of 'attribute'.
  ///@param namespace Namespace of attribute to retrieve.
  ///@param attribute The attribute to retrieve.
  ///@param defaultValue What to return if the attribute isn't found.
  ///@return Resulting value.
  bool getAttributeBooleanValue(jni.JniString namespace,
          jni.JniString attribute, bool defaultValue) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getAttributeBooleanValue,
          jni.JniType.booleanType,
          [namespace.reference, attribute.reference, defaultValue]).boolean;

  static final _id_getAttributeResourceValue = jniAccessors.getMethodIDOf(
      _classRef,
      "getAttributeResourceValue",
      "(Ljava/lang/String;Ljava/lang/String;I)I");

  /// from: public abstract int getAttributeResourceValue(java.lang.String namespace, java.lang.String attribute, int defaultValue)
  ///
  /// Return the value of 'attribute' as a resource identifier.
  ///
  /// Note that this is different than \#getAttributeNameResource
  /// in that it returns the value contained in this attribute as a
  /// resource identifier (i.e., a value originally of the form
  /// "@package:type/resource"); the other method returns a resource
  /// identifier that identifies the name of the attribute.
  ///@param namespace Namespace of attribute to retrieve.
  ///@param attribute The attribute to retrieve.
  ///@param defaultValue What to return if the attribute isn't found.
  ///@return Resulting value.
  int getAttributeResourceValue(
          jni.JniString namespace, jni.JniString attribute, int defaultValue) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getAttributeResourceValue,
          jni.JniType.intType,
          [namespace.reference, attribute.reference, defaultValue]).integer;

  static final _id_getAttributeIntValue = jniAccessors.getMethodIDOf(_classRef,
      "getAttributeIntValue", "(Ljava/lang/String;Ljava/lang/String;I)I");

  /// from: public abstract int getAttributeIntValue(java.lang.String namespace, java.lang.String attribute, int defaultValue)
  ///
  /// Return the integer value of 'attribute'.
  ///@param namespace Namespace of attribute to retrieve.
  ///@param attribute The attribute to retrieve.
  ///@param defaultValue What to return if the attribute isn't found.
  ///@return Resulting value.
  int getAttributeIntValue(
          jni.JniString namespace, jni.JniString attribute, int defaultValue) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getAttributeIntValue,
          jni.JniType.intType,
          [namespace.reference, attribute.reference, defaultValue]).integer;

  static final _id_getAttributeUnsignedIntValue = jniAccessors.getMethodIDOf(
      _classRef,
      "getAttributeUnsignedIntValue",
      "(Ljava/lang/String;Ljava/lang/String;I)I");

  /// from: public abstract int getAttributeUnsignedIntValue(java.lang.String namespace, java.lang.String attribute, int defaultValue)
  ///
  /// Return the boolean value of 'attribute' that is formatted as an
  /// unsigned value.  In particular, the formats 0xn...n and \#n...n are
  /// handled.
  ///@param namespace Namespace of attribute to retrieve.
  ///@param attribute The attribute to retrieve.
  ///@param defaultValue What to return if the attribute isn't found.
  ///@return Resulting value.
  int getAttributeUnsignedIntValue(
          jni.JniString namespace, jni.JniString attribute, int defaultValue) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getAttributeUnsignedIntValue,
          jni.JniType.intType,
          [namespace.reference, attribute.reference, defaultValue]).integer;

  static final _id_getAttributeFloatValue = jniAccessors.getMethodIDOf(
      _classRef,
      "getAttributeFloatValue",
      "(Ljava/lang/String;Ljava/lang/String;F)F");

  /// from: public abstract float getAttributeFloatValue(java.lang.String namespace, java.lang.String attribute, float defaultValue)
  ///
  /// Return the float value of 'attribute'.
  ///@param namespace Namespace of attribute to retrieve.
  ///@param attribute The attribute to retrieve.
  ///@param defaultValue What to return if the attribute isn't found.
  ///@return Resulting value.
  double getAttributeFloatValue(jni.JniString namespace,
          jni.JniString attribute, double defaultValue) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getAttributeFloatValue,
          jni.JniType.floatType,
          [namespace.reference, attribute.reference, defaultValue]).float;

  static final _id_getAttributeListValue1 = jniAccessors.getMethodIDOf(
      _classRef, "getAttributeListValue", "(I[Ljava/lang/String;I)I");

  /// from: public abstract int getAttributeListValue(int index, java.lang.String[] options, int defaultValue)
  ///
  /// Return the index of the value of attribute at 'index' in the list
  /// 'options'.
  ///@param index Index of the desired attribute, 0...count-1.
  ///@param options List of strings whose values we are checking against.
  ///@param defaultValue Value returned if attribute doesn't exist or no
  ///                     match is found.
  ///@return Index in to 'options' or defaultValue.
  int getAttributeListValue1(
          int index, jni.JniObject options, int defaultValue) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getAttributeListValue1,
          jni.JniType.intType,
          [index, options.reference, defaultValue]).integer;

  static final _id_getAttributeBooleanValue1 = jniAccessors.getMethodIDOf(
      _classRef, "getAttributeBooleanValue", "(IZ)Z");

  /// from: public abstract boolean getAttributeBooleanValue(int index, boolean defaultValue)
  ///
  /// Return the boolean value of attribute at 'index'.
  ///@param index Index of the desired attribute, 0...count-1.
  ///@param defaultValue What to return if the attribute isn't found.
  ///@return Resulting value.
  bool getAttributeBooleanValue1(int index, bool defaultValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getAttributeBooleanValue1,
          jni.JniType.booleanType, [index, defaultValue]).boolean;

  static final _id_getAttributeResourceValue1 = jniAccessors.getMethodIDOf(
      _classRef, "getAttributeResourceValue", "(II)I");

  /// from: public abstract int getAttributeResourceValue(int index, int defaultValue)
  ///
  /// Return the value of attribute at 'index' as a resource identifier.
  ///
  /// Note that this is different than \#getAttributeNameResource
  /// in that it returns the value contained in this attribute as a
  /// resource identifier (i.e., a value originally of the form
  /// "@package:type/resource"); the other method returns a resource
  /// identifier that identifies the name of the attribute.
  ///@param index Index of the desired attribute, 0...count-1.
  ///@param defaultValue What to return if the attribute isn't found.
  ///@return Resulting value.
  int getAttributeResourceValue1(int index, int defaultValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getAttributeResourceValue1,
          jni.JniType.intType, [index, defaultValue]).integer;

  static final _id_getAttributeIntValue1 =
      jniAccessors.getMethodIDOf(_classRef, "getAttributeIntValue", "(II)I");

  /// from: public abstract int getAttributeIntValue(int index, int defaultValue)
  ///
  /// Return the integer value of attribute at 'index'.
  ///@param index Index of the desired attribute, 0...count-1.
  ///@param defaultValue What to return if the attribute isn't found.
  ///@return Resulting value.
  int getAttributeIntValue1(int index, int defaultValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getAttributeIntValue1,
          jni.JniType.intType, [index, defaultValue]).integer;

  static final _id_getAttributeUnsignedIntValue1 = jniAccessors.getMethodIDOf(
      _classRef, "getAttributeUnsignedIntValue", "(II)I");

  /// from: public abstract int getAttributeUnsignedIntValue(int index, int defaultValue)
  ///
  /// Return the integer value of attribute at 'index' that is formatted as an
  /// unsigned value.  In particular, the formats 0xn...n and \#n...n are
  /// handled.
  ///@param index Index of the desired attribute, 0...count-1.
  ///@param defaultValue What to return if the attribute isn't found.
  ///@return Resulting value.
  int getAttributeUnsignedIntValue1(int index, int defaultValue) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getAttributeUnsignedIntValue1,
          jni.JniType.intType,
          [index, defaultValue]).integer;

  static final _id_getAttributeFloatValue1 =
      jniAccessors.getMethodIDOf(_classRef, "getAttributeFloatValue", "(IF)F");

  /// from: public abstract float getAttributeFloatValue(int index, float defaultValue)
  ///
  /// Return the float value of attribute at 'index'.
  ///@param index Index of the desired attribute, 0...count-1.
  ///@param defaultValue What to return if the attribute isn't found.
  ///@return Resulting value.
  double getAttributeFloatValue1(int index, double defaultValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getAttributeFloatValue1,
          jni.JniType.floatType, [index, defaultValue]).float;

  static final _id_getIdAttribute = jniAccessors.getMethodIDOf(
      _classRef, "getIdAttribute", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getIdAttribute()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the value of the "id" attribute or null if there is not one.
  /// Equivalent to getAttributeValue(null, "id").
  ///@return The id attribute's value or null.
  jni.JniString getIdAttribute() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getIdAttribute, jni.JniType.objectType, []).object);

  static final _id_getClassAttribute = jniAccessors.getMethodIDOf(
      _classRef, "getClassAttribute", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getClassAttribute()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the value of the "class" attribute or null if there is not one.
  /// Equivalent to getAttributeValue(null, "class").
  ///@return The class attribute's value or null.
  jni.JniString getClassAttribute() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getClassAttribute, jni.JniType.objectType, []).object);

  static final _id_getIdAttributeResourceValue = jniAccessors.getMethodIDOf(
      _classRef, "getIdAttributeResourceValue", "(I)I");

  /// from: public abstract int getIdAttributeResourceValue(int defaultValue)
  ///
  /// Return the integer value of the "id" attribute or defaultValue if there
  /// is none.
  /// Equivalent to getAttributeResourceValue(null, "id", defaultValue);
  ///@param defaultValue What to return if the "id" attribute isn't found.
  ///@return int Resulting value.
  int getIdAttributeResourceValue(int defaultValue) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getIdAttributeResourceValue,
          jni.JniType.intType,
          [defaultValue]).integer;

  static final _id_getStyleAttribute =
      jniAccessors.getMethodIDOf(_classRef, "getStyleAttribute", "()I");

  /// from: public abstract int getStyleAttribute()
  ///
  /// Return the value of the "style" attribute or 0 if there is not one.
  /// Equivalent to getAttributeResourceValue(null, "style").
  ///@return The style attribute's resource identifier or 0.
  int getStyleAttribute() => jniAccessors.callMethodWithArgs(
      reference, _id_getStyleAttribute, jni.JniType.intType, []).integer;
}
