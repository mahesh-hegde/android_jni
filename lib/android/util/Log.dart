// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.util.Log
///
/// API for sending log output.
///
/// Generally, you should use the \#v Log.v(), \#d Log.d(),
/// \#i Log.i(), \#w Log.w(), and \#e Log.e() methods to write logs.
/// You can then <a href="{@docRoot}studio/debug/am-logcat.html">view the logs in logcat</a>.
///
/// The order in terms of verbosity, from least to most is
/// ERROR, WARN, INFO, DEBUG, VERBOSE.  Verbose should never be compiled
/// into an application except during development.  Debug logs are compiled
/// in but stripped at runtime.  Error, warning and info logs are always kept.
///
/// __Tip:__ A good convention is to declare a <code>TAG</code> constant
/// in your class:
///
/// <pre>private static final String TAG = "MyActivity";</pre>
///
/// and use that in subsequent calls to the log methods.
///
///
///
/// __Tip:__ Don't forget that when you make a call like
/// <pre>Log.v(TAG, "index=" + i);</pre>
/// that when you're building the string to pass into Log.d, the compiler uses a
/// StringBuilder and at least three allocations occur: the StringBuilder
/// itself, the buffer, and the String object.  Realistically, there is also
/// another buffer allocation and copy, and even more pressure on the gc.
/// That means that if your log message is filtered out, you might be doing
/// significant work and incurring significant overhead.
class Log extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/util/Log");
  Log.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ASSERT
  ///
  /// Priority constant for the println method.
  static const ASSERT = 7;

  /// from: static public final int DEBUG
  ///
  /// Priority constant for the println method; use Log.d.
  static const DEBUG = 3;

  /// from: static public final int ERROR
  ///
  /// Priority constant for the println method; use Log.e.
  static const ERROR = 6;

  /// from: static public final int INFO
  ///
  /// Priority constant for the println method; use Log.i.
  static const INFO = 4;

  /// from: static public final int VERBOSE
  ///
  /// Priority constant for the println method; use Log.v.
  static const VERBOSE = 2;

  /// from: static public final int WARN
  ///
  /// Priority constant for the println method; use Log.w.
  static const WARN = 5;

  static final _id_v = jniAccessors.getStaticMethodIDOf(
      _classRef, "v", "(Ljava/lang/String;Ljava/lang/String;)I");

  /// from: static public int v(java.lang.String tag, java.lang.String msg)
  ///
  /// Send a \#VERBOSE log message.
  ///@param tag Used to identify the source of a log message.  It usually identifies
  ///        the class or activity where the log call occurs.
  ///@param msg The message you would like logged.
  static int v(jni.JniString tag, jni.JniString msg) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_v,
          jni.JniType.intType, [tag.reference, msg.reference]).integer;

  static final _id_v1 = jniAccessors.getStaticMethodIDOf(_classRef, "v",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I");

  /// from: static public int v(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr)
  ///
  /// Send a \#VERBOSE log message and log the exception.
  ///@param tag Used to identify the source of a log message.  It usually identifies
  ///        the class or activity where the log call occurs.
  ///@param msg The message you would like logged.
  ///@param tr An exception to log
  static int v1(jni.JniString tag, jni.JniString msg, jni.JniObject tr) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_v1,
          jni.JniType.intType,
          [tag.reference, msg.reference, tr.reference]).integer;

  static final _id_d = jniAccessors.getStaticMethodIDOf(
      _classRef, "d", "(Ljava/lang/String;Ljava/lang/String;)I");

  /// from: static public int d(java.lang.String tag, java.lang.String msg)
  ///
  /// Send a \#DEBUG log message.
  ///@param tag Used to identify the source of a log message.  It usually identifies
  ///        the class or activity where the log call occurs.
  ///@param msg The message you would like logged.
  static int d(jni.JniString tag, jni.JniString msg) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_d,
          jni.JniType.intType, [tag.reference, msg.reference]).integer;

  static final _id_d1 = jniAccessors.getStaticMethodIDOf(_classRef, "d",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I");

  /// from: static public int d(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr)
  ///
  /// Send a \#DEBUG log message and log the exception.
  ///@param tag Used to identify the source of a log message.  It usually identifies
  ///        the class or activity where the log call occurs.
  ///@param msg The message you would like logged.
  ///@param tr An exception to log
  static int d1(jni.JniString tag, jni.JniString msg, jni.JniObject tr) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_d1,
          jni.JniType.intType,
          [tag.reference, msg.reference, tr.reference]).integer;

  static final _id_i = jniAccessors.getStaticMethodIDOf(
      _classRef, "i", "(Ljava/lang/String;Ljava/lang/String;)I");

  /// from: static public int i(java.lang.String tag, java.lang.String msg)
  ///
  /// Send an \#INFO log message.
  ///@param tag Used to identify the source of a log message.  It usually identifies
  ///        the class or activity where the log call occurs.
  ///@param msg The message you would like logged.
  static int i(jni.JniString tag, jni.JniString msg) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_i,
          jni.JniType.intType, [tag.reference, msg.reference]).integer;

  static final _id_i1 = jniAccessors.getStaticMethodIDOf(_classRef, "i",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I");

  /// from: static public int i(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr)
  ///
  /// Send a \#INFO log message and log the exception.
  ///@param tag Used to identify the source of a log message.  It usually identifies
  ///        the class or activity where the log call occurs.
  ///@param msg The message you would like logged.
  ///@param tr An exception to log
  static int i1(jni.JniString tag, jni.JniString msg, jni.JniObject tr) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_i1,
          jni.JniType.intType,
          [tag.reference, msg.reference, tr.reference]).integer;

  static final _id_w = jniAccessors.getStaticMethodIDOf(
      _classRef, "w", "(Ljava/lang/String;Ljava/lang/String;)I");

  /// from: static public int w(java.lang.String tag, java.lang.String msg)
  ///
  /// Send a \#WARN log message.
  ///@param tag Used to identify the source of a log message.  It usually identifies
  ///        the class or activity where the log call occurs.
  ///@param msg The message you would like logged.
  static int w(jni.JniString tag, jni.JniString msg) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_w,
          jni.JniType.intType, [tag.reference, msg.reference]).integer;

  static final _id_w1 = jniAccessors.getStaticMethodIDOf(_classRef, "w",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I");

  /// from: static public int w(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr)
  ///
  /// Send a \#WARN log message and log the exception.
  ///@param tag Used to identify the source of a log message.  It usually identifies
  ///        the class or activity where the log call occurs.
  ///@param msg The message you would like logged.
  ///@param tr An exception to log
  static int w1(jni.JniString tag, jni.JniString msg, jni.JniObject tr) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_w1,
          jni.JniType.intType,
          [tag.reference, msg.reference, tr.reference]).integer;

  static final _id_isLoggable = jniAccessors.getStaticMethodIDOf(
      _classRef, "isLoggable", "(Ljava/lang/String;I)Z");

  /// from: static public native boolean isLoggable(java.lang.String tag, int level)
  ///
  /// Checks to see whether or not a log for the specified tag is loggable at the specified level.
  ///
  ///  The default level of any tag is set to INFO. This means that any level above and including
  ///  INFO will be logged. Before you make any calls to a logging method you should check to see
  ///  if your tag should be logged. You can change the default level by setting a system property:
  ///      'setprop log.tag.&lt;YOUR_LOG_TAG> &lt;LEVEL>'
  ///  Where level is either VERBOSE, DEBUG, INFO, WARN, ERROR, ASSERT, or SUPPRESS. SUPPRESS will
  ///  turn off all logging for your tag. You can also create a local.prop file that with the
  ///  following in it:
  ///      'log.tag.&lt;YOUR_LOG_TAG>=&lt;LEVEL>'
  ///  and place that in /data/local.prop.
  ///@param tag The tag to check.
  ///@param level The level to check.
  ///@return Whether or not that this is allowed to be logged.
  ///@throws IllegalArgumentException is thrown if the tag.length() > 23
  ///         for Nougat (7.0) releases (API <= 23) and prior, there is no
  ///         tag limit of concern after this API level.
  static bool isLoggable(jni.JniString tag, int level) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isLoggable,
          jni.JniType.booleanType, [tag.reference, level]).boolean;

  static final _id_w2 = jniAccessors.getStaticMethodIDOf(
      _classRef, "w", "(Ljava/lang/String;Ljava/lang/Throwable;)I");

  /// from: static public int w(java.lang.String tag, java.lang.Throwable tr)
  static int w2(jni.JniString tag, jni.JniObject tr) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_w2,
          jni.JniType.intType, [tag.reference, tr.reference]).integer;

  static final _id_e = jniAccessors.getStaticMethodIDOf(
      _classRef, "e", "(Ljava/lang/String;Ljava/lang/String;)I");

  /// from: static public int e(java.lang.String tag, java.lang.String msg)
  ///
  /// Send an \#ERROR log message.
  ///@param tag Used to identify the source of a log message.  It usually identifies
  ///        the class or activity where the log call occurs.
  ///@param msg The message you would like logged.
  static int e(jni.JniString tag, jni.JniString msg) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_e,
          jni.JniType.intType, [tag.reference, msg.reference]).integer;

  static final _id_e1 = jniAccessors.getStaticMethodIDOf(_classRef, "e",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I");

  /// from: static public int e(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr)
  ///
  /// Send a \#ERROR log message and log the exception.
  ///@param tag Used to identify the source of a log message.  It usually identifies
  ///        the class or activity where the log call occurs.
  ///@param msg The message you would like logged.
  ///@param tr An exception to log
  static int e1(jni.JniString tag, jni.JniString msg, jni.JniObject tr) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_e1,
          jni.JniType.intType,
          [tag.reference, msg.reference, tr.reference]).integer;

  static final _id_wtf = jniAccessors.getStaticMethodIDOf(
      _classRef, "wtf", "(Ljava/lang/String;Ljava/lang/String;)I");

  /// from: static public int wtf(java.lang.String tag, java.lang.String msg)
  ///
  /// What a Terrible Failure: Report a condition that should never happen.
  /// The error will always be logged at level ASSERT with the call stack.
  /// Depending on system configuration, a report may be added to the
  /// android.os.DropBoxManager and/or the process may be terminated
  /// immediately with an error dialog.
  ///@param tag Used to identify the source of a log message.
  ///@param msg The message you would like logged.
  static int wtf(jni.JniString tag, jni.JniString msg) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_wtf,
          jni.JniType.intType, [tag.reference, msg.reference]).integer;

  static final _id_wtf1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "wtf", "(Ljava/lang/String;Ljava/lang/Throwable;)I");

  /// from: static public int wtf(java.lang.String tag, java.lang.Throwable tr)
  ///
  /// What a Terrible Failure: Report an exception that should never happen.
  /// Similar to \#wtf(String, String), with an exception to log.
  ///@param tag Used to identify the source of a log message.
  ///@param tr An exception to log.
  static int wtf1(jni.JniString tag, jni.JniObject tr) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_wtf1,
          jni.JniType.intType, [tag.reference, tr.reference]).integer;

  static final _id_wtf2 = jniAccessors.getStaticMethodIDOf(_classRef, "wtf",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I");

  /// from: static public int wtf(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr)
  ///
  /// What a Terrible Failure: Report an exception that should never happen.
  /// Similar to \#wtf(String, Throwable), with a message as well.
  ///@param tag Used to identify the source of a log message.
  ///@param msg The message you would like logged.
  ///@param tr An exception to log.  May be null.
  static int wtf2(jni.JniString tag, jni.JniString msg, jni.JniObject tr) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_wtf2,
          jni.JniType.intType,
          [tag.reference, msg.reference, tr.reference]).integer;

  static final _id_getStackTraceString = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getStackTraceString",
      "(Ljava/lang/Throwable;)Ljava/lang/String;");

  /// from: static public java.lang.String getStackTraceString(java.lang.Throwable tr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Handy function to get a loggable stack trace from a Throwable
  ///@param tr An exception to log
  static jni.JniString getStackTraceString(jni.JniObject tr) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getStackTraceString,
          jni.JniType.objectType,
          [tr.reference]).object);

  static final _id_println = jniAccessors.getStaticMethodIDOf(
      _classRef, "println", "(ILjava/lang/String;Ljava/lang/String;)I");

  /// from: static public int println(int priority, java.lang.String tag, java.lang.String msg)
  ///
  /// Low-level logging call.
  ///@param priority The priority/type of this log message
  ///@param tag Used to identify the source of a log message.  It usually identifies
  ///        the class or activity where the log call occurs.
  ///@param msg The message you would like logged.
  ///@return The number of bytes written.
  static int println(int priority, jni.JniString tag, jni.JniString msg) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_println,
          jni.JniType.intType,
          [priority, tag.reference, msg.reference]).integer;
}
