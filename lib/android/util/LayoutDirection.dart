// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.util.LayoutDirection
///
/// A class for defining layout directions. A layout direction can be left-to-right (LTR)
/// or right-to-left (RTL). It can also be inherited (from a parent) or deduced from the default
/// language script of a locale.
class LayoutDirection extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/util/LayoutDirection");
  LayoutDirection.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int INHERIT
  ///
  /// Horizontal layout direction is inherited.
  static const INHERIT = 2;

  /// from: static public final int LOCALE
  ///
  /// Horizontal layout direction is deduced from the default language script for the locale.
  static const LOCALE = 3;

  /// from: static public final int LTR
  ///
  /// Horizontal layout direction is from Left to Right.
  static const LTR = 0;

  /// from: static public final int RTL
  ///
  /// Horizontal layout direction is from Right to Left.
  static const RTL = 1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  LayoutDirection()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
