// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.util.Base64OutputStream
///
/// An OutputStream that does Base64 encoding on the data written to
/// it, writing the resulting data to another OutputStream.
class Base64OutputStream extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/util/Base64OutputStream");
  Base64OutputStream.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/io/OutputStream;I)V");

  /// from: public void <init>(java.io.OutputStream out, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Performs Base64 encoding on the data written to the stream,
  /// writing the encoded data to another OutputStream.
  ///@param out the OutputStream to write the encoded data to
  ///@param flags bit flags for controlling the encoder; see the
  ///        constants in Base64
  Base64OutputStream(jni.JniObject out, int flags)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [out.reference, flags]).object);

  static final _id_write =
      jniAccessors.getMethodIDOf(_classRef, "write", "(I)V");

  /// from: public void write(int b)
  void write(int b) => jniAccessors.callMethodWithArgs(
      reference, _id_write, jni.JniType.voidType, [b]).check();

  static final _id_write1 =
      jniAccessors.getMethodIDOf(_classRef, "write", "([BII)V");

  /// from: public void write(byte[] b, int off, int len)
  void write1(jni.JniObject b, int off, int len) =>
      jniAccessors.callMethodWithArgs(reference, _id_write1,
          jni.JniType.voidType, [b.reference, off, len]).check();

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();
}
