// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../widget/FrameLayout.dart" as framelayout_;

import "../content/Context.dart" as context_;

import "AppWidgetProviderInfo.dart" as appwidgetproviderinfo_;

import "../graphics/Rect.dart" as rect_;

import "../content/ComponentName.dart" as componentname_;

import "../util/SparseArray.dart" as sparsearray_;

import "../os/Bundle.dart" as bundle_;

import "../util/AttributeSet.dart" as attributeset_;

import "../widget/RemoteViews.dart" as remoteviews_;

import "../view/View.dart" as view_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.appwidget.AppWidgetHostView
///
/// Provides the glue to show AppWidget views. This class offers automatic animation
/// between updates, and will try recycling old views for each incoming
/// RemoteViews.
class AppWidgetHostView extends framelayout_.FrameLayout {
  static final _classRef =
      jniAccessors.getClassOf("android/appwidget/AppWidgetHostView");
  AppWidgetHostView.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a host view.  Uses default fade animations.
  AppWidgetHostView(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;II)V");

  /// from: public void <init>(android.content.Context context, int animationIn, int animationOut)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a host view. Uses specified animations when pushing
  /// \#updateAppWidget(RemoteViews).
  ///@param animationIn Resource ID of in animation to use
  ///@param animationOut Resource ID of out animation to use
  AppWidgetHostView.ctor4(
      context_.Context context, int animationIn, int animationOut)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor4,
            [context.reference, animationIn, animationOut]).object);

  static final _id_setAppWidget = jniAccessors.getMethodIDOf(_classRef,
      "setAppWidget", "(ILandroid/appwidget/AppWidgetProviderInfo;)V");

  /// from: public void setAppWidget(int appWidgetId, android.appwidget.AppWidgetProviderInfo info)
  ///
  /// Set the AppWidget that will be displayed by this view. This method also adds default padding
  /// to widgets, as described in \#getDefaultPaddingForWidget(Context, ComponentName, Rect)
  /// and can be overridden in order to add custom padding.
  void setAppWidget(
          int appWidgetId, appwidgetproviderinfo_.AppWidgetProviderInfo info) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAppWidget,
          jni.JniType.voidType, [appWidgetId, info.reference]).check();

  static final _id_getDefaultPaddingForWidget = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDefaultPaddingForWidget",
      "(Landroid/content/Context;Landroid/content/ComponentName;Landroid/graphics/Rect;)Landroid/graphics/Rect;");

  /// from: static public android.graphics.Rect getDefaultPaddingForWidget(android.content.Context context, android.content.ComponentName component, android.graphics.Rect padding)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// As of ICE_CREAM_SANDWICH we are automatically adding padding to widgets targeting
  /// ICE_CREAM_SANDWICH and higher. The new widget design guidelines strongly recommend
  /// that widget developers do not add extra padding to their widgets. This will help
  /// achieve consistency among widgets.
  ///
  /// Note: this method is only needed by developers of AppWidgetHosts. The method is provided in
  /// order for the AppWidgetHost to account for the automatic padding when computing the number
  /// of cells to allocate to a particular widget.
  ///@param context the current context
  ///@param component the component name of the widget
  ///@param padding Rect in which to place the output, if null, a new Rect will be allocated and
  ///                returned
  ///@return default padding for this widget, in pixels
  static rect_.Rect getDefaultPaddingForWidget(context_.Context context,
          componentname_.ComponentName component, rect_.Rect padding) =>
      rect_.Rect.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDefaultPaddingForWidget,
          jni.JniType.objectType,
          [context.reference, component.reference, padding.reference]).object);

  static final _id_getAppWidgetId =
      jniAccessors.getMethodIDOf(_classRef, "getAppWidgetId", "()I");

  /// from: public int getAppWidgetId()
  int getAppWidgetId() => jniAccessors.callMethodWithArgs(
      reference, _id_getAppWidgetId, jni.JniType.intType, []).integer;

  static final _id_getAppWidgetInfo = jniAccessors.getMethodIDOf(_classRef,
      "getAppWidgetInfo", "()Landroid/appwidget/AppWidgetProviderInfo;");

  /// from: public android.appwidget.AppWidgetProviderInfo getAppWidgetInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  appwidgetproviderinfo_.AppWidgetProviderInfo getAppWidgetInfo() =>
      appwidgetproviderinfo_.AppWidgetProviderInfo.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getAppWidgetInfo,
              jni.JniType.objectType, []).object);

  static final _id_dispatchSaveInstanceState1 = jniAccessors.getMethodIDOf(
      _classRef, "dispatchSaveInstanceState", "(Landroid/util/SparseArray;)V");

  /// from: protected void dispatchSaveInstanceState(android.util.SparseArray<android.os.Parcelable> container)
  void dispatchSaveInstanceState1(sparsearray_.SparseArray container) =>
      jniAccessors.callMethodWithArgs(reference, _id_dispatchSaveInstanceState1,
          jni.JniType.voidType, [container.reference]).check();

  static final _id_dispatchRestoreInstanceState1 = jniAccessors.getMethodIDOf(
      _classRef,
      "dispatchRestoreInstanceState",
      "(Landroid/util/SparseArray;)V");

  /// from: protected void dispatchRestoreInstanceState(android.util.SparseArray<android.os.Parcelable> container)
  void dispatchRestoreInstanceState1(sparsearray_.SparseArray container) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_dispatchRestoreInstanceState1,
          jni.JniType.voidType,
          [container.reference]).check();

  static final _id_onLayout =
      jniAccessors.getMethodIDOf(_classRef, "onLayout", "(ZIIII)V");

  /// from: protected void onLayout(boolean changed, int left, int top, int right, int bottom)
  void onLayout(bool changed, int left, int top, int right, int bottom) =>
      jniAccessors.callMethodWithArgs(reference, _id_onLayout,
          jni.JniType.voidType, [changed, left, top, right, bottom]).check();

  static final _id_updateAppWidgetSize = jniAccessors.getMethodIDOf(
      _classRef, "updateAppWidgetSize", "(Landroid/os/Bundle;IIII)V");

  /// from: public void updateAppWidgetSize(android.os.Bundle newOptions, int minWidth, int minHeight, int maxWidth, int maxHeight)
  ///
  /// Provide guidance about the size of this widget to the AppWidgetManager. The widths and
  /// heights should correspond to the full area the AppWidgetHostView is given. Padding added by
  /// the framework will be accounted for automatically. This information gets embedded into the
  /// AppWidget options and causes a callback to the AppWidgetProvider.
  ///@see AppWidgetProvider\#onAppWidgetOptionsChanged(Context, AppWidgetManager, int, Bundle)
  ///@param newOptions The bundle of options, in addition to the size information,
  ///          can be null.
  ///@param minWidth The minimum width in dips that the widget will be displayed at.
  ///@param minHeight The maximum height in dips that the widget will be displayed at.
  ///@param maxWidth The maximum width in dips that the widget will be displayed at.
  ///@param maxHeight The maximum height in dips that the widget will be displayed at.
  void updateAppWidgetSize(bundle_.Bundle newOptions, int minWidth,
          int minHeight, int maxWidth, int maxHeight) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_updateAppWidgetSize, jni.JniType.voidType, [
        newOptions.reference,
        minWidth,
        minHeight,
        maxWidth,
        maxHeight
      ]).check();

  static final _id_updateAppWidgetOptions = jniAccessors.getMethodIDOf(
      _classRef, "updateAppWidgetOptions", "(Landroid/os/Bundle;)V");

  /// from: public void updateAppWidgetOptions(android.os.Bundle options)
  ///
  /// Specify some extra information for the widget provider. Causes a callback to the
  /// AppWidgetProvider.
  ///@see AppWidgetProvider\#onAppWidgetOptionsChanged(Context, AppWidgetManager, int, Bundle)
  ///@param options The bundle of options information.
  void updateAppWidgetOptions(bundle_.Bundle options) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateAppWidgetOptions,
          jni.JniType.voidType, [options.reference]).check();

  static final _id_generateLayoutParams2 = jniAccessors.getMethodIDOf(
      _classRef,
      "generateLayoutParams",
      "(Landroid/util/AttributeSet;)Landroid/widget/FrameLayout\$LayoutParams;");

  /// from: public android.widget.FrameLayout.LayoutParams generateLayoutParams(android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  framelayout_.FrameLayout_LayoutParams generateLayoutParams2(
          attributeset_.AttributeSet attrs) =>
      framelayout_.FrameLayout_LayoutParams.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_generateLayoutParams2,
              jni.JniType.objectType, [attrs.reference]).object);

  static final _id_setExecutor = jniAccessors.getMethodIDOf(
      _classRef, "setExecutor", "(Ljava/util/concurrent/Executor;)V");

  /// from: public void setExecutor(java.util.concurrent.Executor executor)
  ///
  /// Sets an executor which can be used for asynchronously inflating. CPU intensive tasks like
  /// view inflation or loading images will be performed on the executor. The updates will still
  /// be applied on the UI thread.
  ///@param executor the executor to use or null.
  void setExecutor(jni.JniObject executor) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setExecutor,
      jni.JniType.voidType,
      [executor.reference]).check();

  static final _id_updateAppWidget = jniAccessors.getMethodIDOf(
      _classRef, "updateAppWidget", "(Landroid/widget/RemoteViews;)V");

  /// from: public void updateAppWidget(android.widget.RemoteViews remoteViews)
  ///
  /// Process a set of RemoteViews coming in as an update from the
  /// AppWidget provider. Will animate into these new views as needed
  void updateAppWidget(remoteviews_.RemoteViews remoteViews) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateAppWidget,
          jni.JniType.voidType, [remoteViews.reference]).check();

  static final _id_prepareView = jniAccessors.getMethodIDOf(
      _classRef, "prepareView", "(Landroid/view/View;)V");

  /// from: protected void prepareView(android.view.View view)
  ///
  /// Prepare the given view to be shown. This might include adjusting
  /// FrameLayout.LayoutParams before inserting.
  void prepareView(view_.View view) => jniAccessors.callMethodWithArgs(
      reference,
      _id_prepareView,
      jni.JniType.voidType,
      [view.reference]).check();

  static final _id_getDefaultView = jniAccessors.getMethodIDOf(
      _classRef, "getDefaultView", "()Landroid/view/View;");

  /// from: protected android.view.View getDefaultView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Inflate and return the default layout requested by AppWidget provider.
  view_.View getDefaultView() =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDefaultView, jni.JniType.objectType, []).object);

  static final _id_getErrorView = jniAccessors.getMethodIDOf(
      _classRef, "getErrorView", "()Landroid/view/View;");

  /// from: protected android.view.View getErrorView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Inflate and return a view that represents an error state.
  view_.View getErrorView() =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getErrorView, jni.JniType.objectType, []).object);
}
