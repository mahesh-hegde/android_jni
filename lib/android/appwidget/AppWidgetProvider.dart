// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/BroadcastReceiver.dart" as broadcastreceiver_;

import "../content/Context.dart" as context_;

import "../content/Intent.dart" as intent_;

import "AppWidgetManager.dart" as appwidgetmanager_;

import "../os/Bundle.dart" as bundle_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.appwidget.AppWidgetProvider
///
/// A convenience class to aid in implementing an AppWidget provider.
/// Everything you can do with AppWidgetProvider, you can do with a regular BroadcastReceiver.
/// AppWidgetProvider merely parses the relevant fields out of the Intent that is received in
/// \#onReceive(Context,Intent) onReceive(Context,Intent), and calls hook methods
/// with the received extras.
///
/// Extend this class and override one or more of the \#onUpdate, \#onDeleted,
/// \#onEnabled or \#onDisabled methods to implement your own AppWidget functionality.
///
///
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about how to write an app widget provider, read the
/// <a href="{@docRoot}guide/topics/appwidgets/index.html\#AppWidgetProvider">App Widgets</a>
/// developer guide.
///
/// </div>
class AppWidgetProvider extends broadcastreceiver_.BroadcastReceiver {
  static final _classRef =
      jniAccessors.getClassOf("android/appwidget/AppWidgetProvider");
  AppWidgetProvider.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor to initialize AppWidgetProvider.
  AppWidgetProvider()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onReceive = jniAccessors.getMethodIDOf(_classRef,
      "onReceive", "(Landroid/content/Context;Landroid/content/Intent;)V");

  /// from: public void onReceive(android.content.Context context, android.content.Intent intent)
  ///
  /// Implements BroadcastReceiver\#onReceive to dispatch calls to the various
  /// other methods on AppWidgetProvider.
  ///@param context The Context in which the receiver is running.
  ///@param intent The Intent being received.
  void onReceive(context_.Context context, intent_.Intent intent) =>
      jniAccessors.callMethodWithArgs(reference, _id_onReceive,
          jni.JniType.voidType, [context.reference, intent.reference]).check();

  static final _id_onUpdate = jniAccessors.getMethodIDOf(_classRef, "onUpdate",
      "(Landroid/content/Context;Landroid/appwidget/AppWidgetManager;[I)V");

  /// from: public void onUpdate(android.content.Context context, android.appwidget.AppWidgetManager appWidgetManager, int[] appWidgetIds)
  ///
  /// Called in response to the AppWidgetManager\#ACTION_APPWIDGET_UPDATE and
  /// AppWidgetManager\#ACTION_APPWIDGET_RESTORED broadcasts when this AppWidget
  /// provider is being asked to provide android.widget.RemoteViews RemoteViews
  /// for a set of AppWidgets.  Override this method to implement your own AppWidget functionality.
  ///
  /// {@more }
  ///@param context The android.content.Context Context in which this receiver is
  ///                  running.
  ///@param appWidgetManager A AppWidgetManager object you can call AppWidgetManager\#updateAppWidget on.
  ///@param appWidgetIds The appWidgetIds for which an update is needed.  Note that this
  ///                  may be all of the AppWidget instances for this provider, or just
  ///                  a subset of them.
  ///@see AppWidgetManager\#ACTION_APPWIDGET_UPDATE
  void onUpdate(
          context_.Context context,
          appwidgetmanager_.AppWidgetManager appWidgetManager,
          jni.JniObject appWidgetIds) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onUpdate, jni.JniType.voidType, [
        context.reference,
        appWidgetManager.reference,
        appWidgetIds.reference
      ]).check();

  static final _id_onAppWidgetOptionsChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onAppWidgetOptionsChanged",
      "(Landroid/content/Context;Landroid/appwidget/AppWidgetManager;ILandroid/os/Bundle;)V");

  /// from: public void onAppWidgetOptionsChanged(android.content.Context context, android.appwidget.AppWidgetManager appWidgetManager, int appWidgetId, android.os.Bundle newOptions)
  ///
  /// Called in response to the AppWidgetManager\#ACTION_APPWIDGET_OPTIONS_CHANGED
  /// broadcast when this widget has been layed out at a new size.
  ///
  /// {@more }
  ///@param context The android.content.Context Context in which this receiver is
  ///                  running.
  ///@param appWidgetManager A AppWidgetManager object you can call AppWidgetManager\#updateAppWidget on.
  ///@param appWidgetId The appWidgetId of the widget whose size changed.
  ///@param newOptions The appWidgetId of the widget whose size changed.
  ///@see AppWidgetManager\#ACTION_APPWIDGET_OPTIONS_CHANGED
  void onAppWidgetOptionsChanged(
          context_.Context context,
          appwidgetmanager_.AppWidgetManager appWidgetManager,
          int appWidgetId,
          bundle_.Bundle newOptions) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onAppWidgetOptionsChanged, jni.JniType.voidType, [
        context.reference,
        appWidgetManager.reference,
        appWidgetId,
        newOptions.reference
      ]).check();

  static final _id_onDeleted = jniAccessors.getMethodIDOf(
      _classRef, "onDeleted", "(Landroid/content/Context;[I)V");

  /// from: public void onDeleted(android.content.Context context, int[] appWidgetIds)
  ///
  /// Called in response to the AppWidgetManager\#ACTION_APPWIDGET_DELETED broadcast when
  /// one or more AppWidget instances have been deleted.  Override this method to implement
  /// your own AppWidget functionality.
  ///
  /// {@more }
  ///@param context The android.content.Context Context in which this receiver is
  ///                  running.
  ///@param appWidgetIds The appWidgetIds that have been deleted from their host.
  ///@see AppWidgetManager\#ACTION_APPWIDGET_DELETED
  void onDeleted(context_.Context context, jni.JniObject appWidgetIds) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onDeleted,
          jni.JniType.voidType,
          [context.reference, appWidgetIds.reference]).check();

  static final _id_onEnabled = jniAccessors.getMethodIDOf(
      _classRef, "onEnabled", "(Landroid/content/Context;)V");

  /// from: public void onEnabled(android.content.Context context)
  ///
  /// Called in response to the AppWidgetManager\#ACTION_APPWIDGET_ENABLED broadcast when
  /// the a AppWidget for this provider is instantiated.  Override this method to implement your
  /// own AppWidget functionality.
  ///
  /// {@more }
  /// When the last AppWidget for this provider is deleted,
  /// AppWidgetManager\#ACTION_APPWIDGET_DISABLED is sent by the AppWidget manager, and
  /// \#onDisabled is called.  If after that, an AppWidget for this provider is created
  /// again, onEnabled() will be called again.
  ///@param context The android.content.Context Context in which this receiver is
  ///                  running.
  ///@see AppWidgetManager\#ACTION_APPWIDGET_ENABLED
  void onEnabled(context_.Context context) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onEnabled,
      jni.JniType.voidType,
      [context.reference]).check();

  static final _id_onDisabled = jniAccessors.getMethodIDOf(
      _classRef, "onDisabled", "(Landroid/content/Context;)V");

  /// from: public void onDisabled(android.content.Context context)
  ///
  /// Called in response to the AppWidgetManager\#ACTION_APPWIDGET_DISABLED broadcast, which
  /// is sent when the last AppWidget instance for this provider is deleted.  Override this method
  /// to implement your own AppWidget functionality.
  ///
  /// {@more }
  ///@param context The android.content.Context Context in which this receiver is
  ///                  running.
  ///@see AppWidgetManager\#ACTION_APPWIDGET_DISABLED
  void onDisabled(context_.Context context) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onDisabled,
      jni.JniType.voidType,
      [context.reference]).check();

  static final _id_onRestored = jniAccessors.getMethodIDOf(
      _classRef, "onRestored", "(Landroid/content/Context;[I[I)V");

  /// from: public void onRestored(android.content.Context context, int[] oldWidgetIds, int[] newWidgetIds)
  ///
  /// Called in response to the AppWidgetManager\#ACTION_APPWIDGET_RESTORED broadcast
  /// when instances of this AppWidget provider have been restored from backup.  If your
  /// provider maintains any persistent data about its widget instances, override this method
  /// to remap the old AppWidgetIds to the new values and update any other app state that may
  /// be relevant.
  ///
  /// This callback will be followed immediately by a call to \#onUpdate so your
  /// provider can immediately generate new RemoteViews suitable for its newly-restored set
  /// of instances.
  ///
  /// {@more }
  ///@param context
  ///@param oldWidgetIds
  ///@param newWidgetIds
  void onRestored(context_.Context context, jni.JniObject oldWidgetIds,
          jni.JniObject newWidgetIds) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onRestored, jni.JniType.voidType, [
        context.reference,
        oldWidgetIds.reference,
        newWidgetIds.reference
      ]).check();
}
