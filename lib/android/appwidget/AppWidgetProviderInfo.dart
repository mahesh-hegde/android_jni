// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../content/ComponentName.dart" as componentname_;

import "../os/Parcel.dart" as parcel_;

import "../content/pm/PackageManager.dart" as packagemanager_;

import "../graphics/drawable/Drawable.dart" as drawable_;

import "../content/Context.dart" as context_;

import "../os/UserHandle.dart" as userhandle_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.appwidget.AppWidgetProviderInfo
///
/// Describes the meta data for an installed AppWidget provider.  The fields in this class
/// correspond to the fields in the <code>&lt;appwidget-provider&gt;</code> xml tag.
class AppWidgetProviderInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/appwidget/AppWidgetProviderInfo");
  AppWidgetProviderInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.appwidget.AppWidgetProviderInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Parcelable.Creator that instantiates AppWidgetProviderInfo objects
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int RESIZE_BOTH
  ///
  /// Widget is resizable in both the horizontal and vertical axes.
  static const RESIZE_BOTH = 3;

  /// from: static public final int RESIZE_HORIZONTAL
  ///
  /// Widget is resizable in the horizontal axis only.
  static const RESIZE_HORIZONTAL = 1;

  /// from: static public final int RESIZE_NONE
  ///
  /// Widget is not resizable.
  static const RESIZE_NONE = 0;

  /// from: static public final int RESIZE_VERTICAL
  ///
  /// Widget is resizable in the vertical axis only.
  static const RESIZE_VERTICAL = 2;

  /// from: static public final int WIDGET_CATEGORY_HOME_SCREEN
  ///
  /// Indicates that the widget can be displayed on the home screen. This is the default value.
  static const WIDGET_CATEGORY_HOME_SCREEN = 1;

  /// from: static public final int WIDGET_CATEGORY_KEYGUARD
  ///
  /// Indicates that the widget can be displayed on the keyguard.
  static const WIDGET_CATEGORY_KEYGUARD = 2;

  /// from: static public final int WIDGET_CATEGORY_SEARCHBOX
  ///
  /// Indicates that the widget can be displayed within a space reserved for the search box.
  static const WIDGET_CATEGORY_SEARCHBOX = 4;

  /// from: static public final int WIDGET_FEATURE_HIDE_FROM_PICKER
  ///
  /// The widget is added directly by the app, and the host may hide this widget when providing
  /// the user with the list of available widgets to choose from.
  ///@see AppWidgetManager\#requestPinAppWidget(ComponentName, Bundle, PendingIntent)
  ///@see \#widgetFeatures
  static const WIDGET_FEATURE_HIDE_FROM_PICKER = 2;

  /// from: static public final int WIDGET_FEATURE_RECONFIGURABLE
  ///
  /// The widget can be reconfigured anytime after it is bound by starting the
  /// \#configure activity.
  ///@see \#widgetFeatures
  static const WIDGET_FEATURE_RECONFIGURABLE = 1;

  static final _id_autoAdvanceViewId =
      jniAccessors.getFieldIDOf(_classRef, "autoAdvanceViewId", "I");

  /// from: public int autoAdvanceViewId
  ///
  /// The view id of the AppWidget subview which should be auto-advanced by the widget's host.
  ///
  /// This field corresponds to the <code>android:autoAdvanceViewId</code> attribute in
  /// the AppWidget meta-data file.
  int get autoAdvanceViewId => jniAccessors
      .getField(reference, _id_autoAdvanceViewId, jni.JniType.intType)
      .integer;

  /// from: public int autoAdvanceViewId
  ///
  /// The view id of the AppWidget subview which should be auto-advanced by the widget's host.
  ///
  /// This field corresponds to the <code>android:autoAdvanceViewId</code> attribute in
  /// the AppWidget meta-data file.
  set autoAdvanceViewId(int value) =>
      jniEnv.SetIntField(reference, _id_autoAdvanceViewId, value);

  static final _id_configure = jniAccessors.getFieldIDOf(
      _classRef, "configure", "Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName configure
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The activity to launch that will configure the AppWidget.
  ///
  /// This class name of field corresponds to the <code>android:configure</code> attribute in
  /// the AppWidget meta-data file.  The package name always corresponds to the package containing
  /// the AppWidget provider.
  componentname_.ComponentName get configure =>
      componentname_.ComponentName.fromRef(jniAccessors
          .getField(reference, _id_configure, jni.JniType.objectType)
          .object);

  /// from: public android.content.ComponentName configure
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The activity to launch that will configure the AppWidget.
  ///
  /// This class name of field corresponds to the <code>android:configure</code> attribute in
  /// the AppWidget meta-data file.  The package name always corresponds to the package containing
  /// the AppWidget provider.
  set configure(componentname_.ComponentName value) =>
      jniEnv.SetObjectField(reference, _id_configure, value.reference);

  static final _id_icon = jniAccessors.getFieldIDOf(_classRef, "icon", "I");

  /// from: public int icon
  ///
  /// The icon to display for this AppWidget in the AppWidget picker. If not supplied in the
  /// xml, the application icon will be used.
  ///
  /// This field corresponds to the <code>android:icon</code> attribute in
  /// the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.
  int get icon =>
      jniAccessors.getField(reference, _id_icon, jni.JniType.intType).integer;

  /// from: public int icon
  ///
  /// The icon to display for this AppWidget in the AppWidget picker. If not supplied in the
  /// xml, the application icon will be used.
  ///
  /// This field corresponds to the <code>android:icon</code> attribute in
  /// the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.
  set icon(int value) => jniEnv.SetIntField(reference, _id_icon, value);

  static final _id_initialKeyguardLayout =
      jniAccessors.getFieldIDOf(_classRef, "initialKeyguardLayout", "I");

  /// from: public int initialKeyguardLayout
  ///
  /// The resource id of the initial layout for this AppWidget when it is displayed on keyguard.
  /// This parameter only needs to be provided if the widget can be displayed on the keyguard,
  /// see \#widgetCategory.
  ///
  /// This field corresponds to the <code>android:initialKeyguardLayout</code> attribute in
  /// the AppWidget meta-data file.
  int get initialKeyguardLayout => jniAccessors
      .getField(reference, _id_initialKeyguardLayout, jni.JniType.intType)
      .integer;

  /// from: public int initialKeyguardLayout
  ///
  /// The resource id of the initial layout for this AppWidget when it is displayed on keyguard.
  /// This parameter only needs to be provided if the widget can be displayed on the keyguard,
  /// see \#widgetCategory.
  ///
  /// This field corresponds to the <code>android:initialKeyguardLayout</code> attribute in
  /// the AppWidget meta-data file.
  set initialKeyguardLayout(int value) =>
      jniEnv.SetIntField(reference, _id_initialKeyguardLayout, value);

  static final _id_initialLayout =
      jniAccessors.getFieldIDOf(_classRef, "initialLayout", "I");

  /// from: public int initialLayout
  ///
  /// The resource id of the initial layout for this AppWidget.  This should be
  /// displayed until the RemoteViews for the AppWidget is available.
  ///
  /// This field corresponds to the <code>android:initialLayout</code> attribute in
  /// the AppWidget meta-data file.
  int get initialLayout => jniAccessors
      .getField(reference, _id_initialLayout, jni.JniType.intType)
      .integer;

  /// from: public int initialLayout
  ///
  /// The resource id of the initial layout for this AppWidget.  This should be
  /// displayed until the RemoteViews for the AppWidget is available.
  ///
  /// This field corresponds to the <code>android:initialLayout</code> attribute in
  /// the AppWidget meta-data file.
  set initialLayout(int value) =>
      jniEnv.SetIntField(reference, _id_initialLayout, value);

  static final _id_label =
      jniAccessors.getFieldIDOf(_classRef, "label", "Ljava/lang/String;");

  /// from: public java.lang.String label
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The label to display to the user in the AppWidget picker.
  ///@deprecated Use \#loadLabel(android.content.pm.PackageManager).
  jni.JniString get label => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_label, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String label
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The label to display to the user in the AppWidget picker.
  ///@deprecated Use \#loadLabel(android.content.pm.PackageManager).
  set label(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_label, value.reference);

  static final _id_minHeight =
      jniAccessors.getFieldIDOf(_classRef, "minHeight", "I");

  /// from: public int minHeight
  ///
  /// The default height of the widget when added to a host, in dp. The widget will get
  /// at least this height, and will often be given more, depending on the host.
  ///
  /// This field corresponds to the <code>android:minHeight</code> attribute in
  /// the AppWidget meta-data file.
  int get minHeight => jniAccessors
      .getField(reference, _id_minHeight, jni.JniType.intType)
      .integer;

  /// from: public int minHeight
  ///
  /// The default height of the widget when added to a host, in dp. The widget will get
  /// at least this height, and will often be given more, depending on the host.
  ///
  /// This field corresponds to the <code>android:minHeight</code> attribute in
  /// the AppWidget meta-data file.
  set minHeight(int value) =>
      jniEnv.SetIntField(reference, _id_minHeight, value);

  static final _id_minResizeHeight =
      jniAccessors.getFieldIDOf(_classRef, "minResizeHeight", "I");

  /// from: public int minResizeHeight
  ///
  /// Minimum height (in dp) which the widget can be resized to. This field has no effect if it
  /// is greater than minHeight or if vertical resizing isn't enabled (see \#resizeMode).
  ///
  /// This field corresponds to the <code>android:minResizeHeight</code> attribute in
  /// the AppWidget meta-data file.
  int get minResizeHeight => jniAccessors
      .getField(reference, _id_minResizeHeight, jni.JniType.intType)
      .integer;

  /// from: public int minResizeHeight
  ///
  /// Minimum height (in dp) which the widget can be resized to. This field has no effect if it
  /// is greater than minHeight or if vertical resizing isn't enabled (see \#resizeMode).
  ///
  /// This field corresponds to the <code>android:minResizeHeight</code> attribute in
  /// the AppWidget meta-data file.
  set minResizeHeight(int value) =>
      jniEnv.SetIntField(reference, _id_minResizeHeight, value);

  static final _id_minResizeWidth =
      jniAccessors.getFieldIDOf(_classRef, "minResizeWidth", "I");

  /// from: public int minResizeWidth
  ///
  /// Minimum width (in dp) which the widget can be resized to. This field has no effect if it
  /// is greater than minWidth or if horizontal resizing isn't enabled (see \#resizeMode).
  ///
  /// This field corresponds to the <code>android:minResizeWidth</code> attribute in
  /// the AppWidget meta-data file.
  int get minResizeWidth => jniAccessors
      .getField(reference, _id_minResizeWidth, jni.JniType.intType)
      .integer;

  /// from: public int minResizeWidth
  ///
  /// Minimum width (in dp) which the widget can be resized to. This field has no effect if it
  /// is greater than minWidth or if horizontal resizing isn't enabled (see \#resizeMode).
  ///
  /// This field corresponds to the <code>android:minResizeWidth</code> attribute in
  /// the AppWidget meta-data file.
  set minResizeWidth(int value) =>
      jniEnv.SetIntField(reference, _id_minResizeWidth, value);

  static final _id_minWidth =
      jniAccessors.getFieldIDOf(_classRef, "minWidth", "I");

  /// from: public int minWidth
  ///
  /// The default height of the widget when added to a host, in dp. The widget will get
  /// at least this width, and will often be given more, depending on the host.
  ///
  /// This field corresponds to the <code>android:minWidth</code> attribute in
  /// the AppWidget meta-data file.
  int get minWidth => jniAccessors
      .getField(reference, _id_minWidth, jni.JniType.intType)
      .integer;

  /// from: public int minWidth
  ///
  /// The default height of the widget when added to a host, in dp. The widget will get
  /// at least this width, and will often be given more, depending on the host.
  ///
  /// This field corresponds to the <code>android:minWidth</code> attribute in
  /// the AppWidget meta-data file.
  set minWidth(int value) => jniEnv.SetIntField(reference, _id_minWidth, value);

  static final _id_previewImage =
      jniAccessors.getFieldIDOf(_classRef, "previewImage", "I");

  /// from: public int previewImage
  ///
  /// A preview of what the AppWidget will look like after it's configured.
  /// If not supplied, the AppWidget's icon will be used.
  ///
  /// This field corresponds to the <code>android:previewImage</code> attribute in
  /// the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.
  int get previewImage => jniAccessors
      .getField(reference, _id_previewImage, jni.JniType.intType)
      .integer;

  /// from: public int previewImage
  ///
  /// A preview of what the AppWidget will look like after it's configured.
  /// If not supplied, the AppWidget's icon will be used.
  ///
  /// This field corresponds to the <code>android:previewImage</code> attribute in
  /// the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.
  set previewImage(int value) =>
      jniEnv.SetIntField(reference, _id_previewImage, value);

  static final _id_provider = jniAccessors.getFieldIDOf(
      _classRef, "provider", "Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName provider
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Identity of this AppWidget component.  This component should be a android.content.BroadcastReceiver, and it will be sent the AppWidget intents
  /// android.appwidget as described in the AppWidget package documentation.
  ///
  /// This field corresponds to the <code>android:name</code> attribute in
  /// the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.
  componentname_.ComponentName get provider =>
      componentname_.ComponentName.fromRef(jniAccessors
          .getField(reference, _id_provider, jni.JniType.objectType)
          .object);

  /// from: public android.content.ComponentName provider
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Identity of this AppWidget component.  This component should be a android.content.BroadcastReceiver, and it will be sent the AppWidget intents
  /// android.appwidget as described in the AppWidget package documentation.
  ///
  /// This field corresponds to the <code>android:name</code> attribute in
  /// the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.
  set provider(componentname_.ComponentName value) =>
      jniEnv.SetObjectField(reference, _id_provider, value.reference);

  static final _id_resizeMode =
      jniAccessors.getFieldIDOf(_classRef, "resizeMode", "I");

  /// from: public int resizeMode
  ///
  /// The rules by which a widget can be resized. See \#RESIZE_NONE,
  /// \#RESIZE_NONE, \#RESIZE_HORIZONTAL,
  /// \#RESIZE_VERTICAL, \#RESIZE_BOTH.
  ///
  /// This field corresponds to the <code>android:resizeMode</code> attribute in
  /// the AppWidget meta-data file.
  ///
  /// Value is either <code>0</code> or a combination of android.appwidget.AppWidgetProviderInfo\#RESIZE_HORIZONTAL, and android.appwidget.AppWidgetProviderInfo\#RESIZE_VERTICAL
  int get resizeMode => jniAccessors
      .getField(reference, _id_resizeMode, jni.JniType.intType)
      .integer;

  /// from: public int resizeMode
  ///
  /// The rules by which a widget can be resized. See \#RESIZE_NONE,
  /// \#RESIZE_NONE, \#RESIZE_HORIZONTAL,
  /// \#RESIZE_VERTICAL, \#RESIZE_BOTH.
  ///
  /// This field corresponds to the <code>android:resizeMode</code> attribute in
  /// the AppWidget meta-data file.
  ///
  /// Value is either <code>0</code> or a combination of android.appwidget.AppWidgetProviderInfo\#RESIZE_HORIZONTAL, and android.appwidget.AppWidgetProviderInfo\#RESIZE_VERTICAL
  set resizeMode(int value) =>
      jniEnv.SetIntField(reference, _id_resizeMode, value);

  static final _id_updatePeriodMillis =
      jniAccessors.getFieldIDOf(_classRef, "updatePeriodMillis", "I");

  /// from: public int updatePeriodMillis
  ///
  /// How often, in milliseconds, that this AppWidget wants to be updated.
  /// The AppWidget manager may place a limit on how often a AppWidget is updated.
  ///
  /// This field corresponds to the <code>android:updatePeriodMillis</code> attribute in
  /// the AppWidget meta-data file.
  ///
  /// <p class="note">__Note:__ Updates requested with <code>updatePeriodMillis</code>
  /// will not be delivered more than once every 30 minutes.
  ///
  int get updatePeriodMillis => jniAccessors
      .getField(reference, _id_updatePeriodMillis, jni.JniType.intType)
      .integer;

  /// from: public int updatePeriodMillis
  ///
  /// How often, in milliseconds, that this AppWidget wants to be updated.
  /// The AppWidget manager may place a limit on how often a AppWidget is updated.
  ///
  /// This field corresponds to the <code>android:updatePeriodMillis</code> attribute in
  /// the AppWidget meta-data file.
  ///
  /// <p class="note">__Note:__ Updates requested with <code>updatePeriodMillis</code>
  /// will not be delivered more than once every 30 minutes.
  ///
  set updatePeriodMillis(int value) =>
      jniEnv.SetIntField(reference, _id_updatePeriodMillis, value);

  static final _id_widgetCategory =
      jniAccessors.getFieldIDOf(_classRef, "widgetCategory", "I");

  /// from: public int widgetCategory
  ///
  /// Determines whether this widget can be displayed on the home screen, the keyguard, or both.
  /// A widget which is displayed on both needs to ensure that it follows the design guidelines
  /// for both widget classes. This can be achieved by querying the AppWidget options in its
  /// widget provider's update method.
  ///
  /// This field corresponds to the <code>widgetCategory</code> attribute in
  /// the AppWidget meta-data file.
  ///
  /// Value is either <code>0</code> or a combination of android.appwidget.AppWidgetProviderInfo\#WIDGET_CATEGORY_HOME_SCREEN, android.appwidget.AppWidgetProviderInfo\#WIDGET_CATEGORY_KEYGUARD, and android.appwidget.AppWidgetProviderInfo\#WIDGET_CATEGORY_SEARCHBOX
  int get widgetCategory => jniAccessors
      .getField(reference, _id_widgetCategory, jni.JniType.intType)
      .integer;

  /// from: public int widgetCategory
  ///
  /// Determines whether this widget can be displayed on the home screen, the keyguard, or both.
  /// A widget which is displayed on both needs to ensure that it follows the design guidelines
  /// for both widget classes. This can be achieved by querying the AppWidget options in its
  /// widget provider's update method.
  ///
  /// This field corresponds to the <code>widgetCategory</code> attribute in
  /// the AppWidget meta-data file.
  ///
  /// Value is either <code>0</code> or a combination of android.appwidget.AppWidgetProviderInfo\#WIDGET_CATEGORY_HOME_SCREEN, android.appwidget.AppWidgetProviderInfo\#WIDGET_CATEGORY_KEYGUARD, and android.appwidget.AppWidgetProviderInfo\#WIDGET_CATEGORY_SEARCHBOX
  set widgetCategory(int value) =>
      jniEnv.SetIntField(reference, _id_widgetCategory, value);

  static final _id_widgetFeatures =
      jniAccessors.getFieldIDOf(_classRef, "widgetFeatures", "I");

  /// from: public int widgetFeatures
  ///
  /// Flags indicating various features supported by the widget. These are hints to the widget
  /// host, and do not actually change the behavior of the widget.
  ///
  /// Value is either <code>0</code> or a combination of android.appwidget.AppWidgetProviderInfo\#WIDGET_FEATURE_RECONFIGURABLE, and android.appwidget.AppWidgetProviderInfo\#WIDGET_FEATURE_HIDE_FROM_PICKER
  ///@see \#WIDGET_FEATURE_RECONFIGURABLE
  ///@see \#WIDGET_FEATURE_HIDE_FROM_PICKER
  int get widgetFeatures => jniAccessors
      .getField(reference, _id_widgetFeatures, jni.JniType.intType)
      .integer;

  /// from: public int widgetFeatures
  ///
  /// Flags indicating various features supported by the widget. These are hints to the widget
  /// host, and do not actually change the behavior of the widget.
  ///
  /// Value is either <code>0</code> or a combination of android.appwidget.AppWidgetProviderInfo\#WIDGET_FEATURE_RECONFIGURABLE, and android.appwidget.AppWidgetProviderInfo\#WIDGET_FEATURE_HIDE_FROM_PICKER
  ///@see \#WIDGET_FEATURE_RECONFIGURABLE
  ///@see \#WIDGET_FEATURE_HIDE_FROM_PICKER
  set widgetFeatures(int value) =>
      jniEnv.SetIntField(reference, _id_widgetFeatures, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AppWidgetProviderInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Unflatten the AppWidgetProviderInfo from a parcel.
  AppWidgetProviderInfo.ctor1(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [in0.reference]).object);

  static final _id_loadLabel = jniAccessors.getMethodIDOf(_classRef,
      "loadLabel", "(Landroid/content/pm/PackageManager;)Ljava/lang/String;");

  /// from: public final java.lang.String loadLabel(android.content.pm.PackageManager packageManager)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Loads the localized label to display to the user in the AppWidget picker.
  ///@param packageManager Package manager instance for loading resources.
  ///@return The label for the current locale.
  jni.JniString loadLabel(packagemanager_.PackageManager packageManager) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_loadLabel,
          jni.JniType.objectType,
          [packageManager.reference]).object);

  static final _id_loadIcon = jniAccessors.getMethodIDOf(_classRef, "loadIcon",
      "(Landroid/content/Context;I)Landroid/graphics/drawable/Drawable;");

  /// from: public final android.graphics.drawable.Drawable loadIcon(android.content.Context context, int density)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Loads the icon to display for this AppWidget in the AppWidget picker. If not
  /// supplied in the xml, the application icon will be used. A client can optionally
  /// provide a desired density such as android.util.DisplayMetrics\#DENSITY_LOW
  /// android.util.DisplayMetrics\#DENSITY_MEDIUM, etc. If no density is
  /// provided, the density of the current display will be used.
  ///
  /// The loaded icon corresponds to the <code>android:icon</code> attribute in
  /// the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.
  ///
  ///
  ///@param context Context for accessing resources.
  /// This value must never be {@code null}.
  ///@param density The optional desired density as per
  ///         android.util.DisplayMetrics\#densityDpi.
  ///@return The provider icon.
  drawable_.Drawable loadIcon(context_.Context context, int density) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_loadIcon,
          jni.JniType.objectType,
          [context.reference, density]).object);

  static final _id_loadPreviewImage = jniAccessors.getMethodIDOf(
      _classRef,
      "loadPreviewImage",
      "(Landroid/content/Context;I)Landroid/graphics/drawable/Drawable;");

  /// from: public final android.graphics.drawable.Drawable loadPreviewImage(android.content.Context context, int density)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Loads a preview of what the AppWidget will look like after it's configured.
  /// A client can optionally provide a desired density such as
  /// android.util.DisplayMetrics\#DENSITY_LOW
  /// android.util.DisplayMetrics\#DENSITY_MEDIUM, etc. If no density is
  /// provided, the density of the current display will be used.
  ///
  /// The loaded image corresponds to the <code>android:previewImage</code> attribute
  /// in the <code>&lt;receiver&gt;</code> element in the AndroidManifest.xml file.
  ///
  ///
  ///@param context Context for accessing resources.
  /// This value must never be {@code null}.
  ///@param density The optional desired density as per
  ///         android.util.DisplayMetrics\#densityDpi.
  ///@return The widget preview image or null if preview image is not available.
  drawable_.Drawable loadPreviewImage(context_.Context context, int density) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_loadPreviewImage,
          jni.JniType.objectType,
          [context.reference, density]).object);

  static final _id_getProfile = jniAccessors.getMethodIDOf(
      _classRef, "getProfile", "()Landroid/os/UserHandle;");

  /// from: public final android.os.UserHandle getProfile()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the user profile in which the provider resides.
  ///@return The hosting user profile.
  userhandle_.UserHandle getProfile() =>
      userhandle_.UserHandle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getProfile, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_clone = jniAccessors.getMethodIDOf(
      _classRef, "clone", "()Landroid/appwidget/AppWidgetProviderInfo;");

  /// from: public android.appwidget.AppWidgetProviderInfo clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AppWidgetProviderInfo clone() =>
      AppWidgetProviderInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
