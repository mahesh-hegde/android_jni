// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../graphics/Paint.dart" as paint_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.TextPaint
///
/// TextPaint is an extension of Paint that leaves room for some extra
/// data used during text measuring and drawing.
class TextPaint extends paint_.Paint {
  static final _classRef = jniAccessors.getClassOf("android/text/TextPaint");
  TextPaint.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_baselineShift =
      jniAccessors.getFieldIDOf(_classRef, "baselineShift", "I");

  /// from: public int baselineShift
  int get baselineShift => jniAccessors
      .getField(reference, _id_baselineShift, jni.JniType.intType)
      .integer;

  /// from: public int baselineShift
  set baselineShift(int value) =>
      jniEnv.SetIntField(reference, _id_baselineShift, value);

  static final _id_bgColor =
      jniAccessors.getFieldIDOf(_classRef, "bgColor", "I");

  /// from: public int bgColor
  int get bgColor => jniAccessors
      .getField(reference, _id_bgColor, jni.JniType.intType)
      .integer;

  /// from: public int bgColor
  set bgColor(int value) => jniEnv.SetIntField(reference, _id_bgColor, value);

  static final _id_density =
      jniAccessors.getFieldIDOf(_classRef, "density", "F");

  /// from: public float density
  double get density => jniAccessors
      .getField(reference, _id_density, jni.JniType.floatType)
      .float;

  /// from: public float density
  set density(double value) =>
      jniEnv.SetFloatField(reference, _id_density, value);

  static final _id_drawableState =
      jniAccessors.getFieldIDOf(_classRef, "drawableState", "[I");

  /// from: public int[] drawableState
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject get drawableState => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_drawableState, jni.JniType.objectType)
      .object);

  /// from: public int[] drawableState
  /// The returned object must be deleted after use, by calling the `delete` method.
  set drawableState(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_drawableState, value.reference);

  static final _id_linkColor =
      jniAccessors.getFieldIDOf(_classRef, "linkColor", "I");

  /// from: public int linkColor
  int get linkColor => jniAccessors
      .getField(reference, _id_linkColor, jni.JniType.intType)
      .integer;

  /// from: public int linkColor
  set linkColor(int value) =>
      jniEnv.SetIntField(reference, _id_linkColor, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  TextPaint()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TextPaint.ctor1(int flags)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [flags]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/Paint;)V");

  /// from: public void <init>(android.graphics.Paint p)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TextPaint.ctor2(paint_.Paint p)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [p.reference]).object);

  static final _id_set1 = jniAccessors.getMethodIDOf(
      _classRef, "set", "(Landroid/text/TextPaint;)V");

  /// from: public void set(android.text.TextPaint tp)
  ///
  /// Copy the fields from tp into this TextPaint, including the
  /// fields inherited from Paint.
  void set1(TextPaint tp) => jniAccessors.callMethodWithArgs(
      reference, _id_set1, jni.JniType.voidType, [tp.reference]).check();
}
