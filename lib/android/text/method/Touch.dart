// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../widget/TextView.dart" as textview_;

import "../Layout.dart" as layout_;

import "../Spannable.dart" as spannable_;

import "../../view/MotionEvent.dart" as motionevent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.Touch
class Touch extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/text/method/Touch");
  Touch.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Touch()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_scrollTo = jniAccessors.getStaticMethodIDOf(_classRef,
      "scrollTo", "(Landroid/widget/TextView;Landroid/text/Layout;II)V");

  /// from: static public void scrollTo(android.widget.TextView widget, android.text.Layout layout, int x, int y)
  ///
  /// Scrolls the specified widget to the specified coordinates, except
  /// constrains the X scrolling position to the horizontal regions of
  /// the text that will be visible after scrolling to the specified
  /// Y position.
  static void scrollTo(
          textview_.TextView widget, layout_.Layout layout, int x, int y) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_scrollTo,
          jni.JniType.voidType,
          [widget.reference, layout.reference, x, y]).check();

  static final _id_onTouchEvent = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "onTouchEvent",
      "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z");

  /// from: static public boolean onTouchEvent(android.widget.TextView widget, android.text.Spannable buffer, android.view.MotionEvent event)
  ///
  /// Handles touch events for dragging.  You may want to do other actions
  /// like moving the cursor on touch as well.
  static bool onTouchEvent(textview_.TextView widget,
          spannable_.Spannable buffer, motionevent_.MotionEvent event) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_onTouchEvent,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference, event.reference]).boolean;

  static final _id_getInitialScrollX = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInitialScrollX",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)I");

  /// from: static public int getInitialScrollX(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// @param widget The text view.
  ///@param buffer The text buffer.
  static int getInitialScrollX(
          textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getInitialScrollX,
          jni.JniType.intType, [widget.reference, buffer.reference]).integer;

  static final _id_getInitialScrollY = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInitialScrollY",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)I");

  /// from: static public int getInitialScrollY(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// @param widget The text view.
  ///@param buffer The text buffer.
  static int getInitialScrollY(
          textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getInitialScrollY,
          jni.JniType.intType, [widget.reference, buffer.reference]).integer;
}
