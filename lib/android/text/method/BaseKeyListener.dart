// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "MetaKeyKeyListener.dart" as metakeykeylistener_;

import "../../view/View.dart" as view_;

import "../Editable.dart" as editable_;

import "../../view/KeyEvent.dart" as keyevent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.BaseKeyListener
///
/// Abstract base class for key listeners.
///
/// Provides a basic foundation for entering and editing text.
/// Subclasses should override \#onKeyDown and \#onKeyUp to insert
/// characters as keys are pressed.
///
///
/// As for all implementations of KeyListener, this class is only concerned
/// with hardware keyboards.  Software input methods have no obligation to trigger
/// the methods in this class.
class BaseKeyListener extends metakeykeylistener_.MetaKeyKeyListener {
  static final _classRef =
      jniAccessors.getClassOf("android/text/method/BaseKeyListener");
  BaseKeyListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BaseKeyListener()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_backspace = jniAccessors.getMethodIDOf(
      _classRef,
      "backspace",
      "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z");

  /// from: public boolean backspace(android.view.View view, android.text.Editable content, int keyCode, android.view.KeyEvent event)
  ///
  /// Performs the action that happens when you press the KeyEvent\#KEYCODE_DEL key in
  /// a TextView.  If there is a selection, deletes the selection; otherwise,
  /// deletes the character before the cursor, if any; ALT+DEL deletes everything on
  /// the line the cursor is on.
  ///@return true if anything was deleted; false otherwise.
  bool backspace(view_.View view, editable_.Editable content, int keyCode,
          keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_backspace, jni.JniType.booleanType, [
        view.reference,
        content.reference,
        keyCode,
        event.reference
      ]).boolean;

  static final _id_forwardDelete = jniAccessors.getMethodIDOf(
      _classRef,
      "forwardDelete",
      "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z");

  /// from: public boolean forwardDelete(android.view.View view, android.text.Editable content, int keyCode, android.view.KeyEvent event)
  ///
  /// Performs the action that happens when you press the KeyEvent\#KEYCODE_FORWARD_DEL
  /// key in a TextView.  If there is a selection, deletes the selection; otherwise,
  /// deletes the character before the cursor, if any; ALT+FORWARD_DEL deletes everything on
  /// the line the cursor is on.
  ///@return true if anything was deleted; false otherwise.
  bool forwardDelete(view_.View view, editable_.Editable content, int keyCode,
          keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_forwardDelete, jni.JniType.booleanType, [
        view.reference,
        content.reference,
        keyCode,
        event.reference
      ]).boolean;

  static final _id_onKeyDown = jniAccessors.getMethodIDOf(
      _classRef,
      "onKeyDown",
      "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyDown(android.view.View view, android.text.Editable content, int keyCode, android.view.KeyEvent event)
  bool onKeyDown(view_.View view, editable_.Editable content, int keyCode,
          keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onKeyDown, jni.JniType.booleanType, [
        view.reference,
        content.reference,
        keyCode,
        event.reference
      ]).boolean;

  static final _id_onKeyOther = jniAccessors.getMethodIDOf(
      _classRef,
      "onKeyOther",
      "(Landroid/view/View;Landroid/text/Editable;Landroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyOther(android.view.View view, android.text.Editable content, android.view.KeyEvent event)
  ///
  /// Base implementation handles ACTION_MULTIPLE KEYCODE_UNKNOWN by inserting
  /// the event's text into the content.
  bool onKeyOther(view_.View view, editable_.Editable content,
          keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onKeyOther,
          jni.JniType.booleanType,
          [view.reference, content.reference, event.reference]).boolean;
}
