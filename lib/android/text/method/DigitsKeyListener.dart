// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "NumberKeyListener.dart" as numberkeylistener_;

import "../Spanned.dart" as spanned_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.DigitsKeyListener
///
/// For digits-only text entry
///
///
/// As for all implementations of KeyListener, this class is only concerned
/// with hardware keyboards.  Software input methods have no obligation to trigger
/// the methods in this class.
class DigitsKeyListener extends numberkeylistener_.NumberKeyListener {
  static final _classRef =
      jniAccessors.getClassOf("android/text/method/DigitsKeyListener");
  DigitsKeyListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Allocates a DigitsKeyListener that accepts the ASCII digits 0 through 9.
  ///@deprecated Use \#DigitsKeyListener(Locale) instead.
  DigitsKeyListener()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ZZ)V");

  /// from: public void <init>(boolean sign, boolean decimal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Allocates a DigitsKeyListener that accepts the ASCII digits 0 through 9, plus the ASCII plus
  /// or minus sign (only at the beginning) and/or the ASCII period ('.') as the decimal point
  /// (only one per field) if specified.
  ///@deprecated Use \#DigitsKeyListener(Locale, boolean, boolean) instead.
  DigitsKeyListener.ctor1(bool sign, bool decimal)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [sign, decimal]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/Locale;)V");

  /// from: public void <init>(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param locale This value may be {@code null}.
  DigitsKeyListener.ctor2(jni.JniObject locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [locale.reference]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/util/Locale;ZZ)V");

  /// from: public void <init>(java.util.Locale locale, boolean sign, boolean decimal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param locale This value may be {@code null}.
  DigitsKeyListener.ctor3(jni.JniObject locale, bool sign, bool decimal)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor3, [locale.reference, sign, decimal]).object);

  static final _id_getAcceptedChars =
      jniAccessors.getMethodIDOf(_classRef, "getAcceptedChars", "()[C");

  /// from: protected char[] getAcceptedChars()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAcceptedChars() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAcceptedChars, jni.JniType.objectType, []).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getInstance", "()Landroid/text/method/DigitsKeyListener;");

  /// from: static public android.text.method.DigitsKeyListener getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9.
  ///@deprecated Use \#getInstance(Locale) instead.
  ///@return This value will never be {@code null}.
  static DigitsKeyListener getInstance() =>
      DigitsKeyListener.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getInstance, jni.JniType.objectType, []).object);

  static final _id_getInstance1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getInstance", "(ZZ)Landroid/text/method/DigitsKeyListener;");

  /// from: static public android.text.method.DigitsKeyListener getInstance(boolean sign, boolean decimal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9, plus the ASCII plus
  /// or minus sign (only at the beginning) and/or the ASCII period ('.') as the decimal point
  /// (only one per field) if specified.
  ///@deprecated Use \#getInstance(Locale, boolean, boolean) instead.
  ///@return This value will never be {@code null}.
  static DigitsKeyListener getInstance1(bool sign, bool decimal) =>
      DigitsKeyListener.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getInstance1, jni.JniType.objectType, [sign, decimal]).object);

  static final _id_getInstance2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Ljava/util/Locale;)Landroid/text/method/DigitsKeyListener;");

  /// from: static public android.text.method.DigitsKeyListener getInstance(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a DigitsKeyListener that accepts the locale-appropriate digits.
  ///@param locale This value may be {@code null}.
  ///@return This value will never be {@code null}.
  static DigitsKeyListener getInstance2(jni.JniObject locale) =>
      DigitsKeyListener.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getInstance2, jni.JniType.objectType, [locale.reference]).object);

  static final _id_getInstance3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Ljava/util/Locale;ZZ)Landroid/text/method/DigitsKeyListener;");

  /// from: static public android.text.method.DigitsKeyListener getInstance(java.util.Locale locale, boolean sign, boolean decimal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a DigitsKeyListener that accepts the locale-appropriate digits, plus the
  /// locale-appropriate plus or minus sign (only at the beginning) and/or the locale-appropriate
  /// decimal separator (only one per field) if specified.
  ///@param locale This value may be {@code null}.
  ///@return This value will never be {@code null}.
  static DigitsKeyListener getInstance3(
          jni.JniObject locale, bool sign, bool decimal) =>
      DigitsKeyListener.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance3,
          jni.JniType.objectType,
          [locale.reference, sign, decimal]).object);

  static final _id_getInstance4 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Ljava/lang/String;)Landroid/text/method/DigitsKeyListener;");

  /// from: static public android.text.method.DigitsKeyListener getInstance(java.lang.String accepted)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a DigitsKeyListener that accepts only the characters
  /// that appear in the specified String.  Note that not all characters
  /// may be available on every keyboard.
  ///@param accepted This value must never be {@code null}.
  ///@return This value will never be {@code null}.
  static DigitsKeyListener getInstance4(jni.JniString accepted) =>
      DigitsKeyListener.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance4,
          jni.JniType.objectType,
          [accepted.reference]).object);

  static final _id_getInputType =
      jniAccessors.getMethodIDOf(_classRef, "getInputType", "()I");

  /// from: public int getInputType()
  ///
  /// Returns the input type for the listener.
  int getInputType() => jniAccessors.callMethodWithArgs(
      reference, _id_getInputType, jni.JniType.intType, []).integer;

  static final _id_filter = jniAccessors.getMethodIDOf(_classRef, "filter",
      "(Ljava/lang/CharSequence;IILandroid/text/Spanned;II)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence filter(java.lang.CharSequence source, int start, int end, android.text.Spanned dest, int dstart, int dend)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject filter(jni.JniObject source, int start, int end,
          spanned_.Spanned dest, int dstart, int dend) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_filter,
          jni.JniType.objectType,
          [source.reference, start, end, dest.reference, dstart, dend]).object);
}
