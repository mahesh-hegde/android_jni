// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../view/View.dart" as view_;

import "../Editable.dart" as editable_;

import "../../graphics/Rect.dart" as rect_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.PasswordTransformationMethod
class PasswordTransformationMethod extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/text/method/PasswordTransformationMethod");
  PasswordTransformationMethod.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PasswordTransformationMethod()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getTransformation = jniAccessors.getMethodIDOf(
      _classRef,
      "getTransformation",
      "(Ljava/lang/CharSequence;Landroid/view/View;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getTransformation(java.lang.CharSequence source, android.view.View view)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getTransformation(jni.JniObject source, view_.View view) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getTransformation,
          jni.JniType.objectType,
          [source.reference, view.reference]).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInstance", "()Landroid/text/method/PasswordTransformationMethod;");

  /// from: static public android.text.method.PasswordTransformationMethod getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static PasswordTransformationMethod getInstance() =>
      PasswordTransformationMethod.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef, _id_getInstance, jni.JniType.objectType, []).object);

  static final _id_beforeTextChanged = jniAccessors.getMethodIDOf(
      _classRef, "beforeTextChanged", "(Ljava/lang/CharSequence;III)V");

  /// from: public void beforeTextChanged(java.lang.CharSequence s, int start, int count, int after)
  void beforeTextChanged(jni.JniObject s, int start, int count, int after) =>
      jniAccessors.callMethodWithArgs(reference, _id_beforeTextChanged,
          jni.JniType.voidType, [s.reference, start, count, after]).check();

  static final _id_onTextChanged = jniAccessors.getMethodIDOf(
      _classRef, "onTextChanged", "(Ljava/lang/CharSequence;III)V");

  /// from: public void onTextChanged(java.lang.CharSequence s, int start, int before, int count)
  void onTextChanged(jni.JniObject s, int start, int before, int count) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTextChanged,
          jni.JniType.voidType, [s.reference, start, before, count]).check();

  static final _id_afterTextChanged = jniAccessors.getMethodIDOf(
      _classRef, "afterTextChanged", "(Landroid/text/Editable;)V");

  /// from: public void afterTextChanged(android.text.Editable s)
  void afterTextChanged(editable_.Editable s) =>
      jniAccessors.callMethodWithArgs(reference, _id_afterTextChanged,
          jni.JniType.voidType, [s.reference]).check();

  static final _id_onFocusChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onFocusChanged",
      "(Landroid/view/View;Ljava/lang/CharSequence;ZILandroid/graphics/Rect;)V");

  /// from: public void onFocusChanged(android.view.View view, java.lang.CharSequence sourceText, boolean focused, int direction, android.graphics.Rect previouslyFocusedRect)
  void onFocusChanged(view_.View view, jni.JniObject sourceText, bool focused,
          int direction, rect_.Rect previouslyFocusedRect) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onFocusChanged, jni.JniType.voidType, [
        view.reference,
        sourceText.reference,
        focused,
        direction,
        previouslyFocusedRect.reference
      ]).check();
}
