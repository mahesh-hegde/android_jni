// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BaseKeyListener.dart" as basekeylistener_;

import "../../view/View.dart" as view_;

import "../Editable.dart" as editable_;

import "../../view/KeyEvent.dart" as keyevent_;

import "../Spannable.dart" as spannable_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.TextKeyListener
///
/// This is the key listener for typing normal text.  It delegates to
/// other key listeners appropriate to the current keyboard and language.
///
///
/// As for all implementations of KeyListener, this class is only concerned
/// with hardware keyboards.  Software input methods have no obligation to trigger
/// the methods in this class.
class TextKeyListener extends basekeylistener_.BaseKeyListener {
  static final _classRef =
      jniAccessors.getClassOf("android/text/method/TextKeyListener");
  TextKeyListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/text/method/TextKeyListener\$Capitalize;Z)V");

  /// from: public void <init>(android.text.method.TextKeyListener.Capitalize cap, boolean autotext)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new TextKeyListener with the specified capitalization
  /// and correction properties.
  ///@param cap when, if ever, to automatically capitalize.
  ///@param autotext whether to automatically do spelling corrections.
  TextKeyListener.ctor1(TextKeyListener_Capitalize cap, bool autotext)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [cap.reference, autotext]).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(ZLandroid/text/method/TextKeyListener\$Capitalize;)Landroid/text/method/TextKeyListener;");

  /// from: static public android.text.method.TextKeyListener getInstance(boolean autotext, android.text.method.TextKeyListener.Capitalize cap)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a new or existing instance with the specified capitalization
  /// and correction properties.
  ///@param cap when, if ever, to automatically capitalize.
  ///@param autotext whether to automatically do spelling corrections.
  static TextKeyListener getInstance(
          bool autotext, TextKeyListener_Capitalize cap) =>
      TextKeyListener.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance,
          jni.JniType.objectType,
          [autotext, cap.reference]).object);

  static final _id_getInstance1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getInstance", "()Landroid/text/method/TextKeyListener;");

  /// from: static public android.text.method.TextKeyListener getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a new or existing instance with no automatic capitalization
  /// or correction.
  static TextKeyListener getInstance1() =>
      TextKeyListener.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getInstance1, jni.JniType.objectType, []).object);

  static final _id_shouldCap = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "shouldCap",
      "(Landroid/text/method/TextKeyListener\$Capitalize;Ljava/lang/CharSequence;I)Z");

  /// from: static public boolean shouldCap(android.text.method.TextKeyListener.Capitalize cap, java.lang.CharSequence cs, int off)
  ///
  /// Returns whether it makes sense to automatically capitalize at the
  /// specified position in the specified text, with the specified rules.
  ///@param cap the capitalization rules to consider.
  ///@param cs the text in which an insertion is being made.
  ///@param off the offset into that text where the insertion is being made.
  ///@return whether the character being inserted should be capitalized.
  static bool shouldCap(
          TextKeyListener_Capitalize cap, jni.JniObject cs, int off) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_shouldCap,
          jni.JniType.booleanType, [cap.reference, cs.reference, off]).boolean;

  static final _id_getInputType =
      jniAccessors.getMethodIDOf(_classRef, "getInputType", "()I");

  /// from: public int getInputType()
  int getInputType() => jniAccessors.callMethodWithArgs(
      reference, _id_getInputType, jni.JniType.intType, []).integer;

  static final _id_onKeyDown = jniAccessors.getMethodIDOf(
      _classRef,
      "onKeyDown",
      "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyDown(android.view.View view, android.text.Editable content, int keyCode, android.view.KeyEvent event)
  bool onKeyDown(view_.View view, editable_.Editable content, int keyCode,
          keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onKeyDown, jni.JniType.booleanType, [
        view.reference,
        content.reference,
        keyCode,
        event.reference
      ]).boolean;

  static final _id_onKeyUp1 = jniAccessors.getMethodIDOf(_classRef, "onKeyUp",
      "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyUp(android.view.View view, android.text.Editable content, int keyCode, android.view.KeyEvent event)
  bool onKeyUp1(view_.View view, editable_.Editable content, int keyCode,
          keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onKeyUp1, jni.JniType.booleanType, [
        view.reference,
        content.reference,
        keyCode,
        event.reference
      ]).boolean;

  static final _id_onKeyOther = jniAccessors.getMethodIDOf(
      _classRef,
      "onKeyOther",
      "(Landroid/view/View;Landroid/text/Editable;Landroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyOther(android.view.View view, android.text.Editable content, android.view.KeyEvent event)
  bool onKeyOther(view_.View view, editable_.Editable content,
          keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onKeyOther,
          jni.JniType.booleanType,
          [view.reference, content.reference, event.reference]).boolean;

  static final _id_clear = jniAccessors.getStaticMethodIDOf(
      _classRef, "clear", "(Landroid/text/Editable;)V");

  /// from: static public void clear(android.text.Editable e)
  ///
  /// Clear all the input state (autotext, autocap, multitap, undo)
  /// from the specified Editable, going beyond Editable.clear(), which
  /// just clears the text but not the input state.
  ///@param e the buffer whose text and state are to be cleared.
  static void clear(editable_.Editable e) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_clear, jni.JniType.voidType, [e.reference]).check();

  static final _id_onSpanAdded = jniAccessors.getMethodIDOf(_classRef,
      "onSpanAdded", "(Landroid/text/Spannable;Ljava/lang/Object;II)V");

  /// from: public void onSpanAdded(android.text.Spannable s, java.lang.Object what, int start, int end)
  void onSpanAdded(
          spannable_.Spannable s, jni.JniObject what, int start, int end) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onSpanAdded,
          jni.JniType.voidType,
          [s.reference, what.reference, start, end]).check();

  static final _id_onSpanRemoved = jniAccessors.getMethodIDOf(_classRef,
      "onSpanRemoved", "(Landroid/text/Spannable;Ljava/lang/Object;II)V");

  /// from: public void onSpanRemoved(android.text.Spannable s, java.lang.Object what, int start, int end)
  void onSpanRemoved(
          spannable_.Spannable s, jni.JniObject what, int start, int end) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onSpanRemoved,
          jni.JniType.voidType,
          [s.reference, what.reference, start, end]).check();

  static final _id_onSpanChanged = jniAccessors.getMethodIDOf(_classRef,
      "onSpanChanged", "(Landroid/text/Spannable;Ljava/lang/Object;IIII)V");

  /// from: public void onSpanChanged(android.text.Spannable s, java.lang.Object what, int start, int end, int st, int en)
  void onSpanChanged(spannable_.Spannable s, jni.JniObject what, int start,
          int end, int st, int en) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onSpanChanged,
          jni.JniType.voidType,
          [s.reference, what.reference, start, end, st, en]).check();

  static final _id_release =
      jniAccessors.getMethodIDOf(_classRef, "release", "()V");

  /// from: public void release()
  void release() => jniAccessors.callMethodWithArgs(
      reference, _id_release, jni.JniType.voidType, []).check();
}

/// from: android.text.method.TextKeyListener$Capitalize
class TextKeyListener_Capitalize extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/text/method/TextKeyListener\$Capitalize");
  TextKeyListener_Capitalize.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(_classRef,
      "values", "()[Landroid/text/method/TextKeyListener\$Capitalize;");

  /// from: static public android.text.method.TextKeyListener.Capitalize[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/text/method/TextKeyListener\$Capitalize;");

  /// from: static public android.text.method.TextKeyListener.Capitalize valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TextKeyListener_Capitalize valueOf(jni.JniString name) =>
      TextKeyListener_Capitalize.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);
}
