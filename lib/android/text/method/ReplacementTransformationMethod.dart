// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../view/View.dart" as view_;

import "../../graphics/Rect.dart" as rect_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.ReplacementTransformationMethod
///
/// This transformation method causes the characters in the \#getOriginal
/// array to be replaced by the corresponding characters in the
/// \#getReplacement array.
class ReplacementTransformationMethod extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/text/method/ReplacementTransformationMethod");
  ReplacementTransformationMethod.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ReplacementTransformationMethod()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getOriginal =
      jniAccessors.getMethodIDOf(_classRef, "getOriginal", "()[C");

  /// from: protected abstract char[] getOriginal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the list of characters that are to be replaced by other
  /// characters when displayed.
  jni.JniObject getOriginal() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getOriginal, jni.JniType.objectType, []).object);

  static final _id_getReplacement =
      jniAccessors.getMethodIDOf(_classRef, "getReplacement", "()[C");

  /// from: protected abstract char[] getReplacement()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a parallel array of replacement characters for the ones
  /// that are to be replaced.
  jni.JniObject getReplacement() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getReplacement, jni.JniType.objectType, []).object);

  static final _id_getTransformation = jniAccessors.getMethodIDOf(
      _classRef,
      "getTransformation",
      "(Ljava/lang/CharSequence;Landroid/view/View;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getTransformation(java.lang.CharSequence source, android.view.View v)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a CharSequence that will mirror the contents of the
  /// source CharSequence but with the characters in \#getOriginal
  /// replaced by ones from \#getReplacement.
  jni.JniObject getTransformation(jni.JniObject source, view_.View v) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getTransformation,
          jni.JniType.objectType,
          [source.reference, v.reference]).object);

  static final _id_onFocusChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onFocusChanged",
      "(Landroid/view/View;Ljava/lang/CharSequence;ZILandroid/graphics/Rect;)V");

  /// from: public void onFocusChanged(android.view.View view, java.lang.CharSequence sourceText, boolean focused, int direction, android.graphics.Rect previouslyFocusedRect)
  void onFocusChanged(view_.View view, jni.JniObject sourceText, bool focused,
          int direction, rect_.Rect previouslyFocusedRect) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onFocusChanged, jni.JniType.voidType, [
        view.reference,
        sourceText.reference,
        focused,
        direction,
        previouslyFocusedRect.reference
      ]).check();
}
