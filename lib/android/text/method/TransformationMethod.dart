// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../view/View.dart" as view_;

import "../../graphics/Rect.dart" as rect_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.TransformationMethod
///
/// TextView uses TransformationMethods to do things like replacing the
/// characters of passwords with dots, or keeping the newline characters
/// from causing line breaks in single-line text fields.
class TransformationMethod extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/method/TransformationMethod");
  TransformationMethod.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getTransformation = jniAccessors.getMethodIDOf(
      _classRef,
      "getTransformation",
      "(Ljava/lang/CharSequence;Landroid/view/View;)Ljava/lang/CharSequence;");

  /// from: public abstract java.lang.CharSequence getTransformation(java.lang.CharSequence source, android.view.View view)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a CharSequence that is a transformation of the source text --
  /// for example, replacing each character with a dot in a password field.
  /// Beware that the returned text must be exactly the same length as
  /// the source text, and that if the source text is Editable, the returned
  /// text must mirror it dynamically instead of doing a one-time copy.
  jni.JniObject getTransformation(jni.JniObject source, view_.View view) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getTransformation,
          jni.JniType.objectType,
          [source.reference, view.reference]).object);

  static final _id_onFocusChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onFocusChanged",
      "(Landroid/view/View;Ljava/lang/CharSequence;ZILandroid/graphics/Rect;)V");

  /// from: public abstract void onFocusChanged(android.view.View view, java.lang.CharSequence sourceText, boolean focused, int direction, android.graphics.Rect previouslyFocusedRect)
  ///
  /// This method is called when the TextView that uses this
  /// TransformationMethod gains or loses focus.
  void onFocusChanged(view_.View view, jni.JniObject sourceText, bool focused,
          int direction, rect_.Rect previouslyFocusedRect) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onFocusChanged, jni.JniType.voidType, [
        view.reference,
        sourceText.reference,
        focused,
        direction,
        previouslyFocusedRect.reference
      ]).check();
}
