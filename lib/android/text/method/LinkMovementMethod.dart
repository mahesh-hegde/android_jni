// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ScrollingMovementMethod.dart" as scrollingmovementmethod_;

import "../../widget/TextView.dart" as textview_;

import "../Spannable.dart" as spannable_;

import "../../view/KeyEvent.dart" as keyevent_;

import "../../view/MotionEvent.dart" as motionevent_;

import "MovementMethod.dart" as movementmethod_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.LinkMovementMethod
///
/// A movement method that traverses links in the text buffer and scrolls if necessary.
/// Supports clicking on links with DPad Center or Enter.
class LinkMovementMethod
    extends scrollingmovementmethod_.ScrollingMovementMethod {
  static final _classRef =
      jniAccessors.getClassOf("android/text/method/LinkMovementMethod");
  LinkMovementMethod.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  LinkMovementMethod()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_canSelectArbitrarily1 =
      jniAccessors.getMethodIDOf(_classRef, "canSelectArbitrarily", "()Z");

  /// from: public boolean canSelectArbitrarily()
  bool canSelectArbitrarily1() => jniAccessors.callMethodWithArgs(reference,
      _id_canSelectArbitrarily1, jni.JniType.booleanType, []).boolean;

  static final _id_handleMovementKey1 = jniAccessors.getMethodIDOf(
      _classRef,
      "handleMovementKey",
      "(Landroid/widget/TextView;Landroid/text/Spannable;IILandroid/view/KeyEvent;)Z");

  /// from: protected boolean handleMovementKey(android.widget.TextView widget, android.text.Spannable buffer, int keyCode, int movementMetaState, android.view.KeyEvent event)
  bool handleMovementKey1(
          textview_.TextView widget,
          spannable_.Spannable buffer,
          int keyCode,
          int movementMetaState,
          keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_handleMovementKey1, jni.JniType.booleanType, [
        widget.reference,
        buffer.reference,
        keyCode,
        movementMetaState,
        event.reference
      ]).boolean;

  static final _id_up = jniAccessors.getMethodIDOf(
      _classRef, "up", "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean up(android.widget.TextView widget, android.text.Spannable buffer)
  bool up(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_up,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_down = jniAccessors.getMethodIDOf(_classRef, "down",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean down(android.widget.TextView widget, android.text.Spannable buffer)
  bool down(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_down,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_left = jniAccessors.getMethodIDOf(_classRef, "left",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean left(android.widget.TextView widget, android.text.Spannable buffer)
  bool left(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_left,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_right = jniAccessors.getMethodIDOf(_classRef, "right",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean right(android.widget.TextView widget, android.text.Spannable buffer)
  bool right(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_right,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_onTouchEvent = jniAccessors.getMethodIDOf(
      _classRef,
      "onTouchEvent",
      "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTouchEvent(android.widget.TextView widget, android.text.Spannable buffer, android.view.MotionEvent event)
  bool onTouchEvent(textview_.TextView widget, spannable_.Spannable buffer,
          motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onTouchEvent,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference, event.reference]).boolean;

  static final _id_initialize1 = jniAccessors.getMethodIDOf(_classRef,
      "initialize", "(Landroid/widget/TextView;Landroid/text/Spannable;)V");

  /// from: public void initialize(android.widget.TextView widget, android.text.Spannable text)
  void initialize1(textview_.TextView widget, spannable_.Spannable text) =>
      jniAccessors.callMethodWithArgs(reference, _id_initialize1,
          jni.JniType.voidType, [widget.reference, text.reference]).check();

  static final _id_onTakeFocus = jniAccessors.getMethodIDOf(_classRef,
      "onTakeFocus", "(Landroid/widget/TextView;Landroid/text/Spannable;I)V");

  /// from: public void onTakeFocus(android.widget.TextView view, android.text.Spannable text, int dir)
  void onTakeFocus(
          textview_.TextView view, spannable_.Spannable text, int dir) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTakeFocus,
          jni.JniType.voidType, [view.reference, text.reference, dir]).check();

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getInstance", "()Landroid/text/method/MovementMethod;");

  /// from: static public android.text.method.MovementMethod getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static movementmethod_.MovementMethod getInstance() =>
      movementmethod_.MovementMethod.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef, _id_getInstance, jni.JniType.objectType, []).object);
}
