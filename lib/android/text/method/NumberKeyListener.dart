// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BaseKeyListener.dart" as basekeylistener_;

import "../../view/KeyEvent.dart" as keyevent_;

import "../Spannable.dart" as spannable_;

import "../Spanned.dart" as spanned_;

import "../../view/View.dart" as view_;

import "../Editable.dart" as editable_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.NumberKeyListener
///
/// For numeric text entry
///
///
/// As for all implementations of KeyListener, this class is only concerned
/// with hardware keyboards.  Software input methods have no obligation to trigger
/// the methods in this class.
class NumberKeyListener extends basekeylistener_.BaseKeyListener {
  static final _classRef =
      jniAccessors.getClassOf("android/text/method/NumberKeyListener");
  NumberKeyListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  NumberKeyListener()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getAcceptedChars =
      jniAccessors.getMethodIDOf(_classRef, "getAcceptedChars", "()[C");

  /// from: protected abstract char[] getAcceptedChars()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// You can say which characters you can accept.
  ///@return This value will never be {@code null}.
  jni.JniObject getAcceptedChars() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAcceptedChars, jni.JniType.objectType, []).object);

  static final _id_lookup = jniAccessors.getMethodIDOf(_classRef, "lookup",
      "(Landroid/view/KeyEvent;Landroid/text/Spannable;)I");

  /// from: protected int lookup(android.view.KeyEvent event, android.text.Spannable content)
  int lookup(keyevent_.KeyEvent event, spannable_.Spannable content) =>
      jniAccessors.callMethodWithArgs(reference, _id_lookup,
          jni.JniType.intType, [event.reference, content.reference]).integer;

  static final _id_filter = jniAccessors.getMethodIDOf(_classRef, "filter",
      "(Ljava/lang/CharSequence;IILandroid/text/Spanned;II)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence filter(java.lang.CharSequence source, int start, int end, android.text.Spanned dest, int dstart, int dend)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject filter(jni.JniObject source, int start, int end,
          spanned_.Spanned dest, int dstart, int dend) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_filter,
          jni.JniType.objectType,
          [source.reference, start, end, dest.reference, dstart, dend]).object);

  static final _id_ok =
      jniAccessors.getStaticMethodIDOf(_classRef, "ok", "([CC)Z");

  /// from: static protected boolean ok(char[] accept, char c)
  static bool ok(jni.JniObject accept, int c) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_ok,
          jni.JniType.booleanType, [accept.reference, c]).boolean;

  static final _id_onKeyDown = jniAccessors.getMethodIDOf(
      _classRef,
      "onKeyDown",
      "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyDown(android.view.View view, android.text.Editable content, int keyCode, android.view.KeyEvent event)
  bool onKeyDown(view_.View view, editable_.Editable content, int keyCode,
          keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onKeyDown, jni.JniType.booleanType, [
        view.reference,
        content.reference,
        keyCode,
        event.reference
      ]).boolean;
}
