// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "NumberKeyListener.dart" as numberkeylistener_;

import "../../view/KeyEvent.dart" as keyevent_;

import "../Spannable.dart" as spannable_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.DialerKeyListener
///
/// For dialing-only text entry
///
///
/// As for all implementations of KeyListener, this class is only concerned
/// with hardware keyboards.  Software input methods have no obligation to trigger
/// the methods in this class.
class DialerKeyListener extends numberkeylistener_.NumberKeyListener {
  static final _classRef =
      jniAccessors.getClassOf("android/text/method/DialerKeyListener");
  DialerKeyListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CHARACTERS =
      jniAccessors.getStaticFieldIDOf(_classRef, "CHARACTERS", "[C");

  /// from: static public final char[] CHARACTERS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The characters that are used.
  ///@see KeyEvent\#getMatch
  ///@see \#getAcceptedChars
  static jni.JniObject get CHARACTERS => jni.JniObject.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CHARACTERS, jni.JniType.objectType)
      .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  DialerKeyListener()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getAcceptedChars =
      jniAccessors.getMethodIDOf(_classRef, "getAcceptedChars", "()[C");

  /// from: protected char[] getAcceptedChars()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAcceptedChars() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAcceptedChars, jni.JniType.objectType, []).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getInstance", "()Landroid/text/method/DialerKeyListener;");

  /// from: static public android.text.method.DialerKeyListener getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static DialerKeyListener getInstance() =>
      DialerKeyListener.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getInstance, jni.JniType.objectType, []).object);

  static final _id_getInputType =
      jniAccessors.getMethodIDOf(_classRef, "getInputType", "()I");

  /// from: public int getInputType()
  int getInputType() => jniAccessors.callMethodWithArgs(
      reference, _id_getInputType, jni.JniType.intType, []).integer;

  static final _id_lookup = jniAccessors.getMethodIDOf(_classRef, "lookup",
      "(Landroid/view/KeyEvent;Landroid/text/Spannable;)I");

  /// from: protected int lookup(android.view.KeyEvent event, android.text.Spannable content)
  ///
  /// Overrides the superclass's lookup method to prefer the number field
  /// from the KeyEvent.
  int lookup(keyevent_.KeyEvent event, spannable_.Spannable content) =>
      jniAccessors.callMethodWithArgs(reference, _id_lookup,
          jni.JniType.intType, [event.reference, content.reference]).integer;
}
