// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ReplacementTransformationMethod.dart"
    as replacementtransformationmethod_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.SingleLineTransformationMethod
///
/// This transformation method causes any newline characters (\n) to be
/// displayed as spaces instead of causing line breaks, and causes
/// carriage return characters (\r) to have no appearance.
class SingleLineTransformationMethod
    extends replacementtransformationmethod_.ReplacementTransformationMethod {
  static final _classRef = jniAccessors
      .getClassOf("android/text/method/SingleLineTransformationMethod");
  SingleLineTransformationMethod.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SingleLineTransformationMethod()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getOriginal =
      jniAccessors.getMethodIDOf(_classRef, "getOriginal", "()[C");

  /// from: protected char[] getOriginal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The characters to be replaced are \n and \r.
  jni.JniObject getOriginal() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getOriginal, jni.JniType.objectType, []).object);

  static final _id_getReplacement =
      jniAccessors.getMethodIDOf(_classRef, "getReplacement", "()[C");

  /// from: protected char[] getReplacement()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The character \n is replaced with is space;
  /// the character \r is replaced with is FEFF (zero width space).
  jni.JniObject getReplacement() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getReplacement, jni.JniType.objectType, []).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInstance", "()Landroid/text/method/SingleLineTransformationMethod;");

  /// from: static public android.text.method.SingleLineTransformationMethod getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static SingleLineTransformationMethod getInstance() =>
      SingleLineTransformationMethod.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef, _id_getInstance, jni.JniType.objectType, []).object);
}
