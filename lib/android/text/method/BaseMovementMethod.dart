// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../widget/TextView.dart" as textview_;

import "../Spannable.dart" as spannable_;

import "../../view/KeyEvent.dart" as keyevent_;

import "../../view/MotionEvent.dart" as motionevent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.BaseMovementMethod
///
/// Base classes for movement methods.
class BaseMovementMethod extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/method/BaseMovementMethod");
  BaseMovementMethod.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BaseMovementMethod()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_canSelectArbitrarily =
      jniAccessors.getMethodIDOf(_classRef, "canSelectArbitrarily", "()Z");

  /// from: public boolean canSelectArbitrarily()
  bool canSelectArbitrarily() => jniAccessors.callMethodWithArgs(
      reference, _id_canSelectArbitrarily, jni.JniType.booleanType, []).boolean;

  static final _id_initialize = jniAccessors.getMethodIDOf(_classRef,
      "initialize", "(Landroid/widget/TextView;Landroid/text/Spannable;)V");

  /// from: public void initialize(android.widget.TextView widget, android.text.Spannable text)
  void initialize(textview_.TextView widget, spannable_.Spannable text) =>
      jniAccessors.callMethodWithArgs(reference, _id_initialize,
          jni.JniType.voidType, [widget.reference, text.reference]).check();

  static final _id_onKeyDown = jniAccessors.getMethodIDOf(
      _classRef,
      "onKeyDown",
      "(Landroid/widget/TextView;Landroid/text/Spannable;ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyDown(android.widget.TextView widget, android.text.Spannable text, int keyCode, android.view.KeyEvent event)
  bool onKeyDown(textview_.TextView widget, spannable_.Spannable text,
          int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onKeyDown,
          jni.JniType.booleanType,
          [widget.reference, text.reference, keyCode, event.reference]).boolean;

  static final _id_onKeyOther = jniAccessors.getMethodIDOf(
      _classRef,
      "onKeyOther",
      "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyOther(android.widget.TextView widget, android.text.Spannable text, android.view.KeyEvent event)
  bool onKeyOther(textview_.TextView widget, spannable_.Spannable text,
          keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onKeyOther,
          jni.JniType.booleanType,
          [widget.reference, text.reference, event.reference]).boolean;

  static final _id_onKeyUp = jniAccessors.getMethodIDOf(_classRef, "onKeyUp",
      "(Landroid/widget/TextView;Landroid/text/Spannable;ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyUp(android.widget.TextView widget, android.text.Spannable text, int keyCode, android.view.KeyEvent event)
  bool onKeyUp(textview_.TextView widget, spannable_.Spannable text,
          int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onKeyUp,
          jni.JniType.booleanType,
          [widget.reference, text.reference, keyCode, event.reference]).boolean;

  static final _id_onTakeFocus = jniAccessors.getMethodIDOf(_classRef,
      "onTakeFocus", "(Landroid/widget/TextView;Landroid/text/Spannable;I)V");

  /// from: public void onTakeFocus(android.widget.TextView widget, android.text.Spannable text, int direction)
  void onTakeFocus(textview_.TextView widget, spannable_.Spannable text,
          int direction) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onTakeFocus,
          jni.JniType.voidType,
          [widget.reference, text.reference, direction]).check();

  static final _id_onTouchEvent = jniAccessors.getMethodIDOf(
      _classRef,
      "onTouchEvent",
      "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTouchEvent(android.widget.TextView widget, android.text.Spannable text, android.view.MotionEvent event)
  bool onTouchEvent(textview_.TextView widget, spannable_.Spannable text,
          motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onTouchEvent,
          jni.JniType.booleanType,
          [widget.reference, text.reference, event.reference]).boolean;

  static final _id_onTrackballEvent = jniAccessors.getMethodIDOf(
      _classRef,
      "onTrackballEvent",
      "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTrackballEvent(android.widget.TextView widget, android.text.Spannable text, android.view.MotionEvent event)
  bool onTrackballEvent(textview_.TextView widget, spannable_.Spannable text,
          motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onTrackballEvent,
          jni.JniType.booleanType,
          [widget.reference, text.reference, event.reference]).boolean;

  static final _id_onGenericMotionEvent = jniAccessors.getMethodIDOf(
      _classRef,
      "onGenericMotionEvent",
      "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z");

  /// from: public boolean onGenericMotionEvent(android.widget.TextView widget, android.text.Spannable text, android.view.MotionEvent event)
  bool onGenericMotionEvent(textview_.TextView widget,
          spannable_.Spannable text, motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onGenericMotionEvent,
          jni.JniType.booleanType,
          [widget.reference, text.reference, event.reference]).boolean;

  static final _id_getMovementMetaState = jniAccessors.getMethodIDOf(
      _classRef,
      "getMovementMetaState",
      "(Landroid/text/Spannable;Landroid/view/KeyEvent;)I");

  /// from: protected int getMovementMetaState(android.text.Spannable buffer, android.view.KeyEvent event)
  ///
  /// Gets the meta state used for movement using the modifiers tracked by the text
  /// buffer as well as those present in the key event.
  ///
  /// The movement meta state excludes the state of locked modifiers or the SHIFT key
  /// since they are not used by movement actions (but they may be used for selection).
  ///@param buffer The text buffer.
  ///@param event The key event.
  ///@return The keyboard meta states used for movement.
  int getMovementMetaState(
          spannable_.Spannable buffer, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_getMovementMetaState,
          jni.JniType.intType, [buffer.reference, event.reference]).integer;

  static final _id_handleMovementKey = jniAccessors.getMethodIDOf(
      _classRef,
      "handleMovementKey",
      "(Landroid/widget/TextView;Landroid/text/Spannable;IILandroid/view/KeyEvent;)Z");

  /// from: protected boolean handleMovementKey(android.widget.TextView widget, android.text.Spannable buffer, int keyCode, int movementMetaState, android.view.KeyEvent event)
  ///
  /// Performs a movement key action.
  /// The default implementation decodes the key down and invokes movement actions
  /// such as \#down and \#up.
  /// \#onKeyDown(TextView, Spannable, int, KeyEvent) calls this method once
  /// to handle an KeyEvent\#ACTION_DOWN.
  /// \#onKeyOther(TextView, Spannable, KeyEvent) calls this method repeatedly
  /// to handle each repetition of an KeyEvent\#ACTION_MULTIPLE.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@param event The key event.
  ///@param keyCode The key code.
  ///@param movementMetaState The keyboard meta states used for movement.
  ///@param event The key event.
  ///@return True if the event was handled.
  bool handleMovementKey(textview_.TextView widget, spannable_.Spannable buffer,
          int keyCode, int movementMetaState, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_handleMovementKey, jni.JniType.booleanType, [
        widget.reference,
        buffer.reference,
        keyCode,
        movementMetaState,
        event.reference
      ]).boolean;

  static final _id_left = jniAccessors.getMethodIDOf(_classRef, "left",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean left(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs a left movement action.
  /// Moves the cursor or scrolls left by one character.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool left(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_left,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_right = jniAccessors.getMethodIDOf(_classRef, "right",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean right(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs a right movement action.
  /// Moves the cursor or scrolls right by one character.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool right(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_right,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_up = jniAccessors.getMethodIDOf(
      _classRef, "up", "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean up(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs an up movement action.
  /// Moves the cursor or scrolls up by one line.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool up(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_up,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_down = jniAccessors.getMethodIDOf(_classRef, "down",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean down(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs a down movement action.
  /// Moves the cursor or scrolls down by one line.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool down(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_down,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_pageUp = jniAccessors.getMethodIDOf(_classRef, "pageUp",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean pageUp(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs a page-up movement action.
  /// Moves the cursor or scrolls up by one page.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool pageUp(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_pageUp,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_pageDown = jniAccessors.getMethodIDOf(_classRef, "pageDown",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean pageDown(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs a page-down movement action.
  /// Moves the cursor or scrolls down by one page.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool pageDown(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_pageDown,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_top = jniAccessors.getMethodIDOf(
      _classRef, "top", "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean top(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs a top movement action.
  /// Moves the cursor or scrolls to the top of the buffer.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool top(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_top,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_bottom = jniAccessors.getMethodIDOf(_classRef, "bottom",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean bottom(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs a bottom movement action.
  /// Moves the cursor or scrolls to the bottom of the buffer.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool bottom(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_bottom,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_lineStart = jniAccessors.getMethodIDOf(_classRef,
      "lineStart", "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean lineStart(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs a line-start movement action.
  /// Moves the cursor or scrolls to the start of the line.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool lineStart(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_lineStart,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_lineEnd = jniAccessors.getMethodIDOf(_classRef, "lineEnd",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean lineEnd(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs a line-end movement action.
  /// Moves the cursor or scrolls to the end of the line.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool lineEnd(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_lineEnd,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_home = jniAccessors.getMethodIDOf(_classRef, "home",
      "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean home(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs a home movement action.
  /// Moves the cursor or scrolls to the start of the line or to the top of the
  /// document depending on whether the insertion point is being moved or
  /// the document is being scrolled.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool home(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_home,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;

  static final _id_end = jniAccessors.getMethodIDOf(
      _classRef, "end", "(Landroid/widget/TextView;Landroid/text/Spannable;)Z");

  /// from: protected boolean end(android.widget.TextView widget, android.text.Spannable buffer)
  ///
  /// Performs an end movement action.
  /// Moves the cursor or scrolls to the start of the line or to the top of the
  /// document depending on whether the insertion point is being moved or
  /// the document is being scrolled.
  ///@param widget The text view.
  ///@param buffer The text buffer.
  ///@return True if the event was handled.
  bool end(textview_.TextView widget, spannable_.Spannable buffer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_end,
          jni.JniType.booleanType,
          [widget.reference, buffer.reference]).boolean;
}
