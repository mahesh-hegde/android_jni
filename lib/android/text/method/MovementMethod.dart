// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../widget/TextView.dart" as textview_;

import "../Spannable.dart" as spannable_;

import "../../view/KeyEvent.dart" as keyevent_;

import "../../view/MotionEvent.dart" as motionevent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.method.MovementMethod
///
/// Provides cursor positioning, scrolling and text selection functionality in a TextView.
///
/// The TextView delegates handling of key events, trackball motions and touches to
/// the movement method for purposes of content navigation.  The framework automatically
/// selects an appropriate movement method based on the content of the TextView.
///
///
/// This interface is intended for use by the framework; it should not be implemented
/// directly by applications.
///
///
class MovementMethod extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/method/MovementMethod");
  MovementMethod.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_initialize = jniAccessors.getMethodIDOf(_classRef,
      "initialize", "(Landroid/widget/TextView;Landroid/text/Spannable;)V");

  /// from: public abstract void initialize(android.widget.TextView widget, android.text.Spannable text)
  void initialize(textview_.TextView widget, spannable_.Spannable text) =>
      jniAccessors.callMethodWithArgs(reference, _id_initialize,
          jni.JniType.voidType, [widget.reference, text.reference]).check();

  static final _id_onKeyDown = jniAccessors.getMethodIDOf(
      _classRef,
      "onKeyDown",
      "(Landroid/widget/TextView;Landroid/text/Spannable;ILandroid/view/KeyEvent;)Z");

  /// from: public abstract boolean onKeyDown(android.widget.TextView widget, android.text.Spannable text, int keyCode, android.view.KeyEvent event)
  bool onKeyDown(textview_.TextView widget, spannable_.Spannable text,
          int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onKeyDown,
          jni.JniType.booleanType,
          [widget.reference, text.reference, keyCode, event.reference]).boolean;

  static final _id_onKeyUp = jniAccessors.getMethodIDOf(_classRef, "onKeyUp",
      "(Landroid/widget/TextView;Landroid/text/Spannable;ILandroid/view/KeyEvent;)Z");

  /// from: public abstract boolean onKeyUp(android.widget.TextView widget, android.text.Spannable text, int keyCode, android.view.KeyEvent event)
  bool onKeyUp(textview_.TextView widget, spannable_.Spannable text,
          int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onKeyUp,
          jni.JniType.booleanType,
          [widget.reference, text.reference, keyCode, event.reference]).boolean;

  static final _id_onKeyOther = jniAccessors.getMethodIDOf(
      _classRef,
      "onKeyOther",
      "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/KeyEvent;)Z");

  /// from: public abstract boolean onKeyOther(android.widget.TextView view, android.text.Spannable text, android.view.KeyEvent event)
  ///
  /// If the key listener wants to other kinds of key events, return true,
  /// otherwise return false and the caller (i.e. the widget host)
  /// will handle the key.
  bool onKeyOther(textview_.TextView view, spannable_.Spannable text,
          keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onKeyOther,
          jni.JniType.booleanType,
          [view.reference, text.reference, event.reference]).boolean;

  static final _id_onTakeFocus = jniAccessors.getMethodIDOf(_classRef,
      "onTakeFocus", "(Landroid/widget/TextView;Landroid/text/Spannable;I)V");

  /// from: public abstract void onTakeFocus(android.widget.TextView widget, android.text.Spannable text, int direction)
  void onTakeFocus(textview_.TextView widget, spannable_.Spannable text,
          int direction) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onTakeFocus,
          jni.JniType.voidType,
          [widget.reference, text.reference, direction]).check();

  static final _id_onTrackballEvent = jniAccessors.getMethodIDOf(
      _classRef,
      "onTrackballEvent",
      "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z");

  /// from: public abstract boolean onTrackballEvent(android.widget.TextView widget, android.text.Spannable text, android.view.MotionEvent event)
  bool onTrackballEvent(textview_.TextView widget, spannable_.Spannable text,
          motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onTrackballEvent,
          jni.JniType.booleanType,
          [widget.reference, text.reference, event.reference]).boolean;

  static final _id_onTouchEvent = jniAccessors.getMethodIDOf(
      _classRef,
      "onTouchEvent",
      "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z");

  /// from: public abstract boolean onTouchEvent(android.widget.TextView widget, android.text.Spannable text, android.view.MotionEvent event)
  bool onTouchEvent(textview_.TextView widget, spannable_.Spannable text,
          motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onTouchEvent,
          jni.JniType.booleanType,
          [widget.reference, text.reference, event.reference]).boolean;

  static final _id_onGenericMotionEvent = jniAccessors.getMethodIDOf(
      _classRef,
      "onGenericMotionEvent",
      "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z");

  /// from: public abstract boolean onGenericMotionEvent(android.widget.TextView widget, android.text.Spannable text, android.view.MotionEvent event)
  bool onGenericMotionEvent(textview_.TextView widget,
          spannable_.Spannable text, motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onGenericMotionEvent,
          jni.JniType.booleanType,
          [widget.reference, text.reference, event.reference]).boolean;

  static final _id_canSelectArbitrarily =
      jniAccessors.getMethodIDOf(_classRef, "canSelectArbitrarily", "()Z");

  /// from: public abstract boolean canSelectArbitrarily()
  ///
  /// Returns true if this movement method allows arbitrary selection
  /// of any text; false if it has no selection (like a movement method
  /// that only scrolls) or a constrained selection (for example
  /// limited to links.  The "Select All" menu item is disabled
  /// if arbitrary selection is not allowed.
  bool canSelectArbitrarily() => jniAccessors.callMethodWithArgs(
      reference, _id_canSelectArbitrarily, jni.JniType.booleanType, []).boolean;
}
