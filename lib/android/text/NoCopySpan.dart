// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.NoCopySpan
///
/// This interface should be added to a span object that should not be copied
/// into a new Spanned when performing a slice or copy operation on the original
/// Spanned it was placed in.
class NoCopySpan extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/text/NoCopySpan");
  NoCopySpan.fromRef(jni.JObject ref) : super.fromRef(ref);
}

/// from: android.text.NoCopySpan$Concrete
///
/// Convenience equivalent for when you would just want a new Object() for
/// a span but want it to be no-copy.  Use this instead.
class NoCopySpan_Concrete extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/NoCopySpan\$Concrete");
  NoCopySpan_Concrete.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  NoCopySpan_Concrete()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
