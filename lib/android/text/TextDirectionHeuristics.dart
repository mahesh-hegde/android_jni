// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "TextDirectionHeuristic.dart" as textdirectionheuristic_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.TextDirectionHeuristics
///
/// Some objects that implement TextDirectionHeuristic. Use these with
/// the BidiFormatter\#unicodeWrap unicodeWrap() methods in BidiFormatter.
/// Also notice that these direction heuristics correspond to the same types of constants
/// provided in the android.view.View class for android.view.View\#setTextDirection setTextDirection(), such as android.view.View\#TEXT_DIRECTION_RTL.
/// To support versions lower than android.os.Build.VERSION_CODES\#JELLY_BEAN_MR2,
/// you can use the support library's android.support.v4.text.TextDirectionHeuristicsCompat
/// class.
class TextDirectionHeuristics extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/TextDirectionHeuristics");
  TextDirectionHeuristics.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ANYRTL_LTR = jniAccessors.getStaticFieldIDOf(
      _classRef, "ANYRTL_LTR", "Landroid/text/TextDirectionHeuristic;");

  /// from: static public final android.text.TextDirectionHeuristic ANYRTL_LTR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// If the text contains any strong right to left non-format character, determines that the
  /// direction is right to left, falling back to left to right if it finds none.
  static textdirectionheuristic_.TextDirectionHeuristic get ANYRTL_LTR =>
      textdirectionheuristic_.TextDirectionHeuristic.fromRef(jniAccessors
          .getStaticField(_classRef, _id_ANYRTL_LTR, jni.JniType.objectType)
          .object);

  static final _id_FIRSTSTRONG_LTR = jniAccessors.getStaticFieldIDOf(
      _classRef, "FIRSTSTRONG_LTR", "Landroid/text/TextDirectionHeuristic;");

  /// from: static public final android.text.TextDirectionHeuristic FIRSTSTRONG_LTR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Determines the direction based on the first strong directional character, including bidi
  /// format chars, falling back to left to right if it finds none. This is the default behavior
  /// of the Unicode Bidirectional Algorithm.
  static textdirectionheuristic_.TextDirectionHeuristic get FIRSTSTRONG_LTR =>
      textdirectionheuristic_.TextDirectionHeuristic.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_FIRSTSTRONG_LTR, jni.JniType.objectType)
          .object);

  static final _id_FIRSTSTRONG_RTL = jniAccessors.getStaticFieldIDOf(
      _classRef, "FIRSTSTRONG_RTL", "Landroid/text/TextDirectionHeuristic;");

  /// from: static public final android.text.TextDirectionHeuristic FIRSTSTRONG_RTL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Determines the direction based on the first strong directional character, including bidi
  /// format chars, falling back to right to left if it finds none. This is similar to the default
  /// behavior of the Unicode Bidirectional Algorithm, just with different fallback behavior.
  static textdirectionheuristic_.TextDirectionHeuristic get FIRSTSTRONG_RTL =>
      textdirectionheuristic_.TextDirectionHeuristic.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_FIRSTSTRONG_RTL, jni.JniType.objectType)
          .object);

  static final _id_LOCALE = jniAccessors.getStaticFieldIDOf(
      _classRef, "LOCALE", "Landroid/text/TextDirectionHeuristic;");

  /// from: static public final android.text.TextDirectionHeuristic LOCALE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Force the paragraph direction to the Locale direction. Falls back to left to right.
  static textdirectionheuristic_.TextDirectionHeuristic get LOCALE =>
      textdirectionheuristic_.TextDirectionHeuristic.fromRef(jniAccessors
          .getStaticField(_classRef, _id_LOCALE, jni.JniType.objectType)
          .object);

  static final _id_LTR = jniAccessors.getStaticFieldIDOf(
      _classRef, "LTR", "Landroid/text/TextDirectionHeuristic;");

  /// from: static public final android.text.TextDirectionHeuristic LTR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Always decides that the direction is left to right.
  static textdirectionheuristic_.TextDirectionHeuristic get LTR =>
      textdirectionheuristic_.TextDirectionHeuristic.fromRef(jniAccessors
          .getStaticField(_classRef, _id_LTR, jni.JniType.objectType)
          .object);

  static final _id_RTL = jniAccessors.getStaticFieldIDOf(
      _classRef, "RTL", "Landroid/text/TextDirectionHeuristic;");

  /// from: static public final android.text.TextDirectionHeuristic RTL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Always decides that the direction is right to left.
  static textdirectionheuristic_.TextDirectionHeuristic get RTL =>
      textdirectionheuristic_.TextDirectionHeuristic.fromRef(jniAccessors
          .getStaticField(_classRef, _id_RTL, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  TextDirectionHeuristics()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
