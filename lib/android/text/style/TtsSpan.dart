// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/PersistableBundle.dart" as persistablebundle_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.style.TtsSpan
///
/// A span that supplies additional meta-data for the associated text intended
/// for text-to-speech engines. If the text is being processed by a
/// text-to-speech engine, the engine may use the data in this span in addition
/// to or instead of its associated text.
///
/// Each instance of a TtsSpan has a type, for example \#TYPE_DATE
/// or \#TYPE_MEASURE. And a list of arguments, provided as
/// key-value pairs in a bundle.
///
/// The inner classes are there for convenience and provide builders for each
/// TtsSpan type.
class TtsSpan extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan");
  TtsSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ANIMACY_ANIMATE
  static const ANIMACY_ANIMATE = "android.animate";

  /// from: static public final java.lang.String ANIMACY_INANIMATE
  static const ANIMACY_INANIMATE = "android.inanimate";

  /// from: static public final java.lang.String ARG_ANIMACY
  ///
  /// String argument supplying animacy information. Can be
  /// \#ANIMACY_ANIMATE or
  /// \#ANIMACY_INANIMATE
  static const ARG_ANIMACY = "android.arg.animacy";

  /// from: static public final java.lang.String ARG_CASE
  ///
  /// String argument supplying case information. Can be any of
  /// \#CASE_NOMINATIVE, \#CASE_ACCUSATIVE, \#CASE_DATIVE,
  /// \#CASE_ABLATIVE, \#CASE_GENITIVE, \#CASE_VOCATIVE,
  /// \#CASE_LOCATIVE and \#CASE_INSTRUMENTAL
  static const ARG_CASE = "android.arg.case";

  /// from: static public final java.lang.String ARG_COUNTRY_CODE
  ///
  /// Argument used to specify the country code of a telephone number. Can be
  /// a string of digits optionally prefixed with a "+".
  /// Can be used with \#TYPE_TELEPHONE.
  static const ARG_COUNTRY_CODE = "android.arg.country_code";

  /// from: static public final java.lang.String ARG_CURRENCY
  ///
  /// Argument used to specify the currency. Should be a ISO4217 currency code,
  /// e.g. "USD".
  /// Can be used with \#TYPE_MONEY.
  static const ARG_CURRENCY = "android.arg.money";

  /// from: static public final java.lang.String ARG_DAY
  ///
  /// Argument used to specify the day of the month of a date. The value should
  /// be provided as an integer in the range from 1 up to and including 31.
  /// Can be used with \#TYPE_DATE.
  static const ARG_DAY = "android.arg.day";

  /// from: static public final java.lang.String ARG_DENOMINATOR
  ///
  /// Argument used to specify the denominator of a fraction. The value can be
  /// a string of digits of any size optionally prefixed with a + or -.
  /// Can be used with \#TYPE_FRACTION.
  static const ARG_DENOMINATOR = "android.arg.denominator";

  /// from: static public final java.lang.String ARG_DIGITS
  ///
  /// Argument used to specify a string of digits.
  /// Can be used with \#TYPE_DIGITS.
  static const ARG_DIGITS = "android.arg.digits";

  /// from: static public final java.lang.String ARG_DOMAIN
  ///
  /// Argument used to specify the domain part of a URI. For example
  /// "source.android.com".
  /// Can be used with \#TYPE_ELECTRONIC.
  static const ARG_DOMAIN = "android.arg.domain";

  /// from: static public final java.lang.String ARG_EXTENSION
  ///
  /// Argument used to specify the extension part of a telephone number. Can be
  /// a string of digits.
  /// Can be used with \#TYPE_TELEPHONE.
  static const ARG_EXTENSION = "android.arg.extension";

  /// from: static public final java.lang.String ARG_FRACTIONAL_PART
  ///
  /// Argument used to specify the fractional part of a decimal. The value can
  /// be a string of digits of any size.
  /// Can be used with \#TYPE_DECIMAL.
  static const ARG_FRACTIONAL_PART = "android.arg.fractional_part";

  /// from: static public final java.lang.String ARG_FRAGMENT_ID
  ///
  /// Argument used to specify the fragment id of a URI. Should be specified as
  /// a string.
  /// Can be used with \#TYPE_ELECTRONIC.
  static const ARG_FRAGMENT_ID = "android.arg.fragment_id";

  /// from: static public final java.lang.String ARG_GENDER
  ///
  /// String argument supplying gender information. Can be any of
  /// \#GENDER_NEUTRAL, \#GENDER_MALE and
  /// \#GENDER_FEMALE.
  static const ARG_GENDER = "android.arg.gender";

  /// from: static public final java.lang.String ARG_HOURS
  ///
  /// Argument used to specify the hours of a time. The hours should be
  /// provided as an integer in the range from 0 up to and including 24.
  /// Can be used with \#TYPE_TIME.
  static const ARG_HOURS = "android.arg.hours";

  /// from: static public final java.lang.String ARG_INTEGER_PART
  ///
  /// Argument used to specify the integer part of a decimal or fraction. The
  /// value can be a string of digits of any size optionally prefixed with
  /// a - or +.
  /// Can be used with \#TYPE_DECIMAL and \#TYPE_FRACTION.
  static const ARG_INTEGER_PART = "android.arg.integer_part";

  /// from: static public final java.lang.String ARG_MINUTES
  ///
  /// Argument used to specify the minutes of a time. The hours should be
  /// provided as an integer in the range from 0 up to and including 59.
  /// Can be used with \#TYPE_TIME.
  static const ARG_MINUTES = "android.arg.minutes";

  /// from: static public final java.lang.String ARG_MONTH
  ///
  /// Argument used to specify the month of a date. The value should be
  /// provided as an integer and can be any of \#MONTH_JANUARY,
  /// \#MONTH_FEBRUARY,  \#MONTH_MARCH, \#MONTH_APRIL,
  /// \#MONTH_MAY, \#MONTH_JUNE, \#MONTH_JULY,
  /// \#MONTH_AUGUST, \#MONTH_SEPTEMBER, \#MONTH_OCTOBER,
  /// \#MONTH_NOVEMBER and \#MONTH_DECEMBER.
  /// Can be used with \#TYPE_DATE.
  static const ARG_MONTH = "android.arg.month";

  /// from: static public final java.lang.String ARG_MULTIPLICITY
  ///
  /// String argument supplying multiplicity information. Can be any of
  /// \#MULTIPLICITY_SINGLE, \#MULTIPLICITY_DUAL and
  /// \#MULTIPLICITY_PLURAL
  static const ARG_MULTIPLICITY = "android.arg.multiplicity";

  /// from: static public final java.lang.String ARG_NUMBER
  ///
  /// Argument used to specify a whole number. The value can be a string of
  /// digits of any size optionally prefixed with a - or +.
  /// Can be used with \#TYPE_CARDINAL and \#TYPE_ORDINAL.
  static const ARG_NUMBER = "android.arg.number";

  /// from: static public final java.lang.String ARG_NUMBER_PARTS
  ///
  /// Argument used to specify the main number part of a telephone number. Can
  /// be a string of digits where the different parts of the telephone number
  /// can be separated with a space, '-', '/' or '.'.
  /// Can be used with \#TYPE_TELEPHONE.
  static const ARG_NUMBER_PARTS = "android.arg.number_parts";

  /// from: static public final java.lang.String ARG_NUMERATOR
  ///
  /// Argument used to specify the numerator of a fraction. The value can be a
  /// string of digits of any size optionally prefixed with a - or +.
  /// Can be used with \#TYPE_FRACTION.
  static const ARG_NUMERATOR = "android.arg.numerator";

  /// from: static public final java.lang.String ARG_PASSWORD
  ///
  /// Argument used to specify the password part of a URI. Should be set as a
  /// string.
  /// Can be used with \#TYPE_ELECTRONIC.
  static const ARG_PASSWORD = "android.arg.password";

  /// from: static public final java.lang.String ARG_PATH
  ///
  /// Argument used to specify the path part of a URI. For example
  /// "source/index.html".
  /// Can be used with \#TYPE_ELECTRONIC.
  static const ARG_PATH = "android.arg.path";

  /// from: static public final java.lang.String ARG_PORT
  ///
  /// Argument used to specify the port number of a URI. Should be specified as
  /// an integer.
  /// Can be used with \#TYPE_ELECTRONIC.
  static const ARG_PORT = "android.arg.port";

  /// from: static public final java.lang.String ARG_PROTOCOL
  ///
  /// Argument used to specify the protocol of a URI. Examples are "http" and
  /// "ftp".
  /// Can be used with \#TYPE_ELECTRONIC.
  static const ARG_PROTOCOL = "android.arg.protocol";

  /// from: static public final java.lang.String ARG_QUANTITY
  ///
  /// Argument used to choose the suffix (thousand, million, etc) that is used
  /// to pronounce large amounts of money. For example it can be used to
  /// disambiguate between "two thousand five hundred dollars" and
  /// "two point five thousand dollars".
  /// If implemented, engines should support at least "1000", "1000000",
  /// "1000000000" and "1000000000000".
  /// Example: if the \#ARG_INTEGER_PART argument is "10", the
  /// \#ARG_FRACTIONAL_PART argument is "4", the \#ARG_QUANTITY
  /// argument is "1000" and the \#ARG_CURRENCY argument is "usd", the
  /// TTS engine may pronounce the span as "ten point four thousand dollars".
  /// With the same example but with the quantity set as "1000000" the TTS
  /// engine may pronounce the span as "ten point four million dollars".
  /// Can be used with \#TYPE_MONEY.
  static const ARG_QUANTITY = "android.arg.quantity";

  /// from: static public final java.lang.String ARG_QUERY_STRING
  ///
  /// Argument used to specify the query string of a URI. For example
  /// "arg=value&argtwo=value".
  /// Can be used with \#TYPE_ELECTRONIC.
  static const ARG_QUERY_STRING = "android.arg.query_string";

  /// from: static public final java.lang.String ARG_TEXT
  ///
  /// String supplying the text to be synthesized. The synthesizer is free
  /// to decide how to interpret the text.
  /// Can be used with \#TYPE_TEXT.
  static const ARG_TEXT = "android.arg.text";

  /// from: static public final java.lang.String ARG_UNIT
  ///
  /// Argument used to specify the unit of a measure. The unit should always be
  /// specified in English singular form. Prefixes may be used. Engines will do
  /// their best to pronounce them correctly in the language used. Engines are
  /// expected to at least support the most common ones like "meter", "second",
  /// "degree celsius" and "degree fahrenheit" with some common prefixes like
  /// "milli" and "kilo".
  /// Can be used with \#TYPE_MEASURE.
  static const ARG_UNIT = "android.arg.unit";

  /// from: static public final java.lang.String ARG_USERNAME
  ///
  /// Argument used to specify the username part of a URI. Should be set as a
  /// string.
  /// Can be used with \#TYPE_ELECTRONIC.
  static const ARG_USERNAME = "android.arg.username";

  /// from: static public final java.lang.String ARG_VERBATIM
  ///
  /// Argument used to specify a string where the characters are read verbatim,
  /// except whitespace.
  /// Can be used with \#TYPE_VERBATIM.
  static const ARG_VERBATIM = "android.arg.verbatim";

  /// from: static public final java.lang.String ARG_WEEKDAY
  ///
  /// Argument used to specify the weekday of a date. The value should be
  /// provided as an integer and can be any of \#WEEKDAY_SUNDAY,
  /// \#WEEKDAY_MONDAY, \#WEEKDAY_TUESDAY,
  /// \#WEEKDAY_WEDNESDAY, \#WEEKDAY_THURSDAY,
  /// \#WEEKDAY_FRIDAY and \#WEEKDAY_SATURDAY.
  /// Can be used with \#TYPE_DATE.
  static const ARG_WEEKDAY = "android.arg.weekday";

  /// from: static public final java.lang.String ARG_YEAR
  ///
  /// Argument used to specify the year of a date. The value should be provided
  /// as a positive integer.
  /// Can be used with \#TYPE_DATE.
  static const ARG_YEAR = "android.arg.year";

  /// from: static public final java.lang.String CASE_ABLATIVE
  static const CASE_ABLATIVE = "android.ablative";

  /// from: static public final java.lang.String CASE_ACCUSATIVE
  static const CASE_ACCUSATIVE = "android.accusative";

  /// from: static public final java.lang.String CASE_DATIVE
  static const CASE_DATIVE = "android.dative";

  /// from: static public final java.lang.String CASE_GENITIVE
  static const CASE_GENITIVE = "android.genitive";

  /// from: static public final java.lang.String CASE_INSTRUMENTAL
  static const CASE_INSTRUMENTAL = "android.instrumental";

  /// from: static public final java.lang.String CASE_LOCATIVE
  static const CASE_LOCATIVE = "android.locative";

  /// from: static public final java.lang.String CASE_NOMINATIVE
  static const CASE_NOMINATIVE = "android.nominative";

  /// from: static public final java.lang.String CASE_VOCATIVE
  static const CASE_VOCATIVE = "android.vocative";

  /// from: static public final java.lang.String GENDER_FEMALE
  static const GENDER_FEMALE = "android.female";

  /// from: static public final java.lang.String GENDER_MALE
  static const GENDER_MALE = "android.male";

  /// from: static public final java.lang.String GENDER_NEUTRAL
  static const GENDER_NEUTRAL = "android.neutral";

  /// from: static public final int MONTH_APRIL
  static const MONTH_APRIL = 3;

  /// from: static public final int MONTH_AUGUST
  static const MONTH_AUGUST = 7;

  /// from: static public final int MONTH_DECEMBER
  static const MONTH_DECEMBER = 11;

  /// from: static public final int MONTH_FEBRUARY
  static const MONTH_FEBRUARY = 1;

  /// from: static public final int MONTH_JANUARY
  static const MONTH_JANUARY = 0;

  /// from: static public final int MONTH_JULY
  static const MONTH_JULY = 6;

  /// from: static public final int MONTH_JUNE
  static const MONTH_JUNE = 5;

  /// from: static public final int MONTH_MARCH
  static const MONTH_MARCH = 2;

  /// from: static public final int MONTH_MAY
  static const MONTH_MAY = 4;

  /// from: static public final int MONTH_NOVEMBER
  static const MONTH_NOVEMBER = 10;

  /// from: static public final int MONTH_OCTOBER
  static const MONTH_OCTOBER = 9;

  /// from: static public final int MONTH_SEPTEMBER
  static const MONTH_SEPTEMBER = 8;

  /// from: static public final java.lang.String MULTIPLICITY_DUAL
  static const MULTIPLICITY_DUAL = "android.dual";

  /// from: static public final java.lang.String MULTIPLICITY_PLURAL
  static const MULTIPLICITY_PLURAL = "android.plural";

  /// from: static public final java.lang.String MULTIPLICITY_SINGLE
  static const MULTIPLICITY_SINGLE = "android.single";

  /// from: static public final java.lang.String TYPE_CARDINAL
  ///
  /// The text associated with this span is a cardinal. Must include the
  /// number to be synthesized with \#ARG_NUMBER.
  /// Also accepts the arguments \#ARG_GENDER,
  /// \#ARG_ANIMACY, \#ARG_MULTIPLICITY and
  /// \#ARG_CASE.
  static const TYPE_CARDINAL = "android.type.cardinal";

  /// from: static public final java.lang.String TYPE_DATE
  ///
  /// The text associated with this span is a date. At least one of the
  /// arguments \#ARG_MONTH and \#ARG_YEAR has to be provided.
  /// The argument \#ARG_DAY is optional if \#ARG_MONTH is set.
  /// The argument \#ARG_WEEKDAY is optional if \#ARG_DAY is set.
  /// Also accepts the arguments \#ARG_GENDER, \#ARG_ANIMACY,
  /// \#ARG_MULTIPLICITY and \#ARG_CASE.
  static const TYPE_DATE = "android.type.date";

  /// from: static public final java.lang.String TYPE_DECIMAL
  ///
  /// The text associated with this span is a decimal number. Must include the
  /// number to be synthesized with \#ARG_INTEGER_PART and
  /// \#ARG_FRACTIONAL_PART.
  /// Also accepts the arguments \#ARG_GENDER,
  /// \#ARG_ANIMACY, \#ARG_MULTIPLICITY and
  /// \#ARG_CASE.
  static const TYPE_DECIMAL = "android.type.decimal";

  /// from: static public final java.lang.String TYPE_DIGITS
  ///
  /// The text associated with this span is a series of digits that have to be
  /// read sequentially. The digits can be set with \#ARG_DIGITS.
  /// Also accepts the arguments \#ARG_GENDER, \#ARG_ANIMACY,
  /// \#ARG_MULTIPLICITY and \#ARG_CASE.
  static const TYPE_DIGITS = "android.type.digits";

  /// from: static public final java.lang.String TYPE_ELECTRONIC
  ///
  /// The text associated with this span is a URI (can be used for URLs and
  /// email addresses). The full schema for URLs, which email addresses can
  /// effectively be seen as a subset of, is:
  /// protocol://username:password@domain:port/path?query_string\#fragment_id
  /// Hence populating just username and domain will read as an email address.
  /// All arguments are optional, but at least one has to be provided:
  /// \#ARG_PROTOCOL, \#ARG_USERNAME, \#ARG_PASSWORD,
  /// \#ARG_DOMAIN, \#ARG_PORT, \#ARG_PATH,
  /// \#ARG_QUERY_STRING and \#ARG_FRAGMENT_ID.
  /// Also accepts the arguments \#ARG_GENDER, \#ARG_ANIMACY,
  /// \#ARG_MULTIPLICITY and \#ARG_CASE.
  static const TYPE_ELECTRONIC = "android.type.electronic";

  /// from: static public final java.lang.String TYPE_FRACTION
  ///
  /// The text associated with this span is a fractional number. Must include
  /// the number to be synthesized with \#ARG_NUMERATOR and
  /// \#ARG_DENOMINATOR. \#ARG_INTEGER_PART is optional
  /// Also accepts the arguments \#ARG_GENDER,
  /// \#ARG_ANIMACY, \#ARG_MULTIPLICITY and
  /// \#ARG_CASE.
  static const TYPE_FRACTION = "android.type.fraction";

  /// from: static public final java.lang.String TYPE_MEASURE
  ///
  /// The text associated with this span is a measure, consisting of a number
  /// and a unit. The number can be a cardinal, decimal or a fraction. Set the
  /// number with the same arguments as \#TYPE_CARDINAL,
  /// \#TYPE_DECIMAL or \#TYPE_FRACTION. The unit can be
  /// specified with \#ARG_UNIT.
  /// Also accepts the arguments \#ARG_GENDER,
  /// \#ARG_ANIMACY, \#ARG_MULTIPLICITY and
  /// \#ARG_CASE.
  static const TYPE_MEASURE = "android.type.measure";

  /// from: static public final java.lang.String TYPE_MONEY
  ///
  /// The text associated with this span is an amount of money. Set the amount
  /// with the same arguments as \#TYPE_DECIMAL.
  /// \#ARG_CURRENCY is used to set the currency. \#ARG_QUANTITY
  /// is optional.
  /// Also accepts the arguments \#ARG_GENDER, \#ARG_ANIMACY,
  /// \#ARG_MULTIPLICITY and \#ARG_CASE.
  static const TYPE_MONEY = "android.type.money";

  /// from: static public final java.lang.String TYPE_ORDINAL
  ///
  /// The text associated with this span is an ordinal. Must include the
  /// number to be synthesized with \#ARG_NUMBER.
  /// Also accepts the arguments \#ARG_GENDER,
  /// \#ARG_ANIMACY, \#ARG_MULTIPLICITY and
  /// \#ARG_CASE.
  static const TYPE_ORDINAL = "android.type.ordinal";

  /// from: static public final java.lang.String TYPE_TELEPHONE
  ///
  /// The text associated with this span is a telephone number. The argument
  /// \#ARG_NUMBER_PARTS is required. \#ARG_COUNTRY_CODE and
  /// \#ARG_EXTENSION are optional.
  /// Also accepts the arguments \#ARG_GENDER, \#ARG_ANIMACY,
  /// \#ARG_MULTIPLICITY and \#ARG_CASE.
  static const TYPE_TELEPHONE = "android.type.telephone";

  /// from: static public final java.lang.String TYPE_TEXT
  ///
  /// This span type can be used to add morphosyntactic features to the text it
  /// spans over, or synthesize a something else than the spanned text. Use
  /// the argument \#ARG_TEXT to set a different text.
  /// Accepts the arguments \#ARG_GENDER,
  /// \#ARG_ANIMACY, \#ARG_MULTIPLICITY and
  /// \#ARG_CASE.
  static const TYPE_TEXT = "android.type.text";

  /// from: static public final java.lang.String TYPE_TIME
  ///
  /// The text associated with this span is a time, consisting of a number of
  /// hours and minutes, specified with \#ARG_HOURS and
  /// \#ARG_MINUTES.
  /// Also accepts the arguments \#ARG_GENDER,
  /// \#ARG_ANIMACY, \#ARG_MULTIPLICITY and
  /// \#ARG_CASE.
  static const TYPE_TIME = "android.type.time";

  /// from: static public final java.lang.String TYPE_VERBATIM
  ///
  /// The text associated with this span is a series of characters that have to
  /// be read verbatim. The engine will attempt to read out any character like
  /// punctuation but excluding whitespace. \#ARG_VERBATIM is required.
  /// Also accepts the arguments \#ARG_GENDER,
  /// \#ARG_ANIMACY, \#ARG_MULTIPLICITY and \#ARG_CASE.
  static const TYPE_VERBATIM = "android.type.verbatim";

  /// from: static public final int WEEKDAY_FRIDAY
  static const WEEKDAY_FRIDAY = 6;

  /// from: static public final int WEEKDAY_MONDAY
  static const WEEKDAY_MONDAY = 2;

  /// from: static public final int WEEKDAY_SATURDAY
  static const WEEKDAY_SATURDAY = 7;

  /// from: static public final int WEEKDAY_SUNDAY
  static const WEEKDAY_SUNDAY = 1;

  /// from: static public final int WEEKDAY_THURSDAY
  static const WEEKDAY_THURSDAY = 5;

  /// from: static public final int WEEKDAY_TUESDAY
  static const WEEKDAY_TUESDAY = 3;

  /// from: static public final int WEEKDAY_WEDNESDAY
  static const WEEKDAY_WEDNESDAY = 4;

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;Landroid/os/PersistableBundle;)V");

  /// from: public void <init>(java.lang.String type, android.os.PersistableBundle args)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TtsSpan(jni.JniString type, persistablebundle_.PersistableBundle args)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [type.reference, args.reference]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel src)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TtsSpan.ctor1(parcel_.Parcel src)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [src.reference]).object);

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the type.
  ///@return The type of this instance.
  jni.JniString getType() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getType, jni.JniType.objectType, []).object);

  static final _id_getArgs = jniAccessors.getMethodIDOf(
      _classRef, "getArgs", "()Landroid/os/PersistableBundle;");

  /// from: public android.os.PersistableBundle getArgs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a bundle of the arguments set.
  ///@return The bundle of the arguments set.
  persistablebundle_.PersistableBundle getArgs() =>
      persistablebundle_.PersistableBundle.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getArgs, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_getSpanTypeId =
      jniAccessors.getMethodIDOf(_classRef, "getSpanTypeId", "()I");

  /// from: public int getSpanTypeId()
  int getSpanTypeId() => jniAccessors.callMethodWithArgs(
      reference, _id_getSpanTypeId, jni.JniType.intType, []).integer;
}

/// from: android.text.style.TtsSpan$VerbatimBuilder
///
/// A builder for TtsSpans of type \#TYPE_VERBATIM.
class TtsSpan_VerbatimBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$VerbatimBuilder");
  TtsSpan_VerbatimBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_VERBATIM.
  TtsSpan_VerbatimBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String verbatim)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_VERBATIM
  /// and sets the \#ARG_VERBATIM argument.
  TtsSpan_VerbatimBuilder(jni.JniString verbatim)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [verbatim.reference]).object);

  static final _id_setVerbatim = jniAccessors.getMethodIDOf(
      _classRef,
      "setVerbatim",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$VerbatimBuilder;");

  /// from: public android.text.style.TtsSpan.VerbatimBuilder setVerbatim(java.lang.String verbatim)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_VERBATIM argument.
  ///@param verbatim A string of characters that will be read verbatim,
  ///     except whitespace.
  ///@return This instance.
  TtsSpan_VerbatimBuilder setVerbatim(jni.JniString verbatim) =>
      TtsSpan_VerbatimBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setVerbatim,
          jni.JniType.objectType,
          [verbatim.reference]).object);
}

/// from: android.text.style.TtsSpan$TimeBuilder
///
/// A builder for TtsSpans of type \#TYPE_TIME.
class TtsSpan_TimeBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$TimeBuilder");
  TtsSpan_TimeBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_TIME.
  TtsSpan_TimeBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int hours, int minutes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_TIME and
  /// sets the \#ARG_HOURS and \#ARG_MINUTES arguments.
  TtsSpan_TimeBuilder.ctor2(int hours, int minutes)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [hours, minutes]).object);

  static final _id_setHours = jniAccessors.getMethodIDOf(
      _classRef, "setHours", "(I)Landroid/text/style/TtsSpan\$TimeBuilder;");

  /// from: public android.text.style.TtsSpan.TimeBuilder setHours(int hours)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_HOURS argument.
  ///@param hours The value to be set for hours. See \#ARG_HOURS.
  ///@return This instance.
  ///@see \#ARG_HOURS
  TtsSpan_TimeBuilder setHours(int hours) =>
      TtsSpan_TimeBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setHours, jni.JniType.objectType, [hours]).object);

  static final _id_setMinutes = jniAccessors.getMethodIDOf(
      _classRef, "setMinutes", "(I)Landroid/text/style/TtsSpan\$TimeBuilder;");

  /// from: public android.text.style.TtsSpan.TimeBuilder setMinutes(int minutes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_MINUTES argument.
  ///@param minutes The value to be set for minutes. See
  ///     \#ARG_MINUTES.
  ///@return This instance.
  ///@see \#ARG_MINUTES
  TtsSpan_TimeBuilder setMinutes(int minutes) =>
      TtsSpan_TimeBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setMinutes, jni.JniType.objectType, [minutes]).object);
}

/// from: android.text.style.TtsSpan$TextBuilder
///
/// A builder for TtsSpans of type \#TYPE_TEXT.
class TtsSpan_TextBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$TextBuilder");
  TtsSpan_TextBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_TEXT.
  TtsSpan_TextBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String text)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_TEXT and sets the
  /// \#ARG_TEXT argument.
  ///@param text The text to be synthesized.
  ///@see \#setText(String)
  TtsSpan_TextBuilder(jni.JniString text)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [text.reference]).object);

  static final _id_setText = jniAccessors.getMethodIDOf(_classRef, "setText",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$TextBuilder;");

  /// from: public android.text.style.TtsSpan.TextBuilder setText(java.lang.String text)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_TEXT argument, the text to be synthesized.
  ///@param text The string that will be synthesized.
  ///@return This instance.
  TtsSpan_TextBuilder setText(jni.JniString text) =>
      TtsSpan_TextBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setText, jni.JniType.objectType, [text.reference]).object);
}

/// from: android.text.style.TtsSpan$TelephoneBuilder
///
/// A builder for TtsSpans of type \#TYPE_TELEPHONE.
class TtsSpan_TelephoneBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$TelephoneBuilder");
  TtsSpan_TelephoneBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_TELEPHONE.
  TtsSpan_TelephoneBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String numberParts)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_TELEPHONE and sets the
  /// \#ARG_NUMBER_PARTS argument.
  TtsSpan_TelephoneBuilder(jni.JniString numberParts)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [numberParts.reference]).object);

  static final _id_setCountryCode = jniAccessors.getMethodIDOf(
      _classRef,
      "setCountryCode",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$TelephoneBuilder;");

  /// from: public android.text.style.TtsSpan.TelephoneBuilder setCountryCode(java.lang.String countryCode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_COUNTRY_CODE argument.
  ///@param countryCode The country code can be a series of digits
  /// optionally prefixed with a "+".
  ///@return This instance.
  TtsSpan_TelephoneBuilder setCountryCode(jni.JniString countryCode) =>
      TtsSpan_TelephoneBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setCountryCode,
          jni.JniType.objectType,
          [countryCode.reference]).object);

  static final _id_setNumberParts = jniAccessors.getMethodIDOf(
      _classRef,
      "setNumberParts",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$TelephoneBuilder;");

  /// from: public android.text.style.TtsSpan.TelephoneBuilder setNumberParts(java.lang.String numberParts)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_NUMBER_PARTS argument.
  ///@param numberParts The main telephone number. Can be a series of
  ///     digits and letters separated by spaces, "/", "-" or ".".
  ///@return This instance.
  TtsSpan_TelephoneBuilder setNumberParts(jni.JniString numberParts) =>
      TtsSpan_TelephoneBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setNumberParts,
          jni.JniType.objectType,
          [numberParts.reference]).object);

  static final _id_setExtension = jniAccessors.getMethodIDOf(
      _classRef,
      "setExtension",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$TelephoneBuilder;");

  /// from: public android.text.style.TtsSpan.TelephoneBuilder setExtension(java.lang.String extension)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_EXTENSION argument.
  ///@param extension The extension can be a series of digits.
  ///@return This instance.
  TtsSpan_TelephoneBuilder setExtension(jni.JniString extension0) =>
      TtsSpan_TelephoneBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setExtension,
          jni.JniType.objectType,
          [extension0.reference]).object);
}

/// from: android.text.style.TtsSpan$SemioticClassBuilder
///
/// A builder for TtsSpans, has setters for morphosyntactic features.
/// This builder can be used directly, but the more specific subclasses of
/// this builder like TtsSpan.TextBuilder and
/// TtsSpan.CardinalBuilder are likely more useful.
class TtsSpan_SemioticClassBuilder extends TtsSpan_Builder {
  static final _classRef = jniAccessors
      .getClassOf("android/text/style/TtsSpan\$SemioticClassBuilder");
  TtsSpan_SemioticClassBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TtsSpan_SemioticClassBuilder(jni.JniString type)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [type.reference]).object);
}

/// from: android.text.style.TtsSpan$OrdinalBuilder
///
/// A builder for TtsSpans of type \#TYPE_ORDINAL.
class TtsSpan_OrdinalBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$OrdinalBuilder");
  TtsSpan_OrdinalBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_ORDINAL.
  TtsSpan_OrdinalBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(J)V");

  /// from: public void <init>(long number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_ORDINAL and sets the
  /// \#ARG_NUMBER argument.
  ///@param number The ordinal number to synthesize.
  ///@see \#setNumber(long)
  TtsSpan_OrdinalBuilder.ctor2(int number)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [number]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_ORDINAL and sets the
  /// \#ARG_NUMBER argument.
  ///@param number The number to synthesize.
  ///@see \#setNumber(String)
  TtsSpan_OrdinalBuilder(jni.JniString number)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [number.reference]).object);

  static final _id_setNumber = jniAccessors.getMethodIDOf(_classRef,
      "setNumber", "(J)Landroid/text/style/TtsSpan\$OrdinalBuilder;");

  /// from: public android.text.style.TtsSpan.OrdinalBuilder setNumber(long number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method that converts the number to a String and sets it
  /// to the value for \#ARG_NUMBER.
  ///@param number The ordinal number that will be synthesized.
  ///@return This instance.
  TtsSpan_OrdinalBuilder setNumber(int number) =>
      TtsSpan_OrdinalBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setNumber, jni.JniType.objectType, [number]).object);

  static final _id_setNumber1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setNumber",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$OrdinalBuilder;");

  /// from: public android.text.style.TtsSpan.OrdinalBuilder setNumber(java.lang.String number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_NUMBER argument.
  ///@param number A non-empty string of digits with an optional
  ///     leading + or -.
  ///@return This instance.
  TtsSpan_OrdinalBuilder setNumber1(jni.JniString number) =>
      TtsSpan_OrdinalBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setNumber1, jni.JniType.objectType, [number.reference]).object);
}

/// from: android.text.style.TtsSpan$MoneyBuilder
///
/// A builder for TtsSpans of type \#TYPE_MONEY.
class TtsSpan_MoneyBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$MoneyBuilder");
  TtsSpan_MoneyBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_MONEY.
  TtsSpan_MoneyBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_setIntegerPart = jniAccessors.getMethodIDOf(_classRef,
      "setIntegerPart", "(J)Landroid/text/style/TtsSpan\$MoneyBuilder;");

  /// from: public android.text.style.TtsSpan.MoneyBuilder setIntegerPart(long integerPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method that converts the number to a String and set it to
  /// the value for \#ARG_INTEGER_PART.
  ///@param integerPart The integer part of the amount.
  ///@return This instance.
  TtsSpan_MoneyBuilder setIntegerPart(int integerPart) =>
      TtsSpan_MoneyBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setIntegerPart, jni.JniType.objectType, [integerPart]).object);

  static final _id_setIntegerPart1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setIntegerPart",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$MoneyBuilder;");

  /// from: public android.text.style.TtsSpan.MoneyBuilder setIntegerPart(java.lang.String integerPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_INTEGER_PART argument.
  ///@param integerPart A non-empty string of digits with an optional
  ///     leading + or -.
  ///@return This instance.
  TtsSpan_MoneyBuilder setIntegerPart1(jni.JniString integerPart) =>
      TtsSpan_MoneyBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setIntegerPart1,
          jni.JniType.objectType,
          [integerPart.reference]).object);

  static final _id_setFractionalPart = jniAccessors.getMethodIDOf(
      _classRef,
      "setFractionalPart",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$MoneyBuilder;");

  /// from: public android.text.style.TtsSpan.MoneyBuilder setFractionalPart(java.lang.String fractionalPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_FRACTIONAL_PART argument.
  ///@param fractionalPart Can be a string of digits of any size.
  ///@return This instance.
  TtsSpan_MoneyBuilder setFractionalPart(jni.JniString fractionalPart) =>
      TtsSpan_MoneyBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setFractionalPart,
          jni.JniType.objectType,
          [fractionalPart.reference]).object);

  static final _id_setCurrency = jniAccessors.getMethodIDOf(
      _classRef,
      "setCurrency",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$MoneyBuilder;");

  /// from: public android.text.style.TtsSpan.MoneyBuilder setCurrency(java.lang.String currency)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_CURRENCY argument.
  ///@param currency Should be a ISO4217 currency code, e.g. "USD".
  ///@return This instance.
  TtsSpan_MoneyBuilder setCurrency(jni.JniString currency) =>
      TtsSpan_MoneyBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setCurrency,
          jni.JniType.objectType,
          [currency.reference]).object);

  static final _id_setQuantity = jniAccessors.getMethodIDOf(
      _classRef,
      "setQuantity",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$MoneyBuilder;");

  /// from: public android.text.style.TtsSpan.MoneyBuilder setQuantity(java.lang.String quantity)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_QUANTITY argument.
  ///@param quantity
  ///@return This instance.
  TtsSpan_MoneyBuilder setQuantity(jni.JniString quantity) =>
      TtsSpan_MoneyBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setQuantity,
          jni.JniType.objectType,
          [quantity.reference]).object);
}

/// from: android.text.style.TtsSpan$MeasureBuilder
///
/// A builder for TtsSpans of type \#TYPE_MEASURE.
class TtsSpan_MeasureBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$MeasureBuilder");
  TtsSpan_MeasureBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_MEASURE.
  TtsSpan_MeasureBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_setNumber = jniAccessors.getMethodIDOf(_classRef,
      "setNumber", "(J)Landroid/text/style/TtsSpan\$MeasureBuilder;");

  /// from: public android.text.style.TtsSpan.MeasureBuilder setNumber(long number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method that converts the number to a String and set it to
  /// the value for \#ARG_NUMBER.
  ///@param number The amount of the measure.
  ///@return This instance.
  TtsSpan_MeasureBuilder setNumber(int number) =>
      TtsSpan_MeasureBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setNumber, jni.JniType.objectType, [number]).object);

  static final _id_setNumber1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setNumber",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$MeasureBuilder;");

  /// from: public android.text.style.TtsSpan.MeasureBuilder setNumber(java.lang.String number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_NUMBER argument.
  ///@param number A non-empty string of digits with an optional
  ///     leading + or -.
  ///@return This instance.
  TtsSpan_MeasureBuilder setNumber1(jni.JniString number) =>
      TtsSpan_MeasureBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setNumber1, jni.JniType.objectType, [number.reference]).object);

  static final _id_setIntegerPart = jniAccessors.getMethodIDOf(_classRef,
      "setIntegerPart", "(J)Landroid/text/style/TtsSpan\$MeasureBuilder;");

  /// from: public android.text.style.TtsSpan.MeasureBuilder setIntegerPart(long integerPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method that converts the integer part to a String and set
  /// it to the value for \#ARG_INTEGER_PART.
  ///@param integerPart The integer part of a decimal or fraction.
  ///@return This instance.
  TtsSpan_MeasureBuilder setIntegerPart(int integerPart) =>
      TtsSpan_MeasureBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setIntegerPart, jni.JniType.objectType, [integerPart]).object);

  static final _id_setIntegerPart1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setIntegerPart",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$MeasureBuilder;");

  /// from: public android.text.style.TtsSpan.MeasureBuilder setIntegerPart(java.lang.String integerPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_INTEGER_PART argument.
  ///@param integerPart The integer part of a decimal or fraction; a
  /// non-empty string of digits with an optional
  ///     leading + or -.
  ///@return This instance.
  TtsSpan_MeasureBuilder setIntegerPart1(jni.JniString integerPart) =>
      TtsSpan_MeasureBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setIntegerPart1,
          jni.JniType.objectType,
          [integerPart.reference]).object);

  static final _id_setFractionalPart = jniAccessors.getMethodIDOf(
      _classRef,
      "setFractionalPart",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$MeasureBuilder;");

  /// from: public android.text.style.TtsSpan.MeasureBuilder setFractionalPart(java.lang.String fractionalPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_FRACTIONAL_PART argument.
  ///@param fractionalPart The fractional part of a decimal; a non-empty
  ///     string of digits with an optional leading + or -.
  ///@return This instance.
  TtsSpan_MeasureBuilder setFractionalPart(jni.JniString fractionalPart) =>
      TtsSpan_MeasureBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setFractionalPart,
          jni.JniType.objectType,
          [fractionalPart.reference]).object);

  static final _id_setNumerator = jniAccessors.getMethodIDOf(_classRef,
      "setNumerator", "(J)Landroid/text/style/TtsSpan\$MeasureBuilder;");

  /// from: public android.text.style.TtsSpan.MeasureBuilder setNumerator(long numerator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method that converts the numerator to a String and set it
  /// to the value for \#ARG_NUMERATOR.
  ///@param numerator The numerator of a fraction.
  ///@return This instance.
  TtsSpan_MeasureBuilder setNumerator(int numerator) =>
      TtsSpan_MeasureBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setNumerator, jni.JniType.objectType, [numerator]).object);

  static final _id_setNumerator1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setNumerator",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$MeasureBuilder;");

  /// from: public android.text.style.TtsSpan.MeasureBuilder setNumerator(java.lang.String numerator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_NUMERATOR argument.
  ///@param numerator The numerator of a fraction; a non-empty string of
  ///     digits with an optional leading + or -.
  ///@return This instance.
  TtsSpan_MeasureBuilder setNumerator1(jni.JniString numerator) =>
      TtsSpan_MeasureBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setNumerator1,
          jni.JniType.objectType,
          [numerator.reference]).object);

  static final _id_setDenominator = jniAccessors.getMethodIDOf(_classRef,
      "setDenominator", "(J)Landroid/text/style/TtsSpan\$MeasureBuilder;");

  /// from: public android.text.style.TtsSpan.MeasureBuilder setDenominator(long denominator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method that converts the denominator to a String and set
  /// it to the value for \#ARG_DENOMINATOR.
  ///@param denominator The denominator of a fraction.
  ///@return This instance.
  TtsSpan_MeasureBuilder setDenominator(int denominator) =>
      TtsSpan_MeasureBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setDenominator, jni.JniType.objectType, [denominator]).object);

  static final _id_setDenominator1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setDenominator",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$MeasureBuilder;");

  /// from: public android.text.style.TtsSpan.MeasureBuilder setDenominator(java.lang.String denominator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_DENOMINATOR argument.
  ///@param denominator The denominator of a fraction; a non-empty string
  ///     of digits with an optional leading + or -.
  ///@return This instance.
  TtsSpan_MeasureBuilder setDenominator1(jni.JniString denominator) =>
      TtsSpan_MeasureBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setDenominator1,
          jni.JniType.objectType,
          [denominator.reference]).object);

  static final _id_setUnit = jniAccessors.getMethodIDOf(_classRef, "setUnit",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$MeasureBuilder;");

  /// from: public android.text.style.TtsSpan.MeasureBuilder setUnit(java.lang.String unit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_UNIT argument.
  ///@param unit The unit of the measure.
  ///@return This instance.
  ///@see TtsSpan.ARG_UNIT
  TtsSpan_MeasureBuilder setUnit(jni.JniString unit) =>
      TtsSpan_MeasureBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setUnit, jni.JniType.objectType, [unit.reference]).object);
}

/// from: android.text.style.TtsSpan$FractionBuilder
///
/// A builder for TtsSpans of type \#TYPE_FRACTION.
class TtsSpan_FractionBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$FractionBuilder");
  TtsSpan_FractionBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_FRACTION.
  TtsSpan_FractionBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(JJJ)V");

  /// from: public void <init>(long integerPart, long numerator, long denominator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_FRACTION and sets the
  /// \#ARG_INTEGER_PART, \#ARG_NUMERATOR, and
  /// \#ARG_DENOMINATOR arguments.
  TtsSpan_FractionBuilder.ctor2(int integerPart, int numerator, int denominator)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [integerPart, numerator, denominator]).object);

  static final _id_setIntegerPart = jniAccessors.getMethodIDOf(_classRef,
      "setIntegerPart", "(J)Landroid/text/style/TtsSpan\$FractionBuilder;");

  /// from: public android.text.style.TtsSpan.FractionBuilder setIntegerPart(long integerPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method that converts the integer to a String and sets the
  /// argument \#ARG_NUMBER.
  ///@param integerPart The integer part.
  ///@return This instance.
  TtsSpan_FractionBuilder setIntegerPart(int integerPart) =>
      TtsSpan_FractionBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setIntegerPart, jni.JniType.objectType, [integerPart]).object);

  static final _id_setIntegerPart1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setIntegerPart",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$FractionBuilder;");

  /// from: public android.text.style.TtsSpan.FractionBuilder setIntegerPart(java.lang.String integerPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_INTEGER_PART argument.
  ///@param integerPart A non-empty string of digits with an optional
  ///     leading + or -.
  ///@return This instance.
  TtsSpan_FractionBuilder setIntegerPart1(jni.JniString integerPart) =>
      TtsSpan_FractionBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setIntegerPart1,
          jni.JniType.objectType,
          [integerPart.reference]).object);

  static final _id_setNumerator = jniAccessors.getMethodIDOf(_classRef,
      "setNumerator", "(J)Landroid/text/style/TtsSpan\$FractionBuilder;");

  /// from: public android.text.style.TtsSpan.FractionBuilder setNumerator(long numerator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method that converts the numerator to a String and sets
  /// the argument \#ARG_NUMERATOR.
  ///@param numerator The numerator.
  ///@return This instance.
  TtsSpan_FractionBuilder setNumerator(int numerator) =>
      TtsSpan_FractionBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setNumerator, jni.JniType.objectType, [numerator]).object);

  static final _id_setNumerator1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setNumerator",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$FractionBuilder;");

  /// from: public android.text.style.TtsSpan.FractionBuilder setNumerator(java.lang.String numerator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_NUMERATOR argument.
  ///@param numerator A non-empty string of digits with an optional
  ///     leading + or -.
  ///@return This instance.
  TtsSpan_FractionBuilder setNumerator1(jni.JniString numerator) =>
      TtsSpan_FractionBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setNumerator1,
          jni.JniType.objectType,
          [numerator.reference]).object);

  static final _id_setDenominator = jniAccessors.getMethodIDOf(_classRef,
      "setDenominator", "(J)Landroid/text/style/TtsSpan\$FractionBuilder;");

  /// from: public android.text.style.TtsSpan.FractionBuilder setDenominator(long denominator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method that converts the denominator to a String and sets
  /// the argument \#ARG_DENOMINATOR.
  ///@param denominator The denominator.
  ///@return This instance.
  TtsSpan_FractionBuilder setDenominator(int denominator) =>
      TtsSpan_FractionBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setDenominator, jni.JniType.objectType, [denominator]).object);

  static final _id_setDenominator1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setDenominator",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$FractionBuilder;");

  /// from: public android.text.style.TtsSpan.FractionBuilder setDenominator(java.lang.String denominator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_DENOMINATOR argument.
  ///@param denominator A non-empty string of digits with an optional
  ///     leading + or -.
  ///@return This instance.
  TtsSpan_FractionBuilder setDenominator1(jni.JniString denominator) =>
      TtsSpan_FractionBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setDenominator1,
          jni.JniType.objectType,
          [denominator.reference]).object);
}

/// from: android.text.style.TtsSpan$ElectronicBuilder
///
/// A builder for TtsSpans of type \#TYPE_ELECTRONIC.
class TtsSpan_ElectronicBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$ElectronicBuilder");
  TtsSpan_ElectronicBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_ELECTRONIC.
  TtsSpan_ElectronicBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_setEmailArguments = jniAccessors.getMethodIDOf(
      _classRef,
      "setEmailArguments",
      "(Ljava/lang/String;Ljava/lang/String;)Landroid/text/style/TtsSpan\$ElectronicBuilder;");

  /// from: public android.text.style.TtsSpan.ElectronicBuilder setEmailArguments(java.lang.String username, java.lang.String domain)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_USERNAME and \#ARG_DOMAIN
  ///     arguments, representing an email address.
  ///@param username The part before the @ in the email address.
  ///@param domain The part after the @ in the email address.
  ///@return This instance.
  TtsSpan_ElectronicBuilder setEmailArguments(
          jni.JniString username, jni.JniString domain) =>
      TtsSpan_ElectronicBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setEmailArguments,
          jni.JniType.objectType,
          [username.reference, domain.reference]).object);

  static final _id_setProtocol = jniAccessors.getMethodIDOf(
      _classRef,
      "setProtocol",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$ElectronicBuilder;");

  /// from: public android.text.style.TtsSpan.ElectronicBuilder setProtocol(java.lang.String protocol)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_PROTOCOL argument.
  ///@param protocol The protocol of the URI. Examples are "http" and
  ///     "ftp".
  ///@return This instance.
  TtsSpan_ElectronicBuilder setProtocol(jni.JniString protocol) =>
      TtsSpan_ElectronicBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setProtocol,
          jni.JniType.objectType,
          [protocol.reference]).object);

  static final _id_setUsername = jniAccessors.getMethodIDOf(
      _classRef,
      "setUsername",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$ElectronicBuilder;");

  /// from: public android.text.style.TtsSpan.ElectronicBuilder setUsername(java.lang.String username)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_USERNAME argument.
  ///@return This instance.
  TtsSpan_ElectronicBuilder setUsername(jni.JniString username) =>
      TtsSpan_ElectronicBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setUsername,
          jni.JniType.objectType,
          [username.reference]).object);

  static final _id_setPassword = jniAccessors.getMethodIDOf(
      _classRef,
      "setPassword",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$ElectronicBuilder;");

  /// from: public android.text.style.TtsSpan.ElectronicBuilder setPassword(java.lang.String password)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_PASSWORD argument.
  ///@return This instance.
  TtsSpan_ElectronicBuilder setPassword(jni.JniString password) =>
      TtsSpan_ElectronicBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setPassword,
          jni.JniType.objectType,
          [password.reference]).object);

  static final _id_setDomain = jniAccessors.getMethodIDOf(
      _classRef,
      "setDomain",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$ElectronicBuilder;");

  /// from: public android.text.style.TtsSpan.ElectronicBuilder setDomain(java.lang.String domain)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_DOMAIN argument.
  ///@param domain The domain, for example "source.android.com".
  ///@return This instance.
  TtsSpan_ElectronicBuilder setDomain(jni.JniString domain) =>
      TtsSpan_ElectronicBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setDomain,
          jni.JniType.objectType,
          [domain.reference]).object);

  static final _id_setPort = jniAccessors.getMethodIDOf(_classRef, "setPort",
      "(I)Landroid/text/style/TtsSpan\$ElectronicBuilder;");

  /// from: public android.text.style.TtsSpan.ElectronicBuilder setPort(int port)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_PORT argument.
  ///@return This instance.
  TtsSpan_ElectronicBuilder setPort(int port) =>
      TtsSpan_ElectronicBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setPort, jni.JniType.objectType, [port]).object);

  static final _id_setPath = jniAccessors.getMethodIDOf(_classRef, "setPath",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$ElectronicBuilder;");

  /// from: public android.text.style.TtsSpan.ElectronicBuilder setPath(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_PATH argument.
  ///@param path For example "source/index.html".
  ///@return This instance.
  TtsSpan_ElectronicBuilder setPath(jni.JniString path) =>
      TtsSpan_ElectronicBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setPath,
          jni.JniType.objectType,
          [path.reference]).object);

  static final _id_setQueryString = jniAccessors.getMethodIDOf(
      _classRef,
      "setQueryString",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$ElectronicBuilder;");

  /// from: public android.text.style.TtsSpan.ElectronicBuilder setQueryString(java.lang.String queryString)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_QUERY_STRING argument.
  ///@param queryString For example "arg=value&argtwo=value".
  ///@return This instance.
  TtsSpan_ElectronicBuilder setQueryString(jni.JniString queryString) =>
      TtsSpan_ElectronicBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setQueryString,
          jni.JniType.objectType,
          [queryString.reference]).object);

  static final _id_setFragmentId = jniAccessors.getMethodIDOf(
      _classRef,
      "setFragmentId",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$ElectronicBuilder;");

  /// from: public android.text.style.TtsSpan.ElectronicBuilder setFragmentId(java.lang.String fragmentId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_FRAGMENT_ID argument.
  ///@return This instance.
  TtsSpan_ElectronicBuilder setFragmentId(jni.JniString fragmentId) =>
      TtsSpan_ElectronicBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setFragmentId,
          jni.JniType.objectType,
          [fragmentId.reference]).object);
}

/// from: android.text.style.TtsSpan$DigitsBuilder
///
/// A builder for TtsSpans of type \#TYPE_DIGITS.
class TtsSpan_DigitsBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$DigitsBuilder");
  TtsSpan_DigitsBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_DIGITS.
  TtsSpan_DigitsBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String digits)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_DIGITS
  /// and sets the \#ARG_DIGITS argument.
  TtsSpan_DigitsBuilder(jni.JniString digits)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [digits.reference]).object);

  static final _id_setDigits = jniAccessors.getMethodIDOf(
      _classRef,
      "setDigits",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$DigitsBuilder;");

  /// from: public android.text.style.TtsSpan.DigitsBuilder setDigits(java.lang.String digits)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_DIGITS argument.
  ///@param digits A string of digits.
  ///@return This instance.
  TtsSpan_DigitsBuilder setDigits(jni.JniString digits) =>
      TtsSpan_DigitsBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setDigits, jni.JniType.objectType, [digits.reference]).object);
}

/// from: android.text.style.TtsSpan$DecimalBuilder
///
/// A builder for TtsSpans of type \#TYPE_DECIMAL.
class TtsSpan_DecimalBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$DecimalBuilder");
  TtsSpan_DecimalBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_DECIMAL.
  TtsSpan_DecimalBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(DII)V");

  /// from: public void <init>(double number, int minimumFractionDigits, int maximumFractionDigits)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_DECIMAL and sets the
  /// \#ARG_INTEGER_PART and \#ARG_FRACTIONAL_PART arguments.
  ///@see \#setArgumentsFromDouble(double, int, int)
  TtsSpan_DecimalBuilder.ctor2(
      double number, int minimumFractionDigits, int maximumFractionDigits)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [number, minimumFractionDigits, maximumFractionDigits]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String integerPart, java.lang.String fractionalPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_DECIMAL and sets the
  /// \#ARG_INTEGER_PART and \#ARG_FRACTIONAL_PART arguments.
  TtsSpan_DecimalBuilder.ctor3(
      jni.JniString integerPart, jni.JniString fractionalPart)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3,
            [integerPart.reference, fractionalPart.reference]).object);

  static final _id_setArgumentsFromDouble = jniAccessors.getMethodIDOf(
      _classRef,
      "setArgumentsFromDouble",
      "(DII)Landroid/text/style/TtsSpan\$DecimalBuilder;");

  /// from: public android.text.style.TtsSpan.DecimalBuilder setArgumentsFromDouble(double number, int minimumFractionDigits, int maximumFractionDigits)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method takes a double and a maximum number of fractional
  /// digits, it sets the \#ARG_INTEGER_PART and
  /// \#ARG_FRACTIONAL_PART arguments.
  ///@param number The number to be synthesized.
  ///@param minimumFractionDigits The minimum number of fraction digits
  ///     that are pronounced.
  ///@param maximumFractionDigits The maximum number of fraction digits
  ///     that are pronounced. If maximumFractionDigits <
  ///     minimumFractionDigits then minimumFractionDigits will be assumed
  ///     to be equal to maximumFractionDigits.
  ///@return This instance.
  TtsSpan_DecimalBuilder setArgumentsFromDouble(double number,
          int minimumFractionDigits, int maximumFractionDigits) =>
      TtsSpan_DecimalBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setArgumentsFromDouble,
          jni.JniType.objectType,
          [number, minimumFractionDigits, maximumFractionDigits]).object);

  static final _id_setIntegerPart = jniAccessors.getMethodIDOf(_classRef,
      "setIntegerPart", "(J)Landroid/text/style/TtsSpan\$DecimalBuilder;");

  /// from: public android.text.style.TtsSpan.DecimalBuilder setIntegerPart(long integerPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method that converts the number to a String and sets it
  /// to the value for \#ARG_INTEGER_PART.
  ///@param integerPart The integer part of the decimal.
  ///@return This instance.
  TtsSpan_DecimalBuilder setIntegerPart(int integerPart) =>
      TtsSpan_DecimalBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setIntegerPart, jni.JniType.objectType, [integerPart]).object);

  static final _id_setIntegerPart1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setIntegerPart",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$DecimalBuilder;");

  /// from: public android.text.style.TtsSpan.DecimalBuilder setIntegerPart(java.lang.String integerPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_INTEGER_PART argument.
  ///@param integerPart A non-empty string of digits with an optional
  ///     leading + or -.
  ///@return This instance.
  TtsSpan_DecimalBuilder setIntegerPart1(jni.JniString integerPart) =>
      TtsSpan_DecimalBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setIntegerPart1,
          jni.JniType.objectType,
          [integerPart.reference]).object);

  static final _id_setFractionalPart = jniAccessors.getMethodIDOf(
      _classRef,
      "setFractionalPart",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$DecimalBuilder;");

  /// from: public android.text.style.TtsSpan.DecimalBuilder setFractionalPart(java.lang.String fractionalPart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_FRACTIONAL_PART argument.
  ///@param fractionalPart A non-empty string of digits.
  ///@return This instance.
  TtsSpan_DecimalBuilder setFractionalPart(jni.JniString fractionalPart) =>
      TtsSpan_DecimalBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setFractionalPart,
          jni.JniType.objectType,
          [fractionalPart.reference]).object);
}

/// from: android.text.style.TtsSpan$DateBuilder
///
/// A builder for TtsSpans of type \#TYPE_DATE.
class TtsSpan_DateBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$DateBuilder");
  TtsSpan_DateBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_DATE.
  TtsSpan_DateBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V");

  /// from: public void <init>(java.lang.Integer weekday, java.lang.Integer day, java.lang.Integer month, java.lang.Integer year)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_TIME and
  /// possibly sets the \#ARG_WEEKDAY, \#ARG_DAY,
  /// \#ARG_MONTH and \#ARG_YEAR arguments. Pass null to any
  /// argument to leave it unset.
  TtsSpan_DateBuilder.ctor2(jni.JniObject weekday, jni.JniObject day,
      jni.JniObject month, jni.JniObject year)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, [
          weekday.reference,
          day.reference,
          month.reference,
          year.reference
        ]).object);

  static final _id_setWeekday = jniAccessors.getMethodIDOf(
      _classRef, "setWeekday", "(I)Landroid/text/style/TtsSpan\$DateBuilder;");

  /// from: public android.text.style.TtsSpan.DateBuilder setWeekday(int weekday)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_WEEKDAY argument.
  ///@param weekday The value to be set for weekday. See
  ///     \#ARG_WEEKDAY.
  ///@return This instance.
  ///@see \#ARG_WEEKDAY
  TtsSpan_DateBuilder setWeekday(int weekday) =>
      TtsSpan_DateBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setWeekday, jni.JniType.objectType, [weekday]).object);

  static final _id_setDay = jniAccessors.getMethodIDOf(
      _classRef, "setDay", "(I)Landroid/text/style/TtsSpan\$DateBuilder;");

  /// from: public android.text.style.TtsSpan.DateBuilder setDay(int day)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_DAY argument.
  ///@param day The value to be set for day. See \#ARG_DAY.
  ///@return This instance.
  ///@see \#ARG_DAY
  TtsSpan_DateBuilder setDay(int day) =>
      TtsSpan_DateBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setDay, jni.JniType.objectType, [day]).object);

  static final _id_setMonth = jniAccessors.getMethodIDOf(
      _classRef, "setMonth", "(I)Landroid/text/style/TtsSpan\$DateBuilder;");

  /// from: public android.text.style.TtsSpan.DateBuilder setMonth(int month)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_MONTH argument.
  ///@param month The value to be set for month. See \#ARG_MONTH.
  ///@return This instance.
  ///@see \#ARG_MONTH
  TtsSpan_DateBuilder setMonth(int month) =>
      TtsSpan_DateBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setMonth, jni.JniType.objectType, [month]).object);

  static final _id_setYear = jniAccessors.getMethodIDOf(
      _classRef, "setYear", "(I)Landroid/text/style/TtsSpan\$DateBuilder;");

  /// from: public android.text.style.TtsSpan.DateBuilder setYear(int year)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_YEAR argument.
  ///@param year The value to be set for year. See \#ARG_YEAR.
  ///@return This instance.
  ///@see \#ARG_YEAR
  TtsSpan_DateBuilder setYear(int year) =>
      TtsSpan_DateBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setYear, jni.JniType.objectType, [year]).object);
}

/// from: android.text.style.TtsSpan$CardinalBuilder
///
/// A builder for TtsSpans of type \#TYPE_CARDINAL.
class TtsSpan_CardinalBuilder extends TtsSpan_SemioticClassBuilder {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$CardinalBuilder");
  TtsSpan_CardinalBuilder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for a TtsSpan of type \#TYPE_CARDINAL.
  TtsSpan_CardinalBuilder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(J)V");

  /// from: public void <init>(long number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_CARDINAL and sets the
  /// \#ARG_NUMBER argument.
  ///@param number The number to synthesize.
  ///@see \#setNumber(long)
  TtsSpan_CardinalBuilder.ctor2(int number)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [number]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a TtsSpan of type \#TYPE_CARDINAL and sets the
  /// \#ARG_NUMBER argument.
  ///@param number The number to synthesize.
  ///@see \#setNumber(String)
  TtsSpan_CardinalBuilder(jni.JniString number)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [number.reference]).object);

  static final _id_setNumber = jniAccessors.getMethodIDOf(_classRef,
      "setNumber", "(J)Landroid/text/style/TtsSpan\$CardinalBuilder;");

  /// from: public android.text.style.TtsSpan.CardinalBuilder setNumber(long number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience method that converts the number to a String and set it to
  /// the value for \#ARG_NUMBER.
  ///@param number The number that will be synthesized.
  ///@return This instance.
  TtsSpan_CardinalBuilder setNumber(int number) =>
      TtsSpan_CardinalBuilder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setNumber, jni.JniType.objectType, [number]).object);

  static final _id_setNumber1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setNumber",
      "(Ljava/lang/String;)Landroid/text/style/TtsSpan\$CardinalBuilder;");

  /// from: public android.text.style.TtsSpan.CardinalBuilder setNumber(java.lang.String number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the \#ARG_NUMBER argument.
  ///@param number A non-empty string of digits with an optional
  ///     leading + or -.
  ///@return This instance.
  TtsSpan_CardinalBuilder setNumber1(jni.JniString number) =>
      TtsSpan_CardinalBuilder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setNumber1, jni.JniType.objectType, [number.reference]).object);
}

/// from: android.text.style.TtsSpan$Builder
///
/// A simple builder for TtsSpans.
/// This builder can be used directly, but the more specific subclasses of
/// this builder like TtsSpan.TextBuilder and
/// TtsSpan.CardinalBuilder are likely more useful.
///
/// This class uses generics so methods from this class can return instances
/// of its child classes, resulting in a fluent API (CRTP pattern).
class TtsSpan_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/TtsSpan\$Builder");
  TtsSpan_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TtsSpan_Builder(jni.JniString type)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [type.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/text/style/TtsSpan;");

  /// from: public android.text.style.TtsSpan build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a TtsSpan built from the parameters set by the setter
  /// methods.
  ///@return A TtsSpan built with parameters of this builder.
  TtsSpan build() => TtsSpan.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
