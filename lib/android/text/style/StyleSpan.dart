// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "MetricAffectingSpan.dart" as metricaffectingspan_;

import "../../os/Parcel.dart" as parcel_;

import "../TextPaint.dart" as textpaint_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.style.StyleSpan
///
/// Span that allows setting the style of the text it's attached to.
/// Possible styles are: Typeface\#NORMAL, Typeface\#BOLD, Typeface\#ITALIC and
/// Typeface\#BOLD_ITALIC.
///
/// Note that styles are cumulative -- if both bold and italic are set in
/// separate spans, or if the base style is bold and a span calls for italic,
/// you get bold italic.  You can't turn off a style from the base style.
///
/// For example, the <code>StyleSpan</code> can be used like this:
/// <pre>
/// SpannableString string = new SpannableString("Bold and italic text");
/// string.setSpan(new StyleSpan(Typeface.BOLD), 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
/// string.setSpan(new StyleSpan(Typeface.ITALIC), 9, 15, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
/// </pre>
/// <img src="{@docRoot}reference/android/images/text/style/stylespan.png"/>
/// <figcaption>Text styled bold and italic with the <code>StyleSpan</code>.</figcaption>
class StyleSpan extends metricaffectingspan_.MetricAffectingSpan {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/StyleSpan");
  StyleSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int style)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a StyleSpan from a style.
  ///@param style An integer constant describing the style for this span. Examples
  ///              include bold, italic, and normal. Values are constants defined
  ///              in Typeface.
  StyleSpan.ctor1(int style)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [style]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel src)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a StyleSpan from a parcel.
  ///@param src the parcel
  ///
  /// This value must never be {@code null}.
  StyleSpan.ctor2(parcel_.Parcel src)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [src.reference]).object);

  static final _id_getSpanTypeId =
      jniAccessors.getMethodIDOf(_classRef, "getSpanTypeId", "()I");

  /// from: public int getSpanTypeId()
  int getSpanTypeId() => jniAccessors.callMethodWithArgs(
      reference, _id_getSpanTypeId, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_getStyle =
      jniAccessors.getMethodIDOf(_classRef, "getStyle", "()I");

  /// from: public int getStyle()
  ///
  /// Returns the style constant defined in Typeface.
  int getStyle() => jniAccessors.callMethodWithArgs(
      reference, _id_getStyle, jni.JniType.intType, []).integer;

  static final _id_updateDrawState1 = jniAccessors.getMethodIDOf(
      _classRef, "updateDrawState", "(Landroid/text/TextPaint;)V");

  /// from: public void updateDrawState(android.text.TextPaint ds)
  void updateDrawState1(textpaint_.TextPaint ds) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateDrawState1,
          jni.JniType.voidType, [ds.reference]).check();

  static final _id_updateMeasureState = jniAccessors.getMethodIDOf(
      _classRef, "updateMeasureState", "(Landroid/text/TextPaint;)V");

  /// from: public void updateMeasureState(android.text.TextPaint paint)
  void updateMeasureState(textpaint_.TextPaint paint) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateMeasureState,
          jni.JniType.voidType, [paint.reference]).check();
}
