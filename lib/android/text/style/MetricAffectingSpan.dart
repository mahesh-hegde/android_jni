// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "CharacterStyle.dart" as characterstyle_;

import "../TextPaint.dart" as textpaint_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.style.MetricAffectingSpan
///
/// The classes that affect character-level text formatting in a way that
/// changes the width or height of characters extend this class.
class MetricAffectingSpan extends characterstyle_.CharacterStyle {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/MetricAffectingSpan");
  MetricAffectingSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MetricAffectingSpan()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_updateMeasureState = jniAccessors.getMethodIDOf(
      _classRef, "updateMeasureState", "(Landroid/text/TextPaint;)V");

  /// from: public abstract void updateMeasureState(android.text.TextPaint textPaint)
  ///
  /// Classes that extend MetricAffectingSpan implement this method to update the text formatting
  /// in a way that can change the width or height of characters.
  ///@param textPaint the paint used for drawing the text
  ///
  /// This value must never be {@code null}.
  void updateMeasureState(textpaint_.TextPaint textPaint) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateMeasureState,
          jni.JniType.voidType, [textPaint.reference]).check();

  static final _id_getUnderlying1 = jniAccessors.getMethodIDOf(
      _classRef, "getUnderlying", "()Landroid/text/style/MetricAffectingSpan;");

  /// from: public android.text.style.MetricAffectingSpan getUnderlying()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns "this" for most MetricAffectingSpans, but for
  /// MetricAffectingSpans that were generated by \#wrap,
  /// returns the underlying MetricAffectingSpan.
  MetricAffectingSpan getUnderlying1() =>
      MetricAffectingSpan.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUnderlying1, jni.JniType.objectType, []).object);
}
