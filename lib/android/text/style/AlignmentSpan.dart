// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../Layout.dart" as layout_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.style.AlignmentSpan
///
/// Span that allows defining the alignment of text at the paragraph level.
class AlignmentSpan extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/AlignmentSpan");
  AlignmentSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getAlignment = jniAccessors.getMethodIDOf(
      _classRef, "getAlignment", "()Landroid/text/Layout\$Alignment;");

  /// from: public abstract android.text.Layout.Alignment getAlignment()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the alignment of the text.
  ///@return the text alignment
  layout_.Layout_Alignment getAlignment() =>
      layout_.Layout_Alignment.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAlignment, jni.JniType.objectType, []).object);
}

/// from: android.text.style.AlignmentSpan$Standard
///
/// Default implementation of the AlignmentSpan.
///
/// For example, a text written in a left to right language, like English, which is by default
/// aligned to the left, can be aligned opposite to the layout direction like this:
/// <pre>{@code SpannableString string = new SpannableString("Text with opposite alignment");
///string.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), 0,
///string.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);}</pre>
/// <img src="{@docRoot}reference/android/images/text/style/ltralignmentspan.png"/>
/// <figcaption>Align left to right text opposite to the layout direction.</figcaption>
///
/// A text written in a right to left language, like Hebrew, which is by default aligned to the
/// right, can be aligned opposite to the layout direction like this:
/// <pre>{@code SpannableString string = new SpannableString("\u05d8\u05e7\u05e1\u05d8 \u05e2\u05dd \u05d9\u05d9\u05e9\u05d5\u05e8 \u05d4\u05e4\u05d5\u05da");
///string.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), 0,
///string.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);}</pre>
/// <img src="{@docRoot}reference/android/images/text/style/rtlalignmentspan.png"/>
/// <figcaption>Align right to left text opposite to the layout direction.</figcaption>
class AlignmentSpan_Standard extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/AlignmentSpan\$Standard");
  AlignmentSpan_Standard.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/text/Layout\$Alignment;)V");

  /// from: public void <init>(android.text.Layout.Alignment align)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a Standard from an alignment.
  ///@param align This value must never be {@code null}.
  AlignmentSpan_Standard(layout_.Layout_Alignment align)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [align.reference]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel src)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a Standard from a parcel.
  ///@param src This value must never be {@code null}.
  AlignmentSpan_Standard.ctor1(parcel_.Parcel src)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [src.reference]).object);

  static final _id_getSpanTypeId =
      jniAccessors.getMethodIDOf(_classRef, "getSpanTypeId", "()I");

  /// from: public int getSpanTypeId()
  int getSpanTypeId() => jniAccessors.callMethodWithArgs(
      reference, _id_getSpanTypeId, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// @param dest This value must never be {@code null}.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_getAlignment = jniAccessors.getMethodIDOf(
      _classRef, "getAlignment", "()Landroid/text/Layout\$Alignment;");

  /// from: public android.text.Layout.Alignment getAlignment()
  /// The returned object must be deleted after use, by calling the `delete` method.
  layout_.Layout_Alignment getAlignment() =>
      layout_.Layout_Alignment.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAlignment, jni.JniType.objectType, []).object);
}
