// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcel.dart" as parcel_;

import "../../graphics/Canvas.dart" as canvas_;

import "../../graphics/Paint.dart" as paint_;

import "../Layout.dart" as layout_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.style.QuoteSpan
///
/// A span which styles paragraphs by adding a vertical stripe at the beginning of the text
/// (respecting layout direction).
///
/// A <code>QuoteSpan</code> must be attached from the first character to the last character of a
/// single paragraph, otherwise the span will not be displayed.
///
/// <code>QuoteSpans</code> allow configuring the following elements:
/// <ul>
/// <li>__color__ - the vertical stripe color. By default, the stripe color is 0xff0000ff</li>
/// <li>__gap width__ - the distance, in pixels, between the stripe and the paragraph.
/// Default value is 2px.</li>
/// <li>__stripe width__ - the width, in pixels, of the stripe. Default value is
/// 2px.</li>
/// </ul>
/// For example, a <code>QuoteSpan</code> using the default values can be constructed like this:
/// <pre>{@code SpannableString string = new SpannableString("Text with quote span on a long line");
///string.setSpan(new QuoteSpan(), 0, string.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);}</pre>
/// <img src="{@docRoot}reference/android/images/text/style/defaultquotespan.png"/>
/// <figcaption><code>QuoteSpan</code> constructed with default values.</figcaption>
///
///
/// To construct a <code>QuoteSpan</code> with a green stripe, of 20px in width and a gap width of
/// 40px:
/// <pre>{@code SpannableString string = new SpannableString("Text with quote span on a long line");
///string.setSpan(new QuoteSpan(Color.GREEN, 20, 40), 0, string.length(),
///Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);}</pre>
/// <img src="{@docRoot}reference/android/images/text/style/customquotespan.png"/>
/// <figcaption>Customized <code>QuoteSpan</code>.</figcaption>
class QuoteSpan extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/QuoteSpan");
  QuoteSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int STANDARD_COLOR
  ///
  /// Default color for the quote stripe.
  static const STANDARD_COLOR = -16776961;

  /// from: static public final int STANDARD_GAP_WIDTH_PX
  ///
  /// Default gap width in pixels.
  static const STANDARD_GAP_WIDTH_PX = 2;

  /// from: static public final int STANDARD_STRIPE_WIDTH_PX
  ///
  /// Default stripe width in pixels.
  static const STANDARD_STRIPE_WIDTH_PX = 2;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a QuoteSpan with the default values.
  QuoteSpan()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int color)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a QuoteSpan based on a color.
  ///@param color the color of the quote stripe.
  QuoteSpan.ctor1(int color)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [color]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(III)V");

  /// from: public void <init>(int color, int stripeWidth, int gapWidth)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a QuoteSpan based on a color, a stripe width and the width of the gap
  /// between the stripe and the text.
  ///@param color the color of the quote stripe.
  ///@param stripeWidth the width of the stripe.
  /// Value is 0 or greater
  ///@param gapWidth the width of the gap between the stripe and the text.
  ///
  /// Value is 0 or greater
  QuoteSpan.ctor2(int color, int stripeWidth, int gapWidth)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [color, stripeWidth, gapWidth]).object);

  static final _id_ctor3 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel src)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a QuoteSpan from a parcel.
  ///@param src This value must never be {@code null}.
  QuoteSpan.ctor3(parcel_.Parcel src)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor3, [src.reference]).object);

  static final _id_getSpanTypeId =
      jniAccessors.getMethodIDOf(_classRef, "getSpanTypeId", "()I");

  /// from: public int getSpanTypeId()
  int getSpanTypeId() => jniAccessors.callMethodWithArgs(
      reference, _id_getSpanTypeId, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_getColor =
      jniAccessors.getMethodIDOf(_classRef, "getColor", "()I");

  /// from: public int getColor()
  ///
  /// Get the color of the quote stripe.
  ///@return the color of the quote stripe.
  int getColor() => jniAccessors.callMethodWithArgs(
      reference, _id_getColor, jni.JniType.intType, []).integer;

  static final _id_getStripeWidth =
      jniAccessors.getMethodIDOf(_classRef, "getStripeWidth", "()I");

  /// from: public int getStripeWidth()
  ///
  /// Get the width of the quote stripe.
  ///@return the width of the quote stripe.
  int getStripeWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getStripeWidth, jni.JniType.intType, []).integer;

  static final _id_getGapWidth =
      jniAccessors.getMethodIDOf(_classRef, "getGapWidth", "()I");

  /// from: public int getGapWidth()
  ///
  /// Get the width of the gap between the stripe and the text.
  ///@return the width of the gap between the stripe and the text.
  int getGapWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getGapWidth, jni.JniType.intType, []).integer;

  static final _id_getLeadingMargin =
      jniAccessors.getMethodIDOf(_classRef, "getLeadingMargin", "(Z)I");

  /// from: public int getLeadingMargin(boolean first)
  int getLeadingMargin(bool first) => jniAccessors.callMethodWithArgs(
      reference, _id_getLeadingMargin, jni.JniType.intType, [first]).integer;

  static final _id_drawLeadingMargin = jniAccessors.getMethodIDOf(
      _classRef,
      "drawLeadingMargin",
      "(Landroid/graphics/Canvas;Landroid/graphics/Paint;IIIIILjava/lang/CharSequence;IIZLandroid/text/Layout;)V");

  /// from: public void drawLeadingMargin(android.graphics.Canvas c, android.graphics.Paint p, int x, int dir, int top, int baseline, int bottom, java.lang.CharSequence text, int start, int end, boolean first, android.text.Layout layout)
  ///
  /// @param c This value must never be {@code null}.
  ///@param p This value must never be {@code null}.
  ///@param text This value must never be {@code null}.
  ///@param layout This value must never be {@code null}.
  void drawLeadingMargin(
          canvas_.Canvas c,
          paint_.Paint p,
          int x,
          int dir,
          int top,
          int baseline,
          int bottom,
          jni.JniObject text,
          int start,
          int end,
          bool first,
          layout_.Layout layout) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_drawLeadingMargin, jni.JniType.voidType, [
        c.reference,
        p.reference,
        x,
        dir,
        top,
        baseline,
        bottom,
        text.reference,
        start,
        end,
        first,
        layout.reference
      ]).check();
}
