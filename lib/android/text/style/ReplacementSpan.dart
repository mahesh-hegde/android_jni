// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "MetricAffectingSpan.dart" as metricaffectingspan_;

import "../../graphics/Paint.dart" as paint_;

import "../../graphics/Canvas.dart" as canvas_;

import "../TextPaint.dart" as textpaint_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.style.ReplacementSpan
class ReplacementSpan extends metricaffectingspan_.MetricAffectingSpan {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/ReplacementSpan");
  ReplacementSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ReplacementSpan()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getSize = jniAccessors.getMethodIDOf(_classRef, "getSize",
      "(Landroid/graphics/Paint;Ljava/lang/CharSequence;IILandroid/graphics/Paint\$FontMetricsInt;)I");

  /// from: public abstract int getSize(android.graphics.Paint paint, java.lang.CharSequence text, int start, int end, android.graphics.Paint.FontMetricsInt fm)
  ///
  /// Returns the width of the span. Extending classes can set the height of the span by updating
  /// attributes of android.graphics.Paint.FontMetricsInt. If the span covers the whole
  /// text, and the height is not set,
  /// \#draw(Canvas, CharSequence, int, int, float, int, int, int, Paint) will not be
  /// called for the span.
  ///@param paint Paint instance.
  /// This value must never be {@code null}.
  ///@param text Current text.
  ///@param start Start character index for span.
  /// Value is 0 or greater
  ///@param end End character index for span.
  /// Value is 0 or greater
  ///@param fm Font metrics, can be null.
  /// This value may be {@code null}.
  ///@return Width of the span.
  int getSize(paint_.Paint paint, jni.JniObject text, int start, int end,
          paint_.Paint_FontMetricsInt fm) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getSize,
          jni.JniType.intType,
          [paint.reference, text.reference, start, end, fm.reference]).integer;

  static final _id_draw = jniAccessors.getMethodIDOf(_classRef, "draw",
      "(Landroid/graphics/Canvas;Ljava/lang/CharSequence;IIFIIILandroid/graphics/Paint;)V");

  /// from: public abstract void draw(android.graphics.Canvas canvas, java.lang.CharSequence text, int start, int end, float x, int top, int y, int bottom, android.graphics.Paint paint)
  ///
  /// Draws the span into the canvas.
  ///@param canvas Canvas into which the span should be rendered.
  /// This value must never be {@code null}.
  ///@param text Current text.
  ///@param start Start character index for span.
  /// Value is 0 or greater
  ///@param end End character index for span.
  /// Value is 0 or greater
  ///@param x Edge of the replacement closest to the leading margin.
  ///@param top Top of the line.
  ///@param y Baseline.
  ///@param bottom Bottom of the line.
  ///@param paint Paint instance.
  ///
  /// This value must never be {@code null}.
  void draw(canvas_.Canvas canvas, jni.JniObject text, int start, int end,
          double x, int top, int y, int bottom, paint_.Paint paint) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_draw, jni.JniType.voidType, [
        canvas.reference,
        text.reference,
        start,
        end,
        x,
        top,
        y,
        bottom,
        paint.reference
      ]).check();

  static final _id_updateMeasureState = jniAccessors.getMethodIDOf(
      _classRef, "updateMeasureState", "(Landroid/text/TextPaint;)V");

  /// from: public void updateMeasureState(android.text.TextPaint p)
  ///
  /// This method does nothing, since ReplacementSpans are measured
  /// explicitly instead of affecting Paint properties.
  void updateMeasureState(textpaint_.TextPaint p) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateMeasureState,
          jni.JniType.voidType, [p.reference]).check();

  static final _id_updateDrawState1 = jniAccessors.getMethodIDOf(
      _classRef, "updateDrawState", "(Landroid/text/TextPaint;)V");

  /// from: public void updateDrawState(android.text.TextPaint ds)
  ///
  /// This method does nothing, since ReplacementSpans are drawn
  /// explicitly instead of affecting Paint properties.
  void updateDrawState1(textpaint_.TextPaint ds) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateDrawState1,
          jni.JniType.voidType, [ds.reference]).check();
}
