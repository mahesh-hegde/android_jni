// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "MetricAffectingSpan.dart" as metricaffectingspan_;

import "../../os/Parcel.dart" as parcel_;

import "../TextPaint.dart" as textpaint_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.style.RelativeSizeSpan
///
/// Uniformly scales the size of the text to which it's attached by a certain proportion.
///
/// For example, a <code>RelativeSizeSpan</code> that increases the text size by 50% can be
/// constructed like this:
/// <pre>{@code
///  SpannableString string = new SpannableString("Text with relative size span");
///string.setSpan(new RelativeSizeSpan(1.5f), 10, 24, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);}</pre>
/// <img src="{@docRoot}reference/android/images/text/style/relativesizespan.png"/>
/// <figcaption>Text increased by 50% with <code>RelativeSizeSpan</code>.</figcaption>
class RelativeSizeSpan extends metricaffectingspan_.MetricAffectingSpan {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/RelativeSizeSpan");
  RelativeSizeSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(F)V");

  /// from: public void <init>(float proportion)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a RelativeSizeSpan based on a proportion.
  ///@param proportion the proportion with which the text is scaled.
  ///
  /// Value is 0 or greater
  RelativeSizeSpan.ctor1(double proportion)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [proportion]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel src)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a RelativeSizeSpan from a parcel.
  ///@param src This value must never be {@code null}.
  RelativeSizeSpan.ctor2(parcel_.Parcel src)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [src.reference]).object);

  static final _id_getSpanTypeId =
      jniAccessors.getMethodIDOf(_classRef, "getSpanTypeId", "()I");

  /// from: public int getSpanTypeId()
  int getSpanTypeId() => jniAccessors.callMethodWithArgs(
      reference, _id_getSpanTypeId, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// @param dest This value must never be {@code null}.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_getSizeChange =
      jniAccessors.getMethodIDOf(_classRef, "getSizeChange", "()F");

  /// from: public float getSizeChange()
  ///
  /// @return the proportion with which the text size is changed.
  double getSizeChange() => jniAccessors.callMethodWithArgs(
      reference, _id_getSizeChange, jni.JniType.floatType, []).float;

  static final _id_updateDrawState1 = jniAccessors.getMethodIDOf(
      _classRef, "updateDrawState", "(Landroid/text/TextPaint;)V");

  /// from: public void updateDrawState(android.text.TextPaint ds)
  ///
  /// @param ds This value must never be {@code null}.
  void updateDrawState1(textpaint_.TextPaint ds) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateDrawState1,
          jni.JniType.voidType, [ds.reference]).check();

  static final _id_updateMeasureState = jniAccessors.getMethodIDOf(
      _classRef, "updateMeasureState", "(Landroid/text/TextPaint;)V");

  /// from: public void updateMeasureState(android.text.TextPaint ds)
  ///
  /// @param ds This value must never be {@code null}.
  void updateMeasureState(textpaint_.TextPaint ds) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateMeasureState,
          jni.JniType.voidType, [ds.reference]).check();
}
