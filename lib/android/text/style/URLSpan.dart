// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ClickableSpan.dart" as clickablespan_;

import "../../os/Parcel.dart" as parcel_;

import "../../view/View.dart" as view_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.style.URLSpan
///
/// Implementation of the ClickableSpan that allows setting a url string. When
/// selecting and clicking on the text to which the span is attached, the <code>URLSpan</code>
/// will try to open the url, by launching an an Activity with an Intent\#ACTION_VIEW intent.
///
/// For example, a <code>URLSpan</code> can be used like this:
/// <pre>
/// SpannableString string = new SpannableString("Text with a url span");
/// string.setSpan(new URLSpan("http://www.developer.android.com"), 12, 15, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/// </pre>
/// <img src="{@docRoot}reference/android/images/text/style/urlspan.png"/>
/// <figcaption>Text with <code>URLSpan</code>.</figcaption>
class URLSpan extends clickablespan_.ClickableSpan {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/URLSpan");
  URLSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String url)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a URLSpan from a url string.
  ///@param url the url string
  URLSpan.ctor1(jni.JniString url)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [url.reference]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel src)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a URLSpan from a parcel.
  ///@param src This value must never be {@code null}.
  URLSpan.ctor2(parcel_.Parcel src)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [src.reference]).object);

  static final _id_getSpanTypeId =
      jniAccessors.getMethodIDOf(_classRef, "getSpanTypeId", "()I");

  /// from: public int getSpanTypeId()
  int getSpanTypeId() => jniAccessors.callMethodWithArgs(
      reference, _id_getSpanTypeId, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// @param dest This value must never be {@code null}.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_getURL =
      jniAccessors.getMethodIDOf(_classRef, "getURL", "()Ljava/lang/String;");

  /// from: public java.lang.String getURL()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the url string for this span.
  ///@return the url string.
  jni.JniString getURL() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getURL, jni.JniType.objectType, []).object);

  static final _id_onClick = jniAccessors.getMethodIDOf(
      _classRef, "onClick", "(Landroid/view/View;)V");

  /// from: public void onClick(android.view.View widget)
  void onClick(view_.View widget) => jniAccessors.callMethodWithArgs(
      reference, _id_onClick, jni.JniType.voidType, [widget.reference]).check();
}
