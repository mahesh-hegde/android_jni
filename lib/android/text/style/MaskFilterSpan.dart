// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "CharacterStyle.dart" as characterstyle_;

import "../../graphics/MaskFilter.dart" as maskfilter_;

import "../TextPaint.dart" as textpaint_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.style.MaskFilterSpan
///
/// Span that allows setting a MaskFilter to the text it's attached to.
///
/// For example, to blur a text, a android.graphics.BlurMaskFilter can be used:
/// <pre>
/// MaskFilter blurMask = new BlurMaskFilter(5f, BlurMaskFilter.Blur.NORMAL);
/// SpannableString string = new SpannableString("Text with blur mask");
/// string.setSpan(new MaskFilterSpan(blurMask), 10, 15, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/// </pre>
/// <img src="{@docRoot}reference/android/images/text/style/maskfilterspan.png"/>
/// <figcaption>Text blurred with the <code>MaskFilterSpan</code>.</figcaption>
class MaskFilterSpan extends characterstyle_.CharacterStyle {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/MaskFilterSpan");
  MaskFilterSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/MaskFilter;)V");

  /// from: public void <init>(android.graphics.MaskFilter filter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a MaskFilterSpan from a MaskFilter.
  ///@param filter the filter to be applied to the <code>TextPaint</code>
  MaskFilterSpan.ctor1(maskfilter_.MaskFilter filter)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [filter.reference]).object);

  static final _id_getMaskFilter = jniAccessors.getMethodIDOf(
      _classRef, "getMaskFilter", "()Landroid/graphics/MaskFilter;");

  /// from: public android.graphics.MaskFilter getMaskFilter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the mask filter for this span.
  ///@return the mask filter for this span
  maskfilter_.MaskFilter getMaskFilter() =>
      maskfilter_.MaskFilter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMaskFilter, jni.JniType.objectType, []).object);

  static final _id_updateDrawState = jniAccessors.getMethodIDOf(
      _classRef, "updateDrawState", "(Landroid/text/TextPaint;)V");

  /// from: public void updateDrawState(android.text.TextPaint ds)
  void updateDrawState(textpaint_.TextPaint ds) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateDrawState,
          jni.JniType.voidType, [ds.reference]).check();
}
