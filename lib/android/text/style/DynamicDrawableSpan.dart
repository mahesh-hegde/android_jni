// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ReplacementSpan.dart" as replacementspan_;

import "../../graphics/drawable/Drawable.dart" as drawable_;

import "../../graphics/Paint.dart" as paint_;

import "../../graphics/Canvas.dart" as canvas_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.style.DynamicDrawableSpan
///
/// Span that replaces the text it's attached to with a Drawable that can be aligned with
/// the bottom or with the baseline of the surrounding text.
///
/// For an implementation that constructs the drawable from various sources (<code>Bitmap</code>,
/// <code>Drawable</code>, resource id or <code>Uri</code>) use ImageSpan.
///
/// A simple implementation of <code>DynamicDrawableSpan</code> that uses drawables from resources
/// looks like this:
/// <pre>
/// class MyDynamicDrawableSpan extends DynamicDrawableSpan {
///
/// private final Context mContext;
/// private final int mResourceId;
///
/// public MyDynamicDrawableSpan(Context context, @DrawableRes int resourceId) {
///     mContext = context;
///     mResourceId = resourceId;
/// }
///
/// {@literal @}Override
/// public Drawable getDrawable() {
///      Drawable drawable = mContext.getDrawable(mResourceId);
///      drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
///      return drawable;
/// }
/// }</pre>
/// The class can be used like this:
/// <pre>
/// SpannableString string = new SpannableString("Text with a drawable span");
/// string.setSpan(new MyDynamicDrawableSpan(context, R.mipmap.ic_launcher), 12, 20, Spanned
/// .SPAN_EXCLUSIVE_EXCLUSIVE);</pre>
/// <img src="{@docRoot}reference/android/images/text/style/dynamicdrawablespan.png"/>
/// <figcaption>Replacing text with a drawable.</figcaption>
class DynamicDrawableSpan extends replacementspan_.ReplacementSpan {
  static final _classRef =
      jniAccessors.getClassOf("android/text/style/DynamicDrawableSpan");
  DynamicDrawableSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ALIGN_BASELINE
  ///
  /// A constant indicating that the bottom of this span should be aligned
  /// with the baseline of the surrounding text.
  static const ALIGN_BASELINE = 1;

  /// from: static public final int ALIGN_BOTTOM
  ///
  /// A constant indicating that the bottom of this span should be aligned
  /// with the bottom of the surrounding text, i.e., at the same level as the
  /// lowest descender in the text.
  static const ALIGN_BOTTOM = 0;

  static final _id_mVerticalAlignment =
      jniAccessors.getFieldIDOf(_classRef, "mVerticalAlignment", "I");

  /// from: protected final int mVerticalAlignment
  int get mVerticalAlignment => jniAccessors
      .getField(reference, _id_mVerticalAlignment, jni.JniType.intType)
      .integer;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DynamicDrawableSpan. The default vertical alignment is
  /// \#ALIGN_BOTTOM
  DynamicDrawableSpan()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: protected void <init>(int verticalAlignment)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DynamicDrawableSpan based on a vertical alignment.\
  ///@param verticalAlignment one of \#ALIGN_BOTTOM or \#ALIGN_BASELINE
  DynamicDrawableSpan.ctor1(int verticalAlignment)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [verticalAlignment]).object);

  static final _id_getVerticalAlignment =
      jniAccessors.getMethodIDOf(_classRef, "getVerticalAlignment", "()I");

  /// from: public int getVerticalAlignment()
  ///
  /// Returns the vertical alignment of this span, one of \#ALIGN_BOTTOM or
  /// \#ALIGN_BASELINE.
  int getVerticalAlignment() => jniAccessors.callMethodWithArgs(
      reference, _id_getVerticalAlignment, jni.JniType.intType, []).integer;

  static final _id_getDrawable = jniAccessors.getMethodIDOf(
      _classRef, "getDrawable", "()Landroid/graphics/drawable/Drawable;");

  /// from: public abstract android.graphics.drawable.Drawable getDrawable()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Your subclass must implement this method to provide the bitmap
  /// to be drawn.  The dimensions of the bitmap must be the same
  /// from each call to the next.
  drawable_.Drawable getDrawable() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDrawable, jni.JniType.objectType, []).object);

  static final _id_getSize = jniAccessors.getMethodIDOf(_classRef, "getSize",
      "(Landroid/graphics/Paint;Ljava/lang/CharSequence;IILandroid/graphics/Paint\$FontMetricsInt;)I");

  /// from: public int getSize(android.graphics.Paint paint, java.lang.CharSequence text, int start, int end, android.graphics.Paint.FontMetricsInt fm)
  ///
  /// @param paint This value must never be {@code null}.
  ///@param start Value is 0 or greater
  ///@param end Value is 0 or greater
  ///@param fm This value may be {@code null}.
  int getSize(paint_.Paint paint, jni.JniObject text, int start, int end,
          paint_.Paint_FontMetricsInt fm) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getSize,
          jni.JniType.intType,
          [paint.reference, text.reference, start, end, fm.reference]).integer;

  static final _id_draw = jniAccessors.getMethodIDOf(_classRef, "draw",
      "(Landroid/graphics/Canvas;Ljava/lang/CharSequence;IIFIIILandroid/graphics/Paint;)V");

  /// from: public void draw(android.graphics.Canvas canvas, java.lang.CharSequence text, int start, int end, float x, int top, int y, int bottom, android.graphics.Paint paint)
  ///
  /// @param canvas This value must never be {@code null}.
  ///@param start Value is 0 or greater
  ///@param end Value is 0 or greater
  ///@param paint This value must never be {@code null}.
  void draw(canvas_.Canvas canvas, jni.JniObject text, int start, int end,
          double x, int top, int y, int bottom, paint_.Paint paint) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_draw, jni.JniType.voidType, [
        canvas.reference,
        text.reference,
        start,
        end,
        x,
        top,
        y,
        bottom,
        paint.reference
      ]).check();
}
