// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.SpannableString
///
/// This is the class for text whose content is immutable but to which
/// markup objects can be attached and detached.
/// For mutable text, see SpannableStringBuilder.
class SpannableString extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/SpannableString");
  SpannableString.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.CharSequence source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// For the backward compatibility reasons, this constructor copies all spans including android.text.NoCopySpan.
  ///@param source source text
  SpannableString(jni.JniObject source)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [source.reference]).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(_classRef,
      "valueOf", "(Ljava/lang/CharSequence;)Landroid/text/SpannableString;");

  /// from: static public android.text.SpannableString valueOf(java.lang.CharSequence source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static SpannableString valueOf(jni.JniObject source) =>
      SpannableString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_valueOf, jni.JniType.objectType, [source.reference]).object);

  static final _id_setSpan = jniAccessors.getMethodIDOf(
      _classRef, "setSpan", "(Ljava/lang/Object;III)V");

  /// from: public void setSpan(java.lang.Object what, int start, int end, int flags)
  void setSpan(jni.JniObject what, int start, int end, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_setSpan,
          jni.JniType.voidType, [what.reference, start, end, flags]).check();

  static final _id_removeSpan = jniAccessors.getMethodIDOf(
      _classRef, "removeSpan", "(Ljava/lang/Object;)V");

  /// from: public void removeSpan(java.lang.Object what)
  void removeSpan(jni.JniObject what) => jniAccessors.callMethodWithArgs(
      reference,
      _id_removeSpan,
      jni.JniType.voidType,
      [what.reference]).check();

  static final _id_subSequence = jniAccessors.getMethodIDOf(
      _classRef, "subSequence", "(II)Ljava/lang/CharSequence;");

  /// from: public final java.lang.CharSequence subSequence(int start, int end)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject subSequence(int start, int end) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_subSequence, jni.JniType.objectType, [start, end]).object);

  static final _id_getChars =
      jniAccessors.getMethodIDOf(_classRef, "getChars", "(II[CI)V");

  /// from: public final void getChars(int start, int end, char[] dest, int off)
  void getChars(int start, int end, jni.JniObject dest, int off) =>
      jniAccessors.callMethodWithArgs(reference, _id_getChars,
          jni.JniType.voidType, [start, end, dest.reference, off]).check();

  static final _id_length =
      jniAccessors.getMethodIDOf(_classRef, "length", "()I");

  /// from: public final int length()
  int length() => jniAccessors.callMethodWithArgs(
      reference, _id_length, jni.JniType.intType, []).integer;

  static final _id_getSpanStart = jniAccessors.getMethodIDOf(
      _classRef, "getSpanStart", "(Ljava/lang/Object;)I");

  /// from: public int getSpanStart(java.lang.Object what)
  int getSpanStart(jni.JniObject what) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getSpanStart,
      jni.JniType.intType,
      [what.reference]).integer;

  static final _id_getSpanFlags = jniAccessors.getMethodIDOf(
      _classRef, "getSpanFlags", "(Ljava/lang/Object;)I");

  /// from: public int getSpanFlags(java.lang.Object what)
  int getSpanFlags(jni.JniObject what) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getSpanFlags,
      jni.JniType.intType,
      [what.reference]).integer;

  static final _id_nextSpanTransition = jniAccessors.getMethodIDOf(
      _classRef, "nextSpanTransition", "(IILjava/lang/Class;)I");

  /// from: public int nextSpanTransition(int start, int limit, java.lang.Class kind)
  int nextSpanTransition(int start, int limit, jni.JniObject kind) =>
      jniAccessors.callMethodWithArgs(reference, _id_nextSpanTransition,
          jni.JniType.intType, [start, limit, kind.reference]).integer;

  static final _id_getSpans = jniAccessors.getMethodIDOf(
      _classRef, "getSpans", "(IILjava/lang/Class;)[Ljava/lang/Object;");

  /// from: public T[] getSpans(int queryStart, int queryEnd, java.lang.Class<T> kind)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getSpans(int queryStart, int queryEnd, jni.JniObject kind) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getSpans,
          jni.JniType.objectType,
          [queryStart, queryEnd, kind.reference]).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_getSpanEnd = jniAccessors.getMethodIDOf(
      _classRef, "getSpanEnd", "(Ljava/lang/Object;)I");

  /// from: public int getSpanEnd(java.lang.Object what)
  int getSpanEnd(jni.JniObject what) => jniAccessors.callMethodWithArgs(
      reference, _id_getSpanEnd, jni.JniType.intType, [what.reference]).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public final java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_charAt =
      jniAccessors.getMethodIDOf(_classRef, "charAt", "(I)C");

  /// from: public final char charAt(int i)
  int charAt(int i) => jniAccessors.callMethodWithArgs(
      reference, _id_charAt, jni.JniType.charType, [i]).char;
}
