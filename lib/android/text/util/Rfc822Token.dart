// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.util.Rfc822Token
///
/// This class stores an RFC 822-like name, address, and comment,
/// and provides methods to convert them to quoted strings.
class Rfc822Token extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/util/Rfc822Token");
  Rfc822Token.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String name, java.lang.String address, java.lang.String comment)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new Rfc822Token with the specified name, address,
  /// and comment.
  ///@param name This value may be {@code null}.
  ///@param address This value may be {@code null}.
  ///@param comment This value may be {@code null}.
  Rfc822Token(jni.JniString name, jni.JniString address, jni.JniString comment)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [name.reference, address.reference, comment.reference]).object);

  static final _id_getName =
      jniAccessors.getMethodIDOf(_classRef, "getName", "()Ljava/lang/String;");

  /// from: public java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the name part.
  ///@return This value may be {@code null}.
  jni.JniString getName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_getAddress = jniAccessors.getMethodIDOf(
      _classRef, "getAddress", "()Ljava/lang/String;");

  /// from: public java.lang.String getAddress()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the address part.
  ///@return This value may be {@code null}.
  jni.JniString getAddress() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAddress, jni.JniType.objectType, []).object);

  static final _id_getComment = jniAccessors.getMethodIDOf(
      _classRef, "getComment", "()Ljava/lang/String;");

  /// from: public java.lang.String getComment()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the comment part.
  ///@return This value may be {@code null}.
  jni.JniString getComment() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getComment, jni.JniType.objectType, []).object);

  static final _id_setName =
      jniAccessors.getMethodIDOf(_classRef, "setName", "(Ljava/lang/String;)V");

  /// from: public void setName(java.lang.String name)
  ///
  /// Changes the name to the specified name.
  ///@param name This value may be {@code null}.
  void setName(jni.JniString name) => jniAccessors.callMethodWithArgs(
      reference, _id_setName, jni.JniType.voidType, [name.reference]).check();

  static final _id_setAddress = jniAccessors.getMethodIDOf(
      _classRef, "setAddress", "(Ljava/lang/String;)V");

  /// from: public void setAddress(java.lang.String address)
  ///
  /// Changes the address to the specified address.
  ///@param address This value may be {@code null}.
  void setAddress(jni.JniString address) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setAddress,
      jni.JniType.voidType,
      [address.reference]).check();

  static final _id_setComment = jniAccessors.getMethodIDOf(
      _classRef, "setComment", "(Ljava/lang/String;)V");

  /// from: public void setComment(java.lang.String comment)
  ///
  /// Changes the comment to the specified comment.
  ///@param comment This value may be {@code null}.
  void setComment(jni.JniString comment) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setComment,
      jni.JniType.voidType,
      [comment.reference]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the name (with quoting added if necessary),
  /// the comment (in parentheses), and the address (in angle brackets).
  /// This should be suitable for inclusion in an RFC 822 address list.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_quoteNameIfNecessary = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "quoteNameIfNecessary",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String quoteNameIfNecessary(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the name, conservatively quoting it if there are any
  /// characters that are likely to cause trouble outside of a
  /// quoted string, or returning it literally if it seems safe.
  static jni.JniString quoteNameIfNecessary(jni.JniString name) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_quoteNameIfNecessary,
          jni.JniType.objectType,
          [name.reference]).object);

  static final _id_quoteName = jniAccessors.getStaticMethodIDOf(
      _classRef, "quoteName", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String quoteName(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the name, with internal backslashes and quotation marks
  /// preceded by backslashes.  The outer quote marks themselves are not
  /// added by this method.
  static jni.JniString quoteName(jni.JniString name) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_quoteName, jni.JniType.objectType, [name.reference]).object);

  static final _id_quoteComment = jniAccessors.getStaticMethodIDOf(
      _classRef, "quoteComment", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String quoteComment(java.lang.String comment)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the comment, with internal backslashes and parentheses
  /// preceded by backslashes.  The outer parentheses themselves are
  /// not added by this method.
  static jni.JniString quoteComment(jni.JniString comment) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_quoteComment,
          jni.JniType.objectType,
          [comment.reference]).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;
}
