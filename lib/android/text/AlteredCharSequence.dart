// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.AlteredCharSequence
///
/// An AlteredCharSequence is a CharSequence that is largely mirrored from
/// another CharSequence, except that a specified range of characters are
/// mirrored from a different char array instead.
class AlteredCharSequence extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/AlteredCharSequence");
  AlteredCharSequence.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/CharSequence;[CII)V");

  /// from: void <init>(java.lang.CharSequence source, char[] sub, int substart, int subend)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AlteredCharSequence(
      jni.JniObject source, jni.JniObject sub, int substart, int subend)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [source.reference, sub.reference, substart, subend]).object);

  static final _id_make = jniAccessors.getStaticMethodIDOf(_classRef, "make",
      "(Ljava/lang/CharSequence;[CII)Landroid/text/AlteredCharSequence;");

  /// from: static public android.text.AlteredCharSequence make(java.lang.CharSequence source, char[] sub, int substart, int subend)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an AlteredCharSequence whose text (and possibly spans)
  /// are mirrored from <code>source</code>, except that the range of
  /// offsets <code>substart</code> inclusive to <code>subend</code> exclusive
  /// are mirrored instead from <code>sub</code>, beginning at offset 0.
  static AlteredCharSequence make(
          jni.JniObject source, jni.JniObject sub, int substart, int subend) =>
      AlteredCharSequence.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_make,
          jni.JniType.objectType,
          [source.reference, sub.reference, substart, subend]).object);

  static final _id_charAt =
      jniAccessors.getMethodIDOf(_classRef, "charAt", "(I)C");

  /// from: public char charAt(int off)
  int charAt(int off) => jniAccessors.callMethodWithArgs(
      reference, _id_charAt, jni.JniType.charType, [off]).char;

  static final _id_length =
      jniAccessors.getMethodIDOf(_classRef, "length", "()I");

  /// from: public int length()
  int length() => jniAccessors.callMethodWithArgs(
      reference, _id_length, jni.JniType.intType, []).integer;

  static final _id_subSequence = jniAccessors.getMethodIDOf(
      _classRef, "subSequence", "(II)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence subSequence(int start, int end)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject subSequence(int start, int end) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_subSequence, jni.JniType.objectType, [start, end]).object);

  static final _id_getChars =
      jniAccessors.getMethodIDOf(_classRef, "getChars", "(II[CI)V");

  /// from: public void getChars(int start, int end, char[] dest, int off)
  void getChars(int start, int end, jni.JniObject dest, int off) =>
      jniAccessors.callMethodWithArgs(reference, _id_getChars,
          jni.JniType.voidType, [start, end, dest.reference, off]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
