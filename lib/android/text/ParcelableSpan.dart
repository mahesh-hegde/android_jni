// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.ParcelableSpan
///
/// A special kind of Parcelable for objects that will serve as text spans.
/// This can only be used by code in the framework; it is not intended for
/// applications to implement their own Parcelable spans.
class ParcelableSpan extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/ParcelableSpan");
  ParcelableSpan.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getSpanTypeId =
      jniAccessors.getMethodIDOf(_classRef, "getSpanTypeId", "()I");

  /// from: public abstract int getSpanTypeId()
  ///
  /// Return a special type identifier for this span class.
  int getSpanTypeId() => jniAccessors.callMethodWithArgs(
      reference, _id_getSpanTypeId, jni.JniType.intType, []).integer;
}
