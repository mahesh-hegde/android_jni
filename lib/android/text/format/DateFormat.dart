// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../content/Context.dart" as context_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.format.DateFormat
///
/// Utility class for producing strings with formatted date/time.
///
/// Most callers should avoid supplying their own format strings to this
/// class' {@code format} methods and rely on the correctly localized ones
/// supplied by the system. This class' factory methods return
/// appropriately-localized java.text.DateFormat instances, suitable
/// for both formatting and parsing dates. For the canonical documentation
/// of format strings, see java.text.SimpleDateFormat.
///
/// In cases where the system does not provide a suitable pattern,
/// this class offers the \#getBestDateTimePattern method.
///
/// The {@code format} methods in this class implement a subset of Unicode
/// <a href="http://www.unicode.org/reports/tr35/\#Date_Format_Patterns">UTS \#35</a> patterns.
/// The subset currently supported by this class includes the following format characters:
/// {@code acdEHhLKkLMmsyz}. Up to API level 17, only {@code adEhkMmszy} were supported.
/// Note that this class incorrectly implements {@code k} as if it were {@code H} for backwards
/// compatibility.
///
/// See java.text.SimpleDateFormat for more documentation
/// about patterns, or if you need a more complete or correct implementation.
/// Note that the non-{@code format} methods in this class are implemented by
/// {@code SimpleDateFormat}.
class DateFormat extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/format/DateFormat");
  DateFormat.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  DateFormat()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_is24HourFormat = jniAccessors.getStaticMethodIDOf(
      _classRef, "is24HourFormat", "(Landroid/content/Context;)Z");

  /// from: static public boolean is24HourFormat(android.content.Context context)
  ///
  /// Returns true if times should be formatted as 24 hour times, false if times should be
  /// formatted as 12 hour (AM/PM) times. Based on the user's chosen locale and other preferences.
  ///@param context the context to use for the content resolver
  ///@return true if 24 hour time format is selected, false otherwise.
  static bool is24HourFormat(context_.Context context) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_is24HourFormat,
          jni.JniType.booleanType, [context.reference]).boolean;

  static final _id_getBestDateTimePattern = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getBestDateTimePattern",
      "(Ljava/util/Locale;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getBestDateTimePattern(java.util.Locale locale, java.lang.String skeleton)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the best possible localized form of the given skeleton for the given
  /// locale. A skeleton is similar to, and uses the same format characters as, a Unicode
  /// <a href="http://www.unicode.org/reports/tr35/\#Date_Format_Patterns">UTS \#35</a>
  /// pattern.
  ///
  /// One difference is that order is irrelevant. For example, "MMMMd" will return
  /// "MMMM d" in the {@code en_US} locale, but "d. MMMM" in the {@code de_CH} locale.
  ///
  /// Note also in that second example that the necessary punctuation for German was
  /// added. For the same input in {@code es_ES}, we'd have even more extra text:
  /// "d 'de' MMMM".
  ///
  /// This method will automatically correct for grammatical necessity. Given the
  /// same "MMMMd" input, this method will return "d LLLL" in the {@code fa_IR} locale,
  /// where stand-alone months are necessary. Lengths are preserved where meaningful,
  /// so "Md" would give a different result to "MMMd", say, except in a locale such as
  /// {@code ja_JP} where there is only one length of month.
  ///
  /// This method will only return patterns that are in CLDR, and is useful whenever
  /// you know what elements you want in your format string but don't want to make your
  /// code specific to any one locale.
  ///@param locale the locale into which the skeleton should be localized
  ///@param skeleton a skeleton as described above
  ///@return a string pattern suitable for use with java.text.SimpleDateFormat.
  static jni.JniString getBestDateTimePattern(
          jni.JniObject locale, jni.JniString skeleton) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getBestDateTimePattern,
          jni.JniType.objectType,
          [locale.reference, skeleton.reference]).object);

  static final _id_getTimeFormat = jniAccessors.getStaticMethodIDOf(_classRef,
      "getTimeFormat", "(Landroid/content/Context;)Ljava/text/DateFormat;");

  /// from: static public java.text.DateFormat getTimeFormat(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a java.text.DateFormat object that can format the time according
  /// to the context's locale and the user's 12-/24-hour clock preference.
  ///@param context the application context
  ///@return the java.text.DateFormat object that properly formats the time.
  static jni.JniObject getTimeFormat(context_.Context context) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getTimeFormat,
          jni.JniType.objectType,
          [context.reference]).object);

  static final _id_getDateFormat = jniAccessors.getStaticMethodIDOf(_classRef,
      "getDateFormat", "(Landroid/content/Context;)Ljava/text/DateFormat;");

  /// from: static public java.text.DateFormat getDateFormat(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a java.text.DateFormat object that can format the date
  /// in short form according to the context's locale.
  ///@param context the application context
  ///@return the java.text.DateFormat object that properly formats the date.
  static jni.JniObject getDateFormat(context_.Context context) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateFormat,
          jni.JniType.objectType,
          [context.reference]).object);

  static final _id_getLongDateFormat = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getLongDateFormat",
      "(Landroid/content/Context;)Ljava/text/DateFormat;");

  /// from: static public java.text.DateFormat getLongDateFormat(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a java.text.DateFormat object that can format the date
  /// in long form (such as {@code Monday, January 3, 2000}) for the context's locale.
  ///@param context the application context
  ///@return the java.text.DateFormat object that formats the date in long form.
  static jni.JniObject getLongDateFormat(context_.Context context) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getLongDateFormat,
          jni.JniType.objectType,
          [context.reference]).object);

  static final _id_getMediumDateFormat = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getMediumDateFormat",
      "(Landroid/content/Context;)Ljava/text/DateFormat;");

  /// from: static public java.text.DateFormat getMediumDateFormat(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a java.text.DateFormat object that can format the date
  /// in medium form (such as {@code Jan 3, 2000}) for the context's locale.
  ///@param context the application context
  ///@return the java.text.DateFormat object that formats the date in long form.
  static jni.JniObject getMediumDateFormat(context_.Context context) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getMediumDateFormat,
          jni.JniType.objectType,
          [context.reference]).object);

  static final _id_getDateFormatOrder = jniAccessors.getStaticMethodIDOf(
      _classRef, "getDateFormatOrder", "(Landroid/content/Context;)[C");

  /// from: static public char[] getDateFormatOrder(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the current date format stored as a char array. Returns a 3 element
  /// array containing the day ({@code 'd'}), month ({@code 'M'}), and year ({@code 'y'}))
  /// in the order specified by the user's format preference.  Note that this order is
  /// <i>only</i> appropriate for all-numeric dates; spelled-out (MEDIUM and LONG)
  /// dates will generally contain other punctuation, spaces, or words,
  /// not just the day, month, and year, and not necessarily in the same
  /// order returned here.
  static jni.JniObject getDateFormatOrder(context_.Context context) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateFormatOrder,
          jni.JniType.objectType,
          [context.reference]).object);

  static final _id_format = jniAccessors.getStaticMethodIDOf(_classRef,
      "format", "(Ljava/lang/CharSequence;J)Ljava/lang/CharSequence;");

  /// from: static public java.lang.CharSequence format(java.lang.CharSequence inFormat, long inTimeInMillis)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Given a format string and a time in milliseconds since Jan 1, 1970 GMT, returns a
  /// CharSequence containing the requested date.
  ///@param inFormat the format string, as described in android.text.format.DateFormat
  ///@param inTimeInMillis in milliseconds since Jan 1, 1970 GMT
  ///@return a CharSequence containing the requested text
  static jni.JniObject format(jni.JniObject inFormat, int inTimeInMillis) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_format,
          jni.JniType.objectType,
          [inFormat.reference, inTimeInMillis]).object);

  static final _id_format1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "format",
      "(Ljava/lang/CharSequence;Ljava/util/Date;)Ljava/lang/CharSequence;");

  /// from: static public java.lang.CharSequence format(java.lang.CharSequence inFormat, java.util.Date inDate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Given a format string and a java.util.Date object, returns a CharSequence containing
  /// the requested date.
  ///@param inFormat the format string, as described in android.text.format.DateFormat
  ///@param inDate the date to format
  ///@return a CharSequence containing the requested text
  static jni.JniObject format1(jni.JniObject inFormat, jni.JniObject inDate) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_format1,
          jni.JniType.objectType,
          [inFormat.reference, inDate.reference]).object);

  static final _id_format2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "format",
      "(Ljava/lang/CharSequence;Ljava/util/Calendar;)Ljava/lang/CharSequence;");

  /// from: static public java.lang.CharSequence format(java.lang.CharSequence inFormat, java.util.Calendar inDate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Given a format string and a java.util.Calendar object, returns a CharSequence
  /// containing the requested date.
  ///@param inFormat the format string, as described in android.text.format.DateFormat
  ///@param inDate the date to format
  ///@return a CharSequence containing the requested text
  static jni.JniObject format2(jni.JniObject inFormat, jni.JniObject inDate) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_format2,
          jni.JniType.objectType,
          [inFormat.reference, inDate.reference]).object);
}
