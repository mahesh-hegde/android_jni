// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../content/Context.dart" as context_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.text.format.Formatter
///
/// Utility class to aid in formatting common values that are not covered
/// by the java.util.Formatter class in java.util
class Formatter extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/text/format/Formatter");
  Formatter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Formatter()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_formatFileSize = jniAccessors.getStaticMethodIDOf(_classRef,
      "formatFileSize", "(Landroid/content/Context;J)Ljava/lang/String;");

  /// from: static public java.lang.String formatFileSize(android.content.Context context, long sizeBytes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Formats a content size to be in the form of bytes, kilobytes, megabytes, etc.
  ///
  /// As of O, the prefixes are used in their standard meanings in the SI system, so kB = 1000
  /// bytes, MB = 1,000,000 bytes, etc.
  ///
  ///
  /// <p class="note">In android.os.Build.VERSION_CODES\#N and earlier, powers of 1024 are
  /// used instead, with KB = 1024 bytes, MB = 1,048,576 bytes, etc.
  ///
  ///
  /// If the context has a right-to-left locale, the returned string is wrapped in bidi
  /// formatting characters to make sure it's displayed correctly if inserted inside a
  /// right-to-left string. (This is useful in cases where the unit strings, like "MB", are
  /// left-to-right, but the locale is right-to-left.)
  ///
  ///@param context Context to use to load the localized units
  /// This value may be {@code null}.
  ///@param sizeBytes size value to be formatted, in bytes
  ///@return formatted string with the number
  static jni.JniString formatFileSize(
          context_.Context context, int sizeBytes) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_formatFileSize,
          jni.JniType.objectType,
          [context.reference, sizeBytes]).object);

  static final _id_formatShortFileSize = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "formatShortFileSize",
      "(Landroid/content/Context;J)Ljava/lang/String;");

  /// from: static public java.lang.String formatShortFileSize(android.content.Context context, long sizeBytes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Like \#formatFileSize, but trying to generate shorter numbers
  /// (showing fewer digits of precision).
  ///@param context This value may be {@code null}.
  static jni.JniString formatShortFileSize(
          context_.Context context, int sizeBytes) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_formatShortFileSize,
          jni.JniType.objectType,
          [context.reference, sizeBytes]).object);

  static final _id_formatIpAddress = jniAccessors.getStaticMethodIDOf(
      _classRef, "formatIpAddress", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String formatIpAddress(int ipv4Address)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a string in the canonical IPv4 format \#\#\#.\#\#\#.\#\#\#.\#\#\# from a packed integer
  /// containing the IP address. The IPv4 address is expected to be in little-endian
  /// format (LSB first). That is, 0x01020304 will return "4.3.2.1".
  ///@deprecated Use java.net.InetAddress\#getHostAddress(), which supports both IPv4 and
  ///     IPv6 addresses. This method does not support IPv6 addresses.
  static jni.JniString formatIpAddress(int ipv4Address) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_formatIpAddress, jni.JniType.objectType, [ipv4Address]).object);
}
