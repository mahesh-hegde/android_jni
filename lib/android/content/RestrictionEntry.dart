// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;

import "Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.RestrictionEntry
///
/// Applications can expose restrictions for a restricted user on a
/// multiuser device. The administrator can configure these restrictions that will then be
/// applied to the restricted user. Each RestrictionsEntry is one configurable restriction.
/// <p/>
/// Any application that chooses to expose such restrictions does so by implementing a
/// receiver that handles the Intent\#ACTION_GET_RESTRICTION_ENTRIES action.
/// The receiver then returns a result bundle that contains an entry called "restrictions", whose
/// value is an ArrayList<RestrictionsEntry>.
class RestrictionEntry extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/RestrictionEntry");
  RestrictionEntry.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.RestrictionEntry> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int TYPE_BOOLEAN
  ///
  /// Restriction of type "bool". Use this for storing a boolean value, typically presented as
  /// a checkbox in the UI.
  static const TYPE_BOOLEAN = 1;

  /// from: static public final int TYPE_BUNDLE
  ///
  /// Restriction of type "bundle". Use this for storing android.os.Bundle bundles of
  /// restrictions
  static const TYPE_BUNDLE = 7;

  /// from: static public final int TYPE_BUNDLE_ARRAY
  ///
  /// Restriction of type "bundle_array". Use this for storing arrays of
  /// android.os.Bundle bundles of restrictions
  static const TYPE_BUNDLE_ARRAY = 8;

  /// from: static public final int TYPE_CHOICE
  ///
  /// Restriction of type "choice". Use this for storing a string value, typically presented as
  /// a single-select list. Call \#setChoiceEntries(String[]) and
  /// \#setChoiceValues(String[]) to set the localized list entries to present to the user
  /// and the corresponding values, respectively.
  static const TYPE_CHOICE = 2;

  /// from: static public final int TYPE_INTEGER
  ///
  /// Restriction of type "integer". Use this for storing an integer value. The range of values
  /// is from Integer\#MIN_VALUE to Integer\#MAX_VALUE.
  static const TYPE_INTEGER = 5;

  /// from: static public final int TYPE_MULTI_SELECT
  ///
  /// Restriction of type "multi-select". Use this for presenting a multi-select list where more
  /// than one entry can be selected, such as for choosing specific titles to white-list.
  /// Call \#setChoiceEntries(String[]) and
  /// \#setChoiceValues(String[]) to set the localized list entries to present to the user
  /// and the corresponding values, respectively.
  /// Use \#getAllSelectedStrings() and \#setAllSelectedStrings(String[]) to
  /// manipulate the selections.
  static const TYPE_MULTI_SELECT = 4;

  /// from: static public final int TYPE_NULL
  ///
  /// Hidden restriction type. Use this type for information that needs to be transferred
  /// across but shouldn't be presented to the user in the UI. Stores a single String value.
  static const TYPE_NULL = 0;

  /// from: static public final int TYPE_STRING
  ///
  /// Restriction of type "string". Use this for storing a string value.
  ///@see \#setSelectedString
  ///@see \#getSelectedString
  static const TYPE_STRING = 6;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ILjava/lang/String;)V");

  /// from: public void <init>(int type, java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for specifying the type and key, with no initial value;
  ///@param type the restriction type.
  ///@param key the unique key for this restriction
  RestrictionEntry(int type, jni.JniString key)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [type, key.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String key, java.lang.String selectedString)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for \#TYPE_CHOICE type.
  ///@param key the unique key for this restriction
  ///@param selectedString the current value
  RestrictionEntry.ctor1(jni.JniString key, jni.JniString selectedString)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [key.reference, selectedString.reference]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;Z)V");

  /// from: public void <init>(java.lang.String key, boolean selectedState)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for \#TYPE_BOOLEAN type.
  ///@param key the unique key for this restriction
  ///@param selectedState whether this restriction is selected or not
  RestrictionEntry.ctor2(jni.JniString key, bool selectedState)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [key.reference, selectedState]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String key, java.lang.String[] selectedStrings)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for \#TYPE_MULTI_SELECT type.
  ///@param key the unique key for this restriction
  ///@param selectedStrings the list of values that are currently selected
  RestrictionEntry.ctor3(jni.JniString key, jni.JniObject selectedStrings)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3,
            [key.reference, selectedStrings.reference]).object);

  static final _id_ctor4 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;I)V");

  /// from: public void <init>(java.lang.String key, int selectedInt)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for \#TYPE_INTEGER type.
  ///@param key the unique key for this restriction
  ///@param selectedInt the integer value of the restriction
  RestrictionEntry.ctor4(jni.JniString key, int selectedInt)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [key.reference, selectedInt]).object);

  static final _id_ctor5 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  RestrictionEntry.ctor5(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor5, [in0.reference]).object);

  static final _id_createBundleEntry = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createBundleEntry",
      "(Ljava/lang/String;[Landroid/content/RestrictionEntry;)Landroid/content/RestrictionEntry;");

  /// from: static public android.content.RestrictionEntry createBundleEntry(java.lang.String key, android.content.RestrictionEntry[] restrictionEntries)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an entry of type \#TYPE_BUNDLE.
  ///@param key the unique key for this restriction
  ///@param restrictionEntries array of nested restriction entries.
  ///@return the newly created restriction
  static RestrictionEntry createBundleEntry(
          jni.JniString key, jni.JniObject restrictionEntries) =>
      RestrictionEntry.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createBundleEntry,
          jni.JniType.objectType,
          [key.reference, restrictionEntries.reference]).object);

  static final _id_createBundleArrayEntry = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createBundleArrayEntry",
      "(Ljava/lang/String;[Landroid/content/RestrictionEntry;)Landroid/content/RestrictionEntry;");

  /// from: static public android.content.RestrictionEntry createBundleArrayEntry(java.lang.String key, android.content.RestrictionEntry[] restrictionEntries)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an entry of type \#TYPE_BUNDLE_ARRAY.
  ///@param key the unique key for this restriction
  ///@param restrictionEntries array of nested restriction entries. The array may only contain
  /// elements of type \#TYPE_BUNDLE bundle.
  ///@return the newly created restriction
  static RestrictionEntry createBundleArrayEntry(
          jni.JniString key, jni.JniObject restrictionEntries) =>
      RestrictionEntry.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createBundleArrayEntry,
          jni.JniType.objectType,
          [key.reference, restrictionEntries.reference]).object);

  static final _id_setType =
      jniAccessors.getMethodIDOf(_classRef, "setType", "(I)V");

  /// from: public void setType(int type)
  ///
  /// Sets the type for this restriction.
  ///@param type the type for this restriction.
  void setType(int type) => jniAccessors.callMethodWithArgs(
      reference, _id_setType, jni.JniType.voidType, [type]).check();

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public int getType()
  ///
  /// Returns the type for this restriction.
  ///@return the type for this restriction
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_getSelectedString = jniAccessors.getMethodIDOf(
      _classRef, "getSelectedString", "()Ljava/lang/String;");

  /// from: public java.lang.String getSelectedString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the currently selected string value.
  ///@return the currently selected value, which can be null for types that aren't for holding
  /// single string values.
  jni.JniString getSelectedString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSelectedString, jni.JniType.objectType, []).object);

  static final _id_getAllSelectedStrings = jniAccessors.getMethodIDOf(
      _classRef, "getAllSelectedStrings", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] getAllSelectedStrings()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the list of currently selected values.
  ///@return the list of current selections, if type is \#TYPE_MULTI_SELECT,
  ///  null otherwise.
  jni.JniObject getAllSelectedStrings() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAllSelectedStrings, jni.JniType.objectType, []).object);

  static final _id_getSelectedState =
      jniAccessors.getMethodIDOf(_classRef, "getSelectedState", "()Z");

  /// from: public boolean getSelectedState()
  ///
  /// Returns the current selected state for an entry of type \#TYPE_BOOLEAN.
  ///@return the current selected state of the entry.
  bool getSelectedState() => jniAccessors.callMethodWithArgs(
      reference, _id_getSelectedState, jni.JniType.booleanType, []).boolean;

  static final _id_getIntValue =
      jniAccessors.getMethodIDOf(_classRef, "getIntValue", "()I");

  /// from: public int getIntValue()
  ///
  /// Returns the value of the entry as an integer when the type is \#TYPE_INTEGER.
  ///@return the integer value of the entry.
  int getIntValue() => jniAccessors.callMethodWithArgs(
      reference, _id_getIntValue, jni.JniType.intType, []).integer;

  static final _id_setIntValue =
      jniAccessors.getMethodIDOf(_classRef, "setIntValue", "(I)V");

  /// from: public void setIntValue(int value)
  ///
  /// Sets the integer value of the entry when the type is \#TYPE_INTEGER.
  ///@param value the integer value to set.
  void setIntValue(int value) => jniAccessors.callMethodWithArgs(
      reference, _id_setIntValue, jni.JniType.voidType, [value]).check();

  static final _id_setSelectedString = jniAccessors.getMethodIDOf(
      _classRef, "setSelectedString", "(Ljava/lang/String;)V");

  /// from: public void setSelectedString(java.lang.String selectedString)
  ///
  /// Sets the string value to use as the selected value for this restriction. This value will
  /// be persisted by the system for later use by the application.
  ///@param selectedString the string value to select.
  void setSelectedString(jni.JniString selectedString) =>
      jniAccessors.callMethodWithArgs(reference, _id_setSelectedString,
          jni.JniType.voidType, [selectedString.reference]).check();

  static final _id_setSelectedState =
      jniAccessors.getMethodIDOf(_classRef, "setSelectedState", "(Z)V");

  /// from: public void setSelectedState(boolean state)
  ///
  /// Sets the current selected state for an entry of type \#TYPE_BOOLEAN. This value will
  /// be persisted by the system for later use by the application.
  ///@param state the current selected state
  void setSelectedState(bool state) => jniAccessors.callMethodWithArgs(
      reference, _id_setSelectedState, jni.JniType.voidType, [state]).check();

  static final _id_setAllSelectedStrings = jniAccessors.getMethodIDOf(
      _classRef, "setAllSelectedStrings", "([Ljava/lang/String;)V");

  /// from: public void setAllSelectedStrings(java.lang.String[] allSelectedStrings)
  ///
  /// Sets the current list of selected values for an entry of type \#TYPE_MULTI_SELECT.
  /// These values will be persisted by the system for later use by the application.
  ///@param allSelectedStrings the current list of selected values.
  void setAllSelectedStrings(jni.JniObject allSelectedStrings) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAllSelectedStrings,
          jni.JniType.voidType, [allSelectedStrings.reference]).check();

  static final _id_setChoiceValues = jniAccessors.getMethodIDOf(
      _classRef, "setChoiceValues", "([Ljava/lang/String;)V");

  /// from: public void setChoiceValues(java.lang.String[] choiceValues)
  ///
  /// Sets a list of string values that can be selected by the user. If no user-visible entries
  /// are set by a call to \#setChoiceEntries(String[]), these values will be the ones
  /// shown to the user. Values will be chosen from this list as the user's selection and the
  /// selected values can be retrieved by a call to \#getAllSelectedStrings(), or
  /// \#getSelectedString(), depending on whether it is a multi-select type or choice type.
  /// This method is not relevant for types other than
  /// \#TYPE_CHOICE, and \#TYPE_MULTI_SELECT.
  ///@param choiceValues an array of Strings which will be the selected values for the user's
  /// selections.
  ///@see \#getChoiceValues()
  ///@see \#getAllSelectedStrings()
  void setChoiceValues(jni.JniObject choiceValues) =>
      jniAccessors.callMethodWithArgs(reference, _id_setChoiceValues,
          jni.JniType.voidType, [choiceValues.reference]).check();

  static final _id_setChoiceValues1 = jniAccessors.getMethodIDOf(
      _classRef, "setChoiceValues", "(Landroid/content/Context;I)V");

  /// from: public void setChoiceValues(android.content.Context context, int stringArrayResId)
  ///
  /// Sets a list of string values that can be selected by the user, similar to
  /// \#setChoiceValues(String[]).
  ///@param context the application context for retrieving the resources.
  ///@param stringArrayResId the resource id for a string array containing the possible values.
  ///@see \#setChoiceValues(String[])
  void setChoiceValues1(context_.Context context, int stringArrayResId) =>
      jniAccessors.callMethodWithArgs(reference, _id_setChoiceValues1,
          jni.JniType.voidType, [context.reference, stringArrayResId]).check();

  static final _id_getRestrictions = jniAccessors.getMethodIDOf(
      _classRef, "getRestrictions", "()[Landroid/content/RestrictionEntry;");

  /// from: public android.content.RestrictionEntry[] getRestrictions()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns array of possible restriction entries that this entry may contain.
  jni.JniObject getRestrictions() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getRestrictions, jni.JniType.objectType, []).object);

  static final _id_setRestrictions = jniAccessors.getMethodIDOf(
      _classRef, "setRestrictions", "([Landroid/content/RestrictionEntry;)V");

  /// from: public void setRestrictions(android.content.RestrictionEntry[] restrictions)
  ///
  /// Sets an array of possible restriction entries, that this entry may contain.
  /// This method is only relevant for types \#TYPE_BUNDLE and
  /// \#TYPE_BUNDLE_ARRAY
  void setRestrictions(jni.JniObject restrictions) =>
      jniAccessors.callMethodWithArgs(reference, _id_setRestrictions,
          jni.JniType.voidType, [restrictions.reference]).check();

  static final _id_getChoiceValues = jniAccessors.getMethodIDOf(
      _classRef, "getChoiceValues", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] getChoiceValues()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the list of possible string values set earlier.
  ///@return the list of possible values.
  jni.JniObject getChoiceValues() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getChoiceValues, jni.JniType.objectType, []).object);

  static final _id_setChoiceEntries = jniAccessors.getMethodIDOf(
      _classRef, "setChoiceEntries", "([Ljava/lang/String;)V");

  /// from: public void setChoiceEntries(java.lang.String[] choiceEntries)
  ///
  /// Sets a list of strings that will be presented as choices to the user. When the
  /// user selects one or more of these choices, the corresponding value from the possible values
  /// are stored as the selected strings. The size of this array must match the size of the array
  /// set in \#setChoiceValues(String[]). This method is not relevant for types other
  /// than \#TYPE_CHOICE, and \#TYPE_MULTI_SELECT.
  ///@param choiceEntries the list of user-visible choices.
  ///@see \#setChoiceValues(String[])
  void setChoiceEntries(jni.JniObject choiceEntries) =>
      jniAccessors.callMethodWithArgs(reference, _id_setChoiceEntries,
          jni.JniType.voidType, [choiceEntries.reference]).check();

  static final _id_setChoiceEntries1 = jniAccessors.getMethodIDOf(
      _classRef, "setChoiceEntries", "(Landroid/content/Context;I)V");

  /// from: public void setChoiceEntries(android.content.Context context, int stringArrayResId)
  ///
  /// Sets a list of strings that will be presented as choices to the user. This is similar to
  /// \#setChoiceEntries(String[]).
  ///@param context the application context, used for retrieving the resources.
  ///@param stringArrayResId the resource id of a string array containing the possible entries.
  void setChoiceEntries1(context_.Context context, int stringArrayResId) =>
      jniAccessors.callMethodWithArgs(reference, _id_setChoiceEntries1,
          jni.JniType.voidType, [context.reference, stringArrayResId]).check();

  static final _id_getChoiceEntries = jniAccessors.getMethodIDOf(
      _classRef, "getChoiceEntries", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] getChoiceEntries()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the list of strings, set earlier, that will be presented as choices to the user.
  ///@return the list of choices presented to the user.
  jni.JniObject getChoiceEntries() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getChoiceEntries, jni.JniType.objectType, []).object);

  static final _id_getDescription = jniAccessors.getMethodIDOf(
      _classRef, "getDescription", "()Ljava/lang/String;");

  /// from: public java.lang.String getDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the provided user-visible description of the entry, if any.
  ///@return the user-visible description, null if none was set earlier.
  jni.JniString getDescription() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDescription, jni.JniType.objectType, []).object);

  static final _id_setDescription = jniAccessors.getMethodIDOf(
      _classRef, "setDescription", "(Ljava/lang/String;)V");

  /// from: public void setDescription(java.lang.String description)
  ///
  /// Sets the user-visible description of the entry, as a possible sub-text for the title.
  /// You can use this to describe the entry in more detail or to display the current state of
  /// the restriction.
  ///@param description the user-visible description string.
  void setDescription(jni.JniString description) =>
      jniAccessors.callMethodWithArgs(reference, _id_setDescription,
          jni.JniType.voidType, [description.reference]).check();

  static final _id_getKey =
      jniAccessors.getMethodIDOf(_classRef, "getKey", "()Ljava/lang/String;");

  /// from: public java.lang.String getKey()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This is the unique key for the restriction entry.
  ///@return the key for the restriction.
  jni.JniString getKey() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKey, jni.JniType.objectType, []).object);

  static final _id_getTitle =
      jniAccessors.getMethodIDOf(_classRef, "getTitle", "()Ljava/lang/String;");

  /// from: public java.lang.String getTitle()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the user-visible title for the entry, if any.
  ///@return the user-visible title for the entry, null if none was set earlier.
  jni.JniString getTitle() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTitle, jni.JniType.objectType, []).object);

  static final _id_setTitle = jniAccessors.getMethodIDOf(
      _classRef, "setTitle", "(Ljava/lang/String;)V");

  /// from: public void setTitle(java.lang.String title)
  ///
  /// Sets the user-visible title for the entry.
  ///@param title the user-visible title for the entry.
  void setTitle(jni.JniString title) => jniAccessors.callMethodWithArgs(
      reference, _id_setTitle, jni.JniType.voidType, [title.reference]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
