// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.ContentValues
///
/// This class is used to store a set of values that the ContentResolver
/// can process.
class ContentValues extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/ContentValues");
  ContentValues.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.ContentValues> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final java.lang.String TAG
  static const TAG = "ContentValues";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an empty set of values using the default initial size
  ContentValues()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int size)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an empty set of values using the given initial size
  ///@param size the initial size of the set of values
  ContentValues.ctor1(int size)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [size]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/ContentValues;)V");

  /// from: public void <init>(android.content.ContentValues from)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a set of values copied from the given set
  ///@param from the values to copy
  ContentValues.ctor2(ContentValues from)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [from.reference]).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(jni.JniObject object) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [object.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_put = jniAccessors.getMethodIDOf(
      _classRef, "put", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void put(java.lang.String key, java.lang.String value)
  ///
  /// Adds a value to the set.
  ///@param key the name of the value to put
  ///@param value the data for the value to put
  void put(jni.JniString key, jni.JniString value) =>
      jniAccessors.callMethodWithArgs(reference, _id_put, jni.JniType.voidType,
          [key.reference, value.reference]).check();

  static final _id_putAll = jniAccessors.getMethodIDOf(
      _classRef, "putAll", "(Landroid/content/ContentValues;)V");

  /// from: public void putAll(android.content.ContentValues other)
  ///
  /// Adds all values from the passed in ContentValues.
  ///@param other the ContentValues from which to copy
  void putAll(ContentValues other) => jniAccessors.callMethodWithArgs(
      reference, _id_putAll, jni.JniType.voidType, [other.reference]).check();

  static final _id_put1 = jniAccessors.getMethodIDOf(
      _classRef, "put", "(Ljava/lang/String;Ljava/lang/Byte;)V");

  /// from: public void put(java.lang.String key, java.lang.Byte value)
  ///
  /// Adds a value to the set.
  ///@param key the name of the value to put
  ///@param value the data for the value to put
  void put1(jni.JniString key, jni.JniObject value) =>
      jniAccessors.callMethodWithArgs(reference, _id_put1, jni.JniType.voidType,
          [key.reference, value.reference]).check();

  static final _id_put2 = jniAccessors.getMethodIDOf(
      _classRef, "put", "(Ljava/lang/String;Ljava/lang/Short;)V");

  /// from: public void put(java.lang.String key, java.lang.Short value)
  ///
  /// Adds a value to the set.
  ///@param key the name of the value to put
  ///@param value the data for the value to put
  void put2(jni.JniString key, jni.JniObject value) =>
      jniAccessors.callMethodWithArgs(reference, _id_put2, jni.JniType.voidType,
          [key.reference, value.reference]).check();

  static final _id_put3 = jniAccessors.getMethodIDOf(
      _classRef, "put", "(Ljava/lang/String;Ljava/lang/Integer;)V");

  /// from: public void put(java.lang.String key, java.lang.Integer value)
  ///
  /// Adds a value to the set.
  ///@param key the name of the value to put
  ///@param value the data for the value to put
  void put3(jni.JniString key, jni.JniObject value) =>
      jniAccessors.callMethodWithArgs(reference, _id_put3, jni.JniType.voidType,
          [key.reference, value.reference]).check();

  static final _id_put4 = jniAccessors.getMethodIDOf(
      _classRef, "put", "(Ljava/lang/String;Ljava/lang/Long;)V");

  /// from: public void put(java.lang.String key, java.lang.Long value)
  ///
  /// Adds a value to the set.
  ///@param key the name of the value to put
  ///@param value the data for the value to put
  void put4(jni.JniString key, jni.JniObject value) =>
      jniAccessors.callMethodWithArgs(reference, _id_put4, jni.JniType.voidType,
          [key.reference, value.reference]).check();

  static final _id_put5 = jniAccessors.getMethodIDOf(
      _classRef, "put", "(Ljava/lang/String;Ljava/lang/Float;)V");

  /// from: public void put(java.lang.String key, java.lang.Float value)
  ///
  /// Adds a value to the set.
  ///@param key the name of the value to put
  ///@param value the data for the value to put
  void put5(jni.JniString key, jni.JniObject value) =>
      jniAccessors.callMethodWithArgs(reference, _id_put5, jni.JniType.voidType,
          [key.reference, value.reference]).check();

  static final _id_put6 = jniAccessors.getMethodIDOf(
      _classRef, "put", "(Ljava/lang/String;Ljava/lang/Double;)V");

  /// from: public void put(java.lang.String key, java.lang.Double value)
  ///
  /// Adds a value to the set.
  ///@param key the name of the value to put
  ///@param value the data for the value to put
  void put6(jni.JniString key, jni.JniObject value) =>
      jniAccessors.callMethodWithArgs(reference, _id_put6, jni.JniType.voidType,
          [key.reference, value.reference]).check();

  static final _id_put7 = jniAccessors.getMethodIDOf(
      _classRef, "put", "(Ljava/lang/String;Ljava/lang/Boolean;)V");

  /// from: public void put(java.lang.String key, java.lang.Boolean value)
  ///
  /// Adds a value to the set.
  ///@param key the name of the value to put
  ///@param value the data for the value to put
  void put7(jni.JniString key, jni.JniObject value) =>
      jniAccessors.callMethodWithArgs(reference, _id_put7, jni.JniType.voidType,
          [key.reference, value.reference]).check();

  static final _id_put8 =
      jniAccessors.getMethodIDOf(_classRef, "put", "(Ljava/lang/String;[B)V");

  /// from: public void put(java.lang.String key, byte[] value)
  ///
  /// Adds a value to the set.
  ///@param key the name of the value to put
  ///@param value the data for the value to put
  void put8(jni.JniString key, jni.JniObject value) =>
      jniAccessors.callMethodWithArgs(reference, _id_put8, jni.JniType.voidType,
          [key.reference, value.reference]).check();

  static final _id_putNull =
      jniAccessors.getMethodIDOf(_classRef, "putNull", "(Ljava/lang/String;)V");

  /// from: public void putNull(java.lang.String key)
  ///
  /// Adds a null value to the set.
  ///@param key the name of the value to make null
  void putNull(jni.JniString key) => jniAccessors.callMethodWithArgs(
      reference, _id_putNull, jni.JniType.voidType, [key.reference]).check();

  static final _id_size = jniAccessors.getMethodIDOf(_classRef, "size", "()I");

  /// from: public int size()
  ///
  /// Returns the number of values.
  ///@return the number of values
  int size() => jniAccessors
      .callMethodWithArgs(reference, _id_size, jni.JniType.intType, []).integer;

  static final _id_remove =
      jniAccessors.getMethodIDOf(_classRef, "remove", "(Ljava/lang/String;)V");

  /// from: public void remove(java.lang.String key)
  ///
  /// Remove a single value.
  ///@param key the name of the value to remove
  void remove(jni.JniString key) => jniAccessors.callMethodWithArgs(
      reference, _id_remove, jni.JniType.voidType, [key.reference]).check();

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, "clear", "()V");

  /// from: public void clear()
  ///
  /// Removes all values.
  void clear() => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniType.voidType, []).check();

  static final _id_containsKey = jniAccessors.getMethodIDOf(
      _classRef, "containsKey", "(Ljava/lang/String;)Z");

  /// from: public boolean containsKey(java.lang.String key)
  ///
  /// Returns true if this object has the named value.
  ///@param key the value to check for
  ///@return {@code true} if the value is present, {@code false} otherwise
  bool containsKey(jni.JniString key) => jniAccessors.callMethodWithArgs(
      reference,
      _id_containsKey,
      jni.JniType.booleanType,
      [key.reference]).boolean;

  static final _id_get0 = jniAccessors.getMethodIDOf(
      _classRef, "get", "(Ljava/lang/String;)Ljava/lang/Object;");

  /// from: public java.lang.Object get(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a value. Valid value types are String, Boolean,
  /// Number, and {@code byte[]} implementations.
  ///@param key the value to get
  ///@return the data for the value, or {@code null} if the value is missing or if {@code null}
  ///         was previously added with the given {@code key}
  jni.JniObject get0(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_get0, jni.JniType.objectType, [key.reference]).object);

  static final _id_getAsString = jniAccessors.getMethodIDOf(
      _classRef, "getAsString", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getAsString(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a value and converts it to a String.
  ///@param key the value to get
  ///@return the String for the value
  jni.JniString getAsString(jni.JniString key) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAsString, jni.JniType.objectType, [key.reference]).object);

  static final _id_getAsLong = jniAccessors.getMethodIDOf(
      _classRef, "getAsLong", "(Ljava/lang/String;)Ljava/lang/Long;");

  /// from: public java.lang.Long getAsLong(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a value and converts it to a Long.
  ///@param key the value to get
  ///@return the Long value, or {@code null} if the value is missing or cannot be converted
  jni.JniObject getAsLong(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAsLong, jni.JniType.objectType, [key.reference]).object);

  static final _id_getAsInteger = jniAccessors.getMethodIDOf(
      _classRef, "getAsInteger", "(Ljava/lang/String;)Ljava/lang/Integer;");

  /// from: public java.lang.Integer getAsInteger(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a value and converts it to an Integer.
  ///@param key the value to get
  ///@return the Integer value, or {@code null} if the value is missing or cannot be converted
  jni.JniObject getAsInteger(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAsInteger, jni.JniType.objectType, [key.reference]).object);

  static final _id_getAsShort = jniAccessors.getMethodIDOf(
      _classRef, "getAsShort", "(Ljava/lang/String;)Ljava/lang/Short;");

  /// from: public java.lang.Short getAsShort(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a value and converts it to a Short.
  ///@param key the value to get
  ///@return the Short value, or {@code null} if the value is missing or cannot be converted
  jni.JniObject getAsShort(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAsShort, jni.JniType.objectType, [key.reference]).object);

  static final _id_getAsByte = jniAccessors.getMethodIDOf(
      _classRef, "getAsByte", "(Ljava/lang/String;)Ljava/lang/Byte;");

  /// from: public java.lang.Byte getAsByte(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a value and converts it to a Byte.
  ///@param key the value to get
  ///@return the Byte value, or {@code null} if the value is missing or cannot be converted
  jni.JniObject getAsByte(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAsByte, jni.JniType.objectType, [key.reference]).object);

  static final _id_getAsDouble = jniAccessors.getMethodIDOf(
      _classRef, "getAsDouble", "(Ljava/lang/String;)Ljava/lang/Double;");

  /// from: public java.lang.Double getAsDouble(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a value and converts it to a Double.
  ///@param key the value to get
  ///@return the Double value, or {@code null} if the value is missing or cannot be converted
  jni.JniObject getAsDouble(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAsDouble, jni.JniType.objectType, [key.reference]).object);

  static final _id_getAsFloat = jniAccessors.getMethodIDOf(
      _classRef, "getAsFloat", "(Ljava/lang/String;)Ljava/lang/Float;");

  /// from: public java.lang.Float getAsFloat(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a value and converts it to a Float.
  ///@param key the value to get
  ///@return the Float value, or {@code null} if the value is missing or cannot be converted
  jni.JniObject getAsFloat(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAsFloat, jni.JniType.objectType, [key.reference]).object);

  static final _id_getAsBoolean = jniAccessors.getMethodIDOf(
      _classRef, "getAsBoolean", "(Ljava/lang/String;)Ljava/lang/Boolean;");

  /// from: public java.lang.Boolean getAsBoolean(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a value and converts it to a Boolean.
  ///@param key the value to get
  ///@return the Boolean value, or {@code null} if the value is missing or cannot be converted
  jni.JniObject getAsBoolean(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAsBoolean, jni.JniType.objectType, [key.reference]).object);

  static final _id_getAsByteArray = jniAccessors.getMethodIDOf(
      _classRef, "getAsByteArray", "(Ljava/lang/String;)[B");

  /// from: public byte[] getAsByteArray(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a value that is a byte array. Note that this method will not convert
  /// any other types to byte arrays.
  ///@param key the value to get
  ///@return the {@code byte[]} value, or {@code null} is the value is missing or not a
  ///         {@code byte[]}
  jni.JniObject getAsByteArray(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAsByteArray, jni.JniType.objectType, [key.reference]).object);

  static final _id_valueSet =
      jniAccessors.getMethodIDOf(_classRef, "valueSet", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> valueSet()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a set of all of the keys and values
  ///@return a set of all of the keys and values
  jni.JniObject valueSet() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_valueSet, jni.JniType.objectType, []).object);

  static final _id_keySet =
      jniAccessors.getMethodIDOf(_classRef, "keySet", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.String> keySet()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a set of all of the keys
  ///@return a set of all of the keys
  jni.JniObject keySet() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_keySet, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a string containing a concise, human-readable description of this object.
  ///@return a printable representation of this object.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
