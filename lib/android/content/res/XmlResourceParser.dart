// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.res.XmlResourceParser
///
/// The XML parsing interface returned for an XML resource.  This is a standard
/// XmlPullParser interface but also extends AttributeSet and
/// adds an additional \#close() method for the client to indicate when
/// it is done reading the resource.
class XmlResourceParser extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/res/XmlResourceParser");
  XmlResourceParser.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getAttributeNamespace = jniAccessors.getMethodIDOf(
      _classRef, "getAttributeNamespace", "(I)Ljava/lang/String;");

  /// from: public abstract java.lang.String getAttributeNamespace(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getAttributeNamespace(int index) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAttributeNamespace, jni.JniType.objectType, [index]).object);

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public abstract void close()
  ///
  /// Close this parser. Calls on the interface are no longer valid after this call.
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();
}
