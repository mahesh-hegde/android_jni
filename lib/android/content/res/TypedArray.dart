// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Resources.dart" as resources_;

import "ColorStateList.dart" as colorstatelist_;

import "../../graphics/drawable/Drawable.dart" as drawable_;

import "../../graphics/Typeface.dart" as typeface_;

import "../../util/TypedValue.dart" as typedvalue_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.res.TypedArray
///
/// Container for an array of values that were retrieved with
/// Resources.Theme\#obtainStyledAttributes(AttributeSet, int[], int, int)
/// or Resources\#obtainAttributes.  Be
/// sure to call \#recycle when done with them.
///
/// The indices used to retrieve values from this structure correspond to
/// the positions of the attributes given to obtainStyledAttributes.
class TypedArray extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/res/TypedArray");
  TypedArray.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/res/Resources;)V");

  /// from: void <init>(android.content.res.Resources resources)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  TypedArray(resources_.Resources resources)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [resources.reference]).object);

  static final _id_length =
      jniAccessors.getMethodIDOf(_classRef, "length", "()I");

  /// from: public int length()
  ///
  /// Returns the number of values in this array.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  int length() => jniAccessors.callMethodWithArgs(
      reference, _id_length, jni.JniType.intType, []).integer;

  static final _id_getIndexCount =
      jniAccessors.getMethodIDOf(_classRef, "getIndexCount", "()I");

  /// from: public int getIndexCount()
  ///
  /// Returns the number of indices in the array that actually have data. Attributes with a value
  /// of @empty are included, as this is an explicit indicator.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  int getIndexCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getIndexCount, jni.JniType.intType, []).integer;

  static final _id_getIndex =
      jniAccessors.getMethodIDOf(_classRef, "getIndex", "(I)I");

  /// from: public int getIndex(int at)
  ///
  /// Returns an index in the array that has data. Attributes with a value of @empty are included,
  /// as this is an explicit indicator.
  ///@param at The index you would like to returned, ranging from 0 to
  ///           \#getIndexCount().
  ///@return The index at the given offset, which can be used with
  ///         \#getValue and related APIs.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  int getIndex(int at) => jniAccessors.callMethodWithArgs(
      reference, _id_getIndex, jni.JniType.intType, [at]).integer;

  static final _id_getResources = jniAccessors.getMethodIDOf(
      _classRef, "getResources", "()Landroid/content/res/Resources;");

  /// from: public android.content.res.Resources getResources()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Resources object this array was loaded from.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  resources_.Resources getResources() =>
      resources_.Resources.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getResources, jni.JniType.objectType, []).object);

  static final _id_getText = jniAccessors.getMethodIDOf(
      _classRef, "getText", "(I)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getText(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves the styled string value for the attribute at <var>index</var>.
  ///
  /// If the attribute is not a string, this method will attempt to coerce
  /// it to a string.
  ///@param index Index of attribute to retrieve.
  ///@return CharSequence holding string data. May be styled. Returns
  ///         {@code null} if the attribute is not defined or could not be
  ///         coerced to a string.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  jni.JniObject getText(int index) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText, jni.JniType.objectType, [index]).object);

  static final _id_getString = jniAccessors.getMethodIDOf(
      _classRef, "getString", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getString(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves the string value for the attribute at <var>index</var>.
  ///
  /// If the attribute is not a string, this method will attempt to coerce
  /// it to a string.
  ///@param index Index of attribute to retrieve.
  ///@return String holding string data. Any styling information is removed.
  ///         Returns {@code null} if the attribute is not defined or could
  ///         not be coerced to a string.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  jni.JniString getString(int index) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getString, jni.JniType.objectType, [index]).object);

  static final _id_getNonResourceString = jniAccessors.getMethodIDOf(
      _classRef, "getNonResourceString", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getNonResourceString(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves the string value for the attribute at <var>index</var>, but
  /// only if that string comes from an immediate value in an XML file.  That
  /// is, this does not allow references to string resources, string
  /// attributes, or conversions from other types.  As such, this method
  /// will only return strings for TypedArray objects that come from
  /// attributes in an XML file.
  ///@param index Index of attribute to retrieve.
  ///@return String holding string data. Any styling information is removed.
  ///         Returns {@code null} if the attribute is not defined or is not
  ///         an immediate string value.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  jni.JniString getNonResourceString(int index) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getNonResourceString, jni.JniType.objectType, [index]).object);

  static final _id_getBoolean =
      jniAccessors.getMethodIDOf(_classRef, "getBoolean", "(IZ)Z");

  /// from: public boolean getBoolean(int index, boolean defValue)
  ///
  /// Retrieve the boolean value for the attribute at <var>index</var>.
  ///
  /// If the attribute is an integer value, this method will return whether
  /// it is equal to zero. If the attribute is not a boolean or integer value,
  /// this method will attempt to coerce it to an integer using
  /// Integer\#decode(String) and return whether it is equal to zero.
  ///@param index Index of attribute to retrieve.
  ///@param defValue Value to return if the attribute is not defined or
  ///                 cannot be coerced to an integer.
  ///@return Boolean value of the attribute, or defValue if the attribute was
  ///         not defined or could not be coerced to an integer.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  bool getBoolean(int index, bool defValue) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getBoolean,
      jni.JniType.booleanType,
      [index, defValue]).boolean;

  static final _id_getInt =
      jniAccessors.getMethodIDOf(_classRef, "getInt", "(II)I");

  /// from: public int getInt(int index, int defValue)
  ///
  /// Retrieve the integer value for the attribute at <var>index</var>.
  ///
  /// If the attribute is not an integer, this method will attempt to coerce
  /// it to an integer using Integer\#decode(String).
  ///@param index Index of attribute to retrieve.
  ///@param defValue Value to return if the attribute is not defined or
  ///                 cannot be coerced to an integer.
  ///@return Integer value of the attribute, or defValue if the attribute was
  ///         not defined or could not be coerced to an integer.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  int getInt(int index, int defValue) => jniAccessors.callMethodWithArgs(
      reference, _id_getInt, jni.JniType.intType, [index, defValue]).integer;

  static final _id_getFloat =
      jniAccessors.getMethodIDOf(_classRef, "getFloat", "(IF)F");

  /// from: public float getFloat(int index, float defValue)
  ///
  /// Retrieve the float value for the attribute at <var>index</var>.
  ///
  /// If the attribute is not a float or an integer, this method will attempt
  /// to coerce it to a float using Float\#parseFloat(String).
  ///@param index Index of attribute to retrieve.
  ///@return Attribute float value, or defValue if the attribute was
  ///         not defined or could not be coerced to a float.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  double getFloat(int index, double defValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getFloat,
          jni.JniType.floatType, [index, defValue]).float;

  static final _id_getColor =
      jniAccessors.getMethodIDOf(_classRef, "getColor", "(II)I");

  /// from: public int getColor(int index, int defValue)
  ///
  /// Retrieve the color value for the attribute at <var>index</var>.  If
  /// the attribute references a color resource holding a complex
  /// android.content.res.ColorStateList, then the default color from
  /// the set is returned.
  ///
  /// This method will throw an exception if the attribute is defined but is
  /// not an integer color or color state list.
  ///@param index Index of attribute to retrieve.
  ///@param defValue Value to return if the attribute is not defined or
  ///                 not a resource.
  ///@return Attribute color value, or defValue if not defined.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  ///@throws UnsupportedOperationException if the attribute is defined but is
  ///         not an integer color or color state list.
  int getColor(int index, int defValue) => jniAccessors.callMethodWithArgs(
      reference, _id_getColor, jni.JniType.intType, [index, defValue]).integer;

  static final _id_getColorStateList = jniAccessors.getMethodIDOf(_classRef,
      "getColorStateList", "(I)Landroid/content/res/ColorStateList;");

  /// from: public android.content.res.ColorStateList getColorStateList(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the ColorStateList for the attribute at <var>index</var>.
  /// The value may be either a single solid color or a reference to
  /// a color or complex android.content.res.ColorStateList
  /// description.
  ///
  /// This method will return {@code null} if the attribute is not defined or
  /// is not an integer color or color state list.
  ///@param index Index of attribute to retrieve.
  ///@return ColorStateList for the attribute, or {@code null} if not
  ///         defined.
  ///@throws RuntimeException if the attribute if the TypedArray has already
  ///         been recycled.
  ///@throws UnsupportedOperationException if the attribute is defined but is
  ///         not an integer color or color state list.
  colorstatelist_.ColorStateList getColorStateList(int index) =>
      colorstatelist_.ColorStateList.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getColorStateList,
          jni.JniType.objectType,
          [index]).object);

  static final _id_getInteger =
      jniAccessors.getMethodIDOf(_classRef, "getInteger", "(II)I");

  /// from: public int getInteger(int index, int defValue)
  ///
  /// Retrieve the integer value for the attribute at <var>index</var>.
  ///
  /// Unlike \#getInt(int, int), this method will throw an exception if
  /// the attribute is defined but is not an integer.
  ///@param index Index of attribute to retrieve.
  ///@param defValue Value to return if the attribute is not defined or
  ///                 not a resource.
  ///@return Attribute integer value, or defValue if not defined.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  ///@throws UnsupportedOperationException if the attribute is defined but is
  ///         not an integer.
  int getInteger(int index, int defValue) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getInteger,
      jni.JniType.intType,
      [index, defValue]).integer;

  static final _id_getDimension =
      jniAccessors.getMethodIDOf(_classRef, "getDimension", "(IF)F");

  /// from: public float getDimension(int index, float defValue)
  ///
  /// Retrieve a dimensional unit attribute at <var>index</var>. Unit
  /// conversions are based on the current DisplayMetrics
  /// associated with the resources this TypedArray object
  /// came from.
  ///
  /// This method will throw an exception if the attribute is defined but is
  /// not a dimension.
  ///@param index Index of attribute to retrieve.
  ///@param defValue Value to return if the attribute is not defined or
  ///                 not a resource.
  ///@return Attribute dimension value multiplied by the appropriate
  ///         metric, or defValue if not defined.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  ///@throws UnsupportedOperationException if the attribute is defined but is
  ///         not an integer.
  ///@see \#getDimensionPixelOffset
  ///@see \#getDimensionPixelSize
  double getDimension(int index, double defValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getDimension,
          jni.JniType.floatType, [index, defValue]).float;

  static final _id_getDimensionPixelOffset =
      jniAccessors.getMethodIDOf(_classRef, "getDimensionPixelOffset", "(II)I");

  /// from: public int getDimensionPixelOffset(int index, int defValue)
  ///
  /// Retrieve a dimensional unit attribute at <var>index</var> for use
  /// as an offset in raw pixels.  This is the same as
  /// \#getDimension, except the returned value is converted to
  /// integer pixels for you.  An offset conversion involves simply
  /// truncating the base value to an integer.
  ///
  /// This method will throw an exception if the attribute is defined but is
  /// not a dimension.
  ///@param index Index of attribute to retrieve.
  ///@param defValue Value to return if the attribute is not defined or
  ///                 not a resource.
  ///@return Attribute dimension value multiplied by the appropriate
  ///         metric and truncated to integer pixels, or defValue if not defined.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  ///@throws UnsupportedOperationException if the attribute is defined but is
  ///         not an integer.
  ///@see \#getDimension
  ///@see \#getDimensionPixelSize
  int getDimensionPixelOffset(int index, int defValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getDimensionPixelOffset,
          jni.JniType.intType, [index, defValue]).integer;

  static final _id_getDimensionPixelSize =
      jniAccessors.getMethodIDOf(_classRef, "getDimensionPixelSize", "(II)I");

  /// from: public int getDimensionPixelSize(int index, int defValue)
  ///
  /// Retrieve a dimensional unit attribute at <var>index</var> for use
  /// as a size in raw pixels.  This is the same as
  /// \#getDimension, except the returned value is converted to
  /// integer pixels for use as a size.  A size conversion involves
  /// rounding the base value, and ensuring that a non-zero base value
  /// is at least one pixel in size.
  ///
  /// This method will throw an exception if the attribute is defined but is
  /// not a dimension.
  ///@param index Index of attribute to retrieve.
  ///@param defValue Value to return if the attribute is not defined or
  ///                 not a resource.
  ///@return Attribute dimension value multiplied by the appropriate
  ///         metric and truncated to integer pixels, or defValue if not defined.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  ///@throws UnsupportedOperationException if the attribute is defined but is
  ///         not a dimension.
  ///@see \#getDimension
  ///@see \#getDimensionPixelOffset
  int getDimensionPixelSize(int index, int defValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getDimensionPixelSize,
          jni.JniType.intType, [index, defValue]).integer;

  static final _id_getLayoutDimension = jniAccessors.getMethodIDOf(
      _classRef, "getLayoutDimension", "(ILjava/lang/String;)I");

  /// from: public int getLayoutDimension(int index, java.lang.String name)
  ///
  /// Special version of \#getDimensionPixelSize for retrieving
  /// android.view.ViewGroup's layout_width and layout_height
  /// attributes.  This is only here for performance reasons; applications
  /// should use \#getDimensionPixelSize.
  ///
  /// This method will throw an exception if the attribute is defined but is
  /// not a dimension or integer (enum).
  ///@param index Index of the attribute to retrieve.
  ///@param name Textual name of attribute for error reporting.
  ///@return Attribute dimension value multiplied by the appropriate
  ///         metric and truncated to integer pixels.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  ///@throws UnsupportedOperationException if the attribute is defined but is
  ///         not a dimension or integer (enum).
  int getLayoutDimension(int index, jni.JniString name) =>
      jniAccessors.callMethodWithArgs(reference, _id_getLayoutDimension,
          jni.JniType.intType, [index, name.reference]).integer;

  static final _id_getLayoutDimension1 =
      jniAccessors.getMethodIDOf(_classRef, "getLayoutDimension", "(II)I");

  /// from: public int getLayoutDimension(int index, int defValue)
  ///
  /// Special version of \#getDimensionPixelSize for retrieving
  /// android.view.ViewGroup's layout_width and layout_height
  /// attributes.  This is only here for performance reasons; applications
  /// should use \#getDimensionPixelSize.
  ///@param index Index of the attribute to retrieve.
  ///@param defValue The default value to return if this attribute is not
  ///                 default or contains the wrong type of data.
  ///@return Attribute dimension value multiplied by the appropriate
  ///         metric and truncated to integer pixels.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  int getLayoutDimension1(int index, int defValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getLayoutDimension1,
          jni.JniType.intType, [index, defValue]).integer;

  static final _id_getFraction =
      jniAccessors.getMethodIDOf(_classRef, "getFraction", "(IIIF)F");

  /// from: public float getFraction(int index, int base, int pbase, float defValue)
  ///
  /// Retrieves a fractional unit attribute at <var>index</var>.
  ///@param index Index of attribute to retrieve.
  ///@param base The base value of this fraction.  In other words, a
  ///             standard fraction is multiplied by this value.
  ///@param pbase The parent base value of this fraction.  In other
  ///             words, a parent fraction (nn%p) is multiplied by this
  ///             value.
  ///@param defValue Value to return if the attribute is not defined or
  ///                 not a resource.
  ///@return Attribute fractional value multiplied by the appropriate
  ///         base value, or defValue if not defined.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  ///@throws UnsupportedOperationException if the attribute is defined but is
  ///         not a fraction.
  double getFraction(int index, int base, int pbase, double defValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getFraction,
          jni.JniType.floatType, [index, base, pbase, defValue]).float;

  static final _id_getResourceId =
      jniAccessors.getMethodIDOf(_classRef, "getResourceId", "(II)I");

  /// from: public int getResourceId(int index, int defValue)
  ///
  /// Retrieves the resource identifier for the attribute at
  /// <var>index</var>.  Note that attribute resource as resolved when
  /// the overall TypedArray object is retrieved.  As a
  /// result, this function will return the resource identifier of the
  /// final resource value that was found, _not_ necessarily the
  /// original resource that was specified by the attribute.
  ///@param index Index of attribute to retrieve.
  ///@param defValue Value to return if the attribute is not defined or
  ///                 not a resource.
  ///@return Attribute resource identifier, or defValue if not defined.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  int getResourceId(int index, int defValue) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getResourceId,
      jni.JniType.intType,
      [index, defValue]).integer;

  static final _id_getDrawable = jniAccessors.getMethodIDOf(
      _classRef, "getDrawable", "(I)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getDrawable(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the Drawable for the attribute at <var>index</var>.
  ///
  /// This method will throw an exception if the attribute is defined but is
  /// not a color or drawable resource.
  ///@param index Index of attribute to retrieve.
  ///@return Drawable for the attribute, or {@code null} if not defined.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  ///@throws UnsupportedOperationException if the attribute is defined but is
  ///         not a color or drawable resource.
  drawable_.Drawable getDrawable(int index) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDrawable, jni.JniType.objectType, [index]).object);

  static final _id_getFont = jniAccessors.getMethodIDOf(
      _classRef, "getFont", "(I)Landroid/graphics/Typeface;");

  /// from: public android.graphics.Typeface getFont(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the Typeface for the attribute at <var>index</var>.
  ///
  /// This method will throw an exception if the attribute is defined but is
  /// not a font.
  ///@param index Index of attribute to retrieve.
  ///@return Typeface for the attribute, or {@code null} if not defined.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  ///@throws UnsupportedOperationException if the attribute is defined but is
  ///         not a font resource.
  typeface_.Typeface getFont(int index) =>
      typeface_.Typeface.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFont, jni.JniType.objectType, [index]).object);

  static final _id_getTextArray = jniAccessors.getMethodIDOf(
      _classRef, "getTextArray", "(I)[Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence[] getTextArray(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the CharSequence[] for the attribute at <var>index</var>.
  /// This gets the resource ID of the selected attribute, and uses
  /// Resources\#getTextArray Resources.getTextArray of the owning
  /// Resources object to retrieve its String[].
  ///
  /// This method will throw an exception if the attribute is defined but is
  /// not a text array resource.
  ///@param index Index of attribute to retrieve.
  ///@return CharSequence[] for the attribute, or {@code null} if not
  ///         defined.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  jni.JniObject getTextArray(int index) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTextArray, jni.JniType.objectType, [index]).object);

  static final _id_getValue = jniAccessors.getMethodIDOf(
      _classRef, "getValue", "(ILandroid/util/TypedValue;)Z");

  /// from: public boolean getValue(int index, android.util.TypedValue outValue)
  ///
  /// Retrieve the raw TypedValue for the attribute at <var>index</var>.
  ///@param index Index of attribute to retrieve.
  ///@param outValue TypedValue object in which to place the attribute's
  ///                 data.
  ///@return {@code true} if the value was retrieved and not @empty, {@code false} otherwise.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  bool getValue(int index, typedvalue_.TypedValue outValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getValue,
          jni.JniType.booleanType, [index, outValue.reference]).boolean;

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "(I)I");

  /// from: public int getType(int index)
  ///
  /// Returns the type of attribute at the specified index.
  ///@param index Index of attribute whose type to retrieve.
  ///@return Attribute type.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  int getType(int index) => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, [index]).integer;

  static final _id_hasValue =
      jniAccessors.getMethodIDOf(_classRef, "hasValue", "(I)Z");

  /// from: public boolean hasValue(int index)
  ///
  /// Determines whether there is an attribute at <var>index</var>.
  ///
  /// <strong>Note:</strong> If the attribute was set to {@code @empty} or
  /// {@code @undefined}, this method returns {@code false}.
  ///@param index Index of attribute to retrieve.
  ///@return True if the attribute has a value, false otherwise.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  bool hasValue(int index) => jniAccessors.callMethodWithArgs(
      reference, _id_hasValue, jni.JniType.booleanType, [index]).boolean;

  static final _id_hasValueOrEmpty =
      jniAccessors.getMethodIDOf(_classRef, "hasValueOrEmpty", "(I)Z");

  /// from: public boolean hasValueOrEmpty(int index)
  ///
  /// Determines whether there is an attribute at <var>index</var>, returning
  /// {@code true} if the attribute was explicitly set to {@code @empty} and
  /// {@code false} only if the attribute was undefined.
  ///@param index Index of attribute to retrieve.
  ///@return True if the attribute has a value or is empty, false otherwise.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  bool hasValueOrEmpty(int index) => jniAccessors.callMethodWithArgs(
      reference, _id_hasValueOrEmpty, jni.JniType.booleanType, [index]).boolean;

  static final _id_peekValue = jniAccessors.getMethodIDOf(
      _classRef, "peekValue", "(I)Landroid/util/TypedValue;");

  /// from: public android.util.TypedValue peekValue(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the raw TypedValue for the attribute at <var>index</var>
  /// and return a temporary object holding its data.  This object is only
  /// valid until the next call on to TypedArray.
  ///@param index Index of attribute to retrieve.
  ///@return Returns a TypedValue object if the attribute is defined,
  ///         containing its data; otherwise returns null.  (You will not
  ///         receive a TypedValue whose type is TYPE_NULL.)
  ///@throws RuntimeException if the TypedArray has already been recycled.
  typedvalue_.TypedValue peekValue(int index) =>
      typedvalue_.TypedValue.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_peekValue, jni.JniType.objectType, [index]).object);

  static final _id_getPositionDescription = jniAccessors.getMethodIDOf(
      _classRef, "getPositionDescription", "()Ljava/lang/String;");

  /// from: public java.lang.String getPositionDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a message about the parser state suitable for printing error messages.
  ///@return Human-readable description of current parser state.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  jni.JniString getPositionDescription() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getPositionDescription, jni.JniType.objectType, []).object);

  static final _id_recycle =
      jniAccessors.getMethodIDOf(_classRef, "recycle", "()V");

  /// from: public void recycle()
  ///
  /// Recycles the TypedArray, to be re-used by a later caller. After calling
  /// this function you must not ever touch the typed array again.
  ///@throws RuntimeException if the TypedArray has already been recycled.
  void recycle() => jniAccessors.callMethodWithArgs(
      reference, _id_recycle, jni.JniType.voidType, []).check();

  static final _id_getChangingConfigurations =
      jniAccessors.getMethodIDOf(_classRef, "getChangingConfigurations", "()I");

  /// from: public int getChangingConfigurations()
  ///
  /// Return a mask of the configuration parameters for which the values in
  /// this typed array may change.
  ///@return Returns a mask of the changing configuration parameters, as
  ///         defined by android.content.pm.ActivityInfo.
  /// Value is either <code>0</code> or a combination of android.content.pm.ActivityInfo\#CONFIG_MCC, android.content.pm.ActivityInfo\#CONFIG_MNC, android.content.pm.ActivityInfo\#CONFIG_LOCALE, android.content.pm.ActivityInfo\#CONFIG_TOUCHSCREEN, android.content.pm.ActivityInfo\#CONFIG_KEYBOARD, android.content.pm.ActivityInfo\#CONFIG_KEYBOARD_HIDDEN, android.content.pm.ActivityInfo\#CONFIG_NAVIGATION, android.content.pm.ActivityInfo\#CONFIG_ORIENTATION, android.content.pm.ActivityInfo\#CONFIG_SCREEN_LAYOUT, android.content.pm.ActivityInfo\#CONFIG_UI_MODE, android.content.pm.ActivityInfo\#CONFIG_SCREEN_SIZE, android.content.pm.ActivityInfo\#CONFIG_SMALLEST_SCREEN_SIZE, android.content.pm.ActivityInfo\#CONFIG_DENSITY, android.content.pm.ActivityInfo\#CONFIG_LAYOUT_DIRECTION, android.content.pm.ActivityInfo\#CONFIG_COLOR_MODE, and android.content.pm.ActivityInfo\#CONFIG_FONT_SCALE
  ///@throws RuntimeException if the TypedArray has already been recycled.
  ///@see android.content.pm.ActivityInfo
  int getChangingConfigurations() => jniAccessors.callMethodWithArgs(reference,
      _id_getChangingConfigurations, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
