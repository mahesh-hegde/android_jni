// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ObbInfo.dart" as obbinfo_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.res.ObbScanner
///
/// Class to scan Opaque Binary Blob (OBB) files. Use this to get information
/// about an OBB file for use in a program via ObbInfo.
class ObbScanner extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/res/ObbScanner");
  ObbScanner.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ObbScanner()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getObbInfo = jniAccessors.getStaticMethodIDOf(_classRef,
      "getObbInfo", "(Ljava/lang/String;)Landroid/content/res/ObbInfo;");

  /// from: static public android.content.res.ObbInfo getObbInfo(java.lang.String filePath)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Scan a file for OBB information.
  ///@param filePath path to the OBB file to be scanned.
  ///@return ObbInfo object information corresponding to the file path
  ///@throws IllegalArgumentException if the OBB file couldn't be found
  ///@throws IOException if the OBB file couldn't be read
  static obbinfo_.ObbInfo getObbInfo(jni.JniString filePath) =>
      obbinfo_.ObbInfo.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getObbInfo, jni.JniType.objectType, [filePath.reference]).object);
}
