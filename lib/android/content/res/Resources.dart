// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AssetManager.dart" as assetmanager_;

import "../../util/DisplayMetrics.dart" as displaymetrics_;

import "Configuration.dart" as configuration_;

import "../../graphics/Typeface.dart" as typeface_;

import "TypedArray.dart" as typedarray_;

import "../../graphics/drawable/Drawable.dart" as drawable_;

import "../../graphics/Movie.dart" as movie_;

import "ColorStateList.dart" as colorstatelist_;

import "XmlResourceParser.dart" as xmlresourceparser_;

import "../../util/TypedValue.dart" as typedvalue_;

import "AssetFileDescriptor.dart" as assetfiledescriptor_;

import "../../util/AttributeSet.dart" as attributeset_;

import "../../os/Bundle.dart" as bundle_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.res.Resources
///
/// Class for accessing an application's resources.  This sits on top of the
/// asset manager of the application (accessible through \#getAssets) and
/// provides a high-level API for getting typed data from the assets.
///
/// The Android resource system keeps track of all non-code assets associated with an
/// application. You can use this class to access your application's resources. You can generally
/// acquire the android.content.res.Resources instance associated with your application
/// with android.content.Context\#getResources getResources().
///
///
/// The Android SDK tools compile your application's resources into the application binary
/// at build time.  To use a resource, you must install it correctly in the source tree (inside
/// your project's {@code res/} directory) and build your application.  As part of the build
/// process, the SDK tools generate symbols for each resource, which you can use in your application
/// code to access the resources.
///
///
/// Using application resources makes it easy to update various characteristics of your
/// application without modifying code, and&mdash;by providing sets of alternative
/// resources&mdash;enables you to optimize your application for a variety of device configurations
/// (such as for different languages and screen sizes). This is an important aspect of developing
/// Android applications that are compatible on different types of devices.
///
///
/// For more information about using resources, see the documentation about <a href="{@docRoot}guide/topics/resources/index.html">Application Resources</a>.
///
class Resources extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/res/Resources");
  Resources.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/res/AssetManager;Landroid/util/DisplayMetrics;Landroid/content/res/Configuration;)V");

  /// from: public void <init>(android.content.res.AssetManager assets, android.util.DisplayMetrics metrics, android.content.res.Configuration config)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new Resources object on top of an existing set of assets in an
  /// AssetManager.
  ///@deprecated Resources should not be constructed by apps.
  /// See android.content.Context\#createConfigurationContext(Configuration).
  ///@param assets Previously created AssetManager.
  ///@param metrics Current display metrics to consider when
  ///                selecting/computing resource values.
  ///@param config Desired device configuration to consider when
  ///               selecting/computing resource values (optional).
  Resources(
      assetmanager_.AssetManager assets,
      displaymetrics_.DisplayMetrics metrics,
      configuration_.Configuration config)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [assets.reference, metrics.reference, config.reference]).object);

  static final _id_getSystem = jniAccessors.getStaticMethodIDOf(
      _classRef, "getSystem", "()Landroid/content/res/Resources;");

  /// from: static public android.content.res.Resources getSystem()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a global shared Resources object that provides access to only
  /// system resources (no application resources), and is not configured for
  /// the current screen (can not use dimension units, does not change based
  /// on orientation, etc).
  static Resources getSystem() =>
      Resources.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getSystem, jni.JniType.objectType, []).object);

  static final _id_getText = jniAccessors.getMethodIDOf(
      _classRef, "getText", "(I)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getText(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the string value associated with a particular resource ID.  The
  /// returned object will be a String if this is a plain string; it will be
  /// some other type of CharSequence if it is styled.
  /// {@more }
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return CharSequence The string data associated with the resource, plus
  ///         possibly styled text information.
  ///
  /// This value will never be {@code null}.
  jni.JniObject getText(int id) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText, jni.JniType.objectType, [id]).object);

  static final _id_getFont = jniAccessors.getMethodIDOf(
      _classRef, "getFont", "(I)Landroid/graphics/Typeface;");

  /// from: public android.graphics.Typeface getFont(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the Typeface value associated with a particular resource ID.
  /// {@more }
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return Typeface The Typeface data associated with the resource.
  ///
  /// This value will never be {@code null}.
  typeface_.Typeface getFont(int id) =>
      typeface_.Typeface.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFont, jni.JniType.objectType, [id]).object);

  static final _id_getQuantityText = jniAccessors.getMethodIDOf(
      _classRef, "getQuantityText", "(II)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getQuantityText(int id, int quantity)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the character sequence necessary for grammatically correct pluralization
  /// of the given resource ID for the given quantity.
  /// Note that the character sequence is selected based solely on grammatical necessity,
  /// and that such rules differ between languages. Do not assume you know which string
  /// will be returned for a given quantity. See
  /// <a href="{@docRoot}guide/topics/resources/string-resource.html\#Plurals">String Resources</a>
  /// for more detail.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@param quantity The number used to get the correct string for the current language's
  ///           plural rules.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return CharSequence The string data associated with the resource, plus
  ///         possibly styled text information.
  ///
  /// This value will never be {@code null}.
  jni.JniObject getQuantityText(int id, int quantity) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getQuantityText, jni.JniType.objectType, [id, quantity]).object);

  static final _id_getString = jniAccessors.getMethodIDOf(
      _classRef, "getString", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getString(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the string value associated with a particular resource ID.  It
  /// will be stripped of any styled text information.
  /// {@more }
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return String The string data associated with the resource,
  ///         stripped of styled text information.
  ///
  /// This value will never be {@code null}.
  jni.JniString getString(int id) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getString, jni.JniType.objectType, [id]).object);

  static final _id_getString1 = jniAccessors.getMethodIDOf(
      _classRef, "getString", "(I[Ljava/lang/Object;)Ljava/lang/String;");

  /// from: public java.lang.String getString(int id, java.lang.Object[] formatArgs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the string value associated with a particular resource ID,
  /// substituting the format arguments as defined in java.util.Formatter
  /// and java.lang.String\#format. It will be stripped of any styled text
  /// information.
  /// {@more }
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@param formatArgs The format arguments that will be used for substitution.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return String The string data associated with the resource,
  ///         stripped of styled text information.
  ///
  /// This value will never be {@code null}.
  jni.JniString getString1(int id, jni.JniObject formatArgs) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getString1,
          jni.JniType.objectType,
          [id, formatArgs.reference]).object);

  static final _id_getQuantityString = jniAccessors.getMethodIDOf(_classRef,
      "getQuantityString", "(II[Ljava/lang/Object;)Ljava/lang/String;");

  /// from: public java.lang.String getQuantityString(int id, int quantity, java.lang.Object[] formatArgs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Formats the string necessary for grammatically correct pluralization
  /// of the given resource ID for the given quantity, using the given arguments.
  /// Note that the string is selected based solely on grammatical necessity,
  /// and that such rules differ between languages. Do not assume you know which string
  /// will be returned for a given quantity. See
  /// <a href="{@docRoot}guide/topics/resources/string-resource.html\#Plurals">String Resources</a>
  /// for more detail.
  ///
  /// Substitution of format arguments works as if using
  /// java.util.Formatter and java.lang.String\#format.
  /// The resulting string will be stripped of any styled text information.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@param quantity The number used to get the correct string for the current language's
  ///           plural rules.
  ///@param formatArgs The format arguments that will be used for substitution.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return String The string data associated with the resource,
  /// stripped of styled text information.
  ///
  /// This value will never be {@code null}.
  jni.JniString getQuantityString(
          int id, int quantity, jni.JniObject formatArgs) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getQuantityString,
          jni.JniType.objectType,
          [id, quantity, formatArgs.reference]).object);

  static final _id_getQuantityString1 = jniAccessors.getMethodIDOf(
      _classRef, "getQuantityString", "(II)Ljava/lang/String;");

  /// from: public java.lang.String getQuantityString(int id, int quantity)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the string necessary for grammatically correct pluralization
  /// of the given resource ID for the given quantity.
  /// Note that the string is selected based solely on grammatical necessity,
  /// and that such rules differ between languages. Do not assume you know which string
  /// will be returned for a given quantity. See
  /// <a href="{@docRoot}guide/topics/resources/string-resource.html\#Plurals">String Resources</a>
  /// for more detail.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@param quantity The number used to get the correct string for the current language's
  ///           plural rules.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return String The string data associated with the resource,
  /// stripped of styled text information.
  ///
  /// This value will never be {@code null}.
  jni.JniString getQuantityString1(int id, int quantity) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getQuantityString1,
          jni.JniType.objectType,
          [id, quantity]).object);

  static final _id_getText1 = jniAccessors.getMethodIDOf(_classRef, "getText",
      "(ILjava/lang/CharSequence;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getText(int id, java.lang.CharSequence def)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the string value associated with a particular resource ID.  The
  /// returned object will be a String if this is a plain string; it will be
  /// some other type of CharSequence if it is styled.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@param def The default CharSequence to return.
  ///@return CharSequence The string data associated with the resource, plus
  ///         possibly styled text information, or def if id is 0 or not found.
  jni.JniObject getText1(int id, jni.JniObject def) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getText1, jni.JniType.objectType, [id, def.reference]).object);

  static final _id_getTextArray = jniAccessors.getMethodIDOf(
      _classRef, "getTextArray", "(I)[Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence[] getTextArray(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the styled text array associated with a particular resource ID.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return The styled text array associated with the resource.
  ///
  /// This value will never be {@code null}.
  jni.JniObject getTextArray(int id) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTextArray, jni.JniType.objectType, [id]).object);

  static final _id_getStringArray = jniAccessors.getMethodIDOf(
      _classRef, "getStringArray", "(I)[Ljava/lang/String;");

  /// from: public java.lang.String[] getStringArray(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the string array associated with a particular resource ID.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return The string array associated with the resource.
  ///
  /// This value will never be {@code null}.
  jni.JniObject getStringArray(int id) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getStringArray, jni.JniType.objectType, [id]).object);

  static final _id_getIntArray =
      jniAccessors.getMethodIDOf(_classRef, "getIntArray", "(I)[I");

  /// from: public int[] getIntArray(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the int array associated with a particular resource ID.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return The int array associated with the resource.
  ///
  /// This value will never be {@code null}.
  jni.JniObject getIntArray(int id) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getIntArray, jni.JniType.objectType, [id]).object);

  static final _id_obtainTypedArray = jniAccessors.getMethodIDOf(
      _classRef, "obtainTypedArray", "(I)Landroid/content/res/TypedArray;");

  /// from: public android.content.res.TypedArray obtainTypedArray(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an array of heterogeneous values.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return Returns a TypedArray holding an array of the array values.
  /// Be sure to call TypedArray\#recycle() TypedArray.recycle()
  /// when done with it.
  ///
  /// This value will never be {@code null}.
  typedarray_.TypedArray obtainTypedArray(int id) =>
      typedarray_.TypedArray.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_obtainTypedArray, jni.JniType.objectType, [id]).object);

  static final _id_getDimension =
      jniAccessors.getMethodIDOf(_classRef, "getDimension", "(I)F");

  /// from: public float getDimension(int id)
  ///
  /// Retrieve a dimensional for a particular resource ID.  Unit
  /// conversions are based on the current DisplayMetrics associated
  /// with the resources.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@return Resource dimension value multiplied by the appropriate
  /// metric.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@see \#getDimensionPixelOffset
  ///@see \#getDimensionPixelSize
  double getDimension(int id) => jniAccessors.callMethodWithArgs(
      reference, _id_getDimension, jni.JniType.floatType, [id]).float;

  static final _id_getDimensionPixelOffset =
      jniAccessors.getMethodIDOf(_classRef, "getDimensionPixelOffset", "(I)I");

  /// from: public int getDimensionPixelOffset(int id)
  ///
  /// Retrieve a dimensional for a particular resource ID for use
  /// as an offset in raw pixels.  This is the same as
  /// \#getDimension, except the returned value is converted to
  /// integer pixels for you.  An offset conversion involves simply
  /// truncating the base value to an integer.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@return Resource dimension value multiplied by the appropriate
  /// metric and truncated to integer pixels.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@see \#getDimension
  ///@see \#getDimensionPixelSize
  int getDimensionPixelOffset(int id) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getDimensionPixelOffset,
      jni.JniType.intType,
      [id]).integer;

  static final _id_getDimensionPixelSize =
      jniAccessors.getMethodIDOf(_classRef, "getDimensionPixelSize", "(I)I");

  /// from: public int getDimensionPixelSize(int id)
  ///
  /// Retrieve a dimensional for a particular resource ID for use
  /// as a size in raw pixels.  This is the same as
  /// \#getDimension, except the returned value is converted to
  /// integer pixels for use as a size.  A size conversion involves
  /// rounding the base value, and ensuring that a non-zero base value
  /// is at least one pixel in size.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@return Resource dimension value multiplied by the appropriate
  /// metric and truncated to integer pixels.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@see \#getDimension
  ///@see \#getDimensionPixelOffset
  int getDimensionPixelSize(int id) => jniAccessors.callMethodWithArgs(
      reference, _id_getDimensionPixelSize, jni.JniType.intType, [id]).integer;

  static final _id_getFraction =
      jniAccessors.getMethodIDOf(_classRef, "getFraction", "(III)F");

  /// from: public float getFraction(int id, int base, int pbase)
  ///
  /// Retrieve a fractional unit for a particular resource ID.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@param base The base value of this fraction.  In other words, a
  ///             standard fraction is multiplied by this value.
  ///@param pbase The parent base value of this fraction.  In other
  ///             words, a parent fraction (nn%p) is multiplied by this
  ///             value.
  ///@return Attribute fractional value multiplied by the appropriate
  /// base value.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  double getFraction(int id, int base, int pbase) =>
      jniAccessors.callMethodWithArgs(reference, _id_getFraction,
          jni.JniType.floatType, [id, base, pbase]).float;

  static final _id_getDrawable = jniAccessors.getMethodIDOf(
      _classRef, "getDrawable", "(I)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getDrawable(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a drawable object associated with a particular resource ID.
  /// Various types of objects will be returned depending on the underlying
  /// resource -- for example, a solid color, PNG image, scalable image, etc.
  /// The Drawable API hides these implementation details.
  ///
  /// <p class="note"><strong>Note:</strong> Prior to
  /// android.os.Build.VERSION_CODES\#JELLY_BEAN, this function
  /// would not correctly retrieve the final configuration density when
  /// the resource ID passed here is an alias to another Drawable resource.
  /// This means that if the density configuration of the alias resource
  /// is different than the actual resource, the density of the returned
  /// Drawable would be incorrect, resulting in bad scaling. To work
  /// around this, you can instead manually resolve the aliased reference
  /// by using \#getValue(int, TypedValue, boolean) and passing
  /// {@code true} for {@code resolveRefs}. The resulting
  /// TypedValue\#resourceId value may be passed to this method.
  ///
  ///
  /// <p class="note"><strong>Note:</strong> To obtain a themed drawable, use
  /// android.content.Context\#getDrawable(int) Context.getDrawable(int)
  /// or \#getDrawable(int, Theme) passing the desired theme.
  ///
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@return Drawable An object that can be used to draw this resource.
  ///@throws NotFoundException Throws NotFoundException if the given ID does
  ///         not exist.
  ///@see \#getDrawable(int, Theme)
  ///@deprecated Use \#getDrawable(int, Theme) instead.
  drawable_.Drawable getDrawable(int id) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDrawable, jni.JniType.objectType, [id]).object);

  static final _id_getDrawable1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getDrawable",
      "(ILandroid/content/res/Resources\$Theme;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getDrawable(int id, android.content.res.Resources.Theme theme)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a drawable object associated with a particular resource ID and
  /// styled for the specified theme. Various types of objects will be
  /// returned depending on the underlying resource -- for example, a solid
  /// color, PNG image, scalable image, etc.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@param theme The theme used to style the drawable attributes, may be {@code null}.
  /// This value may be {@code null}.
  ///@return Drawable An object that can be used to draw this resource.
  ///@throws NotFoundException Throws NotFoundException if the given ID does
  ///         not exist.
  drawable_.Drawable getDrawable1(int id, Resources_Theme theme) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDrawable1,
          jni.JniType.objectType,
          [id, theme.reference]).object);

  static final _id_getDrawableForDensity = jniAccessors.getMethodIDOf(_classRef,
      "getDrawableForDensity", "(II)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getDrawableForDensity(int id, int density)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a drawable object associated with a particular resource ID for the
  /// given screen density in DPI. This will set the drawable's density to be
  /// the device's density multiplied by the ratio of actual drawable density
  /// to requested density. This allows the drawable to be scaled up to the
  /// correct size if needed. Various types of objects will be returned
  /// depending on the underlying resource -- for example, a solid color, PNG
  /// image, scalable image, etc. The Drawable API hides these implementation
  /// details.
  ///
  /// <p class="note"><strong>Note:</strong> To obtain a themed drawable, use
  /// android.content.Context\#getDrawable(int) Context.getDrawable(int)
  /// or \#getDrawableForDensity(int, int, Theme) passing the desired
  /// theme.
  ///
  ///@param id The desired resource identifier, as generated by the aapt tool.
  ///            This integer encodes the package, type, and resource entry.
  ///            The value 0 is an invalid identifier.
  ///@param density the desired screen density indicated by the resource as
  ///            found in DisplayMetrics. A value of 0 means to use the
  ///            density returned from \#getConfiguration().
  ///            This is equivalent to calling \#getDrawable(int).
  ///@return Drawable An object that can be used to draw this resource.
  /// This value may be {@code null}.
  ///@throws NotFoundException Throws NotFoundException if the given ID does
  ///             not exist.
  ///@see \#getDrawableForDensity(int, int, Theme)
  ///@deprecated Use \#getDrawableForDensity(int, int, Theme) instead.
  drawable_.Drawable getDrawableForDensity(int id, int density) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDrawableForDensity,
          jni.JniType.objectType,
          [id, density]).object);

  static final _id_getDrawableForDensity1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getDrawableForDensity",
      "(IILandroid/content/res/Resources\$Theme;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getDrawableForDensity(int id, int density, android.content.res.Resources.Theme theme)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a drawable object associated with a particular resource ID for the
  /// given screen density in DPI and styled for the specified theme.
  ///@param id The desired resource identifier, as generated by the aapt tool.
  ///            This integer encodes the package, type, and resource entry.
  ///            The value 0 is an invalid identifier.
  ///@param density The desired screen density indicated by the resource as
  ///            found in DisplayMetrics. A value of 0 means to use the
  ///            density returned from \#getConfiguration().
  ///            This is equivalent to calling \#getDrawable(int, Theme).
  ///@param theme The theme used to style the drawable attributes, may be {@code null} if the
  ///              drawable cannot be decoded.
  /// This value may be {@code null}.
  ///@return Drawable An object that can be used to draw this resource.
  ///@throws NotFoundException Throws NotFoundException if the given ID does
  ///             not exist.
  drawable_.Drawable getDrawableForDensity1(
          int id, int density, Resources_Theme theme) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDrawableForDensity1,
          jni.JniType.objectType,
          [id, density, theme.reference]).object);

  static final _id_getMovie = jniAccessors.getMethodIDOf(
      _classRef, "getMovie", "(I)Landroid/graphics/Movie;");

  /// from: public android.graphics.Movie getMovie(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a movie object associated with the particular resource ID.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  movie_.Movie getMovie(int id) =>
      movie_.Movie.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMovie, jni.JniType.objectType, [id]).object);

  static final _id_getColor =
      jniAccessors.getMethodIDOf(_classRef, "getColor", "(I)I");

  /// from: public int getColor(int id)
  ///
  /// Returns a color integer associated with a particular resource ID. If the
  /// resource holds a complex ColorStateList, then the default color
  /// from the set is returned.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does
  ///         not exist.
  ///@return A single color value in the form 0xAARRGGBB.
  ///@deprecated Use \#getColor(int, Theme) instead.
  int getColor(int id) => jniAccessors.callMethodWithArgs(
      reference, _id_getColor, jni.JniType.intType, [id]).integer;

  static final _id_getColor1 = jniAccessors.getMethodIDOf(
      _classRef, "getColor", "(ILandroid/content/res/Resources\$Theme;)I");

  /// from: public int getColor(int id, android.content.res.Resources.Theme theme)
  ///
  /// Returns a themed color integer associated with a particular resource ID.
  /// If the resource holds a complex ColorStateList, then the default
  /// color from the set is returned.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@param theme The theme used to style the color attributes, may be
  ///              {@code null}.
  ///
  /// This value may be {@code null}.
  ///@throws NotFoundException Throws NotFoundException if the given ID does
  ///         not exist.
  ///@return A single color value in the form 0xAARRGGBB.
  int getColor1(int id, Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(reference, _id_getColor1,
          jni.JniType.intType, [id, theme.reference]).integer;

  static final _id_getColorStateList = jniAccessors.getMethodIDOf(_classRef,
      "getColorStateList", "(I)Landroid/content/res/ColorStateList;");

  /// from: public android.content.res.ColorStateList getColorStateList(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a color state list associated with a particular resource ID. The
  /// resource may contain either a single raw color value or a complex
  /// ColorStateList holding multiple possible colors.
  ///@param id The desired resource identifier of a ColorStateList,
  ///           as generated by the aapt tool. This integer encodes the
  ///           package, type, and resource entry. The value 0 is an invalid
  ///           identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does
  ///         not exist.
  ///@return A ColorStateList object containing either a single solid color
  ///         or multiple colors that can be selected based on a state.
  /// This value will never be {@code null}.
  ///@deprecated Use \#getColorStateList(int, Theme) instead.
  colorstatelist_.ColorStateList getColorStateList(int id) =>
      colorstatelist_.ColorStateList.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getColorStateList,
          jni.JniType.objectType,
          [id]).object);

  static final _id_getColorStateList1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getColorStateList",
      "(ILandroid/content/res/Resources\$Theme;)Landroid/content/res/ColorStateList;");

  /// from: public android.content.res.ColorStateList getColorStateList(int id, android.content.res.Resources.Theme theme)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a themed color state list associated with a particular resource
  /// ID. The resource may contain either a single raw color value or a
  /// complex ColorStateList holding multiple possible colors.
  ///@param id The desired resource identifier of a ColorStateList,
  ///           as generated by the aapt tool. This integer encodes the
  ///           package, type, and resource entry. The value 0 is an invalid
  ///           identifier.
  ///@param theme The theme used to style the color attributes, may be
  ///              {@code null}.
  ///
  /// This value may be {@code null}.
  ///@throws NotFoundException Throws NotFoundException if the given ID does
  ///         not exist.
  ///@return A themed ColorStateList object containing either a single solid
  ///         color or multiple colors that can be selected based on a state.
  colorstatelist_.ColorStateList getColorStateList1(
          int id, Resources_Theme theme) =>
      colorstatelist_.ColorStateList.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getColorStateList1,
          jni.JniType.objectType,
          [id, theme.reference]).object);

  static final _id_getBoolean =
      jniAccessors.getMethodIDOf(_classRef, "getBoolean", "(I)Z");

  /// from: public boolean getBoolean(int id)
  ///
  /// Return a boolean associated with a particular resource ID.  This can be
  /// used with any integral resource value, and will return true if it is
  /// non-zero.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return Returns the boolean value contained in the resource.
  bool getBoolean(int id) => jniAccessors.callMethodWithArgs(
      reference, _id_getBoolean, jni.JniType.booleanType, [id]).boolean;

  static final _id_getInteger =
      jniAccessors.getMethodIDOf(_classRef, "getInteger", "(I)I");

  /// from: public int getInteger(int id)
  ///
  /// Return an integer associated with a particular resource ID.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return Returns the integer value contained in the resource.
  int getInteger(int id) => jniAccessors.callMethodWithArgs(
      reference, _id_getInteger, jni.JniType.intType, [id]).integer;

  static final _id_getLayout = jniAccessors.getMethodIDOf(
      _classRef, "getLayout", "(I)Landroid/content/res/XmlResourceParser;");

  /// from: public android.content.res.XmlResourceParser getLayout(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an XmlResourceParser through which you can read a view layout
  /// description for the given resource ID.  This parser has limited
  /// functionality -- in particular, you can't change its input, and only
  /// the high-level events are available.
  ///
  /// This function is really a simple wrapper for calling
  /// \#getXml with a layout resource.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return A new parser object through which you can read
  ///         the XML data.
  ///
  /// This value will never be {@code null}.
  ///@see \#getXml
  xmlresourceparser_.XmlResourceParser getLayout(int id) =>
      xmlresourceparser_.XmlResourceParser.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getLayout, jni.JniType.objectType, [id]).object);

  static final _id_getAnimation = jniAccessors.getMethodIDOf(
      _classRef, "getAnimation", "(I)Landroid/content/res/XmlResourceParser;");

  /// from: public android.content.res.XmlResourceParser getAnimation(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an XmlResourceParser through which you can read an animation
  /// description for the given resource ID.  This parser has limited
  /// functionality -- in particular, you can't change its input, and only
  /// the high-level events are available.
  ///
  /// This function is really a simple wrapper for calling
  /// \#getXml with an animation resource.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return A new parser object through which you can read
  ///         the XML data.
  ///
  /// This value will never be {@code null}.
  ///@see \#getXml
  xmlresourceparser_.XmlResourceParser getAnimation(int id) =>
      xmlresourceparser_.XmlResourceParser.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getAnimation,
              jni.JniType.objectType, [id]).object);

  static final _id_getXml = jniAccessors.getMethodIDOf(
      _classRef, "getXml", "(I)Landroid/content/res/XmlResourceParser;");

  /// from: public android.content.res.XmlResourceParser getXml(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an XmlResourceParser through which you can read a generic XML
  /// resource for the given resource ID.
  ///
  /// The XmlPullParser implementation returned here has some limited
  /// functionality.  In particular, you can't change its input, and only
  /// high-level parsing events are available (since the document was
  /// pre-parsed for you at build time, which involved merging text and
  /// stripping comments).
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return A new parser object through which you can read
  ///         the XML data.
  ///
  /// This value will never be {@code null}.
  ///@see android.util.AttributeSet
  xmlresourceparser_.XmlResourceParser getXml(int id) =>
      xmlresourceparser_.XmlResourceParser.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getXml, jni.JniType.objectType, [id]).object);

  static final _id_openRawResource = jniAccessors.getMethodIDOf(
      _classRef, "openRawResource", "(I)Ljava/io/InputStream;");

  /// from: public java.io.InputStream openRawResource(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Open a data stream for reading a raw resource.  This can only be used
  /// with resources whose value is the name of an asset files -- that is, it can be
  /// used to open drawable, sound, and raw resources; it will fail on string
  /// and color resources.
  ///@param id The resource identifier to open, as generated by the aapt tool.
  ///@return InputStream Access to the resource data.
  ///
  /// This value will never be {@code null}.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  jni.JniObject openRawResource(int id) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_openRawResource, jni.JniType.objectType, [id]).object);

  static final _id_openRawResource1 = jniAccessors.getMethodIDOf(_classRef,
      "openRawResource", "(ILandroid/util/TypedValue;)Ljava/io/InputStream;");

  /// from: public java.io.InputStream openRawResource(int id, android.util.TypedValue value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Open a data stream for reading a raw resource.  This can only be used
  /// with resources whose value is the name of an asset file -- that is, it can be
  /// used to open drawable, sound, and raw resources; it will fail on string
  /// and color resources.
  ///@param id The resource identifier to open, as generated by the aapt tool.
  ///@param value The TypedValue object to hold the resource information.
  ///@return InputStream Access to the resource data.
  ///
  /// This value will never be {@code null}.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  jni.JniObject openRawResource1(int id, typedvalue_.TypedValue value) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_openRawResource1,
          jni.JniType.objectType,
          [id, value.reference]).object);

  static final _id_openRawResourceFd = jniAccessors.getMethodIDOf(_classRef,
      "openRawResourceFd", "(I)Landroid/content/res/AssetFileDescriptor;");

  /// from: public android.content.res.AssetFileDescriptor openRawResourceFd(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Open a file descriptor for reading a raw resource.  This can only be used
  /// with resources whose value is the name of an asset files -- that is, it can be
  /// used to open drawable, sound, and raw resources; it will fail on string
  /// and color resources.
  ///
  /// This function only works for resources that are stored in the package
  /// as uncompressed data, which typically includes things like mp3 files
  /// and png images.
  ///@param id The resource identifier to open, as generated by the aapt tool.
  ///@return AssetFileDescriptor A new file descriptor you can use to read
  /// the resource.  This includes the file descriptor itself, as well as the
  /// offset and length of data where the resource appears in the file.  A
  /// null is returned if the file exists but is compressed.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  assetfiledescriptor_.AssetFileDescriptor openRawResourceFd(int id) =>
      assetfiledescriptor_.AssetFileDescriptor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_openRawResourceFd,
              jni.JniType.objectType, [id]).object);

  static final _id_getValue = jniAccessors.getMethodIDOf(
      _classRef, "getValue", "(ILandroid/util/TypedValue;Z)V");

  /// from: public void getValue(int id, android.util.TypedValue outValue, boolean resolveRefs)
  ///
  /// Return the raw data associated with a particular resource ID.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@param outValue Object in which to place the resource data.
  ///@param resolveRefs If true, a resource that is a reference to another
  ///                    resource will be followed so that you receive the
  ///                    actual final resource data.  If false, the TypedValue
  ///                    will be filled in with the reference itself.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  void getValue(int id, typedvalue_.TypedValue outValue, bool resolveRefs) =>
      jniAccessors.callMethodWithArgs(reference, _id_getValue,
          jni.JniType.voidType, [id, outValue.reference, resolveRefs]).check();

  static final _id_getValueForDensity = jniAccessors.getMethodIDOf(
      _classRef, "getValueForDensity", "(IILandroid/util/TypedValue;Z)V");

  /// from: public void getValueForDensity(int id, int density, android.util.TypedValue outValue, boolean resolveRefs)
  ///
  /// Get the raw value associated with a resource with associated density.
  ///@param id resource identifier
  ///@param density density in DPI
  ///@param resolveRefs If true, a resource that is a reference to another
  ///            resource will be followed so that you receive the actual final
  ///            resource data. If false, the TypedValue will be filled in with
  ///            the reference itself.
  ///@throws NotFoundException Throws NotFoundException if the given ID does
  ///             not exist.
  ///@see \#getValue(String, TypedValue, boolean)
  void getValueForDensity(int id, int density, typedvalue_.TypedValue outValue,
          bool resolveRefs) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getValueForDensity,
          jni.JniType.voidType,
          [id, density, outValue.reference, resolveRefs]).check();

  static final _id_getValue1 = jniAccessors.getMethodIDOf(
      _classRef, "getValue", "(Ljava/lang/String;Landroid/util/TypedValue;Z)V");

  /// from: public void getValue(java.lang.String name, android.util.TypedValue outValue, boolean resolveRefs)
  ///
  /// Return the raw data associated with a particular resource ID.
  /// See getIdentifier() for information on how names are mapped to resource
  /// IDs, and getString(int) for information on how string resources are
  /// retrieved.
  ///
  /// Note: use of this function is discouraged.  It is much more
  /// efficient to retrieve resources by identifier than by name.
  ///@param name The name of the desired resource.  This is passed to
  ///             getIdentifier() with a default type of "string".
  ///@param outValue Object in which to place the resource data.
  ///@param resolveRefs If true, a resource that is a reference to another
  ///                    resource will be followed so that you receive the
  ///                    actual final resource data.  If false, the TypedValue
  ///                    will be filled in with the reference itself.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  void getValue1(jni.JniString name, typedvalue_.TypedValue outValue,
          bool resolveRefs) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getValue1,
          jni.JniType.voidType,
          [name.reference, outValue.reference, resolveRefs]).check();

  static final _id_newTheme = jniAccessors.getMethodIDOf(
      _classRef, "newTheme", "()Landroid/content/res/Resources\$Theme;");

  /// from: public final android.content.res.Resources.Theme newTheme()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Generate a new Theme object for this set of Resources.  It initially
  /// starts out empty.
  ///@return Theme The newly created Theme container.
  Resources_Theme newTheme() =>
      Resources_Theme.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_newTheme, jni.JniType.objectType, []).object);

  static final _id_obtainAttributes = jniAccessors.getMethodIDOf(
      _classRef,
      "obtainAttributes",
      "(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;");

  /// from: public android.content.res.TypedArray obtainAttributes(android.util.AttributeSet set, int[] attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve a set of basic attribute values from an AttributeSet, not
  /// performing styling of them using a theme and/or style resources.
  ///@param set The current attribute values to retrieve.
  ///@param attrs The specific attributes to be retrieved. These attribute IDs must be sorted in
  ///              ascending order.
  ///@return Returns a TypedArray holding an array of the attribute values.
  /// Be sure to call TypedArray\#recycle() TypedArray.recycle()
  /// when done with it.
  ///@see Theme\#obtainStyledAttributes(AttributeSet, int[], int, int)
  typedarray_.TypedArray obtainAttributes(
          attributeset_.AttributeSet set0, jni.JniObject attrs) =>
      typedarray_.TypedArray.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_obtainAttributes,
          jni.JniType.objectType,
          [set0.reference, attrs.reference]).object);

  static final _id_updateConfiguration = jniAccessors.getMethodIDOf(
      _classRef,
      "updateConfiguration",
      "(Landroid/content/res/Configuration;Landroid/util/DisplayMetrics;)V");

  /// from: public void updateConfiguration(android.content.res.Configuration config, android.util.DisplayMetrics metrics)
  ///
  /// Store the newly updated configuration.
  ///@deprecated See android.content.Context\#createConfigurationContext(Configuration).
  void updateConfiguration(configuration_.Configuration config,
          displaymetrics_.DisplayMetrics metrics) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateConfiguration,
          jni.JniType.voidType, [config.reference, metrics.reference]).check();

  static final _id_getDisplayMetrics = jniAccessors.getMethodIDOf(
      _classRef, "getDisplayMetrics", "()Landroid/util/DisplayMetrics;");

  /// from: public android.util.DisplayMetrics getDisplayMetrics()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the current display metrics that are in effect for this resource
  /// object.  The returned object should be treated as read-only.
  ///@return The resource's current display metrics.
  displaymetrics_.DisplayMetrics getDisplayMetrics() =>
      displaymetrics_.DisplayMetrics.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDisplayMetrics, jni.JniType.objectType, []).object);

  static final _id_getConfiguration = jniAccessors.getMethodIDOf(
      _classRef, "getConfiguration", "()Landroid/content/res/Configuration;");

  /// from: public android.content.res.Configuration getConfiguration()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the current configuration that is in effect for this resource
  /// object.  The returned object should be treated as read-only.
  ///@return The resource's current configuration.
  configuration_.Configuration getConfiguration() =>
      configuration_.Configuration.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getConfiguration, jni.JniType.objectType, []).object);

  static final _id_getIdentifier = jniAccessors.getMethodIDOf(
      _classRef,
      "getIdentifier",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I");

  /// from: public int getIdentifier(java.lang.String name, java.lang.String defType, java.lang.String defPackage)
  ///
  /// Return a resource identifier for the given resource name.  A fully
  /// qualified resource name is of the form "package:type/entry".  The first
  /// two components (package and type) are optional if defType and
  /// defPackage, respectively, are specified here.
  ///
  /// Note: use of this function is discouraged.  It is much more
  /// efficient to retrieve resources by identifier than by name.
  ///@param name The name of the desired resource.
  ///@param defType Optional default resource type to find, if "type/" is
  ///                not included in the name.  Can be null to require an
  ///                explicit type.
  ///@param defPackage Optional default package to find, if "package:" is
  ///                   not included in the name.  Can be null to require an
  ///                   explicit package.
  ///@return int The associated resource identifier.  Returns 0 if no such
  ///         resource was found.  (0 is not a valid resource ID.)
  int getIdentifier(jni.JniString name, jni.JniString defType,
          jni.JniString defPackage) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getIdentifier,
          jni.JniType.intType,
          [name.reference, defType.reference, defPackage.reference]).integer;

  static final _id_getResourceName = jniAccessors.getMethodIDOf(
      _classRef, "getResourceName", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getResourceName(int resid)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the full name for a given resource identifier.  This name is
  /// a single string of the form "package:type/entry".
  ///@param resid The resource identifier whose name is to be retrieved.
  ///@return A string holding the name of the resource.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@see \#getResourcePackageName
  ///@see \#getResourceTypeName
  ///@see \#getResourceEntryName
  jni.JniString getResourceName(int resid) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getResourceName, jni.JniType.objectType, [resid]).object);

  static final _id_getResourcePackageName = jniAccessors.getMethodIDOf(
      _classRef, "getResourcePackageName", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getResourcePackageName(int resid)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the package name for a given resource identifier.
  ///@param resid The resource identifier whose package name is to be
  /// retrieved.
  ///@return A string holding the package name of the resource.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@see \#getResourceName
  jni.JniString getResourcePackageName(int resid) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getResourcePackageName, jni.JniType.objectType, [resid]).object);

  static final _id_getResourceTypeName = jniAccessors.getMethodIDOf(
      _classRef, "getResourceTypeName", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getResourceTypeName(int resid)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the type name for a given resource identifier.
  ///@param resid The resource identifier whose type name is to be
  /// retrieved.
  ///@return A string holding the type name of the resource.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@see \#getResourceName
  jni.JniString getResourceTypeName(int resid) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getResourceTypeName, jni.JniType.objectType, [resid]).object);

  static final _id_getResourceEntryName = jniAccessors.getMethodIDOf(
      _classRef, "getResourceEntryName", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getResourceEntryName(int resid)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the entry name for a given resource identifier.
  ///@param resid The resource identifier whose entry name is to be
  /// retrieved.
  ///@return A string holding the entry name of the resource.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@see \#getResourceName
  jni.JniString getResourceEntryName(int resid) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getResourceEntryName, jni.JniType.objectType, [resid]).object);

  static final _id_parseBundleExtras = jniAccessors.getMethodIDOf(
      _classRef,
      "parseBundleExtras",
      "(Landroid/content/res/XmlResourceParser;Landroid/os/Bundle;)V");

  /// from: public void parseBundleExtras(android.content.res.XmlResourceParser parser, android.os.Bundle outBundle)
  ///
  /// Parse a series of android.R.styleable\#Extra &lt;extra&gt; tags from
  /// an XML file.  You call this when you are at the parent tag of the
  /// extra tags, and it will return once all of the child tags have been parsed.
  /// This will call \#parseBundleExtra for each extra tag encountered.
  ///@param parser The parser from which to retrieve the extras.
  ///@param outBundle A Bundle in which to place all parsed extras.
  ///@throws XmlPullParserException
  ///@throws IOException
  void parseBundleExtras(xmlresourceparser_.XmlResourceParser parser,
          bundle_.Bundle outBundle) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_parseBundleExtras,
          jni.JniType.voidType,
          [parser.reference, outBundle.reference]).check();

  static final _id_parseBundleExtra = jniAccessors.getMethodIDOf(
      _classRef,
      "parseBundleExtra",
      "(Ljava/lang/String;Landroid/util/AttributeSet;Landroid/os/Bundle;)V");

  /// from: public void parseBundleExtra(java.lang.String tagName, android.util.AttributeSet attrs, android.os.Bundle outBundle)
  ///
  /// Parse a name/value pair out of an XML tag holding that data.  The
  /// AttributeSet must be holding the data defined by
  /// android.R.styleable\#Extra.  The following value types are supported:
  /// <ul>
  /// <li> TypedValue\#TYPE_STRING:
  /// Bundle\#putCharSequence Bundle.putCharSequence()
  /// <li> TypedValue\#TYPE_INT_BOOLEAN:
  /// Bundle\#putCharSequence Bundle.putBoolean()
  /// <li> TypedValue\#TYPE_FIRST_INT-TypedValue\#TYPE_LAST_INT:
  /// Bundle\#putCharSequence Bundle.putBoolean()
  /// <li> TypedValue\#TYPE_FLOAT:
  /// Bundle\#putCharSequence Bundle.putFloat()
  /// </ul>
  ///@param tagName The name of the tag these attributes come from; this is
  /// only used for reporting error messages.
  ///@param attrs The attributes from which to retrieve the name/value pair.
  ///@param outBundle The Bundle in which to place the parsed value.
  ///@throws XmlPullParserException If the attributes are not valid.
  void parseBundleExtra(jni.JniString tagName, attributeset_.AttributeSet attrs,
          bundle_.Bundle outBundle) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_parseBundleExtra,
          jni.JniType.voidType,
          [tagName.reference, attrs.reference, outBundle.reference]).check();

  static final _id_getAssets = jniAccessors.getMethodIDOf(
      _classRef, "getAssets", "()Landroid/content/res/AssetManager;");

  /// from: public final android.content.res.AssetManager getAssets()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve underlying AssetManager storage for these resources.
  assetmanager_.AssetManager getAssets() =>
      assetmanager_.AssetManager.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAssets, jni.JniType.objectType, []).object);

  static final _id_flushLayoutCache =
      jniAccessors.getMethodIDOf(_classRef, "flushLayoutCache", "()V");

  /// from: public final void flushLayoutCache()
  ///
  /// Call this to remove all cached loaded layout resources from the
  /// Resources object.  Only intended for use with performance testing
  /// tools.
  void flushLayoutCache() => jniAccessors.callMethodWithArgs(
      reference, _id_flushLayoutCache, jni.JniType.voidType, []).check();

  static final _id_finishPreloading =
      jniAccessors.getMethodIDOf(_classRef, "finishPreloading", "()V");

  /// from: public final void finishPreloading()
  ///
  /// Called by zygote when it is done preloading resources, to change back
  /// to normal Resources operation.
  void finishPreloading() => jniAccessors.callMethodWithArgs(
      reference, _id_finishPreloading, jni.JniType.voidType, []).check();
}

/// from: android.content.res.Resources$Theme
///
/// This class holds the current attribute values for a particular theme.
/// In other words, a Theme is a set of values for resource attributes;
/// these are used in conjunction with TypedArray
/// to resolve the final value for an attribute.
///
/// The Theme's attributes come into play in two ways: (1) a styled
/// attribute can explicit reference a value in the theme through the
/// "?themeAttribute" syntax; (2) if no value has been defined for a
/// particular styled attribute, as a last resort we will try to find that
/// attribute's value in the Theme.
///
/// You will normally use the \#obtainStyledAttributes APIs to
/// retrieve XML attributes with style and theme information applied.
class Resources_Theme extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/res/Resources\$Theme");
  Resources_Theme.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_applyStyle =
      jniAccessors.getMethodIDOf(_classRef, "applyStyle", "(IZ)V");

  /// from: public void applyStyle(int resId, boolean force)
  ///
  /// Place new attribute values into the theme.  The style resource
  /// specified by <var>resid</var> will be retrieved from this Theme's
  /// resources, its values placed into the Theme object.
  ///
  /// The semantics of this function depends on the <var>force</var>
  /// argument:  If false, only values that are not already defined in
  /// the theme will be copied from the system resource; otherwise, if
  /// any of the style's attributes are already defined in the theme, the
  /// current values in the theme will be overwritten.
  ///@param resId The resource ID of a style resource from which to
  ///              obtain attribute values.
  ///@param force If true, values in the style resource will always be
  ///              used in the theme; otherwise, they will only be used
  ///              if not already defined in the theme.
  void applyStyle(int resId, bool force) => jniAccessors.callMethodWithArgs(
      reference, _id_applyStyle, jni.JniType.voidType, [resId, force]).check();

  static final _id_setTo = jniAccessors.getMethodIDOf(
      _classRef, "setTo", "(Landroid/content/res/Resources\$Theme;)V");

  /// from: public void setTo(android.content.res.Resources.Theme other)
  ///
  /// Set this theme to hold the same contents as the theme
  /// <var>other</var>.  If both of these themes are from the same
  /// Resources object, they will be identical after this function
  /// returns.  If they are from different Resources, only the resources
  /// they have in common will be set in this theme.
  ///@param other The existing Theme to copy from.
  void setTo(Resources_Theme other) => jniAccessors.callMethodWithArgs(
      reference, _id_setTo, jni.JniType.voidType, [other.reference]).check();

  static final _id_obtainStyledAttributes = jniAccessors.getMethodIDOf(
      _classRef,
      "obtainStyledAttributes",
      "([I)Landroid/content/res/TypedArray;");

  /// from: public android.content.res.TypedArray obtainStyledAttributes(int[] attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a TypedArray holding the values defined by
  /// <var>Theme</var> which are listed in <var>attrs</var>.
  ///
  /// Be sure to call TypedArray\#recycle() TypedArray.recycle() when you are done
  /// with the array.
  ///@param attrs The desired attributes. These attribute IDs must be sorted in ascending
  ///              order.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return Returns a TypedArray holding an array of the attribute values.
  /// Be sure to call TypedArray\#recycle() TypedArray.recycle()
  /// when done with it.
  ///@see Resources\#obtainAttributes
  ///@see \#obtainStyledAttributes(int, int[])
  ///@see \#obtainStyledAttributes(AttributeSet, int[], int, int)
  typedarray_.TypedArray obtainStyledAttributes(jni.JniObject attrs) =>
      typedarray_.TypedArray.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_obtainStyledAttributes,
          jni.JniType.objectType,
          [attrs.reference]).object);

  static final _id_obtainStyledAttributes1 = jniAccessors.getMethodIDOf(
      _classRef,
      "obtainStyledAttributes",
      "(I[I)Landroid/content/res/TypedArray;");

  /// from: public android.content.res.TypedArray obtainStyledAttributes(int resId, int[] attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a TypedArray holding the values defined by the style
  /// resource <var>resid</var> which are listed in <var>attrs</var>.
  ///
  /// Be sure to call TypedArray\#recycle() TypedArray.recycle() when you are done
  /// with the array.
  ///@param resId The desired style resource.
  ///@param attrs The desired attributes in the style. These attribute IDs must be sorted in
  ///              ascending order.
  ///@throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///@return Returns a TypedArray holding an array of the attribute values.
  /// Be sure to call TypedArray\#recycle() TypedArray.recycle()
  /// when done with it.
  ///@see Resources\#obtainAttributes
  ///@see \#obtainStyledAttributes(int[])
  ///@see \#obtainStyledAttributes(AttributeSet, int[], int, int)
  typedarray_.TypedArray obtainStyledAttributes1(
          int resId, jni.JniObject attrs) =>
      typedarray_.TypedArray.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_obtainStyledAttributes1,
          jni.JniType.objectType,
          [resId, attrs.reference]).object);

  static final _id_obtainStyledAttributes2 = jniAccessors.getMethodIDOf(
      _classRef,
      "obtainStyledAttributes",
      "(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;");

  /// from: public android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a TypedArray holding the attribute values in
  /// <var>set</var>
  /// that are listed in <var>attrs</var>.  In addition, if the given
  /// AttributeSet specifies a style class (through the "style" attribute),
  /// that style will be applied on top of the base attributes it defines.
  ///
  /// Be sure to call TypedArray\#recycle() TypedArray.recycle() when you are done
  /// with the array.
  ///
  /// When determining the final value of a particular attribute, there
  /// are four inputs that come into play:
  ///
  ///
  /// <ol>
  ///     <li> Any attribute values in the given AttributeSet.
  ///     <li> The style resource specified in the AttributeSet (named
  ///     "style").
  ///     <li> The default style specified by <var>defStyleAttr</var> and
  ///     <var>defStyleRes</var>
  ///     <li> The base values in this theme.
  /// </ol>
  ///
  /// Each of these inputs is considered in-order, with the first listed
  /// taking precedence over the following ones.  In other words, if in the
  /// AttributeSet you have supplied <code>&lt;Button
  /// textColor="\#ff000000"&gt;</code>, then the button's text will
  /// _always_ be black, regardless of what is specified in any of
  /// the styles.
  ///@param set The base set of attribute values.  May be null.
  ///@param attrs The desired attributes to be retrieved. These attribute IDs must be sorted
  ///              in ascending order.
  ///@param defStyleAttr An attribute in the current theme that contains a
  ///                     reference to a style resource that supplies
  ///                     defaults values for the TypedArray.  Can be
  ///                     0 to not look for defaults.
  ///@param defStyleRes A resource identifier of a style resource that
  ///                    supplies default values for the TypedArray,
  ///                    used only if defStyleAttr is 0 or can not be found
  ///                    in the theme.  Can be 0 to not look for defaults.
  ///@return Returns a TypedArray holding an array of the attribute values.
  /// Be sure to call TypedArray\#recycle() TypedArray.recycle()
  /// when done with it.
  ///@see Resources\#obtainAttributes
  ///@see \#obtainStyledAttributes(int[])
  ///@see \#obtainStyledAttributes(int, int[])
  typedarray_.TypedArray obtainStyledAttributes2(
          attributeset_.AttributeSet set0,
          jni.JniObject attrs,
          int defStyleAttr,
          int defStyleRes) =>
      typedarray_.TypedArray.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_obtainStyledAttributes2,
          jni.JniType.objectType,
          [set0.reference, attrs.reference, defStyleAttr, defStyleRes]).object);

  static final _id_resolveAttribute = jniAccessors.getMethodIDOf(
      _classRef, "resolveAttribute", "(ILandroid/util/TypedValue;Z)Z");

  /// from: public boolean resolveAttribute(int resid, android.util.TypedValue outValue, boolean resolveRefs)
  ///
  /// Retrieve the value of an attribute in the Theme.  The contents of
  /// <var>outValue</var> are ultimately filled in by
  /// Resources\#getValue.
  ///@param resid The resource identifier of the desired theme
  ///              attribute.
  ///@param outValue Filled in with the ultimate resource value supplied
  ///                 by the attribute.
  ///@param resolveRefs If true, resource references will be walked; if
  ///                    false, <var>outValue</var> may be a
  ///                    TYPE_REFERENCE.  In either case, it will never
  ///                    be a TYPE_ATTRIBUTE.
  ///@return boolean Returns true if the attribute was found and
  ///         <var>outValue</var> is valid, else false.
  bool resolveAttribute(
          int resid, typedvalue_.TypedValue outValue, bool resolveRefs) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_resolveAttribute,
          jni.JniType.booleanType,
          [resid, outValue.reference, resolveRefs]).boolean;

  static final _id_getResources = jniAccessors.getMethodIDOf(
      _classRef, "getResources", "()Landroid/content/res/Resources;");

  /// from: public android.content.res.Resources getResources()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the resources to which this theme belongs.
  ///@return Resources to which this theme belongs.
  Resources getResources() => Resources.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getResources, jni.JniType.objectType, []).object);

  static final _id_getDrawable = jniAccessors.getMethodIDOf(
      _classRef, "getDrawable", "(I)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getDrawable(int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a drawable object associated with a particular resource ID
  /// and styled for the Theme.
  ///@param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///@return Drawable An object that can be used to draw this resource.
  ///@throws NotFoundException Throws NotFoundException if the given ID
  ///         does not exist.
  drawable_.Drawable getDrawable(int id) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDrawable, jni.JniType.objectType, [id]).object);

  static final _id_getChangingConfigurations =
      jniAccessors.getMethodIDOf(_classRef, "getChangingConfigurations", "()I");

  /// from: public int getChangingConfigurations()
  ///
  /// Returns a bit mask of configuration changes that will impact this
  /// theme (and thus require completely reloading it).
  ///@return a bit mask of configuration changes, as defined by
  ///         ActivityInfo
  /// Value is either <code>0</code> or a combination of android.content.pm.ActivityInfo\#CONFIG_MCC, android.content.pm.ActivityInfo\#CONFIG_MNC, android.content.pm.ActivityInfo\#CONFIG_LOCALE, android.content.pm.ActivityInfo\#CONFIG_TOUCHSCREEN, android.content.pm.ActivityInfo\#CONFIG_KEYBOARD, android.content.pm.ActivityInfo\#CONFIG_KEYBOARD_HIDDEN, android.content.pm.ActivityInfo\#CONFIG_NAVIGATION, android.content.pm.ActivityInfo\#CONFIG_ORIENTATION, android.content.pm.ActivityInfo\#CONFIG_SCREEN_LAYOUT, android.content.pm.ActivityInfo\#CONFIG_UI_MODE, android.content.pm.ActivityInfo\#CONFIG_SCREEN_SIZE, android.content.pm.ActivityInfo\#CONFIG_SMALLEST_SCREEN_SIZE, android.content.pm.ActivityInfo\#CONFIG_DENSITY, android.content.pm.ActivityInfo\#CONFIG_LAYOUT_DIRECTION, android.content.pm.ActivityInfo\#CONFIG_COLOR_MODE, and android.content.pm.ActivityInfo\#CONFIG_FONT_SCALE
  ///@see ActivityInfo
  int getChangingConfigurations() => jniAccessors.callMethodWithArgs(reference,
      _id_getChangingConfigurations, jni.JniType.intType, []).integer;

  static final _id_dump = jniAccessors.getMethodIDOf(
      _classRef, "dump", "(ILjava/lang/String;Ljava/lang/String;)V");

  /// from: public void dump(int priority, java.lang.String tag, java.lang.String prefix)
  ///
  /// Print contents of this theme out to the log.  For debugging only.
  ///@param priority The log priority to use.
  ///@param tag The log tag to use.
  ///@param prefix Text to prefix each line printed.
  void dump(int priority, jni.JniString tag, jni.JniString prefix) =>
      jniAccessors.callMethodWithArgs(reference, _id_dump, jni.JniType.voidType,
          [priority, tag.reference, prefix.reference]).check();
}

/// from: android.content.res.Resources$NotFoundException
///
/// This exception is thrown by the resource APIs when a requested resource
/// can not be found.
class Resources_NotFoundException extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/content/res/Resources\$NotFoundException");
  Resources_NotFoundException.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Resources_NotFoundException()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Resources_NotFoundException.ctor1(jni.JniString name)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [name.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Ljava/lang/Exception;)V");

  /// from: public void <init>(java.lang.String name, java.lang.Exception cause)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Resources_NotFoundException.ctor2(jni.JniString name, jni.JniObject cause)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [name.reference, cause.reference]).object);
}
