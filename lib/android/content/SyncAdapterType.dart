// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.SyncAdapterType
///
/// Value type that represents a SyncAdapterType. This object overrides \#equals and
/// \#hashCode, making it suitable for use as the key of a java.util.Map
class SyncAdapterType extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/SyncAdapterType");
  SyncAdapterType.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.SyncAdapterType> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_accountType =
      jniAccessors.getFieldIDOf(_classRef, "accountType", "Ljava/lang/String;");

  /// from: public final java.lang.String accountType
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString get accountType => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_accountType, jni.JniType.objectType)
      .object);

  static final _id_authority =
      jniAccessors.getFieldIDOf(_classRef, "authority", "Ljava/lang/String;");

  /// from: public final java.lang.String authority
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString get authority => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_authority, jni.JniType.objectType)
      .object);

  static final _id_isKey = jniAccessors.getFieldIDOf(_classRef, "isKey", "Z");

  /// from: public final boolean isKey
  bool get isKey => jniAccessors
      .getField(reference, _id_isKey, jni.JniType.booleanType)
      .boolean;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Ljava/lang/String;ZZ)V");

  /// from: public void <init>(java.lang.String authority, java.lang.String accountType, boolean userVisible, boolean supportsUploading)
  /// The returned object must be deleted after use, by calling the `delete` method.
  SyncAdapterType(jni.JniString authority, jni.JniString accountType,
      bool userVisible, bool supportsUploading)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          authority.reference,
          accountType.reference,
          userVisible,
          supportsUploading
        ]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  SyncAdapterType.ctor1(parcel_.Parcel source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [source.reference]).object);

  static final _id_supportsUploading =
      jniAccessors.getMethodIDOf(_classRef, "supportsUploading", "()Z");

  /// from: public boolean supportsUploading()
  bool supportsUploading() => jniAccessors.callMethodWithArgs(
      reference, _id_supportsUploading, jni.JniType.booleanType, []).boolean;

  static final _id_isUserVisible =
      jniAccessors.getMethodIDOf(_classRef, "isUserVisible", "()Z");

  /// from: public boolean isUserVisible()
  bool isUserVisible() => jniAccessors.callMethodWithArgs(
      reference, _id_isUserVisible, jni.JniType.booleanType, []).boolean;

  static final _id_allowParallelSyncs =
      jniAccessors.getMethodIDOf(_classRef, "allowParallelSyncs", "()Z");

  /// from: public boolean allowParallelSyncs()
  ///
  /// @return True if this SyncAdapter supports syncing multiple accounts simultaneously.
  /// If false then the SyncManager will take care to only start one sync at a time
  /// using this SyncAdapter.
  bool allowParallelSyncs() => jniAccessors.callMethodWithArgs(
      reference, _id_allowParallelSyncs, jni.JniType.booleanType, []).boolean;

  static final _id_isAlwaysSyncable =
      jniAccessors.getMethodIDOf(_classRef, "isAlwaysSyncable", "()Z");

  /// from: public boolean isAlwaysSyncable()
  ///
  /// If true then the SyncManager will never issue an initialization sync to the SyncAdapter
  /// and will instead automatically call
  /// ContentResolver\#setIsSyncable(android.accounts.Account, String, int) with a
  /// value of 1 for each account and provider that this sync adapter supports.
  ///@return true if the SyncAdapter does not require initialization and if it is ok for the
  /// SyncAdapter to treat it as syncable automatically.
  bool isAlwaysSyncable() => jniAccessors.callMethodWithArgs(
      reference, _id_isAlwaysSyncable, jni.JniType.booleanType, []).boolean;

  static final _id_getSettingsActivity = jniAccessors.getMethodIDOf(
      _classRef, "getSettingsActivity", "()Ljava/lang/String;");

  /// from: public java.lang.String getSettingsActivity()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The activity to use to invoke this SyncAdapter's settings activity.
  /// May be null.
  jni.JniString getSettingsActivity() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSettingsActivity, jni.JniType.objectType, []).object);

  static final _id_newKey = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "newKey",
      "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/SyncAdapterType;");

  /// from: static public android.content.SyncAdapterType newKey(java.lang.String authority, java.lang.String accountType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static SyncAdapterType newKey(
          jni.JniString authority, jni.JniString accountType) =>
      SyncAdapterType.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_newKey,
          jni.JniType.objectType,
          [authority.reference, accountType.reference]).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
