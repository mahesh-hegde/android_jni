// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../net/Uri.dart" as uri_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.UriPermission
///
/// Description of a single Uri permission grant. This grants may have been
/// created via Intent\#FLAG_GRANT_READ_URI_PERMISSION, etc when sending
/// an Intent, or explicitly through
/// Context\#grantUriPermission(String, android.net.Uri, int).
///@see ContentResolver\#getPersistedUriPermissions()
class UriPermission extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/UriPermission");
  UriPermission.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.UriPermission> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final long INVALID_TIME
  ///
  /// Value returned when a permission has not been persisted.
  static const INVALID_TIME = -9223372036854775808;

  static final _id_getUri =
      jniAccessors.getMethodIDOf(_classRef, "getUri", "()Landroid/net/Uri;");

  /// from: public android.net.Uri getUri()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the Uri this permission pertains to.
  uri_.Uri getUri() => uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getUri, jni.JniType.objectType, []).object);

  static final _id_isReadPermission =
      jniAccessors.getMethodIDOf(_classRef, "isReadPermission", "()Z");

  /// from: public boolean isReadPermission()
  ///
  /// Returns if this permission offers read access.
  bool isReadPermission() => jniAccessors.callMethodWithArgs(
      reference, _id_isReadPermission, jni.JniType.booleanType, []).boolean;

  static final _id_isWritePermission =
      jniAccessors.getMethodIDOf(_classRef, "isWritePermission", "()Z");

  /// from: public boolean isWritePermission()
  ///
  /// Returns if this permission offers write access.
  bool isWritePermission() => jniAccessors.callMethodWithArgs(
      reference, _id_isWritePermission, jni.JniType.booleanType, []).boolean;

  static final _id_getPersistedTime =
      jniAccessors.getMethodIDOf(_classRef, "getPersistedTime", "()J");

  /// from: public long getPersistedTime()
  ///
  /// Return the time when this permission was first persisted, in milliseconds
  /// since January 1, 1970 00:00:00.0 UTC. Returns \#INVALID_TIME if
  /// not persisted.
  ///@see ContentResolver\#takePersistableUriPermission(Uri, int)
  ///@see System\#currentTimeMillis()
  int getPersistedTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getPersistedTime, jni.JniType.longType, []).long;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
