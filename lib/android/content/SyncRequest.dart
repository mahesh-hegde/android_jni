// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;

import "../accounts/Account.dart" as account_;

import "../os/Bundle.dart" as bundle_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.SyncRequest
///
/// Convenience class to construct sync requests. See android.content.SyncRequest.Builder
/// for an explanation of the various functions. The resulting object is passed through to the
/// framework via android.content.ContentResolver\#requestSync(SyncRequest).
class SyncRequest extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/SyncRequest");
  SyncRequest.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.SyncRequest> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}

/// from: android.content.SyncRequest$Builder
///
/// Builder class for a SyncRequest. As you build your SyncRequest this class will also
/// perform validation.
class SyncRequest_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/SyncRequest\$Builder");
  SyncRequest_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SyncRequest_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_syncOnce = jniAccessors.getMethodIDOf(
      _classRef, "syncOnce", "()Landroid/content/SyncRequest\$Builder;");

  /// from: public android.content.SyncRequest.Builder syncOnce()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Request that a sync occur immediately.
  ///
  /// Example
  /// <pre>
  ///     SyncRequest.Builder builder = (new SyncRequest.Builder()).syncOnce();
  /// </pre>
  SyncRequest_Builder syncOnce() =>
      SyncRequest_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_syncOnce, jni.JniType.objectType, []).object);

  static final _id_syncPeriodic = jniAccessors.getMethodIDOf(
      _classRef, "syncPeriodic", "(JJ)Landroid/content/SyncRequest\$Builder;");

  /// from: public android.content.SyncRequest.Builder syncPeriodic(long pollFrequency, long beforeSeconds)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Build a periodic sync. Either this or syncOnce() __must__ be called for this builder.
  /// Syncs are identified by target android.provider and by the
  /// contents of the extras bundle.
  /// You cannot reuse the same builder for one-time syncs after having specified a periodic
  /// sync (by calling this function). If you do, an <code>IllegalArgumentException</code>
  /// will be thrown.
  /// The bundle for a periodic sync can be queried by applications with the correct
  /// permissions using
  /// ContentResolver\#getPeriodicSyncs(Account account, String provider), so no
  /// sensitive data should be transferred here.
  ///
  /// Example usage.
  ///
  /// <pre>
  ///     Request a periodic sync every 5 hours with 20 minutes of flex.
  ///     SyncRequest.Builder builder =
  ///         (new SyncRequest.Builder()).syncPeriodic(5 * HOUR_IN_SECS, 20 * MIN_IN_SECS);
  ///
  ///     Schedule a periodic sync every hour at any point in time during that hour.
  ///     SyncRequest.Builder builder =
  ///         (new SyncRequest.Builder()).syncPeriodic(1 * HOUR_IN_SECS, 1 * HOUR_IN_SECS);
  /// </pre>
  ///
  /// N.B.: Periodic syncs are not allowed to have any of
  /// ContentResolver\#SYNC_EXTRAS_DO_NOT_RETRY,
  /// ContentResolver\#SYNC_EXTRAS_IGNORE_BACKOFF,
  /// ContentResolver\#SYNC_EXTRAS_IGNORE_SETTINGS,
  /// ContentResolver\#SYNC_EXTRAS_INITIALIZE,
  /// ContentResolver\#SYNC_EXTRAS_FORCE,
  /// ContentResolver\#SYNC_EXTRAS_EXPEDITED,
  /// ContentResolver\#SYNC_EXTRAS_MANUAL
  /// set to true. If any are supplied then an <code>IllegalArgumentException</code> will
  /// be thrown.
  ///@param pollFrequency the amount of time in seconds that you wish
  ///            to elapse between periodic syncs. A minimum period of 1 hour is enforced.
  ///@param beforeSeconds the amount of flex time in seconds before
  ///            {@code pollFrequency} that you permit for the sync to take
  ///            place. Must be less than {@code pollFrequency} and greater than
  ///            MAX(5% of {@code pollFrequency}, 5 minutes)
  SyncRequest_Builder syncPeriodic(int pollFrequency, int beforeSeconds) =>
      SyncRequest_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_syncPeriodic,
          jni.JniType.objectType,
          [pollFrequency, beforeSeconds]).object);

  static final _id_setDisallowMetered = jniAccessors.getMethodIDOf(_classRef,
      "setDisallowMetered", "(Z)Landroid/content/SyncRequest\$Builder;");

  /// from: public android.content.SyncRequest.Builder setDisallowMetered(boolean disallow)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Will throw an <code>IllegalArgumentException</code> if called and
  /// \#setIgnoreSettings(boolean ignoreSettings) has already been called.
  ///@param disallow true to allow this transfer on metered networks. Default false.
  SyncRequest_Builder setDisallowMetered(bool disallow) =>
      SyncRequest_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setDisallowMetered, jni.JniType.objectType, [disallow]).object);

  static final _id_setRequiresCharging = jniAccessors.getMethodIDOf(_classRef,
      "setRequiresCharging", "(Z)Landroid/content/SyncRequest\$Builder;");

  /// from: public android.content.SyncRequest.Builder setRequiresCharging(boolean requiresCharging)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specify whether the sync requires the phone to be plugged in.
  ///@param requiresCharging true if sync requires the phone to be plugged in. Default false.
  SyncRequest_Builder setRequiresCharging(bool requiresCharging) =>
      SyncRequest_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setRequiresCharging,
          jni.JniType.objectType,
          [requiresCharging]).object);

  static final _id_setSyncAdapter = jniAccessors.getMethodIDOf(
      _classRef,
      "setSyncAdapter",
      "(Landroid/accounts/Account;Ljava/lang/String;)Landroid/content/SyncRequest\$Builder;");

  /// from: public android.content.SyncRequest.Builder setSyncAdapter(android.accounts.Account account, java.lang.String authority)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specify an authority and account for this transfer.
  ///@param authority A String identifying the content provider to be synced.
  ///@param account Account to sync. Can be null unless this is a periodic
  ///            sync, for which verification by the ContentResolver will
  ///            fail. If a sync is performed without an account, the
  SyncRequest_Builder setSyncAdapter(
          account_.Account account, jni.JniString authority) =>
      SyncRequest_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setSyncAdapter,
          jni.JniType.objectType,
          [account.reference, authority.reference]).object);

  static final _id_setExtras = jniAccessors.getMethodIDOf(
      _classRef,
      "setExtras",
      "(Landroid/os/Bundle;)Landroid/content/SyncRequest\$Builder;");

  /// from: public android.content.SyncRequest.Builder setExtras(android.os.Bundle bundle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Developer-provided extras handed back when sync actually occurs. This bundle is copied
  /// into the SyncRequest returned by \#build().
  ///
  /// Example:
  /// <pre>
  ///   String[] syncItems = {"dog", "cat", "frog", "child"};
  ///   SyncRequest.Builder builder =
  ///     new SyncRequest.Builder()
  ///       .setSyncAdapter(dummyAccount, dummyProvider)
  ///       .syncOnce();
  ///
  ///   for (String syncData : syncItems) {
  ///     Bundle extras = new Bundle();
  ///     extras.setString("data", syncData);
  ///     builder.setExtras(extras);
  ///     ContentResolver.sync(builder.build()); // Each sync() request creates a unique sync.
  ///   }
  /// </pre>
  /// Only values of the following types may be used in the extras bundle:
  /// <ul>
  /// <li>Integer</li>
  /// <li>Long</li>
  /// <li>Boolean</li>
  /// <li>Float</li>
  /// <li>Double</li>
  /// <li>String</li>
  /// <li>Account</li>
  /// <li>null</li>
  /// </ul>
  /// If any data is present in the bundle not of this type, build() will
  /// throw a runtime exception.
  ///@param bundle extras bundle to set.
  SyncRequest_Builder setExtras(bundle_.Bundle bundle) =>
      SyncRequest_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setExtras, jni.JniType.objectType, [bundle.reference]).object);

  static final _id_setNoRetry = jniAccessors.getMethodIDOf(
      _classRef, "setNoRetry", "(Z)Landroid/content/SyncRequest\$Builder;");

  /// from: public android.content.SyncRequest.Builder setNoRetry(boolean noRetry)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience function for setting ContentResolver\#SYNC_EXTRAS_DO_NOT_RETRY.
  ///
  /// A one-off sync operation that fails will be retried with exponential back-off unless
  /// this is set to false. Not valid for periodic sync and will throw an
  /// <code>IllegalArgumentException</code> in build().
  ///@param noRetry true to not retry a failed sync. Default false.
  SyncRequest_Builder setNoRetry(bool noRetry) =>
      SyncRequest_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setNoRetry, jni.JniType.objectType, [noRetry]).object);

  static final _id_setIgnoreSettings = jniAccessors.getMethodIDOf(_classRef,
      "setIgnoreSettings", "(Z)Landroid/content/SyncRequest\$Builder;");

  /// from: public android.content.SyncRequest.Builder setIgnoreSettings(boolean ignoreSettings)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience function for setting ContentResolver\#SYNC_EXTRAS_IGNORE_SETTINGS.
  ///
  /// Not valid for periodic sync and will throw an <code>IllegalArgumentException</code> in
  /// \#build().
  /// Throws <code>IllegalArgumentException</code> if called and
  /// \#setDisallowMetered(boolean) has been set.
  ///@param ignoreSettings true to ignore the sync automatically settings. Default false.
  SyncRequest_Builder setIgnoreSettings(bool ignoreSettings) =>
      SyncRequest_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setIgnoreSettings,
          jni.JniType.objectType,
          [ignoreSettings]).object);

  static final _id_setIgnoreBackoff = jniAccessors.getMethodIDOf(_classRef,
      "setIgnoreBackoff", "(Z)Landroid/content/SyncRequest\$Builder;");

  /// from: public android.content.SyncRequest.Builder setIgnoreBackoff(boolean ignoreBackoff)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience function for setting ContentResolver\#SYNC_EXTRAS_IGNORE_BACKOFF.
  ///
  /// Ignoring back-off will force the sync scheduling process to ignore any back-off that was
  /// the result of a failed sync, as well as to invalidate any SyncResult\#delayUntil
  /// value that may have been set by the adapter. Successive failures will not honor this
  /// flag. Not valid for periodic sync and will throw an <code>IllegalArgumentException</code>
  /// in \#build().
  ///@param ignoreBackoff ignore back off settings. Default false.
  SyncRequest_Builder setIgnoreBackoff(bool ignoreBackoff) =>
      SyncRequest_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setIgnoreBackoff,
          jni.JniType.objectType,
          [ignoreBackoff]).object);

  static final _id_setManual = jniAccessors.getMethodIDOf(
      _classRef, "setManual", "(Z)Landroid/content/SyncRequest\$Builder;");

  /// from: public android.content.SyncRequest.Builder setManual(boolean isManual)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience function for setting ContentResolver\#SYNC_EXTRAS_MANUAL.
  ///
  /// Not valid for periodic sync and will throw an <code>IllegalArgumentException</code> in
  /// \#build().
  ///@param isManual User-initiated sync or not. Default false.
  SyncRequest_Builder setManual(bool isManual) =>
      SyncRequest_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setManual, jni.JniType.objectType, [isManual]).object);

  static final _id_setExpedited = jniAccessors.getMethodIDOf(
      _classRef, "setExpedited", "(Z)Landroid/content/SyncRequest\$Builder;");

  /// from: public android.content.SyncRequest.Builder setExpedited(boolean expedited)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// An expedited sync runs immediately and can preempt other non-expedited running syncs.
  ///
  /// Not valid for periodic sync and will throw an <code>IllegalArgumentException</code> in
  /// \#build().
  ///@param expedited whether to run expedited. Default false.
  SyncRequest_Builder setExpedited(bool expedited) =>
      SyncRequest_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setExpedited, jni.JniType.objectType, [expedited]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/content/SyncRequest;");

  /// from: public android.content.SyncRequest build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Performs validation over the request and throws the runtime exception
  /// <code>IllegalArgumentException</code> if this validation fails.
  ///@return a SyncRequest with the information contained within this
  ///         builder.
  SyncRequest build() => SyncRequest.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
