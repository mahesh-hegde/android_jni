// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../accounts/Account.dart" as account_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.SyncInfo
///
/// Information about the sync operation that is currently underway.
class SyncInfo extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/content/SyncInfo");
  SyncInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_account = jniAccessors.getFieldIDOf(
      _classRef, "account", "Landroid/accounts/Account;");

  /// from: public final android.accounts.Account account
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The Account that is currently being synced.
  account_.Account get account => account_.Account.fromRef(jniAccessors
      .getField(reference, _id_account, jni.JniType.objectType)
      .object);

  static final _id_authority =
      jniAccessors.getFieldIDOf(_classRef, "authority", "Ljava/lang/String;");

  /// from: public final java.lang.String authority
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The authority of the provider that is currently being synced.
  jni.JniString get authority => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_authority, jni.JniType.objectType)
      .object);

  static final _id_startTime =
      jniAccessors.getFieldIDOf(_classRef, "startTime", "J");

  /// from: public final long startTime
  ///
  /// The start time of the current sync operation in milliseconds since boot.
  /// This is represented in elapsed real time.
  /// See android.os.SystemClock\#elapsedRealtime().
  int get startTime => jniAccessors
      .getField(reference, _id_startTime, jni.JniType.longType)
      .long;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// @hide
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  ///
  /// @hide
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}
