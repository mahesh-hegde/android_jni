// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ContextWrapper.dart" as contextwrapper_;

import "Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.MutableContextWrapper
///
/// Special version of ContextWrapper that allows the base context to
/// be modified after it is initially set.
class MutableContextWrapper extends contextwrapper_.ContextWrapper {
  static final _classRef =
      jniAccessors.getClassOf("android/content/MutableContextWrapper");
  MutableContextWrapper.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context base)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MutableContextWrapper.ctor1(context_.Context base)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [base.reference]).object);

  static final _id_setBaseContext = jniAccessors.getMethodIDOf(
      _classRef, "setBaseContext", "(Landroid/content/Context;)V");

  /// from: public void setBaseContext(android.content.Context base)
  ///
  /// Change the base context for this ContextWrapper. All calls will then be
  /// delegated to the base context.  Unlike ContextWrapper, the base context
  /// can be changed even after one is already set.
  ///@param base The new base context for this wrapper.
  void setBaseContext(context_.Context base) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setBaseContext,
      jni.JniType.voidType,
      [base.reference]).check();
}
