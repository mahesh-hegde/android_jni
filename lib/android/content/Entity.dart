// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ContentValues.dart" as contentvalues_;

import "../net/Uri.dart" as uri_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.Entity
///
/// A representation of a item using ContentValues. It contains one top level ContentValue
/// plus a collection of Uri, ContentValues tuples as subvalues. One example of its use
/// is in Contacts, where the top level ContentValue contains the columns from the RawContacts
/// table and the subvalues contain a ContentValues object for each row from the Data table that
/// corresponds to that RawContact. The uri refers to the Data table uri for each row.
class Entity extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/content/Entity");
  Entity.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/ContentValues;)V");

  /// from: public void <init>(android.content.ContentValues values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Entity(contentvalues_.ContentValues values)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [values.reference]).object);

  static final _id_getEntityValues = jniAccessors.getMethodIDOf(
      _classRef, "getEntityValues", "()Landroid/content/ContentValues;");

  /// from: public android.content.ContentValues getEntityValues()
  /// The returned object must be deleted after use, by calling the `delete` method.
  contentvalues_.ContentValues getEntityValues() =>
      contentvalues_.ContentValues.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getEntityValues, jni.JniType.objectType, []).object);

  static final _id_getSubValues = jniAccessors.getMethodIDOf(
      _classRef, "getSubValues", "()Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList<android.content.Entity.NamedContentValues> getSubValues()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getSubValues() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSubValues, jni.JniType.objectType, []).object);

  static final _id_addSubValue = jniAccessors.getMethodIDOf(_classRef,
      "addSubValue", "(Landroid/net/Uri;Landroid/content/ContentValues;)V");

  /// from: public void addSubValue(android.net.Uri uri, android.content.ContentValues values)
  void addSubValue(uri_.Uri uri, contentvalues_.ContentValues values) =>
      jniAccessors.callMethodWithArgs(reference, _id_addSubValue,
          jni.JniType.voidType, [uri.reference, values.reference]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.content.Entity$NamedContentValues
class Entity_NamedContentValues extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/Entity\$NamedContentValues");
  Entity_NamedContentValues.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_uri =
      jniAccessors.getFieldIDOf(_classRef, "uri", "Landroid/net/Uri;");

  /// from: public final android.net.Uri uri
  /// The returned object must be deleted after use, by calling the `delete` method.
  uri_.Uri get uri => uri_.Uri.fromRef(
      jniAccessors.getField(reference, _id_uri, jni.JniType.objectType).object);

  static final _id_values = jniAccessors.getFieldIDOf(
      _classRef, "values", "Landroid/content/ContentValues;");

  /// from: public final android.content.ContentValues values
  /// The returned object must be deleted after use, by calling the `delete` method.
  contentvalues_.ContentValues get values =>
      contentvalues_.ContentValues.fromRef(jniAccessors
          .getField(reference, _id_values, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/net/Uri;Landroid/content/ContentValues;)V");

  /// from: public void <init>(android.net.Uri uri, android.content.ContentValues values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Entity_NamedContentValues(uri_.Uri uri, contentvalues_.ContentValues values)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [uri.reference, values.reference]).object);
}
