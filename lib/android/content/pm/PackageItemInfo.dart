// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Bundle.dart" as bundle_;

import "../../os/Parcel.dart" as parcel_;

import "PackageManager.dart" as packagemanager_;

import "../../graphics/drawable/Drawable.dart" as drawable_;

import "../res/XmlResourceParser.dart" as xmlresourceparser_;

import "../../util/Printer.dart" as printer_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.PackageItemInfo
///
/// Base class containing information common to all package items held by
/// the package manager.  This provides a very common basic set of attributes:
/// a label, icon, and meta-data.  This class is not intended
/// to be used by itself; it is simply here to share common definitions
/// between all items returned by the package manager.  As such, it does not
/// itself implement Parcelable, but does provide convenience methods to assist
/// in the implementation of Parcelable in subclasses.
class PackageItemInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/PackageItemInfo");
  PackageItemInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_banner = jniAccessors.getFieldIDOf(_classRef, "banner", "I");

  /// from: public int banner
  ///
  /// A drawable resource identifier (in the package's resources) of this
  /// component's banner.  From the "banner" attribute or, if not set, 0.
  int get banner =>
      jniAccessors.getField(reference, _id_banner, jni.JniType.intType).integer;

  /// from: public int banner
  ///
  /// A drawable resource identifier (in the package's resources) of this
  /// component's banner.  From the "banner" attribute or, if not set, 0.
  set banner(int value) => jniEnv.SetIntField(reference, _id_banner, value);

  static final _id_icon = jniAccessors.getFieldIDOf(_classRef, "icon", "I");

  /// from: public int icon
  ///
  /// A drawable resource identifier (in the package's resources) of this
  /// component's icon.  From the "icon" attribute or, if not set, 0.
  int get icon =>
      jniAccessors.getField(reference, _id_icon, jni.JniType.intType).integer;

  /// from: public int icon
  ///
  /// A drawable resource identifier (in the package's resources) of this
  /// component's icon.  From the "icon" attribute or, if not set, 0.
  set icon(int value) => jniEnv.SetIntField(reference, _id_icon, value);

  static final _id_labelRes =
      jniAccessors.getFieldIDOf(_classRef, "labelRes", "I");

  /// from: public int labelRes
  ///
  /// A string resource identifier (in the package's resources) of this
  /// component's label.  From the "label" attribute or, if not set, 0.
  int get labelRes => jniAccessors
      .getField(reference, _id_labelRes, jni.JniType.intType)
      .integer;

  /// from: public int labelRes
  ///
  /// A string resource identifier (in the package's resources) of this
  /// component's label.  From the "label" attribute or, if not set, 0.
  set labelRes(int value) => jniEnv.SetIntField(reference, _id_labelRes, value);

  static final _id_logo = jniAccessors.getFieldIDOf(_classRef, "logo", "I");

  /// from: public int logo
  ///
  /// A drawable resource identifier (in the package's resources) of this
  /// component's logo. Logos may be larger/wider than icons and are
  /// displayed by certain UI elements in place of a name or name/icon
  /// combination. From the "logo" attribute or, if not set, 0.
  int get logo =>
      jniAccessors.getField(reference, _id_logo, jni.JniType.intType).integer;

  /// from: public int logo
  ///
  /// A drawable resource identifier (in the package's resources) of this
  /// component's logo. Logos may be larger/wider than icons and are
  /// displayed by certain UI elements in place of a name or name/icon
  /// combination. From the "logo" attribute or, if not set, 0.
  set logo(int value) => jniEnv.SetIntField(reference, _id_logo, value);

  static final _id_metaData =
      jniAccessors.getFieldIDOf(_classRef, "metaData", "Landroid/os/Bundle;");

  /// from: public android.os.Bundle metaData
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Additional meta-data associated with this component.  This field
  /// will only be filled in if you set the
  /// PackageManager\#GET_META_DATA flag when requesting the info.
  bundle_.Bundle get metaData => bundle_.Bundle.fromRef(jniAccessors
      .getField(reference, _id_metaData, jni.JniType.objectType)
      .object);

  /// from: public android.os.Bundle metaData
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Additional meta-data associated with this component.  This field
  /// will only be filled in if you set the
  /// PackageManager\#GET_META_DATA flag when requesting the info.
  set metaData(bundle_.Bundle value) =>
      jniEnv.SetObjectField(reference, _id_metaData, value.reference);

  static final _id_name =
      jniAccessors.getFieldIDOf(_classRef, "name", "Ljava/lang/String;");

  /// from: public java.lang.String name
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Public name of this item. From the "android:name" attribute.
  jni.JniString get name => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_name, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String name
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Public name of this item. From the "android:name" attribute.
  set name(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_name, value.reference);

  static final _id_nonLocalizedLabel = jniAccessors.getFieldIDOf(
      _classRef, "nonLocalizedLabel", "Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence nonLocalizedLabel
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The string provided in the AndroidManifest file, if any.  You
  /// probably don't want to use this.  You probably want
  /// PackageManager\#getApplicationLabel
  jni.JniObject get nonLocalizedLabel => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_nonLocalizedLabel, jni.JniType.objectType)
      .object);

  /// from: public java.lang.CharSequence nonLocalizedLabel
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The string provided in the AndroidManifest file, if any.  You
  /// probably don't want to use this.  You probably want
  /// PackageManager\#getApplicationLabel
  set nonLocalizedLabel(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_nonLocalizedLabel, value.reference);

  static final _id_packageName =
      jniAccessors.getFieldIDOf(_classRef, "packageName", "Ljava/lang/String;");

  /// from: public java.lang.String packageName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Name of the package that this item is in.
  jni.JniString get packageName => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_packageName, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String packageName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Name of the package that this item is in.
  set packageName(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_packageName, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PackageItemInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/pm/PackageItemInfo;)V");

  /// from: public void <init>(android.content.pm.PackageItemInfo orig)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PackageItemInfo.ctor1(PackageItemInfo orig)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [orig.reference]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: protected void <init>(android.os.Parcel source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PackageItemInfo.ctor2(parcel_.Parcel source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [source.reference]).object);

  static final _id_loadLabel = jniAccessors.getMethodIDOf(
      _classRef,
      "loadLabel",
      "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadLabel(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the current textual label associated with this item.  This
  /// will call back on the given PackageManager to load the label from
  /// the application.
  ///@param pm A PackageManager from which the label can be loaded; usually
  /// the PackageManager from which you originally retrieved this item.
  ///
  /// This value must never be {@code null}.
  ///@return Returns a CharSequence containing the item's label.  If the
  /// item does not have a label, its name is returned.
  ///
  /// This value will never be {@code null}.
  jni.JniObject loadLabel(packagemanager_.PackageManager pm) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadLabel, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadIcon = jniAccessors.getMethodIDOf(_classRef, "loadIcon",
      "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the current graphical icon associated with this item.  This
  /// will call back on the given PackageManager to load the icon from
  /// the application.
  ///@param pm A PackageManager from which the icon can be loaded; usually
  /// the PackageManager from which you originally retrieved this item.
  ///@return Returns a Drawable containing the item's icon.  If the
  /// item does not have an icon, the item's default icon is returned
  /// such as the default activity icon.
  drawable_.Drawable loadIcon(packagemanager_.PackageManager pm) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadIcon, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadUnbadgedIcon = jniAccessors.getMethodIDOf(
      _classRef,
      "loadUnbadgedIcon",
      "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadUnbadgedIcon(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the current graphical icon associated with this item without
  /// the addition of a work badge if applicable.
  /// This will call back on the given PackageManager to load the icon from
  /// the application.
  ///@param pm A PackageManager from which the icon can be loaded; usually
  /// the PackageManager from which you originally retrieved this item.
  ///@return Returns a Drawable containing the item's icon.  If the
  /// item does not have an icon, the item's default icon is returned
  /// such as the default activity icon.
  drawable_.Drawable loadUnbadgedIcon(packagemanager_.PackageManager pm) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadUnbadgedIcon, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadBanner = jniAccessors.getMethodIDOf(
      _classRef,
      "loadBanner",
      "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the current graphical banner associated with this item.  This
  /// will call back on the given PackageManager to load the banner from
  /// the application.
  ///@param pm A PackageManager from which the banner can be loaded; usually
  /// the PackageManager from which you originally retrieved this item.
  ///@return Returns a Drawable containing the item's banner.  If the item
  /// does not have a banner, this method will return null.
  drawable_.Drawable loadBanner(packagemanager_.PackageManager pm) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadBanner, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadLogo = jniAccessors.getMethodIDOf(_classRef, "loadLogo",
      "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the current graphical logo associated with this item. This
  /// will call back on the given PackageManager to load the logo from
  /// the application.
  ///@param pm A PackageManager from which the logo can be loaded; usually
  /// the PackageManager from which you originally retrieved this item.
  ///@return Returns a Drawable containing the item's logo. If the item
  /// does not have a logo, this method will return null.
  drawable_.Drawable loadLogo(packagemanager_.PackageManager pm) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadLogo, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadXmlMetaData = jniAccessors.getMethodIDOf(
      _classRef,
      "loadXmlMetaData",
      "(Landroid/content/pm/PackageManager;Ljava/lang/String;)Landroid/content/res/XmlResourceParser;");

  /// from: public android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager pm, java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Load an XML resource attached to the meta-data of this item.  This will
  /// retrieved the name meta-data entry, and if defined call back on the
  /// given PackageManager to load its XML file from the application.
  ///@param pm A PackageManager from which the XML can be loaded; usually
  /// the PackageManager from which you originally retrieved this item.
  ///@param name Name of the meta-date you would like to load.
  ///@return Returns an XmlPullParser you can use to parse the XML file
  /// assigned as the given meta-data.  If the meta-data name is not defined
  /// or the XML resource could not be found, null is returned.
  xmlresourceparser_.XmlResourceParser loadXmlMetaData(
          packagemanager_.PackageManager pm, jni.JniString name) =>
      xmlresourceparser_.XmlResourceParser.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_loadXmlMetaData,
              jni.JniType.objectType, [pm.reference, name.reference]).object);

  static final _id_dumpFront = jniAccessors.getMethodIDOf(
      _classRef, "dumpFront", "(Landroid/util/Printer;Ljava/lang/String;)V");

  /// from: protected void dumpFront(android.util.Printer pw, java.lang.String prefix)
  void dumpFront(printer_.Printer pw, jni.JniString prefix) =>
      jniAccessors.callMethodWithArgs(reference, _id_dumpFront,
          jni.JniType.voidType, [pw.reference, prefix.reference]).check();

  static final _id_dumpBack = jniAccessors.getMethodIDOf(
      _classRef, "dumpBack", "(Landroid/util/Printer;Ljava/lang/String;)V");

  /// from: protected void dumpBack(android.util.Printer pw, java.lang.String prefix)
  void dumpBack(printer_.Printer pw, jni.JniString prefix) =>
      jniAccessors.callMethodWithArgs(reference, _id_dumpBack,
          jni.JniType.voidType, [pw.reference, prefix.reference]).check();

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(parcel_.Parcel dest, int parcelableFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, parcelableFlags]).check();
}

/// from: android.content.pm.PackageItemInfo$DisplayNameComparator
class PackageItemInfo_DisplayNameComparator extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/content/pm/PackageItemInfo\$DisplayNameComparator");
  PackageItemInfo_DisplayNameComparator.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/pm/PackageManager;)V");

  /// from: public void <init>(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PackageItemInfo_DisplayNameComparator(packagemanager_.PackageManager pm)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [pm.reference]).object);

  static final _id_compare = jniAccessors.getMethodIDOf(_classRef, "compare",
      "(Landroid/content/pm/PackageItemInfo;Landroid/content/pm/PackageItemInfo;)I");

  /// from: public final int compare(android.content.pm.PackageItemInfo aa, android.content.pm.PackageItemInfo ab)
  int compare(PackageItemInfo aa, PackageItemInfo ab) =>
      jniAccessors.callMethodWithArgs(reference, _id_compare,
          jni.JniType.intType, [aa.reference, ab.reference]).integer;
}
