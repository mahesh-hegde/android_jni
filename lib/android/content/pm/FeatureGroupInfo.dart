// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.FeatureGroupInfo
///
/// A set of features that can be requested by an application. This corresponds
/// to information collected from the
/// AndroidManifest.xml's {@code <feature-group>} tag.
class FeatureGroupInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/FeatureGroupInfo");
  FeatureGroupInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.pm.FeatureGroupInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_features = jniAccessors.getFieldIDOf(
      _classRef, "features", "[Landroid/content/pm/FeatureInfo;");

  /// from: public android.content.pm.FeatureInfo[] features
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The list of features that are required by this group.
  ///@see FeatureInfo\#FLAG_REQUIRED
  jni.JniObject get features => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_features, jni.JniType.objectType)
      .object);

  /// from: public android.content.pm.FeatureInfo[] features
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The list of features that are required by this group.
  ///@see FeatureInfo\#FLAG_REQUIRED
  set features(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_features, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  FeatureGroupInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/pm/FeatureGroupInfo;)V");

  /// from: public void <init>(android.content.pm.FeatureGroupInfo other)
  /// The returned object must be deleted after use, by calling the `delete` method.
  FeatureGroupInfo.ctor1(FeatureGroupInfo other)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [other.reference]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
