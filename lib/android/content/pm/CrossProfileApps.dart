// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../ComponentName.dart" as componentname_;

import "../../os/UserHandle.dart" as userhandle_;

import "../../graphics/drawable/Drawable.dart" as drawable_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.CrossProfileApps
///
/// Class for handling cross profile operations. Apps can use this class to interact with its
/// instance in any profile that is in \#getTargetUserProfiles(). For example, app can
/// use this class to start its main activity in managed profile.
class CrossProfileApps extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/CrossProfileApps");
  CrossProfileApps.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  CrossProfileApps()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_startMainActivity = jniAccessors.getMethodIDOf(
      _classRef,
      "startMainActivity",
      "(Landroid/content/ComponentName;Landroid/os/UserHandle;)V");

  /// from: public void startMainActivity(android.content.ComponentName component, android.os.UserHandle targetUser)
  ///
  /// Starts the specified main activity of the caller package in the specified profile.
  ///@param component The ComponentName of the activity to launch, it must be exported and has
  ///        action android.content.Intent\#ACTION_MAIN, category
  ///        android.content.Intent\#CATEGORY_LAUNCHER. Otherwise, SecurityException will
  ///        be thrown.
  /// This value must never be {@code null}.
  ///@param targetUser The UserHandle of the profile, must be one of the users returned by
  ///        \#getTargetUserProfiles(), otherwise a SecurityException will
  ///        be thrown.
  ///
  /// This value must never be {@code null}.
  void startMainActivity(componentname_.ComponentName component,
          userhandle_.UserHandle targetUser) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_startMainActivity,
          jni.JniType.voidType,
          [component.reference, targetUser.reference]).check();

  static final _id_getTargetUserProfiles = jniAccessors.getMethodIDOf(
      _classRef, "getTargetUserProfiles", "()Ljava/util/List;");

  /// from: public java.util.List<android.os.UserHandle> getTargetUserProfiles()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a list of user profiles that that the caller can use when calling other APIs in this
  /// class.
  ///
  /// A user profile would be considered as a valid target user profile, provided that:
  /// <ul>
  /// <li>It gets caller app installed</li>
  /// <li>It is not equal to the calling user</li>
  /// <li>It is in the same profile group of calling user profile</li>
  /// <li>It is enabled</li>
  /// </ul>
  ///@see UserManager\#getUserProfiles()
  ///@return This value will never be {@code null}.
  jni.JniObject getTargetUserProfiles() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getTargetUserProfiles, jni.JniType.objectType, []).object);

  static final _id_getProfileSwitchingLabel = jniAccessors.getMethodIDOf(
      _classRef,
      "getProfileSwitchingLabel",
      "(Landroid/os/UserHandle;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getProfileSwitchingLabel(android.os.UserHandle userHandle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a label that calling app can show to user for the semantic of profile switching --
  /// launching its own activity in specified user profile. For example, it may return
  /// "Switch to work" if the given user handle is the managed profile one.
  ///@param userHandle The UserHandle of the target profile, must be one of the users returned by
  ///        \#getTargetUserProfiles(), otherwise a SecurityException will
  ///        be thrown.
  /// This value must never be {@code null}.
  ///@return a label that calling app can show user for the semantic of launching its own
  ///         activity in the specified user profile.
  ///
  /// This value will never be {@code null}.
  ///@see \#startMainActivity(ComponentName, UserHandle, Rect, Bundle)
  jni.JniObject getProfileSwitchingLabel(userhandle_.UserHandle userHandle) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getProfileSwitchingLabel,
          jni.JniType.objectType,
          [userHandle.reference]).object);

  static final _id_getProfileSwitchingIconDrawable = jniAccessors.getMethodIDOf(
      _classRef,
      "getProfileSwitchingIconDrawable",
      "(Landroid/os/UserHandle;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getProfileSwitchingIconDrawable(android.os.UserHandle userHandle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a drawable that calling app can show to user for the semantic of profile switching --
  /// launching its own activity in specified user profile. For example, it may return a briefcase
  /// icon if the given user handle is the managed profile one.
  ///@param userHandle The UserHandle of the target profile, must be one of the users returned by
  ///        \#getTargetUserProfiles(), otherwise a SecurityException will
  ///        be thrown.
  /// This value must never be {@code null}.
  ///@return an icon that calling app can show user for the semantic of launching its own
  ///         activity in specified user profile.
  ///
  /// This value will never be {@code null}.
  ///@see \#startMainActivity(ComponentName, UserHandle)
  drawable_.Drawable getProfileSwitchingIconDrawable(
          userhandle_.UserHandle userHandle) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getProfileSwitchingIconDrawable,
          jni.JniType.objectType,
          [userHandle.reference]).object);
}
