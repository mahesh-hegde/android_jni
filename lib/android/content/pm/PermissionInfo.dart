// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "PackageItemInfo.dart" as packageiteminfo_;

import "../../os/Parcelable.dart" as parcelable_;

import "PackageManager.dart" as packagemanager_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.PermissionInfo
///
/// Information you can retrieve about a particular security permission
/// known to the system.  This corresponds to information collected from the
/// AndroidManifest.xml's &lt;permission&gt; tags.
class PermissionInfo extends packageiteminfo_.PackageItemInfo {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/PermissionInfo");
  PermissionInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.pm.PermissionInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int FLAG_COSTS_MONEY
  ///
  /// Flag for \#flags, corresponding to <code>costsMoney</code>
  /// value of android.R.attr\#permissionFlags.
  static const FLAG_COSTS_MONEY = 1;

  /// from: static public final int FLAG_INSTALLED
  ///
  /// Flag for \#flags, indicating that this permission has been
  /// installed into the system's globally defined permissions.
  static const FLAG_INSTALLED = 1073741824;

  /// from: static public final int PROTECTION_DANGEROUS
  ///
  /// Dangerous value for \#protectionLevel, corresponding
  /// to the <code>dangerous</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_DANGEROUS = 1;

  /// from: static public final int PROTECTION_FLAG_APPOP
  ///
  /// Additional flag for \#protectionLevel, corresponding
  /// to the <code>appop</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_FLAG_APPOP = 64;

  /// from: static public final int PROTECTION_FLAG_DEVELOPMENT
  ///
  /// Additional flag for \#protectionLevel, corresponding
  /// to the <code>development</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_FLAG_DEVELOPMENT = 32;

  /// from: static public final int PROTECTION_FLAG_INSTALLER
  ///
  /// Additional flag for \#protectionLevel, corresponding
  /// to the <code>installer</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_FLAG_INSTALLER = 256;

  /// from: static public final int PROTECTION_FLAG_INSTANT
  ///
  /// Additional flag for \#protectionLevel, corresponding
  /// to the <code>instant</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_FLAG_INSTANT = 4096;

  /// from: static public final int PROTECTION_FLAG_PRE23
  ///
  /// Additional flag for \#protectionLevel, corresponding
  /// to the <code>pre23</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_FLAG_PRE23 = 128;

  /// from: static public final int PROTECTION_FLAG_PREINSTALLED
  ///
  /// Additional flag for \#protectionLevel, corresponding
  /// to the <code>preinstalled</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_FLAG_PREINSTALLED = 1024;

  /// from: static public final int PROTECTION_FLAG_PRIVILEGED
  ///
  /// Additional flag for \#protectionLevel, corresponding
  /// to the <code>privileged</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_FLAG_PRIVILEGED = 16;

  /// from: static public final int PROTECTION_FLAG_RUNTIME_ONLY
  ///
  /// Additional flag for \#protectionLevel, corresponding
  /// to the <code>runtime</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_FLAG_RUNTIME_ONLY = 8192;

  /// from: static public final int PROTECTION_FLAG_SETUP
  ///
  /// Additional flag for \#protectionLevel, corresponding
  /// to the <code>setup</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_FLAG_SETUP = 2048;

  /// from: static public final int PROTECTION_FLAG_SYSTEM
  ///
  /// @deprecated Old name for \#PROTECTION_FLAG_PRIVILEGED, which
  /// is now very confusing because it only applies to privileged apps, not all
  /// apps on the system image.
  static const PROTECTION_FLAG_SYSTEM = 16;

  /// from: static public final int PROTECTION_FLAG_VERIFIER
  ///
  /// Additional flag for \#protectionLevel, corresponding
  /// to the <code>verifier</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_FLAG_VERIFIER = 512;

  /// from: static public final int PROTECTION_MASK_BASE
  ///
  /// Mask for \#protectionLevel: the basic protection type.
  ///@deprecated Use \#getProtection() instead.
  static const PROTECTION_MASK_BASE = 15;

  /// from: static public final int PROTECTION_MASK_FLAGS
  ///
  /// Mask for \#protectionLevel: additional flag bits.
  ///@deprecated Use \#getProtectionFlags() instead.
  static const PROTECTION_MASK_FLAGS = 65520;

  /// from: static public final int PROTECTION_NORMAL
  ///
  /// A normal application value for \#protectionLevel, corresponding
  /// to the <code>normal</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_NORMAL = 0;

  /// from: static public final int PROTECTION_SIGNATURE
  ///
  /// System-level value for \#protectionLevel, corresponding
  /// to the <code>signature</code> value of
  /// android.R.attr\#protectionLevel.
  static const PROTECTION_SIGNATURE = 2;

  /// from: static public final int PROTECTION_SIGNATURE_OR_SYSTEM
  ///
  /// @deprecated Use \#PROTECTION_SIGNATURE|\#PROTECTION_FLAG_PRIVILEGED
  /// instead.
  static const PROTECTION_SIGNATURE_OR_SYSTEM = 3;

  static final _id_descriptionRes =
      jniAccessors.getFieldIDOf(_classRef, "descriptionRes", "I");

  /// from: public int descriptionRes
  ///
  /// A string resource identifier (in the package's resources) of this
  /// permission's description.  From the "description" attribute or,
  /// if not set, 0.
  int get descriptionRes => jniAccessors
      .getField(reference, _id_descriptionRes, jni.JniType.intType)
      .integer;

  /// from: public int descriptionRes
  ///
  /// A string resource identifier (in the package's resources) of this
  /// permission's description.  From the "description" attribute or,
  /// if not set, 0.
  set descriptionRes(int value) =>
      jniEnv.SetIntField(reference, _id_descriptionRes, value);

  static final _id_flags = jniAccessors.getFieldIDOf(_classRef, "flags", "I");

  /// from: public int flags
  ///
  /// Additional flags about this permission as given by
  /// android.R.attr\#permissionFlags.
  int get flags =>
      jniAccessors.getField(reference, _id_flags, jni.JniType.intType).integer;

  /// from: public int flags
  ///
  /// Additional flags about this permission as given by
  /// android.R.attr\#permissionFlags.
  set flags(int value) => jniEnv.SetIntField(reference, _id_flags, value);

  static final _id_group =
      jniAccessors.getFieldIDOf(_classRef, "group", "Ljava/lang/String;");

  /// from: public java.lang.String group
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The group this permission is a part of, as per
  /// android.R.attr\#permissionGroup.
  jni.JniString get group => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_group, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String group
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The group this permission is a part of, as per
  /// android.R.attr\#permissionGroup.
  set group(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_group, value.reference);

  static final _id_nonLocalizedDescription = jniAccessors.getFieldIDOf(
      _classRef, "nonLocalizedDescription", "Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence nonLocalizedDescription
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The description string provided in the AndroidManifest file, if any.  You
  /// probably don't want to use this, since it will be null if the description
  /// is in a resource.  You probably want
  /// PermissionInfo\#loadDescription instead.
  jni.JniObject get nonLocalizedDescription =>
      jni.JniObject.fromRef(jniAccessors
          .getField(
              reference, _id_nonLocalizedDescription, jni.JniType.objectType)
          .object);

  /// from: public java.lang.CharSequence nonLocalizedDescription
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The description string provided in the AndroidManifest file, if any.  You
  /// probably don't want to use this, since it will be null if the description
  /// is in a resource.  You probably want
  /// PermissionInfo\#loadDescription instead.
  set nonLocalizedDescription(jni.JniObject value) => jniEnv.SetObjectField(
      reference, _id_nonLocalizedDescription, value.reference);

  static final _id_protectionLevel =
      jniAccessors.getFieldIDOf(_classRef, "protectionLevel", "I");

  /// from: public int protectionLevel
  ///
  /// The level of access this permission is protecting, as per
  /// android.R.attr\#protectionLevel. Consists of
  /// a base permission type and zero or more flags. Use the following functions
  /// to extract them.
  ///
  /// <pre>
  /// int basePermissionType = permissionInfo.getProtection();
  /// int permissionFlags = permissionInfo.getProtectionFlags();
  /// </pre>
  ///
  ///
  ///Base permission types are \#PROTECTION_NORMAL,
  /// \#PROTECTION_DANGEROUS, \#PROTECTION_SIGNATURE
  /// and the deprecated \#PROTECTION_SIGNATURE_OR_SYSTEM.
  /// Flags are listed under android.R.attr\#protectionLevel.
  ///@deprecated Use \#getProtection() and \#getProtectionFlags() instead.
  int get protectionLevel => jniAccessors
      .getField(reference, _id_protectionLevel, jni.JniType.intType)
      .integer;

  /// from: public int protectionLevel
  ///
  /// The level of access this permission is protecting, as per
  /// android.R.attr\#protectionLevel. Consists of
  /// a base permission type and zero or more flags. Use the following functions
  /// to extract them.
  ///
  /// <pre>
  /// int basePermissionType = permissionInfo.getProtection();
  /// int permissionFlags = permissionInfo.getProtectionFlags();
  /// </pre>
  ///
  ///
  ///Base permission types are \#PROTECTION_NORMAL,
  /// \#PROTECTION_DANGEROUS, \#PROTECTION_SIGNATURE
  /// and the deprecated \#PROTECTION_SIGNATURE_OR_SYSTEM.
  /// Flags are listed under android.R.attr\#protectionLevel.
  ///@deprecated Use \#getProtection() and \#getProtectionFlags() instead.
  set protectionLevel(int value) =>
      jniEnv.SetIntField(reference, _id_protectionLevel, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PermissionInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/pm/PermissionInfo;)V");

  /// from: public void <init>(android.content.pm.PermissionInfo orig)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PermissionInfo.ctor3(PermissionInfo orig)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor3, [orig.reference]).object);

  static final _id_loadDescription = jniAccessors.getMethodIDOf(
      _classRef,
      "loadDescription",
      "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadDescription(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the textual description of this permission.  This
  /// will call back on the given PackageManager to load the description from
  /// the application.
  ///@param pm A PackageManager from which the label can be loaded; usually
  /// the PackageManager from which you originally retrieved this item.
  ///@return Returns a CharSequence containing the permission's description.
  /// If there is no description, null is returned.
  jni.JniObject loadDescription(packagemanager_.PackageManager pm) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadDescription, jni.JniType.objectType, [pm.reference]).object);

  static final _id_getProtection =
      jniAccessors.getMethodIDOf(_classRef, "getProtection", "()I");

  /// from: public int getProtection()
  ///
  /// Return the base permission type.
  ///@return Value is android.content.pm.PermissionInfo\#PROTECTION_NORMAL, android.content.pm.PermissionInfo\#PROTECTION_DANGEROUS, android.content.pm.PermissionInfo\#PROTECTION_SIGNATURE, or android.content.pm.PermissionInfo\#PROTECTION_SIGNATURE_OR_SYSTEM
  int getProtection() => jniAccessors.callMethodWithArgs(
      reference, _id_getProtection, jni.JniType.intType, []).integer;

  static final _id_getProtectionFlags =
      jniAccessors.getMethodIDOf(_classRef, "getProtectionFlags", "()I");

  /// from: public int getProtectionFlags()
  ///
  /// Return the additional flags in \#protectionLevel.
  ///@return Value is either <code>0</code> or a combination of android.content.pm.PermissionInfo\#PROTECTION_FLAG_PRIVILEGED, android.content.pm.PermissionInfo\#PROTECTION_FLAG_SYSTEM, android.content.pm.PermissionInfo\#PROTECTION_FLAG_DEVELOPMENT, android.content.pm.PermissionInfo\#PROTECTION_FLAG_APPOP, android.content.pm.PermissionInfo\#PROTECTION_FLAG_PRE23, android.content.pm.PermissionInfo\#PROTECTION_FLAG_INSTALLER, android.content.pm.PermissionInfo\#PROTECTION_FLAG_VERIFIER, android.content.pm.PermissionInfo\#PROTECTION_FLAG_PREINSTALLED, android.content.pm.PermissionInfo\#PROTECTION_FLAG_SETUP, android.content.pm.PermissionInfo\#PROTECTION_FLAG_INSTANT, android.content.pm.PermissionInfo\#PROTECTION_FLAG_RUNTIME_ONLY, android.content.pm.PermissionInfo.PROTECTION_FLAG_OEM, android.content.pm.PermissionInfo.PROTECTION_FLAG_VENDOR_PRIVILEGED, and android.content.pm.PermissionInfo.PROTECTION_FLAG_SYSTEM_TEXT_CLASSIFIER
  int getProtectionFlags() => jniAccessors.callMethodWithArgs(
      reference, _id_getProtectionFlags, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(parcel_.Parcel dest, int parcelableFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, parcelableFlags]).check();
}
