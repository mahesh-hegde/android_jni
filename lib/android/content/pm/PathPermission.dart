// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/PatternMatcher.dart" as patternmatcher_;

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.PathPermission
///
/// Description of permissions needed to access a particular path
/// in a ProviderInfo.
class PathPermission extends patternmatcher_.PatternMatcher {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/PathPermission");
  PathPermission.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR1 = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.pm.PathPermission> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR1 =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR1, jni.JniType.objectType)
          .object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String pattern, int type, java.lang.String readPermission, java.lang.String writePermission)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PathPermission.ctor2(jni.JniString pattern, int type,
      jni.JniString readPermission, jni.JniString writePermission)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, [
          pattern.reference,
          type,
          readPermission.reference,
          writePermission.reference
        ]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel src)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PathPermission.ctor1(parcel_.Parcel src)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [src.reference]).object);

  static final _id_getReadPermission = jniAccessors.getMethodIDOf(
      _classRef, "getReadPermission", "()Ljava/lang/String;");

  /// from: public java.lang.String getReadPermission()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getReadPermission() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getReadPermission, jni.JniType.objectType, []).object);

  static final _id_getWritePermission = jniAccessors.getMethodIDOf(
      _classRef, "getWritePermission", "()Ljava/lang/String;");

  /// from: public java.lang.String getWritePermission()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getWritePermission() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getWritePermission, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
