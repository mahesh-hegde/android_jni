// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "PackageItemInfo.dart" as packageiteminfo_;

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.InstrumentationInfo
///
/// Information you can retrieve about a particular piece of test
/// instrumentation.  This corresponds to information collected
/// from the AndroidManifest.xml's &lt;instrumentation&gt; tag.
class InstrumentationInfo extends packageiteminfo_.PackageItemInfo {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/InstrumentationInfo");
  InstrumentationInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.pm.InstrumentationInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_dataDir =
      jniAccessors.getFieldIDOf(_classRef, "dataDir", "Ljava/lang/String;");

  /// from: public java.lang.String dataDir
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full path to a directory assigned to the package for its persistent data.
  jni.JniString get dataDir => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_dataDir, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String dataDir
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full path to a directory assigned to the package for its persistent data.
  set dataDir(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_dataDir, value.reference);

  static final _id_functionalTest =
      jniAccessors.getFieldIDOf(_classRef, "functionalTest", "Z");

  /// from: public boolean functionalTest
  ///
  /// Specifies whether or not to run this instrumentation as a functional test
  bool get functionalTest => jniAccessors
      .getField(reference, _id_functionalTest, jni.JniType.booleanType)
      .boolean;

  /// from: public boolean functionalTest
  ///
  /// Specifies whether or not to run this instrumentation as a functional test
  set functionalTest(bool value) =>
      jniEnv.SetBooleanField(reference, _id_functionalTest, value ? 1 : 0);

  static final _id_handleProfiling =
      jniAccessors.getFieldIDOf(_classRef, "handleProfiling", "Z");

  /// from: public boolean handleProfiling
  ///
  /// Specifies whether or not this instrumentation will handle profiling.
  bool get handleProfiling => jniAccessors
      .getField(reference, _id_handleProfiling, jni.JniType.booleanType)
      .boolean;

  /// from: public boolean handleProfiling
  ///
  /// Specifies whether or not this instrumentation will handle profiling.
  set handleProfiling(bool value) =>
      jniEnv.SetBooleanField(reference, _id_handleProfiling, value ? 1 : 0);

  static final _id_publicSourceDir = jniAccessors.getFieldIDOf(
      _classRef, "publicSourceDir", "Ljava/lang/String;");

  /// from: public java.lang.String publicSourceDir
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full path to the publicly available parts of \#sourceDir,
  /// including resources and manifest. This may be different from
  /// \#sourceDir if an application is forward locked.
  jni.JniString get publicSourceDir => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_publicSourceDir, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String publicSourceDir
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full path to the publicly available parts of \#sourceDir,
  /// including resources and manifest. This may be different from
  /// \#sourceDir if an application is forward locked.
  set publicSourceDir(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_publicSourceDir, value.reference);

  static final _id_sourceDir =
      jniAccessors.getFieldIDOf(_classRef, "sourceDir", "Ljava/lang/String;");

  /// from: public java.lang.String sourceDir
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full path to the base APK for this application.
  jni.JniString get sourceDir => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_sourceDir, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String sourceDir
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full path to the base APK for this application.
  set sourceDir(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_sourceDir, value.reference);

  static final _id_splitNames =
      jniAccessors.getFieldIDOf(_classRef, "splitNames", "[Ljava/lang/String;");

  /// from: public java.lang.String[] splitNames
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The names of all installed split APKs, ordered lexicographically.
  jni.JniObject get splitNames => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_splitNames, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String[] splitNames
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The names of all installed split APKs, ordered lexicographically.
  set splitNames(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_splitNames, value.reference);

  static final _id_splitPublicSourceDirs = jniAccessors.getFieldIDOf(
      _classRef, "splitPublicSourceDirs", "[Ljava/lang/String;");

  /// from: public java.lang.String[] splitPublicSourceDirs
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full path to the publicly available parts of \#splitSourceDirs,
  /// including resources and manifest. This may be different from
  /// \#splitSourceDirs if an application is forward locked.
  ///@see \#splitSourceDirs
  jni.JniObject get splitPublicSourceDirs => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_splitPublicSourceDirs, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String[] splitPublicSourceDirs
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full path to the publicly available parts of \#splitSourceDirs,
  /// including resources and manifest. This may be different from
  /// \#splitSourceDirs if an application is forward locked.
  ///@see \#splitSourceDirs
  set splitPublicSourceDirs(jni.JniObject value) => jniEnv.SetObjectField(
      reference, _id_splitPublicSourceDirs, value.reference);

  static final _id_splitSourceDirs = jniAccessors.getFieldIDOf(
      _classRef, "splitSourceDirs", "[Ljava/lang/String;");

  /// from: public java.lang.String[] splitSourceDirs
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full paths to zero or more split APKs, indexed by the same order as \#splitNames.
  jni.JniObject get splitSourceDirs => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_splitSourceDirs, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String[] splitSourceDirs
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full paths to zero or more split APKs, indexed by the same order as \#splitNames.
  set splitSourceDirs(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_splitSourceDirs, value.reference);

  static final _id_targetPackage = jniAccessors.getFieldIDOf(
      _classRef, "targetPackage", "Ljava/lang/String;");

  /// from: public java.lang.String targetPackage
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the application package being instrumented.  From the
  /// "package" attribute.
  jni.JniString get targetPackage => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_targetPackage, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String targetPackage
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the application package being instrumented.  From the
  /// "package" attribute.
  set targetPackage(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_targetPackage, value.reference);

  static final _id_targetProcesses = jniAccessors.getFieldIDOf(
      _classRef, "targetProcesses", "Ljava/lang/String;");

  /// from: public java.lang.String targetProcesses
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Names of the process(es) this instrumentation will run in.  If not specified, only
  /// runs in the main process of the targetPackage.  Can either be a comma-separated list
  /// of process names or '*' for any process that launches to run targetPackage code.
  jni.JniString get targetProcesses => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_targetProcesses, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String targetProcesses
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Names of the process(es) this instrumentation will run in.  If not specified, only
  /// runs in the main process of the targetPackage.  Can either be a comma-separated list
  /// of process names or '*' for any process that launches to run targetPackage code.
  set targetProcesses(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_targetProcesses, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  InstrumentationInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/pm/InstrumentationInfo;)V");

  /// from: public void <init>(android.content.pm.InstrumentationInfo orig)
  /// The returned object must be deleted after use, by calling the `delete` method.
  InstrumentationInfo.ctor3(InstrumentationInfo orig)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor3, [orig.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(parcel_.Parcel dest, int parcelableFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, parcelableFlags]).check();
}
