// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "PackageItemInfo.dart" as packageiteminfo_;

import "ApplicationInfo.dart" as applicationinfo_;

import "../../os/Parcel.dart" as parcel_;

import "../../util/Printer.dart" as printer_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.ComponentInfo
///
/// Base class containing information common to all application components
/// (ActivityInfo, ServiceInfo).  This class is not intended
/// to be used by itself; it is simply here to share common definitions
/// between all application components.  As such, it does not itself
/// implement Parcelable, but does provide convenience methods to assist
/// in the implementation of Parcelable in subclasses.
class ComponentInfo extends packageiteminfo_.PackageItemInfo {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/ComponentInfo");
  ComponentInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_applicationInfo = jniAccessors.getFieldIDOf(
      _classRef, "applicationInfo", "Landroid/content/pm/ApplicationInfo;");

  /// from: public android.content.pm.ApplicationInfo applicationInfo
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Global information about the application/package this component is a
  /// part of.
  applicationinfo_.ApplicationInfo get applicationInfo =>
      applicationinfo_.ApplicationInfo.fromRef(jniAccessors
          .getField(reference, _id_applicationInfo, jni.JniType.objectType)
          .object);

  /// from: public android.content.pm.ApplicationInfo applicationInfo
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Global information about the application/package this component is a
  /// part of.
  set applicationInfo(applicationinfo_.ApplicationInfo value) =>
      jniEnv.SetObjectField(reference, _id_applicationInfo, value.reference);

  static final _id_descriptionRes =
      jniAccessors.getFieldIDOf(_classRef, "descriptionRes", "I");

  /// from: public int descriptionRes
  ///
  /// A string resource identifier (in the package's resources) containing
  /// a user-readable description of the component.  From the "description"
  /// attribute or, if not set, 0.
  int get descriptionRes => jniAccessors
      .getField(reference, _id_descriptionRes, jni.JniType.intType)
      .integer;

  /// from: public int descriptionRes
  ///
  /// A string resource identifier (in the package's resources) containing
  /// a user-readable description of the component.  From the "description"
  /// attribute or, if not set, 0.
  set descriptionRes(int value) =>
      jniEnv.SetIntField(reference, _id_descriptionRes, value);

  static final _id_directBootAware =
      jniAccessors.getFieldIDOf(_classRef, "directBootAware", "Z");

  /// from: public boolean directBootAware
  ///
  /// Indicates if this component is aware of direct boot lifecycle, and can be
  /// safely run before the user has entered their credentials (such as a lock
  /// pattern or PIN).
  bool get directBootAware => jniAccessors
      .getField(reference, _id_directBootAware, jni.JniType.booleanType)
      .boolean;

  /// from: public boolean directBootAware
  ///
  /// Indicates if this component is aware of direct boot lifecycle, and can be
  /// safely run before the user has entered their credentials (such as a lock
  /// pattern or PIN).
  set directBootAware(bool value) =>
      jniEnv.SetBooleanField(reference, _id_directBootAware, value ? 1 : 0);

  static final _id_enabled =
      jniAccessors.getFieldIDOf(_classRef, "enabled", "Z");

  /// from: public boolean enabled
  ///
  /// Indicates whether or not this component may be instantiated.  Note that this value can be
  /// overridden by the one in its parent ApplicationInfo.
  bool get enabled => jniAccessors
      .getField(reference, _id_enabled, jni.JniType.booleanType)
      .boolean;

  /// from: public boolean enabled
  ///
  /// Indicates whether or not this component may be instantiated.  Note that this value can be
  /// overridden by the one in its parent ApplicationInfo.
  set enabled(bool value) =>
      jniEnv.SetBooleanField(reference, _id_enabled, value ? 1 : 0);

  static final _id_exported =
      jniAccessors.getFieldIDOf(_classRef, "exported", "Z");

  /// from: public boolean exported
  ///
  /// Set to true if this component is available for use by other applications.
  /// Comes from android.R.attr\#exported android:exported of the
  /// &lt;activity&gt;, &lt;receiver&gt;, &lt;service&gt;, or
  /// &lt;provider&gt; tag.
  bool get exported => jniAccessors
      .getField(reference, _id_exported, jni.JniType.booleanType)
      .boolean;

  /// from: public boolean exported
  ///
  /// Set to true if this component is available for use by other applications.
  /// Comes from android.R.attr\#exported android:exported of the
  /// &lt;activity&gt;, &lt;receiver&gt;, &lt;service&gt;, or
  /// &lt;provider&gt; tag.
  set exported(bool value) =>
      jniEnv.SetBooleanField(reference, _id_exported, value ? 1 : 0);

  static final _id_processName =
      jniAccessors.getFieldIDOf(_classRef, "processName", "Ljava/lang/String;");

  /// from: public java.lang.String processName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the process this component should run in.
  /// From the "android:process" attribute or, if not set, the same
  /// as <var>applicationInfo.processName</var>.
  jni.JniString get processName => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_processName, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String processName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the process this component should run in.
  /// From the "android:process" attribute or, if not set, the same
  /// as <var>applicationInfo.processName</var>.
  set processName(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_processName, value.reference);

  static final _id_splitName =
      jniAccessors.getFieldIDOf(_classRef, "splitName", "Ljava/lang/String;");

  /// from: public java.lang.String splitName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the split in which this component is declared.
  /// Null if the component was declared in the base APK.
  jni.JniString get splitName => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_splitName, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String splitName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the split in which this component is declared.
  /// Null if the component was declared in the base APK.
  set splitName(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_splitName, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ComponentInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/pm/ComponentInfo;)V");

  /// from: public void <init>(android.content.pm.ComponentInfo orig)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ComponentInfo.ctor3(ComponentInfo orig)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor3, [orig.reference]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: protected void <init>(android.os.Parcel source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ComponentInfo.ctor2(parcel_.Parcel source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [source.reference]).object);

  static final _id_isEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isEnabled", "()Z");

  /// from: public boolean isEnabled()
  ///
  /// Return whether this component and its enclosing application are enabled.
  bool isEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_isEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_getIconResource =
      jniAccessors.getMethodIDOf(_classRef, "getIconResource", "()I");

  /// from: public final int getIconResource()
  ///
  /// Return the icon resource identifier to use for this component.  If
  /// the component defines an icon, that is used; else, the application
  /// icon is used.
  ///@return The icon associated with this component.
  int getIconResource() => jniAccessors.callMethodWithArgs(
      reference, _id_getIconResource, jni.JniType.intType, []).integer;

  static final _id_getLogoResource =
      jniAccessors.getMethodIDOf(_classRef, "getLogoResource", "()I");

  /// from: public final int getLogoResource()
  ///
  /// Return the logo resource identifier to use for this component.  If
  /// the component defines a logo, that is used; else, the application
  /// logo is used.
  ///@return The logo associated with this component.
  int getLogoResource() => jniAccessors.callMethodWithArgs(
      reference, _id_getLogoResource, jni.JniType.intType, []).integer;

  static final _id_getBannerResource =
      jniAccessors.getMethodIDOf(_classRef, "getBannerResource", "()I");

  /// from: public final int getBannerResource()
  ///
  /// Return the banner resource identifier to use for this component. If the
  /// component defines a banner, that is used; else, the application banner is
  /// used.
  ///@return The banner associated with this component.
  int getBannerResource() => jniAccessors.callMethodWithArgs(
      reference, _id_getBannerResource, jni.JniType.intType, []).integer;

  static final _id_dumpFront = jniAccessors.getMethodIDOf(
      _classRef, "dumpFront", "(Landroid/util/Printer;Ljava/lang/String;)V");

  /// from: protected void dumpFront(android.util.Printer pw, java.lang.String prefix)
  void dumpFront(printer_.Printer pw, jni.JniString prefix) =>
      jniAccessors.callMethodWithArgs(reference, _id_dumpFront,
          jni.JniType.voidType, [pw.reference, prefix.reference]).check();

  static final _id_dumpBack = jniAccessors.getMethodIDOf(
      _classRef, "dumpBack", "(Landroid/util/Printer;Ljava/lang/String;)V");

  /// from: protected void dumpBack(android.util.Printer pw, java.lang.String prefix)
  void dumpBack(printer_.Printer pw, jni.JniString prefix) =>
      jniAccessors.callMethodWithArgs(reference, _id_dumpBack,
          jni.JniType.voidType, [pw.reference, prefix.reference]).check();

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(parcel_.Parcel dest, int parcelableFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, parcelableFlags]).check();
}
