// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.FeatureInfo
///
/// Definition of a single optional hardware or software feature of an Android
/// device.
///
/// This object is used to represent both features supported by a device and
/// features requested by an app. Apps can request that certain features be
/// available as a prerequisite to being installed through the
/// {@code uses-feature} tag in their manifests.
///
/// Starting in android.os.Build.VERSION_CODES\#N, features can have a
/// version, which must always be backwards compatible. That is, a device
/// claiming to support version 3 of a specific feature must support apps
/// requesting version 1 of that feature.
class FeatureInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/FeatureInfo");
  FeatureInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.pm.FeatureInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int FLAG_REQUIRED
  ///
  /// Set on \#flags if this feature has been required by the application.
  static const FLAG_REQUIRED = 1;

  /// from: static public final int GL_ES_VERSION_UNDEFINED
  ///
  /// Default value for \#reqGlEsVersion;
  static const GL_ES_VERSION_UNDEFINED = 0;

  static final _id_flags = jniAccessors.getFieldIDOf(_classRef, "flags", "I");

  /// from: public int flags
  ///
  /// Additional flags.  May be zero or more of \#FLAG_REQUIRED.
  int get flags =>
      jniAccessors.getField(reference, _id_flags, jni.JniType.intType).integer;

  /// from: public int flags
  ///
  /// Additional flags.  May be zero or more of \#FLAG_REQUIRED.
  set flags(int value) => jniEnv.SetIntField(reference, _id_flags, value);

  static final _id_name =
      jniAccessors.getFieldIDOf(_classRef, "name", "Ljava/lang/String;");

  /// from: public java.lang.String name
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of this feature, for example "android.hardware.camera".  If
  /// this is null, then this is an OpenGL ES version feature as described
  /// in \#reqGlEsVersion.
  jni.JniString get name => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_name, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String name
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of this feature, for example "android.hardware.camera".  If
  /// this is null, then this is an OpenGL ES version feature as described
  /// in \#reqGlEsVersion.
  set name(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_name, value.reference);

  static final _id_reqGlEsVersion =
      jniAccessors.getFieldIDOf(_classRef, "reqGlEsVersion", "I");

  /// from: public int reqGlEsVersion
  ///
  /// The GLES version used by an application. The upper order 16 bits represent the
  /// major version and the lower order 16 bits the minor version.  Only valid
  /// if \#name is null.
  int get reqGlEsVersion => jniAccessors
      .getField(reference, _id_reqGlEsVersion, jni.JniType.intType)
      .integer;

  /// from: public int reqGlEsVersion
  ///
  /// The GLES version used by an application. The upper order 16 bits represent the
  /// major version and the lower order 16 bits the minor version.  Only valid
  /// if \#name is null.
  set reqGlEsVersion(int value) =>
      jniEnv.SetIntField(reference, _id_reqGlEsVersion, value);

  static final _id_version =
      jniAccessors.getFieldIDOf(_classRef, "version", "I");

  /// from: public int version
  ///
  /// If this object represents a feature supported by a device, this is the
  /// maximum version of this feature supported by the device. The device
  /// implicitly supports all older versions of this feature.
  ///
  /// If this object represents a feature requested by an app, this is the
  /// minimum version of the feature required by the app.
  ///
  /// When a feature version is undefined by a device, it's assumed to be
  /// version 0.
  int get version => jniAccessors
      .getField(reference, _id_version, jni.JniType.intType)
      .integer;

  /// from: public int version
  ///
  /// If this object represents a feature supported by a device, this is the
  /// maximum version of this feature supported by the device. The device
  /// implicitly supports all older versions of this feature.
  ///
  /// If this object represents a feature requested by an app, this is the
  /// minimum version of the feature required by the app.
  ///
  /// When a feature version is undefined by a device, it's assumed to be
  /// version 0.
  set version(int value) => jniEnv.SetIntField(reference, _id_version, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  FeatureInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/pm/FeatureInfo;)V");

  /// from: public void <init>(android.content.pm.FeatureInfo orig)
  /// The returned object must be deleted after use, by calling the `delete` method.
  FeatureInfo.ctor1(FeatureInfo orig)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [orig.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(parcel_.Parcel dest, int parcelableFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, parcelableFlags]).check();

  static final _id_getGlEsVersion = jniAccessors.getMethodIDOf(
      _classRef, "getGlEsVersion", "()Ljava/lang/String;");

  /// from: public java.lang.String getGlEsVersion()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method extracts the major and minor version of reqGLEsVersion attribute
  /// and returns it as a string. Say reqGlEsVersion value of 0x00010002 is returned
  /// as 1.2
  ///@return String representation of the reqGlEsVersion attribute
  jni.JniString getGlEsVersion() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getGlEsVersion, jni.JniType.objectType, []).object);
}
