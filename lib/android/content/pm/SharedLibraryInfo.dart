// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "VersionedPackage.dart" as versionedpackage_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.SharedLibraryInfo
///
/// This class provides information for a shared library. There are
/// three types of shared libraries: builtin - non-updatable part of
/// the OS; dynamic - updatable backwards-compatible dynamically linked;
/// static - updatable non backwards-compatible emulating static linking.
class SharedLibraryInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/SharedLibraryInfo");
  SharedLibraryInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.pm.SharedLibraryInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int TYPE_BUILTIN
  ///
  /// Shared library type: this library is a part of the OS
  /// and cannot be updated or uninstalled.
  static const TYPE_BUILTIN = 0;

  /// from: static public final int TYPE_DYNAMIC
  ///
  /// Shared library type: this library is backwards-compatible, can
  /// be updated, and updates can be uninstalled. Clients link against
  /// the latest version of the library.
  static const TYPE_DYNAMIC = 1;

  /// from: static public final int TYPE_STATIC
  ///
  /// Shared library type: this library is <strong>not</strong> backwards
  /// -compatible, can be updated and updates can be uninstalled. Clients
  /// link against a specific version of the library.
  static const TYPE_STATIC = 2;

  /// from: static public final int VERSION_UNDEFINED
  ///
  /// Constant for referring to an undefined version.
  static const VERSION_UNDEFINED = -1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel parcel)
  /// The returned object must be deleted after use, by calling the `delete` method.
  SharedLibraryInfo(parcel_.Parcel parcel)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [parcel.reference]).object);

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public int getType()
  ///
  /// Gets the type of this library.
  ///@return The library type.
  ///
  /// Value is either <code>0</code> or a combination of android.content.pm.SharedLibraryInfo\#TYPE_BUILTIN, android.content.pm.SharedLibraryInfo\#TYPE_DYNAMIC, and android.content.pm.SharedLibraryInfo\#TYPE_STATIC
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_getName =
      jniAccessors.getMethodIDOf(_classRef, "getName", "()Ljava/lang/String;");

  /// from: public java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the library name an app defines in its manifest
  /// to depend on the library.
  ///@return The name.
  jni.JniString getName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_getVersion =
      jniAccessors.getMethodIDOf(_classRef, "getVersion", "()I");

  /// from: public int getVersion()
  ///
  /// @deprecated Use \#getLongVersion() instead.
  ///@return Value is -1 or greater
  int getVersion() => jniAccessors.callMethodWithArgs(
      reference, _id_getVersion, jni.JniType.intType, []).integer;

  static final _id_getLongVersion =
      jniAccessors.getMethodIDOf(_classRef, "getLongVersion", "()J");

  /// from: public long getLongVersion()
  ///
  /// Gets the version of the library. For \#TYPE_STATIC static libraries
  /// this is the declared version and for \#TYPE_DYNAMIC dynamic and
  /// \#TYPE_BUILTIN builtin it is \#VERSION_UNDEFINED as these
  /// are not versioned.
  ///@return The version.
  ///
  /// Value is -1 or greater
  int getLongVersion() => jniAccessors.callMethodWithArgs(
      reference, _id_getLongVersion, jni.JniType.longType, []).long;

  static final _id_getDeclaringPackage = jniAccessors.getMethodIDOf(_classRef,
      "getDeclaringPackage", "()Landroid/content/pm/VersionedPackage;");

  /// from: public android.content.pm.VersionedPackage getDeclaringPackage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the package that declares the library.
  ///@return The package declaring the library.
  ///
  /// This value will never be {@code null}.
  versionedpackage_.VersionedPackage getDeclaringPackage() =>
      versionedpackage_.VersionedPackage.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getDeclaringPackage,
              jni.JniType.objectType, []).object);

  static final _id_getDependentPackages = jniAccessors.getMethodIDOf(
      _classRef, "getDependentPackages", "()Ljava/util/List;");

  /// from: public java.util.List<android.content.pm.VersionedPackage> getDependentPackages()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the packages that depend on the library.
  ///@return The dependent packages.
  ///
  /// This value will never be {@code null}.
  jni.JniObject getDependentPackages() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getDependentPackages, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}
