// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "ApplicationInfo.dart" as applicationinfo_;

import "SigningInfo.dart" as signinginfo_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.PackageInfo
///
/// Overall information about the contents of a package.  This corresponds
/// to all of the information collected from AndroidManifest.xml.
class PackageInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/PackageInfo");
  PackageInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.pm.PackageInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int INSTALL_LOCATION_AUTO
  ///
  /// Constant corresponding to <code>auto</code> in the
  /// android.R.attr\#installLocation attribute.
  static const INSTALL_LOCATION_AUTO = 0;

  /// from: static public final int INSTALL_LOCATION_INTERNAL_ONLY
  ///
  /// Constant corresponding to <code>internalOnly</code> in the
  /// android.R.attr\#installLocation attribute.
  static const INSTALL_LOCATION_INTERNAL_ONLY = 1;

  /// from: static public final int INSTALL_LOCATION_PREFER_EXTERNAL
  ///
  /// Constant corresponding to <code>preferExternal</code> in the
  /// android.R.attr\#installLocation attribute.
  static const INSTALL_LOCATION_PREFER_EXTERNAL = 2;

  /// from: static public final int REQUESTED_PERMISSION_GRANTED
  ///
  /// Flag for \#requestedPermissionsFlags: the requested permission
  /// is currently granted to the application.
  static const REQUESTED_PERMISSION_GRANTED = 2;

  static final _id_activities = jniAccessors.getFieldIDOf(
      _classRef, "activities", "[Landroid/content/pm/ActivityInfo;");

  /// from: public android.content.pm.ActivityInfo[] activities
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestActivity &lt;activity&gt; tags included under &lt;application&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_ACTIVITIES was set.
  jni.JniObject get activities => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_activities, jni.JniType.objectType)
      .object);

  /// from: public android.content.pm.ActivityInfo[] activities
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestActivity &lt;activity&gt; tags included under &lt;application&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_ACTIVITIES was set.
  set activities(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_activities, value.reference);

  static final _id_applicationInfo = jniAccessors.getFieldIDOf(
      _classRef, "applicationInfo", "Landroid/content/pm/ApplicationInfo;");

  /// from: public android.content.pm.ApplicationInfo applicationInfo
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Information collected from the &lt;application&gt; tag, or null if
  /// there was none.
  applicationinfo_.ApplicationInfo get applicationInfo =>
      applicationinfo_.ApplicationInfo.fromRef(jniAccessors
          .getField(reference, _id_applicationInfo, jni.JniType.objectType)
          .object);

  /// from: public android.content.pm.ApplicationInfo applicationInfo
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Information collected from the &lt;application&gt; tag, or null if
  /// there was none.
  set applicationInfo(applicationinfo_.ApplicationInfo value) =>
      jniEnv.SetObjectField(reference, _id_applicationInfo, value.reference);

  static final _id_baseRevisionCode =
      jniAccessors.getFieldIDOf(_classRef, "baseRevisionCode", "I");

  /// from: public int baseRevisionCode
  ///
  /// The revision number of the base APK for this package, as specified by the
  /// &lt;manifest&gt; tag's
  /// android.R.styleable\#AndroidManifest_revisionCode revisionCode
  /// attribute.
  int get baseRevisionCode => jniAccessors
      .getField(reference, _id_baseRevisionCode, jni.JniType.intType)
      .integer;

  /// from: public int baseRevisionCode
  ///
  /// The revision number of the base APK for this package, as specified by the
  /// &lt;manifest&gt; tag's
  /// android.R.styleable\#AndroidManifest_revisionCode revisionCode
  /// attribute.
  set baseRevisionCode(int value) =>
      jniEnv.SetIntField(reference, _id_baseRevisionCode, value);

  static final _id_configPreferences = jniAccessors.getFieldIDOf(_classRef,
      "configPreferences", "[Landroid/content/pm/ConfigurationInfo;");

  /// from: public android.content.pm.ConfigurationInfo[] configPreferences
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Application specified preferred configuration
  /// android.R.styleable\#AndroidManifestUsesConfiguration &lt;uses-configuration&gt; tags included under &lt;manifest&gt;,
  /// or null if there were none. This is only filled in if the flag
  /// PackageManager\#GET_CONFIGURATIONS was set.
  jni.JniObject get configPreferences => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_configPreferences, jni.JniType.objectType)
      .object);

  /// from: public android.content.pm.ConfigurationInfo[] configPreferences
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Application specified preferred configuration
  /// android.R.styleable\#AndroidManifestUsesConfiguration &lt;uses-configuration&gt; tags included under &lt;manifest&gt;,
  /// or null if there were none. This is only filled in if the flag
  /// PackageManager\#GET_CONFIGURATIONS was set.
  set configPreferences(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_configPreferences, value.reference);

  static final _id_featureGroups = jniAccessors.getFieldIDOf(
      _classRef, "featureGroups", "[Landroid/content/pm/FeatureGroupInfo;");

  /// from: public android.content.pm.FeatureGroupInfo[] featureGroups
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Groups of features that this application has requested.
  /// Each group contains a set of features that are required.
  /// A device must match the features listed in \#reqFeatures and one
  /// or more FeatureGroups in order to have satisfied the feature requirement.
  ///@see FeatureInfo\#FLAG_REQUIRED
  jni.JniObject get featureGroups => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_featureGroups, jni.JniType.objectType)
      .object);

  /// from: public android.content.pm.FeatureGroupInfo[] featureGroups
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Groups of features that this application has requested.
  /// Each group contains a set of features that are required.
  /// A device must match the features listed in \#reqFeatures and one
  /// or more FeatureGroups in order to have satisfied the feature requirement.
  ///@see FeatureInfo\#FLAG_REQUIRED
  set featureGroups(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_featureGroups, value.reference);

  static final _id_firstInstallTime =
      jniAccessors.getFieldIDOf(_classRef, "firstInstallTime", "J");

  /// from: public long firstInstallTime
  ///
  /// The time at which the app was first installed.  Units are as
  /// per System\#currentTimeMillis().
  int get firstInstallTime => jniAccessors
      .getField(reference, _id_firstInstallTime, jni.JniType.longType)
      .long;

  /// from: public long firstInstallTime
  ///
  /// The time at which the app was first installed.  Units are as
  /// per System\#currentTimeMillis().
  set firstInstallTime(int value) =>
      jniEnv.SetLongField(reference, _id_firstInstallTime, value);

  static final _id_gids = jniAccessors.getFieldIDOf(_classRef, "gids", "[I");

  /// from: public int[] gids
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// All kernel group-IDs that have been assigned to this package.
  /// This is only filled in if the flag PackageManager\#GET_GIDS was set.
  jni.JniObject get gids => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_gids, jni.JniType.objectType)
      .object);

  /// from: public int[] gids
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// All kernel group-IDs that have been assigned to this package.
  /// This is only filled in if the flag PackageManager\#GET_GIDS was set.
  set gids(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_gids, value.reference);

  static final _id_installLocation =
      jniAccessors.getFieldIDOf(_classRef, "installLocation", "I");

  /// from: public int installLocation
  ///
  /// The install location requested by the package. From the
  /// android.R.attr\#installLocation attribute, one of
  /// \#INSTALL_LOCATION_AUTO, \#INSTALL_LOCATION_INTERNAL_ONLY,
  /// \#INSTALL_LOCATION_PREFER_EXTERNAL
  int get installLocation => jniAccessors
      .getField(reference, _id_installLocation, jni.JniType.intType)
      .integer;

  /// from: public int installLocation
  ///
  /// The install location requested by the package. From the
  /// android.R.attr\#installLocation attribute, one of
  /// \#INSTALL_LOCATION_AUTO, \#INSTALL_LOCATION_INTERNAL_ONLY,
  /// \#INSTALL_LOCATION_PREFER_EXTERNAL
  set installLocation(int value) =>
      jniEnv.SetIntField(reference, _id_installLocation, value);

  static final _id_instrumentation = jniAccessors.getFieldIDOf(_classRef,
      "instrumentation", "[Landroid/content/pm/InstrumentationInfo;");

  /// from: public android.content.pm.InstrumentationInfo[] instrumentation
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestInstrumentation &lt;instrumentation&gt; tags included under &lt;manifest&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_INSTRUMENTATION was set.
  jni.JniObject get instrumentation => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_instrumentation, jni.JniType.objectType)
      .object);

  /// from: public android.content.pm.InstrumentationInfo[] instrumentation
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestInstrumentation &lt;instrumentation&gt; tags included under &lt;manifest&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_INSTRUMENTATION was set.
  set instrumentation(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_instrumentation, value.reference);

  static final _id_lastUpdateTime =
      jniAccessors.getFieldIDOf(_classRef, "lastUpdateTime", "J");

  /// from: public long lastUpdateTime
  ///
  /// The time at which the app was last updated.  Units are as
  /// per System\#currentTimeMillis().
  int get lastUpdateTime => jniAccessors
      .getField(reference, _id_lastUpdateTime, jni.JniType.longType)
      .long;

  /// from: public long lastUpdateTime
  ///
  /// The time at which the app was last updated.  Units are as
  /// per System\#currentTimeMillis().
  set lastUpdateTime(int value) =>
      jniEnv.SetLongField(reference, _id_lastUpdateTime, value);

  static final _id_packageName =
      jniAccessors.getFieldIDOf(_classRef, "packageName", "Ljava/lang/String;");

  /// from: public java.lang.String packageName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of this package.  From the &lt;manifest&gt; tag's "name"
  /// attribute.
  jni.JniString get packageName => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_packageName, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String packageName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of this package.  From the &lt;manifest&gt; tag's "name"
  /// attribute.
  set packageName(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_packageName, value.reference);

  static final _id_permissions = jniAccessors.getFieldIDOf(
      _classRef, "permissions", "[Landroid/content/pm/PermissionInfo;");

  /// from: public android.content.pm.PermissionInfo[] permissions
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestPermission &lt;permission&gt; tags included under &lt;manifest&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_PERMISSIONS was set.
  jni.JniObject get permissions => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_permissions, jni.JniType.objectType)
      .object);

  /// from: public android.content.pm.PermissionInfo[] permissions
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestPermission &lt;permission&gt; tags included under &lt;manifest&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_PERMISSIONS was set.
  set permissions(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_permissions, value.reference);

  static final _id_providers = jniAccessors.getFieldIDOf(
      _classRef, "providers", "[Landroid/content/pm/ProviderInfo;");

  /// from: public android.content.pm.ProviderInfo[] providers
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestProvider &lt;provider&gt; tags included under &lt;application&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_PROVIDERS was set.
  jni.JniObject get providers => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_providers, jni.JniType.objectType)
      .object);

  /// from: public android.content.pm.ProviderInfo[] providers
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestProvider &lt;provider&gt; tags included under &lt;application&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_PROVIDERS was set.
  set providers(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_providers, value.reference);

  static final _id_receivers = jniAccessors.getFieldIDOf(
      _classRef, "receivers", "[Landroid/content/pm/ActivityInfo;");

  /// from: public android.content.pm.ActivityInfo[] receivers
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestReceiver &lt;receiver&gt; tags included under &lt;application&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_RECEIVERS was set.
  jni.JniObject get receivers => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_receivers, jni.JniType.objectType)
      .object);

  /// from: public android.content.pm.ActivityInfo[] receivers
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestReceiver &lt;receiver&gt; tags included under &lt;application&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_RECEIVERS was set.
  set receivers(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_receivers, value.reference);

  static final _id_reqFeatures = jniAccessors.getFieldIDOf(
      _classRef, "reqFeatures", "[Landroid/content/pm/FeatureInfo;");

  /// from: public android.content.pm.FeatureInfo[] reqFeatures
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Features that this application has requested.
  ///@see FeatureInfo\#FLAG_REQUIRED
  jni.JniObject get reqFeatures => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_reqFeatures, jni.JniType.objectType)
      .object);

  /// from: public android.content.pm.FeatureInfo[] reqFeatures
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Features that this application has requested.
  ///@see FeatureInfo\#FLAG_REQUIRED
  set reqFeatures(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_reqFeatures, value.reference);

  static final _id_requestedPermissions = jniAccessors.getFieldIDOf(
      _classRef, "requestedPermissions", "[Ljava/lang/String;");

  /// from: public java.lang.String[] requestedPermissions
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestUsesPermission &lt;uses-permission&gt; tags included under &lt;manifest&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_PERMISSIONS was set.  This list includes
  /// all permissions requested, even those that were not granted or known
  /// by the system at install time.
  jni.JniObject get requestedPermissions => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_requestedPermissions, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String[] requestedPermissions
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestUsesPermission &lt;uses-permission&gt; tags included under &lt;manifest&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_PERMISSIONS was set.  This list includes
  /// all permissions requested, even those that were not granted or known
  /// by the system at install time.
  set requestedPermissions(jni.JniObject value) => jniEnv.SetObjectField(
      reference, _id_requestedPermissions, value.reference);

  static final _id_requestedPermissionsFlags =
      jniAccessors.getFieldIDOf(_classRef, "requestedPermissionsFlags", "[I");

  /// from: public int[] requestedPermissionsFlags
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of flags of all android.R.styleable\#AndroidManifestUsesPermission &lt;uses-permission&gt; tags included under &lt;manifest&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_PERMISSIONS was set.  Each value matches
  /// the corresponding entry in \#requestedPermissions, and will have
  /// the flag \#REQUESTED_PERMISSION_GRANTED set as appropriate.
  jni.JniObject get requestedPermissionsFlags =>
      jni.JniObject.fromRef(jniAccessors
          .getField(
              reference, _id_requestedPermissionsFlags, jni.JniType.objectType)
          .object);

  /// from: public int[] requestedPermissionsFlags
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of flags of all android.R.styleable\#AndroidManifestUsesPermission &lt;uses-permission&gt; tags included under &lt;manifest&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_PERMISSIONS was set.  Each value matches
  /// the corresponding entry in \#requestedPermissions, and will have
  /// the flag \#REQUESTED_PERMISSION_GRANTED set as appropriate.
  set requestedPermissionsFlags(jni.JniObject value) => jniEnv.SetObjectField(
      reference, _id_requestedPermissionsFlags, value.reference);

  static final _id_services = jniAccessors.getFieldIDOf(
      _classRef, "services", "[Landroid/content/pm/ServiceInfo;");

  /// from: public android.content.pm.ServiceInfo[] services
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestService &lt;service&gt; tags included under &lt;application&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_SERVICES was set.
  jni.JniObject get services => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_services, jni.JniType.objectType)
      .object);

  /// from: public android.content.pm.ServiceInfo[] services
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all android.R.styleable\#AndroidManifestService &lt;service&gt; tags included under &lt;application&gt;,
  /// or null if there were none.  This is only filled in if the flag
  /// PackageManager\#GET_SERVICES was set.
  set services(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_services, value.reference);

  static final _id_sharedUserId = jniAccessors.getFieldIDOf(
      _classRef, "sharedUserId", "Ljava/lang/String;");

  /// from: public java.lang.String sharedUserId
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The shared user ID name of this package, as specified by the &lt;manifest&gt;
  /// tag's android.R.styleable\#AndroidManifest_sharedUserId sharedUserId
  /// attribute.
  jni.JniString get sharedUserId => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_sharedUserId, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String sharedUserId
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The shared user ID name of this package, as specified by the &lt;manifest&gt;
  /// tag's android.R.styleable\#AndroidManifest_sharedUserId sharedUserId
  /// attribute.
  set sharedUserId(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_sharedUserId, value.reference);

  static final _id_sharedUserLabel =
      jniAccessors.getFieldIDOf(_classRef, "sharedUserLabel", "I");

  /// from: public int sharedUserLabel
  ///
  /// The shared user ID label of this package, as specified by the &lt;manifest&gt;
  /// tag's android.R.styleable\#AndroidManifest_sharedUserLabel sharedUserLabel
  /// attribute.
  int get sharedUserLabel => jniAccessors
      .getField(reference, _id_sharedUserLabel, jni.JniType.intType)
      .integer;

  /// from: public int sharedUserLabel
  ///
  /// The shared user ID label of this package, as specified by the &lt;manifest&gt;
  /// tag's android.R.styleable\#AndroidManifest_sharedUserLabel sharedUserLabel
  /// attribute.
  set sharedUserLabel(int value) =>
      jniEnv.SetIntField(reference, _id_sharedUserLabel, value);

  static final _id_signatures = jniAccessors.getFieldIDOf(
      _classRef, "signatures", "[Landroid/content/pm/Signature;");

  /// from: public android.content.pm.Signature[] signatures
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all signatures read from the package file. This is only filled
  /// in if the flag PackageManager\#GET_SIGNATURES was set. A package
  /// must be singed with at least one certificate which is at position zero.
  /// The package can be signed with additional certificates which appear as
  /// subsequent entries.
  ///
  /// <strong>Note:</strong> Signature ordering is not guaranteed to be
  /// stable which means that a package signed with certificates A and B is
  /// equivalent to being signed with certificates B and A. This means that
  /// in case multiple signatures are reported you cannot assume the one at
  /// the first position to be the same across updates.
  ///
  /// <strong>Deprecated</strong> This has been replaced by the
  /// PackageInfo\#signingInfo field, which takes into
  /// account signing certificate rotation.  For backwards compatibility in
  /// the event of signing certificate rotation, this will return the oldest
  /// reported signing certificate, so that an application will appear to
  /// callers as though no rotation occurred.
  ///@deprecated use {@code signingInfo} instead
  jni.JniObject get signatures => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_signatures, jni.JniType.objectType)
      .object);

  /// from: public android.content.pm.Signature[] signatures
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Array of all signatures read from the package file. This is only filled
  /// in if the flag PackageManager\#GET_SIGNATURES was set. A package
  /// must be singed with at least one certificate which is at position zero.
  /// The package can be signed with additional certificates which appear as
  /// subsequent entries.
  ///
  /// <strong>Note:</strong> Signature ordering is not guaranteed to be
  /// stable which means that a package signed with certificates A and B is
  /// equivalent to being signed with certificates B and A. This means that
  /// in case multiple signatures are reported you cannot assume the one at
  /// the first position to be the same across updates.
  ///
  /// <strong>Deprecated</strong> This has been replaced by the
  /// PackageInfo\#signingInfo field, which takes into
  /// account signing certificate rotation.  For backwards compatibility in
  /// the event of signing certificate rotation, this will return the oldest
  /// reported signing certificate, so that an application will appear to
  /// callers as though no rotation occurred.
  ///@deprecated use {@code signingInfo} instead
  set signatures(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_signatures, value.reference);

  static final _id_signingInfo = jniAccessors.getFieldIDOf(
      _classRef, "signingInfo", "Landroid/content/pm/SigningInfo;");

  /// from: public android.content.pm.SigningInfo signingInfo
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Signing information read from the package file, potentially
  /// including past signing certificates no longer used after signing
  /// certificate rotation.  This is only filled in if
  /// the flag PackageManager\#GET_SIGNING_CERTIFICATES was set.
  ///
  /// Use this field instead of the deprecated {@code signatures} field.
  /// See SigningInfo for more information on its contents.
  signinginfo_.SigningInfo get signingInfo =>
      signinginfo_.SigningInfo.fromRef(jniAccessors
          .getField(reference, _id_signingInfo, jni.JniType.objectType)
          .object);

  /// from: public android.content.pm.SigningInfo signingInfo
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Signing information read from the package file, potentially
  /// including past signing certificates no longer used after signing
  /// certificate rotation.  This is only filled in if
  /// the flag PackageManager\#GET_SIGNING_CERTIFICATES was set.
  ///
  /// Use this field instead of the deprecated {@code signatures} field.
  /// See SigningInfo for more information on its contents.
  set signingInfo(signinginfo_.SigningInfo value) =>
      jniEnv.SetObjectField(reference, _id_signingInfo, value.reference);

  static final _id_splitNames =
      jniAccessors.getFieldIDOf(_classRef, "splitNames", "[Ljava/lang/String;");

  /// from: public java.lang.String[] splitNames
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The names of any installed split APKs for this package.
  jni.JniObject get splitNames => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_splitNames, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String[] splitNames
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The names of any installed split APKs for this package.
  set splitNames(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_splitNames, value.reference);

  static final _id_splitRevisionCodes =
      jniAccessors.getFieldIDOf(_classRef, "splitRevisionCodes", "[I");

  /// from: public int[] splitRevisionCodes
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The revision number of any split APKs for this package, as specified by
  /// the &lt;manifest&gt; tag's
  /// android.R.styleable\#AndroidManifest_revisionCode revisionCode
  /// attribute. Indexes are a 1:1 mapping against \#splitNames.
  jni.JniObject get splitRevisionCodes => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_splitRevisionCodes, jni.JniType.objectType)
      .object);

  /// from: public int[] splitRevisionCodes
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The revision number of any split APKs for this package, as specified by
  /// the &lt;manifest&gt; tag's
  /// android.R.styleable\#AndroidManifest_revisionCode revisionCode
  /// attribute. Indexes are a 1:1 mapping against \#splitNames.
  set splitRevisionCodes(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_splitRevisionCodes, value.reference);

  static final _id_versionCode =
      jniAccessors.getFieldIDOf(_classRef, "versionCode", "I");

  /// from: public int versionCode
  ///
  /// @deprecated Use \#getLongVersionCode() instead, which includes both
  /// this and the additional
  /// android.R.styleable\#AndroidManifest_versionCodeMajor versionCodeMajor attribute.
  /// The version number of this package, as specified by the &lt;manifest&gt;
  /// tag's android.R.styleable\#AndroidManifest_versionCode versionCode
  /// attribute.
  ///@see \#getLongVersionCode()
  int get versionCode => jniAccessors
      .getField(reference, _id_versionCode, jni.JniType.intType)
      .integer;

  /// from: public int versionCode
  ///
  /// @deprecated Use \#getLongVersionCode() instead, which includes both
  /// this and the additional
  /// android.R.styleable\#AndroidManifest_versionCodeMajor versionCodeMajor attribute.
  /// The version number of this package, as specified by the &lt;manifest&gt;
  /// tag's android.R.styleable\#AndroidManifest_versionCode versionCode
  /// attribute.
  ///@see \#getLongVersionCode()
  set versionCode(int value) =>
      jniEnv.SetIntField(reference, _id_versionCode, value);

  static final _id_versionName =
      jniAccessors.getFieldIDOf(_classRef, "versionName", "Ljava/lang/String;");

  /// from: public java.lang.String versionName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The version name of this package, as specified by the &lt;manifest&gt;
  /// tag's android.R.styleable\#AndroidManifest_versionName versionName
  /// attribute.
  jni.JniString get versionName => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_versionName, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String versionName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The version name of this package, as specified by the &lt;manifest&gt;
  /// tag's android.R.styleable\#AndroidManifest_versionName versionName
  /// attribute.
  set versionName(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_versionName, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PackageInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getLongVersionCode =
      jniAccessors.getMethodIDOf(_classRef, "getLongVersionCode", "()J");

  /// from: public long getLongVersionCode()
  ///
  /// Return android.R.styleable\#AndroidManifest_versionCode versionCode and
  /// android.R.styleable\#AndroidManifest_versionCodeMajor versionCodeMajor combined
  /// together as a single long value.  The
  /// android.R.styleable\#AndroidManifest_versionCodeMajor versionCodeMajor is placed in
  /// the upper 32 bits.
  int getLongVersionCode() => jniAccessors.callMethodWithArgs(
      reference, _id_getLongVersionCode, jni.JniType.longType, []).long;

  static final _id_setLongVersionCode =
      jniAccessors.getMethodIDOf(_classRef, "setLongVersionCode", "(J)V");

  /// from: public void setLongVersionCode(long longVersionCode)
  ///
  /// Set the full version code in this PackageInfo, updating \#versionCode
  /// with the lower bits.
  ///@see \#getLongVersionCode()
  void setLongVersionCode(int longVersionCode) =>
      jniAccessors.callMethodWithArgs(reference, _id_setLongVersionCode,
          jni.JniType.voidType, [longVersionCode]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(parcel_.Parcel dest, int parcelableFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, parcelableFlags]).check();
}
