// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.VersionedPackage
///
/// Encapsulates a package and its version code.
class VersionedPackage extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/VersionedPackage");
  VersionedPackage.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.pm.VersionedPackage> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;I)V");

  /// from: public void <init>(java.lang.String packageName, int versionCode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new instance. Use PackageManager\#VERSION_CODE_HIGHEST
  /// to refer to the highest version code of this package.
  ///@param packageName The package name.
  /// This value must never be {@code null}.
  ///@param versionCode The version code.
  ///
  /// Value is PackageManager.VERSION_CODE_HIGHEST or greater
  VersionedPackage(jni.JniString packageName, int versionCode)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [packageName.reference, versionCode]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;J)V");

  /// from: public void <init>(java.lang.String packageName, long versionCode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new instance. Use PackageManager\#VERSION_CODE_HIGHEST
  /// to refer to the highest version code of this package.
  ///@param packageName The package name.
  /// This value must never be {@code null}.
  ///@param versionCode The version code.
  ///
  /// Value is PackageManager.VERSION_CODE_HIGHEST or greater
  VersionedPackage.ctor1(jni.JniString packageName, int versionCode)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [packageName.reference, versionCode]).object);

  static final _id_getPackageName = jniAccessors.getMethodIDOf(
      _classRef, "getPackageName", "()Ljava/lang/String;");

  /// from: public java.lang.String getPackageName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the package name.
  ///@return The package name.
  ///
  /// This value will never be {@code null}.
  jni.JniString getPackageName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPackageName, jni.JniType.objectType, []).object);

  static final _id_getVersionCode =
      jniAccessors.getMethodIDOf(_classRef, "getVersionCode", "()I");

  /// from: public int getVersionCode()
  ///
  /// @deprecated use \#getLongVersionCode() instead.
  ///@return Value is PackageManager.VERSION_CODE_HIGHEST or greater
  int getVersionCode() => jniAccessors.callMethodWithArgs(
      reference, _id_getVersionCode, jni.JniType.intType, []).integer;

  static final _id_getLongVersionCode =
      jniAccessors.getMethodIDOf(_classRef, "getLongVersionCode", "()J");

  /// from: public long getLongVersionCode()
  ///
  /// Gets the version code.
  ///@return The version code.
  ///
  /// Value is PackageManager.VERSION_CODE_HIGHEST or greater
  int getLongVersionCode() => jniAccessors.callMethodWithArgs(
      reference, _id_getLongVersionCode, jni.JniType.longType, []).long;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}
