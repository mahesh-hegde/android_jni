// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.ConfigurationInfo
///
/// Information you can retrieve about hardware configuration preferences
/// declared by an application. This corresponds to information collected from the
/// AndroidManifest.xml's &lt;uses-configuration&gt; and &lt;uses-feature&gt; tags.
class ConfigurationInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/ConfigurationInfo");
  ConfigurationInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.pm.ConfigurationInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int GL_ES_VERSION_UNDEFINED
  ///
  /// Default value for \#reqGlEsVersion;
  static const GL_ES_VERSION_UNDEFINED = 0;

  /// from: static public final int INPUT_FEATURE_FIVE_WAY_NAV
  ///
  /// Value for \#reqInputFeatures: if set, indicates that the application
  /// requires a five way navigation device
  static const INPUT_FEATURE_FIVE_WAY_NAV = 2;

  /// from: static public final int INPUT_FEATURE_HARD_KEYBOARD
  ///
  /// Value for \#reqInputFeatures: if set, indicates that the application
  /// requires a hard keyboard
  static const INPUT_FEATURE_HARD_KEYBOARD = 1;

  static final _id_reqGlEsVersion =
      jniAccessors.getFieldIDOf(_classRef, "reqGlEsVersion", "I");

  /// from: public int reqGlEsVersion
  ///
  /// The GLES version used by an application. The upper order 16 bits represent the
  /// major version and the lower order 16 bits the minor version.
  int get reqGlEsVersion => jniAccessors
      .getField(reference, _id_reqGlEsVersion, jni.JniType.intType)
      .integer;

  /// from: public int reqGlEsVersion
  ///
  /// The GLES version used by an application. The upper order 16 bits represent the
  /// major version and the lower order 16 bits the minor version.
  set reqGlEsVersion(int value) =>
      jniEnv.SetIntField(reference, _id_reqGlEsVersion, value);

  static final _id_reqInputFeatures =
      jniAccessors.getFieldIDOf(_classRef, "reqInputFeatures", "I");

  /// from: public int reqInputFeatures
  ///
  /// Flags associated with the input features.  Any combination of
  /// \#INPUT_FEATURE_HARD_KEYBOARD,
  /// \#INPUT_FEATURE_FIVE_WAY_NAV
  int get reqInputFeatures => jniAccessors
      .getField(reference, _id_reqInputFeatures, jni.JniType.intType)
      .integer;

  /// from: public int reqInputFeatures
  ///
  /// Flags associated with the input features.  Any combination of
  /// \#INPUT_FEATURE_HARD_KEYBOARD,
  /// \#INPUT_FEATURE_FIVE_WAY_NAV
  set reqInputFeatures(int value) =>
      jniEnv.SetIntField(reference, _id_reqInputFeatures, value);

  static final _id_reqKeyboardType =
      jniAccessors.getFieldIDOf(_classRef, "reqKeyboardType", "I");

  /// from: public int reqKeyboardType
  ///
  /// Application's input method preference.
  /// One of: android.content.res.Configuration\#KEYBOARD_UNDEFINED,
  /// android.content.res.Configuration\#KEYBOARD_NOKEYS,
  /// android.content.res.Configuration\#KEYBOARD_QWERTY,
  /// android.content.res.Configuration\#KEYBOARD_12KEY
  int get reqKeyboardType => jniAccessors
      .getField(reference, _id_reqKeyboardType, jni.JniType.intType)
      .integer;

  /// from: public int reqKeyboardType
  ///
  /// Application's input method preference.
  /// One of: android.content.res.Configuration\#KEYBOARD_UNDEFINED,
  /// android.content.res.Configuration\#KEYBOARD_NOKEYS,
  /// android.content.res.Configuration\#KEYBOARD_QWERTY,
  /// android.content.res.Configuration\#KEYBOARD_12KEY
  set reqKeyboardType(int value) =>
      jniEnv.SetIntField(reference, _id_reqKeyboardType, value);

  static final _id_reqNavigation =
      jniAccessors.getFieldIDOf(_classRef, "reqNavigation", "I");

  /// from: public int reqNavigation
  ///
  /// A flag indicating whether any keyboard is available.
  /// one of: android.content.res.Configuration\#NAVIGATION_UNDEFINED,
  /// android.content.res.Configuration\#NAVIGATION_DPAD,
  /// android.content.res.Configuration\#NAVIGATION_TRACKBALL,
  /// android.content.res.Configuration\#NAVIGATION_WHEEL
  int get reqNavigation => jniAccessors
      .getField(reference, _id_reqNavigation, jni.JniType.intType)
      .integer;

  /// from: public int reqNavigation
  ///
  /// A flag indicating whether any keyboard is available.
  /// one of: android.content.res.Configuration\#NAVIGATION_UNDEFINED,
  /// android.content.res.Configuration\#NAVIGATION_DPAD,
  /// android.content.res.Configuration\#NAVIGATION_TRACKBALL,
  /// android.content.res.Configuration\#NAVIGATION_WHEEL
  set reqNavigation(int value) =>
      jniEnv.SetIntField(reference, _id_reqNavigation, value);

  static final _id_reqTouchScreen =
      jniAccessors.getFieldIDOf(_classRef, "reqTouchScreen", "I");

  /// from: public int reqTouchScreen
  ///
  /// The kind of touch screen attached to the device.
  /// One of: android.content.res.Configuration\#TOUCHSCREEN_NOTOUCH,
  /// android.content.res.Configuration\#TOUCHSCREEN_STYLUS,
  /// android.content.res.Configuration\#TOUCHSCREEN_FINGER.
  int get reqTouchScreen => jniAccessors
      .getField(reference, _id_reqTouchScreen, jni.JniType.intType)
      .integer;

  /// from: public int reqTouchScreen
  ///
  /// The kind of touch screen attached to the device.
  /// One of: android.content.res.Configuration\#TOUCHSCREEN_NOTOUCH,
  /// android.content.res.Configuration\#TOUCHSCREEN_STYLUS,
  /// android.content.res.Configuration\#TOUCHSCREEN_FINGER.
  set reqTouchScreen(int value) =>
      jniEnv.SetIntField(reference, _id_reqTouchScreen, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ConfigurationInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/pm/ConfigurationInfo;)V");

  /// from: public void <init>(android.content.pm.ConfigurationInfo orig)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ConfigurationInfo.ctor1(ConfigurationInfo orig)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [orig.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(parcel_.Parcel dest, int parcelableFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, parcelableFlags]).check();

  static final _id_getGlEsVersion = jniAccessors.getMethodIDOf(
      _classRef, "getGlEsVersion", "()Ljava/lang/String;");

  /// from: public java.lang.String getGlEsVersion()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method extracts the major and minor version of reqGLEsVersion attribute
  /// and returns it as a string. Say reqGlEsVersion value of 0x00010002 is returned
  /// as 1.2
  ///@return String representation of the reqGlEsVersion attribute
  jni.JniString getGlEsVersion() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getGlEsVersion, jni.JniType.objectType, []).object);
}
