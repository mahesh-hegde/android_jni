// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.Signature
///
/// Opaque, immutable representation of a signing certificate associated with an
/// application package.
///
/// This class name is slightly misleading, since it's not actually a signature.
class Signature extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/Signature");
  Signature.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.pm.Signature> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "([B)V");

  /// from: public void <init>(byte[] signature)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create Signature from an existing raw byte array.
  Signature(jni.JniObject signature)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [signature.reference]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String text)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create Signature from a text representation previously returned by
  /// \#toChars or \#toCharsString(). Signatures are expected to
  /// be a hex-encoded ASCII string.
  ///@param text hex-encoded string representing the signature
  ///@throws IllegalArgumentException when signature is odd-length
  Signature.ctor1(jni.JniString text)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [text.reference]).object);

  static final _id_toChars =
      jniAccessors.getMethodIDOf(_classRef, "toChars", "()[C");

  /// from: public char[] toChars()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Encode the Signature as ASCII text.
  jni.JniObject toChars() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toChars, jni.JniType.objectType, []).object);

  static final _id_toChars1 =
      jniAccessors.getMethodIDOf(_classRef, "toChars", "([C[I)[C");

  /// from: public char[] toChars(char[] existingArray, int[] outLen)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Encode the Signature as ASCII text in to an existing array.
  ///@param existingArray Existing char array or null.
  ///@param outLen Output parameter for the number of characters written in
  /// to the array.
  ///@return Returns either <var>existingArray</var> if it was large enough
  /// to hold the ASCII representation, or a newly created char[] array if
  /// needed.
  jni.JniObject toChars1(jni.JniObject existingArray, jni.JniObject outLen) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_toChars1,
          jni.JniType.objectType,
          [existingArray.reference, outLen.reference]).object);

  static final _id_toCharsString = jniAccessors.getMethodIDOf(
      _classRef, "toCharsString", "()Ljava/lang/String;");

  /// from: public java.lang.String toCharsString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the result of \#toChars() as a String.
  jni.JniString toCharsString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toCharsString, jni.JniType.objectType, []).object);

  static final _id_toByteArray =
      jniAccessors.getMethodIDOf(_classRef, "toByteArray", "()[B");

  /// from: public byte[] toByteArray()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the contents of this signature as a byte array.
  jni.JniObject toByteArray() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toByteArray, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(parcel_.Parcel dest, int parcelableFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, parcelableFlags]).check();
}
