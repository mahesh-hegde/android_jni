// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.pm.PackageStats
///
/// implementation of PackageStats associated with a application package.
///@deprecated this class is an orphan that could never be obtained from a valid
///             public API. If you need package storage statistics use the new
///             StorageStatsManager APIs.
class PackageStats extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/pm/PackageStats");
  PackageStats.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.content.pm.PackageStats> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_cacheSize =
      jniAccessors.getFieldIDOf(_classRef, "cacheSize", "J");

  /// from: public long cacheSize
  ///
  /// Size of cache used by the application. (e.g., /data/data/<app>/cache)
  int get cacheSize => jniAccessors
      .getField(reference, _id_cacheSize, jni.JniType.longType)
      .long;

  /// from: public long cacheSize
  ///
  /// Size of cache used by the application. (e.g., /data/data/<app>/cache)
  set cacheSize(int value) =>
      jniEnv.SetLongField(reference, _id_cacheSize, value);

  static final _id_codeSize =
      jniAccessors.getFieldIDOf(_classRef, "codeSize", "J");

  /// from: public long codeSize
  ///
  /// Size of the code (e.g., APK)
  int get codeSize =>
      jniAccessors.getField(reference, _id_codeSize, jni.JniType.longType).long;

  /// from: public long codeSize
  ///
  /// Size of the code (e.g., APK)
  set codeSize(int value) =>
      jniEnv.SetLongField(reference, _id_codeSize, value);

  static final _id_dataSize =
      jniAccessors.getFieldIDOf(_classRef, "dataSize", "J");

  /// from: public long dataSize
  ///
  /// Size of the internal data size for the application. (e.g.,
  /// /data/data/<app>)
  int get dataSize =>
      jniAccessors.getField(reference, _id_dataSize, jni.JniType.longType).long;

  /// from: public long dataSize
  ///
  /// Size of the internal data size for the application. (e.g.,
  /// /data/data/<app>)
  set dataSize(int value) =>
      jniEnv.SetLongField(reference, _id_dataSize, value);

  static final _id_externalCacheSize =
      jniAccessors.getFieldIDOf(_classRef, "externalCacheSize", "J");

  /// from: public long externalCacheSize
  ///
  /// Size of the external cache used by the application (i.e., on the SD
  /// card). If this is a subdirectory of the data directory, this size will be
  /// subtracted out of the external data size.
  int get externalCacheSize => jniAccessors
      .getField(reference, _id_externalCacheSize, jni.JniType.longType)
      .long;

  /// from: public long externalCacheSize
  ///
  /// Size of the external cache used by the application (i.e., on the SD
  /// card). If this is a subdirectory of the data directory, this size will be
  /// subtracted out of the external data size.
  set externalCacheSize(int value) =>
      jniEnv.SetLongField(reference, _id_externalCacheSize, value);

  static final _id_externalCodeSize =
      jniAccessors.getFieldIDOf(_classRef, "externalCodeSize", "J");

  /// from: public long externalCodeSize
  ///
  /// Size of the secure container on external storage holding the
  /// application's code.
  int get externalCodeSize => jniAccessors
      .getField(reference, _id_externalCodeSize, jni.JniType.longType)
      .long;

  /// from: public long externalCodeSize
  ///
  /// Size of the secure container on external storage holding the
  /// application's code.
  set externalCodeSize(int value) =>
      jniEnv.SetLongField(reference, _id_externalCodeSize, value);

  static final _id_externalDataSize =
      jniAccessors.getFieldIDOf(_classRef, "externalDataSize", "J");

  /// from: public long externalDataSize
  ///
  /// Size of the external data used by the application (e.g.,
  /// <sdcard>/Android/data/<app>)
  int get externalDataSize => jniAccessors
      .getField(reference, _id_externalDataSize, jni.JniType.longType)
      .long;

  /// from: public long externalDataSize
  ///
  /// Size of the external data used by the application (e.g.,
  /// <sdcard>/Android/data/<app>)
  set externalDataSize(int value) =>
      jniEnv.SetLongField(reference, _id_externalDataSize, value);

  static final _id_externalMediaSize =
      jniAccessors.getFieldIDOf(_classRef, "externalMediaSize", "J");

  /// from: public long externalMediaSize
  ///
  /// Size of the external media size used by the application.
  int get externalMediaSize => jniAccessors
      .getField(reference, _id_externalMediaSize, jni.JniType.longType)
      .long;

  /// from: public long externalMediaSize
  ///
  /// Size of the external media size used by the application.
  set externalMediaSize(int value) =>
      jniEnv.SetLongField(reference, _id_externalMediaSize, value);

  static final _id_externalObbSize =
      jniAccessors.getFieldIDOf(_classRef, "externalObbSize", "J");

  /// from: public long externalObbSize
  ///
  /// Size of the package's OBBs placed on external media.
  int get externalObbSize => jniAccessors
      .getField(reference, _id_externalObbSize, jni.JniType.longType)
      .long;

  /// from: public long externalObbSize
  ///
  /// Size of the package's OBBs placed on external media.
  set externalObbSize(int value) =>
      jniEnv.SetLongField(reference, _id_externalObbSize, value);

  static final _id_packageName =
      jniAccessors.getFieldIDOf(_classRef, "packageName", "Ljava/lang/String;");

  /// from: public java.lang.String packageName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Name of the package to which this stats applies.
  jni.JniString get packageName => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_packageName, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String packageName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Name of the package to which this stats applies.
  set packageName(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_packageName, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String pkgName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PackageStats(jni.JniString pkgName)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [pkgName.reference]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PackageStats.ctor1(parcel_.Parcel source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [source.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/pm/PackageStats;)V");

  /// from: public void <init>(android.content.pm.PackageStats pStats)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PackageStats.ctor2(PackageStats pStats)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [pStats.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(parcel_.Parcel dest, int parcelableFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, parcelableFlags]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}
