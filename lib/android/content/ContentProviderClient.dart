// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../database/Cursor.dart" as cursor_;

import "../net/Uri.dart" as uri_;

import "../os/CancellationSignal.dart" as cancellationsignal_;

import "../os/Bundle.dart" as bundle_;

import "ContentValues.dart" as contentvalues_;

import "../os/ParcelFileDescriptor.dart" as parcelfiledescriptor_;

import "res/AssetFileDescriptor.dart" as assetfiledescriptor_;

import "ContentProvider.dart" as contentprovider_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.ContentProviderClient
///
/// The public interface object used to interact with a specific
/// ContentProvider.
///
/// Instances can be obtained by calling
/// ContentResolver\#acquireContentProviderClient or
/// ContentResolver\#acquireUnstableContentProviderClient. Instances must
/// be released using \#close() in order to indicate to the system that
/// the underlying ContentProvider is no longer needed and can be killed
/// to free up resources.
///
/// Note that you should generally create a new ContentProviderClient instance
/// for each thread that will be performing operations. Unlike
/// ContentResolver, the methods here such as \#query and
/// \#openFile are not thread safe -- you must not call \#close()
/// on the ContentProviderClient those calls are made from until you are finished
/// with the data they have returned.
class ContentProviderClient extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/ContentProviderClient");
  ContentProviderClient.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ContentProviderClient()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_query = jniAccessors.getMethodIDOf(_classRef, "query",
      "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;");

  /// from: public android.database.Cursor query(android.net.Uri url, java.lang.String[] projection, java.lang.String selection, java.lang.String[] selectionArgs, java.lang.String sortOrder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#query ContentProvider.query
  ///@param url This value must never be {@code null}.
  ///@param projection This value may be {@code null}.
  ///@param selection This value may be {@code null}.
  ///@param selectionArgs This value may be {@code null}.
  ///@param sortOrder This value may be {@code null}.
  ///@return This value may be {@code null}.
  cursor_.Cursor query(
          uri_.Uri url,
          jni.JniObject projection,
          jni.JniString selection,
          jni.JniObject selectionArgs,
          jni.JniString sortOrder) =>
      cursor_.Cursor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_query, jni.JniType.objectType, [
        url.reference,
        projection.reference,
        selection.reference,
        selectionArgs.reference,
        sortOrder.reference
      ]).object);

  static final _id_query1 = jniAccessors.getMethodIDOf(_classRef, "query",
      "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;");

  /// from: public android.database.Cursor query(android.net.Uri uri, java.lang.String[] projection, java.lang.String selection, java.lang.String[] selectionArgs, java.lang.String sortOrder, android.os.CancellationSignal cancellationSignal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#query ContentProvider.query
  ///@param uri This value must never be {@code null}.
  ///@param projection This value may be {@code null}.
  ///@param selection This value may be {@code null}.
  ///@param selectionArgs This value may be {@code null}.
  ///@param sortOrder This value may be {@code null}.
  ///@param cancellationSignal This value may be {@code null}.
  ///@return This value may be {@code null}.
  cursor_.Cursor query1(
          uri_.Uri uri,
          jni.JniObject projection,
          jni.JniString selection,
          jni.JniObject selectionArgs,
          jni.JniString sortOrder,
          cancellationsignal_.CancellationSignal cancellationSignal) =>
      cursor_.Cursor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_query1, jni.JniType.objectType, [
        uri.reference,
        projection.reference,
        selection.reference,
        selectionArgs.reference,
        sortOrder.reference,
        cancellationSignal.reference
      ]).object);

  static final _id_query2 = jniAccessors.getMethodIDOf(_classRef, "query",
      "(Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/database/Cursor;");

  /// from: public android.database.Cursor query(android.net.Uri uri, java.lang.String[] projection, android.os.Bundle queryArgs, android.os.CancellationSignal cancellationSignal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#query ContentProvider.query
  ///@param uri This value must never be {@code null}.
  ///@param projection This value may be {@code null}.
  ///@param cancellationSignal This value may be {@code null}.
  ///@return This value may be {@code null}.
  cursor_.Cursor query2(
          uri_.Uri uri,
          jni.JniObject projection,
          bundle_.Bundle queryArgs,
          cancellationsignal_.CancellationSignal cancellationSignal) =>
      cursor_.Cursor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_query2, jni.JniType.objectType, [
        uri.reference,
        projection.reference,
        queryArgs.reference,
        cancellationSignal.reference
      ]).object);

  static final _id_getType = jniAccessors.getMethodIDOf(
      _classRef, "getType", "(Landroid/net/Uri;)Ljava/lang/String;");

  /// from: public java.lang.String getType(android.net.Uri url)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#getType ContentProvider.getType
  ///@param url This value must never be {@code null}.
  ///@return This value may be {@code null}.
  jni.JniString getType(uri_.Uri url) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getType, jni.JniType.objectType, [url.reference]).object);

  static final _id_getStreamTypes = jniAccessors.getMethodIDOf(
      _classRef,
      "getStreamTypes",
      "(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;");

  /// from: public java.lang.String[] getStreamTypes(android.net.Uri url, java.lang.String mimeTypeFilter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#getStreamTypes ContentProvider.getStreamTypes
  ///@param url This value must never be {@code null}.
  ///@param mimeTypeFilter This value must never be {@code null}.
  ///@return This value may be {@code null}.
  jni.JniObject getStreamTypes(uri_.Uri url, jni.JniString mimeTypeFilter) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getStreamTypes,
          jni.JniType.objectType,
          [url.reference, mimeTypeFilter.reference]).object);

  static final _id_canonicalize = jniAccessors.getMethodIDOf(
      _classRef, "canonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;");

  /// from: public final android.net.Uri canonicalize(android.net.Uri url)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#canonicalize
  ///@param url This value must never be {@code null}.
  ///@return This value may be {@code null}.
  uri_.Uri canonicalize(uri_.Uri url) =>
      uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_canonicalize, jni.JniType.objectType, [url.reference]).object);

  static final _id_uncanonicalize = jniAccessors.getMethodIDOf(
      _classRef, "uncanonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;");

  /// from: public final android.net.Uri uncanonicalize(android.net.Uri url)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#uncanonicalize
  ///@param url This value must never be {@code null}.
  ///@return This value may be {@code null}.
  uri_.Uri uncanonicalize(uri_.Uri url) =>
      uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_uncanonicalize, jni.JniType.objectType, [url.reference]).object);

  static final _id_refresh = jniAccessors.getMethodIDOf(_classRef, "refresh",
      "(Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Z");

  /// from: public boolean refresh(android.net.Uri url, android.os.Bundle args, android.os.CancellationSignal cancellationSignal)
  ///
  /// See ContentProvider\#refresh
  ///@param args This value may be {@code null}.
  ///@param cancellationSignal This value may be {@code null}.
  bool refresh(uri_.Uri url, bundle_.Bundle args,
          cancellationsignal_.CancellationSignal cancellationSignal) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_refresh, jni.JniType.booleanType, [
        url.reference,
        args.reference,
        cancellationSignal.reference
      ]).boolean;

  static final _id_insert = jniAccessors.getMethodIDOf(_classRef, "insert",
      "(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;");

  /// from: public android.net.Uri insert(android.net.Uri url, android.content.ContentValues initialValues)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#insert ContentProvider.insert
  ///@param url This value must never be {@code null}.
  ///@param initialValues This value may be {@code null}.
  ///@return This value may be {@code null}.
  uri_.Uri insert(uri_.Uri url, contentvalues_.ContentValues initialValues) =>
      uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_insert,
          jni.JniType.objectType,
          [url.reference, initialValues.reference]).object);

  static final _id_bulkInsert = jniAccessors.getMethodIDOf(_classRef,
      "bulkInsert", "(Landroid/net/Uri;[Landroid/content/ContentValues;)I");

  /// from: public int bulkInsert(android.net.Uri url, android.content.ContentValues[] initialValues)
  ///
  /// See ContentProvider\#bulkInsert ContentProvider.bulkInsert
  ///@param url This value must never be {@code null}.
  ///@param initialValues This value must never be {@code null}.
  int bulkInsert(uri_.Uri url, jni.JniObject initialValues) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_bulkInsert,
          jni.JniType.intType,
          [url.reference, initialValues.reference]).integer;

  static final _id_delete1 = jniAccessors.getMethodIDOf(_classRef, "delete",
      "(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I");

  /// from: public int delete(android.net.Uri url, java.lang.String selection, java.lang.String[] selectionArgs)
  ///
  /// See ContentProvider\#delete ContentProvider.delete
  ///@param url This value must never be {@code null}.
  ///@param selection This value may be {@code null}.
  ///@param selectionArgs This value may be {@code null}.
  int delete1(
          uri_.Uri url, jni.JniString selection, jni.JniObject selectionArgs) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_delete1, jni.JniType.intType, [
        url.reference,
        selection.reference,
        selectionArgs.reference
      ]).integer;

  static final _id_update = jniAccessors.getMethodIDOf(_classRef, "update",
      "(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I");

  /// from: public int update(android.net.Uri url, android.content.ContentValues values, java.lang.String selection, java.lang.String[] selectionArgs)
  ///
  /// See ContentProvider\#update ContentProvider.update
  ///@param url This value must never be {@code null}.
  ///@param values This value may be {@code null}.
  ///@param selection This value may be {@code null}.
  ///@param selectionArgs This value may be {@code null}.
  int update(uri_.Uri url, contentvalues_.ContentValues values,
          jni.JniString selection, jni.JniObject selectionArgs) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_update, jni.JniType.intType, [
        url.reference,
        values.reference,
        selection.reference,
        selectionArgs.reference
      ]).integer;

  static final _id_openFile = jniAccessors.getMethodIDOf(_classRef, "openFile",
      "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;");

  /// from: public android.os.ParcelFileDescriptor openFile(android.net.Uri url, java.lang.String mode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#openFile ContentProvider.openFile.  Note that
  /// this _does not_
  /// take care of non-content: URIs such as file:.  It is strongly recommended
  /// you use the ContentResolver\#openFileDescriptor ContentResolver.openFileDescriptor API instead.
  ///@param url This value must never be {@code null}.
  ///@param mode This value must never be {@code null}.
  ///@return This value may be {@code null}.
  parcelfiledescriptor_.ParcelFileDescriptor openFile(
          uri_.Uri url, jni.JniString mode) =>
      parcelfiledescriptor_.ParcelFileDescriptor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_openFile, jni.JniType.objectType,
              [url.reference, mode.reference]).object);

  static final _id_openFile1 = jniAccessors.getMethodIDOf(_classRef, "openFile",
      "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;");

  /// from: public android.os.ParcelFileDescriptor openFile(android.net.Uri url, java.lang.String mode, android.os.CancellationSignal signal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#openFile ContentProvider.openFile.  Note that
  /// this _does not_
  /// take care of non-content: URIs such as file:.  It is strongly recommended
  /// you use the ContentResolver\#openFileDescriptor ContentResolver.openFileDescriptor API instead.
  ///@param url This value must never be {@code null}.
  ///@param mode This value must never be {@code null}.
  ///@param signal This value may be {@code null}.
  ///@return This value may be {@code null}.
  parcelfiledescriptor_.ParcelFileDescriptor openFile1(uri_.Uri url,
          jni.JniString mode, cancellationsignal_.CancellationSignal signal) =>
      parcelfiledescriptor_.ParcelFileDescriptor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_openFile1, jni.JniType.objectType,
              [url.reference, mode.reference, signal.reference]).object);

  static final _id_openAssetFile = jniAccessors.getMethodIDOf(
      _classRef,
      "openAssetFile",
      "(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;");

  /// from: public android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri url, java.lang.String mode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#openAssetFile ContentProvider.openAssetFile.
  /// Note that this _does not_
  /// take care of non-content: URIs such as file:.  It is strongly recommended
  /// you use the ContentResolver\#openAssetFileDescriptor ContentResolver.openAssetFileDescriptor API instead.
  ///@param url This value must never be {@code null}.
  ///@param mode This value must never be {@code null}.
  ///@return This value may be {@code null}.
  assetfiledescriptor_.AssetFileDescriptor openAssetFile(
          uri_.Uri url, jni.JniString mode) =>
      assetfiledescriptor_.AssetFileDescriptor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_openAssetFile,
              jni.JniType.objectType, [url.reference, mode.reference]).object);

  static final _id_openAssetFile1 = jniAccessors.getMethodIDOf(
      _classRef,
      "openAssetFile",
      "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;");

  /// from: public android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri url, java.lang.String mode, android.os.CancellationSignal signal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#openAssetFile ContentProvider.openAssetFile.
  /// Note that this _does not_
  /// take care of non-content: URIs such as file:.  It is strongly recommended
  /// you use the ContentResolver\#openAssetFileDescriptor ContentResolver.openAssetFileDescriptor API instead.
  ///@param url This value must never be {@code null}.
  ///@param mode This value must never be {@code null}.
  ///@param signal This value may be {@code null}.
  ///@return This value may be {@code null}.
  assetfiledescriptor_.AssetFileDescriptor openAssetFile1(uri_.Uri url,
          jni.JniString mode, cancellationsignal_.CancellationSignal signal) =>
      assetfiledescriptor_.AssetFileDescriptor.fromRef(jniAccessors
          .callMethodWithArgs(
              reference,
              _id_openAssetFile1,
              jni.JniType.objectType,
              [url.reference, mode.reference, signal.reference]).object);

  static final _id_openTypedAssetFileDescriptor = jniAccessors.getMethodIDOf(
      _classRef,
      "openTypedAssetFileDescriptor",
      "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;");

  /// from: public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri uri, java.lang.String mimeType, android.os.Bundle opts)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#openTypedAssetFile ContentProvider.openTypedAssetFile
  ///@param uri This value must never be {@code null}.
  ///@param mimeType This value must never be {@code null}.
  ///@param opts This value may be {@code null}.
  ///@return This value may be {@code null}.
  assetfiledescriptor_.AssetFileDescriptor openTypedAssetFileDescriptor(
          uri_.Uri uri, jni.JniString mimeType, bundle_.Bundle opts) =>
      assetfiledescriptor_.AssetFileDescriptor.fromRef(jniAccessors
          .callMethodWithArgs(
              reference,
              _id_openTypedAssetFileDescriptor,
              jni.JniType.objectType,
              [uri.reference, mimeType.reference, opts.reference]).object);

  static final _id_openTypedAssetFileDescriptor1 = jniAccessors.getMethodIDOf(
      _classRef,
      "openTypedAssetFileDescriptor",
      "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;");

  /// from: public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri uri, java.lang.String mimeType, android.os.Bundle opts, android.os.CancellationSignal signal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#openTypedAssetFile ContentProvider.openTypedAssetFile
  ///@param uri This value must never be {@code null}.
  ///@param mimeType This value must never be {@code null}.
  ///@param opts This value may be {@code null}.
  ///@param signal This value may be {@code null}.
  ///@return This value may be {@code null}.
  assetfiledescriptor_.AssetFileDescriptor openTypedAssetFileDescriptor1(
          uri_.Uri uri,
          jni.JniString mimeType,
          bundle_.Bundle opts,
          cancellationsignal_.CancellationSignal signal) =>
      assetfiledescriptor_.AssetFileDescriptor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_openTypedAssetFileDescriptor1,
              jni.JniType.objectType, [
        uri.reference,
        mimeType.reference,
        opts.reference,
        signal.reference
      ]).object);

  static final _id_applyBatch = jniAccessors.getMethodIDOf(
      _classRef,
      "applyBatch",
      "(Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;");

  /// from: public android.content.ContentProviderResult[] applyBatch(java.util.ArrayList<android.content.ContentProviderOperation> operations)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#applyBatch ContentProvider.applyBatch
  ///@param operations This value must never be {@code null}.
  ///@return This value will never be {@code null}.
  jni.JniObject applyBatch(jni.JniObject operations) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_applyBatch,
          jni.JniType.objectType,
          [operations.reference]).object);

  static final _id_call = jniAccessors.getMethodIDOf(_classRef, "call",
      "(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;");

  /// from: public android.os.Bundle call(java.lang.String method, java.lang.String arg, android.os.Bundle extras)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See ContentProvider\#call(String, String, Bundle)
  ///@param method This value must never be {@code null}.
  ///@param arg This value may be {@code null}.
  ///@param extras This value may be {@code null}.
  ///@return This value may be {@code null}.
  bundle_.Bundle call(
          jni.JniString method, jni.JniString arg, bundle_.Bundle extras) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_call,
          jni.JniType.objectType,
          [method.reference, arg.reference, extras.reference]).object);

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  ///
  /// Closes this client connection, indicating to the system that the
  /// underlying ContentProvider is no longer needed.
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_release =
      jniAccessors.getMethodIDOf(_classRef, "release", "()Z");

  /// from: public boolean release()
  ///
  /// @deprecated replaced by \#close().
  bool release() => jniAccessors.callMethodWithArgs(
      reference, _id_release, jni.JniType.booleanType, []).boolean;

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();

  static final _id_getLocalContentProvider = jniAccessors.getMethodIDOf(
      _classRef,
      "getLocalContentProvider",
      "()Landroid/content/ContentProvider;");

  /// from: public android.content.ContentProvider getLocalContentProvider()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a reference to the ContentProvider that is associated with this
  /// client. If the ContentProvider is running in a different process then
  /// null will be returned. This can be used if you know you are running in the same
  /// process as a provider, and want to get direct access to its implementation details.
  ///@return If the associated ContentProvider is local, returns it.
  /// Otherwise returns null.
  contentprovider_.ContentProvider getLocalContentProvider() =>
      contentprovider_.ContentProvider.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getLocalContentProvider,
          jni.JniType.objectType, []).object);
}
