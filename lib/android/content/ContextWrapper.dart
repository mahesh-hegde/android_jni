// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Context.dart" as context_;

import "res/AssetManager.dart" as assetmanager_;

import "res/Resources.dart" as resources_;

import "pm/PackageManager.dart" as packagemanager_;

import "ContentResolver.dart" as contentresolver_;

import "../os/Looper.dart" as looper_;

import "pm/ApplicationInfo.dart" as applicationinfo_;

import "SharedPreferences.dart" as sharedpreferences_;

import "../database/sqlite/SQLiteDatabase.dart" as sqlitedatabase_;

import "../database/DatabaseErrorHandler.dart" as databaseerrorhandler_;

import "../graphics/drawable/Drawable.dart" as drawable_;

import "../graphics/Bitmap.dart" as bitmap_;

import "Intent.dart" as intent_;

import "../os/Bundle.dart" as bundle_;

import "IntentSender.dart" as intentsender_;

import "BroadcastReceiver.dart" as broadcastreceiver_;

import "../os/Handler.dart" as handler_;

import "../os/UserHandle.dart" as userhandle_;

import "IntentFilter.dart" as intentfilter_;

import "ComponentName.dart" as componentname_;

import "ServiceConnection.dart" as serviceconnection_;

import "../net/Uri.dart" as uri_;

import "res/Configuration.dart" as configuration_;

import "../view/Display.dart" as display_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.ContextWrapper
///
/// Proxying implementation of Context that simply delegates all of its calls to
/// another Context.  Can be subclassed to modify behavior without changing
/// the original Context.
class ContextWrapper extends context_.Context {
  static final _classRef =
      jniAccessors.getClassOf("android/content/ContextWrapper");
  ContextWrapper.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context base)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ContextWrapper.ctor1(context_.Context base)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [base.reference]).object);

  static final _id_attachBaseContext = jniAccessors.getMethodIDOf(
      _classRef, "attachBaseContext", "(Landroid/content/Context;)V");

  /// from: protected void attachBaseContext(android.content.Context base)
  ///
  /// Set the base context for this ContextWrapper.  All calls will then be
  /// delegated to the base context.  Throws
  /// IllegalStateException if a base context has already been set.
  ///@param base The new base context for this wrapper.
  void attachBaseContext(context_.Context base) =>
      jniAccessors.callMethodWithArgs(reference, _id_attachBaseContext,
          jni.JniType.voidType, [base.reference]).check();

  static final _id_getBaseContext = jniAccessors.getMethodIDOf(
      _classRef, "getBaseContext", "()Landroid/content/Context;");

  /// from: public android.content.Context getBaseContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the base context as set by the constructor or setBaseContext
  context_.Context getBaseContext() =>
      context_.Context.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getBaseContext, jni.JniType.objectType, []).object);

  static final _id_getAssets = jniAccessors.getMethodIDOf(
      _classRef, "getAssets", "()Landroid/content/res/AssetManager;");

  /// from: public android.content.res.AssetManager getAssets()
  /// The returned object must be deleted after use, by calling the `delete` method.
  assetmanager_.AssetManager getAssets() =>
      assetmanager_.AssetManager.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAssets, jni.JniType.objectType, []).object);

  static final _id_getResources = jniAccessors.getMethodIDOf(
      _classRef, "getResources", "()Landroid/content/res/Resources;");

  /// from: public android.content.res.Resources getResources()
  /// The returned object must be deleted after use, by calling the `delete` method.
  resources_.Resources getResources() =>
      resources_.Resources.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getResources, jni.JniType.objectType, []).object);

  static final _id_getPackageManager = jniAccessors.getMethodIDOf(
      _classRef, "getPackageManager", "()Landroid/content/pm/PackageManager;");

  /// from: public android.content.pm.PackageManager getPackageManager()
  /// The returned object must be deleted after use, by calling the `delete` method.
  packagemanager_.PackageManager getPackageManager() =>
      packagemanager_.PackageManager.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPackageManager, jni.JniType.objectType, []).object);

  static final _id_getContentResolver = jniAccessors.getMethodIDOf(
      _classRef, "getContentResolver", "()Landroid/content/ContentResolver;");

  /// from: public android.content.ContentResolver getContentResolver()
  /// The returned object must be deleted after use, by calling the `delete` method.
  contentresolver_.ContentResolver getContentResolver() =>
      contentresolver_.ContentResolver.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getContentResolver,
          jni.JniType.objectType, []).object);

  static final _id_getMainLooper = jniAccessors.getMethodIDOf(
      _classRef, "getMainLooper", "()Landroid/os/Looper;");

  /// from: public android.os.Looper getMainLooper()
  /// The returned object must be deleted after use, by calling the `delete` method.
  looper_.Looper getMainLooper() =>
      looper_.Looper.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMainLooper, jni.JniType.objectType, []).object);

  static final _id_getMainExecutor = jniAccessors.getMethodIDOf(
      _classRef, "getMainExecutor", "()Ljava/util/concurrent/Executor;");

  /// from: public java.util.concurrent.Executor getMainExecutor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getMainExecutor() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMainExecutor, jni.JniType.objectType, []).object);

  static final _id_getApplicationContext = jniAccessors.getMethodIDOf(
      _classRef, "getApplicationContext", "()Landroid/content/Context;");

  /// from: public android.content.Context getApplicationContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  context_.Context getApplicationContext() =>
      context_.Context.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getApplicationContext, jni.JniType.objectType, []).object);

  static final _id_setTheme =
      jniAccessors.getMethodIDOf(_classRef, "setTheme", "(I)V");

  /// from: public void setTheme(int resid)
  void setTheme(int resid) => jniAccessors.callMethodWithArgs(
      reference, _id_setTheme, jni.JniType.voidType, [resid]).check();

  static final _id_getTheme = jniAccessors.getMethodIDOf(
      _classRef, "getTheme", "()Landroid/content/res/Resources\$Theme;");

  /// from: public android.content.res.Resources.Theme getTheme()
  /// The returned object must be deleted after use, by calling the `delete` method.
  resources_.Resources_Theme getTheme() =>
      resources_.Resources_Theme.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTheme, jni.JniType.objectType, []).object);

  static final _id_getClassLoader = jniAccessors.getMethodIDOf(
      _classRef, "getClassLoader", "()Ljava/lang/ClassLoader;");

  /// from: public java.lang.ClassLoader getClassLoader()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getClassLoader() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getClassLoader, jni.JniType.objectType, []).object);

  static final _id_getPackageName = jniAccessors.getMethodIDOf(
      _classRef, "getPackageName", "()Ljava/lang/String;");

  /// from: public java.lang.String getPackageName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getPackageName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPackageName, jni.JniType.objectType, []).object);

  static final _id_getApplicationInfo = jniAccessors.getMethodIDOf(_classRef,
      "getApplicationInfo", "()Landroid/content/pm/ApplicationInfo;");

  /// from: public android.content.pm.ApplicationInfo getApplicationInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  applicationinfo_.ApplicationInfo getApplicationInfo() =>
      applicationinfo_.ApplicationInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getApplicationInfo,
          jni.JniType.objectType, []).object);

  static final _id_getPackageResourcePath = jniAccessors.getMethodIDOf(
      _classRef, "getPackageResourcePath", "()Ljava/lang/String;");

  /// from: public java.lang.String getPackageResourcePath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getPackageResourcePath() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getPackageResourcePath, jni.JniType.objectType, []).object);

  static final _id_getPackageCodePath = jniAccessors.getMethodIDOf(
      _classRef, "getPackageCodePath", "()Ljava/lang/String;");

  /// from: public java.lang.String getPackageCodePath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getPackageCodePath() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getPackageCodePath, jni.JniType.objectType, []).object);

  static final _id_getSharedPreferences = jniAccessors.getMethodIDOf(
      _classRef,
      "getSharedPreferences",
      "(Ljava/lang/String;I)Landroid/content/SharedPreferences;");

  /// from: public android.content.SharedPreferences getSharedPreferences(java.lang.String name, int mode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  sharedpreferences_.SharedPreferences getSharedPreferences(
          jni.JniString name, int mode) =>
      sharedpreferences_.SharedPreferences.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getSharedPreferences,
              jni.JniType.objectType, [name.reference, mode]).object);

  static final _id_moveSharedPreferencesFrom = jniAccessors.getMethodIDOf(
      _classRef,
      "moveSharedPreferencesFrom",
      "(Landroid/content/Context;Ljava/lang/String;)Z");

  /// from: public boolean moveSharedPreferencesFrom(android.content.Context sourceContext, java.lang.String name)
  bool moveSharedPreferencesFrom(
          context_.Context sourceContext, jni.JniString name) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_moveSharedPreferencesFrom,
          jni.JniType.booleanType,
          [sourceContext.reference, name.reference]).boolean;

  static final _id_deleteSharedPreferences = jniAccessors.getMethodIDOf(
      _classRef, "deleteSharedPreferences", "(Ljava/lang/String;)Z");

  /// from: public boolean deleteSharedPreferences(java.lang.String name)
  bool deleteSharedPreferences(jni.JniString name) =>
      jniAccessors.callMethodWithArgs(reference, _id_deleteSharedPreferences,
          jni.JniType.booleanType, [name.reference]).boolean;

  static final _id_openFileInput = jniAccessors.getMethodIDOf(_classRef,
      "openFileInput", "(Ljava/lang/String;)Ljava/io/FileInputStream;");

  /// from: public java.io.FileInputStream openFileInput(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject openFileInput(jni.JniString name) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_openFileInput, jni.JniType.objectType, [name.reference]).object);

  static final _id_openFileOutput = jniAccessors.getMethodIDOf(_classRef,
      "openFileOutput", "(Ljava/lang/String;I)Ljava/io/FileOutputStream;");

  /// from: public java.io.FileOutputStream openFileOutput(java.lang.String name, int mode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject openFileOutput(jni.JniString name, int mode) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_openFileOutput,
          jni.JniType.objectType,
          [name.reference, mode]).object);

  static final _id_deleteFile = jniAccessors.getMethodIDOf(
      _classRef, "deleteFile", "(Ljava/lang/String;)Z");

  /// from: public boolean deleteFile(java.lang.String name)
  bool deleteFile(jni.JniString name) => jniAccessors.callMethodWithArgs(
      reference,
      _id_deleteFile,
      jni.JniType.booleanType,
      [name.reference]).boolean;

  static final _id_getFileStreamPath = jniAccessors.getMethodIDOf(
      _classRef, "getFileStreamPath", "(Ljava/lang/String;)Ljava/io/File;");

  /// from: public java.io.File getFileStreamPath(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getFileStreamPath(jni.JniString name) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getFileStreamPath,
          jni.JniType.objectType,
          [name.reference]).object);

  static final _id_fileList = jniAccessors.getMethodIDOf(
      _classRef, "fileList", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] fileList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject fileList() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_fileList, jni.JniType.objectType, []).object);

  static final _id_getDataDir =
      jniAccessors.getMethodIDOf(_classRef, "getDataDir", "()Ljava/io/File;");

  /// from: public java.io.File getDataDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getDataDir() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDataDir, jni.JniType.objectType, []).object);

  static final _id_getFilesDir =
      jniAccessors.getMethodIDOf(_classRef, "getFilesDir", "()Ljava/io/File;");

  /// from: public java.io.File getFilesDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getFilesDir() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFilesDir, jni.JniType.objectType, []).object);

  static final _id_getNoBackupFilesDir = jniAccessors.getMethodIDOf(
      _classRef, "getNoBackupFilesDir", "()Ljava/io/File;");

  /// from: public java.io.File getNoBackupFilesDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getNoBackupFilesDir() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getNoBackupFilesDir, jni.JniType.objectType, []).object);

  static final _id_getExternalFilesDir = jniAccessors.getMethodIDOf(
      _classRef, "getExternalFilesDir", "(Ljava/lang/String;)Ljava/io/File;");

  /// from: public java.io.File getExternalFilesDir(java.lang.String type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getExternalFilesDir(jni.JniString type) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getExternalFilesDir,
          jni.JniType.objectType,
          [type.reference]).object);

  static final _id_getExternalFilesDirs = jniAccessors.getMethodIDOf(
      _classRef, "getExternalFilesDirs", "(Ljava/lang/String;)[Ljava/io/File;");

  /// from: public java.io.File[] getExternalFilesDirs(java.lang.String type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getExternalFilesDirs(jni.JniString type) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getExternalFilesDirs,
          jni.JniType.objectType,
          [type.reference]).object);

  static final _id_getObbDir =
      jniAccessors.getMethodIDOf(_classRef, "getObbDir", "()Ljava/io/File;");

  /// from: public java.io.File getObbDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getObbDir() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getObbDir, jni.JniType.objectType, []).object);

  static final _id_getObbDirs =
      jniAccessors.getMethodIDOf(_classRef, "getObbDirs", "()[Ljava/io/File;");

  /// from: public java.io.File[] getObbDirs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getObbDirs() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getObbDirs, jni.JniType.objectType, []).object);

  static final _id_getCacheDir =
      jniAccessors.getMethodIDOf(_classRef, "getCacheDir", "()Ljava/io/File;");

  /// from: public java.io.File getCacheDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getCacheDir() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCacheDir, jni.JniType.objectType, []).object);

  static final _id_getCodeCacheDir = jniAccessors.getMethodIDOf(
      _classRef, "getCodeCacheDir", "()Ljava/io/File;");

  /// from: public java.io.File getCodeCacheDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getCodeCacheDir() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCodeCacheDir, jni.JniType.objectType, []).object);

  static final _id_getExternalCacheDir = jniAccessors.getMethodIDOf(
      _classRef, "getExternalCacheDir", "()Ljava/io/File;");

  /// from: public java.io.File getExternalCacheDir()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getExternalCacheDir() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getExternalCacheDir, jni.JniType.objectType, []).object);

  static final _id_getExternalCacheDirs = jniAccessors.getMethodIDOf(
      _classRef, "getExternalCacheDirs", "()[Ljava/io/File;");

  /// from: public java.io.File[] getExternalCacheDirs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getExternalCacheDirs() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getExternalCacheDirs, jni.JniType.objectType, []).object);

  static final _id_getExternalMediaDirs = jniAccessors.getMethodIDOf(
      _classRef, "getExternalMediaDirs", "()[Ljava/io/File;");

  /// from: public java.io.File[] getExternalMediaDirs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getExternalMediaDirs() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getExternalMediaDirs, jni.JniType.objectType, []).object);

  static final _id_getDir = jniAccessors.getMethodIDOf(
      _classRef, "getDir", "(Ljava/lang/String;I)Ljava/io/File;");

  /// from: public java.io.File getDir(java.lang.String name, int mode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getDir(jni.JniString name, int mode) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getDir, jni.JniType.objectType, [name.reference, mode]).object);

  static final _id_openOrCreateDatabase = jniAccessors.getMethodIDOf(
      _classRef,
      "openOrCreateDatabase",
      "(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase\$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;");

  /// from: public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String name, int mode, android.database.sqlite.SQLiteDatabase.CursorFactory factory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  sqlitedatabase_.SQLiteDatabase openOrCreateDatabase(jni.JniString name,
          int mode, sqlitedatabase_.SQLiteDatabase_CursorFactory factory0) =>
      sqlitedatabase_.SQLiteDatabase.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_openOrCreateDatabase,
          jni.JniType.objectType,
          [name.reference, mode, factory0.reference]).object);

  static final _id_openOrCreateDatabase1 = jniAccessors.getMethodIDOf(
      _classRef,
      "openOrCreateDatabase",
      "(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase\$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;");

  /// from: public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String name, int mode, android.database.sqlite.SQLiteDatabase.CursorFactory factory, android.database.DatabaseErrorHandler errorHandler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  sqlitedatabase_.SQLiteDatabase openOrCreateDatabase1(
          jni.JniString name,
          int mode,
          sqlitedatabase_.SQLiteDatabase_CursorFactory factory0,
          databaseerrorhandler_.DatabaseErrorHandler errorHandler) =>
      sqlitedatabase_.SQLiteDatabase.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_openOrCreateDatabase1, jni.JniType.objectType, [
        name.reference,
        mode,
        factory0.reference,
        errorHandler.reference
      ]).object);

  static final _id_moveDatabaseFrom = jniAccessors.getMethodIDOf(_classRef,
      "moveDatabaseFrom", "(Landroid/content/Context;Ljava/lang/String;)Z");

  /// from: public boolean moveDatabaseFrom(android.content.Context sourceContext, java.lang.String name)
  bool moveDatabaseFrom(context_.Context sourceContext, jni.JniString name) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_moveDatabaseFrom,
          jni.JniType.booleanType,
          [sourceContext.reference, name.reference]).boolean;

  static final _id_deleteDatabase = jniAccessors.getMethodIDOf(
      _classRef, "deleteDatabase", "(Ljava/lang/String;)Z");

  /// from: public boolean deleteDatabase(java.lang.String name)
  bool deleteDatabase(jni.JniString name) => jniAccessors.callMethodWithArgs(
      reference,
      _id_deleteDatabase,
      jni.JniType.booleanType,
      [name.reference]).boolean;

  static final _id_getDatabasePath = jniAccessors.getMethodIDOf(
      _classRef, "getDatabasePath", "(Ljava/lang/String;)Ljava/io/File;");

  /// from: public java.io.File getDatabasePath(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getDatabasePath(jni.JniString name) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDatabasePath,
          jni.JniType.objectType,
          [name.reference]).object);

  static final _id_databaseList = jniAccessors.getMethodIDOf(
      _classRef, "databaseList", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] databaseList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject databaseList() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_databaseList, jni.JniType.objectType, []).object);

  static final _id_getWallpaper = jniAccessors.getMethodIDOf(
      _classRef, "getWallpaper", "()Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getWallpaper()
  /// The returned object must be deleted after use, by calling the `delete` method.
  drawable_.Drawable getWallpaper() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getWallpaper, jni.JniType.objectType, []).object);

  static final _id_peekWallpaper = jniAccessors.getMethodIDOf(
      _classRef, "peekWallpaper", "()Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable peekWallpaper()
  /// The returned object must be deleted after use, by calling the `delete` method.
  drawable_.Drawable peekWallpaper() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_peekWallpaper, jni.JniType.objectType, []).object);

  static final _id_getWallpaperDesiredMinimumWidth = jniAccessors.getMethodIDOf(
      _classRef, "getWallpaperDesiredMinimumWidth", "()I");

  /// from: public int getWallpaperDesiredMinimumWidth()
  int getWallpaperDesiredMinimumWidth() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getWallpaperDesiredMinimumWidth,
      jni.JniType.intType, []).integer;

  static final _id_getWallpaperDesiredMinimumHeight = jniAccessors
      .getMethodIDOf(_classRef, "getWallpaperDesiredMinimumHeight", "()I");

  /// from: public int getWallpaperDesiredMinimumHeight()
  int getWallpaperDesiredMinimumHeight() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getWallpaperDesiredMinimumHeight,
      jni.JniType.intType, []).integer;

  static final _id_setWallpaper = jniAccessors.getMethodIDOf(
      _classRef, "setWallpaper", "(Landroid/graphics/Bitmap;)V");

  /// from: public void setWallpaper(android.graphics.Bitmap bitmap)
  void setWallpaper(bitmap_.Bitmap bitmap) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setWallpaper,
      jni.JniType.voidType,
      [bitmap.reference]).check();

  static final _id_setWallpaper1 = jniAccessors.getMethodIDOf(
      _classRef, "setWallpaper", "(Ljava/io/InputStream;)V");

  /// from: public void setWallpaper(java.io.InputStream data)
  void setWallpaper1(jni.JniObject data) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setWallpaper1,
      jni.JniType.voidType,
      [data.reference]).check();

  static final _id_clearWallpaper =
      jniAccessors.getMethodIDOf(_classRef, "clearWallpaper", "()V");

  /// from: public void clearWallpaper()
  void clearWallpaper() => jniAccessors.callMethodWithArgs(
      reference, _id_clearWallpaper, jni.JniType.voidType, []).check();

  static final _id_startActivity = jniAccessors.getMethodIDOf(
      _classRef, "startActivity", "(Landroid/content/Intent;)V");

  /// from: public void startActivity(android.content.Intent intent)
  void startActivity(intent_.Intent intent) => jniAccessors.callMethodWithArgs(
      reference,
      _id_startActivity,
      jni.JniType.voidType,
      [intent.reference]).check();

  static final _id_startActivity1 = jniAccessors.getMethodIDOf(_classRef,
      "startActivity", "(Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public void startActivity(android.content.Intent intent, android.os.Bundle options)
  void startActivity1(intent_.Intent intent, bundle_.Bundle options) =>
      jniAccessors.callMethodWithArgs(reference, _id_startActivity1,
          jni.JniType.voidType, [intent.reference, options.reference]).check();

  static final _id_startActivities = jniAccessors.getMethodIDOf(
      _classRef, "startActivities", "([Landroid/content/Intent;)V");

  /// from: public void startActivities(android.content.Intent[] intents)
  void startActivities(jni.JniObject intents) =>
      jniAccessors.callMethodWithArgs(reference, _id_startActivities,
          jni.JniType.voidType, [intents.reference]).check();

  static final _id_startActivities1 = jniAccessors.getMethodIDOf(_classRef,
      "startActivities", "([Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: public void startActivities(android.content.Intent[] intents, android.os.Bundle options)
  void startActivities1(jni.JniObject intents, bundle_.Bundle options) =>
      jniAccessors.callMethodWithArgs(reference, _id_startActivities1,
          jni.JniType.voidType, [intents.reference, options.reference]).check();

  static final _id_startIntentSender = jniAccessors.getMethodIDOf(
      _classRef,
      "startIntentSender",
      "(Landroid/content/IntentSender;Landroid/content/Intent;III)V");

  /// from: public void startIntentSender(android.content.IntentSender intent, android.content.Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)
  void startIntentSender(
          intentsender_.IntentSender intent,
          intent_.Intent fillInIntent,
          int flagsMask,
          int flagsValues,
          int extraFlags) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_startIntentSender, jni.JniType.voidType, [
        intent.reference,
        fillInIntent.reference,
        flagsMask,
        flagsValues,
        extraFlags
      ]).check();

  static final _id_startIntentSender1 = jniAccessors.getMethodIDOf(
      _classRef,
      "startIntentSender",
      "(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V");

  /// from: public void startIntentSender(android.content.IntentSender intent, android.content.Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, android.os.Bundle options)
  void startIntentSender1(
          intentsender_.IntentSender intent,
          intent_.Intent fillInIntent,
          int flagsMask,
          int flagsValues,
          int extraFlags,
          bundle_.Bundle options) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_startIntentSender1, jni.JniType.voidType, [
        intent.reference,
        fillInIntent.reference,
        flagsMask,
        flagsValues,
        extraFlags,
        options.reference
      ]).check();

  static final _id_sendBroadcast = jniAccessors.getMethodIDOf(
      _classRef, "sendBroadcast", "(Landroid/content/Intent;)V");

  /// from: public void sendBroadcast(android.content.Intent intent)
  void sendBroadcast(intent_.Intent intent) => jniAccessors.callMethodWithArgs(
      reference,
      _id_sendBroadcast,
      jni.JniType.voidType,
      [intent.reference]).check();

  static final _id_sendBroadcast1 = jniAccessors.getMethodIDOf(_classRef,
      "sendBroadcast", "(Landroid/content/Intent;Ljava/lang/String;)V");

  /// from: public void sendBroadcast(android.content.Intent intent, java.lang.String receiverPermission)
  void sendBroadcast1(
          intent_.Intent intent, jni.JniString receiverPermission) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_sendBroadcast1,
          jni.JniType.voidType,
          [intent.reference, receiverPermission.reference]).check();

  static final _id_sendOrderedBroadcast = jniAccessors.getMethodIDOf(_classRef,
      "sendOrderedBroadcast", "(Landroid/content/Intent;Ljava/lang/String;)V");

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String receiverPermission)
  void sendOrderedBroadcast(
          intent_.Intent intent, jni.JniString receiverPermission) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_sendOrderedBroadcast,
          jni.JniType.voidType,
          [intent.reference, receiverPermission.reference]).check();

  static final _id_sendOrderedBroadcast1 = jniAccessors.getMethodIDOf(
      _classRef,
      "sendOrderedBroadcast",
      "(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String receiverPermission, android.content.BroadcastReceiver resultReceiver, android.os.Handler scheduler, int initialCode, java.lang.String initialData, android.os.Bundle initialExtras)
  void sendOrderedBroadcast1(
          intent_.Intent intent,
          jni.JniString receiverPermission,
          broadcastreceiver_.BroadcastReceiver resultReceiver,
          handler_.Handler scheduler,
          int initialCode,
          jni.JniString initialData,
          bundle_.Bundle initialExtras) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_sendOrderedBroadcast1, jni.JniType.voidType, [
        intent.reference,
        receiverPermission.reference,
        resultReceiver.reference,
        scheduler.reference,
        initialCode,
        initialData.reference,
        initialExtras.reference
      ]).check();

  static final _id_sendBroadcastAsUser = jniAccessors.getMethodIDOf(
      _classRef,
      "sendBroadcastAsUser",
      "(Landroid/content/Intent;Landroid/os/UserHandle;)V");

  /// from: public void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle user)
  void sendBroadcastAsUser(
          intent_.Intent intent, userhandle_.UserHandle user) =>
      jniAccessors.callMethodWithArgs(reference, _id_sendBroadcastAsUser,
          jni.JniType.voidType, [intent.reference, user.reference]).check();

  static final _id_sendBroadcastAsUser1 = jniAccessors.getMethodIDOf(
      _classRef,
      "sendBroadcastAsUser",
      "(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V");

  /// from: public void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle user, java.lang.String receiverPermission)
  void sendBroadcastAsUser1(intent_.Intent intent, userhandle_.UserHandle user,
          jni.JniString receiverPermission) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_sendBroadcastAsUser1, jni.JniType.voidType, [
        intent.reference,
        user.reference,
        receiverPermission.reference
      ]).check();

  static final _id_sendOrderedBroadcastAsUser = jniAccessors.getMethodIDOf(
      _classRef,
      "sendOrderedBroadcastAsUser",
      "(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle user, java.lang.String receiverPermission, android.content.BroadcastReceiver resultReceiver, android.os.Handler scheduler, int initialCode, java.lang.String initialData, android.os.Bundle initialExtras)
  void sendOrderedBroadcastAsUser(
          intent_.Intent intent,
          userhandle_.UserHandle user,
          jni.JniString receiverPermission,
          broadcastreceiver_.BroadcastReceiver resultReceiver,
          handler_.Handler scheduler,
          int initialCode,
          jni.JniString initialData,
          bundle_.Bundle initialExtras) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_sendOrderedBroadcastAsUser, jni.JniType.voidType, [
        intent.reference,
        user.reference,
        receiverPermission.reference,
        resultReceiver.reference,
        scheduler.reference,
        initialCode,
        initialData.reference,
        initialExtras.reference
      ]).check();

  static final _id_sendStickyBroadcast = jniAccessors.getMethodIDOf(
      _classRef, "sendStickyBroadcast", "(Landroid/content/Intent;)V");

  /// from: public void sendStickyBroadcast(android.content.Intent intent)
  void sendStickyBroadcast(intent_.Intent intent) =>
      jniAccessors.callMethodWithArgs(reference, _id_sendStickyBroadcast,
          jni.JniType.voidType, [intent.reference]).check();

  static final _id_sendStickyOrderedBroadcast = jniAccessors.getMethodIDOf(
      _classRef,
      "sendStickyOrderedBroadcast",
      "(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver resultReceiver, android.os.Handler scheduler, int initialCode, java.lang.String initialData, android.os.Bundle initialExtras)
  void sendStickyOrderedBroadcast(
          intent_.Intent intent,
          broadcastreceiver_.BroadcastReceiver resultReceiver,
          handler_.Handler scheduler,
          int initialCode,
          jni.JniString initialData,
          bundle_.Bundle initialExtras) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_sendStickyOrderedBroadcast, jni.JniType.voidType, [
        intent.reference,
        resultReceiver.reference,
        scheduler.reference,
        initialCode,
        initialData.reference,
        initialExtras.reference
      ]).check();

  static final _id_removeStickyBroadcast = jniAccessors.getMethodIDOf(
      _classRef, "removeStickyBroadcast", "(Landroid/content/Intent;)V");

  /// from: public void removeStickyBroadcast(android.content.Intent intent)
  void removeStickyBroadcast(intent_.Intent intent) =>
      jniAccessors.callMethodWithArgs(reference, _id_removeStickyBroadcast,
          jni.JniType.voidType, [intent.reference]).check();

  static final _id_sendStickyBroadcastAsUser = jniAccessors.getMethodIDOf(
      _classRef,
      "sendStickyBroadcastAsUser",
      "(Landroid/content/Intent;Landroid/os/UserHandle;)V");

  /// from: public void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle user)
  void sendStickyBroadcastAsUser(
          intent_.Intent intent, userhandle_.UserHandle user) =>
      jniAccessors.callMethodWithArgs(reference, _id_sendStickyBroadcastAsUser,
          jni.JniType.voidType, [intent.reference, user.reference]).check();

  static final _id_sendStickyOrderedBroadcastAsUser = jniAccessors.getMethodIDOf(
      _classRef,
      "sendStickyOrderedBroadcastAsUser",
      "(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle user, android.content.BroadcastReceiver resultReceiver, android.os.Handler scheduler, int initialCode, java.lang.String initialData, android.os.Bundle initialExtras)
  void sendStickyOrderedBroadcastAsUser(
          intent_.Intent intent,
          userhandle_.UserHandle user,
          broadcastreceiver_.BroadcastReceiver resultReceiver,
          handler_.Handler scheduler,
          int initialCode,
          jni.JniString initialData,
          bundle_.Bundle initialExtras) =>
      jniAccessors.callMethodWithArgs(reference,
          _id_sendStickyOrderedBroadcastAsUser, jni.JniType.voidType, [
        intent.reference,
        user.reference,
        resultReceiver.reference,
        scheduler.reference,
        initialCode,
        initialData.reference,
        initialExtras.reference
      ]).check();

  static final _id_removeStickyBroadcastAsUser = jniAccessors.getMethodIDOf(
      _classRef,
      "removeStickyBroadcastAsUser",
      "(Landroid/content/Intent;Landroid/os/UserHandle;)V");

  /// from: public void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle user)
  void removeStickyBroadcastAsUser(
          intent_.Intent intent, userhandle_.UserHandle user) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeStickyBroadcastAsUser,
          jni.JniType.voidType,
          [intent.reference, user.reference]).check();

  static final _id_registerReceiver = jniAccessors.getMethodIDOf(
      _classRef,
      "registerReceiver",
      "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;");

  /// from: public android.content.Intent registerReceiver(android.content.BroadcastReceiver receiver, android.content.IntentFilter filter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  intent_.Intent registerReceiver(broadcastreceiver_.BroadcastReceiver receiver,
          intentfilter_.IntentFilter filter) =>
      intent_.Intent.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_registerReceiver,
          jni.JniType.objectType,
          [receiver.reference, filter.reference]).object);

  static final _id_registerReceiver1 = jniAccessors.getMethodIDOf(
      _classRef,
      "registerReceiver",
      "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;");

  /// from: public android.content.Intent registerReceiver(android.content.BroadcastReceiver receiver, android.content.IntentFilter filter, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  intent_.Intent registerReceiver1(
          broadcastreceiver_.BroadcastReceiver receiver,
          intentfilter_.IntentFilter filter,
          int flags) =>
      intent_.Intent.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_registerReceiver1,
          jni.JniType.objectType,
          [receiver.reference, filter.reference, flags]).object);

  static final _id_registerReceiver2 = jniAccessors.getMethodIDOf(
      _classRef,
      "registerReceiver",
      "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;");

  /// from: public android.content.Intent registerReceiver(android.content.BroadcastReceiver receiver, android.content.IntentFilter filter, java.lang.String broadcastPermission, android.os.Handler scheduler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  intent_.Intent registerReceiver2(
          broadcastreceiver_.BroadcastReceiver receiver,
          intentfilter_.IntentFilter filter,
          jni.JniString broadcastPermission,
          handler_.Handler scheduler) =>
      intent_.Intent.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_registerReceiver2, jni.JniType.objectType, [
        receiver.reference,
        filter.reference,
        broadcastPermission.reference,
        scheduler.reference
      ]).object);

  static final _id_registerReceiver3 = jniAccessors.getMethodIDOf(
      _classRef,
      "registerReceiver",
      "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;");

  /// from: public android.content.Intent registerReceiver(android.content.BroadcastReceiver receiver, android.content.IntentFilter filter, java.lang.String broadcastPermission, android.os.Handler scheduler, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  intent_.Intent registerReceiver3(
          broadcastreceiver_.BroadcastReceiver receiver,
          intentfilter_.IntentFilter filter,
          jni.JniString broadcastPermission,
          handler_.Handler scheduler,
          int flags) =>
      intent_.Intent.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_registerReceiver3, jni.JniType.objectType, [
        receiver.reference,
        filter.reference,
        broadcastPermission.reference,
        scheduler.reference,
        flags
      ]).object);

  static final _id_unregisterReceiver = jniAccessors.getMethodIDOf(_classRef,
      "unregisterReceiver", "(Landroid/content/BroadcastReceiver;)V");

  /// from: public void unregisterReceiver(android.content.BroadcastReceiver receiver)
  void unregisterReceiver(broadcastreceiver_.BroadcastReceiver receiver) =>
      jniAccessors.callMethodWithArgs(reference, _id_unregisterReceiver,
          jni.JniType.voidType, [receiver.reference]).check();

  static final _id_startService = jniAccessors.getMethodIDOf(
      _classRef,
      "startService",
      "(Landroid/content/Intent;)Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName startService(android.content.Intent service)
  /// The returned object must be deleted after use, by calling the `delete` method.
  componentname_.ComponentName startService(intent_.Intent service) =>
      componentname_.ComponentName.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_startService,
          jni.JniType.objectType,
          [service.reference]).object);

  static final _id_startForegroundService = jniAccessors.getMethodIDOf(
      _classRef,
      "startForegroundService",
      "(Landroid/content/Intent;)Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName startForegroundService(android.content.Intent service)
  /// The returned object must be deleted after use, by calling the `delete` method.
  componentname_.ComponentName startForegroundService(intent_.Intent service) =>
      componentname_.ComponentName.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_startForegroundService,
          jni.JniType.objectType,
          [service.reference]).object);

  static final _id_stopService = jniAccessors.getMethodIDOf(
      _classRef, "stopService", "(Landroid/content/Intent;)Z");

  /// from: public boolean stopService(android.content.Intent name)
  bool stopService(intent_.Intent name) => jniAccessors.callMethodWithArgs(
      reference,
      _id_stopService,
      jni.JniType.booleanType,
      [name.reference]).boolean;

  static final _id_bindService = jniAccessors.getMethodIDOf(
      _classRef,
      "bindService",
      "(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z");

  /// from: public boolean bindService(android.content.Intent service, android.content.ServiceConnection conn, int flags)
  bool bindService(intent_.Intent service,
          serviceconnection_.ServiceConnection conn, int flags) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_bindService,
          jni.JniType.booleanType,
          [service.reference, conn.reference, flags]).boolean;

  static final _id_unbindService = jniAccessors.getMethodIDOf(
      _classRef, "unbindService", "(Landroid/content/ServiceConnection;)V");

  /// from: public void unbindService(android.content.ServiceConnection conn)
  void unbindService(serviceconnection_.ServiceConnection conn) =>
      jniAccessors.callMethodWithArgs(reference, _id_unbindService,
          jni.JniType.voidType, [conn.reference]).check();

  static final _id_startInstrumentation = jniAccessors.getMethodIDOf(
      _classRef,
      "startInstrumentation",
      "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z");

  /// from: public boolean startInstrumentation(android.content.ComponentName className, java.lang.String profileFile, android.os.Bundle arguments)
  bool startInstrumentation(componentname_.ComponentName className,
          jni.JniString profileFile, bundle_.Bundle arguments) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_startInstrumentation, jni.JniType.booleanType, [
        className.reference,
        profileFile.reference,
        arguments.reference
      ]).boolean;

  static final _id_getSystemService = jniAccessors.getMethodIDOf(
      _classRef, "getSystemService", "(Ljava/lang/String;)Ljava/lang/Object;");

  /// from: public java.lang.Object getSystemService(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getSystemService(jni.JniString name) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getSystemService,
          jni.JniType.objectType,
          [name.reference]).object);

  static final _id_getSystemServiceName = jniAccessors.getMethodIDOf(_classRef,
      "getSystemServiceName", "(Ljava/lang/Class;)Ljava/lang/String;");

  /// from: public java.lang.String getSystemServiceName(java.lang.Class<?> serviceClass)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getSystemServiceName(jni.JniObject serviceClass) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getSystemServiceName,
          jni.JniType.objectType,
          [serviceClass.reference]).object);

  static final _id_checkPermission = jniAccessors.getMethodIDOf(
      _classRef, "checkPermission", "(Ljava/lang/String;II)I");

  /// from: public int checkPermission(java.lang.String permission, int pid, int uid)
  int checkPermission(jni.JniString permission, int pid, int uid) =>
      jniAccessors.callMethodWithArgs(reference, _id_checkPermission,
          jni.JniType.intType, [permission.reference, pid, uid]).integer;

  static final _id_checkCallingPermission = jniAccessors.getMethodIDOf(
      _classRef, "checkCallingPermission", "(Ljava/lang/String;)I");

  /// from: public int checkCallingPermission(java.lang.String permission)
  int checkCallingPermission(jni.JniString permission) =>
      jniAccessors.callMethodWithArgs(reference, _id_checkCallingPermission,
          jni.JniType.intType, [permission.reference]).integer;

  static final _id_checkCallingOrSelfPermission = jniAccessors.getMethodIDOf(
      _classRef, "checkCallingOrSelfPermission", "(Ljava/lang/String;)I");

  /// from: public int checkCallingOrSelfPermission(java.lang.String permission)
  int checkCallingOrSelfPermission(jni.JniString permission) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_checkCallingOrSelfPermission,
          jni.JniType.intType,
          [permission.reference]).integer;

  static final _id_checkSelfPermission = jniAccessors.getMethodIDOf(
      _classRef, "checkSelfPermission", "(Ljava/lang/String;)I");

  /// from: public int checkSelfPermission(java.lang.String permission)
  int checkSelfPermission(jni.JniString permission) =>
      jniAccessors.callMethodWithArgs(reference, _id_checkSelfPermission,
          jni.JniType.intType, [permission.reference]).integer;

  static final _id_enforcePermission = jniAccessors.getMethodIDOf(_classRef,
      "enforcePermission", "(Ljava/lang/String;IILjava/lang/String;)V");

  /// from: public void enforcePermission(java.lang.String permission, int pid, int uid, java.lang.String message)
  void enforcePermission(
          jni.JniString permission, int pid, int uid, jni.JniString message) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_enforcePermission,
          jni.JniType.voidType,
          [permission.reference, pid, uid, message.reference]).check();

  static final _id_enforceCallingPermission = jniAccessors.getMethodIDOf(
      _classRef,
      "enforceCallingPermission",
      "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void enforceCallingPermission(java.lang.String permission, java.lang.String message)
  void enforceCallingPermission(
          jni.JniString permission, jni.JniString message) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_enforceCallingPermission,
          jni.JniType.voidType,
          [permission.reference, message.reference]).check();

  static final _id_enforceCallingOrSelfPermission = jniAccessors.getMethodIDOf(
      _classRef,
      "enforceCallingOrSelfPermission",
      "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void enforceCallingOrSelfPermission(java.lang.String permission, java.lang.String message)
  void enforceCallingOrSelfPermission(
          jni.JniString permission, jni.JniString message) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_enforceCallingOrSelfPermission,
          jni.JniType.voidType,
          [permission.reference, message.reference]).check();

  static final _id_grantUriPermission = jniAccessors.getMethodIDOf(_classRef,
      "grantUriPermission", "(Ljava/lang/String;Landroid/net/Uri;I)V");

  /// from: public void grantUriPermission(java.lang.String toPackage, android.net.Uri uri, int modeFlags)
  void grantUriPermission(
          jni.JniString toPackage, uri_.Uri uri, int modeFlags) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_grantUriPermission,
          jni.JniType.voidType,
          [toPackage.reference, uri.reference, modeFlags]).check();

  static final _id_revokeUriPermission = jniAccessors.getMethodIDOf(
      _classRef, "revokeUriPermission", "(Landroid/net/Uri;I)V");

  /// from: public void revokeUriPermission(android.net.Uri uri, int modeFlags)
  void revokeUriPermission(uri_.Uri uri, int modeFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_revokeUriPermission,
          jni.JniType.voidType, [uri.reference, modeFlags]).check();

  static final _id_revokeUriPermission1 = jniAccessors.getMethodIDOf(_classRef,
      "revokeUriPermission", "(Ljava/lang/String;Landroid/net/Uri;I)V");

  /// from: public void revokeUriPermission(java.lang.String targetPackage, android.net.Uri uri, int modeFlags)
  void revokeUriPermission1(
          jni.JniString targetPackage, uri_.Uri uri, int modeFlags) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_revokeUriPermission1,
          jni.JniType.voidType,
          [targetPackage.reference, uri.reference, modeFlags]).check();

  static final _id_checkUriPermission = jniAccessors.getMethodIDOf(
      _classRef, "checkUriPermission", "(Landroid/net/Uri;III)I");

  /// from: public int checkUriPermission(android.net.Uri uri, int pid, int uid, int modeFlags)
  int checkUriPermission(uri_.Uri uri, int pid, int uid, int modeFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_checkUriPermission,
          jni.JniType.intType, [uri.reference, pid, uid, modeFlags]).integer;

  static final _id_checkCallingUriPermission = jniAccessors.getMethodIDOf(
      _classRef, "checkCallingUriPermission", "(Landroid/net/Uri;I)I");

  /// from: public int checkCallingUriPermission(android.net.Uri uri, int modeFlags)
  int checkCallingUriPermission(uri_.Uri uri, int modeFlags) =>
      jniAccessors.callMethodWithArgs(reference, _id_checkCallingUriPermission,
          jni.JniType.intType, [uri.reference, modeFlags]).integer;

  static final _id_checkCallingOrSelfUriPermission = jniAccessors.getMethodIDOf(
      _classRef, "checkCallingOrSelfUriPermission", "(Landroid/net/Uri;I)I");

  /// from: public int checkCallingOrSelfUriPermission(android.net.Uri uri, int modeFlags)
  int checkCallingOrSelfUriPermission(uri_.Uri uri, int modeFlags) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_checkCallingOrSelfUriPermission,
          jni.JniType.intType,
          [uri.reference, modeFlags]).integer;

  static final _id_checkUriPermission1 = jniAccessors.getMethodIDOf(
      _classRef,
      "checkUriPermission",
      "(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I");

  /// from: public int checkUriPermission(android.net.Uri uri, java.lang.String readPermission, java.lang.String writePermission, int pid, int uid, int modeFlags)
  int checkUriPermission1(uri_.Uri uri, jni.JniString readPermission,
          jni.JniString writePermission, int pid, int uid, int modeFlags) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_checkUriPermission1, jni.JniType.intType, [
        uri.reference,
        readPermission.reference,
        writePermission.reference,
        pid,
        uid,
        modeFlags
      ]).integer;

  static final _id_enforceUriPermission = jniAccessors.getMethodIDOf(_classRef,
      "enforceUriPermission", "(Landroid/net/Uri;IIILjava/lang/String;)V");

  /// from: public void enforceUriPermission(android.net.Uri uri, int pid, int uid, int modeFlags, java.lang.String message)
  void enforceUriPermission(uri_.Uri uri, int pid, int uid, int modeFlags,
          jni.JniString message) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_enforceUriPermission,
          jni.JniType.voidType,
          [uri.reference, pid, uid, modeFlags, message.reference]).check();

  static final _id_enforceCallingUriPermission = jniAccessors.getMethodIDOf(
      _classRef,
      "enforceCallingUriPermission",
      "(Landroid/net/Uri;ILjava/lang/String;)V");

  /// from: public void enforceCallingUriPermission(android.net.Uri uri, int modeFlags, java.lang.String message)
  void enforceCallingUriPermission(
          uri_.Uri uri, int modeFlags, jni.JniString message) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_enforceCallingUriPermission,
          jni.JniType.voidType,
          [uri.reference, modeFlags, message.reference]).check();

  static final _id_enforceCallingOrSelfUriPermission =
      jniAccessors.getMethodIDOf(_classRef, "enforceCallingOrSelfUriPermission",
          "(Landroid/net/Uri;ILjava/lang/String;)V");

  /// from: public void enforceCallingOrSelfUriPermission(android.net.Uri uri, int modeFlags, java.lang.String message)
  void enforceCallingOrSelfUriPermission(
          uri_.Uri uri, int modeFlags, jni.JniString message) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_enforceCallingOrSelfUriPermission,
          jni.JniType.voidType,
          [uri.reference, modeFlags, message.reference]).check();

  static final _id_enforceUriPermission1 = jniAccessors.getMethodIDOf(
      _classRef,
      "enforceUriPermission",
      "(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V");

  /// from: public void enforceUriPermission(android.net.Uri uri, java.lang.String readPermission, java.lang.String writePermission, int pid, int uid, int modeFlags, java.lang.String message)
  void enforceUriPermission1(
          uri_.Uri uri,
          jni.JniString readPermission,
          jni.JniString writePermission,
          int pid,
          int uid,
          int modeFlags,
          jni.JniString message) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_enforceUriPermission1, jni.JniType.voidType, [
        uri.reference,
        readPermission.reference,
        writePermission.reference,
        pid,
        uid,
        modeFlags,
        message.reference
      ]).check();

  static final _id_createPackageContext = jniAccessors.getMethodIDOf(_classRef,
      "createPackageContext", "(Ljava/lang/String;I)Landroid/content/Context;");

  /// from: public android.content.Context createPackageContext(java.lang.String packageName, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  context_.Context createPackageContext(jni.JniString packageName, int flags) =>
      context_.Context.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createPackageContext,
          jni.JniType.objectType,
          [packageName.reference, flags]).object);

  static final _id_createContextForSplit = jniAccessors.getMethodIDOf(_classRef,
      "createContextForSplit", "(Ljava/lang/String;)Landroid/content/Context;");

  /// from: public android.content.Context createContextForSplit(java.lang.String splitName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  context_.Context createContextForSplit(jni.JniString splitName) =>
      context_.Context.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createContextForSplit,
          jni.JniType.objectType,
          [splitName.reference]).object);

  static final _id_createConfigurationContext = jniAccessors.getMethodIDOf(
      _classRef,
      "createConfigurationContext",
      "(Landroid/content/res/Configuration;)Landroid/content/Context;");

  /// from: public android.content.Context createConfigurationContext(android.content.res.Configuration overrideConfiguration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  context_.Context createConfigurationContext(
          configuration_.Configuration overrideConfiguration) =>
      context_.Context.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createConfigurationContext,
          jni.JniType.objectType,
          [overrideConfiguration.reference]).object);

  static final _id_createDisplayContext = jniAccessors.getMethodIDOf(
      _classRef,
      "createDisplayContext",
      "(Landroid/view/Display;)Landroid/content/Context;");

  /// from: public android.content.Context createDisplayContext(android.view.Display display)
  /// The returned object must be deleted after use, by calling the `delete` method.
  context_.Context createDisplayContext(display_.Display display) =>
      context_.Context.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createDisplayContext,
          jni.JniType.objectType,
          [display.reference]).object);

  static final _id_isRestricted =
      jniAccessors.getMethodIDOf(_classRef, "isRestricted", "()Z");

  /// from: public boolean isRestricted()
  bool isRestricted() => jniAccessors.callMethodWithArgs(
      reference, _id_isRestricted, jni.JniType.booleanType, []).boolean;

  static final _id_createDeviceProtectedStorageContext =
      jniAccessors.getMethodIDOf(_classRef,
          "createDeviceProtectedStorageContext", "()Landroid/content/Context;");

  /// from: public android.content.Context createDeviceProtectedStorageContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  context_.Context createDeviceProtectedStorageContext() =>
      context_.Context.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createDeviceProtectedStorageContext,
          jni.JniType.objectType, []).object);

  static final _id_isDeviceProtectedStorage =
      jniAccessors.getMethodIDOf(_classRef, "isDeviceProtectedStorage", "()Z");

  /// from: public boolean isDeviceProtectedStorage()
  bool isDeviceProtectedStorage() => jniAccessors.callMethodWithArgs(reference,
      _id_isDeviceProtectedStorage, jni.JniType.booleanType, []).boolean;
}
