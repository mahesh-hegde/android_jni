// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../net/Uri.dart" as uri_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.ContentUris
///
/// Utility methods useful for working with android.net.Uri objects
/// that use the &quot;content&quot; (content://) scheme.
///
///
///   Content URIs have the syntax
///
///
///
///   <code>content://_authority_/_path_/_id_</code>
///
///
///<dl>
///   <dt>
///       <code>content:</code>
///   </dt>
///   <dd>
///       The scheme portion of the URI. This is always set to android.content.ContentResolver\#SCHEME_CONTENT ContentResolver.SCHEME_CONTENT (value
///       <code>content://</code>).
///   </dd>
///   <dt>
///       _authority_
///   </dt>
///   <dd>
///       A string that identifies the entire content provider. All the content URIs for the provider
///       start with this string. To guarantee a unique authority, providers should consider
///       using an authority that is the same as the provider class' package identifier.
///   </dd>
///   <dt>
///       _path_
///   </dt>
///   <dd>
///       Zero or more segments, separated by a forward slash (<code>/</code>), that identify
///       some subset of the provider's data. Most providers use the path part to identify
///       individual tables. Individual segments in the path are often called
///       &quot;directories&quot; although they do not refer to file directories. The right-most
///       segment in a path is often called a &quot;twig&quot;
///   </dd>
///   <dt>
///       _id_
///   </dt>
///   <dd>
///       A unique numeric identifier for a single row in the subset of data identified by the
///       preceding path part. Most providers recognize content URIs that contain an id part
///       and give them special handling. A table that contains a column named <code>_ID</code>
///       often expects the id part to be a particular value for that column.
///   </dd>
///</dl>
class ContentUris extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/content/ContentUris");
  ContentUris.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ContentUris()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_parseId = jniAccessors.getStaticMethodIDOf(
      _classRef, "parseId", "(Landroid/net/Uri;)J");

  /// from: static public long parseId(android.net.Uri contentUri)
  ///
  /// Converts the last path segment to a long.
  ///
  /// This supports a common convention for content URIs where an ID is
  /// stored in the last segment.
  ///@throws UnsupportedOperationException if this isn't a hierarchical URI
  ///@throws NumberFormatException if the last segment isn't a number
  ///@return the long conversion of the last segment or -1 if the path is
  ///  empty
  static int parseId(uri_.Uri contentUri) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_parseId,
          jni.JniType.longType, [contentUri.reference]).long;

  static final _id_appendId = jniAccessors.getStaticMethodIDOf(_classRef,
      "appendId", "(Landroid/net/Uri\$Builder;J)Landroid/net/Uri\$Builder;");

  /// from: static public android.net.Uri.Builder appendId(android.net.Uri.Builder builder, long id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Appends the given ID to the end of the path.
  ///@param builder to append the ID to
  ///@param id to append
  ///@return the given builder
  static uri_.Uri_Builder appendId(uri_.Uri_Builder builder, int id) =>
      uri_.Uri_Builder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_appendId,
          jni.JniType.objectType,
          [builder.reference, id]).object);

  static final _id_withAppendedId = jniAccessors.getStaticMethodIDOf(
      _classRef, "withAppendedId", "(Landroid/net/Uri;J)Landroid/net/Uri;");

  /// from: static public android.net.Uri withAppendedId(android.net.Uri contentUri, long id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Appends the given ID to the end of the path.
  ///@param contentUri to start with
  ///@param id to append
  ///@return a new URI with the given ID appended to the end of the path
  static uri_.Uri withAppendedId(uri_.Uri contentUri, int id) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_withAppendedId,
          jni.JniType.objectType,
          [contentUri.reference, id]).object);
}
