// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../text/ClipboardManager.dart" as clipboardmanager_;

import "ClipData.dart" as clipdata_;

import "ClipDescription.dart" as clipdescription_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.content.ClipboardManager
///
/// Interface to the clipboard service, for placing and retrieving text in
/// the global clipboard.
///
///
/// The ClipboardManager API itself is very simple: it consists of methods
/// to atomically get and set the current primary clipboard data.  That data
/// is expressed as a ClipData object, which defines the protocol
/// for data exchange between applications.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about using the clipboard framework, read the
/// <a href="{@docRoot}guide/topics/clipboard/copy-paste.html">Copy and Paste</a>
/// developer guide.
///
/// </div>
class ClipboardManager extends clipboardmanager_.ClipboardManager {
  static final _classRef =
      jniAccessors.getClassOf("android/content/ClipboardManager");
  ClipboardManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_setPrimaryClip = jniAccessors.getMethodIDOf(
      _classRef, "setPrimaryClip", "(Landroid/content/ClipData;)V");

  /// from: public void setPrimaryClip(android.content.ClipData clip)
  ///
  /// Sets the current primary clip on the clipboard.  This is the clip that
  /// is involved in normal cut and paste operations.
  ///@param clip The clipped data item to set.
  /// This value must never be {@code null}.
  ///@see \#getPrimaryClip()
  ///@see \#clearPrimaryClip()
  void setPrimaryClip(clipdata_.ClipData clip) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPrimaryClip,
          jni.JniType.voidType, [clip.reference]).check();

  static final _id_clearPrimaryClip =
      jniAccessors.getMethodIDOf(_classRef, "clearPrimaryClip", "()V");

  /// from: public void clearPrimaryClip()
  ///
  /// Clears any current primary clip on the clipboard.
  ///@see \#setPrimaryClip(ClipData)
  void clearPrimaryClip() => jniAccessors.callMethodWithArgs(
      reference, _id_clearPrimaryClip, jni.JniType.voidType, []).check();

  static final _id_getPrimaryClip = jniAccessors.getMethodIDOf(
      _classRef, "getPrimaryClip", "()Landroid/content/ClipData;");

  /// from: public android.content.ClipData getPrimaryClip()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the current primary clip on the clipboard.
  ///@see \#setPrimaryClip(ClipData)
  ///@return This value may be {@code null}.
  clipdata_.ClipData getPrimaryClip() =>
      clipdata_.ClipData.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPrimaryClip, jni.JniType.objectType, []).object);

  static final _id_getPrimaryClipDescription = jniAccessors.getMethodIDOf(
      _classRef,
      "getPrimaryClipDescription",
      "()Landroid/content/ClipDescription;");

  /// from: public android.content.ClipDescription getPrimaryClipDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a description of the current primary clip on the clipboard
  /// but not a copy of its data.
  ///@see \#setPrimaryClip(ClipData)
  ///@return This value may be {@code null}.
  clipdescription_.ClipDescription getPrimaryClipDescription() =>
      clipdescription_.ClipDescription.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPrimaryClipDescription,
          jni.JniType.objectType, []).object);

  static final _id_hasPrimaryClip =
      jniAccessors.getMethodIDOf(_classRef, "hasPrimaryClip", "()Z");

  /// from: public boolean hasPrimaryClip()
  ///
  /// Returns true if there is currently a primary clip on the clipboard.
  bool hasPrimaryClip() => jniAccessors.callMethodWithArgs(
      reference, _id_hasPrimaryClip, jni.JniType.booleanType, []).boolean;

  static final _id_addPrimaryClipChangedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addPrimaryClipChangedListener",
      "(Landroid/content/ClipboardManager\$OnPrimaryClipChangedListener;)V");

  /// from: public void addPrimaryClipChangedListener(android.content.ClipboardManager.OnPrimaryClipChangedListener what)
  void addPrimaryClipChangedListener(
          ClipboardManager_OnPrimaryClipChangedListener what) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addPrimaryClipChangedListener,
          jni.JniType.voidType,
          [what.reference]).check();

  static final _id_removePrimaryClipChangedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removePrimaryClipChangedListener",
      "(Landroid/content/ClipboardManager\$OnPrimaryClipChangedListener;)V");

  /// from: public void removePrimaryClipChangedListener(android.content.ClipboardManager.OnPrimaryClipChangedListener what)
  void removePrimaryClipChangedListener(
          ClipboardManager_OnPrimaryClipChangedListener what) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removePrimaryClipChangedListener,
          jni.JniType.voidType,
          [what.reference]).check();

  static final _id_getText = jniAccessors.getMethodIDOf(
      _classRef, "getText", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated Use \#getPrimaryClip() instead.  This retrieves
  /// the primary clip and tries to coerce it to a string.
  jni.JniObject getText() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText, jni.JniType.objectType, []).object);

  static final _id_setText = jniAccessors.getMethodIDOf(
      _classRef, "setText", "(Ljava/lang/CharSequence;)V");

  /// from: public void setText(java.lang.CharSequence text)
  ///
  /// @deprecated Use \#setPrimaryClip(ClipData) instead.  This
  /// creates a ClippedItem holding the given text and sets it as the
  /// primary clip.  It has no label or icon.
  void setText(jni.JniObject text) => jniAccessors.callMethodWithArgs(
      reference, _id_setText, jni.JniType.voidType, [text.reference]).check();

  static final _id_hasText =
      jniAccessors.getMethodIDOf(_classRef, "hasText", "()Z");

  /// from: public boolean hasText()
  ///
  /// @deprecated Use \#hasPrimaryClip() instead.
  bool hasText() => jniAccessors.callMethodWithArgs(
      reference, _id_hasText, jni.JniType.booleanType, []).boolean;
}

/// from: android.content.ClipboardManager$OnPrimaryClipChangedListener
///
/// Defines a listener callback that is invoked when the primary clip on the clipboard changes.
/// Objects that want to register a listener call
/// android.content.ClipboardManager\#addPrimaryClipChangedListener(OnPrimaryClipChangedListener) addPrimaryClipChangedListener() with an
/// object that implements OnPrimaryClipChangedListener.
class ClipboardManager_OnPrimaryClipChangedListener extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/content/ClipboardManager\$OnPrimaryClipChangedListener");
  ClipboardManager_OnPrimaryClipChangedListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onPrimaryClipChanged =
      jniAccessors.getMethodIDOf(_classRef, "onPrimaryClipChanged", "()V");

  /// from: public abstract void onPrimaryClipChanged()
  ///
  /// Callback that is invoked by android.content.ClipboardManager when the primary
  /// clip changes.
  void onPrimaryClipChanged() => jniAccessors.callMethodWithArgs(
      reference, _id_onPrimaryClipChanged, jni.JniType.voidType, []).check();
}
