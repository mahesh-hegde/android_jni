// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.location.GnssStatus
///
/// This class represents the current state of the GNSS engine.
/// This class is used in conjunction with the GnssStatus.Callback.
class GnssStatus extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/location/GnssStatus");
  GnssStatus.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CONSTELLATION_BEIDOU
  ///
  /// Constellation type constant for Beidou.
  static const CONSTELLATION_BEIDOU = 5;

  /// from: static public final int CONSTELLATION_GALILEO
  ///
  /// Constellation type constant for Galileo.
  static const CONSTELLATION_GALILEO = 6;

  /// from: static public final int CONSTELLATION_GLONASS
  ///
  /// Constellation type constant for Glonass.
  static const CONSTELLATION_GLONASS = 3;

  /// from: static public final int CONSTELLATION_GPS
  ///
  /// Constellation type constant for GPS.
  static const CONSTELLATION_GPS = 1;

  /// from: static public final int CONSTELLATION_QZSS
  ///
  /// Constellation type constant for QZSS.
  static const CONSTELLATION_QZSS = 4;

  /// from: static public final int CONSTELLATION_SBAS
  ///
  /// Constellation type constant for SBAS.
  static const CONSTELLATION_SBAS = 2;

  /// from: static public final int CONSTELLATION_UNKNOWN
  ///
  /// Unknown constellation type.
  static const CONSTELLATION_UNKNOWN = 0;

  static final _id_getSatelliteCount =
      jniAccessors.getMethodIDOf(_classRef, "getSatelliteCount", "()I");

  /// from: public int getSatelliteCount()
  ///
  /// Gets the total number of satellites in satellite list.
  int getSatelliteCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getSatelliteCount, jni.JniType.intType, []).integer;

  static final _id_getConstellationType =
      jniAccessors.getMethodIDOf(_classRef, "getConstellationType", "(I)I");

  /// from: public int getConstellationType(int satIndex)
  ///
  /// Retrieves the constellation type of the satellite at the specified index.
  ///@param satIndex the index of the satellite in the list.
  ///@return Value is android.location.GnssStatus\#CONSTELLATION_UNKNOWN, android.location.GnssStatus\#CONSTELLATION_GPS, android.location.GnssStatus\#CONSTELLATION_SBAS, android.location.GnssStatus\#CONSTELLATION_GLONASS, android.location.GnssStatus\#CONSTELLATION_QZSS, android.location.GnssStatus\#CONSTELLATION_BEIDOU, or android.location.GnssStatus\#CONSTELLATION_GALILEO
  int getConstellationType(int satIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getConstellationType,
      jni.JniType.intType,
      [satIndex]).integer;

  static final _id_getSvid =
      jniAccessors.getMethodIDOf(_classRef, "getSvid", "(I)I");

  /// from: public int getSvid(int satIndex)
  ///
  /// Gets the identification number for the satellite at the specific index.
  ///
  /// This svid is pseudo-random number for most constellations. It is FCN &amp; OSN number for
  /// Glonass.
  ///
  /// The distinction is made by looking at constellation field
  /// \#getConstellationType(int) Expected values are in the range of:
  ///
  /// <ul>
  /// <li>GPS: 1-32</li>
  /// <li>SBAS: 120-151, 183-192</li>
  /// <li>GLONASS: One of: OSN, or FCN+100
  /// <ul>
  ///   <li>1-24 as the orbital slot number (OSN) (preferred, if known)</li>
  ///   <li>93-106 as the frequency channel number (FCN) (-7 to +6) plus 100.
  ///   i.e. encode FCN of -7 as 93, 0 as 100, and +6 as 106</li>
  /// </ul></li>
  /// <li>QZSS: 193-200</li>
  /// <li>Galileo: 1-36</li>
  /// <li>Beidou: 1-37</li>
  /// </ul>
  ///@param satIndex the index of the satellite in the list.
  int getSvid(int satIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_getSvid, jni.JniType.intType, [satIndex]).integer;

  static final _id_getCn0DbHz =
      jniAccessors.getMethodIDOf(_classRef, "getCn0DbHz", "(I)F");

  /// from: public float getCn0DbHz(int satIndex)
  ///
  /// Retrieves the carrier-to-noise density at the antenna of the satellite at the specified index
  /// in dB-Hz.
  ///@param satIndex the index of the satellite in the list.
  double getCn0DbHz(int satIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_getCn0DbHz, jni.JniType.floatType, [satIndex]).float;

  static final _id_getElevationDegrees =
      jniAccessors.getMethodIDOf(_classRef, "getElevationDegrees", "(I)F");

  /// from: public float getElevationDegrees(int satIndex)
  ///
  /// Retrieves the elevation of the satellite at the specified index.
  ///@param satIndex the index of the satellite in the list.
  double getElevationDegrees(int satIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getElevationDegrees,
      jni.JniType.floatType,
      [satIndex]).float;

  static final _id_getAzimuthDegrees =
      jniAccessors.getMethodIDOf(_classRef, "getAzimuthDegrees", "(I)F");

  /// from: public float getAzimuthDegrees(int satIndex)
  ///
  /// Retrieves the azimuth the satellite at the specified index.
  ///@param satIndex the index of the satellite in the list.
  double getAzimuthDegrees(int satIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getAzimuthDegrees,
      jni.JniType.floatType,
      [satIndex]).float;

  static final _id_hasEphemerisData =
      jniAccessors.getMethodIDOf(_classRef, "hasEphemerisData", "(I)Z");

  /// from: public boolean hasEphemerisData(int satIndex)
  ///
  /// Reports whether the satellite at the specified index has ephemeris data.
  ///@param satIndex the index of the satellite in the list.
  bool hasEphemerisData(int satIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_hasEphemerisData,
      jni.JniType.booleanType,
      [satIndex]).boolean;

  static final _id_hasAlmanacData =
      jniAccessors.getMethodIDOf(_classRef, "hasAlmanacData", "(I)Z");

  /// from: public boolean hasAlmanacData(int satIndex)
  ///
  /// Reports whether the satellite at the specified index has almanac data.
  ///@param satIndex the index of the satellite in the list.
  bool hasAlmanacData(int satIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_hasAlmanacData,
      jni.JniType.booleanType,
      [satIndex]).boolean;

  static final _id_usedInFix =
      jniAccessors.getMethodIDOf(_classRef, "usedInFix", "(I)Z");

  /// from: public boolean usedInFix(int satIndex)
  ///
  /// Reports whether the satellite at the specified index was used in the calculation of the most
  /// recent position fix.
  ///@param satIndex the index of the satellite in the list.
  bool usedInFix(int satIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_usedInFix, jni.JniType.booleanType, [satIndex]).boolean;

  static final _id_hasCarrierFrequencyHz =
      jniAccessors.getMethodIDOf(_classRef, "hasCarrierFrequencyHz", "(I)Z");

  /// from: public boolean hasCarrierFrequencyHz(int satIndex)
  ///
  /// Reports whether a valid \#getCarrierFrequencyHz(int satIndex) is available.
  ///@param satIndex the index of the satellite in the list.
  bool hasCarrierFrequencyHz(int satIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_hasCarrierFrequencyHz,
      jni.JniType.booleanType,
      [satIndex]).boolean;

  static final _id_getCarrierFrequencyHz =
      jniAccessors.getMethodIDOf(_classRef, "getCarrierFrequencyHz", "(I)F");

  /// from: public float getCarrierFrequencyHz(int satIndex)
  ///
  /// Gets the carrier frequency of the signal tracked.
  ///
  /// For example it can be the GPS central frequency for L1 = 1575.45 MHz, or L2 = 1227.60 MHz,
  /// L5 = 1176.45 MHz, varying GLO channels, etc. If the field is not set, it is the primary
  /// common use central frequency, e.g. L1 = 1575.45 MHz for GPS.
  ///
  /// For an L1, L5 receiver tracking a satellite on L1 and L5 at the same time, two measurements
  /// will be reported for this same satellite, in one all the values related to L1 will be filled,
  /// and in the other all of the values related to L5 will be filled.
  ///
  /// The value is only available if \#hasCarrierFrequencyHz(int satIndex) is {@code true}.
  ///@param satIndex the index of the satellite in the list.
  ///@return the carrier frequency of the signal tracked in Hz.
  double getCarrierFrequencyHz(int satIndex) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getCarrierFrequencyHz,
      jni.JniType.floatType,
      [satIndex]).float;
}

/// from: android.location.GnssStatus$Callback
///
/// Used for receiving notifications when GNSS events happen.
class GnssStatus_Callback extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/location/GnssStatus\$Callback");
  GnssStatus_Callback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GnssStatus_Callback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onStarted =
      jniAccessors.getMethodIDOf(_classRef, "onStarted", "()V");

  /// from: public void onStarted()
  ///
  /// Called when GNSS system has started.
  void onStarted() => jniAccessors.callMethodWithArgs(
      reference, _id_onStarted, jni.JniType.voidType, []).check();

  static final _id_onStopped =
      jniAccessors.getMethodIDOf(_classRef, "onStopped", "()V");

  /// from: public void onStopped()
  ///
  /// Called when GNSS system has stopped.
  void onStopped() => jniAccessors.callMethodWithArgs(
      reference, _id_onStopped, jni.JniType.voidType, []).check();

  static final _id_onFirstFix =
      jniAccessors.getMethodIDOf(_classRef, "onFirstFix", "(I)V");

  /// from: public void onFirstFix(int ttffMillis)
  ///
  /// Called when the GNSS system has received its first fix since starting.
  ///@param ttffMillis the time from start to first fix in milliseconds.
  void onFirstFix(int ttffMillis) => jniAccessors.callMethodWithArgs(
      reference, _id_onFirstFix, jni.JniType.voidType, [ttffMillis]).check();

  static final _id_onSatelliteStatusChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onSatelliteStatusChanged",
      "(Landroid/location/GnssStatus;)V");

  /// from: public void onSatelliteStatusChanged(android.location.GnssStatus status)
  ///
  /// Called periodically to report GNSS satellite status.
  ///@param status the current status of all satellites.
  void onSatelliteStatusChanged(GnssStatus status) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSatelliteStatusChanged,
          jni.JniType.voidType, [status.reference]).check();
}
