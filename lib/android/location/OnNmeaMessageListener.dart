// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.location.OnNmeaMessageListener
///
/// Used for receiving NMEA sentences from the GNSS.
/// NMEA 0183 is a standard for communicating with marine electronic devices
/// and is a common method for receiving data from a GNSS, typically over a serial port.
/// See <a href="http://en.wikipedia.org/wiki/NMEA_0183">NMEA 0183</a> for more details.
/// You can implement this interface and call LocationManager\#addNmeaListener
/// to receive NMEA data from the GNSS engine.
class OnNmeaMessageListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/location/OnNmeaMessageListener");
  OnNmeaMessageListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onNmeaMessage = jniAccessors.getMethodIDOf(
      _classRef, "onNmeaMessage", "(Ljava/lang/String;J)V");

  /// from: public abstract void onNmeaMessage(java.lang.String message, long timestamp)
  ///
  /// Called when an NMEA message is received.
  ///@param message NMEA message
  ///@param timestamp milliseconds since January 1, 1970.
  void onNmeaMessage(jni.JniString message, int timestamp) =>
      jniAccessors.callMethodWithArgs(reference, _id_onNmeaMessage,
          jni.JniType.voidType, [message.reference, timestamp]).check();
}
