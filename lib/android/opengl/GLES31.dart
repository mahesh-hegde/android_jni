// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "GLES30.dart" as gles30_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.opengl.GLES31
///
/// OpenGL ES 3.1
class GLES31 extends gles30_.GLES30 {
  static final _classRef = jniAccessors.getClassOf("android/opengl/GLES31");
  GLES31.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
  static const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593;

  /// from: static public final int GL_ACTIVE_PROGRAM
  static const GL_ACTIVE_PROGRAM = 33369;

  /// from: static public final int GL_ACTIVE_RESOURCES
  static const GL_ACTIVE_RESOURCES = 37621;

  /// from: static public final int GL_ACTIVE_VARIABLES
  static const GL_ACTIVE_VARIABLES = 37637;

  /// from: static public final int GL_ALL_BARRIER_BITS
  static const GL_ALL_BARRIER_BITS = -1;

  /// from: static public final int GL_ALL_SHADER_BITS
  static const GL_ALL_SHADER_BITS = -1;

  /// from: static public final int GL_ARRAY_SIZE
  static const GL_ARRAY_SIZE = 37627;

  /// from: static public final int GL_ARRAY_STRIDE
  static const GL_ARRAY_STRIDE = 37630;

  /// from: static public final int GL_ATOMIC_COUNTER_BARRIER_BIT
  static const GL_ATOMIC_COUNTER_BARRIER_BIT = 4096;

  /// from: static public final int GL_ATOMIC_COUNTER_BUFFER
  static const GL_ATOMIC_COUNTER_BUFFER = 37568;

  /// from: static public final int GL_ATOMIC_COUNTER_BUFFER_BINDING
  static const GL_ATOMIC_COUNTER_BUFFER_BINDING = 37569;

  /// from: static public final int GL_ATOMIC_COUNTER_BUFFER_INDEX
  static const GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633;

  /// from: static public final int GL_ATOMIC_COUNTER_BUFFER_SIZE
  static const GL_ATOMIC_COUNTER_BUFFER_SIZE = 37571;

  /// from: static public final int GL_ATOMIC_COUNTER_BUFFER_START
  static const GL_ATOMIC_COUNTER_BUFFER_START = 37570;

  /// from: static public final int GL_BLOCK_INDEX
  static const GL_BLOCK_INDEX = 37629;

  /// from: static public final int GL_BUFFER_BINDING
  static const GL_BUFFER_BINDING = 37634;

  /// from: static public final int GL_BUFFER_DATA_SIZE
  static const GL_BUFFER_DATA_SIZE = 37635;

  /// from: static public final int GL_BUFFER_UPDATE_BARRIER_BIT
  static const GL_BUFFER_UPDATE_BARRIER_BIT = 512;

  /// from: static public final int GL_BUFFER_VARIABLE
  static const GL_BUFFER_VARIABLE = 37605;

  /// from: static public final int GL_COMMAND_BARRIER_BIT
  static const GL_COMMAND_BARRIER_BIT = 64;

  /// from: static public final int GL_COMPUTE_SHADER
  static const GL_COMPUTE_SHADER = 37305;

  /// from: static public final int GL_COMPUTE_SHADER_BIT
  static const GL_COMPUTE_SHADER_BIT = 32;

  /// from: static public final int GL_COMPUTE_WORK_GROUP_SIZE
  static const GL_COMPUTE_WORK_GROUP_SIZE = 33383;

  /// from: static public final int GL_DEPTH_STENCIL_TEXTURE_MODE
  static const GL_DEPTH_STENCIL_TEXTURE_MODE = 37098;

  /// from: static public final int GL_DISPATCH_INDIRECT_BUFFER
  static const GL_DISPATCH_INDIRECT_BUFFER = 37102;

  /// from: static public final int GL_DISPATCH_INDIRECT_BUFFER_BINDING
  static const GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103;

  /// from: static public final int GL_DRAW_INDIRECT_BUFFER
  static const GL_DRAW_INDIRECT_BUFFER = 36671;

  /// from: static public final int GL_DRAW_INDIRECT_BUFFER_BINDING
  static const GL_DRAW_INDIRECT_BUFFER_BINDING = 36675;

  /// from: static public final int GL_ELEMENT_ARRAY_BARRIER_BIT
  static const GL_ELEMENT_ARRAY_BARRIER_BIT = 2;

  /// from: static public final int GL_FRAGMENT_SHADER_BIT
  static const GL_FRAGMENT_SHADER_BIT = 2;

  /// from: static public final int GL_FRAMEBUFFER_BARRIER_BIT
  static const GL_FRAMEBUFFER_BARRIER_BIT = 1024;

  /// from: static public final int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
  static const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652;

  /// from: static public final int GL_FRAMEBUFFER_DEFAULT_HEIGHT
  static const GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649;

  /// from: static public final int GL_FRAMEBUFFER_DEFAULT_SAMPLES
  static const GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651;

  /// from: static public final int GL_FRAMEBUFFER_DEFAULT_WIDTH
  static const GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648;

  /// from: static public final int GL_IMAGE_2D
  static const GL_IMAGE_2D = 36941;

  /// from: static public final int GL_IMAGE_2D_ARRAY
  static const GL_IMAGE_2D_ARRAY = 36947;

  /// from: static public final int GL_IMAGE_3D
  static const GL_IMAGE_3D = 36942;

  /// from: static public final int GL_IMAGE_BINDING_ACCESS
  static const GL_IMAGE_BINDING_ACCESS = 36670;

  /// from: static public final int GL_IMAGE_BINDING_FORMAT
  static const GL_IMAGE_BINDING_FORMAT = 36974;

  /// from: static public final int GL_IMAGE_BINDING_LAYER
  static const GL_IMAGE_BINDING_LAYER = 36669;

  /// from: static public final int GL_IMAGE_BINDING_LAYERED
  static const GL_IMAGE_BINDING_LAYERED = 36668;

  /// from: static public final int GL_IMAGE_BINDING_LEVEL
  static const GL_IMAGE_BINDING_LEVEL = 36667;

  /// from: static public final int GL_IMAGE_BINDING_NAME
  static const GL_IMAGE_BINDING_NAME = 36666;

  /// from: static public final int GL_IMAGE_CUBE
  static const GL_IMAGE_CUBE = 36944;

  /// from: static public final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
  static const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065;

  /// from: static public final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
  static const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064;

  /// from: static public final int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
  static const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063;

  /// from: static public final int GL_INT_IMAGE_2D
  static const GL_INT_IMAGE_2D = 36952;

  /// from: static public final int GL_INT_IMAGE_2D_ARRAY
  static const GL_INT_IMAGE_2D_ARRAY = 36958;

  /// from: static public final int GL_INT_IMAGE_3D
  static const GL_INT_IMAGE_3D = 36953;

  /// from: static public final int GL_INT_IMAGE_CUBE
  static const GL_INT_IMAGE_CUBE = 36955;

  /// from: static public final int GL_INT_SAMPLER_2D_MULTISAMPLE
  static const GL_INT_SAMPLER_2D_MULTISAMPLE = 37129;

  /// from: static public final int GL_IS_ROW_MAJOR
  static const GL_IS_ROW_MAJOR = 37632;

  /// from: static public final int GL_LOCATION
  static const GL_LOCATION = 37646;

  /// from: static public final int GL_MATRIX_STRIDE
  static const GL_MATRIX_STRIDE = 37631;

  /// from: static public final int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
  static const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596;

  /// from: static public final int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
  static const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592;

  /// from: static public final int GL_MAX_COLOR_TEXTURE_SAMPLES
  static const GL_MAX_COLOR_TEXTURE_SAMPLES = 37134;

  /// from: static public final int GL_MAX_COMBINED_ATOMIC_COUNTERS
  static const GL_MAX_COMBINED_ATOMIC_COUNTERS = 37591;

  /// from: static public final int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
  static const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585;

  /// from: static public final int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
  static const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382;

  /// from: static public final int GL_MAX_COMBINED_IMAGE_UNIFORMS
  static const GL_MAX_COMBINED_IMAGE_UNIFORMS = 37071;

  /// from: static public final int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
  static const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665;

  /// from: static public final int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
  static const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084;

  /// from: static public final int GL_MAX_COMPUTE_ATOMIC_COUNTERS
  static const GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381;

  /// from: static public final int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
  static const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380;

  /// from: static public final int GL_MAX_COMPUTE_IMAGE_UNIFORMS
  static const GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309;

  /// from: static public final int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
  static const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083;

  /// from: static public final int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
  static const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378;

  /// from: static public final int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
  static const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308;

  /// from: static public final int GL_MAX_COMPUTE_UNIFORM_BLOCKS
  static const GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307;

  /// from: static public final int GL_MAX_COMPUTE_UNIFORM_COMPONENTS
  static const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379;

  /// from: static public final int GL_MAX_COMPUTE_WORK_GROUP_COUNT
  static const GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310;

  /// from: static public final int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
  static const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099;

  /// from: static public final int GL_MAX_COMPUTE_WORK_GROUP_SIZE
  static const GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311;

  /// from: static public final int GL_MAX_DEPTH_TEXTURE_SAMPLES
  static const GL_MAX_DEPTH_TEXTURE_SAMPLES = 37135;

  /// from: static public final int GL_MAX_FRAGMENT_ATOMIC_COUNTERS
  static const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 37590;

  /// from: static public final int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
  static const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584;

  /// from: static public final int GL_MAX_FRAGMENT_IMAGE_UNIFORMS
  static const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 37070;

  /// from: static public final int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
  static const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082;

  /// from: static public final int GL_MAX_FRAMEBUFFER_HEIGHT
  static const GL_MAX_FRAMEBUFFER_HEIGHT = 37654;

  /// from: static public final int GL_MAX_FRAMEBUFFER_SAMPLES
  static const GL_MAX_FRAMEBUFFER_SAMPLES = 37656;

  /// from: static public final int GL_MAX_FRAMEBUFFER_WIDTH
  static const GL_MAX_FRAMEBUFFER_WIDTH = 37653;

  /// from: static public final int GL_MAX_IMAGE_UNITS
  static const GL_MAX_IMAGE_UNITS = 36664;

  /// from: static public final int GL_MAX_INTEGER_SAMPLES
  static const GL_MAX_INTEGER_SAMPLES = 37136;

  /// from: static public final int GL_MAX_NAME_LENGTH
  static const GL_MAX_NAME_LENGTH = 37622;

  /// from: static public final int GL_MAX_NUM_ACTIVE_VARIABLES
  static const GL_MAX_NUM_ACTIVE_VARIABLES = 37623;

  /// from: static public final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
  static const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447;

  /// from: static public final int GL_MAX_SAMPLE_MASK_WORDS
  static const GL_MAX_SAMPLE_MASK_WORDS = 36441;

  /// from: static public final int GL_MAX_SHADER_STORAGE_BLOCK_SIZE
  static const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086;

  /// from: static public final int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
  static const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085;

  /// from: static public final int GL_MAX_UNIFORM_LOCATIONS
  static const GL_MAX_UNIFORM_LOCATIONS = 33390;

  /// from: static public final int GL_MAX_VERTEX_ATOMIC_COUNTERS
  static const GL_MAX_VERTEX_ATOMIC_COUNTERS = 37586;

  /// from: static public final int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
  static const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580;

  /// from: static public final int GL_MAX_VERTEX_ATTRIB_BINDINGS
  static const GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498;

  /// from: static public final int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
  static const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497;

  /// from: static public final int GL_MAX_VERTEX_ATTRIB_STRIDE
  static const GL_MAX_VERTEX_ATTRIB_STRIDE = 33509;

  /// from: static public final int GL_MAX_VERTEX_IMAGE_UNIFORMS
  static const GL_MAX_VERTEX_IMAGE_UNIFORMS = 37066;

  /// from: static public final int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
  static const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078;

  /// from: static public final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
  static const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446;

  /// from: static public final int GL_NAME_LENGTH
  static const GL_NAME_LENGTH = 37625;

  /// from: static public final int GL_NUM_ACTIVE_VARIABLES
  static const GL_NUM_ACTIVE_VARIABLES = 37636;

  /// from: static public final int GL_OFFSET
  static const GL_OFFSET = 37628;

  /// from: static public final int GL_PIXEL_BUFFER_BARRIER_BIT
  static const GL_PIXEL_BUFFER_BARRIER_BIT = 128;

  /// from: static public final int GL_PROGRAM_INPUT
  static const GL_PROGRAM_INPUT = 37603;

  /// from: static public final int GL_PROGRAM_OUTPUT
  static const GL_PROGRAM_OUTPUT = 37604;

  /// from: static public final int GL_PROGRAM_PIPELINE_BINDING
  static const GL_PROGRAM_PIPELINE_BINDING = 33370;

  /// from: static public final int GL_PROGRAM_SEPARABLE
  static const GL_PROGRAM_SEPARABLE = 33368;

  /// from: static public final int GL_READ_ONLY
  static const GL_READ_ONLY = 35000;

  /// from: static public final int GL_READ_WRITE
  static const GL_READ_WRITE = 35002;

  /// from: static public final int GL_REFERENCED_BY_COMPUTE_SHADER
  static const GL_REFERENCED_BY_COMPUTE_SHADER = 37643;

  /// from: static public final int GL_REFERENCED_BY_FRAGMENT_SHADER
  static const GL_REFERENCED_BY_FRAGMENT_SHADER = 37642;

  /// from: static public final int GL_REFERENCED_BY_VERTEX_SHADER
  static const GL_REFERENCED_BY_VERTEX_SHADER = 37638;

  /// from: static public final int GL_SAMPLER_2D_MULTISAMPLE
  static const GL_SAMPLER_2D_MULTISAMPLE = 37128;

  /// from: static public final int GL_SAMPLE_MASK
  static const GL_SAMPLE_MASK = 36433;

  /// from: static public final int GL_SAMPLE_MASK_VALUE
  static const GL_SAMPLE_MASK_VALUE = 36434;

  /// from: static public final int GL_SAMPLE_POSITION
  static const GL_SAMPLE_POSITION = 36432;

  /// from: static public final int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
  static const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 32;

  /// from: static public final int GL_SHADER_STORAGE_BARRIER_BIT
  static const GL_SHADER_STORAGE_BARRIER_BIT = 8192;

  /// from: static public final int GL_SHADER_STORAGE_BLOCK
  static const GL_SHADER_STORAGE_BLOCK = 37606;

  /// from: static public final int GL_SHADER_STORAGE_BUFFER
  static const GL_SHADER_STORAGE_BUFFER = 37074;

  /// from: static public final int GL_SHADER_STORAGE_BUFFER_BINDING
  static const GL_SHADER_STORAGE_BUFFER_BINDING = 37075;

  /// from: static public final int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
  static const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087;

  /// from: static public final int GL_SHADER_STORAGE_BUFFER_SIZE
  static const GL_SHADER_STORAGE_BUFFER_SIZE = 37077;

  /// from: static public final int GL_SHADER_STORAGE_BUFFER_START
  static const GL_SHADER_STORAGE_BUFFER_START = 37076;

  /// from: static public final int GL_STENCIL_INDEX
  static const GL_STENCIL_INDEX1 = 6401;

  /// from: static public final int GL_TEXTURE_2D_MULTISAMPLE
  static const GL_TEXTURE_2D_MULTISAMPLE = 37120;

  /// from: static public final int GL_TEXTURE_ALPHA_SIZE
  static const GL_TEXTURE_ALPHA_SIZE = 32863;

  /// from: static public final int GL_TEXTURE_ALPHA_TYPE
  static const GL_TEXTURE_ALPHA_TYPE = 35859;

  /// from: static public final int GL_TEXTURE_BINDING_2D_MULTISAMPLE
  static const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 37124;

  /// from: static public final int GL_TEXTURE_BLUE_SIZE
  static const GL_TEXTURE_BLUE_SIZE = 32862;

  /// from: static public final int GL_TEXTURE_BLUE_TYPE
  static const GL_TEXTURE_BLUE_TYPE = 35858;

  /// from: static public final int GL_TEXTURE_COMPRESSED
  static const GL_TEXTURE_COMPRESSED = 34465;

  /// from: static public final int GL_TEXTURE_DEPTH
  static const GL_TEXTURE_DEPTH = 32881;

  /// from: static public final int GL_TEXTURE_DEPTH_SIZE
  static const GL_TEXTURE_DEPTH_SIZE = 34890;

  /// from: static public final int GL_TEXTURE_DEPTH_TYPE
  static const GL_TEXTURE_DEPTH_TYPE = 35862;

  /// from: static public final int GL_TEXTURE_FETCH_BARRIER_BIT
  static const GL_TEXTURE_FETCH_BARRIER_BIT = 8;

  /// from: static public final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
  static const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127;

  /// from: static public final int GL_TEXTURE_GREEN_SIZE
  static const GL_TEXTURE_GREEN_SIZE = 32861;

  /// from: static public final int GL_TEXTURE_GREEN_TYPE
  static const GL_TEXTURE_GREEN_TYPE = 35857;

  /// from: static public final int GL_TEXTURE_HEIGHT
  static const GL_TEXTURE_HEIGHT = 4097;

  /// from: static public final int GL_TEXTURE_INTERNAL_FORMAT
  static const GL_TEXTURE_INTERNAL_FORMAT = 4099;

  /// from: static public final int GL_TEXTURE_RED_SIZE
  static const GL_TEXTURE_RED_SIZE = 32860;

  /// from: static public final int GL_TEXTURE_RED_TYPE
  static const GL_TEXTURE_RED_TYPE = 35856;

  /// from: static public final int GL_TEXTURE_SAMPLES
  static const GL_TEXTURE_SAMPLES = 37126;

  /// from: static public final int GL_TEXTURE_SHARED_SIZE
  static const GL_TEXTURE_SHARED_SIZE = 35903;

  /// from: static public final int GL_TEXTURE_STENCIL_SIZE
  static const GL_TEXTURE_STENCIL_SIZE = 35057;

  /// from: static public final int GL_TEXTURE_UPDATE_BARRIER_BIT
  static const GL_TEXTURE_UPDATE_BARRIER_BIT = 256;

  /// from: static public final int GL_TEXTURE_WIDTH
  static const GL_TEXTURE_WIDTH = 4096;

  /// from: static public final int GL_TOP_LEVEL_ARRAY_SIZE
  static const GL_TOP_LEVEL_ARRAY_SIZE = 37644;

  /// from: static public final int GL_TOP_LEVEL_ARRAY_STRIDE
  static const GL_TOP_LEVEL_ARRAY_STRIDE = 37645;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT
  static const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 2048;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_VARYING
  static const GL_TRANSFORM_FEEDBACK_VARYING = 37620;

  /// from: static public final int GL_TYPE
  static const GL_TYPE = 37626;

  /// from: static public final int GL_UNIFORM
  static const GL_UNIFORM = 37601;

  /// from: static public final int GL_UNIFORM_BARRIER_BIT
  static const GL_UNIFORM_BARRIER_BIT = 4;

  /// from: static public final int GL_UNIFORM_BLOCK
  static const GL_UNIFORM_BLOCK = 37602;

  /// from: static public final int GL_UNSIGNED_INT_ATOMIC_COUNTER
  static const GL_UNSIGNED_INT_ATOMIC_COUNTER = 37595;

  /// from: static public final int GL_UNSIGNED_INT_IMAGE_2D
  static const GL_UNSIGNED_INT_IMAGE_2D = 36963;

  /// from: static public final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY
  static const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 36969;

  /// from: static public final int GL_UNSIGNED_INT_IMAGE_3D
  static const GL_UNSIGNED_INT_IMAGE_3D = 36964;

  /// from: static public final int GL_UNSIGNED_INT_IMAGE_CUBE
  static const GL_UNSIGNED_INT_IMAGE_CUBE = 36966;

  /// from: static public final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
  static const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130;

  /// from: static public final int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
  static const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 1;

  /// from: static public final int GL_VERTEX_ATTRIB_BINDING
  static const GL_VERTEX_ATTRIB_BINDING = 33492;

  /// from: static public final int GL_VERTEX_ATTRIB_RELATIVE_OFFSET
  static const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493;

  /// from: static public final int GL_VERTEX_BINDING_BUFFER
  static const GL_VERTEX_BINDING_BUFFER = 36687;

  /// from: static public final int GL_VERTEX_BINDING_DIVISOR
  static const GL_VERTEX_BINDING_DIVISOR = 33494;

  /// from: static public final int GL_VERTEX_BINDING_OFFSET
  static const GL_VERTEX_BINDING_OFFSET = 33495;

  /// from: static public final int GL_VERTEX_BINDING_STRIDE
  static const GL_VERTEX_BINDING_STRIDE = 33496;

  /// from: static public final int GL_VERTEX_SHADER_BIT
  static const GL_VERTEX_SHADER_BIT = 1;

  /// from: static public final int GL_WRITE_ONLY
  static const GL_WRITE_ONLY = 35001;

  static final _id_glDispatchCompute = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDispatchCompute", "(III)V");

  /// from: static public native void glDispatchCompute(int num_groups_x, int num_groups_y, int num_groups_z)
  static void glDispatchCompute(
          int num_groups_x, int num_groups_y, int num_groups_z) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDispatchCompute,
          jni.JniType.voidType,
          [num_groups_x, num_groups_y, num_groups_z]).check();

  static final _id_glDispatchComputeIndirect = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDispatchComputeIndirect", "(J)V");

  /// from: static public native void glDispatchComputeIndirect(long indirect)
  static void glDispatchComputeIndirect(int indirect) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDispatchComputeIndirect,
          jni.JniType.voidType,
          [indirect]).check();

  static final _id_glDrawArraysIndirect = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDrawArraysIndirect", "(IJ)V");

  /// from: static public native void glDrawArraysIndirect(int mode, long indirect)
  static void glDrawArraysIndirect(int mode, int indirect) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDrawArraysIndirect,
          jni.JniType.voidType, [mode, indirect]).check();

  static final _id_glDrawElementsIndirect = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDrawElementsIndirect", "(IIJ)V");

  /// from: static public native void glDrawElementsIndirect(int mode, int type, long indirect)
  static void glDrawElementsIndirect(int mode, int type, int indirect) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDrawElementsIndirect,
          jni.JniType.voidType,
          [mode, type, indirect]).check();

  static final _id_glFramebufferParameteri = jniAccessors.getStaticMethodIDOf(
      _classRef, "glFramebufferParameteri", "(III)V");

  /// from: static public native void glFramebufferParameteri(int target, int pname, int param)
  static void glFramebufferParameteri(int target, int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glFramebufferParameteri,
          jni.JniType.voidType,
          [target, pname, param]).check();

  static final _id_glGetFramebufferParameteriv =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glGetFramebufferParameteriv", "(II[II)V");

  /// from: static public native void glGetFramebufferParameteriv(int target, int pname, int[] params, int offset)
  static void glGetFramebufferParameteriv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetFramebufferParameteriv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetFramebufferParameteriv1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetFramebufferParameteriv",
          "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetFramebufferParameteriv(int target, int pname, java.nio.IntBuffer params)
  static void glGetFramebufferParameteriv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetFramebufferParameteriv1,
          jni.JniType.voidType,
          [target, pname, params.reference]).check();

  static final _id_glGetProgramInterfaceiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetProgramInterfaceiv", "(III[II)V");

  /// from: static public native void glGetProgramInterfaceiv(int program, int programInterface, int pname, int[] params, int offset)
  static void glGetProgramInterfaceiv(int program, int programInterface,
          int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetProgramInterfaceiv,
          jni.JniType.voidType,
          [program, programInterface, pname, params.reference, offset]).check();

  static final _id_glGetProgramInterfaceiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetProgramInterfaceiv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetProgramInterfaceiv(int program, int programInterface, int pname, java.nio.IntBuffer params)
  static void glGetProgramInterfaceiv1(
          int program, int programInterface, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetProgramInterfaceiv1,
          jni.JniType.voidType,
          [program, programInterface, pname, params.reference]).check();

  static final _id_glGetProgramResourceIndex = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetProgramResourceIndex", "(IILjava/lang/String;)I");

  /// from: static public native int glGetProgramResourceIndex(int program, int programInterface, java.lang.String name)
  static int glGetProgramResourceIndex(
          int program, int programInterface, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetProgramResourceIndex,
          jni.JniType.intType,
          [program, programInterface, name.reference]).integer;

  static final _id_glGetProgramResourceName = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetProgramResourceName", "(III)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetProgramResourceName(int program, int programInterface, int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetProgramResourceName(
          int program, int programInterface, int index) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetProgramResourceName,
          jni.JniType.objectType,
          [program, programInterface, index]).object);

  static final _id_glGetProgramResourceiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetProgramResourceiv", "(IIII[III[II[II)V");

  /// from: static public native void glGetProgramResourceiv(int program, int programInterface, int index, int propCount, int[] props, int propsOffset, int bufSize, int[] length, int lengthOffset, int[] params, int paramsOffset)
  static void glGetProgramResourceiv(
          int program,
          int programInterface,
          int index,
          int propCount,
          jni.JniObject props,
          int propsOffset,
          int bufSize,
          jni.JniObject length,
          int lengthOffset,
          jni.JniObject params,
          int paramsOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetProgramResourceiv, jni.JniType.voidType, [
        program,
        programInterface,
        index,
        propCount,
        props.reference,
        propsOffset,
        bufSize,
        length.reference,
        lengthOffset,
        params.reference,
        paramsOffset
      ]).check();

  static final _id_glGetProgramResourceiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "glGetProgramResourceiv",
      "(IIIILjava/nio/IntBuffer;ILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)V");

  /// from: static public native void glGetProgramResourceiv(int program, int programInterface, int index, int propCount, java.nio.IntBuffer props, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer params)
  static void glGetProgramResourceiv1(
          int program,
          int programInterface,
          int index,
          int propCount,
          jni.JniObject props,
          int bufSize,
          jni.JniObject length,
          jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetProgramResourceiv1, jni.JniType.voidType, [
        program,
        programInterface,
        index,
        propCount,
        props.reference,
        bufSize,
        length.reference,
        params.reference
      ]).check();

  static final _id_glGetProgramResourceLocation =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glGetProgramResourceLocation", "(IILjava/lang/String;)I");

  /// from: static public native int glGetProgramResourceLocation(int program, int programInterface, java.lang.String name)
  static int glGetProgramResourceLocation(
          int program, int programInterface, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetProgramResourceLocation,
          jni.JniType.intType,
          [program, programInterface, name.reference]).integer;

  static final _id_glUseProgramStages = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUseProgramStages", "(III)V");

  /// from: static public native void glUseProgramStages(int pipeline, int stages, int program)
  static void glUseProgramStages(int pipeline, int stages, int program) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUseProgramStages,
          jni.JniType.voidType, [pipeline, stages, program]).check();

  static final _id_glActiveShaderProgram = jniAccessors.getStaticMethodIDOf(
      _classRef, "glActiveShaderProgram", "(II)V");

  /// from: static public native void glActiveShaderProgram(int pipeline, int program)
  static void glActiveShaderProgram(int pipeline, int program) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glActiveShaderProgram,
          jni.JniType.voidType,
          [pipeline, program]).check();

  static final _id_glCreateShaderProgramv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCreateShaderProgramv", "(I[Ljava/lang/String;)I");

  /// from: static public native int glCreateShaderProgramv(int type, java.lang.String[] strings)
  static int glCreateShaderProgramv(int type, jni.JniObject strings) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glCreateShaderProgramv,
          jni.JniType.intType,
          [type, strings.reference]).integer;

  static final _id_glBindProgramPipeline = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBindProgramPipeline", "(I)V");

  /// from: static public native void glBindProgramPipeline(int pipeline)
  static void glBindProgramPipeline(int pipeline) =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glBindProgramPipeline, jni.JniType.voidType, [pipeline]).check();

  static final _id_glDeleteProgramPipelines = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteProgramPipelines", "(I[II)V");

  /// from: static public native void glDeleteProgramPipelines(int n, int[] pipelines, int offset)
  static void glDeleteProgramPipelines(
          int n, jni.JniObject pipelines, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDeleteProgramPipelines,
          jni.JniType.voidType,
          [n, pipelines.reference, offset]).check();

  static final _id_glDeleteProgramPipelines1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteProgramPipelines", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDeleteProgramPipelines(int n, java.nio.IntBuffer pipelines)
  static void glDeleteProgramPipelines1(int n, jni.JniObject pipelines) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDeleteProgramPipelines1,
          jni.JniType.voidType,
          [n, pipelines.reference]).check();

  static final _id_glGenProgramPipelines = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenProgramPipelines", "(I[II)V");

  /// from: static public native void glGenProgramPipelines(int n, int[] pipelines, int offset)
  static void glGenProgramPipelines(
          int n, jni.JniObject pipelines, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGenProgramPipelines,
          jni.JniType.voidType,
          [n, pipelines.reference, offset]).check();

  static final _id_glGenProgramPipelines1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenProgramPipelines", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGenProgramPipelines(int n, java.nio.IntBuffer pipelines)
  static void glGenProgramPipelines1(int n, jni.JniObject pipelines) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGenProgramPipelines1,
          jni.JniType.voidType,
          [n, pipelines.reference]).check();

  static final _id_glIsProgramPipeline = jniAccessors.getStaticMethodIDOf(
      _classRef, "glIsProgramPipeline", "(I)Z");

  /// from: static public native boolean glIsProgramPipeline(int pipeline)
  static bool glIsProgramPipeline(int pipeline) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glIsProgramPipeline,
          jni.JniType.booleanType, [pipeline]).boolean;

  static final _id_glGetProgramPipelineiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetProgramPipelineiv", "(II[II)V");

  /// from: static public native void glGetProgramPipelineiv(int pipeline, int pname, int[] params, int offset)
  static void glGetProgramPipelineiv(
          int pipeline, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetProgramPipelineiv,
          jni.JniType.voidType,
          [pipeline, pname, params.reference, offset]).check();

  static final _id_glGetProgramPipelineiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetProgramPipelineiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetProgramPipelineiv(int pipeline, int pname, java.nio.IntBuffer params)
  static void glGetProgramPipelineiv1(
          int pipeline, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetProgramPipelineiv1,
          jni.JniType.voidType,
          [pipeline, pname, params.reference]).check();

  static final _id_glProgramUniform1i = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform1i", "(III)V");

  /// from: static public native void glProgramUniform1i(int program, int location, int v0)
  static void glProgramUniform1i(int program, int location, int v0) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform1i,
          jni.JniType.voidType, [program, location, v0]).check();

  static final _id_glProgramUniform2i = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform2i", "(IIII)V");

  /// from: static public native void glProgramUniform2i(int program, int location, int v0, int v1)
  static void glProgramUniform2i(int program, int location, int v0, int v1) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform2i,
          jni.JniType.voidType, [program, location, v0, v1]).check();

  static final _id_glProgramUniform3i = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform3i", "(IIIII)V");

  /// from: static public native void glProgramUniform3i(int program, int location, int v0, int v1, int v2)
  static void glProgramUniform3i(
          int program, int location, int v0, int v1, int v2) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform3i,
          jni.JniType.voidType, [program, location, v0, v1, v2]).check();

  static final _id_glProgramUniform4i = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform4i", "(IIIIII)V");

  /// from: static public native void glProgramUniform4i(int program, int location, int v0, int v1, int v2, int v3)
  static void glProgramUniform4i(
          int program, int location, int v0, int v1, int v2, int v3) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform4i,
          jni.JniType.voidType, [program, location, v0, v1, v2, v3]).check();

  static final _id_glProgramUniform1ui = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform1ui", "(III)V");

  /// from: static public native void glProgramUniform1ui(int program, int location, int v0)
  static void glProgramUniform1ui(int program, int location, int v0) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform1ui,
          jni.JniType.voidType, [program, location, v0]).check();

  static final _id_glProgramUniform2ui = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform2ui", "(IIII)V");

  /// from: static public native void glProgramUniform2ui(int program, int location, int v0, int v1)
  static void glProgramUniform2ui(int program, int location, int v0, int v1) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform2ui,
          jni.JniType.voidType, [program, location, v0, v1]).check();

  static final _id_glProgramUniform3ui = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform3ui", "(IIIII)V");

  /// from: static public native void glProgramUniform3ui(int program, int location, int v0, int v1, int v2)
  static void glProgramUniform3ui(
          int program, int location, int v0, int v1, int v2) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform3ui,
          jni.JniType.voidType, [program, location, v0, v1, v2]).check();

  static final _id_glProgramUniform4ui = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform4ui", "(IIIIII)V");

  /// from: static public native void glProgramUniform4ui(int program, int location, int v0, int v1, int v2, int v3)
  static void glProgramUniform4ui(
          int program, int location, int v0, int v1, int v2, int v3) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform4ui,
          jni.JniType.voidType, [program, location, v0, v1, v2, v3]).check();

  static final _id_glProgramUniform1f = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform1f", "(IIF)V");

  /// from: static public native void glProgramUniform1f(int program, int location, float v0)
  static void glProgramUniform1f(int program, int location, double v0) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform1f,
          jni.JniType.voidType, [program, location, v0]).check();

  static final _id_glProgramUniform2f = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform2f", "(IIFF)V");

  /// from: static public native void glProgramUniform2f(int program, int location, float v0, float v1)
  static void glProgramUniform2f(
          int program, int location, double v0, double v1) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform2f,
          jni.JniType.voidType, [program, location, v0, v1]).check();

  static final _id_glProgramUniform3f = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform3f", "(IIFFF)V");

  /// from: static public native void glProgramUniform3f(int program, int location, float v0, float v1, float v2)
  static void glProgramUniform3f(
          int program, int location, double v0, double v1, double v2) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform3f,
          jni.JniType.voidType, [program, location, v0, v1, v2]).check();

  static final _id_glProgramUniform4f = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform4f", "(IIFFFF)V");

  /// from: static public native void glProgramUniform4f(int program, int location, float v0, float v1, float v2, float v3)
  static void glProgramUniform4f(int program, int location, double v0,
          double v1, double v2, double v3) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramUniform4f,
          jni.JniType.voidType, [program, location, v0, v1, v2, v3]).check();

  static final _id_glProgramUniform1iv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform1iv", "(III[II)V");

  /// from: static public native void glProgramUniform1iv(int program, int location, int count, int[] value, int offset)
  static void glProgramUniform1iv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform1iv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform1iv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform1iv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glProgramUniform1iv(int program, int location, int count, java.nio.IntBuffer value)
  static void glProgramUniform1iv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform1iv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniform2iv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform2iv", "(III[II)V");

  /// from: static public native void glProgramUniform2iv(int program, int location, int count, int[] value, int offset)
  static void glProgramUniform2iv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform2iv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform2iv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform2iv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glProgramUniform2iv(int program, int location, int count, java.nio.IntBuffer value)
  static void glProgramUniform2iv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform2iv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniform3iv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform3iv", "(III[II)V");

  /// from: static public native void glProgramUniform3iv(int program, int location, int count, int[] value, int offset)
  static void glProgramUniform3iv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform3iv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform3iv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform3iv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glProgramUniform3iv(int program, int location, int count, java.nio.IntBuffer value)
  static void glProgramUniform3iv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform3iv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniform4iv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform4iv", "(III[II)V");

  /// from: static public native void glProgramUniform4iv(int program, int location, int count, int[] value, int offset)
  static void glProgramUniform4iv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform4iv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform4iv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform4iv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glProgramUniform4iv(int program, int location, int count, java.nio.IntBuffer value)
  static void glProgramUniform4iv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform4iv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniform1uiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform1uiv", "(III[II)V");

  /// from: static public native void glProgramUniform1uiv(int program, int location, int count, int[] value, int offset)
  static void glProgramUniform1uiv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform1uiv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform1uiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform1uiv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glProgramUniform1uiv(int program, int location, int count, java.nio.IntBuffer value)
  static void glProgramUniform1uiv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform1uiv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniform2uiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform2uiv", "(III[II)V");

  /// from: static public native void glProgramUniform2uiv(int program, int location, int count, int[] value, int offset)
  static void glProgramUniform2uiv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform2uiv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform2uiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform2uiv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glProgramUniform2uiv(int program, int location, int count, java.nio.IntBuffer value)
  static void glProgramUniform2uiv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform2uiv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniform3uiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform3uiv", "(III[II)V");

  /// from: static public native void glProgramUniform3uiv(int program, int location, int count, int[] value, int offset)
  static void glProgramUniform3uiv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform3uiv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform3uiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform3uiv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glProgramUniform3uiv(int program, int location, int count, java.nio.IntBuffer value)
  static void glProgramUniform3uiv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform3uiv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniform4uiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform4uiv", "(III[II)V");

  /// from: static public native void glProgramUniform4uiv(int program, int location, int count, int[] value, int offset)
  static void glProgramUniform4uiv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform4uiv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform4uiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform4uiv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glProgramUniform4uiv(int program, int location, int count, java.nio.IntBuffer value)
  static void glProgramUniform4uiv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform4uiv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniform1fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform1fv", "(III[FI)V");

  /// from: static public native void glProgramUniform1fv(int program, int location, int count, float[] value, int offset)
  static void glProgramUniform1fv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform1fv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform1fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform1fv", "(IIILjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniform1fv(int program, int location, int count, java.nio.FloatBuffer value)
  static void glProgramUniform1fv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform1fv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniform2fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform2fv", "(III[FI)V");

  /// from: static public native void glProgramUniform2fv(int program, int location, int count, float[] value, int offset)
  static void glProgramUniform2fv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform2fv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform2fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform2fv", "(IIILjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniform2fv(int program, int location, int count, java.nio.FloatBuffer value)
  static void glProgramUniform2fv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform2fv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniform3fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform3fv", "(III[FI)V");

  /// from: static public native void glProgramUniform3fv(int program, int location, int count, float[] value, int offset)
  static void glProgramUniform3fv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform3fv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform3fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform3fv", "(IIILjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniform3fv(int program, int location, int count, java.nio.FloatBuffer value)
  static void glProgramUniform3fv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform3fv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniform4fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform4fv", "(III[FI)V");

  /// from: static public native void glProgramUniform4fv(int program, int location, int count, float[] value, int offset)
  static void glProgramUniform4fv(int program, int location, int count,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform4fv,
          jni.JniType.voidType,
          [program, location, count, value.reference, offset]).check();

  static final _id_glProgramUniform4fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniform4fv", "(IIILjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniform4fv(int program, int location, int count, java.nio.FloatBuffer value)
  static void glProgramUniform4fv1(
          int program, int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniform4fv1,
          jni.JniType.voidType,
          [program, location, count, value.reference]).check();

  static final _id_glProgramUniformMatrix2fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniformMatrix2fv", "(IIIZ[FI)V");

  /// from: static public native void glProgramUniformMatrix2fv(int program, int location, int count, boolean transpose, float[] value, int offset)
  static void glProgramUniformMatrix2fv(int program, int location, int count,
          bool transpose, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glProgramUniformMatrix2fv, jni.JniType.voidType, [
        program,
        location,
        count,
        transpose,
        value.reference,
        offset
      ]).check();

  static final _id_glProgramUniformMatrix2fv1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glProgramUniformMatrix2fv",
          "(IIIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniformMatrix2fv(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glProgramUniformMatrix2fv1(int program, int location, int count,
          bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniformMatrix2fv1,
          jni.JniType.voidType,
          [program, location, count, transpose, value.reference]).check();

  static final _id_glProgramUniformMatrix3fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniformMatrix3fv", "(IIIZ[FI)V");

  /// from: static public native void glProgramUniformMatrix3fv(int program, int location, int count, boolean transpose, float[] value, int offset)
  static void glProgramUniformMatrix3fv(int program, int location, int count,
          bool transpose, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glProgramUniformMatrix3fv, jni.JniType.voidType, [
        program,
        location,
        count,
        transpose,
        value.reference,
        offset
      ]).check();

  static final _id_glProgramUniformMatrix3fv1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glProgramUniformMatrix3fv",
          "(IIIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniformMatrix3fv(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glProgramUniformMatrix3fv1(int program, int location, int count,
          bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniformMatrix3fv1,
          jni.JniType.voidType,
          [program, location, count, transpose, value.reference]).check();

  static final _id_glProgramUniformMatrix4fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramUniformMatrix4fv", "(IIIZ[FI)V");

  /// from: static public native void glProgramUniformMatrix4fv(int program, int location, int count, boolean transpose, float[] value, int offset)
  static void glProgramUniformMatrix4fv(int program, int location, int count,
          bool transpose, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glProgramUniformMatrix4fv, jni.JniType.voidType, [
        program,
        location,
        count,
        transpose,
        value.reference,
        offset
      ]).check();

  static final _id_glProgramUniformMatrix4fv1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glProgramUniformMatrix4fv",
          "(IIIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniformMatrix4fv(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glProgramUniformMatrix4fv1(int program, int location, int count,
          bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniformMatrix4fv1,
          jni.JniType.voidType,
          [program, location, count, transpose, value.reference]).check();

  static final _id_glProgramUniformMatrix2x3fv =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glProgramUniformMatrix2x3fv", "(IIIZ[FI)V");

  /// from: static public native void glProgramUniformMatrix2x3fv(int program, int location, int count, boolean transpose, float[] value, int offset)
  static void glProgramUniformMatrix2x3fv(int program, int location, int count,
          bool transpose, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glProgramUniformMatrix2x3fv, jni.JniType.voidType, [
        program,
        location,
        count,
        transpose,
        value.reference,
        offset
      ]).check();

  static final _id_glProgramUniformMatrix2x3fv1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glProgramUniformMatrix2x3fv",
          "(IIIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniformMatrix2x3fv(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glProgramUniformMatrix2x3fv1(int program, int location, int count,
          bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniformMatrix2x3fv1,
          jni.JniType.voidType,
          [program, location, count, transpose, value.reference]).check();

  static final _id_glProgramUniformMatrix3x2fv =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glProgramUniformMatrix3x2fv", "(IIIZ[FI)V");

  /// from: static public native void glProgramUniformMatrix3x2fv(int program, int location, int count, boolean transpose, float[] value, int offset)
  static void glProgramUniformMatrix3x2fv(int program, int location, int count,
          bool transpose, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glProgramUniformMatrix3x2fv, jni.JniType.voidType, [
        program,
        location,
        count,
        transpose,
        value.reference,
        offset
      ]).check();

  static final _id_glProgramUniformMatrix3x2fv1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glProgramUniformMatrix3x2fv",
          "(IIIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniformMatrix3x2fv(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glProgramUniformMatrix3x2fv1(int program, int location, int count,
          bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniformMatrix3x2fv1,
          jni.JniType.voidType,
          [program, location, count, transpose, value.reference]).check();

  static final _id_glProgramUniformMatrix2x4fv =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glProgramUniformMatrix2x4fv", "(IIIZ[FI)V");

  /// from: static public native void glProgramUniformMatrix2x4fv(int program, int location, int count, boolean transpose, float[] value, int offset)
  static void glProgramUniformMatrix2x4fv(int program, int location, int count,
          bool transpose, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glProgramUniformMatrix2x4fv, jni.JniType.voidType, [
        program,
        location,
        count,
        transpose,
        value.reference,
        offset
      ]).check();

  static final _id_glProgramUniformMatrix2x4fv1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glProgramUniformMatrix2x4fv",
          "(IIIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniformMatrix2x4fv(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glProgramUniformMatrix2x4fv1(int program, int location, int count,
          bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniformMatrix2x4fv1,
          jni.JniType.voidType,
          [program, location, count, transpose, value.reference]).check();

  static final _id_glProgramUniformMatrix4x2fv =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glProgramUniformMatrix4x2fv", "(IIIZ[FI)V");

  /// from: static public native void glProgramUniformMatrix4x2fv(int program, int location, int count, boolean transpose, float[] value, int offset)
  static void glProgramUniformMatrix4x2fv(int program, int location, int count,
          bool transpose, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glProgramUniformMatrix4x2fv, jni.JniType.voidType, [
        program,
        location,
        count,
        transpose,
        value.reference,
        offset
      ]).check();

  static final _id_glProgramUniformMatrix4x2fv1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glProgramUniformMatrix4x2fv",
          "(IIIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniformMatrix4x2fv(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glProgramUniformMatrix4x2fv1(int program, int location, int count,
          bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniformMatrix4x2fv1,
          jni.JniType.voidType,
          [program, location, count, transpose, value.reference]).check();

  static final _id_glProgramUniformMatrix3x4fv =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glProgramUniformMatrix3x4fv", "(IIIZ[FI)V");

  /// from: static public native void glProgramUniformMatrix3x4fv(int program, int location, int count, boolean transpose, float[] value, int offset)
  static void glProgramUniformMatrix3x4fv(int program, int location, int count,
          bool transpose, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glProgramUniformMatrix3x4fv, jni.JniType.voidType, [
        program,
        location,
        count,
        transpose,
        value.reference,
        offset
      ]).check();

  static final _id_glProgramUniformMatrix3x4fv1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glProgramUniformMatrix3x4fv",
          "(IIIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniformMatrix3x4fv(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glProgramUniformMatrix3x4fv1(int program, int location, int count,
          bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniformMatrix3x4fv1,
          jni.JniType.voidType,
          [program, location, count, transpose, value.reference]).check();

  static final _id_glProgramUniformMatrix4x3fv =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glProgramUniformMatrix4x3fv", "(IIIZ[FI)V");

  /// from: static public native void glProgramUniformMatrix4x3fv(int program, int location, int count, boolean transpose, float[] value, int offset)
  static void glProgramUniformMatrix4x3fv(int program, int location, int count,
          bool transpose, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glProgramUniformMatrix4x3fv, jni.JniType.voidType, [
        program,
        location,
        count,
        transpose,
        value.reference,
        offset
      ]).check();

  static final _id_glProgramUniformMatrix4x3fv1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glProgramUniformMatrix4x3fv",
          "(IIIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glProgramUniformMatrix4x3fv(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glProgramUniformMatrix4x3fv1(int program, int location, int count,
          bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramUniformMatrix4x3fv1,
          jni.JniType.voidType,
          [program, location, count, transpose, value.reference]).check();

  static final _id_glValidateProgramPipeline = jniAccessors.getStaticMethodIDOf(
      _classRef, "glValidateProgramPipeline", "(I)V");

  /// from: static public native void glValidateProgramPipeline(int pipeline)
  static void glValidateProgramPipeline(int pipeline) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glValidateProgramPipeline,
          jni.JniType.voidType,
          [pipeline]).check();

  static final _id_glGetProgramPipelineInfoLog =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glGetProgramPipelineInfoLog", "(I)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetProgramPipelineInfoLog(int program)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetProgramPipelineInfoLog(int program) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetProgramPipelineInfoLog,
          jni.JniType.objectType,
          [program]).object);

  static final _id_glBindImageTexture = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBindImageTexture", "(IIIZIII)V");

  /// from: static public native void glBindImageTexture(int unit, int texture, int level, boolean layered, int layer, int access, int format)
  static void glBindImageTexture(int unit, int texture, int level, bool layered,
          int layer, int access, int format) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glBindImageTexture,
          jni.JniType.voidType,
          [unit, texture, level, layered, layer, access, format]).check();

  static final _id_glGetBooleani_v = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetBooleani_v", "(II[ZI)V");

  /// from: static public native void glGetBooleani_v(int target, int index, boolean[] data, int offset)
  static void glGetBooleani_v(
          int target, int index, jni.JniObject data, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetBooleani_v,
          jni.JniType.voidType,
          [target, index, data.reference, offset]).check();

  static final _id_glGetBooleani_v1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetBooleani_v", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetBooleani_v(int target, int index, java.nio.IntBuffer data)
  static void glGetBooleani_v1(int target, int index, jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetBooleani_v1,
          jni.JniType.voidType, [target, index, data.reference]).check();

  static final _id_glMemoryBarrier =
      jniAccessors.getStaticMethodIDOf(_classRef, "glMemoryBarrier", "(I)V");

  /// from: static public native void glMemoryBarrier(int barriers)
  static void glMemoryBarrier(int barriers) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMemoryBarrier,
          jni.JniType.voidType, [barriers]).check();

  static final _id_glMemoryBarrierByRegion = jniAccessors.getStaticMethodIDOf(
      _classRef, "glMemoryBarrierByRegion", "(I)V");

  /// from: static public native void glMemoryBarrierByRegion(int barriers)
  static void glMemoryBarrierByRegion(int barriers) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glMemoryBarrierByRegion,
          jni.JniType.voidType,
          [barriers]).check();

  static final _id_glTexStorage2DMultisample = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexStorage2DMultisample", "(IIIIIZ)V");

  /// from: static public native void glTexStorage2DMultisample(int target, int samples, int internalformat, int width, int height, boolean fixedsamplelocations)
  static void glTexStorage2DMultisample(
          int target,
          int samples,
          int internalformat,
          int width,
          int height,
          bool fixedsamplelocations) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTexStorage2DMultisample, jni.JniType.voidType, [
        target,
        samples,
        internalformat,
        width,
        height,
        fixedsamplelocations
      ]).check();

  static final _id_glGetMultisamplefv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetMultisamplefv", "(II[FI)V");

  /// from: static public native void glGetMultisamplefv(int pname, int index, float[] val, int offset)
  static void glGetMultisamplefv(
          int pname, int index, jni.JniObject val, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetMultisamplefv,
          jni.JniType.voidType, [pname, index, val.reference, offset]).check();

  static final _id_glGetMultisamplefv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetMultisamplefv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetMultisamplefv(int pname, int index, java.nio.FloatBuffer val)
  static void glGetMultisamplefv1(int pname, int index, jni.JniObject val) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetMultisamplefv1,
          jni.JniType.voidType, [pname, index, val.reference]).check();

  static final _id_glSampleMaski =
      jniAccessors.getStaticMethodIDOf(_classRef, "glSampleMaski", "(II)V");

  /// from: static public native void glSampleMaski(int maskNumber, int mask)
  static void glSampleMaski(int maskNumber, int mask) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glSampleMaski,
          jni.JniType.voidType, [maskNumber, mask]).check();

  static final _id_glGetTexLevelParameteriv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexLevelParameteriv", "(III[II)V");

  /// from: static public native void glGetTexLevelParameteriv(int target, int level, int pname, int[] params, int offset)
  static void glGetTexLevelParameteriv(
          int target, int level, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexLevelParameteriv,
          jni.JniType.voidType,
          [target, level, pname, params.reference, offset]).check();

  static final _id_glGetTexLevelParameteriv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexLevelParameteriv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetTexLevelParameteriv(int target, int level, int pname, java.nio.IntBuffer params)
  static void glGetTexLevelParameteriv1(
          int target, int level, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexLevelParameteriv1,
          jni.JniType.voidType,
          [target, level, pname, params.reference]).check();

  static final _id_glGetTexLevelParameterfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexLevelParameterfv", "(III[FI)V");

  /// from: static public native void glGetTexLevelParameterfv(int target, int level, int pname, float[] params, int offset)
  static void glGetTexLevelParameterfv(
          int target, int level, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexLevelParameterfv,
          jni.JniType.voidType,
          [target, level, pname, params.reference, offset]).check();

  static final _id_glGetTexLevelParameterfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexLevelParameterfv", "(IIILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetTexLevelParameterfv(int target, int level, int pname, java.nio.FloatBuffer params)
  static void glGetTexLevelParameterfv1(
          int target, int level, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexLevelParameterfv1,
          jni.JniType.voidType,
          [target, level, pname, params.reference]).check();

  static final _id_glBindVertexBuffer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBindVertexBuffer", "(IIJI)V");

  /// from: static public native void glBindVertexBuffer(int bindingindex, int buffer, long offset, int stride)
  static void glBindVertexBuffer(
          int bindingindex, int buffer, int offset, int stride) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindVertexBuffer,
          jni.JniType.voidType, [bindingindex, buffer, offset, stride]).check();

  static final _id_glVertexAttribFormat = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribFormat", "(IIIZI)V");

  /// from: static public native void glVertexAttribFormat(int attribindex, int size, int type, boolean normalized, int relativeoffset)
  static void glVertexAttribFormat(int attribindex, int size, int type,
          bool normalized, int relativeoffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glVertexAttribFormat,
          jni.JniType.voidType,
          [attribindex, size, type, normalized, relativeoffset]).check();

  static final _id_glVertexAttribIFormat = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribIFormat", "(IIII)V");

  /// from: static public native void glVertexAttribIFormat(int attribindex, int size, int type, int relativeoffset)
  static void glVertexAttribIFormat(
          int attribindex, int size, int type, int relativeoffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glVertexAttribIFormat,
          jni.JniType.voidType,
          [attribindex, size, type, relativeoffset]).check();

  static final _id_glVertexAttribBinding = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribBinding", "(II)V");

  /// from: static public native void glVertexAttribBinding(int attribindex, int bindingindex)
  static void glVertexAttribBinding(int attribindex, int bindingindex) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glVertexAttribBinding,
          jni.JniType.voidType,
          [attribindex, bindingindex]).check();

  static final _id_glVertexBindingDivisor = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexBindingDivisor", "(II)V");

  /// from: static public native void glVertexBindingDivisor(int bindingindex, int divisor)
  static void glVertexBindingDivisor(int bindingindex, int divisor) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glVertexBindingDivisor,
          jni.JniType.voidType,
          [bindingindex, divisor]).check();
}
