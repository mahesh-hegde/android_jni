// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "GLES10.dart" as gles10_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.opengl.GLES11
class GLES11 extends gles10_.GLES10 {
  static final _classRef = jniAccessors.getClassOf("android/opengl/GLES11");
  GLES11.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int GL_ACTIVE_TEXTURE
  static const GL_ACTIVE_TEXTURE = 34016;

  /// from: static public final int GL_ADD_SIGNED
  static const GL_ADD_SIGNED = 34164;

  /// from: static public final int GL_ALPHA_SCALE
  static const GL_ALPHA_SCALE = 3356;

  /// from: static public final int GL_ALPHA_TEST_FUNC
  static const GL_ALPHA_TEST_FUNC = 3009;

  /// from: static public final int GL_ALPHA_TEST_REF
  static const GL_ALPHA_TEST_REF = 3010;

  /// from: static public final int GL_ARRAY_BUFFER
  static const GL_ARRAY_BUFFER = 34962;

  /// from: static public final int GL_ARRAY_BUFFER_BINDING
  static const GL_ARRAY_BUFFER_BINDING = 34964;

  /// from: static public final int GL_BLEND_DST
  static const GL_BLEND_DST = 3040;

  /// from: static public final int GL_BLEND_SRC
  static const GL_BLEND_SRC = 3041;

  /// from: static public final int GL_BUFFER_ACCESS
  static const GL_BUFFER_ACCESS = 35003;

  /// from: static public final int GL_BUFFER_SIZE
  static const GL_BUFFER_SIZE = 34660;

  /// from: static public final int GL_BUFFER_USAGE
  static const GL_BUFFER_USAGE = 34661;

  /// from: static public final int GL_CLIENT_ACTIVE_TEXTURE
  static const GL_CLIENT_ACTIVE_TEXTURE = 34017;

  /// from: static public final int GL_CLIP_PLANE0
  static const GL_CLIP_PLANE0 = 12288;

  /// from: static public final int GL_CLIP_PLANE1
  static const GL_CLIP_PLANE1 = 12289;

  /// from: static public final int GL_CLIP_PLANE2
  static const GL_CLIP_PLANE2 = 12290;

  /// from: static public final int GL_CLIP_PLANE3
  static const GL_CLIP_PLANE3 = 12291;

  /// from: static public final int GL_CLIP_PLANE4
  static const GL_CLIP_PLANE4 = 12292;

  /// from: static public final int GL_CLIP_PLANE5
  static const GL_CLIP_PLANE5 = 12293;

  /// from: static public final int GL_COLOR_ARRAY_BUFFER_BINDING
  static const GL_COLOR_ARRAY_BUFFER_BINDING = 34968;

  /// from: static public final int GL_COLOR_ARRAY_POINTER
  static const GL_COLOR_ARRAY_POINTER = 32912;

  /// from: static public final int GL_COLOR_ARRAY_SIZE
  static const GL_COLOR_ARRAY_SIZE = 32897;

  /// from: static public final int GL_COLOR_ARRAY_STRIDE
  static const GL_COLOR_ARRAY_STRIDE = 32899;

  /// from: static public final int GL_COLOR_ARRAY_TYPE
  static const GL_COLOR_ARRAY_TYPE = 32898;

  /// from: static public final int GL_COLOR_CLEAR_VALUE
  static const GL_COLOR_CLEAR_VALUE = 3106;

  /// from: static public final int GL_COLOR_WRITEMASK
  static const GL_COLOR_WRITEMASK = 3107;

  /// from: static public final int GL_COMBINE
  static const GL_COMBINE = 34160;

  /// from: static public final int GL_COMBINE_ALPHA
  static const GL_COMBINE_ALPHA = 34162;

  /// from: static public final int GL_COMBINE_RGB
  static const GL_COMBINE_RGB = 34161;

  /// from: static public final int GL_CONSTANT
  static const GL_CONSTANT = 34166;

  /// from: static public final int GL_COORD_REPLACE_OES
  static const GL_COORD_REPLACE_OES = 34914;

  /// from: static public final int GL_CULL_FACE_MODE
  static const GL_CULL_FACE_MODE = 2885;

  /// from: static public final int GL_CURRENT_COLOR
  static const GL_CURRENT_COLOR = 2816;

  /// from: static public final int GL_CURRENT_NORMAL
  static const GL_CURRENT_NORMAL = 2818;

  /// from: static public final int GL_CURRENT_TEXTURE_COORDS
  static const GL_CURRENT_TEXTURE_COORDS = 2819;

  /// from: static public final int GL_DEPTH_CLEAR_VALUE
  static const GL_DEPTH_CLEAR_VALUE = 2931;

  /// from: static public final int GL_DEPTH_FUNC
  static const GL_DEPTH_FUNC = 2932;

  /// from: static public final int GL_DEPTH_RANGE
  static const GL_DEPTH_RANGE = 2928;

  /// from: static public final int GL_DEPTH_WRITEMASK
  static const GL_DEPTH_WRITEMASK = 2930;

  /// from: static public final int GL_DOT3_RGB
  static const GL_DOT3_RGB = 34478;

  /// from: static public final int GL_DOT3_RGBA
  static const GL_DOT3_RGBA = 34479;

  /// from: static public final int GL_DYNAMIC_DRAW
  static const GL_DYNAMIC_DRAW = 35048;

  /// from: static public final int GL_ELEMENT_ARRAY_BUFFER
  static const GL_ELEMENT_ARRAY_BUFFER = 34963;

  /// from: static public final int GL_ELEMENT_ARRAY_BUFFER_BINDING
  static const GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;

  /// from: static public final int GL_FRONT_FACE
  static const GL_FRONT_FACE = 2886;

  /// from: static public final int GL_GENERATE_MIPMAP
  static const GL_GENERATE_MIPMAP = 33169;

  /// from: static public final int GL_GENERATE_MIPMAP_HINT
  static const GL_GENERATE_MIPMAP_HINT = 33170;

  /// from: static public final int GL_INTERPOLATE
  static const GL_INTERPOLATE = 34165;

  /// from: static public final int GL_LINE_WIDTH
  static const GL_LINE_WIDTH = 2849;

  /// from: static public final int GL_LOGIC_OP_MODE
  static const GL_LOGIC_OP_MODE = 3056;

  /// from: static public final int GL_MATRIX_MODE
  static const GL_MATRIX_MODE = 2976;

  /// from: static public final int GL_MAX_CLIP_PLANES
  static const GL_MAX_CLIP_PLANES = 3378;

  /// from: static public final int GL_MODELVIEW_MATRIX
  static const GL_MODELVIEW_MATRIX = 2982;

  /// from: static public final int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES
  static const GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 35213;

  /// from: static public final int GL_MODELVIEW_STACK_DEPTH
  static const GL_MODELVIEW_STACK_DEPTH = 2979;

  /// from: static public final int GL_NORMAL_ARRAY_BUFFER_BINDING
  static const GL_NORMAL_ARRAY_BUFFER_BINDING = 34967;

  /// from: static public final int GL_NORMAL_ARRAY_POINTER
  static const GL_NORMAL_ARRAY_POINTER = 32911;

  /// from: static public final int GL_NORMAL_ARRAY_STRIDE
  static const GL_NORMAL_ARRAY_STRIDE = 32895;

  /// from: static public final int GL_NORMAL_ARRAY_TYPE
  static const GL_NORMAL_ARRAY_TYPE = 32894;

  /// from: static public final int GL_OPERAND0_ALPHA
  static const GL_OPERAND0_ALPHA = 34200;

  /// from: static public final int GL_OPERAND0_RGB
  static const GL_OPERAND0_RGB = 34192;

  /// from: static public final int GL_OPERAND1_ALPHA
  static const GL_OPERAND1_ALPHA = 34201;

  /// from: static public final int GL_OPERAND1_RGB
  static const GL_OPERAND1_RGB = 34193;

  /// from: static public final int GL_OPERAND2_ALPHA
  static const GL_OPERAND2_ALPHA = 34202;

  /// from: static public final int GL_OPERAND2_RGB
  static const GL_OPERAND2_RGB = 34194;

  /// from: static public final int GL_POINT_DISTANCE_ATTENUATION
  static const GL_POINT_DISTANCE_ATTENUATION = 33065;

  /// from: static public final int GL_POINT_FADE_THRESHOLD_SIZE
  static const GL_POINT_FADE_THRESHOLD_SIZE1 = 33064;

  /// from: static public final int GL_POINT_SIZE
  static const GL_POINT_SIZE1 = 2833;

  /// from: static public final int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES
  static const GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 35743;

  /// from: static public final int GL_POINT_SIZE_ARRAY_OES
  static const GL_POINT_SIZE_ARRAY_OES = 35740;

  /// from: static public final int GL_POINT_SIZE_ARRAY_POINTER_OES
  static const GL_POINT_SIZE_ARRAY_POINTER_OES = 35212;

  /// from: static public final int GL_POINT_SIZE_ARRAY_STRIDE_OES
  static const GL_POINT_SIZE_ARRAY_STRIDE_OES = 35211;

  /// from: static public final int GL_POINT_SIZE_ARRAY_TYPE_OES
  static const GL_POINT_SIZE_ARRAY_TYPE_OES = 35210;

  /// from: static public final int GL_POINT_SIZE_MAX
  static const GL_POINT_SIZE_MAX = 33063;

  /// from: static public final int GL_POINT_SIZE_MIN
  static const GL_POINT_SIZE_MIN = 33062;

  /// from: static public final int GL_POINT_SPRITE_OES
  static const GL_POINT_SPRITE_OES = 34913;

  /// from: static public final int GL_POLYGON_OFFSET_FACTOR
  static const GL_POLYGON_OFFSET_FACTOR = 32824;

  /// from: static public final int GL_POLYGON_OFFSET_UNITS
  static const GL_POLYGON_OFFSET_UNITS = 10752;

  /// from: static public final int GL_PREVIOUS
  static const GL_PREVIOUS = 34168;

  /// from: static public final int GL_PRIMARY_COLOR
  static const GL_PRIMARY_COLOR = 34167;

  /// from: static public final int GL_PROJECTION_MATRIX
  static const GL_PROJECTION_MATRIX = 2983;

  /// from: static public final int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES
  static const GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 35214;

  /// from: static public final int GL_PROJECTION_STACK_DEPTH
  static const GL_PROJECTION_STACK_DEPTH = 2980;

  /// from: static public final int GL_RGB_SCALE
  static const GL_RGB_SCALE = 34163;

  /// from: static public final int GL_SAMPLES
  static const GL_SAMPLES = 32937;

  /// from: static public final int GL_SAMPLE_BUFFERS
  static const GL_SAMPLE_BUFFERS = 32936;

  /// from: static public final int GL_SAMPLE_COVERAGE_INVERT
  static const GL_SAMPLE_COVERAGE_INVERT = 32939;

  /// from: static public final int GL_SAMPLE_COVERAGE_VALUE
  static const GL_SAMPLE_COVERAGE_VALUE = 32938;

  /// from: static public final int GL_SCISSOR_BOX
  static const GL_SCISSOR_BOX = 3088;

  /// from: static public final int GL_SHADE_MODEL
  static const GL_SHADE_MODEL = 2900;

  /// from: static public final int GL_SRC0_ALPHA
  static const GL_SRC0_ALPHA = 34184;

  /// from: static public final int GL_SRC0_RGB
  static const GL_SRC0_RGB = 34176;

  /// from: static public final int GL_SRC1_ALPHA
  static const GL_SRC1_ALPHA = 34185;

  /// from: static public final int GL_SRC1_RGB
  static const GL_SRC1_RGB = 34177;

  /// from: static public final int GL_SRC2_ALPHA
  static const GL_SRC2_ALPHA = 34186;

  /// from: static public final int GL_SRC2_RGB
  static const GL_SRC2_RGB = 34178;

  /// from: static public final int GL_STATIC_DRAW
  static const GL_STATIC_DRAW = 35044;

  /// from: static public final int GL_STENCIL_CLEAR_VALUE
  static const GL_STENCIL_CLEAR_VALUE = 2961;

  /// from: static public final int GL_STENCIL_FAIL
  static const GL_STENCIL_FAIL = 2964;

  /// from: static public final int GL_STENCIL_FUNC
  static const GL_STENCIL_FUNC = 2962;

  /// from: static public final int GL_STENCIL_PASS_DEPTH_FAIL
  static const GL_STENCIL_PASS_DEPTH_FAIL = 2965;

  /// from: static public final int GL_STENCIL_PASS_DEPTH_PASS
  static const GL_STENCIL_PASS_DEPTH_PASS = 2966;

  /// from: static public final int GL_STENCIL_REF
  static const GL_STENCIL_REF = 2967;

  /// from: static public final int GL_STENCIL_VALUE_MASK
  static const GL_STENCIL_VALUE_MASK = 2963;

  /// from: static public final int GL_STENCIL_WRITEMASK
  static const GL_STENCIL_WRITEMASK = 2968;

  /// from: static public final int GL_SUBTRACT
  static const GL_SUBTRACT = 34023;

  /// from: static public final int GL_TEXTURE_BINDING_2D
  static const GL_TEXTURE_BINDING_2D = 32873;

  /// from: static public final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
  static const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970;

  /// from: static public final int GL_TEXTURE_COORD_ARRAY_POINTER
  static const GL_TEXTURE_COORD_ARRAY_POINTER = 32914;

  /// from: static public final int GL_TEXTURE_COORD_ARRAY_SIZE
  static const GL_TEXTURE_COORD_ARRAY_SIZE = 32904;

  /// from: static public final int GL_TEXTURE_COORD_ARRAY_STRIDE
  static const GL_TEXTURE_COORD_ARRAY_STRIDE = 32906;

  /// from: static public final int GL_TEXTURE_COORD_ARRAY_TYPE
  static const GL_TEXTURE_COORD_ARRAY_TYPE = 32905;

  /// from: static public final int GL_TEXTURE_MATRIX
  static const GL_TEXTURE_MATRIX = 2984;

  /// from: static public final int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES
  static const GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 35215;

  /// from: static public final int GL_TEXTURE_STACK_DEPTH
  static const GL_TEXTURE_STACK_DEPTH = 2981;

  /// from: static public final int GL_VERTEX_ARRAY_BUFFER_BINDING
  static const GL_VERTEX_ARRAY_BUFFER_BINDING = 34966;

  /// from: static public final int GL_VERTEX_ARRAY_POINTER
  static const GL_VERTEX_ARRAY_POINTER = 32910;

  /// from: static public final int GL_VERTEX_ARRAY_SIZE
  static const GL_VERTEX_ARRAY_SIZE = 32890;

  /// from: static public final int GL_VERTEX_ARRAY_STRIDE
  static const GL_VERTEX_ARRAY_STRIDE = 32892;

  /// from: static public final int GL_VERTEX_ARRAY_TYPE
  static const GL_VERTEX_ARRAY_TYPE = 32891;

  /// from: static public final int GL_VIEWPORT
  static const GL_VIEWPORT = 2978;

  /// from: static public final int GL_WRITE_ONLY
  static const GL_WRITE_ONLY = 35001;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GLES11()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_glBindBuffer =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBindBuffer", "(II)V");

  /// from: static public native void glBindBuffer(int target, int buffer)
  static void glBindBuffer(int target, int buffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindBuffer,
          jni.JniType.voidType, [target, buffer]).check();

  static final _id_glBufferData = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBufferData", "(IILjava/nio/Buffer;I)V");

  /// from: static public native void glBufferData(int target, int size, java.nio.Buffer data, int usage)
  static void glBufferData(
          int target, int size, jni.JniObject data, int usage) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBufferData,
          jni.JniType.voidType, [target, size, data.reference, usage]).check();

  static final _id_glBufferSubData = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBufferSubData", "(IIILjava/nio/Buffer;)V");

  /// from: static public native void glBufferSubData(int target, int offset, int size, java.nio.Buffer data)
  static void glBufferSubData(
          int target, int offset, int size, jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBufferSubData,
          jni.JniType.voidType, [target, offset, size, data.reference]).check();

  static final _id_glClipPlanef =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClipPlanef", "(I[FI)V");

  /// from: static public native void glClipPlanef(int plane, float[] equation, int offset)
  static void glClipPlanef(int plane, jni.JniObject equation, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClipPlanef,
          jni.JniType.voidType, [plane, equation.reference, offset]).check();

  static final _id_glClipPlanef1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glClipPlanef", "(ILjava/nio/FloatBuffer;)V");

  /// from: static public native void glClipPlanef(int plane, java.nio.FloatBuffer equation)
  static void glClipPlanef1(int plane, jni.JniObject equation) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClipPlanef1,
          jni.JniType.voidType, [plane, equation.reference]).check();

  static final _id_glClipPlanex =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClipPlanex", "(I[II)V");

  /// from: static public native void glClipPlanex(int plane, int[] equation, int offset)
  static void glClipPlanex(int plane, jni.JniObject equation, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClipPlanex,
          jni.JniType.voidType, [plane, equation.reference, offset]).check();

  static final _id_glClipPlanex1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glClipPlanex", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glClipPlanex(int plane, java.nio.IntBuffer equation)
  static void glClipPlanex1(int plane, jni.JniObject equation) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClipPlanex1,
          jni.JniType.voidType, [plane, equation.reference]).check();

  static final _id_glColor4ub =
      jniAccessors.getStaticMethodIDOf(_classRef, "glColor4ub", "(BBBB)V");

  /// from: static public native void glColor4ub(byte red, byte green, byte blue, byte alpha)
  static void glColor4ub(int red, int green, int blue, int alpha) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glColor4ub,
          jni.JniType.voidType, [red, green, blue, alpha]).check();

  static final _id_glColorPointer1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glColorPointer", "(IIII)V");

  /// from: static public native void glColorPointer(int size, int type, int stride, int offset)
  static void glColorPointer1(int size, int type, int stride, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glColorPointer1,
          jni.JniType.voidType, [size, type, stride, offset]).check();

  static final _id_glDeleteBuffers =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDeleteBuffers", "(I[II)V");

  /// from: static public native void glDeleteBuffers(int n, int[] buffers, int offset)
  static void glDeleteBuffers(int n, jni.JniObject buffers, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteBuffers,
          jni.JniType.voidType, [n, buffers.reference, offset]).check();

  static final _id_glDeleteBuffers1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteBuffers", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDeleteBuffers(int n, java.nio.IntBuffer buffers)
  static void glDeleteBuffers1(int n, jni.JniObject buffers) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteBuffers1,
          jni.JniType.voidType, [n, buffers.reference]).check();

  static final _id_glDrawElements1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDrawElements", "(IIII)V");

  /// from: static public native void glDrawElements(int mode, int count, int type, int offset)
  static void glDrawElements1(int mode, int count, int type, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDrawElements1,
          jni.JniType.voidType, [mode, count, type, offset]).check();

  static final _id_glGenBuffers =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGenBuffers", "(I[II)V");

  /// from: static public native void glGenBuffers(int n, int[] buffers, int offset)
  static void glGenBuffers(int n, jni.JniObject buffers, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenBuffers,
          jni.JniType.voidType, [n, buffers.reference, offset]).check();

  static final _id_glGenBuffers1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenBuffers", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGenBuffers(int n, java.nio.IntBuffer buffers)
  static void glGenBuffers1(int n, jni.JniObject buffers) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenBuffers1,
          jni.JniType.voidType, [n, buffers.reference]).check();

  static final _id_glGetBooleanv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetBooleanv", "(I[ZI)V");

  /// from: static public native void glGetBooleanv(int pname, boolean[] params, int offset)
  static void glGetBooleanv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetBooleanv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glGetBooleanv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetBooleanv", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetBooleanv(int pname, java.nio.IntBuffer params)
  static void glGetBooleanv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetBooleanv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glGetBufferParameteriv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetBufferParameteriv", "(II[II)V");

  /// from: static public native void glGetBufferParameteriv(int target, int pname, int[] params, int offset)
  static void glGetBufferParameteriv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetBufferParameteriv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetBufferParameteriv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetBufferParameteriv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetBufferParameteriv(int target, int pname, java.nio.IntBuffer params)
  static void glGetBufferParameteriv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetBufferParameteriv1,
          jni.JniType.voidType,
          [target, pname, params.reference]).check();

  static final _id_glGetClipPlanef =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetClipPlanef", "(I[FI)V");

  /// from: static public native void glGetClipPlanef(int pname, float[] eqn, int offset)
  static void glGetClipPlanef(int pname, jni.JniObject eqn, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetClipPlanef,
          jni.JniType.voidType, [pname, eqn.reference, offset]).check();

  static final _id_glGetClipPlanef1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetClipPlanef", "(ILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetClipPlanef(int pname, java.nio.FloatBuffer eqn)
  static void glGetClipPlanef1(int pname, jni.JniObject eqn) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetClipPlanef1,
          jni.JniType.voidType, [pname, eqn.reference]).check();

  static final _id_glGetClipPlanex =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetClipPlanex", "(I[II)V");

  /// from: static public native void glGetClipPlanex(int pname, int[] eqn, int offset)
  static void glGetClipPlanex(int pname, jni.JniObject eqn, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetClipPlanex,
          jni.JniType.voidType, [pname, eqn.reference, offset]).check();

  static final _id_glGetClipPlanex1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetClipPlanex", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetClipPlanex(int pname, java.nio.IntBuffer eqn)
  static void glGetClipPlanex1(int pname, jni.JniObject eqn) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetClipPlanex1,
          jni.JniType.voidType, [pname, eqn.reference]).check();

  static final _id_glGetFixedv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetFixedv", "(I[II)V");

  /// from: static public native void glGetFixedv(int pname, int[] params, int offset)
  static void glGetFixedv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetFixedv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glGetFixedv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetFixedv", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetFixedv(int pname, java.nio.IntBuffer params)
  static void glGetFixedv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetFixedv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glGetFloatv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetFloatv", "(I[FI)V");

  /// from: static public native void glGetFloatv(int pname, float[] params, int offset)
  static void glGetFloatv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetFloatv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glGetFloatv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetFloatv", "(ILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetFloatv(int pname, java.nio.FloatBuffer params)
  static void glGetFloatv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetFloatv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glGetLightfv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetLightfv", "(II[FI)V");

  /// from: static public native void glGetLightfv(int light, int pname, float[] params, int offset)
  static void glGetLightfv(
          int light, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetLightfv,
          jni.JniType.voidType,
          [light, pname, params.reference, offset]).check();

  static final _id_glGetLightfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetLightfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetLightfv(int light, int pname, java.nio.FloatBuffer params)
  static void glGetLightfv1(int light, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetLightfv1,
          jni.JniType.voidType, [light, pname, params.reference]).check();

  static final _id_glGetLightxv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetLightxv", "(II[II)V");

  /// from: static public native void glGetLightxv(int light, int pname, int[] params, int offset)
  static void glGetLightxv(
          int light, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetLightxv,
          jni.JniType.voidType,
          [light, pname, params.reference, offset]).check();

  static final _id_glGetLightxv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetLightxv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetLightxv(int light, int pname, java.nio.IntBuffer params)
  static void glGetLightxv1(int light, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetLightxv1,
          jni.JniType.voidType, [light, pname, params.reference]).check();

  static final _id_glGetMaterialfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetMaterialfv", "(II[FI)V");

  /// from: static public native void glGetMaterialfv(int face, int pname, float[] params, int offset)
  static void glGetMaterialfv(
          int face, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetMaterialfv,
          jni.JniType.voidType,
          [face, pname, params.reference, offset]).check();

  static final _id_glGetMaterialfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetMaterialfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetMaterialfv(int face, int pname, java.nio.FloatBuffer params)
  static void glGetMaterialfv1(int face, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetMaterialfv1,
          jni.JniType.voidType, [face, pname, params.reference]).check();

  static final _id_glGetMaterialxv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetMaterialxv", "(II[II)V");

  /// from: static public native void glGetMaterialxv(int face, int pname, int[] params, int offset)
  static void glGetMaterialxv(
          int face, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetMaterialxv,
          jni.JniType.voidType,
          [face, pname, params.reference, offset]).check();

  static final _id_glGetMaterialxv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetMaterialxv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetMaterialxv(int face, int pname, java.nio.IntBuffer params)
  static void glGetMaterialxv1(int face, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetMaterialxv1,
          jni.JniType.voidType, [face, pname, params.reference]).check();

  static final _id_glGetTexEnvfv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetTexEnvfv", "(II[FI)V");

  /// from: static public native void glGetTexEnvfv(int env, int pname, float[] params, int offset)
  static void glGetTexEnvfv(
          int env, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetTexEnvfv,
          jni.JniType.voidType, [env, pname, params.reference, offset]).check();

  static final _id_glGetTexEnvfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexEnvfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetTexEnvfv(int env, int pname, java.nio.FloatBuffer params)
  static void glGetTexEnvfv1(int env, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetTexEnvfv1,
          jni.JniType.voidType, [env, pname, params.reference]).check();

  static final _id_glGetTexEnviv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetTexEnviv", "(II[II)V");

  /// from: static public native void glGetTexEnviv(int env, int pname, int[] params, int offset)
  static void glGetTexEnviv(
          int env, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetTexEnviv,
          jni.JniType.voidType, [env, pname, params.reference, offset]).check();

  static final _id_glGetTexEnviv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexEnviv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetTexEnviv(int env, int pname, java.nio.IntBuffer params)
  static void glGetTexEnviv1(int env, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetTexEnviv1,
          jni.JniType.voidType, [env, pname, params.reference]).check();

  static final _id_glGetTexEnvxv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetTexEnvxv", "(II[II)V");

  /// from: static public native void glGetTexEnvxv(int env, int pname, int[] params, int offset)
  static void glGetTexEnvxv(
          int env, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetTexEnvxv,
          jni.JniType.voidType, [env, pname, params.reference, offset]).check();

  static final _id_glGetTexEnvxv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexEnvxv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetTexEnvxv(int env, int pname, java.nio.IntBuffer params)
  static void glGetTexEnvxv1(int env, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetTexEnvxv1,
          jni.JniType.voidType, [env, pname, params.reference]).check();

  static final _id_glGetTexParameterfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameterfv", "(II[FI)V");

  /// from: static public native void glGetTexParameterfv(int target, int pname, float[] params, int offset)
  static void glGetTexParameterfv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexParameterfv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetTexParameterfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameterfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetTexParameterfv(int target, int pname, java.nio.FloatBuffer params)
  static void glGetTexParameterfv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetTexParameterfv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glGetTexParameteriv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameteriv", "(II[II)V");

  /// from: static public native void glGetTexParameteriv(int target, int pname, int[] params, int offset)
  static void glGetTexParameteriv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexParameteriv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetTexParameteriv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameteriv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetTexParameteriv(int target, int pname, java.nio.IntBuffer params)
  static void glGetTexParameteriv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetTexParameteriv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glGetTexParameterxv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameterxv", "(II[II)V");

  /// from: static public native void glGetTexParameterxv(int target, int pname, int[] params, int offset)
  static void glGetTexParameterxv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexParameterxv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetTexParameterxv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameterxv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetTexParameterxv(int target, int pname, java.nio.IntBuffer params)
  static void glGetTexParameterxv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetTexParameterxv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glIsBuffer =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsBuffer", "(I)Z");

  /// from: static public native boolean glIsBuffer(int buffer)
  static bool glIsBuffer(int buffer) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glIsBuffer, jni.JniType.booleanType, [buffer]).boolean;

  static final _id_glIsEnabled =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsEnabled", "(I)Z");

  /// from: static public native boolean glIsEnabled(int cap)
  static bool glIsEnabled(int cap) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glIsEnabled, jni.JniType.booleanType, [cap]).boolean;

  static final _id_glIsTexture =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsTexture", "(I)Z");

  /// from: static public native boolean glIsTexture(int texture)
  static bool glIsTexture(int texture) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glIsTexture, jni.JniType.booleanType, [texture]).boolean;

  static final _id_glNormalPointer1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glNormalPointer", "(III)V");

  /// from: static public native void glNormalPointer(int type, int stride, int offset)
  static void glNormalPointer1(int type, int stride, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glNormalPointer1,
          jni.JniType.voidType, [type, stride, offset]).check();

  static final _id_glPointParameterf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPointParameterf", "(IF)V");

  /// from: static public native void glPointParameterf(int pname, float param)
  static void glPointParameterf(int pname, double param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPointParameterf,
          jni.JniType.voidType, [pname, param]).check();

  static final _id_glPointParameterfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glPointParameterfv", "(I[FI)V");

  /// from: static public native void glPointParameterfv(int pname, float[] params, int offset)
  static void glPointParameterfv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPointParameterfv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glPointParameterfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glPointParameterfv", "(ILjava/nio/FloatBuffer;)V");

  /// from: static public native void glPointParameterfv(int pname, java.nio.FloatBuffer params)
  static void glPointParameterfv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPointParameterfv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glPointParameterx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPointParameterx", "(II)V");

  /// from: static public native void glPointParameterx(int pname, int param)
  static void glPointParameterx(int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPointParameterx,
          jni.JniType.voidType, [pname, param]).check();

  static final _id_glPointParameterxv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glPointParameterxv", "(I[II)V");

  /// from: static public native void glPointParameterxv(int pname, int[] params, int offset)
  static void glPointParameterxv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPointParameterxv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glPointParameterxv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glPointParameterxv", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glPointParameterxv(int pname, java.nio.IntBuffer params)
  static void glPointParameterxv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPointParameterxv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glPointSizePointerOES = jniAccessors.getStaticMethodIDOf(
      _classRef, "glPointSizePointerOES", "(IILjava/nio/Buffer;)V");

  /// from: static public void glPointSizePointerOES(int type, int stride, java.nio.Buffer pointer)
  static void glPointSizePointerOES(
          int type, int stride, jni.JniObject pointer) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glPointSizePointerOES,
          jni.JniType.voidType,
          [type, stride, pointer.reference]).check();

  static final _id_glTexCoordPointer1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexCoordPointer", "(IIII)V");

  /// from: static public native void glTexCoordPointer(int size, int type, int stride, int offset)
  static void glTexCoordPointer1(int size, int type, int stride, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexCoordPointer1,
          jni.JniType.voidType, [size, type, stride, offset]).check();

  static final _id_glTexEnvi =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexEnvi", "(III)V");

  /// from: static public native void glTexEnvi(int target, int pname, int param)
  static void glTexEnvi(int target, int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexEnvi,
          jni.JniType.voidType, [target, pname, param]).check();

  static final _id_glTexEnviv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexEnviv", "(II[II)V");

  /// from: static public native void glTexEnviv(int target, int pname, int[] params, int offset)
  static void glTexEnviv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexEnviv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glTexEnviv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexEnviv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glTexEnviv(int target, int pname, java.nio.IntBuffer params)
  static void glTexEnviv1(int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexEnviv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glTexParameterfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameterfv", "(II[FI)V");

  /// from: static public native void glTexParameterfv(int target, int pname, float[] params, int offset)
  static void glTexParameterfv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexParameterfv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glTexParameterfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameterfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glTexParameterfv(int target, int pname, java.nio.FloatBuffer params)
  static void glTexParameterfv1(int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameterfv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glTexParameteri =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexParameteri", "(III)V");

  /// from: static public native void glTexParameteri(int target, int pname, int param)
  static void glTexParameteri(int target, int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameteri,
          jni.JniType.voidType, [target, pname, param]).check();

  static final _id_glTexParameteriv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameteriv", "(II[II)V");

  /// from: static public native void glTexParameteriv(int target, int pname, int[] params, int offset)
  static void glTexParameteriv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexParameteriv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glTexParameteriv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameteriv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glTexParameteriv(int target, int pname, java.nio.IntBuffer params)
  static void glTexParameteriv1(int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameteriv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glTexParameterxv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameterxv", "(II[II)V");

  /// from: static public native void glTexParameterxv(int target, int pname, int[] params, int offset)
  static void glTexParameterxv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexParameterxv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glTexParameterxv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameterxv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glTexParameterxv(int target, int pname, java.nio.IntBuffer params)
  static void glTexParameterxv1(int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameterxv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glVertexPointer1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glVertexPointer", "(IIII)V");

  /// from: static public native void glVertexPointer(int size, int type, int stride, int offset)
  static void glVertexPointer1(int size, int type, int stride, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexPointer1,
          jni.JniType.voidType, [size, type, stride, offset]).check();
}
