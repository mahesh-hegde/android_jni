// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.opengl.GLES10
class GLES10 extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/opengl/GLES10");
  GLES10.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int GL_ADD
  static const GL_ADD = 260;

  /// from: static public final int GL_ALIASED_LINE_WIDTH_RANGE
  static const GL_ALIASED_LINE_WIDTH_RANGE = 33902;

  /// from: static public final int GL_ALIASED_POINT_SIZE_RANGE
  static const GL_ALIASED_POINT_SIZE_RANGE = 33901;

  /// from: static public final int GL_ALPHA
  static const GL_ALPHA = 6406;

  /// from: static public final int GL_ALPHA_BITS
  static const GL_ALPHA_BITS = 3413;

  /// from: static public final int GL_ALPHA_TEST
  static const GL_ALPHA_TEST = 3008;

  /// from: static public final int GL_ALWAYS
  static const GL_ALWAYS = 519;

  /// from: static public final int GL_AMBIENT
  static const GL_AMBIENT = 4608;

  /// from: static public final int GL_AMBIENT_AND_DIFFUSE
  static const GL_AMBIENT_AND_DIFFUSE = 5634;

  /// from: static public final int GL_AND
  static const GL_AND = 5377;

  /// from: static public final int GL_AND_INVERTED
  static const GL_AND_INVERTED = 5380;

  /// from: static public final int GL_AND_REVERSE
  static const GL_AND_REVERSE = 5378;

  /// from: static public final int GL_BACK
  static const GL_BACK = 1029;

  /// from: static public final int GL_BLEND
  static const GL_BLEND = 3042;

  /// from: static public final int GL_BLUE_BITS
  static const GL_BLUE_BITS = 3412;

  /// from: static public final int GL_BYTE
  static const GL_BYTE = 5120;

  /// from: static public final int GL_CCW
  static const GL_CCW = 2305;

  /// from: static public final int GL_CLAMP_TO_EDGE
  static const GL_CLAMP_TO_EDGE = 33071;

  /// from: static public final int GL_CLEAR
  static const GL_CLEAR = 5376;

  /// from: static public final int GL_COLOR_ARRAY
  static const GL_COLOR_ARRAY = 32886;

  /// from: static public final int GL_COLOR_BUFFER_BIT
  static const GL_COLOR_BUFFER_BIT = 16384;

  /// from: static public final int GL_COLOR_LOGIC_OP
  static const GL_COLOR_LOGIC_OP = 3058;

  /// from: static public final int GL_COLOR_MATERIAL
  static const GL_COLOR_MATERIAL = 2903;

  /// from: static public final int GL_COMPRESSED_TEXTURE_FORMATS
  static const GL_COMPRESSED_TEXTURE_FORMATS = 34467;

  /// from: static public final int GL_CONSTANT_ATTENUATION
  static const GL_CONSTANT_ATTENUATION = 4615;

  /// from: static public final int GL_COPY
  static const GL_COPY = 5379;

  /// from: static public final int GL_COPY_INVERTED
  static const GL_COPY_INVERTED = 5388;

  /// from: static public final int GL_CULL_FACE
  static const GL_CULL_FACE = 2884;

  /// from: static public final int GL_CW
  static const GL_CW = 2304;

  /// from: static public final int GL_DECAL
  static const GL_DECAL = 8449;

  /// from: static public final int GL_DECR
  static const GL_DECR = 7683;

  /// from: static public final int GL_DEPTH_BITS
  static const GL_DEPTH_BITS = 3414;

  /// from: static public final int GL_DEPTH_BUFFER_BIT
  static const GL_DEPTH_BUFFER_BIT = 256;

  /// from: static public final int GL_DEPTH_TEST
  static const GL_DEPTH_TEST = 2929;

  /// from: static public final int GL_DIFFUSE
  static const GL_DIFFUSE = 4609;

  /// from: static public final int GL_DITHER
  static const GL_DITHER = 3024;

  /// from: static public final int GL_DONT_CARE
  static const GL_DONT_CARE = 4352;

  /// from: static public final int GL_DST_ALPHA
  static const GL_DST_ALPHA = 772;

  /// from: static public final int GL_DST_COLOR
  static const GL_DST_COLOR = 774;

  /// from: static public final int GL_EMISSION
  static const GL_EMISSION = 5632;

  /// from: static public final int GL_EQUAL
  static const GL_EQUAL = 514;

  /// from: static public final int GL_EQUIV
  static const GL_EQUIV = 5385;

  /// from: static public final int GL_EXP
  static const GL_EXP = 2048;

  /// from: static public final int GL_EXP2
  static const GL_EXP2 = 2049;

  /// from: static public final int GL_EXTENSIONS
  static const GL_EXTENSIONS = 7939;

  /// from: static public final int GL_FALSE
  static const GL_FALSE = 0;

  /// from: static public final int GL_FASTEST
  static const GL_FASTEST = 4353;

  /// from: static public final int GL_FIXED
  static const GL_FIXED = 5132;

  /// from: static public final int GL_FLAT
  static const GL_FLAT = 7424;

  /// from: static public final int GL_FLOAT
  static const GL_FLOAT = 5126;

  /// from: static public final int GL_FOG
  static const GL_FOG = 2912;

  /// from: static public final int GL_FOG_COLOR
  static const GL_FOG_COLOR = 2918;

  /// from: static public final int GL_FOG_DENSITY
  static const GL_FOG_DENSITY = 2914;

  /// from: static public final int GL_FOG_END
  static const GL_FOG_END = 2916;

  /// from: static public final int GL_FOG_HINT
  static const GL_FOG_HINT = 3156;

  /// from: static public final int GL_FOG_MODE
  static const GL_FOG_MODE = 2917;

  /// from: static public final int GL_FOG_START
  static const GL_FOG_START = 2915;

  /// from: static public final int GL_FRONT
  static const GL_FRONT = 1028;

  /// from: static public final int GL_FRONT_AND_BACK
  static const GL_FRONT_AND_BACK = 1032;

  /// from: static public final int GL_GEQUAL
  static const GL_GEQUAL = 518;

  /// from: static public final int GL_GREATER
  static const GL_GREATER = 516;

  /// from: static public final int GL_GREEN_BITS
  static const GL_GREEN_BITS = 3411;

  /// from: static public final int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
  static const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 35739;

  /// from: static public final int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
  static const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 35738;

  /// from: static public final int GL_INCR
  static const GL_INCR = 7682;

  /// from: static public final int GL_INVALID_ENUM
  static const GL_INVALID_ENUM = 1280;

  /// from: static public final int GL_INVALID_OPERATION
  static const GL_INVALID_OPERATION = 1282;

  /// from: static public final int GL_INVALID_VALUE
  static const GL_INVALID_VALUE = 1281;

  /// from: static public final int GL_INVERT
  static const GL_INVERT = 5386;

  /// from: static public final int GL_KEEP
  static const GL_KEEP = 7680;

  /// from: static public final int GL_LEQUAL
  static const GL_LEQUAL = 515;

  /// from: static public final int GL_LESS
  static const GL_LESS = 513;

  /// from: static public final int GL_LIGHT0
  static const GL_LIGHT0 = 16384;

  /// from: static public final int GL_LIGHT1
  static const GL_LIGHT1 = 16385;

  /// from: static public final int GL_LIGHT2
  static const GL_LIGHT2 = 16386;

  /// from: static public final int GL_LIGHT3
  static const GL_LIGHT3 = 16387;

  /// from: static public final int GL_LIGHT4
  static const GL_LIGHT4 = 16388;

  /// from: static public final int GL_LIGHT5
  static const GL_LIGHT5 = 16389;

  /// from: static public final int GL_LIGHT6
  static const GL_LIGHT6 = 16390;

  /// from: static public final int GL_LIGHT7
  static const GL_LIGHT7 = 16391;

  /// from: static public final int GL_LIGHTING
  static const GL_LIGHTING = 2896;

  /// from: static public final int GL_LIGHT_MODEL_AMBIENT
  static const GL_LIGHT_MODEL_AMBIENT = 2899;

  /// from: static public final int GL_LIGHT_MODEL_TWO_SIDE
  static const GL_LIGHT_MODEL_TWO_SIDE = 2898;

  /// from: static public final int GL_LINEAR
  static const GL_LINEAR = 9729;

  /// from: static public final int GL_LINEAR_ATTENUATION
  static const GL_LINEAR_ATTENUATION = 4616;

  /// from: static public final int GL_LINEAR_MIPMAP_LINEAR
  static const GL_LINEAR_MIPMAP_LINEAR = 9987;

  /// from: static public final int GL_LINEAR_MIPMAP_NEAREST
  static const GL_LINEAR_MIPMAP_NEAREST = 9985;

  /// from: static public final int GL_LINES
  static const GL_LINES = 1;

  /// from: static public final int GL_LINE_LOOP
  static const GL_LINE_LOOP = 2;

  /// from: static public final int GL_LINE_SMOOTH
  static const GL_LINE_SMOOTH = 2848;

  /// from: static public final int GL_LINE_SMOOTH_HINT
  static const GL_LINE_SMOOTH_HINT = 3154;

  /// from: static public final int GL_LINE_STRIP
  static const GL_LINE_STRIP = 3;

  /// from: static public final int GL_LUMINANCE
  static const GL_LUMINANCE = 6409;

  /// from: static public final int GL_LUMINANCE_ALPHA
  static const GL_LUMINANCE_ALPHA = 6410;

  /// from: static public final int GL_MAX_ELEMENTS_INDICES
  static const GL_MAX_ELEMENTS_INDICES = 33001;

  /// from: static public final int GL_MAX_ELEMENTS_VERTICES
  static const GL_MAX_ELEMENTS_VERTICES = 33000;

  /// from: static public final int GL_MAX_LIGHTS
  static const GL_MAX_LIGHTS = 3377;

  /// from: static public final int GL_MAX_MODELVIEW_STACK_DEPTH
  static const GL_MAX_MODELVIEW_STACK_DEPTH = 3382;

  /// from: static public final int GL_MAX_PROJECTION_STACK_DEPTH
  static const GL_MAX_PROJECTION_STACK_DEPTH = 3384;

  /// from: static public final int GL_MAX_TEXTURE_SIZE
  static const GL_MAX_TEXTURE_SIZE = 3379;

  /// from: static public final int GL_MAX_TEXTURE_STACK_DEPTH
  static const GL_MAX_TEXTURE_STACK_DEPTH = 3385;

  /// from: static public final int GL_MAX_TEXTURE_UNITS
  static const GL_MAX_TEXTURE_UNITS = 34018;

  /// from: static public final int GL_MAX_VIEWPORT_DIMS
  static const GL_MAX_VIEWPORT_DIMS = 3386;

  /// from: static public final int GL_MODELVIEW
  static const GL_MODELVIEW = 5888;

  /// from: static public final int GL_MODULATE
  static const GL_MODULATE = 8448;

  /// from: static public final int GL_MULTISAMPLE
  static const GL_MULTISAMPLE = 32925;

  /// from: static public final int GL_NAND
  static const GL_NAND = 5390;

  /// from: static public final int GL_NEAREST
  static const GL_NEAREST = 9728;

  /// from: static public final int GL_NEAREST_MIPMAP_LINEAR
  static const GL_NEAREST_MIPMAP_LINEAR = 9986;

  /// from: static public final int GL_NEAREST_MIPMAP_NEAREST
  static const GL_NEAREST_MIPMAP_NEAREST = 9984;

  /// from: static public final int GL_NEVER
  static const GL_NEVER = 512;

  /// from: static public final int GL_NICEST
  static const GL_NICEST = 4354;

  /// from: static public final int GL_NOOP
  static const GL_NOOP = 5381;

  /// from: static public final int GL_NOR
  static const GL_NOR = 5384;

  /// from: static public final int GL_NORMALIZE
  static const GL_NORMALIZE = 2977;

  /// from: static public final int GL_NORMAL_ARRAY
  static const GL_NORMAL_ARRAY = 32885;

  /// from: static public final int GL_NOTEQUAL
  static const GL_NOTEQUAL = 517;

  /// from: static public final int GL_NO_ERROR
  static const GL_NO_ERROR = 0;

  /// from: static public final int GL_NUM_COMPRESSED_TEXTURE_FORMATS
  static const GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;

  /// from: static public final int GL_ONE
  static const GL_ONE = 1;

  /// from: static public final int GL_ONE_MINUS_DST_ALPHA
  static const GL_ONE_MINUS_DST_ALPHA = 773;

  /// from: static public final int GL_ONE_MINUS_DST_COLOR
  static const GL_ONE_MINUS_DST_COLOR = 775;

  /// from: static public final int GL_ONE_MINUS_SRC_ALPHA
  static const GL_ONE_MINUS_SRC_ALPHA = 771;

  /// from: static public final int GL_ONE_MINUS_SRC_COLOR
  static const GL_ONE_MINUS_SRC_COLOR = 769;

  /// from: static public final int GL_OR
  static const GL_OR = 5383;

  /// from: static public final int GL_OR_INVERTED
  static const GL_OR_INVERTED = 5389;

  /// from: static public final int GL_OR_REVERSE
  static const GL_OR_REVERSE = 5387;

  /// from: static public final int GL_OUT_OF_MEMORY
  static const GL_OUT_OF_MEMORY = 1285;

  /// from: static public final int GL_PACK_ALIGNMENT
  static const GL_PACK_ALIGNMENT = 3333;

  /// from: static public final int GL_PALETTE4_R5_G6_B5_OES
  static const GL_PALETTE4_R5_G6_B5_OES = 35730;

  /// from: static public final int GL_PALETTE4_RGB5_A1_OES
  static const GL_PALETTE4_RGB5_A1_OES = 35732;

  /// from: static public final int GL_PALETTE4_RGB8_OES
  static const GL_PALETTE4_RGB8_OES = 35728;

  /// from: static public final int GL_PALETTE4_RGBA4_OES
  static const GL_PALETTE4_RGBA4_OES = 35731;

  /// from: static public final int GL_PALETTE4_RGBA8_OES
  static const GL_PALETTE4_RGBA8_OES = 35729;

  /// from: static public final int GL_PALETTE8_R5_G6_B5_OES
  static const GL_PALETTE8_R5_G6_B5_OES = 35735;

  /// from: static public final int GL_PALETTE8_RGB5_A1_OES
  static const GL_PALETTE8_RGB5_A1_OES = 35737;

  /// from: static public final int GL_PALETTE8_RGB8_OES
  static const GL_PALETTE8_RGB8_OES = 35733;

  /// from: static public final int GL_PALETTE8_RGBA4_OES
  static const GL_PALETTE8_RGBA4_OES = 35736;

  /// from: static public final int GL_PALETTE8_RGBA8_OES
  static const GL_PALETTE8_RGBA8_OES = 35734;

  /// from: static public final int GL_PERSPECTIVE_CORRECTION_HINT
  static const GL_PERSPECTIVE_CORRECTION_HINT = 3152;

  /// from: static public final int GL_POINTS
  static const GL_POINTS = 0;

  /// from: static public final int GL_POINT_FADE_THRESHOLD_SIZE
  static const GL_POINT_FADE_THRESHOLD_SIZE = 33064;

  /// from: static public final int GL_POINT_SIZE
  static const GL_POINT_SIZE = 2833;

  /// from: static public final int GL_POINT_SMOOTH
  static const GL_POINT_SMOOTH = 2832;

  /// from: static public final int GL_POINT_SMOOTH_HINT
  static const GL_POINT_SMOOTH_HINT = 3153;

  /// from: static public final int GL_POLYGON_OFFSET_FILL
  static const GL_POLYGON_OFFSET_FILL = 32823;

  /// from: static public final int GL_POLYGON_SMOOTH_HINT
  static const GL_POLYGON_SMOOTH_HINT = 3155;

  /// from: static public final int GL_POSITION
  static const GL_POSITION = 4611;

  /// from: static public final int GL_PROJECTION
  static const GL_PROJECTION = 5889;

  /// from: static public final int GL_QUADRATIC_ATTENUATION
  static const GL_QUADRATIC_ATTENUATION = 4617;

  /// from: static public final int GL_RED_BITS
  static const GL_RED_BITS = 3410;

  /// from: static public final int GL_RENDERER
  static const GL_RENDERER = 7937;

  /// from: static public final int GL_REPEAT
  static const GL_REPEAT = 10497;

  /// from: static public final int GL_REPLACE
  static const GL_REPLACE = 7681;

  /// from: static public final int GL_RESCALE_NORMAL
  static const GL_RESCALE_NORMAL = 32826;

  /// from: static public final int GL_RGB
  static const GL_RGB = 6407;

  /// from: static public final int GL_RGBA
  static const GL_RGBA = 6408;

  /// from: static public final int GL_SAMPLE_ALPHA_TO_COVERAGE
  static const GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;

  /// from: static public final int GL_SAMPLE_ALPHA_TO_ONE
  static const GL_SAMPLE_ALPHA_TO_ONE = 32927;

  /// from: static public final int GL_SAMPLE_COVERAGE
  static const GL_SAMPLE_COVERAGE = 32928;

  /// from: static public final int GL_SCISSOR_TEST
  static const GL_SCISSOR_TEST = 3089;

  /// from: static public final int GL_SET
  static const GL_SET = 5391;

  /// from: static public final int GL_SHININESS
  static const GL_SHININESS = 5633;

  /// from: static public final int GL_SHORT
  static const GL_SHORT = 5122;

  /// from: static public final int GL_SMOOTH
  static const GL_SMOOTH = 7425;

  /// from: static public final int GL_SMOOTH_LINE_WIDTH_RANGE
  static const GL_SMOOTH_LINE_WIDTH_RANGE = 2850;

  /// from: static public final int GL_SMOOTH_POINT_SIZE_RANGE
  static const GL_SMOOTH_POINT_SIZE_RANGE = 2834;

  /// from: static public final int GL_SPECULAR
  static const GL_SPECULAR = 4610;

  /// from: static public final int GL_SPOT_CUTOFF
  static const GL_SPOT_CUTOFF = 4614;

  /// from: static public final int GL_SPOT_DIRECTION
  static const GL_SPOT_DIRECTION = 4612;

  /// from: static public final int GL_SPOT_EXPONENT
  static const GL_SPOT_EXPONENT = 4613;

  /// from: static public final int GL_SRC_ALPHA
  static const GL_SRC_ALPHA = 770;

  /// from: static public final int GL_SRC_ALPHA_SATURATE
  static const GL_SRC_ALPHA_SATURATE = 776;

  /// from: static public final int GL_SRC_COLOR
  static const GL_SRC_COLOR = 768;

  /// from: static public final int GL_STACK_OVERFLOW
  static const GL_STACK_OVERFLOW = 1283;

  /// from: static public final int GL_STACK_UNDERFLOW
  static const GL_STACK_UNDERFLOW = 1284;

  /// from: static public final int GL_STENCIL_BITS
  static const GL_STENCIL_BITS = 3415;

  /// from: static public final int GL_STENCIL_BUFFER_BIT
  static const GL_STENCIL_BUFFER_BIT = 1024;

  /// from: static public final int GL_STENCIL_TEST
  static const GL_STENCIL_TEST = 2960;

  /// from: static public final int GL_SUBPIXEL_BITS
  static const GL_SUBPIXEL_BITS = 3408;

  /// from: static public final int GL_TEXTURE
  static const GL_TEXTURE = 5890;

  /// from: static public final int GL_TEXTURE0
  static const GL_TEXTURE0 = 33984;

  /// from: static public final int GL_TEXTURE1
  static const GL_TEXTURE1 = 33985;

  /// from: static public final int GL_TEXTURE10
  static const GL_TEXTURE10 = 33994;

  /// from: static public final int GL_TEXTURE11
  static const GL_TEXTURE11 = 33995;

  /// from: static public final int GL_TEXTURE12
  static const GL_TEXTURE12 = 33996;

  /// from: static public final int GL_TEXTURE13
  static const GL_TEXTURE13 = 33997;

  /// from: static public final int GL_TEXTURE14
  static const GL_TEXTURE14 = 33998;

  /// from: static public final int GL_TEXTURE15
  static const GL_TEXTURE15 = 33999;

  /// from: static public final int GL_TEXTURE16
  static const GL_TEXTURE16 = 34000;

  /// from: static public final int GL_TEXTURE17
  static const GL_TEXTURE17 = 34001;

  /// from: static public final int GL_TEXTURE18
  static const GL_TEXTURE18 = 34002;

  /// from: static public final int GL_TEXTURE19
  static const GL_TEXTURE19 = 34003;

  /// from: static public final int GL_TEXTURE2
  static const GL_TEXTURE2 = 33986;

  /// from: static public final int GL_TEXTURE20
  static const GL_TEXTURE20 = 34004;

  /// from: static public final int GL_TEXTURE21
  static const GL_TEXTURE21 = 34005;

  /// from: static public final int GL_TEXTURE22
  static const GL_TEXTURE22 = 34006;

  /// from: static public final int GL_TEXTURE23
  static const GL_TEXTURE23 = 34007;

  /// from: static public final int GL_TEXTURE24
  static const GL_TEXTURE24 = 34008;

  /// from: static public final int GL_TEXTURE25
  static const GL_TEXTURE25 = 34009;

  /// from: static public final int GL_TEXTURE26
  static const GL_TEXTURE26 = 34010;

  /// from: static public final int GL_TEXTURE27
  static const GL_TEXTURE27 = 34011;

  /// from: static public final int GL_TEXTURE28
  static const GL_TEXTURE28 = 34012;

  /// from: static public final int GL_TEXTURE29
  static const GL_TEXTURE29 = 34013;

  /// from: static public final int GL_TEXTURE3
  static const GL_TEXTURE3 = 33987;

  /// from: static public final int GL_TEXTURE30
  static const GL_TEXTURE30 = 34014;

  /// from: static public final int GL_TEXTURE31
  static const GL_TEXTURE31 = 34015;

  /// from: static public final int GL_TEXTURE4
  static const GL_TEXTURE4 = 33988;

  /// from: static public final int GL_TEXTURE5
  static const GL_TEXTURE5 = 33989;

  /// from: static public final int GL_TEXTURE6
  static const GL_TEXTURE6 = 33990;

  /// from: static public final int GL_TEXTURE7
  static const GL_TEXTURE7 = 33991;

  /// from: static public final int GL_TEXTURE8
  static const GL_TEXTURE8 = 33992;

  /// from: static public final int GL_TEXTURE9
  static const GL_TEXTURE9 = 33993;

  /// from: static public final int GL_TEXTURE_2D
  static const GL_TEXTURE_2D = 3553;

  /// from: static public final int GL_TEXTURE_COORD_ARRAY
  static const GL_TEXTURE_COORD_ARRAY = 32888;

  /// from: static public final int GL_TEXTURE_ENV
  static const GL_TEXTURE_ENV = 8960;

  /// from: static public final int GL_TEXTURE_ENV_COLOR
  static const GL_TEXTURE_ENV_COLOR = 8705;

  /// from: static public final int GL_TEXTURE_ENV_MODE
  static const GL_TEXTURE_ENV_MODE = 8704;

  /// from: static public final int GL_TEXTURE_MAG_FILTER
  static const GL_TEXTURE_MAG_FILTER = 10240;

  /// from: static public final int GL_TEXTURE_MIN_FILTER
  static const GL_TEXTURE_MIN_FILTER = 10241;

  /// from: static public final int GL_TEXTURE_WRAP_S
  static const GL_TEXTURE_WRAP_S = 10242;

  /// from: static public final int GL_TEXTURE_WRAP_T
  static const GL_TEXTURE_WRAP_T = 10243;

  /// from: static public final int GL_TRIANGLES
  static const GL_TRIANGLES = 4;

  /// from: static public final int GL_TRIANGLE_FAN
  static const GL_TRIANGLE_FAN = 6;

  /// from: static public final int GL_TRIANGLE_STRIP
  static const GL_TRIANGLE_STRIP = 5;

  /// from: static public final int GL_TRUE
  static const GL_TRUE = 1;

  /// from: static public final int GL_UNPACK_ALIGNMENT
  static const GL_UNPACK_ALIGNMENT = 3317;

  /// from: static public final int GL_UNSIGNED_BYTE
  static const GL_UNSIGNED_BYTE = 5121;

  /// from: static public final int GL_UNSIGNED_SHORT
  static const GL_UNSIGNED_SHORT = 5123;

  /// from: static public final int GL_UNSIGNED_SHORT_4_4_4_4
  static const GL_UNSIGNED_SHORT_4_4_4_4 = 32819;

  /// from: static public final int GL_UNSIGNED_SHORT_5_5_5_1
  static const GL_UNSIGNED_SHORT_5_5_5_1 = 32820;

  /// from: static public final int GL_UNSIGNED_SHORT_5_6_5
  static const GL_UNSIGNED_SHORT_5_6_5 = 33635;

  /// from: static public final int GL_VENDOR
  static const GL_VENDOR = 7936;

  /// from: static public final int GL_VERSION
  static const GL_VERSION = 7938;

  /// from: static public final int GL_VERTEX_ARRAY
  static const GL_VERTEX_ARRAY = 32884;

  /// from: static public final int GL_XOR
  static const GL_XOR = 5382;

  /// from: static public final int GL_ZERO
  static const GL_ZERO = 0;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GLES10()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_glActiveTexture =
      jniAccessors.getStaticMethodIDOf(_classRef, "glActiveTexture", "(I)V");

  /// from: static public native void glActiveTexture(int texture)
  static void glActiveTexture(int texture) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glActiveTexture,
          jni.JniType.voidType, [texture]).check();

  static final _id_glAlphaFunc =
      jniAccessors.getStaticMethodIDOf(_classRef, "glAlphaFunc", "(IF)V");

  /// from: static public native void glAlphaFunc(int func, float ref)
  static void glAlphaFunc(int func, double ref) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glAlphaFunc,
          jni.JniType.voidType, [func, ref]).check();

  static final _id_glAlphaFuncx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glAlphaFuncx", "(II)V");

  /// from: static public native void glAlphaFuncx(int func, int ref)
  static void glAlphaFuncx(int func, int ref) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glAlphaFuncx,
          jni.JniType.voidType, [func, ref]).check();

  static final _id_glBindTexture =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBindTexture", "(II)V");

  /// from: static public native void glBindTexture(int target, int texture)
  static void glBindTexture(int target, int texture) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindTexture,
          jni.JniType.voidType, [target, texture]).check();

  static final _id_glBlendFunc =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBlendFunc", "(II)V");

  /// from: static public native void glBlendFunc(int sfactor, int dfactor)
  static void glBlendFunc(int sfactor, int dfactor) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBlendFunc,
          jni.JniType.voidType, [sfactor, dfactor]).check();

  static final _id_glClear =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClear", "(I)V");

  /// from: static public native void glClear(int mask)
  static void glClear(int mask) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glClear, jni.JniType.voidType, [mask]).check();

  static final _id_glClearColor =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClearColor", "(FFFF)V");

  /// from: static public native void glClearColor(float red, float green, float blue, float alpha)
  static void glClearColor(
          double red, double green, double blue, double alpha) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClearColor,
          jni.JniType.voidType, [red, green, blue, alpha]).check();

  static final _id_glClearColorx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClearColorx", "(IIII)V");

  /// from: static public native void glClearColorx(int red, int green, int blue, int alpha)
  static void glClearColorx(int red, int green, int blue, int alpha) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClearColorx,
          jni.JniType.voidType, [red, green, blue, alpha]).check();

  static final _id_glClearDepthf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClearDepthf", "(F)V");

  /// from: static public native void glClearDepthf(float depth)
  static void glClearDepthf(double depth) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glClearDepthf, jni.JniType.voidType, [depth]).check();

  static final _id_glClearDepthx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClearDepthx", "(I)V");

  /// from: static public native void glClearDepthx(int depth)
  static void glClearDepthx(int depth) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glClearDepthx, jni.JniType.voidType, [depth]).check();

  static final _id_glClearStencil =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClearStencil", "(I)V");

  /// from: static public native void glClearStencil(int s)
  static void glClearStencil(int s) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glClearStencil, jni.JniType.voidType, [s]).check();

  static final _id_glClientActiveTexture = jniAccessors.getStaticMethodIDOf(
      _classRef, "glClientActiveTexture", "(I)V");

  /// from: static public native void glClientActiveTexture(int texture)
  static void glClientActiveTexture(int texture) =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glClientActiveTexture, jni.JniType.voidType, [texture]).check();

  static final _id_glColor4f =
      jniAccessors.getStaticMethodIDOf(_classRef, "glColor4f", "(FFFF)V");

  /// from: static public native void glColor4f(float red, float green, float blue, float alpha)
  static void glColor4f(double red, double green, double blue, double alpha) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glColor4f,
          jni.JniType.voidType, [red, green, blue, alpha]).check();

  static final _id_glColor4x =
      jniAccessors.getStaticMethodIDOf(_classRef, "glColor4x", "(IIII)V");

  /// from: static public native void glColor4x(int red, int green, int blue, int alpha)
  static void glColor4x(int red, int green, int blue, int alpha) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glColor4x,
          jni.JniType.voidType, [red, green, blue, alpha]).check();

  static final _id_glColorMask =
      jniAccessors.getStaticMethodIDOf(_classRef, "glColorMask", "(ZZZZ)V");

  /// from: static public native void glColorMask(boolean red, boolean green, boolean blue, boolean alpha)
  static void glColorMask(bool red, bool green, bool blue, bool alpha) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glColorMask,
          jni.JniType.voidType, [red, green, blue, alpha]).check();

  static final _id_glColorPointer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glColorPointer", "(IIILjava/nio/Buffer;)V");

  /// from: static public void glColorPointer(int size, int type, int stride, java.nio.Buffer pointer)
  static void glColorPointer(
          int size, int type, int stride, jni.JniObject pointer) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glColorPointer,
          jni.JniType.voidType,
          [size, type, stride, pointer.reference]).check();

  static final _id_glCompressedTexImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCompressedTexImage2D", "(IIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, java.nio.Buffer data)
  static void glCompressedTexImage2D(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int border,
          int imageSize,
          jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glCompressedTexImage2D, jni.JniType.voidType, [
        target,
        level,
        internalformat,
        width,
        height,
        border,
        imageSize,
        data.reference
      ]).check();

  static final _id_glCompressedTexSubImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCompressedTexSubImage2D", "(IIIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, java.nio.Buffer data)
  static void glCompressedTexSubImage2D(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int width,
          int height,
          int format,
          int imageSize,
          jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glCompressedTexSubImage2D, jni.JniType.voidType, [
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        imageSize,
        data.reference
      ]).check();

  static final _id_glCopyTexImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCopyTexImage2D", "(IIIIIIII)V");

  /// from: static public native void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border)
  static void glCopyTexImage2D(int target, int level, int internalformat, int x,
          int y, int width, int height, int border) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glCopyTexImage2D,
          jni.JniType.voidType,
          [target, level, internalformat, x, y, width, height, border]).check();

  static final _id_glCopyTexSubImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCopyTexSubImage2D", "(IIIIIIII)V");

  /// from: static public native void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
  static void glCopyTexSubImage2D(int target, int level, int xoffset,
          int yoffset, int x, int y, int width, int height) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glCopyTexSubImage2D,
          jni.JniType.voidType,
          [target, level, xoffset, yoffset, x, y, width, height]).check();

  static final _id_glCullFace =
      jniAccessors.getStaticMethodIDOf(_classRef, "glCullFace", "(I)V");

  /// from: static public native void glCullFace(int mode)
  static void glCullFace(int mode) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glCullFace, jni.JniType.voidType, [mode]).check();

  static final _id_glDeleteTextures = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteTextures", "(I[II)V");

  /// from: static public native void glDeleteTextures(int n, int[] textures, int offset)
  static void glDeleteTextures(int n, jni.JniObject textures, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteTextures,
          jni.JniType.voidType, [n, textures.reference, offset]).check();

  static final _id_glDeleteTextures1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteTextures", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDeleteTextures(int n, java.nio.IntBuffer textures)
  static void glDeleteTextures1(int n, jni.JniObject textures) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteTextures1,
          jni.JniType.voidType, [n, textures.reference]).check();

  static final _id_glDepthFunc =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDepthFunc", "(I)V");

  /// from: static public native void glDepthFunc(int func)
  static void glDepthFunc(int func) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glDepthFunc, jni.JniType.voidType, [func]).check();

  static final _id_glDepthMask =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDepthMask", "(Z)V");

  /// from: static public native void glDepthMask(boolean flag)
  static void glDepthMask(bool flag) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glDepthMask, jni.JniType.voidType, [flag]).check();

  static final _id_glDepthRangef =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDepthRangef", "(FF)V");

  /// from: static public native void glDepthRangef(float zNear, float zFar)
  static void glDepthRangef(double zNear, double zFar) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDepthRangef,
          jni.JniType.voidType, [zNear, zFar]).check();

  static final _id_glDepthRangex =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDepthRangex", "(II)V");

  /// from: static public native void glDepthRangex(int zNear, int zFar)
  static void glDepthRangex(int zNear, int zFar) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDepthRangex,
          jni.JniType.voidType, [zNear, zFar]).check();

  static final _id_glDisable =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDisable", "(I)V");

  /// from: static public native void glDisable(int cap)
  static void glDisable(int cap) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glDisable, jni.JniType.voidType, [cap]).check();

  static final _id_glDisableClientState = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDisableClientState", "(I)V");

  /// from: static public native void glDisableClientState(int array)
  static void glDisableClientState(int array) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDisableClientState,
          jni.JniType.voidType, [array]).check();

  static final _id_glDrawArrays =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDrawArrays", "(III)V");

  /// from: static public native void glDrawArrays(int mode, int first, int count)
  static void glDrawArrays(int mode, int first, int count) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDrawArrays,
          jni.JniType.voidType, [mode, first, count]).check();

  static final _id_glDrawElements = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDrawElements", "(IIILjava/nio/Buffer;)V");

  /// from: static public native void glDrawElements(int mode, int count, int type, java.nio.Buffer indices)
  static void glDrawElements(
          int mode, int count, int type, jni.JniObject indices) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDrawElements,
          jni.JniType.voidType, [mode, count, type, indices.reference]).check();

  static final _id_glEnable =
      jniAccessors.getStaticMethodIDOf(_classRef, "glEnable", "(I)V");

  /// from: static public native void glEnable(int cap)
  static void glEnable(int cap) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glEnable, jni.JniType.voidType, [cap]).check();

  static final _id_glEnableClientState = jniAccessors.getStaticMethodIDOf(
      _classRef, "glEnableClientState", "(I)V");

  /// from: static public native void glEnableClientState(int array)
  static void glEnableClientState(int array) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glEnableClientState,
          jni.JniType.voidType, [array]).check();

  static final _id_glFinish =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFinish", "()V");

  /// from: static public native void glFinish()
  static void glFinish() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glFinish, jni.JniType.voidType, []).check();

  static final _id_glFlush =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFlush", "()V");

  /// from: static public native void glFlush()
  static void glFlush() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glFlush, jni.JniType.voidType, []).check();

  static final _id_glFogf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFogf", "(IF)V");

  /// from: static public native void glFogf(int pname, float param)
  static void glFogf(int pname, double param) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glFogf, jni.JniType.voidType, [pname, param]).check();

  static final _id_glFogfv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFogfv", "(I[FI)V");

  /// from: static public native void glFogfv(int pname, float[] params, int offset)
  static void glFogfv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glFogfv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glFogfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glFogfv", "(ILjava/nio/FloatBuffer;)V");

  /// from: static public native void glFogfv(int pname, java.nio.FloatBuffer params)
  static void glFogfv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glFogfv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glFogx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFogx", "(II)V");

  /// from: static public native void glFogx(int pname, int param)
  static void glFogx(int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glFogx, jni.JniType.voidType, [pname, param]).check();

  static final _id_glFogxv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFogxv", "(I[II)V");

  /// from: static public native void glFogxv(int pname, int[] params, int offset)
  static void glFogxv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glFogxv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glFogxv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glFogxv", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glFogxv(int pname, java.nio.IntBuffer params)
  static void glFogxv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glFogxv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glFrontFace =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFrontFace", "(I)V");

  /// from: static public native void glFrontFace(int mode)
  static void glFrontFace(int mode) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glFrontFace, jni.JniType.voidType, [mode]).check();

  static final _id_glFrustumf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFrustumf", "(FFFFFF)V");

  /// from: static public native void glFrustumf(float left, float right, float bottom, float top, float zNear, float zFar)
  static void glFrustumf(double left, double right, double bottom, double top,
          double zNear, double zFar) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glFrustumf,
          jni.JniType.voidType,
          [left, right, bottom, top, zNear, zFar]).check();

  static final _id_glFrustumx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFrustumx", "(IIIIII)V");

  /// from: static public native void glFrustumx(int left, int right, int bottom, int top, int zNear, int zFar)
  static void glFrustumx(
          int left, int right, int bottom, int top, int zNear, int zFar) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glFrustumx,
          jni.JniType.voidType,
          [left, right, bottom, top, zNear, zFar]).check();

  static final _id_glGenTextures =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGenTextures", "(I[II)V");

  /// from: static public native void glGenTextures(int n, int[] textures, int offset)
  static void glGenTextures(int n, jni.JniObject textures, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenTextures,
          jni.JniType.voidType, [n, textures.reference, offset]).check();

  static final _id_glGenTextures1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenTextures", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGenTextures(int n, java.nio.IntBuffer textures)
  static void glGenTextures1(int n, jni.JniObject textures) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenTextures1,
          jni.JniType.voidType, [n, textures.reference]).check();

  static final _id_glGetError =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetError", "()I");

  /// from: static public native int glGetError()
  static int glGetError() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glGetError, jni.JniType.intType, []).integer;

  static final _id_glGetIntegerv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetIntegerv", "(I[II)V");

  /// from: static public native void glGetIntegerv(int pname, int[] params, int offset)
  static void glGetIntegerv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetIntegerv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glGetIntegerv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetIntegerv", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetIntegerv(int pname, java.nio.IntBuffer params)
  static void glGetIntegerv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetIntegerv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glGetString = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetString", "(I)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetString(int name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetString(int name) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetString, jni.JniType.objectType, [name]).object);

  static final _id_glHint =
      jniAccessors.getStaticMethodIDOf(_classRef, "glHint", "(II)V");

  /// from: static public native void glHint(int target, int mode)
  static void glHint(int target, int mode) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glHint, jni.JniType.voidType, [target, mode]).check();

  static final _id_glLightModelf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLightModelf", "(IF)V");

  /// from: static public native void glLightModelf(int pname, float param)
  static void glLightModelf(int pname, double param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLightModelf,
          jni.JniType.voidType, [pname, param]).check();

  static final _id_glLightModelfv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLightModelfv", "(I[FI)V");

  /// from: static public native void glLightModelfv(int pname, float[] params, int offset)
  static void glLightModelfv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLightModelfv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glLightModelfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glLightModelfv", "(ILjava/nio/FloatBuffer;)V");

  /// from: static public native void glLightModelfv(int pname, java.nio.FloatBuffer params)
  static void glLightModelfv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLightModelfv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glLightModelx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLightModelx", "(II)V");

  /// from: static public native void glLightModelx(int pname, int param)
  static void glLightModelx(int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLightModelx,
          jni.JniType.voidType, [pname, param]).check();

  static final _id_glLightModelxv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLightModelxv", "(I[II)V");

  /// from: static public native void glLightModelxv(int pname, int[] params, int offset)
  static void glLightModelxv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLightModelxv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glLightModelxv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glLightModelxv", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glLightModelxv(int pname, java.nio.IntBuffer params)
  static void glLightModelxv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLightModelxv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glLightf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLightf", "(IIF)V");

  /// from: static public native void glLightf(int light, int pname, float param)
  static void glLightf(int light, int pname, double param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLightf,
          jni.JniType.voidType, [light, pname, param]).check();

  static final _id_glLightfv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLightfv", "(II[FI)V");

  /// from: static public native void glLightfv(int light, int pname, float[] params, int offset)
  static void glLightfv(
          int light, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glLightfv,
          jni.JniType.voidType,
          [light, pname, params.reference, offset]).check();

  static final _id_glLightfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glLightfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glLightfv(int light, int pname, java.nio.FloatBuffer params)
  static void glLightfv1(int light, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLightfv1,
          jni.JniType.voidType, [light, pname, params.reference]).check();

  static final _id_glLightx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLightx", "(III)V");

  /// from: static public native void glLightx(int light, int pname, int param)
  static void glLightx(int light, int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLightx,
          jni.JniType.voidType, [light, pname, param]).check();

  static final _id_glLightxv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLightxv", "(II[II)V");

  /// from: static public native void glLightxv(int light, int pname, int[] params, int offset)
  static void glLightxv(
          int light, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glLightxv,
          jni.JniType.voidType,
          [light, pname, params.reference, offset]).check();

  static final _id_glLightxv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glLightxv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glLightxv(int light, int pname, java.nio.IntBuffer params)
  static void glLightxv1(int light, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLightxv1,
          jni.JniType.voidType, [light, pname, params.reference]).check();

  static final _id_glLineWidth =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLineWidth", "(F)V");

  /// from: static public native void glLineWidth(float width)
  static void glLineWidth(double width) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glLineWidth, jni.JniType.voidType, [width]).check();

  static final _id_glLineWidthx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLineWidthx", "(I)V");

  /// from: static public native void glLineWidthx(int width)
  static void glLineWidthx(int width) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glLineWidthx, jni.JniType.voidType, [width]).check();

  static final _id_glLoadIdentity =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLoadIdentity", "()V");

  /// from: static public native void glLoadIdentity()
  static void glLoadIdentity() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glLoadIdentity, jni.JniType.voidType, []).check();

  static final _id_glLoadMatrixf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLoadMatrixf", "([FI)V");

  /// from: static public native void glLoadMatrixf(float[] m, int offset)
  static void glLoadMatrixf(jni.JniObject m, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLoadMatrixf,
          jni.JniType.voidType, [m.reference, offset]).check();

  static final _id_glLoadMatrixf1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glLoadMatrixf", "(Ljava/nio/FloatBuffer;)V");

  /// from: static public native void glLoadMatrixf(java.nio.FloatBuffer m)
  static void glLoadMatrixf1(jni.JniObject m) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLoadMatrixf1,
          jni.JniType.voidType, [m.reference]).check();

  static final _id_glLoadMatrixx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLoadMatrixx", "([II)V");

  /// from: static public native void glLoadMatrixx(int[] m, int offset)
  static void glLoadMatrixx(jni.JniObject m, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLoadMatrixx,
          jni.JniType.voidType, [m.reference, offset]).check();

  static final _id_glLoadMatrixx1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glLoadMatrixx", "(Ljava/nio/IntBuffer;)V");

  /// from: static public native void glLoadMatrixx(java.nio.IntBuffer m)
  static void glLoadMatrixx1(jni.JniObject m) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLoadMatrixx1,
          jni.JniType.voidType, [m.reference]).check();

  static final _id_glLogicOp =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLogicOp", "(I)V");

  /// from: static public native void glLogicOp(int opcode)
  static void glLogicOp(int opcode) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glLogicOp, jni.JniType.voidType, [opcode]).check();

  static final _id_glMaterialf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glMaterialf", "(IIF)V");

  /// from: static public native void glMaterialf(int face, int pname, float param)
  static void glMaterialf(int face, int pname, double param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMaterialf,
          jni.JniType.voidType, [face, pname, param]).check();

  static final _id_glMaterialfv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glMaterialfv", "(II[FI)V");

  /// from: static public native void glMaterialfv(int face, int pname, float[] params, int offset)
  static void glMaterialfv(
          int face, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glMaterialfv,
          jni.JniType.voidType,
          [face, pname, params.reference, offset]).check();

  static final _id_glMaterialfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glMaterialfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glMaterialfv(int face, int pname, java.nio.FloatBuffer params)
  static void glMaterialfv1(int face, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMaterialfv1,
          jni.JniType.voidType, [face, pname, params.reference]).check();

  static final _id_glMaterialx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glMaterialx", "(III)V");

  /// from: static public native void glMaterialx(int face, int pname, int param)
  static void glMaterialx(int face, int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMaterialx,
          jni.JniType.voidType, [face, pname, param]).check();

  static final _id_glMaterialxv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glMaterialxv", "(II[II)V");

  /// from: static public native void glMaterialxv(int face, int pname, int[] params, int offset)
  static void glMaterialxv(
          int face, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glMaterialxv,
          jni.JniType.voidType,
          [face, pname, params.reference, offset]).check();

  static final _id_glMaterialxv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glMaterialxv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glMaterialxv(int face, int pname, java.nio.IntBuffer params)
  static void glMaterialxv1(int face, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMaterialxv1,
          jni.JniType.voidType, [face, pname, params.reference]).check();

  static final _id_glMatrixMode =
      jniAccessors.getStaticMethodIDOf(_classRef, "glMatrixMode", "(I)V");

  /// from: static public native void glMatrixMode(int mode)
  static void glMatrixMode(int mode) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glMatrixMode, jni.JniType.voidType, [mode]).check();

  static final _id_glMultMatrixf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glMultMatrixf", "([FI)V");

  /// from: static public native void glMultMatrixf(float[] m, int offset)
  static void glMultMatrixf(jni.JniObject m, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMultMatrixf,
          jni.JniType.voidType, [m.reference, offset]).check();

  static final _id_glMultMatrixf1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glMultMatrixf", "(Ljava/nio/FloatBuffer;)V");

  /// from: static public native void glMultMatrixf(java.nio.FloatBuffer m)
  static void glMultMatrixf1(jni.JniObject m) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMultMatrixf1,
          jni.JniType.voidType, [m.reference]).check();

  static final _id_glMultMatrixx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glMultMatrixx", "([II)V");

  /// from: static public native void glMultMatrixx(int[] m, int offset)
  static void glMultMatrixx(jni.JniObject m, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMultMatrixx,
          jni.JniType.voidType, [m.reference, offset]).check();

  static final _id_glMultMatrixx1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glMultMatrixx", "(Ljava/nio/IntBuffer;)V");

  /// from: static public native void glMultMatrixx(java.nio.IntBuffer m)
  static void glMultMatrixx1(jni.JniObject m) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMultMatrixx1,
          jni.JniType.voidType, [m.reference]).check();

  static final _id_glMultiTexCoord4f = jniAccessors.getStaticMethodIDOf(
      _classRef, "glMultiTexCoord4f", "(IFFFF)V");

  /// from: static public native void glMultiTexCoord4f(int target, float s, float t, float r, float q)
  static void glMultiTexCoord4f(
          int target, double s, double t, double r, double q) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMultiTexCoord4f,
          jni.JniType.voidType, [target, s, t, r, q]).check();

  static final _id_glMultiTexCoord4x = jniAccessors.getStaticMethodIDOf(
      _classRef, "glMultiTexCoord4x", "(IIIII)V");

  /// from: static public native void glMultiTexCoord4x(int target, int s, int t, int r, int q)
  static void glMultiTexCoord4x(int target, int s, int t, int r, int q) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMultiTexCoord4x,
          jni.JniType.voidType, [target, s, t, r, q]).check();

  static final _id_glNormal3f =
      jniAccessors.getStaticMethodIDOf(_classRef, "glNormal3f", "(FFF)V");

  /// from: static public native void glNormal3f(float nx, float ny, float nz)
  static void glNormal3f(double nx, double ny, double nz) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glNormal3f,
          jni.JniType.voidType, [nx, ny, nz]).check();

  static final _id_glNormal3x =
      jniAccessors.getStaticMethodIDOf(_classRef, "glNormal3x", "(III)V");

  /// from: static public native void glNormal3x(int nx, int ny, int nz)
  static void glNormal3x(int nx, int ny, int nz) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glNormal3x,
          jni.JniType.voidType, [nx, ny, nz]).check();

  static final _id_glNormalPointer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glNormalPointer", "(IILjava/nio/Buffer;)V");

  /// from: static public void glNormalPointer(int type, int stride, java.nio.Buffer pointer)
  static void glNormalPointer(int type, int stride, jni.JniObject pointer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glNormalPointer,
          jni.JniType.voidType, [type, stride, pointer.reference]).check();

  static final _id_glOrthof =
      jniAccessors.getStaticMethodIDOf(_classRef, "glOrthof", "(FFFFFF)V");

  /// from: static public native void glOrthof(float left, float right, float bottom, float top, float zNear, float zFar)
  static void glOrthof(double left, double right, double bottom, double top,
          double zNear, double zFar) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glOrthof,
          jni.JniType.voidType,
          [left, right, bottom, top, zNear, zFar]).check();

  static final _id_glOrthox =
      jniAccessors.getStaticMethodIDOf(_classRef, "glOrthox", "(IIIIII)V");

  /// from: static public native void glOrthox(int left, int right, int bottom, int top, int zNear, int zFar)
  static void glOrthox(
          int left, int right, int bottom, int top, int zNear, int zFar) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glOrthox,
          jni.JniType.voidType,
          [left, right, bottom, top, zNear, zFar]).check();

  static final _id_glPixelStorei =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPixelStorei", "(II)V");

  /// from: static public native void glPixelStorei(int pname, int param)
  static void glPixelStorei(int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPixelStorei,
          jni.JniType.voidType, [pname, param]).check();

  static final _id_glPointSize =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPointSize", "(F)V");

  /// from: static public native void glPointSize(float size)
  static void glPointSize(double size) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glPointSize, jni.JniType.voidType, [size]).check();

  static final _id_glPointSizex =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPointSizex", "(I)V");

  /// from: static public native void glPointSizex(int size)
  static void glPointSizex(int size) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glPointSizex, jni.JniType.voidType, [size]).check();

  static final _id_glPolygonOffset =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPolygonOffset", "(FF)V");

  /// from: static public native void glPolygonOffset(float factor, float units)
  static void glPolygonOffset(double factor, double units) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPolygonOffset,
          jni.JniType.voidType, [factor, units]).check();

  static final _id_glPolygonOffsetx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPolygonOffsetx", "(II)V");

  /// from: static public native void glPolygonOffsetx(int factor, int units)
  static void glPolygonOffsetx(int factor, int units) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPolygonOffsetx,
          jni.JniType.voidType, [factor, units]).check();

  static final _id_glPopMatrix =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPopMatrix", "()V");

  /// from: static public native void glPopMatrix()
  static void glPopMatrix() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glPopMatrix, jni.JniType.voidType, []).check();

  static final _id_glPushMatrix =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPushMatrix", "()V");

  /// from: static public native void glPushMatrix()
  static void glPushMatrix() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glPushMatrix, jni.JniType.voidType, []).check();

  static final _id_glReadPixels = jniAccessors.getStaticMethodIDOf(
      _classRef, "glReadPixels", "(IIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glReadPixels(int x, int y, int width, int height, int format, int type, java.nio.Buffer pixels)
  static void glReadPixels(int x, int y, int width, int height, int format,
          int type, jni.JniObject pixels) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glReadPixels,
          jni.JniType.voidType,
          [x, y, width, height, format, type, pixels.reference]).check();

  static final _id_glRotatef =
      jniAccessors.getStaticMethodIDOf(_classRef, "glRotatef", "(FFFF)V");

  /// from: static public native void glRotatef(float angle, float x, float y, float z)
  static void glRotatef(double angle, double x, double y, double z) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glRotatef,
          jni.JniType.voidType, [angle, x, y, z]).check();

  static final _id_glRotatex =
      jniAccessors.getStaticMethodIDOf(_classRef, "glRotatex", "(IIII)V");

  /// from: static public native void glRotatex(int angle, int x, int y, int z)
  static void glRotatex(int angle, int x, int y, int z) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glRotatex,
          jni.JniType.voidType, [angle, x, y, z]).check();

  static final _id_glSampleCoverage =
      jniAccessors.getStaticMethodIDOf(_classRef, "glSampleCoverage", "(FZ)V");

  /// from: static public native void glSampleCoverage(float value, boolean invert)
  static void glSampleCoverage(double value, bool invert) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glSampleCoverage,
          jni.JniType.voidType, [value, invert]).check();

  static final _id_glSampleCoveragex =
      jniAccessors.getStaticMethodIDOf(_classRef, "glSampleCoveragex", "(IZ)V");

  /// from: static public native void glSampleCoveragex(int value, boolean invert)
  static void glSampleCoveragex(int value, bool invert) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glSampleCoveragex,
          jni.JniType.voidType, [value, invert]).check();

  static final _id_glScalef =
      jniAccessors.getStaticMethodIDOf(_classRef, "glScalef", "(FFF)V");

  /// from: static public native void glScalef(float x, float y, float z)
  static void glScalef(double x, double y, double z) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glScalef, jni.JniType.voidType, [x, y, z]).check();

  static final _id_glScalex =
      jniAccessors.getStaticMethodIDOf(_classRef, "glScalex", "(III)V");

  /// from: static public native void glScalex(int x, int y, int z)
  static void glScalex(int x, int y, int z) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glScalex, jni.JniType.voidType, [x, y, z]).check();

  static final _id_glScissor =
      jniAccessors.getStaticMethodIDOf(_classRef, "glScissor", "(IIII)V");

  /// from: static public native void glScissor(int x, int y, int width, int height)
  static void glScissor(int x, int y, int width, int height) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glScissor,
          jni.JniType.voidType, [x, y, width, height]).check();

  static final _id_glShadeModel =
      jniAccessors.getStaticMethodIDOf(_classRef, "glShadeModel", "(I)V");

  /// from: static public native void glShadeModel(int mode)
  static void glShadeModel(int mode) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glShadeModel, jni.JniType.voidType, [mode]).check();

  static final _id_glStencilFunc =
      jniAccessors.getStaticMethodIDOf(_classRef, "glStencilFunc", "(III)V");

  /// from: static public native void glStencilFunc(int func, int ref, int mask)
  static void glStencilFunc(int func, int ref, int mask) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glStencilFunc,
          jni.JniType.voidType, [func, ref, mask]).check();

  static final _id_glStencilMask =
      jniAccessors.getStaticMethodIDOf(_classRef, "glStencilMask", "(I)V");

  /// from: static public native void glStencilMask(int mask)
  static void glStencilMask(int mask) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glStencilMask, jni.JniType.voidType, [mask]).check();

  static final _id_glStencilOp =
      jniAccessors.getStaticMethodIDOf(_classRef, "glStencilOp", "(III)V");

  /// from: static public native void glStencilOp(int fail, int zfail, int zpass)
  static void glStencilOp(int fail, int zfail, int zpass) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glStencilOp,
          jni.JniType.voidType, [fail, zfail, zpass]).check();

  static final _id_glTexCoordPointer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexCoordPointer", "(IIILjava/nio/Buffer;)V");

  /// from: static public void glTexCoordPointer(int size, int type, int stride, java.nio.Buffer pointer)
  static void glTexCoordPointer(
          int size, int type, int stride, jni.JniObject pointer) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexCoordPointer,
          jni.JniType.voidType,
          [size, type, stride, pointer.reference]).check();

  static final _id_glTexEnvf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexEnvf", "(IIF)V");

  /// from: static public native void glTexEnvf(int target, int pname, float param)
  static void glTexEnvf(int target, int pname, double param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexEnvf,
          jni.JniType.voidType, [target, pname, param]).check();

  static final _id_glTexEnvfv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexEnvfv", "(II[FI)V");

  /// from: static public native void glTexEnvfv(int target, int pname, float[] params, int offset)
  static void glTexEnvfv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexEnvfv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glTexEnvfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexEnvfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glTexEnvfv(int target, int pname, java.nio.FloatBuffer params)
  static void glTexEnvfv1(int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexEnvfv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glTexEnvx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexEnvx", "(III)V");

  /// from: static public native void glTexEnvx(int target, int pname, int param)
  static void glTexEnvx(int target, int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexEnvx,
          jni.JniType.voidType, [target, pname, param]).check();

  static final _id_glTexEnvxv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexEnvxv", "(II[II)V");

  /// from: static public native void glTexEnvxv(int target, int pname, int[] params, int offset)
  static void glTexEnvxv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexEnvxv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glTexEnvxv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexEnvxv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glTexEnvxv(int target, int pname, java.nio.IntBuffer params)
  static void glTexEnvxv1(int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexEnvxv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glTexImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexImage2D", "(IIIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, java.nio.Buffer pixels)
  static void glTexImage2D(int target, int level, int internalformat, int width,
          int height, int border, int format, int type, jni.JniObject pixels) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTexImage2D, jni.JniType.voidType, [
        target,
        level,
        internalformat,
        width,
        height,
        border,
        format,
        type,
        pixels.reference
      ]).check();

  static final _id_glTexParameterf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexParameterf", "(IIF)V");

  /// from: static public native void glTexParameterf(int target, int pname, float param)
  static void glTexParameterf(int target, int pname, double param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameterf,
          jni.JniType.voidType, [target, pname, param]).check();

  static final _id_glTexParameterx =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexParameterx", "(III)V");

  /// from: static public native void glTexParameterx(int target, int pname, int param)
  static void glTexParameterx(int target, int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameterx,
          jni.JniType.voidType, [target, pname, param]).check();

  static final _id_glTexSubImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexSubImage2D", "(IIIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, java.nio.Buffer pixels)
  static void glTexSubImage2D(int target, int level, int xoffset, int yoffset,
          int width, int height, int format, int type, jni.JniObject pixels) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTexSubImage2D, jni.JniType.voidType, [
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        type,
        pixels.reference
      ]).check();

  static final _id_glTranslatef =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTranslatef", "(FFF)V");

  /// from: static public native void glTranslatef(float x, float y, float z)
  static void glTranslatef(double x, double y, double z) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTranslatef, jni.JniType.voidType, [x, y, z]).check();

  static final _id_glTranslatex =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTranslatex", "(III)V");

  /// from: static public native void glTranslatex(int x, int y, int z)
  static void glTranslatex(int x, int y, int z) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTranslatex, jni.JniType.voidType, [x, y, z]).check();

  static final _id_glVertexPointer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexPointer", "(IIILjava/nio/Buffer;)V");

  /// from: static public void glVertexPointer(int size, int type, int stride, java.nio.Buffer pointer)
  static void glVertexPointer(
          int size, int type, int stride, jni.JniObject pointer) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glVertexPointer,
          jni.JniType.voidType,
          [size, type, stride, pointer.reference]).check();

  static final _id_glViewport =
      jniAccessors.getStaticMethodIDOf(_classRef, "glViewport", "(IIII)V");

  /// from: static public native void glViewport(int x, int y, int width, int height)
  static void glViewport(int x, int y, int width, int height) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glViewport,
          jni.JniType.voidType, [x, y, width, height]).check();
}
