// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.opengl.ETC1Util
///
/// Utility methods for using ETC1 compressed textures.
class ETC1Util extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/opengl/ETC1Util");
  ETC1Util.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ETC1Util()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_loadTexture = jniAccessors.getStaticMethodIDOf(
      _classRef, "loadTexture", "(IIIIILjava/io/InputStream;)V");

  /// from: static public void loadTexture(int target, int level, int border, int fallbackFormat, int fallbackType, java.io.InputStream input)
  ///
  /// Convenience method to load an ETC1 texture whether or not the active OpenGL context
  /// supports the ETC1 texture compression format.
  ///@param target the texture target.
  ///@param level the texture level
  ///@param border the border size. Typically 0.
  ///@param fallbackFormat the format to use if ETC1 texture compression is not supported.
  /// Must be GL_RGB.
  ///@param fallbackType the type to use if ETC1 texture compression is not supported.
  /// Can be either GL_UNSIGNED_SHORT_5_6_5, which implies 16-bits-per-pixel,
  /// or GL_UNSIGNED_BYTE, which implies 24-bits-per-pixel.
  ///@param input the input stream containing an ETC1 texture in PKM format.
  ///@throws IOException
  static void loadTexture(int target, int level, int border, int fallbackFormat,
          int fallbackType, jni.JniObject input) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_loadTexture, jni.JniType.voidType, [
        target,
        level,
        border,
        fallbackFormat,
        fallbackType,
        input.reference
      ]).check();

  static final _id_loadTexture1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "loadTexture", "(IIIIILandroid/opengl/ETC1Util\$ETC1Texture;)V");

  /// from: static public void loadTexture(int target, int level, int border, int fallbackFormat, int fallbackType, android.opengl.ETC1Util.ETC1Texture texture)
  ///
  /// Convenience method to load an ETC1 texture whether or not the active OpenGL context
  /// supports the ETC1 texture compression format.
  ///@param target the texture target.
  ///@param level the texture level
  ///@param border the border size. Typically 0.
  ///@param fallbackFormat the format to use if ETC1 texture compression is not supported.
  /// Must be GL_RGB.
  ///@param fallbackType the type to use if ETC1 texture compression is not supported.
  /// Can be either GL_UNSIGNED_SHORT_5_6_5, which implies 16-bits-per-pixel,
  /// or GL_UNSIGNED_BYTE, which implies 24-bits-per-pixel.
  ///@param texture the ETC1 to load.
  static void loadTexture1(int target, int level, int border,
          int fallbackFormat, int fallbackType, ETC1Util_ETC1Texture texture) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_loadTexture1, jni.JniType.voidType, [
        target,
        level,
        border,
        fallbackFormat,
        fallbackType,
        texture.reference
      ]).check();

  static final _id_isETC1Supported =
      jniAccessors.getStaticMethodIDOf(_classRef, "isETC1Supported", "()Z");

  /// from: static public boolean isETC1Supported()
  ///
  /// Check if ETC1 texture compression is supported by the active OpenGL ES context.
  ///@return true if the active OpenGL ES context supports ETC1 texture compression.
  static bool isETC1Supported() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_isETC1Supported, jni.JniType.booleanType, []).boolean;

  static final _id_createTexture = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createTexture",
      "(Ljava/io/InputStream;)Landroid/opengl/ETC1Util\$ETC1Texture;");

  /// from: static public android.opengl.ETC1Util.ETC1Texture createTexture(java.io.InputStream input)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new ETC1Texture from an input stream containing a PKM formatted compressed texture.
  ///@param input an input stream containing a PKM formatted compressed texture.
  ///@return an ETC1Texture read from the input stream.
  ///@throws IOException
  static ETC1Util_ETC1Texture createTexture(jni.JniObject input) =>
      ETC1Util_ETC1Texture.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createTexture,
          jni.JniType.objectType,
          [input.reference]).object);

  static final _id_compressTexture = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "compressTexture",
      "(Ljava/nio/Buffer;IIII)Landroid/opengl/ETC1Util\$ETC1Texture;");

  /// from: static public android.opengl.ETC1Util.ETC1Texture compressTexture(java.nio.Buffer input, int width, int height, int pixelSize, int stride)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Helper function that compresses an image into an ETC1Texture.
  ///@param input a native order direct buffer containing the image data
  ///@param width the width of the image in pixels
  ///@param height the height of the image in pixels
  ///@param pixelSize the size of a pixel in bytes (2 or 3)
  ///@param stride the width of a line of the image in bytes
  ///@return the ETC1 texture.
  static ETC1Util_ETC1Texture compressTexture(jni.JniObject input, int width,
          int height, int pixelSize, int stride) =>
      ETC1Util_ETC1Texture.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_compressTexture,
          jni.JniType.objectType,
          [input.reference, width, height, pixelSize, stride]).object);

  static final _id_writeTexture = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "writeTexture",
      "(Landroid/opengl/ETC1Util\$ETC1Texture;Ljava/io/OutputStream;)V");

  /// from: static public void writeTexture(android.opengl.ETC1Util.ETC1Texture texture, java.io.OutputStream output)
  ///
  /// Helper function that writes an ETC1Texture to an output stream formatted as a PKM file.
  ///@param texture the input texture.
  ///@param output the stream to write the formatted texture data to.
  ///@throws IOException
  static void writeTexture(
          ETC1Util_ETC1Texture texture, jni.JniObject output) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_writeTexture,
          jni.JniType.voidType, [texture.reference, output.reference]).check();
}

/// from: android.opengl.ETC1Util$ETC1Texture
///
/// A utility class encapsulating a compressed ETC1 texture.
class ETC1Util_ETC1Texture extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/opengl/ETC1Util\$ETC1Texture");
  ETC1Util_ETC1Texture.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(IILjava/nio/ByteBuffer;)V");

  /// from: public void <init>(int width, int height, java.nio.ByteBuffer data)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ETC1Util_ETC1Texture(int width, int height, jni.JniObject data)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [width, height, data.reference]).object);

  static final _id_getWidth =
      jniAccessors.getMethodIDOf(_classRef, "getWidth", "()I");

  /// from: public int getWidth()
  ///
  /// Get the width of the texture in pixels.
  ///@return the width of the texture in pixels.
  int getWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getWidth, jni.JniType.intType, []).integer;

  static final _id_getHeight =
      jniAccessors.getMethodIDOf(_classRef, "getHeight", "()I");

  /// from: public int getHeight()
  ///
  /// Get the height of the texture in pixels.
  ///@return the width of the texture in pixels.
  int getHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getHeight, jni.JniType.intType, []).integer;

  static final _id_getData = jniAccessors.getMethodIDOf(
      _classRef, "getData", "()Ljava/nio/ByteBuffer;");

  /// from: public java.nio.ByteBuffer getData()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the compressed data of the texture.
  ///@return the texture data.
  jni.JniObject getData() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getData, jni.JniType.objectType, []).object);
}
