// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "EGLContext.dart" as eglcontext_;

import "EGLDisplay.dart" as egldisplay_;

import "EGLSurface.dart" as eglsurface_;

import "EGLConfig.dart" as eglconfig_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.opengl.EGL14
///
/// EGL 1.4
class EGL14 extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/opengl/EGL14");
  EGL14.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int EGL_ALPHA_MASK_SIZE
  static const EGL_ALPHA_MASK_SIZE = 12350;

  /// from: static public final int EGL_ALPHA_SIZE
  static const EGL_ALPHA_SIZE = 12321;

  /// from: static public final int EGL_BACK_BUFFER
  static const EGL_BACK_BUFFER = 12420;

  /// from: static public final int EGL_BAD_ACCESS
  static const EGL_BAD_ACCESS = 12290;

  /// from: static public final int EGL_BAD_ALLOC
  static const EGL_BAD_ALLOC = 12291;

  /// from: static public final int EGL_BAD_ATTRIBUTE
  static const EGL_BAD_ATTRIBUTE = 12292;

  /// from: static public final int EGL_BAD_CONFIG
  static const EGL_BAD_CONFIG = 12293;

  /// from: static public final int EGL_BAD_CONTEXT
  static const EGL_BAD_CONTEXT = 12294;

  /// from: static public final int EGL_BAD_CURRENT_SURFACE
  static const EGL_BAD_CURRENT_SURFACE = 12295;

  /// from: static public final int EGL_BAD_DISPLAY
  static const EGL_BAD_DISPLAY = 12296;

  /// from: static public final int EGL_BAD_MATCH
  static const EGL_BAD_MATCH = 12297;

  /// from: static public final int EGL_BAD_NATIVE_PIXMAP
  static const EGL_BAD_NATIVE_PIXMAP = 12298;

  /// from: static public final int EGL_BAD_NATIVE_WINDOW
  static const EGL_BAD_NATIVE_WINDOW = 12299;

  /// from: static public final int EGL_BAD_PARAMETER
  static const EGL_BAD_PARAMETER = 12300;

  /// from: static public final int EGL_BAD_SURFACE
  static const EGL_BAD_SURFACE = 12301;

  /// from: static public final int EGL_BIND_TO_TEXTURE_RGB
  static const EGL_BIND_TO_TEXTURE_RGB = 12345;

  /// from: static public final int EGL_BIND_TO_TEXTURE_RGBA
  static const EGL_BIND_TO_TEXTURE_RGBA = 12346;

  /// from: static public final int EGL_BLUE_SIZE
  static const EGL_BLUE_SIZE = 12322;

  /// from: static public final int EGL_BUFFER_DESTROYED
  static const EGL_BUFFER_DESTROYED = 12437;

  /// from: static public final int EGL_BUFFER_PRESERVED
  static const EGL_BUFFER_PRESERVED = 12436;

  /// from: static public final int EGL_BUFFER_SIZE
  static const EGL_BUFFER_SIZE = 12320;

  /// from: static public final int EGL_CLIENT_APIS
  static const EGL_CLIENT_APIS = 12429;

  /// from: static public final int EGL_COLOR_BUFFER_TYPE
  static const EGL_COLOR_BUFFER_TYPE = 12351;

  /// from: static public final int EGL_CONFIG_CAVEAT
  static const EGL_CONFIG_CAVEAT = 12327;

  /// from: static public final int EGL_CONFIG_ID
  static const EGL_CONFIG_ID = 12328;

  /// from: static public final int EGL_CONFORMANT
  static const EGL_CONFORMANT = 12354;

  /// from: static public final int EGL_CONTEXT_CLIENT_TYPE
  static const EGL_CONTEXT_CLIENT_TYPE = 12439;

  /// from: static public final int EGL_CONTEXT_CLIENT_VERSION
  static const EGL_CONTEXT_CLIENT_VERSION = 12440;

  /// from: static public final int EGL_CONTEXT_LOST
  static const EGL_CONTEXT_LOST = 12302;

  /// from: static public final int EGL_CORE_NATIVE_ENGINE
  static const EGL_CORE_NATIVE_ENGINE = 12379;

  /// from: static public final int EGL_DEFAULT_DISPLAY
  static const EGL_DEFAULT_DISPLAY = 0;

  /// from: static public final int EGL_DEPTH_SIZE
  static const EGL_DEPTH_SIZE = 12325;

  /// from: static public final int EGL_DISPLAY_SCALING
  static const EGL_DISPLAY_SCALING = 10000;

  /// from: static public final int EGL_DRAW
  static const EGL_DRAW = 12377;

  /// from: static public final int EGL_EXTENSIONS
  static const EGL_EXTENSIONS = 12373;

  /// from: static public final int EGL_FALSE
  static const EGL_FALSE = 0;

  /// from: static public final int EGL_GREEN_SIZE
  static const EGL_GREEN_SIZE = 12323;

  /// from: static public final int EGL_HEIGHT
  static const EGL_HEIGHT = 12374;

  /// from: static public final int EGL_HORIZONTAL_RESOLUTION
  static const EGL_HORIZONTAL_RESOLUTION = 12432;

  /// from: static public final int EGL_LARGEST_PBUFFER
  static const EGL_LARGEST_PBUFFER = 12376;

  /// from: static public final int EGL_LEVEL
  static const EGL_LEVEL = 12329;

  /// from: static public final int EGL_LUMINANCE_BUFFER
  static const EGL_LUMINANCE_BUFFER = 12431;

  /// from: static public final int EGL_LUMINANCE_SIZE
  static const EGL_LUMINANCE_SIZE = 12349;

  /// from: static public final int EGL_MATCH_NATIVE_PIXMAP
  static const EGL_MATCH_NATIVE_PIXMAP = 12353;

  /// from: static public final int EGL_MAX_PBUFFER_HEIGHT
  static const EGL_MAX_PBUFFER_HEIGHT = 12330;

  /// from: static public final int EGL_MAX_PBUFFER_PIXELS
  static const EGL_MAX_PBUFFER_PIXELS = 12331;

  /// from: static public final int EGL_MAX_PBUFFER_WIDTH
  static const EGL_MAX_PBUFFER_WIDTH = 12332;

  /// from: static public final int EGL_MAX_SWAP_INTERVAL
  static const EGL_MAX_SWAP_INTERVAL = 12348;

  /// from: static public final int EGL_MIN_SWAP_INTERVAL
  static const EGL_MIN_SWAP_INTERVAL = 12347;

  /// from: static public final int EGL_MIPMAP_LEVEL
  static const EGL_MIPMAP_LEVEL = 12419;

  /// from: static public final int EGL_MIPMAP_TEXTURE
  static const EGL_MIPMAP_TEXTURE = 12418;

  /// from: static public final int EGL_MULTISAMPLE_RESOLVE
  static const EGL_MULTISAMPLE_RESOLVE = 12441;

  /// from: static public final int EGL_MULTISAMPLE_RESOLVE_BOX
  static const EGL_MULTISAMPLE_RESOLVE_BOX = 12443;

  /// from: static public final int EGL_MULTISAMPLE_RESOLVE_BOX_BIT
  static const EGL_MULTISAMPLE_RESOLVE_BOX_BIT = 512;

  /// from: static public final int EGL_MULTISAMPLE_RESOLVE_DEFAULT
  static const EGL_MULTISAMPLE_RESOLVE_DEFAULT = 12442;

  /// from: static public final int EGL_NATIVE_RENDERABLE
  static const EGL_NATIVE_RENDERABLE = 12333;

  /// from: static public final int EGL_NATIVE_VISUAL_ID
  static const EGL_NATIVE_VISUAL_ID = 12334;

  /// from: static public final int EGL_NATIVE_VISUAL_TYPE
  static const EGL_NATIVE_VISUAL_TYPE = 12335;

  /// from: static public final int EGL_NONE
  static const EGL_NONE = 12344;

  /// from: static public final int EGL_NON_CONFORMANT_CONFIG
  static const EGL_NON_CONFORMANT_CONFIG = 12369;

  /// from: static public final int EGL_NOT_INITIALIZED
  static const EGL_NOT_INITIALIZED = 12289;

  static final _id_EGL_NO_CONTEXT = jniAccessors.getStaticFieldIDOf(
      _classRef, "EGL_NO_CONTEXT", "Landroid/opengl/EGLContext;");

  /// from: static public android.opengl.EGLContext EGL_NO_CONTEXT
  /// The returned object must be deleted after use, by calling the `delete` method.
  static eglcontext_.EGLContext get EGL_NO_CONTEXT =>
      eglcontext_.EGLContext.fromRef(jniAccessors
          .getStaticField(_classRef, _id_EGL_NO_CONTEXT, jni.JniType.objectType)
          .object);

  /// from: static public android.opengl.EGLContext EGL_NO_CONTEXT
  /// The returned object must be deleted after use, by calling the `delete` method.
  static set EGL_NO_CONTEXT(eglcontext_.EGLContext value) =>
      jniEnv.SetStaticObjectField(
          _classRef, _id_EGL_NO_CONTEXT, value.reference);

  static final _id_EGL_NO_DISPLAY = jniAccessors.getStaticFieldIDOf(
      _classRef, "EGL_NO_DISPLAY", "Landroid/opengl/EGLDisplay;");

  /// from: static public android.opengl.EGLDisplay EGL_NO_DISPLAY
  /// The returned object must be deleted after use, by calling the `delete` method.
  static egldisplay_.EGLDisplay get EGL_NO_DISPLAY =>
      egldisplay_.EGLDisplay.fromRef(jniAccessors
          .getStaticField(_classRef, _id_EGL_NO_DISPLAY, jni.JniType.objectType)
          .object);

  /// from: static public android.opengl.EGLDisplay EGL_NO_DISPLAY
  /// The returned object must be deleted after use, by calling the `delete` method.
  static set EGL_NO_DISPLAY(egldisplay_.EGLDisplay value) =>
      jniEnv.SetStaticObjectField(
          _classRef, _id_EGL_NO_DISPLAY, value.reference);

  static final _id_EGL_NO_SURFACE = jniAccessors.getStaticFieldIDOf(
      _classRef, "EGL_NO_SURFACE", "Landroid/opengl/EGLSurface;");

  /// from: static public android.opengl.EGLSurface EGL_NO_SURFACE
  /// The returned object must be deleted after use, by calling the `delete` method.
  static eglsurface_.EGLSurface get EGL_NO_SURFACE =>
      eglsurface_.EGLSurface.fromRef(jniAccessors
          .getStaticField(_classRef, _id_EGL_NO_SURFACE, jni.JniType.objectType)
          .object);

  /// from: static public android.opengl.EGLSurface EGL_NO_SURFACE
  /// The returned object must be deleted after use, by calling the `delete` method.
  static set EGL_NO_SURFACE(eglsurface_.EGLSurface value) =>
      jniEnv.SetStaticObjectField(
          _classRef, _id_EGL_NO_SURFACE, value.reference);

  /// from: static public final int EGL_NO_TEXTURE
  static const EGL_NO_TEXTURE = 12380;

  /// from: static public final int EGL_OPENGL_API
  static const EGL_OPENGL_API = 12450;

  /// from: static public final int EGL_OPENGL_BIT
  static const EGL_OPENGL_BIT = 8;

  /// from: static public final int EGL_OPENGL_ES2_BIT
  static const EGL_OPENGL_ES2_BIT = 4;

  /// from: static public final int EGL_OPENGL_ES_API
  static const EGL_OPENGL_ES_API = 12448;

  /// from: static public final int EGL_OPENGL_ES_BIT
  static const EGL_OPENGL_ES_BIT = 1;

  /// from: static public final int EGL_OPENVG_API
  static const EGL_OPENVG_API = 12449;

  /// from: static public final int EGL_OPENVG_BIT
  static const EGL_OPENVG_BIT = 2;

  /// from: static public final int EGL_OPENVG_IMAGE
  static const EGL_OPENVG_IMAGE = 12438;

  /// from: static public final int EGL_PBUFFER_BIT
  static const EGL_PBUFFER_BIT = 1;

  /// from: static public final int EGL_PIXEL_ASPECT_RATIO
  static const EGL_PIXEL_ASPECT_RATIO = 12434;

  /// from: static public final int EGL_PIXMAP_BIT
  static const EGL_PIXMAP_BIT = 2;

  /// from: static public final int EGL_READ
  static const EGL_READ = 12378;

  /// from: static public final int EGL_RED_SIZE
  static const EGL_RED_SIZE = 12324;

  /// from: static public final int EGL_RENDERABLE_TYPE
  static const EGL_RENDERABLE_TYPE = 12352;

  /// from: static public final int EGL_RENDER_BUFFER
  static const EGL_RENDER_BUFFER = 12422;

  /// from: static public final int EGL_RGB_BUFFER
  static const EGL_RGB_BUFFER = 12430;

  /// from: static public final int EGL_SAMPLES
  static const EGL_SAMPLES = 12337;

  /// from: static public final int EGL_SAMPLE_BUFFERS
  static const EGL_SAMPLE_BUFFERS = 12338;

  /// from: static public final int EGL_SINGLE_BUFFER
  static const EGL_SINGLE_BUFFER = 12421;

  /// from: static public final int EGL_SLOW_CONFIG
  static const EGL_SLOW_CONFIG = 12368;

  /// from: static public final int EGL_STENCIL_SIZE
  static const EGL_STENCIL_SIZE = 12326;

  /// from: static public final int EGL_SUCCESS
  static const EGL_SUCCESS = 12288;

  /// from: static public final int EGL_SURFACE_TYPE
  static const EGL_SURFACE_TYPE = 12339;

  /// from: static public final int EGL_SWAP_BEHAVIOR
  static const EGL_SWAP_BEHAVIOR = 12435;

  /// from: static public final int EGL_SWAP_BEHAVIOR_PRESERVED_BIT
  static const EGL_SWAP_BEHAVIOR_PRESERVED_BIT = 1024;

  /// from: static public final int EGL_TEXTURE_2D
  static const EGL_TEXTURE_2D = 12383;

  /// from: static public final int EGL_TEXTURE_FORMAT
  static const EGL_TEXTURE_FORMAT = 12416;

  /// from: static public final int EGL_TEXTURE_RGB
  static const EGL_TEXTURE_RGB = 12381;

  /// from: static public final int EGL_TEXTURE_RGBA
  static const EGL_TEXTURE_RGBA = 12382;

  /// from: static public final int EGL_TEXTURE_TARGET
  static const EGL_TEXTURE_TARGET = 12417;

  /// from: static public final int EGL_TRANSPARENT_BLUE_VALUE
  static const EGL_TRANSPARENT_BLUE_VALUE = 12341;

  /// from: static public final int EGL_TRANSPARENT_GREEN_VALUE
  static const EGL_TRANSPARENT_GREEN_VALUE = 12342;

  /// from: static public final int EGL_TRANSPARENT_RED_VALUE
  static const EGL_TRANSPARENT_RED_VALUE = 12343;

  /// from: static public final int EGL_TRANSPARENT_RGB
  static const EGL_TRANSPARENT_RGB = 12370;

  /// from: static public final int EGL_TRANSPARENT_TYPE
  static const EGL_TRANSPARENT_TYPE = 12340;

  /// from: static public final int EGL_TRUE
  static const EGL_TRUE = 1;

  /// from: static public final int EGL_VENDOR
  static const EGL_VENDOR = 12371;

  /// from: static public final int EGL_VERSION
  static const EGL_VERSION = 12372;

  /// from: static public final int EGL_VERTICAL_RESOLUTION
  static const EGL_VERTICAL_RESOLUTION = 12433;

  /// from: static public final int EGL_VG_ALPHA_FORMAT
  static const EGL_VG_ALPHA_FORMAT = 12424;

  /// from: static public final int EGL_VG_ALPHA_FORMAT_NONPRE
  static const EGL_VG_ALPHA_FORMAT_NONPRE = 12427;

  /// from: static public final int EGL_VG_ALPHA_FORMAT_PRE
  static const EGL_VG_ALPHA_FORMAT_PRE = 12428;

  /// from: static public final int EGL_VG_ALPHA_FORMAT_PRE_BIT
  static const EGL_VG_ALPHA_FORMAT_PRE_BIT = 64;

  /// from: static public final int EGL_VG_COLORSPACE
  static const EGL_VG_COLORSPACE = 12423;

  /// from: static public final int EGL_VG_COLORSPACE_LINEAR
  static const EGL_VG_COLORSPACE_LINEAR = 12426;

  /// from: static public final int EGL_VG_COLORSPACE_LINEAR_BIT
  static const EGL_VG_COLORSPACE_LINEAR_BIT = 32;

  /// from: static public final int EGL_VG_COLORSPACE_sRGB
  static const EGL_VG_COLORSPACE_sRGB = 12425;

  /// from: static public final int EGL_WIDTH
  static const EGL_WIDTH = 12375;

  /// from: static public final int EGL_WINDOW_BIT
  static const EGL_WINDOW_BIT = 4;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  EGL14()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_eglGetError =
      jniAccessors.getStaticMethodIDOf(_classRef, "eglGetError", "()I");

  /// from: static public native int eglGetError()
  static int eglGetError() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_eglGetError, jni.JniType.intType, []).integer;

  static final _id_eglGetDisplay = jniAccessors.getStaticMethodIDOf(
      _classRef, "eglGetDisplay", "(I)Landroid/opengl/EGLDisplay;");

  /// from: static public native android.opengl.EGLDisplay eglGetDisplay(int display_id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static egldisplay_.EGLDisplay eglGetDisplay(int display_id) =>
      egldisplay_.EGLDisplay.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_eglGetDisplay,
          jni.JniType.objectType,
          [display_id]).object);

  static final _id_eglInitialize = jniAccessors.getStaticMethodIDOf(
      _classRef, "eglInitialize", "(Landroid/opengl/EGLDisplay;[II[II)Z");

  /// from: static public native boolean eglInitialize(android.opengl.EGLDisplay dpy, int[] major, int majorOffset, int[] minor, int minorOffset)
  static bool eglInitialize(egldisplay_.EGLDisplay dpy, jni.JniObject major,
          int majorOffset, jni.JniObject minor, int minorOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_eglInitialize, jni.JniType.booleanType, [
        dpy.reference,
        major.reference,
        majorOffset,
        minor.reference,
        minorOffset
      ]).boolean;

  static final _id_eglTerminate = jniAccessors.getStaticMethodIDOf(
      _classRef, "eglTerminate", "(Landroid/opengl/EGLDisplay;)Z");

  /// from: static public native boolean eglTerminate(android.opengl.EGLDisplay dpy)
  static bool eglTerminate(egldisplay_.EGLDisplay dpy) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_eglTerminate,
          jni.JniType.booleanType, [dpy.reference]).boolean;

  static final _id_eglQueryString = jniAccessors.getStaticMethodIDOf(_classRef,
      "eglQueryString", "(Landroid/opengl/EGLDisplay;I)Ljava/lang/String;");

  /// from: static public native java.lang.String eglQueryString(android.opengl.EGLDisplay dpy, int name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString eglQueryString(egldisplay_.EGLDisplay dpy, int name) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_eglQueryString,
          jni.JniType.objectType,
          [dpy.reference, name]).object);

  static final _id_eglGetConfigs = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglGetConfigs",
      "(Landroid/opengl/EGLDisplay;[Landroid/opengl/EGLConfig;II[II)Z");

  /// from: static public native boolean eglGetConfigs(android.opengl.EGLDisplay dpy, android.opengl.EGLConfig[] configs, int configsOffset, int config_size, int[] num_config, int num_configOffset)
  static bool eglGetConfigs(
          egldisplay_.EGLDisplay dpy,
          jni.JniObject configs,
          int configsOffset,
          int config_size,
          jni.JniObject num_config,
          int num_configOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_eglGetConfigs, jni.JniType.booleanType, [
        dpy.reference,
        configs.reference,
        configsOffset,
        config_size,
        num_config.reference,
        num_configOffset
      ]).boolean;

  static final _id_eglChooseConfig = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglChooseConfig",
      "(Landroid/opengl/EGLDisplay;[II[Landroid/opengl/EGLConfig;II[II)Z");

  /// from: static public native boolean eglChooseConfig(android.opengl.EGLDisplay dpy, int[] attrib_list, int attrib_listOffset, android.opengl.EGLConfig[] configs, int configsOffset, int config_size, int[] num_config, int num_configOffset)
  static bool eglChooseConfig(
          egldisplay_.EGLDisplay dpy,
          jni.JniObject attrib_list,
          int attrib_listOffset,
          jni.JniObject configs,
          int configsOffset,
          int config_size,
          jni.JniObject num_config,
          int num_configOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_eglChooseConfig, jni.JniType.booleanType, [
        dpy.reference,
        attrib_list.reference,
        attrib_listOffset,
        configs.reference,
        configsOffset,
        config_size,
        num_config.reference,
        num_configOffset
      ]).boolean;

  static final _id_eglGetConfigAttrib = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglGetConfigAttrib",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;I[II)Z");

  /// from: static public native boolean eglGetConfigAttrib(android.opengl.EGLDisplay dpy, android.opengl.EGLConfig config, int attribute, int[] value, int offset)
  static bool eglGetConfigAttrib(
          egldisplay_.EGLDisplay dpy,
          eglconfig_.EGLConfig config,
          int attribute,
          jni.JniObject value,
          int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_eglGetConfigAttrib, jni.JniType.booleanType, [
        dpy.reference,
        config.reference,
        attribute,
        value.reference,
        offset
      ]).boolean;

  static final _id_eglCreateWindowSurface = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglCreateWindowSurface",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;Ljava/lang/Object;[II)Landroid/opengl/EGLSurface;");

  /// from: static public android.opengl.EGLSurface eglCreateWindowSurface(android.opengl.EGLDisplay dpy, android.opengl.EGLConfig config, java.lang.Object win, int[] attrib_list, int offset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static eglsurface_.EGLSurface eglCreateWindowSurface(
          egldisplay_.EGLDisplay dpy,
          eglconfig_.EGLConfig config,
          jni.JniObject win,
          jni.JniObject attrib_list,
          int offset) =>
      eglsurface_.EGLSurface.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_eglCreateWindowSurface, jni.JniType.objectType, [
        dpy.reference,
        config.reference,
        win.reference,
        attrib_list.reference,
        offset
      ]).object);

  static final _id_eglCreatePbufferSurface = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglCreatePbufferSurface",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;[II)Landroid/opengl/EGLSurface;");

  /// from: static public native android.opengl.EGLSurface eglCreatePbufferSurface(android.opengl.EGLDisplay dpy, android.opengl.EGLConfig config, int[] attrib_list, int offset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static eglsurface_.EGLSurface eglCreatePbufferSurface(
          egldisplay_.EGLDisplay dpy,
          eglconfig_.EGLConfig config,
          jni.JniObject attrib_list,
          int offset) =>
      eglsurface_.EGLSurface.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_eglCreatePbufferSurface, jni.JniType.objectType, [
        dpy.reference,
        config.reference,
        attrib_list.reference,
        offset
      ]).object);

  static final _id_eglCreatePixmapSurface = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglCreatePixmapSurface",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;I[II)Landroid/opengl/EGLSurface;");

  /// from: static public native android.opengl.EGLSurface eglCreatePixmapSurface(android.opengl.EGLDisplay dpy, android.opengl.EGLConfig config, int pixmap, int[] attrib_list, int offset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static eglsurface_.EGLSurface eglCreatePixmapSurface(
          egldisplay_.EGLDisplay dpy,
          eglconfig_.EGLConfig config,
          int pixmap,
          jni.JniObject attrib_list,
          int offset) =>
      eglsurface_.EGLSurface.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_eglCreatePixmapSurface, jni.JniType.objectType, [
        dpy.reference,
        config.reference,
        pixmap,
        attrib_list.reference,
        offset
      ]).object);

  static final _id_eglDestroySurface = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglDestroySurface",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;)Z");

  /// from: static public native boolean eglDestroySurface(android.opengl.EGLDisplay dpy, android.opengl.EGLSurface surface)
  static bool eglDestroySurface(
          egldisplay_.EGLDisplay dpy, eglsurface_.EGLSurface surface) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_eglDestroySurface,
          jni.JniType.booleanType, [dpy.reference, surface.reference]).boolean;

  static final _id_eglQuerySurface = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglQuerySurface",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I[II)Z");

  /// from: static public native boolean eglQuerySurface(android.opengl.EGLDisplay dpy, android.opengl.EGLSurface surface, int attribute, int[] value, int offset)
  static bool eglQuerySurface(
          egldisplay_.EGLDisplay dpy,
          eglsurface_.EGLSurface surface,
          int attribute,
          jni.JniObject value,
          int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_eglQuerySurface, jni.JniType.booleanType, [
        dpy.reference,
        surface.reference,
        attribute,
        value.reference,
        offset
      ]).boolean;

  static final _id_eglBindAPI =
      jniAccessors.getStaticMethodIDOf(_classRef, "eglBindAPI", "(I)Z");

  /// from: static public native boolean eglBindAPI(int api)
  static bool eglBindAPI(int api) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_eglBindAPI, jni.JniType.booleanType, [api]).boolean;

  static final _id_eglQueryAPI =
      jniAccessors.getStaticMethodIDOf(_classRef, "eglQueryAPI", "()I");

  /// from: static public native int eglQueryAPI()
  static int eglQueryAPI() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_eglQueryAPI, jni.JniType.intType, []).integer;

  static final _id_eglWaitClient =
      jniAccessors.getStaticMethodIDOf(_classRef, "eglWaitClient", "()Z");

  /// from: static public native boolean eglWaitClient()
  static bool eglWaitClient() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_eglWaitClient, jni.JniType.booleanType, []).boolean;

  static final _id_eglReleaseThread =
      jniAccessors.getStaticMethodIDOf(_classRef, "eglReleaseThread", "()Z");

  /// from: static public native boolean eglReleaseThread()
  static bool eglReleaseThread() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_eglReleaseThread, jni.JniType.booleanType, []).boolean;

  static final _id_eglCreatePbufferFromClientBuffer =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "eglCreatePbufferFromClientBuffer",
          "(Landroid/opengl/EGLDisplay;IILandroid/opengl/EGLConfig;[II)Landroid/opengl/EGLSurface;");

  /// from: static public native android.opengl.EGLSurface eglCreatePbufferFromClientBuffer(android.opengl.EGLDisplay dpy, int buftype, int buffer, android.opengl.EGLConfig config, int[] attrib_list, int offset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static eglsurface_.EGLSurface eglCreatePbufferFromClientBuffer(
          egldisplay_.EGLDisplay dpy,
          int buftype,
          int buffer,
          eglconfig_.EGLConfig config,
          jni.JniObject attrib_list,
          int offset) =>
      eglsurface_.EGLSurface.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_eglCreatePbufferFromClientBuffer,
          jni.JniType.objectType, [
        dpy.reference,
        buftype,
        buffer,
        config.reference,
        attrib_list.reference,
        offset
      ]).object);

  static final _id_eglSurfaceAttrib = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglSurfaceAttrib",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;II)Z");

  /// from: static public native boolean eglSurfaceAttrib(android.opengl.EGLDisplay dpy, android.opengl.EGLSurface surface, int attribute, int value)
  static bool eglSurfaceAttrib(egldisplay_.EGLDisplay dpy,
          eglsurface_.EGLSurface surface, int attribute, int value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_eglSurfaceAttrib,
          jni.JniType.booleanType,
          [dpy.reference, surface.reference, attribute, value]).boolean;

  static final _id_eglBindTexImage = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglBindTexImage",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I)Z");

  /// from: static public native boolean eglBindTexImage(android.opengl.EGLDisplay dpy, android.opengl.EGLSurface surface, int buffer)
  static bool eglBindTexImage(egldisplay_.EGLDisplay dpy,
          eglsurface_.EGLSurface surface, int buffer) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_eglBindTexImage,
          jni.JniType.booleanType,
          [dpy.reference, surface.reference, buffer]).boolean;

  static final _id_eglReleaseTexImage = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglReleaseTexImage",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I)Z");

  /// from: static public native boolean eglReleaseTexImage(android.opengl.EGLDisplay dpy, android.opengl.EGLSurface surface, int buffer)
  static bool eglReleaseTexImage(egldisplay_.EGLDisplay dpy,
          eglsurface_.EGLSurface surface, int buffer) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_eglReleaseTexImage,
          jni.JniType.booleanType,
          [dpy.reference, surface.reference, buffer]).boolean;

  static final _id_eglSwapInterval = jniAccessors.getStaticMethodIDOf(
      _classRef, "eglSwapInterval", "(Landroid/opengl/EGLDisplay;I)Z");

  /// from: static public native boolean eglSwapInterval(android.opengl.EGLDisplay dpy, int interval)
  static bool eglSwapInterval(egldisplay_.EGLDisplay dpy, int interval) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_eglSwapInterval,
          jni.JniType.booleanType, [dpy.reference, interval]).boolean;

  static final _id_eglCreateContext = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglCreateContext",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;Landroid/opengl/EGLContext;[II)Landroid/opengl/EGLContext;");

  /// from: static public native android.opengl.EGLContext eglCreateContext(android.opengl.EGLDisplay dpy, android.opengl.EGLConfig config, android.opengl.EGLContext share_context, int[] attrib_list, int offset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static eglcontext_.EGLContext eglCreateContext(
          egldisplay_.EGLDisplay dpy,
          eglconfig_.EGLConfig config,
          eglcontext_.EGLContext share_context,
          jni.JniObject attrib_list,
          int offset) =>
      eglcontext_.EGLContext.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_eglCreateContext, jni.JniType.objectType, [
        dpy.reference,
        config.reference,
        share_context.reference,
        attrib_list.reference,
        offset
      ]).object);

  static final _id_eglDestroyContext = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglDestroyContext",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLContext;)Z");

  /// from: static public native boolean eglDestroyContext(android.opengl.EGLDisplay dpy, android.opengl.EGLContext ctx)
  static bool eglDestroyContext(
          egldisplay_.EGLDisplay dpy, eglcontext_.EGLContext ctx) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_eglDestroyContext,
          jni.JniType.booleanType, [dpy.reference, ctx.reference]).boolean;

  static final _id_eglMakeCurrent = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglMakeCurrent",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;Landroid/opengl/EGLSurface;Landroid/opengl/EGLContext;)Z");

  /// from: static public native boolean eglMakeCurrent(android.opengl.EGLDisplay dpy, android.opengl.EGLSurface draw, android.opengl.EGLSurface read, android.opengl.EGLContext ctx)
  static bool eglMakeCurrent(
          egldisplay_.EGLDisplay dpy,
          eglsurface_.EGLSurface draw,
          eglsurface_.EGLSurface read,
          eglcontext_.EGLContext ctx) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_eglMakeCurrent, jni.JniType.booleanType, [
        dpy.reference,
        draw.reference,
        read.reference,
        ctx.reference
      ]).boolean;

  static final _id_eglGetCurrentContext = jniAccessors.getStaticMethodIDOf(
      _classRef, "eglGetCurrentContext", "()Landroid/opengl/EGLContext;");

  /// from: static public native android.opengl.EGLContext eglGetCurrentContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static eglcontext_.EGLContext eglGetCurrentContext() =>
      eglcontext_.EGLContext.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_eglGetCurrentContext,
          jni.JniType.objectType, []).object);

  static final _id_eglGetCurrentSurface = jniAccessors.getStaticMethodIDOf(
      _classRef, "eglGetCurrentSurface", "(I)Landroid/opengl/EGLSurface;");

  /// from: static public native android.opengl.EGLSurface eglGetCurrentSurface(int readdraw)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static eglsurface_.EGLSurface eglGetCurrentSurface(int readdraw) =>
      eglsurface_.EGLSurface.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_eglGetCurrentSurface,
          jni.JniType.objectType,
          [readdraw]).object);

  static final _id_eglGetCurrentDisplay = jniAccessors.getStaticMethodIDOf(
      _classRef, "eglGetCurrentDisplay", "()Landroid/opengl/EGLDisplay;");

  /// from: static public native android.opengl.EGLDisplay eglGetCurrentDisplay()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static egldisplay_.EGLDisplay eglGetCurrentDisplay() =>
      egldisplay_.EGLDisplay.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_eglGetCurrentDisplay,
          jni.JniType.objectType, []).object);

  static final _id_eglQueryContext = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglQueryContext",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLContext;I[II)Z");

  /// from: static public native boolean eglQueryContext(android.opengl.EGLDisplay dpy, android.opengl.EGLContext ctx, int attribute, int[] value, int offset)
  static bool eglQueryContext(
          egldisplay_.EGLDisplay dpy,
          eglcontext_.EGLContext ctx,
          int attribute,
          jni.JniObject value,
          int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_eglQueryContext, jni.JniType.booleanType, [
        dpy.reference,
        ctx.reference,
        attribute,
        value.reference,
        offset
      ]).boolean;

  static final _id_eglWaitGL =
      jniAccessors.getStaticMethodIDOf(_classRef, "eglWaitGL", "()Z");

  /// from: static public native boolean eglWaitGL()
  static bool eglWaitGL() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_eglWaitGL, jni.JniType.booleanType, []).boolean;

  static final _id_eglWaitNative =
      jniAccessors.getStaticMethodIDOf(_classRef, "eglWaitNative", "(I)Z");

  /// from: static public native boolean eglWaitNative(int engine)
  static bool eglWaitNative(int engine) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_eglWaitNative,
          jni.JniType.booleanType, [engine]).boolean;

  static final _id_eglSwapBuffers = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglSwapBuffers",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;)Z");

  /// from: static public native boolean eglSwapBuffers(android.opengl.EGLDisplay dpy, android.opengl.EGLSurface surface)
  static bool eglSwapBuffers(
          egldisplay_.EGLDisplay dpy, eglsurface_.EGLSurface surface) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_eglSwapBuffers,
          jni.JniType.booleanType, [dpy.reference, surface.reference]).boolean;

  static final _id_eglCopyBuffers = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "eglCopyBuffers",
      "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I)Z");

  /// from: static public native boolean eglCopyBuffers(android.opengl.EGLDisplay dpy, android.opengl.EGLSurface surface, int target)
  static bool eglCopyBuffers(egldisplay_.EGLDisplay dpy,
          eglsurface_.EGLSurface surface, int target) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_eglCopyBuffers,
          jni.JniType.booleanType,
          [dpy.reference, surface.reference, target]).boolean;
}
