// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.opengl.GLDebugHelper
///
/// A helper class for debugging OpenGL ES applications.
///
/// Wraps the supplied GL interface with a new GL interface that adds support for
/// error checking and logging.
class GLDebugHelper extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/opengl/GLDebugHelper");
  GLDebugHelper.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CONFIG_CHECK_GL_ERROR
  ///
  /// Check glError() after every call.
  static const CONFIG_CHECK_GL_ERROR = 1;

  /// from: static public final int CONFIG_CHECK_THREAD
  ///
  /// Check if all calls are on the same thread.
  static const CONFIG_CHECK_THREAD = 2;

  /// from: static public final int CONFIG_LOG_ARGUMENT_NAMES
  ///
  /// Print argument names when logging GL Calls.
  static const CONFIG_LOG_ARGUMENT_NAMES = 4;

  /// from: static public final int ERROR_WRONG_THREAD
  ///
  /// The Error number used in the GLException that is thrown if
  /// CONFIG_CHECK_THREAD is enabled and you call OpenGL ES on the
  /// a different thread.
  static const ERROR_WRONG_THREAD = 28672;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GLDebugHelper()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_wrap = jniAccessors.getStaticMethodIDOf(_classRef, "wrap",
      "(Ljavax/microedition/khronos/opengles/GL;ILjava/io/Writer;)Ljavax/microedition/khronos/opengles/GL;");

  /// from: static public javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL gl, int configFlags, java.io.Writer log)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject wrap(
          jni.JniObject gl, int configFlags, jni.JniObject log) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_wrap,
          jni.JniType.objectType,
          [gl.reference, configFlags, log.reference]).object);

  static final _id_wrap1 = jniAccessors.getStaticMethodIDOf(_classRef, "wrap",
      "(Ljavax/microedition/khronos/egl/EGL;ILjava/io/Writer;)Ljavax/microedition/khronos/egl/EGL;");

  /// from: static public javax.microedition.khronos.egl.EGL wrap(javax.microedition.khronos.egl.EGL egl, int configFlags, java.io.Writer log)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Wrap an existing EGL interface in a new EGL interface that adds
  /// support for error checking and/or logging.
  ///@param egl the existing GL interface. Must implement EGL and EGL10. May
  /// optionally implement EGL11 as well.
  ///@param configFlags A bitmask of error checking flags.
  ///@param log - null to disable logging, non-null to enable logging.
  ///@return the wrapped EGL interface.
  static jni.JniObject wrap1(
          jni.JniObject egl, int configFlags, jni.JniObject log) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_wrap1,
          jni.JniType.objectType,
          [egl.reference, configFlags, log.reference]).object);
}
