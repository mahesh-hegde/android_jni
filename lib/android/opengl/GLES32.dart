// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "GLES31.dart" as gles31_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.opengl.GLES32
///
/// OpenGL ES 3.2
class GLES32 extends gles31_.GLES31 {
  static final _classRef = jniAccessors.getClassOf("android/opengl/GLES32");
  GLES32.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int GL_BUFFER
  static const GL_BUFFER = 33504;

  /// from: static public final int GL_CLAMP_TO_BORDER
  static const GL_CLAMP_TO_BORDER = 33069;

  /// from: static public final int GL_COLORBURN
  static const GL_COLORBURN = 37530;

  /// from: static public final int GL_COLORDODGE
  static const GL_COLORDODGE = 37529;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_10x10
  static const GL_COMPRESSED_RGBA_ASTC_10x10 = 37819;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_10x5
  static const GL_COMPRESSED_RGBA_ASTC_10x5 = 37816;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_10x6
  static const GL_COMPRESSED_RGBA_ASTC_10x6 = 37817;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_10x8
  static const GL_COMPRESSED_RGBA_ASTC_10x8 = 37818;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_12x10
  static const GL_COMPRESSED_RGBA_ASTC_12x10 = 37820;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_12x12
  static const GL_COMPRESSED_RGBA_ASTC_12x12 = 37821;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_4x4
  static const GL_COMPRESSED_RGBA_ASTC_4x4 = 37808;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_5x4
  static const GL_COMPRESSED_RGBA_ASTC_5x4 = 37809;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_5x5
  static const GL_COMPRESSED_RGBA_ASTC_5x5 = 37810;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_6x5
  static const GL_COMPRESSED_RGBA_ASTC_6x5 = 37811;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_6x6
  static const GL_COMPRESSED_RGBA_ASTC_6x6 = 37812;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_8x5
  static const GL_COMPRESSED_RGBA_ASTC_8x5 = 37813;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_8x6
  static const GL_COMPRESSED_RGBA_ASTC_8x6 = 37814;

  /// from: static public final int GL_COMPRESSED_RGBA_ASTC_8x8
  static const GL_COMPRESSED_RGBA_ASTC_8x8 = 37815;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 37851;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 37848;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 37849;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 37850;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 37852;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 37853;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 37840;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 37841;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 37842;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 37843;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 37844;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 37845;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 37846;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8
  static const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 37847;

  /// from: static public final int GL_CONTEXT_FLAGS
  static const GL_CONTEXT_FLAGS = 33310;

  /// from: static public final int GL_CONTEXT_FLAG_DEBUG_BIT
  static const GL_CONTEXT_FLAG_DEBUG_BIT = 2;

  /// from: static public final int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
  static const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 4;

  /// from: static public final int GL_CONTEXT_LOST
  static const GL_CONTEXT_LOST = 1287;

  /// from: static public final int GL_DARKEN
  static const GL_DARKEN = 37527;

  /// from: static public final int GL_DEBUG_CALLBACK_FUNCTION
  static const GL_DEBUG_CALLBACK_FUNCTION = 33348;

  /// from: static public final int GL_DEBUG_CALLBACK_USER_PARAM
  static const GL_DEBUG_CALLBACK_USER_PARAM = 33349;

  /// from: static public final int GL_DEBUG_GROUP_STACK_DEPTH
  static const GL_DEBUG_GROUP_STACK_DEPTH = 33389;

  /// from: static public final int GL_DEBUG_LOGGED_MESSAGES
  static const GL_DEBUG_LOGGED_MESSAGES = 37189;

  /// from: static public final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
  static const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;

  /// from: static public final int GL_DEBUG_OUTPUT
  static const GL_DEBUG_OUTPUT = 37600;

  /// from: static public final int GL_DEBUG_OUTPUT_SYNCHRONOUS
  static const GL_DEBUG_OUTPUT_SYNCHRONOUS = 33346;

  /// from: static public final int GL_DEBUG_SEVERITY_HIGH
  static const GL_DEBUG_SEVERITY_HIGH = 37190;

  /// from: static public final int GL_DEBUG_SEVERITY_LOW
  static const GL_DEBUG_SEVERITY_LOW = 37192;

  /// from: static public final int GL_DEBUG_SEVERITY_MEDIUM
  static const GL_DEBUG_SEVERITY_MEDIUM = 37191;

  /// from: static public final int GL_DEBUG_SEVERITY_NOTIFICATION
  static const GL_DEBUG_SEVERITY_NOTIFICATION = 33387;

  /// from: static public final int GL_DEBUG_SOURCE_API
  static const GL_DEBUG_SOURCE_API = 33350;

  /// from: static public final int GL_DEBUG_SOURCE_APPLICATION
  static const GL_DEBUG_SOURCE_APPLICATION = 33354;

  /// from: static public final int GL_DEBUG_SOURCE_OTHER
  static const GL_DEBUG_SOURCE_OTHER = 33355;

  /// from: static public final int GL_DEBUG_SOURCE_SHADER_COMPILER
  static const GL_DEBUG_SOURCE_SHADER_COMPILER = 33352;

  /// from: static public final int GL_DEBUG_SOURCE_THIRD_PARTY
  static const GL_DEBUG_SOURCE_THIRD_PARTY = 33353;

  /// from: static public final int GL_DEBUG_SOURCE_WINDOW_SYSTEM
  static const GL_DEBUG_SOURCE_WINDOW_SYSTEM = 33351;

  /// from: static public final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
  static const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;

  /// from: static public final int GL_DEBUG_TYPE_ERROR
  static const GL_DEBUG_TYPE_ERROR = 33356;

  /// from: static public final int GL_DEBUG_TYPE_MARKER
  static const GL_DEBUG_TYPE_MARKER = 33384;

  /// from: static public final int GL_DEBUG_TYPE_OTHER
  static const GL_DEBUG_TYPE_OTHER = 33361;

  /// from: static public final int GL_DEBUG_TYPE_PERFORMANCE
  static const GL_DEBUG_TYPE_PERFORMANCE = 33360;

  /// from: static public final int GL_DEBUG_TYPE_POP_GROUP
  static const GL_DEBUG_TYPE_POP_GROUP = 33386;

  /// from: static public final int GL_DEBUG_TYPE_PORTABILITY
  static const GL_DEBUG_TYPE_PORTABILITY = 33359;

  /// from: static public final int GL_DEBUG_TYPE_PUSH_GROUP
  static const GL_DEBUG_TYPE_PUSH_GROUP = 33385;

  /// from: static public final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
  static const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;

  /// from: static public final int GL_DIFFERENCE
  static const GL_DIFFERENCE = 37534;

  /// from: static public final int GL_EXCLUSION
  static const GL_EXCLUSION = 37536;

  /// from: static public final int GL_FIRST_VERTEX_CONVENTION
  static const GL_FIRST_VERTEX_CONVENTION = 36429;

  /// from: static public final int GL_FRACTIONAL_EVEN
  static const GL_FRACTIONAL_EVEN = 36476;

  /// from: static public final int GL_FRACTIONAL_ODD
  static const GL_FRACTIONAL_ODD = 36475;

  /// from: static public final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
  static const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 36445;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED
  static const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 36263;

  /// from: static public final int GL_FRAMEBUFFER_DEFAULT_LAYERS
  static const GL_FRAMEBUFFER_DEFAULT_LAYERS = 37650;

  /// from: static public final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
  static const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 36264;

  /// from: static public final int GL_GEOMETRY_INPUT_TYPE
  static const GL_GEOMETRY_INPUT_TYPE = 35095;

  /// from: static public final int GL_GEOMETRY_OUTPUT_TYPE
  static const GL_GEOMETRY_OUTPUT_TYPE = 35096;

  /// from: static public final int GL_GEOMETRY_SHADER
  static const GL_GEOMETRY_SHADER = 36313;

  /// from: static public final int GL_GEOMETRY_SHADER_BIT
  static const GL_GEOMETRY_SHADER_BIT = 4;

  /// from: static public final int GL_GEOMETRY_SHADER_INVOCATIONS
  static const GL_GEOMETRY_SHADER_INVOCATIONS = 34943;

  /// from: static public final int GL_GEOMETRY_VERTICES_OUT
  static const GL_GEOMETRY_VERTICES_OUT = 35094;

  /// from: static public final int GL_GUILTY_CONTEXT_RESET
  static const GL_GUILTY_CONTEXT_RESET = 33363;

  /// from: static public final int GL_HARDLIGHT
  static const GL_HARDLIGHT = 37531;

  /// from: static public final int GL_HSL_COLOR
  static const GL_HSL_COLOR = 37551;

  /// from: static public final int GL_HSL_HUE
  static const GL_HSL_HUE = 37549;

  /// from: static public final int GL_HSL_LUMINOSITY
  static const GL_HSL_LUMINOSITY = 37552;

  /// from: static public final int GL_HSL_SATURATION
  static const GL_HSL_SATURATION = 37550;

  /// from: static public final int GL_IMAGE_BUFFER
  static const GL_IMAGE_BUFFER = 36945;

  /// from: static public final int GL_IMAGE_CUBE_MAP_ARRAY
  static const GL_IMAGE_CUBE_MAP_ARRAY = 36948;

  /// from: static public final int GL_INNOCENT_CONTEXT_RESET
  static const GL_INNOCENT_CONTEXT_RESET = 33364;

  /// from: static public final int GL_INT_IMAGE_BUFFER
  static const GL_INT_IMAGE_BUFFER = 36956;

  /// from: static public final int GL_INT_IMAGE_CUBE_MAP_ARRAY
  static const GL_INT_IMAGE_CUBE_MAP_ARRAY = 36959;

  /// from: static public final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
  static const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37132;

  /// from: static public final int GL_INT_SAMPLER_BUFFER
  static const GL_INT_SAMPLER_BUFFER = 36304;

  /// from: static public final int GL_INT_SAMPLER_CUBE_MAP_ARRAY
  static const GL_INT_SAMPLER_CUBE_MAP_ARRAY = 36878;

  /// from: static public final int GL_ISOLINES
  static const GL_ISOLINES = 36474;

  /// from: static public final int GL_IS_PER_PATCH
  static const GL_IS_PER_PATCH = 37607;

  /// from: static public final int GL_LAST_VERTEX_CONVENTION
  static const GL_LAST_VERTEX_CONVENTION = 36430;

  /// from: static public final int GL_LAYER_PROVOKING_VERTEX
  static const GL_LAYER_PROVOKING_VERTEX = 33374;

  /// from: static public final int GL_LIGHTEN
  static const GL_LIGHTEN = 37528;

  /// from: static public final int GL_LINES_ADJACENCY
  static const GL_LINES_ADJACENCY = 10;

  /// from: static public final int GL_LINE_STRIP_ADJACENCY
  static const GL_LINE_STRIP_ADJACENCY = 11;

  /// from: static public final int GL_LOSE_CONTEXT_ON_RESET
  static const GL_LOSE_CONTEXT_ON_RESET = 33362;

  /// from: static public final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
  static const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 35378;

  /// from: static public final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
  static const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 36382;

  /// from: static public final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
  static const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 36383;

  /// from: static public final int GL_MAX_DEBUG_GROUP_STACK_DEPTH
  static const GL_MAX_DEBUG_GROUP_STACK_DEPTH = 33388;

  /// from: static public final int GL_MAX_DEBUG_LOGGED_MESSAGES
  static const GL_MAX_DEBUG_LOGGED_MESSAGES = 37188;

  /// from: static public final int GL_MAX_DEBUG_MESSAGE_LENGTH
  static const GL_MAX_DEBUG_MESSAGE_LENGTH = 37187;

  /// from: static public final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
  static const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 36444;

  /// from: static public final int GL_MAX_FRAMEBUFFER_LAYERS
  static const GL_MAX_FRAMEBUFFER_LAYERS = 37655;

  /// from: static public final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS
  static const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 37589;

  /// from: static public final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
  static const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 37583;

  /// from: static public final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS
  static const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 37069;

  /// from: static public final int GL_MAX_GEOMETRY_INPUT_COMPONENTS
  static const GL_MAX_GEOMETRY_INPUT_COMPONENTS = 37155;

  /// from: static public final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
  static const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 37156;

  /// from: static public final int GL_MAX_GEOMETRY_OUTPUT_VERTICES
  static const GL_MAX_GEOMETRY_OUTPUT_VERTICES = 36320;

  /// from: static public final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS
  static const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 36442;

  /// from: static public final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
  static const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 37079;

  /// from: static public final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
  static const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 35881;

  /// from: static public final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
  static const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 36321;

  /// from: static public final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS
  static const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 35372;

  /// from: static public final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
  static const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 36319;

  /// from: static public final int GL_MAX_LABEL_LENGTH
  static const GL_MAX_LABEL_LENGTH = 33512;

  /// from: static public final int GL_MAX_PATCH_VERTICES
  static const GL_MAX_PATCH_VERTICES = 36477;

  /// from: static public final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
  static const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 37587;

  /// from: static public final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
  static const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 37581;

  /// from: static public final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
  static const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 37067;

  /// from: static public final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
  static const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 34924;

  /// from: static public final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
  static const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 36483;

  /// from: static public final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
  static const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 37080;

  /// from: static public final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
  static const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 36481;

  /// from: static public final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
  static const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 36485;

  /// from: static public final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
  static const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 36489;

  /// from: static public final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
  static const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 36479;

  /// from: static public final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
  static const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 37588;

  /// from: static public final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
  static const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 37582;

  /// from: static public final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
  static const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 37068;

  /// from: static public final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
  static const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 34925;

  /// from: static public final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
  static const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 36486;

  /// from: static public final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
  static const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 37081;

  /// from: static public final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
  static const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 36482;

  /// from: static public final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
  static const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 36490;

  /// from: static public final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
  static const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 36480;

  /// from: static public final int GL_MAX_TESS_GEN_LEVEL
  static const GL_MAX_TESS_GEN_LEVEL = 36478;

  /// from: static public final int GL_MAX_TESS_PATCH_COMPONENTS
  static const GL_MAX_TESS_PATCH_COMPONENTS = 36484;

  /// from: static public final int GL_MAX_TEXTURE_BUFFER_SIZE
  static const GL_MAX_TEXTURE_BUFFER_SIZE = 35883;

  /// from: static public final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
  static const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 36443;

  /// from: static public final int GL_MIN_SAMPLE_SHADING_VALUE
  static const GL_MIN_SAMPLE_SHADING_VALUE = 35895;

  /// from: static public final int GL_MULTIPLY
  static const GL_MULTIPLY = 37524;

  /// from: static public final int GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY
  static const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = 37762;

  /// from: static public final int GL_MULTISAMPLE_LINE_WIDTH_RANGE
  static const GL_MULTISAMPLE_LINE_WIDTH_RANGE = 37761;

  /// from: static public final int GL_NO_RESET_NOTIFICATION
  static const GL_NO_RESET_NOTIFICATION = 33377;

  /// from: static public final int GL_OVERLAY
  static const GL_OVERLAY = 37526;

  /// from: static public final int GL_PATCHES
  static const GL_PATCHES = 14;

  /// from: static public final int GL_PATCH_VERTICES
  static const GL_PATCH_VERTICES = 36466;

  /// from: static public final int GL_PRIMITIVES_GENERATED
  static const GL_PRIMITIVES_GENERATED = 35975;

  /// from: static public final int GL_PRIMITIVE_BOUNDING_BOX
  static const GL_PRIMITIVE_BOUNDING_BOX = 37566;

  /// from: static public final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
  static const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313;

  /// from: static public final int GL_PROGRAM
  static const GL_PROGRAM = 33506;

  /// from: static public final int GL_PROGRAM_PIPELINE
  static const GL_PROGRAM_PIPELINE = 33508;

  /// from: static public final int GL_QUADS
  static const GL_QUADS = 7;

  /// from: static public final int GL_QUERY
  static const GL_QUERY = 33507;

  /// from: static public final int GL_REFERENCED_BY_GEOMETRY_SHADER
  static const GL_REFERENCED_BY_GEOMETRY_SHADER = 37641;

  /// from: static public final int GL_REFERENCED_BY_TESS_CONTROL_SHADER
  static const GL_REFERENCED_BY_TESS_CONTROL_SHADER = 37639;

  /// from: static public final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER
  static const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 37640;

  /// from: static public final int GL_RESET_NOTIFICATION_STRATEGY
  static const GL_RESET_NOTIFICATION_STRATEGY = 33366;

  /// from: static public final int GL_SAMPLER
  static const GL_SAMPLER = 33510;

  /// from: static public final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY
  static const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 37131;

  /// from: static public final int GL_SAMPLER_BUFFER
  static const GL_SAMPLER_BUFFER = 36290;

  /// from: static public final int GL_SAMPLER_CUBE_MAP_ARRAY
  static const GL_SAMPLER_CUBE_MAP_ARRAY = 36876;

  /// from: static public final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
  static const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 36877;

  /// from: static public final int GL_SAMPLE_SHADING
  static const GL_SAMPLE_SHADING = 35894;

  /// from: static public final int GL_SCREEN
  static const GL_SCREEN = 37525;

  /// from: static public final int GL_SHADER
  static const GL_SHADER = 33505;

  /// from: static public final int GL_SOFTLIGHT
  static const GL_SOFTLIGHT = 37532;

  /// from: static public final int GL_STACK_OVERFLOW
  static const GL_STACK_OVERFLOW = 1283;

  /// from: static public final int GL_STACK_UNDERFLOW
  static const GL_STACK_UNDERFLOW = 1284;

  /// from: static public final int GL_TESS_CONTROL_OUTPUT_VERTICES
  static const GL_TESS_CONTROL_OUTPUT_VERTICES = 36469;

  /// from: static public final int GL_TESS_CONTROL_SHADER
  static const GL_TESS_CONTROL_SHADER = 36488;

  /// from: static public final int GL_TESS_CONTROL_SHADER_BIT
  static const GL_TESS_CONTROL_SHADER_BIT = 8;

  /// from: static public final int GL_TESS_EVALUATION_SHADER
  static const GL_TESS_EVALUATION_SHADER = 36487;

  /// from: static public final int GL_TESS_EVALUATION_SHADER_BIT
  static const GL_TESS_EVALUATION_SHADER_BIT = 16;

  /// from: static public final int GL_TESS_GEN_MODE
  static const GL_TESS_GEN_MODE = 36470;

  /// from: static public final int GL_TESS_GEN_POINT_MODE
  static const GL_TESS_GEN_POINT_MODE = 36473;

  /// from: static public final int GL_TESS_GEN_SPACING
  static const GL_TESS_GEN_SPACING = 36471;

  /// from: static public final int GL_TESS_GEN_VERTEX_ORDER
  static const GL_TESS_GEN_VERTEX_ORDER = 36472;

  /// from: static public final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY
  static const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 37122;

  /// from: static public final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
  static const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 37125;

  /// from: static public final int GL_TEXTURE_BINDING_BUFFER
  static const GL_TEXTURE_BINDING_BUFFER = 35884;

  /// from: static public final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
  static const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 36874;

  /// from: static public final int GL_TEXTURE_BORDER_COLOR
  static const GL_TEXTURE_BORDER_COLOR = 4100;

  /// from: static public final int GL_TEXTURE_BUFFER
  static const GL_TEXTURE_BUFFER = 35882;

  /// from: static public final int GL_TEXTURE_BUFFER_BINDING
  static const GL_TEXTURE_BUFFER_BINDING = 35882;

  /// from: static public final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING
  static const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 35885;

  /// from: static public final int GL_TEXTURE_BUFFER_OFFSET
  static const GL_TEXTURE_BUFFER_OFFSET = 37277;

  /// from: static public final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
  static const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 37279;

  /// from: static public final int GL_TEXTURE_BUFFER_SIZE
  static const GL_TEXTURE_BUFFER_SIZE = 37278;

  /// from: static public final int GL_TEXTURE_CUBE_MAP_ARRAY
  static const GL_TEXTURE_CUBE_MAP_ARRAY = 36873;

  /// from: static public final int GL_TRIANGLES_ADJACENCY
  static const GL_TRIANGLES_ADJACENCY = 12;

  /// from: static public final int GL_TRIANGLE_STRIP_ADJACENCY
  static const GL_TRIANGLE_STRIP_ADJACENCY = 13;

  /// from: static public final int GL_UNDEFINED_VERTEX
  static const GL_UNDEFINED_VERTEX = 33376;

  /// from: static public final int GL_UNKNOWN_CONTEXT_RESET
  static const GL_UNKNOWN_CONTEXT_RESET = 33365;

  /// from: static public final int GL_UNSIGNED_INT_IMAGE_BUFFER
  static const GL_UNSIGNED_INT_IMAGE_BUFFER = 36967;

  /// from: static public final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
  static const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 36970;

  /// from: static public final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
  static const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37133;

  /// from: static public final int GL_UNSIGNED_INT_SAMPLER_BUFFER
  static const GL_UNSIGNED_INT_SAMPLER_BUFFER = 36312;

  /// from: static public final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
  static const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 36879;

  /// from: static public final int GL_VERTEX_ARRAY
  static const GL_VERTEX_ARRAY = 32884;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GLES32()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_glBlendBarrier =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBlendBarrier", "()V");

  /// from: static public native void glBlendBarrier()
  static void glBlendBarrier() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glBlendBarrier, jni.JniType.voidType, []).check();

  static final _id_glCopyImageSubData = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCopyImageSubData", "(IIIIIIIIIIIIIII)V");

  /// from: static public native void glCopyImageSubData(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
  static void glCopyImageSubData(
          int srcName,
          int srcTarget,
          int srcLevel,
          int srcX,
          int srcY,
          int srcZ,
          int dstName,
          int dstTarget,
          int dstLevel,
          int dstX,
          int dstY,
          int dstZ,
          int srcWidth,
          int srcHeight,
          int srcDepth) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glCopyImageSubData, jni.JniType.voidType, [
        srcName,
        srcTarget,
        srcLevel,
        srcX,
        srcY,
        srcZ,
        dstName,
        dstTarget,
        dstLevel,
        dstX,
        dstY,
        dstZ,
        srcWidth,
        srcHeight,
        srcDepth
      ]).check();

  static final _id_glDebugMessageControl = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDebugMessageControl", "(IIII[IIZ)V");

  /// from: static public native void glDebugMessageControl(int source, int type, int severity, int count, int[] ids, int offset, boolean enabled)
  static void glDebugMessageControl(int source, int type, int severity,
          int count, jni.JniObject ids, int offset, bool enabled) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glDebugMessageControl, jni.JniType.voidType, [
        source,
        type,
        severity,
        count,
        ids.reference,
        offset,
        enabled
      ]).check();

  static final _id_glDebugMessageControl1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDebugMessageControl", "(IIIILjava/nio/IntBuffer;Z)V");

  /// from: static public native void glDebugMessageControl(int source, int type, int severity, int count, java.nio.IntBuffer ids, boolean enabled)
  static void glDebugMessageControl1(int source, int type, int severity,
          int count, jni.JniObject ids, bool enabled) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDebugMessageControl1,
          jni.JniType.voidType,
          [source, type, severity, count, ids.reference, enabled]).check();

  static final _id_glDebugMessageInsert = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDebugMessageInsert", "(IIIIILjava/lang/String;)V");

  /// from: static public native void glDebugMessageInsert(int source, int type, int id, int severity, int length, java.lang.String buf)
  static void glDebugMessageInsert(int source, int type, int id, int severity,
          int length, jni.JniString buf) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDebugMessageInsert,
          jni.JniType.voidType,
          [source, type, id, severity, length, buf.reference]).check();

  static final _id_glDebugMessageCallback = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "glDebugMessageCallback",
      "(Landroid/opengl/GLES32\$DebugProc;)V");

  /// from: static public native void glDebugMessageCallback(android.opengl.GLES32.DebugProc callback)
  static void glDebugMessageCallback(GLES32_DebugProc callback) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDebugMessageCallback,
          jni.JniType.voidType,
          [callback.reference]).check();

  static final _id_glGetDebugMessageLog = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetDebugMessageLog", "(II[II[II[II[II[II[BI)I");

  /// from: static public native int glGetDebugMessageLog(int count, int bufSize, int[] sources, int sourcesOffset, int[] types, int typesOffset, int[] ids, int idsOffset, int[] severities, int severitiesOffset, int[] lengths, int lengthsOffset, byte[] messageLog, int messageLogOffset)
  static int glGetDebugMessageLog(
          int count,
          int bufSize,
          jni.JniObject sources,
          int sourcesOffset,
          jni.JniObject types,
          int typesOffset,
          jni.JniObject ids,
          int idsOffset,
          jni.JniObject severities,
          int severitiesOffset,
          jni.JniObject lengths,
          int lengthsOffset,
          jni.JniObject messageLog,
          int messageLogOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetDebugMessageLog, jni.JniType.intType, [
        count,
        bufSize,
        sources.reference,
        sourcesOffset,
        types.reference,
        typesOffset,
        ids.reference,
        idsOffset,
        severities.reference,
        severitiesOffset,
        lengths.reference,
        lengthsOffset,
        messageLog.reference,
        messageLogOffset
      ]).integer;

  static final _id_glGetDebugMessageLog1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "glGetDebugMessageLog",
      "(ILjava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/ByteBuffer;)I");

  /// from: static public native int glGetDebugMessageLog(int count, java.nio.IntBuffer sources, java.nio.IntBuffer types, java.nio.IntBuffer ids, java.nio.IntBuffer severities, java.nio.IntBuffer lengths, java.nio.ByteBuffer messageLog)
  static int glGetDebugMessageLog1(
          int count,
          jni.JniObject sources,
          jni.JniObject types,
          jni.JniObject ids,
          jni.JniObject severities,
          jni.JniObject lengths,
          jni.JniObject messageLog) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetDebugMessageLog1, jni.JniType.intType, [
        count,
        sources.reference,
        types.reference,
        ids.reference,
        severities.reference,
        lengths.reference,
        messageLog.reference
      ]).integer;

  static final _id_glGetDebugMessageLog2 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetDebugMessageLog", "(I[II[II[II[II)[Ljava/lang/String;");

  /// from: static public native java.lang.String[] glGetDebugMessageLog(int count, int[] sources, int sourcesOffset, int[] types, int typesOffset, int[] ids, int idsOffset, int[] severities, int severitiesOffset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject glGetDebugMessageLog2(
          int count,
          jni.JniObject sources,
          int sourcesOffset,
          jni.JniObject types,
          int typesOffset,
          jni.JniObject ids,
          int idsOffset,
          jni.JniObject severities,
          int severitiesOffset) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetDebugMessageLog2, jni.JniType.objectType, [
        count,
        sources.reference,
        sourcesOffset,
        types.reference,
        typesOffset,
        ids.reference,
        idsOffset,
        severities.reference,
        severitiesOffset
      ]).object);

  static final _id_glGetDebugMessageLog3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "glGetDebugMessageLog",
      "(ILjava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;)[Ljava/lang/String;");

  /// from: static public native java.lang.String[] glGetDebugMessageLog(int count, java.nio.IntBuffer sources, java.nio.IntBuffer types, java.nio.IntBuffer ids, java.nio.IntBuffer severities)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject glGetDebugMessageLog3(int count, jni.JniObject sources,
          jni.JniObject types, jni.JniObject ids, jni.JniObject severities) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetDebugMessageLog3, jni.JniType.objectType, [
        count,
        sources.reference,
        types.reference,
        ids.reference,
        severities.reference
      ]).object);

  static final _id_glPushDebugGroup = jniAccessors.getStaticMethodIDOf(
      _classRef, "glPushDebugGroup", "(IIILjava/lang/String;)V");

  /// from: static public native void glPushDebugGroup(int source, int id, int length, java.lang.String message)
  static void glPushDebugGroup(
          int source, int id, int length, jni.JniString message) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glPushDebugGroup,
          jni.JniType.voidType,
          [source, id, length, message.reference]).check();

  static final _id_glPopDebugGroup =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPopDebugGroup", "()V");

  /// from: static public native void glPopDebugGroup()
  static void glPopDebugGroup() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glPopDebugGroup, jni.JniType.voidType, []).check();

  static final _id_glObjectLabel = jniAccessors.getStaticMethodIDOf(
      _classRef, "glObjectLabel", "(IIILjava/lang/String;)V");

  /// from: static public native void glObjectLabel(int identifier, int name, int length, java.lang.String label)
  static void glObjectLabel(
          int identifier, int name, int length, jni.JniString label) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glObjectLabel,
          jni.JniType.voidType,
          [identifier, name, length, label.reference]).check();

  static final _id_glGetObjectLabel = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetObjectLabel", "(II)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetObjectLabel(int identifier, int name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetObjectLabel(int identifier, int name) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetObjectLabel,
          jni.JniType.objectType,
          [identifier, name]).object);

  static final _id_glObjectPtrLabel = jniAccessors.getStaticMethodIDOf(
      _classRef, "glObjectPtrLabel", "(JLjava/lang/String;)V");

  /// from: static public native void glObjectPtrLabel(long ptr, java.lang.String label)
  static void glObjectPtrLabel(int ptr, jni.JniString label) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glObjectPtrLabel,
          jni.JniType.voidType, [ptr, label.reference]).check();

  static final _id_glGetObjectPtrLabel = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetObjectPtrLabel", "(J)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetObjectPtrLabel(long ptr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetObjectPtrLabel(int ptr) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glGetObjectPtrLabel, jni.JniType.objectType, [ptr]).object);

  static final _id_glGetPointerv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetPointerv", "(I)J");

  /// from: static public native long glGetPointerv(int pname)
  static int glGetPointerv(int pname) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glGetPointerv, jni.JniType.longType, [pname]).long;

  static final _id_glEnablei =
      jniAccessors.getStaticMethodIDOf(_classRef, "glEnablei", "(II)V");

  /// from: static public native void glEnablei(int target, int index)
  static void glEnablei(int target, int index) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glEnablei,
          jni.JniType.voidType, [target, index]).check();

  static final _id_glDisablei =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDisablei", "(II)V");

  /// from: static public native void glDisablei(int target, int index)
  static void glDisablei(int target, int index) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDisablei,
          jni.JniType.voidType, [target, index]).check();

  static final _id_glBlendEquationi =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBlendEquationi", "(II)V");

  /// from: static public native void glBlendEquationi(int buf, int mode)
  static void glBlendEquationi(int buf, int mode) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBlendEquationi,
          jni.JniType.voidType, [buf, mode]).check();

  static final _id_glBlendEquationSeparatei = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBlendEquationSeparatei", "(III)V");

  /// from: static public native void glBlendEquationSeparatei(int buf, int modeRGB, int modeAlpha)
  static void glBlendEquationSeparatei(int buf, int modeRGB, int modeAlpha) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glBlendEquationSeparatei,
          jni.JniType.voidType,
          [buf, modeRGB, modeAlpha]).check();

  static final _id_glBlendFunci =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBlendFunci", "(III)V");

  /// from: static public native void glBlendFunci(int buf, int src, int dst)
  static void glBlendFunci(int buf, int src, int dst) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBlendFunci,
          jni.JniType.voidType, [buf, src, dst]).check();

  static final _id_glBlendFuncSeparatei = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBlendFuncSeparatei", "(IIIII)V");

  /// from: static public native void glBlendFuncSeparatei(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
  static void glBlendFuncSeparatei(
          int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glBlendFuncSeparatei,
          jni.JniType.voidType,
          [buf, srcRGB, dstRGB, srcAlpha, dstAlpha]).check();

  static final _id_glColorMaski =
      jniAccessors.getStaticMethodIDOf(_classRef, "glColorMaski", "(IZZZZ)V");

  /// from: static public native void glColorMaski(int index, boolean r, boolean g, boolean b, boolean a)
  static void glColorMaski(int index, bool r, bool g, bool b, bool a) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glColorMaski,
          jni.JniType.voidType, [index, r, g, b, a]).check();

  static final _id_glIsEnabledi =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsEnabledi", "(II)Z");

  /// from: static public native boolean glIsEnabledi(int target, int index)
  static bool glIsEnabledi(int target, int index) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glIsEnabledi,
          jni.JniType.booleanType, [target, index]).boolean;

  static final _id_glDrawElementsBaseVertex = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDrawElementsBaseVertex", "(IIILjava/nio/Buffer;I)V");

  /// from: static public native void glDrawElementsBaseVertex(int mode, int count, int type, java.nio.Buffer indices, int basevertex)
  static void glDrawElementsBaseVertex(int mode, int count, int type,
          jni.JniObject indices, int basevertex) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDrawElementsBaseVertex,
          jni.JniType.voidType,
          [mode, count, type, indices.reference, basevertex]).check();

  static final _id_glDrawRangeElementsBaseVertex =
      jniAccessors.getStaticMethodIDOf(_classRef,
          "glDrawRangeElementsBaseVertex", "(IIIIILjava/nio/Buffer;I)V");

  /// from: static public native void glDrawRangeElementsBaseVertex(int mode, int start, int end, int count, int type, java.nio.Buffer indices, int basevertex)
  static void glDrawRangeElementsBaseVertex(int mode, int start, int end,
          int count, int type, jni.JniObject indices, int basevertex) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glDrawRangeElementsBaseVertex, jni.JniType.voidType, [
        mode,
        start,
        end,
        count,
        type,
        indices.reference,
        basevertex
      ]).check();

  static final _id_glDrawElementsInstancedBaseVertex =
      jniAccessors.getStaticMethodIDOf(_classRef,
          "glDrawElementsInstancedBaseVertex", "(IIILjava/nio/Buffer;II)V");

  /// from: static public native void glDrawElementsInstancedBaseVertex(int mode, int count, int type, java.nio.Buffer indices, int instanceCount, int basevertex)
  static void glDrawElementsInstancedBaseVertex(int mode, int count, int type,
          jni.JniObject indices, int instanceCount, int basevertex) =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glDrawElementsInstancedBaseVertex, jni.JniType.voidType, [
        mode,
        count,
        type,
        indices.reference,
        instanceCount,
        basevertex
      ]).check();

  static final _id_glDrawElementsInstancedBaseVertex1 =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glDrawElementsInstancedBaseVertex", "(IIIIII)V");

  /// from: static public native void glDrawElementsInstancedBaseVertex(int mode, int count, int type, int indicesOffset, int instanceCount, int basevertex)
  static void glDrawElementsInstancedBaseVertex1(int mode, int count, int type,
          int indicesOffset, int instanceCount, int basevertex) =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glDrawElementsInstancedBaseVertex1, jni.JniType.voidType, [
        mode,
        count,
        type,
        indicesOffset,
        instanceCount,
        basevertex
      ]).check();

  static final _id_glFramebufferTexture = jniAccessors.getStaticMethodIDOf(
      _classRef, "glFramebufferTexture", "(IIII)V");

  /// from: static public native void glFramebufferTexture(int target, int attachment, int texture, int level)
  static void glFramebufferTexture(
          int target, int attachment, int texture, int level) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glFramebufferTexture,
          jni.JniType.voidType, [target, attachment, texture, level]).check();

  static final _id_glPrimitiveBoundingBox = jniAccessors.getStaticMethodIDOf(
      _classRef, "glPrimitiveBoundingBox", "(FFFFFFFF)V");

  /// from: static public native void glPrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
  static void glPrimitiveBoundingBox(double minX, double minY, double minZ,
          double minW, double maxX, double maxY, double maxZ, double maxW) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glPrimitiveBoundingBox,
          jni.JniType.voidType,
          [minX, minY, minZ, minW, maxX, maxY, maxZ, maxW]).check();

  static final _id_glGetGraphicsResetStatus = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetGraphicsResetStatus", "()I");

  /// from: static public native int glGetGraphicsResetStatus()
  static int glGetGraphicsResetStatus() =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glGetGraphicsResetStatus, jni.JniType.intType, []).integer;

  static final _id_glReadnPixels = jniAccessors.getStaticMethodIDOf(
      _classRef, "glReadnPixels", "(IIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glReadnPixels(int x, int y, int width, int height, int format, int type, int bufSize, java.nio.Buffer data)
  static void glReadnPixels(int x, int y, int width, int height, int format,
          int type, int bufSize, jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glReadnPixels,
          jni.JniType.voidType,
          [x, y, width, height, format, type, bufSize, data.reference]).check();

  static final _id_glGetnUniformfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetnUniformfv", "(III[FI)V");

  /// from: static public native void glGetnUniformfv(int program, int location, int bufSize, float[] params, int offset)
  static void glGetnUniformfv(int program, int location, int bufSize,
          jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetnUniformfv,
          jni.JniType.voidType,
          [program, location, bufSize, params.reference, offset]).check();

  static final _id_glGetnUniformfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetnUniformfv", "(IIILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetnUniformfv(int program, int location, int bufSize, java.nio.FloatBuffer params)
  static void glGetnUniformfv1(
          int program, int location, int bufSize, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetnUniformfv1,
          jni.JniType.voidType,
          [program, location, bufSize, params.reference]).check();

  static final _id_glGetnUniformiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetnUniformiv", "(III[II)V");

  /// from: static public native void glGetnUniformiv(int program, int location, int bufSize, int[] params, int offset)
  static void glGetnUniformiv(int program, int location, int bufSize,
          jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetnUniformiv,
          jni.JniType.voidType,
          [program, location, bufSize, params.reference, offset]).check();

  static final _id_glGetnUniformiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetnUniformiv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetnUniformiv(int program, int location, int bufSize, java.nio.IntBuffer params)
  static void glGetnUniformiv1(
          int program, int location, int bufSize, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetnUniformiv1,
          jni.JniType.voidType,
          [program, location, bufSize, params.reference]).check();

  static final _id_glGetnUniformuiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetnUniformuiv", "(III[II)V");

  /// from: static public native void glGetnUniformuiv(int program, int location, int bufSize, int[] params, int offset)
  static void glGetnUniformuiv(int program, int location, int bufSize,
          jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetnUniformuiv,
          jni.JniType.voidType,
          [program, location, bufSize, params.reference, offset]).check();

  static final _id_glGetnUniformuiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetnUniformuiv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetnUniformuiv(int program, int location, int bufSize, java.nio.IntBuffer params)
  static void glGetnUniformuiv1(
          int program, int location, int bufSize, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetnUniformuiv1,
          jni.JniType.voidType,
          [program, location, bufSize, params.reference]).check();

  static final _id_glMinSampleShading =
      jniAccessors.getStaticMethodIDOf(_classRef, "glMinSampleShading", "(F)V");

  /// from: static public native void glMinSampleShading(float value)
  static void glMinSampleShading(double value) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glMinSampleShading,
          jni.JniType.voidType, [value]).check();

  static final _id_glPatchParameteri =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPatchParameteri", "(II)V");

  /// from: static public native void glPatchParameteri(int pname, int value)
  static void glPatchParameteri(int pname, int value) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPatchParameteri,
          jni.JniType.voidType, [pname, value]).check();

  static final _id_glTexParameterIiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameterIiv", "(II[II)V");

  /// from: static public native void glTexParameterIiv(int target, int pname, int[] params, int offset)
  static void glTexParameterIiv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexParameterIiv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glTexParameterIiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameterIiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glTexParameterIiv(int target, int pname, java.nio.IntBuffer params)
  static void glTexParameterIiv1(int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameterIiv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glTexParameterIuiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameterIuiv", "(II[II)V");

  /// from: static public native void glTexParameterIuiv(int target, int pname, int[] params, int offset)
  static void glTexParameterIuiv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexParameterIuiv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glTexParameterIuiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameterIuiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glTexParameterIuiv(int target, int pname, java.nio.IntBuffer params)
  static void glTexParameterIuiv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameterIuiv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glGetTexParameterIiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameterIiv", "(II[II)V");

  /// from: static public native void glGetTexParameterIiv(int target, int pname, int[] params, int offset)
  static void glGetTexParameterIiv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexParameterIiv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetTexParameterIiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameterIiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetTexParameterIiv(int target, int pname, java.nio.IntBuffer params)
  static void glGetTexParameterIiv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexParameterIiv1,
          jni.JniType.voidType,
          [target, pname, params.reference]).check();

  static final _id_glGetTexParameterIuiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameterIuiv", "(II[II)V");

  /// from: static public native void glGetTexParameterIuiv(int target, int pname, int[] params, int offset)
  static void glGetTexParameterIuiv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexParameterIuiv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetTexParameterIuiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameterIuiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetTexParameterIuiv(int target, int pname, java.nio.IntBuffer params)
  static void glGetTexParameterIuiv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexParameterIuiv1,
          jni.JniType.voidType,
          [target, pname, params.reference]).check();

  static final _id_glSamplerParameterIiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glSamplerParameterIiv", "(II[II)V");

  /// from: static public native void glSamplerParameterIiv(int sampler, int pname, int[] param, int offset)
  static void glSamplerParameterIiv(
          int sampler, int pname, jni.JniObject param, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glSamplerParameterIiv,
          jni.JniType.voidType,
          [sampler, pname, param.reference, offset]).check();

  static final _id_glSamplerParameterIiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glSamplerParameterIiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glSamplerParameterIiv(int sampler, int pname, java.nio.IntBuffer param)
  static void glSamplerParameterIiv1(
          int sampler, int pname, jni.JniObject param) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glSamplerParameterIiv1,
          jni.JniType.voidType,
          [sampler, pname, param.reference]).check();

  static final _id_glSamplerParameterIuiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glSamplerParameterIuiv", "(II[II)V");

  /// from: static public native void glSamplerParameterIuiv(int sampler, int pname, int[] param, int offset)
  static void glSamplerParameterIuiv(
          int sampler, int pname, jni.JniObject param, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glSamplerParameterIuiv,
          jni.JniType.voidType,
          [sampler, pname, param.reference, offset]).check();

  static final _id_glSamplerParameterIuiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glSamplerParameterIuiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glSamplerParameterIuiv(int sampler, int pname, java.nio.IntBuffer param)
  static void glSamplerParameterIuiv1(
          int sampler, int pname, jni.JniObject param) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glSamplerParameterIuiv1,
          jni.JniType.voidType,
          [sampler, pname, param.reference]).check();

  static final _id_glGetSamplerParameterIiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetSamplerParameterIiv", "(II[II)V");

  /// from: static public native void glGetSamplerParameterIiv(int sampler, int pname, int[] params, int offset)
  static void glGetSamplerParameterIiv(
          int sampler, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetSamplerParameterIiv,
          jni.JniType.voidType,
          [sampler, pname, params.reference, offset]).check();

  static final _id_glGetSamplerParameterIiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetSamplerParameterIiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetSamplerParameterIiv(int sampler, int pname, java.nio.IntBuffer params)
  static void glGetSamplerParameterIiv1(
          int sampler, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetSamplerParameterIiv1,
          jni.JniType.voidType,
          [sampler, pname, params.reference]).check();

  static final _id_glGetSamplerParameterIuiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetSamplerParameterIuiv", "(II[II)V");

  /// from: static public native void glGetSamplerParameterIuiv(int sampler, int pname, int[] params, int offset)
  static void glGetSamplerParameterIuiv(
          int sampler, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetSamplerParameterIuiv,
          jni.JniType.voidType,
          [sampler, pname, params.reference, offset]).check();

  static final _id_glGetSamplerParameterIuiv1 =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glGetSamplerParameterIuiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetSamplerParameterIuiv(int sampler, int pname, java.nio.IntBuffer params)
  static void glGetSamplerParameterIuiv1(
          int sampler, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetSamplerParameterIuiv1,
          jni.JniType.voidType,
          [sampler, pname, params.reference]).check();

  static final _id_glTexBuffer =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexBuffer", "(III)V");

  /// from: static public native void glTexBuffer(int target, int internalformat, int buffer)
  static void glTexBuffer(int target, int internalformat, int buffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexBuffer,
          jni.JniType.voidType, [target, internalformat, buffer]).check();

  static final _id_glTexBufferRange = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexBufferRange", "(IIIII)V");

  /// from: static public native void glTexBufferRange(int target, int internalformat, int buffer, int offset, int size)
  static void glTexBufferRange(
          int target, int internalformat, int buffer, int offset, int size) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexBufferRange,
          jni.JniType.voidType,
          [target, internalformat, buffer, offset, size]).check();

  static final _id_glTexStorage3DMultisample = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexStorage3DMultisample", "(IIIIIIZ)V");

  /// from: static public native void glTexStorage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, boolean fixedsamplelocations)
  static void glTexStorage3DMultisample(
          int target,
          int samples,
          int internalformat,
          int width,
          int height,
          int depth,
          bool fixedsamplelocations) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTexStorage3DMultisample, jni.JniType.voidType, [
        target,
        samples,
        internalformat,
        width,
        height,
        depth,
        fixedsamplelocations
      ]).check();
}

/// from: android.opengl.GLES32$DebugProc
class GLES32_DebugProc extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/opengl/GLES32\$DebugProc");
  GLES32_DebugProc.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onMessage = jniAccessors.getMethodIDOf(
      _classRef, "onMessage", "(IIIILjava/lang/String;)V");

  /// from: public abstract void onMessage(int source, int type, int id, int severity, java.lang.String message)
  void onMessage(
          int source, int type, int id, int severity, jni.JniString message) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onMessage,
          jni.JniType.voidType,
          [source, type, id, severity, message.reference]).check();
}
