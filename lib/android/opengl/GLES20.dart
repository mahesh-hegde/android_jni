// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.opengl.GLES20
///
/// OpenGL ES 2.0
class GLES20 extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/opengl/GLES20");
  GLES20.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int GL_ACTIVE_ATTRIBUTES
  static const GL_ACTIVE_ATTRIBUTES = 35721;

  /// from: static public final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
  static const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;

  /// from: static public final int GL_ACTIVE_TEXTURE
  static const GL_ACTIVE_TEXTURE = 34016;

  /// from: static public final int GL_ACTIVE_UNIFORMS
  static const GL_ACTIVE_UNIFORMS = 35718;

  /// from: static public final int GL_ACTIVE_UNIFORM_MAX_LENGTH
  static const GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719;

  /// from: static public final int GL_ALIASED_LINE_WIDTH_RANGE
  static const GL_ALIASED_LINE_WIDTH_RANGE = 33902;

  /// from: static public final int GL_ALIASED_POINT_SIZE_RANGE
  static const GL_ALIASED_POINT_SIZE_RANGE = 33901;

  /// from: static public final int GL_ALPHA
  static const GL_ALPHA = 6406;

  /// from: static public final int GL_ALPHA_BITS
  static const GL_ALPHA_BITS = 3413;

  /// from: static public final int GL_ALWAYS
  static const GL_ALWAYS = 519;

  /// from: static public final int GL_ARRAY_BUFFER
  static const GL_ARRAY_BUFFER = 34962;

  /// from: static public final int GL_ARRAY_BUFFER_BINDING
  static const GL_ARRAY_BUFFER_BINDING = 34964;

  /// from: static public final int GL_ATTACHED_SHADERS
  static const GL_ATTACHED_SHADERS = 35717;

  /// from: static public final int GL_BACK
  static const GL_BACK = 1029;

  /// from: static public final int GL_BLEND
  static const GL_BLEND = 3042;

  /// from: static public final int GL_BLEND_COLOR
  static const GL_BLEND_COLOR = 32773;

  /// from: static public final int GL_BLEND_DST_ALPHA
  static const GL_BLEND_DST_ALPHA = 32970;

  /// from: static public final int GL_BLEND_DST_RGB
  static const GL_BLEND_DST_RGB = 32968;

  /// from: static public final int GL_BLEND_EQUATION
  static const GL_BLEND_EQUATION = 32777;

  /// from: static public final int GL_BLEND_EQUATION_ALPHA
  static const GL_BLEND_EQUATION_ALPHA = 34877;

  /// from: static public final int GL_BLEND_EQUATION_RGB
  static const GL_BLEND_EQUATION_RGB = 32777;

  /// from: static public final int GL_BLEND_SRC_ALPHA
  static const GL_BLEND_SRC_ALPHA = 32971;

  /// from: static public final int GL_BLEND_SRC_RGB
  static const GL_BLEND_SRC_RGB = 32969;

  /// from: static public final int GL_BLUE_BITS
  static const GL_BLUE_BITS = 3412;

  /// from: static public final int GL_BOOL
  static const GL_BOOL = 35670;

  /// from: static public final int GL_BOOL_VEC2
  static const GL_BOOL_VEC2 = 35671;

  /// from: static public final int GL_BOOL_VEC3
  static const GL_BOOL_VEC3 = 35672;

  /// from: static public final int GL_BOOL_VEC4
  static const GL_BOOL_VEC4 = 35673;

  /// from: static public final int GL_BUFFER_SIZE
  static const GL_BUFFER_SIZE = 34660;

  /// from: static public final int GL_BUFFER_USAGE
  static const GL_BUFFER_USAGE = 34661;

  /// from: static public final int GL_BYTE
  static const GL_BYTE = 5120;

  /// from: static public final int GL_CCW
  static const GL_CCW = 2305;

  /// from: static public final int GL_CLAMP_TO_EDGE
  static const GL_CLAMP_TO_EDGE = 33071;

  /// from: static public final int GL_COLOR_ATTACHMENT0
  static const GL_COLOR_ATTACHMENT0 = 36064;

  /// from: static public final int GL_COLOR_BUFFER_BIT
  static const GL_COLOR_BUFFER_BIT = 16384;

  /// from: static public final int GL_COLOR_CLEAR_VALUE
  static const GL_COLOR_CLEAR_VALUE = 3106;

  /// from: static public final int GL_COLOR_WRITEMASK
  static const GL_COLOR_WRITEMASK = 3107;

  /// from: static public final int GL_COMPILE_STATUS
  static const GL_COMPILE_STATUS = 35713;

  /// from: static public final int GL_COMPRESSED_TEXTURE_FORMATS
  static const GL_COMPRESSED_TEXTURE_FORMATS = 34467;

  /// from: static public final int GL_CONSTANT_ALPHA
  static const GL_CONSTANT_ALPHA = 32771;

  /// from: static public final int GL_CONSTANT_COLOR
  static const GL_CONSTANT_COLOR = 32769;

  /// from: static public final int GL_CULL_FACE
  static const GL_CULL_FACE = 2884;

  /// from: static public final int GL_CULL_FACE_MODE
  static const GL_CULL_FACE_MODE = 2885;

  /// from: static public final int GL_CURRENT_PROGRAM
  static const GL_CURRENT_PROGRAM = 35725;

  /// from: static public final int GL_CURRENT_VERTEX_ATTRIB
  static const GL_CURRENT_VERTEX_ATTRIB = 34342;

  /// from: static public final int GL_CW
  static const GL_CW = 2304;

  /// from: static public final int GL_DECR
  static const GL_DECR = 7683;

  /// from: static public final int GL_DECR_WRAP
  static const GL_DECR_WRAP = 34056;

  /// from: static public final int GL_DELETE_STATUS
  static const GL_DELETE_STATUS = 35712;

  /// from: static public final int GL_DEPTH_ATTACHMENT
  static const GL_DEPTH_ATTACHMENT = 36096;

  /// from: static public final int GL_DEPTH_BITS
  static const GL_DEPTH_BITS = 3414;

  /// from: static public final int GL_DEPTH_BUFFER_BIT
  static const GL_DEPTH_BUFFER_BIT = 256;

  /// from: static public final int GL_DEPTH_CLEAR_VALUE
  static const GL_DEPTH_CLEAR_VALUE = 2931;

  /// from: static public final int GL_DEPTH_COMPONENT
  static const GL_DEPTH_COMPONENT = 6402;

  /// from: static public final int GL_DEPTH_COMPONENT16
  static const GL_DEPTH_COMPONENT16 = 33189;

  /// from: static public final int GL_DEPTH_FUNC
  static const GL_DEPTH_FUNC = 2932;

  /// from: static public final int GL_DEPTH_RANGE
  static const GL_DEPTH_RANGE = 2928;

  /// from: static public final int GL_DEPTH_TEST
  static const GL_DEPTH_TEST = 2929;

  /// from: static public final int GL_DEPTH_WRITEMASK
  static const GL_DEPTH_WRITEMASK = 2930;

  /// from: static public final int GL_DITHER
  static const GL_DITHER = 3024;

  /// from: static public final int GL_DONT_CARE
  static const GL_DONT_CARE = 4352;

  /// from: static public final int GL_DST_ALPHA
  static const GL_DST_ALPHA = 772;

  /// from: static public final int GL_DST_COLOR
  static const GL_DST_COLOR = 774;

  /// from: static public final int GL_DYNAMIC_DRAW
  static const GL_DYNAMIC_DRAW = 35048;

  /// from: static public final int GL_ELEMENT_ARRAY_BUFFER
  static const GL_ELEMENT_ARRAY_BUFFER = 34963;

  /// from: static public final int GL_ELEMENT_ARRAY_BUFFER_BINDING
  static const GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;

  /// from: static public final int GL_EQUAL
  static const GL_EQUAL = 514;

  /// from: static public final int GL_EXTENSIONS
  static const GL_EXTENSIONS = 7939;

  /// from: static public final int GL_FALSE
  static const GL_FALSE = 0;

  /// from: static public final int GL_FASTEST
  static const GL_FASTEST = 4353;

  /// from: static public final int GL_FIXED
  static const GL_FIXED = 5132;

  /// from: static public final int GL_FLOAT
  static const GL_FLOAT = 5126;

  /// from: static public final int GL_FLOAT_MAT2
  static const GL_FLOAT_MAT2 = 35674;

  /// from: static public final int GL_FLOAT_MAT3
  static const GL_FLOAT_MAT3 = 35675;

  /// from: static public final int GL_FLOAT_MAT4
  static const GL_FLOAT_MAT4 = 35676;

  /// from: static public final int GL_FLOAT_VEC2
  static const GL_FLOAT_VEC2 = 35664;

  /// from: static public final int GL_FLOAT_VEC3
  static const GL_FLOAT_VEC3 = 35665;

  /// from: static public final int GL_FLOAT_VEC4
  static const GL_FLOAT_VEC4 = 35666;

  /// from: static public final int GL_FRAGMENT_SHADER
  static const GL_FRAGMENT_SHADER = 35632;

  /// from: static public final int GL_FRAMEBUFFER
  static const GL_FRAMEBUFFER = 36160;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
  static const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
  static const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
  static const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
  static const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;

  /// from: static public final int GL_FRAMEBUFFER_BINDING
  static const GL_FRAMEBUFFER_BINDING = 36006;

  /// from: static public final int GL_FRAMEBUFFER_COMPLETE
  static const GL_FRAMEBUFFER_COMPLETE = 36053;

  /// from: static public final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
  static const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;

  /// from: static public final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
  static const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;

  /// from: static public final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
  static const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;

  /// from: static public final int GL_FRAMEBUFFER_UNSUPPORTED
  static const GL_FRAMEBUFFER_UNSUPPORTED = 36061;

  /// from: static public final int GL_FRONT
  static const GL_FRONT = 1028;

  /// from: static public final int GL_FRONT_AND_BACK
  static const GL_FRONT_AND_BACK = 1032;

  /// from: static public final int GL_FRONT_FACE
  static const GL_FRONT_FACE = 2886;

  /// from: static public final int GL_FUNC_ADD
  static const GL_FUNC_ADD = 32774;

  /// from: static public final int GL_FUNC_REVERSE_SUBTRACT
  static const GL_FUNC_REVERSE_SUBTRACT = 32779;

  /// from: static public final int GL_FUNC_SUBTRACT
  static const GL_FUNC_SUBTRACT = 32778;

  /// from: static public final int GL_GENERATE_MIPMAP_HINT
  static const GL_GENERATE_MIPMAP_HINT = 33170;

  /// from: static public final int GL_GEQUAL
  static const GL_GEQUAL = 518;

  /// from: static public final int GL_GREATER
  static const GL_GREATER = 516;

  /// from: static public final int GL_GREEN_BITS
  static const GL_GREEN_BITS = 3411;

  /// from: static public final int GL_HIGH_FLOAT
  static const GL_HIGH_FLOAT = 36338;

  /// from: static public final int GL_HIGH_INT
  static const GL_HIGH_INT = 36341;

  /// from: static public final int GL_IMPLEMENTATION_COLOR_READ_FORMAT
  static const GL_IMPLEMENTATION_COLOR_READ_FORMAT = 35739;

  /// from: static public final int GL_IMPLEMENTATION_COLOR_READ_TYPE
  static const GL_IMPLEMENTATION_COLOR_READ_TYPE = 35738;

  /// from: static public final int GL_INCR
  static const GL_INCR = 7682;

  /// from: static public final int GL_INCR_WRAP
  static const GL_INCR_WRAP = 34055;

  /// from: static public final int GL_INFO_LOG_LENGTH
  static const GL_INFO_LOG_LENGTH = 35716;

  /// from: static public final int GL_INT
  static const GL_INT = 5124;

  /// from: static public final int GL_INT_VEC2
  static const GL_INT_VEC2 = 35667;

  /// from: static public final int GL_INT_VEC3
  static const GL_INT_VEC3 = 35668;

  /// from: static public final int GL_INT_VEC4
  static const GL_INT_VEC4 = 35669;

  /// from: static public final int GL_INVALID_ENUM
  static const GL_INVALID_ENUM = 1280;

  /// from: static public final int GL_INVALID_FRAMEBUFFER_OPERATION
  static const GL_INVALID_FRAMEBUFFER_OPERATION = 1286;

  /// from: static public final int GL_INVALID_OPERATION
  static const GL_INVALID_OPERATION = 1282;

  /// from: static public final int GL_INVALID_VALUE
  static const GL_INVALID_VALUE = 1281;

  /// from: static public final int GL_INVERT
  static const GL_INVERT = 5386;

  /// from: static public final int GL_KEEP
  static const GL_KEEP = 7680;

  /// from: static public final int GL_LEQUAL
  static const GL_LEQUAL = 515;

  /// from: static public final int GL_LESS
  static const GL_LESS = 513;

  /// from: static public final int GL_LINEAR
  static const GL_LINEAR = 9729;

  /// from: static public final int GL_LINEAR_MIPMAP_LINEAR
  static const GL_LINEAR_MIPMAP_LINEAR = 9987;

  /// from: static public final int GL_LINEAR_MIPMAP_NEAREST
  static const GL_LINEAR_MIPMAP_NEAREST = 9985;

  /// from: static public final int GL_LINES
  static const GL_LINES = 1;

  /// from: static public final int GL_LINE_LOOP
  static const GL_LINE_LOOP = 2;

  /// from: static public final int GL_LINE_STRIP
  static const GL_LINE_STRIP = 3;

  /// from: static public final int GL_LINE_WIDTH
  static const GL_LINE_WIDTH = 2849;

  /// from: static public final int GL_LINK_STATUS
  static const GL_LINK_STATUS = 35714;

  /// from: static public final int GL_LOW_FLOAT
  static const GL_LOW_FLOAT = 36336;

  /// from: static public final int GL_LOW_INT
  static const GL_LOW_INT = 36339;

  /// from: static public final int GL_LUMINANCE
  static const GL_LUMINANCE = 6409;

  /// from: static public final int GL_LUMINANCE_ALPHA
  static const GL_LUMINANCE_ALPHA = 6410;

  /// from: static public final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
  static const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;

  /// from: static public final int GL_MAX_CUBE_MAP_TEXTURE_SIZE
  static const GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;

  /// from: static public final int GL_MAX_FRAGMENT_UNIFORM_VECTORS
  static const GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;

  /// from: static public final int GL_MAX_RENDERBUFFER_SIZE
  static const GL_MAX_RENDERBUFFER_SIZE = 34024;

  /// from: static public final int GL_MAX_TEXTURE_IMAGE_UNITS
  static const GL_MAX_TEXTURE_IMAGE_UNITS = 34930;

  /// from: static public final int GL_MAX_TEXTURE_SIZE
  static const GL_MAX_TEXTURE_SIZE = 3379;

  /// from: static public final int GL_MAX_VARYING_VECTORS
  static const GL_MAX_VARYING_VECTORS = 36348;

  /// from: static public final int GL_MAX_VERTEX_ATTRIBS
  static const GL_MAX_VERTEX_ATTRIBS = 34921;

  /// from: static public final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
  static const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;

  /// from: static public final int GL_MAX_VERTEX_UNIFORM_VECTORS
  static const GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;

  /// from: static public final int GL_MAX_VIEWPORT_DIMS
  static const GL_MAX_VIEWPORT_DIMS = 3386;

  /// from: static public final int GL_MEDIUM_FLOAT
  static const GL_MEDIUM_FLOAT = 36337;

  /// from: static public final int GL_MEDIUM_INT
  static const GL_MEDIUM_INT = 36340;

  /// from: static public final int GL_MIRRORED_REPEAT
  static const GL_MIRRORED_REPEAT = 33648;

  /// from: static public final int GL_NEAREST
  static const GL_NEAREST = 9728;

  /// from: static public final int GL_NEAREST_MIPMAP_LINEAR
  static const GL_NEAREST_MIPMAP_LINEAR = 9986;

  /// from: static public final int GL_NEAREST_MIPMAP_NEAREST
  static const GL_NEAREST_MIPMAP_NEAREST = 9984;

  /// from: static public final int GL_NEVER
  static const GL_NEVER = 512;

  /// from: static public final int GL_NICEST
  static const GL_NICEST = 4354;

  /// from: static public final int GL_NONE
  static const GL_NONE = 0;

  /// from: static public final int GL_NOTEQUAL
  static const GL_NOTEQUAL = 517;

  /// from: static public final int GL_NO_ERROR
  static const GL_NO_ERROR = 0;

  /// from: static public final int GL_NUM_COMPRESSED_TEXTURE_FORMATS
  static const GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;

  /// from: static public final int GL_NUM_SHADER_BINARY_FORMATS
  static const GL_NUM_SHADER_BINARY_FORMATS = 36345;

  /// from: static public final int GL_ONE
  static const GL_ONE = 1;

  /// from: static public final int GL_ONE_MINUS_CONSTANT_ALPHA
  static const GL_ONE_MINUS_CONSTANT_ALPHA = 32772;

  /// from: static public final int GL_ONE_MINUS_CONSTANT_COLOR
  static const GL_ONE_MINUS_CONSTANT_COLOR = 32770;

  /// from: static public final int GL_ONE_MINUS_DST_ALPHA
  static const GL_ONE_MINUS_DST_ALPHA = 773;

  /// from: static public final int GL_ONE_MINUS_DST_COLOR
  static const GL_ONE_MINUS_DST_COLOR = 775;

  /// from: static public final int GL_ONE_MINUS_SRC_ALPHA
  static const GL_ONE_MINUS_SRC_ALPHA = 771;

  /// from: static public final int GL_ONE_MINUS_SRC_COLOR
  static const GL_ONE_MINUS_SRC_COLOR = 769;

  /// from: static public final int GL_OUT_OF_MEMORY
  static const GL_OUT_OF_MEMORY = 1285;

  /// from: static public final int GL_PACK_ALIGNMENT
  static const GL_PACK_ALIGNMENT = 3333;

  /// from: static public final int GL_POINTS
  static const GL_POINTS = 0;

  /// from: static public final int GL_POLYGON_OFFSET_FACTOR
  static const GL_POLYGON_OFFSET_FACTOR = 32824;

  /// from: static public final int GL_POLYGON_OFFSET_FILL
  static const GL_POLYGON_OFFSET_FILL = 32823;

  /// from: static public final int GL_POLYGON_OFFSET_UNITS
  static const GL_POLYGON_OFFSET_UNITS = 10752;

  /// from: static public final int GL_RED_BITS
  static const GL_RED_BITS = 3410;

  /// from: static public final int GL_RENDERBUFFER
  static const GL_RENDERBUFFER = 36161;

  /// from: static public final int GL_RENDERBUFFER_ALPHA_SIZE
  static const GL_RENDERBUFFER_ALPHA_SIZE = 36179;

  /// from: static public final int GL_RENDERBUFFER_BINDING
  static const GL_RENDERBUFFER_BINDING = 36007;

  /// from: static public final int GL_RENDERBUFFER_BLUE_SIZE
  static const GL_RENDERBUFFER_BLUE_SIZE = 36178;

  /// from: static public final int GL_RENDERBUFFER_DEPTH_SIZE
  static const GL_RENDERBUFFER_DEPTH_SIZE = 36180;

  /// from: static public final int GL_RENDERBUFFER_GREEN_SIZE
  static const GL_RENDERBUFFER_GREEN_SIZE = 36177;

  /// from: static public final int GL_RENDERBUFFER_HEIGHT
  static const GL_RENDERBUFFER_HEIGHT = 36163;

  /// from: static public final int GL_RENDERBUFFER_INTERNAL_FORMAT
  static const GL_RENDERBUFFER_INTERNAL_FORMAT = 36164;

  /// from: static public final int GL_RENDERBUFFER_RED_SIZE
  static const GL_RENDERBUFFER_RED_SIZE = 36176;

  /// from: static public final int GL_RENDERBUFFER_STENCIL_SIZE
  static const GL_RENDERBUFFER_STENCIL_SIZE = 36181;

  /// from: static public final int GL_RENDERBUFFER_WIDTH
  static const GL_RENDERBUFFER_WIDTH = 36162;

  /// from: static public final int GL_RENDERER
  static const GL_RENDERER = 7937;

  /// from: static public final int GL_REPEAT
  static const GL_REPEAT = 10497;

  /// from: static public final int GL_REPLACE
  static const GL_REPLACE = 7681;

  /// from: static public final int GL_RGB
  static const GL_RGB = 6407;

  /// from: static public final int GL_RGB565
  static const GL_RGB565 = 36194;

  /// from: static public final int GL_RGB5_A1
  static const GL_RGB5_A1 = 32855;

  /// from: static public final int GL_RGBA
  static const GL_RGBA = 6408;

  /// from: static public final int GL_RGBA4
  static const GL_RGBA4 = 32854;

  /// from: static public final int GL_SAMPLER_2D
  static const GL_SAMPLER_2D = 35678;

  /// from: static public final int GL_SAMPLER_CUBE
  static const GL_SAMPLER_CUBE = 35680;

  /// from: static public final int GL_SAMPLES
  static const GL_SAMPLES = 32937;

  /// from: static public final int GL_SAMPLE_ALPHA_TO_COVERAGE
  static const GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;

  /// from: static public final int GL_SAMPLE_BUFFERS
  static const GL_SAMPLE_BUFFERS = 32936;

  /// from: static public final int GL_SAMPLE_COVERAGE
  static const GL_SAMPLE_COVERAGE = 32928;

  /// from: static public final int GL_SAMPLE_COVERAGE_INVERT
  static const GL_SAMPLE_COVERAGE_INVERT = 32939;

  /// from: static public final int GL_SAMPLE_COVERAGE_VALUE
  static const GL_SAMPLE_COVERAGE_VALUE = 32938;

  /// from: static public final int GL_SCISSOR_BOX
  static const GL_SCISSOR_BOX = 3088;

  /// from: static public final int GL_SCISSOR_TEST
  static const GL_SCISSOR_TEST = 3089;

  /// from: static public final int GL_SHADER_BINARY_FORMATS
  static const GL_SHADER_BINARY_FORMATS = 36344;

  /// from: static public final int GL_SHADER_COMPILER
  static const GL_SHADER_COMPILER = 36346;

  /// from: static public final int GL_SHADER_SOURCE_LENGTH
  static const GL_SHADER_SOURCE_LENGTH = 35720;

  /// from: static public final int GL_SHADER_TYPE
  static const GL_SHADER_TYPE = 35663;

  /// from: static public final int GL_SHADING_LANGUAGE_VERSION
  static const GL_SHADING_LANGUAGE_VERSION = 35724;

  /// from: static public final int GL_SHORT
  static const GL_SHORT = 5122;

  /// from: static public final int GL_SRC_ALPHA
  static const GL_SRC_ALPHA = 770;

  /// from: static public final int GL_SRC_ALPHA_SATURATE
  static const GL_SRC_ALPHA_SATURATE = 776;

  /// from: static public final int GL_SRC_COLOR
  static const GL_SRC_COLOR = 768;

  /// from: static public final int GL_STATIC_DRAW
  static const GL_STATIC_DRAW = 35044;

  /// from: static public final int GL_STENCIL_ATTACHMENT
  static const GL_STENCIL_ATTACHMENT = 36128;

  /// from: static public final int GL_STENCIL_BACK_FAIL
  static const GL_STENCIL_BACK_FAIL = 34817;

  /// from: static public final int GL_STENCIL_BACK_FUNC
  static const GL_STENCIL_BACK_FUNC = 34816;

  /// from: static public final int GL_STENCIL_BACK_PASS_DEPTH_FAIL
  static const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818;

  /// from: static public final int GL_STENCIL_BACK_PASS_DEPTH_PASS
  static const GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819;

  /// from: static public final int GL_STENCIL_BACK_REF
  static const GL_STENCIL_BACK_REF = 36003;

  /// from: static public final int GL_STENCIL_BACK_VALUE_MASK
  static const GL_STENCIL_BACK_VALUE_MASK = 36004;

  /// from: static public final int GL_STENCIL_BACK_WRITEMASK
  static const GL_STENCIL_BACK_WRITEMASK = 36005;

  /// from: static public final int GL_STENCIL_BITS
  static const GL_STENCIL_BITS = 3415;

  /// from: static public final int GL_STENCIL_BUFFER_BIT
  static const GL_STENCIL_BUFFER_BIT = 1024;

  /// from: static public final int GL_STENCIL_CLEAR_VALUE
  static const GL_STENCIL_CLEAR_VALUE = 2961;

  /// from: static public final int GL_STENCIL_FAIL
  static const GL_STENCIL_FAIL = 2964;

  /// from: static public final int GL_STENCIL_FUNC
  static const GL_STENCIL_FUNC = 2962;

  /// from: static public final int GL_STENCIL_INDEX
  static const GL_STENCIL_INDEX = 6401;

  /// from: static public final int GL_STENCIL_INDEX8
  static const GL_STENCIL_INDEX8 = 36168;

  /// from: static public final int GL_STENCIL_PASS_DEPTH_FAIL
  static const GL_STENCIL_PASS_DEPTH_FAIL = 2965;

  /// from: static public final int GL_STENCIL_PASS_DEPTH_PASS
  static const GL_STENCIL_PASS_DEPTH_PASS = 2966;

  /// from: static public final int GL_STENCIL_REF
  static const GL_STENCIL_REF = 2967;

  /// from: static public final int GL_STENCIL_TEST
  static const GL_STENCIL_TEST = 2960;

  /// from: static public final int GL_STENCIL_VALUE_MASK
  static const GL_STENCIL_VALUE_MASK = 2963;

  /// from: static public final int GL_STENCIL_WRITEMASK
  static const GL_STENCIL_WRITEMASK = 2968;

  /// from: static public final int GL_STREAM_DRAW
  static const GL_STREAM_DRAW = 35040;

  /// from: static public final int GL_SUBPIXEL_BITS
  static const GL_SUBPIXEL_BITS = 3408;

  /// from: static public final int GL_TEXTURE
  static const GL_TEXTURE = 5890;

  /// from: static public final int GL_TEXTURE0
  static const GL_TEXTURE0 = 33984;

  /// from: static public final int GL_TEXTURE1
  static const GL_TEXTURE1 = 33985;

  /// from: static public final int GL_TEXTURE10
  static const GL_TEXTURE10 = 33994;

  /// from: static public final int GL_TEXTURE11
  static const GL_TEXTURE11 = 33995;

  /// from: static public final int GL_TEXTURE12
  static const GL_TEXTURE12 = 33996;

  /// from: static public final int GL_TEXTURE13
  static const GL_TEXTURE13 = 33997;

  /// from: static public final int GL_TEXTURE14
  static const GL_TEXTURE14 = 33998;

  /// from: static public final int GL_TEXTURE15
  static const GL_TEXTURE15 = 33999;

  /// from: static public final int GL_TEXTURE16
  static const GL_TEXTURE16 = 34000;

  /// from: static public final int GL_TEXTURE17
  static const GL_TEXTURE17 = 34001;

  /// from: static public final int GL_TEXTURE18
  static const GL_TEXTURE18 = 34002;

  /// from: static public final int GL_TEXTURE19
  static const GL_TEXTURE19 = 34003;

  /// from: static public final int GL_TEXTURE2
  static const GL_TEXTURE2 = 33986;

  /// from: static public final int GL_TEXTURE20
  static const GL_TEXTURE20 = 34004;

  /// from: static public final int GL_TEXTURE21
  static const GL_TEXTURE21 = 34005;

  /// from: static public final int GL_TEXTURE22
  static const GL_TEXTURE22 = 34006;

  /// from: static public final int GL_TEXTURE23
  static const GL_TEXTURE23 = 34007;

  /// from: static public final int GL_TEXTURE24
  static const GL_TEXTURE24 = 34008;

  /// from: static public final int GL_TEXTURE25
  static const GL_TEXTURE25 = 34009;

  /// from: static public final int GL_TEXTURE26
  static const GL_TEXTURE26 = 34010;

  /// from: static public final int GL_TEXTURE27
  static const GL_TEXTURE27 = 34011;

  /// from: static public final int GL_TEXTURE28
  static const GL_TEXTURE28 = 34012;

  /// from: static public final int GL_TEXTURE29
  static const GL_TEXTURE29 = 34013;

  /// from: static public final int GL_TEXTURE3
  static const GL_TEXTURE3 = 33987;

  /// from: static public final int GL_TEXTURE30
  static const GL_TEXTURE30 = 34014;

  /// from: static public final int GL_TEXTURE31
  static const GL_TEXTURE31 = 34015;

  /// from: static public final int GL_TEXTURE4
  static const GL_TEXTURE4 = 33988;

  /// from: static public final int GL_TEXTURE5
  static const GL_TEXTURE5 = 33989;

  /// from: static public final int GL_TEXTURE6
  static const GL_TEXTURE6 = 33990;

  /// from: static public final int GL_TEXTURE7
  static const GL_TEXTURE7 = 33991;

  /// from: static public final int GL_TEXTURE8
  static const GL_TEXTURE8 = 33992;

  /// from: static public final int GL_TEXTURE9
  static const GL_TEXTURE9 = 33993;

  /// from: static public final int GL_TEXTURE_2D
  static const GL_TEXTURE_2D = 3553;

  /// from: static public final int GL_TEXTURE_BINDING_2D
  static const GL_TEXTURE_BINDING_2D = 32873;

  /// from: static public final int GL_TEXTURE_BINDING_CUBE_MAP
  static const GL_TEXTURE_BINDING_CUBE_MAP = 34068;

  /// from: static public final int GL_TEXTURE_CUBE_MAP
  static const GL_TEXTURE_CUBE_MAP = 34067;

  /// from: static public final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X
  static const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;

  /// from: static public final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
  static const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;

  /// from: static public final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
  static const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;

  /// from: static public final int GL_TEXTURE_CUBE_MAP_POSITIVE_X
  static const GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;

  /// from: static public final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y
  static const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;

  /// from: static public final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z
  static const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;

  /// from: static public final int GL_TEXTURE_MAG_FILTER
  static const GL_TEXTURE_MAG_FILTER = 10240;

  /// from: static public final int GL_TEXTURE_MIN_FILTER
  static const GL_TEXTURE_MIN_FILTER = 10241;

  /// from: static public final int GL_TEXTURE_WRAP_S
  static const GL_TEXTURE_WRAP_S = 10242;

  /// from: static public final int GL_TEXTURE_WRAP_T
  static const GL_TEXTURE_WRAP_T = 10243;

  /// from: static public final int GL_TRIANGLES
  static const GL_TRIANGLES = 4;

  /// from: static public final int GL_TRIANGLE_FAN
  static const GL_TRIANGLE_FAN = 6;

  /// from: static public final int GL_TRIANGLE_STRIP
  static const GL_TRIANGLE_STRIP = 5;

  /// from: static public final int GL_TRUE
  static const GL_TRUE = 1;

  /// from: static public final int GL_UNPACK_ALIGNMENT
  static const GL_UNPACK_ALIGNMENT = 3317;

  /// from: static public final int GL_UNSIGNED_BYTE
  static const GL_UNSIGNED_BYTE = 5121;

  /// from: static public final int GL_UNSIGNED_INT
  static const GL_UNSIGNED_INT = 5125;

  /// from: static public final int GL_UNSIGNED_SHORT
  static const GL_UNSIGNED_SHORT = 5123;

  /// from: static public final int GL_UNSIGNED_SHORT_4_4_4_4
  static const GL_UNSIGNED_SHORT_4_4_4_4 = 32819;

  /// from: static public final int GL_UNSIGNED_SHORT_5_5_5_1
  static const GL_UNSIGNED_SHORT_5_5_5_1 = 32820;

  /// from: static public final int GL_UNSIGNED_SHORT_5_6_5
  static const GL_UNSIGNED_SHORT_5_6_5 = 33635;

  /// from: static public final int GL_VALIDATE_STATUS
  static const GL_VALIDATE_STATUS = 35715;

  /// from: static public final int GL_VENDOR
  static const GL_VENDOR = 7936;

  /// from: static public final int GL_VERSION
  static const GL_VERSION = 7938;

  /// from: static public final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
  static const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;

  /// from: static public final int GL_VERTEX_ATTRIB_ARRAY_ENABLED
  static const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338;

  /// from: static public final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
  static const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;

  /// from: static public final int GL_VERTEX_ATTRIB_ARRAY_POINTER
  static const GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373;

  /// from: static public final int GL_VERTEX_ATTRIB_ARRAY_SIZE
  static const GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339;

  /// from: static public final int GL_VERTEX_ATTRIB_ARRAY_STRIDE
  static const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340;

  /// from: static public final int GL_VERTEX_ATTRIB_ARRAY_TYPE
  static const GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341;

  /// from: static public final int GL_VERTEX_SHADER
  static const GL_VERTEX_SHADER = 35633;

  /// from: static public final int GL_VIEWPORT
  static const GL_VIEWPORT = 2978;

  /// from: static public final int GL_ZERO
  static const GL_ZERO = 0;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GLES20()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_glActiveTexture =
      jniAccessors.getStaticMethodIDOf(_classRef, "glActiveTexture", "(I)V");

  /// from: static public native void glActiveTexture(int texture)
  static void glActiveTexture(int texture) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glActiveTexture,
          jni.JniType.voidType, [texture]).check();

  static final _id_glAttachShader =
      jniAccessors.getStaticMethodIDOf(_classRef, "glAttachShader", "(II)V");

  /// from: static public native void glAttachShader(int program, int shader)
  static void glAttachShader(int program, int shader) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glAttachShader,
          jni.JniType.voidType, [program, shader]).check();

  static final _id_glBindAttribLocation = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBindAttribLocation", "(IILjava/lang/String;)V");

  /// from: static public native void glBindAttribLocation(int program, int index, java.lang.String name)
  static void glBindAttribLocation(
          int program, int index, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindAttribLocation,
          jni.JniType.voidType, [program, index, name.reference]).check();

  static final _id_glBindBuffer =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBindBuffer", "(II)V");

  /// from: static public native void glBindBuffer(int target, int buffer)
  static void glBindBuffer(int target, int buffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindBuffer,
          jni.JniType.voidType, [target, buffer]).check();

  static final _id_glBindFramebuffer =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBindFramebuffer", "(II)V");

  /// from: static public native void glBindFramebuffer(int target, int framebuffer)
  static void glBindFramebuffer(int target, int framebuffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindFramebuffer,
          jni.JniType.voidType, [target, framebuffer]).check();

  static final _id_glBindRenderbuffer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBindRenderbuffer", "(II)V");

  /// from: static public native void glBindRenderbuffer(int target, int renderbuffer)
  static void glBindRenderbuffer(int target, int renderbuffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindRenderbuffer,
          jni.JniType.voidType, [target, renderbuffer]).check();

  static final _id_glBindTexture =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBindTexture", "(II)V");

  /// from: static public native void glBindTexture(int target, int texture)
  static void glBindTexture(int target, int texture) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindTexture,
          jni.JniType.voidType, [target, texture]).check();

  static final _id_glBlendColor =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBlendColor", "(FFFF)V");

  /// from: static public native void glBlendColor(float red, float green, float blue, float alpha)
  static void glBlendColor(
          double red, double green, double blue, double alpha) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBlendColor,
          jni.JniType.voidType, [red, green, blue, alpha]).check();

  static final _id_glBlendEquation =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBlendEquation", "(I)V");

  /// from: static public native void glBlendEquation(int mode)
  static void glBlendEquation(int mode) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glBlendEquation, jni.JniType.voidType, [mode]).check();

  static final _id_glBlendEquationSeparate = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBlendEquationSeparate", "(II)V");

  /// from: static public native void glBlendEquationSeparate(int modeRGB, int modeAlpha)
  static void glBlendEquationSeparate(int modeRGB, int modeAlpha) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glBlendEquationSeparate,
          jni.JniType.voidType,
          [modeRGB, modeAlpha]).check();

  static final _id_glBlendFunc =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBlendFunc", "(II)V");

  /// from: static public native void glBlendFunc(int sfactor, int dfactor)
  static void glBlendFunc(int sfactor, int dfactor) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBlendFunc,
          jni.JniType.voidType, [sfactor, dfactor]).check();

  static final _id_glBlendFuncSeparate = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBlendFuncSeparate", "(IIII)V");

  /// from: static public native void glBlendFuncSeparate(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
  static void glBlendFuncSeparate(
          int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBlendFuncSeparate,
          jni.JniType.voidType, [srcRGB, dstRGB, srcAlpha, dstAlpha]).check();

  static final _id_glBufferData = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBufferData", "(IILjava/nio/Buffer;I)V");

  /// from: static public native void glBufferData(int target, int size, java.nio.Buffer data, int usage)
  static void glBufferData(
          int target, int size, jni.JniObject data, int usage) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBufferData,
          jni.JniType.voidType, [target, size, data.reference, usage]).check();

  static final _id_glBufferSubData = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBufferSubData", "(IIILjava/nio/Buffer;)V");

  /// from: static public native void glBufferSubData(int target, int offset, int size, java.nio.Buffer data)
  static void glBufferSubData(
          int target, int offset, int size, jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBufferSubData,
          jni.JniType.voidType, [target, offset, size, data.reference]).check();

  static final _id_glCheckFramebufferStatus = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCheckFramebufferStatus", "(I)I");

  /// from: static public native int glCheckFramebufferStatus(int target)
  static int glCheckFramebufferStatus(int target) =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glCheckFramebufferStatus, jni.JniType.intType, [target]).integer;

  static final _id_glClear =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClear", "(I)V");

  /// from: static public native void glClear(int mask)
  static void glClear(int mask) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glClear, jni.JniType.voidType, [mask]).check();

  static final _id_glClearColor =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClearColor", "(FFFF)V");

  /// from: static public native void glClearColor(float red, float green, float blue, float alpha)
  static void glClearColor(
          double red, double green, double blue, double alpha) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClearColor,
          jni.JniType.voidType, [red, green, blue, alpha]).check();

  static final _id_glClearDepthf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClearDepthf", "(F)V");

  /// from: static public native void glClearDepthf(float depth)
  static void glClearDepthf(double depth) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glClearDepthf, jni.JniType.voidType, [depth]).check();

  static final _id_glClearStencil =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClearStencil", "(I)V");

  /// from: static public native void glClearStencil(int s)
  static void glClearStencil(int s) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glClearStencil, jni.JniType.voidType, [s]).check();

  static final _id_glColorMask =
      jniAccessors.getStaticMethodIDOf(_classRef, "glColorMask", "(ZZZZ)V");

  /// from: static public native void glColorMask(boolean red, boolean green, boolean blue, boolean alpha)
  static void glColorMask(bool red, bool green, bool blue, bool alpha) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glColorMask,
          jni.JniType.voidType, [red, green, blue, alpha]).check();

  static final _id_glCompileShader =
      jniAccessors.getStaticMethodIDOf(_classRef, "glCompileShader", "(I)V");

  /// from: static public native void glCompileShader(int shader)
  static void glCompileShader(int shader) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glCompileShader,
          jni.JniType.voidType, [shader]).check();

  static final _id_glCompressedTexImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCompressedTexImage2D", "(IIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, java.nio.Buffer data)
  static void glCompressedTexImage2D(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int border,
          int imageSize,
          jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glCompressedTexImage2D, jni.JniType.voidType, [
        target,
        level,
        internalformat,
        width,
        height,
        border,
        imageSize,
        data.reference
      ]).check();

  static final _id_glCompressedTexSubImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCompressedTexSubImage2D", "(IIIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, java.nio.Buffer data)
  static void glCompressedTexSubImage2D(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int width,
          int height,
          int format,
          int imageSize,
          jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glCompressedTexSubImage2D, jni.JniType.voidType, [
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        imageSize,
        data.reference
      ]).check();

  static final _id_glCopyTexImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCopyTexImage2D", "(IIIIIIII)V");

  /// from: static public native void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border)
  static void glCopyTexImage2D(int target, int level, int internalformat, int x,
          int y, int width, int height, int border) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glCopyTexImage2D,
          jni.JniType.voidType,
          [target, level, internalformat, x, y, width, height, border]).check();

  static final _id_glCopyTexSubImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCopyTexSubImage2D", "(IIIIIIII)V");

  /// from: static public native void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
  static void glCopyTexSubImage2D(int target, int level, int xoffset,
          int yoffset, int x, int y, int width, int height) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glCopyTexSubImage2D,
          jni.JniType.voidType,
          [target, level, xoffset, yoffset, x, y, width, height]).check();

  static final _id_glCreateProgram =
      jniAccessors.getStaticMethodIDOf(_classRef, "glCreateProgram", "()I");

  /// from: static public native int glCreateProgram()
  static int glCreateProgram() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glCreateProgram, jni.JniType.intType, []).integer;

  static final _id_glCreateShader =
      jniAccessors.getStaticMethodIDOf(_classRef, "glCreateShader", "(I)I");

  /// from: static public native int glCreateShader(int type)
  static int glCreateShader(int type) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glCreateShader, jni.JniType.intType, [type]).integer;

  static final _id_glCullFace =
      jniAccessors.getStaticMethodIDOf(_classRef, "glCullFace", "(I)V");

  /// from: static public native void glCullFace(int mode)
  static void glCullFace(int mode) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glCullFace, jni.JniType.voidType, [mode]).check();

  static final _id_glDeleteBuffers =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDeleteBuffers", "(I[II)V");

  /// from: static public native void glDeleteBuffers(int n, int[] buffers, int offset)
  static void glDeleteBuffers(int n, jni.JniObject buffers, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteBuffers,
          jni.JniType.voidType, [n, buffers.reference, offset]).check();

  static final _id_glDeleteBuffers1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteBuffers", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDeleteBuffers(int n, java.nio.IntBuffer buffers)
  static void glDeleteBuffers1(int n, jni.JniObject buffers) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteBuffers1,
          jni.JniType.voidType, [n, buffers.reference]).check();

  static final _id_glDeleteFramebuffers = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteFramebuffers", "(I[II)V");

  /// from: static public native void glDeleteFramebuffers(int n, int[] framebuffers, int offset)
  static void glDeleteFramebuffers(
          int n, jni.JniObject framebuffers, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteFramebuffers,
          jni.JniType.voidType, [n, framebuffers.reference, offset]).check();

  static final _id_glDeleteFramebuffers1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteFramebuffers", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDeleteFramebuffers(int n, java.nio.IntBuffer framebuffers)
  static void glDeleteFramebuffers1(int n, jni.JniObject framebuffers) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDeleteFramebuffers1,
          jni.JniType.voidType,
          [n, framebuffers.reference]).check();

  static final _id_glDeleteProgram =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDeleteProgram", "(I)V");

  /// from: static public native void glDeleteProgram(int program)
  static void glDeleteProgram(int program) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteProgram,
          jni.JniType.voidType, [program]).check();

  static final _id_glDeleteRenderbuffers = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteRenderbuffers", "(I[II)V");

  /// from: static public native void glDeleteRenderbuffers(int n, int[] renderbuffers, int offset)
  static void glDeleteRenderbuffers(
          int n, jni.JniObject renderbuffers, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDeleteRenderbuffers,
          jni.JniType.voidType,
          [n, renderbuffers.reference, offset]).check();

  static final _id_glDeleteRenderbuffers1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteRenderbuffers", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDeleteRenderbuffers(int n, java.nio.IntBuffer renderbuffers)
  static void glDeleteRenderbuffers1(int n, jni.JniObject renderbuffers) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDeleteRenderbuffers1,
          jni.JniType.voidType,
          [n, renderbuffers.reference]).check();

  static final _id_glDeleteShader =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDeleteShader", "(I)V");

  /// from: static public native void glDeleteShader(int shader)
  static void glDeleteShader(int shader) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteShader,
          jni.JniType.voidType, [shader]).check();

  static final _id_glDeleteTextures = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteTextures", "(I[II)V");

  /// from: static public native void glDeleteTextures(int n, int[] textures, int offset)
  static void glDeleteTextures(int n, jni.JniObject textures, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteTextures,
          jni.JniType.voidType, [n, textures.reference, offset]).check();

  static final _id_glDeleteTextures1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteTextures", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDeleteTextures(int n, java.nio.IntBuffer textures)
  static void glDeleteTextures1(int n, jni.JniObject textures) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteTextures1,
          jni.JniType.voidType, [n, textures.reference]).check();

  static final _id_glDepthFunc =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDepthFunc", "(I)V");

  /// from: static public native void glDepthFunc(int func)
  static void glDepthFunc(int func) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glDepthFunc, jni.JniType.voidType, [func]).check();

  static final _id_glDepthMask =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDepthMask", "(Z)V");

  /// from: static public native void glDepthMask(boolean flag)
  static void glDepthMask(bool flag) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glDepthMask, jni.JniType.voidType, [flag]).check();

  static final _id_glDepthRangef =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDepthRangef", "(FF)V");

  /// from: static public native void glDepthRangef(float zNear, float zFar)
  static void glDepthRangef(double zNear, double zFar) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDepthRangef,
          jni.JniType.voidType, [zNear, zFar]).check();

  static final _id_glDetachShader =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDetachShader", "(II)V");

  /// from: static public native void glDetachShader(int program, int shader)
  static void glDetachShader(int program, int shader) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDetachShader,
          jni.JniType.voidType, [program, shader]).check();

  static final _id_glDisable =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDisable", "(I)V");

  /// from: static public native void glDisable(int cap)
  static void glDisable(int cap) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glDisable, jni.JniType.voidType, [cap]).check();

  static final _id_glDisableVertexAttribArray = jniAccessors
      .getStaticMethodIDOf(_classRef, "glDisableVertexAttribArray", "(I)V");

  /// from: static public native void glDisableVertexAttribArray(int index)
  static void glDisableVertexAttribArray(int index) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDisableVertexAttribArray,
          jni.JniType.voidType,
          [index]).check();

  static final _id_glDrawArrays =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDrawArrays", "(III)V");

  /// from: static public native void glDrawArrays(int mode, int first, int count)
  static void glDrawArrays(int mode, int first, int count) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDrawArrays,
          jni.JniType.voidType, [mode, first, count]).check();

  static final _id_glDrawElements =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDrawElements", "(IIII)V");

  /// from: static public native void glDrawElements(int mode, int count, int type, int offset)
  static void glDrawElements(int mode, int count, int type, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDrawElements,
          jni.JniType.voidType, [mode, count, type, offset]).check();

  static final _id_glDrawElements1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDrawElements", "(IIILjava/nio/Buffer;)V");

  /// from: static public native void glDrawElements(int mode, int count, int type, java.nio.Buffer indices)
  static void glDrawElements1(
          int mode, int count, int type, jni.JniObject indices) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDrawElements1,
          jni.JniType.voidType, [mode, count, type, indices.reference]).check();

  static final _id_glEnable =
      jniAccessors.getStaticMethodIDOf(_classRef, "glEnable", "(I)V");

  /// from: static public native void glEnable(int cap)
  static void glEnable(int cap) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glEnable, jni.JniType.voidType, [cap]).check();

  static final _id_glEnableVertexAttribArray = jniAccessors.getStaticMethodIDOf(
      _classRef, "glEnableVertexAttribArray", "(I)V");

  /// from: static public native void glEnableVertexAttribArray(int index)
  static void glEnableVertexAttribArray(int index) =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glEnableVertexAttribArray, jni.JniType.voidType, [index]).check();

  static final _id_glFinish =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFinish", "()V");

  /// from: static public native void glFinish()
  static void glFinish() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glFinish, jni.JniType.voidType, []).check();

  static final _id_glFlush =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFlush", "()V");

  /// from: static public native void glFlush()
  static void glFlush() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glFlush, jni.JniType.voidType, []).check();

  static final _id_glFramebufferRenderbuffer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glFramebufferRenderbuffer", "(IIII)V");

  /// from: static public native void glFramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, int renderbuffer)
  static void glFramebufferRenderbuffer(int target, int attachment,
          int renderbuffertarget, int renderbuffer) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glFramebufferRenderbuffer,
          jni.JniType.voidType,
          [target, attachment, renderbuffertarget, renderbuffer]).check();

  static final _id_glFramebufferTexture2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glFramebufferTexture2D", "(IIIII)V");

  /// from: static public native void glFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level)
  static void glFramebufferTexture2D(
          int target, int attachment, int textarget, int texture, int level) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glFramebufferTexture2D,
          jni.JniType.voidType,
          [target, attachment, textarget, texture, level]).check();

  static final _id_glFrontFace =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFrontFace", "(I)V");

  /// from: static public native void glFrontFace(int mode)
  static void glFrontFace(int mode) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glFrontFace, jni.JniType.voidType, [mode]).check();

  static final _id_glGenBuffers =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGenBuffers", "(I[II)V");

  /// from: static public native void glGenBuffers(int n, int[] buffers, int offset)
  static void glGenBuffers(int n, jni.JniObject buffers, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenBuffers,
          jni.JniType.voidType, [n, buffers.reference, offset]).check();

  static final _id_glGenBuffers1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenBuffers", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGenBuffers(int n, java.nio.IntBuffer buffers)
  static void glGenBuffers1(int n, jni.JniObject buffers) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenBuffers1,
          jni.JniType.voidType, [n, buffers.reference]).check();

  static final _id_glGenerateMipmap =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGenerateMipmap", "(I)V");

  /// from: static public native void glGenerateMipmap(int target)
  static void glGenerateMipmap(int target) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenerateMipmap,
          jni.JniType.voidType, [target]).check();

  static final _id_glGenFramebuffers = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenFramebuffers", "(I[II)V");

  /// from: static public native void glGenFramebuffers(int n, int[] framebuffers, int offset)
  static void glGenFramebuffers(
          int n, jni.JniObject framebuffers, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenFramebuffers,
          jni.JniType.voidType, [n, framebuffers.reference, offset]).check();

  static final _id_glGenFramebuffers1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenFramebuffers", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGenFramebuffers(int n, java.nio.IntBuffer framebuffers)
  static void glGenFramebuffers1(int n, jni.JniObject framebuffers) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenFramebuffers1,
          jni.JniType.voidType, [n, framebuffers.reference]).check();

  static final _id_glGenRenderbuffers = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenRenderbuffers", "(I[II)V");

  /// from: static public native void glGenRenderbuffers(int n, int[] renderbuffers, int offset)
  static void glGenRenderbuffers(
          int n, jni.JniObject renderbuffers, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenRenderbuffers,
          jni.JniType.voidType, [n, renderbuffers.reference, offset]).check();

  static final _id_glGenRenderbuffers1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenRenderbuffers", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGenRenderbuffers(int n, java.nio.IntBuffer renderbuffers)
  static void glGenRenderbuffers1(int n, jni.JniObject renderbuffers) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenRenderbuffers1,
          jni.JniType.voidType, [n, renderbuffers.reference]).check();

  static final _id_glGenTextures =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGenTextures", "(I[II)V");

  /// from: static public native void glGenTextures(int n, int[] textures, int offset)
  static void glGenTextures(int n, jni.JniObject textures, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenTextures,
          jni.JniType.voidType, [n, textures.reference, offset]).check();

  static final _id_glGenTextures1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenTextures", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGenTextures(int n, java.nio.IntBuffer textures)
  static void glGenTextures1(int n, jni.JniObject textures) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenTextures1,
          jni.JniType.voidType, [n, textures.reference]).check();

  static final _id_glGetActiveAttrib = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetActiveAttrib", "(III[II[II[II[BI)V");

  /// from: static public native void glGetActiveAttrib(int program, int index, int bufsize, int[] length, int lengthOffset, int[] size, int sizeOffset, int[] type, int typeOffset, byte[] name, int nameOffset)
  static void glGetActiveAttrib(
          int program,
          int index,
          int bufsize,
          jni.JniObject length,
          int lengthOffset,
          jni.JniObject size,
          int sizeOffset,
          jni.JniObject type,
          int typeOffset,
          jni.JniObject name,
          int nameOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetActiveAttrib, jni.JniType.voidType, [
        program,
        index,
        bufsize,
        length.reference,
        lengthOffset,
        size.reference,
        sizeOffset,
        type.reference,
        typeOffset,
        name.reference,
        nameOffset
      ]).check();

  static final _id_glGetActiveAttrib1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetActiveAttrib", "(II[II[II)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetActiveAttrib(int program, int index, int[] size, int sizeOffset, int[] type, int typeOffset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetActiveAttrib1(
          int program,
          int index,
          jni.JniObject size,
          int sizeOffset,
          jni.JniObject type,
          int typeOffset) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetActiveAttrib1, jni.JniType.objectType, [
        program,
        index,
        size.reference,
        sizeOffset,
        type.reference,
        typeOffset
      ]).object);

  static final _id_glGetActiveAttrib2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "glGetActiveAttrib",
      "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetActiveAttrib(int program, int index, java.nio.IntBuffer size, java.nio.IntBuffer type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetActiveAttrib2(
          int program, int index, jni.JniObject size, jni.JniObject type) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetActiveAttrib2,
          jni.JniType.objectType,
          [program, index, size.reference, type.reference]).object);

  static final _id_glGetActiveUniform = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetActiveUniform", "(III[II[II[II[BI)V");

  /// from: static public native void glGetActiveUniform(int program, int index, int bufsize, int[] length, int lengthOffset, int[] size, int sizeOffset, int[] type, int typeOffset, byte[] name, int nameOffset)
  static void glGetActiveUniform(
          int program,
          int index,
          int bufsize,
          jni.JniObject length,
          int lengthOffset,
          jni.JniObject size,
          int sizeOffset,
          jni.JniObject type,
          int typeOffset,
          jni.JniObject name,
          int nameOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetActiveUniform, jni.JniType.voidType, [
        program,
        index,
        bufsize,
        length.reference,
        lengthOffset,
        size.reference,
        sizeOffset,
        type.reference,
        typeOffset,
        name.reference,
        nameOffset
      ]).check();

  static final _id_glGetActiveUniform1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetActiveUniform", "(II[II[II)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetActiveUniform(int program, int index, int[] size, int sizeOffset, int[] type, int typeOffset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetActiveUniform1(
          int program,
          int index,
          jni.JniObject size,
          int sizeOffset,
          jni.JniObject type,
          int typeOffset) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetActiveUniform1, jni.JniType.objectType, [
        program,
        index,
        size.reference,
        sizeOffset,
        type.reference,
        typeOffset
      ]).object);

  static final _id_glGetActiveUniform2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "glGetActiveUniform",
      "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetActiveUniform(int program, int index, java.nio.IntBuffer size, java.nio.IntBuffer type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetActiveUniform2(
          int program, int index, jni.JniObject size, jni.JniObject type) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetActiveUniform2,
          jni.JniType.objectType,
          [program, index, size.reference, type.reference]).object);

  static final _id_glGetAttachedShaders = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetAttachedShaders", "(II[II[II)V");

  /// from: static public native void glGetAttachedShaders(int program, int maxcount, int[] count, int countOffset, int[] shaders, int shadersOffset)
  static void glGetAttachedShaders(
          int program,
          int maxcount,
          jni.JniObject count,
          int countOffset,
          jni.JniObject shaders,
          int shadersOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetAttachedShaders, jni.JniType.voidType, [
        program,
        maxcount,
        count.reference,
        countOffset,
        shaders.reference,
        shadersOffset
      ]).check();

  static final _id_glGetAttachedShaders1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "glGetAttachedShaders",
      "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)V");

  /// from: static public native void glGetAttachedShaders(int program, int maxcount, java.nio.IntBuffer count, java.nio.IntBuffer shaders)
  static void glGetAttachedShaders1(int program, int maxcount,
          jni.JniObject count, jni.JniObject shaders) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetAttachedShaders1,
          jni.JniType.voidType,
          [program, maxcount, count.reference, shaders.reference]).check();

  static final _id_glGetAttribLocation = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetAttribLocation", "(ILjava/lang/String;)I");

  /// from: static public native int glGetAttribLocation(int program, java.lang.String name)
  static int glGetAttribLocation(int program, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetAttribLocation,
          jni.JniType.intType, [program, name.reference]).integer;

  static final _id_glGetBooleanv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetBooleanv", "(I[ZI)V");

  /// from: static public native void glGetBooleanv(int pname, boolean[] params, int offset)
  static void glGetBooleanv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetBooleanv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glGetBooleanv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetBooleanv", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetBooleanv(int pname, java.nio.IntBuffer params)
  static void glGetBooleanv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetBooleanv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glGetBufferParameteriv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetBufferParameteriv", "(II[II)V");

  /// from: static public native void glGetBufferParameteriv(int target, int pname, int[] params, int offset)
  static void glGetBufferParameteriv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetBufferParameteriv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetBufferParameteriv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetBufferParameteriv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetBufferParameteriv(int target, int pname, java.nio.IntBuffer params)
  static void glGetBufferParameteriv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetBufferParameteriv1,
          jni.JniType.voidType,
          [target, pname, params.reference]).check();

  static final _id_glGetError =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetError", "()I");

  /// from: static public native int glGetError()
  static int glGetError() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glGetError, jni.JniType.intType, []).integer;

  static final _id_glGetFloatv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetFloatv", "(I[FI)V");

  /// from: static public native void glGetFloatv(int pname, float[] params, int offset)
  static void glGetFloatv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetFloatv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glGetFloatv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetFloatv", "(ILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetFloatv(int pname, java.nio.FloatBuffer params)
  static void glGetFloatv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetFloatv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glGetFramebufferAttachmentParameteriv =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glGetFramebufferAttachmentParameteriv", "(III[II)V");

  /// from: static public native void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int[] params, int offset)
  static void glGetFramebufferAttachmentParameteriv(int target, int attachment,
          int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetFramebufferAttachmentParameteriv,
          jni.JniType.voidType,
          [target, attachment, pname, params.reference, offset]).check();

  static final _id_glGetFramebufferAttachmentParameteriv1 =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "glGetFramebufferAttachmentParameteriv",
          "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, java.nio.IntBuffer params)
  static void glGetFramebufferAttachmentParameteriv1(
          int target, int attachment, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetFramebufferAttachmentParameteriv1,
          jni.JniType.voidType,
          [target, attachment, pname, params.reference]).check();

  static final _id_glGetIntegerv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetIntegerv", "(I[II)V");

  /// from: static public native void glGetIntegerv(int pname, int[] params, int offset)
  static void glGetIntegerv(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetIntegerv,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glGetIntegerv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetIntegerv", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetIntegerv(int pname, java.nio.IntBuffer params)
  static void glGetIntegerv1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetIntegerv1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glGetProgramiv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetProgramiv", "(II[II)V");

  /// from: static public native void glGetProgramiv(int program, int pname, int[] params, int offset)
  static void glGetProgramiv(
          int program, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetProgramiv,
          jni.JniType.voidType,
          [program, pname, params.reference, offset]).check();

  static final _id_glGetProgramiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetProgramiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetProgramiv(int program, int pname, java.nio.IntBuffer params)
  static void glGetProgramiv1(int program, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetProgramiv1,
          jni.JniType.voidType, [program, pname, params.reference]).check();

  static final _id_glGetProgramInfoLog = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetProgramInfoLog", "(I)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetProgramInfoLog(int program)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetProgramInfoLog(int program) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glGetProgramInfoLog, jni.JniType.objectType, [program]).object);

  static final _id_glGetRenderbufferParameteriv =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glGetRenderbufferParameteriv", "(II[II)V");

  /// from: static public native void glGetRenderbufferParameteriv(int target, int pname, int[] params, int offset)
  static void glGetRenderbufferParameteriv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetRenderbufferParameteriv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetRenderbufferParameteriv1 =
      jniAccessors.getStaticMethodIDOf(_classRef,
          "glGetRenderbufferParameteriv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetRenderbufferParameteriv(int target, int pname, java.nio.IntBuffer params)
  static void glGetRenderbufferParameteriv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetRenderbufferParameteriv1,
          jni.JniType.voidType,
          [target, pname, params.reference]).check();

  static final _id_glGetShaderiv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetShaderiv", "(II[II)V");

  /// from: static public native void glGetShaderiv(int shader, int pname, int[] params, int offset)
  static void glGetShaderiv(
          int shader, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetShaderiv,
          jni.JniType.voidType,
          [shader, pname, params.reference, offset]).check();

  static final _id_glGetShaderiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetShaderiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetShaderiv(int shader, int pname, java.nio.IntBuffer params)
  static void glGetShaderiv1(int shader, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetShaderiv1,
          jni.JniType.voidType, [shader, pname, params.reference]).check();

  static final _id_glGetShaderInfoLog = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetShaderInfoLog", "(I)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetShaderInfoLog(int shader)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetShaderInfoLog(int shader) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glGetShaderInfoLog, jni.JniType.objectType, [shader]).object);

  static final _id_glGetShaderPrecisionFormat =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glGetShaderPrecisionFormat", "(II[II[II)V");

  /// from: static public native void glGetShaderPrecisionFormat(int shadertype, int precisiontype, int[] range, int rangeOffset, int[] precision, int precisionOffset)
  static void glGetShaderPrecisionFormat(
          int shadertype,
          int precisiontype,
          jni.JniObject range,
          int rangeOffset,
          jni.JniObject precision,
          int precisionOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetShaderPrecisionFormat, jni.JniType.voidType, [
        shadertype,
        precisiontype,
        range.reference,
        rangeOffset,
        precision.reference,
        precisionOffset
      ]).check();

  static final _id_glGetShaderPrecisionFormat1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetShaderPrecisionFormat",
          "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)V");

  /// from: static public native void glGetShaderPrecisionFormat(int shadertype, int precisiontype, java.nio.IntBuffer range, java.nio.IntBuffer precision)
  static void glGetShaderPrecisionFormat1(int shadertype, int precisiontype,
          jni.JniObject range, jni.JniObject precision) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetShaderPrecisionFormat1, jni.JniType.voidType, [
        shadertype,
        precisiontype,
        range.reference,
        precision.reference
      ]).check();

  static final _id_glGetShaderSource = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetShaderSource", "(II[II[BI)V");

  /// from: static public native void glGetShaderSource(int shader, int bufsize, int[] length, int lengthOffset, byte[] source, int sourceOffset)
  static void glGetShaderSource(int shader, int bufsize, jni.JniObject length,
          int lengthOffset, jni.JniObject source, int sourceOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetShaderSource, jni.JniType.voidType, [
        shader,
        bufsize,
        length.reference,
        lengthOffset,
        source.reference,
        sourceOffset
      ]).check();

  static final _id_glGetShaderSource1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetShaderSource", "(I)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetShaderSource(int shader)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetShaderSource1(int shader) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glGetShaderSource1, jni.JniType.objectType, [shader]).object);

  static final _id_glGetString = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetString", "(I)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetString(int name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetString(int name) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetString, jni.JniType.objectType, [name]).object);

  static final _id_glGetTexParameterfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameterfv", "(II[FI)V");

  /// from: static public native void glGetTexParameterfv(int target, int pname, float[] params, int offset)
  static void glGetTexParameterfv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexParameterfv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetTexParameterfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameterfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetTexParameterfv(int target, int pname, java.nio.FloatBuffer params)
  static void glGetTexParameterfv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetTexParameterfv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glGetTexParameteriv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameteriv", "(II[II)V");

  /// from: static public native void glGetTexParameteriv(int target, int pname, int[] params, int offset)
  static void glGetTexParameteriv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTexParameteriv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetTexParameteriv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetTexParameteriv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetTexParameteriv(int target, int pname, java.nio.IntBuffer params)
  static void glGetTexParameteriv1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetTexParameteriv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glGetUniformfv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetUniformfv", "(II[FI)V");

  /// from: static public native void glGetUniformfv(int program, int location, float[] params, int offset)
  static void glGetUniformfv(
          int program, int location, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetUniformfv,
          jni.JniType.voidType,
          [program, location, params.reference, offset]).check();

  static final _id_glGetUniformfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetUniformfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetUniformfv(int program, int location, java.nio.FloatBuffer params)
  static void glGetUniformfv1(
          int program, int location, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetUniformfv1,
          jni.JniType.voidType, [program, location, params.reference]).check();

  static final _id_glGetUniformiv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetUniformiv", "(II[II)V");

  /// from: static public native void glGetUniformiv(int program, int location, int[] params, int offset)
  static void glGetUniformiv(
          int program, int location, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetUniformiv,
          jni.JniType.voidType,
          [program, location, params.reference, offset]).check();

  static final _id_glGetUniformiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetUniformiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetUniformiv(int program, int location, java.nio.IntBuffer params)
  static void glGetUniformiv1(
          int program, int location, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetUniformiv1,
          jni.JniType.voidType, [program, location, params.reference]).check();

  static final _id_glGetUniformLocation = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetUniformLocation", "(ILjava/lang/String;)I");

  /// from: static public native int glGetUniformLocation(int program, java.lang.String name)
  static int glGetUniformLocation(int program, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetUniformLocation,
          jni.JniType.intType, [program, name.reference]).integer;

  static final _id_glGetVertexAttribfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetVertexAttribfv", "(II[FI)V");

  /// from: static public native void glGetVertexAttribfv(int index, int pname, float[] params, int offset)
  static void glGetVertexAttribfv(
          int index, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetVertexAttribfv,
          jni.JniType.voidType,
          [index, pname, params.reference, offset]).check();

  static final _id_glGetVertexAttribfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetVertexAttribfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetVertexAttribfv(int index, int pname, java.nio.FloatBuffer params)
  static void glGetVertexAttribfv1(
          int index, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetVertexAttribfv1,
          jni.JniType.voidType, [index, pname, params.reference]).check();

  static final _id_glGetVertexAttribiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetVertexAttribiv", "(II[II)V");

  /// from: static public native void glGetVertexAttribiv(int index, int pname, int[] params, int offset)
  static void glGetVertexAttribiv(
          int index, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetVertexAttribiv,
          jni.JniType.voidType,
          [index, pname, params.reference, offset]).check();

  static final _id_glGetVertexAttribiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetVertexAttribiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetVertexAttribiv(int index, int pname, java.nio.IntBuffer params)
  static void glGetVertexAttribiv1(
          int index, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetVertexAttribiv1,
          jni.JniType.voidType, [index, pname, params.reference]).check();

  static final _id_glHint =
      jniAccessors.getStaticMethodIDOf(_classRef, "glHint", "(II)V");

  /// from: static public native void glHint(int target, int mode)
  static void glHint(int target, int mode) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glHint, jni.JniType.voidType, [target, mode]).check();

  static final _id_glIsBuffer =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsBuffer", "(I)Z");

  /// from: static public native boolean glIsBuffer(int buffer)
  static bool glIsBuffer(int buffer) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glIsBuffer, jni.JniType.booleanType, [buffer]).boolean;

  static final _id_glIsEnabled =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsEnabled", "(I)Z");

  /// from: static public native boolean glIsEnabled(int cap)
  static bool glIsEnabled(int cap) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glIsEnabled, jni.JniType.booleanType, [cap]).boolean;

  static final _id_glIsFramebuffer =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsFramebuffer", "(I)Z");

  /// from: static public native boolean glIsFramebuffer(int framebuffer)
  static bool glIsFramebuffer(int framebuffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glIsFramebuffer,
          jni.JniType.booleanType, [framebuffer]).boolean;

  static final _id_glIsProgram =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsProgram", "(I)Z");

  /// from: static public native boolean glIsProgram(int program)
  static bool glIsProgram(int program) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glIsProgram, jni.JniType.booleanType, [program]).boolean;

  static final _id_glIsRenderbuffer =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsRenderbuffer", "(I)Z");

  /// from: static public native boolean glIsRenderbuffer(int renderbuffer)
  static bool glIsRenderbuffer(int renderbuffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glIsRenderbuffer,
          jni.JniType.booleanType, [renderbuffer]).boolean;

  static final _id_glIsShader =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsShader", "(I)Z");

  /// from: static public native boolean glIsShader(int shader)
  static bool glIsShader(int shader) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glIsShader, jni.JniType.booleanType, [shader]).boolean;

  static final _id_glIsTexture =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsTexture", "(I)Z");

  /// from: static public native boolean glIsTexture(int texture)
  static bool glIsTexture(int texture) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glIsTexture, jni.JniType.booleanType, [texture]).boolean;

  static final _id_glLineWidth =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLineWidth", "(F)V");

  /// from: static public native void glLineWidth(float width)
  static void glLineWidth(double width) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glLineWidth, jni.JniType.voidType, [width]).check();

  static final _id_glLinkProgram =
      jniAccessors.getStaticMethodIDOf(_classRef, "glLinkProgram", "(I)V");

  /// from: static public native void glLinkProgram(int program)
  static void glLinkProgram(int program) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glLinkProgram,
          jni.JniType.voidType, [program]).check();

  static final _id_glPixelStorei =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPixelStorei", "(II)V");

  /// from: static public native void glPixelStorei(int pname, int param)
  static void glPixelStorei(int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPixelStorei,
          jni.JniType.voidType, [pname, param]).check();

  static final _id_glPolygonOffset =
      jniAccessors.getStaticMethodIDOf(_classRef, "glPolygonOffset", "(FF)V");

  /// from: static public native void glPolygonOffset(float factor, float units)
  static void glPolygonOffset(double factor, double units) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glPolygonOffset,
          jni.JniType.voidType, [factor, units]).check();

  static final _id_glReadPixels = jniAccessors.getStaticMethodIDOf(
      _classRef, "glReadPixels", "(IIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glReadPixels(int x, int y, int width, int height, int format, int type, java.nio.Buffer pixels)
  static void glReadPixels(int x, int y, int width, int height, int format,
          int type, jni.JniObject pixels) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glReadPixels,
          jni.JniType.voidType,
          [x, y, width, height, format, type, pixels.reference]).check();

  static final _id_glReleaseShaderCompiler = jniAccessors.getStaticMethodIDOf(
      _classRef, "glReleaseShaderCompiler", "()V");

  /// from: static public native void glReleaseShaderCompiler()
  static void glReleaseShaderCompiler() =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glReleaseShaderCompiler, jni.JniType.voidType, []).check();

  static final _id_glRenderbufferStorage = jniAccessors.getStaticMethodIDOf(
      _classRef, "glRenderbufferStorage", "(IIII)V");

  /// from: static public native void glRenderbufferStorage(int target, int internalformat, int width, int height)
  static void glRenderbufferStorage(
          int target, int internalformat, int width, int height) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glRenderbufferStorage,
          jni.JniType.voidType,
          [target, internalformat, width, height]).check();

  static final _id_glSampleCoverage =
      jniAccessors.getStaticMethodIDOf(_classRef, "glSampleCoverage", "(FZ)V");

  /// from: static public native void glSampleCoverage(float value, boolean invert)
  static void glSampleCoverage(double value, bool invert) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glSampleCoverage,
          jni.JniType.voidType, [value, invert]).check();

  static final _id_glScissor =
      jniAccessors.getStaticMethodIDOf(_classRef, "glScissor", "(IIII)V");

  /// from: static public native void glScissor(int x, int y, int width, int height)
  static void glScissor(int x, int y, int width, int height) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glScissor,
          jni.JniType.voidType, [x, y, width, height]).check();

  static final _id_glShaderBinary = jniAccessors.getStaticMethodIDOf(
      _classRef, "glShaderBinary", "(I[IIILjava/nio/Buffer;I)V");

  /// from: static public native void glShaderBinary(int n, int[] shaders, int offset, int binaryformat, java.nio.Buffer binary, int length)
  static void glShaderBinary(int n, jni.JniObject shaders, int offset,
          int binaryformat, jni.JniObject binary, int length) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glShaderBinary, jni.JniType.voidType, [
        n,
        shaders.reference,
        offset,
        binaryformat,
        binary.reference,
        length
      ]).check();

  static final _id_glShaderBinary1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "glShaderBinary", "(ILjava/nio/IntBuffer;ILjava/nio/Buffer;I)V");

  /// from: static public native void glShaderBinary(int n, java.nio.IntBuffer shaders, int binaryformat, java.nio.Buffer binary, int length)
  static void glShaderBinary1(int n, jni.JniObject shaders, int binaryformat,
          jni.JniObject binary, int length) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glShaderBinary1, jni.JniType.voidType, [
        n,
        shaders.reference,
        binaryformat,
        binary.reference,
        length
      ]).check();

  static final _id_glShaderSource = jniAccessors.getStaticMethodIDOf(
      _classRef, "glShaderSource", "(ILjava/lang/String;)V");

  /// from: static public native void glShaderSource(int shader, java.lang.String string)
  static void glShaderSource(int shader, jni.JniString string) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glShaderSource,
          jni.JniType.voidType, [shader, string.reference]).check();

  static final _id_glStencilFunc =
      jniAccessors.getStaticMethodIDOf(_classRef, "glStencilFunc", "(III)V");

  /// from: static public native void glStencilFunc(int func, int ref, int mask)
  static void glStencilFunc(int func, int ref, int mask) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glStencilFunc,
          jni.JniType.voidType, [func, ref, mask]).check();

  static final _id_glStencilFuncSeparate = jniAccessors.getStaticMethodIDOf(
      _classRef, "glStencilFuncSeparate", "(IIII)V");

  /// from: static public native void glStencilFuncSeparate(int face, int func, int ref, int mask)
  static void glStencilFuncSeparate(int face, int func, int ref, int mask) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glStencilFuncSeparate,
          jni.JniType.voidType,
          [face, func, ref, mask]).check();

  static final _id_glStencilMask =
      jniAccessors.getStaticMethodIDOf(_classRef, "glStencilMask", "(I)V");

  /// from: static public native void glStencilMask(int mask)
  static void glStencilMask(int mask) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glStencilMask, jni.JniType.voidType, [mask]).check();

  static final _id_glStencilMaskSeparate = jniAccessors.getStaticMethodIDOf(
      _classRef, "glStencilMaskSeparate", "(II)V");

  /// from: static public native void glStencilMaskSeparate(int face, int mask)
  static void glStencilMaskSeparate(int face, int mask) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glStencilMaskSeparate,
          jni.JniType.voidType,
          [face, mask]).check();

  static final _id_glStencilOp =
      jniAccessors.getStaticMethodIDOf(_classRef, "glStencilOp", "(III)V");

  /// from: static public native void glStencilOp(int fail, int zfail, int zpass)
  static void glStencilOp(int fail, int zfail, int zpass) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glStencilOp,
          jni.JniType.voidType, [fail, zfail, zpass]).check();

  static final _id_glStencilOpSeparate = jniAccessors.getStaticMethodIDOf(
      _classRef, "glStencilOpSeparate", "(IIII)V");

  /// from: static public native void glStencilOpSeparate(int face, int fail, int zfail, int zpass)
  static void glStencilOpSeparate(int face, int fail, int zfail, int zpass) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glStencilOpSeparate,
          jni.JniType.voidType, [face, fail, zfail, zpass]).check();

  static final _id_glTexImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexImage2D", "(IIIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, java.nio.Buffer pixels)
  static void glTexImage2D(int target, int level, int internalformat, int width,
          int height, int border, int format, int type, jni.JniObject pixels) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTexImage2D, jni.JniType.voidType, [
        target,
        level,
        internalformat,
        width,
        height,
        border,
        format,
        type,
        pixels.reference
      ]).check();

  static final _id_glTexParameterf =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexParameterf", "(IIF)V");

  /// from: static public native void glTexParameterf(int target, int pname, float param)
  static void glTexParameterf(int target, int pname, double param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameterf,
          jni.JniType.voidType, [target, pname, param]).check();

  static final _id_glTexParameterfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameterfv", "(II[FI)V");

  /// from: static public native void glTexParameterfv(int target, int pname, float[] params, int offset)
  static void glTexParameterfv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexParameterfv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glTexParameterfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameterfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glTexParameterfv(int target, int pname, java.nio.FloatBuffer params)
  static void glTexParameterfv1(int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameterfv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glTexParameteri =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexParameteri", "(III)V");

  /// from: static public native void glTexParameteri(int target, int pname, int param)
  static void glTexParameteri(int target, int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameteri,
          jni.JniType.voidType, [target, pname, param]).check();

  static final _id_glTexParameteriv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameteriv", "(II[II)V");

  /// from: static public native void glTexParameteriv(int target, int pname, int[] params, int offset)
  static void glTexParameteriv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexParameteriv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glTexParameteriv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexParameteriv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glTexParameteriv(int target, int pname, java.nio.IntBuffer params)
  static void glTexParameteriv1(int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glTexParameteriv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glTexSubImage2D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexSubImage2D", "(IIIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, java.nio.Buffer pixels)
  static void glTexSubImage2D(int target, int level, int xoffset, int yoffset,
          int width, int height, int format, int type, jni.JniObject pixels) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTexSubImage2D, jni.JniType.voidType, [
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        type,
        pixels.reference
      ]).check();

  static final _id_glUniform1f =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform1f", "(IF)V");

  /// from: static public native void glUniform1f(int location, float x)
  static void glUniform1f(int location, double x) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform1f,
          jni.JniType.voidType, [location, x]).check();

  static final _id_glUniform1fv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform1fv", "(II[FI)V");

  /// from: static public native void glUniform1fv(int location, int count, float[] v, int offset)
  static void glUniform1fv(
          int location, int count, jni.JniObject v, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform1fv,
          jni.JniType.voidType, [location, count, v.reference, offset]).check();

  static final _id_glUniform1fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform1fv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniform1fv(int location, int count, java.nio.FloatBuffer v)
  static void glUniform1fv1(int location, int count, jni.JniObject v) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform1fv1,
          jni.JniType.voidType, [location, count, v.reference]).check();

  static final _id_glUniform1i =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform1i", "(II)V");

  /// from: static public native void glUniform1i(int location, int x)
  static void glUniform1i(int location, int x) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform1i,
          jni.JniType.voidType, [location, x]).check();

  static final _id_glUniform1iv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform1iv", "(II[II)V");

  /// from: static public native void glUniform1iv(int location, int count, int[] v, int offset)
  static void glUniform1iv(
          int location, int count, jni.JniObject v, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform1iv,
          jni.JniType.voidType, [location, count, v.reference, offset]).check();

  static final _id_glUniform1iv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform1iv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glUniform1iv(int location, int count, java.nio.IntBuffer v)
  static void glUniform1iv1(int location, int count, jni.JniObject v) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform1iv1,
          jni.JniType.voidType, [location, count, v.reference]).check();

  static final _id_glUniform2f =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform2f", "(IFF)V");

  /// from: static public native void glUniform2f(int location, float x, float y)
  static void glUniform2f(int location, double x, double y) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform2f,
          jni.JniType.voidType, [location, x, y]).check();

  static final _id_glUniform2fv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform2fv", "(II[FI)V");

  /// from: static public native void glUniform2fv(int location, int count, float[] v, int offset)
  static void glUniform2fv(
          int location, int count, jni.JniObject v, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform2fv,
          jni.JniType.voidType, [location, count, v.reference, offset]).check();

  static final _id_glUniform2fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform2fv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniform2fv(int location, int count, java.nio.FloatBuffer v)
  static void glUniform2fv1(int location, int count, jni.JniObject v) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform2fv1,
          jni.JniType.voidType, [location, count, v.reference]).check();

  static final _id_glUniform2i =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform2i", "(III)V");

  /// from: static public native void glUniform2i(int location, int x, int y)
  static void glUniform2i(int location, int x, int y) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform2i,
          jni.JniType.voidType, [location, x, y]).check();

  static final _id_glUniform2iv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform2iv", "(II[II)V");

  /// from: static public native void glUniform2iv(int location, int count, int[] v, int offset)
  static void glUniform2iv(
          int location, int count, jni.JniObject v, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform2iv,
          jni.JniType.voidType, [location, count, v.reference, offset]).check();

  static final _id_glUniform2iv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform2iv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glUniform2iv(int location, int count, java.nio.IntBuffer v)
  static void glUniform2iv1(int location, int count, jni.JniObject v) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform2iv1,
          jni.JniType.voidType, [location, count, v.reference]).check();

  static final _id_glUniform3f =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform3f", "(IFFF)V");

  /// from: static public native void glUniform3f(int location, float x, float y, float z)
  static void glUniform3f(int location, double x, double y, double z) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform3f,
          jni.JniType.voidType, [location, x, y, z]).check();

  static final _id_glUniform3fv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform3fv", "(II[FI)V");

  /// from: static public native void glUniform3fv(int location, int count, float[] v, int offset)
  static void glUniform3fv(
          int location, int count, jni.JniObject v, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform3fv,
          jni.JniType.voidType, [location, count, v.reference, offset]).check();

  static final _id_glUniform3fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform3fv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniform3fv(int location, int count, java.nio.FloatBuffer v)
  static void glUniform3fv1(int location, int count, jni.JniObject v) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform3fv1,
          jni.JniType.voidType, [location, count, v.reference]).check();

  static final _id_glUniform3i =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform3i", "(IIII)V");

  /// from: static public native void glUniform3i(int location, int x, int y, int z)
  static void glUniform3i(int location, int x, int y, int z) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform3i,
          jni.JniType.voidType, [location, x, y, z]).check();

  static final _id_glUniform3iv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform3iv", "(II[II)V");

  /// from: static public native void glUniform3iv(int location, int count, int[] v, int offset)
  static void glUniform3iv(
          int location, int count, jni.JniObject v, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform3iv,
          jni.JniType.voidType, [location, count, v.reference, offset]).check();

  static final _id_glUniform3iv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform3iv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glUniform3iv(int location, int count, java.nio.IntBuffer v)
  static void glUniform3iv1(int location, int count, jni.JniObject v) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform3iv1,
          jni.JniType.voidType, [location, count, v.reference]).check();

  static final _id_glUniform4f =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform4f", "(IFFFF)V");

  /// from: static public native void glUniform4f(int location, float x, float y, float z, float w)
  static void glUniform4f(
          int location, double x, double y, double z, double w) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform4f,
          jni.JniType.voidType, [location, x, y, z, w]).check();

  static final _id_glUniform4fv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform4fv", "(II[FI)V");

  /// from: static public native void glUniform4fv(int location, int count, float[] v, int offset)
  static void glUniform4fv(
          int location, int count, jni.JniObject v, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform4fv,
          jni.JniType.voidType, [location, count, v.reference, offset]).check();

  static final _id_glUniform4fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform4fv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniform4fv(int location, int count, java.nio.FloatBuffer v)
  static void glUniform4fv1(int location, int count, jni.JniObject v) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform4fv1,
          jni.JniType.voidType, [location, count, v.reference]).check();

  static final _id_glUniform4i =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform4i", "(IIIII)V");

  /// from: static public native void glUniform4i(int location, int x, int y, int z, int w)
  static void glUniform4i(int location, int x, int y, int z, int w) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform4i,
          jni.JniType.voidType, [location, x, y, z, w]).check();

  static final _id_glUniform4iv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform4iv", "(II[II)V");

  /// from: static public native void glUniform4iv(int location, int count, int[] v, int offset)
  static void glUniform4iv(
          int location, int count, jni.JniObject v, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform4iv,
          jni.JniType.voidType, [location, count, v.reference, offset]).check();

  static final _id_glUniform4iv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform4iv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glUniform4iv(int location, int count, java.nio.IntBuffer v)
  static void glUniform4iv1(int location, int count, jni.JniObject v) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform4iv1,
          jni.JniType.voidType, [location, count, v.reference]).check();

  static final _id_glUniformMatrix2fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix2fv", "(IIZ[FI)V");

  /// from: static public native void glUniformMatrix2fv(int location, int count, boolean transpose, float[] value, int offset)
  static void glUniformMatrix2fv(int location, int count, bool transpose,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix2fv,
          jni.JniType.voidType,
          [location, count, transpose, value.reference, offset]).check();

  static final _id_glUniformMatrix2fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix2fv", "(IIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniformMatrix2fv(int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glUniformMatrix2fv1(
          int location, int count, bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix2fv1,
          jni.JniType.voidType,
          [location, count, transpose, value.reference]).check();

  static final _id_glUniformMatrix3fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix3fv", "(IIZ[FI)V");

  /// from: static public native void glUniformMatrix3fv(int location, int count, boolean transpose, float[] value, int offset)
  static void glUniformMatrix3fv(int location, int count, bool transpose,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix3fv,
          jni.JniType.voidType,
          [location, count, transpose, value.reference, offset]).check();

  static final _id_glUniformMatrix3fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix3fv", "(IIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniformMatrix3fv(int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glUniformMatrix3fv1(
          int location, int count, bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix3fv1,
          jni.JniType.voidType,
          [location, count, transpose, value.reference]).check();

  static final _id_glUniformMatrix4fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix4fv", "(IIZ[FI)V");

  /// from: static public native void glUniformMatrix4fv(int location, int count, boolean transpose, float[] value, int offset)
  static void glUniformMatrix4fv(int location, int count, bool transpose,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix4fv,
          jni.JniType.voidType,
          [location, count, transpose, value.reference, offset]).check();

  static final _id_glUniformMatrix4fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix4fv", "(IIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniformMatrix4fv(int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glUniformMatrix4fv1(
          int location, int count, bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix4fv1,
          jni.JniType.voidType,
          [location, count, transpose, value.reference]).check();

  static final _id_glUseProgram =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUseProgram", "(I)V");

  /// from: static public native void glUseProgram(int program)
  static void glUseProgram(int program) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glUseProgram, jni.JniType.voidType, [program]).check();

  static final _id_glValidateProgram =
      jniAccessors.getStaticMethodIDOf(_classRef, "glValidateProgram", "(I)V");

  /// from: static public native void glValidateProgram(int program)
  static void glValidateProgram(int program) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glValidateProgram,
          jni.JniType.voidType, [program]).check();

  static final _id_glVertexAttrib1f =
      jniAccessors.getStaticMethodIDOf(_classRef, "glVertexAttrib1f", "(IF)V");

  /// from: static public native void glVertexAttrib1f(int indx, float x)
  static void glVertexAttrib1f(int indx, double x) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib1f,
          jni.JniType.voidType, [indx, x]).check();

  static final _id_glVertexAttrib1fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttrib1fv", "(I[FI)V");

  /// from: static public native void glVertexAttrib1fv(int indx, float[] values, int offset)
  static void glVertexAttrib1fv(int indx, jni.JniObject values, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib1fv,
          jni.JniType.voidType, [indx, values.reference, offset]).check();

  static final _id_glVertexAttrib1fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttrib1fv", "(ILjava/nio/FloatBuffer;)V");

  /// from: static public native void glVertexAttrib1fv(int indx, java.nio.FloatBuffer values)
  static void glVertexAttrib1fv1(int indx, jni.JniObject values) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib1fv1,
          jni.JniType.voidType, [indx, values.reference]).check();

  static final _id_glVertexAttrib2f =
      jniAccessors.getStaticMethodIDOf(_classRef, "glVertexAttrib2f", "(IFF)V");

  /// from: static public native void glVertexAttrib2f(int indx, float x, float y)
  static void glVertexAttrib2f(int indx, double x, double y) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib2f,
          jni.JniType.voidType, [indx, x, y]).check();

  static final _id_glVertexAttrib2fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttrib2fv", "(I[FI)V");

  /// from: static public native void glVertexAttrib2fv(int indx, float[] values, int offset)
  static void glVertexAttrib2fv(int indx, jni.JniObject values, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib2fv,
          jni.JniType.voidType, [indx, values.reference, offset]).check();

  static final _id_glVertexAttrib2fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttrib2fv", "(ILjava/nio/FloatBuffer;)V");

  /// from: static public native void glVertexAttrib2fv(int indx, java.nio.FloatBuffer values)
  static void glVertexAttrib2fv1(int indx, jni.JniObject values) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib2fv1,
          jni.JniType.voidType, [indx, values.reference]).check();

  static final _id_glVertexAttrib3f = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttrib3f", "(IFFF)V");

  /// from: static public native void glVertexAttrib3f(int indx, float x, float y, float z)
  static void glVertexAttrib3f(int indx, double x, double y, double z) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib3f,
          jni.JniType.voidType, [indx, x, y, z]).check();

  static final _id_glVertexAttrib3fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttrib3fv", "(I[FI)V");

  /// from: static public native void glVertexAttrib3fv(int indx, float[] values, int offset)
  static void glVertexAttrib3fv(int indx, jni.JniObject values, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib3fv,
          jni.JniType.voidType, [indx, values.reference, offset]).check();

  static final _id_glVertexAttrib3fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttrib3fv", "(ILjava/nio/FloatBuffer;)V");

  /// from: static public native void glVertexAttrib3fv(int indx, java.nio.FloatBuffer values)
  static void glVertexAttrib3fv1(int indx, jni.JniObject values) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib3fv1,
          jni.JniType.voidType, [indx, values.reference]).check();

  static final _id_glVertexAttrib4f = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttrib4f", "(IFFFF)V");

  /// from: static public native void glVertexAttrib4f(int indx, float x, float y, float z, float w)
  static void glVertexAttrib4f(
          int indx, double x, double y, double z, double w) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib4f,
          jni.JniType.voidType, [indx, x, y, z, w]).check();

  static final _id_glVertexAttrib4fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttrib4fv", "(I[FI)V");

  /// from: static public native void glVertexAttrib4fv(int indx, float[] values, int offset)
  static void glVertexAttrib4fv(int indx, jni.JniObject values, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib4fv,
          jni.JniType.voidType, [indx, values.reference, offset]).check();

  static final _id_glVertexAttrib4fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttrib4fv", "(ILjava/nio/FloatBuffer;)V");

  /// from: static public native void glVertexAttrib4fv(int indx, java.nio.FloatBuffer values)
  static void glVertexAttrib4fv1(int indx, jni.JniObject values) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttrib4fv1,
          jni.JniType.voidType, [indx, values.reference]).check();

  static final _id_glVertexAttribPointer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribPointer", "(IIIZII)V");

  /// from: static public native void glVertexAttribPointer(int indx, int size, int type, boolean normalized, int stride, int offset)
  static void glVertexAttribPointer(int indx, int size, int type,
          bool normalized, int stride, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glVertexAttribPointer,
          jni.JniType.voidType,
          [indx, size, type, normalized, stride, offset]).check();

  static final _id_glVertexAttribPointer1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribPointer", "(IIIZILjava/nio/Buffer;)V");

  /// from: static public void glVertexAttribPointer(int indx, int size, int type, boolean normalized, int stride, java.nio.Buffer ptr)
  static void glVertexAttribPointer1(int indx, int size, int type,
          bool normalized, int stride, jni.JniObject ptr) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glVertexAttribPointer1,
          jni.JniType.voidType,
          [indx, size, type, normalized, stride, ptr.reference]).check();

  static final _id_glViewport =
      jniAccessors.getStaticMethodIDOf(_classRef, "glViewport", "(IIII)V");

  /// from: static public native void glViewport(int x, int y, int width, int height)
  static void glViewport(int x, int y, int width, int height) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glViewport,
          jni.JniType.voidType, [x, y, width, height]).check();
}
