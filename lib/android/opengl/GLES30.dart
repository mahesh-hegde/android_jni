// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "GLES20.dart" as gles20_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.opengl.GLES30
///
/// OpenGL ES 3.0
class GLES30 extends gles20_.GLES20 {
  static final _classRef = jniAccessors.getClassOf("android/opengl/GLES30");
  GLES30.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int GL_ACTIVE_UNIFORM_BLOCKS
  static const GL_ACTIVE_UNIFORM_BLOCKS = 35382;

  /// from: static public final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
  static const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381;

  /// from: static public final int GL_ALREADY_SIGNALED
  static const GL_ALREADY_SIGNALED = 37146;

  /// from: static public final int GL_ANY_SAMPLES_PASSED
  static const GL_ANY_SAMPLES_PASSED = 35887;

  /// from: static public final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE
  static const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;

  /// from: static public final int GL_BLUE
  static const GL_BLUE = 6405;

  /// from: static public final int GL_BUFFER_ACCESS_FLAGS
  static const GL_BUFFER_ACCESS_FLAGS = 37151;

  /// from: static public final int GL_BUFFER_MAPPED
  static const GL_BUFFER_MAPPED = 35004;

  /// from: static public final int GL_BUFFER_MAP_LENGTH
  static const GL_BUFFER_MAP_LENGTH = 37152;

  /// from: static public final int GL_BUFFER_MAP_OFFSET
  static const GL_BUFFER_MAP_OFFSET = 37153;

  /// from: static public final int GL_BUFFER_MAP_POINTER
  static const GL_BUFFER_MAP_POINTER = 35005;

  /// from: static public final int GL_COLOR
  static const GL_COLOR = 6144;

  /// from: static public final int GL_COLOR_ATTACHMENT1
  static const GL_COLOR_ATTACHMENT1 = 36065;

  /// from: static public final int GL_COLOR_ATTACHMENT10
  static const GL_COLOR_ATTACHMENT10 = 36074;

  /// from: static public final int GL_COLOR_ATTACHMENT11
  static const GL_COLOR_ATTACHMENT11 = 36075;

  /// from: static public final int GL_COLOR_ATTACHMENT12
  static const GL_COLOR_ATTACHMENT12 = 36076;

  /// from: static public final int GL_COLOR_ATTACHMENT13
  static const GL_COLOR_ATTACHMENT13 = 36077;

  /// from: static public final int GL_COLOR_ATTACHMENT14
  static const GL_COLOR_ATTACHMENT14 = 36078;

  /// from: static public final int GL_COLOR_ATTACHMENT15
  static const GL_COLOR_ATTACHMENT15 = 36079;

  /// from: static public final int GL_COLOR_ATTACHMENT2
  static const GL_COLOR_ATTACHMENT2 = 36066;

  /// from: static public final int GL_COLOR_ATTACHMENT3
  static const GL_COLOR_ATTACHMENT3 = 36067;

  /// from: static public final int GL_COLOR_ATTACHMENT4
  static const GL_COLOR_ATTACHMENT4 = 36068;

  /// from: static public final int GL_COLOR_ATTACHMENT5
  static const GL_COLOR_ATTACHMENT5 = 36069;

  /// from: static public final int GL_COLOR_ATTACHMENT6
  static const GL_COLOR_ATTACHMENT6 = 36070;

  /// from: static public final int GL_COLOR_ATTACHMENT7
  static const GL_COLOR_ATTACHMENT7 = 36071;

  /// from: static public final int GL_COLOR_ATTACHMENT8
  static const GL_COLOR_ATTACHMENT8 = 36072;

  /// from: static public final int GL_COLOR_ATTACHMENT9
  static const GL_COLOR_ATTACHMENT9 = 36073;

  /// from: static public final int GL_COMPARE_REF_TO_TEXTURE
  static const GL_COMPARE_REF_TO_TEXTURE = 34894;

  /// from: static public final int GL_COMPRESSED_R11_EAC
  static const GL_COMPRESSED_R11_EAC = 37488;

  /// from: static public final int GL_COMPRESSED_RG11_EAC
  static const GL_COMPRESSED_RG11_EAC = 37490;

  /// from: static public final int GL_COMPRESSED_RGB8_ETC2
  static const GL_COMPRESSED_RGB8_ETC2 = 37492;

  /// from: static public final int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
  static const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;

  /// from: static public final int GL_COMPRESSED_RGBA8_ETC2_EAC
  static const GL_COMPRESSED_RGBA8_ETC2_EAC = 37496;

  /// from: static public final int GL_COMPRESSED_SIGNED_R11_EAC
  static const GL_COMPRESSED_SIGNED_R11_EAC = 37489;

  /// from: static public final int GL_COMPRESSED_SIGNED_RG11_EAC
  static const GL_COMPRESSED_SIGNED_RG11_EAC = 37491;

  /// from: static public final int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
  static const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;

  /// from: static public final int GL_COMPRESSED_SRGB8_ETC2
  static const GL_COMPRESSED_SRGB8_ETC2 = 37493;

  /// from: static public final int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
  static const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;

  /// from: static public final int GL_CONDITION_SATISFIED
  static const GL_CONDITION_SATISFIED = 37148;

  /// from: static public final int GL_COPY_READ_BUFFER
  static const GL_COPY_READ_BUFFER = 36662;

  /// from: static public final int GL_COPY_READ_BUFFER_BINDING
  static const GL_COPY_READ_BUFFER_BINDING = 36662;

  /// from: static public final int GL_COPY_WRITE_BUFFER
  static const GL_COPY_WRITE_BUFFER = 36663;

  /// from: static public final int GL_COPY_WRITE_BUFFER_BINDING
  static const GL_COPY_WRITE_BUFFER_BINDING = 36663;

  /// from: static public final int GL_CURRENT_QUERY
  static const GL_CURRENT_QUERY = 34917;

  /// from: static public final int GL_DEPTH
  static const GL_DEPTH = 6145;

  /// from: static public final int GL_DEPTH24_STENCIL8
  static const GL_DEPTH24_STENCIL8 = 35056;

  /// from: static public final int GL_DEPTH32F_STENCIL8
  static const GL_DEPTH32F_STENCIL8 = 36013;

  /// from: static public final int GL_DEPTH_COMPONENT24
  static const GL_DEPTH_COMPONENT24 = 33190;

  /// from: static public final int GL_DEPTH_COMPONENT32F
  static const GL_DEPTH_COMPONENT32F = 36012;

  /// from: static public final int GL_DEPTH_STENCIL
  static const GL_DEPTH_STENCIL = 34041;

  /// from: static public final int GL_DEPTH_STENCIL_ATTACHMENT
  static const GL_DEPTH_STENCIL_ATTACHMENT = 33306;

  /// from: static public final int GL_DRAW_BUFFER0
  static const GL_DRAW_BUFFER0 = 34853;

  /// from: static public final int GL_DRAW_BUFFER1
  static const GL_DRAW_BUFFER1 = 34854;

  /// from: static public final int GL_DRAW_BUFFER10
  static const GL_DRAW_BUFFER10 = 34863;

  /// from: static public final int GL_DRAW_BUFFER11
  static const GL_DRAW_BUFFER11 = 34864;

  /// from: static public final int GL_DRAW_BUFFER12
  static const GL_DRAW_BUFFER12 = 34865;

  /// from: static public final int GL_DRAW_BUFFER13
  static const GL_DRAW_BUFFER13 = 34866;

  /// from: static public final int GL_DRAW_BUFFER14
  static const GL_DRAW_BUFFER14 = 34867;

  /// from: static public final int GL_DRAW_BUFFER15
  static const GL_DRAW_BUFFER15 = 34868;

  /// from: static public final int GL_DRAW_BUFFER2
  static const GL_DRAW_BUFFER2 = 34855;

  /// from: static public final int GL_DRAW_BUFFER3
  static const GL_DRAW_BUFFER3 = 34856;

  /// from: static public final int GL_DRAW_BUFFER4
  static const GL_DRAW_BUFFER4 = 34857;

  /// from: static public final int GL_DRAW_BUFFER5
  static const GL_DRAW_BUFFER5 = 34858;

  /// from: static public final int GL_DRAW_BUFFER6
  static const GL_DRAW_BUFFER6 = 34859;

  /// from: static public final int GL_DRAW_BUFFER7
  static const GL_DRAW_BUFFER7 = 34860;

  /// from: static public final int GL_DRAW_BUFFER8
  static const GL_DRAW_BUFFER8 = 34861;

  /// from: static public final int GL_DRAW_BUFFER9
  static const GL_DRAW_BUFFER9 = 34862;

  /// from: static public final int GL_DRAW_FRAMEBUFFER
  static const GL_DRAW_FRAMEBUFFER = 36009;

  /// from: static public final int GL_DRAW_FRAMEBUFFER_BINDING
  static const GL_DRAW_FRAMEBUFFER_BINDING = 36006;

  /// from: static public final int GL_DYNAMIC_COPY
  static const GL_DYNAMIC_COPY = 35050;

  /// from: static public final int GL_DYNAMIC_READ
  static const GL_DYNAMIC_READ = 35049;

  /// from: static public final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV
  static const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;

  /// from: static public final int GL_FLOAT_MAT2x3
  static const GL_FLOAT_MAT2x3 = 35685;

  /// from: static public final int GL_FLOAT_MAT2x4
  static const GL_FLOAT_MAT2x4 = 35686;

  /// from: static public final int GL_FLOAT_MAT3x2
  static const GL_FLOAT_MAT3x2 = 35687;

  /// from: static public final int GL_FLOAT_MAT3x4
  static const GL_FLOAT_MAT3x4 = 35688;

  /// from: static public final int GL_FLOAT_MAT4x2
  static const GL_FLOAT_MAT4x2 = 35689;

  /// from: static public final int GL_FLOAT_MAT4x3
  static const GL_FLOAT_MAT4x3 = 35690;

  /// from: static public final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT
  static const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
  static const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
  static const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
  static const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
  static const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
  static const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
  static const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
  static const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
  static const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;

  /// from: static public final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
  static const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;

  /// from: static public final int GL_FRAMEBUFFER_DEFAULT
  static const GL_FRAMEBUFFER_DEFAULT = 33304;

  /// from: static public final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
  static const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;

  /// from: static public final int GL_FRAMEBUFFER_UNDEFINED
  static const GL_FRAMEBUFFER_UNDEFINED = 33305;

  /// from: static public final int GL_GREEN
  static const GL_GREEN = 6404;

  /// from: static public final int GL_HALF_FLOAT
  static const GL_HALF_FLOAT = 5131;

  /// from: static public final int GL_INTERLEAVED_ATTRIBS
  static const GL_INTERLEAVED_ATTRIBS = 35980;

  /// from: static public final int GL_INT_2_10_10_10_REV
  static const GL_INT_2_10_10_10_REV = 36255;

  /// from: static public final int GL_INT_SAMPLER_2D
  static const GL_INT_SAMPLER_2D = 36298;

  /// from: static public final int GL_INT_SAMPLER_2D_ARRAY
  static const GL_INT_SAMPLER_2D_ARRAY = 36303;

  /// from: static public final int GL_INT_SAMPLER_3D
  static const GL_INT_SAMPLER_3D = 36299;

  /// from: static public final int GL_INT_SAMPLER_CUBE
  static const GL_INT_SAMPLER_CUBE = 36300;

  /// from: static public final int GL_INVALID_INDEX
  static const GL_INVALID_INDEX = -1;

  /// from: static public final int GL_MAJOR_VERSION
  static const GL_MAJOR_VERSION = 33307;

  /// from: static public final int GL_MAP_FLUSH_EXPLICIT_BIT
  static const GL_MAP_FLUSH_EXPLICIT_BIT = 16;

  /// from: static public final int GL_MAP_INVALIDATE_BUFFER_BIT
  static const GL_MAP_INVALIDATE_BUFFER_BIT = 8;

  /// from: static public final int GL_MAP_INVALIDATE_RANGE_BIT
  static const GL_MAP_INVALIDATE_RANGE_BIT = 4;

  /// from: static public final int GL_MAP_READ_BIT
  static const GL_MAP_READ_BIT = 1;

  /// from: static public final int GL_MAP_UNSYNCHRONIZED_BIT
  static const GL_MAP_UNSYNCHRONIZED_BIT = 32;

  /// from: static public final int GL_MAP_WRITE_BIT
  static const GL_MAP_WRITE_BIT = 2;

  /// from: static public final int GL_MAX
  static const GL_MAX = 32776;

  /// from: static public final int GL_MAX_3D_TEXTURE_SIZE
  static const GL_MAX_3D_TEXTURE_SIZE = 32883;

  /// from: static public final int GL_MAX_ARRAY_TEXTURE_LAYERS
  static const GL_MAX_ARRAY_TEXTURE_LAYERS = 35071;

  /// from: static public final int GL_MAX_COLOR_ATTACHMENTS
  static const GL_MAX_COLOR_ATTACHMENTS = 36063;

  /// from: static public final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
  static const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;

  /// from: static public final int GL_MAX_COMBINED_UNIFORM_BLOCKS
  static const GL_MAX_COMBINED_UNIFORM_BLOCKS = 35374;

  /// from: static public final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
  static const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;

  /// from: static public final int GL_MAX_DRAW_BUFFERS
  static const GL_MAX_DRAW_BUFFERS = 34852;

  /// from: static public final int GL_MAX_ELEMENTS_INDICES
  static const GL_MAX_ELEMENTS_INDICES = 33001;

  /// from: static public final int GL_MAX_ELEMENTS_VERTICES
  static const GL_MAX_ELEMENTS_VERTICES = 33000;

  /// from: static public final int GL_MAX_ELEMENT_INDEX
  static const GL_MAX_ELEMENT_INDEX = 36203;

  /// from: static public final int GL_MAX_FRAGMENT_INPUT_COMPONENTS
  static const GL_MAX_FRAGMENT_INPUT_COMPONENTS = 37157;

  /// from: static public final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS
  static const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;

  /// from: static public final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
  static const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;

  /// from: static public final int GL_MAX_PROGRAM_TEXEL_OFFSET
  static const GL_MAX_PROGRAM_TEXEL_OFFSET = 35077;

  /// from: static public final int GL_MAX_SAMPLES
  static const GL_MAX_SAMPLES = 36183;

  /// from: static public final int GL_MAX_SERVER_WAIT_TIMEOUT
  static const GL_MAX_SERVER_WAIT_TIMEOUT = 37137;

  /// from: static public final int GL_MAX_TEXTURE_LOD_BIAS
  static const GL_MAX_TEXTURE_LOD_BIAS = 34045;

  /// from: static public final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
  static const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;

  /// from: static public final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
  static const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;

  /// from: static public final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
  static const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;

  /// from: static public final int GL_MAX_UNIFORM_BLOCK_SIZE
  static const GL_MAX_UNIFORM_BLOCK_SIZE = 35376;

  /// from: static public final int GL_MAX_UNIFORM_BUFFER_BINDINGS
  static const GL_MAX_UNIFORM_BUFFER_BINDINGS = 35375;

  /// from: static public final int GL_MAX_VARYING_COMPONENTS
  static const GL_MAX_VARYING_COMPONENTS = 35659;

  /// from: static public final int GL_MAX_VERTEX_OUTPUT_COMPONENTS
  static const GL_MAX_VERTEX_OUTPUT_COMPONENTS = 37154;

  /// from: static public final int GL_MAX_VERTEX_UNIFORM_BLOCKS
  static const GL_MAX_VERTEX_UNIFORM_BLOCKS = 35371;

  /// from: static public final int GL_MAX_VERTEX_UNIFORM_COMPONENTS
  static const GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658;

  /// from: static public final int GL_MIN
  static const GL_MIN = 32775;

  /// from: static public final int GL_MINOR_VERSION
  static const GL_MINOR_VERSION = 33308;

  /// from: static public final int GL_MIN_PROGRAM_TEXEL_OFFSET
  static const GL_MIN_PROGRAM_TEXEL_OFFSET = 35076;

  /// from: static public final int GL_NUM_EXTENSIONS
  static const GL_NUM_EXTENSIONS = 33309;

  /// from: static public final int GL_NUM_PROGRAM_BINARY_FORMATS
  static const GL_NUM_PROGRAM_BINARY_FORMATS = 34814;

  /// from: static public final int GL_NUM_SAMPLE_COUNTS
  static const GL_NUM_SAMPLE_COUNTS = 37760;

  /// from: static public final int GL_OBJECT_TYPE
  static const GL_OBJECT_TYPE = 37138;

  /// from: static public final int GL_PACK_ROW_LENGTH
  static const GL_PACK_ROW_LENGTH = 3330;

  /// from: static public final int GL_PACK_SKIP_PIXELS
  static const GL_PACK_SKIP_PIXELS = 3332;

  /// from: static public final int GL_PACK_SKIP_ROWS
  static const GL_PACK_SKIP_ROWS = 3331;

  /// from: static public final int GL_PIXEL_PACK_BUFFER
  static const GL_PIXEL_PACK_BUFFER = 35051;

  /// from: static public final int GL_PIXEL_PACK_BUFFER_BINDING
  static const GL_PIXEL_PACK_BUFFER_BINDING = 35053;

  /// from: static public final int GL_PIXEL_UNPACK_BUFFER
  static const GL_PIXEL_UNPACK_BUFFER = 35052;

  /// from: static public final int GL_PIXEL_UNPACK_BUFFER_BINDING
  static const GL_PIXEL_UNPACK_BUFFER_BINDING = 35055;

  /// from: static public final int GL_PRIMITIVE_RESTART_FIXED_INDEX
  static const GL_PRIMITIVE_RESTART_FIXED_INDEX = 36201;

  /// from: static public final int GL_PROGRAM_BINARY_FORMATS
  static const GL_PROGRAM_BINARY_FORMATS = 34815;

  /// from: static public final int GL_PROGRAM_BINARY_LENGTH
  static const GL_PROGRAM_BINARY_LENGTH = 34625;

  /// from: static public final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT
  static const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 33367;

  /// from: static public final int GL_QUERY_RESULT
  static const GL_QUERY_RESULT = 34918;

  /// from: static public final int GL_QUERY_RESULT_AVAILABLE
  static const GL_QUERY_RESULT_AVAILABLE = 34919;

  /// from: static public final int GL_R11F_G11F_B10F
  static const GL_R11F_G11F_B10F = 35898;

  /// from: static public final int GL_R16F
  static const GL_R16F = 33325;

  /// from: static public final int GL_R16I
  static const GL_R16I = 33331;

  /// from: static public final int GL_R16UI
  static const GL_R16UI = 33332;

  /// from: static public final int GL_R32F
  static const GL_R32F = 33326;

  /// from: static public final int GL_R32I
  static const GL_R32I = 33333;

  /// from: static public final int GL_R32UI
  static const GL_R32UI = 33334;

  /// from: static public final int GL_R8
  static const GL_R8 = 33321;

  /// from: static public final int GL_R8I
  static const GL_R8I = 33329;

  /// from: static public final int GL_R8UI
  static const GL_R8UI = 33330;

  /// from: static public final int GL_R8_SNORM
  static const GL_R8_SNORM = 36756;

  /// from: static public final int GL_RASTERIZER_DISCARD
  static const GL_RASTERIZER_DISCARD = 35977;

  /// from: static public final int GL_READ_BUFFER
  static const GL_READ_BUFFER = 3074;

  /// from: static public final int GL_READ_FRAMEBUFFER
  static const GL_READ_FRAMEBUFFER = 36008;

  /// from: static public final int GL_READ_FRAMEBUFFER_BINDING
  static const GL_READ_FRAMEBUFFER_BINDING = 36010;

  /// from: static public final int GL_RED
  static const GL_RED = 6403;

  /// from: static public final int GL_RED_INTEGER
  static const GL_RED_INTEGER = 36244;

  /// from: static public final int GL_RENDERBUFFER_SAMPLES
  static const GL_RENDERBUFFER_SAMPLES = 36011;

  /// from: static public final int GL_RG
  static const GL_RG = 33319;

  /// from: static public final int GL_RG16F
  static const GL_RG16F = 33327;

  /// from: static public final int GL_RG16I
  static const GL_RG16I = 33337;

  /// from: static public final int GL_RG16UI
  static const GL_RG16UI = 33338;

  /// from: static public final int GL_RG32F
  static const GL_RG32F = 33328;

  /// from: static public final int GL_RG32I
  static const GL_RG32I = 33339;

  /// from: static public final int GL_RG32UI
  static const GL_RG32UI = 33340;

  /// from: static public final int GL_RG8
  static const GL_RG8 = 33323;

  /// from: static public final int GL_RG8I
  static const GL_RG8I = 33335;

  /// from: static public final int GL_RG8UI
  static const GL_RG8UI = 33336;

  /// from: static public final int GL_RG8_SNORM
  static const GL_RG8_SNORM = 36757;

  /// from: static public final int GL_RGB10_A2
  static const GL_RGB10_A2 = 32857;

  /// from: static public final int GL_RGB10_A2UI
  static const GL_RGB10_A2UI = 36975;

  /// from: static public final int GL_RGB16F
  static const GL_RGB16F = 34843;

  /// from: static public final int GL_RGB16I
  static const GL_RGB16I = 36233;

  /// from: static public final int GL_RGB16UI
  static const GL_RGB16UI = 36215;

  /// from: static public final int GL_RGB32F
  static const GL_RGB32F = 34837;

  /// from: static public final int GL_RGB32I
  static const GL_RGB32I = 36227;

  /// from: static public final int GL_RGB32UI
  static const GL_RGB32UI = 36209;

  /// from: static public final int GL_RGB8
  static const GL_RGB8 = 32849;

  /// from: static public final int GL_RGB8I
  static const GL_RGB8I = 36239;

  /// from: static public final int GL_RGB8UI
  static const GL_RGB8UI = 36221;

  /// from: static public final int GL_RGB8_SNORM
  static const GL_RGB8_SNORM = 36758;

  /// from: static public final int GL_RGB9_E5
  static const GL_RGB9_E5 = 35901;

  /// from: static public final int GL_RGBA16F
  static const GL_RGBA16F = 34842;

  /// from: static public final int GL_RGBA16I
  static const GL_RGBA16I = 36232;

  /// from: static public final int GL_RGBA16UI
  static const GL_RGBA16UI = 36214;

  /// from: static public final int GL_RGBA32F
  static const GL_RGBA32F = 34836;

  /// from: static public final int GL_RGBA32I
  static const GL_RGBA32I = 36226;

  /// from: static public final int GL_RGBA32UI
  static const GL_RGBA32UI = 36208;

  /// from: static public final int GL_RGBA8
  static const GL_RGBA8 = 32856;

  /// from: static public final int GL_RGBA8I
  static const GL_RGBA8I = 36238;

  /// from: static public final int GL_RGBA8UI
  static const GL_RGBA8UI = 36220;

  /// from: static public final int GL_RGBA8_SNORM
  static const GL_RGBA8_SNORM = 36759;

  /// from: static public final int GL_RGBA_INTEGER
  static const GL_RGBA_INTEGER = 36249;

  /// from: static public final int GL_RGB_INTEGER
  static const GL_RGB_INTEGER = 36248;

  /// from: static public final int GL_RG_INTEGER
  static const GL_RG_INTEGER = 33320;

  /// from: static public final int GL_SAMPLER_2D_ARRAY
  static const GL_SAMPLER_2D_ARRAY = 36289;

  /// from: static public final int GL_SAMPLER_2D_ARRAY_SHADOW
  static const GL_SAMPLER_2D_ARRAY_SHADOW = 36292;

  /// from: static public final int GL_SAMPLER_2D_SHADOW
  static const GL_SAMPLER_2D_SHADOW = 35682;

  /// from: static public final int GL_SAMPLER_3D
  static const GL_SAMPLER_3D = 35679;

  /// from: static public final int GL_SAMPLER_BINDING
  static const GL_SAMPLER_BINDING = 35097;

  /// from: static public final int GL_SAMPLER_CUBE_SHADOW
  static const GL_SAMPLER_CUBE_SHADOW = 36293;

  /// from: static public final int GL_SEPARATE_ATTRIBS
  static const GL_SEPARATE_ATTRIBS = 35981;

  /// from: static public final int GL_SIGNALED
  static const GL_SIGNALED = 37145;

  /// from: static public final int GL_SIGNED_NORMALIZED
  static const GL_SIGNED_NORMALIZED = 36764;

  /// from: static public final int GL_SRGB
  static const GL_SRGB = 35904;

  /// from: static public final int GL_SRGB8
  static const GL_SRGB8 = 35905;

  /// from: static public final int GL_SRGB8_ALPHA8
  static const GL_SRGB8_ALPHA8 = 35907;

  /// from: static public final int GL_STATIC_COPY
  static const GL_STATIC_COPY = 35046;

  /// from: static public final int GL_STATIC_READ
  static const GL_STATIC_READ = 35045;

  /// from: static public final int GL_STENCIL
  static const GL_STENCIL = 6146;

  /// from: static public final int GL_STREAM_COPY
  static const GL_STREAM_COPY = 35042;

  /// from: static public final int GL_STREAM_READ
  static const GL_STREAM_READ = 35041;

  /// from: static public final int GL_SYNC_CONDITION
  static const GL_SYNC_CONDITION = 37139;

  /// from: static public final int GL_SYNC_FENCE
  static const GL_SYNC_FENCE = 37142;

  /// from: static public final int GL_SYNC_FLAGS
  static const GL_SYNC_FLAGS = 37141;

  /// from: static public final int GL_SYNC_FLUSH_COMMANDS_BIT
  static const GL_SYNC_FLUSH_COMMANDS_BIT = 1;

  /// from: static public final int GL_SYNC_GPU_COMMANDS_COMPLETE
  static const GL_SYNC_GPU_COMMANDS_COMPLETE = 37143;

  /// from: static public final int GL_SYNC_STATUS
  static const GL_SYNC_STATUS = 37140;

  /// from: static public final int GL_TEXTURE_2D_ARRAY
  static const GL_TEXTURE_2D_ARRAY = 35866;

  /// from: static public final int GL_TEXTURE_3D
  static const GL_TEXTURE_3D = 32879;

  /// from: static public final int GL_TEXTURE_BASE_LEVEL
  static const GL_TEXTURE_BASE_LEVEL = 33084;

  /// from: static public final int GL_TEXTURE_BINDING_2D_ARRAY
  static const GL_TEXTURE_BINDING_2D_ARRAY = 35869;

  /// from: static public final int GL_TEXTURE_BINDING_3D
  static const GL_TEXTURE_BINDING_3D = 32874;

  /// from: static public final int GL_TEXTURE_COMPARE_FUNC
  static const GL_TEXTURE_COMPARE_FUNC = 34893;

  /// from: static public final int GL_TEXTURE_COMPARE_MODE
  static const GL_TEXTURE_COMPARE_MODE = 34892;

  /// from: static public final int GL_TEXTURE_IMMUTABLE_FORMAT
  static const GL_TEXTURE_IMMUTABLE_FORMAT = 37167;

  /// from: static public final int GL_TEXTURE_IMMUTABLE_LEVELS
  static const GL_TEXTURE_IMMUTABLE_LEVELS = 33503;

  /// from: static public final int GL_TEXTURE_MAX_LEVEL
  static const GL_TEXTURE_MAX_LEVEL = 33085;

  /// from: static public final int GL_TEXTURE_MAX_LOD
  static const GL_TEXTURE_MAX_LOD = 33083;

  /// from: static public final int GL_TEXTURE_MIN_LOD
  static const GL_TEXTURE_MIN_LOD = 33082;

  /// from: static public final int GL_TEXTURE_SWIZZLE_A
  static const GL_TEXTURE_SWIZZLE_A = 36421;

  /// from: static public final int GL_TEXTURE_SWIZZLE_B
  static const GL_TEXTURE_SWIZZLE_B = 36420;

  /// from: static public final int GL_TEXTURE_SWIZZLE_G
  static const GL_TEXTURE_SWIZZLE_G = 36419;

  /// from: static public final int GL_TEXTURE_SWIZZLE_R
  static const GL_TEXTURE_SWIZZLE_R = 36418;

  /// from: static public final int GL_TEXTURE_WRAP_R
  static const GL_TEXTURE_WRAP_R = 32882;

  /// from: static public final int GL_TIMEOUT_EXPIRED
  static const GL_TIMEOUT_EXPIRED = 37147;

  /// from: static public final long GL_TIMEOUT_IGNORED
  static const GL_TIMEOUT_IGNORED = -1;

  /// from: static public final int GL_TRANSFORM_FEEDBACK
  static const GL_TRANSFORM_FEEDBACK = 36386;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_ACTIVE
  static const GL_TRANSFORM_FEEDBACK_ACTIVE = 36388;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_BINDING
  static const GL_TRANSFORM_FEEDBACK_BINDING = 36389;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_BUFFER
  static const GL_TRANSFORM_FEEDBACK_BUFFER = 35982;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
  static const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE
  static const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
  static const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_BUFFER_START
  static const GL_TRANSFORM_FEEDBACK_BUFFER_START = 35972;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_PAUSED
  static const GL_TRANSFORM_FEEDBACK_PAUSED = 36387;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
  static const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_VARYINGS
  static const GL_TRANSFORM_FEEDBACK_VARYINGS = 35971;

  /// from: static public final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
  static const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 35958;

  /// from: static public final int GL_UNIFORM_ARRAY_STRIDE
  static const GL_UNIFORM_ARRAY_STRIDE = 35388;

  /// from: static public final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
  static const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;

  /// from: static public final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
  static const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;

  /// from: static public final int GL_UNIFORM_BLOCK_BINDING
  static const GL_UNIFORM_BLOCK_BINDING = 35391;

  /// from: static public final int GL_UNIFORM_BLOCK_DATA_SIZE
  static const GL_UNIFORM_BLOCK_DATA_SIZE = 35392;

  /// from: static public final int GL_UNIFORM_BLOCK_INDEX
  static const GL_UNIFORM_BLOCK_INDEX = 35386;

  /// from: static public final int GL_UNIFORM_BLOCK_NAME_LENGTH
  static const GL_UNIFORM_BLOCK_NAME_LENGTH = 35393;

  /// from: static public final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
  static const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;

  /// from: static public final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
  static const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;

  /// from: static public final int GL_UNIFORM_BUFFER
  static const GL_UNIFORM_BUFFER = 35345;

  /// from: static public final int GL_UNIFORM_BUFFER_BINDING
  static const GL_UNIFORM_BUFFER_BINDING = 35368;

  /// from: static public final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
  static const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;

  /// from: static public final int GL_UNIFORM_BUFFER_SIZE
  static const GL_UNIFORM_BUFFER_SIZE = 35370;

  /// from: static public final int GL_UNIFORM_BUFFER_START
  static const GL_UNIFORM_BUFFER_START = 35369;

  /// from: static public final int GL_UNIFORM_IS_ROW_MAJOR
  static const GL_UNIFORM_IS_ROW_MAJOR = 35390;

  /// from: static public final int GL_UNIFORM_MATRIX_STRIDE
  static const GL_UNIFORM_MATRIX_STRIDE = 35389;

  /// from: static public final int GL_UNIFORM_NAME_LENGTH
  static const GL_UNIFORM_NAME_LENGTH = 35385;

  /// from: static public final int GL_UNIFORM_OFFSET
  static const GL_UNIFORM_OFFSET = 35387;

  /// from: static public final int GL_UNIFORM_SIZE
  static const GL_UNIFORM_SIZE = 35384;

  /// from: static public final int GL_UNIFORM_TYPE
  static const GL_UNIFORM_TYPE = 35383;

  /// from: static public final int GL_UNPACK_IMAGE_HEIGHT
  static const GL_UNPACK_IMAGE_HEIGHT = 32878;

  /// from: static public final int GL_UNPACK_ROW_LENGTH
  static const GL_UNPACK_ROW_LENGTH = 3314;

  /// from: static public final int GL_UNPACK_SKIP_IMAGES
  static const GL_UNPACK_SKIP_IMAGES = 32877;

  /// from: static public final int GL_UNPACK_SKIP_PIXELS
  static const GL_UNPACK_SKIP_PIXELS = 3316;

  /// from: static public final int GL_UNPACK_SKIP_ROWS
  static const GL_UNPACK_SKIP_ROWS = 3315;

  /// from: static public final int GL_UNSIGNALED
  static const GL_UNSIGNALED = 37144;

  /// from: static public final int GL_UNSIGNED_INT_10F_11F_11F_REV
  static const GL_UNSIGNED_INT_10F_11F_11F_REV = 35899;

  /// from: static public final int GL_UNSIGNED_INT_24_8
  static const GL_UNSIGNED_INT_24_8 = 34042;

  /// from: static public final int GL_UNSIGNED_INT_2_10_10_10_REV
  static const GL_UNSIGNED_INT_2_10_10_10_REV = 33640;

  /// from: static public final int GL_UNSIGNED_INT_5_9_9_9_REV
  static const GL_UNSIGNED_INT_5_9_9_9_REV = 35902;

  /// from: static public final int GL_UNSIGNED_INT_SAMPLER_2D
  static const GL_UNSIGNED_INT_SAMPLER_2D = 36306;

  /// from: static public final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
  static const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;

  /// from: static public final int GL_UNSIGNED_INT_SAMPLER_3D
  static const GL_UNSIGNED_INT_SAMPLER_3D = 36307;

  /// from: static public final int GL_UNSIGNED_INT_SAMPLER_CUBE
  static const GL_UNSIGNED_INT_SAMPLER_CUBE = 36308;

  /// from: static public final int GL_UNSIGNED_INT_VEC2
  static const GL_UNSIGNED_INT_VEC2 = 36294;

  /// from: static public final int GL_UNSIGNED_INT_VEC3
  static const GL_UNSIGNED_INT_VEC3 = 36295;

  /// from: static public final int GL_UNSIGNED_INT_VEC4
  static const GL_UNSIGNED_INT_VEC4 = 36296;

  /// from: static public final int GL_UNSIGNED_NORMALIZED
  static const GL_UNSIGNED_NORMALIZED = 35863;

  /// from: static public final int GL_VERTEX_ARRAY_BINDING
  static const GL_VERTEX_ARRAY_BINDING = 34229;

  /// from: static public final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR
  static const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;

  /// from: static public final int GL_VERTEX_ATTRIB_ARRAY_INTEGER
  static const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 35069;

  /// from: static public final int GL_WAIT_FAILED
  static const GL_WAIT_FAILED = 37149;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GLES30()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_glReadBuffer =
      jniAccessors.getStaticMethodIDOf(_classRef, "glReadBuffer", "(I)V");

  /// from: static public native void glReadBuffer(int mode)
  static void glReadBuffer(int mode) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glReadBuffer, jni.JniType.voidType, [mode]).check();

  static final _id_glDrawRangeElements = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDrawRangeElements", "(IIIIILjava/nio/Buffer;)V");

  /// from: static public native void glDrawRangeElements(int mode, int start, int end, int count, int type, java.nio.Buffer indices)
  static void glDrawRangeElements(int mode, int start, int end, int count,
          int type, jni.JniObject indices) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDrawRangeElements,
          jni.JniType.voidType,
          [mode, start, end, count, type, indices.reference]).check();

  static final _id_glDrawRangeElements1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDrawRangeElements", "(IIIIII)V");

  /// from: static public native void glDrawRangeElements(int mode, int start, int end, int count, int type, int offset)
  static void glDrawRangeElements1(
          int mode, int start, int end, int count, int type, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDrawRangeElements1,
          jni.JniType.voidType,
          [mode, start, end, count, type, offset]).check();

  static final _id_glTexImage3D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexImage3D", "(IIIIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, java.nio.Buffer pixels)
  static void glTexImage3D(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int depth,
          int border,
          int format,
          int type,
          jni.JniObject pixels) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTexImage3D, jni.JniType.voidType, [
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        format,
        type,
        pixels.reference
      ]).check();

  static final _id_glTexImage3D1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexImage3D", "(IIIIIIIIII)V");

  /// from: static public native void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int offset)
  static void glTexImage3D1(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int depth,
          int border,
          int format,
          int type,
          int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTexImage3D1, jni.JniType.voidType, [
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        format,
        type,
        offset
      ]).check();

  static final _id_glTexSubImage3D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexSubImage3D", "(IIIIIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, java.nio.Buffer pixels)
  static void glTexSubImage3D(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int type,
          jni.JniObject pixels) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTexSubImage3D, jni.JniType.voidType, [
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        type,
        pixels.reference
      ]).check();

  static final _id_glTexSubImage3D1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexSubImage3D", "(IIIIIIIIIII)V");

  /// from: static public native void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int offset)
  static void glTexSubImage3D1(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int type,
          int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glTexSubImage3D1, jni.JniType.voidType, [
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        type,
        offset
      ]).check();

  static final _id_glCopyTexSubImage3D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCopyTexSubImage3D", "(IIIIIIIII)V");

  /// from: static public native void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
  static void glCopyTexSubImage3D(int target, int level, int xoffset,
          int yoffset, int zoffset, int x, int y, int width, int height) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glCopyTexSubImage3D, jni.JniType.voidType, [
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        x,
        y,
        width,
        height
      ]).check();

  static final _id_glCompressedTexImage3D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCompressedTexImage3D", "(IIIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, java.nio.Buffer data)
  static void glCompressedTexImage3D(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int depth,
          int border,
          int imageSize,
          jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glCompressedTexImage3D, jni.JniType.voidType, [
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        imageSize,
        data.reference
      ]).check();

  static final _id_glCompressedTexImage3D1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCompressedTexImage3D", "(IIIIIIIII)V");

  /// from: static public native void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int offset)
  static void glCompressedTexImage3D1(
          int target,
          int level,
          int internalformat,
          int width,
          int height,
          int depth,
          int border,
          int imageSize,
          int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glCompressedTexImage3D1, jni.JniType.voidType, [
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        imageSize,
        offset
      ]).check();

  static final _id_glCompressedTexSubImage3D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCompressedTexSubImage3D", "(IIIIIIIIIILjava/nio/Buffer;)V");

  /// from: static public native void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, java.nio.Buffer data)
  static void glCompressedTexSubImage3D(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int imageSize,
          jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glCompressedTexSubImage3D, jni.JniType.voidType, [
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        imageSize,
        data.reference
      ]).check();

  static final _id_glCompressedTexSubImage3D1 =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glCompressedTexSubImage3D", "(IIIIIIIIIII)V");

  /// from: static public native void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int offset)
  static void glCompressedTexSubImage3D1(
          int target,
          int level,
          int xoffset,
          int yoffset,
          int zoffset,
          int width,
          int height,
          int depth,
          int format,
          int imageSize,
          int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glCompressedTexSubImage3D1, jni.JniType.voidType, [
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        imageSize,
        offset
      ]).check();

  static final _id_glGenQueries =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGenQueries", "(I[II)V");

  /// from: static public native void glGenQueries(int n, int[] ids, int offset)
  static void glGenQueries(int n, jni.JniObject ids, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenQueries,
          jni.JniType.voidType, [n, ids.reference, offset]).check();

  static final _id_glGenQueries1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenQueries", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGenQueries(int n, java.nio.IntBuffer ids)
  static void glGenQueries1(int n, jni.JniObject ids) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenQueries1,
          jni.JniType.voidType, [n, ids.reference]).check();

  static final _id_glDeleteQueries =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDeleteQueries", "(I[II)V");

  /// from: static public native void glDeleteQueries(int n, int[] ids, int offset)
  static void glDeleteQueries(int n, jni.JniObject ids, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteQueries,
          jni.JniType.voidType, [n, ids.reference, offset]).check();

  static final _id_glDeleteQueries1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteQueries", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDeleteQueries(int n, java.nio.IntBuffer ids)
  static void glDeleteQueries1(int n, jni.JniObject ids) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteQueries1,
          jni.JniType.voidType, [n, ids.reference]).check();

  static final _id_glIsQuery =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsQuery", "(I)Z");

  /// from: static public native boolean glIsQuery(int id)
  static bool glIsQuery(int id) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glIsQuery, jni.JniType.booleanType, [id]).boolean;

  static final _id_glBeginQuery =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBeginQuery", "(II)V");

  /// from: static public native void glBeginQuery(int target, int id)
  static void glBeginQuery(int target, int id) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBeginQuery,
          jni.JniType.voidType, [target, id]).check();

  static final _id_glEndQuery =
      jniAccessors.getStaticMethodIDOf(_classRef, "glEndQuery", "(I)V");

  /// from: static public native void glEndQuery(int target)
  static void glEndQuery(int target) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glEndQuery, jni.JniType.voidType, [target]).check();

  static final _id_glGetQueryiv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetQueryiv", "(II[II)V");

  /// from: static public native void glGetQueryiv(int target, int pname, int[] params, int offset)
  static void glGetQueryiv(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetQueryiv,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetQueryiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetQueryiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetQueryiv(int target, int pname, java.nio.IntBuffer params)
  static void glGetQueryiv1(int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetQueryiv1,
          jni.JniType.voidType, [target, pname, params.reference]).check();

  static final _id_glGetQueryObjectuiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetQueryObjectuiv", "(II[II)V");

  /// from: static public native void glGetQueryObjectuiv(int id, int pname, int[] params, int offset)
  static void glGetQueryObjectuiv(
          int id, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetQueryObjectuiv,
          jni.JniType.voidType, [id, pname, params.reference, offset]).check();

  static final _id_glGetQueryObjectuiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetQueryObjectuiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetQueryObjectuiv(int id, int pname, java.nio.IntBuffer params)
  static void glGetQueryObjectuiv1(int id, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetQueryObjectuiv1,
          jni.JniType.voidType, [id, pname, params.reference]).check();

  static final _id_glUnmapBuffer =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUnmapBuffer", "(I)Z");

  /// from: static public native boolean glUnmapBuffer(int target)
  static bool glUnmapBuffer(int target) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUnmapBuffer,
          jni.JniType.booleanType, [target]).boolean;

  static final _id_glGetBufferPointerv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetBufferPointerv", "(II)Ljava/nio/Buffer;");

  /// from: static public native java.nio.Buffer glGetBufferPointerv(int target, int pname)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The java.nio.Buffer instance returned by this method is guaranteed
  /// to be an instance of java.nio.ByteBuffer.
  static jni.JniObject glGetBufferPointerv(int target, int pname) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetBufferPointerv,
          jni.JniType.objectType,
          [target, pname]).object);

  static final _id_glDrawBuffers =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDrawBuffers", "(I[II)V");

  /// from: static public native void glDrawBuffers(int n, int[] bufs, int offset)
  static void glDrawBuffers(int n, jni.JniObject bufs, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDrawBuffers,
          jni.JniType.voidType, [n, bufs.reference, offset]).check();

  static final _id_glDrawBuffers1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDrawBuffers", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDrawBuffers(int n, java.nio.IntBuffer bufs)
  static void glDrawBuffers1(int n, jni.JniObject bufs) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDrawBuffers1,
          jni.JniType.voidType, [n, bufs.reference]).check();

  static final _id_glUniformMatrix2x3fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix2x3fv", "(IIZ[FI)V");

  /// from: static public native void glUniformMatrix2x3fv(int location, int count, boolean transpose, float[] value, int offset)
  static void glUniformMatrix2x3fv(int location, int count, bool transpose,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix2x3fv,
          jni.JniType.voidType,
          [location, count, transpose, value.reference, offset]).check();

  static final _id_glUniformMatrix2x3fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix2x3fv", "(IIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniformMatrix2x3fv(int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glUniformMatrix2x3fv1(
          int location, int count, bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix2x3fv1,
          jni.JniType.voidType,
          [location, count, transpose, value.reference]).check();

  static final _id_glUniformMatrix3x2fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix3x2fv", "(IIZ[FI)V");

  /// from: static public native void glUniformMatrix3x2fv(int location, int count, boolean transpose, float[] value, int offset)
  static void glUniformMatrix3x2fv(int location, int count, bool transpose,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix3x2fv,
          jni.JniType.voidType,
          [location, count, transpose, value.reference, offset]).check();

  static final _id_glUniformMatrix3x2fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix3x2fv", "(IIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniformMatrix3x2fv(int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glUniformMatrix3x2fv1(
          int location, int count, bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix3x2fv1,
          jni.JniType.voidType,
          [location, count, transpose, value.reference]).check();

  static final _id_glUniformMatrix2x4fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix2x4fv", "(IIZ[FI)V");

  /// from: static public native void glUniformMatrix2x4fv(int location, int count, boolean transpose, float[] value, int offset)
  static void glUniformMatrix2x4fv(int location, int count, bool transpose,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix2x4fv,
          jni.JniType.voidType,
          [location, count, transpose, value.reference, offset]).check();

  static final _id_glUniformMatrix2x4fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix2x4fv", "(IIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniformMatrix2x4fv(int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glUniformMatrix2x4fv1(
          int location, int count, bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix2x4fv1,
          jni.JniType.voidType,
          [location, count, transpose, value.reference]).check();

  static final _id_glUniformMatrix4x2fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix4x2fv", "(IIZ[FI)V");

  /// from: static public native void glUniformMatrix4x2fv(int location, int count, boolean transpose, float[] value, int offset)
  static void glUniformMatrix4x2fv(int location, int count, bool transpose,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix4x2fv,
          jni.JniType.voidType,
          [location, count, transpose, value.reference, offset]).check();

  static final _id_glUniformMatrix4x2fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix4x2fv", "(IIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniformMatrix4x2fv(int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glUniformMatrix4x2fv1(
          int location, int count, bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix4x2fv1,
          jni.JniType.voidType,
          [location, count, transpose, value.reference]).check();

  static final _id_glUniformMatrix3x4fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix3x4fv", "(IIZ[FI)V");

  /// from: static public native void glUniformMatrix3x4fv(int location, int count, boolean transpose, float[] value, int offset)
  static void glUniformMatrix3x4fv(int location, int count, bool transpose,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix3x4fv,
          jni.JniType.voidType,
          [location, count, transpose, value.reference, offset]).check();

  static final _id_glUniformMatrix3x4fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix3x4fv", "(IIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniformMatrix3x4fv(int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glUniformMatrix3x4fv1(
          int location, int count, bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix3x4fv1,
          jni.JniType.voidType,
          [location, count, transpose, value.reference]).check();

  static final _id_glUniformMatrix4x3fv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix4x3fv", "(IIZ[FI)V");

  /// from: static public native void glUniformMatrix4x3fv(int location, int count, boolean transpose, float[] value, int offset)
  static void glUniformMatrix4x3fv(int location, int count, bool transpose,
          jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix4x3fv,
          jni.JniType.voidType,
          [location, count, transpose, value.reference, offset]).check();

  static final _id_glUniformMatrix4x3fv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformMatrix4x3fv", "(IIZLjava/nio/FloatBuffer;)V");

  /// from: static public native void glUniformMatrix4x3fv(int location, int count, boolean transpose, java.nio.FloatBuffer value)
  static void glUniformMatrix4x3fv1(
          int location, int count, bool transpose, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformMatrix4x3fv1,
          jni.JniType.voidType,
          [location, count, transpose, value.reference]).check();

  static final _id_glBlitFramebuffer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBlitFramebuffer", "(IIIIIIIIII)V");

  /// from: static public native void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter)
  static void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1,
          int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glBlitFramebuffer, jni.JniType.voidType, [
        srcX0,
        srcY0,
        srcX1,
        srcY1,
        dstX0,
        dstY0,
        dstX1,
        dstY1,
        mask,
        filter
      ]).check();

  static final _id_glRenderbufferStorageMultisample =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glRenderbufferStorageMultisample", "(IIIII)V");

  /// from: static public native void glRenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height)
  static void glRenderbufferStorageMultisample(
          int target, int samples, int internalformat, int width, int height) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glRenderbufferStorageMultisample,
          jni.JniType.voidType,
          [target, samples, internalformat, width, height]).check();

  static final _id_glFramebufferTextureLayer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glFramebufferTextureLayer", "(IIIII)V");

  /// from: static public native void glFramebufferTextureLayer(int target, int attachment, int texture, int level, int layer)
  static void glFramebufferTextureLayer(
          int target, int attachment, int texture, int level, int layer) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glFramebufferTextureLayer,
          jni.JniType.voidType,
          [target, attachment, texture, level, layer]).check();

  static final _id_glMapBufferRange = jniAccessors.getStaticMethodIDOf(
      _classRef, "glMapBufferRange", "(IIII)Ljava/nio/Buffer;");

  /// from: static public native java.nio.Buffer glMapBufferRange(int target, int offset, int length, int access)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The java.nio.Buffer instance returned by this method is guaranteed
  /// to be an instance of java.nio.ByteBuffer.
  static jni.JniObject glMapBufferRange(
          int target, int offset, int length, int access) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glMapBufferRange,
          jni.JniType.objectType,
          [target, offset, length, access]).object);

  static final _id_glFlushMappedBufferRange = jniAccessors.getStaticMethodIDOf(
      _classRef, "glFlushMappedBufferRange", "(III)V");

  /// from: static public native void glFlushMappedBufferRange(int target, int offset, int length)
  static void glFlushMappedBufferRange(int target, int offset, int length) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glFlushMappedBufferRange,
          jni.JniType.voidType,
          [target, offset, length]).check();

  static final _id_glBindVertexArray =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBindVertexArray", "(I)V");

  /// from: static public native void glBindVertexArray(int array)
  static void glBindVertexArray(int array) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindVertexArray,
          jni.JniType.voidType, [array]).check();

  static final _id_glDeleteVertexArrays = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteVertexArrays", "(I[II)V");

  /// from: static public native void glDeleteVertexArrays(int n, int[] arrays, int offset)
  static void glDeleteVertexArrays(int n, jni.JniObject arrays, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteVertexArrays,
          jni.JniType.voidType, [n, arrays.reference, offset]).check();

  static final _id_glDeleteVertexArrays1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteVertexArrays", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDeleteVertexArrays(int n, java.nio.IntBuffer arrays)
  static void glDeleteVertexArrays1(int n, jni.JniObject arrays) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDeleteVertexArrays1,
          jni.JniType.voidType,
          [n, arrays.reference]).check();

  static final _id_glGenVertexArrays = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenVertexArrays", "(I[II)V");

  /// from: static public native void glGenVertexArrays(int n, int[] arrays, int offset)
  static void glGenVertexArrays(int n, jni.JniObject arrays, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenVertexArrays,
          jni.JniType.voidType, [n, arrays.reference, offset]).check();

  static final _id_glGenVertexArrays1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenVertexArrays", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGenVertexArrays(int n, java.nio.IntBuffer arrays)
  static void glGenVertexArrays1(int n, jni.JniObject arrays) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenVertexArrays1,
          jni.JniType.voidType, [n, arrays.reference]).check();

  static final _id_glIsVertexArray =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsVertexArray", "(I)Z");

  /// from: static public native boolean glIsVertexArray(int array)
  static bool glIsVertexArray(int array) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glIsVertexArray,
          jni.JniType.booleanType, [array]).boolean;

  static final _id_glGetIntegeri_v = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetIntegeri_v", "(II[II)V");

  /// from: static public native void glGetIntegeri_v(int target, int index, int[] data, int offset)
  static void glGetIntegeri_v(
          int target, int index, jni.JniObject data, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetIntegeri_v,
          jni.JniType.voidType,
          [target, index, data.reference, offset]).check();

  static final _id_glGetIntegeri_v1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetIntegeri_v", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetIntegeri_v(int target, int index, java.nio.IntBuffer data)
  static void glGetIntegeri_v1(int target, int index, jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetIntegeri_v1,
          jni.JniType.voidType, [target, index, data.reference]).check();

  static final _id_glBeginTransformFeedback = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBeginTransformFeedback", "(I)V");

  /// from: static public native void glBeginTransformFeedback(int primitiveMode)
  static void glBeginTransformFeedback(int primitiveMode) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glBeginTransformFeedback,
          jni.JniType.voidType,
          [primitiveMode]).check();

  static final _id_glEndTransformFeedback = jniAccessors.getStaticMethodIDOf(
      _classRef, "glEndTransformFeedback", "()V");

  /// from: static public native void glEndTransformFeedback()
  static void glEndTransformFeedback() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glEndTransformFeedback, jni.JniType.voidType, []).check();

  static final _id_glBindBufferRange = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBindBufferRange", "(IIIII)V");

  /// from: static public native void glBindBufferRange(int target, int index, int buffer, int offset, int size)
  static void glBindBufferRange(
          int target, int index, int buffer, int offset, int size) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindBufferRange,
          jni.JniType.voidType, [target, index, buffer, offset, size]).check();

  static final _id_glBindBufferBase =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBindBufferBase", "(III)V");

  /// from: static public native void glBindBufferBase(int target, int index, int buffer)
  static void glBindBufferBase(int target, int index, int buffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindBufferBase,
          jni.JniType.voidType, [target, index, buffer]).check();

  static final _id_glTransformFeedbackVaryings =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glTransformFeedbackVaryings", "(I[Ljava/lang/String;I)V");

  /// from: static public native void glTransformFeedbackVaryings(int program, java.lang.String[] varyings, int bufferMode)
  static void glTransformFeedbackVaryings(
          int program, jni.JniObject varyings, int bufferMode) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTransformFeedbackVaryings,
          jni.JniType.voidType,
          [program, varyings.reference, bufferMode]).check();

  static final _id_glGetTransformFeedbackVarying =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glGetTransformFeedbackVarying", "(III[II[II[II[BI)V");

  /// from: static public native void glGetTransformFeedbackVarying(int program, int index, int bufsize, int[] length, int lengthOffset, int[] size, int sizeOffset, int[] type, int typeOffset, byte[] name, int nameOffset)
  static void glGetTransformFeedbackVarying(
          int program,
          int index,
          int bufsize,
          jni.JniObject length,
          int lengthOffset,
          jni.JniObject size,
          int sizeOffset,
          jni.JniObject type,
          int typeOffset,
          jni.JniObject name,
          int nameOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetTransformFeedbackVarying, jni.JniType.voidType, [
        program,
        index,
        bufsize,
        length.reference,
        lengthOffset,
        size.reference,
        sizeOffset,
        type.reference,
        typeOffset,
        name.reference,
        nameOffset
      ]).check();

  static final _id_glGetTransformFeedbackVarying1 =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "glGetTransformFeedbackVarying",
          "(IIILjava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;B)V");

  /// from: static public native void glGetTransformFeedbackVarying(int program, int index, int bufsize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, byte name)
  ///
  /// @deprecated Use the version that takes a ByteBuffer as the last argument, or the versions that return a String.
  static void glGetTransformFeedbackVarying1(
          int program,
          int index,
          int bufsize,
          jni.JniObject length,
          jni.JniObject size,
          jni.JniObject type,
          int name) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetTransformFeedbackVarying1, jni.JniType.voidType, [
        program,
        index,
        bufsize,
        length.reference,
        size.reference,
        type.reference,
        name
      ]).check();

  static final _id_glGetTransformFeedbackVarying2 =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "glGetTransformFeedbackVarying",
          "(IIILjava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/ByteBuffer;)V");

  /// from: static public native void glGetTransformFeedbackVarying(int program, int index, int bufsize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, java.nio.ByteBuffer name)
  static void glGetTransformFeedbackVarying2(
          int program,
          int index,
          int bufsize,
          jni.JniObject length,
          jni.JniObject size,
          jni.JniObject type,
          jni.JniObject name) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetTransformFeedbackVarying2, jni.JniType.voidType, [
        program,
        index,
        bufsize,
        length.reference,
        size.reference,
        type.reference,
        name.reference
      ]).check();

  static final _id_glGetTransformFeedbackVarying3 =
      jniAccessors.getStaticMethodIDOf(_classRef,
          "glGetTransformFeedbackVarying", "(II[II[II)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetTransformFeedbackVarying(int program, int index, int[] size, int sizeOffset, int[] type, int typeOffset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetTransformFeedbackVarying3(
          int program,
          int index,
          jni.JniObject size,
          int sizeOffset,
          jni.JniObject type,
          int typeOffset) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glGetTransformFeedbackVarying3, jni.JniType.objectType, [
        program,
        index,
        size.reference,
        sizeOffset,
        type.reference,
        typeOffset
      ]).object);

  static final _id_glGetTransformFeedbackVarying4 =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "glGetTransformFeedbackVarying",
          "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetTransformFeedbackVarying(int program, int index, java.nio.IntBuffer size, java.nio.IntBuffer type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetTransformFeedbackVarying4(
          int program, int index, jni.JniObject size, jni.JniObject type) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetTransformFeedbackVarying4,
          jni.JniType.objectType,
          [program, index, size.reference, type.reference]).object);

  static final _id_glVertexAttribIPointer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribIPointer", "(IIIILjava/nio/Buffer;)V");

  /// from: static public void glVertexAttribIPointer(int index, int size, int type, int stride, java.nio.Buffer pointer)
  static void glVertexAttribIPointer(
          int index, int size, int type, int stride, jni.JniObject pointer) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glVertexAttribIPointer,
          jni.JniType.voidType,
          [index, size, type, stride, pointer.reference]).check();

  static final _id_glVertexAttribIPointer1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribIPointer", "(IIIII)V");

  /// from: static public native void glVertexAttribIPointer(int index, int size, int type, int stride, int offset)
  static void glVertexAttribIPointer1(
          int index, int size, int type, int stride, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glVertexAttribIPointer1,
          jni.JniType.voidType,
          [index, size, type, stride, offset]).check();

  static final _id_glGetVertexAttribIiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetVertexAttribIiv", "(II[II)V");

  /// from: static public native void glGetVertexAttribIiv(int index, int pname, int[] params, int offset)
  static void glGetVertexAttribIiv(
          int index, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetVertexAttribIiv,
          jni.JniType.voidType,
          [index, pname, params.reference, offset]).check();

  static final _id_glGetVertexAttribIiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetVertexAttribIiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetVertexAttribIiv(int index, int pname, java.nio.IntBuffer params)
  static void glGetVertexAttribIiv1(
          int index, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetVertexAttribIiv1,
          jni.JniType.voidType,
          [index, pname, params.reference]).check();

  static final _id_glGetVertexAttribIuiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetVertexAttribIuiv", "(II[II)V");

  /// from: static public native void glGetVertexAttribIuiv(int index, int pname, int[] params, int offset)
  static void glGetVertexAttribIuiv(
          int index, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetVertexAttribIuiv,
          jni.JniType.voidType,
          [index, pname, params.reference, offset]).check();

  static final _id_glGetVertexAttribIuiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetVertexAttribIuiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetVertexAttribIuiv(int index, int pname, java.nio.IntBuffer params)
  static void glGetVertexAttribIuiv1(
          int index, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetVertexAttribIuiv1,
          jni.JniType.voidType,
          [index, pname, params.reference]).check();

  static final _id_glVertexAttribI4i = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribI4i", "(IIIII)V");

  /// from: static public native void glVertexAttribI4i(int index, int x, int y, int z, int w)
  static void glVertexAttribI4i(int index, int x, int y, int z, int w) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttribI4i,
          jni.JniType.voidType, [index, x, y, z, w]).check();

  static final _id_glVertexAttribI4ui = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribI4ui", "(IIIII)V");

  /// from: static public native void glVertexAttribI4ui(int index, int x, int y, int z, int w)
  static void glVertexAttribI4ui(int index, int x, int y, int z, int w) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttribI4ui,
          jni.JniType.voidType, [index, x, y, z, w]).check();

  static final _id_glVertexAttribI4iv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribI4iv", "(I[II)V");

  /// from: static public native void glVertexAttribI4iv(int index, int[] v, int offset)
  static void glVertexAttribI4iv(int index, jni.JniObject v, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttribI4iv,
          jni.JniType.voidType, [index, v.reference, offset]).check();

  static final _id_glVertexAttribI4iv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribI4iv", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glVertexAttribI4iv(int index, java.nio.IntBuffer v)
  static void glVertexAttribI4iv1(int index, jni.JniObject v) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttribI4iv1,
          jni.JniType.voidType, [index, v.reference]).check();

  static final _id_glVertexAttribI4uiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribI4uiv", "(I[II)V");

  /// from: static public native void glVertexAttribI4uiv(int index, int[] v, int offset)
  static void glVertexAttribI4uiv(int index, jni.JniObject v, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttribI4uiv,
          jni.JniType.voidType, [index, v.reference, offset]).check();

  static final _id_glVertexAttribI4uiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribI4uiv", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glVertexAttribI4uiv(int index, java.nio.IntBuffer v)
  static void glVertexAttribI4uiv1(int index, jni.JniObject v) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glVertexAttribI4uiv1,
          jni.JniType.voidType, [index, v.reference]).check();

  static final _id_glGetUniformuiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetUniformuiv", "(II[II)V");

  /// from: static public native void glGetUniformuiv(int program, int location, int[] params, int offset)
  static void glGetUniformuiv(
          int program, int location, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetUniformuiv,
          jni.JniType.voidType,
          [program, location, params.reference, offset]).check();

  static final _id_glGetUniformuiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetUniformuiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetUniformuiv(int program, int location, java.nio.IntBuffer params)
  static void glGetUniformuiv1(
          int program, int location, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetUniformuiv1,
          jni.JniType.voidType, [program, location, params.reference]).check();

  static final _id_glGetFragDataLocation = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetFragDataLocation", "(ILjava/lang/String;)I");

  /// from: static public native int glGetFragDataLocation(int program, java.lang.String name)
  static int glGetFragDataLocation(int program, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetFragDataLocation,
          jni.JniType.intType,
          [program, name.reference]).integer;

  static final _id_glUniform1ui =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform1ui", "(II)V");

  /// from: static public native void glUniform1ui(int location, int v0)
  static void glUniform1ui(int location, int v0) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform1ui,
          jni.JniType.voidType, [location, v0]).check();

  static final _id_glUniform2ui =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform2ui", "(III)V");

  /// from: static public native void glUniform2ui(int location, int v0, int v1)
  static void glUniform2ui(int location, int v0, int v1) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform2ui,
          jni.JniType.voidType, [location, v0, v1]).check();

  static final _id_glUniform3ui =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform3ui", "(IIII)V");

  /// from: static public native void glUniform3ui(int location, int v0, int v1, int v2)
  static void glUniform3ui(int location, int v0, int v1, int v2) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform3ui,
          jni.JniType.voidType, [location, v0, v1, v2]).check();

  static final _id_glUniform4ui =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform4ui", "(IIIII)V");

  /// from: static public native void glUniform4ui(int location, int v0, int v1, int v2, int v3)
  static void glUniform4ui(int location, int v0, int v1, int v2, int v3) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform4ui,
          jni.JniType.voidType, [location, v0, v1, v2, v3]).check();

  static final _id_glUniform1uiv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform1uiv", "(II[II)V");

  /// from: static public native void glUniform1uiv(int location, int count, int[] value, int offset)
  static void glUniform1uiv(
          int location, int count, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniform1uiv,
          jni.JniType.voidType,
          [location, count, value.reference, offset]).check();

  static final _id_glUniform1uiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform1uiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glUniform1uiv(int location, int count, java.nio.IntBuffer value)
  static void glUniform1uiv1(int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform1uiv1,
          jni.JniType.voidType, [location, count, value.reference]).check();

  static final _id_glUniform2uiv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform2uiv", "(II[II)V");

  /// from: static public native void glUniform2uiv(int location, int count, int[] value, int offset)
  static void glUniform2uiv(
          int location, int count, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniform2uiv,
          jni.JniType.voidType,
          [location, count, value.reference, offset]).check();

  static final _id_glUniform2uiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform2uiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glUniform2uiv(int location, int count, java.nio.IntBuffer value)
  static void glUniform2uiv1(int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform2uiv1,
          jni.JniType.voidType, [location, count, value.reference]).check();

  static final _id_glUniform3uiv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform3uiv", "(II[II)V");

  /// from: static public native void glUniform3uiv(int location, int count, int[] value, int offset)
  static void glUniform3uiv(
          int location, int count, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniform3uiv,
          jni.JniType.voidType,
          [location, count, value.reference, offset]).check();

  static final _id_glUniform3uiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform3uiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glUniform3uiv(int location, int count, java.nio.IntBuffer value)
  static void glUniform3uiv1(int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform3uiv1,
          jni.JniType.voidType, [location, count, value.reference]).check();

  static final _id_glUniform4uiv =
      jniAccessors.getStaticMethodIDOf(_classRef, "glUniform4uiv", "(II[II)V");

  /// from: static public native void glUniform4uiv(int location, int count, int[] value, int offset)
  static void glUniform4uiv(
          int location, int count, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniform4uiv,
          jni.JniType.voidType,
          [location, count, value.reference, offset]).check();

  static final _id_glUniform4uiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniform4uiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glUniform4uiv(int location, int count, java.nio.IntBuffer value)
  static void glUniform4uiv1(int location, int count, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glUniform4uiv1,
          jni.JniType.voidType, [location, count, value.reference]).check();

  static final _id_glClearBufferiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glClearBufferiv", "(II[II)V");

  /// from: static public native void glClearBufferiv(int buffer, int drawbuffer, int[] value, int offset)
  static void glClearBufferiv(
          int buffer, int drawbuffer, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glClearBufferiv,
          jni.JniType.voidType,
          [buffer, drawbuffer, value.reference, offset]).check();

  static final _id_glClearBufferiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glClearBufferiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glClearBufferiv(int buffer, int drawbuffer, java.nio.IntBuffer value)
  static void glClearBufferiv1(
          int buffer, int drawbuffer, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClearBufferiv1,
          jni.JniType.voidType, [buffer, drawbuffer, value.reference]).check();

  static final _id_glClearBufferuiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glClearBufferuiv", "(II[II)V");

  /// from: static public native void glClearBufferuiv(int buffer, int drawbuffer, int[] value, int offset)
  static void glClearBufferuiv(
          int buffer, int drawbuffer, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glClearBufferuiv,
          jni.JniType.voidType,
          [buffer, drawbuffer, value.reference, offset]).check();

  static final _id_glClearBufferuiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glClearBufferuiv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glClearBufferuiv(int buffer, int drawbuffer, java.nio.IntBuffer value)
  static void glClearBufferuiv1(
          int buffer, int drawbuffer, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClearBufferuiv1,
          jni.JniType.voidType, [buffer, drawbuffer, value.reference]).check();

  static final _id_glClearBufferfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glClearBufferfv", "(II[FI)V");

  /// from: static public native void glClearBufferfv(int buffer, int drawbuffer, float[] value, int offset)
  static void glClearBufferfv(
          int buffer, int drawbuffer, jni.JniObject value, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glClearBufferfv,
          jni.JniType.voidType,
          [buffer, drawbuffer, value.reference, offset]).check();

  static final _id_glClearBufferfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glClearBufferfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glClearBufferfv(int buffer, int drawbuffer, java.nio.FloatBuffer value)
  static void glClearBufferfv1(
          int buffer, int drawbuffer, jni.JniObject value) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClearBufferfv1,
          jni.JniType.voidType, [buffer, drawbuffer, value.reference]).check();

  static final _id_glClearBufferfi =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClearBufferfi", "(IIFI)V");

  /// from: static public native void glClearBufferfi(int buffer, int drawbuffer, float depth, int stencil)
  static void glClearBufferfi(
          int buffer, int drawbuffer, double depth, int stencil) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClearBufferfi,
          jni.JniType.voidType, [buffer, drawbuffer, depth, stencil]).check();

  static final _id_glGetStringi = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetStringi", "(II)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetStringi(int name, int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetStringi(int name, int index) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glGetStringi, jni.JniType.objectType, [name, index]).object);

  static final _id_glCopyBufferSubData = jniAccessors.getStaticMethodIDOf(
      _classRef, "glCopyBufferSubData", "(IIIII)V");

  /// from: static public native void glCopyBufferSubData(int readTarget, int writeTarget, int readOffset, int writeOffset, int size)
  static void glCopyBufferSubData(int readTarget, int writeTarget,
          int readOffset, int writeOffset, int size) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glCopyBufferSubData,
          jni.JniType.voidType,
          [readTarget, writeTarget, readOffset, writeOffset, size]).check();

  static final _id_glGetUniformIndices = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetUniformIndices", "(I[Ljava/lang/String;[II)V");

  /// from: static public native void glGetUniformIndices(int program, java.lang.String[] uniformNames, int[] uniformIndices, int uniformIndicesOffset)
  static void glGetUniformIndices(int program, jni.JniObject uniformNames,
          jni.JniObject uniformIndices, int uniformIndicesOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetUniformIndices, jni.JniType.voidType, [
        program,
        uniformNames.reference,
        uniformIndices.reference,
        uniformIndicesOffset
      ]).check();

  static final _id_glGetUniformIndices1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "glGetUniformIndices",
      "(I[Ljava/lang/String;Ljava/nio/IntBuffer;)V");

  /// from: static public native void glGetUniformIndices(int program, java.lang.String[] uniformNames, java.nio.IntBuffer uniformIndices)
  static void glGetUniformIndices1(int program, jni.JniObject uniformNames,
          jni.JniObject uniformIndices) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetUniformIndices1,
          jni.JniType.voidType,
          [program, uniformNames.reference, uniformIndices.reference]).check();

  static final _id_glGetActiveUniformsiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetActiveUniformsiv", "(II[III[II)V");

  /// from: static public native void glGetActiveUniformsiv(int program, int uniformCount, int[] uniformIndices, int uniformIndicesOffset, int pname, int[] params, int paramsOffset)
  static void glGetActiveUniformsiv(
          int program,
          int uniformCount,
          jni.JniObject uniformIndices,
          int uniformIndicesOffset,
          int pname,
          jni.JniObject params,
          int paramsOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetActiveUniformsiv, jni.JniType.voidType, [
        program,
        uniformCount,
        uniformIndices.reference,
        uniformIndicesOffset,
        pname,
        params.reference,
        paramsOffset
      ]).check();

  static final _id_glGetActiveUniformsiv1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "glGetActiveUniformsiv",
      "(IILjava/nio/IntBuffer;ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetActiveUniformsiv(int program, int uniformCount, java.nio.IntBuffer uniformIndices, int pname, java.nio.IntBuffer params)
  static void glGetActiveUniformsiv1(int program, int uniformCount,
          jni.JniObject uniformIndices, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetActiveUniformsiv1, jni.JniType.voidType, [
        program,
        uniformCount,
        uniformIndices.reference,
        pname,
        params.reference
      ]).check();

  static final _id_glGetUniformBlockIndex = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetUniformBlockIndex", "(ILjava/lang/String;)I");

  /// from: static public native int glGetUniformBlockIndex(int program, java.lang.String uniformBlockName)
  static int glGetUniformBlockIndex(
          int program, jni.JniString uniformBlockName) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetUniformBlockIndex,
          jni.JniType.intType,
          [program, uniformBlockName.reference]).integer;

  static final _id_glGetActiveUniformBlockiv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetActiveUniformBlockiv", "(III[II)V");

  /// from: static public native void glGetActiveUniformBlockiv(int program, int uniformBlockIndex, int pname, int[] params, int offset)
  static void glGetActiveUniformBlockiv(int program, int uniformBlockIndex,
          int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetActiveUniformBlockiv, jni.JniType.voidType, [
        program,
        uniformBlockIndex,
        pname,
        params.reference,
        offset
      ]).check();

  static final _id_glGetActiveUniformBlockiv1 =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glGetActiveUniformBlockiv", "(IIILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetActiveUniformBlockiv(int program, int uniformBlockIndex, int pname, java.nio.IntBuffer params)
  static void glGetActiveUniformBlockiv1(int program, int uniformBlockIndex,
          int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetActiveUniformBlockiv1,
          jni.JniType.voidType,
          [program, uniformBlockIndex, pname, params.reference]).check();

  static final _id_glGetActiveUniformBlockName =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glGetActiveUniformBlockName", "(III[II[BI)V");

  /// from: static public native void glGetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, int[] length, int lengthOffset, byte[] uniformBlockName, int uniformBlockNameOffset)
  static void glGetActiveUniformBlockName(
          int program,
          int uniformBlockIndex,
          int bufSize,
          jni.JniObject length,
          int lengthOffset,
          jni.JniObject uniformBlockName,
          int uniformBlockNameOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetActiveUniformBlockName, jni.JniType.voidType, [
        program,
        uniformBlockIndex,
        bufSize,
        length.reference,
        lengthOffset,
        uniformBlockName.reference,
        uniformBlockNameOffset
      ]).check();

  static final _id_glGetActiveUniformBlockName1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetActiveUniformBlockName",
          "(IILjava/nio/Buffer;Ljava/nio/Buffer;)V");

  /// from: static public native void glGetActiveUniformBlockName(int program, int uniformBlockIndex, java.nio.Buffer length, java.nio.Buffer uniformBlockName)
  static void glGetActiveUniformBlockName1(int program, int uniformBlockIndex,
          jni.JniObject length, jni.JniObject uniformBlockName) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetActiveUniformBlockName1, jni.JniType.voidType, [
        program,
        uniformBlockIndex,
        length.reference,
        uniformBlockName.reference
      ]).check();

  static final _id_glGetActiveUniformBlockName2 =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glGetActiveUniformBlockName", "(II)Ljava/lang/String;");

  /// from: static public native java.lang.String glGetActiveUniformBlockName(int program, int uniformBlockIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString glGetActiveUniformBlockName2(
          int program, int uniformBlockIndex) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetActiveUniformBlockName2,
          jni.JniType.objectType,
          [program, uniformBlockIndex]).object);

  static final _id_glUniformBlockBinding = jniAccessors.getStaticMethodIDOf(
      _classRef, "glUniformBlockBinding", "(III)V");

  /// from: static public native void glUniformBlockBinding(int program, int uniformBlockIndex, int uniformBlockBinding)
  static void glUniformBlockBinding(
          int program, int uniformBlockIndex, int uniformBlockBinding) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glUniformBlockBinding,
          jni.JniType.voidType,
          [program, uniformBlockIndex, uniformBlockBinding]).check();

  static final _id_glDrawArraysInstanced = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDrawArraysInstanced", "(IIII)V");

  /// from: static public native void glDrawArraysInstanced(int mode, int first, int count, int instanceCount)
  static void glDrawArraysInstanced(
          int mode, int first, int count, int instanceCount) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDrawArraysInstanced,
          jni.JniType.voidType,
          [mode, first, count, instanceCount]).check();

  static final _id_glDrawElementsInstanced = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDrawElementsInstanced", "(IIILjava/nio/Buffer;I)V");

  /// from: static public native void glDrawElementsInstanced(int mode, int count, int type, java.nio.Buffer indices, int instanceCount)
  static void glDrawElementsInstanced(int mode, int count, int type,
          jni.JniObject indices, int instanceCount) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDrawElementsInstanced,
          jni.JniType.voidType,
          [mode, count, type, indices.reference, instanceCount]).check();

  static final _id_glDrawElementsInstanced1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDrawElementsInstanced", "(IIIII)V");

  /// from: static public native void glDrawElementsInstanced(int mode, int count, int type, int indicesOffset, int instanceCount)
  static void glDrawElementsInstanced1(int mode, int count, int type,
          int indicesOffset, int instanceCount) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDrawElementsInstanced1,
          jni.JniType.voidType,
          [mode, count, type, indicesOffset, instanceCount]).check();

  static final _id_glFenceSync =
      jniAccessors.getStaticMethodIDOf(_classRef, "glFenceSync", "(II)J");

  /// from: static public native long glFenceSync(int condition, int flags)
  static int glFenceSync(int condition, int flags) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glFenceSync,
          jni.JniType.longType, [condition, flags]).long;

  static final _id_glIsSync =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsSync", "(J)Z");

  /// from: static public native boolean glIsSync(long sync)
  static bool glIsSync(int sync0) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glIsSync, jni.JniType.booleanType, [sync0]).boolean;

  static final _id_glDeleteSync =
      jniAccessors.getStaticMethodIDOf(_classRef, "glDeleteSync", "(J)V");

  /// from: static public native void glDeleteSync(long sync)
  static void glDeleteSync(int sync0) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glDeleteSync, jni.JniType.voidType, [sync0]).check();

  static final _id_glClientWaitSync =
      jniAccessors.getStaticMethodIDOf(_classRef, "glClientWaitSync", "(JIJ)I");

  /// from: static public native int glClientWaitSync(long sync, int flags, long timeout)
  static int glClientWaitSync(int sync0, int flags, int timeout) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glClientWaitSync,
          jni.JniType.intType, [sync0, flags, timeout]).integer;

  static final _id_glWaitSync =
      jniAccessors.getStaticMethodIDOf(_classRef, "glWaitSync", "(JIJ)V");

  /// from: static public native void glWaitSync(long sync, int flags, long timeout)
  static void glWaitSync(int sync0, int flags, int timeout) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glWaitSync,
          jni.JniType.voidType, [sync0, flags, timeout]).check();

  static final _id_glGetInteger64v =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGetInteger64v", "(I[JI)V");

  /// from: static public native void glGetInteger64v(int pname, long[] params, int offset)
  static void glGetInteger64v(int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetInteger64v,
          jni.JniType.voidType, [pname, params.reference, offset]).check();

  static final _id_glGetInteger64v1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetInteger64v", "(ILjava/nio/LongBuffer;)V");

  /// from: static public native void glGetInteger64v(int pname, java.nio.LongBuffer params)
  static void glGetInteger64v1(int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetInteger64v1,
          jni.JniType.voidType, [pname, params.reference]).check();

  static final _id_glGetSynciv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetSynciv", "(JII[II[II)V");

  /// from: static public native void glGetSynciv(long sync, int pname, int bufSize, int[] length, int lengthOffset, int[] values, int valuesOffset)
  static void glGetSynciv(
          int sync0,
          int pname,
          int bufSize,
          jni.JniObject length,
          int lengthOffset,
          jni.JniObject values,
          int valuesOffset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetSynciv, jni.JniType.voidType, [
        sync0,
        pname,
        bufSize,
        length.reference,
        lengthOffset,
        values.reference,
        valuesOffset
      ]).check();

  static final _id_glGetSynciv1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "glGetSynciv", "(JIILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)V");

  /// from: static public native void glGetSynciv(long sync, int pname, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer values)
  static void glGetSynciv1(int sync0, int pname, int bufSize,
          jni.JniObject length, jni.JniObject values) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetSynciv1,
          jni.JniType.voidType,
          [sync0, pname, bufSize, length.reference, values.reference]).check();

  static final _id_glGetInteger64i_v = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetInteger64i_v", "(II[JI)V");

  /// from: static public native void glGetInteger64i_v(int target, int index, long[] data, int offset)
  static void glGetInteger64i_v(
          int target, int index, jni.JniObject data, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetInteger64i_v,
          jni.JniType.voidType,
          [target, index, data.reference, offset]).check();

  static final _id_glGetInteger64i_v1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetInteger64i_v", "(IILjava/nio/LongBuffer;)V");

  /// from: static public native void glGetInteger64i_v(int target, int index, java.nio.LongBuffer data)
  static void glGetInteger64i_v1(int target, int index, jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGetInteger64i_v1,
          jni.JniType.voidType, [target, index, data.reference]).check();

  static final _id_glGetBufferParameteri64v = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetBufferParameteri64v", "(II[JI)V");

  /// from: static public native void glGetBufferParameteri64v(int target, int pname, long[] params, int offset)
  static void glGetBufferParameteri64v(
          int target, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetBufferParameteri64v,
          jni.JniType.voidType,
          [target, pname, params.reference, offset]).check();

  static final _id_glGetBufferParameteri64v1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetBufferParameteri64v", "(IILjava/nio/LongBuffer;)V");

  /// from: static public native void glGetBufferParameteri64v(int target, int pname, java.nio.LongBuffer params)
  static void glGetBufferParameteri64v1(
          int target, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetBufferParameteri64v1,
          jni.JniType.voidType,
          [target, pname, params.reference]).check();

  static final _id_glGenSamplers =
      jniAccessors.getStaticMethodIDOf(_classRef, "glGenSamplers", "(I[II)V");

  /// from: static public native void glGenSamplers(int count, int[] samplers, int offset)
  static void glGenSamplers(int count, jni.JniObject samplers, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenSamplers,
          jni.JniType.voidType, [count, samplers.reference, offset]).check();

  static final _id_glGenSamplers1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenSamplers", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGenSamplers(int count, java.nio.IntBuffer samplers)
  static void glGenSamplers1(int count, jni.JniObject samplers) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glGenSamplers1,
          jni.JniType.voidType, [count, samplers.reference]).check();

  static final _id_glDeleteSamplers = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteSamplers", "(I[II)V");

  /// from: static public native void glDeleteSamplers(int count, int[] samplers, int offset)
  static void glDeleteSamplers(int count, jni.JniObject samplers, int offset) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteSamplers,
          jni.JniType.voidType, [count, samplers.reference, offset]).check();

  static final _id_glDeleteSamplers1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glDeleteSamplers", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDeleteSamplers(int count, java.nio.IntBuffer samplers)
  static void glDeleteSamplers1(int count, jni.JniObject samplers) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glDeleteSamplers1,
          jni.JniType.voidType, [count, samplers.reference]).check();

  static final _id_glIsSampler =
      jniAccessors.getStaticMethodIDOf(_classRef, "glIsSampler", "(I)Z");

  /// from: static public native boolean glIsSampler(int sampler)
  static bool glIsSampler(int sampler) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_glIsSampler, jni.JniType.booleanType, [sampler]).boolean;

  static final _id_glBindSampler =
      jniAccessors.getStaticMethodIDOf(_classRef, "glBindSampler", "(II)V");

  /// from: static public native void glBindSampler(int unit, int sampler)
  static void glBindSampler(int unit, int sampler) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glBindSampler,
          jni.JniType.voidType, [unit, sampler]).check();

  static final _id_glSamplerParameteri = jniAccessors.getStaticMethodIDOf(
      _classRef, "glSamplerParameteri", "(III)V");

  /// from: static public native void glSamplerParameteri(int sampler, int pname, int param)
  static void glSamplerParameteri(int sampler, int pname, int param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glSamplerParameteri,
          jni.JniType.voidType, [sampler, pname, param]).check();

  static final _id_glSamplerParameteriv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glSamplerParameteriv", "(II[II)V");

  /// from: static public native void glSamplerParameteriv(int sampler, int pname, int[] param, int offset)
  static void glSamplerParameteriv(
          int sampler, int pname, jni.JniObject param, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glSamplerParameteriv,
          jni.JniType.voidType,
          [sampler, pname, param.reference, offset]).check();

  static final _id_glSamplerParameteriv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glSamplerParameteriv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glSamplerParameteriv(int sampler, int pname, java.nio.IntBuffer param)
  static void glSamplerParameteriv1(
          int sampler, int pname, jni.JniObject param) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glSamplerParameteriv1,
          jni.JniType.voidType,
          [sampler, pname, param.reference]).check();

  static final _id_glSamplerParameterf = jniAccessors.getStaticMethodIDOf(
      _classRef, "glSamplerParameterf", "(IIF)V");

  /// from: static public native void glSamplerParameterf(int sampler, int pname, float param)
  static void glSamplerParameterf(int sampler, int pname, double param) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glSamplerParameterf,
          jni.JniType.voidType, [sampler, pname, param]).check();

  static final _id_glSamplerParameterfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glSamplerParameterfv", "(II[FI)V");

  /// from: static public native void glSamplerParameterfv(int sampler, int pname, float[] param, int offset)
  static void glSamplerParameterfv(
          int sampler, int pname, jni.JniObject param, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glSamplerParameterfv,
          jni.JniType.voidType,
          [sampler, pname, param.reference, offset]).check();

  static final _id_glSamplerParameterfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glSamplerParameterfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glSamplerParameterfv(int sampler, int pname, java.nio.FloatBuffer param)
  static void glSamplerParameterfv1(
          int sampler, int pname, jni.JniObject param) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glSamplerParameterfv1,
          jni.JniType.voidType,
          [sampler, pname, param.reference]).check();

  static final _id_glGetSamplerParameteriv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetSamplerParameteriv", "(II[II)V");

  /// from: static public native void glGetSamplerParameteriv(int sampler, int pname, int[] params, int offset)
  static void glGetSamplerParameteriv(
          int sampler, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetSamplerParameteriv,
          jni.JniType.voidType,
          [sampler, pname, params.reference, offset]).check();

  static final _id_glGetSamplerParameteriv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetSamplerParameteriv", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetSamplerParameteriv(int sampler, int pname, java.nio.IntBuffer params)
  static void glGetSamplerParameteriv1(
          int sampler, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetSamplerParameteriv1,
          jni.JniType.voidType,
          [sampler, pname, params.reference]).check();

  static final _id_glGetSamplerParameterfv = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetSamplerParameterfv", "(II[FI)V");

  /// from: static public native void glGetSamplerParameterfv(int sampler, int pname, float[] params, int offset)
  static void glGetSamplerParameterfv(
          int sampler, int pname, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetSamplerParameterfv,
          jni.JniType.voidType,
          [sampler, pname, params.reference, offset]).check();

  static final _id_glGetSamplerParameterfv1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetSamplerParameterfv", "(IILjava/nio/FloatBuffer;)V");

  /// from: static public native void glGetSamplerParameterfv(int sampler, int pname, java.nio.FloatBuffer params)
  static void glGetSamplerParameterfv1(
          int sampler, int pname, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetSamplerParameterfv1,
          jni.JniType.voidType,
          [sampler, pname, params.reference]).check();

  static final _id_glVertexAttribDivisor = jniAccessors.getStaticMethodIDOf(
      _classRef, "glVertexAttribDivisor", "(II)V");

  /// from: static public native void glVertexAttribDivisor(int index, int divisor)
  static void glVertexAttribDivisor(int index, int divisor) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glVertexAttribDivisor,
          jni.JniType.voidType,
          [index, divisor]).check();

  static final _id_glBindTransformFeedback = jniAccessors.getStaticMethodIDOf(
      _classRef, "glBindTransformFeedback", "(II)V");

  /// from: static public native void glBindTransformFeedback(int target, int id)
  static void glBindTransformFeedback(int target, int id) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glBindTransformFeedback,
          jni.JniType.voidType,
          [target, id]).check();

  static final _id_glDeleteTransformFeedbacks = jniAccessors
      .getStaticMethodIDOf(_classRef, "glDeleteTransformFeedbacks", "(I[II)V");

  /// from: static public native void glDeleteTransformFeedbacks(int n, int[] ids, int offset)
  static void glDeleteTransformFeedbacks(
          int n, jni.JniObject ids, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDeleteTransformFeedbacks,
          jni.JniType.voidType,
          [n, ids.reference, offset]).check();

  static final _id_glDeleteTransformFeedbacks1 =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glDeleteTransformFeedbacks", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glDeleteTransformFeedbacks(int n, java.nio.IntBuffer ids)
  static void glDeleteTransformFeedbacks1(int n, jni.JniObject ids) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glDeleteTransformFeedbacks1,
          jni.JniType.voidType,
          [n, ids.reference]).check();

  static final _id_glGenTransformFeedbacks = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenTransformFeedbacks", "(I[II)V");

  /// from: static public native void glGenTransformFeedbacks(int n, int[] ids, int offset)
  static void glGenTransformFeedbacks(int n, jni.JniObject ids, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGenTransformFeedbacks,
          jni.JniType.voidType,
          [n, ids.reference, offset]).check();

  static final _id_glGenTransformFeedbacks1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGenTransformFeedbacks", "(ILjava/nio/IntBuffer;)V");

  /// from: static public native void glGenTransformFeedbacks(int n, java.nio.IntBuffer ids)
  static void glGenTransformFeedbacks1(int n, jni.JniObject ids) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGenTransformFeedbacks1,
          jni.JniType.voidType,
          [n, ids.reference]).check();

  static final _id_glIsTransformFeedback = jniAccessors.getStaticMethodIDOf(
      _classRef, "glIsTransformFeedback", "(I)Z");

  /// from: static public native boolean glIsTransformFeedback(int id)
  static bool glIsTransformFeedback(int id) =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glIsTransformFeedback, jni.JniType.booleanType, [id]).boolean;

  static final _id_glPauseTransformFeedback = jniAccessors.getStaticMethodIDOf(
      _classRef, "glPauseTransformFeedback", "()V");

  /// from: static public native void glPauseTransformFeedback()
  static void glPauseTransformFeedback() =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glPauseTransformFeedback, jni.JniType.voidType, []).check();

  static final _id_glResumeTransformFeedback = jniAccessors.getStaticMethodIDOf(
      _classRef, "glResumeTransformFeedback", "()V");

  /// from: static public native void glResumeTransformFeedback()
  static void glResumeTransformFeedback() =>
      jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_glResumeTransformFeedback, jni.JniType.voidType, []).check();

  static final _id_glGetProgramBinary = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetProgramBinary", "(II[II[IILjava/nio/Buffer;)V");

  /// from: static public native void glGetProgramBinary(int program, int bufSize, int[] length, int lengthOffset, int[] binaryFormat, int binaryFormatOffset, java.nio.Buffer binary)
  static void glGetProgramBinary(
          int program,
          int bufSize,
          jni.JniObject length,
          int lengthOffset,
          jni.JniObject binaryFormat,
          int binaryFormatOffset,
          jni.JniObject binary) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetProgramBinary, jni.JniType.voidType, [
        program,
        bufSize,
        length.reference,
        lengthOffset,
        binaryFormat.reference,
        binaryFormatOffset,
        binary.reference
      ]).check();

  static final _id_glGetProgramBinary1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "glGetProgramBinary",
      "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/Buffer;)V");

  /// from: static public native void glGetProgramBinary(int program, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer binaryFormat, java.nio.Buffer binary)
  static void glGetProgramBinary1(
          int program,
          int bufSize,
          jni.JniObject length,
          jni.JniObject binaryFormat,
          jni.JniObject binary) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetProgramBinary1, jni.JniType.voidType, [
        program,
        bufSize,
        length.reference,
        binaryFormat.reference,
        binary.reference
      ]).check();

  static final _id_glProgramBinary = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramBinary", "(IILjava/nio/Buffer;I)V");

  /// from: static public native void glProgramBinary(int program, int binaryFormat, java.nio.Buffer binary, int length)
  static void glProgramBinary(
          int program, int binaryFormat, jni.JniObject binary, int length) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glProgramBinary,
          jni.JniType.voidType,
          [program, binaryFormat, binary.reference, length]).check();

  static final _id_glProgramParameteri = jniAccessors.getStaticMethodIDOf(
      _classRef, "glProgramParameteri", "(III)V");

  /// from: static public native void glProgramParameteri(int program, int pname, int value)
  static void glProgramParameteri(int program, int pname, int value) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_glProgramParameteri,
          jni.JniType.voidType, [program, pname, value]).check();

  static final _id_glInvalidateFramebuffer = jniAccessors.getStaticMethodIDOf(
      _classRef, "glInvalidateFramebuffer", "(II[II)V");

  /// from: static public native void glInvalidateFramebuffer(int target, int numAttachments, int[] attachments, int offset)
  static void glInvalidateFramebuffer(int target, int numAttachments,
          jni.JniObject attachments, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glInvalidateFramebuffer,
          jni.JniType.voidType,
          [target, numAttachments, attachments.reference, offset]).check();

  static final _id_glInvalidateFramebuffer1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glInvalidateFramebuffer", "(IILjava/nio/IntBuffer;)V");

  /// from: static public native void glInvalidateFramebuffer(int target, int numAttachments, java.nio.IntBuffer attachments)
  static void glInvalidateFramebuffer1(
          int target, int numAttachments, jni.JniObject attachments) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glInvalidateFramebuffer1,
          jni.JniType.voidType,
          [target, numAttachments, attachments.reference]).check();

  static final _id_glInvalidateSubFramebuffer =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "glInvalidateSubFramebuffer", "(II[IIIIII)V");

  /// from: static public native void glInvalidateSubFramebuffer(int target, int numAttachments, int[] attachments, int offset, int x, int y, int width, int height)
  static void glInvalidateSubFramebuffer(
          int target,
          int numAttachments,
          jni.JniObject attachments,
          int offset,
          int x,
          int y,
          int width,
          int height) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glInvalidateSubFramebuffer, jni.JniType.voidType, [
        target,
        numAttachments,
        attachments.reference,
        offset,
        x,
        y,
        width,
        height
      ]).check();

  static final _id_glInvalidateSubFramebuffer1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glInvalidateSubFramebuffer",
          "(IILjava/nio/IntBuffer;IIII)V");

  /// from: static public native void glInvalidateSubFramebuffer(int target, int numAttachments, java.nio.IntBuffer attachments, int x, int y, int width, int height)
  static void glInvalidateSubFramebuffer1(int target, int numAttachments,
          jni.JniObject attachments, int x, int y, int width, int height) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glInvalidateSubFramebuffer1, jni.JniType.voidType, [
        target,
        numAttachments,
        attachments.reference,
        x,
        y,
        width,
        height
      ]).check();

  static final _id_glTexStorage2D =
      jniAccessors.getStaticMethodIDOf(_classRef, "glTexStorage2D", "(IIIII)V");

  /// from: static public native void glTexStorage2D(int target, int levels, int internalformat, int width, int height)
  static void glTexStorage2D(
          int target, int levels, int internalformat, int width, int height) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexStorage2D,
          jni.JniType.voidType,
          [target, levels, internalformat, width, height]).check();

  static final _id_glTexStorage3D = jniAccessors.getStaticMethodIDOf(
      _classRef, "glTexStorage3D", "(IIIIII)V");

  /// from: static public native void glTexStorage3D(int target, int levels, int internalformat, int width, int height, int depth)
  static void glTexStorage3D(int target, int levels, int internalformat,
          int width, int height, int depth) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glTexStorage3D,
          jni.JniType.voidType,
          [target, levels, internalformat, width, height, depth]).check();

  static final _id_glGetInternalformativ = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetInternalformativ", "(IIII[II)V");

  /// from: static public native void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, int[] params, int offset)
  static void glGetInternalformativ(int target, int internalformat, int pname,
          int bufSize, jni.JniObject params, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_glGetInternalformativ, jni.JniType.voidType, [
        target,
        internalformat,
        pname,
        bufSize,
        params.reference,
        offset
      ]).check();

  static final _id_glGetInternalformativ1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "glGetInternalformativ", "(IIIILjava/nio/IntBuffer;)V");

  /// from: static public native void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, java.nio.IntBuffer params)
  static void glGetInternalformativ1(int target, int internalformat, int pname,
          int bufSize, jni.JniObject params) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glGetInternalformativ1,
          jni.JniType.voidType,
          [target, internalformat, pname, bufSize, params.reference]).check();

  static final _id_glReadPixels1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "glReadPixels", "(IIIIIII)V");

  /// from: static public native void glReadPixels(int x, int y, int width, int height, int format, int type, int offset)
  static void glReadPixels1(int x, int y, int width, int height, int format,
          int type, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_glReadPixels1,
          jni.JniType.voidType,
          [x, y, width, height, format, type, offset]).check();
}
