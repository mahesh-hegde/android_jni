// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.opengl.GLException
///
/// An exception class for OpenGL errors.
class GLException extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/opengl/GLException");
  GLException.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int error)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GLException(int error)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [error]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ILjava/lang/String;)V");

  /// from: public void <init>(int error, java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GLException.ctor1(int error, jni.JniString string)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [error, string.reference]).object);
}
