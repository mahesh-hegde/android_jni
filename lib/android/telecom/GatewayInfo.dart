// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../net/Uri.dart" as uri_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telecom.GatewayInfo
///
/// Encapsulated gateway address information for outgoing call. When calls are made, the system
/// provides a facility to specify two addresses for the call: one to display as the address being
/// dialed and a separate (gateway) address to actually dial. Telecom provides this information to
/// ConnectionServices when placing the call as an instance of {@code GatewayInfo}.
///
/// The data consists of an address to call, an address to display and the package name of the
/// service. This data is used in two ways:
/// <ol>
/// <li> Call the appropriate gateway address.
/// <li> Display information about how the call is being routed to the user.
/// </ol>
class GatewayInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telecom/GatewayInfo");
  GatewayInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telecom.GatewayInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The Parcelable interface.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;Landroid/net/Uri;Landroid/net/Uri;)V");

  /// from: public void <init>(java.lang.String packageName, android.net.Uri gatewayUri, android.net.Uri originalAddress)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GatewayInfo(
      jni.JniString packageName, uri_.Uri gatewayUri, uri_.Uri originalAddress)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          packageName.reference,
          gatewayUri.reference,
          originalAddress.reference
        ]).object);

  static final _id_getGatewayProviderPackageName = jniAccessors.getMethodIDOf(
      _classRef, "getGatewayProviderPackageName", "()Ljava/lang/String;");

  /// from: public java.lang.String getGatewayProviderPackageName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Package name of the gateway provider service that provided the gateway information.
  /// This can be used to identify the gateway address source and to load an appropriate icon when
  /// displaying gateway information in the in-call UI.
  jni.JniString getGatewayProviderPackageName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getGatewayProviderPackageName,
          jni.JniType.objectType, []).object);

  static final _id_getGatewayAddress = jniAccessors.getMethodIDOf(
      _classRef, "getGatewayAddress", "()Landroid/net/Uri;");

  /// from: public android.net.Uri getGatewayAddress()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the gateway address to dial when placing the call.
  uri_.Uri getGatewayAddress() =>
      uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getGatewayAddress, jni.JniType.objectType, []).object);

  static final _id_getOriginalAddress = jniAccessors.getMethodIDOf(
      _classRef, "getOriginalAddress", "()Landroid/net/Uri;");

  /// from: public android.net.Uri getOriginalAddress()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the address that the user is trying to connect to via the gateway.
  uri_.Uri getOriginalAddress() =>
      uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getOriginalAddress, jni.JniType.objectType, []).object);

  static final _id_isEmpty =
      jniAccessors.getMethodIDOf(_classRef, "isEmpty", "()Z");

  /// from: public boolean isEmpty()
  ///
  /// Indicates whether this {@code GatewayInfo} instance contains any data. A returned value of
  /// false indicates that no gateway number is being used for the call.
  bool isEmpty() => jniAccessors.callMethodWithArgs(
      reference, _id_isEmpty, jni.JniType.booleanType, []).boolean;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// {@inheritDoc}
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel destination, int flags)
  ///
  /// {@inheritDoc}
  void writeToParcel(parcel_.Parcel destination, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [destination.reference, flags]).check();
}
