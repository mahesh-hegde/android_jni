// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../content/ComponentName.dart" as componentname_;

import "../os/UserHandle.dart" as userhandle_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telecom.PhoneAccountHandle
///
/// The unique identifier for a PhoneAccount. A {@code PhoneAccountHandle} is made of two
/// parts:
/// <ul>
///  <li>The component name of the associated connection service.</li>
///  <li>A string identifier that is unique across {@code PhoneAccountHandle}s with the same
///      component name.</li>
/// </ul>
///
/// Note: This Class requires a non-null ComponentName and UserHandle to operate
/// properly. Passing in invalid parameters will generate a log warning.
///
/// See PhoneAccount, TelecomManager.
class PhoneAccountHandle extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telecom/PhoneAccountHandle");
  PhoneAccountHandle.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telecom.PhoneAccountHandle> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/ComponentName;Ljava/lang/String;)V");

  /// from: public void <init>(android.content.ComponentName componentName, java.lang.String id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param componentName This value must never be {@code null}.
  ///@param id This value must never be {@code null}.
  PhoneAccountHandle(
      componentname_.ComponentName componentName, jni.JniString id)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [componentName.reference, id.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/UserHandle;)V");

  /// from: public void <init>(android.content.ComponentName componentName, java.lang.String id, android.os.UserHandle userHandle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param componentName This value must never be {@code null}.
  ///@param id This value must never be {@code null}.
  ///@param userHandle This value must never be {@code null}.
  PhoneAccountHandle.ctor1(componentname_.ComponentName componentName,
      jni.JniString id, userhandle_.UserHandle userHandle)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          componentName.reference,
          id.reference,
          userHandle.reference
        ]).object);

  static final _id_getComponentName = jniAccessors.getMethodIDOf(
      _classRef, "getComponentName", "()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getComponentName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The {@code ComponentName} of the connection service which is responsible for making phone
  /// calls using this {@code PhoneAccountHandle}.
  ///@return A suitable {@code ComponentName}.
  componentname_.ComponentName getComponentName() =>
      componentname_.ComponentName.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getComponentName, jni.JniType.objectType, []).object);

  static final _id_getId =
      jniAccessors.getMethodIDOf(_classRef, "getId", "()Ljava/lang/String;");

  /// from: public java.lang.String getId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A string that uniquely distinguishes this particular {@code PhoneAccountHandle} from all the
  /// others supported by the connection service that created it.
  ///
  /// A connection service must select identifiers that are stable for the lifetime of
  /// their users' relationship with their service, across many Android devices. For example, a
  /// good set of identifiers might be the email addresses with which with users registered for
  /// their accounts with a particular service. Depending on how a service chooses to operate,
  /// a bad set of identifiers might be an increasing series of integers
  /// ({@code 0}, {@code 1}, {@code 2}, ...) that are generated locally on each phone and could
  /// collide with values generated on other phones or after a data wipe of a given phone.
  ///
  /// Important: A non-unique identifier could cause non-deterministic call-log backup/restore
  /// behavior.
  ///@return A service-specific unique identifier for this {@code PhoneAccountHandle}.
  jni.JniString getId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getId, jni.JniType.objectType, []).object);

  static final _id_getUserHandle = jniAccessors.getMethodIDOf(
      _classRef, "getUserHandle", "()Landroid/os/UserHandle;");

  /// from: public android.os.UserHandle getUserHandle()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the UserHandle to use when connecting to this PhoneAccount.
  userhandle_.UserHandle getUserHandle() =>
      userhandle_.UserHandle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUserHandle, jni.JniType.objectType, []).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object other)
  bool equals1(jni.JniObject other) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [other.reference]).boolean;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();
}
