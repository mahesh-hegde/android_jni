// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../bluetooth/BluetoothDevice.dart" as bluetoothdevice_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telecom.CallAudioState
///
/// Encapsulates the telecom audio state, including the current audio routing, supported audio
///  routing and mute.
class CallAudioState extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telecom/CallAudioState");
  CallAudioState.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telecom.CallAudioState> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Responsible for creating AudioState objects for deserialized Parcels.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int ROUTE_BLUETOOTH
  ///
  /// Direct the audio stream through Bluetooth.
  static const ROUTE_BLUETOOTH = 2;

  /// from: static public final int ROUTE_EARPIECE
  ///
  /// Direct the audio stream through the device's earpiece.
  static const ROUTE_EARPIECE = 1;

  /// from: static public final int ROUTE_SPEAKER
  ///
  /// Direct the audio stream through the device's speakerphone.
  static const ROUTE_SPEAKER = 8;

  /// from: static public final int ROUTE_WIRED_HEADSET
  ///
  /// Direct the audio stream through a wired headset.
  static const ROUTE_WIRED_HEADSET = 4;

  /// from: static public final int ROUTE_WIRED_OR_EARPIECE
  ///
  /// Direct the audio stream through the device's earpiece or wired headset if one is
  /// connected.
  static const ROUTE_WIRED_OR_EARPIECE = 5;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(ZII)V");

  /// from: public void <init>(boolean muted, int route, int supportedRouteMask)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for a CallAudioState object.
  ///@param muted {@code true} if the call is muted, {@code false} otherwise.
  ///@param route The current audio route being used.
  /// Allowed values:
  /// \#ROUTE_EARPIECE
  /// \#ROUTE_BLUETOOTH
  /// \#ROUTE_WIRED_HEADSET
  /// \#ROUTE_SPEAKER
  /// Value is either <code>0</code> or a combination of android.telecom.CallAudioState\#ROUTE_EARPIECE, android.telecom.CallAudioState\#ROUTE_BLUETOOTH, android.telecom.CallAudioState\#ROUTE_WIRED_HEADSET, and android.telecom.CallAudioState\#ROUTE_SPEAKER
  ///@param supportedRouteMask Bit mask of all routes supported by this call. This should be a
  /// bitwise combination of the following values:
  /// \#ROUTE_EARPIECE
  /// \#ROUTE_BLUETOOTH
  /// \#ROUTE_WIRED_HEADSET
  /// \#ROUTE_SPEAKER
  ///
  /// Value is either <code>0</code> or a combination of android.telecom.CallAudioState\#ROUTE_EARPIECE, android.telecom.CallAudioState\#ROUTE_BLUETOOTH, android.telecom.CallAudioState\#ROUTE_WIRED_HEADSET, and android.telecom.CallAudioState\#ROUTE_SPEAKER
  CallAudioState(bool muted, int route, int supportedRouteMask)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [muted, route, supportedRouteMask]).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_isMuted =
      jniAccessors.getMethodIDOf(_classRef, "isMuted", "()Z");

  /// from: public boolean isMuted()
  ///
  /// @return {@code true} if the call is muted, {@code false} otherwise.
  bool isMuted() => jniAccessors.callMethodWithArgs(
      reference, _id_isMuted, jni.JniType.booleanType, []).boolean;

  static final _id_getRoute =
      jniAccessors.getMethodIDOf(_classRef, "getRoute", "()I");

  /// from: public int getRoute()
  ///
  /// @return The current audio route being used.
  ///
  /// Value is either <code>0</code> or a combination of android.telecom.CallAudioState\#ROUTE_EARPIECE, android.telecom.CallAudioState\#ROUTE_BLUETOOTH, android.telecom.CallAudioState\#ROUTE_WIRED_HEADSET, and android.telecom.CallAudioState\#ROUTE_SPEAKER
  int getRoute() => jniAccessors.callMethodWithArgs(
      reference, _id_getRoute, jni.JniType.intType, []).integer;

  static final _id_getSupportedRouteMask =
      jniAccessors.getMethodIDOf(_classRef, "getSupportedRouteMask", "()I");

  /// from: public int getSupportedRouteMask()
  ///
  /// @return Bit mask of all routes supported by this call.
  ///
  /// Value is either <code>0</code> or a combination of android.telecom.CallAudioState\#ROUTE_EARPIECE, android.telecom.CallAudioState\#ROUTE_BLUETOOTH, android.telecom.CallAudioState\#ROUTE_WIRED_HEADSET, and android.telecom.CallAudioState\#ROUTE_SPEAKER
  int getSupportedRouteMask() => jniAccessors.callMethodWithArgs(
      reference, _id_getSupportedRouteMask, jni.JniType.intType, []).integer;

  static final _id_getActiveBluetoothDevice = jniAccessors.getMethodIDOf(
      _classRef,
      "getActiveBluetoothDevice",
      "()Landroid/bluetooth/BluetoothDevice;");

  /// from: public android.bluetooth.BluetoothDevice getActiveBluetoothDevice()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The BluetoothDevice through which audio is being routed.
  ///         Will not be {@code null} if \#getRoute() returns \#ROUTE_BLUETOOTH.
  bluetoothdevice_.BluetoothDevice getActiveBluetoothDevice() =>
      bluetoothdevice_.BluetoothDevice.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getActiveBluetoothDevice,
          jni.JniType.objectType, []).object);

  static final _id_getSupportedBluetoothDevices = jniAccessors.getMethodIDOf(
      _classRef, "getSupportedBluetoothDevices", "()Ljava/util/Collection;");

  /// from: public java.util.Collection<android.bluetooth.BluetoothDevice> getSupportedBluetoothDevices()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return List of BluetoothDevices that can be used for this call.
  jni.JniObject getSupportedBluetoothDevices() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSupportedBluetoothDevices, jni.JniType.objectType, []).object);

  static final _id_audioRouteToString = jniAccessors.getStaticMethodIDOf(
      _classRef, "audioRouteToString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String audioRouteToString(int route)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Converts the provided audio route into a human readable string representation.
  ///@param route to convert into a string.
  ///@return String representation of the provided audio route.
  static jni.JniString audioRouteToString(int route) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_audioRouteToString, jni.JniType.objectType, [route]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// {@inheritDoc}
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel destination, int flags)
  ///
  /// Writes AudioState object into a serializeable Parcel.
  void writeToParcel(parcel_.Parcel destination, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [destination.reference, flags]).check();
}
