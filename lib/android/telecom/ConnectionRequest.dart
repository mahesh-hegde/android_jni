// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "PhoneAccountHandle.dart" as phoneaccounthandle_;

import "../net/Uri.dart" as uri_;

import "../os/Bundle.dart" as bundle_;

import "Connection.dart" as connection_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telecom.ConnectionRequest
///
/// Simple data container encapsulating a request to some entity to
/// create a new Connection.
class ConnectionRequest extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telecom/ConnectionRequest");
  ConnectionRequest.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telecom.ConnectionRequest> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/telecom/PhoneAccountHandle;Landroid/net/Uri;Landroid/os/Bundle;)V");

  /// from: public void <init>(android.telecom.PhoneAccountHandle accountHandle, android.net.Uri handle, android.os.Bundle extras)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param accountHandle The accountHandle which should be used to place the call.
  ///@param handle The handle (e.g., phone number) to which the Connection is to connect.
  ///@param extras Application-specific extra data.
  ConnectionRequest(phoneaccounthandle_.PhoneAccountHandle accountHandle,
      uri_.Uri handle, bundle_.Bundle extras)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          accountHandle.reference,
          handle.reference,
          extras.reference
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/telecom/PhoneAccountHandle;Landroid/net/Uri;Landroid/os/Bundle;I)V");

  /// from: public void <init>(android.telecom.PhoneAccountHandle accountHandle, android.net.Uri handle, android.os.Bundle extras, int videoState)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param accountHandle The accountHandle which should be used to place the call.
  ///@param handle The handle (e.g., phone number) to which the Connection is to connect.
  ///@param extras Application-specific extra data.
  ///@param videoState Determines the video state for the connection.
  ConnectionRequest.ctor1(phoneaccounthandle_.PhoneAccountHandle accountHandle,
      uri_.Uri handle, bundle_.Bundle extras, int videoState)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          accountHandle.reference,
          handle.reference,
          extras.reference,
          videoState
        ]).object);

  static final _id_getAccountHandle = jniAccessors.getMethodIDOf(
      _classRef, "getAccountHandle", "()Landroid/telecom/PhoneAccountHandle;");

  /// from: public android.telecom.PhoneAccountHandle getAccountHandle()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The account which should be used to place the call.
  phoneaccounthandle_.PhoneAccountHandle getAccountHandle() =>
      phoneaccounthandle_.PhoneAccountHandle.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getAccountHandle,
              jni.JniType.objectType, []).object);

  static final _id_getAddress = jniAccessors.getMethodIDOf(
      _classRef, "getAddress", "()Landroid/net/Uri;");

  /// from: public android.net.Uri getAddress()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The handle (e.g., phone number) to which the Connection is to connect.
  uri_.Uri getAddress() => uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getAddress, jni.JniType.objectType, []).object);

  static final _id_getExtras = jniAccessors.getMethodIDOf(
      _classRef, "getExtras", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Application-specific extra data. Used for passing back information from an incoming
  /// call {@code Intent}, and for any proprietary extensions arranged between a client
  /// and servant {@code ConnectionService} which agree on a vocabulary for such data.
  bundle_.Bundle getExtras() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtras, jni.JniType.objectType, []).object);

  static final _id_getVideoState =
      jniAccessors.getMethodIDOf(_classRef, "getVideoState", "()I");

  /// from: public int getVideoState()
  ///
  /// Describes the video states supported by the client requesting the connection.
  /// Valid values: VideoProfile\#STATE_AUDIO_ONLY,
  /// VideoProfile\#STATE_BIDIRECTIONAL,
  /// VideoProfile\#STATE_TX_ENABLED,
  /// VideoProfile\#STATE_RX_ENABLED.
  ///@return The video state for the connection.
  int getVideoState() => jniAccessors.callMethodWithArgs(
      reference, _id_getVideoState, jni.JniType.intType, []).integer;

  static final _id_getRttTextStream = jniAccessors.getMethodIDOf(_classRef,
      "getRttTextStream", "()Landroid/telecom/Connection\$RttTextStream;");

  /// from: public android.telecom.Connection.RttTextStream getRttTextStream()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the android.telecom.Connection.RttTextStream object that should be used to
  /// send and receive RTT text to/from the in-call app.
  ///@return An instance of android.telecom.Connection.RttTextStream, or {@code null}
  /// if this connection request is not requesting an RTT session upon connection establishment.
  connection_.Connection_RttTextStream getRttTextStream() =>
      connection_.Connection_RttTextStream.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getRttTextStream,
              jni.JniType.objectType, []).object);

  static final _id_isRequestingRtt =
      jniAccessors.getMethodIDOf(_classRef, "isRequestingRtt", "()Z");

  /// from: public boolean isRequestingRtt()
  ///
  /// Convenience method for determining whether the ConnectionRequest is requesting an RTT session
  ///@return {@code true} if RTT is requested, {@code false} otherwise.
  bool isRequestingRtt() => jniAccessors.callMethodWithArgs(
      reference, _id_isRequestingRtt, jni.JniType.booleanType, []).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// {@inheritDoc}
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel destination, int flags)
  void writeToParcel(parcel_.Parcel destination, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [destination.reference, flags]).check();
}
