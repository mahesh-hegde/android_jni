// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "DisconnectCause.dart" as disconnectcause_;

import "../os/Handler.dart" as handler_;

import "StatusHints.dart" as statushints_;

import "../net/Uri.dart" as uri_;

import "../os/Bundle.dart" as bundle_;

import "CallAudioState.dart" as callaudiostate_;

import "RemoteConference.dart" as remoteconference_;

import "../view/Surface.dart" as surface_;

import "VideoProfile.dart" as videoprofile_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telecom.RemoteConnection
///
/// A connection provided to a ConnectionService by another {@code ConnectionService}
/// running in a different process.
///@see ConnectionService\#createRemoteOutgoingConnection(PhoneAccountHandle, ConnectionRequest)
///@see ConnectionService\#createRemoteIncomingConnection(PhoneAccountHandle, ConnectionRequest)
class RemoteConnection extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telecom/RemoteConnection");
  RemoteConnection.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/telecom/DisconnectCause;)V");

  /// from: void <init>(android.telecom.DisconnectCause disconnectCause)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a RemoteConnection which is used for failed connections. Note that using it for any
  /// "real" purpose will almost certainly fail. Callers should note the failure and act
  /// accordingly (moving on to another RemoteConnection, for example)
  ///@param disconnectCause The reason for the failed connection.
  ///@hide
  RemoteConnection(disconnectcause_.DisconnectCause disconnectCause)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [disconnectCause.reference]).object);

  static final _id_registerCallback = jniAccessors.getMethodIDOf(_classRef,
      "registerCallback", "(Landroid/telecom/RemoteConnection\$Callback;)V");

  /// from: public void registerCallback(android.telecom.RemoteConnection.Callback callback)
  ///
  /// Adds a callback to this {@code RemoteConnection}.
  ///@param callback A {@code Callback}.
  void registerCallback(RemoteConnection_Callback callback) =>
      jniAccessors.callMethodWithArgs(reference, _id_registerCallback,
          jni.JniType.voidType, [callback.reference]).check();

  static final _id_registerCallback1 = jniAccessors.getMethodIDOf(
      _classRef,
      "registerCallback",
      "(Landroid/telecom/RemoteConnection\$Callback;Landroid/os/Handler;)V");

  /// from: public void registerCallback(android.telecom.RemoteConnection.Callback callback, android.os.Handler handler)
  ///
  /// Adds a callback to this {@code RemoteConnection}.
  ///@param callback A {@code Callback}.
  ///@param handler A {@code Handler} which command and status changes will be delivered to.
  void registerCallback1(
          RemoteConnection_Callback callback, handler_.Handler handler) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_registerCallback1,
          jni.JniType.voidType,
          [callback.reference, handler.reference]).check();

  static final _id_unregisterCallback = jniAccessors.getMethodIDOf(_classRef,
      "unregisterCallback", "(Landroid/telecom/RemoteConnection\$Callback;)V");

  /// from: public void unregisterCallback(android.telecom.RemoteConnection.Callback callback)
  ///
  /// Removes a callback from this {@code RemoteConnection}.
  ///@param callback A {@code Callback}.
  void unregisterCallback(RemoteConnection_Callback callback) =>
      jniAccessors.callMethodWithArgs(reference, _id_unregisterCallback,
          jni.JniType.voidType, [callback.reference]).check();

  static final _id_getState =
      jniAccessors.getMethodIDOf(_classRef, "getState", "()I");

  /// from: public int getState()
  ///
  /// Obtains the state of this {@code RemoteConnection}.
  ///@return A state value, chosen from the {@code STATE_*} constants.
  int getState() => jniAccessors.callMethodWithArgs(
      reference, _id_getState, jni.JniType.intType, []).integer;

  static final _id_getDisconnectCause = jniAccessors.getMethodIDOf(
      _classRef, "getDisconnectCause", "()Landroid/telecom/DisconnectCause;");

  /// from: public android.telecom.DisconnectCause getDisconnectCause()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Obtains the reason why this {@code RemoteConnection} may have been disconnected.
  ///@return For a Connection\#STATE_DISCONNECTED {@code RemoteConnection}, the
  ///         disconnect cause expressed as a code chosen from among those declared in
  ///         DisconnectCause.
  disconnectcause_.DisconnectCause getDisconnectCause() =>
      disconnectcause_.DisconnectCause.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisconnectCause,
          jni.JniType.objectType, []).object);

  static final _id_getConnectionCapabilities =
      jniAccessors.getMethodIDOf(_classRef, "getConnectionCapabilities", "()I");

  /// from: public int getConnectionCapabilities()
  ///
  /// Obtains the capabilities of this {@code RemoteConnection}.
  ///@return A bitmask of the capabilities of the {@code RemoteConnection}, as defined in
  ///         the {@code CAPABILITY_*} constants in class Connection.
  int getConnectionCapabilities() => jniAccessors.callMethodWithArgs(reference,
      _id_getConnectionCapabilities, jni.JniType.intType, []).integer;

  static final _id_getConnectionProperties =
      jniAccessors.getMethodIDOf(_classRef, "getConnectionProperties", "()I");

  /// from: public int getConnectionProperties()
  ///
  /// Obtains the properties of this {@code RemoteConnection}.
  ///@return A bitmask of the properties of the {@code RemoteConnection}, as defined in the
  ///         {@code PROPERTY_*} constants in class Connection.
  int getConnectionProperties() => jniAccessors.callMethodWithArgs(
      reference, _id_getConnectionProperties, jni.JniType.intType, []).integer;

  static final _id_isVoipAudioMode =
      jniAccessors.getMethodIDOf(_classRef, "isVoipAudioMode", "()Z");

  /// from: public boolean isVoipAudioMode()
  ///
  /// Determines if the audio mode of this {@code RemoteConnection} is VOIP.
  ///@return {@code true} if the {@code RemoteConnection}'s current audio mode is VOIP.
  bool isVoipAudioMode() => jniAccessors.callMethodWithArgs(
      reference, _id_isVoipAudioMode, jni.JniType.booleanType, []).boolean;

  static final _id_getStatusHints = jniAccessors.getMethodIDOf(
      _classRef, "getStatusHints", "()Landroid/telecom/StatusHints;");

  /// from: public android.telecom.StatusHints getStatusHints()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Obtains status hints pertaining to this {@code RemoteConnection}.
  ///@return The current StatusHints of this {@code RemoteConnection},
  ///         or {@code null} if none have been set.
  statushints_.StatusHints getStatusHints() =>
      statushints_.StatusHints.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getStatusHints, jni.JniType.objectType, []).object);

  static final _id_getAddress = jniAccessors.getMethodIDOf(
      _classRef, "getAddress", "()Landroid/net/Uri;");

  /// from: public android.net.Uri getAddress()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Obtains the address of this {@code RemoteConnection}.
  ///@return The address (e.g., phone number) to which the {@code RemoteConnection}
  ///         is currently connected.
  uri_.Uri getAddress() => uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getAddress, jni.JniType.objectType, []).object);

  static final _id_getAddressPresentation =
      jniAccessors.getMethodIDOf(_classRef, "getAddressPresentation", "()I");

  /// from: public int getAddressPresentation()
  ///
  /// Obtains the presentation requirements for the address of this {@code RemoteConnection}.
  ///@return The presentation requirements for the address. See
  ///         TelecomManager for valid values.
  int getAddressPresentation() => jniAccessors.callMethodWithArgs(
      reference, _id_getAddressPresentation, jni.JniType.intType, []).integer;

  static final _id_getCallerDisplayName = jniAccessors.getMethodIDOf(
      _classRef, "getCallerDisplayName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getCallerDisplayName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Obtains the display name for this {@code RemoteConnection}'s caller.
  ///@return The display name for the caller.
  jni.JniObject getCallerDisplayName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getCallerDisplayName, jni.JniType.objectType, []).object);

  static final _id_getCallerDisplayNamePresentation = jniAccessors
      .getMethodIDOf(_classRef, "getCallerDisplayNamePresentation", "()I");

  /// from: public int getCallerDisplayNamePresentation()
  ///
  /// Obtains the presentation requirements for this {@code RemoteConnection}'s
  /// caller's display name.
  ///@return The presentation requirements for the caller display name. See
  ///         TelecomManager for valid values.
  int getCallerDisplayNamePresentation() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getCallerDisplayNamePresentation,
      jni.JniType.intType, []).integer;

  static final _id_getVideoState =
      jniAccessors.getMethodIDOf(_classRef, "getVideoState", "()I");

  /// from: public int getVideoState()
  ///
  /// Obtains the video state of this {@code RemoteConnection}.
  ///@return The video state of the {@code RemoteConnection}. See VideoProfile.
  int getVideoState() => jniAccessors.callMethodWithArgs(
      reference, _id_getVideoState, jni.JniType.intType, []).integer;

  static final _id_getVideoProvider = jniAccessors.getMethodIDOf(
      _classRef,
      "getVideoProvider",
      "()Landroid/telecom/RemoteConnection\$VideoProvider;");

  /// from: public android.telecom.RemoteConnection.VideoProvider getVideoProvider()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Obtains the video provider of this {@code RemoteConnection}.
  ///@return The video provider associated with this {@code RemoteConnection}.
  RemoteConnection_VideoProvider getVideoProvider() =>
      RemoteConnection_VideoProvider.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getVideoProvider, jni.JniType.objectType, []).object);

  static final _id_getExtras = jniAccessors.getMethodIDOf(
      _classRef, "getExtras", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Obtain the extras associated with this {@code RemoteConnection}.
  ///@return The extras for this connection.
  bundle_.Bundle getExtras() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtras, jni.JniType.objectType, []).object);

  static final _id_isRingbackRequested =
      jniAccessors.getMethodIDOf(_classRef, "isRingbackRequested", "()Z");

  /// from: public boolean isRingbackRequested()
  ///
  /// Determines whether this {@code RemoteConnection} is requesting ringback.
  ///@return Whether the {@code RemoteConnection} is requesting that the framework play a
  ///         ringback tone on its behalf.
  bool isRingbackRequested() => jniAccessors.callMethodWithArgs(
      reference, _id_isRingbackRequested, jni.JniType.booleanType, []).boolean;

  static final _id_abort =
      jniAccessors.getMethodIDOf(_classRef, "abort", "()V");

  /// from: public void abort()
  ///
  /// Instructs this {@code RemoteConnection} to abort.
  void abort() => jniAccessors.callMethodWithArgs(
      reference, _id_abort, jni.JniType.voidType, []).check();

  static final _id_answer =
      jniAccessors.getMethodIDOf(_classRef, "answer", "()V");

  /// from: public void answer()
  ///
  /// Instructs this Connection\#STATE_RINGING {@code RemoteConnection} to answer.
  void answer() => jniAccessors.callMethodWithArgs(
      reference, _id_answer, jni.JniType.voidType, []).check();

  static final _id_reject =
      jniAccessors.getMethodIDOf(_classRef, "reject", "()V");

  /// from: public void reject()
  ///
  /// Instructs this Connection\#STATE_RINGING {@code RemoteConnection} to reject.
  void reject() => jniAccessors.callMethodWithArgs(
      reference, _id_reject, jni.JniType.voidType, []).check();

  static final _id_hold = jniAccessors.getMethodIDOf(_classRef, "hold", "()V");

  /// from: public void hold()
  ///
  /// Instructs this {@code RemoteConnection} to go on hold.
  void hold() => jniAccessors.callMethodWithArgs(
      reference, _id_hold, jni.JniType.voidType, []).check();

  static final _id_unhold =
      jniAccessors.getMethodIDOf(_classRef, "unhold", "()V");

  /// from: public void unhold()
  ///
  /// Instructs this Connection\#STATE_HOLDING call to release from hold.
  void unhold() => jniAccessors.callMethodWithArgs(
      reference, _id_unhold, jni.JniType.voidType, []).check();

  static final _id_disconnect =
      jniAccessors.getMethodIDOf(_classRef, "disconnect", "()V");

  /// from: public void disconnect()
  ///
  /// Instructs this {@code RemoteConnection} to disconnect.
  void disconnect() => jniAccessors.callMethodWithArgs(
      reference, _id_disconnect, jni.JniType.voidType, []).check();

  static final _id_playDtmfTone =
      jniAccessors.getMethodIDOf(_classRef, "playDtmfTone", "(C)V");

  /// from: public void playDtmfTone(char digit)
  ///
  /// Instructs this {@code RemoteConnection} to play a dual-tone multi-frequency signaling
  /// (DTMF) tone.
  ///
  /// Any other currently playing DTMF tone in the specified call is immediately stopped.
  ///@param digit A character representing the DTMF digit for which to play the tone. This
  ///         value must be one of {@code '0'} through {@code '9'}, {@code '*'} or {@code '\#'}.
  void playDtmfTone(int digit) => jniAccessors.callMethodWithArgs(
      reference, _id_playDtmfTone, jni.JniType.voidType, [digit]).check();

  static final _id_stopDtmfTone =
      jniAccessors.getMethodIDOf(_classRef, "stopDtmfTone", "()V");

  /// from: public void stopDtmfTone()
  ///
  /// Instructs this {@code RemoteConnection} to stop any dual-tone multi-frequency signaling
  /// (DTMF) tone currently playing.
  ///
  /// DTMF tones are played by calling \#playDtmfTone(char). If no DTMF tone is
  /// currently playing, this method will do nothing.
  void stopDtmfTone() => jniAccessors.callMethodWithArgs(
      reference, _id_stopDtmfTone, jni.JniType.voidType, []).check();

  static final _id_postDialContinue =
      jniAccessors.getMethodIDOf(_classRef, "postDialContinue", "(Z)V");

  /// from: public void postDialContinue(boolean proceed)
  ///
  /// Instructs this {@code RemoteConnection} to continue playing a post-dial DTMF string.
  ///
  /// A post-dial DTMF string is a string of digits following the first instance of either
  /// TelecomManager\#DTMF_CHARACTER_WAIT or TelecomManager\#DTMF_CHARACTER_PAUSE.
  /// These digits are immediately sent as DTMF tones to the recipient as soon as the
  /// connection is made.
  ///
  /// If the DTMF string contains a TelecomManager\#DTMF_CHARACTER_PAUSE symbol, this
  /// {@code RemoteConnection} will temporarily pause playing the tones for a pre-defined period
  /// of time.
  ///
  /// If the DTMF string contains a TelecomManager\#DTMF_CHARACTER_WAIT symbol, this
  /// {@code RemoteConnection} will pause playing the tones and notify callbacks via
  /// Callback\#onPostDialWait(RemoteConnection, String). At this point, the in-call app
  /// should display to the user an indication of this state and an affordance to continue
  /// the postdial sequence. When the user decides to continue the postdial sequence, the in-call
  /// app should invoke the \#postDialContinue(boolean) method.
  ///@param proceed Whether or not to continue with the post-dial sequence.
  void postDialContinue(bool proceed) => jniAccessors.callMethodWithArgs(
      reference, _id_postDialContinue, jni.JniType.voidType, [proceed]).check();

  static final _id_pullExternalCall =
      jniAccessors.getMethodIDOf(_classRef, "pullExternalCall", "()V");

  /// from: public void pullExternalCall()
  ///
  /// Instructs this RemoteConnection to pull itself to the local device.
  ///
  /// See Call\#pullExternalCall() for more information.
  void pullExternalCall() => jniAccessors.callMethodWithArgs(
      reference, _id_pullExternalCall, jni.JniType.voidType, []).check();

  static final _id_setCallAudioState = jniAccessors.getMethodIDOf(
      _classRef, "setCallAudioState", "(Landroid/telecom/CallAudioState;)V");

  /// from: public void setCallAudioState(android.telecom.CallAudioState state)
  ///
  /// Set the audio state of this {@code RemoteConnection}.
  ///@param state The audio state of this {@code RemoteConnection}.
  void setCallAudioState(callaudiostate_.CallAudioState state) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCallAudioState,
          jni.JniType.voidType, [state.reference]).check();

  static final _id_getConferenceableConnections = jniAccessors.getMethodIDOf(
      _classRef, "getConferenceableConnections", "()Ljava/util/List;");

  /// from: public java.util.List<android.telecom.RemoteConnection> getConferenceableConnections()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Obtain the {@code RemoteConnection}s with which this {@code RemoteConnection} may be
  /// successfully asked to create a conference with.
  ///@return The {@code RemoteConnection}s with which this {@code RemoteConnection} may be
  ///         merged into a RemoteConference.
  jni.JniObject getConferenceableConnections() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getConferenceableConnections, jni.JniType.objectType, []).object);

  static final _id_getConference = jniAccessors.getMethodIDOf(
      _classRef, "getConference", "()Landroid/telecom/RemoteConference;");

  /// from: public android.telecom.RemoteConference getConference()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Obtain the {@code RemoteConference} that this {@code RemoteConnection} may be a part
  /// of, or {@code null} if there is no such {@code RemoteConference}.
  ///@return A {@code RemoteConference} or {@code null};
  remoteconference_.RemoteConference getConference() =>
      remoteconference_.RemoteConference.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getConference, jni.JniType.objectType, []).object);
}

/// from: android.telecom.RemoteConnection$VideoProvider
///
/// RemoteConnection.VideoProvider associated with a RemoteConnection.  Used to
/// receive video related events and control the video associated with a
/// RemoteConnection.
///@see Connection.VideoProvider
class RemoteConnection_VideoProvider extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/telecom/RemoteConnection\$VideoProvider");
  RemoteConnection_VideoProvider.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RemoteConnection_VideoProvider()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_registerCallback = jniAccessors.getMethodIDOf(
      _classRef,
      "registerCallback",
      "(Landroid/telecom/RemoteConnection\$VideoProvider\$Callback;)V");

  /// from: public void registerCallback(android.telecom.RemoteConnection.VideoProvider.Callback l)
  ///
  /// Registers a callback to receive commands and state changes for video calls.
  ///@param l The video call callback.
  void registerCallback(RemoteConnection_VideoProvider_Callback l) =>
      jniAccessors.callMethodWithArgs(reference, _id_registerCallback,
          jni.JniType.voidType, [l.reference]).check();

  static final _id_unregisterCallback = jniAccessors.getMethodIDOf(
      _classRef,
      "unregisterCallback",
      "(Landroid/telecom/RemoteConnection\$VideoProvider\$Callback;)V");

  /// from: public void unregisterCallback(android.telecom.RemoteConnection.VideoProvider.Callback l)
  ///
  /// Clears the video call callback set via \#registerCallback.
  ///@param l The video call callback to clear.
  void unregisterCallback(RemoteConnection_VideoProvider_Callback l) =>
      jniAccessors.callMethodWithArgs(reference, _id_unregisterCallback,
          jni.JniType.voidType, [l.reference]).check();

  static final _id_setCamera = jniAccessors.getMethodIDOf(
      _classRef, "setCamera", "(Ljava/lang/String;)V");

  /// from: public void setCamera(java.lang.String cameraId)
  ///
  /// Sets the camera to be used for the outgoing video for the
  /// RemoteConnection.VideoProvider.
  ///@param cameraId The id of the camera (use ids as reported by
  /// CameraManager\#getCameraIdList()).
  ///@see Connection.VideoProvider\#onSetCamera(String)
  void setCamera(jni.JniString cameraId) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCamera,
      jni.JniType.voidType,
      [cameraId.reference]).check();

  static final _id_setPreviewSurface = jniAccessors.getMethodIDOf(
      _classRef, "setPreviewSurface", "(Landroid/view/Surface;)V");

  /// from: public void setPreviewSurface(android.view.Surface surface)
  ///
  /// Sets the surface to be used for displaying a preview of what the user's camera is
  /// currently capturing for the RemoteConnection.VideoProvider.
  ///@param surface The Surface.
  ///@see Connection.VideoProvider\#onSetPreviewSurface(Surface)
  void setPreviewSurface(surface_.Surface surface) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPreviewSurface,
          jni.JniType.voidType, [surface.reference]).check();

  static final _id_setDisplaySurface = jniAccessors.getMethodIDOf(
      _classRef, "setDisplaySurface", "(Landroid/view/Surface;)V");

  /// from: public void setDisplaySurface(android.view.Surface surface)
  ///
  /// Sets the surface to be used for displaying the video received from the remote device for
  /// the RemoteConnection.VideoProvider.
  ///@param surface The Surface.
  ///@see Connection.VideoProvider\#onSetDisplaySurface(Surface)
  void setDisplaySurface(surface_.Surface surface) =>
      jniAccessors.callMethodWithArgs(reference, _id_setDisplaySurface,
          jni.JniType.voidType, [surface.reference]).check();

  static final _id_setDeviceOrientation =
      jniAccessors.getMethodIDOf(_classRef, "setDeviceOrientation", "(I)V");

  /// from: public void setDeviceOrientation(int rotation)
  ///
  /// Sets the device orientation, in degrees, for the RemoteConnection.VideoProvider.
  /// Assumes that a standard portrait orientation of the device is 0 degrees.
  ///@param rotation The device orientation, in degrees.
  ///@see Connection.VideoProvider\#onSetDeviceOrientation(int)
  void setDeviceOrientation(int rotation) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setDeviceOrientation,
      jni.JniType.voidType,
      [rotation]).check();

  static final _id_setZoom =
      jniAccessors.getMethodIDOf(_classRef, "setZoom", "(F)V");

  /// from: public void setZoom(float value)
  ///
  /// Sets camera zoom ratio for the RemoteConnection.VideoProvider.
  ///@param value The camera zoom ratio.
  ///@see Connection.VideoProvider\#onSetZoom(float)
  void setZoom(double value) => jniAccessors.callMethodWithArgs(
      reference, _id_setZoom, jni.JniType.voidType, [value]).check();

  static final _id_sendSessionModifyRequest = jniAccessors.getMethodIDOf(
      _classRef,
      "sendSessionModifyRequest",
      "(Landroid/telecom/VideoProfile;Landroid/telecom/VideoProfile;)V");

  /// from: public void sendSessionModifyRequest(android.telecom.VideoProfile fromProfile, android.telecom.VideoProfile toProfile)
  ///
  /// Issues a request to modify the properties of the current video session for the
  /// RemoteConnection.VideoProvider.
  ///@param fromProfile The video profile prior to the request.
  ///@param toProfile The video profile with the requested changes made.
  ///@see Connection.VideoProvider\#onSendSessionModifyRequest(VideoProfile, VideoProfile)
  void sendSessionModifyRequest(videoprofile_.VideoProfile fromProfile,
          videoprofile_.VideoProfile toProfile) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_sendSessionModifyRequest,
          jni.JniType.voidType,
          [fromProfile.reference, toProfile.reference]).check();

  static final _id_sendSessionModifyResponse = jniAccessors.getMethodIDOf(
      _classRef,
      "sendSessionModifyResponse",
      "(Landroid/telecom/VideoProfile;)V");

  /// from: public void sendSessionModifyResponse(android.telecom.VideoProfile responseProfile)
  ///
  /// Provides a response to a request to change the current call video session
  /// properties for the RemoteConnection.VideoProvider.
  ///@param responseProfile The response call video properties.
  ///@see Connection.VideoProvider\#onSendSessionModifyResponse(VideoProfile)
  void sendSessionModifyResponse(videoprofile_.VideoProfile responseProfile) =>
      jniAccessors.callMethodWithArgs(reference, _id_sendSessionModifyResponse,
          jni.JniType.voidType, [responseProfile.reference]).check();

  static final _id_requestCameraCapabilities =
      jniAccessors.getMethodIDOf(_classRef, "requestCameraCapabilities", "()V");

  /// from: public void requestCameraCapabilities()
  ///
  /// Issues a request to retrieve the capabilities of the current camera for the
  /// RemoteConnection.VideoProvider.
  ///@see Connection.VideoProvider\#onRequestCameraCapabilities()
  void requestCameraCapabilities() => jniAccessors.callMethodWithArgs(reference,
      _id_requestCameraCapabilities, jni.JniType.voidType, []).check();

  static final _id_requestCallDataUsage =
      jniAccessors.getMethodIDOf(_classRef, "requestCallDataUsage", "()V");

  /// from: public void requestCallDataUsage()
  ///
  /// Issues a request to retrieve the data usage (in bytes) of the video portion of the
  /// RemoteConnection for the RemoteConnection.VideoProvider.
  ///@see Connection.VideoProvider\#onRequestConnectionDataUsage()
  void requestCallDataUsage() => jniAccessors.callMethodWithArgs(
      reference, _id_requestCallDataUsage, jni.JniType.voidType, []).check();

  static final _id_setPauseImage = jniAccessors.getMethodIDOf(
      _classRef, "setPauseImage", "(Landroid/net/Uri;)V");

  /// from: public void setPauseImage(android.net.Uri uri)
  ///
  /// Sets the Uri of an image to be displayed to the peer device when the video signal
  /// is paused, for the RemoteConnection.VideoProvider.
  ///@see Connection.VideoProvider\#onSetPauseImage(Uri)
  void setPauseImage(uri_.Uri uri) => jniAccessors.callMethodWithArgs(reference,
      _id_setPauseImage, jni.JniType.voidType, [uri.reference]).check();
}

/// from: android.telecom.RemoteConnection$VideoProvider$Callback
///
/// Callback class used by the RemoteConnection.VideoProvider to relay events from
/// the Connection.VideoProvider.
class RemoteConnection_VideoProvider_Callback extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/telecom/RemoteConnection\$VideoProvider\$Callback");
  RemoteConnection_VideoProvider_Callback.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RemoteConnection_VideoProvider_Callback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onSessionModifyRequestReceived = jniAccessors.getMethodIDOf(
      _classRef,
      "onSessionModifyRequestReceived",
      "(Landroid/telecom/RemoteConnection\$VideoProvider;Landroid/telecom/VideoProfile;)V");

  /// from: public void onSessionModifyRequestReceived(android.telecom.RemoteConnection.VideoProvider videoProvider, android.telecom.VideoProfile videoProfile)
  ///
  /// Reports a session modification request received from the
  /// Connection.VideoProvider associated with a RemoteConnection.
  ///@param videoProvider The RemoteConnection.VideoProvider invoking this method.
  ///@param videoProfile The requested video call profile.
  ///@see InCallService.VideoCall.Callback\#onSessionModifyRequestReceived(VideoProfile)
  ///@see Connection.VideoProvider\#receiveSessionModifyRequest(VideoProfile)
  void onSessionModifyRequestReceived(
          RemoteConnection_VideoProvider videoProvider,
          videoprofile_.VideoProfile videoProfile) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onSessionModifyRequestReceived,
          jni.JniType.voidType,
          [videoProvider.reference, videoProfile.reference]).check();

  static final _id_onSessionModifyResponseReceived = jniAccessors.getMethodIDOf(
      _classRef,
      "onSessionModifyResponseReceived",
      "(Landroid/telecom/RemoteConnection\$VideoProvider;ILandroid/telecom/VideoProfile;Landroid/telecom/VideoProfile;)V");

  /// from: public void onSessionModifyResponseReceived(android.telecom.RemoteConnection.VideoProvider videoProvider, int status, android.telecom.VideoProfile requestedProfile, android.telecom.VideoProfile responseProfile)
  ///
  /// Reports a session modification response received from the
  /// Connection.VideoProvider associated with a RemoteConnection.
  ///@param videoProvider The RemoteConnection.VideoProvider invoking this method.
  ///@param status Status of the session modify request.
  ///@param requestedProfile The original request which was sent to the peer device.
  ///@param responseProfile The actual profile changes made by the peer device.
  ///@see InCallService.VideoCall.Callback\#onSessionModifyResponseReceived(int,
  ///      VideoProfile, VideoProfile)
  ///@see Connection.VideoProvider\#receiveSessionModifyResponse(int, VideoProfile,
  ///      VideoProfile)
  void onSessionModifyResponseReceived(
          RemoteConnection_VideoProvider videoProvider,
          int status,
          videoprofile_.VideoProfile requestedProfile,
          videoprofile_.VideoProfile responseProfile) =>
      jniAccessors.callMethodWithArgs(reference,
          _id_onSessionModifyResponseReceived, jni.JniType.voidType, [
        videoProvider.reference,
        status,
        requestedProfile.reference,
        responseProfile.reference
      ]).check();

  static final _id_onCallSessionEvent = jniAccessors.getMethodIDOf(
      _classRef,
      "onCallSessionEvent",
      "(Landroid/telecom/RemoteConnection\$VideoProvider;I)V");

  /// from: public void onCallSessionEvent(android.telecom.RemoteConnection.VideoProvider videoProvider, int event)
  ///
  /// Reports a call session event received from the Connection.VideoProvider
  /// associated with a RemoteConnection.
  ///@param videoProvider The RemoteConnection.VideoProvider invoking this method.
  ///@param event The event.
  ///@see InCallService.VideoCall.Callback\#onCallSessionEvent(int)
  ///@see Connection.VideoProvider\#handleCallSessionEvent(int)
  void onCallSessionEvent(
          RemoteConnection_VideoProvider videoProvider, int event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCallSessionEvent,
          jni.JniType.voidType, [videoProvider.reference, event]).check();

  static final _id_onPeerDimensionsChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onPeerDimensionsChanged",
      "(Landroid/telecom/RemoteConnection\$VideoProvider;II)V");

  /// from: public void onPeerDimensionsChanged(android.telecom.RemoteConnection.VideoProvider videoProvider, int width, int height)
  ///
  /// Reports a change in the peer video dimensions received from the
  /// Connection.VideoProvider associated with a RemoteConnection.
  ///@param videoProvider The RemoteConnection.VideoProvider invoking this method.
  ///@param width The updated peer video width.
  ///@param height The updated peer video height.
  ///@see InCallService.VideoCall.Callback\#onPeerDimensionsChanged(int, int)
  ///@see Connection.VideoProvider\#changePeerDimensions(int, int)
  void onPeerDimensionsChanged(RemoteConnection_VideoProvider videoProvider,
          int width, int height) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onPeerDimensionsChanged,
          jni.JniType.voidType,
          [videoProvider.reference, width, height]).check();

  static final _id_onCallDataUsageChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onCallDataUsageChanged",
      "(Landroid/telecom/RemoteConnection\$VideoProvider;J)V");

  /// from: public void onCallDataUsageChanged(android.telecom.RemoteConnection.VideoProvider videoProvider, long dataUsage)
  ///
  /// Reports a change in the data usage (in bytes) received from the
  /// Connection.VideoProvider associated with a RemoteConnection.
  ///@param videoProvider The RemoteConnection.VideoProvider invoking this method.
  ///@param dataUsage The updated data usage (in bytes).
  ///@see InCallService.VideoCall.Callback\#onCallDataUsageChanged(long)
  ///@see Connection.VideoProvider\#setCallDataUsage(long)
  void onCallDataUsageChanged(
          RemoteConnection_VideoProvider videoProvider, int dataUsage) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCallDataUsageChanged,
          jni.JniType.voidType, [videoProvider.reference, dataUsage]).check();

  static final _id_onCameraCapabilitiesChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onCameraCapabilitiesChanged",
      "(Landroid/telecom/RemoteConnection\$VideoProvider;Landroid/telecom/VideoProfile\$CameraCapabilities;)V");

  /// from: public void onCameraCapabilitiesChanged(android.telecom.RemoteConnection.VideoProvider videoProvider, android.telecom.VideoProfile.CameraCapabilities cameraCapabilities)
  ///
  /// Reports a change in the capabilities of the current camera, received from the
  /// Connection.VideoProvider associated with a RemoteConnection.
  ///@param videoProvider The RemoteConnection.VideoProvider invoking this method.
  ///@param cameraCapabilities The changed camera capabilities.
  ///@see InCallService.VideoCall.Callback\#onCameraCapabilitiesChanged(
  ///      VideoProfile.CameraCapabilities)
  ///@see Connection.VideoProvider\#changeCameraCapabilities(
  ///      VideoProfile.CameraCapabilities)
  void onCameraCapabilitiesChanged(RemoteConnection_VideoProvider videoProvider,
          videoprofile_.VideoProfile_CameraCapabilities cameraCapabilities) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onCameraCapabilitiesChanged,
          jni.JniType.voidType,
          [videoProvider.reference, cameraCapabilities.reference]).check();

  static final _id_onVideoQualityChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onVideoQualityChanged",
      "(Landroid/telecom/RemoteConnection\$VideoProvider;I)V");

  /// from: public void onVideoQualityChanged(android.telecom.RemoteConnection.VideoProvider videoProvider, int videoQuality)
  ///
  /// Reports a change in the video quality received from the
  /// Connection.VideoProvider associated with a RemoteConnection.
  ///@param videoProvider The RemoteConnection.VideoProvider invoking this method.
  ///@param videoQuality The updated peer video quality.
  ///@see InCallService.VideoCall.Callback\#onVideoQualityChanged(int)
  ///@see Connection.VideoProvider\#changeVideoQuality(int)
  void onVideoQualityChanged(
          RemoteConnection_VideoProvider videoProvider, int videoQuality) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onVideoQualityChanged,
          jni.JniType.voidType,
          [videoProvider.reference, videoQuality]).check();
}

/// from: android.telecom.RemoteConnection$Callback
///
/// Callback base class for RemoteConnection.
class RemoteConnection_Callback extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telecom/RemoteConnection\$Callback");
  RemoteConnection_Callback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RemoteConnection_Callback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onStateChanged = jniAccessors.getMethodIDOf(
      _classRef, "onStateChanged", "(Landroid/telecom/RemoteConnection;I)V");

  /// from: public void onStateChanged(android.telecom.RemoteConnection connection, int state)
  ///
  /// Invoked when the state of this {@code RemoteConnection} has changed. See
  /// \#getState().
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param state The new state of the {@code RemoteConnection}.
  void onStateChanged(RemoteConnection connection, int state) =>
      jniAccessors.callMethodWithArgs(reference, _id_onStateChanged,
          jni.JniType.voidType, [connection.reference, state]).check();

  static final _id_onDisconnected = jniAccessors.getMethodIDOf(
      _classRef,
      "onDisconnected",
      "(Landroid/telecom/RemoteConnection;Landroid/telecom/DisconnectCause;)V");

  /// from: public void onDisconnected(android.telecom.RemoteConnection connection, android.telecom.DisconnectCause disconnectCause)
  ///
  /// Invoked when this {@code RemoteConnection} is disconnected.
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param disconnectCause The ({@see DisconnectCause}) associated with this failed
  ///     connection.
  void onDisconnected(RemoteConnection connection,
          disconnectcause_.DisconnectCause disconnectCause) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onDisconnected,
          jni.JniType.voidType,
          [connection.reference, disconnectCause.reference]).check();

  static final _id_onRingbackRequested = jniAccessors.getMethodIDOf(_classRef,
      "onRingbackRequested", "(Landroid/telecom/RemoteConnection;Z)V");

  /// from: public void onRingbackRequested(android.telecom.RemoteConnection connection, boolean ringback)
  ///
  /// Invoked when this {@code RemoteConnection} is requesting ringback. See
  /// \#isRingbackRequested().
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param ringback Whether the {@code RemoteConnection} is requesting ringback.
  void onRingbackRequested(RemoteConnection connection, bool ringback) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRingbackRequested,
          jni.JniType.voidType, [connection.reference, ringback]).check();

  static final _id_onConnectionCapabilitiesChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onConnectionCapabilitiesChanged",
      "(Landroid/telecom/RemoteConnection;I)V");

  /// from: public void onConnectionCapabilitiesChanged(android.telecom.RemoteConnection connection, int connectionCapabilities)
  ///
  /// Indicates that the call capabilities of this {@code RemoteConnection} have changed.
  /// See \#getConnectionCapabilities().
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param connectionCapabilities The new capabilities of the {@code RemoteConnection}.
  void onConnectionCapabilitiesChanged(
          RemoteConnection connection, int connectionCapabilities) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onConnectionCapabilitiesChanged,
          jni.JniType.voidType,
          [connection.reference, connectionCapabilities]).check();

  static final _id_onConnectionPropertiesChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onConnectionPropertiesChanged",
      "(Landroid/telecom/RemoteConnection;I)V");

  /// from: public void onConnectionPropertiesChanged(android.telecom.RemoteConnection connection, int connectionProperties)
  ///
  /// Indicates that the call properties of this {@code RemoteConnection} have changed.
  /// See \#getConnectionProperties().
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param connectionProperties The new properties of the {@code RemoteConnection}.
  void onConnectionPropertiesChanged(
          RemoteConnection connection, int connectionProperties) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onConnectionPropertiesChanged,
          jni.JniType.voidType,
          [connection.reference, connectionProperties]).check();

  static final _id_onPostDialWait = jniAccessors.getMethodIDOf(
      _classRef,
      "onPostDialWait",
      "(Landroid/telecom/RemoteConnection;Ljava/lang/String;)V");

  /// from: public void onPostDialWait(android.telecom.RemoteConnection connection, java.lang.String remainingPostDialSequence)
  ///
  /// Invoked when the post-dial sequence in the outgoing {@code Connection} has reached a
  /// pause character. This causes the post-dial signals to stop pending user confirmation. An
  /// implementation should present this choice to the user and invoke
  /// RemoteConnection\#postDialContinue(boolean) when the user makes the choice.
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param remainingPostDialSequence The post-dial characters that remain to be sent.
  void onPostDialWait(RemoteConnection connection,
          jni.JniString remainingPostDialSequence) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onPostDialWait,
          jni.JniType.voidType,
          [connection.reference, remainingPostDialSequence.reference]).check();

  static final _id_onPostDialChar = jniAccessors.getMethodIDOf(
      _classRef, "onPostDialChar", "(Landroid/telecom/RemoteConnection;C)V");

  /// from: public void onPostDialChar(android.telecom.RemoteConnection connection, char nextChar)
  ///
  /// Invoked when the post-dial sequence in the outgoing {@code Connection} has processed
  /// a character.
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param nextChar The character being processed.
  void onPostDialChar(RemoteConnection connection, int nextChar) =>
      jniAccessors.callMethodWithArgs(reference, _id_onPostDialChar,
          jni.JniType.voidType, [connection.reference, nextChar]).check();

  static final _id_onVoipAudioChanged = jniAccessors.getMethodIDOf(_classRef,
      "onVoipAudioChanged", "(Landroid/telecom/RemoteConnection;Z)V");

  /// from: public void onVoipAudioChanged(android.telecom.RemoteConnection connection, boolean isVoip)
  ///
  /// Indicates that the VOIP audio status of this {@code RemoteConnection} has changed.
  /// See \#isVoipAudioMode().
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param isVoip Whether the new audio state of the {@code RemoteConnection} is VOIP.
  void onVoipAudioChanged(RemoteConnection connection, bool isVoip) =>
      jniAccessors.callMethodWithArgs(reference, _id_onVoipAudioChanged,
          jni.JniType.voidType, [connection.reference, isVoip]).check();

  static final _id_onStatusHintsChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onStatusHintsChanged",
      "(Landroid/telecom/RemoteConnection;Landroid/telecom/StatusHints;)V");

  /// from: public void onStatusHintsChanged(android.telecom.RemoteConnection connection, android.telecom.StatusHints statusHints)
  ///
  /// Indicates that the status hints of this {@code RemoteConnection} have changed. See
  /// \#getStatusHints() ()}.
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param statusHints The new status hints of the {@code RemoteConnection}.
  void onStatusHintsChanged(
          RemoteConnection connection, statushints_.StatusHints statusHints) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onStatusHintsChanged,
          jni.JniType.voidType,
          [connection.reference, statusHints.reference]).check();

  static final _id_onAddressChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onAddressChanged",
      "(Landroid/telecom/RemoteConnection;Landroid/net/Uri;I)V");

  /// from: public void onAddressChanged(android.telecom.RemoteConnection connection, android.net.Uri address, int presentation)
  ///
  /// Indicates that the address (e.g., phone number) of this {@code RemoteConnection} has
  /// changed. See \#getAddress() and \#getAddressPresentation().
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param address The new address of the {@code RemoteConnection}.
  ///@param presentation The presentation requirements for the address.
  ///        See TelecomManager for valid values.
  void onAddressChanged(
          RemoteConnection connection, uri_.Uri address, int presentation) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onAddressChanged,
          jni.JniType.voidType,
          [connection.reference, address.reference, presentation]).check();

  static final _id_onCallerDisplayNameChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onCallerDisplayNameChanged",
      "(Landroid/telecom/RemoteConnection;Ljava/lang/String;I)V");

  /// from: public void onCallerDisplayNameChanged(android.telecom.RemoteConnection connection, java.lang.String callerDisplayName, int presentation)
  ///
  /// Indicates that the caller display name of this {@code RemoteConnection} has changed.
  /// See \#getCallerDisplayName() and \#getCallerDisplayNamePresentation().
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param callerDisplayName The new caller display name of the {@code RemoteConnection}.
  ///@param presentation The presentation requirements for the handle.
  ///        See TelecomManager for valid values.
  void onCallerDisplayNameChanged(RemoteConnection connection,
          jni.JniString callerDisplayName, int presentation) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onCallerDisplayNameChanged, jni.JniType.voidType, [
        connection.reference,
        callerDisplayName.reference,
        presentation
      ]).check();

  static final _id_onVideoStateChanged = jniAccessors.getMethodIDOf(_classRef,
      "onVideoStateChanged", "(Landroid/telecom/RemoteConnection;I)V");

  /// from: public void onVideoStateChanged(android.telecom.RemoteConnection connection, int videoState)
  ///
  /// Indicates that the video state of this {@code RemoteConnection} has changed.
  /// See \#getVideoState().
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param videoState The new video state of the {@code RemoteConnection}.
  void onVideoStateChanged(RemoteConnection connection, int videoState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onVideoStateChanged,
          jni.JniType.voidType, [connection.reference, videoState]).check();

  static final _id_onDestroyed = jniAccessors.getMethodIDOf(
      _classRef, "onDestroyed", "(Landroid/telecom/RemoteConnection;)V");

  /// from: public void onDestroyed(android.telecom.RemoteConnection connection)
  ///
  /// Indicates that this {@code RemoteConnection} has been destroyed. No further requests
  /// should be made to the {@code RemoteConnection}, and references to it should be cleared.
  ///@param connection The {@code RemoteConnection} invoking this method.
  void onDestroyed(RemoteConnection connection) =>
      jniAccessors.callMethodWithArgs(reference, _id_onDestroyed,
          jni.JniType.voidType, [connection.reference]).check();

  static final _id_onConferenceableConnectionsChanged =
      jniAccessors.getMethodIDOf(
          _classRef,
          "onConferenceableConnectionsChanged",
          "(Landroid/telecom/RemoteConnection;Ljava/util/List;)V");

  /// from: public void onConferenceableConnectionsChanged(android.telecom.RemoteConnection connection, java.util.List<android.telecom.RemoteConnection> conferenceableConnections)
  ///
  /// Indicates that the {@code RemoteConnection}s with which this {@code RemoteConnection}
  /// may be asked to create a conference has changed.
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param conferenceableConnections The {@code RemoteConnection}s with which this
  ///         {@code RemoteConnection} may be asked to create a conference.
  void onConferenceableConnectionsChanged(RemoteConnection connection,
          jni.JniObject conferenceableConnections) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onConferenceableConnectionsChanged,
          jni.JniType.voidType,
          [connection.reference, conferenceableConnections.reference]).check();

  static final _id_onVideoProviderChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onVideoProviderChanged",
      "(Landroid/telecom/RemoteConnection;Landroid/telecom/RemoteConnection\$VideoProvider;)V");

  /// from: public void onVideoProviderChanged(android.telecom.RemoteConnection connection, android.telecom.RemoteConnection.VideoProvider videoProvider)
  ///
  /// Indicates that the {@code VideoProvider} associated with this {@code RemoteConnection}
  /// has changed.
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param videoProvider The new {@code VideoProvider} associated with this
  ///         {@code RemoteConnection}.
  void onVideoProviderChanged(RemoteConnection connection,
          RemoteConnection_VideoProvider videoProvider) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onVideoProviderChanged,
          jni.JniType.voidType,
          [connection.reference, videoProvider.reference]).check();

  static final _id_onConferenceChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onConferenceChanged",
      "(Landroid/telecom/RemoteConnection;Landroid/telecom/RemoteConference;)V");

  /// from: public void onConferenceChanged(android.telecom.RemoteConnection connection, android.telecom.RemoteConference conference)
  ///
  /// Indicates that the {@code RemoteConference} that this {@code RemoteConnection} is a part
  /// of has changed.
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param conference The {@code RemoteConference} of which this {@code RemoteConnection} is
  ///         a part, which may be {@code null}.
  void onConferenceChanged(RemoteConnection connection,
          remoteconference_.RemoteConference conference) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onConferenceChanged,
          jni.JniType.voidType,
          [connection.reference, conference.reference]).check();

  static final _id_onExtrasChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onExtrasChanged",
      "(Landroid/telecom/RemoteConnection;Landroid/os/Bundle;)V");

  /// from: public void onExtrasChanged(android.telecom.RemoteConnection connection, android.os.Bundle extras)
  ///
  /// Handles changes to the {@code RemoteConnection} extras.
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param extras The extras containing other information associated with the connection.
  ///
  /// This value may be {@code null}.
  void onExtrasChanged(RemoteConnection connection, bundle_.Bundle extras) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onExtrasChanged,
          jni.JniType.voidType,
          [connection.reference, extras.reference]).check();

  static final _id_onConnectionEvent = jniAccessors.getMethodIDOf(
      _classRef,
      "onConnectionEvent",
      "(Landroid/telecom/RemoteConnection;Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void onConnectionEvent(android.telecom.RemoteConnection connection, java.lang.String event, android.os.Bundle extras)
  ///
  /// Handles a connection event propagated to this RemoteConnection.
  ///
  /// Connection events originate from Connection\#sendConnectionEvent(String, Bundle).
  ///@param connection The {@code RemoteConnection} invoking this method.
  ///@param event The connection event.
  ///@param extras Extras associated with the event.
  void onConnectionEvent(RemoteConnection connection, jni.JniString event,
          bundle_.Bundle extras) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onConnectionEvent,
          jni.JniType.voidType,
          [connection.reference, event.reference, extras.reference]).check();
}
