// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.system.StructUtsname
///
/// Information returned by Os\#uname.
/// Corresponds to C's {@code struct utsname} from {@code <sys/utsname.h>}.
class StructUtsname extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/system/StructUtsname");
  StructUtsname.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_machine =
      jniAccessors.getFieldIDOf(_classRef, "machine", "Ljava/lang/String;");

  /// from: public final java.lang.String machine
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The machine architecture, such as "armv7l" or "x86_64".
  jni.JniString get machine => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_machine, jni.JniType.objectType)
      .object);

  static final _id_nodename =
      jniAccessors.getFieldIDOf(_classRef, "nodename", "Ljava/lang/String;");

  /// from: public final java.lang.String nodename
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The machine's unqualified name on some implementation-defined network.
  jni.JniString get nodename => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_nodename, jni.JniType.objectType)
      .object);

  static final _id_release =
      jniAccessors.getFieldIDOf(_classRef, "release", "Ljava/lang/String;");

  /// from: public final java.lang.String release
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The OS release, such as "2.6.35-27-generic".
  jni.JniString get release => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_release, jni.JniType.objectType)
      .object);

  static final _id_sysname =
      jniAccessors.getFieldIDOf(_classRef, "sysname", "Ljava/lang/String;");

  /// from: public final java.lang.String sysname
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The OS name, such as "Linux".
  jni.JniString get sysname => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_sysname, jni.JniType.objectType)
      .object);

  static final _id_version =
      jniAccessors.getFieldIDOf(_classRef, "version", "Ljava/lang/String;");

  /// from: public final java.lang.String version
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The OS version, such as "\#48-Ubuntu SMP Tue Feb 22 20:25:29 UTC 2011".
  jni.JniString get version => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_version, jni.JniType.objectType)
      .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String sysname, java.lang.String nodename, java.lang.String release, java.lang.String version, java.lang.String machine)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an instance with the given field values.
  StructUtsname(jni.JniString sysname, jni.JniString nodename,
      jni.JniString release, jni.JniString version, jni.JniString machine)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          sysname.reference,
          nodename.reference,
          release.reference,
          version.reference,
          machine.reference
        ]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
