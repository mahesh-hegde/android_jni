// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.system.StructStatVfs
///
/// File information returned by Os\#fstatvfs and Os\#statvfs.
class StructStatVfs extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/system/StructStatVfs");
  StructStatVfs.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_f_bavail =
      jniAccessors.getFieldIDOf(_classRef, "f_bavail", "J");

  /// from: public final long f_bavail
  ///
  /// Free block count available to non-root.
  int get f_bavail =>
      jniAccessors.getField(reference, _id_f_bavail, jni.JniType.longType).long;

  static final _id_f_bfree =
      jniAccessors.getFieldIDOf(_classRef, "f_bfree", "J");

  /// from: public final long f_bfree
  ///
  /// Free block count.
  int get f_bfree =>
      jniAccessors.getField(reference, _id_f_bfree, jni.JniType.longType).long;

  static final _id_f_blocks =
      jniAccessors.getFieldIDOf(_classRef, "f_blocks", "J");

  /// from: public final long f_blocks
  ///
  /// Total block count.
  int get f_blocks =>
      jniAccessors.getField(reference, _id_f_blocks, jni.JniType.longType).long;

  static final _id_f_bsize =
      jniAccessors.getFieldIDOf(_classRef, "f_bsize", "J");

  /// from: public final long f_bsize
  ///
  /// File system block size (used for block counts).
  int get f_bsize =>
      jniAccessors.getField(reference, _id_f_bsize, jni.JniType.longType).long;

  static final _id_f_favail =
      jniAccessors.getFieldIDOf(_classRef, "f_favail", "J");

  /// from: public final long f_favail
  ///
  /// Free file (inode) count available to non-root.
  int get f_favail =>
      jniAccessors.getField(reference, _id_f_favail, jni.JniType.longType).long;

  static final _id_f_ffree =
      jniAccessors.getFieldIDOf(_classRef, "f_ffree", "J");

  /// from: public final long f_ffree
  ///
  /// Free file (inode) count.
  int get f_ffree =>
      jniAccessors.getField(reference, _id_f_ffree, jni.JniType.longType).long;

  static final _id_f_files =
      jniAccessors.getFieldIDOf(_classRef, "f_files", "J");

  /// from: public final long f_files
  ///
  /// Total file (inode) count.
  int get f_files =>
      jniAccessors.getField(reference, _id_f_files, jni.JniType.longType).long;

  static final _id_f_flag = jniAccessors.getFieldIDOf(_classRef, "f_flag", "J");

  /// from: public final long f_flag
  ///
  /// Bit mask of ST_* flags.
  int get f_flag =>
      jniAccessors.getField(reference, _id_f_flag, jni.JniType.longType).long;

  static final _id_f_frsize =
      jniAccessors.getFieldIDOf(_classRef, "f_frsize", "J");

  /// from: public final long f_frsize
  ///
  /// Fundamental file system block size.
  int get f_frsize =>
      jniAccessors.getField(reference, _id_f_frsize, jni.JniType.longType).long;

  static final _id_f_fsid = jniAccessors.getFieldIDOf(_classRef, "f_fsid", "J");

  /// from: public final long f_fsid
  ///
  /// File system id.
  int get f_fsid =>
      jniAccessors.getField(reference, _id_f_fsid, jni.JniType.longType).long;

  static final _id_f_namemax =
      jniAccessors.getFieldIDOf(_classRef, "f_namemax", "J");

  /// from: public final long f_namemax
  ///
  /// Maximum filename length.
  int get f_namemax => jniAccessors
      .getField(reference, _id_f_namemax, jni.JniType.longType)
      .long;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(JJJJJJJJJJJ)V");

  /// from: public void <init>(long f_bsize, long f_frsize, long f_blocks, long f_bfree, long f_bavail, long f_files, long f_ffree, long f_favail, long f_fsid, long f_flag, long f_namemax)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an instance with the given field values.
  StructStatVfs(
      int f_bsize,
      int f_frsize,
      int f_blocks,
      int f_bfree,
      int f_bavail,
      int f_files,
      int f_ffree,
      int f_favail,
      int f_fsid,
      int f_flag,
      int f_namemax)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          f_bsize,
          f_frsize,
          f_blocks,
          f_bfree,
          f_bavail,
          f_files,
          f_ffree,
          f_favail,
          f_fsid,
          f_flag,
          f_namemax
        ]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
