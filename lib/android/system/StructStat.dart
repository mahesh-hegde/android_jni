// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "StructTimespec.dart" as structtimespec_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.system.StructStat
///
/// File information returned by Os\#fstat, Os\#lstat, and Os\#stat.
/// Corresponds to C's {@code struct stat} from {@code <stat.h>}.
class StructStat extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/system/StructStat");
  StructStat.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_st_atim = jniAccessors.getFieldIDOf(
      _classRef, "st_atim", "Landroid/system/StructTimespec;");

  /// from: public final android.system.StructTimespec st_atim
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// StructTimespec with time of last access.
  structtimespec_.StructTimespec get st_atim =>
      structtimespec_.StructTimespec.fromRef(jniAccessors
          .getField(reference, _id_st_atim, jni.JniType.objectType)
          .object);

  static final _id_st_atime =
      jniAccessors.getFieldIDOf(_classRef, "st_atime", "J");

  /// from: public final long st_atime
  ///
  /// Seconds part of time of last access.
  int get st_atime =>
      jniAccessors.getField(reference, _id_st_atime, jni.JniType.longType).long;

  static final _id_st_blksize =
      jniAccessors.getFieldIDOf(_classRef, "st_blksize", "J");

  /// from: public final long st_blksize
  ///
  /// A file system-specific preferred I/O block size for this object.
  /// For some file system types, this may vary from file to file.
  int get st_blksize => jniAccessors
      .getField(reference, _id_st_blksize, jni.JniType.longType)
      .long;

  static final _id_st_blocks =
      jniAccessors.getFieldIDOf(_classRef, "st_blocks", "J");

  /// from: public final long st_blocks
  ///
  /// Number of blocks allocated for this object.
  int get st_blocks => jniAccessors
      .getField(reference, _id_st_blocks, jni.JniType.longType)
      .long;

  static final _id_st_ctim = jniAccessors.getFieldIDOf(
      _classRef, "st_ctim", "Landroid/system/StructTimespec;");

  /// from: public final android.system.StructTimespec st_ctim
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// StructTimespec with time of last status change.
  structtimespec_.StructTimespec get st_ctim =>
      structtimespec_.StructTimespec.fromRef(jniAccessors
          .getField(reference, _id_st_ctim, jni.JniType.objectType)
          .object);

  static final _id_st_ctime =
      jniAccessors.getFieldIDOf(_classRef, "st_ctime", "J");

  /// from: public final long st_ctime
  ///
  /// Seconds part of time of last status change
  int get st_ctime =>
      jniAccessors.getField(reference, _id_st_ctime, jni.JniType.longType).long;

  static final _id_st_dev = jniAccessors.getFieldIDOf(_classRef, "st_dev", "J");

  /// from: public final long st_dev
  ///
  /// Device ID of device containing file.
  int get st_dev =>
      jniAccessors.getField(reference, _id_st_dev, jni.JniType.longType).long;

  static final _id_st_gid = jniAccessors.getFieldIDOf(_classRef, "st_gid", "I");

  /// from: public final int st_gid
  ///
  /// Group ID of file.
  int get st_gid =>
      jniAccessors.getField(reference, _id_st_gid, jni.JniType.intType).integer;

  static final _id_st_ino = jniAccessors.getFieldIDOf(_classRef, "st_ino", "J");

  /// from: public final long st_ino
  ///
  /// File serial number (inode).
  int get st_ino =>
      jniAccessors.getField(reference, _id_st_ino, jni.JniType.longType).long;

  static final _id_st_mode =
      jniAccessors.getFieldIDOf(_classRef, "st_mode", "I");

  /// from: public final int st_mode
  ///
  /// Mode (permissions) of file.
  int get st_mode => jniAccessors
      .getField(reference, _id_st_mode, jni.JniType.intType)
      .integer;

  static final _id_st_mtim = jniAccessors.getFieldIDOf(
      _classRef, "st_mtim", "Landroid/system/StructTimespec;");

  /// from: public final android.system.StructTimespec st_mtim
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// StructTimespec with time of last modification.
  structtimespec_.StructTimespec get st_mtim =>
      structtimespec_.StructTimespec.fromRef(jniAccessors
          .getField(reference, _id_st_mtim, jni.JniType.objectType)
          .object);

  static final _id_st_mtime =
      jniAccessors.getFieldIDOf(_classRef, "st_mtime", "J");

  /// from: public final long st_mtime
  ///
  /// Seconds part of time of last data modification.
  int get st_mtime =>
      jniAccessors.getField(reference, _id_st_mtime, jni.JniType.longType).long;

  static final _id_st_nlink =
      jniAccessors.getFieldIDOf(_classRef, "st_nlink", "J");

  /// from: public final long st_nlink
  ///
  /// Number of hard links to the file.
  int get st_nlink =>
      jniAccessors.getField(reference, _id_st_nlink, jni.JniType.longType).long;

  static final _id_st_rdev =
      jniAccessors.getFieldIDOf(_classRef, "st_rdev", "J");

  /// from: public final long st_rdev
  ///
  /// Device ID (if file is character or block special).
  int get st_rdev =>
      jniAccessors.getField(reference, _id_st_rdev, jni.JniType.longType).long;

  static final _id_st_size =
      jniAccessors.getFieldIDOf(_classRef, "st_size", "J");

  /// from: public final long st_size
  ///
  /// For regular files, the file size in bytes.
  /// For symbolic links, the length in bytes of the pathname contained in the symbolic link.
  /// For a shared memory object, the length in bytes.
  /// For a typed memory object, the length in bytes.
  /// For other file types, the use of this field is unspecified.
  int get st_size =>
      jniAccessors.getField(reference, _id_st_size, jni.JniType.longType).long;

  static final _id_st_uid = jniAccessors.getFieldIDOf(_classRef, "st_uid", "I");

  /// from: public final int st_uid
  ///
  /// User ID of file.
  int get st_uid =>
      jniAccessors.getField(reference, _id_st_uid, jni.JniType.intType).integer;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(JJIJIIJJJJJJJ)V");

  /// from: public void <init>(long st_dev, long st_ino, int st_mode, long st_nlink, int st_uid, int st_gid, long st_rdev, long st_size, long st_atime, long st_mtime, long st_ctime, long st_blksize, long st_blocks)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an instance with the given field values.
  StructStat(
      int st_dev,
      int st_ino,
      int st_mode,
      int st_nlink,
      int st_uid,
      int st_gid,
      int st_rdev,
      int st_size,
      int st_atime,
      int st_mtime,
      int st_ctime,
      int st_blksize,
      int st_blocks)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          st_dev,
          st_ino,
          st_mode,
          st_nlink,
          st_uid,
          st_gid,
          st_rdev,
          st_size,
          st_atime,
          st_mtime,
          st_ctime,
          st_blksize,
          st_blocks
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(JJIJIIJJLandroid/system/StructTimespec;Landroid/system/StructTimespec;Landroid/system/StructTimespec;JJ)V");

  /// from: public void <init>(long st_dev, long st_ino, int st_mode, long st_nlink, int st_uid, int st_gid, long st_rdev, long st_size, android.system.StructTimespec st_atim, android.system.StructTimespec st_mtim, android.system.StructTimespec st_ctim, long st_blksize, long st_blocks)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an instance with the given field values.
  StructStat.ctor1(
      int st_dev,
      int st_ino,
      int st_mode,
      int st_nlink,
      int st_uid,
      int st_gid,
      int st_rdev,
      int st_size,
      structtimespec_.StructTimespec st_atim,
      structtimespec_.StructTimespec st_mtim,
      structtimespec_.StructTimespec st_ctim,
      int st_blksize,
      int st_blocks)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          st_dev,
          st_ino,
          st_mode,
          st_nlink,
          st_uid,
          st_gid,
          st_rdev,
          st_size,
          st_atim.reference,
          st_mtim.reference,
          st_ctim.reference,
          st_blksize,
          st_blocks
        ]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
