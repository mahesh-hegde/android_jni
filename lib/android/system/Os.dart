// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "StructStat.dart" as structstat_;

import "StructStatVfs.dart" as structstatvfs_;

import "Int64Ref.dart" as int64ref_;

import "StructUtsname.dart" as structutsname_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.system.Os
///
/// Access to low-level system functionality. Most of these are system calls. Most users will want
/// to use higher-level APIs where available, but this class provides access to the underlying
/// primitives used to implement the higher-level APIs.
///
/// The corresponding constants can be found in OsConstants.
class Os extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/system/Os");
  Os.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Os()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_accept = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "accept",
      "(Ljava/io/FileDescriptor;Ljava/net/InetSocketAddress;)Ljava/io/FileDescriptor;");

  /// from: static public java.io.FileDescriptor accept(java.io.FileDescriptor fd, java.net.InetSocketAddress peerAddress)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/accept.2.html">accept(2)</a>.
  static jni.JniObject accept(jni.JniObject fd, jni.JniObject peerAddress) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_accept,
          jni.JniType.objectType,
          [fd.reference, peerAddress.reference]).object);

  static final _id_access = jniAccessors.getStaticMethodIDOf(
      _classRef, "access", "(Ljava/lang/String;I)Z");

  /// from: static public boolean access(java.lang.String path, int mode)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/access.2.html">access(2)</a>.
  static bool access(jni.JniString path, int mode) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_access,
          jni.JniType.booleanType, [path.reference, mode]).boolean;

  static final _id_bind = jniAccessors.getStaticMethodIDOf(
      _classRef, "bind", "(Ljava/io/FileDescriptor;Ljava/net/InetAddress;I)V");

  /// from: static public void bind(java.io.FileDescriptor fd, java.net.InetAddress address, int port)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/bind.2.html">bind(2)</a>.
  static void bind(jni.JniObject fd, jni.JniObject address, int port) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_bind,
          jni.JniType.voidType,
          [fd.reference, address.reference, port]).check();

  static final _id_chmod = jniAccessors.getStaticMethodIDOf(
      _classRef, "chmod", "(Ljava/lang/String;I)V");

  /// from: static public void chmod(java.lang.String path, int mode)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/chmod.2.html">chmod(2)</a>.
  static void chmod(jni.JniString path, int mode) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_chmod,
          jni.JniType.voidType, [path.reference, mode]).check();

  static final _id_chown = jniAccessors.getStaticMethodIDOf(
      _classRef, "chown", "(Ljava/lang/String;II)V");

  /// from: static public void chown(java.lang.String path, int uid, int gid)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/chown.2.html">chown(2)</a>.
  static void chown(jni.JniString path, int uid, int gid) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_chown,
          jni.JniType.voidType, [path.reference, uid, gid]).check();

  static final _id_close = jniAccessors.getStaticMethodIDOf(
      _classRef, "close", "(Ljava/io/FileDescriptor;)V");

  /// from: static public void close(java.io.FileDescriptor fd)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/close.2.html">close(2)</a>.
  static void close(jni.JniObject fd) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_close, jni.JniType.voidType, [fd.reference]).check();

  static final _id_connect = jniAccessors.getStaticMethodIDOf(_classRef,
      "connect", "(Ljava/io/FileDescriptor;Ljava/net/InetAddress;I)V");

  /// from: static public void connect(java.io.FileDescriptor fd, java.net.InetAddress address, int port)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/connect.2.html">connect(2)</a>.
  static void connect(jni.JniObject fd, jni.JniObject address, int port) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_connect,
          jni.JniType.voidType,
          [fd.reference, address.reference, port]).check();

  static final _id_dup = jniAccessors.getStaticMethodIDOf(
      _classRef, "dup", "(Ljava/io/FileDescriptor;)Ljava/io/FileDescriptor;");

  /// from: static public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/dup.2.html">dup(2)</a>.
  static jni.JniObject dup(jni.JniObject oldFd) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_dup, jni.JniType.objectType, [oldFd.reference]).object);

  static final _id_dup2 = jniAccessors.getStaticMethodIDOf(
      _classRef, "dup2", "(Ljava/io/FileDescriptor;I)Ljava/io/FileDescriptor;");

  /// from: static public java.io.FileDescriptor dup2(java.io.FileDescriptor oldFd, int newFd)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/dup2.2.html">dup2(2)</a>.
  static jni.JniObject dup2(jni.JniObject oldFd, int newFd) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_dup2, jni.JniType.objectType, [oldFd.reference, newFd]).object);

  static final _id_environ = jniAccessors.getStaticMethodIDOf(
      _classRef, "environ", "()[Ljava/lang/String;");

  /// from: static public java.lang.String[] environ()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/environ.3.html">environ(3)</a>.
  static jni.JniObject environ() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_environ, jni.JniType.objectType, []).object);

  static final _id_execv = jniAccessors.getStaticMethodIDOf(
      _classRef, "execv", "(Ljava/lang/String;[Ljava/lang/String;)V");

  /// from: static public void execv(java.lang.String filename, java.lang.String[] argv)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/execv.2.html">execv(2)</a>.
  static void execv(jni.JniString filename, jni.JniObject argv) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_execv,
          jni.JniType.voidType, [filename.reference, argv.reference]).check();

  static final _id_execve = jniAccessors.getStaticMethodIDOf(_classRef,
      "execve", "(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)V");

  /// from: static public void execve(java.lang.String filename, java.lang.String[] argv, java.lang.String[] envp)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/execve.2.html">execve(2)</a>.
  static void execve(
          jni.JniString filename, jni.JniObject argv, jni.JniObject envp) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_execve,
          jni.JniType.voidType,
          [filename.reference, argv.reference, envp.reference]).check();

  static final _id_fchmod = jniAccessors.getStaticMethodIDOf(
      _classRef, "fchmod", "(Ljava/io/FileDescriptor;I)V");

  /// from: static public void fchmod(java.io.FileDescriptor fd, int mode)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/fchmod.2.html">fchmod(2)</a>.
  static void fchmod(jni.JniObject fd, int mode) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_fchmod,
          jni.JniType.voidType, [fd.reference, mode]).check();

  static final _id_fchown = jniAccessors.getStaticMethodIDOf(
      _classRef, "fchown", "(Ljava/io/FileDescriptor;II)V");

  /// from: static public void fchown(java.io.FileDescriptor fd, int uid, int gid)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/fchown.2.html">fchown(2)</a>.
  static void fchown(jni.JniObject fd, int uid, int gid) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_fchown,
          jni.JniType.voidType, [fd.reference, uid, gid]).check();

  static final _id_fdatasync = jniAccessors.getStaticMethodIDOf(
      _classRef, "fdatasync", "(Ljava/io/FileDescriptor;)V");

  /// from: static public void fdatasync(java.io.FileDescriptor fd)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/fdatasync.2.html">fdatasync(2)</a>.
  static void fdatasync(jni.JniObject fd) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_fdatasync,
          jni.JniType.voidType, [fd.reference]).check();

  static final _id_fstat = jniAccessors.getStaticMethodIDOf(_classRef, "fstat",
      "(Ljava/io/FileDescriptor;)Landroid/system/StructStat;");

  /// from: static public android.system.StructStat fstat(java.io.FileDescriptor fd)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/fstat.2.html">fstat(2)</a>.
  static structstat_.StructStat fstat(jni.JniObject fd) =>
      structstat_.StructStat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_fstat, jni.JniType.objectType, [fd.reference]).object);

  static final _id_fstatvfs = jniAccessors.getStaticMethodIDOf(_classRef,
      "fstatvfs", "(Ljava/io/FileDescriptor;)Landroid/system/StructStatVfs;");

  /// from: static public android.system.StructStatVfs fstatvfs(java.io.FileDescriptor fd)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/fstatvfs.2.html">fstatvfs(2)</a>.
  static structstatvfs_.StructStatVfs fstatvfs(jni.JniObject fd) =>
      structstatvfs_.StructStatVfs.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_fstatvfs,
              jni.JniType.objectType, [fd.reference]).object);

  static final _id_fsync = jniAccessors.getStaticMethodIDOf(
      _classRef, "fsync", "(Ljava/io/FileDescriptor;)V");

  /// from: static public void fsync(java.io.FileDescriptor fd)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/fsync.2.html">fsync(2)</a>.
  static void fsync(jni.JniObject fd) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_fsync, jni.JniType.voidType, [fd.reference]).check();

  static final _id_ftruncate = jniAccessors.getStaticMethodIDOf(
      _classRef, "ftruncate", "(Ljava/io/FileDescriptor;J)V");

  /// from: static public void ftruncate(java.io.FileDescriptor fd, long length)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/ftruncate.2.html">ftruncate(2)</a>.
  static void ftruncate(jni.JniObject fd, int length) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_ftruncate,
          jni.JniType.voidType, [fd.reference, length]).check();

  static final _id_gai_strerror = jniAccessors.getStaticMethodIDOf(
      _classRef, "gai_strerror", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String gai_strerror(int error)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/gai_strerror.3.html">gai_strerror(3)</a>.
  static jni.JniString gai_strerror(int error) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_gai_strerror, jni.JniType.objectType, [error]).object);

  static final _id_getegid =
      jniAccessors.getStaticMethodIDOf(_classRef, "getegid", "()I");

  /// from: static public int getegid()
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/getegid.2.html">getegid(2)</a>.
  static int getegid() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_getegid, jni.JniType.intType, []).integer;

  static final _id_geteuid =
      jniAccessors.getStaticMethodIDOf(_classRef, "geteuid", "()I");

  /// from: static public int geteuid()
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/geteuid.2.html">geteuid(2)</a>.
  static int geteuid() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_geteuid, jni.JniType.intType, []).integer;

  static final _id_getgid =
      jniAccessors.getStaticMethodIDOf(_classRef, "getgid", "()I");

  /// from: static public int getgid()
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/getgid.2.html">getgid(2)</a>.
  static int getgid() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_getgid, jni.JniType.intType, []).integer;

  static final _id_getenv = jniAccessors.getStaticMethodIDOf(
      _classRef, "getenv", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getenv(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/getenv.3.html">getenv(3)</a>.
  static jni.JniString getenv(jni.JniString name) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getenv, jni.JniType.objectType, [name.reference]).object);

  static final _id_getpeername = jniAccessors.getStaticMethodIDOf(_classRef,
      "getpeername", "(Ljava/io/FileDescriptor;)Ljava/net/SocketAddress;");

  /// from: static public java.net.SocketAddress getpeername(java.io.FileDescriptor fd)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/getpeername.2.html">getpeername(2)</a>.
  static jni.JniObject getpeername(jni.JniObject fd) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getpeername, jni.JniType.objectType, [fd.reference]).object);

  static final _id_getpid =
      jniAccessors.getStaticMethodIDOf(_classRef, "getpid", "()I");

  /// from: static public int getpid()
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/getpid.2.html">getpid(2)</a>.
  static int getpid() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_getpid, jni.JniType.intType, []).integer;

  static final _id_getppid =
      jniAccessors.getStaticMethodIDOf(_classRef, "getppid", "()I");

  /// from: static public int getppid()
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/getppid.2.html">getppid(2)</a>.
  static int getppid() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_getppid, jni.JniType.intType, []).integer;

  static final _id_getsockname = jniAccessors.getStaticMethodIDOf(_classRef,
      "getsockname", "(Ljava/io/FileDescriptor;)Ljava/net/SocketAddress;");

  /// from: static public java.net.SocketAddress getsockname(java.io.FileDescriptor fd)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/getsockname.2.html">getsockname(2)</a>.
  static jni.JniObject getsockname(jni.JniObject fd) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getsockname, jni.JniType.objectType, [fd.reference]).object);

  static final _id_gettid =
      jniAccessors.getStaticMethodIDOf(_classRef, "gettid", "()I");

  /// from: static public int gettid()
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/gettid.2.html">gettid(2)</a>.
  static int gettid() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_gettid, jni.JniType.intType, []).integer;

  static final _id_getuid =
      jniAccessors.getStaticMethodIDOf(_classRef, "getuid", "()I");

  /// from: static public int getuid()
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/getuid.2.html">getuid(2)</a>.
  static int getuid() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_getuid, jni.JniType.intType, []).integer;

  static final _id_getxattr = jniAccessors.getStaticMethodIDOf(
      _classRef, "getxattr", "(Ljava/lang/String;Ljava/lang/String;)[B");

  /// from: static public byte[] getxattr(java.lang.String path, java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/getxattr.2.html">getxattr(2)</a>
  static jni.JniObject getxattr(jni.JniString path, jni.JniString name) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getxattr,
          jni.JniType.objectType,
          [path.reference, name.reference]).object);

  static final _id_if_indextoname = jniAccessors.getStaticMethodIDOf(
      _classRef, "if_indextoname", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String if_indextoname(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/if_indextoname.3.html">if_indextoname(3)</a>.
  static jni.JniString if_indextoname(int index) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_if_indextoname, jni.JniType.objectType, [index]).object);

  static final _id_if_nametoindex = jniAccessors.getStaticMethodIDOf(
      _classRef, "if_nametoindex", "(Ljava/lang/String;)I");

  /// from: static public int if_nametoindex(java.lang.String name)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/if_nametoindex.3.html">if_nametoindex(3)</a>.
  static int if_nametoindex(jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_if_nametoindex,
          jni.JniType.intType, [name.reference]).integer;

  static final _id_inet_pton = jniAccessors.getStaticMethodIDOf(
      _classRef, "inet_pton", "(ILjava/lang/String;)Ljava/net/InetAddress;");

  /// from: static public java.net.InetAddress inet_pton(int family, java.lang.String address)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/inet_pton.3.html">inet_pton(3)</a>.
  static jni.JniObject inet_pton(int family, jni.JniString address) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_inet_pton,
          jni.JniType.objectType,
          [family, address.reference]).object);

  static final _id_isatty = jniAccessors.getStaticMethodIDOf(
      _classRef, "isatty", "(Ljava/io/FileDescriptor;)Z");

  /// from: static public boolean isatty(java.io.FileDescriptor fd)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/isatty.3.html">isatty(3)</a>.
  static bool isatty(jni.JniObject fd) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_isatty, jni.JniType.booleanType, [fd.reference]).boolean;

  static final _id_kill =
      jniAccessors.getStaticMethodIDOf(_classRef, "kill", "(II)V");

  /// from: static public void kill(int pid, int signal)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/kill.2.html">kill(2)</a>.
  static void kill(int pid, int signal) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_kill, jni.JniType.voidType, [pid, signal]).check();

  static final _id_lchown = jniAccessors.getStaticMethodIDOf(
      _classRef, "lchown", "(Ljava/lang/String;II)V");

  /// from: static public void lchown(java.lang.String path, int uid, int gid)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/lchown.2.html">lchown(2)</a>.
  static void lchown(jni.JniString path, int uid, int gid) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_lchown,
          jni.JniType.voidType, [path.reference, uid, gid]).check();

  static final _id_link = jniAccessors.getStaticMethodIDOf(
      _classRef, "link", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: static public void link(java.lang.String oldPath, java.lang.String newPath)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/link.2.html">link(2)</a>.
  static void link(jni.JniString oldPath, jni.JniString newPath) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_link,
          jni.JniType.voidType, [oldPath.reference, newPath.reference]).check();

  static final _id_listen = jniAccessors.getStaticMethodIDOf(
      _classRef, "listen", "(Ljava/io/FileDescriptor;I)V");

  /// from: static public void listen(java.io.FileDescriptor fd, int backlog)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/listen.2.html">listen(2)</a>.
  static void listen(jni.JniObject fd, int backlog) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_listen,
          jni.JniType.voidType, [fd.reference, backlog]).check();

  static final _id_listxattr = jniAccessors.getStaticMethodIDOf(
      _classRef, "listxattr", "(Ljava/lang/String;)[Ljava/lang/String;");

  /// from: static public java.lang.String[] listxattr(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/listxattr.2.html">listxattr(2)</a>
  static jni.JniObject listxattr(jni.JniString path) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_listxattr, jni.JniType.objectType, [path.reference]).object);

  static final _id_lseek = jniAccessors.getStaticMethodIDOf(
      _classRef, "lseek", "(Ljava/io/FileDescriptor;JI)J");

  /// from: static public long lseek(java.io.FileDescriptor fd, long offset, int whence)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/lseek.2.html">lseek(2)</a>.
  static int lseek(jni.JniObject fd, int offset, int whence) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_lseek,
          jni.JniType.longType, [fd.reference, offset, whence]).long;

  static final _id_lstat = jniAccessors.getStaticMethodIDOf(
      _classRef, "lstat", "(Ljava/lang/String;)Landroid/system/StructStat;");

  /// from: static public android.system.StructStat lstat(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/lstat.2.html">lstat(2)</a>.
  static structstat_.StructStat lstat(jni.JniString path) =>
      structstat_.StructStat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_lstat,
          jni.JniType.objectType,
          [path.reference]).object);

  static final _id_mincore =
      jniAccessors.getStaticMethodIDOf(_classRef, "mincore", "(JJ[B)V");

  /// from: static public void mincore(long address, long byteCount, byte[] vector)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/mincore.2.html">mincore(2)</a>.
  static void mincore(int address, int byteCount, jni.JniObject vector) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_mincore,
          jni.JniType.voidType, [address, byteCount, vector.reference]).check();

  static final _id_mkdir = jniAccessors.getStaticMethodIDOf(
      _classRef, "mkdir", "(Ljava/lang/String;I)V");

  /// from: static public void mkdir(java.lang.String path, int mode)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/mkdir.2.html">mkdir(2)</a>.
  static void mkdir(jni.JniString path, int mode) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_mkdir,
          jni.JniType.voidType, [path.reference, mode]).check();

  static final _id_mkfifo = jniAccessors.getStaticMethodIDOf(
      _classRef, "mkfifo", "(Ljava/lang/String;I)V");

  /// from: static public void mkfifo(java.lang.String path, int mode)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/mkfifo.3.html">mkfifo(3)</a>.
  static void mkfifo(jni.JniString path, int mode) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_mkfifo,
          jni.JniType.voidType, [path.reference, mode]).check();

  static final _id_mlock =
      jniAccessors.getStaticMethodIDOf(_classRef, "mlock", "(JJ)V");

  /// from: static public void mlock(long address, long byteCount)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/mlock.2.html">mlock(2)</a>.
  static void mlock(int address, int byteCount) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_mlock,
          jni.JniType.voidType, [address, byteCount]).check();

  static final _id_mmap = jniAccessors.getStaticMethodIDOf(
      _classRef, "mmap", "(JJIILjava/io/FileDescriptor;J)J");

  /// from: static public long mmap(long address, long byteCount, int prot, int flags, java.io.FileDescriptor fd, long offset)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/mmap.2.html">mmap(2)</a>.
  static int mmap(int address, int byteCount, int prot, int flags,
          jni.JniObject fd, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_mmap,
          jni.JniType.longType,
          [address, byteCount, prot, flags, fd.reference, offset]).long;

  static final _id_msync =
      jniAccessors.getStaticMethodIDOf(_classRef, "msync", "(JJI)V");

  /// from: static public void msync(long address, long byteCount, int flags)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/msync.2.html">msync(2)</a>.
  static void msync(int address, int byteCount, int flags) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_msync,
          jni.JniType.voidType, [address, byteCount, flags]).check();

  static final _id_munlock =
      jniAccessors.getStaticMethodIDOf(_classRef, "munlock", "(JJ)V");

  /// from: static public void munlock(long address, long byteCount)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/munlock.2.html">munlock(2)</a>.
  static void munlock(int address, int byteCount) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_munlock,
          jni.JniType.voidType, [address, byteCount]).check();

  static final _id_munmap =
      jniAccessors.getStaticMethodIDOf(_classRef, "munmap", "(JJ)V");

  /// from: static public void munmap(long address, long byteCount)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/munmap.2.html">munmap(2)</a>.
  static void munmap(int address, int byteCount) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_munmap,
          jni.JniType.voidType, [address, byteCount]).check();

  static final _id_open = jniAccessors.getStaticMethodIDOf(
      _classRef, "open", "(Ljava/lang/String;II)Ljava/io/FileDescriptor;");

  /// from: static public java.io.FileDescriptor open(java.lang.String path, int flags, int mode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/open.2.html">open(2)</a>.
  static jni.JniObject open(jni.JniString path, int flags, int mode) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_open,
          jni.JniType.objectType,
          [path.reference, flags, mode]).object);

  static final _id_pipe = jniAccessors.getStaticMethodIDOf(
      _classRef, "pipe", "()[Ljava/io/FileDescriptor;");

  /// from: static public java.io.FileDescriptor[] pipe()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/pipe.2.html">pipe(2)</a>.
  static jni.JniObject pipe() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_pipe, jni.JniType.objectType, []).object);

  static final _id_poll = jniAccessors.getStaticMethodIDOf(
      _classRef, "poll", "([Landroid/system/StructPollfd;I)I");

  /// from: static public int poll(android.system.StructPollfd[] fds, int timeoutMs)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/poll.2.html">poll(2)</a>.
  ///
  /// Note that in Lollipop this could throw an {@code ErrnoException} with {@code EINTR}.
  /// In later releases, the implementation will automatically just restart the system call with
  /// an appropriately reduced timeout.
  static int poll(jni.JniObject fds, int timeoutMs) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_poll,
          jni.JniType.intType, [fds.reference, timeoutMs]).integer;

  static final _id_posix_fallocate = jniAccessors.getStaticMethodIDOf(
      _classRef, "posix_fallocate", "(Ljava/io/FileDescriptor;JJ)V");

  /// from: static public void posix_fallocate(java.io.FileDescriptor fd, long offset, long length)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/posix_fallocate.3.html">posix_fallocate(3)</a>.
  static void posix_fallocate(jni.JniObject fd, int offset, int length) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_posix_fallocate,
          jni.JniType.voidType, [fd.reference, offset, length]).check();

  static final _id_prctl =
      jniAccessors.getStaticMethodIDOf(_classRef, "prctl", "(IJJJJ)I");

  /// from: static public int prctl(int option, long arg2, long arg3, long arg4, long arg5)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/prctl.2.html">prctl(2)</a>.
  static int prctl(int option, int arg2, int arg3, int arg4, int arg5) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_prctl,
          jni.JniType.intType, [option, arg2, arg3, arg4, arg5]).integer;

  static final _id_pread = jniAccessors.getStaticMethodIDOf(
      _classRef, "pread", "(Ljava/io/FileDescriptor;Ljava/nio/ByteBuffer;J)I");

  /// from: static public int pread(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, long offset)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/pread.2.html">pread(2)</a>.
  static int pread(jni.JniObject fd, jni.JniObject buffer, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_pread,
          jni.JniType.intType,
          [fd.reference, buffer.reference, offset]).integer;

  static final _id_pread1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "pread", "(Ljava/io/FileDescriptor;[BIIJ)I");

  /// from: static public int pread(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, long offset)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/pread.2.html">pread(2)</a>.
  static int pread1(jni.JniObject fd, jni.JniObject bytes, int byteOffset,
          int byteCount, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_pread1, jni.JniType.intType, [
        fd.reference,
        bytes.reference,
        byteOffset,
        byteCount,
        offset
      ]).integer;

  static final _id_pwrite = jniAccessors.getStaticMethodIDOf(
      _classRef, "pwrite", "(Ljava/io/FileDescriptor;Ljava/nio/ByteBuffer;J)I");

  /// from: static public int pwrite(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, long offset)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/pwrite.2.html">pwrite(2)</a>.
  static int pwrite(jni.JniObject fd, jni.JniObject buffer, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_pwrite,
          jni.JniType.intType,
          [fd.reference, buffer.reference, offset]).integer;

  static final _id_pwrite1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "pwrite", "(Ljava/io/FileDescriptor;[BIIJ)I");

  /// from: static public int pwrite(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, long offset)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/pwrite.2.html">pwrite(2)</a>.
  static int pwrite1(jni.JniObject fd, jni.JniObject bytes, int byteOffset,
          int byteCount, int offset) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_pwrite1, jni.JniType.intType, [
        fd.reference,
        bytes.reference,
        byteOffset,
        byteCount,
        offset
      ]).integer;

  static final _id_read = jniAccessors.getStaticMethodIDOf(
      _classRef, "read", "(Ljava/io/FileDescriptor;Ljava/nio/ByteBuffer;)I");

  /// from: static public int read(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/read.2.html">read(2)</a>.
  static int read(jni.JniObject fd, jni.JniObject buffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_read,
          jni.JniType.intType, [fd.reference, buffer.reference]).integer;

  static final _id_read1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "read", "(Ljava/io/FileDescriptor;[BII)I");

  /// from: static public int read(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/read.2.html">read(2)</a>.
  static int read1(jni.JniObject fd, jni.JniObject bytes, int byteOffset,
          int byteCount) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_read1,
          jni.JniType.intType,
          [fd.reference, bytes.reference, byteOffset, byteCount]).integer;

  static final _id_readlink = jniAccessors.getStaticMethodIDOf(
      _classRef, "readlink", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String readlink(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/readlink.2.html">readlink(2)</a>.
  static jni.JniString readlink(jni.JniString path) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_readlink, jni.JniType.objectType, [path.reference]).object);

  static final _id_readv = jniAccessors.getStaticMethodIDOf(
      _classRef, "readv", "(Ljava/io/FileDescriptor;[Ljava/lang/Object;[I[I)I");

  /// from: static public int readv(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/readv.2.html">readv(2)</a>.
  static int readv(jni.JniObject fd, jni.JniObject buffers,
          jni.JniObject offsets, jni.JniObject byteCounts) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_readv, jni.JniType.intType, [
        fd.reference,
        buffers.reference,
        offsets.reference,
        byteCounts.reference
      ]).integer;

  static final _id_recvfrom = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "recvfrom",
      "(Ljava/io/FileDescriptor;Ljava/nio/ByteBuffer;ILjava/net/InetSocketAddress;)I");

  /// from: static public int recvfrom(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetSocketAddress srcAddress)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/recvfrom.2.html">recvfrom(2)</a>.
  static int recvfrom(jni.JniObject fd, jni.JniObject buffer, int flags,
          jni.JniObject srcAddress) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_recvfrom, jni.JniType.intType, [
        fd.reference,
        buffer.reference,
        flags,
        srcAddress.reference
      ]).integer;

  static final _id_recvfrom1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "recvfrom",
      "(Ljava/io/FileDescriptor;[BIIILjava/net/InetSocketAddress;)I");

  /// from: static public int recvfrom(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetSocketAddress srcAddress)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/recvfrom.2.html">recvfrom(2)</a>.
  static int recvfrom1(jni.JniObject fd, jni.JniObject bytes, int byteOffset,
          int byteCount, int flags, jni.JniObject srcAddress) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_recvfrom1, jni.JniType.intType, [
        fd.reference,
        bytes.reference,
        byteOffset,
        byteCount,
        flags,
        srcAddress.reference
      ]).integer;

  static final _id_remove = jniAccessors.getStaticMethodIDOf(
      _classRef, "remove", "(Ljava/lang/String;)V");

  /// from: static public void remove(java.lang.String path)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/remove.3.html">remove(3)</a>.
  static void remove(jni.JniString path) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_remove,
          jni.JniType.voidType, [path.reference]).check();

  static final _id_removexattr = jniAccessors.getStaticMethodIDOf(
      _classRef, "removexattr", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: static public void removexattr(java.lang.String path, java.lang.String name)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/removexattr.2.html">removexattr(2)</a>.
  static void removexattr(jni.JniString path, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_removexattr,
          jni.JniType.voidType, [path.reference, name.reference]).check();

  static final _id_rename = jniAccessors.getStaticMethodIDOf(
      _classRef, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: static public void rename(java.lang.String oldPath, java.lang.String newPath)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/rename.2.html">rename(2)</a>.
  static void rename(jni.JniString oldPath, jni.JniString newPath) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_rename,
          jni.JniType.voidType, [oldPath.reference, newPath.reference]).check();

  static final _id_sendfile = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "sendfile",
      "(Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;Landroid/system/Int64Ref;J)J");

  /// from: static public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.Int64Ref offset, long byteCount)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/sendfile.2.html">sendfile(2)</a>.
  static int sendfile(jni.JniObject outFd, jni.JniObject inFd,
          int64ref_.Int64Ref offset, int byteCount) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_sendfile,
          jni.JniType.longType,
          [outFd.reference, inFd.reference, offset.reference, byteCount]).long;

  static final _id_sendto = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "sendto",
      "(Ljava/io/FileDescriptor;Ljava/nio/ByteBuffer;ILjava/net/InetAddress;I)I");

  /// from: static public int sendto(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetAddress inetAddress, int port)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/sendto.2.html">sendto(2)</a>.
  static int sendto(jni.JniObject fd, jni.JniObject buffer, int flags,
          jni.JniObject inetAddress, int port) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_sendto, jni.JniType.intType, [
        fd.reference,
        buffer.reference,
        flags,
        inetAddress.reference,
        port
      ]).integer;

  static final _id_sendto1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "sendto", "(Ljava/io/FileDescriptor;[BIIILjava/net/InetAddress;I)I");

  /// from: static public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/sendto.2.html">sendto(2)</a>.
  static int sendto1(jni.JniObject fd, jni.JniObject bytes, int byteOffset,
          int byteCount, int flags, jni.JniObject inetAddress, int port) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_sendto1, jni.JniType.intType, [
        fd.reference,
        bytes.reference,
        byteOffset,
        byteCount,
        flags,
        inetAddress.reference,
        port
      ]).integer;

  static final _id_setegid =
      jniAccessors.getStaticMethodIDOf(_classRef, "setegid", "(I)V");

  /// from: static public void setegid(int egid)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/setegid.2.html">setegid(2)</a>.
  static void setegid(int egid) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_setegid, jni.JniType.voidType, [egid]).check();

  static final _id_setenv = jniAccessors.getStaticMethodIDOf(
      _classRef, "setenv", "(Ljava/lang/String;Ljava/lang/String;Z)V");

  /// from: static public void setenv(java.lang.String name, java.lang.String value, boolean overwrite)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/setenv.3.html">setenv(3)</a>.
  static void setenv(jni.JniString name, jni.JniString value, bool overwrite) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_setenv,
          jni.JniType.voidType,
          [name.reference, value.reference, overwrite]).check();

  static final _id_seteuid =
      jniAccessors.getStaticMethodIDOf(_classRef, "seteuid", "(I)V");

  /// from: static public void seteuid(int euid)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/seteuid.2.html">seteuid(2)</a>.
  static void seteuid(int euid) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_seteuid, jni.JniType.voidType, [euid]).check();

  static final _id_setgid =
      jniAccessors.getStaticMethodIDOf(_classRef, "setgid", "(I)V");

  /// from: static public void setgid(int gid)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/setgid.2.html">setgid(2)</a>.
  static void setgid(int gid) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_setgid, jni.JniType.voidType, [gid]).check();

  static final _id_setsid =
      jniAccessors.getStaticMethodIDOf(_classRef, "setsid", "()I");

  /// from: static public int setsid()
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/setsid.2.html">setsid(2)</a>.
  static int setsid() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_setsid, jni.JniType.intType, []).integer;

  static final _id_setsockoptInt = jniAccessors.getStaticMethodIDOf(
      _classRef, "setsockoptInt", "(Ljava/io/FileDescriptor;III)V");

  /// from: static public void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/setsockopt.2.html">setsockopt(2)</a>.
  static void setsockoptInt(
          jni.JniObject fd, int level, int option, int value) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_setsockoptInt,
          jni.JniType.voidType, [fd.reference, level, option, value]).check();

  static final _id_setuid =
      jniAccessors.getStaticMethodIDOf(_classRef, "setuid", "(I)V");

  /// from: static public void setuid(int uid)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/setuid.2.html">setuid(2)</a>.
  static void setuid(int uid) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_setuid, jni.JniType.voidType, [uid]).check();

  static final _id_setxattr = jniAccessors.getStaticMethodIDOf(
      _classRef, "setxattr", "(Ljava/lang/String;Ljava/lang/String;[BI)V");

  /// from: static public void setxattr(java.lang.String path, java.lang.String name, byte[] value, int flags)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/setxattr.2.html">setxattr(2)</a>
  static void setxattr(jni.JniString path, jni.JniString name,
          jni.JniObject value, int flags) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_setxattr,
          jni.JniType.voidType,
          [path.reference, name.reference, value.reference, flags]).check();

  static final _id_shutdown = jniAccessors.getStaticMethodIDOf(
      _classRef, "shutdown", "(Ljava/io/FileDescriptor;I)V");

  /// from: static public void shutdown(java.io.FileDescriptor fd, int how)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/shutdown.2.html">shutdown(2)</a>.
  static void shutdown(jni.JniObject fd, int how) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_shutdown,
          jni.JniType.voidType, [fd.reference, how]).check();

  static final _id_socket = jniAccessors.getStaticMethodIDOf(
      _classRef, "socket", "(III)Ljava/io/FileDescriptor;");

  /// from: static public java.io.FileDescriptor socket(int domain, int type, int protocol)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/socket.2.html">socket(2)</a>.
  static jni.JniObject socket(int domain, int type, int protocol) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_socket, jni.JniType.objectType, [domain, type, protocol]).object);

  static final _id_socketpair = jniAccessors.getStaticMethodIDOf(_classRef,
      "socketpair", "(IIILjava/io/FileDescriptor;Ljava/io/FileDescriptor;)V");

  /// from: static public void socketpair(int domain, int type, int protocol, java.io.FileDescriptor fd1, java.io.FileDescriptor fd2)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/socketpair.2.html">socketpair(2)</a>.
  static void socketpair(int domain, int type, int protocol, jni.JniObject fd1,
          jni.JniObject fd2) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_socketpair,
          jni.JniType.voidType,
          [domain, type, protocol, fd1.reference, fd2.reference]).check();

  static final _id_stat = jniAccessors.getStaticMethodIDOf(
      _classRef, "stat", "(Ljava/lang/String;)Landroid/system/StructStat;");

  /// from: static public android.system.StructStat stat(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/stat.2.html">stat(2)</a>.
  static structstat_.StructStat stat(jni.JniString path) =>
      structstat_.StructStat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_stat,
          jni.JniType.objectType,
          [path.reference]).object);

  static final _id_statvfs = jniAccessors.getStaticMethodIDOf(_classRef,
      "statvfs", "(Ljava/lang/String;)Landroid/system/StructStatVfs;");

  /// from: static public android.system.StructStatVfs statvfs(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/statvfs.2.html">statvfs(2)</a>.
  static structstatvfs_.StructStatVfs statvfs(jni.JniString path) =>
      structstatvfs_.StructStatVfs.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_statvfs,
              jni.JniType.objectType, [path.reference]).object);

  static final _id_strerror = jniAccessors.getStaticMethodIDOf(
      _classRef, "strerror", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String strerror(int errno)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/strerror.3.html">strerror(2)</a>.
  static jni.JniString strerror(int errno) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_strerror, jni.JniType.objectType, [errno]).object);

  static final _id_strsignal = jniAccessors.getStaticMethodIDOf(
      _classRef, "strsignal", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String strsignal(int signal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/strsignal.3.html">strsignal(3)</a>.
  static jni.JniString strsignal(int signal) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_strsignal, jni.JniType.objectType, [signal]).object);

  static final _id_symlink = jniAccessors.getStaticMethodIDOf(
      _classRef, "symlink", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: static public void symlink(java.lang.String oldPath, java.lang.String newPath)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/symlink.2.html">symlink(2)</a>.
  static void symlink(jni.JniString oldPath, jni.JniString newPath) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_symlink,
          jni.JniType.voidType, [oldPath.reference, newPath.reference]).check();

  static final _id_sysconf =
      jniAccessors.getStaticMethodIDOf(_classRef, "sysconf", "(I)J");

  /// from: static public long sysconf(int name)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/sysconf.3.html">sysconf(3)</a>.
  static int sysconf(int name) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_sysconf, jni.JniType.longType, [name]).long;

  static final _id_tcdrain = jniAccessors.getStaticMethodIDOf(
      _classRef, "tcdrain", "(Ljava/io/FileDescriptor;)V");

  /// from: static public void tcdrain(java.io.FileDescriptor fd)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/tcdrain.3.html">tcdrain(3)</a>.
  static void tcdrain(jni.JniObject fd) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_tcdrain, jni.JniType.voidType, [fd.reference]).check();

  static final _id_tcsendbreak = jniAccessors.getStaticMethodIDOf(
      _classRef, "tcsendbreak", "(Ljava/io/FileDescriptor;I)V");

  /// from: static public void tcsendbreak(java.io.FileDescriptor fd, int duration)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/tcsendbreak.3.html">tcsendbreak(3)</a>.
  static void tcsendbreak(jni.JniObject fd, int duration) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_tcsendbreak,
          jni.JniType.voidType, [fd.reference, duration]).check();

  static final _id_umask =
      jniAccessors.getStaticMethodIDOf(_classRef, "umask", "(I)I");

  /// from: static public int umask(int mask)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/umask.2.html">umask(2)</a>.
  static int umask(int mask) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_umask, jni.JniType.intType, [mask]).integer;

  static final _id_uname = jniAccessors.getStaticMethodIDOf(
      _classRef, "uname", "()Landroid/system/StructUtsname;");

  /// from: static public android.system.StructUtsname uname()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/uname.2.html">uname(2)</a>.
  static structutsname_.StructUtsname uname() =>
      structutsname_.StructUtsname.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef, _id_uname, jni.JniType.objectType, []).object);

  static final _id_unsetenv = jniAccessors.getStaticMethodIDOf(
      _classRef, "unsetenv", "(Ljava/lang/String;)V");

  /// from: static public void unsetenv(java.lang.String name)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man3/unsetenv.3.html">unsetenv(3)</a>.
  static void unsetenv(jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_unsetenv,
          jni.JniType.voidType, [name.reference]).check();

  static final _id_write = jniAccessors.getStaticMethodIDOf(
      _classRef, "write", "(Ljava/io/FileDescriptor;Ljava/nio/ByteBuffer;)I");

  /// from: static public int write(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/write.2.html">write(2)</a>.
  static int write(jni.JniObject fd, jni.JniObject buffer) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_write,
          jni.JniType.intType, [fd.reference, buffer.reference]).integer;

  static final _id_write1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "write", "(Ljava/io/FileDescriptor;[BII)I");

  /// from: static public int write(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/write.2.html">write(2)</a>.
  static int write1(jni.JniObject fd, jni.JniObject bytes, int byteOffset,
          int byteCount) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_write1,
          jni.JniType.intType,
          [fd.reference, bytes.reference, byteOffset, byteCount]).integer;

  static final _id_writev = jniAccessors.getStaticMethodIDOf(_classRef,
      "writev", "(Ljava/io/FileDescriptor;[Ljava/lang/Object;[I[I)I");

  /// from: static public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts)
  ///
  /// See <a href="http://man7.org/linux/man-pages/man2/writev.2.html">writev(2)</a>.
  static int writev(jni.JniObject fd, jni.JniObject buffers,
          jni.JniObject offsets, jni.JniObject byteCounts) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_writev, jni.JniType.intType, [
        fd.reference,
        buffers.reference,
        offsets.reference,
        byteCounts.reference
      ]).integer;
}
