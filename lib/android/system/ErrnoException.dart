// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.system.ErrnoException
///
/// A checked exception thrown when Os methods fail. This exception contains the native
/// errno value, for comparison against the constants in OsConstants, should sophisticated
/// callers need to adjust their behavior based on the exact failure.
class ErrnoException extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/system/ErrnoException");
  ErrnoException.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_errno = jniAccessors.getFieldIDOf(_classRef, "errno", "I");

  /// from: public final int errno
  ///
  /// The errno value, for comparison with the {@code E} constants in OsConstants.
  int get errno =>
      jniAccessors.getField(reference, _id_errno, jni.JniType.intType).integer;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;I)V");

  /// from: public void <init>(java.lang.String functionName, int errno)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an instance with the given function name and errno value.
  ErrnoException(jni.JniString functionName, int errno)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [functionName.reference, errno]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;ILjava/lang/Throwable;)V");

  /// from: public void <init>(java.lang.String functionName, int errno, java.lang.Throwable cause)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an instance with the given function name, errno value, and cause.
  ErrnoException.ctor1(
      jni.JniString functionName, int errno, jni.JniObject cause)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [functionName.reference, errno, cause.reference]).object);

  static final _id_getMessage = jniAccessors.getMethodIDOf(
      _classRef, "getMessage", "()Ljava/lang/String;");

  /// from: public java.lang.String getMessage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Converts the stashed function name and errno value to a human-readable string.
  /// We do this here rather than in the constructor so that callers only pay for
  /// this if they need it.
  jni.JniString getMessage() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMessage, jni.JniType.objectType, []).object);
}
