// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../_init.dart" show jniEnv, jniAccessors;

/// from: android.R
class R extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R");
  R.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$xml
class R_xml extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$xml");
  R_xml.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_xml()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$transition
class R_transition extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$transition");
  R_transition.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int explode
  ///
  /// A transition that moves views in or out of the scene to or from the edges when
  /// a view visibility changes.
  static const explode = 17760259;

  /// from: static public final int fade
  ///
  /// A transition that fades views in and out.
  static const fade = 17760258;

  /// from: static public final int move
  ///
  /// A transition that moves and resizes a view
  static const move = 17760257;

  /// from: static public final int no_transition
  ///
  /// Used for Activity Transitions, this transition indicates that no Transition
  /// should be used.
  static const no_transition = 17760256;

  /// from: static public final int slide_bottom
  ///
  /// A transition that moves views in or out of the scene to or from the bottom edge when
  /// a view visibility changes.
  static const slide_bottom = 17760260;

  /// from: static public final int slide_left
  ///
  /// A transition that moves views in or out of the scene to or from the left edge when
  /// a view visibility changes.
  static const slide_left = 17760263;

  /// from: static public final int slide_right
  ///
  /// A transition that moves views in or out of the scene to or from the right edge when
  /// a view visibility changes.
  static const slide_right = 17760262;

  /// from: static public final int slide_top
  ///
  /// A transition that moves views in or out of the scene to or from the top edge when
  /// a view visibility changes.
  static const slide_top = 17760261;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_transition()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$style
class R_style extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$style");
  R_style.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int Animation
  ///
  /// Base style for animations.  This style specifies no animations.
  static const Animation = 16973824;

  /// from: static public final int Animation_Activity
  ///
  /// Standard animations for a full-screen window or activity.
  static const Animation_Activity = 16973825;

  /// from: static public final int Animation_Dialog
  ///
  /// Standard animations for a non-full-screen window or activity.
  static const Animation_Dialog = 16973826;

  /// from: static public final int Animation_InputMethod
  ///
  /// Window animations that are applied to input method overlay windows.
  static const Animation_InputMethod = 16973910;

  /// from: static public final int Animation_Toast
  static const Animation_Toast = 16973828;

  /// from: static public final int Animation_Translucent
  ///
  /// Standard animations for a translucent window or activity.  This
  /// style is _not_ used by default for the translucent theme
  /// (since translucent activities are a special case that have no
  /// clear UI paradigm), but you can make your own specialized theme
  /// with this animation style if you would like to have the standard
  /// platform transition animation.
  static const Animation_Translucent = 16973827;

  /// from: static public final int DeviceDefault_ButtonBar
  ///
  /// Other Styles
  static const DeviceDefault_ButtonBar = 16974287;

  /// from: static public final int DeviceDefault_ButtonBar_AlertDialog
  static const DeviceDefault_ButtonBar_AlertDialog = 16974288;

  /// from: static public final int DeviceDefault_Light_ButtonBar
  static const DeviceDefault_Light_ButtonBar = 16974290;

  /// from: static public final int DeviceDefault_Light_ButtonBar_AlertDialog
  static const DeviceDefault_Light_ButtonBar_AlertDialog = 16974291;

  /// from: static public final int DeviceDefault_Light_SegmentedButton
  static const DeviceDefault_Light_SegmentedButton = 16974292;

  /// from: static public final int DeviceDefault_SegmentedButton
  static const DeviceDefault_SegmentedButton = 16974289;

  /// from: static public final int Holo_ButtonBar
  static const Holo_ButtonBar = 16974053;

  /// from: static public final int Holo_ButtonBar_AlertDialog
  static const Holo_ButtonBar_AlertDialog = 16974055;

  /// from: static public final int Holo_Light_ButtonBar
  static const Holo_Light_ButtonBar = 16974054;

  /// from: static public final int Holo_Light_ButtonBar_AlertDialog
  static const Holo_Light_ButtonBar_AlertDialog = 16974056;

  /// from: static public final int Holo_Light_SegmentedButton
  static const Holo_Light_SegmentedButton = 16974058;

  /// from: static public final int Holo_SegmentedButton
  static const Holo_SegmentedButton = 16974057;

  /// from: static public final int MediaButton
  static const MediaButton = 16973879;

  /// from: static public final int MediaButton_Ffwd
  static const MediaButton_Ffwd = 16973883;

  /// from: static public final int MediaButton_Next
  static const MediaButton_Next = 16973881;

  /// from: static public final int MediaButton_Pause
  static const MediaButton_Pause = 16973885;

  /// from: static public final int MediaButton_Play
  static const MediaButton_Play = 16973882;

  /// from: static public final int MediaButton_Previous
  static const MediaButton_Previous = 16973880;

  /// from: static public final int MediaButton_Rew
  static const MediaButton_Rew = 16973884;

  /// from: static public final int TextAppearance
  static const TextAppearance = 16973886;

  /// from: static public final int TextAppearance_DeviceDefault
  ///
  /// Text Appearance Styles
  static const TextAppearance_DeviceDefault = 16974253;

  /// from: static public final int TextAppearance_DeviceDefault_DialogWindowTitle
  static const TextAppearance_DeviceDefault_DialogWindowTitle = 16974264;

  /// from: static public final int TextAppearance_DeviceDefault_Inverse
  static const TextAppearance_DeviceDefault_Inverse = 16974254;

  /// from: static public final int TextAppearance_DeviceDefault_Large
  static const TextAppearance_DeviceDefault_Large = 16974255;

  /// from: static public final int TextAppearance_DeviceDefault_Large_Inverse
  static const TextAppearance_DeviceDefault_Large_Inverse = 16974256;

  /// from: static public final int TextAppearance_DeviceDefault_Medium
  static const TextAppearance_DeviceDefault_Medium = 16974257;

  /// from: static public final int TextAppearance_DeviceDefault_Medium_Inverse
  static const TextAppearance_DeviceDefault_Medium_Inverse = 16974258;

  /// from: static public final int TextAppearance_DeviceDefault_SearchResult_Subtitle
  static const TextAppearance_DeviceDefault_SearchResult_Subtitle = 16974262;

  /// from: static public final int TextAppearance_DeviceDefault_SearchResult_Title
  static const TextAppearance_DeviceDefault_SearchResult_Title = 16974261;

  /// from: static public final int TextAppearance_DeviceDefault_Small
  static const TextAppearance_DeviceDefault_Small = 16974259;

  /// from: static public final int TextAppearance_DeviceDefault_Small_Inverse
  static const TextAppearance_DeviceDefault_Small_Inverse = 16974260;

  /// from: static public final int TextAppearance_DeviceDefault_Widget
  static const TextAppearance_DeviceDefault_Widget = 16974265;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_ActionBar_Menu
  static const TextAppearance_DeviceDefault_Widget_ActionBar_Menu = 16974286;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle
  static const TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle =
      16974279;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse
  ///
  /// @deprecated Action bars are now themed using the inheritable android:theme attribute.
  static const TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse =
      16974283;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_ActionBar_Title
  static const TextAppearance_DeviceDefault_Widget_ActionBar_Title = 16974278;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse
  ///
  /// @deprecated Action bars are now themed using the inheritable android:theme attribute.
  static const TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse =
      16974282;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle
  static const TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle =
      16974281;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse
  ///
  /// @deprecated Action bars are now themed using the inheritable android:theme attribute.
  static const TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse =
      16974285;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_ActionMode_Title
  static const TextAppearance_DeviceDefault_Widget_ActionMode_Title = 16974280;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse
  ///
  /// @deprecated Action bars are now themed using the inheritable android:theme attribute.
  static const TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse =
      16974284;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_Button
  static const TextAppearance_DeviceDefault_Widget_Button = 16974266;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_DropDownHint
  static const TextAppearance_DeviceDefault_Widget_DropDownHint = 16974271;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_DropDownItem
  static const TextAppearance_DeviceDefault_Widget_DropDownItem = 16974272;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_EditText
  static const TextAppearance_DeviceDefault_Widget_EditText = 16974274;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_IconMenu_Item
  static const TextAppearance_DeviceDefault_Widget_IconMenu_Item = 16974267;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_PopupMenu
  static const TextAppearance_DeviceDefault_Widget_PopupMenu = 16974275;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_PopupMenu_Large
  static const TextAppearance_DeviceDefault_Widget_PopupMenu_Large = 16974276;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_PopupMenu_Small
  static const TextAppearance_DeviceDefault_Widget_PopupMenu_Small = 16974277;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_TabWidget
  static const TextAppearance_DeviceDefault_Widget_TabWidget = 16974268;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_TextView
  static const TextAppearance_DeviceDefault_Widget_TextView = 16974269;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_TextView_PopupMenu
  static const TextAppearance_DeviceDefault_Widget_TextView_PopupMenu =
      16974270;

  /// from: static public final int TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem
  static const TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem =
      16974273;

  /// from: static public final int TextAppearance_DeviceDefault_WindowTitle
  static const TextAppearance_DeviceDefault_WindowTitle = 16974263;

  /// from: static public final int TextAppearance_DialogWindowTitle
  static const TextAppearance_DialogWindowTitle = 16973889;

  /// from: static public final int TextAppearance_Holo
  ///
  /// Text Styles
  static const TextAppearance_Holo = 16974075;

  /// from: static public final int TextAppearance_Holo_DialogWindowTitle
  static const TextAppearance_Holo_DialogWindowTitle = 16974103;

  /// from: static public final int TextAppearance_Holo_Inverse
  static const TextAppearance_Holo_Inverse = 16974076;

  /// from: static public final int TextAppearance_Holo_Large
  static const TextAppearance_Holo_Large = 16974077;

  /// from: static public final int TextAppearance_Holo_Large_Inverse
  static const TextAppearance_Holo_Large_Inverse = 16974078;

  /// from: static public final int TextAppearance_Holo_Medium
  static const TextAppearance_Holo_Medium = 16974079;

  /// from: static public final int TextAppearance_Holo_Medium_Inverse
  static const TextAppearance_Holo_Medium_Inverse = 16974080;

  /// from: static public final int TextAppearance_Holo_SearchResult_Subtitle
  static const TextAppearance_Holo_SearchResult_Subtitle = 16974084;

  /// from: static public final int TextAppearance_Holo_SearchResult_Title
  static const TextAppearance_Holo_SearchResult_Title = 16974083;

  /// from: static public final int TextAppearance_Holo_Small
  static const TextAppearance_Holo_Small = 16974081;

  /// from: static public final int TextAppearance_Holo_Small_Inverse
  static const TextAppearance_Holo_Small_Inverse = 16974082;

  /// from: static public final int TextAppearance_Holo_Widget
  static const TextAppearance_Holo_Widget = 16974085;

  /// from: static public final int TextAppearance_Holo_Widget_ActionBar_Menu
  static const TextAppearance_Holo_Widget_ActionBar_Menu = 16974112;

  /// from: static public final int TextAppearance_Holo_Widget_ActionBar_Subtitle
  static const TextAppearance_Holo_Widget_ActionBar_Subtitle = 16974099;

  /// from: static public final int TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse
  static const TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse = 16974109;

  /// from: static public final int TextAppearance_Holo_Widget_ActionBar_Title
  static const TextAppearance_Holo_Widget_ActionBar_Title = 16974098;

  /// from: static public final int TextAppearance_Holo_Widget_ActionBar_Title_Inverse
  static const TextAppearance_Holo_Widget_ActionBar_Title_Inverse = 16974108;

  /// from: static public final int TextAppearance_Holo_Widget_ActionMode_Subtitle
  static const TextAppearance_Holo_Widget_ActionMode_Subtitle = 16974101;

  /// from: static public final int TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse
  static const TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse =
      16974111;

  /// from: static public final int TextAppearance_Holo_Widget_ActionMode_Title
  static const TextAppearance_Holo_Widget_ActionMode_Title = 16974100;

  /// from: static public final int TextAppearance_Holo_Widget_ActionMode_Title_Inverse
  static const TextAppearance_Holo_Widget_ActionMode_Title_Inverse = 16974110;

  /// from: static public final int TextAppearance_Holo_Widget_Button
  static const TextAppearance_Holo_Widget_Button = 16974086;

  /// from: static public final int TextAppearance_Holo_Widget_DropDownHint
  static const TextAppearance_Holo_Widget_DropDownHint = 16974091;

  /// from: static public final int TextAppearance_Holo_Widget_DropDownItem
  static const TextAppearance_Holo_Widget_DropDownItem = 16974092;

  /// from: static public final int TextAppearance_Holo_Widget_EditText
  static const TextAppearance_Holo_Widget_EditText = 16974094;

  /// from: static public final int TextAppearance_Holo_Widget_IconMenu_Item
  static const TextAppearance_Holo_Widget_IconMenu_Item = 16974087;

  /// from: static public final int TextAppearance_Holo_Widget_PopupMenu
  static const TextAppearance_Holo_Widget_PopupMenu = 16974095;

  /// from: static public final int TextAppearance_Holo_Widget_PopupMenu_Large
  static const TextAppearance_Holo_Widget_PopupMenu_Large = 16974096;

  /// from: static public final int TextAppearance_Holo_Widget_PopupMenu_Small
  static const TextAppearance_Holo_Widget_PopupMenu_Small = 16974097;

  /// from: static public final int TextAppearance_Holo_Widget_TabWidget
  ///
  /// This style is for smaller screens; values-xlarge defines a version
  /// for larger screens.
  static const TextAppearance_Holo_Widget_TabWidget = 16974088;

  /// from: static public final int TextAppearance_Holo_Widget_TextView
  static const TextAppearance_Holo_Widget_TextView = 16974089;

  /// from: static public final int TextAppearance_Holo_Widget_TextView_PopupMenu
  static const TextAppearance_Holo_Widget_TextView_PopupMenu = 16974090;

  /// from: static public final int TextAppearance_Holo_Widget_TextView_SpinnerItem
  static const TextAppearance_Holo_Widget_TextView_SpinnerItem = 16974093;

  /// from: static public final int TextAppearance_Holo_WindowTitle
  static const TextAppearance_Holo_WindowTitle = 16974102;

  /// from: static public final int TextAppearance_Inverse
  static const TextAppearance_Inverse = 16973887;

  /// from: static public final int TextAppearance_Large
  static const TextAppearance_Large = 16973890;

  /// from: static public final int TextAppearance_Large_Inverse
  static const TextAppearance_Large_Inverse = 16973891;

  /// from: static public final int TextAppearance_Material
  ///
  /// Text styles
  static const TextAppearance_Material = 16974317;

  /// from: static public final int TextAppearance_Material_Body1
  static const TextAppearance_Material_Body1 = 16974320;

  /// from: static public final int TextAppearance_Material_Body2
  static const TextAppearance_Material_Body2 = 16974319;

  /// from: static public final int TextAppearance_Material_Button
  static const TextAppearance_Material_Button = 16974318;

  /// from: static public final int TextAppearance_Material_Caption
  static const TextAppearance_Material_Caption = 16974321;

  /// from: static public final int TextAppearance_Material_DialogWindowTitle
  static const TextAppearance_Material_DialogWindowTitle = 16974322;

  /// from: static public final int TextAppearance_Material_Display1
  static const TextAppearance_Material_Display1 = 16974326;

  /// from: static public final int TextAppearance_Material_Display2
  static const TextAppearance_Material_Display2 = 16974325;

  /// from: static public final int TextAppearance_Material_Display3
  static const TextAppearance_Material_Display3 = 16974324;

  /// from: static public final int TextAppearance_Material_Display4
  static const TextAppearance_Material_Display4 = 16974323;

  /// from: static public final int TextAppearance_Material_Headline
  static const TextAppearance_Material_Headline = 16974327;

  /// from: static public final int TextAppearance_Material_Inverse
  ///
  /// Deprecated text styles
  static const TextAppearance_Material_Inverse = 16974328;

  /// from: static public final int TextAppearance_Material_Large
  static const TextAppearance_Material_Large = 16974329;

  /// from: static public final int TextAppearance_Material_Large_Inverse
  static const TextAppearance_Material_Large_Inverse = 16974330;

  /// from: static public final int TextAppearance_Material_Medium
  static const TextAppearance_Material_Medium = 16974331;

  /// from: static public final int TextAppearance_Material_Medium_Inverse
  static const TextAppearance_Material_Medium_Inverse = 16974332;

  /// from: static public final int TextAppearance_Material_Menu
  static const TextAppearance_Material_Menu = 16974333;

  /// from: static public final int TextAppearance_Material_Notification
  static const TextAppearance_Material_Notification = 16974334;

  /// from: static public final int TextAppearance_Material_Notification_Emphasis
  static const TextAppearance_Material_Notification_Emphasis = 16974335;

  /// from: static public final int TextAppearance_Material_Notification_Info
  static const TextAppearance_Material_Notification_Info = 16974336;

  /// from: static public final int TextAppearance_Material_Notification_Line2
  static const TextAppearance_Material_Notification_Line2 = 16974337;

  /// from: static public final int TextAppearance_Material_Notification_Time
  static const TextAppearance_Material_Notification_Time = 16974338;

  /// from: static public final int TextAppearance_Material_Notification_Title
  static const TextAppearance_Material_Notification_Title = 16974339;

  /// from: static public final int TextAppearance_Material_SearchResult_Subtitle
  static const TextAppearance_Material_SearchResult_Subtitle = 16974340;

  /// from: static public final int TextAppearance_Material_SearchResult_Title
  static const TextAppearance_Material_SearchResult_Title = 16974341;

  /// from: static public final int TextAppearance_Material_Small
  static const TextAppearance_Material_Small = 16974342;

  /// from: static public final int TextAppearance_Material_Small_Inverse
  static const TextAppearance_Material_Small_Inverse = 16974343;

  /// from: static public final int TextAppearance_Material_Subhead
  static const TextAppearance_Material_Subhead = 16974344;

  /// from: static public final int TextAppearance_Material_Title
  static const TextAppearance_Material_Title = 16974345;

  /// from: static public final int TextAppearance_Material_Widget
  static const TextAppearance_Material_Widget = 16974347;

  /// from: static public final int TextAppearance_Material_Widget_ActionBar_Menu
  static const TextAppearance_Material_Widget_ActionBar_Menu = 16974348;

  /// from: static public final int TextAppearance_Material_Widget_ActionBar_Subtitle
  static const TextAppearance_Material_Widget_ActionBar_Subtitle = 16974349;

  /// from: static public final int TextAppearance_Material_Widget_ActionBar_Subtitle_Inverse
  static const TextAppearance_Material_Widget_ActionBar_Subtitle_Inverse =
      16974350;

  /// from: static public final int TextAppearance_Material_Widget_ActionBar_Title
  static const TextAppearance_Material_Widget_ActionBar_Title = 16974351;

  /// from: static public final int TextAppearance_Material_Widget_ActionBar_Title_Inverse
  static const TextAppearance_Material_Widget_ActionBar_Title_Inverse =
      16974352;

  /// from: static public final int TextAppearance_Material_Widget_ActionMode_Subtitle
  static const TextAppearance_Material_Widget_ActionMode_Subtitle = 16974353;

  /// from: static public final int TextAppearance_Material_Widget_ActionMode_Subtitle_Inverse
  static const TextAppearance_Material_Widget_ActionMode_Subtitle_Inverse =
      16974354;

  /// from: static public final int TextAppearance_Material_Widget_ActionMode_Title
  static const TextAppearance_Material_Widget_ActionMode_Title = 16974355;

  /// from: static public final int TextAppearance_Material_Widget_ActionMode_Title_Inverse
  static const TextAppearance_Material_Widget_ActionMode_Title_Inverse =
      16974356;

  /// from: static public final int TextAppearance_Material_Widget_Button
  static const TextAppearance_Material_Widget_Button = 16974357;

  /// from: static public final int TextAppearance_Material_Widget_Button_Borderless_Colored
  static const TextAppearance_Material_Widget_Button_Borderless_Colored =
      16974559;

  /// from: static public final int TextAppearance_Material_Widget_Button_Colored
  static const TextAppearance_Material_Widget_Button_Colored = 16974558;

  /// from: static public final int TextAppearance_Material_Widget_Button_Inverse
  static const TextAppearance_Material_Widget_Button_Inverse = 16974548;

  /// from: static public final int TextAppearance_Material_Widget_DropDownHint
  static const TextAppearance_Material_Widget_DropDownHint = 16974358;

  /// from: static public final int TextAppearance_Material_Widget_DropDownItem
  static const TextAppearance_Material_Widget_DropDownItem = 16974359;

  /// from: static public final int TextAppearance_Material_Widget_EditText
  static const TextAppearance_Material_Widget_EditText = 16974360;

  /// from: static public final int TextAppearance_Material_Widget_IconMenu_Item
  static const TextAppearance_Material_Widget_IconMenu_Item = 16974361;

  /// from: static public final int TextAppearance_Material_Widget_PopupMenu
  static const TextAppearance_Material_Widget_PopupMenu = 16974362;

  /// from: static public final int TextAppearance_Material_Widget_PopupMenu_Large
  static const TextAppearance_Material_Widget_PopupMenu_Large = 16974363;

  /// from: static public final int TextAppearance_Material_Widget_PopupMenu_Small
  static const TextAppearance_Material_Widget_PopupMenu_Small = 16974364;

  /// from: static public final int TextAppearance_Material_Widget_TabWidget
  static const TextAppearance_Material_Widget_TabWidget = 16974365;

  /// from: static public final int TextAppearance_Material_Widget_TextView
  static const TextAppearance_Material_Widget_TextView = 16974366;

  /// from: static public final int TextAppearance_Material_Widget_TextView_PopupMenu
  static const TextAppearance_Material_Widget_TextView_PopupMenu = 16974367;

  /// from: static public final int TextAppearance_Material_Widget_TextView_SpinnerItem
  static const TextAppearance_Material_Widget_TextView_SpinnerItem = 16974368;

  /// from: static public final int TextAppearance_Material_Widget_Toolbar_Subtitle
  static const TextAppearance_Material_Widget_Toolbar_Subtitle = 16974369;

  /// from: static public final int TextAppearance_Material_Widget_Toolbar_Title
  static const TextAppearance_Material_Widget_Toolbar_Title = 16974370;

  /// from: static public final int TextAppearance_Material_WindowTitle
  static const TextAppearance_Material_WindowTitle = 16974346;

  /// from: static public final int TextAppearance_Medium
  static const TextAppearance_Medium = 16973892;

  /// from: static public final int TextAppearance_Medium_Inverse
  static const TextAppearance_Medium_Inverse = 16973893;

  /// from: static public final int TextAppearance_Small
  static const TextAppearance_Small = 16973894;

  /// from: static public final int TextAppearance_Small_Inverse
  static const TextAppearance_Small_Inverse = 16973895;

  /// from: static public final int TextAppearance_StatusBar_EventContent
  ///
  /// Notification content styles
  static const TextAppearance_StatusBar_EventContent = 16973927;

  /// from: static public final int TextAppearance_StatusBar_EventContent_Title
  static const TextAppearance_StatusBar_EventContent_Title = 16973928;

  /// from: static public final int TextAppearance_StatusBar_Icon
  static const TextAppearance_StatusBar_Icon = 16973926;

  /// from: static public final int TextAppearance_StatusBar_Title
  static const TextAppearance_StatusBar_Title = 16973925;

  /// from: static public final int TextAppearance_SuggestionHighlight
  static const TextAppearance_SuggestionHighlight = 16974104;

  /// from: static public final int TextAppearance_Theme
  static const TextAppearance_Theme = 16973888;

  /// from: static public final int TextAppearance_Theme_Dialog
  static const TextAppearance_Theme_Dialog = 16973896;

  /// from: static public final int TextAppearance_Widget
  static const TextAppearance_Widget = 16973897;

  /// from: static public final int TextAppearance_Widget_Button
  static const TextAppearance_Widget_Button = 16973898;

  /// from: static public final int TextAppearance_Widget_DropDownHint
  static const TextAppearance_Widget_DropDownHint = 16973904;

  /// from: static public final int TextAppearance_Widget_DropDownItem
  static const TextAppearance_Widget_DropDownItem = 16973905;

  /// from: static public final int TextAppearance_Widget_EditText
  static const TextAppearance_Widget_EditText = 16973900;

  /// from: static public final int TextAppearance_Widget_IconMenu_Item
  static const TextAppearance_Widget_IconMenu_Item = 16973899;

  /// from: static public final int TextAppearance_Widget_PopupMenu_Large
  static const TextAppearance_Widget_PopupMenu_Large = 16973952;

  /// from: static public final int TextAppearance_Widget_PopupMenu_Small
  static const TextAppearance_Widget_PopupMenu_Small = 16973953;

  /// from: static public final int TextAppearance_Widget_TabWidget
  static const TextAppearance_Widget_TabWidget = 16973901;

  /// from: static public final int TextAppearance_Widget_TextView
  static const TextAppearance_Widget_TextView = 16973902;

  /// from: static public final int TextAppearance_Widget_TextView_PopupMenu
  static const TextAppearance_Widget_TextView_PopupMenu = 16973903;

  /// from: static public final int TextAppearance_Widget_TextView_SpinnerItem
  static const TextAppearance_Widget_TextView_SpinnerItem = 16973906;

  /// from: static public final int TextAppearance_WindowTitle
  static const TextAppearance_WindowTitle = 16973907;

  /// from: static public final int Theme
  ///
  /// The default theme for apps on API level 10 and lower. This is the theme used for
  /// activities that have not explicitly set their own theme.
  /// You can count on this being a dark
  /// background with light text on top, but should try to make no
  /// other assumptions about its appearance. In particular, the text
  /// inside of widgets using this theme may be completely different,
  /// with the widget container being a light color and the text on top
  /// of it a dark color.
  /// If you're developing for API level 11 and higher, you should instead use \#Theme_Holo or \#Theme_DeviceDefault.
  ///
  static const Theme = 16973829;

  /// from: static public final int ThemeOverlay
  static const ThemeOverlay = 16974407;

  /// from: static public final int ThemeOverlay_Material
  static const ThemeOverlay_Material = 16974408;

  /// from: static public final int ThemeOverlay_Material_ActionBar
  ///
  /// Theme overlay that replaces the normal control color, which by default is the same as the
  /// secondary text color, with the primary text color.
  static const ThemeOverlay_Material_ActionBar = 16974409;

  /// from: static public final int ThemeOverlay_Material_Dark
  ///
  /// Theme overlay that replaces colors with their dark versions but preserves
  /// the value of colorAccent, colorPrimary and its variants.
  static const ThemeOverlay_Material_Dark = 16974411;

  /// from: static public final int ThemeOverlay_Material_Dark_ActionBar
  ///
  /// Theme overlay that replaces colors with their dark versions and replaces the normal
  /// control color, which by default is the same as the secondary text color, with the primary
  /// text color.
  static const ThemeOverlay_Material_Dark_ActionBar = 16974412;

  /// from: static public final int ThemeOverlay_Material_Dialog
  ///
  /// Theme overlay that overrides window properties to display as a dialog.
  /// Override behaviour to set the theme colours for dialogs, keep them the same.
  static const ThemeOverlay_Material_Dialog = 16974550;

  /// from: static public final int ThemeOverlay_Material_Dialog_Alert
  static const ThemeOverlay_Material_Dialog_Alert = 16974551;

  /// from: static public final int ThemeOverlay_Material_Light
  ///
  /// Theme overlay that replaces colors with their light versions but preserves
  /// the value of colorAccent, colorPrimary and its variants.
  static const ThemeOverlay_Material_Light = 16974410;

  /// from: static public final int Theme_Black
  ///
  /// Variant on \#Theme that ensures the background is
  /// completely black.  This is useful for things like image viewers and
  /// media players.   If you want the normal (dark background) theme
  /// do _not_ use this, use \#Theme.
  static const Theme_Black = 16973832;

  /// from: static public final int Theme_Black_NoTitleBar
  ///
  /// Variant of \#Theme_Black with no title bar
  static const Theme_Black_NoTitleBar = 16973833;

  /// from: static public final int Theme_Black_NoTitleBar_Fullscreen
  ///
  /// Variant of \#Theme_Black that has no title bar and
  /// no status bar.  This theme
  /// sets android.R.attr\#windowFullscreen to true.
  static const Theme_Black_NoTitleBar_Fullscreen = 16973834;

  /// from: static public final int Theme_DeviceDefault
  static const Theme_DeviceDefault = 16974120;

  /// from: static public final int Theme_DeviceDefault_Dialog
  ///
  /// DeviceDefault theme for dialog windows and activities. This changes the window to be
  /// floating (not fill the entire screen), and puts a frame around its contents. You can set this
  /// theme on an activity if you would like to make an activity that looks like a Dialog.
  /// DeviceDefault theme for dialog windows and activities. In contrast to Material, the
  /// watch theme is not floating. You can set this theme on an activity if you would like to make
  /// an activity that looks like a Dialog.
  static const Theme_DeviceDefault_Dialog = 16974126;

  /// from: static public final int Theme_DeviceDefault_DialogWhenLarge
  ///
  /// DeviceDefault theme for a window that will be displayed either full-screen on smaller
  /// screens (small, normal) or as a dialog on larger screens (large, xlarge).
  /// DeviceDefault theme for a window that will be displayed either full-screen on smaller
  /// screens (small, normal) or as a dialog on larger screens (large, xlarge).
  static const Theme_DeviceDefault_DialogWhenLarge = 16974134;

  /// from: static public final int Theme_DeviceDefault_DialogWhenLarge_NoActionBar
  ///
  /// DeviceDefault theme for a window without an action bar that will be displayed either
  /// full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
  /// xlarge).
  /// DeviceDefault theme for a window without an action bar that will be displayed either
  /// full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
  /// xlarge).
  static const Theme_DeviceDefault_DialogWhenLarge_NoActionBar = 16974135;

  /// from: static public final int Theme_DeviceDefault_Dialog_Alert
  static const Theme_DeviceDefault_Dialog_Alert = 16974545;

  /// from: static public final int Theme_DeviceDefault_Dialog_MinWidth
  ///
  /// Variant of \#Theme_DeviceDefault_Dialog that has a nice minimum width for a
  /// regular dialog.
  /// Variant of \#Theme_DeviceDefault_Dialog that has a nice minimum width for a
  /// regular dialog.
  static const Theme_DeviceDefault_Dialog_MinWidth = 16974127;

  /// from: static public final int Theme_DeviceDefault_Dialog_NoActionBar
  ///
  /// Variant of \#Theme_DeviceDefault_Dialog without an action bar
  /// Variant of \#Theme_DeviceDefault_Dialog without an action bar
  static const Theme_DeviceDefault_Dialog_NoActionBar = 16974128;

  /// from: static public final int Theme_DeviceDefault_Dialog_NoActionBar_MinWidth
  ///
  /// Variant of \#Theme_DeviceDefault_Dialog_NoActionBar that has a nice minimum width
  /// for a regular dialog.
  /// Variant of \#Theme_DeviceDefault_Dialog_NoActionBar that has a nice minimum width
  /// for a regular dialog.
  static const Theme_DeviceDefault_Dialog_NoActionBar_MinWidth = 16974129;

  /// from: static public final int Theme_DeviceDefault_InputMethod
  ///
  /// DeviceDefault style for input methods, which is used by the
  /// android.inputmethodservice.InputMethodService class.
  /// DeviceDefault style for input methods, which is used by the
  /// android.inputmethodservice.InputMethodService class.
  static const Theme_DeviceDefault_InputMethod = 16974142;

  /// from: static public final int Theme_DeviceDefault_Light
  ///
  /// Variant of \#Theme_DeviceDefault with a light-colored style
  static const Theme_DeviceDefault_Light = 16974123;

  /// from: static public final int Theme_DeviceDefault_Light_DarkActionBar
  ///
  /// Variant of the DeviceDefault (light) theme that has a solid (opaque) action bar with an
  /// inverse color profile.
  static const Theme_DeviceDefault_Light_DarkActionBar = 16974143;

  /// from: static public final int Theme_DeviceDefault_Light_Dialog
  ///
  /// DeviceDefault light theme for dialog windows and activities. This changes the window to be
  /// floating (not fill the entire screen), and puts a frame around its contents. You can set this
  /// theme on an activity if you would like to make an activity that looks like a Dialog.
  static const Theme_DeviceDefault_Light_Dialog = 16974130;

  /// from: static public final int Theme_DeviceDefault_Light_DialogWhenLarge
  ///
  /// DeviceDefault light theme for a window that will be displayed either full-screen on smaller
  /// screens (small, normal) or as a dialog on larger screens (large, xlarge).
  static const Theme_DeviceDefault_Light_DialogWhenLarge = 16974136;

  /// from: static public final int Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar
  ///
  /// DeviceDefault light theme for a window without an action bar that will be displayed either
  /// full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
  /// xlarge).
  static const Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar = 16974137;

  /// from: static public final int Theme_DeviceDefault_Light_Dialog_Alert
  static const Theme_DeviceDefault_Light_Dialog_Alert = 16974546;

  /// from: static public final int Theme_DeviceDefault_Light_Dialog_MinWidth
  ///
  /// Variant of \#Theme_DeviceDefault_Light_Dialog that has a nice minimum width for a
  /// regular dialog.
  static const Theme_DeviceDefault_Light_Dialog_MinWidth = 16974131;

  /// from: static public final int Theme_DeviceDefault_Light_Dialog_NoActionBar
  ///
  /// Variant of \#Theme_DeviceDefault_Light_Dialog without an action bar
  static const Theme_DeviceDefault_Light_Dialog_NoActionBar = 16974132;

  /// from: static public final int Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth
  ///
  /// Variant of \#Theme_DeviceDefault_Light_Dialog_NoActionBar that has a nice minimum
  /// width for a regular dialog.
  static const Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth = 16974133;

  /// from: static public final int Theme_DeviceDefault_Light_NoActionBar
  ///
  /// Variant of \#Theme_DeviceDefault_Light with no action bar
  static const Theme_DeviceDefault_Light_NoActionBar = 16974124;

  /// from: static public final int Theme_DeviceDefault_Light_NoActionBar_Fullscreen
  ///
  /// Variant of \#Theme_DeviceDefault_Light with no action bar and no status bar.
  /// This theme sets android.R.attr\#windowFullscreen to true.
  static const Theme_DeviceDefault_Light_NoActionBar_Fullscreen = 16974125;

  /// from: static public final int Theme_DeviceDefault_Light_NoActionBar_Overscan
  ///
  /// Variant of \#Theme_DeviceDefault_Light with no action bar and no status bar
  /// and extending in to overscan region.  This theme
  /// sets android.R.attr\#windowFullscreen and android.R.attr\#windowOverscan
  /// to true.
  static const Theme_DeviceDefault_Light_NoActionBar_Overscan = 16974304;

  /// from: static public final int Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor
  ///
  /// Variant of \#Theme_DeviceDefault_Light that has no title bar and translucent
  /// system decor.  This theme sets android.R.attr\#windowTranslucentStatus and
  /// android.R.attr\#windowTranslucentNavigation to true.
  static const Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor =
      16974308;

  /// from: static public final int Theme_DeviceDefault_Light_Panel
  ///
  /// DeviceDefault light theme for panel windows. This removes all extraneous window
  /// decorations, so you basically have an empty rectangle in which to place your content. It makes
  /// the window floating, with a transparent background, and turns off dimming behind the window.
  static const Theme_DeviceDefault_Light_Panel = 16974139;

  /// from: static public final int Theme_DeviceDefault_NoActionBar
  ///
  /// Variant of \#Theme_DeviceDefault with no action bar
  /// Variant of \#Theme_DeviceDefault with no action bar
  static const Theme_DeviceDefault_NoActionBar = 16974121;

  /// from: static public final int Theme_DeviceDefault_NoActionBar_Fullscreen
  ///
  /// Variant of \#Theme_DeviceDefault with no action bar and no status bar.  This theme
  /// sets android.R.attr\#windowFullscreen to true.
  /// Variant of \#Theme_DeviceDefault with no action bar and no status bar.  This theme
  /// sets android.R.attr\#windowFullscreen to true.
  static const Theme_DeviceDefault_NoActionBar_Fullscreen = 16974122;

  /// from: static public final int Theme_DeviceDefault_NoActionBar_Overscan
  ///
  /// Variant of \#Theme_DeviceDefault with no action bar and no status bar and
  /// extending in to overscan region.  This theme
  /// sets android.R.attr\#windowFullscreen and android.R.attr\#windowOverscan
  /// to true.
  /// Variant of \#Theme_DeviceDefault with no action bar and no status bar and
  /// extending in to overscan region.  This theme
  /// sets android.R.attr\#windowFullscreen and android.R.attr\#windowOverscan
  /// to true.
  static const Theme_DeviceDefault_NoActionBar_Overscan = 16974303;

  /// from: static public final int Theme_DeviceDefault_NoActionBar_TranslucentDecor
  ///
  /// Variant of \#Theme_DeviceDefault that has no title bar and translucent
  /// system decor.  This theme sets android.R.attr\#windowTranslucentStatus and
  /// android.R.attr\#windowTranslucentNavigation to true.
  /// Variant of \#Theme_DeviceDefault that has no title bar and translucent
  /// system decor.  This theme sets android.R.attr\#windowTranslucentStatus and
  /// android.R.attr\#windowTranslucentNavigation to true.
  static const Theme_DeviceDefault_NoActionBar_TranslucentDecor = 16974307;

  /// from: static public final int Theme_DeviceDefault_Panel
  ///
  /// DeviceDefault theme for panel windows. This removes all extraneous window
  /// decorations, so you basically have an empty rectangle in which to place your content. It makes
  /// the window floating, with a transparent background, and turns off dimming behind the window.
  /// DeviceDefault theme for panel windows. This removes all extraneous window
  /// decorations, so you basically have an empty rectangle in which to place your content. It makes
  /// the window floating, with a transparent background, and turns off dimming behind the window.
  static const Theme_DeviceDefault_Panel = 16974138;

  /// from: static public final int Theme_DeviceDefault_Settings
  ///
  /// DeviceDefault theme for a window that should look like the Settings app.
  /// DeviceDefault theme for a window that should look like the Settings app.
  static const Theme_DeviceDefault_Settings = 16974371;

  /// from: static public final int Theme_DeviceDefault_Wallpaper
  ///
  /// DeviceDefault theme for windows that want to have the user's selected wallpaper appear
  /// behind them.
  /// DeviceDefault theme for windows that want to have the user's selected wallpaper appear
  /// behind them.
  static const Theme_DeviceDefault_Wallpaper = 16974140;

  /// from: static public final int Theme_DeviceDefault_Wallpaper_NoTitleBar
  ///
  /// DeviceDefault theme for windows that want to have the user's selected wallpaper appear
  /// behind them and without an action bar.
  /// DeviceDefault theme for windows that want to have the user's selected wallpaper appear
  /// behind them and without an action bar.
  static const Theme_DeviceDefault_Wallpaper_NoTitleBar = 16974141;

  /// from: static public final int Theme_Dialog
  ///
  /// Default theme for dialog windows and activities (on API level 10 and lower),
  /// which is used by the
  /// android.app.Dialog class.  This changes the window to be
  /// floating (not fill the entire screen), and puts a frame around its
  /// contents.  You can set this theme on an activity if you would like to
  /// make an activity that looks like a Dialog.
  static const Theme_Dialog = 16973835;

  /// from: static public final int Theme_Holo
  ///
  /// Honeycomb holographic theme (dark version).
  /// This is the default system theme for apps that target API level 11 - 20. Starting
  /// with API level 14, the default system theme is supplied by \#Theme_DeviceDefault,
  /// which might apply a different style on different devices. If you want to ensure that your
  /// app consistently uses the Holo theme at all times, you must explicitly declare it in your
  /// manifest. For example, {@code <application android:theme="@android:style/Theme.Holo">}.
  /// For more information, read <a href="http://android-developers.blogspot.com/2012/01/holo-everywhere.html">Holo
  /// Everywhere</a>.
  ///
  /// The widgets in the holographic theme are translucent on their background, so
  /// applications must ensure that any background they use with this theme is itself
  /// dark; otherwise, it will be difficult to see the widgets. This UI style also includes a
  /// full action bar by default.
  ///
  /// Styles used by the Holo theme are named using the convention Type.Holo.Etc
  /// (for example, {@code Widget.Holo.Button} and {@code
  /// TextAppearance.Holo.Widget.PopupMenu.Large}).
  /// Specific resources used by Holo are named using the convention @type/foo_bar_baz_holo
  /// with trailing _dark or _light specifiers if they are not shared between both light and
  /// dark versions of the theme.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo = 16973931;

  /// from: static public final int Theme_Holo_Dialog
  ///
  /// Holo theme for dialog windows and activities, which is used by the
  /// android.app.Dialog class.  This changes the window to be
  /// floating (not fill the entire screen), and puts a frame around its
  /// contents.  You can set this theme on an activity if you would like to
  /// make an activity that looks like a Dialog.
  /// This is the default Dialog theme for applications targeting Honeycomb
  /// or newer.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Dialog = 16973935;

  /// from: static public final int Theme_Holo_DialogWhenLarge
  ///
  /// Theme for a window that will be displayed either full-screen on
  /// smaller screens (small, normal) or as a dialog on larger screens
  /// (large, xlarge).
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_DialogWhenLarge = 16973943;

  /// from: static public final int Theme_Holo_DialogWhenLarge_NoActionBar
  ///
  /// Theme for a window without a title bar that will be displayed either
  /// full-screen on smaller screens (small, normal) or as a dialog on larger screens
  /// (large, xlarge).
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_DialogWhenLarge_NoActionBar = 16973944;

  /// from: static public final int Theme_Holo_Dialog_MinWidth
  ///
  /// Variant of Theme.Holo.Dialog that has a nice minimum width for
  /// a regular dialog.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Dialog_MinWidth = 16973936;

  /// from: static public final int Theme_Holo_Dialog_NoActionBar
  ///
  /// Variant of Theme.Holo.Dialog that does not include a title bar.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Dialog_NoActionBar = 16973937;

  /// from: static public final int Theme_Holo_Dialog_NoActionBar_MinWidth
  ///
  /// Variant of Theme.Holo.Dialog.NoActionBar that has a nice minimum width for
  /// a regular dialog.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Dialog_NoActionBar_MinWidth = 16973938;

  /// from: static public final int Theme_Holo_InputMethod
  ///
  /// Default theme for holo style input methods, which is used by the
  /// android.inputmethodservice.InputMethodService class.
  /// this inherits from Theme.Panel, but sets up IME appropriate animations
  /// and a few custom attributes.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_InputMethod = 16973951;

  /// from: static public final int Theme_Holo_Light
  ///
  /// Honeycomb holographic theme (light version).  The widgets in the
  /// holographic theme are translucent on their brackground, so applications
  /// must ensure that any background they use with this theme is itself
  /// light; otherwise, it will be difficult to see the widgets.  This
  /// UI style also includes a full action bar by default.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light = 16973934;

  /// from: static public final int Theme_Holo_Light_DarkActionBar
  ///
  /// Variant of the holographic (light) theme that has a solid (opaque) action bar
  /// with an inverse color profile. The dark action bar sharply stands out against
  /// the light content.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_DarkActionBar = 16974105;

  /// from: static public final int Theme_Holo_Light_Dialog
  ///
  /// Holo light theme for dialog windows and activities, which is used by the
  /// android.app.Dialog class.  This changes the window to be
  /// floating (not fill the entire screen), and puts a frame around its
  /// contents.  You can set this theme on an activity if you would like to
  /// make an activity that looks like a Dialog.
  /// This is the default Dialog theme for applications targeting Honeycomb
  /// or newer.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_Dialog = 16973939;

  /// from: static public final int Theme_Holo_Light_DialogWhenLarge
  ///
  /// Theme for a window that will be displayed either full-screen on
  /// smaller screens (small, normal) or as a dialog on larger screens
  /// (large, xlarge).
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_DialogWhenLarge = 16973945;

  /// from: static public final int Theme_Holo_Light_DialogWhenLarge_NoActionBar
  ///
  /// Theme for a window without an action bar that will be displayed either full-screen
  /// on smaller screens (small, normal) or as a dialog on larger screens
  /// (large, xlarge).
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_DialogWhenLarge_NoActionBar = 16973946;

  /// from: static public final int Theme_Holo_Light_Dialog_MinWidth
  ///
  /// Variant of Theme.Holo.Light.Dialog that has a nice minimum width for
  /// a regular dialog.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_Dialog_MinWidth = 16973940;

  /// from: static public final int Theme_Holo_Light_Dialog_NoActionBar
  ///
  /// Variant of Theme.Holo.Light.Dialog that does not include a title bar.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_Dialog_NoActionBar = 16973941;

  /// from: static public final int Theme_Holo_Light_Dialog_NoActionBar_MinWidth
  ///
  /// Variant of Theme.Holo.Light.Dialog.NoActionBar that has a nice minimum width for
  /// a regular dialog.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_Dialog_NoActionBar_MinWidth = 16973942;

  /// from: static public final int Theme_Holo_Light_NoActionBar
  ///
  /// Variant of the holographic (light) theme with no action bar.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_NoActionBar = 16974064;

  /// from: static public final int Theme_Holo_Light_NoActionBar_Fullscreen
  ///
  /// Variant of the holographic (light) theme that has no title bar and fills
  /// the entire screen.  This theme
  /// sets android.R.attr\#windowFullscreen to true.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_NoActionBar_Fullscreen = 16974065;

  /// from: static public final int Theme_Holo_Light_NoActionBar_Overscan
  ///
  /// Variant of the holographic (light) theme that has no title bar and fills
  /// the entire screen and extends into the display overscan region.  This theme
  /// sets android.R.attr\#windowFullscreen and android.R.attr\#windowOverscan
  /// to true.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_NoActionBar_Overscan = 16974302;

  /// from: static public final int Theme_Holo_Light_NoActionBar_TranslucentDecor
  ///
  /// Variant of the holographic (light) theme that has no title bar and translucent
  /// system decor.  This theme sets android.R.attr\#windowTranslucentStatus and
  /// android.R.attr\#windowTranslucentNavigation to true.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_NoActionBar_TranslucentDecor = 16974306;

  /// from: static public final int Theme_Holo_Light_Panel
  ///
  /// Default holo light theme for panel windows.  This removes all extraneous
  /// window decorations, so you basically have an empty rectangle in which
  /// to place your content.  It makes the window floating, with a transparent
  /// background, and turns off dimming behind the window.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Light_Panel = 16973948;

  /// from: static public final int Theme_Holo_NoActionBar
  ///
  /// Variant of the holographic (dark) theme with no action bar.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_NoActionBar = 16973932;

  /// from: static public final int Theme_Holo_NoActionBar_Fullscreen
  ///
  /// Variant of the holographic (dark) theme that has no title bar and fills
  /// the entire screen.  This theme
  /// sets android.R.attr\#windowFullscreen to true.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_NoActionBar_Fullscreen = 16973933;

  /// from: static public final int Theme_Holo_NoActionBar_Overscan
  ///
  /// Variant of the holographic (dark) theme that has no title bar and fills
  /// the entire screen and extends into the display overscan region.  This theme
  /// sets android.R.attr\#windowFullscreen and android.R.attr\#windowOverscan
  /// to true.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_NoActionBar_Overscan = 16974301;

  /// from: static public final int Theme_Holo_NoActionBar_TranslucentDecor
  ///
  /// Variant of the holographic (dark) theme that has no title bar and translucent
  /// system decor.  This theme sets android.R.attr\#windowTranslucentStatus and
  /// android.R.attr\#windowTranslucentNavigation to true.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_NoActionBar_TranslucentDecor = 16974305;

  /// from: static public final int Theme_Holo_Panel
  ///
  /// Default holo dark theme for panel windows.  This removes all extraneous
  /// window decorations, so you basically have an empty rectangle in which
  /// to place your content.  It makes the window floating, with a transparent
  /// background, and turns off dimming behind the window.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Panel = 16973947;

  /// from: static public final int Theme_Holo_Wallpaper
  ///
  /// Default holographic (dark) for windows that want to have the user's selected
  /// wallpaper appear behind them.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Wallpaper = 16973949;

  /// from: static public final int Theme_Holo_Wallpaper_NoTitleBar
  ///
  /// Default holographic (dark) for windows that want to have the user's selected
  /// wallpaper appear behind them and without an action bar.
  ///@deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
  static const Theme_Holo_Wallpaper_NoTitleBar = 16973950;

  /// from: static public final int Theme_InputMethod
  ///
  /// Default theme for input methods (on API level 10 and lower), which is used by the
  /// android.inputmethodservice.InputMethodService class.
  /// this inherits from Theme.Panel, but sets up IME appropriate animations
  /// and a few custom attributes.
  static const Theme_InputMethod = 16973908;

  /// from: static public final int Theme_Light
  ///
  /// Theme for a light background with dark text on top.  Set your activity
  /// to this theme if you would like such an appearance.  As with the
  /// default theme, you should try to assume little more than that the
  /// background will be a light color.
  /// This is designed for API level 10 and lower.
  ///
  static const Theme_Light = 16973836;

  /// from: static public final int Theme_Light_NoTitleBar
  ///
  /// Variant of \#Theme_Light with no title bar
  static const Theme_Light_NoTitleBar = 16973837;

  /// from: static public final int Theme_Light_NoTitleBar_Fullscreen
  ///
  /// Variant of \#Theme_Light that has no title bar and
  /// no status bar.  This theme
  /// sets android.R.attr\#windowFullscreen to true.
  static const Theme_Light_NoTitleBar_Fullscreen = 16973838;

  /// from: static public final int Theme_Light_Panel
  ///
  /// Default light theme for panel windows (on API level 10 and lower).  This removes all
  /// extraneous window decorations, so you basically have an empty rectangle in which
  /// to place your content.  It makes the window floating, with a transparent
  /// background, and turns off dimming behind the window.
  static const Theme_Light_Panel = 16973914;

  /// from: static public final int Theme_Light_WallpaperSettings
  ///
  /// Theme for a wallpaper's setting activity, which is designed to be a transparent
  /// background with a light shade, so the previous Activity is visible in the background.
  static const Theme_Light_WallpaperSettings = 16973922;

  /// from: static public final int Theme_Material
  ///
  /// Material theme (dark version).
  /// If you want to ensure that your
  /// app consistently uses the Material theme at all times, you must explicitly declare it in your
  /// manifest. For example, {@code <application android:theme="@style/Theme.Material">}.
  /// Styles used by the Material theme are named using the convention Type.Material.Etc
  /// (for example, {@code Widget.Material.Button} and {@code
  /// TextAppearance.Material.Widget.PopupMenu.Large}).
  /// Specific resources used by Material are named using the convention @type/foo_bar_baz_material
  /// with trailing _dark or _light specifiers if they are not shared between both light and
  /// dark versions of the theme.
  static const Theme_Material = 16974372;

  /// from: static public final int Theme_Material_Dialog
  ///
  /// Material theme for dialog windows and activities, which is used by the
  /// android.app.Dialog class.  This changes the window to be
  /// floating (not fill the entire screen), and puts a frame around its
  /// contents.  You can set this theme on an activity if you would like to
  /// make an activity that looks like a Dialog.
  /// Force the background and floating colours to be the default colours.
  static const Theme_Material_Dialog = 16974373;

  /// from: static public final int Theme_Material_DialogWhenLarge
  ///
  /// Theme for a window that will be displayed either full-screen on
  /// smaller screens (small, normal) or as a dialog on larger screens
  /// (large, xlarge).
  static const Theme_Material_DialogWhenLarge = 16974379;

  /// from: static public final int Theme_Material_DialogWhenLarge_NoActionBar
  ///
  /// Theme for a window without a title bar that will be displayed either
  /// full-screen on smaller screens (small, normal) or as a dialog on larger screens
  /// (large, xlarge).
  static const Theme_Material_DialogWhenLarge_NoActionBar = 16974380;

  /// from: static public final int Theme_Material_Dialog_Alert
  ///
  /// Material theme for alert dialog windows, which is used by the
  /// android.app.AlertDialog class.  This is basically a dialog
  /// but sets the background to empty so it can do two-tone backgrounds.
  /// For applications targeting Honeycomb or newer, this is the default
  /// AlertDialog theme.
  static const Theme_Material_Dialog_Alert = 16974374;

  /// from: static public final int Theme_Material_Dialog_MinWidth
  ///
  /// Variant of Theme.Material.Dialog that has a nice minimum width for
  /// a regular dialog.
  static const Theme_Material_Dialog_MinWidth = 16974375;

  /// from: static public final int Theme_Material_Dialog_NoActionBar
  ///
  /// Variant of Theme.Material.Dialog that does not include a title bar.
  static const Theme_Material_Dialog_NoActionBar = 16974376;

  /// from: static public final int Theme_Material_Dialog_NoActionBar_MinWidth
  ///
  /// Variant of Theme.Material.Dialog.NoActionBar that has a nice minimum width for
  /// a regular dialog.
  static const Theme_Material_Dialog_NoActionBar_MinWidth = 16974377;

  /// from: static public final int Theme_Material_Dialog_Presentation
  ///
  /// Theme for a presentation window on a secondary display.
  static const Theme_Material_Dialog_Presentation = 16974378;

  /// from: static public final int Theme_Material_InputMethod
  ///
  /// Default theme for material style input methods, which is used by the
  /// android.inputmethodservice.InputMethodService class.
  /// this inherits from Theme.Panel, but sets up IME appropriate animations
  /// and a few custom attributes.
  /// Default theme for material style input methods, which is used by the
  /// android.inputmethodservice.InputMethodService class.
  /// this inherits from Theme.Panel, but sets up IME appropriate animations
  /// and a few custom attributes.
  static const Theme_Material_InputMethod = 16974381;

  /// from: static public final int Theme_Material_Light
  ///
  /// Material theme (light version).
  static const Theme_Material_Light = 16974391;

  /// from: static public final int Theme_Material_Light_DarkActionBar
  ///
  /// Variant of the material (light) theme that has a solid (opaque) action bar
  /// with an inverse color profile. The dark action bar sharply stands out against
  /// the light content.
  static const Theme_Material_Light_DarkActionBar = 16974392;

  /// from: static public final int Theme_Material_Light_Dialog
  ///
  /// Material light theme for dialog windows and activities, which is used by the
  /// android.app.Dialog class.  This changes the window to be
  /// floating (not fill the entire screen), and puts a frame around its
  /// contents.  You can set this theme on an activity if you would like to
  /// make an activity that looks like a Dialog.
  /// Force the background and floating colours to be the default colours.
  static const Theme_Material_Light_Dialog = 16974393;

  /// from: static public final int Theme_Material_Light_DialogWhenLarge
  ///
  /// Theme for a window that will be displayed either full-screen on
  /// smaller screens (small, normal) or as a dialog on larger screens
  /// (large, xlarge).
  static const Theme_Material_Light_DialogWhenLarge = 16974399;

  /// from: static public final int Theme_Material_Light_DialogWhenLarge_DarkActionBar
  ///
  /// Theme for a window with a dark title bar that will be displayed either
  /// full-screen on smaller screens (small, normal) or as a dialog on larger screens
  /// (large, xlarge).
  static const Theme_Material_Light_DialogWhenLarge_DarkActionBar = 16974552;

  /// from: static public final int Theme_Material_Light_DialogWhenLarge_NoActionBar
  ///
  /// Theme for a window without an action bar that will be displayed either full-screen
  /// on smaller screens (small, normal) or as a dialog on larger screens
  /// (large, xlarge).
  static const Theme_Material_Light_DialogWhenLarge_NoActionBar = 16974400;

  /// from: static public final int Theme_Material_Light_Dialog_Alert
  ///
  /// Material light theme for alert dialog windows, which is used by the
  /// android.app.AlertDialog class.  This is basically a dialog
  /// but sets the background to empty so it can do two-tone backgrounds.
  /// For applications targeting Honeycomb or newer, this is the default
  /// AlertDialog theme.
  static const Theme_Material_Light_Dialog_Alert = 16974394;

  /// from: static public final int Theme_Material_Light_Dialog_MinWidth
  ///
  /// Variant of Theme.Material.Light.Dialog that has a nice minimum width for
  /// a regular dialog.
  static const Theme_Material_Light_Dialog_MinWidth = 16974395;

  /// from: static public final int Theme_Material_Light_Dialog_NoActionBar
  ///
  /// Variant of Theme.Material.Light.Dialog that does not include a title bar.
  static const Theme_Material_Light_Dialog_NoActionBar = 16974396;

  /// from: static public final int Theme_Material_Light_Dialog_NoActionBar_MinWidth
  ///
  /// Variant of Theme.Material.Light.Dialog.NoActionBar that has a nice minimum width for
  /// a regular dialog.
  static const Theme_Material_Light_Dialog_NoActionBar_MinWidth = 16974397;

  /// from: static public final int Theme_Material_Light_Dialog_Presentation
  ///
  /// Theme for a presentation window on a secondary display.
  static const Theme_Material_Light_Dialog_Presentation = 16974398;

  /// from: static public final int Theme_Material_Light_LightStatusBar
  ///
  /// Variant of the material (light) theme that has a light status bar background with dark
  /// status bar contents.
  static const Theme_Material_Light_LightStatusBar = 16974549;

  /// from: static public final int Theme_Material_Light_NoActionBar
  ///
  /// Variant of the material (light) theme with no action bar.
  static const Theme_Material_Light_NoActionBar = 16974401;

  /// from: static public final int Theme_Material_Light_NoActionBar_Fullscreen
  ///
  /// Variant of the material (light) theme that has no title bar and fills
  /// the entire screen.  This theme
  /// sets android.R.attr\#windowFullscreen to true.
  static const Theme_Material_Light_NoActionBar_Fullscreen = 16974402;

  /// from: static public final int Theme_Material_Light_NoActionBar_Overscan
  ///
  /// Variant of the material (light) theme that has no title bar and fills
  /// the entire screen and extends into the display overscan region.  This theme
  /// sets android.R.attr\#windowFullscreen and android.R.attr\#windowOverscan
  /// to true.
  static const Theme_Material_Light_NoActionBar_Overscan = 16974403;

  /// from: static public final int Theme_Material_Light_NoActionBar_TranslucentDecor
  ///
  /// Variant of the material (light) theme that has no title bar and translucent
  /// system decor.  This theme sets android.R.attr\#windowTranslucentStatus and
  /// android.R.attr\#windowTranslucentNavigation to true.
  static const Theme_Material_Light_NoActionBar_TranslucentDecor = 16974404;

  /// from: static public final int Theme_Material_Light_Panel
  ///
  /// Default material light theme for panel windows.  This removes all extraneous
  /// window decorations, so you basically have an empty rectangle in which
  /// to place your content.  It makes the window floating, with a transparent
  /// background, and turns off dimming behind the window.
  static const Theme_Material_Light_Panel = 16974405;

  /// from: static public final int Theme_Material_Light_Voice
  ///
  /// Material light theme for an activity that is to be used for voice interaction.
  /// This gives the activity a floating dialog style, to incorporate with the
  /// system voice experience.
  static const Theme_Material_Light_Voice = 16974406;

  /// from: static public final int Theme_Material_NoActionBar
  ///
  /// Variant of the material (dark) theme with no action bar.
  static const Theme_Material_NoActionBar = 16974382;

  /// from: static public final int Theme_Material_NoActionBar_Fullscreen
  ///
  /// Variant of the material (dark) theme that has no title bar and fills
  /// the entire screen.  This theme
  /// sets android.R.attr\#windowFullscreen to true.
  static const Theme_Material_NoActionBar_Fullscreen = 16974383;

  /// from: static public final int Theme_Material_NoActionBar_Overscan
  ///
  /// Variant of the material (dark) theme that has no title bar and fills
  /// the entire screen and extends into the display overscan region.  This theme
  /// sets android.R.attr\#windowFullscreen and android.R.attr\#windowOverscan
  /// to true.
  static const Theme_Material_NoActionBar_Overscan = 16974384;

  /// from: static public final int Theme_Material_NoActionBar_TranslucentDecor
  ///
  /// Variant of the material (dark) theme that has no title bar and translucent
  /// system decor.  This theme sets android.R.attr\#windowTranslucentStatus and
  /// android.R.attr\#windowTranslucentNavigation to true.
  static const Theme_Material_NoActionBar_TranslucentDecor = 16974385;

  /// from: static public final int Theme_Material_Panel
  ///
  /// Default material dark theme for panel windows.  This removes all extraneous
  /// window decorations, so you basically have an empty rectangle in which
  /// to place your content.  It makes the window floating, with a transparent
  /// background, and turns off dimming behind the window.
  static const Theme_Material_Panel = 16974386;

  /// from: static public final int Theme_Material_Settings
  ///
  /// Default theme for Settings and activities launched from Settings.
  /// Force all settings themes to use normal Material theme.
  static const Theme_Material_Settings = 16974387;

  /// from: static public final int Theme_Material_Voice
  ///
  /// Material theme for an activity that is to be used for voice interaction.
  /// This gives the activity a floating dialog style, to incorporate with the
  /// system voice experience.
  static const Theme_Material_Voice = 16974388;

  /// from: static public final int Theme_Material_Wallpaper
  ///
  /// Default material (dark) for windows that want to have the user's selected
  /// wallpaper appear behind them.
  static const Theme_Material_Wallpaper = 16974389;

  /// from: static public final int Theme_Material_Wallpaper_NoTitleBar
  ///
  /// Default material (dark) for windows that want to have the user's selected
  /// wallpaper appear behind them and without an action bar.
  static const Theme_Material_Wallpaper_NoTitleBar = 16974390;

  /// from: static public final int Theme_NoDisplay
  ///
  /// Default theme for activities that don't actually display a UI; that
  /// is, they finish themselves before being resumed.
  static const Theme_NoDisplay = 16973909;

  /// from: static public final int Theme_NoTitleBar
  ///
  /// Variant of \#Theme with no title bar
  static const Theme_NoTitleBar = 16973830;

  /// from: static public final int Theme_NoTitleBar_Fullscreen
  ///
  /// Variant of \#Theme that has no title bar and no status bar.  This theme
  /// sets android.R.attr\#windowFullscreen to true.
  static const Theme_NoTitleBar_Fullscreen = 16973831;

  /// from: static public final int Theme_NoTitleBar_OverlayActionModes
  ///
  /// No title bar, but Action Mode bars will overlay application content
  /// instead of pushing it down to make room.
  static const Theme_NoTitleBar_OverlayActionModes = 16973930;

  /// from: static public final int Theme_Panel
  ///
  /// Default dark theme for panel windows (on API level 10 and lower).  This removes all
  /// extraneous window decorations, so you basically have an empty rectangle in which
  /// to place your content.  It makes the window floating, with a transparent
  /// background, and turns off dimming behind the window.
  static const Theme_Panel = 16973913;

  /// from: static public final int Theme_Translucent
  ///
  /// Theme for translucent activities (on API level 10 and lower). That is, windows
  /// that allow you to see through them to the windows behind.  This sets up the translucent
  /// flag and appropriate animations for your windows.
  static const Theme_Translucent = 16973839;

  /// from: static public final int Theme_Translucent_NoTitleBar
  ///
  /// Variant of \#Theme_Translucent with no title bar
  static const Theme_Translucent_NoTitleBar = 16973840;

  /// from: static public final int Theme_Translucent_NoTitleBar_Fullscreen
  ///
  /// Variant of \#Theme_Translucent that has no title bar and
  /// no status bar
  static const Theme_Translucent_NoTitleBar_Fullscreen = 16973841;

  /// from: static public final int Theme_Wallpaper
  ///
  /// Theme for windows that want to have the user's selected
  /// wallpaper appear behind them (for API level 10 and lower).
  static const Theme_Wallpaper = 16973918;

  /// from: static public final int Theme_WallpaperSettings
  ///
  /// Theme for a wallpaper's setting activity, which is designed to be a transparent
  /// background with a dark shade, so the previous Activity is visible in the background.
  static const Theme_WallpaperSettings = 16973921;

  /// from: static public final int Theme_Wallpaper_NoTitleBar
  ///
  /// Variant of \#Theme_Wallpaper that has no title bar
  static const Theme_Wallpaper_NoTitleBar = 16973919;

  /// from: static public final int Theme_Wallpaper_NoTitleBar_Fullscreen
  ///
  /// Variant of \#Theme_Wallpaper that
  /// has no title bar or status bar.
  static const Theme_Wallpaper_NoTitleBar_Fullscreen = 16973920;

  /// from: static public final int Theme_WithActionBar
  ///
  /// Default theme with an Action Bar.
  static const Theme_WithActionBar = 16973929;

  /// from: static public final int Widget
  ///
  /// Widget Styles
  static const Widget = 16973842;

  /// from: static public final int Widget_AbsListView
  static const Widget_AbsListView = 16973843;

  /// from: static public final int Widget_ActionBar
  static const Widget_ActionBar = 16973954;

  /// from: static public final int Widget_ActionBar_TabBar
  static const Widget_ActionBar_TabBar = 16974068;

  /// from: static public final int Widget_ActionBar_TabText
  static const Widget_ActionBar_TabText = 16974067;

  /// from: static public final int Widget_ActionBar_TabView
  static const Widget_ActionBar_TabView = 16974066;

  /// from: static public final int Widget_ActionButton
  static const Widget_ActionButton = 16973956;

  /// from: static public final int Widget_ActionButton_CloseMode
  static const Widget_ActionButton_CloseMode = 16973960;

  /// from: static public final int Widget_ActionButton_Overflow
  static const Widget_ActionButton_Overflow = 16973959;

  /// from: static public final int Widget_AutoCompleteTextView
  static const Widget_AutoCompleteTextView = 16973863;

  /// from: static public final int Widget_Button
  static const Widget_Button = 16973844;

  /// from: static public final int Widget_Button_Inset
  static const Widget_Button_Inset = 16973845;

  /// from: static public final int Widget_Button_Small
  static const Widget_Button_Small = 16973846;

  /// from: static public final int Widget_Button_Toggle
  static const Widget_Button_Toggle = 16973847;

  /// from: static public final int Widget_CalendarView
  static const Widget_CalendarView = 16974059;

  /// from: static public final int Widget_CompoundButton
  static const Widget_CompoundButton = 16973848;

  /// from: static public final int Widget_CompoundButton_CheckBox
  static const Widget_CompoundButton_CheckBox = 16973849;

  /// from: static public final int Widget_CompoundButton_RadioButton
  static const Widget_CompoundButton_RadioButton = 16973850;

  /// from: static public final int Widget_CompoundButton_Star
  static const Widget_CompoundButton_Star = 16973851;

  /// from: static public final int Widget_DatePicker
  static const Widget_DatePicker = 16974062;

  /// from: static public final int Widget_DeviceDefault
  ///
  /// Widget Styles
  static const Widget_DeviceDefault = 16974144;

  /// from: static public final int Widget_DeviceDefault_ActionBar
  static const Widget_DeviceDefault_ActionBar = 16974187;

  /// from: static public final int Widget_DeviceDefault_ActionBar_Solid
  static const Widget_DeviceDefault_ActionBar_Solid = 16974195;

  /// from: static public final int Widget_DeviceDefault_ActionBar_TabBar
  static const Widget_DeviceDefault_ActionBar_TabBar = 16974194;

  /// from: static public final int Widget_DeviceDefault_ActionBar_TabText
  static const Widget_DeviceDefault_ActionBar_TabText = 16974193;

  /// from: static public final int Widget_DeviceDefault_ActionBar_TabView
  static const Widget_DeviceDefault_ActionBar_TabView = 16974192;

  /// from: static public final int Widget_DeviceDefault_ActionButton
  static const Widget_DeviceDefault_ActionButton = 16974182;

  /// from: static public final int Widget_DeviceDefault_ActionButton_CloseMode
  static const Widget_DeviceDefault_ActionButton_CloseMode = 16974186;

  /// from: static public final int Widget_DeviceDefault_ActionButton_Overflow
  static const Widget_DeviceDefault_ActionButton_Overflow = 16974183;

  /// from: static public final int Widget_DeviceDefault_ActionButton_TextButton
  static const Widget_DeviceDefault_ActionButton_TextButton = 16974184;

  /// from: static public final int Widget_DeviceDefault_ActionMode
  static const Widget_DeviceDefault_ActionMode = 16974185;

  /// from: static public final int Widget_DeviceDefault_AutoCompleteTextView
  static const Widget_DeviceDefault_AutoCompleteTextView = 16974151;

  /// from: static public final int Widget_DeviceDefault_Button
  static const Widget_DeviceDefault_Button = 16974145;

  /// from: static public final int Widget_DeviceDefault_Button_Borderless
  static const Widget_DeviceDefault_Button_Borderless = 16974188;

  /// from: static public final int Widget_DeviceDefault_Button_Borderless_Colored
  ///
  /// Colored borderless ink button
  static const Widget_DeviceDefault_Button_Borderless_Colored = 16974561;

  /// from: static public final int Widget_DeviceDefault_Button_Borderless_Small
  static const Widget_DeviceDefault_Button_Borderless_Small = 16974149;

  /// from: static public final int Widget_DeviceDefault_Button_Colored
  static const Widget_DeviceDefault_Button_Colored = 16974560;

  /// from: static public final int Widget_DeviceDefault_Button_Inset
  static const Widget_DeviceDefault_Button_Inset = 16974147;

  /// from: static public final int Widget_DeviceDefault_Button_Small
  static const Widget_DeviceDefault_Button_Small = 16974146;

  /// from: static public final int Widget_DeviceDefault_Button_Toggle
  static const Widget_DeviceDefault_Button_Toggle = 16974148;

  /// from: static public final int Widget_DeviceDefault_CalendarView
  static const Widget_DeviceDefault_CalendarView = 16974190;

  /// from: static public final int Widget_DeviceDefault_CheckedTextView
  static const Widget_DeviceDefault_CheckedTextView = 16974299;

  /// from: static public final int Widget_DeviceDefault_CompoundButton_CheckBox
  static const Widget_DeviceDefault_CompoundButton_CheckBox = 16974152;

  /// from: static public final int Widget_DeviceDefault_CompoundButton_RadioButton
  static const Widget_DeviceDefault_CompoundButton_RadioButton = 16974169;

  /// from: static public final int Widget_DeviceDefault_CompoundButton_Star
  static const Widget_DeviceDefault_CompoundButton_Star = 16974173;

  /// from: static public final int Widget_DeviceDefault_DatePicker
  static const Widget_DeviceDefault_DatePicker = 16974191;

  /// from: static public final int Widget_DeviceDefault_DropDownItem
  static const Widget_DeviceDefault_DropDownItem = 16974177;

  /// from: static public final int Widget_DeviceDefault_DropDownItem_Spinner
  static const Widget_DeviceDefault_DropDownItem_Spinner = 16974178;

  /// from: static public final int Widget_DeviceDefault_EditText
  static const Widget_DeviceDefault_EditText = 16974154;

  /// from: static public final int Widget_DeviceDefault_ExpandableListView
  static const Widget_DeviceDefault_ExpandableListView = 16974155;

  /// from: static public final int Widget_DeviceDefault_FastScroll
  static const Widget_DeviceDefault_FastScroll = 16974313;

  /// from: static public final int Widget_DeviceDefault_GridView
  static const Widget_DeviceDefault_GridView = 16974156;

  /// from: static public final int Widget_DeviceDefault_HorizontalScrollView
  static const Widget_DeviceDefault_HorizontalScrollView = 16974171;

  /// from: static public final int Widget_DeviceDefault_ImageButton
  static const Widget_DeviceDefault_ImageButton = 16974157;

  /// from: static public final int Widget_DeviceDefault_Light
  static const Widget_DeviceDefault_Light = 16974196;

  /// from: static public final int Widget_DeviceDefault_Light_ActionBar
  static const Widget_DeviceDefault_Light_ActionBar = 16974243;

  /// from: static public final int Widget_DeviceDefault_Light_ActionBar_Solid
  static const Widget_DeviceDefault_Light_ActionBar_Solid = 16974247;

  /// from: static public final int Widget_DeviceDefault_Light_ActionBar_Solid_Inverse
  ///
  /// @deprecated Action bars are now themed using the inheritable android:theme attribute.
  static const Widget_DeviceDefault_Light_ActionBar_Solid_Inverse = 16974248;

  /// from: static public final int Widget_DeviceDefault_Light_ActionBar_TabBar
  static const Widget_DeviceDefault_Light_ActionBar_TabBar = 16974246;

  /// from: static public final int Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse
  ///
  /// @deprecated Action bars are now themed using the inheritable android:theme attribute.
  static const Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse = 16974249;

  /// from: static public final int Widget_DeviceDefault_Light_ActionBar_TabText
  static const Widget_DeviceDefault_Light_ActionBar_TabText = 16974245;

  /// from: static public final int Widget_DeviceDefault_Light_ActionBar_TabText_Inverse
  ///
  /// @deprecated Action bars are now themed using the inheritable android:theme attribute.
  static const Widget_DeviceDefault_Light_ActionBar_TabText_Inverse = 16974251;

  /// from: static public final int Widget_DeviceDefault_Light_ActionBar_TabView
  static const Widget_DeviceDefault_Light_ActionBar_TabView = 16974244;

  /// from: static public final int Widget_DeviceDefault_Light_ActionBar_TabView_Inverse
  ///
  /// @deprecated Action bars are now themed using the inheritable android:theme attribute.
  static const Widget_DeviceDefault_Light_ActionBar_TabView_Inverse = 16974250;

  /// from: static public final int Widget_DeviceDefault_Light_ActionButton
  static const Widget_DeviceDefault_Light_ActionButton = 16974239;

  /// from: static public final int Widget_DeviceDefault_Light_ActionButton_CloseMode
  static const Widget_DeviceDefault_Light_ActionButton_CloseMode = 16974242;

  /// from: static public final int Widget_DeviceDefault_Light_ActionButton_Overflow
  static const Widget_DeviceDefault_Light_ActionButton_Overflow = 16974240;

  /// from: static public final int Widget_DeviceDefault_Light_ActionMode
  static const Widget_DeviceDefault_Light_ActionMode = 16974241;

  /// from: static public final int Widget_DeviceDefault_Light_ActionMode_Inverse
  ///
  /// @deprecated Action bars are now themed using the inheritable android:theme attribute.
  static const Widget_DeviceDefault_Light_ActionMode_Inverse = 16974252;

  /// from: static public final int Widget_DeviceDefault_Light_AutoCompleteTextView
  static const Widget_DeviceDefault_Light_AutoCompleteTextView = 16974203;

  /// from: static public final int Widget_DeviceDefault_Light_Button
  static const Widget_DeviceDefault_Light_Button = 16974197;

  /// from: static public final int Widget_DeviceDefault_Light_Button_Borderless_Small
  static const Widget_DeviceDefault_Light_Button_Borderless_Small = 16974201;

  /// from: static public final int Widget_DeviceDefault_Light_Button_Inset
  static const Widget_DeviceDefault_Light_Button_Inset = 16974199;

  /// from: static public final int Widget_DeviceDefault_Light_Button_Small
  static const Widget_DeviceDefault_Light_Button_Small = 16974198;

  /// from: static public final int Widget_DeviceDefault_Light_Button_Toggle
  static const Widget_DeviceDefault_Light_Button_Toggle = 16974200;

  /// from: static public final int Widget_DeviceDefault_Light_CalendarView
  static const Widget_DeviceDefault_Light_CalendarView = 16974238;

  /// from: static public final int Widget_DeviceDefault_Light_CheckedTextView
  static const Widget_DeviceDefault_Light_CheckedTextView = 16974300;

  /// from: static public final int Widget_DeviceDefault_Light_CompoundButton_CheckBox
  static const Widget_DeviceDefault_Light_CompoundButton_CheckBox = 16974204;

  /// from: static public final int Widget_DeviceDefault_Light_CompoundButton_RadioButton
  static const Widget_DeviceDefault_Light_CompoundButton_RadioButton = 16974224;

  /// from: static public final int Widget_DeviceDefault_Light_CompoundButton_Star
  static const Widget_DeviceDefault_Light_CompoundButton_Star = 16974228;

  /// from: static public final int Widget_DeviceDefault_Light_DropDownItem
  static const Widget_DeviceDefault_Light_DropDownItem = 16974232;

  /// from: static public final int Widget_DeviceDefault_Light_DropDownItem_Spinner
  static const Widget_DeviceDefault_Light_DropDownItem_Spinner = 16974233;

  /// from: static public final int Widget_DeviceDefault_Light_EditText
  static const Widget_DeviceDefault_Light_EditText = 16974206;

  /// from: static public final int Widget_DeviceDefault_Light_ExpandableListView
  static const Widget_DeviceDefault_Light_ExpandableListView = 16974207;

  /// from: static public final int Widget_DeviceDefault_Light_FastScroll
  static const Widget_DeviceDefault_Light_FastScroll = 16974315;

  /// from: static public final int Widget_DeviceDefault_Light_GridView
  static const Widget_DeviceDefault_Light_GridView = 16974208;

  /// from: static public final int Widget_DeviceDefault_Light_HorizontalScrollView
  static const Widget_DeviceDefault_Light_HorizontalScrollView = 16974226;

  /// from: static public final int Widget_DeviceDefault_Light_ImageButton
  static const Widget_DeviceDefault_Light_ImageButton = 16974209;

  /// from: static public final int Widget_DeviceDefault_Light_ListPopupWindow
  static const Widget_DeviceDefault_Light_ListPopupWindow = 16974235;

  /// from: static public final int Widget_DeviceDefault_Light_ListView
  static const Widget_DeviceDefault_Light_ListView = 16974210;

  /// from: static public final int Widget_DeviceDefault_Light_ListView_DropDown
  static const Widget_DeviceDefault_Light_ListView_DropDown = 16974205;

  /// from: static public final int Widget_DeviceDefault_Light_MediaRouteButton
  static const Widget_DeviceDefault_Light_MediaRouteButton = 16974296;

  /// from: static public final int Widget_DeviceDefault_Light_PopupMenu
  static const Widget_DeviceDefault_Light_PopupMenu = 16974236;

  /// from: static public final int Widget_DeviceDefault_Light_PopupWindow
  static const Widget_DeviceDefault_Light_PopupWindow = 16974211;

  /// from: static public final int Widget_DeviceDefault_Light_ProgressBar
  static const Widget_DeviceDefault_Light_ProgressBar = 16974212;

  /// from: static public final int Widget_DeviceDefault_Light_ProgressBar_Horizontal
  static const Widget_DeviceDefault_Light_ProgressBar_Horizontal = 16974213;

  /// from: static public final int Widget_DeviceDefault_Light_ProgressBar_Inverse
  static const Widget_DeviceDefault_Light_ProgressBar_Inverse = 16974217;

  /// from: static public final int Widget_DeviceDefault_Light_ProgressBar_Large
  static const Widget_DeviceDefault_Light_ProgressBar_Large = 16974216;

  /// from: static public final int Widget_DeviceDefault_Light_ProgressBar_Large_Inverse
  static const Widget_DeviceDefault_Light_ProgressBar_Large_Inverse = 16974219;

  /// from: static public final int Widget_DeviceDefault_Light_ProgressBar_Small
  static const Widget_DeviceDefault_Light_ProgressBar_Small = 16974214;

  /// from: static public final int Widget_DeviceDefault_Light_ProgressBar_Small_Inverse
  static const Widget_DeviceDefault_Light_ProgressBar_Small_Inverse = 16974218;

  /// from: static public final int Widget_DeviceDefault_Light_ProgressBar_Small_Title
  static const Widget_DeviceDefault_Light_ProgressBar_Small_Title = 16974215;

  /// from: static public final int Widget_DeviceDefault_Light_RatingBar
  static const Widget_DeviceDefault_Light_RatingBar = 16974221;

  /// from: static public final int Widget_DeviceDefault_Light_RatingBar_Indicator
  static const Widget_DeviceDefault_Light_RatingBar_Indicator = 16974222;

  /// from: static public final int Widget_DeviceDefault_Light_RatingBar_Small
  static const Widget_DeviceDefault_Light_RatingBar_Small = 16974223;

  /// from: static public final int Widget_DeviceDefault_Light_ScrollView
  static const Widget_DeviceDefault_Light_ScrollView = 16974225;

  /// from: static public final int Widget_DeviceDefault_Light_SeekBar
  static const Widget_DeviceDefault_Light_SeekBar = 16974220;

  /// from: static public final int Widget_DeviceDefault_Light_Spinner
  static const Widget_DeviceDefault_Light_Spinner = 16974227;

  /// from: static public final int Widget_DeviceDefault_Light_StackView
  static const Widget_DeviceDefault_Light_StackView = 16974316;

  /// from: static public final int Widget_DeviceDefault_Light_Tab
  static const Widget_DeviceDefault_Light_Tab = 16974237;

  /// from: static public final int Widget_DeviceDefault_Light_TabWidget
  static const Widget_DeviceDefault_Light_TabWidget = 16974229;

  /// from: static public final int Widget_DeviceDefault_Light_TextView
  static const Widget_DeviceDefault_Light_TextView = 16974202;

  /// from: static public final int Widget_DeviceDefault_Light_TextView_SpinnerItem
  static const Widget_DeviceDefault_Light_TextView_SpinnerItem = 16974234;

  /// from: static public final int Widget_DeviceDefault_Light_WebTextView
  static const Widget_DeviceDefault_Light_WebTextView = 16974230;

  /// from: static public final int Widget_DeviceDefault_Light_WebView
  static const Widget_DeviceDefault_Light_WebView = 16974231;

  /// from: static public final int Widget_DeviceDefault_ListPopupWindow
  static const Widget_DeviceDefault_ListPopupWindow = 16974180;

  /// from: static public final int Widget_DeviceDefault_ListView
  static const Widget_DeviceDefault_ListView = 16974158;

  /// from: static public final int Widget_DeviceDefault_ListView_DropDown
  static const Widget_DeviceDefault_ListView_DropDown = 16974153;

  /// from: static public final int Widget_DeviceDefault_MediaRouteButton
  static const Widget_DeviceDefault_MediaRouteButton = 16974295;

  /// from: static public final int Widget_DeviceDefault_PopupMenu
  static const Widget_DeviceDefault_PopupMenu = 16974181;

  /// from: static public final int Widget_DeviceDefault_PopupWindow
  static const Widget_DeviceDefault_PopupWindow = 16974159;

  /// from: static public final int Widget_DeviceDefault_ProgressBar
  static const Widget_DeviceDefault_ProgressBar = 16974160;

  /// from: static public final int Widget_DeviceDefault_ProgressBar_Horizontal
  static const Widget_DeviceDefault_ProgressBar_Horizontal = 16974161;

  /// from: static public final int Widget_DeviceDefault_ProgressBar_Large
  static const Widget_DeviceDefault_ProgressBar_Large = 16974164;

  /// from: static public final int Widget_DeviceDefault_ProgressBar_Small
  static const Widget_DeviceDefault_ProgressBar_Small = 16974162;

  /// from: static public final int Widget_DeviceDefault_ProgressBar_Small_Title
  static const Widget_DeviceDefault_ProgressBar_Small_Title = 16974163;

  /// from: static public final int Widget_DeviceDefault_RatingBar
  static const Widget_DeviceDefault_RatingBar = 16974166;

  /// from: static public final int Widget_DeviceDefault_RatingBar_Indicator
  static const Widget_DeviceDefault_RatingBar_Indicator = 16974167;

  /// from: static public final int Widget_DeviceDefault_RatingBar_Small
  static const Widget_DeviceDefault_RatingBar_Small = 16974168;

  /// from: static public final int Widget_DeviceDefault_ScrollView
  static const Widget_DeviceDefault_ScrollView = 16974170;

  /// from: static public final int Widget_DeviceDefault_SeekBar
  static const Widget_DeviceDefault_SeekBar = 16974165;

  /// from: static public final int Widget_DeviceDefault_Spinner
  static const Widget_DeviceDefault_Spinner = 16974172;

  /// from: static public final int Widget_DeviceDefault_StackView
  static const Widget_DeviceDefault_StackView = 16974314;

  /// from: static public final int Widget_DeviceDefault_Tab
  static const Widget_DeviceDefault_Tab = 16974189;

  /// from: static public final int Widget_DeviceDefault_TabWidget
  static const Widget_DeviceDefault_TabWidget = 16974174;

  /// from: static public final int Widget_DeviceDefault_TextView
  static const Widget_DeviceDefault_TextView = 16974150;

  /// from: static public final int Widget_DeviceDefault_TextView_SpinnerItem
  static const Widget_DeviceDefault_TextView_SpinnerItem = 16974179;

  /// from: static public final int Widget_DeviceDefault_WebTextView
  static const Widget_DeviceDefault_WebTextView = 16974175;

  /// from: static public final int Widget_DeviceDefault_WebView
  static const Widget_DeviceDefault_WebView = 16974176;

  /// from: static public final int Widget_DropDownItem
  static const Widget_DropDownItem = 16973867;

  /// from: static public final int Widget_DropDownItem_Spinner
  static const Widget_DropDownItem_Spinner = 16973868;

  /// from: static public final int Widget_EditText
  static const Widget_EditText = 16973859;

  /// from: static public final int Widget_ExpandableListView
  static const Widget_ExpandableListView = 16973860;

  /// from: static public final int Widget_FastScroll
  static const Widget_FastScroll = 16974309;

  /// from: static public final int Widget_FragmentBreadCrumbs
  static const Widget_FragmentBreadCrumbs = 16973961;

  /// from: static public final int Widget_Gallery
  static const Widget_Gallery = 16973877;

  /// from: static public final int Widget_GridView
  static const Widget_GridView = 16973874;

  /// from: static public final int Widget_Holo
  ///
  /// Widget Styles
  static const Widget_Holo = 16973962;

  /// from: static public final int Widget_Holo_ActionBar
  static const Widget_Holo_ActionBar = 16974004;

  /// from: static public final int Widget_Holo_ActionBar_Solid
  static const Widget_Holo_ActionBar_Solid = 16974113;

  /// from: static public final int Widget_Holo_ActionBar_TabBar
  static const Widget_Holo_ActionBar_TabBar = 16974071;

  /// from: static public final int Widget_Holo_ActionBar_TabText
  static const Widget_Holo_ActionBar_TabText = 16974070;

  /// from: static public final int Widget_Holo_ActionBar_TabView
  static const Widget_Holo_ActionBar_TabView = 16974069;

  /// from: static public final int Widget_Holo_ActionButton
  static const Widget_Holo_ActionButton = 16973999;

  /// from: static public final int Widget_Holo_ActionButton_CloseMode
  static const Widget_Holo_ActionButton_CloseMode = 16974003;

  /// from: static public final int Widget_Holo_ActionButton_Overflow
  static const Widget_Holo_ActionButton_Overflow = 16974000;

  /// from: static public final int Widget_Holo_ActionButton_TextButton
  static const Widget_Holo_ActionButton_TextButton = 16974001;

  /// from: static public final int Widget_Holo_ActionMode
  static const Widget_Holo_ActionMode = 16974002;

  /// from: static public final int Widget_Holo_AutoCompleteTextView
  static const Widget_Holo_AutoCompleteTextView = 16973968;

  /// from: static public final int Widget_Holo_Button
  static const Widget_Holo_Button = 16973963;

  /// from: static public final int Widget_Holo_Button_Borderless
  static const Widget_Holo_Button_Borderless = 16974050;

  /// from: static public final int Widget_Holo_Button_Borderless_Small
  static const Widget_Holo_Button_Borderless_Small = 16974106;

  /// from: static public final int Widget_Holo_Button_Inset
  static const Widget_Holo_Button_Inset = 16973965;

  /// from: static public final int Widget_Holo_Button_Small
  static const Widget_Holo_Button_Small = 16973964;

  /// from: static public final int Widget_Holo_Button_Toggle
  static const Widget_Holo_Button_Toggle = 16973966;

  /// from: static public final int Widget_Holo_CalendarView
  static const Widget_Holo_CalendarView = 16974060;

  /// from: static public final int Widget_Holo_CheckedTextView
  static const Widget_Holo_CheckedTextView = 16974297;

  /// from: static public final int Widget_Holo_CompoundButton_CheckBox
  static const Widget_Holo_CompoundButton_CheckBox = 16973969;

  /// from: static public final int Widget_Holo_CompoundButton_RadioButton
  static const Widget_Holo_CompoundButton_RadioButton = 16973986;

  /// from: static public final int Widget_Holo_CompoundButton_Star
  static const Widget_Holo_CompoundButton_Star = 16973990;

  /// from: static public final int Widget_Holo_DatePicker
  static const Widget_Holo_DatePicker = 16974063;

  /// from: static public final int Widget_Holo_DropDownItem
  static const Widget_Holo_DropDownItem = 16973994;

  /// from: static public final int Widget_Holo_DropDownItem_Spinner
  static const Widget_Holo_DropDownItem_Spinner = 16973995;

  /// from: static public final int Widget_Holo_EditText
  static const Widget_Holo_EditText = 16973971;

  /// from: static public final int Widget_Holo_ExpandableListView
  static const Widget_Holo_ExpandableListView = 16973972;

  /// from: static public final int Widget_Holo_GridView
  static const Widget_Holo_GridView = 16973973;

  /// from: static public final int Widget_Holo_HorizontalScrollView
  static const Widget_Holo_HorizontalScrollView = 16973988;

  /// from: static public final int Widget_Holo_ImageButton
  static const Widget_Holo_ImageButton = 16973974;

  /// from: static public final int Widget_Holo_Light
  ///
  /// Light widget styles
  static const Widget_Holo_Light = 16974005;

  /// from: static public final int Widget_Holo_Light_ActionBar
  static const Widget_Holo_Light_ActionBar = 16974049;

  /// from: static public final int Widget_Holo_Light_ActionBar_Solid
  static const Widget_Holo_Light_ActionBar_Solid = 16974114;

  /// from: static public final int Widget_Holo_Light_ActionBar_Solid_Inverse
  static const Widget_Holo_Light_ActionBar_Solid_Inverse = 16974115;

  /// from: static public final int Widget_Holo_Light_ActionBar_TabBar
  static const Widget_Holo_Light_ActionBar_TabBar = 16974074;

  /// from: static public final int Widget_Holo_Light_ActionBar_TabBar_Inverse
  static const Widget_Holo_Light_ActionBar_TabBar_Inverse = 16974116;

  /// from: static public final int Widget_Holo_Light_ActionBar_TabText
  static const Widget_Holo_Light_ActionBar_TabText = 16974073;

  /// from: static public final int Widget_Holo_Light_ActionBar_TabText_Inverse
  static const Widget_Holo_Light_ActionBar_TabText_Inverse = 16974118;

  /// from: static public final int Widget_Holo_Light_ActionBar_TabView
  static const Widget_Holo_Light_ActionBar_TabView = 16974072;

  /// from: static public final int Widget_Holo_Light_ActionBar_TabView_Inverse
  static const Widget_Holo_Light_ActionBar_TabView_Inverse = 16974117;

  /// from: static public final int Widget_Holo_Light_ActionButton
  static const Widget_Holo_Light_ActionButton = 16974045;

  /// from: static public final int Widget_Holo_Light_ActionButton_CloseMode
  static const Widget_Holo_Light_ActionButton_CloseMode = 16974048;

  /// from: static public final int Widget_Holo_Light_ActionButton_Overflow
  static const Widget_Holo_Light_ActionButton_Overflow = 16974046;

  /// from: static public final int Widget_Holo_Light_ActionMode
  static const Widget_Holo_Light_ActionMode = 16974047;

  /// from: static public final int Widget_Holo_Light_ActionMode_Inverse
  static const Widget_Holo_Light_ActionMode_Inverse = 16974119;

  /// from: static public final int Widget_Holo_Light_AutoCompleteTextView
  static const Widget_Holo_Light_AutoCompleteTextView = 16974011;

  /// from: static public final int Widget_Holo_Light_Button
  static const Widget_Holo_Light_Button = 16974006;

  /// from: static public final int Widget_Holo_Light_Button_Borderless_Small
  static const Widget_Holo_Light_Button_Borderless_Small = 16974107;

  /// from: static public final int Widget_Holo_Light_Button_Inset
  static const Widget_Holo_Light_Button_Inset = 16974008;

  /// from: static public final int Widget_Holo_Light_Button_Small
  static const Widget_Holo_Light_Button_Small = 16974007;

  /// from: static public final int Widget_Holo_Light_Button_Toggle
  static const Widget_Holo_Light_Button_Toggle = 16974009;

  /// from: static public final int Widget_Holo_Light_CalendarView
  static const Widget_Holo_Light_CalendarView = 16974061;

  /// from: static public final int Widget_Holo_Light_CheckedTextView
  static const Widget_Holo_Light_CheckedTextView = 16974298;

  /// from: static public final int Widget_Holo_Light_CompoundButton_CheckBox
  static const Widget_Holo_Light_CompoundButton_CheckBox = 16974012;

  /// from: static public final int Widget_Holo_Light_CompoundButton_RadioButton
  static const Widget_Holo_Light_CompoundButton_RadioButton = 16974032;

  /// from: static public final int Widget_Holo_Light_CompoundButton_Star
  static const Widget_Holo_Light_CompoundButton_Star = 16974036;

  /// from: static public final int Widget_Holo_Light_DropDownItem
  static const Widget_Holo_Light_DropDownItem = 16974040;

  /// from: static public final int Widget_Holo_Light_DropDownItem_Spinner
  static const Widget_Holo_Light_DropDownItem_Spinner = 16974041;

  /// from: static public final int Widget_Holo_Light_EditText
  static const Widget_Holo_Light_EditText = 16974014;

  /// from: static public final int Widget_Holo_Light_ExpandableListView
  static const Widget_Holo_Light_ExpandableListView = 16974015;

  /// from: static public final int Widget_Holo_Light_GridView
  static const Widget_Holo_Light_GridView = 16974016;

  /// from: static public final int Widget_Holo_Light_HorizontalScrollView
  static const Widget_Holo_Light_HorizontalScrollView = 16974034;

  /// from: static public final int Widget_Holo_Light_ImageButton
  static const Widget_Holo_Light_ImageButton = 16974017;

  /// from: static public final int Widget_Holo_Light_ListPopupWindow
  static const Widget_Holo_Light_ListPopupWindow = 16974043;

  /// from: static public final int Widget_Holo_Light_ListView
  static const Widget_Holo_Light_ListView = 16974018;

  /// from: static public final int Widget_Holo_Light_ListView_DropDown
  static const Widget_Holo_Light_ListView_DropDown = 16974013;

  /// from: static public final int Widget_Holo_Light_MediaRouteButton
  static const Widget_Holo_Light_MediaRouteButton = 16974294;

  /// from: static public final int Widget_Holo_Light_PopupMenu
  static const Widget_Holo_Light_PopupMenu = 16974044;

  /// from: static public final int Widget_Holo_Light_PopupWindow
  static const Widget_Holo_Light_PopupWindow = 16974019;

  /// from: static public final int Widget_Holo_Light_ProgressBar
  static const Widget_Holo_Light_ProgressBar = 16974020;

  /// from: static public final int Widget_Holo_Light_ProgressBar_Horizontal
  static const Widget_Holo_Light_ProgressBar_Horizontal = 16974021;

  /// from: static public final int Widget_Holo_Light_ProgressBar_Inverse
  static const Widget_Holo_Light_ProgressBar_Inverse = 16974025;

  /// from: static public final int Widget_Holo_Light_ProgressBar_Large
  static const Widget_Holo_Light_ProgressBar_Large = 16974024;

  /// from: static public final int Widget_Holo_Light_ProgressBar_Large_Inverse
  static const Widget_Holo_Light_ProgressBar_Large_Inverse = 16974027;

  /// from: static public final int Widget_Holo_Light_ProgressBar_Small
  static const Widget_Holo_Light_ProgressBar_Small = 16974022;

  /// from: static public final int Widget_Holo_Light_ProgressBar_Small_Inverse
  static const Widget_Holo_Light_ProgressBar_Small_Inverse = 16974026;

  /// from: static public final int Widget_Holo_Light_ProgressBar_Small_Title
  static const Widget_Holo_Light_ProgressBar_Small_Title = 16974023;

  /// from: static public final int Widget_Holo_Light_RatingBar
  static const Widget_Holo_Light_RatingBar = 16974029;

  /// from: static public final int Widget_Holo_Light_RatingBar_Indicator
  static const Widget_Holo_Light_RatingBar_Indicator = 16974030;

  /// from: static public final int Widget_Holo_Light_RatingBar_Small
  static const Widget_Holo_Light_RatingBar_Small = 16974031;

  /// from: static public final int Widget_Holo_Light_ScrollView
  static const Widget_Holo_Light_ScrollView = 16974033;

  /// from: static public final int Widget_Holo_Light_SeekBar
  static const Widget_Holo_Light_SeekBar = 16974028;

  /// from: static public final int Widget_Holo_Light_Spinner
  static const Widget_Holo_Light_Spinner = 16974035;

  /// from: static public final int Widget_Holo_Light_Tab
  static const Widget_Holo_Light_Tab = 16974052;

  /// from: static public final int Widget_Holo_Light_TabWidget
  static const Widget_Holo_Light_TabWidget = 16974037;

  /// from: static public final int Widget_Holo_Light_TextView
  static const Widget_Holo_Light_TextView = 16974010;

  /// from: static public final int Widget_Holo_Light_TextView_SpinnerItem
  static const Widget_Holo_Light_TextView_SpinnerItem = 16974042;

  /// from: static public final int Widget_Holo_Light_WebTextView
  static const Widget_Holo_Light_WebTextView = 16974038;

  /// from: static public final int Widget_Holo_Light_WebView
  static const Widget_Holo_Light_WebView = 16974039;

  /// from: static public final int Widget_Holo_ListPopupWindow
  static const Widget_Holo_ListPopupWindow = 16973997;

  /// from: static public final int Widget_Holo_ListView
  static const Widget_Holo_ListView = 16973975;

  /// from: static public final int Widget_Holo_ListView_DropDown
  static const Widget_Holo_ListView_DropDown = 16973970;

  /// from: static public final int Widget_Holo_MediaRouteButton
  static const Widget_Holo_MediaRouteButton = 16974293;

  /// from: static public final int Widget_Holo_PopupMenu
  static const Widget_Holo_PopupMenu = 16973998;

  /// from: static public final int Widget_Holo_PopupWindow
  static const Widget_Holo_PopupWindow = 16973976;

  /// from: static public final int Widget_Holo_ProgressBar
  static const Widget_Holo_ProgressBar = 16973977;

  /// from: static public final int Widget_Holo_ProgressBar_Horizontal
  static const Widget_Holo_ProgressBar_Horizontal = 16973978;

  /// from: static public final int Widget_Holo_ProgressBar_Large
  static const Widget_Holo_ProgressBar_Large = 16973981;

  /// from: static public final int Widget_Holo_ProgressBar_Small
  static const Widget_Holo_ProgressBar_Small = 16973979;

  /// from: static public final int Widget_Holo_ProgressBar_Small_Title
  static const Widget_Holo_ProgressBar_Small_Title = 16973980;

  /// from: static public final int Widget_Holo_RatingBar
  static const Widget_Holo_RatingBar = 16973983;

  /// from: static public final int Widget_Holo_RatingBar_Indicator
  static const Widget_Holo_RatingBar_Indicator = 16973984;

  /// from: static public final int Widget_Holo_RatingBar_Small
  static const Widget_Holo_RatingBar_Small = 16973985;

  /// from: static public final int Widget_Holo_ScrollView
  static const Widget_Holo_ScrollView = 16973987;

  /// from: static public final int Widget_Holo_SeekBar
  static const Widget_Holo_SeekBar = 16973982;

  /// from: static public final int Widget_Holo_Spinner
  static const Widget_Holo_Spinner = 16973989;

  /// from: static public final int Widget_Holo_Tab
  static const Widget_Holo_Tab = 16974051;

  /// from: static public final int Widget_Holo_TabWidget
  static const Widget_Holo_TabWidget = 16973991;

  /// from: static public final int Widget_Holo_TextView
  static const Widget_Holo_TextView = 16973967;

  /// from: static public final int Widget_Holo_TextView_SpinnerItem
  static const Widget_Holo_TextView_SpinnerItem = 16973996;

  /// from: static public final int Widget_Holo_WebTextView
  static const Widget_Holo_WebTextView = 16973992;

  /// from: static public final int Widget_Holo_WebView
  static const Widget_Holo_WebView = 16973993;

  /// from: static public final int Widget_ImageButton
  static const Widget_ImageButton = 16973862;

  /// from: static public final int Widget_ImageWell
  static const Widget_ImageWell = 16973861;

  /// from: static public final int Widget_KeyboardView
  static const Widget_KeyboardView = 16973911;

  /// from: static public final int Widget_ListPopupWindow
  static const Widget_ListPopupWindow = 16973957;

  /// from: static public final int Widget_ListView
  static const Widget_ListView = 16973870;

  /// from: static public final int Widget_ListView_DropDown
  static const Widget_ListView_DropDown = 16973872;

  /// from: static public final int Widget_ListView_Menu
  static const Widget_ListView_Menu = 16973873;

  /// from: static public final int Widget_ListView_White
  static const Widget_ListView_White = 16973871;

  /// from: static public final int Widget_Material
  static const Widget_Material = 16974413;

  /// from: static public final int Widget_Material_ActionBar
  static const Widget_Material_ActionBar = 16974414;

  /// from: static public final int Widget_Material_ActionBar_Solid
  static const Widget_Material_ActionBar_Solid = 16974415;

  /// from: static public final int Widget_Material_ActionBar_TabBar
  static const Widget_Material_ActionBar_TabBar = 16974416;

  /// from: static public final int Widget_Material_ActionBar_TabText
  static const Widget_Material_ActionBar_TabText = 16974417;

  /// from: static public final int Widget_Material_ActionBar_TabView
  static const Widget_Material_ActionBar_TabView = 16974418;

  /// from: static public final int Widget_Material_ActionButton
  static const Widget_Material_ActionButton = 16974419;

  /// from: static public final int Widget_Material_ActionButton_CloseMode
  static const Widget_Material_ActionButton_CloseMode = 16974420;

  /// from: static public final int Widget_Material_ActionButton_Overflow
  static const Widget_Material_ActionButton_Overflow = 16974421;

  /// from: static public final int Widget_Material_ActionMode
  static const Widget_Material_ActionMode = 16974422;

  /// from: static public final int Widget_Material_AutoCompleteTextView
  static const Widget_Material_AutoCompleteTextView = 16974423;

  /// from: static public final int Widget_Material_Button
  ///
  /// Bordered ink button
  static const Widget_Material_Button = 16974424;

  /// from: static public final int Widget_Material_ButtonBar
  static const Widget_Material_ButtonBar = 16974431;

  /// from: static public final int Widget_Material_ButtonBar_AlertDialog
  static const Widget_Material_ButtonBar_AlertDialog = 16974432;

  /// from: static public final int Widget_Material_Button_Borderless
  ///
  /// Borderless ink button
  static const Widget_Material_Button_Borderless = 16974425;

  /// from: static public final int Widget_Material_Button_Borderless_Colored
  ///
  /// Colored borderless ink button
  static const Widget_Material_Button_Borderless_Colored = 16974426;

  /// from: static public final int Widget_Material_Button_Borderless_Small
  ///
  /// Small borderless ink button
  static const Widget_Material_Button_Borderless_Small = 16974427;

  /// from: static public final int Widget_Material_Button_Colored
  ///
  /// Colored bordered ink button
  static const Widget_Material_Button_Colored = 16974547;

  /// from: static public final int Widget_Material_Button_Inset
  static const Widget_Material_Button_Inset = 16974428;

  /// from: static public final int Widget_Material_Button_Small
  ///
  /// Small bordered ink button
  static const Widget_Material_Button_Small = 16974429;

  /// from: static public final int Widget_Material_Button_Toggle
  static const Widget_Material_Button_Toggle = 16974430;

  /// from: static public final int Widget_Material_CalendarView
  static const Widget_Material_CalendarView = 16974433;

  /// from: static public final int Widget_Material_CheckedTextView
  static const Widget_Material_CheckedTextView = 16974434;

  /// from: static public final int Widget_Material_CompoundButton_CheckBox
  static const Widget_Material_CompoundButton_CheckBox = 16974435;

  /// from: static public final int Widget_Material_CompoundButton_RadioButton
  static const Widget_Material_CompoundButton_RadioButton = 16974436;

  /// from: static public final int Widget_Material_CompoundButton_Star
  static const Widget_Material_CompoundButton_Star = 16974437;

  /// from: static public final int Widget_Material_CompoundButton_Switch
  static const Widget_Material_CompoundButton_Switch = 16974554;

  /// from: static public final int Widget_Material_DatePicker
  static const Widget_Material_DatePicker = 16974438;

  /// from: static public final int Widget_Material_DropDownItem
  static const Widget_Material_DropDownItem = 16974439;

  /// from: static public final int Widget_Material_DropDownItem_Spinner
  static const Widget_Material_DropDownItem_Spinner = 16974440;

  /// from: static public final int Widget_Material_EditText
  static const Widget_Material_EditText = 16974441;

  /// from: static public final int Widget_Material_ExpandableListView
  static const Widget_Material_ExpandableListView = 16974442;

  /// from: static public final int Widget_Material_FastScroll
  static const Widget_Material_FastScroll = 16974443;

  /// from: static public final int Widget_Material_GridView
  static const Widget_Material_GridView = 16974444;

  /// from: static public final int Widget_Material_HorizontalScrollView
  static const Widget_Material_HorizontalScrollView = 16974445;

  /// from: static public final int Widget_Material_ImageButton
  static const Widget_Material_ImageButton = 16974446;

  /// from: static public final int Widget_Material_Light
  ///
  /// Light widget styles
  static const Widget_Material_Light = 16974478;

  /// from: static public final int Widget_Material_Light_ActionBar
  static const Widget_Material_Light_ActionBar = 16974479;

  /// from: static public final int Widget_Material_Light_ActionBar_Solid
  static const Widget_Material_Light_ActionBar_Solid = 16974480;

  /// from: static public final int Widget_Material_Light_ActionBar_TabBar
  static const Widget_Material_Light_ActionBar_TabBar = 16974481;

  /// from: static public final int Widget_Material_Light_ActionBar_TabText
  static const Widget_Material_Light_ActionBar_TabText = 16974482;

  /// from: static public final int Widget_Material_Light_ActionBar_TabView
  static const Widget_Material_Light_ActionBar_TabView = 16974483;

  /// from: static public final int Widget_Material_Light_ActionButton
  static const Widget_Material_Light_ActionButton = 16974484;

  /// from: static public final int Widget_Material_Light_ActionButton_CloseMode
  static const Widget_Material_Light_ActionButton_CloseMode = 16974485;

  /// from: static public final int Widget_Material_Light_ActionButton_Overflow
  static const Widget_Material_Light_ActionButton_Overflow = 16974486;

  /// from: static public final int Widget_Material_Light_ActionMode
  static const Widget_Material_Light_ActionMode = 16974487;

  /// from: static public final int Widget_Material_Light_AutoCompleteTextView
  static const Widget_Material_Light_AutoCompleteTextView = 16974488;

  /// from: static public final int Widget_Material_Light_Button
  static const Widget_Material_Light_Button = 16974489;

  /// from: static public final int Widget_Material_Light_ButtonBar
  static const Widget_Material_Light_ButtonBar = 16974496;

  /// from: static public final int Widget_Material_Light_ButtonBar_AlertDialog
  static const Widget_Material_Light_ButtonBar_AlertDialog = 16974497;

  /// from: static public final int Widget_Material_Light_Button_Borderless
  static const Widget_Material_Light_Button_Borderless = 16974490;

  /// from: static public final int Widget_Material_Light_Button_Borderless_Colored
  static const Widget_Material_Light_Button_Borderless_Colored = 16974491;

  /// from: static public final int Widget_Material_Light_Button_Borderless_Small
  static const Widget_Material_Light_Button_Borderless_Small = 16974492;

  /// from: static public final int Widget_Material_Light_Button_Inset
  static const Widget_Material_Light_Button_Inset = 16974493;

  /// from: static public final int Widget_Material_Light_Button_Small
  static const Widget_Material_Light_Button_Small = 16974494;

  /// from: static public final int Widget_Material_Light_Button_Toggle
  static const Widget_Material_Light_Button_Toggle = 16974495;

  /// from: static public final int Widget_Material_Light_CalendarView
  static const Widget_Material_Light_CalendarView = 16974498;

  /// from: static public final int Widget_Material_Light_CheckedTextView
  static const Widget_Material_Light_CheckedTextView = 16974499;

  /// from: static public final int Widget_Material_Light_CompoundButton_CheckBox
  static const Widget_Material_Light_CompoundButton_CheckBox = 16974500;

  /// from: static public final int Widget_Material_Light_CompoundButton_RadioButton
  static const Widget_Material_Light_CompoundButton_RadioButton = 16974501;

  /// from: static public final int Widget_Material_Light_CompoundButton_Star
  static const Widget_Material_Light_CompoundButton_Star = 16974502;

  /// from: static public final int Widget_Material_Light_CompoundButton_Switch
  static const Widget_Material_Light_CompoundButton_Switch = 16974555;

  /// from: static public final int Widget_Material_Light_DatePicker
  static const Widget_Material_Light_DatePicker = 16974503;

  /// from: static public final int Widget_Material_Light_DropDownItem
  static const Widget_Material_Light_DropDownItem = 16974504;

  /// from: static public final int Widget_Material_Light_DropDownItem_Spinner
  static const Widget_Material_Light_DropDownItem_Spinner = 16974505;

  /// from: static public final int Widget_Material_Light_EditText
  static const Widget_Material_Light_EditText = 16974506;

  /// from: static public final int Widget_Material_Light_ExpandableListView
  static const Widget_Material_Light_ExpandableListView = 16974507;

  /// from: static public final int Widget_Material_Light_FastScroll
  static const Widget_Material_Light_FastScroll = 16974508;

  /// from: static public final int Widget_Material_Light_GridView
  static const Widget_Material_Light_GridView = 16974509;

  /// from: static public final int Widget_Material_Light_HorizontalScrollView
  static const Widget_Material_Light_HorizontalScrollView = 16974510;

  /// from: static public final int Widget_Material_Light_ImageButton
  static const Widget_Material_Light_ImageButton = 16974511;

  /// from: static public final int Widget_Material_Light_ListPopupWindow
  static const Widget_Material_Light_ListPopupWindow = 16974512;

  /// from: static public final int Widget_Material_Light_ListView
  static const Widget_Material_Light_ListView = 16974513;

  /// from: static public final int Widget_Material_Light_ListView_DropDown
  static const Widget_Material_Light_ListView_DropDown = 16974514;

  /// from: static public final int Widget_Material_Light_MediaRouteButton
  static const Widget_Material_Light_MediaRouteButton = 16974515;

  /// from: static public final int Widget_Material_Light_NumberPicker
  static const Widget_Material_Light_NumberPicker = 16974557;

  /// from: static public final int Widget_Material_Light_PopupMenu
  static const Widget_Material_Light_PopupMenu = 16974516;

  /// from: static public final int Widget_Material_Light_PopupMenu_Overflow
  static const Widget_Material_Light_PopupMenu_Overflow = 16974517;

  /// from: static public final int Widget_Material_Light_PopupWindow
  static const Widget_Material_Light_PopupWindow = 16974518;

  /// from: static public final int Widget_Material_Light_ProgressBar
  static const Widget_Material_Light_ProgressBar = 16974519;

  /// from: static public final int Widget_Material_Light_ProgressBar_Horizontal
  static const Widget_Material_Light_ProgressBar_Horizontal = 16974520;

  /// from: static public final int Widget_Material_Light_ProgressBar_Inverse
  static const Widget_Material_Light_ProgressBar_Inverse = 16974521;

  /// from: static public final int Widget_Material_Light_ProgressBar_Large
  static const Widget_Material_Light_ProgressBar_Large = 16974522;

  /// from: static public final int Widget_Material_Light_ProgressBar_Large_Inverse
  static const Widget_Material_Light_ProgressBar_Large_Inverse = 16974523;

  /// from: static public final int Widget_Material_Light_ProgressBar_Small
  static const Widget_Material_Light_ProgressBar_Small = 16974524;

  /// from: static public final int Widget_Material_Light_ProgressBar_Small_Inverse
  static const Widget_Material_Light_ProgressBar_Small_Inverse = 16974525;

  /// from: static public final int Widget_Material_Light_ProgressBar_Small_Title
  static const Widget_Material_Light_ProgressBar_Small_Title = 16974526;

  /// from: static public final int Widget_Material_Light_RatingBar
  static const Widget_Material_Light_RatingBar = 16974527;

  /// from: static public final int Widget_Material_Light_RatingBar_Indicator
  static const Widget_Material_Light_RatingBar_Indicator = 16974528;

  /// from: static public final int Widget_Material_Light_RatingBar_Small
  static const Widget_Material_Light_RatingBar_Small = 16974529;

  /// from: static public final int Widget_Material_Light_ScrollView
  static const Widget_Material_Light_ScrollView = 16974530;

  /// from: static public final int Widget_Material_Light_SearchView
  static const Widget_Material_Light_SearchView = 16974531;

  /// from: static public final int Widget_Material_Light_SeekBar
  static const Widget_Material_Light_SeekBar = 16974532;

  /// from: static public final int Widget_Material_Light_SegmentedButton
  static const Widget_Material_Light_SegmentedButton = 16974533;

  /// from: static public final int Widget_Material_Light_Spinner
  static const Widget_Material_Light_Spinner = 16974535;

  /// from: static public final int Widget_Material_Light_Spinner_Underlined
  static const Widget_Material_Light_Spinner_Underlined = 16974536;

  /// from: static public final int Widget_Material_Light_StackView
  static const Widget_Material_Light_StackView = 16974534;

  /// from: static public final int Widget_Material_Light_Tab
  static const Widget_Material_Light_Tab = 16974537;

  /// from: static public final int Widget_Material_Light_TabWidget
  static const Widget_Material_Light_TabWidget = 16974538;

  /// from: static public final int Widget_Material_Light_TextView
  static const Widget_Material_Light_TextView = 16974539;

  /// from: static public final int Widget_Material_Light_TextView_SpinnerItem
  static const Widget_Material_Light_TextView_SpinnerItem = 16974540;

  /// from: static public final int Widget_Material_Light_TimePicker
  static const Widget_Material_Light_TimePicker = 16974541;

  /// from: static public final int Widget_Material_Light_WebTextView
  static const Widget_Material_Light_WebTextView = 16974542;

  /// from: static public final int Widget_Material_Light_WebView
  static const Widget_Material_Light_WebView = 16974543;

  /// from: static public final int Widget_Material_ListPopupWindow
  static const Widget_Material_ListPopupWindow = 16974447;

  /// from: static public final int Widget_Material_ListView
  static const Widget_Material_ListView = 16974448;

  /// from: static public final int Widget_Material_ListView_DropDown
  static const Widget_Material_ListView_DropDown = 16974449;

  /// from: static public final int Widget_Material_MediaRouteButton
  static const Widget_Material_MediaRouteButton = 16974450;

  /// from: static public final int Widget_Material_NumberPicker
  static const Widget_Material_NumberPicker = 16974556;

  /// from: static public final int Widget_Material_PopupMenu
  static const Widget_Material_PopupMenu = 16974451;

  /// from: static public final int Widget_Material_PopupMenu_Overflow
  static const Widget_Material_PopupMenu_Overflow = 16974452;

  /// from: static public final int Widget_Material_PopupWindow
  static const Widget_Material_PopupWindow = 16974453;

  /// from: static public final int Widget_Material_ProgressBar
  static const Widget_Material_ProgressBar = 16974454;

  /// from: static public final int Widget_Material_ProgressBar_Horizontal
  static const Widget_Material_ProgressBar_Horizontal = 16974455;

  /// from: static public final int Widget_Material_ProgressBar_Large
  static const Widget_Material_ProgressBar_Large = 16974456;

  /// from: static public final int Widget_Material_ProgressBar_Small
  static const Widget_Material_ProgressBar_Small = 16974457;

  /// from: static public final int Widget_Material_ProgressBar_Small_Title
  static const Widget_Material_ProgressBar_Small_Title = 16974458;

  /// from: static public final int Widget_Material_RatingBar
  static const Widget_Material_RatingBar = 16974459;

  /// from: static public final int Widget_Material_RatingBar_Indicator
  static const Widget_Material_RatingBar_Indicator = 16974460;

  /// from: static public final int Widget_Material_RatingBar_Small
  static const Widget_Material_RatingBar_Small = 16974461;

  /// from: static public final int Widget_Material_ScrollView
  static const Widget_Material_ScrollView = 16974462;

  /// from: static public final int Widget_Material_SearchView
  static const Widget_Material_SearchView = 16974463;

  /// from: static public final int Widget_Material_SeekBar
  static const Widget_Material_SeekBar = 16974464;

  /// from: static public final int Widget_Material_SeekBar_Discrete
  ///
  /// A seek bar with tick marks at each progress value.
  static const Widget_Material_SeekBar_Discrete = 16974553;

  /// from: static public final int Widget_Material_SegmentedButton
  static const Widget_Material_SegmentedButton = 16974465;

  /// from: static public final int Widget_Material_Spinner
  static const Widget_Material_Spinner = 16974467;

  /// from: static public final int Widget_Material_Spinner_Underlined
  static const Widget_Material_Spinner_Underlined = 16974468;

  /// from: static public final int Widget_Material_StackView
  static const Widget_Material_StackView = 16974466;

  /// from: static public final int Widget_Material_Tab
  static const Widget_Material_Tab = 16974469;

  /// from: static public final int Widget_Material_TabWidget
  static const Widget_Material_TabWidget = 16974470;

  /// from: static public final int Widget_Material_TextView
  static const Widget_Material_TextView = 16974471;

  /// from: static public final int Widget_Material_TextView_SpinnerItem
  static const Widget_Material_TextView_SpinnerItem = 16974472;

  /// from: static public final int Widget_Material_TimePicker
  static const Widget_Material_TimePicker = 16974473;

  /// from: static public final int Widget_Material_Toolbar
  static const Widget_Material_Toolbar = 16974474;

  /// from: static public final int Widget_Material_Toolbar_Button_Navigation
  static const Widget_Material_Toolbar_Button_Navigation = 16974475;

  /// from: static public final int Widget_Material_WebTextView
  static const Widget_Material_WebTextView = 16974476;

  /// from: static public final int Widget_Material_WebView
  static const Widget_Material_WebView = 16974477;

  /// from: static public final int Widget_PopupMenu
  static const Widget_PopupMenu = 16973958;

  /// from: static public final int Widget_PopupWindow
  static const Widget_PopupWindow = 16973878;

  /// from: static public final int Widget_ProgressBar
  static const Widget_ProgressBar = 16973852;

  /// from: static public final int Widget_ProgressBar_Horizontal
  static const Widget_ProgressBar_Horizontal = 16973855;

  /// from: static public final int Widget_ProgressBar_Inverse
  static const Widget_ProgressBar_Inverse = 16973915;

  /// from: static public final int Widget_ProgressBar_Large
  static const Widget_ProgressBar_Large = 16973853;

  /// from: static public final int Widget_ProgressBar_Large_Inverse
  static const Widget_ProgressBar_Large_Inverse = 16973916;

  /// from: static public final int Widget_ProgressBar_Small
  static const Widget_ProgressBar_Small = 16973854;

  /// from: static public final int Widget_ProgressBar_Small_Inverse
  static const Widget_ProgressBar_Small_Inverse = 16973917;

  /// from: static public final int Widget_RatingBar
  static const Widget_RatingBar = 16973857;

  /// from: static public final int Widget_ScrollView
  static const Widget_ScrollView = 16973869;

  /// from: static public final int Widget_SeekBar
  static const Widget_SeekBar = 16973856;

  /// from: static public final int Widget_Spinner
  static const Widget_Spinner = 16973864;

  /// from: static public final int Widget_Spinner_DropDown
  static const Widget_Spinner_DropDown = 16973955;

  /// from: static public final int Widget_StackView
  static const Widget_StackView = 16974310;

  /// from: static public final int Widget_TabWidget
  static const Widget_TabWidget = 16973876;

  /// from: static public final int Widget_TextView
  static const Widget_TextView = 16973858;

  /// from: static public final int Widget_TextView_PopupMenu
  static const Widget_TextView_PopupMenu = 16973865;

  /// from: static public final int Widget_TextView_SpinnerItem
  static const Widget_TextView_SpinnerItem = 16973866;

  /// from: static public final int Widget_Toolbar
  static const Widget_Toolbar = 16974311;

  /// from: static public final int Widget_Toolbar_Button_Navigation
  static const Widget_Toolbar_Button_Navigation = 16974312;

  /// from: static public final int Widget_WebView
  static const Widget_WebView = 16973875;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_style()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$string
class R_string extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$string");
  R_string.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int VideoView_error_button
  ///
  /// Button to close error alert when a video cannot be played
  static const VideoView_error_button = 17039376;

  /// from: static public final int VideoView_error_text_invalid_progressive_playback
  ///
  /// Text for error alert when a video container is not valid for progressive download/playback.
  static const VideoView_error_text_invalid_progressive_playback = 17039381;

  /// from: static public final int VideoView_error_text_unknown
  ///
  /// Text for error alert when a video cannot be played. it can be used by any app.
  static const VideoView_error_text_unknown = 17039377;

  /// from: static public final int VideoView_error_title
  ///
  /// Title for error alert when a video cannot be played.  it can be used by any app.
  static const VideoView_error_title = 17039378;

  /// from: static public final int autofill
  ///
  /// Item on EditText context menu. This action is used to request autofill.
  static const autofill = 17039386;

  /// from: static public final int cancel
  ///
  /// Preference framework strings.
  static const cancel = 17039360;

  /// from: static public final int copy
  ///
  /// Item on EditText context menu. This action is used to cut selected the text into the clipboard.
  static const copy = 17039361;

  /// from: static public final int copyUrl
  ///
  /// Item on EditText context menu. This action is used to copy a URL from the edit field into the clipboard.
  static const copyUrl = 17039362;

  /// from: static public final int cut
  ///
  /// Item on EditText context menu.  This action is used to cut selected the text into the clipboard.
  static const cut = 17039363;

  /// from: static public final int defaultMsisdnAlphaTag
  ///
  /// What the UI should display for "Msisdn" unless overridden by the SIM
  static const defaultMsisdnAlphaTag = 17039365;

  /// from: static public final int defaultVoiceMailAlphaTag
  ///
  /// What the UI should display for "voice mail" unless overridden by the SIM
  static const defaultVoiceMailAlphaTag = 17039364;

  /// from: static public final int dialog_alert_title
  ///
  /// This is the generic "attention" string to be used in attention dialogs.  Typically
  /// combined with setIconAttribute(android.R.attr.alertDialogIcon)
  /// (or setIcon(android.R.drawable.ic_dialog_alert) on legacy versions of the platform)
  static const dialog_alert_title = 17039380;

  /// from: static public final int emptyPhoneNumber
  ///
  /// How to display the lack of a phone number
  static const emptyPhoneNumber = 17039366;

  /// from: static public final int fingerprint_icon_content_description
  ///
  /// Content description which should be used for the fingerprint icon.
  static const fingerprint_icon_content_description = 17039384;

  /// from: static public final int httpErrorBadUrl
  ///
  /// Displayed when a web request failed because the URL isn't in a valid form.
  static const httpErrorBadUrl = 17039367;

  /// from: static public final int httpErrorUnsupportedScheme
  ///
  /// Displayed when a web request failed because the protocol of the server is not supported.
  static const httpErrorUnsupportedScheme = 17039368;

  /// from: static public final int no
  ///
  /// Preference framework strings.
  static const no = 17039369;

  /// from: static public final int ok
  ///
  /// Preference framework strings.
  static const ok = 17039370;

  /// from: static public final int paste
  ///
  /// Item on EditText context menu. This action is used to paste from the clipboard into the eidt field
  static const paste = 17039371;

  /// from: static public final int paste_as_plain_text
  ///
  /// Item on EditText context menu. This action is used to paste from the clipboard into the eidt field without formatting
  static const paste_as_plain_text = 17039385;

  /// from: static public final int search_go
  ///
  /// This is the default button label in the system-wide search UI.
  /// It is also used by the home screen's search "widget". It should be short
  static const search_go = 17039372;

  /// from: static public final int selectAll
  ///
  /// Item on EditText context menu. This action is used to select all text in the edit field.
  static const selectAll = 17039373;

  /// from: static public final int selectTextMode
  ///
  /// Item on EditText context menu. Added only when the context menu is not empty, it enable selection context mode. [CHAR LIMIT=20]
  static const selectTextMode = 17039382;

  /// from: static public final int status_bar_notification_info_overflow
  ///
  /// Text to use when the number in a notification info is too large
  /// (greater than status_bar_notification_info_maxnum, defined in
  /// values/config.xml) and must be truncated. May need to be localized
  /// for most appropriate textual indicator of "more than X".
  /// [CHAR LIMIT=4]
  static const status_bar_notification_info_overflow = 17039383;

  /// from: static public final int unknownName
  ///
  /// How to display the lack of a name
  static const unknownName = 17039374;

  /// from: static public final int untitled
  ///
  /// Used in Contacts for a field that has no label and in Note Pad
  /// for a note with no name.
  static const untitled = 17039375;

  /// from: static public final int yes
  ///
  /// Preference framework strings.
  static const yes = 17039379;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_string()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$raw
class R_raw extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$raw");
  R_raw.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_raw()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$plurals
class R_plurals extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$plurals");
  R_plurals.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_plurals()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$mipmap
class R_mipmap extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$mipmap");
  R_mipmap.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int sym_def_app_icon
  ///
  /// Default icon for applications that don't specify an icon.
  static const sym_def_app_icon = 17629184;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_mipmap()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$menu
class R_menu extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$menu");
  R_menu.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_menu()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$layout
class R_layout extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$layout");
  R_layout.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int activity_list_item
  static const activity_list_item = 17367040;

  /// from: static public final int browser_link_context_header
  static const browser_link_context_header = 17367054;

  /// from: static public final int expandable_list_content
  static const expandable_list_content = 17367041;

  /// from: static public final int list_content
  ///
  /// Standard content view for a android.app.ListFragment.
  /// If you are implementing a subclass of ListFragment with your
  /// own customized content, you can include this layout in that
  /// content to still retain all of the standard functionality of
  /// the base class.
  static const list_content = 17367060;

  /// from: static public final int preference_category
  static const preference_category = 17367042;

  /// from: static public final int select_dialog_item
  static const select_dialog_item = 17367057;

  /// from: static public final int select_dialog_multichoice
  static const select_dialog_multichoice = 17367059;

  /// from: static public final int select_dialog_singlechoice
  static const select_dialog_singlechoice = 17367058;

  /// from: static public final int simple_dropdown_item_1line
  static const simple_dropdown_item_1line = 17367050;

  /// from: static public final int simple_expandable_list_item_1
  static const simple_expandable_list_item_1 = 17367046;

  /// from: static public final int simple_expandable_list_item_2
  static const simple_expandable_list_item_2 = 17367047;

  /// from: static public final int simple_gallery_item
  static const simple_gallery_item = 17367051;

  /// from: static public final int simple_list_item_1
  static const simple_list_item_1 = 17367043;

  /// from: static public final int simple_list_item_2
  static const simple_list_item_2 = 17367044;

  /// from: static public final int simple_list_item_activated_1
  ///
  /// A version of \#simple_list_item_1 that is able to change its
  /// background state to indicate when it is activated (that is checked by
  /// a ListView).
  static const simple_list_item_activated_1 = 17367062;

  /// from: static public final int simple_list_item_activated_2
  ///
  /// A version of \#simple_list_item_2 that is able to change its
  /// background state to indicate when it is activated (that is checked by
  /// a ListView).
  static const simple_list_item_activated_2 = 17367063;

  /// from: static public final int simple_list_item_checked
  static const simple_list_item_checked = 17367045;

  /// from: static public final int simple_list_item_multiple_choice
  static const simple_list_item_multiple_choice = 17367056;

  /// from: static public final int simple_list_item_single_choice
  static const simple_list_item_single_choice = 17367055;

  /// from: static public final int simple_selectable_list_item
  ///
  /// A simple ListView item layout which can contain text and support (single or multiple) item selection.
  static const simple_selectable_list_item = 17367061;

  /// from: static public final int simple_spinner_dropdown_item
  static const simple_spinner_dropdown_item = 17367049;

  /// from: static public final int simple_spinner_item
  static const simple_spinner_item = 17367048;

  /// from: static public final int test_list_item
  static const test_list_item = 17367052;

  /// from: static public final int two_line_list_item
  static const two_line_list_item = 17367053;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_layout()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$interpolator
class R_interpolator extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$interpolator");
  R_interpolator.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int accelerate_cubic
  ///
  /// Acceleration curve matching a cubic ease out function.
  static const accelerate_cubic = 17563650;

  /// from: static public final int accelerate_decelerate
  ///
  /// Acceleration curve matching an ease in + ease out function
  static const accelerate_decelerate = 17563654;

  /// from: static public final int accelerate_quad
  ///
  /// Acceleration curve matching a quadtratic ease out function.
  static const accelerate_quad = 17563648;

  /// from: static public final int accelerate_quint
  ///
  /// Acceleration curve matching a quint ease out function.
  static const accelerate_quint = 17563652;

  /// from: static public final int anticipate
  ///
  /// An interpolator where the change starts backward then flings forward.
  static const anticipate = 17563655;

  /// from: static public final int anticipate_overshoot
  ///
  /// An interpolator where the change starts backward then flings forward and
  /// overshoots the target value and finally goes back to the final value.
  static const anticipate_overshoot = 17563657;

  /// from: static public final int bounce
  ///
  /// An interpolator where the change bounces at the end.
  static const bounce = 17563658;

  /// from: static public final int cycle
  ///
  /// Repeats the animation for one cycle. The rate of change follows a
  /// sinusoidal pattern.
  static const cycle = 17563660;

  /// from: static public final int decelerate_cubic
  ///
  /// Acceleration curve matching a cubic ease in function.
  static const decelerate_cubic = 17563651;

  /// from: static public final int decelerate_quad
  ///
  /// Acceleration curve matching a quadtratic ease in function.
  static const decelerate_quad = 17563649;

  /// from: static public final int decelerate_quint
  ///
  /// Acceleration curve matching a quint ease in function.
  static const decelerate_quint = 17563653;

  /// from: static public final int fast_out_extra_slow_in
  ///
  /// An interpolator which accelerates fast but decelerates extra slowly.
  static const fast_out_extra_slow_in = 17563674;

  /// from: static public final int fast_out_linear_in
  ///
  /// An interpolator which accelerates fast and keeps accelerating until the end.
  static const fast_out_linear_in = 17563663;

  /// from: static public final int fast_out_slow_in
  ///
  /// An interpolator which accelerates fast but decelerates slowly.
  static const fast_out_slow_in = 17563661;

  /// from: static public final int linear
  ///
  /// An interpolator where the rate of change is constant.
  static const linear = 17563659;

  /// from: static public final int linear_out_slow_in
  ///
  /// An interpolator which starts with a peak non-zero velocity and decelerates slowly.
  static const linear_out_slow_in = 17563662;

  /// from: static public final int overshoot
  ///
  /// An interpolator where the change flings forward and overshoots the last
  /// value then comes back.
  static const overshoot = 17563656;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_interpolator()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$integer
class R_integer extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$integer");
  R_integer.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int config_longAnimTime
  ///
  /// The duration (in milliseconds) of a long animation.
  static const config_longAnimTime = 17694722;

  /// from: static public final int config_mediumAnimTime
  ///
  /// The duration (in milliseconds) of a medium-length animation.
  static const config_mediumAnimTime = 17694721;

  /// from: static public final int config_shortAnimTime
  ///
  /// The duration (in milliseconds) of a short animation.
  static const config_shortAnimTime = 17694720;

  /// from: static public final int status_bar_notification_info_maxnum
  ///
  /// Maximum numerical value that will be shown in a status bar
  /// notification icon or in the notification itself. Will be replaced
  /// with @string/status_bar_notification_info_overflow when shown in the
  /// UI.
  static const status_bar_notification_info_maxnum = 17694723;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_integer()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$id
class R_id extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$id");
  R_id.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int accessibilityActionContextClick
  ///
  /// Accessibility action identifier for android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction\#ACTION_CONTEXT_CLICK.
  static const accessibilityActionContextClick = 16908348;

  /// from: static public final int accessibilityActionHideTooltip
  ///
  /// Accessibility action identifier for android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction\#ACTION_HIDE_TOOLTIP.
  static const accessibilityActionHideTooltip = 16908357;

  /// from: static public final int accessibilityActionMoveWindow
  ///
  /// Accessibility action identifier for android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction\#ACTION_MOVE_WINDOW.
  static const accessibilityActionMoveWindow = 16908354;

  /// from: static public final int accessibilityActionScrollDown
  ///
  /// Accessibility action identifier for android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction\#ACTION_SCROLL_DOWN.
  static const accessibilityActionScrollDown = 16908346;

  /// from: static public final int accessibilityActionScrollLeft
  ///
  /// Accessibility action identifier for android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction\#ACTION_SCROLL_LEFT.
  static const accessibilityActionScrollLeft = 16908345;

  /// from: static public final int accessibilityActionScrollRight
  ///
  /// Accessibility action identifier for android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction\#ACTION_SCROLL_RIGHT.
  static const accessibilityActionScrollRight = 16908347;

  /// from: static public final int accessibilityActionScrollToPosition
  ///
  /// Accessibility action identifier for android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction\#ACTION_SCROLL_TO_POSITION.
  static const accessibilityActionScrollToPosition = 16908343;

  /// from: static public final int accessibilityActionScrollUp
  ///
  /// Accessibility action identifier for android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction\#ACTION_SCROLL_UP.
  static const accessibilityActionScrollUp = 16908344;

  /// from: static public final int accessibilityActionSetProgress
  ///
  /// Accessibility action identifier for android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction\#ACTION_SET_PROGRESS.
  static const accessibilityActionSetProgress = 16908349;

  /// from: static public final int accessibilityActionShowOnScreen
  ///
  /// Accessibility action identifier for android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction\#ACTION_SHOW_ON_SCREEN.
  static const accessibilityActionShowOnScreen = 16908342;

  /// from: static public final int accessibilityActionShowTooltip
  ///
  /// Accessibility action identifier for android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction\#ACTION_SHOW_TOOLTIP.
  static const accessibilityActionShowTooltip = 16908356;

  /// from: static public final int addToDictionary
  ///
  /// Menu ID to perform a "add to dictionary" operation.
  static const addToDictionary = 16908330;

  /// from: static public final int autofill
  ///
  /// Action used to manually trigger an autofill request
  static const autofill = 16908355;

  /// from: static public final int background
  static const background = 16908288;

  /// from: static public final int button1
  static const button1 = 16908313;

  /// from: static public final int button2
  static const button2 = 16908314;

  /// from: static public final int button3
  static const button3 = 16908315;

  /// from: static public final int candidatesArea
  ///
  /// The part of the UI shown by an
  /// android.inputmethodservice.InputMethodService that contains the
  /// views for displaying candidates for what the user has entered.
  static const candidatesArea = 16908317;

  /// from: static public final int checkbox
  static const checkbox = 16908289;

  /// from: static public final int closeButton
  ///
  /// View ID of a android.view.View to close a popup keyboard
  static const closeButton = 16908327;

  /// from: static public final int content
  static const content = 16908290;

  /// from: static public final int copy
  ///
  /// Context menu ID for the "Copy" menu item to copy the currently
  /// selected (or all) text in a text view to the clipboard.
  static const copy = 16908321;

  /// from: static public final int copyUrl
  ///
  /// Context menu ID for the "Copy URL" menu item to copy the currently
  /// selected URL from the text view to the clipboard.
  static const copyUrl = 16908323;

  /// from: static public final int custom
  static const custom = 16908331;

  /// from: static public final int cut
  ///
  /// Context menu ID for the "Cut" menu item to copy and delete the currently
  /// selected (or all) text in a text view to the clipboard.
  static const cut = 16908320;

  /// from: static public final int edit
  static const edit = 16908291;

  /// from: static public final int empty
  static const empty = 16908292;

  /// from: static public final int extractArea
  ///
  /// The part of the UI shown by an
  /// android.inputmethodservice.InputMethodService that contains the
  /// views for interacting with the user in extraction mode.
  static const extractArea = 16908316;

  /// from: static public final int hint
  static const hint = 16908293;

  /// from: static public final int home
  static const home = 16908332;

  /// from: static public final int icon
  static const icon = 16908294;

  /// from: static public final int icon1
  static const icon1 = 16908295;

  /// from: static public final int icon2
  static const icon2 = 16908296;

  /// from: static public final int icon_frame
  static const icon_frame = 16908350;

  /// from: static public final int input
  static const input = 16908297;

  /// from: static public final int inputArea
  ///
  /// The part of the UI shown by an
  /// android.inputmethodservice.InputMethodService that contains the
  /// views for entering text using the screen.
  static const inputArea = 16908318;

  /// from: static public final int inputExtractEditText
  ///
  /// View ID of the text editor inside of an extracted text layout.
  static const inputExtractEditText = 16908325;

  /// from: static public final int keyboardView
  ///
  /// View ID of the android.inputmethodservice.KeyboardView within
  /// an input method's input area.
  static const keyboardView = 16908326;

  /// from: static public final int list
  static const list = 16908298;

  /// from: static public final int list_container
  static const list_container = 16908351;

  /// from: static public final int mask
  static const mask = 16908334;

  /// from: static public final int message
  static const message = 16908299;

  /// from: static public final int navigationBarBackground
  static const navigationBarBackground = 16908336;

  /// from: static public final int paste
  ///
  /// Context menu ID for the "Paste" menu item to copy the current contents
  /// of the clipboard into the text view.
  static const paste = 16908322;

  /// from: static public final int pasteAsPlainText
  static const pasteAsPlainText = 16908337;

  /// from: static public final int primary
  static const primary = 16908300;

  /// from: static public final int progress
  static const progress = 16908301;

  /// from: static public final int redo
  static const redo = 16908339;

  /// from: static public final int replaceText
  static const replaceText = 16908340;

  /// from: static public final int secondaryProgress
  static const secondaryProgress = 16908303;

  /// from: static public final int selectAll
  ///
  /// Context menu ID for the "Select All" menu item to select all text
  /// in a text view.
  static const selectAll = 16908319;

  /// from: static public final int selectTextMode
  ///
  /// Context menu ID for the "Select text..." menu item to switch to text
  /// selection context mode in text views.
  static const selectTextMode = 16908333;

  /// from: static public final int selectedIcon
  static const selectedIcon = 16908302;

  /// from: static public final int shareText
  static const shareText = 16908341;

  /// from: static public final int startSelectingText
  ///
  /// Menu ID to perform a "start selecting text" operation.
  static const startSelectingText = 16908328;

  /// from: static public final int statusBarBackground
  static const statusBarBackground = 16908335;

  /// from: static public final int stopSelectingText
  ///
  /// Menu ID to perform a "stop selecting text" operation.
  static const stopSelectingText = 16908329;

  /// from: static public final int summary
  static const summary = 16908304;

  /// from: static public final int switchInputMethod
  ///
  /// Context menu ID for the "Input Method" menu item to being up the
  /// input method picker dialog, allowing the user to switch to another
  /// input method.
  static const switchInputMethod = 16908324;

  /// from: static public final int switch_widget
  static const switch_widget = 16908352;

  /// from: static public final int tabcontent
  static const tabcontent = 16908305;

  /// from: static public final int tabhost
  static const tabhost = 16908306;

  /// from: static public final int tabs
  static const tabs = 16908307;

  /// from: static public final int text1
  static const text1 = 16908308;

  /// from: static public final int text2
  static const text2 = 16908309;

  /// from: static public final int textAssist
  static const textAssist = 16908353;

  /// from: static public final int title
  static const title = 16908310;

  /// from: static public final int toggle
  static const toggle = 16908311;

  /// from: static public final int undo
  static const undo = 16908338;

  /// from: static public final int widget_frame
  static const widget_frame = 16908312;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_id()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$fraction
class R_fraction extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$fraction");
  R_fraction.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_fraction()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$drawable
class R_drawable extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$drawable");
  R_drawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int alert_dark_frame
  static const alert_dark_frame = 17301504;

  /// from: static public final int alert_light_frame
  static const alert_light_frame = 17301505;

  /// from: static public final int arrow_down_float
  static const arrow_down_float = 17301506;

  /// from: static public final int arrow_up_float
  static const arrow_up_float = 17301507;

  /// from: static public final int bottom_bar
  static const bottom_bar = 17301658;

  /// from: static public final int btn_default
  static const btn_default = 17301508;

  /// from: static public final int btn_default_small
  static const btn_default_small = 17301509;

  /// from: static public final int btn_dialog
  static const btn_dialog = 17301527;

  /// from: static public final int btn_dropdown
  static const btn_dropdown = 17301510;

  /// from: static public final int btn_minus
  static const btn_minus = 17301511;

  /// from: static public final int btn_plus
  static const btn_plus = 17301512;

  /// from: static public final int btn_radio
  static const btn_radio = 17301513;

  /// from: static public final int btn_star
  static const btn_star = 17301514;

  /// from: static public final int btn_star_big_off
  static const btn_star_big_off = 17301515;

  /// from: static public final int btn_star_big_on
  static const btn_star_big_on = 17301516;

  /// from: static public final int button_onoff_indicator_off
  static const button_onoff_indicator_off = 17301518;

  /// from: static public final int button_onoff_indicator_on
  static const button_onoff_indicator_on = 17301517;

  /// from: static public final int checkbox_off_background
  static const checkbox_off_background = 17301519;

  /// from: static public final int checkbox_on_background
  static const checkbox_on_background = 17301520;

  /// from: static public final int dark_header
  ///
  /// Drawable to use as a background for separators on a list with a dark background
  static const dark_header = 17301669;

  /// from: static public final int dialog_frame
  static const dialog_frame = 17301521;

  /// from: static public final int dialog_holo_dark_frame
  static const dialog_holo_dark_frame = 17301682;

  /// from: static public final int dialog_holo_light_frame
  static const dialog_holo_light_frame = 17301683;

  /// from: static public final int divider_horizontal_bright
  static const divider_horizontal_bright = 17301522;

  /// from: static public final int divider_horizontal_dark
  static const divider_horizontal_dark = 17301524;

  /// from: static public final int divider_horizontal_dim_dark
  static const divider_horizontal_dim_dark = 17301525;

  /// from: static public final int divider_horizontal_textfield
  static const divider_horizontal_textfield = 17301523;

  /// from: static public final int edit_text
  static const edit_text = 17301526;

  /// from: static public final int editbox_background
  static const editbox_background = 17301528;

  /// from: static public final int editbox_background_normal
  static const editbox_background_normal = 17301529;

  /// from: static public final int editbox_dropdown_dark_frame
  static const editbox_dropdown_dark_frame = 17301530;

  /// from: static public final int editbox_dropdown_light_frame
  static const editbox_dropdown_light_frame = 17301531;

  /// from: static public final int gallery_thumb
  static const gallery_thumb = 17301532;

  /// from: static public final int ic_btn_speak_now
  static const ic_btn_speak_now = 17301668;

  /// from: static public final int ic_delete
  static const ic_delete = 17301533;

  /// from: static public final int ic_dialog_alert
  static const ic_dialog_alert = 17301543;

  /// from: static public final int ic_dialog_dialer
  static const ic_dialog_dialer = 17301544;

  /// from: static public final int ic_dialog_email
  static const ic_dialog_email = 17301545;

  /// from: static public final int ic_dialog_info
  static const ic_dialog_info = 17301659;

  /// from: static public final int ic_dialog_map
  static const ic_dialog_map = 17301546;

  /// from: static public final int ic_input_add
  static const ic_input_add = 17301547;

  /// from: static public final int ic_input_delete
  static const ic_input_delete = 17301548;

  /// from: static public final int ic_input_get
  static const ic_input_get = 17301549;

  /// from: static public final int ic_lock_idle_alarm
  static const ic_lock_idle_alarm = 17301550;

  /// from: static public final int ic_lock_idle_charging
  static const ic_lock_idle_charging = 17301534;

  /// from: static public final int ic_lock_idle_lock
  static const ic_lock_idle_lock = 17301535;

  /// from: static public final int ic_lock_idle_low_battery
  static const ic_lock_idle_low_battery = 17301536;

  /// from: static public final int ic_lock_lock
  static const ic_lock_lock = 17301551;

  /// from: static public final int ic_lock_power_off
  static const ic_lock_power_off = 17301552;

  /// from: static public final int ic_lock_silent_mode
  static const ic_lock_silent_mode = 17301553;

  /// from: static public final int ic_lock_silent_mode_off
  static const ic_lock_silent_mode_off = 17301554;

  /// from: static public final int ic_media_ff
  static const ic_media_ff = 17301537;

  /// from: static public final int ic_media_next
  static const ic_media_next = 17301538;

  /// from: static public final int ic_media_pause
  static const ic_media_pause = 17301539;

  /// from: static public final int ic_media_play
  static const ic_media_play = 17301540;

  /// from: static public final int ic_media_previous
  static const ic_media_previous = 17301541;

  /// from: static public final int ic_media_rew
  static const ic_media_rew = 17301542;

  /// from: static public final int ic_menu_add
  static const ic_menu_add = 17301555;

  /// from: static public final int ic_menu_agenda
  static const ic_menu_agenda = 17301556;

  /// from: static public final int ic_menu_always_landscape_portrait
  static const ic_menu_always_landscape_portrait = 17301557;

  /// from: static public final int ic_menu_call
  static const ic_menu_call = 17301558;

  /// from: static public final int ic_menu_camera
  static const ic_menu_camera = 17301559;

  /// from: static public final int ic_menu_close_clear_cancel
  static const ic_menu_close_clear_cancel = 17301560;

  /// from: static public final int ic_menu_compass
  static const ic_menu_compass = 17301561;

  /// from: static public final int ic_menu_crop
  static const ic_menu_crop = 17301562;

  /// from: static public final int ic_menu_day
  static const ic_menu_day = 17301563;

  /// from: static public final int ic_menu_delete
  static const ic_menu_delete = 17301564;

  /// from: static public final int ic_menu_directions
  static const ic_menu_directions = 17301565;

  /// from: static public final int ic_menu_edit
  static const ic_menu_edit = 17301566;

  /// from: static public final int ic_menu_gallery
  static const ic_menu_gallery = 17301567;

  /// from: static public final int ic_menu_help
  static const ic_menu_help = 17301568;

  /// from: static public final int ic_menu_info_details
  static const ic_menu_info_details = 17301569;

  /// from: static public final int ic_menu_manage
  static const ic_menu_manage = 17301570;

  /// from: static public final int ic_menu_mapmode
  static const ic_menu_mapmode = 17301571;

  /// from: static public final int ic_menu_month
  static const ic_menu_month = 17301572;

  /// from: static public final int ic_menu_more
  static const ic_menu_more = 17301573;

  /// from: static public final int ic_menu_my_calendar
  static const ic_menu_my_calendar = 17301574;

  /// from: static public final int ic_menu_mylocation
  static const ic_menu_mylocation = 17301575;

  /// from: static public final int ic_menu_myplaces
  static const ic_menu_myplaces = 17301576;

  /// from: static public final int ic_menu_preferences
  static const ic_menu_preferences = 17301577;

  /// from: static public final int ic_menu_recent_history
  static const ic_menu_recent_history = 17301578;

  /// from: static public final int ic_menu_report_image
  static const ic_menu_report_image = 17301579;

  /// from: static public final int ic_menu_revert
  static const ic_menu_revert = 17301580;

  /// from: static public final int ic_menu_rotate
  static const ic_menu_rotate = 17301581;

  /// from: static public final int ic_menu_save
  static const ic_menu_save = 17301582;

  /// from: static public final int ic_menu_search
  static const ic_menu_search = 17301583;

  /// from: static public final int ic_menu_send
  static const ic_menu_send = 17301584;

  /// from: static public final int ic_menu_set_as
  static const ic_menu_set_as = 17301585;

  /// from: static public final int ic_menu_share
  static const ic_menu_share = 17301586;

  /// from: static public final int ic_menu_slideshow
  static const ic_menu_slideshow = 17301587;

  /// from: static public final int ic_menu_sort_alphabetically
  static const ic_menu_sort_alphabetically = 17301660;

  /// from: static public final int ic_menu_sort_by_size
  static const ic_menu_sort_by_size = 17301661;

  /// from: static public final int ic_menu_today
  static const ic_menu_today = 17301588;

  /// from: static public final int ic_menu_upload
  static const ic_menu_upload = 17301589;

  /// from: static public final int ic_menu_upload_you_tube
  static const ic_menu_upload_you_tube = 17301590;

  /// from: static public final int ic_menu_view
  static const ic_menu_view = 17301591;

  /// from: static public final int ic_menu_week
  static const ic_menu_week = 17301592;

  /// from: static public final int ic_menu_zoom
  static const ic_menu_zoom = 17301593;

  /// from: static public final int ic_notification_clear_all
  static const ic_notification_clear_all = 17301594;

  /// from: static public final int ic_notification_overlay
  static const ic_notification_overlay = 17301595;

  /// from: static public final int ic_partial_secure
  static const ic_partial_secure = 17301596;

  /// from: static public final int ic_popup_disk_full
  static const ic_popup_disk_full = 17301597;

  /// from: static public final int ic_popup_reminder
  static const ic_popup_reminder = 17301598;

  /// from: static public final int ic_popup_sync
  static const ic_popup_sync = 17301599;

  /// from: static public final int ic_search_category_default
  static const ic_search_category_default = 17301600;

  /// from: static public final int ic_secure
  static const ic_secure = 17301601;

  /// from: static public final int list_selector_background
  static const list_selector_background = 17301602;

  /// from: static public final int menu_frame
  static const menu_frame = 17301603;

  /// from: static public final int menu_full_frame
  static const menu_full_frame = 17301604;

  /// from: static public final int menuitem_background
  static const menuitem_background = 17301605;

  /// from: static public final int picture_frame
  static const picture_frame = 17301606;

  /// from: static public final int presence_audio_away
  static const presence_audio_away = 17301679;

  /// from: static public final int presence_audio_busy
  static const presence_audio_busy = 17301680;

  /// from: static public final int presence_audio_online
  static const presence_audio_online = 17301681;

  /// from: static public final int presence_away
  static const presence_away = 17301607;

  /// from: static public final int presence_busy
  static const presence_busy = 17301608;

  /// from: static public final int presence_invisible
  static const presence_invisible = 17301609;

  /// from: static public final int presence_offline
  static const presence_offline = 17301610;

  /// from: static public final int presence_online
  static const presence_online = 17301611;

  /// from: static public final int presence_video_away
  ///
  /// presence drawables for videochat or audiochat capable contacts
  static const presence_video_away = 17301676;

  /// from: static public final int presence_video_busy
  static const presence_video_busy = 17301677;

  /// from: static public final int presence_video_online
  static const presence_video_online = 17301678;

  /// from: static public final int progress_horizontal
  static const progress_horizontal = 17301612;

  /// from: static public final int progress_indeterminate_horizontal
  static const progress_indeterminate_horizontal = 17301613;

  /// from: static public final int radiobutton_off_background
  static const radiobutton_off_background = 17301614;

  /// from: static public final int radiobutton_on_background
  static const radiobutton_on_background = 17301615;

  /// from: static public final int screen_background_dark
  static const screen_background_dark = 17301656;

  /// from: static public final int screen_background_dark_transparent
  ///
  /// Semi-transparent background that can be used when placing a dark
  /// themed UI on top of some arbitrary background (such as the
  /// wallpaper).  This darkens the background sufficiently that the UI
  /// can be seen.
  /// Background drawable that can be used for a transparent activity to
  /// be able to display a dark UI: this darkens its background to make
  /// a dark (default theme) UI more visible.
  static const screen_background_dark_transparent = 17301673;

  /// from: static public final int screen_background_light
  static const screen_background_light = 17301657;

  /// from: static public final int screen_background_light_transparent
  ///
  /// Background drawable that can be used for a transparent activity to
  /// be able to display a light UI: this lightens its background to make
  /// a light UI more visible.
  static const screen_background_light_transparent = 17301674;

  /// from: static public final int spinner_background
  static const spinner_background = 17301616;

  /// from: static public final int spinner_dropdown_background
  static const spinner_dropdown_background = 17301617;

  /// from: static public final int star_big_off
  static const star_big_off = 17301619;

  /// from: static public final int star_big_on
  static const star_big_on = 17301618;

  /// from: static public final int star_off
  static const star_off = 17301621;

  /// from: static public final int star_on
  static const star_on = 17301620;

  /// from: static public final int stat_notify_call_mute
  static const stat_notify_call_mute = 17301622;

  /// from: static public final int stat_notify_chat
  static const stat_notify_chat = 17301623;

  /// from: static public final int stat_notify_error
  static const stat_notify_error = 17301624;

  /// from: static public final int stat_notify_missed_call
  static const stat_notify_missed_call = 17301631;

  /// from: static public final int stat_notify_more
  static const stat_notify_more = 17301625;

  /// from: static public final int stat_notify_sdcard
  static const stat_notify_sdcard = 17301626;

  /// from: static public final int stat_notify_sdcard_prepare
  static const stat_notify_sdcard_prepare = 17301675;

  /// from: static public final int stat_notify_sdcard_usb
  static const stat_notify_sdcard_usb = 17301627;

  /// from: static public final int stat_notify_sync
  static const stat_notify_sync = 17301628;

  /// from: static public final int stat_notify_sync_noanim
  static const stat_notify_sync_noanim = 17301629;

  /// from: static public final int stat_notify_voicemail
  static const stat_notify_voicemail = 17301630;

  /// from: static public final int stat_sys_data_bluetooth
  static const stat_sys_data_bluetooth = 17301632;

  /// from: static public final int stat_sys_download
  static const stat_sys_download = 17301633;

  /// from: static public final int stat_sys_download_done
  static const stat_sys_download_done = 17301634;

  /// from: static public final int stat_sys_headset
  static const stat_sys_headset = 17301635;

  /// from: static public final int stat_sys_phone_call
  ///
  /// @deprecated Replaced by a private asset in the phone app.
  static const stat_sys_phone_call = 17301636;

  /// from: static public final int stat_sys_phone_call_forward
  ///
  /// @deprecated Replaced by a private asset in the phone app.
  static const stat_sys_phone_call_forward = 17301637;

  /// from: static public final int stat_sys_phone_call_on_hold
  ///
  /// @deprecated Replaced by a private asset in the phone app.
  static const stat_sys_phone_call_on_hold = 17301638;

  /// from: static public final int stat_sys_speakerphone
  static const stat_sys_speakerphone = 17301639;

  /// from: static public final int stat_sys_upload
  static const stat_sys_upload = 17301640;

  /// from: static public final int stat_sys_upload_done
  static const stat_sys_upload_done = 17301641;

  /// from: static public final int stat_sys_vp_phone_call
  ///
  /// @deprecated Replaced by a private asset in the phone app.
  static const stat_sys_vp_phone_call = 17301671;

  /// from: static public final int stat_sys_vp_phone_call_on_hold
  ///
  /// @deprecated Replaced by a private asset in the phone app.
  static const stat_sys_vp_phone_call_on_hold = 17301672;

  /// from: static public final int stat_sys_warning
  static const stat_sys_warning = 17301642;

  /// from: static public final int status_bar_item_app_background
  static const status_bar_item_app_background = 17301643;

  /// from: static public final int status_bar_item_background
  static const status_bar_item_background = 17301644;

  /// from: static public final int sym_action_call
  static const sym_action_call = 17301645;

  /// from: static public final int sym_action_chat
  static const sym_action_chat = 17301646;

  /// from: static public final int sym_action_email
  static const sym_action_email = 17301647;

  /// from: static public final int sym_call_incoming
  static const sym_call_incoming = 17301648;

  /// from: static public final int sym_call_missed
  static const sym_call_missed = 17301649;

  /// from: static public final int sym_call_outgoing
  static const sym_call_outgoing = 17301650;

  /// from: static public final int sym_contact_card
  static const sym_contact_card = 17301652;

  /// from: static public final int sym_def_app_icon
  static const sym_def_app_icon = 17301651;

  /// from: static public final int title_bar
  static const title_bar = 17301653;

  /// from: static public final int title_bar_tall
  ///
  /// Drawable to use as a background for a taller version of the titlebar
  static const title_bar_tall = 17301670;

  /// from: static public final int toast_frame
  static const toast_frame = 17301654;

  /// from: static public final int zoom_plate
  static const zoom_plate = 17301655;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_drawable()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$dimen
class R_dimen extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$dimen");
  R_dimen.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int app_icon_size
  ///
  /// The standard size (both width and height) of an application icon that
  /// will be displayed in the app launcher and elsewhere.
  static const app_icon_size = 17104896;

  /// from: static public final int dialog_min_width_major
  ///
  /// The platform's desired minimum size for a dialog's width when it
  /// is along the major axis (that is the screen is landscape).  This may
  /// be either a fraction or a dimension.
  static const dialog_min_width_major = 17104899;

  /// from: static public final int dialog_min_width_minor
  ///
  /// The platform's desired minimum size for a dialog's width when it
  /// is along the minor axis (that is the screen is portrait).  This may
  /// be either a fraction or a dimension.
  static const dialog_min_width_minor = 17104900;

  /// from: static public final int notification_large_icon_height
  ///
  /// The width of the big icons in notifications.
  static const notification_large_icon_height = 17104902;

  /// from: static public final int notification_large_icon_width
  ///
  /// The width of the big icons in notifications.
  static const notification_large_icon_width = 17104901;

  /// from: static public final int thumbnail_height
  ///
  /// The height that is used when creating thumbnails of applications.
  /// The height that is used when creating thumbnails of applications.
  /// The height that is used when creating thumbnails of applications.
  static const thumbnail_height = 17104897;

  /// from: static public final int thumbnail_width
  ///
  /// The width that is used when creating thumbnails of applications.
  /// The width that is used when creating thumbnails of applications.
  /// The width that is used when creating thumbnails of applications.
  static const thumbnail_width = 17104898;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_dimen()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$color
class R_color extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$color");
  R_color.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int background_dark
  ///
  /// Equivalent to 0xff000000
  /// Equivalent to 0xff000000
  static const background_dark = 17170446;

  /// from: static public final int background_light
  ///
  /// Equivalent to 0xffffffff
  /// Equivalent to 0xffffffff
  static const background_light = 17170447;

  /// from: static public final int black
  ///
  /// The color black, equivalent to 0xff000000
  static const black = 17170444;

  /// from: static public final int darker_gray
  ///
  /// Equivalent to 0xffaaaaaa
  /// A dark gray, equivalent to 0xffaaaaaa
  static const darker_gray = 17170432;

  /// from: static public final int holo_blue_bright
  ///
  /// A really bright Holo shade of blue. Equivalent to \#ff00ddff.
  static const holo_blue_bright = 17170459;

  /// from: static public final int holo_blue_dark
  ///
  /// A dark Holo shade of blue. Equivalent to \#ff0099cc
  static const holo_blue_dark = 17170451;

  /// from: static public final int holo_blue_light
  ///
  /// A light Holo shade of blue. Equivalent to \#ff33b5e5.
  static const holo_blue_light = 17170450;

  /// from: static public final int holo_green_dark
  ///
  /// A dark Holo shade of green. Equivalent to \#ff669900
  static const holo_green_dark = 17170453;

  /// from: static public final int holo_green_light
  ///
  /// A light Holo shade of green. Equivalent to \#ff99cc00.
  static const holo_green_light = 17170452;

  /// from: static public final int holo_orange_dark
  ///
  /// A dark Holo shade of orange. Equivalent to ffff8800.
  static const holo_orange_dark = 17170457;

  /// from: static public final int holo_orange_light
  ///
  /// A light Holo shade of orange. Equivalent to \#ffffbb33.
  static const holo_orange_light = 17170456;

  /// from: static public final int holo_purple
  ///
  /// A Holo shade of purple. Equivalent to \#ffaa66cc
  static const holo_purple = 17170458;

  /// from: static public final int holo_red_dark
  ///
  /// A dark Holo shade of red. Equivalent to \#ffcc0000
  static const holo_red_dark = 17170455;

  /// from: static public final int holo_red_light
  ///
  /// A light Holo shade of red. Equivalent to \#ffff4444. <
  static const holo_red_light = 17170454;

  /// from: static public final int primary_text_dark
  ///
  /// {@deprecated Use a text color from your theme instead.}
  static const primary_text_dark = 17170433;

  /// from: static public final int primary_text_dark_nodisable
  ///
  /// {@deprecated Use a text color from your theme instead.}
  static const primary_text_dark_nodisable = 17170434;

  /// from: static public final int primary_text_light
  ///
  /// {@deprecated Use a text color from your theme instead.}
  static const primary_text_light = 17170435;

  /// from: static public final int primary_text_light_nodisable
  ///
  /// {@deprecated Use a text color from your theme instead.}
  static const primary_text_light_nodisable = 17170436;

  /// from: static public final int secondary_text_dark
  ///
  /// {@deprecated Use a text color from your theme instead.}
  static const secondary_text_dark = 17170437;

  /// from: static public final int secondary_text_dark_nodisable
  ///
  /// {@deprecated Use a text color from your theme instead.}
  static const secondary_text_dark_nodisable = 17170438;

  /// from: static public final int secondary_text_light
  ///
  /// {@deprecated Use a text color from your theme instead.}
  static const secondary_text_light = 17170439;

  /// from: static public final int secondary_text_light_nodisable
  ///
  /// {@deprecated Use a text color from your theme instead.}
  static const secondary_text_light_nodisable = 17170440;

  /// from: static public final int tab_indicator_text
  ///
  /// Equivalent to 0xff808080
  static const tab_indicator_text = 17170441;

  /// from: static public final int tertiary_text_dark
  ///
  /// {@deprecated Use a text color from your theme instead.}
  static const tertiary_text_dark = 17170448;

  /// from: static public final int tertiary_text_light
  ///
  /// {@deprecated Use a text color from your theme instead.}
  static const tertiary_text_light = 17170449;

  /// from: static public final int transparent
  ///
  /// Fully transparent, equivalent to 0x00000000
  static const transparent = 17170445;

  /// from: static public final int white
  ///
  /// The color white, equivalent to 0xffffffff
  static const white = 17170443;

  /// from: static public final int widget_edittext_dark
  ///
  /// Equivalent to 0xff000000
  static const widget_edittext_dark = 17170442;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_color()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$bool
class R_bool extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$bool");
  R_bool.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_bool()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$attr
class R_attr extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$attr");
  R_attr.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int absListViewStyle
  ///
  /// Default AbsListView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const absListViewStyle = 16842858;

  /// from: static public final int accessibilityEventTypes
  ///
  /// The event types this service would like to receive as specified in
  /// android.view.accessibility.AccessibilityEvent. This setting
  /// can be changed at runtime by calling
  /// android.accessibilityservice.AccessibilityService\#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo) android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo).
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>typeAllMask</td><td>ffffffff</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPES_ALL_MASK i.e. all events.</td></tr>
  /// <tr><td>typeAnnouncement</td><td>4000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_ANNOUNCEMENT events.</td></tr>
  /// <tr><td>typeAssistReadingContext</td><td>1000000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_ASSIST_READING_CONTEXT events.</td></tr>
  /// <tr><td>typeContextClicked</td><td>800000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_CONTEXT_CLICKED events.</td></tr>
  /// <tr><td>typeGestureDetectionEnd</td><td>80000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_GESTURE_DETECTION_END events.</td></tr>
  /// <tr><td>typeGestureDetectionStart</td><td>40000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_GESTURE_DETECTION_START events.</td></tr>
  /// <tr><td>typeNotificationStateChanged</td><td>40</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_NOTIFICATION_STATE_CHANGED events.</td></tr>
  /// <tr><td>typeTouchExplorationGestureEnd</td><td>400</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_EXPLORATION_GESTURE_END events.</td></tr>
  /// <tr><td>typeTouchExplorationGestureStart</td><td>200</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_EXPLORATION_GESTURE_START events.</td></tr>
  /// <tr><td>typeTouchInteractionEnd</td><td>200000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_INTERACTION_END events.</td></tr>
  /// <tr><td>typeTouchInteractionStart</td><td>100000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_INTERACTION_START events.</td></tr>
  /// <tr><td>typeViewAccessibilityFocusCleared</td><td>10000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED events.</td></tr>
  /// <tr><td>typeViewAccessibilityFocused</td><td>8000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_ACCESSIBILITY_FOCUSED events.</td></tr>
  /// <tr><td>typeViewClicked</td><td>1</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_CLICKED events.</td></tr>
  /// <tr><td>typeViewFocused</td><td>8</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_FOCUSED events.</td></tr>
  /// <tr><td>typeViewHoverEnter</td><td>80</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_HOVER_ENTER events.</td></tr>
  /// <tr><td>typeViewHoverExit</td><td>100</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_HOVER_EXIT events.</td></tr>
  /// <tr><td>typeViewLongClicked</td><td>2</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_LONG_CLICKED events.</td></tr>
  /// <tr><td>typeViewScrolled</td><td>1000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_SCROLLED events.</td></tr>
  /// <tr><td>typeViewSelected</td><td>4</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_SELECTED events.</td></tr>
  /// <tr><td>typeViewTextChanged</td><td>10</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_CHANGED events.</td></tr>
  /// <tr><td>typeViewTextSelectionChanged</td><td>2000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_SELECTION_CHANGED events.</td></tr>
  /// <tr><td>typeViewTextTraversedAtMovementGranularity</td><td>20000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY events.</td></tr>
  /// <tr><td>typeWindowContentChanged</td><td>800</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_WINDOW_CONTENT_CHANGED events.</td></tr>
  /// <tr><td>typeWindowStateChanged</td><td>20</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_WINDOW_STATE_CHANGED events.</td></tr>
  /// <tr><td>typeWindowsChanged</td><td>400000</td><td>Receives android.view.accessibility.AccessibilityEvent\#TYPE_WINDOWS_CHANGED events.</td></tr>
  /// </table>
  static const accessibilityEventTypes = 16843648;

  /// from: static public final int accessibilityFeedbackType
  ///
  /// The feedback types this service provides as specified in
  /// android.accessibilityservice.AccessibilityServiceInfo. This setting
  /// can be changed at runtime by calling
  /// android.accessibilityservice.AccessibilityService\#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo) android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo).
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>feedbackAllMask</td><td>ffffffff</td><td>Provides android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_ALL_MASK feedback.</td></tr>
  /// <tr><td>feedbackAudible</td><td>4</td><td>Provides android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_AUDIBLE feedback.</td></tr>
  /// <tr><td>feedbackGeneric</td><td>10</td><td>Provides android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_GENERIC feedback.</td></tr>
  /// <tr><td>feedbackHaptic</td><td>2</td><td>Provides android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_HAPTIC feedback.</td></tr>
  /// <tr><td>feedbackSpoken</td><td>1</td><td>Provides android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_SPOKEN feedback.</td></tr>
  /// <tr><td>feedbackVisual</td><td>8</td><td>Provides android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_VISUAL feedback.</td></tr>
  /// </table>
  static const accessibilityFeedbackType = 16843650;

  /// from: static public final int accessibilityFlags
  ///
  /// Additional flags as specified in
  /// android.accessibilityservice.AccessibilityServiceInfo.
  /// This setting can be changed at runtime by calling
  /// android.accessibilityservice.AccessibilityService\#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo) android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo).
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>flagDefault</td><td>1</td><td>Has flag android.accessibilityservice.AccessibilityServiceInfo\#DEFAULT.</td></tr>
  /// <tr><td>flagEnableAccessibilityVolume</td><td>80</td><td>Has flag android.accessibilityservice.AccessibilityServiceInfo\#FLAG_ENABLE_ACCESSIBILITY_VOLUME.</td></tr>
  /// <tr><td>flagIncludeNotImportantViews</td><td>2</td><td>Has flag android.accessibilityservice.AccessibilityServiceInfo\#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS.</td></tr>
  /// <tr><td>flagReportViewIds</td><td>10</td><td>Has flag android.accessibilityservice.AccessibilityServiceInfo\#FLAG_REPORT_VIEW_IDS.</td></tr>
  /// <tr><td>flagRequestAccessibilityButton</td><td>100</td><td>Has flag android.accessibilityservice.AccessibilityServiceInfo\#FLAG_REQUEST_ACCESSIBILITY_BUTTON.</td></tr>
  /// <tr><td>flagRequestEnhancedWebAccessibility</td><td>8</td><td>Has flag android.accessibilityservice.AccessibilityServiceInfo\#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY.
  /// Not used by the framework.</td></tr>
  /// <tr><td>flagRequestFilterKeyEvents</td><td>20</td><td>Has flag android.accessibilityservice.AccessibilityServiceInfo\#FLAG_REQUEST_FILTER_KEY_EVENTS.</td></tr>
  /// <tr><td>flagRequestFingerprintGestures</td><td>200</td><td>Has flag android.accessibilityservice.AccessibilityServiceInfo\#FLAG_REQUEST_FINGERPRINT_GESTURES.</td></tr>
  /// <tr><td>flagRequestTouchExplorationMode</td><td>4</td><td>Has flag android.accessibilityservice.AccessibilityServiceInfo\#FLAG_REQUEST_TOUCH_EXPLORATION_MODE.</td></tr>
  /// <tr><td>flagRetrieveInteractiveWindows</td><td>40</td><td>Has flag android.accessibilityservice.AccessibilityServiceInfo\#FLAG_RETRIEVE_INTERACTIVE_WINDOWS.</td></tr>
  /// </table>
  static const accessibilityFlags = 16843652;

  /// from: static public final int accessibilityHeading
  ///
  /// Whether or not this view is a heading for accessibility purposes.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const accessibilityHeading = 16844160;

  /// from: static public final int accessibilityLiveRegion
  ///
  /// Indicates to accessibility services whether the user should be notified when
  /// this view changes.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>assertive</td><td>2</td><td>Accessibility services should interrupt ongoing speech to immediately
  /// announce changes to this view.</td></tr>
  /// <tr><td>none</td><td>0</td><td>Accessibility services should not announce changes to this view.</td></tr>
  /// <tr><td>polite</td><td>1</td><td>Accessibility services should announce changes to this view.</td></tr>
  /// </table>
  static const accessibilityLiveRegion = 16843758;

  /// from: static public final int accessibilityPaneTitle
  ///
  /// The title this view should present to accessibility as a pane title.
  /// See android.view.View\#setAccessibilityPaneTitle(CharSequence)
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const accessibilityPaneTitle = 16844156;

  /// from: static public final int accessibilityTraversalAfter
  ///
  /// Sets the id of a view after which this one is visited in accessibility traversal.
  /// A screen-reader must visit the content of the other view before the content of
  /// this one.
  /// {@see android.view.View\#setAccessibilityTraversalAfter(int)}
  /// May be an integer value, such as "<code>100</code>".
  static const accessibilityTraversalAfter = 16843986;

  /// from: static public final int accessibilityTraversalBefore
  ///
  /// Sets the id of a view before which this one is visited in accessibility traversal.
  /// A screen-reader must visit the content of this view before the content of the one
  /// it precedes.
  /// {@see android.view.View\#setAccessibilityTraversalBefore(int)}
  /// May be an integer value, such as "<code>100</code>".
  static const accessibilityTraversalBefore = 16843985;

  /// from: static public final int accountPreferences
  ///
  /// A preferences.xml file for authenticator-specific settings.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const accountPreferences = 16843423;

  /// from: static public final int accountType
  ///
  /// The account type this authenticator handles.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const accountType = 16843407;

  /// from: static public final int action
  ///
  /// The action name to assign to the Intent, as per
  /// android.content.Intent\#setAction Intent.setAction().
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const action = 16842797;

  /// from: static public final int actionBarDivider
  ///
  /// Custom divider drawable to use for elements in the action bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionBarDivider = 16843675;

  /// from: static public final int actionBarItemBackground
  ///
  /// Custom item state list drawable background for action bar items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionBarItemBackground = 16843676;

  /// from: static public final int actionBarPopupTheme
  ///
  /// Reference to a theme that should be used to inflate popups
  /// shown by widgets in the action bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionBarPopupTheme = 16843917;

  /// from: static public final int actionBarSize
  ///
  /// Size of the Action Bar, including the contextual
  /// bar used to present Action Modes.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>wrap_content</td><td>0</td><td></td></tr>
  /// </table>
  static const actionBarSize = 16843499;

  /// from: static public final int actionBarSplitStyle
  ///
  /// Reference to a style for the split Action Bar. This style
  /// controls the split component that holds the menu/action
  /// buttons. actionBarStyle is still used for the primary
  /// bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionBarSplitStyle = 16843656;

  /// from: static public final int actionBarStyle
  ///
  /// Reference to a style for the Action Bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionBarStyle = 16843470;

  /// from: static public final int actionBarTabBarStyle
  ///
  /// Reference to a style for the Action Bar Tab Bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionBarTabBarStyle = 16843508;

  /// from: static public final int actionBarTabStyle
  ///
  /// Default style for tabs within an action bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionBarTabStyle = 16843507;

  /// from: static public final int actionBarTabTextStyle
  ///
  /// Reference to a style for the Action Bar Tab text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionBarTabTextStyle = 16843509;

  /// from: static public final int actionBarTheme
  ///
  /// Reference to a theme that should be used to inflate the
  /// action bar. This will be inherited by any widget inflated
  /// into the action bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionBarTheme = 16843825;

  /// from: static public final int actionBarWidgetTheme
  ///
  /// Reference to a theme that should be used to inflate widgets
  /// and layouts destined for the action bar. Most of the time
  /// this will be a reference to the current theme, but when
  /// the action bar has a significantly different contrast
  /// profile than the rest of the activity the difference
  /// can become important. If this is set to @null the current
  /// theme will be used.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionBarWidgetTheme = 16843671;

  /// from: static public final int actionButtonStyle
  ///
  /// Default action button style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionButtonStyle = 16843480;

  /// from: static public final int actionDropDownStyle
  ///
  /// Default ActionBar dropdown style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionDropDownStyle = 16843479;

  /// from: static public final int actionLayout
  ///
  /// An optional layout to be used as an action view.
  /// See android.view.MenuItem\#setActionView(android.view.View)
  /// for more info.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionLayout = 16843515;

  /// from: static public final int actionMenuTextAppearance
  ///
  /// TextAppearance style that will be applied to text that
  /// appears within action menu items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionMenuTextAppearance = 16843616;

  /// from: static public final int actionMenuTextColor
  ///
  /// Color for text that appears within action menu items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const actionMenuTextColor = 16843617;

  /// from: static public final int actionModeBackground
  ///
  /// Background drawable to use for action mode UI.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModeBackground = 16843483;

  /// from: static public final int actionModeCloseButtonStyle
  ///
  /// Reference to a style for the Action Mode close button.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModeCloseButtonStyle = 16843511;

  /// from: static public final int actionModeCloseDrawable
  ///
  /// Drawable to use for the close action mode button.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModeCloseDrawable = 16843484;

  /// from: static public final int actionModeCopyDrawable
  ///
  /// Drawable to use for the Copy action button in Contextual Action Bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModeCopyDrawable = 16843538;

  /// from: static public final int actionModeCutDrawable
  ///
  /// Drawable to use for the Cut action button in Contextual Action Bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModeCutDrawable = 16843537;

  /// from: static public final int actionModeFindDrawable
  ///
  /// Drawable to use for the Find action button in WebView selection action modes.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModeFindDrawable = 16843898;

  /// from: static public final int actionModePasteDrawable
  ///
  /// Drawable to use for the Paste action button in Contextual Action Bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModePasteDrawable = 16843539;

  /// from: static public final int actionModeSelectAllDrawable
  ///
  /// Drawable to use for the Select all action button in Contextual Action Bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModeSelectAllDrawable = 16843646;

  /// from: static public final int actionModeShareDrawable
  ///
  /// Drawable to use for the Share action button in WebView selection action modes.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModeShareDrawable = 16843897;

  /// from: static public final int actionModeSplitBackground
  ///
  /// Background drawable to use for action mode UI in the lower split bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModeSplitBackground = 16843677;

  /// from: static public final int actionModeStyle
  ///
  /// Reference to a style for the Action Mode.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModeStyle = 16843668;

  /// from: static public final int actionModeWebSearchDrawable
  ///
  /// Drawable to use for the Web Search action button in WebView selection action modes.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionModeWebSearchDrawable = 16843899;

  /// from: static public final int actionOverflowButtonStyle
  ///
  /// Reference to a style for Action Bar overflow buttons.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionOverflowButtonStyle = 16843510;

  /// from: static public final int actionOverflowMenuStyle
  ///
  /// Reference to a style for the Action Bar menu.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const actionOverflowMenuStyle = 16843844;

  /// from: static public final int actionProviderClass
  ///
  /// The name of an optional ActionProvider class to instantiate an action view
  /// and perform operations such as default action for that menu item.
  /// See android.view.MenuItem\#setActionProvider(android.view.ActionProvider)
  /// for more info.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const actionProviderClass = 16843657;

  /// from: static public final int actionViewClass
  ///
  /// The name of an optional View class to instantiate and use as an
  /// action view. See android.view.MenuItem\#setActionView(android.view.View)
  /// for more info.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const actionViewClass = 16843516;

  /// from: static public final int activatedBackgroundIndicator
  ///
  /// Drawable used as a background for activated items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const activatedBackgroundIndicator = 16843517;

  /// from: static public final int activityCloseEnterAnimation
  ///
  /// When closing the current activity, this is the animation that is
  /// run on the next activity (which is entering the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const activityCloseEnterAnimation = 16842938;

  /// from: static public final int activityCloseExitAnimation
  ///
  /// When closing the current activity, this is the animation that is
  /// run on the current activity (which is exiting the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const activityCloseExitAnimation = 16842939;

  /// from: static public final int activityOpenEnterAnimation
  ///
  /// When opening a new activity, this is the animation that is
  /// run on the next activity (which is entering the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const activityOpenEnterAnimation = 16842936;

  /// from: static public final int activityOpenExitAnimation
  ///
  /// When opening a new activity, this is the animation that is
  /// run on the previous activity (which is exiting the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const activityOpenExitAnimation = 16842937;

  /// from: static public final int addPrintersActivity
  ///
  /// Fully qualified class name of an activity that allows the user to manually
  /// add printers to this print service.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const addPrintersActivity = 16843750;

  /// from: static public final int addStatesFromChildren
  ///
  /// Sets whether this ViewGroup's drawable states also include
  /// its children's drawable states.  This is used, for example, to
  /// make a group appear to be focused when its child EditText or button
  /// is focused.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const addStatesFromChildren = 16842992;

  /// from: static public final int adjustViewBounds
  ///
  /// Set this to true if you want the ImageView to adjust its bounds
  /// to preserve the aspect ratio of its drawable.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const adjustViewBounds = 16843038;

  /// from: static public final int advancedPrintOptionsActivity
  ///
  /// Fully qualified class name of an activity with advanced print options
  /// specific to this print service.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const advancedPrintOptionsActivity = 16843761;

  /// from: static public final int alertDialogIcon
  ///
  /// Icon drawable to use for alerts.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const alertDialogIcon = 16843605;

  /// from: static public final int alertDialogStyle
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const alertDialogStyle = 16842845;

  /// from: static public final int alertDialogTheme
  ///
  /// Theme to use for alert dialogs spawned from this theme.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const alertDialogTheme = 16843529;

  /// from: static public final int alignmentMode
  ///
  /// Alignment constants.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>alignBounds</td><td>0</td><td>Align the bounds of the children.
  /// See android.widget.GridLayout\#ALIGN_BOUNDS.</td></tr>
  /// <tr><td>alignMargins</td><td>1</td><td>Align the margins of the children.
  /// See android.widget.GridLayout\#ALIGN_MARGINS.</td></tr>
  /// </table>
  static const alignmentMode = 16843642;

  /// from: static public final int allContactsName
  ///
  /// Resource representing the term "All Contacts" (for example, "All Friends" or
  /// "All connections"). Optional (Default is "All Contacts").
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const allContactsName = 16843468;

  /// from: static public final int allowBackup
  ///
  /// Whether to allow the application to participate in the backup
  /// and restore infrastructure.  If this attribute is set to <code>false</code>,
  /// no backup or restore of the application will ever be performed, even by a
  /// full-system backup that would otherwise cause all application data to be saved
  /// via adb.  The default value of this attribute is <code>true</code>.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const allowBackup = 16843392;

  /// from: static public final int allowClearUserData
  ///
  /// Option to let applications specify that user data can/cannot be
  /// cleared. This flag is turned on by default.
  /// _This attribute is usable only by applications
  /// included in the system image. Third-party apps cannot use it._
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const allowClearUserData = 16842757;

  /// from: static public final int allowEmbedded
  ///
  /// Indicate that the activity can be launched as the embedded child of another
  /// activity. Particularly in the case where the child lives in a container
  /// such as a Display owned by another activity.
  /// The default value of this attribute is <code>false</code>.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const allowEmbedded = 16843765;

  /// from: static public final int allowParallelSyncs
  ///
  /// Set to true to tell the SyncManager that this SyncAdapter supports
  /// multiple simultaneous syncs for the same account type and authority.
  /// Otherwise the SyncManager will be sure not to issue a start sync request
  /// to this SyncAdapter if the SyncAdapter is already syncing another account.
  /// Defaults to false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const allowParallelSyncs = 16843570;

  /// from: static public final int allowSingleTap
  ///
  /// Indicates whether the drawer can be opened/closed by a single tap
  /// on the handle.  (If false, the user must drag or fling, or click
  /// using the trackball, to open/close the drawer.)  Default is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const allowSingleTap = 16843353;

  /// from: static public final int allowTaskReparenting
  ///
  /// Specify that an activity can be moved out of a task it is in to
  /// the task it has an affinity for when appropriate.  Use with the
  /// application tag (to supply a default for all activities in the
  /// application), or with an activity tag (to supply a specific
  /// setting for that component).
  /// Normally when an application is started, it is associated with
  /// the task of the activity that started it and stays there for its
  /// entire lifetime.  You can use the allowTaskReparenting feature to force an
  /// activity to be re-parented to a different task when the task it is
  /// in goes to the background.  Typically this is used to cause the
  /// activities of an application to move back to the main task associated
  /// with that application.  The activity is re-parented to the task
  /// with the same android.R.attr\#taskAffinity as it has.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const allowTaskReparenting = 16843268;

  /// from: static public final int allowUndo
  ///
  /// Whether undo should be allowed for editable text. Defaults to true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const allowUndo = 16843999;

  /// from: static public final int alpha
  ///
  /// alpha property of the view, as a value between 0 (completely transparent) and 1
  /// (completely opaque).
  /// May be a floating point value, such as "<code>1.2</code>".
  static const alpha = 16843551;

  /// from: static public final int alphabeticModifiers
  ///
  /// The alphabetic modifier key. This is the modifier when using a keyboard
  /// with alphabetic keys. The values should be kept in sync with KeyEvent
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>ALT</td><td>2</td><td></td></tr>
  /// <tr><td>CTRL</td><td>1000</td><td></td></tr>
  /// <tr><td>FUNCTION</td><td>8</td><td></td></tr>
  /// <tr><td>META</td><td>10000</td><td></td></tr>
  /// <tr><td>SHIFT</td><td>1</td><td></td></tr>
  /// <tr><td>SYM</td><td>4</td><td></td></tr>
  /// </table>
  static const alphabeticModifiers = 16844110;

  /// from: static public final int alphabeticShortcut
  ///
  /// The alphabetic shortcut key.  This is the shortcut when using a keyboard
  /// with alphabetic keys.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const alphabeticShortcut = 16843235;

  /// from: static public final int alwaysDrawnWithCache
  ///
  /// Defines whether the ViewGroup should always draw its children using their
  /// drawing cache or not. The default value is true.
  /// Deprecated: The view drawing cache was largely made obsolete with the introduction of
  /// hardware-accelerated rendering in API 11.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const alwaysDrawnWithCache = 16842991;

  /// from: static public final int alwaysRetainTaskState
  ///
  /// Specify whether an acitivty's task state should always be maintained
  /// by the system, or if it is allowed to reset the task to its initial
  /// state in certain situations.
  /// Normally the system will reset a task (remove all activities from
  /// the stack and reset the root activity) in certain situations when
  /// the user re-selects that task from the home screen.  Typically this
  /// will be done if the user hasn't visited that task for a certain
  /// amount of time, such as 30 minutes.
  /// By setting this attribute, the user will always return to your
  /// task in its last state, regardless of how they get there.  This is
  /// useful, for example, in an application like the web browser where there
  /// is a lot of state (such as multiple open tabs) that the application
  /// would not like to lose.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const alwaysRetainTaskState = 16843267;

  /// from: static public final int amPmBackgroundColor
  ///
  /// The background color state list for the AM/PM selectors.
  /// {@deprecated Use headerBackground instead.}
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const amPmBackgroundColor = 16843941;

  /// from: static public final int amPmTextColor
  ///
  /// The color for the AM/PM selectors.
  /// {@deprecated Use headerTextColor instead.}
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const amPmTextColor = 16843940;

  /// from: static public final int ambientShadowAlpha
  ///
  /// Alpha value of the ambient shadow projected by elevated views, between 0 and 1.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const ambientShadowAlpha = 16843966;

  /// from: static public final int angle
  ///
  /// Angle of the gradient, used only with linear gradient. Must be a multiple of 45 in the
  /// range [0, 315].
  /// May be a floating point value, such as "<code>1.2</code>".
  static const angle = 16843168;

  /// from: static public final int animateFirstView
  ///
  /// Defines whether to animate the current View when the ViewAnimation
  /// is first displayed.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const animateFirstView = 16843477;

  /// from: static public final int animateLayoutChanges
  ///
  /// Defines whether changes in layout (caused by adding and removing items) should
  /// cause a LayoutTransition to run. When this flag is set to true, a default
  /// LayoutTransition object will be set on the ViewGroup container and default
  /// animations will run when these layout changes occur.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const animateLayoutChanges = 16843506;

  /// from: static public final int animateOnClick
  ///
  /// Indicates whether the drawer should be opened/closed with an animation
  /// when the user clicks the handle. Default is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const animateOnClick = 16843356;

  /// from: static public final int animation
  ///
  /// Animation to use on each child.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const animation = 16843213;

  /// from: static public final int animationCache
  ///
  /// Defines whether layout animations should create a drawing cache for their
  /// children. Enabling the animation cache consumes more memory and requires
  /// a longer initialization but provides better performance. The animation
  /// cache is enabled by default.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const animationCache = 16842989;

  /// from: static public final int animationDuration
  ///
  /// Sets how long a transition animation should run (in milliseconds)
  /// when layout has changed.  Only relevant if animation is turned on.
  /// May be an integer value, such as "<code>100</code>".
  static const animationDuration = 16843026;

  /// from: static public final int animationOrder
  ///
  /// The order in which the animations will be started.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>normal</td><td>0</td><td>Animations are started in the natural order.</td></tr>
  /// <tr><td>random</td><td>2</td><td>Animations are started randomly.</td></tr>
  /// <tr><td>reverse</td><td>1</td><td>Animations are started in the reverse order.</td></tr>
  /// </table>
  static const animationOrder = 16843214;

  /// from: static public final int animationResolution
  ///
  /// @deprecated Not used by the framework.
  /// Timeout between frames of animation in milliseconds.
  /// {@deprecated Not used by the framework}.
  /// May be an integer value, such as "<code>100</code>".
  static const animationResolution = 16843546;

  /// from: static public final int antialias
  ///
  /// Enables or disables antialiasing. Antialiasing can be used to smooth the
  /// edges of a bitmap when rotated. Default value is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const antialias = 16843034;

  /// from: static public final int anyDensity
  ///
  /// Indicates whether the application can accommodate any screen
  /// density.  Older applications are assumed to not be able to,
  /// new ones able to.  You can explicitly supply your abilities
  /// here.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const anyDensity = 16843372;

  /// from: static public final int apduServiceBanner
  ///
  /// A drawable that can be rendered in Android's system UI for representing
  /// the service.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const apduServiceBanner = 16843757;

  /// from: static public final int apiKey
  ///
  /// Value is a string that specifies the Maps API Key to use.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const apiKey = 16843281;

  /// from: static public final int appCategory
  ///
  /// Declare the category of this app. Categories are used to cluster multiple apps
  /// together into meaningful groups, such as when summarizing battery, network, or
  /// disk usage. Apps should only define this value when they fit well into one of
  /// the specific categories.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>audio</td><td>1</td><td>Apps which primarily work with audio or music, such as music players.</td></tr>
  /// <tr><td>game</td><td>0</td><td>Apps which are primarily games.</td></tr>
  /// <tr><td>image</td><td>3</td><td>Apps which primarily work with images or photos, such as camera or gallery apps.</td></tr>
  /// <tr><td>maps</td><td>6</td><td>Apps which are primarily maps apps, such as navigation apps.</td></tr>
  /// <tr><td>news</td><td>5</td><td>Apps which are primarily news apps, such as newspapers, magazines, or sports apps.</td></tr>
  /// <tr><td>productivity</td><td>7</td><td>Apps which are primarily productivity apps, such as cloud storage or workplace apps.</td></tr>
  /// <tr><td>social</td><td>4</td><td>Apps which are primarily social apps, such as messaging, communication, email, or social network apps.</td></tr>
  /// <tr><td>video</td><td>2</td><td>Apps which primarily work with video or movies, such as streaming video apps.</td></tr>
  /// </table>
  static const appCategory = 16844101;

  /// from: static public final int appComponentFactory
  ///
  /// The (optional) fully-qualified name for a subclass of
  /// android.app.AppComponentFactory that the system uses to instantiate
  /// every other manifest defined class. Most applications
  /// don't need this attribute. If it's not specified, the system
  /// instantiates items without it.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const appComponentFactory = 16844154;

  /// from: static public final int author
  ///
  /// Name of the author and/or source/collection of this component, for example,
  /// Art Collection, Picasso.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const author = 16843444;

  /// from: static public final int authorities
  ///
  /// Specify the authorities under which this content provider can be
  /// found.  Multiple authorities may be supplied by separating them
  /// with a semicolon.  Authority names should use a Java-style naming
  /// convention (such as <code>com.google.provider.MyProvider</code>)
  /// in order to avoid conflicts.  Typically this name is the same
  /// as the class implementation describing the provider's data structure.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const authorities = 16842776;

  /// from: static public final int autoAdvanceViewId
  ///
  /// The view id of the AppWidget subview which should be auto-advanced.
  /// by the widget's host.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const autoAdvanceViewId = 16843535;

  /// from: static public final int autoCompleteTextViewStyle
  ///
  /// Default AutoCompleteTextView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const autoCompleteTextViewStyle = 16842859;

  /// from: static public final int autoLink
  ///
  /// Controls whether links such as urls and email addresses are
  /// automatically found and converted to clickable links.  The default
  /// value is "none", disabling this feature.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>all</td><td>f</td><td>Match all patterns (equivalent to web|email|phone|map).</td></tr>
  /// <tr><td>email</td><td>2</td><td>Match email addresses.</td></tr>
  /// <tr><td>map</td><td>8</td><td>Match map addresses.</td></tr>
  /// <tr><td>none</td><td>0</td><td>Match no patterns (default).</td></tr>
  /// <tr><td>phone</td><td>4</td><td>Match phone numbers.</td></tr>
  /// <tr><td>web</td><td>1</td><td>Match Web URLs.</td></tr>
  /// </table>
  static const autoLink = 16842928;

  /// from: static public final int autoMirrored
  ///
  /// Indicates if the drawable needs to be mirrored when its layout direction is
  /// RTL (right-to-left).  See
  /// android.graphics.drawable.Drawable\#setAutoMirrored.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const autoMirrored = 16843754;

  /// from: static public final int autoRemoveFromRecents
  ///
  /// Tasks launched by activities with this attribute will remain in the recent tasks
  /// list until the last activity in the task is completed.  When that happens the task
  /// will be automatically removed from the recent tasks list.  This overrides the caller's
  /// use of android.content.Intent\#FLAG_ACTIVITY_RETAIN_IN_RECENTS Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const autoRemoveFromRecents = 16843847;

  /// from: static public final int autoSizeMaxTextSize
  ///
  /// The maximum text size constraint to be used when auto-sizing text.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const autoSizeMaxTextSize = 16844102;

  /// from: static public final int autoSizeMinTextSize
  ///
  /// The minimum text size constraint to be used when auto-sizing text.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const autoSizeMinTextSize = 16844088;

  /// from: static public final int autoSizePresetSizes
  ///
  /// Resource array of dimensions to be used in conjunction with
  /// <code>autoSizeTextType</code> set to <code>uniform</code>. Overrides
  /// <code>autoSizeStepGranularity</code> if set.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  /// May be an integer value, such as "<code>100</code>".
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const autoSizePresetSizes = 16844087;

  /// from: static public final int autoSizeStepGranularity
  ///
  /// Specify the auto-size step size if <code>autoSizeTextType</code> is set to
  /// <code>uniform</code>. The default is 1px. Overwrites
  /// <code>autoSizePresetSizes</code> if set.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const autoSizeStepGranularity = 16844086;

  /// from: static public final int autoSizeTextType
  ///
  /// Specify the type of auto-size. Note that this feature is not supported by EditText,
  /// works only for TextView.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>none</td><td>0</td><td>No auto-sizing (default).</td></tr>
  /// <tr><td>uniform</td><td>1</td><td>Uniform horizontal and vertical text size scaling to fit within the
  /// container.</td></tr>
  /// </table>
  static const autoSizeTextType = 16844085;

  /// from: static public final int autoStart
  ///
  /// When true, automatically start animating.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const autoStart = 16843445;

  /// from: static public final int autoText
  ///
  /// If set, specifies that this TextView has a textual input method
  /// and automatically corrects some common spelling errors.
  /// The default is "false".
  /// {@deprecated Use inputType instead.}
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const autoText = 16843114;

  /// from: static public final int autoUrlDetect
  ///
  /// If provided and <code>true</code>, URLs entered in the search dialog while searching
  /// within this activity would be detected and treated as URLs (show a 'go' button in the
  /// keyboard and invoke the browser directly when user launches the URL instead of passing
  /// the URL to the activity). If set to <code>false</code> any URLs entered are treated as
  /// normal query text.
  /// The default value is <code>false</code>. <i>Optional attribute.</i>.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const autoUrlDetect = 16843404;

  /// from: static public final int autoVerify
  ///
  /// Specify whether an activity intent filter will need to be verified thru its set
  /// of data URIs. This will only be used when the Intent's action is set to
  /// android.content.Intent\#ACTION_VIEW Intent.ACTION_VIEW and the Intent's category is
  /// set to android.content.Intent\#CATEGORY_BROWSABLE Intent.CATEGORY_BROWSABLE and the
  /// intern filter data scheme is set to "http" or "https". When set to true, the intent filter
  /// will need to use its data tag for getting the URIs to verify with.
  /// For each URI, an HTTPS network request will be done to <code>/.well-known/statements.json</code>
  /// host to verify that the web site is okay with the app intercepting the URI.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const autoVerify = 16844014;

  /// from: static public final int autofillHints
  ///
  /// Describes the content of a view so that a autofill service can fill in the appropriate
  /// data. Multiple hints can be combined in a comma separated list or an array of strings
  /// to mean e.g. emailAddress or postalAddress.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const autofillHints = 16844118;

  /// from: static public final int autofilledHighlight
  ///
  /// Drawable to be drawn over the view to mark it as autofilled
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const autofilledHighlight = 16844136;

  /// from: static public final int background
  ///
  /// A drawable to use as the background.  This can be either a reference
  /// to a full drawable resource (such as a PNG image, 9-patch,
  /// XML state list description, etc), or a solid color such as "\#ff000000"
  /// (black).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const background = 16842964;

  /// from: static public final int backgroundDimAmount
  ///
  /// Default background dim amount when a menu, dialog, or something similar pops up.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const backgroundDimAmount = 16842802;

  /// from: static public final int backgroundDimEnabled
  ///
  /// Control whether dimming behind the window is enabled.  The default
  /// theme does not set this value, meaning it is based on whether the
  /// window is floating.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const backgroundDimEnabled = 16843295;

  /// from: static public final int backgroundSplit
  ///
  /// Specifies a background drawable for the bottom component of a split action bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const backgroundSplit = 16843659;

  /// from: static public final int backgroundStacked
  ///
  /// Specifies a background drawable for a second stacked row of the action bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const backgroundStacked = 16843658;

  /// from: static public final int backgroundTint
  ///
  /// Tint to apply to the background.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const backgroundTint = 16843883;

  /// from: static public final int backgroundTintMode
  ///
  /// Blending mode used to apply the background tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const backgroundTintMode = 16843884;

  /// from: static public final int backupAgent
  ///
  /// The name of the class subclassing <code>BackupAgent</code> to manage
  /// backup and restore of the application's data on external storage.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const backupAgent = 16843391;

  /// from: static public final int backupInForeground
  ///
  /// Indicates that full-data backup operations for this application may
  /// be performed even if the application is in a foreground-equivalent
  /// state.  _Use with caution!_  Setting this flag to <code>true</code>
  /// can impact app behavior while the user is interacting with the device.
  /// If unspecified, the default value of this attribute is <code>false</code>,
  /// which means that the OS will avoid backing up the application while it is
  /// running in the foreground (such as a music app that is actively playing
  /// music via a service in the startForeground() state).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const backupInForeground = 16844058;

  /// from: static public final int banner
  ///
  /// A Drawable resource providing an extended graphical banner for its
  /// associated item. Use with the application tag (to supply a default
  /// banner for all application activities), or with the activity, tag to
  /// supply a banner for a specific activity.
  /// The given banner will be used to display to the user a graphical
  /// representation of an activity in the Leanback application launcher.
  /// Since banners are displayed only in the Leanback launcher, they should
  /// only be used with activities (and applications) that support Leanback
  /// mode. These are activities that handle Intents of category
  /// android.content.Intent\#CATEGORY_LEANBACK_LAUNCHER Intent.CATEGORY_LEANBACK_LAUNCHER.
  /// This must be a reference to a Drawable resource containing the image definition.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const banner = 16843762;

  /// from: static public final int baseline
  ///
  /// The offset of the baseline within this view. See {see android.view.View\#getBaseline}
  /// for details
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const baseline = 16843548;

  /// from: static public final int baselineAlignBottom
  ///
  /// If true, the image view will be baseline aligned with based on its
  /// bottom edge.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const baselineAlignBottom = 16843042;

  /// from: static public final int baselineAligned
  ///
  /// When set to false, prevents the layout from aligning its children's
  /// baselines. This attribute is particularly useful when the children
  /// use different values for gravity. The default value is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const baselineAligned = 16843046;

  /// from: static public final int baselineAlignedChildIndex
  ///
  /// When a linear layout is part of another layout that is baseline
  /// aligned, it can specify which of its children to baseline align to
  /// (that is, which child TextView).
  /// May be an integer value, such as "<code>100</code>".
  static const baselineAlignedChildIndex = 16843047;

  /// from: static public final int bitmap
  ///
  /// Drawable to use as the icon bitmap.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const bitmap = 16844054;

  /// from: static public final int borderlessButtonStyle
  ///
  /// Style for buttons without an explicit border, often used in groups.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const borderlessButtonStyle = 16843563;

  /// from: static public final int bottom
  ///
  /// Amount of bottom padding inside the gradient shape.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const bottom = 16843184;

  /// from: static public final int bottomBright
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const bottomBright = 16842957;

  /// from: static public final int bottomDark
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const bottomDark = 16842953;

  /// from: static public final int bottomLeftRadius
  ///
  /// Radius of the bottom left corner.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const bottomLeftRadius = 16843179;

  /// from: static public final int bottomMedium
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const bottomMedium = 16842958;

  /// from: static public final int bottomOffset
  ///
  /// Extra offset for the handle at the bottom of the SlidingDrawer.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const bottomOffset = 16843351;

  /// from: static public final int bottomRightRadius
  ///
  /// Radius of the bottom right corner.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const bottomRightRadius = 16843180;

  /// from: static public final int breadCrumbShortTitle
  ///
  /// The short title for the bread crumb of this item.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const breadCrumbShortTitle = 16843524;

  /// from: static public final int breadCrumbTitle
  ///
  /// The title for the bread crumb of this item.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const breadCrumbTitle = 16843523;

  /// from: static public final int breakStrategy
  ///
  /// Break strategy (control over paragraph layout).
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>balanced</td><td>2</td><td>Line breaking strategy balances line lengths.</td></tr>
  /// <tr><td>high_quality</td><td>1</td><td>Line breaking uses high-quality strategy, including hyphenation.</td></tr>
  /// <tr><td>simple</td><td>0</td><td>Line breaking uses simple strategy.</td></tr>
  /// </table>
  static const breakStrategy = 16843997;

  /// from: static public final int bufferType
  ///
  /// Determines the minimum type that getText() will return.
  /// The default is "normal".
  /// Note that EditText and LogTextBox always return Editable,
  /// even if you specify something less powerful here.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>editable</td><td>2</td><td>Can only return Spannable and Editable.</td></tr>
  /// <tr><td>normal</td><td>0</td><td>Can return any CharSequence, possibly a
  /// Spanned one if the source text was Spanned.</td></tr>
  /// <tr><td>spannable</td><td>1</td><td>Can only return Spannable.</td></tr>
  /// </table>
  static const bufferType = 16843086;

  /// from: static public final int button
  ///
  /// Drawable used for the button graphic (for example, checkbox and radio button).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const button = 16843015;

  /// from: static public final int buttonBarButtonStyle
  ///
  /// Style for buttons within button bars.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const buttonBarButtonStyle = 16843567;

  /// from: static public final int buttonBarNegativeButtonStyle
  ///
  /// Style for the "negative" buttons within button bars.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const buttonBarNegativeButtonStyle = 16843915;

  /// from: static public final int buttonBarNeutralButtonStyle
  ///
  /// Style for the "neutral" buttons within button bars.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const buttonBarNeutralButtonStyle = 16843914;

  /// from: static public final int buttonBarPositiveButtonStyle
  ///
  /// Style for the "positive" buttons within button bars.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const buttonBarPositiveButtonStyle = 16843913;

  /// from: static public final int buttonBarStyle
  ///
  /// Style for button bars.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const buttonBarStyle = 16843566;

  /// from: static public final int buttonCornerRadius
  ///
  /// Corner radius of buttons.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const buttonCornerRadius = 16844149;

  /// from: static public final int buttonGravity
  ///
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
  /// <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
  /// </table>
  static const buttonGravity = 16844030;

  /// from: static public final int buttonStyle
  ///
  /// Normal Button style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const buttonStyle = 16842824;

  /// from: static public final int buttonStyleInset
  ///
  /// Button style to inset into an EditText.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const buttonStyleInset = 16842826;

  /// from: static public final int buttonStyleSmall
  ///
  /// Small Button style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const buttonStyleSmall = 16842825;

  /// from: static public final int buttonStyleToggle
  ///
  /// ToggleButton style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const buttonStyleToggle = 16842827;

  /// from: static public final int buttonTint
  ///
  /// Tint to apply to the button graphic.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const buttonTint = 16843887;

  /// from: static public final int buttonTintMode
  ///
  /// Blending mode used to apply the button graphic tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const buttonTintMode = 16843888;

  /// from: static public final int cacheColorHint
  ///
  /// Indicates that this list will always be drawn on top of solid, single-color
  /// opaque background. This allows the list to optimize drawing.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const cacheColorHint = 16843009;

  /// from: static public final int calendarTextColor
  ///
  /// The text color list of the calendar.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const calendarTextColor = 16843931;

  /// from: static public final int calendarViewShown
  ///
  /// Whether the calendar view is shown. Only valid for "spinner" mode.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const calendarViewShown = 16843596;

  /// from: static public final int calendarViewStyle
  ///
  /// The CalendarView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const calendarViewStyle = 16843613;

  /// from: static public final int canControlMagnification
  ///
  /// Attribute whether the accessibility service wants to be able to control
  /// display magnification.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const canControlMagnification = 16844039;

  /// from: static public final int canPerformGestures
  ///
  /// Attribute whether the accessibility service wants to be able to perform gestures.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const canPerformGestures = 16844045;

  /// from: static public final int canRecord
  ///
  /// Attribute whether the TV input service can record programs. This value can be changed
  /// at runtime by calling
  /// android.media.tv.TvInputManager\#updateTvInputInfo(android.media.tv.TvInputInfo).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const canRecord = 16844060;

  /// from: static public final int canRequestEnhancedWebAccessibility
  ///
  /// Attribute whether the accessibility service wants to be able to request enhanced
  /// web accessibility enhancements.
  /// {@deprecated Not used by the framework}
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const canRequestEnhancedWebAccessibility = 16843736;

  /// from: static public final int canRequestFilterKeyEvents
  ///
  /// Attribute whether the accessibility service wants to be able to request to
  /// filter key events.
  ///
  /// Required to allow setting the android.accessibilityservice \#AccessibilityServiceInfo\#FLAG_REQUEST_FILTER_KEY_EVENTS flag.
  ///
  ///
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const canRequestFilterKeyEvents = 16843737;

  /// from: static public final int canRequestFingerprintGestures
  ///
  /// Attribute whether the accessibility service wants to be able to capture gestures from
  /// the fingerprint sensor.
  ///
  /// Required to allow setting the android.accessibilityservice \#AccessibilityServiceInfo\#FLAG_REQUEST_FINGERPRINT_GESTURES flag to have any effect.
  ///
  ///
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const canRequestFingerprintGestures = 16844109;

  /// from: static public final int canRequestTouchExplorationMode
  ///
  /// Attribute whether the accessibility service wants to be able to request touch
  /// exploration mode in which touched items are spoken aloud and the UI can be
  /// explored via gestures.
  ///
  /// Required to allow setting the android.accessibilityservice \#AccessibilityServiceInfo\#FLAG_REQUEST_TOUCH_EXPLORATION_MODE flag.
  ///
  ///
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const canRequestTouchExplorationMode = 16843735;

  /// from: static public final int canRetrieveWindowContent
  ///
  /// Attribute whether the accessibility service wants to be able to retrieve the
  /// active window content. This setting cannot be changed at runtime.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const canRetrieveWindowContent = 16843653;

  /// from: static public final int candidatesTextStyleSpans
  ///
  /// A styled string, specifying the style to be used for showing
  /// inline candidate text when composing with an input method.  The
  /// text itself will be ignored, but the style spans will be applied
  /// to the candidate text as it is edited.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const candidatesTextStyleSpans = 16843312;

  /// from: static public final int cantSaveState
  ///
  /// Declare that this application can't participate in the normal
  /// state save/restore mechanism.  Since it is not able to save and
  /// restore its state on demand,
  /// it can not participate in the normal activity lifecycle.  It will
  /// not be killed while in the background; the user must explicitly
  /// quit it.  Only one such app can be running at a time; if the user
  /// tries to launch a second such app, they will be prompted
  /// to quit the first before doing so.  While the
  /// application is running, the user will be informed of this.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const cantSaveState = 16844142;

  /// from: static public final int capitalize
  ///
  /// If set, specifies that this TextView has a textual input method
  /// and should automatically capitalize what the user types.
  /// The default is "none".
  /// {@deprecated Use inputType instead.}
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>characters</td><td>3</td><td>Capitalize every character.</td></tr>
  /// <tr><td>none</td><td>0</td><td>Don't automatically capitalize anything.</td></tr>
  /// <tr><td>sentences</td><td>1</td><td>Capitalize the first word of each sentence.</td></tr>
  /// <tr><td>words</td><td>2</td><td>Capitalize the first letter of every word.</td></tr>
  /// </table>
  static const capitalize = 16843113;

  /// from: static public final int category
  ///
  /// Category of the resource overlay.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const category = 16843752;

  /// from: static public final int centerBright
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const centerBright = 16842956;

  /// from: static public final int centerColor
  ///
  /// Optional center color. For linear gradients, use centerX or centerY to place the center
  /// color.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const centerColor = 16843275;

  /// from: static public final int centerDark
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const centerDark = 16842952;

  /// from: static public final int centerMedium
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const centerMedium = 16842959;

  /// from: static public final int centerX
  ///
  /// X-position of the center point of the gradient within the shape as a fraction of the
  /// width. The default value is 0.5.
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const centerX = 16843170;

  /// from: static public final int centerY
  ///
  /// Y-position of the center point of the gradient within the shape as a fraction of the
  /// height. The default value is 0.5.
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const centerY = 16843171;

  /// from: static public final int certDigest
  ///
  /// The SHA-256 digest of the library signing certificate.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const certDigest = 16844104;

  /// from: static public final int checkBoxPreferenceStyle
  ///
  /// Default style for CheckBoxPreference.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const checkBoxPreferenceStyle = 16842895;

  /// from: static public final int checkMark
  ///
  /// Drawable used for the check mark graphic.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const checkMark = 16843016;

  /// from: static public final int checkMarkTint
  ///
  /// Tint to apply to the check mark.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const checkMarkTint = 16843943;

  /// from: static public final int checkMarkTintMode
  ///
  /// Blending mode used to apply the check mark tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const checkMarkTintMode = 16843944;

  /// from: static public final int checkable
  ///
  /// Whether the item is capable of displaying a check mark.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const checkable = 16843237;

  /// from: static public final int checkableBehavior
  ///
  /// Whether the items are capable of displaying a check mark.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>all</td><td>1</td><td>The items are all checkable.</td></tr>
  /// <tr><td>none</td><td>0</td><td>The items are not checkable.</td></tr>
  /// <tr><td>single</td><td>2</td><td>The items are checkable and there will only be a single checked item in
  /// this group.</td></tr>
  /// </table>
  static const checkableBehavior = 16843232;

  /// from: static public final int checkboxStyle
  ///
  /// Default Checkbox style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const checkboxStyle = 16842860;

  /// from: static public final int checked
  ///
  /// Indicates the initial checked state of this button.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const checked = 16843014;

  /// from: static public final int checkedButton
  ///
  /// The id of the child radio button that should be checked by default
  /// within this radio group.
  /// May be an integer value, such as "<code>100</code>".
  static const checkedButton = 16843080;

  /// from: static public final int checkedTextViewStyle
  ///
  /// Default CheckedTextView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const checkedTextViewStyle = 16843720;

  /// from: static public final int childDivider
  ///
  /// Drawable or color that is used as a divider for children. (It will drawn
  /// below and above child items.) The height of this will be the same as
  /// the height of the normal list item divider.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const childDivider = 16843025;

  /// from: static public final int childIndicator
  ///
  /// Indicator shown beside the child View. This can be a stateful Drawable.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const childIndicator = 16843020;

  /// from: static public final int childIndicatorEnd
  ///
  /// The end bound for a child's indicator.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const childIndicatorEnd = 16843732;

  /// from: static public final int childIndicatorLeft
  ///
  /// The left bound for a child's indicator.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const childIndicatorLeft = 16843023;

  /// from: static public final int childIndicatorRight
  ///
  /// The right bound for a child's indicator.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const childIndicatorRight = 16843024;

  /// from: static public final int childIndicatorStart
  ///
  /// The start bound for a child's indicator.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const childIndicatorStart = 16843731;

  /// from: static public final int choiceMode
  ///
  /// Defines the choice behavior for the view. By default, lists do not have
  /// any choice behavior. By setting the choiceMode to singleChoice, the list
  /// allows up to one item to be in a chosen state. By setting the choiceMode to
  /// multipleChoice, the list allows any number of items to be chosen.
  /// Finally, by setting the choiceMode to multipleChoiceModal the list allows
  /// any number of items to be chosen in a special selection mode.
  /// The application will supply a
  /// android.widget.AbsListView.MultiChoiceModeListener using
  /// android.widget.AbsListView\#setMultiChoiceModeListener to control the
  /// selection mode. This uses the android.view.ActionMode API.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>multipleChoice</td><td>2</td><td>The list allows multiple choices.</td></tr>
  /// <tr><td>multipleChoiceModal</td><td>3</td><td>The list allows multiple choices in a custom selection mode.</td></tr>
  /// <tr><td>none</td><td>0</td><td>Normal list that does not indicate choices.</td></tr>
  /// <tr><td>singleChoice</td><td>1</td><td>The list allows up to one choice.</td></tr>
  /// </table>
  static const choiceMode = 16843051;

  /// from: static public final int classLoader
  ///
  /// The classname of the classloader used to load the application's classes
  /// from its APK. The APK in question can either be the 'base' APK or any
  /// of the application's 'split' APKs if it's using a feature split.
  ///
  /// The supported values for this attribute are
  /// <code>dalvik.system.PathClassLoader</code> and
  /// <code>dalvik.system.DelegateLastClassLoader</code>. If unspecified,
  /// the default value of this attribute is <code>dalvik.system.PathClassLoader</code>.
  /// If an unknown classloader is provided, a PackageParserException with cause
  /// <code>PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</code> will be
  /// thrown and the app will not be installed.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const classLoader = 16844139;

  /// from: static public final int clearTaskOnLaunch
  ///
  /// Specify whether an activity's task should be cleared when it
  /// is re-launched from the home screen.  As a result, every time the
  /// user starts the task, they will be brought to its root activity,
  /// regardless of whether they used BACK or HOME to last leave it.
  /// This flag only applies to activities that
  /// are used to start the root of a new task.
  /// An example of the use of this flag would be for the case where
  /// a user launches activity A from home, and from there goes to
  /// activity B.  They now press home, and then return to activity A.
  /// Normally they would see activity B, since that is what they were
  /// last doing in A's task.  However, if A has set this flag to true,
  /// then upon going to the background all of the tasks on top of it (B
  /// in this case) are removed, so when the user next returns to A they
  /// will restart at its original activity.
  /// When this option is used in conjunction with
  /// android.R.attr\#allowTaskReparenting, the allowTaskReparenting trumps the
  /// clear.  That is, all activities above the root activity of the
  /// task will be removed: those that have an affinity will be moved
  /// to the task they are associated with, otherwise they will simply
  /// be dropped as described here.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const clearTaskOnLaunch = 16842773;

  /// from: static public final int clickable
  ///
  /// Defines whether this view reacts to click events.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const clickable = 16842981;

  /// from: static public final int clipChildren
  ///
  /// Defines whether a child is limited to draw inside of its bounds or not.
  /// This is useful with animations that scale the size of the children to more
  /// than 100% for instance. In such a case, this property should be set to false
  /// to allow the children to draw outside of their bounds. The default value of
  /// this property is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const clipChildren = 16842986;

  /// from: static public final int clipOrientation
  ///
  /// The orientation for the clip.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>horizontal</td><td>1</td><td>Clip the drawable horizontally.</td></tr>
  /// <tr><td>vertical</td><td>2</td><td>Clip the drawable vertically.</td></tr>
  /// </table>
  static const clipOrientation = 16843274;

  /// from: static public final int clipToPadding
  ///
  /// Defines whether the ViewGroup will clip its children and resize (but not clip) any
  /// EdgeEffect to its padding, if padding is not zero. This property is set to true by
  /// default.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const clipToPadding = 16842987;

  /// from: static public final int closeIcon
  ///
  /// Close button icon.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const closeIcon = 16843905;

  /// from: static public final int codes
  ///
  /// The unicode value or comma-separated values that this key outputs.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  /// May be an integer value, such as "<code>100</code>".
  static const codes = 16843330;

  /// from: static public final int collapseColumns
  ///
  /// The zero-based index of the columns to collapse. The column indices
  /// must be separated by a comma: 1, 2, 5. Illegal and duplicate
  /// indices are ignored.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const collapseColumns = 16843083;

  /// from: static public final int collapseContentDescription
  ///
  /// Text to set as the content description for the collapse button.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const collapseContentDescription = 16843984;

  /// from: static public final int collapseIcon
  ///
  /// Icon drawable to use for the collapse button.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const collapseIcon = 16844031;

  /// from: static public final int color
  ///
  /// Solid color for the gradient shape.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const color = 16843173;

  /// from: static public final int colorAccent
  ///
  /// Bright complement to the primary branding color. By default, this is the color applied
  /// to framework controls (via colorControlActivated).
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorAccent = 16843829;

  /// from: static public final int colorActivatedHighlight
  ///
  /// Default highlight color for items that are
  /// activated. (Activated meaning persistent selection.)
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorActivatedHighlight = 16843664;

  /// from: static public final int colorBackground
  ///
  /// Default color of background imagery, ex. full-screen windows.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorBackground = 16842801;

  /// from: static public final int colorBackgroundCacheHint
  ///
  /// This is a hint for a solid color that can be used for caching
  /// rendered views.  This should be the color of the background when
  /// there is a solid background color; it should be null when the
  /// background is a texture or translucent.  When a device is able
  /// to use accelerated drawing (thus setting state_accelerated), the
  /// cache hint is ignored and always assumed to be transparent.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorBackgroundCacheHint = 16843435;

  /// from: static public final int colorBackgroundFloating
  ///
  /// Default color of background imagery for floating components, ex. dialogs, popups, and cards.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorBackgroundFloating = 16844002;

  /// from: static public final int colorButtonNormal
  ///
  /// The color applied to framework buttons in their normal state.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorButtonNormal = 16843819;

  /// from: static public final int colorControlActivated
  ///
  /// The color applied to framework controls in their activated (ex. checked) state.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorControlActivated = 16843818;

  /// from: static public final int colorControlHighlight
  ///
  /// The color applied to framework control highlights (ex. ripples, list selectors).
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorControlHighlight = 16843820;

  /// from: static public final int colorControlNormal
  ///
  /// The color applied to framework controls in their normal state.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorControlNormal = 16843817;

  /// from: static public final int colorEdgeEffect
  ///
  /// The color applied to the edge effect on scrolling containers.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorEdgeEffect = 16843982;

  /// from: static public final int colorError
  ///
  /// Color used for error states and things that need to be drawn to
  /// the users attention..
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorError = 16844099;

  /// from: static public final int colorFocusedHighlight
  ///
  /// Default highlight color for items that are
  /// focused. (Focused meaning cursor-based selection.)
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorFocusedHighlight = 16843663;

  /// from: static public final int colorForeground
  ///
  /// Default color of foreground imagery.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorForeground = 16842800;

  /// from: static public final int colorForegroundInverse
  ///
  /// Default color of foreground imagery on an inverted background.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorForegroundInverse = 16843270;

  /// from: static public final int colorLongPressedHighlight
  ///
  /// Default highlight color for items that are long-pressed.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorLongPressedHighlight = 16843662;

  /// from: static public final int colorMode
  ///
  /// Specify the color mode the activity desires. The requested color mode may be ignored
  /// depending on the capabilities of the display the activity is displayed on.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>default</td><td>0</td><td>The default color mode (typically sRGB, low-dynamic range).</td></tr>
  /// <tr><td>hdr</td><td>2</td><td>High dynamic range color mode.</td></tr>
  /// <tr><td>wideColorGamut</td><td>1</td><td>Wide color gamut color mode.</td></tr>
  /// </table>
  static const colorMode = 16844106;

  /// from: static public final int colorMultiSelectHighlight
  ///
  /// Default highlight color for items in multiple selection
  /// mode.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorMultiSelectHighlight = 16843665;

  /// from: static public final int colorPressedHighlight
  ///
  /// Default highlight color for items that are pressed.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorPressedHighlight = 16843661;

  /// from: static public final int colorPrimary
  ///
  /// The primary branding color for the app. By default, this is the color applied to the
  /// action bar background.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorPrimary = 16843827;

  /// from: static public final int colorPrimaryDark
  ///
  /// Dark variant of the primary branding color. By default, this is the color applied to
  /// the status bar (via statusBarColor) and navigation bar (via navigationBarColor).
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorPrimaryDark = 16843828;

  /// from: static public final int colorSecondary
  ///
  /// The secondary branding color for the app.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const colorSecondary = 16844080;

  /// from: static public final int columnCount
  ///
  /// The maxmimum number of columns to create when automatically positioning children.
  /// May be an integer value, such as "<code>100</code>".
  static const columnCount = 16843639;

  /// from: static public final int columnDelay
  ///
  /// Fraction of the animation duration used to delay the beginning of
  /// the animation of each column.
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const columnDelay = 16843215;

  /// from: static public final int columnOrderPreserved
  ///
  /// When set to true, forces column boundaries to appear in the same order
  /// as column indices.
  /// The default is true.
  /// See android.widget.GridLayout\#setColumnOrderPreserved(boolean).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const columnOrderPreserved = 16843640;

  /// from: static public final int columnWidth
  ///
  /// Specifies the fixed width for each column.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const columnWidth = 16843031;

  /// from: static public final int commitIcon
  ///
  /// Commit icon shown in the query suggestion row.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const commitIcon = 16843909;

  /// from: static public final int compatibleWidthLimitDp
  ///
  /// Starting with android.os.Build.VERSION_CODES\#HONEYCOMB_MR2,
  /// this is the new way to specify the largest screens an application is
  /// compatible with.  This attribute provides the maximum
  /// "smallest screen width" (as per the -swNNNdp resource configuration)
  /// that the application is designed for.  If this value is smaller than
  /// the "smallest screen width" of the device it is running on, the user
  /// is offered to run it in a compatibility mode that emulates a
  /// smaller screen and zooms it to fit the screen. Currently the compatibility mode only
  /// emulates phone screens with a 320dp width, so compatibility mode is not applied if the
  /// value for compatibleWidthLimitDp is larger than 320.
  /// May be an integer value, such as "<code>100</code>".
  static const compatibleWidthLimitDp = 16843621;

  /// from: static public final int completionHint
  ///
  /// Defines the hint displayed in the drop down menu.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const completionHint = 16843122;

  /// from: static public final int completionHintView
  ///
  /// Defines the hint view displayed in the drop down menu.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const completionHintView = 16843123;

  /// from: static public final int completionThreshold
  ///
  /// Defines the number of characters that the user must type before
  /// completion suggestions are displayed in a drop down menu.
  /// May be an integer value, such as "<code>100</code>".
  static const completionThreshold = 16843124;

  /// from: static public final int configChanges
  ///
  /// Specify one or more configuration changes that the activity will
  /// handle itself.  If not specified, the activity will be restarted
  /// if any of these configuration changes happen in the system.  Otherwise,
  /// the activity will remain running and its
  /// android.app.Activity\#onConfigurationChanged Activity.onConfigurationChanged
  /// method called with the new configuration.
  /// Note that all of these configuration changes can impact the
  /// resource values seen by the application, so you will generally need
  /// to re-retrieve all resources (including view layouts, drawables, etc)
  /// to correctly handle any configuration change.
  /// These values must be kept in sync with those in
  /// android.content.pm.ActivityInfo and
  /// include/utils/ResourceTypes.h.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>colorMode</td><td>4000</td><td>The color mode of the screen has changed (color gamut or dynamic range).</td></tr>
  /// <tr><td>density</td><td>1000</td><td>The display density has changed. This might be caused by the user
  /// specifying a different display scale, or it might be caused by a
  /// different display being activated.</td></tr>
  /// <tr><td>fontScale</td><td>40000000</td><td>The font scaling factor has changed, that is the user has
  /// selected a new global font size.</td></tr>
  /// <tr><td>keyboard</td><td>10</td><td>The keyboard type has changed, for example the user has plugged
  /// in an external keyboard.</td></tr>
  /// <tr><td>keyboardHidden</td><td>20</td><td>The keyboard or navigation accessibility has changed, for example
  /// the user has slid the keyboard out to expose it.  Note that
  /// despite its name, this applied to any accessibility: keyboard
  /// or navigation.</td></tr>
  /// <tr><td>layoutDirection</td><td>2000</td><td>The layout direction has changed. For example going from LTR to RTL.</td></tr>
  /// <tr><td>locale</td><td>4</td><td>The locale has changed, that is the user has selected a new
  /// language that text should be displayed in.</td></tr>
  /// <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
  /// updated the Mobile Country Code. By default from Android O, we
  /// don't recreate the activity even the app doesn't specify mcc in
  /// configChanges. If the app wants to recreate the activity, specify
  /// mcc in recreateOnConfigChanges.</td></tr>
  /// <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
  /// updated the Mobile Network Code. By default from Android O, we
  /// don't recreate the activity even the app doesn't specify mnc in
  /// configChanges. If the app wants to recreate the acvitity, specify
  /// mnc in recreateOnConfigChanges.</td></tr>
  /// <tr><td>navigation</td><td>40</td><td>The navigation type has changed.  Should never normally happen.</td></tr>
  /// <tr><td>orientation</td><td>80</td><td>The screen orientation has changed, that is the user has
  /// rotated the device.</td></tr>
  /// <tr><td>screenLayout</td><td>100</td><td>The screen layout has changed.  This might be caused by a
  /// different display being activated.</td></tr>
  /// <tr><td>screenSize</td><td>400</td><td>The current available screen size has changed.  If applications don't
  /// target at least android.os.Build.VERSION_CODES\#HONEYCOMB_MR2
  /// then the activity will always handle this itself (the change
  /// will not result in a restart).  This represents a change in the
  /// currently available size, so will change when the user switches
  /// between landscape and portrait.</td></tr>
  /// <tr><td>smallestScreenSize</td><td>800</td><td>The physical screen size has changed.  If applications don't
  /// target at least android.os.Build.VERSION_CODES\#HONEYCOMB_MR2
  /// then the activity will always handle this itself (the change
  /// will not result in a restart).  This represents a change in size
  /// regardless of orientation, so will only change when the actual
  /// physical screen size has changed such as switching to an external
  /// display.</td></tr>
  /// <tr><td>touchscreen</td><td>8</td><td>The touchscreen has changed.  Should never normally happen.</td></tr>
  /// <tr><td>uiMode</td><td>200</td><td>The global user interface mode has changed.  For example,
  /// going in or out of car mode, night mode changing, etc.</td></tr>
  /// </table>
  static const configChanges = 16842783;

  /// from: static public final int configure
  ///
  /// A class name in the AppWidget's package to be launched to configure.
  /// If not supplied, then no activity will be launched.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const configure = 16843357;

  /// from: static public final int constantSize
  ///
  /// If true, the drawable's reported internal size will remain
  /// constant as the state changes; the size is the maximum of all
  /// of the states.  If false, the size will vary based on the
  /// current state.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const constantSize = 16843158;

  /// from: static public final int content
  ///
  /// Identifier for the child that represents the drawer's content.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const content = 16843355;

  /// from: static public final int contentAgeHint
  ///
  /// The age associated with the content rating. The content of this rating is suitable for
  /// people of this age or above.
  /// May be an integer value, such as "<code>100</code>".
  static const contentAgeHint = 16843961;

  /// from: static public final int contentAuthority
  ///
  /// the authority of a content provider.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const contentAuthority = 16843408;

  /// from: static public final int contentDescription
  ///
  /// The content description associated with the item.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const contentDescription = 16843379;

  /// from: static public final int contentInsetEnd
  ///
  /// Minimum inset for content views within a bar. Navigation buttons and
  /// menu views are excepted. Only valid for some themes and configurations.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const contentInsetEnd = 16843860;

  /// from: static public final int contentInsetEndWithActions
  ///
  /// Minimum inset for content views within a bar when actions from a menu
  /// are present. Only valid for some themes and configurations.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const contentInsetEndWithActions = 16844067;

  /// from: static public final int contentInsetLeft
  ///
  /// Minimum inset for content views within a bar. Navigation buttons and
  /// menu views are excepted. Only valid for some themes and configurations.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const contentInsetLeft = 16843861;

  /// from: static public final int contentInsetRight
  ///
  /// Minimum inset for content views within a bar. Navigation buttons and
  /// menu views are excepted. Only valid for some themes and configurations.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const contentInsetRight = 16843862;

  /// from: static public final int contentInsetStart
  ///
  /// Minimum inset for content views within a bar. Navigation buttons and
  /// menu views are excepted. Only valid for some themes and configurations.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const contentInsetStart = 16843859;

  /// from: static public final int contentInsetStartWithNavigation
  ///
  /// Minimum inset for content views within a bar when a navigation button
  /// is present, such as the Up button. Only valid for some themes and configurations.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const contentInsetStartWithNavigation = 16844066;

  /// from: static public final int contextClickable
  ///
  /// Defines whether this view reacts to context click events.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const contextClickable = 16844007;

  /// from: static public final int contextDescription
  ///
  /// Title of the uri that specifies a link for further context of this wallpaper,
  /// for example, Explore collection.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const contextDescription = 16844078;

  /// from: static public final int contextPopupMenuStyle
  ///
  /// Default context menu PopupMenu style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const contextPopupMenuStyle = 16844033;

  /// from: static public final int contextUri
  ///
  /// Uri that specifies a link for further context of this wallpaper, for example,
  /// http://www.picasso.org.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const contextUri = 16844077;

  /// from: static public final int controlX1
  ///
  /// The x coordinate of the first control point of the cubic Bezier.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const controlX1 = 16843772;

  /// from: static public final int controlX2
  ///
  /// The x coordinate of the second control point of the cubic Bezier.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const controlX2 = 16843774;

  /// from: static public final int controlY1
  ///
  /// The y coordinate of the first control point of the cubic Bezier.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const controlY1 = 16843773;

  /// from: static public final int controlY2
  ///
  /// The y coordinate of the second control point of the cubic Bezier.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const controlY2 = 16843775;

  /// from: static public final int countDown
  ///
  /// Specifies whether this Chronometer counts down or counts up from the base.
  /// If not specified this is false and the Chronometer counts up.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const countDown = 16844059;

  /// from: static public final int country
  ///
  /// The country code associated with the content rating system, which consists of two
  /// uppercase letters that conform to the ISO 3166 standard.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const country = 16843962;

  /// from: static public final int cropToPadding
  ///
  /// If true, the image will be cropped to fit within its padding.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const cropToPadding = 16843043;

  /// from: static public final int cursorVisible
  ///
  /// Makes the cursor visible (the default) or invisible.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const cursorVisible = 16843090;

  /// from: static public final int customNavigationLayout
  ///
  /// Specifies a layout for custom navigation. Overrides navigationMode.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const customNavigationLayout = 16843474;

  /// from: static public final int customTokens
  ///
  /// Account handles its own token storage and permissions.
  /// Default to false
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const customTokens = 16843579;

  /// from: static public final int cycles
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  static const cycles = 16843220;

  /// from: static public final int dashGap
  ///
  /// Gap between dashes in the stroke.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const dashGap = 16843175;

  /// from: static public final int dashWidth
  ///
  /// Length of a dash in the stroke.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const dashWidth = 16843174;

  /// from: static public final int data
  ///
  /// The data URI to assign to the Intent, as per
  /// android.content.Intent\#setData Intent.setData().
  /// _Note: scheme and host name matching in the Android framework is
  /// case-sensitive, unlike the formal RFC.  As a result,
  /// URIs here should always be normalized to use lower case letters
  /// for these elements (as well as other proper Uri normalization)._
  ///
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const data = 16842798;

  /// from: static public final int datePickerDialogTheme
  ///
  /// The DatePicker dialog theme.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const datePickerDialogTheme = 16843948;

  /// from: static public final int datePickerMode
  ///
  /// Defines the look of the widget. Prior to the L release, the only choice was
  /// spinner. As of L, with the Material theme selected, the default layout is calendar,
  /// but this attribute can be used to force spinner to be used instead.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>calendar</td><td>2</td><td>Date picker with calendar to select the date.</td></tr>
  /// <tr><td>spinner</td><td>1</td><td>Date picker with spinner controls to select the date.</td></tr>
  /// </table>
  static const datePickerMode = 16843955;

  /// from: static public final int datePickerStyle
  ///
  /// The DatePicker style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const datePickerStyle = 16843612;

  /// from: static public final int dateTextAppearance
  ///
  /// The text appearance for the day numbers in the calendar grid.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dateTextAppearance = 16843593;

  /// from: static public final int dayOfWeekBackground
  ///
  /// The background color for the header's day of week.
  /// {@deprecated No longer displayed.}
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const dayOfWeekBackground = 16843924;

  /// from: static public final int dayOfWeekTextAppearance
  ///
  /// The text color for the header's day of week.
  /// {@deprecated No longer displayed.}
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dayOfWeekTextAppearance = 16843925;

  /// from: static public final int debuggable
  ///
  /// Flag indicating whether the application can be debugged, even when
  /// running on a device that is running in user mode.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const debuggable = 16842767;

  /// from: static public final int defaultFocusHighlightEnabled
  ///
  /// Whether this View should use a default focus highlight when it gets focused but
  /// doesn't have android.R.attr\#state_focused defined in its background.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const defaultFocusHighlightEnabled = 16844130;

  /// from: static public final int defaultHeight
  ///
  /// Default height of the activity. Can be either a fixed value or fraction, in which case
  /// the height will be constructed as a fraction of the total available height.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const defaultHeight = 16844021;

  /// from: static public final int defaultToDeviceProtectedStorage
  ///
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const defaultToDeviceProtectedStorage = 16844036;

  /// from: static public final int defaultValue
  ///
  /// The default value for the preference, which will be set either if persistence
  /// is off or persistence is on and the preference is not found in the persistent
  /// storage.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  /// May be an integer value, such as "<code>100</code>".
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  /// May be a floating point value, such as "<code>1.2</code>".
  static const defaultValue = 16843245;

  /// from: static public final int defaultWidth
  ///
  /// Default width of the activity. Can be either a fixed value or fraction, in which case
  /// the width will be constructed as a fraction of the total available width.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const defaultWidth = 16844020;

  /// from: static public final int delay
  ///
  /// Fraction of the animation duration used to delay the beginning of
  /// the animation of each child.
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const delay = 16843212;

  /// from: static public final int dependency
  ///
  /// The key of another Preference that this Preference will depend on.  If the other
  /// Preference is not set or is off, this Preference will be disabled.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const dependency = 16843244;

  /// from: static public final int descendantFocusability
  ///
  /// Defines the relationship between the ViewGroup and its descendants
  /// when looking for a View to take focus.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>afterDescendants</td><td>1</td><td>The ViewGroup will get focus only if none of its descendants want it.</td></tr>
  /// <tr><td>beforeDescendants</td><td>0</td><td>The ViewGroup will get focus before any of its descendants.</td></tr>
  /// <tr><td>blocksDescendants</td><td>2</td><td>The ViewGroup will block its descendants from receiving focus.</td></tr>
  /// </table>
  static const descendantFocusability = 16842993;

  /// from: static public final int description
  ///
  /// Descriptive text for the associated data.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const description = 16842784;

  /// from: static public final int detachWallpaper
  ///
  /// Special option for window animations: if this window is on top
  /// of a wallpaper, don't animate the wallpaper with it.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const detachWallpaper = 16843430;

  /// from: static public final int detailColumn
  ///
  /// Column in data table that contains details for this data.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const detailColumn = 16843427;

  /// from: static public final int detailSocialSummary
  ///
  /// Flag indicating that detail should be built from SocialProvider.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const detailSocialSummary = 16843428;

  /// from: static public final int detailsElementBackground
  ///
  /// Background that can be used behind parts of a UI that provide
  /// details on data the user is selecting.  For example, this is
  /// the background element of PreferenceActivity's embedded
  /// preference fragment.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const detailsElementBackground = 16843598;

  /// from: static public final int dial
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dial = 16843010;

  /// from: static public final int dialogCornerRadius
  ///
  /// Corner radius of dialogs.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const dialogCornerRadius = 16844145;

  /// from: static public final int dialogIcon
  ///
  /// The icon for the dialog.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dialogIcon = 16843252;

  /// from: static public final int dialogLayout
  ///
  /// A layout to be used as the content View for the dialog. By default, this shouldn't
  /// be needed. If a custom DialogPreference is required, this should be set. For example,
  /// the EditTextPreference uses a layout with an EditText as this attribute.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dialogLayout = 16843255;

  /// from: static public final int dialogMessage
  ///
  /// The message in the dialog. If a dialogLayout is provided and contains
  /// a TextView with ID android:id/message, this message will be placed in there.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const dialogMessage = 16843251;

  /// from: static public final int dialogPreferenceStyle
  ///
  /// Default style for DialogPreference.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dialogPreferenceStyle = 16842897;

  /// from: static public final int dialogPreferredPadding
  ///
  /// Preferred padding for dialog content.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const dialogPreferredPadding = 16843987;

  /// from: static public final int dialogTheme
  ///
  /// Theme to use for dialogs spawned from this theme.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dialogTheme = 16843528;

  /// from: static public final int dialogTitle
  ///
  /// The title in the dialog.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const dialogTitle = 16843250;

  /// from: static public final int digits
  ///
  /// If set, specifies that this TextView has a numeric input method
  /// and that these specific characters are the ones that it will
  /// accept.
  /// If this is set, numeric is implied to be true.
  /// The default is false.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const digits = 16843110;

  /// from: static public final int directBootAware
  ///
  /// Indicate if this component is aware of direct boot lifecycle, and can be
  /// safely run before the user has entered their credentials (such as a lock
  /// pattern or PIN).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const directBootAware = 16844037;

  /// from: static public final int direction
  ///
  /// Direction of the animation in the grid.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bottom_to_top</td><td>2</td><td>Animates rows from bottom to top.</td></tr>
  /// <tr><td>left_to_right</td><td>0</td><td>Animates columns from left to right.</td></tr>
  /// <tr><td>right_to_left</td><td>1</td><td>Animates columns from right to left.</td></tr>
  /// <tr><td>top_to_bottom</td><td>0</td><td>Animates rows from top to bottom.</td></tr>
  /// </table>
  static const direction = 16843217;

  /// from: static public final int directionDescriptions
  ///
  /// @deprecated Removed.
  /// Reference to an array resource that be used to announce the directions with targets around the circle.
  /// {@deprecated Removed.}
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const directionDescriptions = 16843681;

  /// from: static public final int directionPriority
  ///
  /// Priority of the rows and columns. When the priority is none,
  /// both rows and columns have the same priority. When the priority is
  /// column, the animations will be applied on the columns first. The same
  /// goes for rows.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>column</td><td>1</td><td>Columns are animated first.</td></tr>
  /// <tr><td>none</td><td>0</td><td>Rows and columns are animated at the same time.</td></tr>
  /// <tr><td>row</td><td>2</td><td>Rows are animated first.</td></tr>
  /// </table>
  static const directionPriority = 16843218;

  /// from: static public final int disableDependentsState
  ///
  /// The state (true for on, or false for off) that causes dependents to be disabled. By default,
  /// dependents will be disabled when this is unchecked, so the value of this preference is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const disableDependentsState = 16843249;

  /// from: static public final int disabledAlpha
  ///
  /// Default disabled alpha for widgets that set enabled/disabled alpha programmatically.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const disabledAlpha = 16842803;

  /// from: static public final int displayOptions
  ///
  /// Options affecting how the action bar is displayed.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>disableHome</td><td>20</td><td></td></tr>
  /// <tr><td>homeAsUp</td><td>4</td><td></td></tr>
  /// <tr><td>none</td><td>0</td><td></td></tr>
  /// <tr><td>showCustom</td><td>10</td><td></td></tr>
  /// <tr><td>showHome</td><td>2</td><td></td></tr>
  /// <tr><td>showTitle</td><td>8</td><td></td></tr>
  /// <tr><td>useLogo</td><td>1</td><td></td></tr>
  /// </table>
  static const displayOptions = 16843472;

  /// from: static public final int dither
  ///
  /// Enables or disables dithering of the bitmap if the bitmap does not have the
  /// same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
  /// an RGB 565 screen).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const dither = 16843036;

  /// from: static public final int divider
  ///
  /// Drawable or color to draw between list items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const divider = 16843049;

  /// from: static public final int dividerHeight
  ///
  /// Height of the divider. Will use the intrinsic height of the divider if this
  /// is not specified.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const dividerHeight = 16843050;

  /// from: static public final int dividerHorizontal
  ///
  /// Drawable to use for generic horizontal dividers.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dividerHorizontal = 16843564;

  /// from: static public final int dividerPadding
  ///
  /// Size of padding on either end of a divider.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const dividerPadding = 16843562;

  /// from: static public final int dividerVertical
  ///
  /// Drawable to use for generic vertical dividers.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dividerVertical = 16843530;

  /// from: static public final int documentLaunchMode
  ///
  /// This attribute specifies that an activity shall become the root activity of a
  /// new task each time it is launched. Using this attribute permits the user to
  /// have multiple documents from the same applications appear in the recent tasks list.
  /// Such a document is any kind of item for which an application may want to
  /// maintain multiple simultaneous instances. Examples might be text files, web
  /// pages, spreadsheets, or emails. Each such document will be in a separate
  /// task in the recent taskss list.
  /// This attribute is equivalent to adding the flag android.content.Intent\#FLAG_ACTIVITY_NEW_DOCUMENT to every Intent used to launch
  /// the activity.
  /// The documentLaunchMode attribute may be assigned one of four values, "none",
  /// "intoExisting", "always" and "never", described in detail below. For values other than
  /// <code>none</code> and <code>never</code> the activity must be defined with
  /// android.R.attr\#launchMode <code>standard</code>.
  /// If this attribute is not specified, <code>none</code> will be used.
  /// Note that <code>none</code> can be overridden at run time if the Intent used
  /// to launch it contains the flag android.content.Intent\#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT.
  /// Similarly <code>intoExisting</code> will be overridden by the flag
  /// android.content.Intent\#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT combined with
  /// android.content.Intent\#FLAG_ACTIVITY_MULTIPLE_TASK Intent.FLAG_ACTIVITY_MULTIPLE_TASK. If the value of
  /// documentLaunchModes is <code>never</code> then any use of
  /// android.content.Intent\#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT to launch this activity will be ignored.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>always</td><td>2</td><td>A new task rooted at this activity will be created. This will happen whether or
  /// not there is an existing task whose ComponentName and data URI match
  /// that of the launcing intent This is the equivalent of launching an activity
  /// with android.content.Intent\#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT
  /// and android.content.Intent\#FLAG_ACTIVITY_MULTIPLE_TASK Intent.FLAG_ACTIVITY_MULTIPLE_TASK both set.</td></tr>
  /// <tr><td>intoExisting</td><td>1</td><td>All tasks will be searched for one whose base Intent's ComponentName and
  /// data URI match those of the launching Intent. If such a task is found
  /// that task will be cleared and restarted with the root activity receiving a call
  /// to android.app.Activity\#onNewIntent Activity.onNewIntent. If no
  /// such task is found a new task will be created.
  /// This is the equivalent of launching an activity with android.content.Intent\#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT
  /// set and without android.content.Intent\#FLAG_ACTIVITY_MULTIPLE_TASK Intent.FLAG_ACTIVITY_MULTIPLE_TASK set.</td></tr>
  /// <tr><td>never</td><td>3</td><td>This activity will not be launched into a new document even if the Intent contains
  /// android.content.Intent\#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT. This gives the activity writer ultimate
  /// control over how their activity is used. Note that applications prior to api
  /// 21 will default to documentLaunchMode="none" so only activities that explicitly
  /// opt out with <code>"never"</code> may do so.</td></tr>
  /// <tr><td>none</td><td>0</td><td>The default mode, which will create a new task only when
  /// android.content.Intent\#FLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK is set.</td></tr>
  /// </table>
  static const documentLaunchMode = 16843845;

  /// from: static public final int drawSelectorOnTop
  ///
  /// When set to true, the selector will be drawn over the selected item.
  /// Otherwise the selector is drawn behind the selected item. The default
  /// value is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const drawSelectorOnTop = 16843004;

  /// from: static public final int drawable
  ///
  /// Reference to a drawable resource to use for the frame.  If not
  /// given, the drawable must be defined by the first child tag.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const drawable = 16843161;

  /// from: static public final int drawableBottom
  ///
  /// The drawable to be drawn below the text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const drawableBottom = 16843118;

  /// from: static public final int drawableEnd
  ///
  /// The drawable to be drawn to the end of the text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const drawableEnd = 16843667;

  /// from: static public final int drawableLeft
  ///
  /// The drawable to be drawn to the left of the text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const drawableLeft = 16843119;

  /// from: static public final int drawablePadding
  ///
  /// The padding between the drawables and the text.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const drawablePadding = 16843121;

  /// from: static public final int drawableRight
  ///
  /// The drawable to be drawn to the right of the text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const drawableRight = 16843120;

  /// from: static public final int drawableStart
  ///
  /// The drawable to be drawn to the start of the text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const drawableStart = 16843666;

  /// from: static public final int drawableTint
  ///
  /// Tint to apply to the compound (left, top, etc.) drawables.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const drawableTint = 16843990;

  /// from: static public final int drawableTintMode
  ///
  /// Blending mode used to apply the compound (left, top, etc.) drawables tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const drawableTintMode = 16843991;

  /// from: static public final int drawableTop
  ///
  /// The drawable to be drawn above the text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const drawableTop = 16843117;

  /// from: static public final int drawingCacheQuality
  ///
  /// Defines the quality of translucent drawing caches. This property is used
  /// only when the drawing cache is enabled and translucent. The default value is auto.
  /// Deprecated: The view drawing cache was largely made obsolete with the introduction of
  /// hardware-accelerated rendering in API 11.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>auto</td><td>0</td><td>Lets the framework decide what quality level should be used
  /// for the drawing cache.
  /// Deprecated: The view drawing cache was largely made obsolete with the introduction
  /// of hardware-accelerated rendering in API 11.</td></tr>
  /// <tr><td>high</td><td>2</td><td>High quality. When set to high quality, the drawing cache uses a higher
  /// color depth but uses more memory.
  /// Deprecated: The view drawing cache was largely made obsolete with the introduction
  /// of hardware-accelerated rendering in API 11.</td></tr>
  /// <tr><td>low</td><td>1</td><td>Low quality. When set to low quality, the drawing cache uses a lower color
  /// depth, thus losing precision in rendering gradients, but uses less memory.
  /// Deprecated: The view drawing cache was largely made obsolete with the introduction
  /// of hardware-accelerated rendering in API 11.</td></tr>
  /// </table>
  static const drawingCacheQuality = 16842984;

  /// from: static public final int dropDownAnchor
  ///
  /// View to anchor the auto-complete dropdown to. If not specified, the text view itself
  /// is used.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dropDownAnchor = 16843363;

  /// from: static public final int dropDownHeight
  ///
  /// Specifies the basic height of the dropdown. Its value may
  /// be a dimension (such as "12dip") for a constant height,
  /// fill_parent or match_parent to fill the height of the
  /// screen, or wrap_content to match the height of
  /// the content of the drop down.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
  /// This constant is deprecated starting from API Level 8 and
  /// is replaced by {@code match_parent}.</td></tr>
  /// <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
  /// Introduced in API Level 8.</td></tr>
  /// <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the height of the content.</td></tr>
  /// </table>
  static const dropDownHeight = 16843395;

  /// from: static public final int dropDownHintAppearance
  ///
  /// Default style for drop down hints.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dropDownHintAppearance = 16842888;

  /// from: static public final int dropDownHorizontalOffset
  ///
  /// Amount of pixels by which the drop down should be offset horizontally.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const dropDownHorizontalOffset = 16843436;

  /// from: static public final int dropDownItemStyle
  ///
  /// Default style for drop down items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dropDownItemStyle = 16842886;

  /// from: static public final int dropDownListViewStyle
  ///
  /// Default ListView style for drop downs.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dropDownListViewStyle = 16842861;

  /// from: static public final int dropDownSelector
  ///
  /// Selector in a drop down list.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const dropDownSelector = 16843125;

  /// from: static public final int dropDownSpinnerStyle
  ///
  /// Default dropdown Spinner style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const dropDownSpinnerStyle = 16843478;

  /// from: static public final int dropDownVerticalOffset
  ///
  /// Amount of pixels by which the drop down should be offset vertically.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const dropDownVerticalOffset = 16843437;

  /// from: static public final int dropDownWidth
  ///
  /// Specifies the basic width of the dropdown. Its value may
  /// be a dimension (such as "12dip") for a constant width,
  /// fill_parent or match_parent to match the width of the
  /// screen, or wrap_content to match the width of
  /// the anchored view.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fill the width of the screen.
  /// This constant is deprecated starting from API Level 8 and
  /// is replaced by {@code match_parent}.</td></tr>
  /// <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the width of the screen.
  /// Introduced in API Level 8.</td></tr>
  /// <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the width of its anchor.</td></tr>
  /// </table>
  static const dropDownWidth = 16843362;

  /// from: static public final int duplicateParentState
  ///
  /// When this attribute is set to true, the view gets its drawable state
  /// (focused, pressed, etc.) from its direct parent rather than from itself.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const duplicateParentState = 16842985;

  /// from: static public final int duration
  ///
  /// Amount of time (in milliseconds) to display this frame.
  /// May be an integer value, such as "<code>100</code>".
  static const duration = 16843160;

  /// from: static public final int editTextBackground
  ///
  /// EditText background drawable.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const editTextBackground = 16843602;

  /// from: static public final int editTextColor
  ///
  /// EditText text foreground color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const editTextColor = 16843601;

  /// from: static public final int editTextPreferenceStyle
  ///
  /// Default style for EditTextPreference.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const editTextPreferenceStyle = 16842898;

  /// from: static public final int editTextStyle
  ///
  /// Default EditText style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const editTextStyle = 16842862;

  /// from: static public final int editable
  ///
  /// If set, specifies that this TextView has an input method.
  /// It will be a textual one unless it has otherwise been specified.
  /// For TextView, this is false by default.  For EditText, it is
  /// true by default.
  /// {@deprecated Use inputType instead.}
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const editable = 16843115;

  /// from: static public final int editorExtras
  ///
  /// Reference to an
  /// android.R.styleable\#InputExtras &lt;input-extras&gt;
  /// XML resource containing additional data to
  /// supply to an input method, which is private to the implementation
  /// of the input method.  This simply fills in
  /// the android.view.inputmethod.EditorInfo\#extras EditorInfo.extras field when the input
  /// method is connected.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const editorExtras = 16843300;

  /// from: static public final int elegantTextHeight
  ///
  /// Elegant text height, especially for less compacted complex script text.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const elegantTextHeight = 16843869;

  /// from: static public final int elevation
  ///
  /// base z depth of the view.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const elevation = 16843840;

  /// from: static public final int ellipsize
  ///
  /// Where to ellipsize text.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>end</td><td>3</td><td></td></tr>
  /// <tr><td>marquee</td><td>4</td><td></td></tr>
  /// <tr><td>middle</td><td>2</td><td></td></tr>
  /// <tr><td>none</td><td>0</td><td></td></tr>
  /// <tr><td>start</td><td>1</td><td></td></tr>
  /// </table>
  static const ellipsize = 16842923;

  /// from: static public final int ems
  ///
  /// Makes the TextView be exactly this many ems wide.
  /// May be an integer value, such as "<code>100</code>".
  static const ems = 16843096;

  /// from: static public final int enableVrMode
  ///
  /// Flag declaring that this activity will be run in VR mode, and specifying
  /// the component of the android.service.vr.VrListenerService that should be
  /// bound while this Activity is visible if it is installed and enabled on this device.
  /// This is equivalent to calling android.app.Activity\#setVrModeEnabled with the
  /// the given component name within the Activity that this attribute is set for.
  /// Declaring this will prevent the system from leaving VR mode during an Activity
  /// transtion from one VR activity to another.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const enableVrMode = 16844069;

  /// from: static public final int enabled
  ///
  /// Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
  /// For example, a non-enabled EditText prevents the user from editing the contained text, and
  /// a non-enabled Button prevents the user from tapping the button.
  /// The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
  /// from evaluating state_enabled differ.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const enabled = 16842766;

  /// from: static public final int end
  ///
  /// End inset to apply to the layer. Overrides {@code left} or
  /// {@code right} depending on layout direction.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const end = 16843996;

  /// from: static public final int endColor
  ///
  /// End color of the gradient.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const endColor = 16843166;

  /// from: static public final int endX
  ///
  /// X coordinate of the end point origin of the gradient.
  /// Defined in same coordinates as the path itself
  /// May be a floating point value, such as "<code>1.2</code>".
  static const endX = 16844050;

  /// from: static public final int endY
  ///
  /// Y coordinate of the end point of the gradient within the shape.
  /// Defined in same coordinates as the path itself
  /// May be a floating point value, such as "<code>1.2</code>".
  static const endY = 16844051;

  /// from: static public final int endYear
  ///
  /// {@deprecated Use maxDate instead.}
  /// The last year (inclusive), for example "2010".
  /// {@deprecated Use maxDate instead.}
  /// May be an integer value, such as "<code>100</code>".
  static const endYear = 16843133;

  /// from: static public final int enterFadeDuration
  ///
  /// Amount of time (in milliseconds) to fade in a new state drawable.
  /// May be an integer value, such as "<code>100</code>".
  static const enterFadeDuration = 16843532;

  /// from: static public final int entries
  ///
  /// Reference to an array resource that will populate a list/adapter.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const entries = 16842930;

  /// from: static public final int entryValues
  ///
  /// The array to find the value to save for a preference when an entry from
  /// entries is selected. If a user clicks on the second item in entries, the
  /// second item in this array will be saved to the preference.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const entryValues = 16843256;

  /// from: static public final int eventsInterceptionEnabled
  ///
  /// Defines whether the overlay should intercept the motion events when a gesture
  /// is recognized.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const eventsInterceptionEnabled = 16843389;

  /// from: static public final int excludeClass
  ///
  /// The fully-qualified name of the Class to exclude from this transition.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const excludeClass = 16843842;

  /// from: static public final int excludeFromRecents
  ///
  /// Indicates that an Activity should be excluded from the list of
  /// recently launched activities.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const excludeFromRecents = 16842775;

  /// from: static public final int excludeId
  ///
  /// The id of a target to exclude from this transition.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const excludeId = 16843841;

  /// from: static public final int excludeName
  ///
  /// The transitionName of the target to exclude from this transition.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const excludeName = 16843854;

  /// from: static public final int exitFadeDuration
  ///
  /// Amount of time (in milliseconds) to fade out an old state drawable.
  /// May be an integer value, such as "<code>100</code>".
  static const exitFadeDuration = 16843533;

  /// from: static public final int expandableListPreferredChildIndicatorLeft
  ///
  /// The preferred left bound for an expandable list child's indicator.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const expandableListPreferredChildIndicatorLeft = 16842834;

  /// from: static public final int expandableListPreferredChildIndicatorRight
  ///
  /// The preferred right bound for an expandable list child's indicator.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const expandableListPreferredChildIndicatorRight = 16842835;

  /// from: static public final int expandableListPreferredChildPaddingLeft
  ///
  /// The preferred left padding for an expandable list item that is a child.
  /// If this is not provided, it defaults to the expandableListPreferredItemPaddingLeft.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const expandableListPreferredChildPaddingLeft = 16842831;

  /// from: static public final int expandableListPreferredItemIndicatorLeft
  ///
  /// The preferred left bound for an expandable list item's indicator. For a child-specific
  /// indicator, use expandableListPreferredChildIndicatorLeft.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const expandableListPreferredItemIndicatorLeft = 16842832;

  /// from: static public final int expandableListPreferredItemIndicatorRight
  ///
  /// The preferred right bound for an expandable list item's indicator. For a child-specific
  /// indicator, use expandableListPreferredChildIndicatorRight.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const expandableListPreferredItemIndicatorRight = 16842833;

  /// from: static public final int expandableListPreferredItemPaddingLeft
  ///
  /// The preferred left padding for an expandable list item (for child-specific layouts,
  /// use expandableListPreferredChildPaddingLeft). This takes into account
  /// the indicator that will be shown to next to the item.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const expandableListPreferredItemPaddingLeft = 16842830;

  /// from: static public final int expandableListViewStyle
  ///
  /// Default ExpandableListView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const expandableListViewStyle = 16842863;

  /// from: static public final int expandableListViewWhiteStyle
  ///
  /// ExpandableListView with white background.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const expandableListViewWhiteStyle = 16843446;

  /// from: static public final int exported
  ///
  /// Flag indicating whether the given application component is available
  /// to other applications.  If false, it can only be accessed by
  /// applications with its same user id (which usually means only by
  /// code in its own package).  If true, it can be invoked by external
  /// entities, though which ones can do so may be controlled through
  /// permissions.  The default value is false for activity, receiver,
  /// and service components that do not specify any intent filters; it
  /// is true for activity, receiver, and service components that do
  /// have intent filters (implying they expect to be invoked by others
  /// who do not know their particular component name) and for all
  /// content providers.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const exported = 16842768;

  /// from: static public final int externalService
  ///
  /// If the service is an android.R.attr\#isolatedProcess service, this permits a
  /// client to bind to the service as if it were running it its own package.  The service
  /// must also be android.R.attr\#exported if this flag is set.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const externalService = 16844046;

  /// from: static public final int extraTension
  ///
  /// This is the amount by which to multiply the tension.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const extraTension = 16843371;

  /// from: static public final int extractNativeLibs
  ///
  /// When set installer will extract native libraries. If set to false
  /// libraries in the apk must be stored and page-aligned.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const extractNativeLibs = 16844010;

  /// from: static public final int factor
  ///
  /// This is the amount of deceleration to add when easing in.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const factor = 16843219;

  /// from: static public final int fadeDuration
  ///
  /// Duration, in milliseconds, of the fade out effect after the user is done
  /// drawing a gesture.
  /// May be an integer value, such as "<code>100</code>".
  static const fadeDuration = 16843384;

  /// from: static public final int fadeEnabled
  ///
  /// Defines whether the gesture will automatically fade out after being recognized.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fadeEnabled = 16843390;

  /// from: static public final int fadeOffset
  ///
  /// Time, in milliseconds, to wait before the gesture fades out after the user
  /// is done drawing it.
  /// May be an integer value, such as "<code>100</code>".
  static const fadeOffset = 16843383;

  /// from: static public final int fadeScrollbars
  ///
  /// Defines whether to fade out scrollbars when they are not in use.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fadeScrollbars = 16843434;

  /// from: static public final int fadingEdge
  ///
  /// This attribute is ignored in API level 14
  /// (android.os.Build.VERSION_CODES\#ICE_CREAM_SANDWICH) and higher.
  /// Using fading edges may introduce noticeable performance
  /// degradations and should be used only when required by the application's
  /// visual design. To request fading edges with API level 14 and above,
  /// use the <code>android:requiresFadingEdge</code> attribute instead.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
  /// <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
  /// <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
  /// </table>
  static const fadingEdge = 16842975;

  /// from: static public final int fadingEdgeLength
  ///
  /// Defines the length of the fading edges.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const fadingEdgeLength = 16842976;

  /// from: static public final int fadingMode
  ///
  /// Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
  /// with the Fade transition.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>fade_in</td><td>1</td><td>Fade will only fade appearing items in.</td></tr>
  /// <tr><td>fade_in_out</td><td>3</td><td>Fade will fade appearing items in and disappearing items out.</td></tr>
  /// <tr><td>fade_out</td><td>2</td><td>Fade will only fade disappearing items out.</td></tr>
  /// </table>
  static const fadingMode = 16843745;

  /// from: static public final int fallbackLineSpacing
  ///
  /// Whether to respect the ascent and descent of the fallback fonts that are used in
  /// displaying the text. When true, fallback fonts that end up getting used can increase
  /// the ascent and descent of the lines that they are used on.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fallbackLineSpacing = 16844155;

  /// from: static public final int fastScrollAlwaysVisible
  ///
  /// When set to true, the list will always show the fast scroll interface.
  /// This setting implies fastScrollEnabled.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fastScrollAlwaysVisible = 16843573;

  /// from: static public final int fastScrollEnabled
  ///
  /// Enables the fast scroll thumb that can be dragged to quickly scroll through
  /// the list.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fastScrollEnabled = 16843302;

  /// from: static public final int fastScrollOverlayPosition
  ///
  /// Position of the fast scroll index overlay window.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>aboveThumb</td><td>2</td><td></td></tr>
  /// <tr><td>atThumb</td><td>1</td><td></td></tr>
  /// <tr><td>floating</td><td>0</td><td></td></tr>
  /// </table>
  static const fastScrollOverlayPosition = 16843578;

  /// from: static public final int fastScrollPreviewBackgroundLeft
  ///
  /// Drawable to use as the fast scroll index preview window background
  /// when shown on the left.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fastScrollPreviewBackgroundLeft = 16843575;

  /// from: static public final int fastScrollPreviewBackgroundRight
  ///
  /// Drawable to use as the fast scroll index preview window background
  /// when shown on the right.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fastScrollPreviewBackgroundRight = 16843576;

  /// from: static public final int fastScrollStyle
  ///
  /// Specifies the style of the fast scroll decorations.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fastScrollStyle = 16843767;

  /// from: static public final int fastScrollTextColor
  ///
  /// Text color for the fast scroll index overlay. Make sure it
  /// plays nicely with fastScrollPreviewBackground[Left|Right].
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const fastScrollTextColor = 16843609;

  /// from: static public final int fastScrollThumbDrawable
  ///
  /// Drawable to use as the fast scroll thumb.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fastScrollThumbDrawable = 16843574;

  /// from: static public final int fastScrollTrackDrawable
  ///
  /// Drawable to use as the track for the fast scroll thumb.
  /// This may be null.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fastScrollTrackDrawable = 16843577;

  /// from: static public final int fillAfter
  ///
  /// When set to true, the animation transformation is applied after the animation is
  /// over. The default value is false. If fillEnabled is not set to true and the
  /// animation is not set on a View, fillAfter is assumed to be true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fillAfter = 16843197;

  /// from: static public final int fillAlpha
  ///
  /// The alpha of the path fill, as a value between 0 (completely transparent)
  /// and 1 (completely opaque).
  /// May be a floating point value, such as "<code>1.2</code>".
  static const fillAlpha = 16843980;

  /// from: static public final int fillBefore
  ///
  /// When set to true or when fillEnabled is not set to true, the animation transformation
  /// is applied before the animation has started. The default value is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fillBefore = 16843196;

  /// from: static public final int fillColor
  ///
  /// The color to fill the path if not defined implies no fill.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const fillColor = 16843780;

  /// from: static public final int fillEnabled
  ///
  /// When set to true, the value of fillBefore is taken into account.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fillEnabled = 16843343;

  /// from: static public final int fillType
  ///
  /// sets the fillType for a path. It is the same as SVG's "fill-rule" properties.
  /// For more details, see https://www.w3.org/TR/SVG/painting.html\#FillRuleProperty.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>evenOdd</td><td>1</td><td></td></tr>
  /// <tr><td>nonZero</td><td>0</td><td></td></tr>
  /// </table>
  static const fillType = 16844062;

  /// from: static public final int fillViewport
  ///
  /// Defines whether the scrollview should stretch its content to fill the viewport.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fillViewport = 16843130;

  /// from: static public final int filter
  ///
  /// Enables or disables bitmap filtering. Filtering is used when the bitmap is
  /// shrunk or stretched to smooth its apperance. Default value is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const filter = 16843035;

  /// from: static public final int filterTouchesWhenObscured
  ///
  /// Specifies whether to filter touches when the view's window is obscured by
  /// another visible window.  When set to true, the view will not receive touches
  /// whenever a toast, dialog or other window appears above the view's window.
  /// Refer to the android.view.View security documentation for more details.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const filterTouchesWhenObscured = 16843460;

  /// from: static public final int fingerprintAuthDrawable
  ///
  /// Icon that should be used to indicate that an app is waiting for a fingerprint scan.
  /// This should be used whenever an app is requesting the user to place a finger on the
  /// fingerprint sensor. It can be combined with other drawables such as colored circles, so
  /// the appearance matches the branding of the app requesting the fingerprint scan.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fingerprintAuthDrawable = 16844008;

  /// from: static public final int finishOnCloseSystemDialogs
  ///
  /// Specify whether an activity should be finished when a "close system
  /// windows" request has been made.  This happens, for example, when
  /// the home key is pressed, when the device is locked, when a system
  /// dialog showing recent applications is displayed, etc.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const finishOnCloseSystemDialogs = 16843431;

  /// from: static public final int finishOnTaskLaunch
  ///
  /// Specify whether an activity should be finished when its task is
  /// brought to the foreground by relaunching from the home screen.
  /// If both this option and android.R.attr\#allowTaskReparenting are
  /// specified, the finish trumps the affinity: the affinity will be
  /// ignored and the activity simply finished.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const finishOnTaskLaunch = 16842772;

  /// from: static public final int firstBaselineToTopHeight
  ///
  /// Distance from the top of the TextView to the first text baseline. If set, this
  /// overrides the value set for paddingTop.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const firstBaselineToTopHeight = 16844157;

  /// from: static public final int firstDayOfWeek
  ///
  /// The first day of week according to java.util.Calendar.
  /// May be an integer value, such as "<code>100</code>".
  static const firstDayOfWeek = 16843581;

  /// from: static public final int fitsSystemWindows
  ///
  /// Boolean internal attribute to adjust view layout based on
  /// system windows such as the status bar.
  /// If true, adjusts the padding of this view to leave space for the system windows.
  /// Will only take effect if this view is in a non-embedded activity.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fitsSystemWindows = 16842973;

  /// from: static public final int flipInterval
  ///
  /// May be an integer value, such as "<code>100</code>".
  static const flipInterval = 16843129;

  /// from: static public final int focusable
  ///
  /// Controls whether a view can take focus.  By default, this is "auto" which lets the
  /// framework determine whether a user can move focus to a view.  By setting this attribute
  /// to true the view is allowed to take focus. By setting it to "false" the view will not
  /// take focus. This value does not impact the behavior of
  /// directly calling android.view.View\#requestFocus, which will
  /// always request focus regardless of this view.  It only impacts where
  /// focus navigation will try to move focus.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>auto</td><td>10</td><td></td></tr>
  /// </table>
  static const focusable = 16842970;

  /// from: static public final int focusableInTouchMode
  ///
  /// Boolean that controls whether a view can take focus while in touch mode.
  /// If this is true for a view, that view can gain focus when clicked on, and can keep
  /// focus if another view is clicked on that doesn't have this attribute set to true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const focusableInTouchMode = 16842971;

  /// from: static public final int focusedByDefault
  ///
  /// Whether this view is a default-focus view.
  /// Only one view per keyboard navigation cluster can have this attribute set to true.
  /// See android.view.View\#setFocusedByDefault(boolean).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const focusedByDefault = 16844100;

  /// from: static public final int focusedMonthDateColor
  ///
  /// @deprecated The color for the dates of the focused month.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const focusedMonthDateColor = 16843587;

  /// from: static public final int font
  ///
  /// The reference to the font file to be used. This should be a file in the res/font folder
  /// and should therefore have an R reference value. E.g. @font/myfont
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const font = 16844082;

  /// from: static public final int fontFamily
  ///
  /// Default font family.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const fontFamily = 16843692;

  /// from: static public final int fontFeatureSettings
  ///
  /// Font feature settings.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const fontFeatureSettings = 16843959;

  /// from: static public final int fontProviderAuthority
  ///
  /// The authority of the Font Provider to be used for the request.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const fontProviderAuthority = 16844112;

  /// from: static public final int fontProviderCerts
  ///
  /// The sets of hashes for the certificates the provider should be signed with. This is
  /// used to verify the identity of the provider, and is only required if the provider is not
  /// part of the system image. This value may point to one list or a list of lists, where each
  /// individual list represents one collection of signature hashes. Refer to your font provider's
  /// documentation for these values.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fontProviderCerts = 16844125;

  /// from: static public final int fontProviderPackage
  ///
  /// The package for the Font Provider to be used for the request. This is used to verify
  /// the identity of the provider.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const fontProviderPackage = 16844119;

  /// from: static public final int fontProviderQuery
  ///
  /// The query to be sent over to the provider. Refer to your font provider's documentation
  /// on the format of this string.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const fontProviderQuery = 16844113;

  /// from: static public final int fontStyle
  ///
  /// The style of the given font file. This will be used when the font is being loaded into
  /// the font stack and will override any style information in the font's header tables. If
  /// unspecified, the value in the font's header tables will be used.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>italic</td><td>1</td><td></td></tr>
  /// <tr><td>normal</td><td>0</td><td></td></tr>
  /// </table>
  static const fontStyle = 16844095;

  /// from: static public final int fontVariationSettings
  ///
  /// The variation settings to be applied to the font. The string should be in the following
  /// format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
  /// used, or the font used does not support variation settings, this attribute needs not be
  /// specified.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const fontVariationSettings = 16844144;

  /// from: static public final int fontWeight
  ///
  /// The weight of the given font file. This will be used when the font is being loaded into
  /// the font stack and will override any weight information in the font's header tables. Must
  /// be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
  /// common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
  /// in the font's header tables will be used.
  /// May be an integer value, such as "<code>100</code>".
  static const fontWeight = 16844083;

  /// from: static public final int footerDividersEnabled
  ///
  /// When set to false, the ListView will not draw the divider before each footer view.
  /// The default value is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const footerDividersEnabled = 16843311;

  /// from: static public final int forceHasOverlappingRendering
  ///
  /// Whether this view has elements that may overlap when drawn. See
  /// android.view.View\#forceHasOverlappingRendering(boolean).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const forceHasOverlappingRendering = 16844065;

  /// from: static public final int foreground
  ///
  /// Defines the drawable to draw over the content. This can be used as an overlay.
  /// The foreground drawable participates in the padding of the content if the gravity
  /// is set to fill.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const foreground = 16843017;

  /// from: static public final int foregroundGravity
  ///
  /// Defines the gravity to apply to the foreground drawable. The gravity defaults
  /// to fill.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
  /// <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
  /// <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
  /// <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
  /// <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
  /// the child clipped to its container's bounds.
  /// The clip will be based on the horizontal gravity: a left gravity will clip the right
  /// edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
  /// <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
  /// the child clipped to its container's bounds.
  /// The clip will be based on the vertical gravity: a top gravity will clip the bottom
  /// edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
  /// <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
  /// <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
  /// <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
  /// </table>
  static const foregroundGravity = 16843264;

  /// from: static public final int foregroundTint
  ///
  /// Tint to apply to the foreground.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const foregroundTint = 16843885;

  /// from: static public final int foregroundTintMode
  ///
  /// Blending mode used to apply the foreground tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const foregroundTintMode = 16843886;

  /// from: static public final int format
  ///
  /// Format string: if specified, the Chronometer will display this
  /// string, with the first "%s" replaced by the current timer value
  /// in "MM:SS" or "H:MM:SS" form.
  /// If no format string is specified, the Chronometer will simply display
  /// "MM:SS" or "H:MM:SS".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const format = 16843013;

  /// from: static public final int format12Hour
  ///
  /// Specifies the formatting pattern used to show the time and/or date
  /// in 12-hour mode. Please refer to android.text.format.DateFormat
  /// for a complete description of accepted formatting patterns.
  /// The default pattern is a locale-appropriate equivalent of "h:mm a".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const format12Hour = 16843722;

  /// from: static public final int format24Hour
  ///
  /// Specifies the formatting pattern used to show the time and/or date
  /// in 24-hour mode. Please refer to android.text.format.DateFormat
  /// for a complete description of accepted formatting patterns.
  /// The default pattern is a locale-appropriate equivalent of "H:mm".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const format24Hour = 16843723;

  /// from: static public final int fraction
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  static const fraction = 16843992;

  /// from: static public final int fragment
  ///
  /// The fragment that is displayed when the user selects this item.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const fragment = 16843491;

  /// from: static public final int fragmentAllowEnterTransitionOverlap
  ///
  /// Sets whether the enter and exit transitions should overlap when transitioning
  /// forward.
  /// Corresponds to android.app.Fragment\#setAllowEnterTransitionOverlap(
  /// boolean)
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentAllowEnterTransitionOverlap = 16843976;

  /// from: static public final int fragmentAllowReturnTransitionOverlap
  ///
  /// Sets whether the enter and exit transitions should overlap when transitioning
  /// because of popping the back stack.
  /// Corresponds to android.app.Fragment\#setAllowReturnTransitionOverlap(
  /// boolean)
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentAllowReturnTransitionOverlap = 16843977;

  /// from: static public final int fragmentCloseEnterAnimation
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentCloseEnterAnimation = 16843495;

  /// from: static public final int fragmentCloseExitAnimation
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentCloseExitAnimation = 16843496;

  /// from: static public final int fragmentEnterTransition
  ///
  /// The Transition that will be used to move Views into the initial scene.
  /// Corresponds to android.app.Fragment\#setEnterTransition(
  /// android.transition.Transition)
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentEnterTransition = 16843971;

  /// from: static public final int fragmentExitTransition
  ///
  /// The Transition that will be used to move Views out of the scene when the
  /// fragment is removed, hidden, or detached when not popping the back stack.
  /// Corresponds to android.app.Fragment\#setExitTransition(
  /// android.transition.Transition)
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentExitTransition = 16843970;

  /// from: static public final int fragmentFadeEnterAnimation
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentFadeEnterAnimation = 16843497;

  /// from: static public final int fragmentFadeExitAnimation
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentFadeExitAnimation = 16843498;

  /// from: static public final int fragmentOpenEnterAnimation
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentOpenEnterAnimation = 16843493;

  /// from: static public final int fragmentOpenExitAnimation
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentOpenExitAnimation = 16843494;

  /// from: static public final int fragmentReenterTransition
  ///
  /// The Transition that will be used to move Views in to the scene when returning due
  /// to popping a back stack.
  /// Corresponds to android.app.Fragment\#setReenterTransition(
  /// android.transition.Transition)
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentReenterTransition = 16843975;

  /// from: static public final int fragmentReturnTransition
  ///
  /// The Transition that will be used to move Views out of the scene when the Fragment is
  /// preparing to be removed, hidden, or detached because of popping the back stack.
  /// Corresponds to android.app.Fragment\#setReturnTransition(
  /// android.transition.Transition)
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentReturnTransition = 16843973;

  /// from: static public final int fragmentSharedElementEnterTransition
  ///
  /// The Transition that will be used for shared elements transferred into the content
  /// Scene.
  /// Corresponds to android.app.Fragment\#setSharedElementEnterTransition(
  /// android.transition.Transition)
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentSharedElementEnterTransition = 16843972;

  /// from: static public final int fragmentSharedElementReturnTransition
  ///
  /// The Transition that will be used for shared elements transferred back during a
  /// pop of the back stack. This Transition acts in the leaving Fragment.
  /// Corresponds to android.app.Fragment\#setSharedElementReturnTransition(
  /// android.transition.Transition)
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fragmentSharedElementReturnTransition = 16843974;

  /// from: static public final int freezesText
  ///
  /// If set, the text view will include its current complete text
  /// inside of its frozen icicle in addition to meta-data such as
  /// the current cursor position.  By default this is disabled;
  /// it can be useful when the contents of a text view is not stored
  /// in a persistent place such as a content provider. For
  /// android.widget.EditText it is always enabled, regardless
  /// of the value of the attribute.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const freezesText = 16843116;

  /// from: static public final int fromAlpha
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  static const fromAlpha = 16843210;

  /// from: static public final int fromDegrees
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  static const fromDegrees = 16843187;

  /// from: static public final int fromId
  ///
  /// Keyframe identifier for the starting state.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fromId = 16843850;

  /// from: static public final int fromScene
  ///
  /// The originating scene in this scene change.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const fromScene = 16843741;

  /// from: static public final int fromXDelta
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const fromXDelta = 16843206;

  /// from: static public final int fromXScale
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const fromXScale = 16843202;

  /// from: static public final int fromYDelta
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const fromYDelta = 16843208;

  /// from: static public final int fromYScale
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const fromYScale = 16843204;

  /// from: static public final int fullBackupContent
  ///
  /// Applications will set this in their manifest to opt-in to or out of full app data back-up
  /// and restore. Alternatively they can set it to an xml resource within their app that will
  /// be parsed by the BackupAgent to selectively backup files indicated within that xml.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fullBackupContent = 16844011;

  /// from: static public final int fullBackupOnly
  ///
  /// Indicates that even though the application provides a <code>BackupAgent</code>,
  /// only full-data streaming backup operations are to be performed to save the app's
  /// data.  This lets the app rely on full-data backups while still participating in
  /// the backup and restore process via the BackupAgent's full-data backup APIs.
  /// When this attribute is <code>true</code> the app's BackupAgent overrides of
  /// the onBackup() and onRestore() callbacks can be empty stubs.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const fullBackupOnly = 16843891;

  /// from: static public final int fullBright
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const fullBright = 16842954;

  /// from: static public final int fullDark
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const fullDark = 16842950;

  /// from: static public final int functionalTest
  ///
  /// Flag indicating that an Instrumentation class should be run as a
  /// functional test.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const functionalTest = 16842787;

  /// from: static public final int galleryItemBackground
  ///
  /// The preferred background for gallery items. This should be set
  /// as the background of any Views you provide from the Adapter.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const galleryItemBackground = 16842828;

  /// from: static public final int galleryStyle
  ///
  /// Default Gallery style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const galleryStyle = 16842864;

  /// from: static public final int gestureColor
  ///
  /// Color used to draw a gesture.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const gestureColor = 16843381;

  /// from: static public final int gestureStrokeAngleThreshold
  ///
  /// Minimum curve angle a stroke must contain before it is recognized as a gesture.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const gestureStrokeAngleThreshold = 16843388;

  /// from: static public final int gestureStrokeLengthThreshold
  ///
  /// Minimum length of a stroke before it is recognized as a gesture.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const gestureStrokeLengthThreshold = 16843386;

  /// from: static public final int gestureStrokeSquarenessThreshold
  ///
  /// Squareness threshold of a stroke before it is recognized as a gesture.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const gestureStrokeSquarenessThreshold = 16843387;

  /// from: static public final int gestureStrokeType
  ///
  /// Defines the type of strokes that define a gesture.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>multiple</td><td>1</td><td>A gesture is made of multiple strokes.</td></tr>
  /// <tr><td>single</td><td>0</td><td>A gesture is made of only one stroke.</td></tr>
  /// </table>
  static const gestureStrokeType = 16843385;

  /// from: static public final int gestureStrokeWidth
  ///
  /// Width of the stroke used to draw the gesture.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const gestureStrokeWidth = 16843380;

  /// from: static public final int glEsVersion
  ///
  /// The GLES driver version number needed by an application.
  /// The higher 16 bits represent the major number and the lower 16 bits
  /// represent the minor number. For example for GL 1.2 referring to
  /// 0x00000102, the actual value should be set as 0x00010002.
  /// May be an integer value, such as "<code>100</code>".
  static const glEsVersion = 16843393;

  /// from: static public final int goIcon
  ///
  /// Go button icon.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const goIcon = 16843906;

  /// from: static public final int gradientRadius
  ///
  /// Radius of the gradient, used only with radial gradient. May be an explicit dimension
  /// or a fractional value relative to the shape's minimum dimension.
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const gradientRadius = 16843172;

  /// from: static public final int grantUriPermissions
  ///
  /// If true, the android.content.Context\#grantUriPermission Context.grantUriPermission or corresponding Intent flags can
  /// be used to allow others to access specific URIs in the content
  /// provider, even if they do not have an explicit read or write
  /// permission.  If you are supporting this feature, you must be
  /// sure to call android.content.Context\#revokeUriPermission Context.revokeUriPermission when URIs are deleted from your
  /// provider.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const grantUriPermissions = 16842779;

  /// from: static public final int gravity
  ///
  /// Specifies how an object should position its content, on both the X and Y axes,
  /// within its own bounds.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
  /// <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
  /// <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
  /// <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
  /// <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
  /// the child clipped to its container's bounds.
  /// The clip will be based on the horizontal gravity: a left gravity will clip the right
  /// edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
  /// <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
  /// the child clipped to its container's bounds.
  /// The clip will be based on the vertical gravity: a top gravity will clip the bottom
  /// edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
  /// <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
  /// <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
  /// <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
  /// <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
  /// <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
  /// </table>
  static const gravity = 16842927;

  /// from: static public final int gridViewStyle
  ///
  /// Default GridView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const gridViewStyle = 16842865;

  /// from: static public final int groupIndicator
  ///
  /// Indicator shown beside the group View. This can be a stateful Drawable.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const groupIndicator = 16843019;

  /// from: static public final int hand_hour
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const hand_hour = 16843011;

  /// from: static public final int hand_minute
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const hand_minute = 16843012;

  /// from: static public final int handle
  ///
  /// Identifier for the child that represents the drawer's handle.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const handle = 16843354;

  /// from: static public final int handleProfiling
  ///
  /// Flag indicating that an Instrumentation class wants to take care
  /// of starting/stopping profiling itself, rather than relying on
  /// the default behavior of profiling the complete time it is running.
  /// This allows it to target profiling data at a specific set of
  /// operations.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const handleProfiling = 16842786;

  /// from: static public final int hapticFeedbackEnabled
  ///
  /// Boolean that controls whether a view should have haptic feedback
  /// enabled for events such as long presses.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const hapticFeedbackEnabled = 16843358;

  /// from: static public final int hardwareAccelerated
  ///
  /// Flag indicating whether the application's rendering should be hardware
  /// accelerated if possible. This flag is turned on by default for applications
  /// that are targeting android.os.Build.VERSION_CODES\#ICE_CREAM_SANDWICH
  /// or later.
  ///
  /// This flag can be set on the application and any activity declared
  /// in the manifest. When enabled for the application, each activity is
  /// automatically assumed to be hardware accelerated. This flag can be
  /// overridden in the activity tags, either turning it off (if on for the
  /// application) or on (if off for the application.)
  ///
  /// When this flag is turned on for an activity (either directly or via
  /// the application tag), every window created from the activity, including
  /// the activity's own window, will be hardware accelerated, if possible.
  ///
  /// Please refer to the documentation of
  /// android.view.WindowManager.LayoutParams\#FLAG_HARDWARE_ACCELERATED
  /// for more information on how to control this flag programmatically.
  ///
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const hardwareAccelerated = 16843475;

  /// from: static public final int hasCode
  ///
  /// Indicate whether this application contains code.  If set to false,
  /// there is no code associated with it and thus the system will not
  /// try to load its code when launching components.  The default is true
  /// for normal behavior.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const hasCode = 16842764;

  /// from: static public final int headerAmPmTextAppearance
  ///
  /// The text appearance for the AM/PM header.
  ///@deprecated Use headerTextColor instead.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const headerAmPmTextAppearance = 16843936;

  /// from: static public final int headerBackground
  ///
  /// Default background for the menu header.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const headerBackground = 16843055;

  /// from: static public final int headerDayOfMonthTextAppearance
  ///
  /// The text appearance for the day of month (ex. 28) in the selected date header.
  /// {@deprecated Use headerTextColor instead.}
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const headerDayOfMonthTextAppearance = 16843927;

  /// from: static public final int headerDividersEnabled
  ///
  /// When set to false, the ListView will not draw the divider after each header view.
  /// The default value is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const headerDividersEnabled = 16843310;

  /// from: static public final int headerMonthTextAppearance
  ///
  /// The text appearance for the month (ex. May) in the selected date header.
  /// {@deprecated Use headerTextColor instead.}
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const headerMonthTextAppearance = 16843926;

  /// from: static public final int headerTimeTextAppearance
  ///
  /// The text appearance for the time header.
  ///@deprecated Use headerTextColor instead.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const headerTimeTextAppearance = 16843935;

  /// from: static public final int headerYearTextAppearance
  ///
  /// The text appearance for the year (ex. 2014) in the selected date header.
  /// {@deprecated Use headerTextColor instead.}
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const headerYearTextAppearance = 16843928;

  /// from: static public final int height
  ///
  /// Makes the TextView be exactly this tall.
  /// You could get the same effect by specifying this number in the
  /// layout parameters.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const height = 16843093;

  /// from: static public final int hideOnContentScroll
  ///
  /// Set true to hide the action bar on a vertical nested scroll of content.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const hideOnContentScroll = 16843843;

  /// from: static public final int hint
  ///
  /// Hint text to display when the text is empty.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const hint = 16843088;

  /// from: static public final int homeAsUpIndicator
  ///
  /// Specifies a drawable to use for the 'home as up' indicator.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const homeAsUpIndicator = 16843531;

  /// from: static public final int homeLayout
  ///
  /// Specifies a layout to use for the "home" section of the action bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const homeLayout = 16843549;

  /// from: static public final int horizontalDivider
  ///
  /// Default horizontal divider between rows of menu items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const horizontalDivider = 16843053;

  /// from: static public final int horizontalGap
  ///
  /// Default horizontal gap between keys.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const horizontalGap = 16843327;

  /// from: static public final int horizontalScrollViewStyle
  ///
  /// Default HorizontalScrollView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const horizontalScrollViewStyle = 16843603;

  /// from: static public final int horizontalSpacing
  ///
  /// Defines the default horizontal spacing between columns.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const horizontalSpacing = 16843028;

  /// from: static public final int host
  ///
  /// Specify a URI authority host that is handled, as per
  /// android.content.IntentFilter\#addDataAuthority IntentFilter.addDataAuthority().
  /// _Note: host name matching in the Android framework is
  /// case-sensitive, unlike the formal RFC.  As a result,
  /// host names here should always use lower case letters._
  ///
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const host = 16842792;

  /// from: static public final int hotSpotX
  ///
  /// X coordinate of the icon hot spot.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const hotSpotX = 16844055;

  /// from: static public final int hotSpotY
  ///
  /// Y coordinate of the icon hot spot.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const hotSpotY = 16844056;

  /// from: static public final int hyphenationFrequency
  ///
  /// Frequency of automatic hyphenation.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>full</td><td>2</td><td>Standard amount of hyphenation, useful for running text and for
  /// screens with limited space for text.</td></tr>
  /// <tr><td>none</td><td>0</td><td>No hyphenation.</td></tr>
  /// <tr><td>normal</td><td>1</td><td>Less frequent hyphenation, useful for informal use cases, such
  /// as chat messages.</td></tr>
  /// </table>
  static const hyphenationFrequency = 16843998;

  /// from: static public final int icon
  ///
  /// A Drawable resource providing a graphical representation of its
  /// associated item.  Use with the
  /// application tag (to supply a default icon for all application
  /// components), or with the activity, receiver, service, or instrumentation
  /// tag (to supply a specific icon for that component).  It may also be
  /// used with the intent-filter tag to supply an icon to show to the
  /// user when an activity is being selected based on a particular Intent.
  /// The given icon will be used to display to the user a graphical
  /// representation of its associated component; for example, as the icon
  /// for main activity that is displayed in the launcher.  This must be
  /// a reference to a Drawable resource containing the image definition.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const icon = 16842754;

  /// from: static public final int iconPreview
  ///
  /// The icon to show in the popup preview.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const iconPreview = 16843337;

  /// from: static public final int iconSpaceReserved
  ///
  /// Whether the space for the preference icon view will be reserved. By default, preference
  /// icon view visibility will be set to GONE when there is no icon provided, so the default
  /// value of this attribute is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const iconSpaceReserved = 16844129;

  /// from: static public final int iconTint
  ///
  /// Tint to apply to the icon.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const iconTint = 16844126;

  /// from: static public final int iconTintMode
  ///
  /// Blending mode used to apply the icon tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the icon with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the icon, but with the icon\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the icon. The icon\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the icon.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const iconTintMode = 16844127;

  /// from: static public final int iconifiedByDefault
  ///
  /// The default state of the SearchView. If true, it will be iconified when not in
  /// use and expanded when clicked.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const iconifiedByDefault = 16843514;

  /// from: static public final int id
  ///
  /// Supply an identifier name for this view, to later retrieve it
  /// with android.view.View\#findViewById View.findViewById() or
  /// android.app.Activity\#findViewById Activity.findViewById().
  /// This must be a
  /// resource reference; typically you set this using the
  /// <code>@+</code> syntax to create a new ID resources.
  /// For example: <code>android:id="@+id/my_id"</code> which
  /// allows you to later retrieve the view
  /// with <code>findViewById(R.id.my_id)</code>.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const id = 16842960;

  /// from: static public final int ignoreGravity
  ///
  /// Indicates what view should not be affected by gravity.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const ignoreGravity = 16843263;

  /// from: static public final int imageButtonStyle
  ///
  /// The style resource to use for an ImageButton.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const imageButtonStyle = 16842866;

  /// from: static public final int imageWellStyle
  ///
  /// The style resource to use for an ImageButton that is an image well.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const imageWellStyle = 16842867;

  /// from: static public final int imeActionId
  ///
  /// Supply a value for
  /// android.view.inputmethod.EditorInfo\#actionId EditorInfo.actionId
  /// used when an input method is connected to the text view.
  /// May be an integer value, such as "<code>100</code>".
  static const imeActionId = 16843366;

  /// from: static public final int imeActionLabel
  ///
  /// Supply a value for
  /// android.view.inputmethod.EditorInfo\#actionLabel EditorInfo.actionLabel
  /// used when an input method is connected to the text view.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const imeActionLabel = 16843365;

  /// from: static public final int imeExtractEnterAnimation
  ///
  /// Animation to use when showing the fullscreen extract UI after
  /// it had previously been hidden.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const imeExtractEnterAnimation = 16843368;

  /// from: static public final int imeExtractExitAnimation
  ///
  /// Animation to use when hiding the fullscreen extract UI after
  /// it had previously been shown.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const imeExtractExitAnimation = 16843369;

  /// from: static public final int imeFullscreenBackground
  ///
  /// Background to use for entire input method when it is being
  /// shown in fullscreen mode with the extract view, to ensure
  /// that it completely covers the application.  This allows,
  /// for example, the candidate view to be hidden
  /// while in fullscreen mode without having the application show through
  /// behind it.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const imeFullscreenBackground = 16843308;

  /// from: static public final int imeOptions
  ///
  /// Additional features you can enable in an IME associated with an editor
  /// to improve the integration with your application.  The constants
  /// here correspond to those defined by
  /// android.view.inputmethod.EditorInfo\#imeOptions.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>actionDone</td><td>6</td><td>The action key performs a "done"
  /// operation, closing the soft input method.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_ACTION_DONE.</td></tr>
  /// <tr><td>actionGo</td><td>2</td><td>The action key performs a "go"
  /// operation to take the user to the target of the text they typed.
  /// Typically used, for example, when entering a URL.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_ACTION_GO.</td></tr>
  /// <tr><td>actionNext</td><td>5</td><td>The action key performs a "next"
  /// operation, taking the user to the next field that will accept text.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_ACTION_NEXT.</td></tr>
  /// <tr><td>actionNone</td><td>1</td><td>This editor has no action associated with it.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_ACTION_NONE.</td></tr>
  /// <tr><td>actionPrevious</td><td>7</td><td>The action key performs a "previous"
  /// operation, taking the user to the previous field that will accept text.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_ACTION_PREVIOUS.</td></tr>
  /// <tr><td>actionSearch</td><td>3</td><td>The action key performs a "search"
  /// operation, taking the user to the results of searching for the text
  /// the have typed (in whatever context is appropriate).
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_ACTION_SEARCH.</td></tr>
  /// <tr><td>actionSend</td><td>4</td><td>The action key performs a "send"
  /// operation, delivering the text to its target.  This is typically used
  /// when composing a message.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_ACTION_SEND.</td></tr>
  /// <tr><td>actionUnspecified</td><td>0</td><td>There is no specific action associated with this editor, let the
  /// editor come up with its own if it can.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_NULL.</td></tr>
  /// <tr><td>flagForceAscii</td><td>80000000</td><td>Used to request that the IME should be capable of inputting ASCII
  /// characters.  The intention of this flag is to ensure that the user
  /// can type Roman alphabet characters in a android.widget.TextView
  /// used for, typically, account ID or password input.  It is expected that IMEs
  /// normally are able to input ASCII even without being told so (such IMEs
  /// already respect this flag in a sense), but there could be some cases they
  /// aren't when, for instance, only non-ASCII input languagaes like Arabic,
  /// Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
  /// aware that the flag is not a guarantee, and not all IMEs will respect it.
  /// However, it is strongly recommended for IME authors to respect this flag
  /// especially when their IME could end up with a state that has only non-ASCII
  /// input languages enabled.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_FLAG_FORCE_ASCII.</td></tr>
  /// <tr><td>flagNavigateNext</td><td>8000000</td><td>Used to specify that there is something
  /// interesting that a forward navigation can focus on. This is like using
  /// actionNext, except allows the IME to be multiline (with
  /// an enter key) as well as provide forward navigation.  Note that some
  /// IMEs may not be able to do this, especially when running on a small
  /// screen where there is little space.  In that case it does not need to
  /// present a UI for this option.  Like actionNext, if the
  /// user selects the IME's facility to forward navigate, this will show up
  /// in the application at
  /// android.view.inputmethod.InputConnection\#performEditorAction(int) InputConnection.performEditorAction(int).
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_FLAG_NAVIGATE_NEXT.</td></tr>
  /// <tr><td>flagNavigatePrevious</td><td>4000000</td><td>Like flagNavigateNext, but
  /// specifies there is something interesting that a backward navigation
  /// can focus on.  If the user selects the IME's facility to backward
  /// navigate, this will show up in the application as an actionPrevious
  /// at android.view.inputmethod.InputConnection\#performEditorAction(int) InputConnection.performEditorAction(int).
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_FLAG_NO_FULLSCREEN.</td></tr>
  /// <tr><td>flagNoAccessoryAction</td><td>20000000</td><td>Used in conjunction with a custom action, this indicates that the
  /// action should not be available as an accessory button when the
  /// input method is full-screen.
  /// Note that by setting this flag, there can be cases where the action
  /// is simply never available to the user.  Setting this generally means
  /// that you think showing text being edited is more important than the
  /// action you have supplied.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_FLAG_NO_ACCESSORY_ACTION.</td></tr>
  /// <tr><td>flagNoEnterAction</td><td>40000000</td><td>Used in conjunction with a custom action,
  /// this indicates that the action should not be available in-line as
  /// a replacement for the "enter" key.  Typically this is
  /// because the action has such a significant impact or is not recoverable
  /// enough that accidentally hitting it should be avoided, such as sending
  /// a message.    Note that android.widget.TextView will
  /// automatically set this flag for you on multi-line text views.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_FLAG_NO_ENTER_ACTION.</td></tr>
  /// <tr><td>flagNoExtractUi</td><td>10000000</td><td>Used to specify that the IME does not need
  /// to show its extracted text UI.  For input methods that may be fullscreen,
  /// often when in landscape mode, this allows them to be smaller and let part
  /// of the application be shown behind.  Though there will likely be limited
  /// access to the application available from the user, it can make the
  /// experience of a (mostly) fullscreen IME less jarring.  Note that when
  /// this flag is specified the IME may _not_ be set up to be able
  /// to display text, so it should only be used in situations where this is
  /// not needed.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_FLAG_NO_EXTRACT_UI.</td></tr>
  /// <tr><td>flagNoFullscreen</td><td>2000000</td><td>Used to request that the IME never go
  /// into fullscreen mode.  Applications need to be aware that the flag is not
  /// a guarantee, and not all IMEs will respect it.
  /// Corresponds to
  /// android.view.inputmethod.EditorInfo\#IME_FLAG_NO_FULLSCREEN.</td></tr>
  /// <tr><td>flagNoPersonalizedLearning</td><td>1000000</td><td>Used to request that the IME should not update any personalized data such as typing
  /// history and personalized language model based on what the user typed on this text
  /// editing object. Typical use cases are:
  /// <ul>
  /// <li>When the application is in a special mode, where user's activities are expected
  /// to be not recorded in the application's history. Some web browsers and chat
  /// applications may have this kind of modes.</li>
  /// <li>When storing typing history does not make much sense.  Specifying this flag in
  /// typing games may help to avoid typing history from being filled up with words that
  /// the user is less likely to type in their daily life.  Another example is that when
  /// the application already knows that the expected input is not a valid word (e.g. a
  /// promotion code that is not a valid word in any natural language).</li>
  /// </ul>
  /// Applications need to be aware that the flag is not a guarantee, and some IMEs may
  /// not respect it.
  ///</td></tr>
  /// <tr><td>normal</td><td>0</td><td>There are no special semantics associated with this editor.</td></tr>
  /// </table>
  static const imeOptions = 16843364;

  /// from: static public final int imeSubtypeExtraValue
  ///
  /// The extra value of the subtype. This string can be any string and will be passed to
  /// the IME when the framework calls the IME with the subtype.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const imeSubtypeExtraValue = 16843502;

  /// from: static public final int imeSubtypeLocale
  ///
  /// The locale of the subtype. This string should be a locale (for example en_US and fr_FR)
  /// and will be passed to the IME when the framework calls the IME
  /// with the subtype. This is also used by the framework to know the supported locales
  /// of the IME.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const imeSubtypeLocale = 16843500;

  /// from: static public final int imeSubtypeMode
  ///
  /// The mode of the subtype. This string can be a mode (for example, voice and keyboard)
  /// and this string will be passed to the IME when the framework calls the IME with the
  /// subtype.  android.view.inputmethod.InputMethodSubtype\#getLocale() returns the
  /// value specified in this attribute.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const imeSubtypeMode = 16843501;

  /// from: static public final int immersive
  ///
  /// Flag declaring this activity to be 'immersive'; immersive activities
  /// should not be interrupted with other activities or notifications.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const immersive = 16843456;

  /// from: static public final int importantForAccessibility
  ///
  /// Describes whether or not this view is important for accessibility.
  /// If it is important, the view fires accessibility events and is
  /// reported to accessibility services that query the screen. Note:
  /// While not recommended, an accessibility service may decide to
  /// ignore this attribute and operate on all views in the view tree.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>auto</td><td>0</td><td>The system determines whether the view is important for accessibility - default
  /// (recommended).</td></tr>
  /// <tr><td>no</td><td>2</td><td>The view is not important for accessibility.</td></tr>
  /// <tr><td>noHideDescendants</td><td>4</td><td>The view is not important for accessibility, nor are any of its descendant
  /// views.</td></tr>
  /// <tr><td>yes</td><td>1</td><td>The view is important for accessibility.</td></tr>
  /// </table>
  static const importantForAccessibility = 16843690;

  /// from: static public final int importantForAutofill
  ///
  /// Hints the Android System whether the view node associated with this View should be
  /// included in a view structure used for autofill purposes.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>auto</td><td>0</td><td>Let the Android System use its heuristics to determine if the view is important for autofill.</td></tr>
  /// <tr><td>no</td><td>2</td><td>Hint the Android System that this view is *not* important for autofill,
  /// but its children (if any) will be traversed..</td></tr>
  /// <tr><td>noExcludeDescendants</td><td>8</td><td>Hint the Android System that this view is *not* important for autofill,
  /// and its children (if any) will not be traversed.</td></tr>
  /// <tr><td>yes</td><td>1</td><td>Hint the Android System that this view is important for autofill,
  /// and its children (if any) will be traversed..</td></tr>
  /// <tr><td>yesExcludeDescendants</td><td>4</td><td>Hint the Android System that this view is important for autofill,
  /// but its children (if any) will not be traversed.</td></tr>
  /// </table>
  static const importantForAutofill = 16844120;

  /// from: static public final int inAnimation
  ///
  /// Identifier for the animation to use when a view is shown.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const inAnimation = 16843127;

  /// from: static public final int includeFontPadding
  ///
  /// Leave enough room for ascenders and descenders instead of
  /// using the font ascent and descent strictly.  (Normally true).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const includeFontPadding = 16843103;

  /// from: static public final int includeInGlobalSearch
  ///
  /// If provided and <code>true</code>, this searchable activity will be
  /// included in any global lists of search targets.
  /// The default value is <code>false</code>. <i>Optional attribute.</i>.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const includeInGlobalSearch = 16843374;

  /// from: static public final int indeterminate
  ///
  /// Allows to enable the indeterminate mode. In this mode the progress
  /// bar plays an infinite looping animation.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const indeterminate = 16843065;

  /// from: static public final int indeterminateBehavior
  ///
  /// Defines how the indeterminate mode should behave when the progress
  /// reaches max.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>cycle</td><td>2</td><td>Progress keeps the current value and goes back to 0.</td></tr>
  /// <tr><td>repeat</td><td>1</td><td>Progress starts over from 0.</td></tr>
  /// </table>
  static const indeterminateBehavior = 16843070;

  /// from: static public final int indeterminateDrawable
  ///
  /// Drawable used for the indeterminate mode.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const indeterminateDrawable = 16843067;

  /// from: static public final int indeterminateDuration
  ///
  /// Duration of the indeterminate animation.
  /// May be an integer value, such as "<code>100</code>".
  static const indeterminateDuration = 16843069;

  /// from: static public final int indeterminateOnly
  ///
  /// Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const indeterminateOnly = 16843066;

  /// from: static public final int indeterminateProgressStyle
  ///
  /// Specifies a style resource to use for an indeterminate progress spinner.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const indeterminateProgressStyle = 16843544;

  /// from: static public final int indeterminateTint
  ///
  /// Tint to apply to the indeterminate progress indicator.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const indeterminateTint = 16843881;

  /// from: static public final int indeterminateTintMode
  ///
  /// Blending mode used to apply the indeterminate progress indicator tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const indeterminateTintMode = 16843882;

  /// from: static public final int indicatorEnd
  ///
  /// The end bound for an item's indicator. To specify a right bound specific to children,
  /// use childIndicatorEnd.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const indicatorEnd = 16843730;

  /// from: static public final int indicatorLeft
  ///
  /// The left bound for an item's indicator. To specify a left bound specific to children,
  /// use childIndicatorLeft.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const indicatorLeft = 16843021;

  /// from: static public final int indicatorRight
  ///
  /// The right bound for an item's indicator. To specify a right bound specific to children,
  /// use childIndicatorRight.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const indicatorRight = 16843022;

  /// from: static public final int indicatorStart
  ///
  /// The start bound for an item's indicator. To specify a start bound specific to children,
  /// use childIndicatorStart.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const indicatorStart = 16843729;

  /// from: static public final int inflatedId
  ///
  /// Overrides the id of the inflated View with this value.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const inflatedId = 16842995;

  /// from: static public final int initOrder
  ///
  /// Specify the order in which content providers hosted by a process
  /// are instantiated when that process is created.  Not needed unless
  /// you have providers with dependencies between each other, to make
  /// sure that they are created in the order needed by those dependencies.
  /// The value is a simple integer, with higher numbers being
  /// initialized first.
  /// May be an integer value, such as "<code>100</code>".
  static const initOrder = 16842778;

  /// from: static public final int initialKeyguardLayout
  ///
  /// A resource id of a layout.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const initialKeyguardLayout = 16843714;

  /// from: static public final int initialLayout
  ///
  /// A resource id of a layout.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const initialLayout = 16843345;

  /// from: static public final int innerRadius
  ///
  /// Inner radius of the ring. When defined, innerRadiusRatio is ignored.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const innerRadius = 16843359;

  /// from: static public final int innerRadiusRatio
  ///
  /// Inner radius of the ring expressed as a ratio of the ring's width. For instance,
  /// if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
  /// This value is ignored if innerRadius is defined. Default value is 9.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const innerRadiusRatio = 16843163;

  /// from: static public final int inputMethod
  ///
  /// If set, specifies that this TextView should use the specified
  /// input method (specified by fully-qualified class name).
  /// {@deprecated Use inputType instead.}
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const inputMethod = 16843112;

  /// from: static public final int inputType
  ///
  /// The type of data being placed in a text field, used to help an
  /// input method decide how to let the user enter text.  The constants
  /// here correspond to those defined by
  /// android.text.InputType.  Generally you can select
  /// a single value, though some can be combined together as
  /// indicated.  Setting this attribute to anything besides
  /// <var>none</var> also implies that the text is editable.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_DATETIME |
  /// android.text.InputType\#TYPE_DATETIME_VARIATION_DATE.</td></tr>
  /// <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_DATETIME |
  /// android.text.InputType\#TYPE_DATETIME_VARIATION_NORMAL.</td></tr>
  /// <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
  /// <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_NUMBER |
  /// android.text.InputType\#TYPE_NUMBER_VARIATION_NORMAL.</td></tr>
  /// <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
  /// allow a decimal (fractional) number.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_NUMBER |
  /// android.text.InputType\#TYPE_NUMBER_FLAG_DECIMAL.</td></tr>
  /// <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_NUMBER |
  /// android.text.InputType\#TYPE_NUMBER_VARIATION_PASSWORD.</td></tr>
  /// <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
  /// allow a signed number.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_NUMBER |
  /// android.text.InputType\#TYPE_NUMBER_FLAG_SIGNED.</td></tr>
  /// <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_PHONE.</td></tr>
  /// <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_NORMAL.</td></tr>
  /// <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
  /// specify that this field will be doing its own auto-completion and
  /// talking with the input method appropriately.  Corresponds to
  /// android.text.InputType\#TYPE_TEXT_FLAG_AUTO_COMPLETE.</td></tr>
  /// <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
  /// request auto-correction of text being input.  Corresponds to
  /// android.text.InputType\#TYPE_TEXT_FLAG_AUTO_CORRECT.</td></tr>
  /// <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
  /// request capitalization of all characters.  Corresponds to
  /// android.text.InputType\#TYPE_TEXT_FLAG_CAP_CHARACTERS.</td></tr>
  /// <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
  /// request capitalization of the first character of every sentence.  Corresponds to
  /// android.text.InputType\#TYPE_TEXT_FLAG_CAP_SENTENCES.</td></tr>
  /// <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
  /// request capitalization of the first character of every word.  Corresponds to
  /// android.text.InputType\#TYPE_TEXT_FLAG_CAP_WORDS.</td></tr>
  /// <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_EMAIL_ADDRESS.</td></tr>
  /// <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_EMAIL_SUBJECT.</td></tr>
  /// <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_FILTER.</td></tr>
  /// <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
  /// indicate that though the regular text view should not be multiple
  /// lines, the IME should provide multiple lines if it can.  Corresponds to
  /// android.text.InputType\#TYPE_TEXT_FLAG_IME_MULTI_LINE.</td></tr>
  /// <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_LONG_MESSAGE.</td></tr>
  /// <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
  /// allow multiple lines of text in the field.  If this flag is not set,
  /// the text field will be constrained to a single line.  Corresponds to
  /// android.text.InputType\#TYPE_TEXT_FLAG_MULTI_LINE.</td></tr>
  /// <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
  /// indicate that the IME should not show any
  /// dictionary-based word suggestions.  Corresponds to
  /// android.text.InputType\#TYPE_TEXT_FLAG_NO_SUGGESTIONS.</td></tr>
  /// <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_PASSWORD.</td></tr>
  /// <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_PERSON_NAME.</td></tr>
  /// <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
  /// field in a contact entry.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_PHONETIC.</td></tr>
  /// <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_POSTAL_ADDRESS.</td></tr>
  /// <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_SHORT_MESSAGE.</td></tr>
  /// <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_URI.</td></tr>
  /// <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD.</td></tr>
  /// <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT.</td></tr>
  /// <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS.</td></tr>
  /// <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_TEXT |
  /// android.text.InputType\#TYPE_TEXT_VARIATION_WEB_PASSWORD.</td></tr>
  /// <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
  /// android.text.InputType\#TYPE_CLASS_DATETIME |
  /// android.text.InputType\#TYPE_DATETIME_VARIATION_TIME.</td></tr>
  /// </table>
  static const inputType = 16843296;

  /// from: static public final int inset
  ///
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const inset = 16843957;

  /// from: static public final int insetBottom
  ///
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const insetBottom = 16843194;

  /// from: static public final int insetLeft
  ///
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const insetLeft = 16843191;

  /// from: static public final int insetRight
  ///
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const insetRight = 16843192;

  /// from: static public final int insetTop
  ///
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const insetTop = 16843193;

  /// from: static public final int installLocation
  ///
  /// The default install location defined by an application.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>auto</td><td>0</td><td>Let the system decide ideal install location</td></tr>
  /// <tr><td>internalOnly</td><td>1</td><td>Explicitly request to be installed on internal phone storage
  /// only.</td></tr>
  /// <tr><td>preferExternal</td><td>2</td><td>Prefer to be installed on SD card. There is no guarantee that
  /// the system will honor this request. The application might end
  /// up being installed on internal storage if external media
  /// is unavailable or too full.</td></tr>
  /// </table>
  static const installLocation = 16843447;

  /// from: static public final int interpolator
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const interpolator = 16843073;

  /// from: static public final int isAlwaysSyncable
  ///
  /// Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
  /// for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.
  /// Defaults to false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isAlwaysSyncable = 16843571;

  /// from: static public final int isAsciiCapable
  ///
  /// Set to true if this subtype is ASCII capable. If the subtype is ASCII
  /// capable, it should guarantee that the user can input ASCII characters with
  /// this subtype. This is important because many password fields only allow
  /// ASCII-characters.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isAsciiCapable = 16843753;

  /// from: static public final int isAuxiliary
  ///
  /// Set true if the subtype is auxiliary.  An auxiliary subtype won't be shown in the
  /// input method selection list in the settings app.
  /// InputMethodManager\#switchToLastInputMethod will ignore auxiliary subtypes when it
  /// chooses a target subtype.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isAuxiliary = 16843647;

  /// from: static public final int isDefault
  ///
  /// Set to true in all of the configurations for which this input
  /// method should be considered an option as the default.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isDefault = 16843297;

  /// from: static public final int isFeatureSplit
  ///
  /// If set to <code>true</code>, indicates to the platform that this APK is
  /// a 'feature' split and that it implicitly depends on the base APK. This distinguishes
  /// this split APK from a 'configuration' split, which provides resource overrides
  /// for a particular 'feature' split. Only useful when the base APK specifies
  /// <code>android:isolatedSplits="true"</code>.
  /// The default value of this attribute is <code>false</code>.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isFeatureSplit = 16844123;

  /// from: static public final int isGame
  ///
  /// A boolean flag used to indicate if an application is a Game or not.
  /// This information can be used by the system to group together
  /// applications that are classified as games, and display them separately
  /// from the other applications.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isGame = 16843764;

  /// from: static public final int isIndicator
  ///
  /// Whether this rating bar is an indicator (and non-changeable by the user).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isIndicator = 16843079;

  /// from: static public final int isModifier
  ///
  /// Whether this is a modifier key such as Alt or Shift.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isModifier = 16843334;

  /// from: static public final int isRepeatable
  ///
  /// Whether long-pressing on this key will make it repeat.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isRepeatable = 16843336;

  /// from: static public final int isScrollContainer
  ///
  /// Set this if the view will serve as a scrolling container, meaning
  /// that it can be resized to shrink its overall window so that there
  /// will be space for an input method.  If not set, the default
  /// value will be true if "scrollbars" has the vertical scrollbar
  /// set, else it will be false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isScrollContainer = 16843342;

  /// from: static public final int isStatic
  ///
  /// Whether the given RRO is static or not.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isStatic = 16844122;

  /// from: static public final int isSticky
  ///
  /// Whether this is a toggle key.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isSticky = 16843335;

  /// from: static public final int isolatedProcess
  ///
  /// If set to true, this service will run under a special process
  /// that is isolated from the rest of the system.  The only communication
  /// with it is through the Service API (binding and starting).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isolatedProcess = 16843689;

  /// from: static public final int isolatedSplits
  ///
  /// If set to <code>true</code>, indicates to the platform that any split APKs
  /// installed for this application should be loaded into their own Context
  /// objects and not appear in the base application's Context.
  /// The default value of this attribute is <code>false</code>.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const isolatedSplits = 16844107;

  /// from: static public final int itemBackground
  ///
  /// Default background for each menu item.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const itemBackground = 16843056;

  /// from: static public final int itemIconDisabledAlpha
  ///
  /// Default disabled icon alpha for each menu item that shows an icon.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const itemIconDisabledAlpha = 16843057;

  /// from: static public final int itemPadding
  ///
  /// Specifies padding that should be applied to the left and right sides of
  /// system-provided items in the bar.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const itemPadding = 16843565;

  /// from: static public final int itemTextAppearance
  ///
  /// Default appearance of menu item text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const itemTextAppearance = 16843052;

  /// from: static public final int justificationMode
  ///
  /// Mode for justification.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>inter_word</td><td>1</td><td>Justification by stretching word spacing.</td></tr>
  /// <tr><td>none</td><td>0</td><td>No justification.</td></tr>
  /// </table>
  static const justificationMode = 16844135;

  /// from: static public final int keepScreenOn
  ///
  /// Controls whether the view's window should keep the screen on
  /// while visible.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const keepScreenOn = 16843286;

  /// from: static public final int key
  ///
  /// The key to store the Preference value.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const key = 16843240;

  /// from: static public final int keyBackground
  ///
  /// Image for the key. This image needs to be a StateListDrawable, with the following
  /// possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
  /// checkable+checked+pressed.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const keyBackground = 16843315;

  /// from: static public final int keyEdgeFlags
  ///
  /// Key edge flags.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>left</td><td>1</td><td>Key is anchored to the left of the keyboard.</td></tr>
  /// <tr><td>right</td><td>2</td><td>Key is anchored to the right of the keyboard.</td></tr>
  /// </table>
  static const keyEdgeFlags = 16843333;

  /// from: static public final int keyHeight
  ///
  /// Default height of a key, in pixels or percentage of display width.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const keyHeight = 16843326;

  /// from: static public final int keyIcon
  ///
  /// The icon to display on the key instead of the label.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const keyIcon = 16843340;

  /// from: static public final int keyLabel
  ///
  /// The label to display on the key.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const keyLabel = 16843339;

  /// from: static public final int keyOutputText
  ///
  /// The string of characters to output when this key is pressed.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const keyOutputText = 16843338;

  /// from: static public final int keyPreviewHeight
  ///
  /// Height of the key press feedback popup.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const keyPreviewHeight = 16843321;

  /// from: static public final int keyPreviewLayout
  ///
  /// Layout resource for key press feedback.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const keyPreviewLayout = 16843319;

  /// from: static public final int keyPreviewOffset
  ///
  /// Vertical offset of the key press feedback from the key.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const keyPreviewOffset = 16843320;

  /// from: static public final int keySet
  ///
  /// Groups signing keys into a {@code KeySet} for easier reference in
  /// other APIs. However, currently no APIs use this.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  /// May be an integer value, such as "<code>100</code>".
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const keySet = 16843739;

  /// from: static public final int keyTextColor
  ///
  /// Color to use for the label in a key.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const keyTextColor = 16843318;

  /// from: static public final int keyTextSize
  ///
  /// Size of the text for character keys.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const keyTextSize = 16843316;

  /// from: static public final int keyWidth
  ///
  /// Default width of a key, in pixels or percentage of display width.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const keyWidth = 16843325;

  /// from: static public final int keyboardLayout
  ///
  /// The key character map file resource.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const keyboardLayout = 16843691;

  /// from: static public final int keyboardMode
  ///
  /// Mode of the keyboard. If the mode doesn't match the
  /// requested keyboard mode, the row will be skipped.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const keyboardMode = 16843341;

  /// from: static public final int keyboardNavigationCluster
  ///
  /// Whether this view is a root of a keyboard navigation cluster.
  /// See android.view.View\#setKeyboardNavigationCluster(boolean).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const keyboardNavigationCluster = 16844096;

  /// from: static public final int keycode
  ///
  /// This enum provides the same keycode values as can be found in
  /// android.view.KeyEvent.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>KEYCODE_0</td><td>7</td><td></td></tr>
  /// <tr><td>KEYCODE_1</td><td>8</td><td></td></tr>
  /// <tr><td>KEYCODE_11</td><td>e3</td><td></td></tr>
  /// <tr><td>KEYCODE_12</td><td>e4</td><td></td></tr>
  /// <tr><td>KEYCODE_2</td><td>9</td><td></td></tr>
  /// <tr><td>KEYCODE_3</td><td>a</td><td></td></tr>
  /// <tr><td>KEYCODE_3D_MODE</td><td>ce</td><td></td></tr>
  /// <tr><td>KEYCODE_4</td><td>b</td><td></td></tr>
  /// <tr><td>KEYCODE_5</td><td>c</td><td></td></tr>
  /// <tr><td>KEYCODE_6</td><td>d</td><td></td></tr>
  /// <tr><td>KEYCODE_7</td><td>e</td><td></td></tr>
  /// <tr><td>KEYCODE_8</td><td>f</td><td></td></tr>
  /// <tr><td>KEYCODE_9</td><td>10</td><td></td></tr>
  /// <tr><td>KEYCODE_A</td><td>1d</td><td></td></tr>
  /// <tr><td>KEYCODE_ALL_APPS</td><td>11c</td><td></td></tr>
  /// <tr><td>KEYCODE_ALT_LEFT</td><td>39</td><td></td></tr>
  /// <tr><td>KEYCODE_ALT_RIGHT</td><td>3a</td><td></td></tr>
  /// <tr><td>KEYCODE_APOSTROPHE</td><td>4b</td><td></td></tr>
  /// <tr><td>KEYCODE_APP_SWITCH</td><td>bb</td><td></td></tr>
  /// <tr><td>KEYCODE_ASSIST</td><td>db</td><td></td></tr>
  /// <tr><td>KEYCODE_AT</td><td>4d</td><td></td></tr>
  /// <tr><td>KEYCODE_AVR_INPUT</td><td>b6</td><td></td></tr>
  /// <tr><td>KEYCODE_AVR_POWER</td><td>b5</td><td></td></tr>
  /// <tr><td>KEYCODE_B</td><td>1e</td><td></td></tr>
  /// <tr><td>KEYCODE_BACK</td><td>4</td><td></td></tr>
  /// <tr><td>KEYCODE_BACKSLASH</td><td>49</td><td></td></tr>
  /// <tr><td>KEYCODE_BOOKMARK</td><td>ae</td><td></td></tr>
  /// <tr><td>KEYCODE_BREAK</td><td>79</td><td></td></tr>
  /// <tr><td>KEYCODE_BRIGHTNESS_DOWN</td><td>dc</td><td></td></tr>
  /// <tr><td>KEYCODE_BRIGHTNESS_UP</td><td>dd</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_1</td><td>bc</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_10</td><td>c5</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_11</td><td>c6</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_12</td><td>c7</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_13</td><td>c8</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_14</td><td>c9</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_15</td><td>ca</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_16</td><td>cb</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_2</td><td>bd</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_3</td><td>be</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_4</td><td>bf</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_5</td><td>c0</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_6</td><td>c1</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_7</td><td>c2</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_8</td><td>c3</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_9</td><td>c4</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_A</td><td>60</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_B</td><td>61</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_C</td><td>62</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_L1</td><td>66</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_L2</td><td>68</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_MODE</td><td>6e</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_R1</td><td>67</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_R2</td><td>69</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_SELECT</td><td>6d</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_START</td><td>6c</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_THUMBL</td><td>6a</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_THUMBR</td><td>6b</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_X</td><td>63</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_Y</td><td>64</td><td></td></tr>
  /// <tr><td>KEYCODE_BUTTON_Z</td><td>65</td><td></td></tr>
  /// <tr><td>KEYCODE_C</td><td>1f</td><td></td></tr>
  /// <tr><td>KEYCODE_CALCULATOR</td><td>d2</td><td></td></tr>
  /// <tr><td>KEYCODE_CALENDAR</td><td>d0</td><td></td></tr>
  /// <tr><td>KEYCODE_CALL</td><td>5</td><td></td></tr>
  /// <tr><td>KEYCODE_CAMERA</td><td>1b</td><td></td></tr>
  /// <tr><td>KEYCODE_CAPS_LOCK</td><td>73</td><td></td></tr>
  /// <tr><td>KEYCODE_CAPTIONS</td><td>af</td><td></td></tr>
  /// <tr><td>KEYCODE_CHANNEL_DOWN</td><td>a7</td><td></td></tr>
  /// <tr><td>KEYCODE_CHANNEL_UP</td><td>a6</td><td></td></tr>
  /// <tr><td>KEYCODE_CLEAR</td><td>1c</td><td></td></tr>
  /// <tr><td>KEYCODE_COMMA</td><td>37</td><td></td></tr>
  /// <tr><td>KEYCODE_CONTACTS</td><td>cf</td><td></td></tr>
  /// <tr><td>KEYCODE_COPY</td><td>116</td><td></td></tr>
  /// <tr><td>KEYCODE_CTRL_LEFT</td><td>71</td><td></td></tr>
  /// <tr><td>KEYCODE_CTRL_RIGHT</td><td>72</td><td></td></tr>
  /// <tr><td>KEYCODE_CUT</td><td>115</td><td></td></tr>
  /// <tr><td>KEYCODE_D</td><td>20</td><td></td></tr>
  /// <tr><td>KEYCODE_DEL</td><td>43</td><td></td></tr>
  /// <tr><td>KEYCODE_DPAD_CENTER</td><td>17</td><td></td></tr>
  /// <tr><td>KEYCODE_DPAD_DOWN</td><td>14</td><td></td></tr>
  /// <tr><td>KEYCODE_DPAD_DOWN_LEFT</td><td>10d</td><td></td></tr>
  /// <tr><td>KEYCODE_DPAD_DOWN_RIGHT</td><td>10f</td><td></td></tr>
  /// <tr><td>KEYCODE_DPAD_LEFT</td><td>15</td><td></td></tr>
  /// <tr><td>KEYCODE_DPAD_RIGHT</td><td>16</td><td></td></tr>
  /// <tr><td>KEYCODE_DPAD_UP</td><td>13</td><td></td></tr>
  /// <tr><td>KEYCODE_DPAD_UP_LEFT</td><td>10c</td><td></td></tr>
  /// <tr><td>KEYCODE_DPAD_UP_RIGHT</td><td>10e</td><td></td></tr>
  /// <tr><td>KEYCODE_DVR</td><td>ad</td><td></td></tr>
  /// <tr><td>KEYCODE_E</td><td>21</td><td></td></tr>
  /// <tr><td>KEYCODE_EISU</td><td>d4</td><td></td></tr>
  /// <tr><td>KEYCODE_ENDCALL</td><td>6</td><td></td></tr>
  /// <tr><td>KEYCODE_ENTER</td><td>42</td><td></td></tr>
  /// <tr><td>KEYCODE_ENVELOPE</td><td>41</td><td></td></tr>
  /// <tr><td>KEYCODE_EQUALS</td><td>46</td><td></td></tr>
  /// <tr><td>KEYCODE_ESCAPE</td><td>6f</td><td></td></tr>
  /// <tr><td>KEYCODE_EXPLORER</td><td>40</td><td></td></tr>
  /// <tr><td>KEYCODE_F</td><td>22</td><td></td></tr>
  /// <tr><td>KEYCODE_F1</td><td>83</td><td></td></tr>
  /// <tr><td>KEYCODE_F10</td><td>8c</td><td></td></tr>
  /// <tr><td>KEYCODE_F11</td><td>8d</td><td></td></tr>
  /// <tr><td>KEYCODE_F12</td><td>8e</td><td></td></tr>
  /// <tr><td>KEYCODE_F2</td><td>84</td><td></td></tr>
  /// <tr><td>KEYCODE_F3</td><td>85</td><td></td></tr>
  /// <tr><td>KEYCODE_F4</td><td>86</td><td></td></tr>
  /// <tr><td>KEYCODE_F5</td><td>87</td><td></td></tr>
  /// <tr><td>KEYCODE_F6</td><td>88</td><td></td></tr>
  /// <tr><td>KEYCODE_F7</td><td>89</td><td></td></tr>
  /// <tr><td>KEYCODE_F8</td><td>8a</td><td></td></tr>
  /// <tr><td>KEYCODE_F9</td><td>8b</td><td></td></tr>
  /// <tr><td>KEYCODE_FOCUS</td><td>50</td><td></td></tr>
  /// <tr><td>KEYCODE_FORWARD</td><td>7d</td><td></td></tr>
  /// <tr><td>KEYCODE_FORWARD_DEL</td><td>70</td><td></td></tr>
  /// <tr><td>KEYCODE_FUNCTION</td><td>77</td><td></td></tr>
  /// <tr><td>KEYCODE_G</td><td>23</td><td></td></tr>
  /// <tr><td>KEYCODE_GRAVE</td><td>44</td><td></td></tr>
  /// <tr><td>KEYCODE_GUIDE</td><td>ac</td><td></td></tr>
  /// <tr><td>KEYCODE_H</td><td>24</td><td></td></tr>
  /// <tr><td>KEYCODE_HEADSETHOOK</td><td>4f</td><td></td></tr>
  /// <tr><td>KEYCODE_HELP</td><td>103</td><td></td></tr>
  /// <tr><td>KEYCODE_HENKAN</td><td>d6</td><td></td></tr>
  /// <tr><td>KEYCODE_HOME</td><td>3</td><td></td></tr>
  /// <tr><td>KEYCODE_I</td><td>25</td><td></td></tr>
  /// <tr><td>KEYCODE_INFO</td><td>a5</td><td></td></tr>
  /// <tr><td>KEYCODE_INSERT</td><td>7c</td><td></td></tr>
  /// <tr><td>KEYCODE_J</td><td>26</td><td></td></tr>
  /// <tr><td>KEYCODE_K</td><td>27</td><td></td></tr>
  /// <tr><td>KEYCODE_KANA</td><td>da</td><td></td></tr>
  /// <tr><td>KEYCODE_KATAKANA_HIRAGANA</td><td>d7</td><td></td></tr>
  /// <tr><td>KEYCODE_L</td><td>28</td><td></td></tr>
  /// <tr><td>KEYCODE_LANGUAGE_SWITCH</td><td>cc</td><td></td></tr>
  /// <tr><td>KEYCODE_LAST_CHANNEL</td><td>e5</td><td></td></tr>
  /// <tr><td>KEYCODE_LEFT_BRACKET</td><td>47</td><td></td></tr>
  /// <tr><td>KEYCODE_M</td><td>29</td><td></td></tr>
  /// <tr><td>KEYCODE_MANNER_MODE</td><td>cd</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_AUDIO_TRACK</td><td>de</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_CLOSE</td><td>80</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_EJECT</td><td>81</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_FAST_FORWARD</td><td>5a</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_NEXT</td><td>57</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_PAUSE</td><td>7f</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_PLAY</td><td>7e</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_PLAY_PAUSE</td><td>55</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_PREVIOUS</td><td>58</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_RECORD</td><td>82</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_REWIND</td><td>59</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_SKIP_BACKWARD</td><td>111</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_SKIP_FORWARD</td><td>110</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_SLEEP</td><td>df</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_STEP_BACKWARD</td><td>113</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_STEP_FORWARD</td><td>112</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_STOP</td><td>56</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_TOP_MENU</td><td>e2</td><td></td></tr>
  /// <tr><td>KEYCODE_MEDIA_WAKEUP</td><td>e0</td><td></td></tr>
  /// <tr><td>KEYCODE_MENU</td><td>52</td><td></td></tr>
  /// <tr><td>KEYCODE_META_LEFT</td><td>75</td><td></td></tr>
  /// <tr><td>KEYCODE_META_RIGHT</td><td>76</td><td></td></tr>
  /// <tr><td>KEYCODE_MINUS</td><td>45</td><td></td></tr>
  /// <tr><td>KEYCODE_MOVE_END</td><td>7b</td><td></td></tr>
  /// <tr><td>KEYCODE_MOVE_HOME</td><td>7a</td><td></td></tr>
  /// <tr><td>KEYCODE_MUHENKAN</td><td>d5</td><td></td></tr>
  /// <tr><td>KEYCODE_MUSIC</td><td>d1</td><td></td></tr>
  /// <tr><td>KEYCODE_MUTE</td><td>5b</td><td></td></tr>
  /// <tr><td>KEYCODE_N</td><td>2a</td><td></td></tr>
  /// <tr><td>KEYCODE_NAVIGATE_IN</td><td>106</td><td></td></tr>
  /// <tr><td>KEYCODE_NAVIGATE_NEXT</td><td>105</td><td></td></tr>
  /// <tr><td>KEYCODE_NAVIGATE_OUT</td><td>107</td><td></td></tr>
  /// <tr><td>KEYCODE_NAVIGATE_PREVIOUS</td><td>104</td><td></td></tr>
  /// <tr><td>KEYCODE_NOTIFICATION</td><td>53</td><td></td></tr>
  /// <tr><td>KEYCODE_NUM</td><td>4e</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_0</td><td>90</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_1</td><td>91</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_2</td><td>92</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_3</td><td>93</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_4</td><td>94</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_5</td><td>95</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_6</td><td>96</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_7</td><td>97</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_8</td><td>98</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_9</td><td>99</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_ADD</td><td>9d</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_COMMA</td><td>9f</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_DIVIDE</td><td>9a</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_DOT</td><td>9e</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_ENTER</td><td>a0</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_EQUALS</td><td>a1</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_LEFT_PAREN</td><td>a2</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_MULTIPLY</td><td>9b</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_RIGHT_PAREN</td><td>a3</td><td></td></tr>
  /// <tr><td>KEYCODE_NUMPAD_SUBTRACT</td><td>9c</td><td></td></tr>
  /// <tr><td>KEYCODE_NUM_LOCK</td><td>8f</td><td></td></tr>
  /// <tr><td>KEYCODE_O</td><td>2b</td><td></td></tr>
  /// <tr><td>KEYCODE_P</td><td>2c</td><td></td></tr>
  /// <tr><td>KEYCODE_PAGE_DOWN</td><td>5d</td><td></td></tr>
  /// <tr><td>KEYCODE_PAGE_UP</td><td>5c</td><td></td></tr>
  /// <tr><td>KEYCODE_PAIRING</td><td>e1</td><td></td></tr>
  /// <tr><td>KEYCODE_PASTE</td><td>117</td><td></td></tr>
  /// <tr><td>KEYCODE_PERIOD</td><td>38</td><td></td></tr>
  /// <tr><td>KEYCODE_PICTSYMBOLS</td><td>5e</td><td></td></tr>
  /// <tr><td>KEYCODE_PLUS</td><td>51</td><td></td></tr>
  /// <tr><td>KEYCODE_POUND</td><td>12</td><td></td></tr>
  /// <tr><td>KEYCODE_POWER</td><td>1a</td><td></td></tr>
  /// <tr><td>KEYCODE_PROG_BLUE</td><td>ba</td><td></td></tr>
  /// <tr><td>KEYCODE_PROG_GRED</td><td>b7</td><td></td></tr>
  /// <tr><td>KEYCODE_PROG_GREEN</td><td>b8</td><td></td></tr>
  /// <tr><td>KEYCODE_PROG_YELLOW</td><td>b9</td><td></td></tr>
  /// <tr><td>KEYCODE_Q</td><td>2d</td><td></td></tr>
  /// <tr><td>KEYCODE_R</td><td>2e</td><td></td></tr>
  /// <tr><td>KEYCODE_REFRESH</td><td>11d</td><td></td></tr>
  /// <tr><td>KEYCODE_RIGHT_BRACKET</td><td>48</td><td></td></tr>
  /// <tr><td>KEYCODE_RO</td><td>d9</td><td></td></tr>
  /// <tr><td>KEYCODE_S</td><td>2f</td><td></td></tr>
  /// <tr><td>KEYCODE_SCROLL_LOCK</td><td>74</td><td></td></tr>
  /// <tr><td>KEYCODE_SEARCH</td><td>54</td><td></td></tr>
  /// <tr><td>KEYCODE_SEMICOLON</td><td>4a</td><td></td></tr>
  /// <tr><td>KEYCODE_SETTINGS</td><td>b0</td><td></td></tr>
  /// <tr><td>KEYCODE_SHIFT_LEFT</td><td>3b</td><td></td></tr>
  /// <tr><td>KEYCODE_SHIFT_RIGHT</td><td>3c</td><td></td></tr>
  /// <tr><td>KEYCODE_SLASH</td><td>4c</td><td></td></tr>
  /// <tr><td>KEYCODE_SOFT_LEFT</td><td>1</td><td></td></tr>
  /// <tr><td>KEYCODE_SOFT_RIGHT</td><td>2</td><td></td></tr>
  /// <tr><td>KEYCODE_SOFT_SLEEP</td><td>114</td><td></td></tr>
  /// <tr><td>KEYCODE_SPACE</td><td>3e</td><td></td></tr>
  /// <tr><td>KEYCODE_STAR</td><td>11</td><td></td></tr>
  /// <tr><td>KEYCODE_STB_INPUT</td><td>b4</td><td></td></tr>
  /// <tr><td>KEYCODE_STB_POWER</td><td>b3</td><td></td></tr>
  /// <tr><td>KEYCODE_STEM_1</td><td>109</td><td></td></tr>
  /// <tr><td>KEYCODE_STEM_2</td><td>10a</td><td></td></tr>
  /// <tr><td>KEYCODE_STEM_3</td><td>10b</td><td></td></tr>
  /// <tr><td>KEYCODE_STEM_PRIMARY</td><td>108</td><td></td></tr>
  /// <tr><td>KEYCODE_SWITCH_CHARSET</td><td>5f</td><td></td></tr>
  /// <tr><td>KEYCODE_SYM</td><td>3f</td><td></td></tr>
  /// <tr><td>KEYCODE_SYSRQ</td><td>78</td><td></td></tr>
  /// <tr><td>KEYCODE_SYSTEM_NAVIGATION_DOWN</td><td>119</td><td></td></tr>
  /// <tr><td>KEYCODE_SYSTEM_NAVIGATION_LEFT</td><td>11a</td><td></td></tr>
  /// <tr><td>KEYCODE_SYSTEM_NAVIGATION_RIGHT</td><td>11b</td><td></td></tr>
  /// <tr><td>KEYCODE_SYSTEM_NAVIGATION_UP</td><td>118</td><td></td></tr>
  /// <tr><td>KEYCODE_T</td><td>30</td><td></td></tr>
  /// <tr><td>KEYCODE_TAB</td><td>3d</td><td></td></tr>
  /// <tr><td>KEYCODE_TV</td><td>aa</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_ANTENNA_CABLE</td><td>f2</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION</td><td>fc</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN</td><td>fe</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP</td><td>fd</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_CONTENTS_MENU</td><td>100</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_DATA_SERVICE</td><td>e6</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_INPUT</td><td>b2</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_INPUT_COMPONENT_1</td><td>f9</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_INPUT_COMPONENT_2</td><td>fa</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_INPUT_COMPOSITE_1</td><td>f7</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_INPUT_COMPOSITE_2</td><td>f8</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_INPUT_HDMI_1</td><td>f3</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_INPUT_HDMI_2</td><td>f4</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_INPUT_HDMI_3</td><td>f5</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_INPUT_HDMI_4</td><td>f6</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_INPUT_VGA_1</td><td>fb</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_MEDIA_CONTEXT_MENU</td><td>101</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_NETWORK</td><td>f1</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_NUMBER_ENTRY</td><td>ea</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_POWER</td><td>b1</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_RADIO_SERVICE</td><td>e8</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_SATELLITE</td><td>ed</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_SATELLITE_BS</td><td>ee</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_SATELLITE_CS</td><td>ef</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_SATELLITE_SERVICE</td><td>f0</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_TELETEXT</td><td>e9</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_TERRESTRIAL_ANALOG</td><td>eb</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_TERRESTRIAL_DIGITAL</td><td>ec</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_TIMER_PROGRAMMING</td><td>102</td><td></td></tr>
  /// <tr><td>KEYCODE_TV_ZOOM_MODE</td><td>ff</td><td></td></tr>
  /// <tr><td>KEYCODE_U</td><td>31</td><td></td></tr>
  /// <tr><td>KEYCODE_UNKNOWN</td><td>0</td><td></td></tr>
  /// <tr><td>KEYCODE_V</td><td>32</td><td></td></tr>
  /// <tr><td>KEYCODE_VOICE_ASSIST</td><td>e7</td><td></td></tr>
  /// <tr><td>KEYCODE_VOLUME_DOWN</td><td>19</td><td></td></tr>
  /// <tr><td>KEYCODE_VOLUME_MUTE</td><td>a4</td><td></td></tr>
  /// <tr><td>KEYCODE_VOLUME_UP</td><td>18</td><td></td></tr>
  /// <tr><td>KEYCODE_W</td><td>33</td><td></td></tr>
  /// <tr><td>KEYCODE_WINDOW</td><td>ab</td><td></td></tr>
  /// <tr><td>KEYCODE_X</td><td>34</td><td></td></tr>
  /// <tr><td>KEYCODE_Y</td><td>35</td><td></td></tr>
  /// <tr><td>KEYCODE_YEN</td><td>d8</td><td></td></tr>
  /// <tr><td>KEYCODE_Z</td><td>36</td><td></td></tr>
  /// <tr><td>KEYCODE_ZENKAKU_HANKAKU</td><td>d3</td><td></td></tr>
  /// <tr><td>KEYCODE_ZOOM_IN</td><td>a8</td><td></td></tr>
  /// <tr><td>KEYCODE_ZOOM_OUT</td><td>a9</td><td></td></tr>
  /// </table>
  static const keycode = 16842949;

  /// from: static public final int killAfterRestore
  ///
  /// Whether the application in question should be terminated after its
  /// settings have been restored during a full-system restore operation.
  /// Single-package restore operations will never cause the application to
  /// be shut down.  Full-system restore operations typically only occur once,
  /// when the phone is first set up.  Third-party applications will not usually
  /// need to use this attribute.
  /// The default is <code>true</code>, which means that after the application
  /// has finished processing its data during a full-system restore, it will be
  /// terminated.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const killAfterRestore = 16843420;

  /// from: static public final int label
  ///
  /// A user-legible name for the given item.  Use with the
  /// application tag (to supply a default label for all application
  /// components), or with the activity, receiver, service, or instrumentation
  /// tag (to supply a specific label for that component).  It may also be
  /// used with the intent-filter tag to supply a label to show to the
  /// user when an activity is being selected based on a particular Intent.
  /// The given label will be used wherever the user sees information
  /// about its associated component; for example, as the name of a
  /// main activity that is displayed in the launcher.  You should
  /// generally set this to a reference to a string resource, so that
  /// it can be localized, however it is also allowed to supply a plain
  /// string for quick and dirty programming.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const label = 16842753;

  /// from: static public final int labelFor
  ///
  /// Specifies the id of a view for which this view serves as a label for
  /// accessibility purposes. For example, a TextView before an EditText in
  /// the UI usually specifies what infomation is contained in the EditText.
  /// Hence, the TextView is a label for the EditText.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const labelFor = 16843718;

  /// from: static public final int labelTextSize
  ///
  /// Size of the text for custom keys with some text and no icon.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const labelTextSize = 16843317;

  /// from: static public final int languageTag
  ///
  /// The BCP-47 Language Tag of the subtype.  This replaces
  /// android.R.styleable\#InputMethod_Subtype_imeSubtypeLocale.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const languageTag = 16844040;

  /// from: static public final int largeHeap
  ///
  /// Request that your application's processes be created with
  /// a large Dalvik heap.  This applies to _all_ processes
  /// created for the application.  It only applies to the first
  /// application loaded into a process; if using a sharedUserId
  /// to allow multiple applications to use a process, they all must
  /// use this option consistently or will get unpredictable results.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const largeHeap = 16843610;

  /// from: static public final int largeScreens
  ///
  /// Indicates whether the application supports larger screen form-factors.
  /// A large screen is defined as a screen that is significantly larger
  /// than a normal phone screen, and thus may require some special care
  /// on the application's part to make good use of it.  An example would
  /// be a VGA _normal density_ screen, though even larger screens
  /// are certainly possible.  An application that does not support
  /// large screens will be placed as a postage stamp on such a
  /// screen, so that it retains the dimensions it was originally
  /// designed for.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const largeScreens = 16843398;

  /// from: static public final int largestWidthLimitDp
  ///
  /// Starting with android.os.Build.VERSION_CODES\#HONEYCOMB_MR2,
  /// this is the new way to specify the screens an application is
  /// compatible with.  This attribute provides the maximum
  /// "smallest screen width" (as per the -swNNNdp resource configuration)
  /// that the application can work well on.  If this value is smaller than
  /// the "smallest screen width" of the device it is running on, the
  /// application will be forced in to screen compatibility mode with
  /// no way for the user to turn it off. Currently the compatibility mode only
  /// emulates phone screens with a 320dp width, so compatibility mode is not applied if the
  /// value for largestWidthLimitDp is larger than 320.
  /// May be an integer value, such as "<code>100</code>".
  static const largestWidthLimitDp = 16843622;

  /// from: static public final int lastBaselineToBottomHeight
  ///
  /// Distance from the bottom of the TextView to the last text baseline. If set, this
  /// overrides the value set for paddingBottom.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const lastBaselineToBottomHeight = 16844158;

  /// from: static public final int launchMode
  ///
  /// Specify how an activity should be launched.  See the
  /// <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
  /// Stack</a> document for important information on how these options impact
  /// the behavior of your application.
  /// If this attribute is not specified, <code>standard</code> launch
  /// mode will be used.  Note that the particular launch behavior can
  /// be changed in some ways at runtime through the
  /// android.content.Intent flags
  /// android.content.Intent\#FLAG_ACTIVITY_SINGLE_TOP,
  /// android.content.Intent\#FLAG_ACTIVITY_NEW_TASK, and
  /// android.content.Intent\#FLAG_ACTIVITY_MULTIPLE_TASK.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>singleInstance</td><td>3</td><td>Only allow one instance of this activity to ever be
  /// running.  This activity gets a unique task with only itself running
  /// in it; if it is ever launched again with the same Intent, then that
  /// task will be brought forward and its
  /// android.app.Activity\#onNewIntent Activity.onNewIntent()
  /// method called.  If this
  /// activity tries to start a new activity, that new activity will be
  /// launched in a separate task.  See the
  /// <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
  /// Stack</a> document for more details about tasks.</td></tr>
  /// <tr><td>singleTask</td><td>2</td><td>If, when starting the activity, there is already a task running
  /// that starts with this activity, then instead of starting a new
  /// instance the current task is brought to the front.  The existing
  /// instance will receive a call to android.app.Activity\#onNewIntent Activity.onNewIntent()
  /// with the new Intent that is being started, and with the
  /// android.content.Intent\#FLAG_ACTIVITY_BROUGHT_TO_FRONT Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT flag set.  This is a superset
  /// of the singleTop mode, where if there is already an instance
  /// of the activity being started at the top of the stack, it will
  /// receive the Intent as described there (without the
  /// FLAG_ACTIVITY_BROUGHT_TO_FRONT flag set).  See the
  /// <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
  /// Stack</a> document for more details about tasks.</td></tr>
  /// <tr><td>singleTop</td><td>1</td><td>If, when starting the activity, there is already an
  /// instance of the same activity class in the foreground that is
  /// interacting with the user, then
  /// re-use that instance.  This existing instance will receive a call to
  /// android.app.Activity\#onNewIntent Activity.onNewIntent() with
  /// the new Intent that is being started.</td></tr>
  /// <tr><td>standard</td><td>0</td><td>The default mode, which will usually create a new instance of
  /// the activity when it is started, though this behavior may change
  /// with the introduction of other options such as
  /// android.content.Intent\#FLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK.</td></tr>
  /// </table>
  static const launchMode = 16842781;

  /// from: static public final int launchTaskBehindSourceAnimation
  ///
  /// When opening an activity in a new task using Intent.FLAG_ACTIVITY_LAUNCH_BEHIND,
  /// this is the animation that is run on the activity of the old task (which is
  /// already on the screen and then stays on).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const launchTaskBehindSourceAnimation = 16843922;

  /// from: static public final int launchTaskBehindTargetAnimation
  ///
  /// When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
  /// this is the animation that is run on the activity of the new task (which is
  /// entering the screen and then leaving).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const launchTaskBehindTargetAnimation = 16843921;

  /// from: static public final int layerType
  ///
  /// Specifies the type of layer backing this view. The default value is none.
  /// Refer to android.view.View\#setLayerType(int, android.graphics.Paint)
  /// for more information.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>hardware</td><td>2</td><td>Use a hardware layer. Refer to
  /// android.view.View\#setLayerType(int, android.graphics.Paint) for
  /// more information.</td></tr>
  /// <tr><td>none</td><td>0</td><td>Don't use a layer.</td></tr>
  /// <tr><td>software</td><td>1</td><td>Use a software layer. Refer to
  /// android.view.View\#setLayerType(int, android.graphics.Paint) for
  /// more information.</td></tr>
  /// </table>
  static const layerType = 16843604;

  /// from: static public final int layout
  ///
  /// Supply an identifier for the layout resource to inflate when the ViewStub
  /// becomes visible or when forced to do so. The layout resource must be a
  /// valid reference to a layout.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout = 16842994;

  /// from: static public final int layoutAnimation
  ///
  /// Defines the layout animation to use the first time the ViewGroup is laid out.
  /// Layout animations can also be started manually after the first layout.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layoutAnimation = 16842988;

  /// from: static public final int layoutDirection
  ///
  /// Defines the direction of layout drawing. This typically is associated with writing
  /// direction of the language script used. The possible values are "ltr" for Left-to-Right,
  /// "rtl" for Right-to-Left, "locale", and "inherit" from parent view. If there is nothing
  /// to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
  /// used in "en-US". The default for this attribute is "inherit".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>inherit</td><td>2</td><td>Inherit from parent.</td></tr>
  /// <tr><td>locale</td><td>3</td><td>Locale.</td></tr>
  /// <tr><td>ltr</td><td>0</td><td>Left-to-Right.</td></tr>
  /// <tr><td>rtl</td><td>1</td><td>Right-to-Left.</td></tr>
  /// </table>
  static const layoutDirection = 16843698;

  /// from: static public final int layoutMode
  ///
  /// Defines the layout mode of this ViewGroup.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>clipBounds</td><td>0</td><td>Use the children's clip bounds when laying out this container.</td></tr>
  /// <tr><td>opticalBounds</td><td>1</td><td>Use the children's optical bounds when laying out this container.</td></tr>
  /// </table>
  static const layoutMode = 16843738;

  /// from: static public final int layout_above
  ///
  /// Positions the bottom edge of this view above the given anchor view ID.
  /// Accommodates bottom margin of this view and top margin of anchor view.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_above = 16843140;

  /// from: static public final int layout_alignBaseline
  ///
  /// Positions the baseline of this view on the baseline of the given anchor view ID.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_alignBaseline = 16843142;

  /// from: static public final int layout_alignBottom
  ///
  /// Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
  /// Accommodates bottom margin.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_alignBottom = 16843146;

  /// from: static public final int layout_alignEnd
  ///
  /// Makes the end edge of this view match the end edge of the given anchor view ID.
  /// Accommodates end margin.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_alignEnd = 16843706;

  /// from: static public final int layout_alignLeft
  ///
  /// Makes the left edge of this view match the left edge of the given anchor view ID.
  /// Accommodates left margin.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_alignLeft = 16843143;

  /// from: static public final int layout_alignParentBottom
  ///
  /// If true, makes the bottom edge of this view match the bottom edge of the parent.
  /// Accommodates bottom margin.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const layout_alignParentBottom = 16843150;

  /// from: static public final int layout_alignParentEnd
  ///
  /// If true, makes the end edge of this view match the end edge of the parent.
  /// Accommodates end margin.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const layout_alignParentEnd = 16843708;

  /// from: static public final int layout_alignParentLeft
  ///
  /// If true, makes the left edge of this view match the left edge of the parent.
  /// Accommodates left margin.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const layout_alignParentLeft = 16843147;

  /// from: static public final int layout_alignParentRight
  ///
  /// If true, makes the right edge of this view match the right edge of the parent.
  /// Accommodates right margin.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const layout_alignParentRight = 16843149;

  /// from: static public final int layout_alignParentStart
  ///
  /// If true, makes the start edge of this view match the start edge of the parent.
  /// Accommodates start margin.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const layout_alignParentStart = 16843707;

  /// from: static public final int layout_alignParentTop
  ///
  /// If true, makes the top edge of this view match the top edge of the parent.
  /// Accommodates top margin.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const layout_alignParentTop = 16843148;

  /// from: static public final int layout_alignRight
  ///
  /// Makes the right edge of this view match the right edge of the given anchor view ID.
  /// Accommodates right margin.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_alignRight = 16843145;

  /// from: static public final int layout_alignStart
  ///
  /// Makes the start edge of this view match the start edge of the given anchor view ID.
  /// Accommodates start margin.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_alignStart = 16843705;

  /// from: static public final int layout_alignTop
  ///
  /// Makes the top edge of this view match the top edge of the given anchor view ID.
  /// Accommodates top margin.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_alignTop = 16843144;

  /// from: static public final int layout_alignWithParentIfMissing
  ///
  /// If set to true, the parent will be used as the anchor when the anchor cannot be
  /// be found for layout_toLeftOf, layout_toRightOf, etc.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const layout_alignWithParentIfMissing = 16843154;

  /// from: static public final int layout_below
  ///
  /// Positions the top edge of this view below the given anchor view ID.
  /// Accommodates top margin of this view and bottom margin of anchor view.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_below = 16843141;

  /// from: static public final int layout_centerHorizontal
  ///
  /// If true, centers this child horizontally within its parent.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const layout_centerHorizontal = 16843152;

  /// from: static public final int layout_centerInParent
  ///
  /// If true, centers this child horizontally and vertically within its parent.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const layout_centerInParent = 16843151;

  /// from: static public final int layout_centerVertical
  ///
  /// If true, centers this child vertically within its parent.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const layout_centerVertical = 16843153;

  /// from: static public final int layout_column
  ///
  /// The index of the column in which this child should be.
  /// May be an integer value, such as "<code>100</code>".
  static const layout_column = 16843084;

  /// from: static public final int layout_columnSpan
  ///
  /// The column span: the difference between the right and left
  /// boundaries delimiting the group of cells occupied by this view.
  /// The default is one.
  /// See android.widget.GridLayout.Spec.
  /// May be an integer value, such as "<code>100</code>".
  static const layout_columnSpan = 16843645;

  /// from: static public final int layout_columnWeight
  ///
  /// The relative proportion of horizontal space that should be allocated to this view
  /// during excess space distribution.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const layout_columnWeight = 16843865;

  /// from: static public final int layout_gravity
  ///
  /// Standard gravity constant that a child supplies to its parent.
  /// Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
  /// <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
  /// <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
  /// <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
  /// <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
  /// the child clipped to its container's bounds.
  /// The clip will be based on the horizontal gravity: a left gravity will clip the right
  /// edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
  /// <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
  /// the child clipped to its container's bounds.
  /// The clip will be based on the vertical gravity: a top gravity will clip the bottom
  /// edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
  /// <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
  /// <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
  /// <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
  /// <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
  /// <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
  /// </table>
  static const layout_gravity = 16842931;

  /// from: static public final int layout_height
  ///
  /// Specifies the basic height of the view.  This is a required attribute
  /// for any view inside of a containing layout manager.  Its value may
  /// be a dimension (such as "12dip") for a constant height or one of
  /// the special constants.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
  /// This constant is deprecated starting from API Level 8 and
  /// is replaced by {@code match_parent}.</td></tr>
  /// <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
  /// Introduced in API Level 8.</td></tr>
  /// <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
  /// </table>
  static const layout_height = 16842997;

  /// from: static public final int layout_margin
  ///
  /// Specifies extra space on the left, top, right and bottom
  /// sides of this view.  If both layout_margin and any of layout_marginLeft,
  /// layout_marginRight, layout_marginStart, layout_marginEnd,
  /// layout_marginTop, and layout_marginBottom are
  /// also specified, the layout_margin value will take precedence over the
  /// edge-specific values. This space is outside this view's bounds.
  /// Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const layout_margin = 16842998;

  /// from: static public final int layout_marginBottom
  ///
  /// Specifies extra space on the bottom side of this view.
  /// This space is outside this view's bounds.
  /// Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const layout_marginBottom = 16843002;

  /// from: static public final int layout_marginEnd
  ///
  /// Specifies extra space on the end side of this view.
  /// This space is outside this view's bounds.
  /// Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const layout_marginEnd = 16843702;

  /// from: static public final int layout_marginHorizontal
  ///
  /// Specifies extra space on the left and right sides of this view.
  /// Specifying layout_marginHorizontal is equivalent to specifying
  /// layout_marginLeft and layout_marginRight.
  /// If both layout_marginHorizontal and either/both of layout_marginLeft
  /// and layout_marginRight are also specified, the layout_marginHorizontal
  /// value will take precedence over the
  /// edge-specific values. Also, layout_margin will always take precedence over
  /// any of these values, including layout_marginHorizontal.
  /// This space is outside this view's bounds.
  /// Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const layout_marginHorizontal = 16844091;

  /// from: static public final int layout_marginLeft
  ///
  /// Specifies extra space on the left side of this view.
  /// This space is outside this view's bounds.
  /// Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const layout_marginLeft = 16842999;

  /// from: static public final int layout_marginRight
  ///
  /// Specifies extra space on the right side of this view.
  /// This space is outside this view's bounds.
  /// Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const layout_marginRight = 16843001;

  /// from: static public final int layout_marginStart
  ///
  /// Specifies extra space on the start side of this view.
  /// This space is outside this view's bounds.
  /// Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const layout_marginStart = 16843701;

  /// from: static public final int layout_marginTop
  ///
  /// Specifies extra space on the top side of this view.
  /// This space is outside this view's bounds.
  /// Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const layout_marginTop = 16843000;

  /// from: static public final int layout_marginVertical
  ///
  /// Specifies extra space on the top and bottom sides of this view.
  /// Specifying layout_marginVertical is equivalent to specifying
  /// layout_marginTop and layout_marginBottom with that same value.
  /// If both layout_marginVertical and either/both of layout_marginTop and
  /// layout_marginBottom are also specified, the layout_marginVertical value
  /// will take precedence over the edge-specific values.
  /// Also, layout_margin will always take precedence over
  /// any of these values, including layout_marginVertical.
  /// This space is outside this view's bounds.
  /// Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const layout_marginVertical = 16844092;

  /// from: static public final int layout_row
  ///
  /// The row boundary delimiting the top of the group of cells
  /// occupied by this view.
  /// May be an integer value, such as "<code>100</code>".
  static const layout_row = 16843643;

  /// from: static public final int layout_rowSpan
  ///
  /// The row span: the difference between the top and bottom
  /// boundaries delimiting the group of cells occupied by this view.
  /// The default is one.
  /// See android.widget.GridLayout.Spec.
  /// May be an integer value, such as "<code>100</code>".
  static const layout_rowSpan = 16843644;

  /// from: static public final int layout_rowWeight
  ///
  /// The relative proportion of vertical space that should be allocated to this view
  /// during excess space distribution.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const layout_rowWeight = 16843864;

  /// from: static public final int layout_scale
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  static const layout_scale = 16843155;

  /// from: static public final int layout_span
  ///
  /// Defines how many columns this child should span.  Must be >= 1.
  /// May be an integer value, such as "<code>100</code>".
  static const layout_span = 16843085;

  /// from: static public final int layout_toEndOf
  ///
  /// Positions the start edge of this view to the end of the given anchor view ID.
  /// Accommodates start margin of this view and end margin of anchor view.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_toEndOf = 16843704;

  /// from: static public final int layout_toLeftOf
  ///
  /// Positions the right edge of this view to the left of the given anchor view ID.
  /// Accommodates right margin of this view and left margin of anchor view.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_toLeftOf = 16843138;

  /// from: static public final int layout_toRightOf
  ///
  /// Positions the left edge of this view to the right of the given anchor view ID.
  /// Accommodates left margin of this view and right margin of anchor view.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_toRightOf = 16843139;

  /// from: static public final int layout_toStartOf
  ///
  /// Positions the end edge of this view to the start of the given anchor view ID.
  /// Accommodates end margin of this view and start margin of anchor view.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const layout_toStartOf = 16843703;

  /// from: static public final int layout_weight
  ///
  /// Indicates how much of the extra space in the LinearLayout is
  /// allocated to the view associated with these LayoutParams. Specify
  /// 0 if the view should not be stretched. Otherwise the extra pixels
  /// will be pro-rated among all views whose weight is greater than 0.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const layout_weight = 16843137;

  /// from: static public final int layout_width
  ///
  /// Specifies the basic width of the view.  This is a required attribute
  /// for any view inside of a containing layout manager.  Its value may
  /// be a dimension (such as "12dip") for a constant width or one of
  /// the special constants.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
  /// This constant is deprecated starting from API Level 8 and
  /// is replaced by {@code match_parent}.</td></tr>
  /// <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
  /// Introduced in API Level 8.</td></tr>
  /// <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
  /// </table>
  static const layout_width = 16842996;

  /// from: static public final int layout_x
  ///
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const layout_x = 16843135;

  /// from: static public final int layout_y
  ///
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const layout_y = 16843136;

  /// from: static public final int left
  ///
  /// Amount of left padding inside the gradient shape.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const left = 16843181;

  /// from: static public final int letterSpacing
  ///
  /// Text letter-spacing.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const letterSpacing = 16843958;

  /// from: static public final int level
  ///
  /// Specifies the initial drawable level in the range 0 to 10000.
  /// May be an integer value, such as "<code>100</code>".
  static const level = 16844032;

  /// from: static public final int lineHeight
  ///
  /// Explicit height between lines of text. If set, this will override the values set
  /// for lineSpacingExtra and lineSpacingMultiplier.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const lineHeight = 16844159;

  /// from: static public final int lineSpacingExtra
  ///
  /// Extra spacing between lines of text. The value will not be applied for the last
  /// line of text.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const lineSpacingExtra = 16843287;

  /// from: static public final int lineSpacingMultiplier
  ///
  /// Extra spacing between lines of text, as a multiplier. The value will not be applied
  /// for the last line of text.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const lineSpacingMultiplier = 16843288;

  /// from: static public final int lines
  ///
  /// Makes the TextView be exactly this many lines tall.
  /// May be an integer value, such as "<code>100</code>".
  static const lines = 16843092;

  /// from: static public final int linksClickable
  ///
  /// If set to false, keeps the movement method from being set
  /// to the link movement method even if autoLink causes links
  /// to be found.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const linksClickable = 16842929;

  /// from: static public final int listChoiceBackgroundIndicator
  ///
  /// Drawable used as a background for selected list items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const listChoiceBackgroundIndicator = 16843504;

  /// from: static public final int listChoiceIndicatorMultiple
  ///
  /// Drawable to use for multiple choice indicators.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const listChoiceIndicatorMultiple = 16843290;

  /// from: static public final int listChoiceIndicatorSingle
  ///
  /// Drawable to use for single choice indicators.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const listChoiceIndicatorSingle = 16843289;

  /// from: static public final int listDivider
  ///
  /// The drawable for the list divider.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const listDivider = 16843284;

  /// from: static public final int listDividerAlertDialog
  ///
  /// The list divider used in alert dialogs.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const listDividerAlertDialog = 16843525;

  /// from: static public final int listMenuViewStyle
  ///
  /// Default menu-style ListView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const listMenuViewStyle = 16844018;

  /// from: static public final int listPopupWindowStyle
  ///
  /// Default ListPopupWindow style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const listPopupWindowStyle = 16843519;

  /// from: static public final int listPreferredItemHeight
  ///
  /// The preferred list item height.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const listPreferredItemHeight = 16842829;

  /// from: static public final int listPreferredItemHeightLarge
  ///
  /// A larger, more robust list item height.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const listPreferredItemHeightLarge = 16843654;

  /// from: static public final int listPreferredItemHeightSmall
  ///
  /// A smaller, sleeker list item height.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const listPreferredItemHeightSmall = 16843655;

  /// from: static public final int listPreferredItemPaddingEnd
  ///
  /// The preferred padding along the end edge of list items.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const listPreferredItemPaddingEnd = 16843710;

  /// from: static public final int listPreferredItemPaddingLeft
  ///
  /// The preferred padding along the left edge of list items.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const listPreferredItemPaddingLeft = 16843683;

  /// from: static public final int listPreferredItemPaddingRight
  ///
  /// The preferred padding along the right edge of list items.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const listPreferredItemPaddingRight = 16843684;

  /// from: static public final int listPreferredItemPaddingStart
  ///
  /// The preferred padding along the start edge of list items.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const listPreferredItemPaddingStart = 16843709;

  /// from: static public final int listSelector
  ///
  /// Drawable used to indicate the currently selected item in the list.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const listSelector = 16843003;

  /// from: static public final int listSeparatorTextViewStyle
  ///
  /// TextView style for list separators.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const listSeparatorTextViewStyle = 16843272;

  /// from: static public final int listViewStyle
  ///
  /// Default ListView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const listViewStyle = 16842868;

  /// from: static public final int listViewWhiteStyle
  ///
  /// ListView with white background.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const listViewWhiteStyle = 16842869;

  /// from: static public final int lockTaskMode
  ///
  /// This value indicates how tasks rooted at this activity will behave in lockTask mode.
  /// While in lockTask mode the system will not launch non-permitted tasks until
  /// lockTask mode is disabled.
  /// While in lockTask mode with multiple permitted tasks running, each launched task is
  /// permitted to finish, transitioning to the previous locked task, until there is only one
  /// task remaining. At that point the last task running is not permitted to finish, unless it
  /// uses the value always.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>always</td><td>2</td><td>Tasks rooted at this activity will always launch into lockTask mode. If the system is
  /// already in lockTask mode when this task is launched then the new task will be launched
  /// on top of the current task. Tasks launched in this mode are capable of exiting
  /// lockTask mode using android.app.Activity\#finish().
  /// Note: This mode is only available to system and privileged applications.
  /// Non-privileged apps with this value will be treated as normal.</td></tr>
  /// <tr><td>if_whitelisted</td><td>3</td><td>If the DevicePolicyManager (DPM) authorizes this package (android.app.admin.DevicePolicyManager\#setLockTaskPackages) then this mode is
  /// identical to always, except that the activity needs to call
  /// android.app.Activity\#stopLockTask before being able to finish if it is the last
  /// locked task.
  /// If the DPM does not authorize this package then this mode is identical to normal.</td></tr>
  /// <tr><td>never</td><td>1</td><td>Tasks will not launch into lockTask mode and cannot be placed there using
  /// android.app.Activity\#startLockTask or be pinned from the Overview screen.
  /// If the system is already in lockTask mode when a new task rooted at this activity is
  /// launched that task will not be started.
  /// Note: This mode is only available to system and privileged applications.
  /// Non-privileged apps with this value will be treated as normal.</td></tr>
  /// <tr><td>normal</td><td>0</td><td>This is the default value. Tasks will not launch into lockTask mode but can be
  /// placed there by calling android.app.Activity\#startLockTask. If a task with
  /// this mode has been whitelisted using android.app.admin.DevicePolicyManager\#setLockTaskPackages then calling
  /// android.app.Activity\#startLockTask will enter lockTask mode immediately,
  /// otherwise the user will be presented with a dialog to approve entering pinned mode.
  /// If the system is already in lockTask mode when a new task rooted at this activity
  /// is launched that task will or will not start depending on whether the package of this
  /// activity has been whitelisted.
  /// Tasks rooted at this activity can only exit lockTask mode using
  /// android.app.Activity\#stopLockTask.</td></tr>
  /// </table>
  static const lockTaskMode = 16844013;

  /// from: static public final int logo
  ///
  /// A Drawable resource providing an extended graphical logo for its
  /// associated item. Use with the application tag (to supply a default
  /// logo for all application components), or with the activity, receiver,
  /// service, or instrumentation tag (to supply a specific logo for that
  /// component). It may also be used with the intent-filter tag to supply
  /// a logo to show to the user when an activity is being selected based
  /// on a particular Intent.
  /// The given logo will be used to display to the user a graphical
  /// representation of its associated component; for example as the
  /// header in the Action Bar. The primary differences between an icon
  /// and a logo are that logos are often wider and more detailed, and are
  /// used without an accompanying text caption. This must be a reference
  /// to a Drawable resource containing the image definition.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const logo = 16843454;

  /// from: static public final int logoDescription
  ///
  /// A content description string to describe the appearance of the
  /// associated logo image.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const logoDescription = 16844009;

  /// from: static public final int longClickable
  ///
  /// Defines whether this view reacts to long click events.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const longClickable = 16842982;

  /// from: static public final int loopViews
  ///
  /// Defines whether the animator loops to the first view once it
  /// has reached the end of the list.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const loopViews = 16843527;

  /// from: static public final int manageSpaceActivity
  ///
  /// Name of the activity to be launched to manage application's space on
  /// device. The specified activity gets automatically launched when the
  /// application's space needs to be managed and is usually invoked
  /// through user actions. Applications can thus provide their own custom
  /// behavior for managing space for various scenarios like out of memory
  /// conditions. This is an optional attribute and
  /// applications can choose not to specify a default activity to
  /// manage space.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const manageSpaceActivity = 16842756;

  /// from: static public final int mapViewStyle
  ///
  /// Default MapView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const mapViewStyle = 16842890;

  /// from: static public final int marqueeRepeatLimit
  ///
  /// The number of times to repeat the marquee animation. Only applied if the
  /// TextView has marquee enabled.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>marquee_forever</td><td>ffffffff</td><td>Indicates that marquee should repeat indefinitely.</td></tr>
  /// </table>
  static const marqueeRepeatLimit = 16843293;

  /// from: static public final int matchOrder
  ///
  /// The match order to use for the transition. This is a comma-separated
  /// list of values, containing one or more of the following:
  /// id, itemId, name, instance. These correspond to
  /// android.transition.Transition\#MATCH_ID,
  /// android.transition.Transition\#MATCH_ITEM_ID,
  /// android.transition.Transition\#MATCH_NAME, and
  /// android.transition.Transition\#MATCH_INSTANCE, respectively.
  /// This corresponds to android.transition.Transition\#setMatchOrder(int...).
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const matchOrder = 16843855;

  /// from: static public final int max
  ///
  /// Defines the maximum value.
  /// May be an integer value, such as "<code>100</code>".
  static const max = 16843062;

  /// from: static public final int maxAspectRatio
  ///
  /// This value indicates the maximum aspect ratio the activity supports. If the app runs on a
  /// device with a wider aspect ratio, the system automatically letterboxes the app, leaving
  /// portions of the screen unused so the app can run at its specified maximum aspect ratio.
  ///
  /// Maximum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
  /// form. For example, if the maximum aspect ratio is 7:3, set value to 2.33.
  ///
  /// Value needs to be greater or equal to 1.0, otherwise it is ignored.
  ///
  /// NOTE: This attribute is ignored if the activity has
  /// android.R.attr\#resizeableActivity set to true, since that means your activity
  /// supports any size.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const maxAspectRatio = 16844128;

  /// from: static public final int maxButtonHeight
  ///
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const maxButtonHeight = 16844029;

  /// from: static public final int maxDate
  ///
  /// The maximal date shown by this calendar view in mm/dd/yyyy format.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const maxDate = 16843584;

  /// from: static public final int maxEms
  ///
  /// Makes the TextView be at most this many ems wide.
  /// May be an integer value, such as "<code>100</code>".
  static const maxEms = 16843095;

  /// from: static public final int maxHeight
  ///
  /// An optional argument to supply a maximum height for this view.
  /// See {see android.widget.ImageView\#setMaxHeight} for details.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const maxHeight = 16843040;

  /// from: static public final int maxItemsPerRow
  ///
  /// Defines the maximum number of items per row.
  /// May be an integer value, such as "<code>100</code>".
  static const maxItemsPerRow = 16843060;

  /// from: static public final int maxLength
  ///
  /// Set an input filter to constrain the text length to the
  /// specified number.
  /// May be an integer value, such as "<code>100</code>".
  static const maxLength = 16843104;

  /// from: static public final int maxLevel
  ///
  /// The maximum level allowed for this item.
  /// May be an integer value, such as "<code>100</code>".
  static const maxLevel = 16843186;

  /// from: static public final int maxLines
  ///
  /// Makes the TextView be at most this many lines tall.
  /// When used on an editable text, the <code>inputType</code> attribute's value must be
  /// combined with the <code>textMultiLine</code> flag for the maxLines attribute to apply.
  /// May be an integer value, such as "<code>100</code>".
  static const maxLines = 16843091;

  /// from: static public final int maxLongVersionCode
  ///
  /// The max version code of the package for which compatibility mode is
  /// requested. This corresponds to the long value returned by android.content.pm.PackageInfo\#getLongVersionCode() for the target package.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const maxLongVersionCode = 16844163;

  /// from: static public final int maxRecents
  ///
  /// The maximum number of entries of tasks rooted at this activity in the recent task list.
  /// When this number of entries is reached the least recently used instance of this activity
  /// will be removed from recents. The value will be clamped between 1 and 100 inclusive.
  /// The default value for this if it is not specified is 15.
  /// May be an integer value, such as "<code>100</code>".
  static const maxRecents = 16843846;

  /// from: static public final int maxRows
  ///
  /// Defines the maximum number of rows displayed.
  /// May be an integer value, such as "<code>100</code>".
  static const maxRows = 16843059;

  /// from: static public final int maxSdkVersion
  ///
  /// Optional: specify the maximum version of the Android OS for which the
  /// application wishes to request the permission.  When running on a version
  /// of Android higher than the number given here, the permission will not
  /// be requested.
  /// May be an integer value, such as "<code>100</code>".
  static const maxSdkVersion = 16843377;

  /// from: static public final int maxWidth
  ///
  /// An optional argument to supply a maximum width for this view.
  /// See {see android.widget.ImageView\#setMaxWidth} for details.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const maxWidth = 16843039;

  /// from: static public final int maximumAngle
  ///
  /// The maximum arc angle in degrees between the start and end points.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const maximumAngle = 16843903;

  /// from: static public final int measureAllChildren
  ///
  /// Determines whether to measure all children or just those in
  /// the VISIBLE or INVISIBLE state when measuring. Defaults to false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const measureAllChildren = 16843018;

  /// from: static public final int measureWithLargestChild
  ///
  /// When set to true, all children with a weight will be considered having
  /// the minimum size of the largest child. If false, all children are
  /// measured normally.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const measureWithLargestChild = 16843476;

  /// from: static public final int mediaRouteButtonStyle
  ///
  /// Default style for the MediaRouteButton widget.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const mediaRouteButtonStyle = 16843693;

  /// from: static public final int mediaRouteTypes
  ///
  /// The types of media routes the button and its resulting
  /// chooser will filter by.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>liveAudio</td><td>1</td><td>Allow selection of live audio routes.</td></tr>
  /// <tr><td>user</td><td>800000</td><td>Allow selection of user (app-specified) routes.</td></tr>
  /// </table>
  static const mediaRouteTypes = 16843694;

  /// from: static public final int menuCategory
  ///
  /// The category applied to all items within this group.
  /// (This will be or'ed with the orderInCategory attribute.)
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>alternative</td><td>40000</td><td>Items are alternative actions.</td></tr>
  /// <tr><td>container</td><td>10000</td><td>Items are part of a container.</td></tr>
  /// <tr><td>secondary</td><td>30000</td><td>Items are user-supplied secondary (infrequently used).</td></tr>
  /// <tr><td>system</td><td>20000</td><td>Items are provided by the system.</td></tr>
  /// </table>
  static const menuCategory = 16843230;

  /// from: static public final int mimeType
  ///
  /// Specify a MIME type that is handled, as per
  /// android.content.IntentFilter\#addDataType IntentFilter.addDataType().
  /// _Note: MIME type matching in the Android framework is
  /// case-sensitive, unlike formal RFC MIME types.  As a result,
  /// MIME types here should always use lower case letters._
  ///
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const mimeType = 16842790;

  /// from: static public final int min
  ///
  /// Defines the minimum value.
  /// May be an integer value, such as "<code>100</code>".
  static const min = 16844089;

  /// from: static public final int minDate
  ///
  /// The minimal date shown by this calendar view in mm/dd/yyyy format.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const minDate = 16843583;

  /// from: static public final int minEms
  ///
  /// Makes the TextView be at least this many ems wide.
  /// May be an integer value, such as "<code>100</code>".
  static const minEms = 16843098;

  /// from: static public final int minHeight
  ///
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const minHeight = 16843072;

  /// from: static public final int minLevel
  ///
  /// The minimum level allowed for this item.
  /// May be an integer value, such as "<code>100</code>".
  static const minLevel = 16843185;

  /// from: static public final int minLines
  ///
  /// Makes the TextView be at least this many lines tall.
  /// When used on an editable text, the <code>inputType</code> attribute's value must be
  /// combined with the <code>textMultiLine</code> flag for the minLines attribute to apply.
  /// May be an integer value, such as "<code>100</code>".
  static const minLines = 16843094;

  /// from: static public final int minResizeHeight
  ///
  /// Minimum height that the AppWidget can be resized to.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const minResizeHeight = 16843670;

  /// from: static public final int minResizeWidth
  ///
  /// Minimum width that the AppWidget can be resized to.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const minResizeWidth = 16843669;

  /// from: static public final int minSdkVersion
  ///
  /// This is the minimum SDK version number that the application
  /// requires.  This number is an abstract integer, from the list
  /// in android.os.Build.VERSION_CODES  If
  /// not supplied, the application will work on any SDK.  This
  /// may also be string (such as "Donut") if the application was built
  /// against a development branch, in which case it will only work against
  /// the development builds.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  /// May be an integer value, such as "<code>100</code>".
  static const minSdkVersion = 16843276;

  /// from: static public final int minWidth
  ///
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const minWidth = 16843071;

  /// from: static public final int minimumHorizontalAngle
  ///
  /// The minimum arc angle in degrees between the start and end points when
  /// they are close to horizontal.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const minimumHorizontalAngle = 16843901;

  /// from: static public final int minimumVerticalAngle
  ///
  /// The minimum arc angle in degrees between the start and end points when
  /// they are close to vertical.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const minimumVerticalAngle = 16843902;

  /// from: static public final int mipMap
  ///
  /// Enables or disables the mipmap hint. See
  /// android.graphics.Bitmap\#setHasMipMap(boolean) for more information.
  /// Default value is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const mipMap = 16843725;

  /// from: static public final int mirrorForRtl
  ///
  /// Defines if the associated drawables need to be mirrored when in RTL mode.
  /// Default is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const mirrorForRtl = 16843726;

  /// from: static public final int mode
  ///
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>collapsing</td><td>2</td><td>When selected show both lines, otherwise show only the first line.
  /// This is the default mode.</td></tr>
  /// <tr><td>oneLine</td><td>1</td><td>Always show only the first line.</td></tr>
  /// <tr><td>twoLine</td><td>3</td><td>Always show both lines.</td></tr>
  /// </table>
  static const mode = 16843134;

  /// from: static public final int moreIcon
  ///
  /// 'More' icon.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const moreIcon = 16843061;

  /// from: static public final int multiArch
  ///
  /// Declare that code from this application will need to be loaded into other
  /// applications' processes. On devices that support multiple instruction sets,
  /// this implies the code might be loaded into a process that's using any of the devices
  /// supported instruction sets.
  ///  The system might treat such applications specially, for eg., by
  /// extracting the application's native libraries for all supported instruction
  /// sets or by compiling the application's dex code for all supported instruction
  /// sets.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const multiArch = 16843918;

  /// from: static public final int multiprocess
  ///
  /// Specify whether a component is allowed to have multiple instances
  /// of itself running in different processes.  Use with the activity
  /// and provider tags.
  /// Normally the system will ensure that all instances of a particular
  /// component are only running in a single process.  You can use this
  /// attribute to disable that behavior, allowing the system to create
  /// instances wherever they are used (provided permissions allow it).
  /// This is most often used with content providers, so that instances
  /// of a provider can be created in each client process, allowing them
  /// to be used without performing IPC.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const multiprocess = 16842771;

  /// from: static public final int name
  ///
  /// A unique name for the given item.  This must use a Java-style naming
  /// convention to ensure the name is unique, for example
  /// "com.mycompany.MyName".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const name = 16842755;

  /// from: static public final int navigationBarColor
  ///
  /// The color for the navigation bar. If the color is not opaque, consider setting
  /// android.view.View\#SYSTEM_UI_FLAG_LAYOUT_STABLE and
  /// android.view.View\#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION.
  /// For this to take effect, the window must be drawing the system bar backgrounds with
  /// android.R.attr\#windowDrawsSystemBarBackgrounds and the navigation bar must not
  /// have been requested to be translucent with
  /// android.R.attr\#windowTranslucentNavigation.
  /// Corresponds to android.view.Window\#setNavigationBarColor(int).
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const navigationBarColor = 16843858;

  /// from: static public final int navigationBarDividerColor
  ///
  /// Shows a thin line of the specified color between the navigation bar and the app
  /// content.
  /// For this to take effect, the window must be drawing the system bar backgrounds with
  /// android.R.attr\#windowDrawsSystemBarBackgrounds and the navigation bar must not
  /// have been requested to be translucent with
  /// android.R.attr\#windowTranslucentNavigation.
  /// Corresponds to android.view.Window\#setNavigationBarDividerColor(int).
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const navigationBarDividerColor = 16844141;

  /// from: static public final int navigationContentDescription
  ///
  /// Text to set as the content description for the navigation button
  /// located at the start of the toolbar.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const navigationContentDescription = 16843969;

  /// from: static public final int navigationIcon
  ///
  /// Icon drawable to use for the navigation button located at
  /// the start of the toolbar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const navigationIcon = 16843968;

  /// from: static public final int navigationMode
  ///
  /// The type of navigation to use.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>listMode</td><td>1</td><td>The action bar will use a selection list for navigation.</td></tr>
  /// <tr><td>normal</td><td>0</td><td>Normal static title text.</td></tr>
  /// <tr><td>tabMode</td><td>2</td><td>The action bar will use a series of horizontal tabs for navigation.</td></tr>
  /// </table>
  static const navigationMode = 16843471;

  /// from: static public final int negativeButtonText
  ///
  /// The negative button text for the dialog. Set to @null to hide the negative button.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const negativeButtonText = 16843254;

  /// from: static public final int nestedScrollingEnabled
  ///
  /// Specifies that this view should permit nested scrolling within a compatible
  /// ancestor view.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const nestedScrollingEnabled = 16843830;

  /// from: static public final int networkSecurityConfig
  ///
  /// An XML resource with the application's Network Security Config.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const networkSecurityConfig = 16844071;

  /// from: static public final int nextClusterForward
  ///
  /// Defines the next keyboard navigation cluster.
  /// If the reference refers to a view that does not exist or is part
  /// of a hierarchy that is invisible, a java.lang.RuntimeException
  /// will result when the reference is accessed.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const nextClusterForward = 16844098;

  /// from: static public final int nextFocusDown
  ///
  /// Defines the next view to give focus to when the next focus is
  /// android.view.View\#FOCUS_DOWN
  /// If the reference refers to a view that does not exist or is part
  /// of a hierarchy that is invisible, a java.lang.RuntimeException
  /// will result when the reference is accessed.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const nextFocusDown = 16842980;

  /// from: static public final int nextFocusForward
  ///
  /// Defines the next view to give focus to when the next focus is
  /// android.view.View\#FOCUS_FORWARD
  /// If the reference refers to a view that does not exist or is part
  /// of a hierarchy that is invisible, a java.lang.RuntimeException
  /// will result when the reference is accessed.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const nextFocusForward = 16843580;

  /// from: static public final int nextFocusLeft
  ///
  /// Defines the next view to give focus to when the next focus is
  /// android.view.View\#FOCUS_LEFT.
  /// If the reference refers to a view that does not exist or is part
  /// of a hierarchy that is invisible, a java.lang.RuntimeException
  /// will result when the reference is accessed.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const nextFocusLeft = 16842977;

  /// from: static public final int nextFocusRight
  ///
  /// Defines the next view to give focus to when the next focus is
  /// android.view.View\#FOCUS_RIGHT
  /// If the reference refers to a view that does not exist or is part
  /// of a hierarchy that is invisible, a java.lang.RuntimeException
  /// will result when the reference is accessed.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const nextFocusRight = 16842978;

  /// from: static public final int nextFocusUp
  ///
  /// Defines the next view to give focus to when the next focus is
  /// android.view.View\#FOCUS_UP
  /// If the reference refers to a view that does not exist or is part
  /// of a hierarchy that is invisible, a java.lang.RuntimeException
  /// will result when the reference is accessed.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const nextFocusUp = 16842979;

  /// from: static public final int noHistory
  ///
  /// Specify whether an activity should be kept in its history stack.
  /// If this attribute is set, then as soon as the user navigates away
  /// from the activity it will be finished and they will no longer be
  /// able to return to it.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const noHistory = 16843309;

  /// from: static public final int normalScreens
  ///
  /// Indicates whether an application supports the normal screen
  /// form-factors.  Traditionally this is an HVGA normal density
  /// screen, but WQVGA low density and WVGA high density are also
  /// considered to be normal.  This attribute is true by default,
  /// and applications currently should leave it that way.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const normalScreens = 16843397;

  /// from: static public final int notificationTimeout
  ///
  /// The minimal period in milliseconds between two accessibility events of the same type
  /// are sent to this service. This setting can be changed at runtime by calling
  /// android.accessibilityservice.AccessibilityService\#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo) android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo).
  /// May be an integer value, such as "<code>100</code>".
  static const notificationTimeout = 16843651;

  /// from: static public final int numColumns
  ///
  /// Defines how many columns to show.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>auto_fit</td><td>ffffffff</td><td>Display as many columns as possible to fill the available space.</td></tr>
  /// </table>
  static const numColumns = 16843032;

  /// from: static public final int numStars
  ///
  /// The number of stars (or rating items) to show.
  /// May be an integer value, such as "<code>100</code>".
  static const numStars = 16843076;

  /// from: static public final int numberPickerStyle
  ///
  /// NumberPicker style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const numberPickerStyle = 16844068;

  /// from: static public final int numbersBackgroundColor
  ///
  /// The background color for the hours/minutes numbers.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const numbersBackgroundColor = 16843938;

  /// from: static public final int numbersInnerTextColor
  ///
  /// The color for the inner hours numbers used in 24-hour mode. This
  /// should be a color state list where the activated state will be
  /// used when the number is active.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const numbersInnerTextColor = 16844001;

  /// from: static public final int numbersSelectorColor
  ///
  /// The color for the hours/minutes selector.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const numbersSelectorColor = 16843939;

  /// from: static public final int numbersTextColor
  ///
  /// The color for the hours/minutes numbers. This should be a color
  /// state list where the activated state will be used when the number
  /// is active.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const numbersTextColor = 16843937;

  /// from: static public final int numeric
  ///
  /// If set, specifies that this TextView has a numeric input method.
  /// The default is false.
  /// {@deprecated Use inputType instead.}
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>decimal</td><td>5</td><td>Input is numeric, with decimals allowed.</td></tr>
  /// <tr><td>integer</td><td>1</td><td>Input is numeric.</td></tr>
  /// <tr><td>signed</td><td>3</td><td>Input is numeric, with sign allowed.</td></tr>
  /// </table>
  static const numeric = 16843109;

  /// from: static public final int numericModifiers
  ///
  /// The numeric modifier key. This is the modifier when using a numeric (for example,
  /// 12-key) keyboard. The values should be kept in sync with KeyEvent
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>ALT</td><td>2</td><td></td></tr>
  /// <tr><td>CTRL</td><td>1000</td><td></td></tr>
  /// <tr><td>FUNCTION</td><td>8</td><td></td></tr>
  /// <tr><td>META</td><td>10000</td><td></td></tr>
  /// <tr><td>SHIFT</td><td>1</td><td></td></tr>
  /// <tr><td>SYM</td><td>4</td><td></td></tr>
  /// </table>
  static const numericModifiers = 16844111;

  /// from: static public final int numericShortcut
  ///
  /// The numeric shortcut key.  This is the shortcut when using a numeric (for example,
  /// 12-key) keyboard.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const numericShortcut = 16843236;

  /// from: static public final int offset
  ///
  /// The offset (or ratio) of this current color item inside the gradient.
  /// The value is only meaningful when it is between 0 and 1.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const offset = 16844052;

  /// from: static public final int onClick
  ///
  /// Name of the method in this View's context to invoke when the view is
  /// clicked. This name must correspond to a public method that takes
  /// exactly one parameter of type View. For instance, if you specify
  /// <code>android:onClick="sayHello"</code>, you must declare a
  /// <code>public void sayHello(View v)</code> method of your context
  /// (typically, your Activity).
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const onClick = 16843375;

  /// from: static public final int oneshot
  ///
  /// If true, the animation will only run a single time and then
  /// stop.  If false (the default), it will continually run,
  /// restarting at the first frame after the last has finished.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const oneshot = 16843159;

  /// from: static public final int opacity
  ///
  /// Indicates the opacity of the layer. This can be useful to allow the
  /// system to enable drawing optimizations. The default value is
  /// translucent.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>opaque</td><td>ffffffff</td><td>Indicates that the layer is opaque and contains no transparent
  /// nor translucent pixels.</td></tr>
  /// <tr><td>translucent</td><td>fffffffd</td><td>The layer has translucent pixels.</td></tr>
  /// <tr><td>transparent</td><td>fffffffe</td><td>The layer is completely transparent (no pixel will be drawn).</td></tr>
  /// </table>
  static const opacity = 16843550;

  /// from: static public final int order
  ///
  /// The order for the Preference (lower values are to be ordered first). If this is not
  /// specified, the default ordering will be alphabetic.
  /// May be an integer value, such as "<code>100</code>".
  static const order = 16843242;

  /// from: static public final int orderInCategory
  ///
  /// The order within the category applied to all items within this group.
  /// (This will be or'ed with the category attribute.)
  /// May be an integer value, such as "<code>100</code>".
  static const orderInCategory = 16843231;

  /// from: static public final int ordering
  ///
  /// Name of the property being animated.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>sequentially</td><td>1</td><td>child animations should be played sequentially, in the same order as the xml.</td></tr>
  /// <tr><td>together</td><td>0</td><td>child animations should be played together.</td></tr>
  /// </table>
  static const ordering = 16843490;

  /// from: static public final int orderingFromXml
  ///
  /// Whether to order the Preference under this group as they appear in the XML file.
  /// If this is false, the ordering will follow the Preference order attribute and
  /// default to alphabetic for those without the order attribute.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const orderingFromXml = 16843239;

  /// from: static public final int orientation
  ///
  /// Standard orientation constant.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
  /// <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
  /// </table>
  static const orientation = 16842948;

  /// from: static public final int outAnimation
  ///
  /// Identifier for the animation to use when a view is hidden.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const outAnimation = 16843128;

  /// from: static public final int outlineAmbientShadowColor
  ///
  /// Sets the color of the ambient shadow that is drawn when the view has a positive Z
  /// or elevation value.
  ///
  /// By default the shadow color is black. Generally, this color will be opaque so the
  /// intensity of the shadow is consistent between different views with different colors.
  ///
  /// The opacity of the final ambient shadow is a function of the shadow caster height,
  /// the alpha channel of the outlineAmbientShadowColor (typically opaque), and the
  /// android.R.attr\#ambientShadowAlpha theme attribute.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const outlineAmbientShadowColor = 16844162;

  /// from: static public final int outlineProvider
  ///
  /// ViewOutlineProvider used to determine the View's Outline.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>background</td><td>0</td><td>Default, background drawable-driven outline.</td></tr>
  /// <tr><td>bounds</td><td>2</td><td>Generates an opaque outline for the bounds of the view.</td></tr>
  /// <tr><td>none</td><td>1</td><td>No outline provider.</td></tr>
  /// <tr><td>paddedBounds</td><td>3</td><td>Generates an opaque outline for the padded bounds of the view.</td></tr>
  /// </table>
  static const outlineProvider = 16843960;

  /// from: static public final int outlineSpotShadowColor
  ///
  /// Sets the color of the spot shadow that is drawn when the view has a positive Z or
  /// elevation value.
  ///
  /// By default the shadow color is black. Generally, this color will be opaque so the
  /// intensity of the shadow is consistent between different views with different colors.
  ///
  /// The opacity of the final spot shadow is a function of the shadow caster height, the
  /// alpha channel of the outlineSpotShadowColor (typically opaque), and the
  /// android.R.attr\#spotShadowAlpha theme attribute.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const outlineSpotShadowColor = 16844161;

  /// from: static public final int overScrollFooter
  ///
  /// Drawable to draw below list content.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const overScrollFooter = 16843459;

  /// from: static public final int overScrollHeader
  ///
  /// Drawable to draw above list content.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const overScrollHeader = 16843458;

  /// from: static public final int overScrollMode
  ///
  /// Defines over-scrolling behavior. This property is used only if the
  /// View is scrollable. Over-scrolling is the ability for the user to
  /// receive feedback when attempting to scroll beyond meaningful content.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>always</td><td>0</td><td>Always show over-scroll effects, even if the content fits entirely
  /// within the available space.</td></tr>
  /// <tr><td>ifContentScrolls</td><td>1</td><td>Only show over-scroll effects if the content is large
  /// enough to meaningfully scroll.</td></tr>
  /// <tr><td>never</td><td>2</td><td>Never show over-scroll effects.</td></tr>
  /// </table>
  static const overScrollMode = 16843457;

  /// from: static public final int overlapAnchor
  ///
  /// Whether the popup window should overlap its anchor view.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const overlapAnchor = 16843874;

  /// from: static public final int overridesImplicitlyEnabledSubtype
  ///
  /// Set true when this subtype should be selected by default if no other subtypes are
  /// selected explicitly. Note that a subtype with this parameter being true will
  /// not be shown in the subtypes list.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const overridesImplicitlyEnabledSubtype = 16843682;

  /// from: static public final int packageNames
  ///
  /// Comma separated package names from which this service would like to receive events (leave out for all packages).
  /// android.accessibilityservice.AccessibilityService\#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo) android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo).
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const packageNames = 16843649;

  /// from: static public final int padding
  ///
  /// Sets the padding, in pixels, of all four edges. Padding is defined as
  /// space between the edges of the view and the view's content. This value will take
  /// precedence over any of the edge-specific values (paddingLeft, paddingTop,
  /// paddingRight, paddingBottom, paddingHorizontal and paddingVertical), but will
  /// not override paddingStart or paddingEnd, if set. A view's size
  /// will include its padding. If a android.R.attr\#background
  /// is provided, the padding will initially be set to that (0 if the
  /// drawable does not have padding). Explicitly setting a padding value
  /// will override the corresponding padding found in the background.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const padding = 16842965;

  /// from: static public final int paddingBottom
  ///
  /// Sets the padding, in pixels, of the bottom edge; see android.R.attr\#padding.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const paddingBottom = 16842969;

  /// from: static public final int paddingEnd
  ///
  /// Sets the padding, in pixels, of the end edge; see android.R.attr\#padding.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const paddingEnd = 16843700;

  /// from: static public final int paddingHorizontal
  ///
  /// Sets the padding, in pixels, of the left and right edges; see
  /// android.R.attr\#padding. This value will take precedence over
  /// paddingLeft and paddingRight, but not paddingStart or paddingEnd (if set).
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const paddingHorizontal = 16844093;

  /// from: static public final int paddingLeft
  ///
  /// Sets the padding, in pixels, of the left edge; see android.R.attr\#padding.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const paddingLeft = 16842966;

  /// from: static public final int paddingMode
  ///
  /// Indicates how layer padding should affect the bounds of subsequent layers.
  /// The default padding mode value is nest.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>nest</td><td>0</td><td>Nest each layer inside the padding of the previous layer.</td></tr>
  /// <tr><td>stack</td><td>1</td><td>Stack each layer directly atop the previous layer.</td></tr>
  /// </table>
  static const paddingMode = 16843863;

  /// from: static public final int paddingRight
  ///
  /// Sets the padding, in pixels, of the right edge; see android.R.attr\#padding.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const paddingRight = 16842968;

  /// from: static public final int paddingStart
  ///
  /// Sets the padding, in pixels, of the start edge; see android.R.attr\#padding.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const paddingStart = 16843699;

  /// from: static public final int paddingTop
  ///
  /// Sets the padding, in pixels, of the top edge; see android.R.attr\#padding.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const paddingTop = 16842967;

  /// from: static public final int paddingVertical
  ///
  /// Sets the padding, in pixels, of the top and bottom edges; see
  /// android.R.attr\#padding. This value will take precedence over
  /// paddingTop and paddingBottom, if set.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const paddingVertical = 16844094;

  /// from: static public final int panelBackground
  ///
  /// The background of a panel when it is inset from the left and right edges of the screen.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const panelBackground = 16842846;

  /// from: static public final int panelColorBackground
  ///
  /// Color that matches (as closely as possible) the panel background.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const panelColorBackground = 16842849;

  /// from: static public final int panelColorForeground
  ///
  /// Default color of foreground panel imagery.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const panelColorForeground = 16842848;

  /// from: static public final int panelFullBackground
  ///
  /// The background of a panel when it extends to the left and right edges of the screen.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const panelFullBackground = 16842847;

  /// from: static public final int panelTextAppearance
  ///
  /// Default appearance of panel text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const panelTextAppearance = 16842850;

  /// from: static public final int parentActivityName
  ///
  /// The name of the logical parent of the activity as it appears in the manifest.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const parentActivityName = 16843687;

  /// from: static public final int password
  ///
  /// Whether the characters of the field are displayed as
  /// password dots instead of themselves.
  /// {@deprecated Use inputType instead.}
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const password = 16843100;

  /// from: static public final int path
  ///
  /// Specify a URI path that must exactly match, as per
  /// android.os.PatternMatcher with
  /// android.os.PatternMatcher\#PATTERN_LITERAL.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const path = 16842794;

  /// from: static public final int pathData
  ///
  /// The specification of the operations that define the path.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const pathData = 16843781;

  /// from: static public final int pathPattern
  ///
  /// Specify a URI path that matches a simple pattern, as per
  /// android.os.PatternMatcher with
  /// android.os.PatternMatcher\#PATTERN_SIMPLE_GLOB.
  /// Note that because '\' is used as an escape character when
  /// reading the string from XML (before it is parsed as a pattern),
  /// you will need to double-escape: for example a literal "*" would
  /// be written as "\\*" and a literal "\" would be written as
  /// "\\\\".  This is basically the same as what you would need to
  /// write if constructing the string in Java code.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const pathPattern = 16842796;

  /// from: static public final int pathPrefix
  ///
  /// Specify a URI path that must be a prefix to match, as per
  /// android.os.PatternMatcher with
  /// android.os.PatternMatcher\#PATTERN_PREFIX.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const pathPrefix = 16842795;

  /// from: static public final int patternPathData
  ///
  /// The path string describing the pattern to use for the PathPathMotion.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const patternPathData = 16843978;

  /// from: static public final int permission
  ///
  /// Specify a permission that a client is required to have in order to
  /// use the associated object.  If the client does not hold the named
  /// permission, its request will fail.  See the
  /// <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
  /// document for more information on permissions.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const permission = 16842758;

  /// from: static public final int permissionFlags
  ///
  /// Flags indicating more context for a permission.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>costsMoney</td><td>1</td><td>Set to indicate that this permission allows an operation that
  /// may cost the user money.  Such permissions may be highlighted
  /// when shown to the user with this additional information.</td></tr>
  /// <tr><td>removed</td><td>2</td><td>Additional flag from base permission type: this permission has been
  /// removed and it is no longer enforced. It shouldn't be shown in the
  /// UI. Removed permissions are kept as normal permissions for backwards
  /// compatibility as apps may be checking them before calling an API.</td></tr>
  /// </table>
  static const permissionFlags = 16843719;

  /// from: static public final int permissionGroup
  ///
  /// Specified the name of a group that this permission is associated
  /// with.  The group must have been defined with the
  /// android.R.styleable\#AndroidManifestPermissionGroup permission-group tag.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const permissionGroup = 16842762;

  /// from: static public final int permissionGroupFlags
  ///
  /// Flags indicating more context for a permission group.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>personalInfo</td><td>1</td><td>Set to indicate that this permission group contains permissions
  /// protecting access to some information that is considered
  /// personal to the user (such as contacts, e-mails, etc).</td></tr>
  /// </table>
  static const permissionGroupFlags = 16843717;

  /// from: static public final int persistableMode
  ///
  /// Define how an activity persist across reboots. Activities defined as "never" will not
  /// be persisted. Those defined as "always" will be persisted. Those defined as "taskOnly"
  /// will persist the root activity of the task only. See below for more detail as to
  /// what gets persisted.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>persistAcrossReboots</td><td>2</td><td>If this activity forms the root of a task then the task and this activity will
  /// be persisted across reboots. If the activity above this activity is also
  /// tagged with the attribute <code>"persist"</code> then it will be persisted as well.
  /// And so on up the task stack until either an activity without the
  /// <code>persistableMode="persistAcrossReboots"</code> attribute or one that was launched
  /// with the flag Intent.FLAG_CLEAR_TASK_WHEN_RESET is encountered.
  /// Activities that are declared with the persistAcrossReboots attribute will be
  /// provided with a PersistableBundle in onSavedInstanceState(), These activities may
  /// use this PeristableBundle to save their state. Then, following a reboot, that
  /// PersistableBundle will be provided back to the activity in its onCreate() method.</td></tr>
  /// <tr><td>persistNever</td><td>1</td><td>If this activity forms the root of a task then that task will not be persisted
  /// across reboots</td></tr>
  /// <tr><td>persistRootOnly</td><td>0</td><td>The default. If this activity forms the root of a task then that task will be
  /// persisted across reboots but only the launching intent will be used. If the task
  /// relinquishes its identity then the intent used is that of the topmost inherited
  /// identity. All activities above this activity in the task will not be persisted.
  /// In addition this activity will not be passed a PersistableBundle into which it
  /// could have stored its state.</td></tr>
  /// </table>
  static const persistableMode = 16843821;

  /// from: static public final int persistent
  ///
  /// Flag to control special persistent mode of an application.  This should
  /// not normally be used by applications; it requires that the system keep
  /// your application running at all times.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const persistent = 16842765;

  /// from: static public final int persistentDrawingCache
  ///
  /// Defines the persistence of the drawing cache. The drawing cache might be
  /// enabled by a ViewGroup for all its children in specific situations (for
  /// instance during a scrolling.) This property lets you persist the cache
  /// in memory after its initial usage. Persisting the cache consumes more
  /// memory but may prevent frequent garbage collection is the cache is created
  /// over and over again. By default the persistence is set to scrolling.
  /// Deprecated: The view drawing cache was largely made obsolete with the introduction of
  /// hardware-accelerated rendering in API 11.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>all</td><td>3</td><td>The drawing cache is always persisted.</td></tr>
  /// <tr><td>animation</td><td>1</td><td>The drawing cache is persisted after a layout animation.</td></tr>
  /// <tr><td>none</td><td>0</td><td>The drawing cache is not persisted after use.</td></tr>
  /// <tr><td>scrolling</td><td>2</td><td>The drawing cache is persisted after a scroll.</td></tr>
  /// </table>
  static const persistentDrawingCache = 16842990;

  /// from: static public final int persistentWhenFeatureAvailable
  ///
  /// If set, the "persistent" attribute will only be honored if the feature
  /// specified here is present on the device.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const persistentWhenFeatureAvailable = 16844131;

  /// from: static public final int phoneNumber
  ///
  /// If set, specifies that this TextView has a phone number input
  /// method. The default is false.
  /// {@deprecated Use inputType instead.}
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const phoneNumber = 16843111;

  /// from: static public final int pivotX
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const pivotX = 16843189;

  /// from: static public final int pivotY
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const pivotY = 16843190;

  /// from: static public final int pointerIcon
  ///
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>alias</td><td>3f2</td><td>Pointer icon of 'alias', indicating an alias of/shortcut to something is to be
  /// created.</td></tr>
  /// <tr><td>all_scroll</td><td>3f5</td><td>Pointer icon of four-way arrows, indicating scrolling all direction.</td></tr>
  /// <tr><td>arrow</td><td>3e8</td><td>The default icon of arrow pointer.</td></tr>
  /// <tr><td>cell</td><td>3ee</td><td>Pointer icon for cell and grid.</td></tr>
  /// <tr><td>context_menu</td><td>3e9</td><td>Pointer icon indicating context-menu will appear.</td></tr>
  /// <tr><td>copy</td><td>3f3</td><td>Pointer icon of 'copy', used for drag/drop.</td></tr>
  /// <tr><td>crosshair</td><td>3ef</td><td>Pointer icon of crosshair, indicating to spot a location.</td></tr>
  /// <tr><td>grab</td><td>3fc</td><td>Pointer icon of a hand sign to grab something.</td></tr>
  /// <tr><td>grabbing</td><td>3fd</td><td>Pointer icon of a hand sign while grabbing something.</td></tr>
  /// <tr><td>hand</td><td>3ea</td><td>Pointer icon of a hand with the index finger.</td></tr>
  /// <tr><td>help</td><td>3eb</td><td>Pointer icon indicating help.</td></tr>
  /// <tr><td>horizontal_double_arrow</td><td>3f6</td><td>Pointer icon of horizontal double arrow, indicating horizontal resize.</td></tr>
  /// <tr><td>no_drop</td><td>3f4</td><td>Pointer icon of 'no-drop', indicating the drop will not be accepted at the
  /// current location.</td></tr>
  /// <tr><td>none</td><td>0</td><td>Null icon, pointer becomes invisible.</td></tr>
  /// <tr><td>text</td><td>3f0</td><td>Pointer icon of I-beam, usually for text.</td></tr>
  /// <tr><td>top_left_diagonal_double_arrow</td><td>3f9</td><td>Pointer icon of diagonal double arrow, starting from top-left to bottom-right.
  /// Indicating freeform resize.</td></tr>
  /// <tr><td>top_right_diagonal_double_arrow</td><td>3f8</td><td>Pointer icon of diagonal double arrow, starting from top-right to bottom-left.
  /// Indicating freeform resize.</td></tr>
  /// <tr><td>vertical_double_arrow</td><td>3f7</td><td>Pointer icon of vertical double arrow, indicating vertical resize.</td></tr>
  /// <tr><td>vertical_text</td><td>3f1</td><td>Pointer icon of I-beam with 90-degree rotated, for vertical text.</td></tr>
  /// <tr><td>wait</td><td>3ec</td><td>Pointer icon indicating something is going on and waiting.</td></tr>
  /// <tr><td>zoom_in</td><td>3fa</td><td>Pointer icon indicating zoom-in.</td></tr>
  /// <tr><td>zoom_out</td><td>3fb</td><td>Pointer icon indicating zoom-out.</td></tr>
  /// </table>
  static const pointerIcon = 16844041;

  /// from: static public final int popupAnimationStyle
  ///
  /// The animation style to use for the popup window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const popupAnimationStyle = 16843465;

  /// from: static public final int popupBackground
  ///
  /// The background to use for the popup window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const popupBackground = 16843126;

  /// from: static public final int popupCharacters
  ///
  /// The characters to display in the popup keyboard.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const popupCharacters = 16843332;

  /// from: static public final int popupElevation
  ///
  /// Window elevation to use for the popup window.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const popupElevation = 16843916;

  /// from: static public final int popupEnterTransition
  ///
  /// Transition used to move views into the popup window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const popupEnterTransition = 16844063;

  /// from: static public final int popupExitTransition
  ///
  /// Transition used to move views out of the popup window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const popupExitTransition = 16844064;

  /// from: static public final int popupKeyboard
  ///
  /// The XML keyboard layout of any popup keyboard.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const popupKeyboard = 16843331;

  /// from: static public final int popupLayout
  ///
  /// Layout resource for popup keyboards.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const popupLayout = 16843323;

  /// from: static public final int popupMenuStyle
  ///
  /// Default PopupMenu style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const popupMenuStyle = 16843520;

  /// from: static public final int popupTheme
  ///
  /// Reference to a theme that should be used to inflate popups
  /// shown by widgets in the toolbar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const popupTheme = 16843945;

  /// from: static public final int popupWindowStyle
  ///
  /// Default PopupWindow style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const popupWindowStyle = 16842870;

  /// from: static public final int port
  ///
  /// Specify a URI authority port that is handled, as per
  /// android.content.IntentFilter\#addDataAuthority IntentFilter.addDataAuthority().  If a host is supplied
  /// but not a port, any port is matched.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const port = 16842793;

  /// from: static public final int positiveButtonText
  ///
  /// The positive button text for the dialog. Set to @null to hide the positive button.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const positiveButtonText = 16843253;

  /// from: static public final int preferenceCategoryStyle
  ///
  /// Default style for PreferenceCategory.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const preferenceCategoryStyle = 16842892;

  /// from: static public final int preferenceFragmentStyle
  ///
  /// Default style for Headers pane in PreferenceActivity.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const preferenceFragmentStyle = 16844038;

  /// from: static public final int preferenceInformationStyle
  ///
  /// Default style for informational Preference.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const preferenceInformationStyle = 16842893;

  /// from: static public final int preferenceLayoutChild
  ///
  /// The preference layout that has the child/tabbed effect.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const preferenceLayoutChild = 16842900;

  /// from: static public final int preferenceScreenStyle
  ///
  /// Default style for PreferenceScreen.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const preferenceScreenStyle = 16842891;

  /// from: static public final int preferenceStyle
  ///
  /// Default style for Preference.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const preferenceStyle = 16842894;

  /// from: static public final int presentationTheme
  ///
  /// Theme to use for presentations spawned from this theme.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const presentationTheme = 16843712;

  /// from: static public final int previewImage
  ///
  /// A preview of what the AppWidget will look like after it's configured.
  /// If not supplied, the AppWidget's icon will be used.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const previewImage = 16843482;

  /// from: static public final int primaryContentAlpha
  ///
  /// The alpha applied to the foreground color to create the primary text color.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const primaryContentAlpha = 16844114;

  /// from: static public final int priority
  ///
  /// Specify the relative importance or ability in handling a particular
  /// Intent.  For receivers, this controls the order in which they are
  /// executed to receive a broadcast (note that for
  /// asynchronous broadcasts, this order is ignored).  For activities,
  /// this provides information about how good an activity is handling an
  /// Intent; when multiple activities match an intent and have different
  /// priorities, only those with the higher priority value will be
  /// considered a match.
  /// Only use if you really need to impose some specific
  /// order in which the broadcasts are received, or want to forcibly
  /// place an activity to always be preferred over others.  The value is a
  /// single integer, with higher numbers considered to be better.
  /// May be an integer value, such as "<code>100</code>".
  static const priority = 16842780;

  /// from: static public final int privateImeOptions
  ///
  /// An addition content type description to supply to the input
  /// method attached to the text view, which is private to the
  /// implementation of the input method.  This simply fills in
  /// the android.view.inputmethod.EditorInfo\#privateImeOptions EditorInfo.privateImeOptions field when the input
  /// method is connected.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const privateImeOptions = 16843299;

  /// from: static public final int process
  ///
  /// Specify a specific process that the associated code is to run in.
  /// Use with the application tag (to supply a default process for all
  /// application components), or with the activity, receiver, service,
  /// or provider tag (to supply a specific icon for that component).
  /// Application components are normally run in a single process that
  /// is created for the entire application.  You can use this tag to modify
  /// where they run.  If the process name begins with a ':' character,
  /// a new process private to that application will be created when needed
  /// to run that component (allowing you to spread your application across
  /// multiple processes).  If the process name begins with a lower-case
  /// character, the component will be run in a global process of that name,
  /// provided that you have permission to do so, allowing multiple
  /// applications to share one process to reduce resource usage.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const process = 16842769;

  /// from: static public final int progress
  ///
  /// Defines the default progress value, between 0 and max.
  /// May be an integer value, such as "<code>100</code>".
  static const progress = 16843063;

  /// from: static public final int progressBackgroundTint
  ///
  /// Tint to apply to the progress indicator background.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const progressBackgroundTint = 16843877;

  /// from: static public final int progressBackgroundTintMode
  ///
  /// Blending mode used to apply the progress indicator background tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const progressBackgroundTintMode = 16843878;

  /// from: static public final int progressBarPadding
  ///
  /// Specifies the horizontal padding on either end for an embedded progress bar.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const progressBarPadding = 16843545;

  /// from: static public final int progressBarStyle
  ///
  /// Default ProgressBar style. This is a medium circular progress bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const progressBarStyle = 16842871;

  /// from: static public final int progressBarStyleHorizontal
  ///
  /// Horizontal ProgressBar style. This is a horizontal progress bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const progressBarStyleHorizontal = 16842872;

  /// from: static public final int progressBarStyleInverse
  ///
  /// Inverse ProgressBar style. This is a medium circular progress bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const progressBarStyleInverse = 16843399;

  /// from: static public final int progressBarStyleLarge
  ///
  /// Large ProgressBar style. This is a large circular progress bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const progressBarStyleLarge = 16842874;

  /// from: static public final int progressBarStyleLargeInverse
  ///
  /// Large inverse ProgressBar style. This is a large circular progress bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const progressBarStyleLargeInverse = 16843401;

  /// from: static public final int progressBarStyleSmall
  ///
  /// Small ProgressBar style. This is a small circular progress bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const progressBarStyleSmall = 16842873;

  /// from: static public final int progressBarStyleSmallInverse
  ///
  /// Small inverse ProgressBar style. This is a small circular progress bar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const progressBarStyleSmallInverse = 16843400;

  /// from: static public final int progressBarStyleSmallTitle
  ///
  /// Small ProgressBar in title style. This is a small circular progress bar that will be placed in title bars.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const progressBarStyleSmallTitle = 16843279;

  /// from: static public final int progressDrawable
  ///
  /// Drawable used for the progress mode.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const progressDrawable = 16843068;

  /// from: static public final int progressTint
  ///
  /// Tint to apply to the progress indicator.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const progressTint = 16843875;

  /// from: static public final int progressTintMode
  ///
  /// Blending mode used to apply the progress indicator tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const progressTintMode = 16843876;

  /// from: static public final int prompt
  ///
  /// The prompt to display when the spinner's dialog is shown.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const prompt = 16843131;

  /// from: static public final int propertyName
  ///
  /// Name of the property being animated.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const propertyName = 16843489;

  /// from: static public final int propertyXName
  ///
  /// Name of the property being animated as the X coordinate of the pathData.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const propertyXName = 16843892;

  /// from: static public final int propertyYName
  ///
  /// Name of the property being animated as the Y coordinate of the pathData.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const propertyYName = 16843893;

  /// from: static public final int protectionLevel
  ///
  /// Characterizes the potential risk implied in a permission and
  /// indicates the procedure the system should follow when determining
  /// whether to grant the permission to an application requesting it. android.Manifest.permission Standard permissions have a predefined and
  /// permanent protectionLevel. If you are creating a custom permission in an
  /// application, you can define a protectionLevel attribute with one of the
  /// values listed below. If no protectionLevel is defined for a custom
  /// permission, the system assigns the default ("normal").
  /// Each protection level consists of a base permission type and zero or
  /// more flags. Use the following functions to extract those.
  /// <pre>
  /// int basePermissionType = permissionInfo.getProtection();
  /// int permissionFlags = permissionInfo.getProtectionFlags();
  /// </pre>
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>appop</td><td>40</td><td>Additional flag from base permission type: this permission is closely
  /// associated with an app op for controlling access.</td></tr>
  /// <tr><td>dangerous</td><td>1</td><td><strong>Base permission type</strong>: a higher-risk permission that
  /// would give a requesting application access to private user data or
  /// control over the device that can negatively impact the user.  Because
  /// this type of permission introduces potential risk, the system may
  /// not automatically grant it to the requesting application.  For example,
  /// any dangerous permissions requested by an application may be displayed
  /// to the user and require confirmation before proceeding, or some other
  /// approach may be taken to avoid the user automatically allowing
  /// the use of such facilities.</td></tr>
  /// <tr><td>development</td><td>20</td><td>Additional flag from base permission type: this permission can also
  /// (optionally) be granted to development applications.</td></tr>
  /// <tr><td>installer</td><td>100</td><td>Additional flag from base permission type: this permission can be automatically
  /// granted to system apps that install packages.</td></tr>
  /// <tr><td>instant</td><td>1000</td><td>Additional flag from base permission type: this permission can be granted to instant
  /// apps</td></tr>
  /// <tr><td>normal</td><td>0</td><td><strong>Base permission type</strong>: a lower-risk permission that gives
  /// an application access to isolated application-level features, with minimal
  /// risk to other applications, the system, or the user. The system
  /// automatically grants this type of permission to a requesting application at
  /// installation, without asking for the user's explicit approval (though the
  /// user always has the option to review these permissions before installing).</td></tr>
  /// <tr><td>oem</td><td>4000</td><td>Additional flag from base permission type: this permission can be granted only
  /// if its protection level is signature, the requesting app resides on the OEM partition,
  /// and the OEM has white-listed the app to receive this permission by the OEM.</td></tr>
  /// <tr><td>pre23</td><td>80</td><td>Additional flag from base permission type: this permission can be automatically
  /// granted to apps that target API levels below
  /// android.os.Build.VERSION_CODES\#M (before runtime permissions
  /// were introduced).</td></tr>
  /// <tr><td>preinstalled</td><td>400</td><td>Additional flag from base permission type: this permission can be automatically
  /// granted any application pre-installed on the system image (not just privileged
  /// apps).</td></tr>
  /// <tr><td>privileged</td><td>10</td><td>Additional flag from base permission type: this permission can also
  /// be granted to any applications installed as privileged apps on the system image.
  /// Please avoid using this option, as the
  /// signature protection level should be sufficient for most needs and
  /// works regardless of exactly where applications are installed.  This
  /// permission flag is used for certain special situations where multiple
  /// vendors have applications built in to a system image which need
  /// to share specific features explicitly because they are being built
  /// together.</td></tr>
  /// <tr><td>runtime</td><td>2000</td><td>Additional flag from base permission type: this permission can only be granted to apps
  /// that target runtime permissions (android.os.Build.VERSION_CODES\#M and above)</td></tr>
  /// <tr><td>setup</td><td>800</td><td>Additional flag from base permission type: this permission can be automatically
  /// granted to the setup wizard app</td></tr>
  /// <tr><td>signature</td><td>2</td><td><strong>Base permission type</strong>: a permission that the system is
  /// to grant only if the requesting application is signed with the same
  /// certificate as the application that declared the permission. If the
  /// certificates match, the system automatically grants the permission
  /// without notifying the user or asking for the user's explicit approval.</td></tr>
  /// <tr><td>signatureOrSystem</td><td>3</td><td>Old synonym for "signature|privileged". Deprecated in API level 23.
  /// Base permission type: a permission that the system is to grant only
  /// to packages in the Android system image _or_ that are signed
  /// with the same certificates. Please avoid using this option, as the
  /// signature protection level should be sufficient for most needs and
  /// works regardless of exactly where applications are installed.  This
  /// permission is used for certain special situations where multiple
  /// vendors have applications built in to a system image which need
  /// to share specific features explicitly because they are being built
  /// together.</td></tr>
  /// <tr><td>system</td><td>10</td><td>Old synonym for "privileged". Deprecated in API level 23.</td></tr>
  /// <tr><td>textClassifier</td><td>10000</td><td>Additional flag from base permission type: this permission can be automatically
  /// granted to the system default text classifier</td></tr>
  /// <tr><td>vendorPrivileged</td><td>8000</td><td>Additional flag from base permission type: this permission can be granted to
  /// privileged apps in vendor partition.</td></tr>
  /// <tr><td>verifier</td><td>200</td><td>Additional flag from base permission type: this permission can be automatically
  /// granted to system apps that verify packages.</td></tr>
  /// </table>
  static const protectionLevel = 16842761;

  /// from: static public final int publicKey
  ///
  /// The attribute that holds a Base64-encoded public key.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const publicKey = 16843686;

  /// from: static public final int queryActionMsg
  ///
  /// If you wish to handle an action key during normal search query entry, you
  /// must define an action string here.  This will be added to the
  /// android.content.Intent\#ACTION_SEARCH ACTION_SEARCH intent that is passed to your
  /// searchable activity.  To examine the string, use
  /// android.content.Intent\#getStringExtra getStringExtra(SearchManager.ACTION_MSG).
  /// <i>Optional attribute.</i>
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const queryActionMsg = 16843227;

  /// from: static public final int queryAfterZeroResults
  ///
  /// If provided and <code>true</code>, this searchable activity will be invoked for all
  /// queries in a particular session. If set to <code>false</code> and the activity
  /// returned zero results for a query, it will not be invoked again in that session for
  /// supersets of that zero-results query. For example, if the activity returned zero
  /// results for "bo", it would not be queried again for "bob".
  /// The default value is <code>false</code>. <i>Optional attribute.</i>.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const queryAfterZeroResults = 16843394;

  /// from: static public final int queryBackground
  ///
  /// Background for the section containing the search query.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const queryBackground = 16843911;

  /// from: static public final int queryHint
  ///
  /// An optional query hint string to be displayed in the empty query field.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const queryHint = 16843608;

  /// from: static public final int quickContactBadgeStyleSmallWindowLarge
  ///
  /// Default quickcontact badge style with large quickcontact window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const quickContactBadgeStyleSmallWindowLarge = 16843443;

  /// from: static public final int quickContactBadgeStyleSmallWindowMedium
  ///
  /// Default quickcontact badge style with medium quickcontact window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const quickContactBadgeStyleSmallWindowMedium = 16843442;

  /// from: static public final int quickContactBadgeStyleSmallWindowSmall
  ///
  /// Default quickcontact badge style with small quickcontact window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const quickContactBadgeStyleSmallWindowSmall = 16843441;

  /// from: static public final int quickContactBadgeStyleWindowLarge
  ///
  /// Default quickcontact badge style with large quickcontact window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const quickContactBadgeStyleWindowLarge = 16843440;

  /// from: static public final int quickContactBadgeStyleWindowMedium
  ///
  /// Default quickcontact badge style with medium quickcontact window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const quickContactBadgeStyleWindowMedium = 16843439;

  /// from: static public final int quickContactBadgeStyleWindowSmall
  ///
  /// Default quickcontact badge style with small quickcontact window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const quickContactBadgeStyleWindowSmall = 16843438;

  /// from: static public final int radioButtonStyle
  ///
  /// Default RadioButton style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const radioButtonStyle = 16842878;

  /// from: static public final int radius
  ///
  /// Defines the radius of the four corners.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const radius = 16843176;

  /// from: static public final int rating
  ///
  /// The rating to set by default.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const rating = 16843077;

  /// from: static public final int ratingBarStyle
  ///
  /// Default RatingBar style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const ratingBarStyle = 16842876;

  /// from: static public final int ratingBarStyleIndicator
  ///
  /// Indicator RatingBar style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const ratingBarStyleIndicator = 16843280;

  /// from: static public final int ratingBarStyleSmall
  ///
  /// Small indicator RatingBar style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const ratingBarStyleSmall = 16842877;

  /// from: static public final int readPermission
  ///
  /// A specific android.R.attr\#permission name for read-only
  /// access to a android.content.ContentProvider.  See the
  /// <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
  /// document for more information on permissions.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const readPermission = 16842759;

  /// from: static public final int recognitionService
  ///
  /// The service that provides voice recognition.  This is required.  When the user
  /// selects this voice interaction service, they will also be implicitly selecting
  /// the component here for their recognition service.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const recognitionService = 16843932;

  /// from: static public final int recreateOnConfigChanges
  ///
  /// Specify the configuration changes that trigger the system to recreate the
  /// current activity if any of these configuration changes happen in the system.
  /// The valid configuration changes include mcc and mnc which are the same with
  /// those in configChanges. By default from Android O, we don't recreate the activity
  /// even the app doesn't specify mcc or mnc in configChanges. If the app wants to
  /// be recreated, specify them in recreateOnConfigChanges.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
  /// updated the Mobile Country Code.</td></tr>
  /// <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
  /// updated the Mobile Network Code.</td></tr>
  /// </table>
  static const recreateOnConfigChanges = 16844103;

  /// from: static public final int recycleEnabled
  ///
  /// Whether the preference has enabled to have its view recycled when used in the list
  /// view. This is true by default.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const recycleEnabled = 16844121;

  /// from: static public final int relinquishTaskIdentity
  ///
  /// Tasks whose root has this attribute set to true will replace baseIntent with that of the
  /// next activity in the task. If the next activity also has this attribute set to true then
  /// it will yield the baseIntent to any activity that it launches in the same task. This
  /// continues until an activity is encountered which has this attribute set to false. False
  /// is the default. This attribute set to true also permits activity's use of the
  /// TaskDescription to change labels, colors and icons in the recent task list.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const relinquishTaskIdentity = 16843894;

  /// from: static public final int reparent
  ///
  /// Tells ChangeTransform to track parent changes. Default is true. Corresponds to
  /// android.transition.ChangeTransform\#setReparent(boolean).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const reparent = 16843964;

  /// from: static public final int reparentWithOverlay
  ///
  /// A parent change should use an overlay or affect the transform of the
  /// transitionining View. Default is true. Corresponds to
  /// android.transition.ChangeTransform\#setReparentWithOverlay(boolean).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const reparentWithOverlay = 16843965;

  /// from: static public final int repeatCount
  ///
  /// Defines how many times the animation should repeat. The default value is 0.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>infinite</td><td>ffffffff</td><td></td></tr>
  /// </table>
  static const repeatCount = 16843199;

  /// from: static public final int repeatMode
  ///
  /// Defines the animation behavior when it reaches the end and the repeat count is
  /// greater than 0 or infinite. The default value is restart.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>restart</td><td>1</td><td>The animation starts again from the beginning.</td></tr>
  /// <tr><td>reverse</td><td>2</td><td>The animation plays backward.</td></tr>
  /// </table>
  static const repeatMode = 16843200;

  /// from: static public final int reqFiveWayNav
  ///
  /// Application's requirement for five way navigation
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const reqFiveWayNav = 16843314;

  /// from: static public final int reqHardKeyboard
  ///
  /// Application's requirement for a hard keyboard
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const reqHardKeyboard = 16843305;

  /// from: static public final int reqKeyboardType
  ///
  /// The input method preferred by an application.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>nokeys</td><td>1</td><td></td></tr>
  /// <tr><td>qwerty</td><td>2</td><td></td></tr>
  /// <tr><td>twelvekey</td><td>3</td><td></td></tr>
  /// <tr><td>undefined</td><td>0</td><td></td></tr>
  /// </table>
  static const reqKeyboardType = 16843304;

  /// from: static public final int reqNavigation
  ///
  /// The navigation device preferred by an application.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>dpad</td><td>2</td><td></td></tr>
  /// <tr><td>nonav</td><td>1</td><td></td></tr>
  /// <tr><td>trackball</td><td>3</td><td></td></tr>
  /// <tr><td>undefined</td><td>0</td><td></td></tr>
  /// <tr><td>wheel</td><td>4</td><td></td></tr>
  /// </table>
  static const reqNavigation = 16843306;

  /// from: static public final int reqTouchScreen
  ///
  /// The touch screen type used by an application.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>finger</td><td>3</td><td></td></tr>
  /// <tr><td>notouch</td><td>1</td><td></td></tr>
  /// <tr><td>stylus</td><td>2</td><td></td></tr>
  /// <tr><td>undefined</td><td>0</td><td></td></tr>
  /// </table>
  static const reqTouchScreen = 16843303;

  /// from: static public final int requireDeviceUnlock
  ///
  /// Whether the device must be unlocked before routing data to this service.
  /// The default is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const requireDeviceUnlock = 16843756;

  /// from: static public final int required
  ///
  /// Specify whether this feature is required for the application.
  /// The default is true, meaning the application requires the
  /// feature, and does not want to be installed on devices that
  /// don't support it.  If you set this to false, then this will
  /// not impose a restriction on where the application can be
  /// installed.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const required0 = 16843406;

  /// from: static public final int requiredAccountType
  ///
  /// Declare that this application requires an account of a certain
  /// type. The default value is null and indicates that the application can work without
  /// any accounts. The type should correspond to the account authenticator type, such as
  /// "com.google".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const requiredAccountType = 16843734;

  /// from: static public final int requiredFeature
  ///
  /// Optional: the system must support this feature for the permission to be
  /// requested.  If it doesn't support the feature, it will be as if the manifest didn't
  /// request it at all.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const requiredFeature = 16844116;

  /// from: static public final int requiredForAllUsers
  ///
  /// Flag to specify if this application needs to be present for all users. Only pre-installed
  /// applications can request this feature. Default value is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const requiredForAllUsers = 16843728;

  /// from: static public final int requiredNotFeature
  ///
  /// Optional: the system must NOT support this feature for the permission to be
  /// requested.  If it does support the feature, it will be as if the manifest didn't
  /// request it at all.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const requiredNotFeature = 16844117;

  /// from: static public final int requiresFadingEdge
  ///
  /// Defines which edges should be faded on scrolling.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
  /// <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
  /// <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
  /// </table>
  static const requiresFadingEdge = 16843685;

  /// from: static public final int requiresSmallestWidthDp
  ///
  /// Starting with android.os.Build.VERSION_CODES\#HONEYCOMB_MR2,
  /// this is the new way to specify the minimum screen size an application is
  /// compatible with.  This attribute provides the required minimum
  /// "smallest screen width" (as per the -swNNNdp resource configuration)
  /// that the application can run on.  For example, a typical phone
  /// screen is 320, a 7" tablet 600, and a 10" tablet 720.  If the
  /// smallest screen width of the device is below the value supplied here,
  /// then the application is considered incompatible with that device.
  /// If not supplied, then any old smallScreens, normalScreens, largeScreens,
  /// or xlargeScreens attributes will be used instead.
  /// May be an integer value, such as "<code>100</code>".
  static const requiresSmallestWidthDp = 16843620;

  /// from: static public final int resizeClip
  ///
  /// Resize the view by adjusting the clipBounds rather than changing the
  /// dimensions of the view itself. The default value is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const resizeClip = 16843983;

  /// from: static public final int resizeMode
  ///
  /// Optional parameter which indicates if and how this widget can be
  /// resized. Supports combined values using | operator.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>horizontal</td><td>1</td><td></td></tr>
  /// <tr><td>none</td><td>0</td><td></td></tr>
  /// <tr><td>vertical</td><td>2</td><td></td></tr>
  /// </table>
  static const resizeMode = 16843619;

  /// from: static public final int resizeable
  ///
  /// Indicates whether the application can resize itself to newer
  /// screen sizes.  This is mostly used to distinguish between old
  /// applications that may not be compatible with newly introduced
  /// screen sizes and newer applications that should be; it will be
  /// set for you automatically based on whether you are targeting
  /// a newer platform that supports more screens.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const resizeable = 16843405;

  /// from: static public final int resizeableActivity
  ///
  /// Indicates that it is okay for this activity to be resized to any dimension. Intended for a
  /// multi-window device where there can be multiple activities of various sizes on the screen
  /// at the same time.
  /// The default value is <code>false</code> for applications with
  /// <code>targetSdkVersion</code> lesser than android.os.Build.VERSION_CODES\#N and
  /// <code>true</code> otherwise.
  /// NOTE: A task's root activity value is applied to all additional activities launched in
  /// the task. That is if the root activity of a task is resizeable then the system will treat
  /// all other activities in the task as resizeable and will not if the root activity isn't
  /// resizeable.
  /// NOTE: The value of android.R.attr\#screenOrientation is ignored for
  /// resizeable activities when in multi-window mode.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const resizeableActivity = 16844022;

  /// from: static public final int resource
  ///
  /// Resource identifier to assign to this piece of named meta-data.
  /// The resource identifier can later be retrieved from the meta data
  /// Bundle through android.os.Bundle\#getInt Bundle.getInt.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const resource = 16842789;

  /// from: static public final int restoreAnyVersion
  ///
  /// Indicate that the application is prepared to attempt a restore of any
  /// backed-up dataset, even if the backup is apparently from a newer version
  /// of the application than is currently installed on the device.  Setting
  /// this attribute to <code>true</code> will permit the Backup Manager to
  /// attempt restore even when a version mismatch suggests that the data are
  /// incompatible.  _Use with caution!_
  /// The default value of this attribute is <code>false</code>.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const restoreAnyVersion = 16843450;

  /// from: static public final int restoreNeedsApplication
  ///
  /// @deprecated This attribute is not used by the Android operating system.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const restoreNeedsApplication = 16843421;

  /// from: static public final int restrictedAccountType
  ///
  /// Declare that this application requires access to restricted accounts of a certain
  /// type. The default value is null and restricted accounts won\'t be visible to this
  /// application. The type should correspond to the account authenticator type, such as
  /// "com.google".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const restrictedAccountType = 16843733;

  /// from: static public final int restrictionType
  ///
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bool</td><td>1</td><td></td></tr>
  /// <tr><td>bundle</td><td>7</td><td></td></tr>
  /// <tr><td>bundle_array</td><td>8</td><td></td></tr>
  /// <tr><td>choice</td><td>2</td><td></td></tr>
  /// <tr><td>hidden</td><td>0</td><td></td></tr>
  /// <tr><td>integer</td><td>5</td><td></td></tr>
  /// <tr><td>multi-select</td><td>4</td><td></td></tr>
  /// <tr><td>string</td><td>6</td><td></td></tr>
  /// </table>
  static const restrictionType = 16843923;

  /// from: static public final int resumeWhilePausing
  ///
  /// Indicate that it is okay for this activity be resumed while the previous
  /// activity is in the process of pausing, without waiting for the previous pause
  /// to complete.  Use this with caution: your activity can not acquire any exclusive
  /// resources (such as opening the camera or recording audio) when it launches, or it
  /// may conflict with the previous activity and fail.
  /// The default value of this attribute is <code>false</code>.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const resumeWhilePausing = 16843954;

  /// from: static public final int reversible
  ///
  /// Whether this transition is reversible.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const reversible = 16843851;

  /// from: static public final int revisionCode
  ///
  /// Internal revision code.  This number is the number used to determine
  /// whether one APK is more recent than another: it has no other meaning
  /// than that higher numbers are more recent.  This value is only meaningful
  /// when the two android.R.attr\#versionCode values are already
  /// identical.  When an app is delivered as multiple split APKs, each
  /// APK may have a different revisionCode value.
  /// May be an integer value, such as "<code>100</code>".
  static const revisionCode = 16843989;

  /// from: static public final int right
  ///
  /// Amount of right padding inside the gradient shape.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const right = 16843183;

  /// from: static public final int ringtonePreferenceStyle
  ///
  /// Default style for RingtonePreference.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const ringtonePreferenceStyle = 16842899;

  /// from: static public final int ringtoneType
  ///
  /// Which ringtone type(s) to show in the picker.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>alarm</td><td>4</td><td>Alarm sounds.</td></tr>
  /// <tr><td>all</td><td>7</td><td>All available ringtone sounds.</td></tr>
  /// <tr><td>notification</td><td>2</td><td>Notification sounds.</td></tr>
  /// <tr><td>ringtone</td><td>1</td><td>Ringtones.</td></tr>
  /// </table>
  static const ringtoneType = 16843257;

  /// from: static public final int rotation
  ///
  /// rotation of the view, in degrees.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const rotation = 16843558;

  /// from: static public final int rotationAnimation
  ///
  /// Flag allowing the activity to specify which screen rotation animation
  /// it desires.  Valid values are "rotate", "crossfade", and "jumpcut"
  /// as described in android.view.WindowManager.LayoutParams\#rotationAnimation.
  /// Specifying your Rotation animation in the WindowManager.LayoutParams
  /// may be racy with app startup and updattransitions occuring during application startup and thusly
  /// the manifest attribute is preferred.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>crossfade</td><td>1</td><td></td></tr>
  /// <tr><td>jumpcut</td><td>2</td><td></td></tr>
  /// <tr><td>rotate</td><td>0</td><td></td></tr>
  /// <tr><td>seamless</td><td>3</td><td></td></tr>
  /// </table>
  static const rotationAnimation = 16844090;

  /// from: static public final int rotationX
  ///
  /// rotation of the view around the x axis, in degrees.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const rotationX = 16843559;

  /// from: static public final int rotationY
  ///
  /// rotation of the view around the y axis, in degrees.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const rotationY = 16843560;

  /// from: static public final int roundIcon
  ///
  /// A Drawable resource providing a graphical representation of its
  /// associated item.  Use with the
  /// application tag (to supply a default round icon for all application
  /// components), or with the activity, receiver, service, or instrumentation
  /// tag (to supply a specific round icon for that component).  It may also be
  /// used with the intent-filter tag to supply a round icon to show to the
  /// user when an activity is being selected based on a particular Intent.
  /// The given round icon will be used to display to the user a graphical
  /// representation of its associated component; for example, as the round icon
  /// for main activity that is displayed in the launcher.  This must be
  /// a reference to a Drawable resource containing the image definition.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const roundIcon = 16844076;

  /// from: static public final int rowCount
  ///
  /// The maxmimum number of rows to create when automatically positioning children.
  /// May be an integer value, such as "<code>100</code>".
  static const rowCount = 16843637;

  /// from: static public final int rowDelay
  ///
  /// Fraction of the animation duration used to delay the beginning of
  /// the animation of each row.
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const rowDelay = 16843216;

  /// from: static public final int rowEdgeFlags
  ///
  /// Row edge flags.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bottom</td><td>8</td><td>Row is anchored to the bottom of the keyboard.</td></tr>
  /// <tr><td>top</td><td>4</td><td>Row is anchored to the top of the keyboard.</td></tr>
  /// </table>
  static const rowEdgeFlags = 16843329;

  /// from: static public final int rowHeight
  ///
  /// Defines the height of each row.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const rowHeight = 16843058;

  /// from: static public final int rowOrderPreserved
  ///
  /// When set to true, forces row boundaries to appear in the same order
  /// as row indices.
  /// The default is true.
  /// See android.widget.GridLayout\#setRowOrderPreserved(boolean).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const rowOrderPreserved = 16843638;

  /// from: static public final int saveEnabled
  ///
  /// If false, no state will be saved for this view when it is being
  /// frozen. The default is true, allowing the view to be saved
  /// (however it also must have an ID assigned to it for its
  /// state to be saved).  Setting this to false only disables the
  /// state for this view, not for its children which may still
  /// be saved.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const saveEnabled = 16842983;

  /// from: static public final int scaleGravity
  ///
  /// Specifies where the drawable is positioned after scaling. The default value is
  /// left.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
  /// <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
  /// <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
  /// <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
  /// <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
  /// the child clipped to its container's bounds.
  /// The clip will be based on the horizontal gravity: a left gravity will clip the right
  /// edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
  /// <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
  /// the child clipped to its container's bounds.
  /// The clip will be based on the vertical gravity: a top gravity will clip the bottom
  /// edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
  /// <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
  /// <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
  /// <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
  /// <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
  /// <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
  /// <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
  /// </table>
  static const scaleGravity = 16843262;

  /// from: static public final int scaleHeight
  ///
  /// Scale height, expressed as a percentage of the drawable's bound. The value's
  /// format is XX%. For instance: 100%, 12.5%, etc.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const scaleHeight = 16843261;

  /// from: static public final int scaleType
  ///
  /// Controls how the image should be resized or moved to match the size
  /// of this ImageView.  See android.widget.ImageView.ScaleType
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>center</td><td>5</td><td>Center the image in the view, but perform no scaling.</td></tr>
  /// <tr><td>centerCrop</td><td>6</td><td>Scale the image uniformly (maintain the image's aspect ratio) so both dimensions
  /// (width and height) of the image will be equal to or larger than the corresponding
  /// dimension of the view (minus padding). The image is then centered in the view.</td></tr>
  /// <tr><td>centerInside</td><td>7</td><td>Scale the image uniformly (maintain the image's aspect ratio) so that both
  /// dimensions (width and height) of the image will be equal to or less than the
  /// corresponding dimension of the view (minus padding). The image is then centered in
  /// the view.</td></tr>
  /// <tr><td>fitCenter</td><td>3</td><td>Scale the image using android.graphics.Matrix.ScaleToFit\#CENTER.</td></tr>
  /// <tr><td>fitEnd</td><td>4</td><td>Scale the image using android.graphics.Matrix.ScaleToFit\#END.</td></tr>
  /// <tr><td>fitStart</td><td>2</td><td>Scale the image using android.graphics.Matrix.ScaleToFit\#START.</td></tr>
  /// <tr><td>fitXY</td><td>1</td><td>Scale the image using android.graphics.Matrix.ScaleToFit\#FILL.</td></tr>
  /// <tr><td>matrix</td><td>0</td><td>Scale using the image matrix when drawing. See
  /// android.widget.ImageView\#setImageMatrix(Matrix).</td></tr>
  /// </table>
  static const scaleType = 16843037;

  /// from: static public final int scaleWidth
  ///
  /// Scale width, expressed as a percentage of the drawable's bound. The value's
  /// format is XX%. For instance: 100%, 12.5%, etc.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const scaleWidth = 16843260;

  /// from: static public final int scaleX
  ///
  /// scale of the view in the x direction.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const scaleX = 16843556;

  /// from: static public final int scaleY
  ///
  /// scale of the view in the y direction.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const scaleY = 16843557;

  /// from: static public final int scheme
  ///
  /// Specify a URI scheme that is handled, as per
  /// android.content.IntentFilter\#addDataScheme IntentFilter.addDataScheme().
  /// _Note: scheme matching in the Android framework is
  /// case-sensitive, unlike the formal RFC.  As a result,
  /// schemes here should always use lower case letters._
  ///
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const scheme = 16842791;

  /// from: static public final int screenDensity
  ///
  /// Specifies a compatible screen density, as per the device
  /// configuration screen density bins.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>hdpi</td><td>f0</td><td>A high density screen, approximately 240dpi.</td></tr>
  /// <tr><td>ldpi</td><td>78</td><td>A low density screen, approximately 120dpi.</td></tr>
  /// <tr><td>mdpi</td><td>a0</td><td>A medium density screen, approximately 160dpi.</td></tr>
  /// <tr><td>xhdpi</td><td>140</td><td>An extra high density screen, approximately 320dpi.</td></tr>
  /// <tr><td>xxhdpi</td><td>1e0</td><td>An extra extra high density screen, approximately 480dpi.</td></tr>
  /// <tr><td>xxxhdpi</td><td>280</td><td>An extra extra extra high density screen, approximately 640dpi.</td></tr>
  /// </table>
  static const screenDensity = 16843467;

  /// from: static public final int screenOrientation
  ///
  /// Specify the orientation an activity should be run in.  If not
  /// specified, it will run in the current preferred orientation
  /// of the screen.
  /// This attribute is supported by the <a href="{@docRoot}guide/topics/manifest/activity-element.html">{@code <activity>}</a>
  /// element.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>behind</td><td>3</td><td>Keep the screen in the same orientation as whatever is behind
  /// this activity.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_BEHIND.</td></tr>
  /// <tr><td>fullSensor</td><td>a</td><td>Orientation is determined by a physical orientation sensor:
  /// the display will rotate based on how the user moves the device.
  /// This allows any of the 4 possible rotations, regardless of what
  /// the device will normally do (for example some devices won't
  /// normally use 180 degree rotation).
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_FULL_SENSOR.</td></tr>
  /// <tr><td>fullUser</td><td>d</td><td>Respect the user's sensor-based rotation preference, but if
  /// sensor-based rotation is enabled then allow the screen to rotate
  /// in all 4 possible directions regardless of what
  /// the device will normally do (for example some devices won't
  /// normally use 180 degree rotation).
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_FULL_USER.</td></tr>
  /// <tr><td>landscape</td><td>0</td><td>Would like to have the screen in a landscape orientation: that
  /// is, with the display wider than it is tall, ignoring sensor data.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_LANDSCAPE.</td></tr>
  /// <tr><td>locked</td><td>e</td><td>Screen is locked to its current rotation, whatever that is.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_LOCKED.</td></tr>
  /// <tr><td>nosensor</td><td>5</td><td>Always ignore orientation determined by orientation sensor:
  /// the display will not rotate when the user moves the device.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_NOSENSOR.</td></tr>
  /// <tr><td>portrait</td><td>1</td><td>Would like to have the screen in a portrait orientation: that
  /// is, with the display taller than it is wide, ignoring sensor data.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_PORTRAIT.</td></tr>
  /// <tr><td>reverseLandscape</td><td>8</td><td>Would like to have the screen in landscape orientation, turned in
  /// the opposite direction from normal landscape.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_REVERSE_LANDSCAPE.</td></tr>
  /// <tr><td>reversePortrait</td><td>9</td><td>Would like to have the screen in portrait orientation, turned in
  /// the opposite direction from normal portrait.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_REVERSE_PORTRAIT.</td></tr>
  /// <tr><td>sensor</td><td>4</td><td>Orientation is determined by a physical orientation sensor:
  /// the display will rotate based on how the user moves the device.
  /// Ignores user's setting to turn off sensor-based rotation.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_SENSOR.</td></tr>
  /// <tr><td>sensorLandscape</td><td>6</td><td>Would like to have the screen in landscape orientation, but can
  /// use the sensor to change which direction the screen is facing.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_SENSOR_LANDSCAPE.</td></tr>
  /// <tr><td>sensorPortrait</td><td>7</td><td>Would like to have the screen in portrait orientation, but can
  /// use the sensor to change which direction the screen is facing.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_SENSOR_PORTRAIT.</td></tr>
  /// <tr><td>unspecified</td><td>ffffffff</td><td>No preference specified: let the system decide the best
  /// orientation.  This will either be the orientation selected
  /// by the activity below, or the user's preferred orientation
  /// if this activity is the bottom of a task. If the user
  /// explicitly turned off sensor based orientation through settings
  /// sensor based device rotation will be ignored. If not by default
  /// sensor based orientation will be taken into account and the
  /// orientation will changed based on how the user rotates the device.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_UNSPECIFIED.</td></tr>
  /// <tr><td>user</td><td>2</td><td>Use the user's current preferred orientation of the handset.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_USER.</td></tr>
  /// <tr><td>userLandscape</td><td>b</td><td>Would like to have the screen in landscape orientation, but if
  /// the user has enabled sensor-based rotation then we can use the
  /// sensor to change which direction the screen is facing.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_USER_LANDSCAPE.</td></tr>
  /// <tr><td>userPortrait</td><td>c</td><td>Would like to have the screen in portrait orientation, but if
  /// the user has enabled sensor-based rotation then we can use the
  /// sensor to change which direction the screen is facing.
  /// Corresponds to
  /// android.content.pm.ActivityInfo\#SCREEN_ORIENTATION_USER_PORTRAIT.</td></tr>
  /// </table>
  static const screenOrientation = 16842782;

  /// from: static public final int screenReaderFocusable
  ///
  /// Whether this view should be treated as a focusable unit by screen reader accessibility
  /// tools. See android.view.View\#setScreenReaderFocusable(boolean). The default
  /// value, {@code false}, leaves the screen reader to consider other signals, such as
  /// focusability or the presence of text, to decide what it focus.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const screenReaderFocusable = 16844148;

  /// from: static public final int screenSize
  ///
  /// Specifies a compatible screen size, as per the device
  /// configuration screen size bins.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>large</td><td>190</td><td>A large screen configuration, at least 400x530dp.</td></tr>
  /// <tr><td>normal</td><td>12c</td><td>A normal screen configuration, at least 320x480dp.</td></tr>
  /// <tr><td>small</td><td>c8</td><td>A small screen configuration, at least 240x320dp.</td></tr>
  /// <tr><td>xlarge</td><td>1f4</td><td>An extra large screen configuration, at least 600x800dp.</td></tr>
  /// </table>
  static const screenSize = 16843466;

  /// from: static public final int scrollHorizontally
  ///
  /// Whether the text is allowed to be wider than the view (and
  /// therefore can be scrolled horizontally).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const scrollHorizontally = 16843099;

  /// from: static public final int scrollIndicators
  ///
  /// Defines which scroll indicators should be displayed when the view
  /// can be scrolled. Multiple values may be combined using logical OR,
  /// for example "top|bottom".
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bottom</td><td>2</td><td>Displays bottom scroll indicator when vew can be scrolled down.</td></tr>
  /// <tr><td>end</td><td>20</td><td>Displays right scroll indicator when vew can be scrolled in the
  /// end direction.</td></tr>
  /// <tr><td>left</td><td>4</td><td>Displays left scroll indicator when vew can be scrolled left.</td></tr>
  /// <tr><td>none</td><td>0</td><td>No scroll indicators are displayed.</td></tr>
  /// <tr><td>right</td><td>8</td><td>Displays right scroll indicator when vew can be scrolled right.</td></tr>
  /// <tr><td>start</td><td>10</td><td>Displays right scroll indicator when vew can be scrolled in the
  /// start direction.</td></tr>
  /// <tr><td>top</td><td>1</td><td>Displays top scroll indicator when view can be scrolled up.</td></tr>
  /// </table>
  static const scrollIndicators = 16844006;

  /// from: static public final int scrollViewStyle
  ///
  /// Default ScrollView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const scrollViewStyle = 16842880;

  /// from: static public final int scrollX
  ///
  /// The initial horizontal scroll offset, in pixels.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const scrollX = 16842962;

  /// from: static public final int scrollY
  ///
  /// The initial vertical scroll offset, in pixels.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const scrollY = 16842963;

  /// from: static public final int scrollbarAlwaysDrawHorizontalTrack
  ///
  /// Defines whether the horizontal scrollbar track should always be drawn.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const scrollbarAlwaysDrawHorizontalTrack = 16842856;

  /// from: static public final int scrollbarAlwaysDrawVerticalTrack
  ///
  /// Defines whether the vertical scrollbar track should always be drawn.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const scrollbarAlwaysDrawVerticalTrack = 16842857;

  /// from: static public final int scrollbarDefaultDelayBeforeFade
  ///
  /// Defines the delay in milliseconds that a scrollbar waits before fade out.
  /// May be an integer value, such as "<code>100</code>".
  static const scrollbarDefaultDelayBeforeFade = 16843433;

  /// from: static public final int scrollbarFadeDuration
  ///
  /// Defines the delay in milliseconds that a scrollbar takes to fade out.
  /// May be an integer value, such as "<code>100</code>".
  static const scrollbarFadeDuration = 16843432;

  /// from: static public final int scrollbarSize
  ///
  /// Sets the width of vertical scrollbars and height of horizontal scrollbars.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const scrollbarSize = 16842851;

  /// from: static public final int scrollbarStyle
  ///
  /// Controls the scrollbar style and position. The scrollbars can be overlaid or
  /// inset. When inset, they add to the padding of the view. And the
  /// scrollbars can be drawn inside the padding area or on the edge of
  /// the view. For example, if a view has a background drawable and you
  /// want to draw the scrollbars inside the padding specified by the
  /// drawable, you can use insideOverlay or insideInset. If you want them
  /// to appear at the edge of the view, ignoring the padding, then you can
  /// use outsideOverlay or outsideInset.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>insideInset</td><td>1000000</td><td>Inside the padding and inset.</td></tr>
  /// <tr><td>insideOverlay</td><td>0</td><td>Inside the padding and overlaid.</td></tr>
  /// <tr><td>outsideInset</td><td>3000000</td><td>Edge of the view and inset.</td></tr>
  /// <tr><td>outsideOverlay</td><td>2000000</td><td>Edge of the view and overlaid.</td></tr>
  /// </table>
  static const scrollbarStyle = 16842879;

  /// from: static public final int scrollbarThumbHorizontal
  ///
  /// Defines the horizontal scrollbar thumb drawable.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const scrollbarThumbHorizontal = 16842852;

  /// from: static public final int scrollbarThumbVertical
  ///
  /// Defines the vertical scrollbar thumb drawable.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const scrollbarThumbVertical = 16842853;

  /// from: static public final int scrollbarTrackHorizontal
  ///
  /// Defines the horizontal scrollbar track drawable.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const scrollbarTrackHorizontal = 16842854;

  /// from: static public final int scrollbarTrackVertical
  ///
  /// Defines the vertical scrollbar track drawable.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const scrollbarTrackVertical = 16842855;

  /// from: static public final int scrollbars
  ///
  /// Defines which scrollbars should be displayed on scrolling or not.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>horizontal</td><td>100</td><td>Displays horizontal scrollbar only.</td></tr>
  /// <tr><td>none</td><td>0</td><td>No scrollbar is displayed.</td></tr>
  /// <tr><td>vertical</td><td>200</td><td>Displays vertical scrollbar only.</td></tr>
  /// </table>
  static const scrollbars = 16842974;

  /// from: static public final int scrollingCache
  ///
  /// When set to true, the list uses a drawing cache during scrolling.
  /// This makes the rendering faster but uses more memory. The default
  /// value is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const scrollingCache = 16843006;

  /// from: static public final int searchButtonText
  ///
  /// If supplied, this string will be displayed as the text of the "Search" button.
  /// <i>Optional attribute.</i>
  /// {@deprecated This will create a non-standard UI appearance, because the search bar UI is
  /// changing to use only icons for its buttons.}
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const searchButtonText = 16843269;

  /// from: static public final int searchHintIcon
  ///
  /// Search icon displayed as a text field hint.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const searchHintIcon = 16843988;

  /// from: static public final int searchIcon
  ///
  /// Search icon.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const searchIcon = 16843907;

  /// from: static public final int searchMode
  ///
  /// Additional features are controlled by mode bits in this field.  Omitting
  /// this field, or setting to zero, provides default behavior.  <i>Optional attribute.</i>
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>queryRewriteFromData</td><td>10</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_INTENT_DATA to
  /// be considered as the text for suggestion query rewriting.  This should only
  /// be used when the values in SUGGEST_COLUMN_INTENT_DATA are suitable for user
  /// inspection and editing - typically, HTTP/HTTPS Uri's.</td></tr>
  /// <tr><td>queryRewriteFromText</td><td>20</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_TEXT_1 to
  /// be considered as the text for suggestion query rewriting.  This should be used
  /// for suggestions in which no query text is provided and the SUGGEST_COLUMN_INTENT_DATA
  /// values are not suitable for user inspection and editing.</td></tr>
  /// <tr><td>showSearchIconAsBadge</td><td>8</td><td><strong>This is deprecated.</strong><br/>The default
  /// application icon is now always used, so this option is
  /// obsolete.</td></tr>
  /// <tr><td>showSearchLabelAsBadge</td><td>4</td><td>If set, this flag enables the display of the search target (label) within the
  /// search bar.  If neither bad mode is selected, no badge will be shown.</td></tr>
  /// </table>
  static const searchMode = 16843221;

  /// from: static public final int searchSettingsDescription
  ///
  /// If provided, this string will be used to describe the searchable item in the
  /// searchable items settings within system search settings. <i>Optional
  /// attribute.</i>
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const searchSettingsDescription = 16843402;

  /// from: static public final int searchSuggestAuthority
  ///
  /// If provided, this is the trigger indicating that the searchable activity
  /// provides suggestions as well.  The value must be a fully-qualified content provider
  /// authority (for example, "com.example.android.apis.SuggestionProvider") and should match
  /// the "android:authorities" tag in your content provider's manifest entry.  <i>Optional
  /// attribute.</i>
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const searchSuggestAuthority = 16843222;

  /// from: static public final int searchSuggestIntentAction
  ///
  /// If provided, and not overridden by an action in the selected suggestion, this
  /// string will be placed in the action field of the android.content.Intent Intent
  /// when the user clicks a suggestion.  <i>Optional attribute.</i>
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const searchSuggestIntentAction = 16843225;

  /// from: static public final int searchSuggestIntentData
  ///
  /// If provided, and not overridden by an action in the selected suggestion, this
  /// string will be placed in the data field of the android.content.Intent Intent
  /// when the user clicks a suggestion.  <i>Optional attribute.</i>
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const searchSuggestIntentData = 16843226;

  /// from: static public final int searchSuggestPath
  ///
  /// If provided, this will be inserted in the suggestions query Uri, after the authority
  /// you have provide but before the standard suggestions path. <i>Optional attribute.</i>
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const searchSuggestPath = 16843223;

  /// from: static public final int searchSuggestSelection
  ///
  /// If provided, suggestion queries will be passed into your query function
  /// as the <i>selection</i> parameter.  Typically this will be a WHERE clause for your
  /// database, and will contain a single question mark, which represents the actual query
  /// string that has been typed by the user.  If not provided, then the user query text
  /// will be appended to the query Uri (after an additional "/".)  <i>Optional
  /// attribute.</i>
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const searchSuggestSelection = 16843224;

  /// from: static public final int searchSuggestThreshold
  ///
  /// If provided, this is the minimum number of characters needed to trigger
  /// search suggestions. The default value is 0. <i>Optional attribute.</i>
  /// May be an integer value, such as "<code>100</code>".
  static const searchSuggestThreshold = 16843373;

  /// from: static public final int searchViewStyle
  ///
  /// Style for the search query widget.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const searchViewStyle = 16843904;

  /// from: static public final int secondaryContentAlpha
  ///
  /// The alpha applied to the foreground color to create the secondary text color.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const secondaryContentAlpha = 16844115;

  /// from: static public final int secondaryProgress
  ///
  /// Defines the secondary progress value, between 0 and max. This progress is drawn between
  /// the primary progress and the background.  It can be ideal for media scenarios such as
  /// showing the buffering progress while the default progress shows the play progress.
  /// May be an integer value, such as "<code>100</code>".
  static const secondaryProgress = 16843064;

  /// from: static public final int secondaryProgressTint
  ///
  /// Tint to apply to the secondary progress indicator.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const secondaryProgressTint = 16843879;

  /// from: static public final int secondaryProgressTintMode
  ///
  /// Blending mode used to apply the secondary progress indicator tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const secondaryProgressTintMode = 16843880;

  /// from: static public final int seekBarStyle
  ///
  /// Default SeekBar style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const seekBarStyle = 16842875;

  /// from: static public final int segmentedButtonStyle
  ///
  /// Style for segmented buttons - a container that houses several buttons
  /// with the appearance of a singel button broken into segments.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const segmentedButtonStyle = 16843568;

  /// from: static public final int selectAllOnFocus
  ///
  /// If the text is selectable, select it all when the view takes
  /// focus.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const selectAllOnFocus = 16843102;

  /// from: static public final int selectable
  ///
  /// Whether the Preference is selectable.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const selectable = 16843238;

  /// from: static public final int selectableItemBackground
  ///
  /// Background drawable for bordered standalone items that need focus/pressed states.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const selectableItemBackground = 16843534;

  /// from: static public final int selectableItemBackgroundBorderless
  ///
  /// Background drawable for borderless standalone items that need focus/pressed states.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const selectableItemBackgroundBorderless = 16843868;

  /// from: static public final int selectedDateVerticalBar
  ///
  /// @deprecated Drawable for the vertical bar shown at the beginning and at the end of the selected date.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const selectedDateVerticalBar = 16843591;

  /// from: static public final int selectedWeekBackgroundColor
  ///
  /// @deprecated The background color for the selected week.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const selectedWeekBackgroundColor = 16843586;

  /// from: static public final int sessionService
  ///
  /// The service that hosts active voice interaction sessions.  This is required.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const sessionService = 16843837;

  /// from: static public final int settingsActivity
  ///
  /// Component name of an activity that allows the user to modify
  /// the settings for this service.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const settingsActivity = 16843301;

  /// from: static public final int setupActivity
  ///
  /// Component name of an activity that allows the user to set up this service.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const setupActivity = 16843766;

  /// from: static public final int shadowColor
  ///
  /// Place a blurred shadow of text underneath the text, drawn with the
  /// specified color. The text shadow produced does not interact with
  /// properties on View that are responsible for real time shadows,
  /// android.R.styleable\#View_elevation elevation and
  /// android.R.styleable\#View_translationZ translationZ.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const shadowColor = 16843105;

  /// from: static public final int shadowDx
  ///
  /// Horizontal offset of the text shadow.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const shadowDx = 16843106;

  /// from: static public final int shadowDy
  ///
  /// Vertical offset of the text shadow.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const shadowDy = 16843107;

  /// from: static public final int shadowRadius
  ///
  /// Blur radius of the text shadow.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const shadowRadius = 16843108;

  /// from: static public final int shape
  ///
  /// Indicates what shape to fill with a gradient.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>line</td><td>2</td><td>Line shape.</td></tr>
  /// <tr><td>oval</td><td>1</td><td>Oval shape.</td></tr>
  /// <tr><td>rectangle</td><td>0</td><td>Rectangle shape, with optional rounder corners.</td></tr>
  /// <tr><td>ring</td><td>3</td><td>Ring shape.</td></tr>
  /// </table>
  static const shape = 16843162;

  /// from: static public final int shareInterpolator
  ///
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const shareInterpolator = 16843195;

  /// from: static public final int sharedUserId
  ///
  /// Specify the name of a user ID that will be shared between multiple
  /// packages.  By default, each package gets its own unique user-id.
  /// By setting this value on two or more packages, each of these packages
  /// will be given a single shared user ID, so they can for example run
  /// in the same process.  Note that for them to actually get the same
  /// user ID, they must also be signed with the same signature.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const sharedUserId = 16842763;

  /// from: static public final int sharedUserLabel
  ///
  /// Specify a label for the shared user UID of this package.  This is
  /// only used if you have also used android:sharedUserId.  This must
  /// be a reference to a string resource; it can not be an explicit
  /// string.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const sharedUserLabel = 16843361;

  /// from: static public final int shortcutDisabledMessage
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const shortcutDisabledMessage = 16844075;

  /// from: static public final int shortcutId
  ///
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const shortcutId = 16844072;

  /// from: static public final int shortcutLongLabel
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const shortcutLongLabel = 16844074;

  /// from: static public final int shortcutShortLabel
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const shortcutShortLabel = 16844073;

  /// from: static public final int shouldDisableView
  ///
  /// Whether the view of this Preference should be disabled when
  /// this Preference is disabled.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const shouldDisableView = 16843246;

  /// from: static public final int showAsAction
  ///
  /// How this item should display in the Action Bar, if present.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>always</td><td>2</td><td>Always show this item in an actionbar, even if it would override
  /// the system's limits of how much stuff to put there. This may make
  /// your action bar look bad on some screens. In most cases you should
  /// use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never".</td></tr>
  /// <tr><td>collapseActionView</td><td>8</td><td>This item's action view collapses to a normal menu
  /// item. When expanded, the action view takes over a
  /// larger segment of its container.</td></tr>
  /// <tr><td>ifRoom</td><td>1</td><td>Show this item in an action bar if there is room for it as determined
  /// by the system. Favor this option over "always" where possible.
  /// Mutually exclusive with "never" and "always".</td></tr>
  /// <tr><td>never</td><td>0</td><td>Never show this item in an action bar, show it in the overflow menu instead.
  /// Mutually exclusive with "ifRoom" and "always".</td></tr>
  /// <tr><td>withText</td><td>4</td><td>When this item is shown as an action in the action bar, show a text
  /// label with it even if it has an icon representation.</td></tr>
  /// </table>
  static const showAsAction = 16843481;

  /// from: static public final int showDefault
  ///
  /// Whether to show an item for a default sound.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const showDefault = 16843258;

  /// from: static public final int showDividers
  ///
  /// Setting for which dividers to show.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>beginning</td><td>1</td><td></td></tr>
  /// <tr><td>end</td><td>4</td><td></td></tr>
  /// <tr><td>middle</td><td>2</td><td></td></tr>
  /// <tr><td>none</td><td>0</td><td></td></tr>
  /// </table>
  static const showDividers = 16843561;

  /// from: static public final int showForAllUsers
  ///
  /// Specify that an Activity should be shown even if the current/foreground user
  /// is different from the user of the Activity. This will also force the
  /// <code>android.view.LayoutParams.FLAG_SHOW_WHEN_LOCKED</code> flag
  /// to be set for all windows of this activity
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const showForAllUsers = 16844015;

  /// from: static public final int showMetadataInPreview
  ///
  /// Whether to show any metadata when previewing the wallpaper. If this value is
  /// set to true, any component that shows a preview of this live wallpaper should also show
  /// accompanying information like the title, the description, the author and the context
  /// description of this wallpaper so the user gets to know further information about this
  /// wallpaper.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const showMetadataInPreview = 16844079;

  /// from: static public final int showOnLockScreen
  ///
  /// Specify that an Activity should be shown over the lock screen and,
  /// in a multiuser environment, across all users' windows.
  ///@deprecated use android.R.attr\#showForAllUsers instead.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const showOnLockScreen = 16843721;

  /// from: static public final int showSilent
  ///
  /// Whether to show an item for 'Silent'.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const showSilent = 16843259;

  /// from: static public final int showText
  ///
  /// Whether to draw on/off text.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const showText = 16843949;

  /// from: static public final int showWeekNumber
  ///
  /// @deprecated Whether do show week numbers.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const showWeekNumber = 16843582;

  /// from: static public final int showWhenLocked
  ///
  /// Specifies whether an android.app.Activity should be shown on top of the the lock screen
  /// whenever the lockscreen is up and the activity is resumed. Normally an activity will be
  /// transitioned to the stopped state if it is started while the lockscreen is up, but with
  /// this flag set the activity will remain in the resumed state visible on-top of the lock
  /// screen.
  /// This should be used instead of android.view.WindowManager.LayoutParams\#FLAG_SHOW_WHEN_LOCKED
  /// flag set for Windows. When using the Window flag during activity startup, there may not be
  /// time to add it before the system stops your activity for being behind the lock-screen.
  /// This leads to a double life-cycle as it is then restarted.
  ///
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const showWhenLocked = 16844137;

  /// from: static public final int shownWeekCount
  ///
  /// @deprecated The number of weeks to be shown.
  /// May be an integer value, such as "<code>100</code>".
  static const shownWeekCount = 16843585;

  /// from: static public final int shrinkColumns
  ///
  /// The zero-based index of the columns to shrink. The column indices
  /// must be separated by a comma: 1, 2, 5. Illegal and duplicate
  /// indices are ignored. You can shrink all columns by using the
  /// value "*" instead. Note that a column can be marked stretchable
  /// and shrinkable at the same time.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const shrinkColumns = 16843082;

  /// from: static public final int singleLine
  ///
  /// Constrains the text to a single horizontally scrolling line
  /// instead of letting it wrap onto multiple lines, and advances
  /// focus instead of inserting a newline when you press the
  /// enter key.
  /// The default value is false (multi-line wrapped text mode) for non-editable text, but if
  /// you specify any value for inputType, the default is true (single-line input field mode).
  /// {@deprecated This attribute is deprecated. Use <code>maxLines</code> instead to change
  /// the layout of a static text, and use the <code>textMultiLine</code> flag in the
  /// inputType attribute instead for editable text views (if both singleLine and inputType
  /// are supplied, the inputType flags will override the value of singleLine). }
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const singleLine = 16843101;

  /// from: static public final int singleLineTitle
  ///
  /// Whether to use single line for the preference title text. By default, preference title
  /// will be constrained to one line, so the default value of this attribute is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const singleLineTitle = 16844124;

  /// from: static public final int singleUser
  ///
  /// If set to true, a single instance of this component will run for
  /// all users.  That instance will run as user 0, the default/primary
  /// user.  When the app running is in processes for other users and interacts
  /// with this component (by binding to a service for example) those processes will
  /// always interact with the instance running for user 0.  Enabling
  /// single user mode forces "exported" of the component to be false, to
  /// help avoid introducing multi-user security bugs.  This feature is only
  /// available to applications built in to the system image; you must hold the
  /// permission INTERACT_ACROSS_USERS in order
  /// to use this feature.  This flag can only be used with services,
  /// receivers, and providers; it can not be used with activities.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const singleUser = 16843711;

  /// from: static public final int slideEdge
  ///
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bottom</td><td>50</td><td>Slide to and from the bottom edge of the Scene.</td></tr>
  /// <tr><td>end</td><td>800005</td><td>Slide to and from the x-axis position at the end of the Scene root.</td></tr>
  /// <tr><td>left</td><td>3</td><td>Slide to and from the left edge of the Scene.</td></tr>
  /// <tr><td>right</td><td>5</td><td>Slide to and from the right edge of the Scene.</td></tr>
  /// <tr><td>start</td><td>800003</td><td>Slide to and from the x-axis position at the start of the Scene root.</td></tr>
  /// <tr><td>top</td><td>30</td><td>Slide to and from the top edge of the Scene.</td></tr>
  /// </table>
  static const slideEdge = 16843824;

  /// from: static public final int smallIcon
  ///
  /// Smaller icon of the authenticator.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const smallIcon = 16843422;

  /// from: static public final int smallScreens
  ///
  /// Indicates whether the application supports smaller screen form-factors.
  /// A small screen is defined as one with a smaller aspect ratio than
  /// the traditional HVGA screen; that is, for a portrait screen, less
  /// tall than an HVGA screen.  In practice, this means a QVGA low
  /// density or VGA high density screen.  An application that does
  /// not support small screens _will not be available_ for
  /// small screen devices, since there is little the platform can do
  /// to make such an application work on a smaller screen.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const smallScreens = 16843396;

  /// from: static public final int smoothScrollbar
  ///
  /// When set to true, the list will use a more refined calculation
  /// method based on the pixels height of the items visible on screen. This
  /// property is set to true by default but should be set to false if your adapter
  /// will display items of varying heights. When this property is set to true and
  /// your adapter displays items of varying heights, the scrollbar thumb will
  /// change size as the user scrolls through the list. When set to false, the list
  /// will use only the number of items in the adapter and the number of items visible
  /// on screen to determine the scrollbar's properties.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const smoothScrollbar = 16843313;

  /// from: static public final int soundEffectsEnabled
  ///
  /// Boolean that controls whether a view should have sound effects
  /// enabled for events such as clicking and touching.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const soundEffectsEnabled = 16843285;

  /// from: static public final int spacing
  ///
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const spacing = 16843027;

  /// from: static public final int spinnerDropDownItemStyle
  ///
  /// Default style for spinner drop down items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const spinnerDropDownItemStyle = 16842887;

  /// from: static public final int spinnerItemStyle
  ///
  /// Default spinner item style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const spinnerItemStyle = 16842889;

  /// from: static public final int spinnerMode
  ///
  /// Display mode for spinner options.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>dialog</td><td>0</td><td>Spinner options will be presented to the user as a dialog window.</td></tr>
  /// <tr><td>dropdown</td><td>1</td><td>Spinner options will be presented to the user as an inline dropdown
  /// anchored to the spinner widget itself.</td></tr>
  /// </table>
  static const spinnerMode = 16843505;

  /// from: static public final int spinnerStyle
  ///
  /// Default Spinner style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const spinnerStyle = 16842881;

  /// from: static public final int spinnersShown
  ///
  /// Whether the spinners are shown. Only valid for "spinner" mode.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const spinnersShown = 16843595;

  /// from: static public final int splitMotionEvents
  ///
  /// Sets whether this ViewGroup should split MotionEvents
  /// to separate child views during touch event dispatch.
  /// If false (default), touch events will be dispatched to
  /// the child view where the first pointer went down until
  /// the last pointer goes up.
  /// If true, touch events may be dispatched to multiple children.
  /// MotionEvents for each pointer will be dispatched to the child
  /// view where the initial ACTION_DOWN event happened.
  /// See android.view.ViewGroup\#setMotionEventSplittingEnabled(boolean)
  /// for more information.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const splitMotionEvents = 16843503;

  /// from: static public final int splitName
  ///
  /// When an application is partitioned into splits, this is the name of the
  /// split that contains the defined component.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const splitName = 16844105;

  /// from: static public final int splitTrack
  ///
  /// Whether to split the track and leave a gap for the thumb drawable.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const splitTrack = 16843852;

  /// from: static public final int spotShadowAlpha
  ///
  /// Alpha value of the spot shadow projected by elevated views, between 0 and 1.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const spotShadowAlpha = 16843967;

  /// from: static public final int src
  ///
  /// Sets a drawable as the content of this ImageView.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const src = 16843033;

  /// from: static public final int ssp
  ///
  /// Specify a URI scheme specific part that must exactly match, as per
  /// android.content.IntentFilter\#addDataSchemeSpecificPart IntentFilter.addDataSchemeSpecificPart() with
  /// android.os.PatternMatcher\#PATTERN_LITERAL.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const ssp = 16843747;

  /// from: static public final int sspPattern
  ///
  /// Specify a URI scheme specific part that matches a simple pattern, as per
  /// android.content.IntentFilter\#addDataSchemeSpecificPart IntentFilter.addDataSchemeSpecificPart() with
  /// android.os.PatternMatcher\#PATTERN_SIMPLE_GLOB.
  /// Note that because '\' is used as an escape character when
  /// reading the string from XML (before it is parsed as a pattern),
  /// you will need to double-escape: for example a literal "*" would
  /// be written as "\\*" and a literal "\" would be written as
  /// "\\\\".  This is basically the same as what you would need to
  /// write if constructing the string in Java code.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const sspPattern = 16843749;

  /// from: static public final int sspPrefix
  ///
  /// Specify a URI scheme specific part that must be a prefix to match, as per
  /// android.content.IntentFilter\#addDataSchemeSpecificPart IntentFilter.addDataSchemeSpecificPart() with
  /// android.os.PatternMatcher\#PATTERN_PREFIX.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const sspPrefix = 16843748;

  /// from: static public final int stackFromBottom
  ///
  /// Used by ListView and GridView to stack their content from the bottom.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const stackFromBottom = 16843005;

  /// from: static public final int stackViewStyle
  ///
  /// Default StackView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const stackViewStyle = 16843838;

  /// from: static public final int starStyle
  ///
  /// Default Star style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const starStyle = 16842882;

  /// from: static public final int start
  ///
  /// Start inset to apply to the layer. Overrides {@code left} or
  /// {@code right} depending on layout direction.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const start = 16843995;

  /// from: static public final int startColor
  ///
  /// Start color of the gradient.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const startColor = 16843165;

  /// from: static public final int startDelay
  ///
  /// Delay in milliseconds before the transition starts.
  /// May be an integer value, such as "<code>100</code>".
  static const startDelay = 16843746;

  /// from: static public final int startOffset
  ///
  /// Delay in milliseconds before the animation runs, once start time is reached.
  /// May be an integer value, such as "<code>100</code>".
  static const startOffset = 16843198;

  /// from: static public final int startX
  ///
  /// X coordinate of the start point origin of the gradient.
  /// Defined in same coordinates as the path itself
  /// May be a floating point value, such as "<code>1.2</code>".
  static const startX = 16844048;

  /// from: static public final int startY
  ///
  /// Y coordinate of the start point of the gradient within the shape.
  /// Defined in same coordinates as the path itself
  /// May be a floating point value, such as "<code>1.2</code>".
  static const startY = 16844049;

  /// from: static public final int startYear
  ///
  /// {@deprecated Use minDate instead.}
  /// The first year (inclusive), for example "1940".
  /// {@deprecated Use minDate instead.}
  /// May be an integer value, such as "<code>100</code>".
  static const startYear = 16843132;

  /// from: static public final int stateListAnimator
  ///
  /// Sets the state-based animator for the View.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const stateListAnimator = 16843848;

  /// from: static public final int stateNotNeeded
  ///
  /// Indicates that an Activity does not need to have its freeze state
  /// (as returned by android.app.Activity\#onSaveInstanceState
  /// retained in order to be restarted.  Generally you use this for activities
  /// that do not store any state.  When this flag is set, if for some reason
  /// the activity is killed before it has a chance to save its state,
  /// then the system will not remove it from the activity stack like
  /// it normally would.  Instead, the next time the user navigates to
  /// it its android.app.Activity\#onCreate method will be called
  /// with a null icicle, just like it was starting for the first time.
  /// This is used by the Home activity to make sure it does not get
  /// removed if it crashes for some reason.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const stateNotNeeded = 16842774;

  /// from: static public final int state_above_anchor
  ///
  /// State identifier indicating the popup will be above the anchor.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_above_anchor = 16842922;

  /// from: static public final int state_accelerated
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// indicating that the Drawable is in a view that is hardware accelerated.
  /// This means that the device can at least render a full-screen scaled
  /// bitmap with one layer of text and bitmaps composited on top of it
  /// at 60fps.  When this is set, the colorBackgroundCacheHint will be
  /// ignored even if it specifies a solid color, since that optimization
  /// is not needed.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_accelerated = 16843547;

  /// from: static public final int state_activated
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when a view or its parent has been "activated" meaning the user has currently
  /// marked it as being of interest.  This is an alternative representation of
  /// state_checked for when the state should be propagated down the view hierarchy.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_activated = 16843518;

  /// from: static public final int state_active
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when a view or drawable is considered "active" by its host. Actual usage may vary
  /// between views. Consult the host view documentation for details.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_active = 16842914;

  /// from: static public final int state_checkable
  ///
  /// State identifier indicating that the object <var>may</var> display a check mark. See
  /// android.R.attr\#state_checked for the identifier that indicates whether it is
  /// actually checked.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_checkable = 16842911;

  /// from: static public final int state_checked
  ///
  /// State identifier indicating that the object is currently checked.  See
  /// android.R.attr\#state_checkable for an additional identifier that can indicate
  /// if any object may ever display a check, regardless of whether state_checked is
  /// currently set.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_checked = 16842912;

  /// from: static public final int state_drag_can_accept
  ///
  /// State for android.graphics.drawable.StateListDrawable StateListDrawable
  /// indicating that the Drawable is in a view that is capable of accepting a drop of
  /// the content currently being manipulated in a drag-and-drop operation.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_drag_can_accept = 16843624;

  /// from: static public final int state_drag_hovered
  ///
  /// State for android.graphics.drawable.StateListDrawable StateListDrawable
  /// indicating that a drag operation (for which the Drawable's view is a valid recipient)
  /// is currently positioned over the Drawable.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_drag_hovered = 16843625;

  /// from: static public final int state_empty
  ///
  /// State identifier indicating the group is empty (has no children).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_empty = 16842921;

  /// from: static public final int state_enabled
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when a view is enabled.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_enabled = 16842910;

  /// from: static public final int state_expanded
  ///
  /// State identifier indicating the group is expanded.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_expanded = 16842920;

  /// from: static public final int state_first
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when a view or drawable is in the first position in an ordered set. Actual usage
  /// may vary between views. Consult the host view documentation for details.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_first = 16842916;

  /// from: static public final int state_focused
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when a view has input focus.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_focused = 16842908;

  /// from: static public final int state_hovered
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when a pointer is hovering over the view.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_hovered = 16843623;

  /// from: static public final int state_last
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when a view or drawable is in the last position in an ordered set. Actual usage
  /// may vary between views. Consult the host view documentation for details.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_last = 16842918;

  /// from: static public final int state_long_pressable
  ///
  /// State for android.inputmethodservice.KeyboardView KeyboardView
  /// key preview background.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_long_pressable = 16843324;

  /// from: static public final int state_middle
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when a view or drawable is in the middle position in an ordered set. Actual usage
  /// may vary between views. Consult the host view documentation for details.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_middle = 16842917;

  /// from: static public final int state_multiline
  ///
  /// State identifier indicating a TextView has a multi-line layout.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_multiline = 16843597;

  /// from: static public final int state_pressed
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when the user is pressing down in a view.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_pressed = 16842919;

  /// from: static public final int state_selected
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when a view (or one of its parents) is currently selected.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_selected = 16842913;

  /// from: static public final int state_single
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when a view or drawable is considered "single" by its host. Actual usage may vary
  /// between views. Consult the host view documentation for details.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_single = 16842915;

  /// from: static public final int state_window_focused
  ///
  /// State value for android.graphics.drawable.StateListDrawable StateListDrawable,
  /// set when a view's window has input focus.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const state_window_focused = 16842909;

  /// from: static public final int staticWallpaperPreview
  ///
  /// A resource id of a static drawable.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const staticWallpaperPreview = 16843569;

  /// from: static public final int statusBarColor
  ///
  /// The color for the status bar. If the color is not opaque, consider setting
  /// android.view.View\#SYSTEM_UI_FLAG_LAYOUT_STABLE and
  /// android.view.View\#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN.
  /// For this to take effect, the window must be drawing the system bar backgrounds with
  /// android.R.attr\#windowDrawsSystemBarBackgrounds and the status bar must not
  /// have been requested to be translucent with
  /// android.R.attr\#windowTranslucentStatus.
  /// Corresponds to android.view.Window\#setStatusBarColor(int).
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const statusBarColor = 16843857;

  /// from: static public final int stepSize
  ///
  /// The step size of the rating.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const stepSize = 16843078;

  /// from: static public final int stopWithTask
  ///
  /// If set to true, this service with be automatically stopped
  /// when the user remove a task rooted in an activity owned by
  /// the application.  The default is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const stopWithTask = 16843626;

  /// from: static public final int streamType
  ///
  /// Different audio stream types.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>alarm</td><td>4</td><td></td></tr>
  /// <tr><td>music</td><td>3</td><td></td></tr>
  /// <tr><td>ring</td><td>2</td><td></td></tr>
  /// <tr><td>system</td><td>1</td><td></td></tr>
  /// <tr><td>voice</td><td>0</td><td></td></tr>
  /// </table>
  static const streamType = 16843273;

  /// from: static public final int stretchColumns
  ///
  /// The zero-based index of the columns to stretch. The column indices
  /// must be separated by a comma: 1, 2, 5. Illegal and duplicate
  /// indices are ignored. You can stretch all columns by using the
  /// value "*" instead. Note that a column can be marked stretchable
  /// and shrinkable at the same time.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const stretchColumns = 16843081;

  /// from: static public final int stretchMode
  ///
  /// Defines how columns should stretch to fill the available empty space, if any.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>columnWidth</td><td>2</td><td>Each column is stretched equally.</td></tr>
  /// <tr><td>none</td><td>0</td><td>Stretching is disabled.</td></tr>
  /// <tr><td>spacingWidth</td><td>1</td><td>The spacing between each column is stretched.</td></tr>
  /// <tr><td>spacingWidthUniform</td><td>3</td><td>The spacing between each column is uniformly stretched..</td></tr>
  /// </table>
  static const stretchMode = 16843030;

  /// from: static public final int strokeAlpha
  ///
  /// The opacity of a path stroke, as a value between 0 (completely transparent)
  /// and 1 (completely opaque).
  /// May be a floating point value, such as "<code>1.2</code>".
  static const strokeAlpha = 16843979;

  /// from: static public final int strokeColor
  ///
  /// The color to stroke the path if not defined implies no stroke.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const strokeColor = 16843782;

  /// from: static public final int strokeLineCap
  ///
  /// sets the linecap for a stroked path.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>butt</td><td>0</td><td></td></tr>
  /// <tr><td>round</td><td>1</td><td></td></tr>
  /// <tr><td>square</td><td>2</td><td></td></tr>
  /// </table>
  static const strokeLineCap = 16843787;

  /// from: static public final int strokeLineJoin
  ///
  /// sets the lineJoin for a stroked path.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bevel</td><td>2</td><td></td></tr>
  /// <tr><td>miter</td><td>0</td><td></td></tr>
  /// <tr><td>round</td><td>1</td><td></td></tr>
  /// </table>
  static const strokeLineJoin = 16843788;

  /// from: static public final int strokeMiterLimit
  ///
  /// sets the Miter limit for a stroked path.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const strokeMiterLimit = 16843789;

  /// from: static public final int strokeWidth
  ///
  /// The width a path stroke.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const strokeWidth = 16843783;

  /// from: static public final int subMenuArrow
  ///
  /// Drawable for the arrow icon indicating a particular item is a submenu.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const subMenuArrow = 16844019;

  /// from: static public final int submitBackground
  ///
  /// Background for the section containing the action (for example, voice search).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const submitBackground = 16843912;

  /// from: static public final int subtitle
  ///
  /// Specifies subtitle text used for navigationMode="normal".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const subtitle = 16843473;

  /// from: static public final int subtitleTextAppearance
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const subtitleTextAppearance = 16843823;

  /// from: static public final int subtitleTextColor
  ///
  /// A color to apply to the subtitle string.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const subtitleTextColor = 16844004;

  /// from: static public final int subtitleTextStyle
  ///
  /// Specifies a style to use for subtitle text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const subtitleTextStyle = 16843513;

  /// from: static public final int subtypeExtraValue
  ///
  /// The extra value of the subtype. This string can be any string and will be passed to
  /// the SpellChecker.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const subtypeExtraValue = 16843674;

  /// from: static public final int subtypeId
  ///
  /// The unique id for the subtype. The input method framework keeps track of enabled
  /// subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even
  /// if other attributes are different. If the ID is unspecified (by calling the other
  /// constructor or 0. Arrays.hashCode(new Object[] {locale, mode, extraValue,
  /// isAuxiliary, overridesImplicitlyEnabledSubtype}) will be used instead.
  /// May be an integer value, such as "<code>100</code>".
  static const subtypeId = 16843713;

  /// from: static public final int subtypeLocale
  ///
  /// The locale of the subtype. This string should be a locale (for example, en_US and
  /// fr_FR). This is also used by the framework to know the supported locales
  /// of the spell checker. android.view.textservice.SpellCheckerSubtype\#getLocale()
  /// returns the value specified in this attribute.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const subtypeLocale = 16843673;

  /// from: static public final int suggestActionMsg
  ///
  /// If you wish to handle an action key while a suggestion is being displayed <i>and
  /// selected</i>, there are two ways to handle this.  If <i>all</i> of your suggestions
  /// can handle the action key, you can simply define the action message using this
  /// attribute.  This will be added to the
  /// android.content.Intent\#ACTION_SEARCH ACTION_SEARCH intent that is passed to your
  /// searchable activity.  To examine the string, use
  /// android.content.Intent\#getStringExtra getStringExtra(SearchManager.ACTION_MSG).
  /// <i>Optional attribute.</i>
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const suggestActionMsg = 16843228;

  /// from: static public final int suggestActionMsgColumn
  ///
  /// If you wish to handle an action key while a suggestion is being displayed <i>and
  /// selected</i>, but you do not wish to enable this action key for every suggestion,
  /// then you can use this attribute to control it on a suggestion-by-suggestion basis.
  /// First, you must define a column (and name it here) where your suggestions will include
  /// the action string.  Then, in your content provider, you must provide this column, and
  /// when desired, provide data in this column.
  /// The search manager will look at your suggestion cursor, using the string
  /// provided here in order to select a column, and will use that to select a string from
  /// the cursor.  That string will be added to the
  /// android.content.Intent\#ACTION_SEARCH ACTION_SEARCH intent that is passed to
  /// your searchable activity.  To examine the string, use
  /// android.content.Intent\#getStringExtra getStringExtra(SearchManager.ACTION_MSG).  <i>If the data does not exist for the
  /// selection suggestion, the action key will be ignored.</i><i>Optional attribute.</i>
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const suggestActionMsgColumn = 16843229;

  /// from: static public final int suggestionRowLayout
  ///
  /// Layout for query suggestion rows.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const suggestionRowLayout = 16843910;

  /// from: static public final int summary
  ///
  /// The summary for the item.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const summary = 16843241;

  /// from: static public final int summaryColumn
  ///
  /// Column in data table that summarizes this data.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const summaryColumn = 16843426;

  /// from: static public final int summaryOff
  ///
  /// The summary for the Preference in a PreferenceActivity screen when the
  /// CheckBoxPreference is unchecked. If separate on/off summaries are not
  /// needed, the summary attribute can be used instead.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const summaryOff = 16843248;

  /// from: static public final int summaryOn
  ///
  /// The summary for the Preference in a PreferenceActivity screen when the
  /// CheckBoxPreference is checked. If separate on/off summaries are not
  /// needed, the summary attribute can be used instead.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const summaryOn = 16843247;

  /// from: static public final int supportsAssist
  ///
  /// Flag indicating whether this voice interaction service is capable of handling the
  /// assist action.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const supportsAssist = 16844016;

  /// from: static public final int supportsLaunchVoiceAssistFromKeyguard
  ///
  /// Flag indicating whether this voice interaction service is capable of being launched
  /// from the keyguard.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const supportsLaunchVoiceAssistFromKeyguard = 16844017;

  /// from: static public final int supportsLocalInteraction
  ///
  /// Flag indicating whether this voice interaction service can handle local voice
  /// interaction requests from an Activity. This flag is new in
  /// android.os.Build.VERSION_CODES\#N and not used in previous versions.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const supportsLocalInteraction = 16844047;

  /// from: static public final int supportsPictureInPicture
  ///
  /// Indicates that the activity specifically supports the picture-in-picture form of
  /// multi-window. If true, this activity will support entering picture-in-picture, but will
  /// only support split-screen and other forms of multi-window if
  /// android.R.attr\#resizeableActivity is also set to true.
  /// Note that your activity may still be resized even if this attribute is true and
  /// android.R.attr\#resizeableActivity is false.
  /// The default value is <code>false</code>.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const supportsPictureInPicture = 16844023;

  /// from: static public final int supportsRtl
  ///
  /// Declare that your application will be able to deal with RTL (right to left) layouts.
  /// The default value is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const supportsRtl = 16843695;

  /// from: static public final int supportsSwitchingToNextInputMethod
  ///
  /// Set to true if this input method supports ways to switch to
  /// a next input method (for example, a globe key.). When this is true and
  /// InputMethodManager\#shouldOfferSwitchingToNextInputMethod() returns true,
  /// the IME has to offer ways to invoke InputMethodManager\#switchToNextInputMethod()
  /// accordingly.
  ///  Note that the system determines the most appropriate next input method
  /// and subtype in order to provide the consistent user experience in switching
  /// between IMEs and subtypes.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const supportsSwitchingToNextInputMethod = 16843755;

  /// from: static public final int supportsUploading
  ///
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const supportsUploading = 16843419;

  /// from: static public final int switchMinWidth
  ///
  /// Minimum width for the switch component.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const switchMinWidth = 16843632;

  /// from: static public final int switchPadding
  ///
  /// Minimum space between the switch and caption text.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const switchPadding = 16843633;

  /// from: static public final int switchPreferenceStyle
  ///
  /// Default style for switch preferences.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const switchPreferenceStyle = 16843629;

  /// from: static public final int switchStyle
  ///
  /// Default style for the Switch widget.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const switchStyle = 16843839;

  /// from: static public final int switchTextAppearance
  ///
  /// TextAppearance style for text displayed on the switch thumb.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const switchTextAppearance = 16843630;

  /// from: static public final int switchTextOff
  ///
  /// The text used on the switch itself when in the "off" state.
  /// This should be a very SHORT string, as it appears in a small space.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const switchTextOff = 16843628;

  /// from: static public final int switchTextOn
  ///
  /// The text used on the switch itself when in the "on" state.
  /// This should be a very SHORT string, as it appears in a small space.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const switchTextOn = 16843627;

  /// from: static public final int syncable
  ///
  /// Flag indicating whether this content provider would like to
  /// participate in data synchronization.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const syncable = 16842777;

  /// from: static public final int tabStripEnabled
  ///
  /// Determines whether the strip under the tab indicators is drawn or not.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const tabStripEnabled = 16843453;

  /// from: static public final int tabStripLeft
  ///
  /// Drawable used to draw the left part of the strip underneath the tabs.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const tabStripLeft = 16843451;

  /// from: static public final int tabStripRight
  ///
  /// Drawable used to draw the right part of the strip underneath the tabs.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const tabStripRight = 16843452;

  /// from: static public final int tabWidgetStyle
  ///
  /// Default TabWidget style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const tabWidgetStyle = 16842883;

  /// from: static public final int tag
  ///
  /// Supply a tag for this view containing a String, to be retrieved
  /// later with android.view.View\#getTag View.getTag() or
  /// searched for with android.view.View\#findViewWithTag View.findViewWithTag().  It is generally preferable to use
  /// IDs (through the android:id attribute) instead of tags because
  /// they are faster and allow for compile-time type checking.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const tag = 16842961;

  /// from: static public final int targetActivity
  ///
  /// The name of the activity this alias should launch.  The activity
  /// must be in the same manifest as the alias, and have been defined
  /// in that manifest before the alias here.  This must use a Java-style
  /// naming convention to ensure the name is unique, for example
  /// "com.mycompany.MyName".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const targetActivity = 16843266;

  /// from: static public final int targetClass
  ///
  /// The class part of the ComponentName to assign to the Intent, as per
  /// android.content.Intent\#setComponent Intent.setComponent().
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const targetClass = 16842799;

  /// from: static public final int targetDescriptions
  ///
  /// @deprecated Removed.
  /// Reference to an array resource that be used as description for the targets around the circle.
  /// {@deprecated Removed.}
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const targetDescriptions = 16843680;

  /// from: static public final int targetId
  ///
  /// The id of a target on which this transition will animate changes.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const targetId = 16843740;

  /// from: static public final int targetName
  ///
  /// The transitionName of the target on which this transition will animation changes.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const targetName = 16843853;

  /// from: static public final int targetPackage
  ///
  /// The name of the application package that an Instrumentation object
  /// will run against.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const targetPackage = 16842785;

  /// from: static public final int targetProcesses
  ///
  /// The name of an application's processes that an Instrumentation object
  /// will run against.  If not specified, only runs in the main process of the targetPackage.
  /// Can either be a comma-separated list of process names or '*' for any process that
  /// launches to run targetPackage code.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const targetProcesses = 16844097;

  /// from: static public final int targetSandboxVersion
  ///
  /// Specifies the target sandbox this app wants to use. Higher sandbox versions
  /// will have increasing levels of security.
  /// The default value of this attribute is <code>1</code>.
  /// May be an integer value, such as "<code>100</code>".
  static const targetSandboxVersion = 16844108;

  /// from: static public final int targetSdkVersion
  ///
  /// This is the SDK version number that the application is targeting.
  /// It is able to run on older versions (down to minSdkVersion), but
  /// was explicitly tested to work with the version specified here.
  /// Specifying this version allows the platform to disable compatibility
  /// code that are not required or enable newer features that are not
  /// available to older applications.  This may also be a string
  /// (such as "Donut") if this is built against a development
  /// branch, in which case minSdkVersion is also forced to be that
  /// string.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  /// May be an integer value, such as "<code>100</code>".
  static const targetSdkVersion = 16843376;

  /// from: static public final int taskAffinity
  ///
  /// Specify a task name that activities have an "affinity" to.
  /// Use with the application tag (to supply a default affinity for all
  /// activities in the application), or with the activity tag (to supply
  /// a specific affinity for that component).
  /// The default value for this attribute is the same as the package
  /// name, indicating that all activities in the manifest should generally
  /// be considered a single "application" to the user.  You can use this
  /// attribute to modify that behavior: either giving them an affinity
  /// for another task, if the activities are intended to be part of that
  /// task from the user's perspective, or using an empty string for
  /// activities that have no affinity to a task.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const taskAffinity = 16842770;

  /// from: static public final int taskCloseEnterAnimation
  ///
  /// When closing the last activity of a task, this is the animation that is
  /// run on the activity of the next task (which is entering the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const taskCloseEnterAnimation = 16842942;

  /// from: static public final int taskCloseExitAnimation
  ///
  /// When opening an activity in a new task, this is the animation that is
  /// run on the activity of the old task (which is exiting the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const taskCloseExitAnimation = 16842943;

  /// from: static public final int taskOpenEnterAnimation
  ///
  /// When opening an activity in a new task, this is the animation that is
  /// run on the activity of the new task (which is entering the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const taskOpenEnterAnimation = 16842940;

  /// from: static public final int taskOpenExitAnimation
  ///
  /// When opening an activity in a new task, this is the animation that is
  /// run on the activity of the old task (which is exiting the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const taskOpenExitAnimation = 16842941;

  /// from: static public final int taskToBackEnterAnimation
  ///
  /// When sending the current task to the background, this is the
  /// animation that is run on the top activity of the task behind
  /// it (which is entering the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const taskToBackEnterAnimation = 16842946;

  /// from: static public final int taskToBackExitAnimation
  ///
  /// When sending the current task to the background, this is the
  /// animation that is run on the top activity of the current task
  /// (which is exiting the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const taskToBackExitAnimation = 16842947;

  /// from: static public final int taskToFrontEnterAnimation
  ///
  /// When bringing an existing task to the foreground, this is the
  /// animation that is run on the top activity of the task being brought
  /// to the foreground (which is entering the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const taskToFrontEnterAnimation = 16842944;

  /// from: static public final int taskToFrontExitAnimation
  ///
  /// When bringing an existing task to the foreground, this is the
  /// animation that is run on the current foreground activity
  /// (which is exiting the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const taskToFrontExitAnimation = 16842945;

  /// from: static public final int tension
  ///
  /// This is the amount of tension.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const tension = 16843370;

  /// from: static public final int testOnly
  ///
  /// Option to indicate this application is only for testing purposes.
  /// For example, it may expose functionality or data outside of itself
  /// that would cause a security hole, but is useful for testing.  This
  /// kind of application can not be installed without the
  /// INSTALL_ALLOW_TEST flag, which means only through adb install.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const testOnly = 16843378;

  /// from: static public final int text
  ///
  /// Text to display.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const text = 16843087;

  /// from: static public final int textAlignment
  ///
  /// Defines the alignment of the text.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>center</td><td>4</td><td>Center the paragraph, for example: ALIGN_CENTER.</td></tr>
  /// <tr><td>gravity</td><td>1</td><td>Default for the root view. The gravity determines the alignment, ALIGN_NORMAL,
  /// ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph\u2019s
  /// text direction.</td></tr>
  /// <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
  /// <tr><td>textEnd</td><td>3</td><td>Align to the end of the paragraph, for example: ALIGN_OPPOSITE.</td></tr>
  /// <tr><td>textStart</td><td>2</td><td>Align to the start of the paragraph, for example: ALIGN_NORMAL.</td></tr>
  /// <tr><td>viewEnd</td><td>6</td><td>Align to the end of the view, which is ALIGN_RIGHT if the view\u2019s resolved
  /// layoutDirection is LTR, and ALIGN_LEFT otherwise.</td></tr>
  /// <tr><td>viewStart</td><td>5</td><td>Align to the start of the view, which is ALIGN_LEFT if the view\u2019s resolved
  /// layoutDirection is LTR, and ALIGN_RIGHT otherwise.</td></tr>
  /// </table>
  static const textAlignment = 16843697;

  /// from: static public final int textAllCaps
  ///
  /// Present the text in ALL CAPS. This may use a small-caps form when available.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const textAllCaps = 16843660;

  /// from: static public final int textAppearance
  ///
  /// Default appearance of text: color, typeface, size, and style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearance = 16842804;

  /// from: static public final int textAppearanceButton
  ///
  /// Text color, typeface, size, and style for the text inside of a button.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceButton = 16843271;

  /// from: static public final int textAppearanceInverse
  ///
  /// Default appearance of text against an inverted background:
  /// color, typeface, size, and style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceInverse = 16842805;

  /// from: static public final int textAppearanceLarge
  ///
  /// Text color, typeface, size, and style for "large" text. Defaults to primary text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceLarge = 16842816;

  /// from: static public final int textAppearanceLargeInverse
  ///
  /// Text color, typeface, size, and style for "large" inverse text. Defaults to primary inverse text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceLargeInverse = 16842819;

  /// from: static public final int textAppearanceLargePopupMenu
  ///
  /// Text color, typeface, size, and style for the text inside of a popup menu.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceLargePopupMenu = 16843521;

  /// from: static public final int textAppearanceListItem
  ///
  /// The preferred TextAppearance for the primary text of list items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceListItem = 16843678;

  /// from: static public final int textAppearanceListItemSecondary
  ///
  /// The preferred TextAppearance for the secondary text of list items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceListItemSecondary = 16843826;

  /// from: static public final int textAppearanceListItemSmall
  ///
  /// The preferred TextAppearance for the primary text of small list items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceListItemSmall = 16843679;

  /// from: static public final int textAppearanceMedium
  ///
  /// Text color, typeface, size, and style for "medium" text. Defaults to primary text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceMedium = 16842817;

  /// from: static public final int textAppearanceMediumInverse
  ///
  /// Text color, typeface, size, and style for "medium" inverse text. Defaults to primary inverse text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceMediumInverse = 16842820;

  /// from: static public final int textAppearancePopupMenuHeader
  ///
  /// Text color, typeface, size, and style for header text inside of a popup menu.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearancePopupMenuHeader = 16844034;

  /// from: static public final int textAppearanceSearchResultSubtitle
  ///
  /// Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceSearchResultSubtitle = 16843424;

  /// from: static public final int textAppearanceSearchResultTitle
  ///
  /// Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceSearchResultTitle = 16843425;

  /// from: static public final int textAppearanceSmall
  ///
  /// Text color, typeface, size, and style for "small" text. Defaults to secondary text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceSmall = 16842818;

  /// from: static public final int textAppearanceSmallInverse
  ///
  /// Text color, typeface, size, and style for "small" inverse text. Defaults to secondary inverse text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceSmallInverse = 16842821;

  /// from: static public final int textAppearanceSmallPopupMenu
  ///
  /// Text color, typeface, size, and style for small text inside of a popup menu.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textAppearanceSmallPopupMenu = 16843522;

  /// from: static public final int textCheckMark
  ///
  /// Drawable to use for check marks.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textCheckMark = 16842822;

  /// from: static public final int textCheckMarkInverse
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textCheckMarkInverse = 16842823;

  /// from: static public final int textColor
  ///
  /// Color of text (usually same as colorForeground).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColor = 16842904;

  /// from: static public final int textColorAlertDialogListItem
  ///
  /// Color of list item text in alert dialogs.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorAlertDialogListItem = 16843526;

  /// from: static public final int textColorHighlight
  ///
  /// Color of highlighted text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorHighlight = 16842905;

  /// from: static public final int textColorHighlightInverse
  ///
  /// Color of highlighted text, when used in a light theme.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorHighlightInverse = 16843599;

  /// from: static public final int textColorHint
  ///
  /// Color of hint text (displayed when the field is empty).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorHint = 16842906;

  /// from: static public final int textColorHintInverse
  ///
  /// Inverse hint text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorHintInverse = 16842815;

  /// from: static public final int textColorLink
  ///
  /// Color of link text (URLs).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorLink = 16842907;

  /// from: static public final int textColorLinkInverse
  ///
  /// Color of link text (URLs), when used in a light theme.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorLinkInverse = 16843600;

  /// from: static public final int textColorPrimary
  ///
  /// The most prominent text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorPrimary = 16842806;

  /// from: static public final int textColorPrimaryDisableOnly
  ///
  /// Bright text color. Only differentiates based on the disabled state.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorPrimaryDisableOnly = 16842807;

  /// from: static public final int textColorPrimaryInverse
  ///
  /// Primary inverse text color, useful for inverted backgrounds.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorPrimaryInverse = 16842809;

  /// from: static public final int textColorPrimaryInverseDisableOnly
  ///
  /// Bright inverse text color. Only differentiates based on the disabled state.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorPrimaryInverseDisableOnly = 16843403;

  /// from: static public final int textColorPrimaryInverseNoDisable
  ///
  /// Bright inverse text color. This does not differentiate the disabled state.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorPrimaryInverseNoDisable = 16842813;

  /// from: static public final int textColorPrimaryNoDisable
  ///
  /// Bright text color. This does not differentiate the disabled state. As an example,
  /// buttons use this since they display the disabled state via the background and not the
  /// foreground text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorPrimaryNoDisable = 16842811;

  /// from: static public final int textColorSecondary
  ///
  /// Secondary text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorSecondary = 16842808;

  /// from: static public final int textColorSecondaryInverse
  ///
  /// Secondary inverse text color, useful for inverted backgrounds.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorSecondaryInverse = 16842810;

  /// from: static public final int textColorSecondaryInverseNoDisable
  ///
  /// Dim inverse text color. This does not differentiate the disabled state.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorSecondaryInverseNoDisable = 16842814;

  /// from: static public final int textColorSecondaryNoDisable
  ///
  /// Dim text color. This does not differentiate the disabled state.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorSecondaryNoDisable = 16842812;

  /// from: static public final int textColorTertiary
  ///
  /// Tertiary text color.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorTertiary = 16843282;

  /// from: static public final int textColorTertiaryInverse
  ///
  /// Tertiary inverse text color, useful for inverted backgrounds.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const textColorTertiaryInverse = 16843283;

  /// from: static public final int textCursorDrawable
  ///
  /// Reference to a drawable that will be drawn under the insertion cursor.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textCursorDrawable = 16843618;

  /// from: static public final int textDirection
  ///
  /// Defines the direction of the text.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>anyRtl</td><td>2</td><td>The paragraph direction is RTL if it contains any strong RTL character, otherwise
  /// it is LTR if it contains any strong LTR characters.  If there are neither, the
  /// paragraph direction is the view\u2019s resolved layout direction.</td></tr>
  /// <tr><td>firstStrong</td><td>1</td><td>Default for the root view. The first strong directional character determines the
  /// paragraph direction.  If there is no strong directional character, the paragraph
  /// direction is the view\u2019s resolved layout direction.</td></tr>
  /// <tr><td>firstStrongLtr</td><td>6</td><td>The first strong directional character determines the paragraph direction. If
  /// there is no strong directional character, the paragraph direction is LTR.</td></tr>
  /// <tr><td>firstStrongRtl</td><td>7</td><td>The first strong directional character determines the paragraph direction. If
  /// there is no strong directional character, the paragraph direction is RTL.</td></tr>
  /// <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
  /// <tr><td>locale</td><td>5</td><td>The paragraph direction is coming from the system Locale.</td></tr>
  /// <tr><td>ltr</td><td>3</td><td>The paragraph direction is left to right.</td></tr>
  /// <tr><td>rtl</td><td>4</td><td>The paragraph direction is right to left.</td></tr>
  /// </table>
  static const textDirection = 16843696;

  /// from: static public final int textEditNoPasteWindowLayout
  ///
  /// Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textEditNoPasteWindowLayout = 16843541;

  /// from: static public final int textEditPasteWindowLayout
  ///
  /// The layout of the view that is displayed on top of the cursor to paste inside a
  /// TextEdit field.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textEditPasteWindowLayout = 16843540;

  /// from: static public final int textEditSideNoPasteWindowLayout
  ///
  /// Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textEditSideNoPasteWindowLayout = 16843615;

  /// from: static public final int textEditSidePasteWindowLayout
  ///
  /// Used instead of textEditPasteWindowLayout when the window is moved on the side of the
  /// insertion cursor because it would be clipped if it were positioned on top.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textEditSidePasteWindowLayout = 16843614;

  /// from: static public final int textEditSuggestionItemLayout
  ///
  /// Layout of the TextView item that will populate the suggestion popup window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textEditSuggestionItemLayout = 16843636;

  /// from: static public final int textFilterEnabled
  ///
  /// When set to true, the list will filter results as the user types. The
  /// List's adapter must support the Filterable interface for this to work.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const textFilterEnabled = 16843007;

  /// from: static public final int textFontWeight
  ///
  /// Weight for the font used in the TextView.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  /// May be an integer value, such as "<code>100</code>".
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const textFontWeight = 16844165;

  /// from: static public final int textIsSelectable
  ///
  /// Indicates that the content of a non-editable TextView can be selected.
  /// Default value is false. EditText content is always selectable.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const textIsSelectable = 16843542;

  /// from: static public final int textOff
  ///
  /// The text for the button when it is not checked.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const textOff = 16843045;

  /// from: static public final int textOn
  ///
  /// The text for the button when it is checked.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const textOn = 16843044;

  /// from: static public final int textScaleX
  ///
  /// Sets the horizontal scaling factor for the text.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const textScaleX = 16843089;

  /// from: static public final int textSelectHandle
  ///
  /// Reference to a drawable that will be used to display a text selection
  /// anchor for positioning the cursor within text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textSelectHandle = 16843463;

  /// from: static public final int textSelectHandleLeft
  ///
  /// Reference to a drawable that will be used to display a text selection
  /// anchor on the left side of a selection region.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textSelectHandleLeft = 16843461;

  /// from: static public final int textSelectHandleRight
  ///
  /// Reference to a drawable that will be used to display a text selection
  /// anchor on the right side of a selection region.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textSelectHandleRight = 16843462;

  /// from: static public final int textSelectHandleWindowStyle
  ///
  /// Reference to a style that will be used for the window containing a text
  /// selection anchor.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textSelectHandleWindowStyle = 16843464;

  /// from: static public final int textSize
  ///
  /// Size of text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
  /// Supported values include the following:<p/>
  /// <ul>
  /// <li>__px__ Pixels</li>
  /// <li>__sp__ Scaled pixels (scaled to relative pixel size on screen). See android.util.DisplayMetrics for more information.</li>
  /// <li>__pt__ Points</li>
  /// <li>__dip__ Device independent pixels. See android.util.DisplayMetrics for more information.</li>
  /// </ul>
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const textSize = 16842901;

  /// from: static public final int textStyle
  ///
  /// Default text typeface style.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bold</td><td>1</td><td></td></tr>
  /// <tr><td>italic</td><td>2</td><td></td></tr>
  /// <tr><td>normal</td><td>0</td><td></td></tr>
  /// </table>
  static const textStyle = 16842903;

  /// from: static public final int textSuggestionsWindowStyle
  ///
  /// Reference to a style that will be used for the window containing a list of possible
  /// text suggestions in an EditText.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textSuggestionsWindowStyle = 16843635;

  /// from: static public final int textViewStyle
  ///
  /// Default TextView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const textViewStyle = 16842884;

  /// from: static public final int theme
  ///
  /// The overall theme to use for an activity.  Use with either the
  /// application tag (to supply a default theme for all activities) or
  /// the activity tag (to supply a specific theme for that activity).
  /// This automatically sets
  /// your activity's Context to use this theme, and may also be used
  /// for "starting" animations prior to the activity being launched (to
  /// better match what the activity actually looks like).  It is a reference
  /// to a style resource defining the theme.  If not set, the default
  /// system theme will be used.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const theme = 16842752;

  /// from: static public final int thickness
  ///
  /// Thickness of the ring. When defined, thicknessRatio is ignored.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const thickness = 16843360;

  /// from: static public final int thicknessRatio
  ///
  /// Thickness of the ring expressed as a ratio of the ring's width. For instance,
  /// if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
  /// This value is ignored if innerRadius is defined. Default value is 3.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const thicknessRatio = 16843164;

  /// from: static public final int thumb
  ///
  /// Draws the thumb on a seekbar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const thumb = 16843074;

  /// from: static public final int thumbOffset
  ///
  /// An offset for the thumb that allows it to extend out of the range of the track.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const thumbOffset = 16843075;

  /// from: static public final int thumbPosition
  ///
  /// Position of thumb in relation to the track.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>inside</td><td>1</td><td>The thumb is entirely inside the track. At its extremes,
  /// the thumb will be contained entirely within the track.</td></tr>
  /// <tr><td>midpoint</td><td>0</td><td>The thumb's midpoint is anchored to the track. At its
  /// extremes, the thumb will extend half-way outside the
  /// track.</td></tr>
  /// </table>
  static const thumbPosition = 16844005;

  /// from: static public final int thumbTextPadding
  ///
  /// Amount of padding on either side of text within the switch thumb.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const thumbTextPadding = 16843634;

  /// from: static public final int thumbTint
  ///
  /// Tint to apply to the thumb drawable.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const thumbTint = 16843889;

  /// from: static public final int thumbTintMode
  ///
  /// Blending mode used to apply the thumb tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const thumbTintMode = 16843890;

  /// from: static public final int thumbnail
  ///
  /// Reference to the wallpaper's thumbnail bitmap.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const thumbnail = 16843429;

  /// from: static public final int tickMark
  ///
  /// Drawable displayed at each progress position on a seekbar.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const tickMark = 16844042;

  /// from: static public final int tickMarkTint
  ///
  /// Tint to apply to the tick mark drawable.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const tickMarkTint = 16844043;

  /// from: static public final int tickMarkTintMode
  ///
  /// Blending mode used to apply the tick mark tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const tickMarkTintMode = 16844044;

  /// from: static public final int tileMode
  ///
  /// Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
  /// Gravity is ignored when the tile mode is enabled. Default value is "disabled".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
  /// <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
  /// <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally and vertically, alternating
  /// mirror images so that adjacent images always seam.</td></tr>
  /// <tr><td>repeat</td><td>1</td><td>Repeats the bitmap in both direction.</td></tr>
  /// </table>
  static const tileMode = 16843265;

  /// from: static public final int tileModeX
  ///
  /// Defines the horizontal tile mode. When the tile mode is enabled, the bitmap is repeated.
  /// Gravity is ignored when the tile mode is enabled. Default value is "disabled".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
  /// <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
  /// <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally, alternating
  /// mirror images so that adjacent images always seam.</td></tr>
  /// <tr><td>repeat</td><td>1</td><td>Repeats the bitmap horizontally.</td></tr>
  /// </table>
  static const tileModeX = 16843895;

  /// from: static public final int tileModeY
  ///
  /// Defines the vertical tile mode. When the tile mode is enabled, the bitmap is repeated.
  /// Gravity is ignored when the tile mode is enabled. Default value is "disabled".
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
  /// <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
  /// <tr><td>mirror</td><td>2</td><td>Repeats the shader's image vertically, alternating
  /// mirror images so that adjacent images always seam.</td></tr>
  /// <tr><td>repeat</td><td>1</td><td>Repeats the bitmap vertically.</td></tr>
  /// </table>
  static const tileModeY = 16843896;

  /// from: static public final int timePickerDialogTheme
  ///
  /// The TimePicker dialog theme.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const timePickerDialogTheme = 16843934;

  /// from: static public final int timePickerMode
  ///
  /// Defines the look of the widget. Prior to the L release, the only choice was
  /// spinner. As of L, with the Material theme selected, the default layout is clock,
  /// but this attribute can be used to force spinner to be used instead.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>clock</td><td>2</td><td>Time picker with clock face to select the time.</td></tr>
  /// <tr><td>spinner</td><td>1</td><td>Time picker with spinner controls to select the time.</td></tr>
  /// </table>
  static const timePickerMode = 16843956;

  /// from: static public final int timePickerStyle
  ///
  /// The TimePicker style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const timePickerStyle = 16843933;

  /// from: static public final int timeZone
  ///
  /// Specifies the time zone to use. When this attribute is specified, the
  /// TextClock will ignore the time zone of the system. To use the user's
  /// time zone, do not specify this attribute. The default value is the
  /// user's time zone. Please refer to java.util.TimeZone for more
  /// information about time zone ids.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const timeZone = 16843724;

  /// from: static public final int tint
  ///
  /// The tinting color for the image. By default, the tint will blend using SRC_ATOP mode.
  /// Please note that for compatibility reasons, this is NOT consistent with the default
  /// SRC_IN tint mode used by android.widget.ImageView\#setImageTintList and by
  /// similar tint attributes on other views.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const tint = 16843041;

  /// from: static public final int tintMode
  ///
  /// When a tint color is set, specifies its Porter-Duff blending mode. The
  /// default value is src_in, which treats the drawable as an alpha mask.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const tintMode = 16843771;

  /// from: static public final int title
  ///
  /// The title associated with the item.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const title = 16843233;

  /// from: static public final int titleCondensed
  ///
  /// The condensed title associated with the item.  This is used in situations where the
  /// normal title may be too long to be displayed.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const titleCondensed = 16843234;

  /// from: static public final int titleMargin
  ///
  /// Specifies extra space on the left, start, right and end sides
  /// of the toolbar's title. Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const titleMargin = 16844024;

  /// from: static public final int titleMarginBottom
  ///
  /// Specifies extra space on the bottom side of the toolbar's title.
  /// If both this attribute and titleMargin are specified, then this
  /// attribute takes precedence. Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const titleMarginBottom = 16844028;

  /// from: static public final int titleMarginEnd
  ///
  /// Specifies extra space on the end side of the toolbar's title.
  /// If both this attribute and titleMargin are specified, then this
  /// attribute takes precedence. Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const titleMarginEnd = 16844026;

  /// from: static public final int titleMarginStart
  ///
  /// Specifies extra space on the start side of the toolbar's title.
  /// If both this attribute and titleMargin are specified, then this
  /// attribute takes precedence. Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const titleMarginStart = 16844025;

  /// from: static public final int titleMarginTop
  ///
  /// Specifies extra space on the top side of the toolbar's title.
  /// If both this attribute and titleMargin are specified, then this
  /// attribute takes precedence. Margin values should be positive.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const titleMarginTop = 16844027;

  /// from: static public final int titleTextAppearance
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const titleTextAppearance = 16843822;

  /// from: static public final int titleTextColor
  ///
  /// A color to apply to the title string.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const titleTextColor = 16844003;

  /// from: static public final int titleTextStyle
  ///
  /// Specifies a style to use for title text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const titleTextStyle = 16843512;

  /// from: static public final int toAlpha
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  static const toAlpha = 16843211;

  /// from: static public final int toDegrees
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  static const toDegrees = 16843188;

  /// from: static public final int toId
  ///
  /// Keyframe identifier for the ending state.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const toId = 16843849;

  /// from: static public final int toScene
  ///
  /// The destination scene in this scene change.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const toScene = 16843742;

  /// from: static public final int toXDelta
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const toXDelta = 16843207;

  /// from: static public final int toXScale
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const toXScale = 16843203;

  /// from: static public final int toYDelta
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const toYDelta = 16843209;

  /// from: static public final int toYScale
  ///
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const toYScale = 16843205;

  /// from: static public final int toolbarStyle
  ///
  /// Default Toolbar style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const toolbarStyle = 16843946;

  /// from: static public final int tooltipText
  ///
  /// The tooltip text associated with the item.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const tooltipText = 16844084;

  /// from: static public final int top
  ///
  /// Amount of top padding inside the gradient shape.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const top = 16843182;

  /// from: static public final int topBright
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const topBright = 16842955;

  /// from: static public final int topDark
  ///
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const topDark = 16842951;

  /// from: static public final int topLeftRadius
  ///
  /// Radius of the top left corner.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const topLeftRadius = 16843177;

  /// from: static public final int topOffset
  ///
  /// Extra offset for the handle at the top of the SlidingDrawer.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const topOffset = 16843352;

  /// from: static public final int topRightRadius
  ///
  /// Radius of the top right corner.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const topRightRadius = 16843178;

  /// from: static public final int touchscreenBlocksFocus
  ///
  /// Set to true if this ViewGroup blocks focus in the presence of a touchscreen.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const touchscreenBlocksFocus = 16843919;

  /// from: static public final int track
  ///
  /// Drawable to use as the "track" that the switch thumb slides within.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const track = 16843631;

  /// from: static public final int trackTint
  ///
  /// Tint to apply to the track.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const trackTint = 16843993;

  /// from: static public final int trackTintMode
  ///
  /// Blending mode used to apply the track tint.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
  /// result to valid color values. Saturate(S + D)</td></tr>
  /// <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
  /// the tint. [Sa * Da, Sc * Dc]</td></tr>
  /// <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
  /// <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable\u2019s alpha
  /// channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
  /// <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable\u2019s
  /// color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
  /// <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
  /// [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
  /// </table>
  static const trackTintMode = 16843994;

  /// from: static public final int transcriptMode
  ///
  /// Sets the transcript mode for the list. In transcript mode, the list
  /// scrolls to the bottom to make new items visible when they are added.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>alwaysScroll</td><td>2</td><td>The list will automatically scroll to the bottom, no matter what items
  /// are currently visible.</td></tr>
  /// <tr><td>disabled</td><td>0</td><td>Disables transcript mode. This is the default value.</td></tr>
  /// <tr><td>normal</td><td>1</td><td>The list will automatically scroll to the bottom when
  /// a data set change notification is received and only if the last item is
  /// already visible on screen.</td></tr>
  /// </table>
  static const transcriptMode = 16843008;

  /// from: static public final int transformPivotX
  ///
  /// x location of the pivot point around which the view will rotate and scale.
  /// This xml attribute sets the pivotX property of the View.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const transformPivotX = 16843552;

  /// from: static public final int transformPivotY
  ///
  /// y location of the pivot point around which the view will rotate and scale.
  /// This xml attribute sets the pivotY property of the View.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const transformPivotY = 16843553;

  /// from: static public final int transition
  ///
  /// The id of a transition to be used in a particular scene change.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const transition = 16843743;

  /// from: static public final int transitionGroup
  ///
  /// Sets whether or not this ViewGroup should be treated as a single entity
  /// when doing an Activity transition. Typically, the elements inside a
  /// ViewGroup are each transitioned from the scene individually. The default
  /// for a ViewGroup is false unless it has a background. See
  /// android.app.ActivityOptions\#makeSceneTransitionAnimation(android.app.Activity,
  /// android.view.View, String) for more information. Corresponds to
  /// android.view.ViewGroup\#setTransitionGroup(boolean).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const transitionGroup = 16843777;

  /// from: static public final int transitionName
  ///
  /// Names a View such that it can be identified for Transitions. Names should be
  /// unique in the View hierarchy.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const transitionName = 16843776;

  /// from: static public final int transitionOrdering
  ///
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>sequential</td><td>1</td><td>child transitions should be played sequentially, in the same order
  /// as the xml.</td></tr>
  /// <tr><td>together</td><td>0</td><td>child transitions should be played together.</td></tr>
  /// </table>
  static const transitionOrdering = 16843744;

  /// from: static public final int transitionVisibilityMode
  ///
  /// Changes whether the transition supports appearing and/or disappearing Views.
  /// Corresponds to android.transition.Visibility\#setMode(int).
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>mode_in</td><td>1</td><td>Only appearing Views will be supported.</td></tr>
  /// <tr><td>mode_out</td><td>2</td><td>Only disappearing Views will be supported.</td></tr>
  /// </table>
  static const transitionVisibilityMode = 16843900;

  /// from: static public final int translateX
  ///
  /// The amount to translate the group on X coordinate.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const translateX = 16843866;

  /// from: static public final int translateY
  ///
  /// The amount to translate the group on Y coordinate.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const translateY = 16843867;

  /// from: static public final int translationX
  ///
  /// translation in x of the view. This value is added post-layout to the left
  /// property of the view, which is set by its layout.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const translationX = 16843554;

  /// from: static public final int translationY
  ///
  /// translation in y of the view. This value is added post-layout to the top
  /// property of the view, which is set by its layout.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const translationY = 16843555;

  /// from: static public final int translationZ
  ///
  /// translation in z of the view. This value is added to its elevation.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const translationZ = 16843770;

  /// from: static public final int trimPathEnd
  ///
  /// The fraction of the path to trim from the end from 0 to 1 .
  /// May be a floating point value, such as "<code>1.2</code>".
  static const trimPathEnd = 16843785;

  /// from: static public final int trimPathOffset
  ///
  /// Shift trim region (allows visible region to include the start and end) from 0 to 1.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const trimPathOffset = 16843786;

  /// from: static public final int trimPathStart
  ///
  /// The fraction of the path to trim from the start from 0 to 1.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const trimPathStart = 16843784;

  /// from: static public final int ttcIndex
  ///
  /// The index of the font in the ttc (TrueType Collection) font file. If the font file
  /// referenced is not in the ttc format, this attribute needs not be specified.
  /// {@see android.graphics.Typeface\#Builder.setTtcIndex(int)}.
  /// The default value is 0. More details about the TrueType Collection font format can be found
  /// here: https://en.wikipedia.org/wiki/TrueType\#TrueType_Collection.
  /// May be an integer value, such as "<code>100</code>".
  static const ttcIndex = 16844143;

  /// from: static public final int tunerCount
  ///
  /// The number of tuners that the TV input service is associated with. This value can be
  /// changed at runtime by calling
  /// android.media.tv.TvInputManager\#updateTvInputInfo(android.media.tv.TvInputInfo).
  /// May be an integer value, such as "<code>100</code>".
  static const tunerCount = 16844061;

  /// from: static public final int turnScreenOn
  ///
  /// Specifies whether the screen should be turned on when the android.app.Activity is resumed.
  /// Normally an activity will be transitioned to the stopped state if it is started while the
  /// screen if off, but with this flag set the activity will cause the screen to turn on if the
  /// activity will be visible and resumed due to the screen coming on. The screen will not be
  /// turned on if the activity won't be visible after the screen is turned on. This flag is
  /// normally used in conjunction with the android.R.attr\#showWhenLocked flag to make
  /// sure the activity is visible after the screen is turned on when the lockscreen is up. In
  /// addition, if this flag is set and the activity calls
  /// android.app.KeyguardManager\#requestDismissKeyguard
  /// the screen will turn on.
  /// This should be used instead of android.view.WindowManager.LayoutParams\#FLAG_TURN_SCREEN_ON
  /// flag set for Windows. When using the Window flag during activity startup, there may not be
  /// time to add it before the system stops your activity because the screen has not yet turned
  /// on. This leads to a double life-cycle as it is then restarted.
  ///
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const turnScreenOn = 16844138;

  /// from: static public final int type
  ///
  /// Type of gradient. The default type is linear.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>linear</td><td>0</td><td>Linear gradient extending across the center point.</td></tr>
  /// <tr><td>radial</td><td>1</td><td>Radial gradient extending from the center point outward.</td></tr>
  /// <tr><td>sweep</td><td>2</td><td>Sweep (or angular) gradient sweeping counter-clockwise around the center point.</td></tr>
  /// </table>
  static const type = 16843169;

  /// from: static public final int typeface
  ///
  /// Default text typeface.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>monospace</td><td>3</td><td></td></tr>
  /// <tr><td>normal</td><td>0</td><td></td></tr>
  /// <tr><td>sans</td><td>1</td><td></td></tr>
  /// <tr><td>serif</td><td>2</td><td></td></tr>
  /// </table>
  static const typeface = 16842902;

  /// from: static public final int uiOptions
  ///
  /// Extra options for an activity's UI. Applies to either the {@code <activity>} or
  /// {@code <application>} tag. If specified on the {@code <application>}
  /// tag these will be considered defaults for all activities in the
  /// application.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>none</td><td>0</td><td>No extra UI options. This is the default.</td></tr>
  /// <tr><td>splitActionBarWhenNarrow</td><td>1</td><td>Split the options menu into a separate bar at the bottom of
  /// the screen when severely constrained for horizontal space.
  /// (e.g. portrait mode on a phone.) Instead of a small number
  /// of action buttons appearing in the action bar at the top
  /// of the screen, the action bar will split into the top navigation
  /// section and the bottom menu section. Menu items will not be
  /// split across the two bars; they will always appear together.</td></tr>
  /// </table>
  static const uiOptions = 16843672;

  /// from: static public final int uncertainGestureColor
  ///
  /// Color used to draw the user's strokes until we are sure it's a gesture.
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const uncertainGestureColor = 16843382;

  /// from: static public final int unfocusedMonthDateColor
  ///
  /// @deprecated The color for the dates of an unfocused month.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const unfocusedMonthDateColor = 16843588;

  /// from: static public final int unselectedAlpha
  ///
  /// Sets the alpha on the items that are not selected.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const unselectedAlpha = 16843278;

  /// from: static public final int updatePeriodMillis
  ///
  /// Update period in milliseconds, or 0 if the AppWidget will update itself.
  /// May be an integer value, such as "<code>100</code>".
  static const updatePeriodMillis = 16843344;

  /// from: static public final int use32bitAbi
  ///
  /// Specify whether the 32 bit version of the ABI should be used in a
  /// multiArch application. If both abioverride flag (i.e. using abi option of abd install)
  /// and use32bitAbi are used, then use32bit is ignored.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  /// May be an integer value, such as "<code>100</code>".
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const use32bitAbi = 16844053;

  /// from: static public final int useDefaultMargins
  ///
  /// When set to true, tells GridLayout to use default margins when none are specified
  /// in a view's layout parameters.
  /// The default value is false.
  /// See android.widget.GridLayout\#setUseDefaultMargins(boolean).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const useDefaultMargins = 16843641;

  /// from: static public final int useIntrinsicSizeAsMinimum
  ///
  /// Use the drawable's intrinsic width and height as minimum size values.
  /// Useful if the target drawable is a 9-patch or otherwise should not be scaled
  /// down beyond a minimum size.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const useIntrinsicSizeAsMinimum = 16843536;

  /// from: static public final int useLevel
  ///
  /// Whether the drawable level value (see
  /// android.graphics.drawable.Drawable\#getLevel()) is used to scale the gradient.
  /// Scaling behavior varies based on gradient type. For "linear", adjusts the ending
  /// position along the gradient's axis of orientation. For "radial", adjusts the outer
  /// radius. For "sweep", adjusts the ending angle. The default value is false.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const useLevel = 16843167;

  /// from: static public final int userVisible
  ///
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const userVisible = 16843409;

  /// from: static public final int usesCleartextTraffic
  ///
  /// Declare that this application may use cleartext traffic, such as HTTP rather than HTTPS;
  /// WebSockets rather than WebSockets Secure; XMPP, IMAP, STMP without STARTTLS or TLS.
  /// Defaults to true. If set to false {@code false}, the application declares that it does not
  /// intend to use cleartext network traffic, in which case platform components (e.g. HTTP
  /// stacks, {@code DownloadManager}, {@code MediaPlayer}) will refuse applications's requests
  /// to use cleartext traffic. Third-party libraries are encouraged to honor this flag as well.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const usesCleartextTraffic = 16844012;

  /// from: static public final int value
  ///
  /// Concrete value to assign to this piece of named meta-data.
  /// The data can later be retrieved from the meta data Bundle
  /// through android.os.Bundle\#getString Bundle.getString,
  /// android.os.Bundle\#getInt Bundle.getInt,
  /// android.os.Bundle\#getBoolean Bundle.getBoolean,
  /// or android.os.Bundle\#getFloat Bundle.getFloat depending
  /// on the type used here.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  /// May be an integer value, such as "<code>100</code>".
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  /// May be a floating point value, such as "<code>1.2</code>".
  static const value = 16842788;

  /// from: static public final int valueFrom
  ///
  /// Value the animation starts from.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  /// May be an integer value, such as "<code>100</code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const valueFrom = 16843486;

  /// from: static public final int valueTo
  ///
  /// Value the animation animates to.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  /// May be an integer value, such as "<code>100</code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  /// May be a floating point value, such as "<code>1.2</code>".
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const valueTo = 16843487;

  /// from: static public final int valueType
  ///
  /// The type of valueFrom and valueTo.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>colorType</td><td>3</td><td>values are colors, which are integers starting with "\#".</td></tr>
  /// <tr><td>floatType</td><td>0</td><td>The given values are floats. This is the default value if valueType is
  /// unspecified. Note that if any value attribute has a color value
  /// (beginning with "\#"), then this attribute is ignored and the color values are
  /// interpreted as integers.</td></tr>
  /// <tr><td>intType</td><td>1</td><td>values are integers.</td></tr>
  /// <tr><td>pathType</td><td>2</td><td>values are paths defined as strings.
  /// This type is used for path morphing in AnimatedVectorDrawable.</td></tr>
  /// </table>
  static const valueType = 16843488;

  /// from: static public final int variablePadding
  ///
  /// If true, allows the drawable's padding to change based on the
  /// current state that is selected.  If false, the padding will
  /// stay the same (based on the maximum padding of all the states).
  /// Enabling this feature requires that the owner of the drawable
  /// deal with performing layout when the state changes, which is
  /// often not supported.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const variablePadding = 16843157;

  /// from: static public final int vendor
  ///
  /// The vendor name if this print service is vendor specific.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const vendor = 16843751;

  /// from: static public final int version
  ///
  /// The version of the feature that is being used.
  /// May be an integer value, such as "<code>100</code>".
  static const version = 16844057;

  /// from: static public final int versionCode
  ///
  /// Internal version code.  This is the number used to determine whether
  /// one version is more recent than another: it has no other meaning than
  /// that higher numbers are more recent.  You could use this number to
  /// encode a "x.y" in the lower and upper 16 bits, make it a build
  /// number, simply increase it by one each time a new version is
  /// released, or define it however else you want, as long as each
  /// successive version has a higher number.  This is not a version
  /// number generally shown to the user, that is usually supplied
  /// with android.R.attr\#versionName.  When an app is delivered
  /// as multiple split APKs, each APK must have the exact same versionCode.
  /// May be an integer value, such as "<code>100</code>".
  static const versionCode = 16843291;

  /// from: static public final int versionCodeMajor
  ///
  /// Internal major version code.  This is essentially additional high bits
  /// for the base version code; it has no other meaning than
  /// that higher numbers are more recent.  This is not a version
  /// number generally shown to the user, that is usually supplied
  /// with android.R.attr\#versionName.
  /// May be an integer value, such as "<code>100</code>".
  static const versionCodeMajor = 16844150;

  /// from: static public final int versionMajor
  ///
  /// Required specific library version.
  /// May be an integer value, such as "<code>100</code>".
  static const versionMajor = 16844151;

  /// from: static public final int versionName
  ///
  /// The text shown to the user to indicate the version they have.  This
  /// is used for no other purpose than display to the user; the actual
  /// significant version number is given by android.R.attr\#versionCode.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const versionName = 16843292;

  /// from: static public final int verticalCorrection
  ///
  /// Amount to offset the touch Y coordinate by, for bias correction.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const verticalCorrection = 16843322;

  /// from: static public final int verticalDivider
  ///
  /// Default vertical divider between menu items.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const verticalDivider = 16843054;

  /// from: static public final int verticalGap
  ///
  /// Default vertical gap between rows of keys.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const verticalGap = 16843328;

  /// from: static public final int verticalScrollbarPosition
  ///
  /// Determines which side the vertical scroll bar should be placed on.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>defaultPosition</td><td>0</td><td>Place the scroll bar wherever the system default determines.</td></tr>
  /// <tr><td>left</td><td>1</td><td>Place the scroll bar on the left.</td></tr>
  /// <tr><td>right</td><td>2</td><td>Place the scroll bar on the right.</td></tr>
  /// </table>
  static const verticalScrollbarPosition = 16843572;

  /// from: static public final int verticalSpacing
  ///
  /// Defines the default vertical spacing between rows.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const verticalSpacing = 16843029;

  /// from: static public final int viewportHeight
  ///
  /// The height of the canvas the drawing is on.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const viewportHeight = 16843779;

  /// from: static public final int viewportWidth
  ///
  /// The width of the canvas the drawing is on.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const viewportWidth = 16843778;

  /// from: static public final int visibility
  ///
  /// Controls the initial visibility of the view.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>gone</td><td>2</td><td>Completely hidden, as if the view had not been added.</td></tr>
  /// <tr><td>invisible</td><td>1</td><td>Not displayed, but taken into account during layout (space is left for it).</td></tr>
  /// <tr><td>visible</td><td>0</td><td>Visible on screen; the default value.</td></tr>
  /// </table>
  static const visibility = 16842972;

  /// from: static public final int visible
  ///
  /// Provides initial visibility state of the drawable; the default
  /// value is false.  See
  /// android.graphics.drawable.Drawable\#setVisible.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const visible = 16843156;

  /// from: static public final int visibleToInstantApps
  ///
  /// Specify whether a component should be visible to instant apps.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const visibleToInstantApps = 16844081;

  /// from: static public final int vmSafeMode
  ///
  /// Flag indicating whether the application requests the VM to operate in
  /// the safe mode.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const vmSafeMode = 16843448;

  /// from: static public final int voiceIcon
  ///
  /// Voice button icon.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const voiceIcon = 16843908;

  /// from: static public final int voiceLanguage
  ///
  /// If provided, this specifies the spoken language to be expected, and that it will be
  /// different than the one set in the java.util.Locale\#getDefault().
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const voiceLanguage = 16843349;

  /// from: static public final int voiceLanguageModel
  ///
  /// If provided, this specifies the language model that should be used by the
  /// voice recognition system.  See
  /// android.speech.RecognizerIntent\#EXTRA_LANGUAGE_MODEL for more information.
  /// If not provided, the default value
  /// android.speech.RecognizerIntent\#LANGUAGE_MODEL_FREE_FORM will be used.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const voiceLanguageModel = 16843347;

  /// from: static public final int voiceMaxResults
  ///
  /// If provided, enforces the maximum number of results to return, including the "best"
  /// result which will always be provided as the SEARCH intent's primary query.  Must be one
  /// or greater.  If not provided, the recognizer will choose how many results to return.
  /// May be an integer value, such as "<code>100</code>".
  static const voiceMaxResults = 16843350;

  /// from: static public final int voicePromptText
  ///
  /// If provided, this specifies a prompt that will be displayed during voice input.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const voicePromptText = 16843348;

  /// from: static public final int voiceSearchMode
  ///
  /// Voice search features are controlled by mode bits in this field.  Omitting
  /// this field, or setting to zero, provides default behavior.
  /// If showVoiceSearchButton is set, then launchWebSearch or launchRecognizer must
  /// also be set.  <i>Optional attribute.</i>
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>launchRecognizer</td><td>4</td><td>If set, the voice search button will take the user directly to a built-in
  /// voice recording activity.  This activity will prompt the user to speak,
  /// transcribe the spoken text, and forward the resulting query
  /// text to the searchable activity, just as if the user had typed it into
  /// the search UI and clicked the search button.</td></tr>
  /// <tr><td>launchWebSearch</td><td>2</td><td>If set, the voice search button will take the user directly to a built-in
  /// voice web search activity.  Most applications will not use this flag, as it
  /// will take the user away from the activity in which search was invoked.</td></tr>
  /// <tr><td>showVoiceSearchButton</td><td>1</td><td>If set, display a voice search button.  This only takes effect if voice search is
  /// available on the device.</td></tr>
  /// </table>
  static const voiceSearchMode = 16843346;

  /// from: static public final int wallpaperCloseEnterAnimation
  ///
  /// When opening a new activity that hides the wallpaper, while
  /// currently showing the wallpaper, this is the animation that
  /// is run on the new activity (which is entering the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const wallpaperCloseEnterAnimation = 16843413;

  /// from: static public final int wallpaperCloseExitAnimation
  ///
  /// When opening a new activity that hides the wallpaper, while
  /// currently showing the wallpaper, this is the animation that
  /// is run on the old wallpaper activity (which is exiting the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const wallpaperCloseExitAnimation = 16843414;

  /// from: static public final int wallpaperIntraCloseEnterAnimation
  ///
  /// When closing a foreround activity that is on top of the wallpaper
  /// when the previous activity is also on top of the wallpaper,
  /// this is the animation that is run on the previous activity
  /// (which is entering the screen).  The wallpaper remains
  /// static behind the animation.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const wallpaperIntraCloseEnterAnimation = 16843417;

  /// from: static public final int wallpaperIntraCloseExitAnimation
  ///
  /// When closing a foreround activity that is on top of the wallpaper
  /// when the previous activity is also on top of the wallpaper,
  /// this is the animation that is run on the current activity
  /// (which is exiting the screen).  The wallpaper remains
  /// static behind the animation.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const wallpaperIntraCloseExitAnimation = 16843418;

  /// from: static public final int wallpaperIntraOpenEnterAnimation
  ///
  /// When opening a new activity that is on top of the wallpaper
  /// when the current activity is also on top of the wallpaper,
  /// this is the animation that is run on the new activity
  /// (which is entering the screen).  The wallpaper remains
  /// static behind the animation.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const wallpaperIntraOpenEnterAnimation = 16843415;

  /// from: static public final int wallpaperIntraOpenExitAnimation
  ///
  /// When opening a new activity that is on top of the wallpaper
  /// when the current activity is also on top of the wallpaper,
  /// this is the animation that is run on the current activity
  /// (which is exiting the screen).  The wallpaper remains
  /// static behind the animation.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const wallpaperIntraOpenExitAnimation = 16843416;

  /// from: static public final int wallpaperOpenEnterAnimation
  ///
  /// When opening a new activity that shows the wallpaper, while
  /// currently not showing the wallpaper, this is the animation that
  /// is run on the new wallpaper activity (which is entering the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const wallpaperOpenEnterAnimation = 16843411;

  /// from: static public final int wallpaperOpenExitAnimation
  ///
  /// When opening a new activity that shows the wallpaper, while
  /// currently not showing the wallpaper, this is the animation that
  /// is run on the current activity (which is exiting the screen).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const wallpaperOpenExitAnimation = 16843412;

  /// from: static public final int webTextViewStyle
  ///
  /// Default WebTextView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const webTextViewStyle = 16843449;

  /// from: static public final int webViewStyle
  ///
  /// Default WebView style.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const webViewStyle = 16842885;

  /// from: static public final int weekDayTextAppearance
  ///
  /// The text appearance for the week day abbreviation in the calendar header.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const weekDayTextAppearance = 16843592;

  /// from: static public final int weekNumberColor
  ///
  /// @deprecated The color for the week numbers.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const weekNumberColor = 16843589;

  /// from: static public final int weekSeparatorLineColor
  ///
  /// @deprecated The color for the separator line between weeks.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const weekSeparatorLineColor = 16843590;

  /// from: static public final int weightSum
  ///
  /// Defines the maximum weight sum. If unspecified, the sum is computed
  /// by adding the layout_weight of all of the children. This can be
  /// used for instance to give a single child 50% of the total available
  /// space by giving it a layout_weight of 0.5 and setting the weightSum
  /// to 1.0.
  /// May be a floating point value, such as "<code>1.2</code>".
  static const weightSum = 16843048;

  /// from: static public final int widgetCategory
  ///
  /// Optional parameter which indicates where this widget can be shown,
  /// ie. home screen, keyguard, search bar or any combination thereof.
  /// Supports combined values using | operator.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>home_screen</td><td>1</td><td></td></tr>
  /// <tr><td>keyguard</td><td>2</td><td></td></tr>
  /// <tr><td>searchbox</td><td>4</td><td></td></tr>
  /// </table>
  static const widgetCategory = 16843716;

  /// from: static public final int widgetFeatures
  ///
  /// Flags indicating various features supported by the widget. These are hints to the
  /// widget host, and do not actually change the behavior of the widget.
  /// May be an integer value, such as "<code>100</code>".
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>hide_from_picker</td><td>2</td><td>The widget is added directly by the app, and does not need to appear in
  /// the global list of available widgets</td></tr>
  /// <tr><td>reconfigurable</td><td>1</td><td>The widget can be reconfigured anytime after it is bound</td></tr>
  /// </table>
  static const widgetFeatures = 16844153;

  /// from: static public final int widgetLayout
  ///
  /// The layout for the controllable widget portion of a Preference. This is inflated
  /// into the layout for a Preference and should be used more frequently than
  /// the layout attribute. For example, a checkbox preference would specify
  /// a custom layout (consisting of just the CheckBox) here.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const widgetLayout = 16843243;

  /// from: static public final int width
  ///
  /// Makes the TextView be exactly this wide.
  /// You could get the same effect by specifying this number in the
  /// layout parameters.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const width = 16843097;

  /// from: static public final int windowActionBar
  ///
  /// Flag indicating whether this window should have an Action Bar
  /// in place of the usual title bar.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowActionBar = 16843469;

  /// from: static public final int windowActionBarOverlay
  ///
  /// Flag indicating whether this window's Action Bar should overlay
  /// application content. Does nothing if the window would not
  /// have an Action Bar.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowActionBarOverlay = 16843492;

  /// from: static public final int windowActionModeOverlay
  ///
  /// Flag indicating whether action modes should overlay window content
  /// when there is not reserved space for their UI (such as an Action Bar).
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowActionModeOverlay = 16843485;

  /// from: static public final int windowActivityTransitions
  ///
  /// Flag indicating whether this window allows Activity Transitions.
  /// Corresponds to android.view.Window\#FEATURE_ACTIVITY_TRANSITIONS.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowActivityTransitions = 16843981;

  /// from: static public final int windowAllowEnterTransitionOverlap
  ///
  /// Flag indicating whether this Window's transition should overlap with
  /// the exiting transition of the calling Activity. Corresponds to
  /// android.view.Window\#setAllowEnterTransitionOverlap(boolean).
  /// The default value is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowAllowEnterTransitionOverlap = 16843836;

  /// from: static public final int windowAllowReturnTransitionOverlap
  ///
  /// Flag indicating whether this Window's transition should overlap with
  /// the exiting transition of the called Activity when the called Activity
  /// finishes. Corresponds to
  /// android.view.Window\#setAllowReturnTransitionOverlap(boolean).
  /// The default value is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowAllowReturnTransitionOverlap = 16843835;

  /// from: static public final int windowAnimationStyle
  ///
  /// Reference to a style resource holding
  /// the set of window animations to use, which can be
  /// any of the attributes defined by
  /// android.R.styleable\#WindowAnimation.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowAnimationStyle = 16842926;

  /// from: static public final int windowBackground
  ///
  /// Drawable to use as the overall window background.  As of
  /// android.os.Build.VERSION_CODES\#HONEYCOMB, this may
  /// be a selector that uses state_accelerated to pick a non-solid
  /// color when running on devices that can draw such a bitmap
  /// with complex compositing on top at 60fps.
  /// There are a few special considerations to use when setting this
  /// drawable:
  /// <ul>
  /// <li> This information will be used to infer the pixel format
  /// for your window's surface.  If the drawable has any
  /// non-opaque pixels, your window will be translucent
  /// (32 bpp).
  /// <li> If you want to draw the entire background
  /// yourself, you should set this drawable to some solid
  /// color that closely matches that background (so the
  /// system's preview of your window will match), and
  /// then in code manually set your window's background to
  /// null so it will not be drawn.
  /// </ul>
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowBackground = 16842836;

  /// from: static public final int windowBackgroundFallback
  ///
  /// Drawable to draw selectively within the inset areas when the windowBackground
  /// has been set to null. This protects against seeing visual garbage in the
  /// surface when the app has not drawn any content into this area. One example is
  /// when the user is resizing a window of an activity that has
  /// android.R.attr\#resizeableActivity set for multi-window mode.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowBackgroundFallback = 16844035;

  /// from: static public final int windowClipToOutline
  ///
  /// Whether to clip window content to the outline of the window background.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowClipToOutline = 16843947;

  /// from: static public final int windowCloseOnTouchOutside
  ///
  /// Control whether a container should automatically close itself if
  /// the user touches outside of it.  This only applies to activities
  /// and dialogs.
  /// Note: this attribute will only be respected for applications
  /// that are targeting android.os.Build.VERSION_CODES\#HONEYCOMB
  /// or later.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowCloseOnTouchOutside = 16843611;

  /// from: static public final int windowContentOverlay
  ///
  /// This Drawable is overlaid over the foreground of the Window's content area, usually
  /// to place a shadow below the title.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowContentOverlay = 16842841;

  /// from: static public final int windowContentTransitionManager
  ///
  /// Reference to a TransitionManager XML resource defining the desired
  /// transitions between different window content.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowContentTransitionManager = 16843769;

  /// from: static public final int windowContentTransitions
  ///
  /// Flag indicating whether this window requests that content changes be performed
  /// as scene changes with transitions. Corresponds to
  /// android.view.Window\#FEATURE_CONTENT_TRANSITIONS.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowContentTransitions = 16843768;

  /// from: static public final int windowDisablePreview
  ///
  /// Flag allowing you to disable the splash screen for a window. The default value is
  /// false; if set to true, the system can never use the window's theme to show a splash
  /// screen before your actual instance is shown to the user.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowDisablePreview = 16843298;

  /// from: static public final int windowDrawsSystemBarBackgrounds
  ///
  /// Flag indicating whether this Window is responsible for drawing the background for the
  /// system bars. If true and the window is not floating, the system bars are drawn with a
  /// transparent background and the corresponding areas in this window are filled with the
  /// colors specified in android.R.attr\#statusBarColor and
  /// android.R.attr\#navigationBarColor. Corresponds to
  /// android.view.WindowManager.LayoutParams\#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowDrawsSystemBarBackgrounds = 16843856;

  /// from: static public final int windowElevation
  ///
  /// Elevation to use for the window.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const windowElevation = 16843920;

  /// from: static public final int windowEnableSplitTouch
  ///
  /// Flag indicating that this window should allow touches to be split
  /// across other windows that also support split touch.
  /// The default value is true for applications with a targetSdkVersion
  /// of Honeycomb or newer; false otherwise.
  /// When this flag is false, the first pointer that goes down determines
  /// the window to which all subsequent touches go until all pointers go up.
  /// When this flag is true, each pointer (not necessarily the first) that
  /// goes down determines the window to which all subsequent touches of that
  /// pointer will go until that pointers go up thereby enabling touches
  /// with multiple pointers to be split across multiple windows.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowEnableSplitTouch = 16843543;

  /// from: static public final int windowEnterAnimation
  ///
  /// The animation used when a window is being added.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowEnterAnimation = 16842932;

  /// from: static public final int windowEnterTransition
  ///
  /// Reference to a Transition XML resource defining the desired Transition
  /// used to move Views into the initial Window's content Scene. Corresponds to
  /// android.view.Window\#setEnterTransition(android.transition.Transition).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowEnterTransition = 16843831;

  /// from: static public final int windowExitAnimation
  ///
  /// The animation used when a window is being removed.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowExitAnimation = 16842933;

  /// from: static public final int windowExitTransition
  ///
  /// Reference to a Transition XML resource defining the desired Transition
  /// used to move Views out of the Window's content Scene when launching a new Activity.
  /// Corresponds to
  /// android.view.Window\#setExitTransition(android.transition.Transition).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowExitTransition = 16843832;

  /// from: static public final int windowFrame
  ///
  /// Drawable to use as a frame around the window.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowFrame = 16842837;

  /// from: static public final int windowFullscreen
  ///
  /// Flag indicating whether this window should fill the entire screen.  Corresponds
  /// to android.view.WindowManager.LayoutParams\#FLAG_FULLSCREEN.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowFullscreen = 16843277;

  /// from: static public final int windowHideAnimation
  ///
  /// The animation used when a window is going from VISIBLE to INVISIBLE.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowHideAnimation = 16842935;

  /// from: static public final int windowIsFloating
  ///
  /// Flag indicating whether this is a floating window.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowIsFloating = 16842839;

  /// from: static public final int windowIsTranslucent
  ///
  /// Flag indicating whether this is a translucent window. If this attribute is unset (but
  /// not if set to false), the window might still be considered translucent, if
  /// windowSwipeToDismiss is set to true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowIsTranslucent = 16842840;

  /// from: static public final int windowLayoutInDisplayCutoutMode
  ///
  /// Controls how the window is laid out if there is a {@code DisplayCutout}.
  ///
  /// Defaults to {@code default}.
  ///
  /// See also
  /// android.view.WindowManager.LayoutParams\#layoutInDisplayCutoutMode WindowManager.LayoutParams.layoutInDisplayCutoutMode,
  /// android.view.WindowManager.LayoutParams\#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,
  /// android.view.WindowManager.LayoutParams\#LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES,
  /// android.view.WindowManager.LayoutParams\#LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER,
  /// and android.view.DisplayCutout DisplayCutout
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>default</td><td>0</td><td>
  /// The window is allowed to extend into the <code>DisplayCutout</code> area, only if
  /// the <code>DisplayCutout</code> is fully contained within a system bar. Otherwise, the
  /// window is laid out such that it does not overlap with the <code>DisplayCutout</code>
  /// area.
  ///
  /// Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT</code>.</td></tr>
  /// <tr><td>never</td><td>2</td><td>
  /// The window is never allowed to overlap with the <code>DisplayCutout</code> area.
  ///
  /// This should be used with windows that transiently set
  /// <code>SYSTEM_UI_FLAG_FULLSCREEN</code> to avoid a relayout of the window when the
  /// flag is set or cleared.
  ///
  /// Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER</code>.</td></tr>
  /// <tr><td>shortEdges</td><td>1</td><td>
  /// The window is always allowed to extend into the <code>DisplayCutout</code> areas on the
  /// short edges of the screen even if fullscreen or in landscape.
  /// The window will never extend into a <code>DisplayCutout</code> area on the long edges of
  /// the screen.
  ///
  /// The window must make sure that no important content overlaps with the
  /// <code>DisplayCutout</code>.
  ///
  /// Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</code>.</td></tr>
  /// </table>
  static const windowLayoutInDisplayCutoutMode = 16844166;

  /// from: static public final int windowLightNavigationBar
  ///
  /// If set, the navigation bar will be drawn such that it is compatible with a light
  /// navigation bar background.
  /// For this to take effect, the window must be drawing the system bar backgrounds with
  /// android.R.attr\#windowDrawsSystemBarBackgrounds and the navigation bar must not
  /// have been requested to be translucent with
  /// android.R.attr\#windowTranslucentNavigation.
  /// Corresponds to setting android.view.View\#SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR on
  /// the decor view.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowLightNavigationBar = 16844140;

  /// from: static public final int windowLightStatusBar
  ///
  /// If set, the status bar will be drawn such that it is compatible with a light
  /// status bar background.
  /// For this to take effect, the window must be drawing the system bar backgrounds with
  /// android.R.attr\#windowDrawsSystemBarBackgrounds and the status bar must not
  /// have been requested to be translucent with
  /// android.R.attr\#windowTranslucentStatus.
  /// Corresponds to setting android.view.View\#SYSTEM_UI_FLAG_LIGHT_STATUS_BAR on
  /// the decor view.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowLightStatusBar = 16844000;

  /// from: static public final int windowMinWidthMajor
  ///
  /// The minimum width the window is allowed to be, along the major
  /// axis of the screen.  That is, when in landscape.  Can be either
  /// an absolute dimension or a fraction of the screen size in that
  /// dimension.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const windowMinWidthMajor = 16843606;

  /// from: static public final int windowMinWidthMinor
  ///
  /// The minimum width the window is allowed to be, along the minor
  /// axis of the screen.  That is, when in portrait.  Can be either
  /// an absolute dimension or a fraction of the screen size in that
  /// dimension.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  /// May be a fractional value, which is a floating point number appended with
  /// either % or %p, such as "<code>14.5%</code>".
  /// The % suffix always means a percentage of the base size;
  /// the optional %p suffix provides a size relative to some parent container.
  static const windowMinWidthMinor = 16843607;

  /// from: static public final int windowNoDisplay
  ///
  /// Flag indicating that this window should not be displayed at all.
  /// The default value is false; if set to true, and this window is
  /// the main window of an Activity, then it will never actually
  /// be added to the window manager.  This means that your activity
  /// must immediately quit without waiting for user interaction,
  /// because there will be no such interaction coming.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowNoDisplay = 16843294;

  /// from: static public final int windowNoTitle
  ///
  /// Flag indicating whether there should be no title on this window.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowNoTitle = 16842838;

  /// from: static public final int windowOverscan
  ///
  /// Flag indicating whether this window should extend into overscan region.  Corresponds
  /// to android.view.WindowManager.LayoutParams\#FLAG_LAYOUT_IN_OVERSCAN.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowOverscan = 16843727;

  /// from: static public final int windowReenterTransition
  ///
  /// Reference to a Transition XML resource defining the desired Transition
  /// used to move Views in to the scene when returning from a previously-started Activity.
  /// Corresponds to
  /// android.view.Window\#setReenterTransition(android.transition.Transition).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowReenterTransition = 16843951;

  /// from: static public final int windowReturnTransition
  ///
  /// Reference to a Transition XML resource defining the desired Transition
  /// used to move Views out of the scene when the Window is
  /// preparing to close. Corresponds to
  /// android.view.Window\#setReturnTransition(android.transition.Transition).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowReturnTransition = 16843950;

  /// from: static public final int windowSharedElementEnterTransition
  ///
  /// Reference to a Transition XML resource defining the desired Transition
  /// used to move shared elements transferred into the Window's initial content Scene.
  /// Corresponds to android.view.Window\#setSharedElementEnterTransition(
  /// android.transition.Transition).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowSharedElementEnterTransition = 16843833;

  /// from: static public final int windowSharedElementExitTransition
  ///
  /// Reference to a Transition XML resource defining the desired Transition
  /// used when starting a new Activity to move shared elements prior to transferring
  /// to the called Activity.
  /// Corresponds to android.view.Window\#setSharedElementExitTransition(
  /// android.transition.Transition).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowSharedElementExitTransition = 16843834;

  /// from: static public final int windowSharedElementReenterTransition
  ///
  /// Reference to a Transition XML resource defining the desired Transition
  /// used for shared elements transferred back to a calling Activity.
  /// Corresponds to android.view.Window\#setSharedElementReenterTransition(
  /// android.transition.Transition).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowSharedElementReenterTransition = 16843953;

  /// from: static public final int windowSharedElementReturnTransition
  ///
  /// Reference to a Transition XML resource defining the desired Transition
  /// used to move shared elements transferred back to a calling Activity.
  /// Corresponds to android.view.Window\#setSharedElementReturnTransition(
  /// android.transition.Transition).
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowSharedElementReturnTransition = 16843952;

  /// from: static public final int windowSharedElementsUseOverlay
  ///
  /// Indicates whether or not shared elements should use an overlay
  /// during transitions. The default value is true.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowSharedElementsUseOverlay = 16843963;

  /// from: static public final int windowShowAnimation
  ///
  /// The animation used when a window is going from INVISIBLE to VISIBLE.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowShowAnimation = 16842934;

  /// from: static public final int windowShowWallpaper
  ///
  /// Flag indicating that this window's background should be the
  /// user's current wallpaper.  Corresponds
  /// to android.view.WindowManager.LayoutParams\#FLAG_SHOW_WALLPAPER.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowShowWallpaper = 16843410;

  /// from: static public final int windowSoftInputMode
  ///
  /// Defines the default soft input state that this window would
  /// like when it is displayed.  Corresponds
  /// to android.view.WindowManager.LayoutParams\#softInputMode.
  /// Must be one or more (separated by '|') of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>adjustNothing</td><td>30</td><td>Don't resize _or_ pan the window to make room for the
  /// soft input area; the window is never adjusted for it.</td></tr>
  /// <tr><td>adjustPan</td><td>20</td><td>Don't resize the window to make room for the soft input area;
  /// instead pan the contents of the window as focus moves inside
  /// of it so that the user can see what they are typing.  This is
  /// generally less desireable than panning because the user may
  /// need to close the input area to get at and interact with
  /// parts of the window.</td></tr>
  /// <tr><td>adjustResize</td><td>10</td><td>Always resize the window: the content area of the window is
  /// reduced to make room for the soft input area.</td></tr>
  /// <tr><td>adjustUnspecified</td><td>0</td><td>The window resize/pan adjustment has not been specified,
  /// the system will automatically select between resize and pan
  /// modes, depending
  /// on whether the content of the window has any layout views
  /// that can scroll their contents.  If there is such a view,
  /// then the window will be resized, with the assumption being
  /// that the resizeable area can be reduced to make room for
  /// the input UI.</td></tr>
  /// <tr><td>stateAlwaysHidden</td><td>3</td><td>Always make the soft input area hidden when this window
  /// has input focus.</td></tr>
  /// <tr><td>stateAlwaysVisible</td><td>5</td><td>Always make the soft input area visible when this window
  /// has input focus.</td></tr>
  /// <tr><td>stateHidden</td><td>2</td><td>Make the soft input area hidden when normally appropriate
  /// (when the user is navigating forward to your window).</td></tr>
  /// <tr><td>stateUnchanged</td><td>1</td><td>Leave the soft input window as-is, in whatever state it
  /// last was.</td></tr>
  /// <tr><td>stateUnspecified</td><td>0</td><td>Not specified, use what the system thinks is best.  This
  /// is the default.</td></tr>
  /// <tr><td>stateVisible</td><td>4</td><td>Make the soft input area visible when normally appropriate
  /// (when the user is navigating forward to your window).</td></tr>
  /// </table>
  static const windowSoftInputMode = 16843307;

  /// from: static public final int windowSplashscreenContent
  ///
  /// Reference to a drawable to be used as the splash screen content of the window. This
  /// drawable will be placed on top of the android.R.attr\#windowBackground with its
  /// bounds inset by the system bars. If the drawable should not be inset by the system
  /// bars, use a fullscreen theme.
  ///
  /// Note that even if no splashscreen content is set on the theme, the system may still
  /// show a splash screen using the other attributes on the theme, like the
  /// android.R.attr\#windowBackground.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowSplashscreenContent = 16844132;

  /// from: static public final int windowSwipeToDismiss
  ///
  /// Flag to indicate that a window can be swiped away to be dismissed.
  /// Corresponds to android.view.Window\#FEATURE_SWIPE_TO_DISMISS. It will also
  /// dynamically change translucency of the window, if the windowIsTranslucent is not set.
  /// If windowIsTranslucent is set (to either true or false) it will obey that setting.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowSwipeToDismiss = 16843763;

  /// from: static public final int windowTitleBackgroundStyle
  ///
  /// The style resource to use for a window's title area.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowTitleBackgroundStyle = 16842844;

  /// from: static public final int windowTitleSize
  ///
  /// The style resource to use for a window's title bar height.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const windowTitleSize = 16842842;

  /// from: static public final int windowTitleStyle
  ///
  /// The style resource to use for a window's title text.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const windowTitleStyle = 16842843;

  /// from: static public final int windowTransitionBackgroundFadeDuration
  ///
  /// The duration, in milliseconds, of the window background fade duration
  /// when transitioning into or away from an Activity when called with an
  /// Activity Transition. Corresponds to
  /// android.view.Window\#setTransitionBackgroundFadeDuration(long).
  /// May be an integer value, such as "<code>100</code>".
  static const windowTransitionBackgroundFadeDuration = 16843873;

  /// from: static public final int windowTranslucentNavigation
  ///
  /// Flag indicating whether this window requests a translucent navigation bar.  Corresponds
  /// to android.view.WindowManager.LayoutParams\#FLAG_TRANSLUCENT_NAVIGATION.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowTranslucentNavigation = 16843760;

  /// from: static public final int windowTranslucentStatus
  ///
  /// Flag indicating whether this window requests a translucent status bar.  Corresponds
  /// to android.view.WindowManager.LayoutParams\#FLAG_TRANSLUCENT_STATUS.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const windowTranslucentStatus = 16843759;

  /// from: static public final int writePermission
  ///
  /// A specific android.R.attr\#permission name for write
  /// access to a android.content.ContentProvider.  See the
  /// <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
  /// document for more information on permissions.
  /// May be a string value, using '\\;' to escape characters such as
  /// '\\n' or '\\uxxxx' for a unicode character;
  static const writePermission = 16842760;

  /// from: static public final int x
  ///
  /// A coordinate in the X dimension.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const x = 16842924;

  /// from: static public final int xlargeScreens
  ///
  /// Indicates whether the application supports extra large screen form-factors.
  /// May be a boolean value, such as "<code>true</code>" or
  /// "<code>false</code>".
  static const xlargeScreens = 16843455;

  /// from: static public final int y
  ///
  /// A coordinate in the Y dimension.
  /// May be a dimension value, which is a floating point number appended with a
  /// unit such as "<code>14.5sp</code>".
  /// Available units are: px (pixels), dp (density-independent pixels),
  /// sp (scaled pixels based on preferred font size), in (inches), and
  /// mm (millimeters).
  static const y = 16842925;

  /// from: static public final int yearListItemTextAppearance
  ///
  /// The list year's text appearance in the list.
  /// {@deprecated Use yearListTextColor. }
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const yearListItemTextAppearance = 16843929;

  /// from: static public final int yearListSelectorColor
  ///
  /// The list year's selected circle color in the list.
  /// {@deprecated No longer displayed.}
  /// May be a color value, in the form of "<code>\#<i>rgb</i></code>",
  /// "<code>\#<i>argb</i></code>", "<code>\#<i>rrggbb</i></code>", or
  /// "<code>\#<i>aarrggbb</i></code>".
  static const yearListSelectorColor = 16843930;

  /// from: static public final int yesNoPreferenceStyle
  ///
  /// Default style for YesNoPreference.
  /// May be a reference to another resource, in the form
  /// "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
  /// attribute in the form
  /// "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
  static const yesNoPreferenceStyle = 16842896;

  /// from: static public final int zAdjustment
  ///
  /// Allows for an adjustment of the Z ordering of the content being
  /// animated for the duration of the animation.  The default value is normal.
  /// Must be one of the following constant values.
  ///
  /// <table>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <colgroup align="left"/>
  /// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
  /// <tr><td>bottom</td><td>ffffffff</td><td>The content being animated is forced under all other
  /// content for the duration of the animation.</td></tr>
  /// <tr><td>normal</td><td>0</td><td>The content being animated be kept in its current Z order.</td></tr>
  /// <tr><td>top</td><td>1</td><td>The content being animated is forced on top of all other
  /// content for the duration of the animation.</td></tr>
  /// </table>
  static const zAdjustment = 16843201;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_attr()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$array
class R_array extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$array");
  R_array.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int emailAddressTypes
  ///
  /// Email address types from android.provider.Contacts. This could be used when adding a new e-mail address for a contact, for example.
  static const emailAddressTypes = 17235968;

  /// from: static public final int imProtocols
  ///
  /// Instant Message protocols/providers from android.provider.Contacts
  static const imProtocols = 17235969;

  /// from: static public final int organizationTypes
  ///
  /// Organization types from android.provider.Contacts. This could be used when adding a new organization for a contact, for example.
  static const organizationTypes = 17235970;

  /// from: static public final int phoneTypes
  ///
  /// Phone number types from android.provider.Contacts. This could be used when adding a new phone number for a contact, for example.
  static const phoneTypes = 17235971;

  /// from: static public final int postalAddressTypes
  ///
  /// Postal address types from android.provider.Contacts. This could be used when adding a new address for a contact, for example.
  static const postalAddressTypes = 17235972;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_array()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$animator
class R_animator extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$animator");
  R_animator.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int fade_in
  ///
  /// A simple fade-in animation.
  static const fade_in = 17498112;

  /// from: static public final int fade_out
  ///
  /// A simple fade-out animation.
  static const fade_out = 17498113;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_animator()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.R$anim
class R_anim extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/R\$anim");
  R_anim.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int accelerate_decelerate_interpolator
  static const accelerate_decelerate_interpolator = 17432580;

  /// from: static public final int accelerate_interpolator
  ///
  /// Acceleration curve matching Flash's quadratic ease out function.
  static const accelerate_interpolator = 17432581;

  /// from: static public final int anticipate_interpolator
  static const anticipate_interpolator = 17432583;

  /// from: static public final int anticipate_overshoot_interpolator
  static const anticipate_overshoot_interpolator = 17432585;

  /// from: static public final int bounce_interpolator
  static const bounce_interpolator = 17432586;

  /// from: static public final int cycle_interpolator
  static const cycle_interpolator = 17432588;

  /// from: static public final int decelerate_interpolator
  ///
  /// Acceleration curve matching Flash's quadratic ease in function.
  static const decelerate_interpolator = 17432582;

  /// from: static public final int fade_in
  static const fade_in = 17432576;

  /// from: static public final int fade_out
  static const fade_out = 17432577;

  /// from: static public final int linear_interpolator
  static const linear_interpolator = 17432587;

  /// from: static public final int overshoot_interpolator
  static const overshoot_interpolator = 17432584;

  /// from: static public final int slide_in_left
  static const slide_in_left = 17432578;

  /// from: static public final int slide_out_right
  static const slide_out_right = 17432579;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  R_anim()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
