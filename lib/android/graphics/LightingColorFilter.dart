// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ColorFilter.dart" as colorfilter_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.LightingColorFilter
///
/// A color filter that can be used to simulate simple lighting effects.
/// A <code>LightingColorFilter</code> is defined by two parameters, one
/// used to multiply the source color (called <code>colorMultiply</code>)
/// and one used to add to the source color (called <code>colorAdd</code>).
/// The alpha channel is left untouched by this color filter.
///
/// Given a source color RGB, the resulting R'G'B' color is computed thusly:
/// <pre>
/// R' = R * colorMultiply.R + colorAdd.R
/// G' = G * colorMultiply.G + colorAdd.G
/// B' = B * colorMultiply.B + colorAdd.B
/// </pre>
/// The result is pinned to the <code>[0..255]</code> range for each channel.
class LightingColorFilter extends colorfilter_.ColorFilter {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/LightingColorFilter");
  LightingColorFilter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int mul, int add)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a colorfilter that multiplies the RGB channels by one color,
  /// and then adds a second color. The alpha components of the mul and add
  /// arguments are ignored.
  LightingColorFilter.ctor1(int mul, int add)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [mul, add]).object);

  static final _id_getColorMultiply =
      jniAccessors.getMethodIDOf(_classRef, "getColorMultiply", "()I");

  /// from: public int getColorMultiply()
  ///
  /// Returns the RGB color used to multiply the source color when the
  /// color filter is applied.
  int getColorMultiply() => jniAccessors.callMethodWithArgs(
      reference, _id_getColorMultiply, jni.JniType.intType, []).integer;

  static final _id_getColorAdd =
      jniAccessors.getMethodIDOf(_classRef, "getColorAdd", "()I");

  /// from: public int getColorAdd()
  ///
  /// Returns the RGB color that will be added to the source color
  /// when the color filter is applied.
  int getColorAdd() => jniAccessors.callMethodWithArgs(
      reference, _id_getColorAdd, jni.JniType.intType, []).integer;
}
