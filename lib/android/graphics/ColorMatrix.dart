// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.ColorMatrix
///
/// 4x5 matrix for transforming the color and alpha components of a Bitmap.
/// The matrix can be passed as single array, and is treated as follows:
///
/// <pre>
///  [ a, b, c, d, e,
///    f, g, h, i, j,
///    k, l, m, n, o,
///    p, q, r, s, t ]</pre>
///
///
/// When applied to a color <code>[R, G, B, A]</code>, the resulting color
/// is computed as:
///
///
///
/// <pre>
///   R&rsquo; = a*R + b*G + c*B + d*A + e;
///   G&rsquo; = f*R + g*G + h*B + i*A + j;
///   B&rsquo; = k*R + l*G + m*B + n*A + o;
///   A&rsquo; = p*R + q*G + r*B + s*A + t;</pre>
///
///
/// That resulting color <code>[R&rsquo;, G&rsquo;, B&rsquo;, A&rsquo;]</code>
/// then has each channel clamped to the <code>0</code> to <code>255</code>
/// range.
///
///
///
///
/// The sample ColorMatrix below inverts incoming colors by scaling each
/// channel by <code>-1</code>, and then shifting the result up by
/// <code>255</code> to remain in the standard color space.
///
///
///
/// <pre>
///   [ -1, 0, 0, 0, 255,
///     0, -1, 0, 0, 255,
///     0, 0, -1, 0, 255,
///     0, 0, 0, 1, 0 ]</pre>
class ColorMatrix extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/ColorMatrix");
  ColorMatrix.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new colormatrix initialized to identity (as if reset() had
  /// been called).
  ColorMatrix()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "([F)V");

  /// from: public void <init>(float[] src)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new colormatrix initialized with the specified array of values.
  ColorMatrix.ctor1(jni.JniObject src)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [src.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/ColorMatrix;)V");

  /// from: public void <init>(android.graphics.ColorMatrix src)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new colormatrix initialized with the specified colormatrix.
  ColorMatrix.ctor2(ColorMatrix src)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [src.reference]).object);

  static final _id_getArray =
      jniAccessors.getMethodIDOf(_classRef, "getArray", "()[F");

  /// from: public final float[] getArray()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the array of floats representing this colormatrix.
  jni.JniObject getArray() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getArray, jni.JniType.objectType, []).object);

  static final _id_reset =
      jniAccessors.getMethodIDOf(_classRef, "reset", "()V");

  /// from: public void reset()
  ///
  /// Set this colormatrix to identity:
  /// <pre>
  /// [ 1 0 0 0 0   - red vector
  ///   0 1 0 0 0   - green vector
  ///   0 0 1 0 0   - blue vector
  ///   0 0 0 1 0 ] - alpha vector
  /// </pre>
  void reset() => jniAccessors.callMethodWithArgs(
      reference, _id_reset, jni.JniType.voidType, []).check();

  static final _id_set0 = jniAccessors.getMethodIDOf(
      _classRef, "set", "(Landroid/graphics/ColorMatrix;)V");

  /// from: public void set(android.graphics.ColorMatrix src)
  ///
  /// Assign the src colormatrix into this matrix, copying all of its values.
  void set0(ColorMatrix src) => jniAccessors.callMethodWithArgs(
      reference, _id_set0, jni.JniType.voidType, [src.reference]).check();

  static final _id_set1 = jniAccessors.getMethodIDOf(_classRef, "set", "([F)V");

  /// from: public void set(float[] src)
  ///
  /// Assign the array of floats into this matrix, copying all of its values.
  void set1(jni.JniObject src) => jniAccessors.callMethodWithArgs(
      reference, _id_set1, jni.JniType.voidType, [src.reference]).check();

  static final _id_setScale =
      jniAccessors.getMethodIDOf(_classRef, "setScale", "(FFFF)V");

  /// from: public void setScale(float rScale, float gScale, float bScale, float aScale)
  ///
  /// Set this colormatrix to scale by the specified values.
  void setScale(double rScale, double gScale, double bScale, double aScale) =>
      jniAccessors.callMethodWithArgs(reference, _id_setScale,
          jni.JniType.voidType, [rScale, gScale, bScale, aScale]).check();

  static final _id_setRotate =
      jniAccessors.getMethodIDOf(_classRef, "setRotate", "(IF)V");

  /// from: public void setRotate(int axis, float degrees)
  ///
  /// Set the rotation on a color axis by the specified values.
  ///
  /// <code>axis=0</code> correspond to a rotation around the RED color
  /// <code>axis=1</code> correspond to a rotation around the GREEN color
  /// <code>axis=2</code> correspond to a rotation around the BLUE color
  ///
  ///
  void setRotate(int axis, double degrees) => jniAccessors.callMethodWithArgs(
      reference, _id_setRotate, jni.JniType.voidType, [axis, degrees]).check();

  static final _id_setConcat = jniAccessors.getMethodIDOf(
      _classRef,
      "setConcat",
      "(Landroid/graphics/ColorMatrix;Landroid/graphics/ColorMatrix;)V");

  /// from: public void setConcat(android.graphics.ColorMatrix matA, android.graphics.ColorMatrix matB)
  ///
  /// Set this colormatrix to the concatenation of the two specified
  /// colormatrices, such that the resulting colormatrix has the same effect
  /// as applying matB and then applying matA.
  ///
  /// It is legal for either matA or matB to be the same colormatrix as this.
  ///
  ///
  void setConcat(ColorMatrix matA, ColorMatrix matB) =>
      jniAccessors.callMethodWithArgs(reference, _id_setConcat,
          jni.JniType.voidType, [matA.reference, matB.reference]).check();

  static final _id_preConcat = jniAccessors.getMethodIDOf(
      _classRef, "preConcat", "(Landroid/graphics/ColorMatrix;)V");

  /// from: public void preConcat(android.graphics.ColorMatrix prematrix)
  ///
  /// Concat this colormatrix with the specified prematrix.
  ///
  /// This is logically the same as calling setConcat(this, prematrix);
  ///
  ///
  void preConcat(ColorMatrix prematrix) => jniAccessors.callMethodWithArgs(
      reference,
      _id_preConcat,
      jni.JniType.voidType,
      [prematrix.reference]).check();

  static final _id_postConcat = jniAccessors.getMethodIDOf(
      _classRef, "postConcat", "(Landroid/graphics/ColorMatrix;)V");

  /// from: public void postConcat(android.graphics.ColorMatrix postmatrix)
  ///
  /// Concat this colormatrix with the specified postmatrix.
  ///
  /// This is logically the same as calling setConcat(postmatrix, this);
  ///
  ///
  void postConcat(ColorMatrix postmatrix) => jniAccessors.callMethodWithArgs(
      reference,
      _id_postConcat,
      jni.JniType.voidType,
      [postmatrix.reference]).check();

  static final _id_setSaturation =
      jniAccessors.getMethodIDOf(_classRef, "setSaturation", "(F)V");

  /// from: public void setSaturation(float sat)
  ///
  /// Set the matrix to affect the saturation of colors.
  ///@param sat A value of 0 maps the color to gray-scale. 1 is identity.
  void setSaturation(double sat) => jniAccessors.callMethodWithArgs(
      reference, _id_setSaturation, jni.JniType.voidType, [sat]).check();

  static final _id_setRGB2YUV =
      jniAccessors.getMethodIDOf(_classRef, "setRGB2YUV", "()V");

  /// from: public void setRGB2YUV()
  ///
  /// Set the matrix to convert RGB to YUV
  void setRGB2YUV() => jniAccessors.callMethodWithArgs(
      reference, _id_setRGB2YUV, jni.JniType.voidType, []).check();

  static final _id_setYUV2RGB =
      jniAccessors.getMethodIDOf(_classRef, "setYUV2RGB", "()V");

  /// from: public void setYUV2RGB()
  ///
  /// Set the matrix to convert from YUV to RGB
  void setYUV2RGB() => jniAccessors.callMethodWithArgs(
      reference, _id_setYUV2RGB, jni.JniType.voidType, []).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;
}
