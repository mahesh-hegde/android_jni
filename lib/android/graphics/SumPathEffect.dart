// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "PathEffect.dart" as patheffect_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.SumPathEffect
class SumPathEffect extends patheffect_.PathEffect {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/SumPathEffect");
  SumPathEffect.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/graphics/PathEffect;Landroid/graphics/PathEffect;)V");

  /// from: public void <init>(android.graphics.PathEffect first, android.graphics.PathEffect second)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a PathEffect whose effect is to apply two effects, in sequence.
  /// (e.g. first(path) + second(path))
  SumPathEffect.ctor1(
      patheffect_.PathEffect first, patheffect_.PathEffect second)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [first.reference, second.reference]).object);
}
