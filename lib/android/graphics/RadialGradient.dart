// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Shader.dart" as shader_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.RadialGradient
class RadialGradient extends shader_.Shader {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/RadialGradient");
  RadialGradient.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(FFF[I[FLandroid/graphics/Shader\$TileMode;)V");

  /// from: public void <init>(float centerX, float centerY, float radius, int[] colors, float[] stops, android.graphics.Shader.TileMode tileMode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a shader that draws a radial gradient given the center and radius.
  ///@param centerX The x-coordinate of the center of the radius
  ///@param centerY The y-coordinate of the center of the radius
  ///@param radius Must be positive. The radius of the circle for this gradient.
  ///@param colors The colors to be distributed between the center and edge of the circle
  /// This value must never be {@code null}.
  ///@param stops May be <code>null</code>. Valid values are between <code>0.0f</code> and
  ///                 <code>1.0f</code>. The relative position of each corresponding color in
  ///                 the colors array. If <code>null</code>, colors are distributed evenly
  ///                 between the center and edge of the circle.
  /// This value may be {@code null}.
  ///@param tileMode The Shader tiling mode
  ///
  /// This value must never be {@code null}.
  RadialGradient.ctor1(
      double centerX,
      double centerY,
      double radius,
      jni.JniObject colors,
      jni.JniObject stops,
      shader_.Shader_TileMode tileMode)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          centerX,
          centerY,
          radius,
          colors.reference,
          stops.reference,
          tileMode.reference
        ]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(FFFIILandroid/graphics/Shader\$TileMode;)V");

  /// from: public void <init>(float centerX, float centerY, float radius, int centerColor, int edgeColor, android.graphics.Shader.TileMode tileMode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a shader that draws a radial gradient given the center and radius.
  ///@param centerX The x-coordinate of the center of the radius
  ///@param centerY The y-coordinate of the center of the radius
  ///@param radius Must be positive. The radius of the circle for this gradient
  ///@param centerColor The color at the center of the circle.
  ///@param edgeColor The color at the edge of the circle.
  ///@param tileMode The Shader tiling mode
  ///
  /// This value must never be {@code null}.
  RadialGradient.ctor2(double centerX, double centerY, double radius,
      int centerColor, int edgeColor, shader_.Shader_TileMode tileMode)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, [
          centerX,
          centerY,
          radius,
          centerColor,
          edgeColor,
          tileMode.reference
        ]).object);
}
