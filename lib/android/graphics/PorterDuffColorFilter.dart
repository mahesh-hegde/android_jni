// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ColorFilter.dart" as colorfilter_;

import "PorterDuff.dart" as porterduff_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.PorterDuffColorFilter
///
/// A color filter that can be used to tint the source pixels using a single
/// color and a specific PorterDuff Porter-Duff composite mode.
class PorterDuffColorFilter extends colorfilter_.ColorFilter {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/PorterDuffColorFilter");
  PorterDuffColorFilter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(ILandroid/graphics/PorterDuff\$Mode;)V");

  /// from: public void <init>(int color, android.graphics.PorterDuff.Mode mode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a color filter that uses the specified color and Porter-Duff mode.
  ///@param color The ARGB source color used with the specified Porter-Duff mode
  ///@param mode The porter-duff mode that is applied
  ///
  /// This value must never be {@code null}.
  ///@see Color
  ///@see \#setColor(int)
  ///@see \#setMode(android.graphics.PorterDuff.Mode)
  PorterDuffColorFilter.ctor1(int color, porterduff_.PorterDuff_Mode mode)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [color, mode.reference]).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(jni.JniObject object) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [object.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}
