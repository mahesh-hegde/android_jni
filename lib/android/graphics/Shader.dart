// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Matrix.dart" as matrix_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.Shader
///
/// Shader is the based class for objects that return horizontal spans of colors
/// during drawing. A subclass of Shader is installed in a Paint calling
/// paint.setShader(shader). After that any object (other than a bitmap) that is
/// drawn with that paint will get its color(s) from the shader.
class Shader extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/graphics/Shader");
  Shader.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated Use subclass constructors directly instead.
  Shader()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getLocalMatrix = jniAccessors.getMethodIDOf(
      _classRef, "getLocalMatrix", "(Landroid/graphics/Matrix;)Z");

  /// from: public boolean getLocalMatrix(android.graphics.Matrix localM)
  ///
  /// Return true if the shader has a non-identity local matrix.
  ///@param localM Set to the local matrix of the shader, if the shader's matrix is non-null.
  /// This value must never be {@code null}.
  ///@return true if the shader has a non-identity local matrix
  bool getLocalMatrix(matrix_.Matrix localM) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getLocalMatrix,
      jni.JniType.booleanType,
      [localM.reference]).boolean;

  static final _id_setLocalMatrix = jniAccessors.getMethodIDOf(
      _classRef, "setLocalMatrix", "(Landroid/graphics/Matrix;)V");

  /// from: public void setLocalMatrix(android.graphics.Matrix localM)
  ///
  /// Set the shader's local matrix. Passing null will reset the shader's
  /// matrix to identity. If the matrix has scale value as 0, the drawing
  /// result is undefined.
  ///@param localM The shader's new local matrix, or null to specify identity
  ///
  /// This value may be {@code null}.
  void setLocalMatrix(matrix_.Matrix localM) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setLocalMatrix,
      jni.JniType.voidType,
      [localM.reference]).check();
}

/// from: android.graphics.Shader$TileMode
class Shader_TileMode extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/Shader\$TileMode");
  Shader_TileMode.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/graphics/Shader\$TileMode;");

  /// from: static public android.graphics.Shader.TileMode[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(_classRef,
      "valueOf", "(Ljava/lang/String;)Landroid/graphics/Shader\$TileMode;");

  /// from: static public android.graphics.Shader.TileMode valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Shader_TileMode valueOf(jni.JniString name) =>
      Shader_TileMode.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_valueOf, jni.JniType.objectType, [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Shader_TileMode()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
