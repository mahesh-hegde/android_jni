// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Matrix.dart" as matrix_;

import "Canvas.dart" as canvas_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.Camera
///
/// A camera instance can be used to compute 3D transformations and
/// generate a matrix that can be applied, for instance, on a
/// Canvas.
class Camera extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/graphics/Camera");
  Camera.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new camera, with empty transformations.
  Camera()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_save = jniAccessors.getMethodIDOf(_classRef, "save", "()V");

  /// from: public native void save()
  ///
  /// Saves the camera state. Each save should be balanced
  /// with a call to \#restore().
  ///@see \#save()
  void save() => jniAccessors.callMethodWithArgs(
      reference, _id_save, jni.JniType.voidType, []).check();

  static final _id_restore =
      jniAccessors.getMethodIDOf(_classRef, "restore", "()V");

  /// from: public native void restore()
  ///
  /// Restores the saved state, if any.
  ///@see \#restore()
  void restore() => jniAccessors.callMethodWithArgs(
      reference, _id_restore, jni.JniType.voidType, []).check();

  static final _id_translate =
      jniAccessors.getMethodIDOf(_classRef, "translate", "(FFF)V");

  /// from: public native void translate(float x, float y, float z)
  ///
  /// Applies a translation transform on all three axis.
  ///@param x The distance to translate by on the X axis
  ///@param y The distance to translate by on the Y axis
  ///@param z The distance to translate by on the Z axis
  void translate(double x, double y, double z) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_translate, jni.JniType.voidType, [x, y, z]).check();

  static final _id_rotateX =
      jniAccessors.getMethodIDOf(_classRef, "rotateX", "(F)V");

  /// from: public native void rotateX(float deg)
  ///
  /// Applies a rotation transform around the X axis.
  ///@param deg The angle of rotation around the X axis, in degrees
  ///@see \#rotateY(float)
  ///@see \#rotateZ(float)
  ///@see \#rotate(float, float, float)
  void rotateX(double deg) => jniAccessors.callMethodWithArgs(
      reference, _id_rotateX, jni.JniType.voidType, [deg]).check();

  static final _id_rotateY =
      jniAccessors.getMethodIDOf(_classRef, "rotateY", "(F)V");

  /// from: public native void rotateY(float deg)
  ///
  /// Applies a rotation transform around the Y axis.
  ///@param deg The angle of rotation around the Y axis, in degrees
  ///@see \#rotateX(float)
  ///@see \#rotateZ(float)
  ///@see \#rotate(float, float, float)
  void rotateY(double deg) => jniAccessors.callMethodWithArgs(
      reference, _id_rotateY, jni.JniType.voidType, [deg]).check();

  static final _id_rotateZ =
      jniAccessors.getMethodIDOf(_classRef, "rotateZ", "(F)V");

  /// from: public native void rotateZ(float deg)
  ///
  /// Applies a rotation transform around the Z axis.
  ///@param deg The angle of rotation around the Z axis, in degrees
  ///@see \#rotateX(float)
  ///@see \#rotateY(float)
  ///@see \#rotate(float, float, float)
  void rotateZ(double deg) => jniAccessors.callMethodWithArgs(
      reference, _id_rotateZ, jni.JniType.voidType, [deg]).check();

  static final _id_rotate =
      jniAccessors.getMethodIDOf(_classRef, "rotate", "(FFF)V");

  /// from: public native void rotate(float x, float y, float z)
  ///
  /// Applies a rotation transform around all three axis.
  ///@param x The angle of rotation around the X axis, in degrees
  ///@param y The angle of rotation around the Y axis, in degrees
  ///@param z The angle of rotation around the Z axis, in degrees
  ///@see \#rotateX(float)
  ///@see \#rotateY(float)
  ///@see \#rotateZ(float)
  void rotate(double x, double y, double z) => jniAccessors.callMethodWithArgs(
      reference, _id_rotate, jni.JniType.voidType, [x, y, z]).check();

  static final _id_getLocationX =
      jniAccessors.getMethodIDOf(_classRef, "getLocationX", "()F");

  /// from: public native float getLocationX()
  ///
  /// Gets the x location of the camera.
  ///@see \#setLocation(float, float, float)
  double getLocationX() => jniAccessors.callMethodWithArgs(
      reference, _id_getLocationX, jni.JniType.floatType, []).float;

  static final _id_getLocationY =
      jniAccessors.getMethodIDOf(_classRef, "getLocationY", "()F");

  /// from: public native float getLocationY()
  ///
  /// Gets the y location of the camera.
  ///@see \#setLocation(float, float, float)
  double getLocationY() => jniAccessors.callMethodWithArgs(
      reference, _id_getLocationY, jni.JniType.floatType, []).float;

  static final _id_getLocationZ =
      jniAccessors.getMethodIDOf(_classRef, "getLocationZ", "()F");

  /// from: public native float getLocationZ()
  ///
  /// Gets the z location of the camera.
  ///@see \#setLocation(float, float, float)
  double getLocationZ() => jniAccessors.callMethodWithArgs(
      reference, _id_getLocationZ, jni.JniType.floatType, []).float;

  static final _id_setLocation =
      jniAccessors.getMethodIDOf(_classRef, "setLocation", "(FFF)V");

  /// from: public native void setLocation(float x, float y, float z)
  ///
  /// Sets the location of the camera. The default location is set at
  /// 0, 0, -8.
  ///@param x The x location of the camera
  ///@param y The y location of the camera
  ///@param z The z location of the camera
  void setLocation(double x, double y, double z) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_setLocation, jni.JniType.voidType, [x, y, z]).check();

  static final _id_getMatrix = jniAccessors.getMethodIDOf(
      _classRef, "getMatrix", "(Landroid/graphics/Matrix;)V");

  /// from: public void getMatrix(android.graphics.Matrix matrix)
  ///
  /// Computes the matrix corresponding to the current transformation
  /// and copies it to the supplied matrix object.
  ///@param matrix The matrix to copy the current transforms into
  void getMatrix(matrix_.Matrix matrix) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getMatrix,
      jni.JniType.voidType,
      [matrix.reference]).check();

  static final _id_applyToCanvas = jniAccessors.getMethodIDOf(
      _classRef, "applyToCanvas", "(Landroid/graphics/Canvas;)V");

  /// from: public void applyToCanvas(android.graphics.Canvas canvas)
  ///
  /// Computes the matrix corresponding to the current transformation
  /// and applies it to the specified Canvas.
  ///@param canvas The Canvas to set the transform matrix onto
  void applyToCanvas(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference,
      _id_applyToCanvas,
      jni.JniType.voidType,
      [canvas.reference]).check();

  static final _id_dotWithNormal =
      jniAccessors.getMethodIDOf(_classRef, "dotWithNormal", "(FFF)F");

  /// from: public native float dotWithNormal(float dx, float dy, float dz)
  double dotWithNormal(double dx, double dy, double dz) =>
      jniAccessors.callMethodWithArgs(reference, _id_dotWithNormal,
          jni.JniType.floatType, [dx, dy, dz]).float;

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();
}
