// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Shader.dart" as shader_;

import "Xfermode.dart" as xfermode_;

import "PorterDuff.dart" as porterduff_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.ComposeShader
///
/// A subclass of shader that returns the composition of two other shaders, combined by
///    an android.graphics.Xfermode subclass.
class ComposeShader extends shader_.Shader {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/ComposeShader");
  ComposeShader.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/graphics/Shader;Landroid/graphics/Shader;Landroid/graphics/Xfermode;)V");

  /// from: public void <init>(android.graphics.Shader shaderA, android.graphics.Shader shaderB, android.graphics.Xfermode mode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new compose shader, given shaders A, B, and a combining mode.
  /// When the mode is applied, it will be given the result from shader A as its
  /// "dst", and the result from shader B as its "src".
  ///@param shaderA The colors from this shader are seen as the "dst" by the mode
  /// This value must never be {@code null}.
  ///@param shaderB The colors from this shader are seen as the "src" by the mode
  /// This value must never be {@code null}.
  ///@param mode The mode that combines the colors from the two shaders. If mode
  ///                 is null, then SRC_OVER is assumed.
  ///
  /// This value must never be {@code null}.
  ComposeShader.ctor1(
      shader_.Shader shaderA, shader_.Shader shaderB, xfermode_.Xfermode mode)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [shaderA.reference, shaderB.reference, mode.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/graphics/Shader;Landroid/graphics/Shader;Landroid/graphics/PorterDuff\$Mode;)V");

  /// from: public void <init>(android.graphics.Shader shaderA, android.graphics.Shader shaderB, android.graphics.PorterDuff.Mode mode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new compose shader, given shaders A, B, and a combining PorterDuff mode.
  /// When the mode is applied, it will be given the result from shader A as its
  /// "dst", and the result from shader B as its "src".
  ///@param shaderA The colors from this shader are seen as the "dst" by the mode
  /// This value must never be {@code null}.
  ///@param shaderB The colors from this shader are seen as the "src" by the mode
  /// This value must never be {@code null}.
  ///@param mode The PorterDuff mode that combines the colors from the two shaders.
  ///
  /// This value must never be {@code null}.
  ComposeShader.ctor2(shader_.Shader shaderA, shader_.Shader shaderB,
      porterduff_.PorterDuff_Mode mode)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [shaderA.reference, shaderB.reference, mode.reference]).object);
}
