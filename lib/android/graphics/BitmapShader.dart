// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Shader.dart" as shader_;

import "Bitmap.dart" as bitmap_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.BitmapShader
///
/// Shader used to draw a bitmap as a texture. The bitmap can be repeated or
/// mirrored by setting the tiling mode.
class BitmapShader extends shader_.Shader {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/BitmapShader");
  BitmapShader.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/graphics/Bitmap;Landroid/graphics/Shader\$TileMode;Landroid/graphics/Shader\$TileMode;)V");

  /// from: public void <init>(android.graphics.Bitmap bitmap, android.graphics.Shader.TileMode tileX, android.graphics.Shader.TileMode tileY)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Call this to create a new shader that will draw with a bitmap.
  ///@param bitmap The bitmap to use inside the shader
  /// This value must never be {@code null}.
  ///@param tileX The tiling mode for x to draw the bitmap in.
  /// This value must never be {@code null}.
  ///@param tileY The tiling mode for y to draw the bitmap in.
  ///
  /// This value must never be {@code null}.
  BitmapShader.ctor1(bitmap_.Bitmap bitmap, shader_.Shader_TileMode tileX,
      shader_.Shader_TileMode tileY)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [bitmap.reference, tileX.reference, tileY.reference]).object);
}
