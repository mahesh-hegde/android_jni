// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "DrawableWrapper.dart" as drawablewrapper_;

import "Drawable.dart" as drawable_;

import "../../content/res/Resources.dart" as resources_;

import "../../util/AttributeSet.dart" as attributeset_;

import "../Rect.dart" as rect_;

import "../Outline.dart" as outline_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.InsetDrawable
///
/// A Drawable that insets another Drawable by a specified distance or fraction of the content bounds.
/// This is used when a View needs a background that is smaller than
/// the View's actual bounds.
///
/// It can be defined in an XML file with the <code>&lt;inset></code> element. For more
/// information, see the guide to <a href="{@docRoot}guide/topics/resources/drawable-resource.html">Drawable Resources</a>.
///
///@attr ref android.R.styleable\#InsetDrawable_visible
///@attr ref android.R.styleable\#InsetDrawable_drawable
///@attr ref android.R.styleable\#InsetDrawable_insetLeft
///@attr ref android.R.styleable\#InsetDrawable_insetRight
///@attr ref android.R.styleable\#InsetDrawable_insetTop
///@attr ref android.R.styleable\#InsetDrawable_insetBottom
class InsetDrawable extends drawablewrapper_.DrawableWrapper {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/InsetDrawable");
  InsetDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/drawable/Drawable;I)V");

  /// from: public void <init>(android.graphics.drawable.Drawable drawable, int inset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new inset drawable with the specified inset.
  ///@param drawable The drawable to inset.
  /// This value may be {@code null}.
  ///@param inset Inset in pixels around the drawable.
  InsetDrawable.ctor2(drawable_.Drawable drawable, int inset)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [drawable.reference, inset]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/drawable/Drawable;F)V");

  /// from: public void <init>(android.graphics.drawable.Drawable drawable, float inset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new inset drawable with the specified inset.
  ///@param drawable The drawable to inset.
  /// This value may be {@code null}.
  ///@param inset Inset in fraction (range: [0, 1)) of the inset content bounds.
  InsetDrawable.ctor3(drawable_.Drawable drawable, double inset)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor3, [drawable.reference, inset]).object);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/drawable/Drawable;IIII)V");

  /// from: public void <init>(android.graphics.drawable.Drawable drawable, int insetLeft, int insetTop, int insetRight, int insetBottom)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new inset drawable with the specified insets in pixels.
  ///@param drawable The drawable to inset.
  /// This value may be {@code null}.
  ///@param insetLeft Left inset in pixels.
  ///@param insetTop Top inset in pixels.
  ///@param insetRight Right inset in pixels.
  ///@param insetBottom Bottom inset in pixels.
  InsetDrawable.ctor4(drawable_.Drawable drawable, int insetLeft, int insetTop,
      int insetRight, int insetBottom)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor4, [
          drawable.reference,
          insetLeft,
          insetTop,
          insetRight,
          insetBottom
        ]).object);

  static final _id_ctor5 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/drawable/Drawable;FFFF)V");

  /// from: public void <init>(android.graphics.drawable.Drawable drawable, float insetLeftFraction, float insetTopFraction, float insetRightFraction, float insetBottomFraction)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new inset drawable with the specified insets in fraction of the view bounds.
  ///@param drawable The drawable to inset.
  /// This value may be {@code null}.
  ///@param insetLeftFraction Left inset in fraction (range: [0, 1)) of the inset content bounds.
  ///@param insetTopFraction Top inset in fraction (range: [0, 1)) of the inset content bounds.
  ///@param insetRightFraction Right inset in fraction (range: [0, 1)) of the inset content bounds.
  ///@param insetBottomFraction Bottom inset in fraction (range: [0, 1)) of the inset content bounds.
  InsetDrawable.ctor5(
      drawable_.Drawable drawable,
      double insetLeftFraction,
      double insetTopFraction,
      double insetRightFraction,
      double insetBottomFraction)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor5, [
          drawable.reference,
          insetLeftFraction,
          insetTopFraction,
          insetRightFraction,
          insetBottomFraction
        ]).object);

  static final _id_inflate1 = jniAccessors.getMethodIDOf(_classRef, "inflate",
      "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources\$Theme;)V");

  /// from: public void inflate(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs, android.content.res.Resources.Theme theme)
  ///
  /// @param r This value must never be {@code null}.
  ///@param parser This value must never be {@code null}.
  ///@param attrs This value must never be {@code null}.
  ///@param theme This value may be {@code null}.
  void inflate1(resources_.Resources r, jni.JniObject parser,
          attributeset_.AttributeSet attrs, resources_.Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_inflate1, jni.JniType.voidType, [
        r.reference,
        parser.reference,
        attrs.reference,
        theme.reference
      ]).check();

  static final _id_applyTheme = jniAccessors.getMethodIDOf(
      _classRef, "applyTheme", "(Landroid/content/res/Resources\$Theme;)V");

  /// from: public void applyTheme(android.content.res.Resources.Theme t)
  ///
  /// @param t This value must never be {@code null}.
  void applyTheme(resources_.Resources_Theme t) =>
      jniAccessors.callMethodWithArgs(reference, _id_applyTheme,
          jni.JniType.voidType, [t.reference]).check();

  static final _id_getPadding = jniAccessors.getMethodIDOf(
      _classRef, "getPadding", "(Landroid/graphics/Rect;)Z");

  /// from: public boolean getPadding(android.graphics.Rect padding)
  bool getPadding(rect_.Rect padding) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getPadding,
      jni.JniType.booleanType,
      [padding.reference]).boolean;

  static final _id_getOpacity =
      jniAccessors.getMethodIDOf(_classRef, "getOpacity", "()I");

  /// from: public int getOpacity()
  int getOpacity() => jniAccessors.callMethodWithArgs(
      reference, _id_getOpacity, jni.JniType.intType, []).integer;

  static final _id_onBoundsChange = jniAccessors.getMethodIDOf(
      _classRef, "onBoundsChange", "(Landroid/graphics/Rect;)V");

  /// from: protected void onBoundsChange(android.graphics.Rect bounds)
  void onBoundsChange(rect_.Rect bounds) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onBoundsChange,
      jni.JniType.voidType,
      [bounds.reference]).check();

  static final _id_getIntrinsicWidth =
      jniAccessors.getMethodIDOf(_classRef, "getIntrinsicWidth", "()I");

  /// from: public int getIntrinsicWidth()
  int getIntrinsicWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getIntrinsicWidth, jni.JniType.intType, []).integer;

  static final _id_getIntrinsicHeight =
      jniAccessors.getMethodIDOf(_classRef, "getIntrinsicHeight", "()I");

  /// from: public int getIntrinsicHeight()
  int getIntrinsicHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getIntrinsicHeight, jni.JniType.intType, []).integer;

  static final _id_getOutline = jniAccessors.getMethodIDOf(
      _classRef, "getOutline", "(Landroid/graphics/Outline;)V");

  /// from: public void getOutline(android.graphics.Outline outline)
  ///
  /// @param outline This value must never be {@code null}.
  void getOutline(outline_.Outline outline) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getOutline,
      jni.JniType.voidType,
      [outline.reference]).check();
}
