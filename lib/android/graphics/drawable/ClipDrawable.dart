// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "DrawableWrapper.dart" as drawablewrapper_;

import "Drawable.dart" as drawable_;

import "../../content/res/Resources.dart" as resources_;

import "../../util/AttributeSet.dart" as attributeset_;

import "../Canvas.dart" as canvas_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.ClipDrawable
///
/// A Drawable that clips another Drawable based on this Drawable's current
/// level value.  You can control how much the child Drawable gets clipped in width
/// and height based on the level, as well as a gravity to control where it is
/// placed in its overall container.  Most often used to implement things like
/// progress bars, by increasing the drawable's level with android.graphics.drawable.Drawable\#setLevel(int) setLevel().
/// <p class="note"><strong>Note:</strong> The drawable is clipped completely and not visible when
/// the level is 0 and fully revealed when the level is 10,000.
///
///
/// It can be defined in an XML file with the <code>&lt;clip></code> element.  For more
/// information, see the guide to <a href="{@docRoot}guide/topics/resources/drawable-resource.html">Drawable Resources</a>.
///
///@attr ref android.R.styleable\#ClipDrawable_clipOrientation
///@attr ref android.R.styleable\#ClipDrawable_gravity
///@attr ref android.R.styleable\#ClipDrawable_drawable
class ClipDrawable extends drawablewrapper_.DrawableWrapper {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/ClipDrawable");
  ClipDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int HORIZONTAL
  static const HORIZONTAL = 1;

  /// from: static public final int VERTICAL
  static const VERTICAL = 2;

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/drawable/Drawable;II)V");

  /// from: public void <init>(android.graphics.drawable.Drawable drawable, int gravity, int orientation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new clip drawable with the specified gravity and orientation.
  ///@param drawable the drawable to clip
  ///@param gravity gravity constant (see Gravity used to position
  ///                the clipped drawable within the parent container
  ///@param orientation bitwise-or of \#HORIZONTAL and/or
  ///                   \#VERTICAL
  ClipDrawable.ctor2(drawable_.Drawable drawable, int gravity, int orientation)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [drawable.reference, gravity, orientation]).object);

  static final _id_inflate1 = jniAccessors.getMethodIDOf(_classRef, "inflate",
      "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources\$Theme;)V");

  /// from: public void inflate(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs, android.content.res.Resources.Theme theme)
  ///
  /// @param r This value must never be {@code null}.
  ///@param parser This value must never be {@code null}.
  ///@param attrs This value must never be {@code null}.
  ///@param theme This value may be {@code null}.
  void inflate1(resources_.Resources r, jni.JniObject parser,
          attributeset_.AttributeSet attrs, resources_.Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_inflate1, jni.JniType.voidType, [
        r.reference,
        parser.reference,
        attrs.reference,
        theme.reference
      ]).check();

  static final _id_applyTheme = jniAccessors.getMethodIDOf(
      _classRef, "applyTheme", "(Landroid/content/res/Resources\$Theme;)V");

  /// from: public void applyTheme(android.content.res.Resources.Theme t)
  ///
  /// @param t This value must never be {@code null}.
  void applyTheme(resources_.Resources_Theme t) =>
      jniAccessors.callMethodWithArgs(reference, _id_applyTheme,
          jni.JniType.voidType, [t.reference]).check();

  static final _id_onLevelChange =
      jniAccessors.getMethodIDOf(_classRef, "onLevelChange", "(I)Z");

  /// from: protected boolean onLevelChange(int level)
  bool onLevelChange(int level) => jniAccessors.callMethodWithArgs(
      reference, _id_onLevelChange, jni.JniType.booleanType, [level]).boolean;

  static final _id_getOpacity =
      jniAccessors.getMethodIDOf(_classRef, "getOpacity", "()I");

  /// from: public int getOpacity()
  int getOpacity() => jniAccessors.callMethodWithArgs(
      reference, _id_getOpacity, jni.JniType.intType, []).integer;

  static final _id_draw = jniAccessors.getMethodIDOf(
      _classRef, "draw", "(Landroid/graphics/Canvas;)V");

  /// from: public void draw(android.graphics.Canvas canvas)
  void draw(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_draw, jni.JniType.voidType, [canvas.reference]).check();
}
