// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "DrawableContainer.dart" as drawablecontainer_;

import "Drawable.dart" as drawable_;

import "../../content/res/Resources.dart" as resources_;

import "../../util/AttributeSet.dart" as attributeset_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.LevelListDrawable
///
/// A resource that manages a number of alternate Drawables, each assigned a maximum numerical value.
/// Setting the level value of the object with \#setLevel(int) will load the image with the next
/// greater or equal value assigned to its max attribute.
/// A good example use of
/// a LevelListDrawable would be a battery level indicator icon, with different images to indicate the current
/// battery level.
///
/// It can be defined in an XML file with the <code>&lt;level-list></code> element.
/// Each Drawable level is defined in a nested <code>&lt;item></code>. For example:
///
///
/// <pre>
/// &lt;level-list xmlns:android="http://schemas.android.com/apk/res/android">
///  &lt;item android:maxLevel="0" android:drawable="@drawable/ic_wifi_signal_1" />
///  &lt;item android:maxLevel="1" android:drawable="@drawable/ic_wifi_signal_2" />
///  &lt;item android:maxLevel="2" android:drawable="@drawable/ic_wifi_signal_3" />
///  &lt;item android:maxLevel="3" android:drawable="@drawable/ic_wifi_signal_4" />
/// &lt;/level-list>
///</pre>
/// With this XML saved into the res/drawable/ folder of the project, it can be referenced as
/// the drawable for an android.widget.ImageView. The default image is the first in the list.
/// It can then be changed to one of the other levels with
/// android.widget.ImageView\#setImageLevel(int). For more
/// information, see the guide to <a href="{@docRoot}guide/topics/resources/drawable-resource.html">Drawable Resources</a>.
///
///@attr ref android.R.styleable\#LevelListDrawableItem_minLevel
///@attr ref android.R.styleable\#LevelListDrawableItem_maxLevel
///@attr ref android.R.styleable\#LevelListDrawableItem_drawable
class LevelListDrawable extends drawablecontainer_.DrawableContainer {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/LevelListDrawable");
  LevelListDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  LevelListDrawable()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_addLevel = jniAccessors.getMethodIDOf(
      _classRef, "addLevel", "(IILandroid/graphics/drawable/Drawable;)V");

  /// from: public void addLevel(int low, int high, android.graphics.drawable.Drawable drawable)
  void addLevel(int low, int high, drawable_.Drawable drawable) =>
      jniAccessors.callMethodWithArgs(reference, _id_addLevel,
          jni.JniType.voidType, [low, high, drawable.reference]).check();

  static final _id_onLevelChange =
      jniAccessors.getMethodIDOf(_classRef, "onLevelChange", "(I)Z");

  /// from: protected boolean onLevelChange(int level)
  bool onLevelChange(int level) => jniAccessors.callMethodWithArgs(
      reference, _id_onLevelChange, jni.JniType.booleanType, [level]).boolean;

  static final _id_inflate2 = jniAccessors.getMethodIDOf(_classRef, "inflate",
      "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources\$Theme;)V");

  /// from: public void inflate(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs, android.content.res.Resources.Theme theme)
  void inflate2(resources_.Resources r, jni.JniObject parser,
          attributeset_.AttributeSet attrs, resources_.Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_inflate2, jni.JniType.voidType, [
        r.reference,
        parser.reference,
        attrs.reference,
        theme.reference
      ]).check();

  static final _id_mutate = jniAccessors.getMethodIDOf(
      _classRef, "mutate", "()Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable mutate()
  /// The returned object must be deleted after use, by calling the `delete` method.
  drawable_.Drawable mutate() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_mutate, jni.JniType.objectType, []).object);

  static final _id_setConstantState = jniAccessors.getMethodIDOf(
      _classRef,
      "setConstantState",
      "(Landroid/graphics/drawable/DrawableContainer\$DrawableContainerState;)V");

  /// from: protected void setConstantState(android.graphics.drawable.DrawableContainer.DrawableContainerState state)
  ///
  /// @param state This value must never be {@code null}.
  void setConstantState(
          drawablecontainer_.DrawableContainer_DrawableContainerState state) =>
      jniAccessors.callMethodWithArgs(reference, _id_setConstantState,
          jni.JniType.voidType, [state.reference]).check();
}
