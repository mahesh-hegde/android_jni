// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Drawable.dart" as drawable_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.Animatable2
///
/// Abstract class that drawables supporting animations and callbacks should extend.
class Animatable2 extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/Animatable2");
  Animatable2.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_registerAnimationCallback = jniAccessors.getMethodIDOf(
      _classRef,
      "registerAnimationCallback",
      "(Landroid/graphics/drawable/Animatable2\$AnimationCallback;)V");

  /// from: public abstract void registerAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback callback)
  ///
  /// Adds a callback to listen to the animation events.
  ///@param callback Callback to add.
  ///
  /// This value must never be {@code null}.
  void registerAnimationCallback(Animatable2_AnimationCallback callback) =>
      jniAccessors.callMethodWithArgs(reference, _id_registerAnimationCallback,
          jni.JniType.voidType, [callback.reference]).check();

  static final _id_unregisterAnimationCallback = jniAccessors.getMethodIDOf(
      _classRef,
      "unregisterAnimationCallback",
      "(Landroid/graphics/drawable/Animatable2\$AnimationCallback;)Z");

  /// from: public abstract boolean unregisterAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback callback)
  ///
  /// Removes the specified animation callback.
  ///@param callback Callback to remove.
  /// This value must never be {@code null}.
  ///@return {@code false} if callback didn't exist in the call back list, or {@code true} if
  ///         callback has been removed successfully.
  bool unregisterAnimationCallback(Animatable2_AnimationCallback callback) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_unregisterAnimationCallback,
          jni.JniType.booleanType,
          [callback.reference]).boolean;

  static final _id_clearAnimationCallbacks =
      jniAccessors.getMethodIDOf(_classRef, "clearAnimationCallbacks", "()V");

  /// from: public abstract void clearAnimationCallbacks()
  ///
  /// Removes all existing animation callbacks.
  void clearAnimationCallbacks() => jniAccessors.callMethodWithArgs(
      reference, _id_clearAnimationCallbacks, jni.JniType.voidType, []).check();
}

/// from: android.graphics.drawable.Animatable2$AnimationCallback
class Animatable2_AnimationCallback extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/graphics/drawable/Animatable2\$AnimationCallback");
  Animatable2_AnimationCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Animatable2_AnimationCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onAnimationStart = jniAccessors.getMethodIDOf(
      _classRef, "onAnimationStart", "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void onAnimationStart(android.graphics.drawable.Drawable drawable)
  ///
  /// Called when the animation starts.
  ///@param drawable The drawable started the animation.
  void onAnimationStart(drawable_.Drawable drawable) =>
      jniAccessors.callMethodWithArgs(reference, _id_onAnimationStart,
          jni.JniType.voidType, [drawable.reference]).check();

  static final _id_onAnimationEnd = jniAccessors.getMethodIDOf(
      _classRef, "onAnimationEnd", "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void onAnimationEnd(android.graphics.drawable.Drawable drawable)
  ///
  /// Called when the animation ends.
  ///@param drawable The drawable finished the animation.
  void onAnimationEnd(drawable_.Drawable drawable) =>
      jniAccessors.callMethodWithArgs(reference, _id_onAnimationEnd,
          jni.JniType.voidType, [drawable.reference]).check();
}
