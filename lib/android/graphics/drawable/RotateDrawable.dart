// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "DrawableWrapper.dart" as drawablewrapper_;

import "../../content/res/Resources.dart" as resources_;

import "../../util/AttributeSet.dart" as attributeset_;

import "../Canvas.dart" as canvas_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.RotateDrawable
///
///
/// A Drawable that can rotate another Drawable based on the current level value.
/// The start and end angles of rotation can be controlled to map any circular
/// arc to the level values range.
///
/// It can be defined in an XML file with the <code>&lt;rotate&gt;</code> element.
/// For more information, see the guide to
/// <a href="{@docRoot}guide/topics/resources/animation-resource.html">Animation Resources</a>.
///@attr ref android.R.styleable\#RotateDrawable_visible
///@attr ref android.R.styleable\#RotateDrawable_fromDegrees
///@attr ref android.R.styleable\#RotateDrawable_toDegrees
///@attr ref android.R.styleable\#RotateDrawable_pivotX
///@attr ref android.R.styleable\#RotateDrawable_pivotY
///@attr ref android.R.styleable\#RotateDrawable_drawable
class RotateDrawable extends drawablewrapper_.DrawableWrapper {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/RotateDrawable");
  RotateDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new rotating drawable with no wrapped drawable.
  RotateDrawable.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_inflate1 = jniAccessors.getMethodIDOf(_classRef, "inflate",
      "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources\$Theme;)V");

  /// from: public void inflate(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs, android.content.res.Resources.Theme theme)
  ///
  /// @param r This value must never be {@code null}.
  ///@param parser This value must never be {@code null}.
  ///@param attrs This value must never be {@code null}.
  ///@param theme This value may be {@code null}.
  void inflate1(resources_.Resources r, jni.JniObject parser,
          attributeset_.AttributeSet attrs, resources_.Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_inflate1, jni.JniType.voidType, [
        r.reference,
        parser.reference,
        attrs.reference,
        theme.reference
      ]).check();

  static final _id_applyTheme = jniAccessors.getMethodIDOf(
      _classRef, "applyTheme", "(Landroid/content/res/Resources\$Theme;)V");

  /// from: public void applyTheme(android.content.res.Resources.Theme t)
  ///
  /// @param t This value must never be {@code null}.
  void applyTheme(resources_.Resources_Theme t) =>
      jniAccessors.callMethodWithArgs(reference, _id_applyTheme,
          jni.JniType.voidType, [t.reference]).check();

  static final _id_draw = jniAccessors.getMethodIDOf(
      _classRef, "draw", "(Landroid/graphics/Canvas;)V");

  /// from: public void draw(android.graphics.Canvas canvas)
  void draw(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_draw, jni.JniType.voidType, [canvas.reference]).check();

  static final _id_setFromDegrees =
      jniAccessors.getMethodIDOf(_classRef, "setFromDegrees", "(F)V");

  /// from: public void setFromDegrees(float fromDegrees)
  ///
  /// Sets the start angle for rotation.
  ///@param fromDegrees starting angle in degrees
  ///@see \#getFromDegrees()
  ///@attr ref android.R.styleable\#RotateDrawable_fromDegrees
  void setFromDegrees(double fromDegrees) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setFromDegrees,
      jni.JniType.voidType,
      [fromDegrees]).check();

  static final _id_getFromDegrees =
      jniAccessors.getMethodIDOf(_classRef, "getFromDegrees", "()F");

  /// from: public float getFromDegrees()
  ///
  /// @return starting angle for rotation in degrees
  ///@see \#setFromDegrees(float)
  ///@attr ref android.R.styleable\#RotateDrawable_fromDegrees
  double getFromDegrees() => jniAccessors.callMethodWithArgs(
      reference, _id_getFromDegrees, jni.JniType.floatType, []).float;

  static final _id_setToDegrees =
      jniAccessors.getMethodIDOf(_classRef, "setToDegrees", "(F)V");

  /// from: public void setToDegrees(float toDegrees)
  ///
  /// Sets the end angle for rotation.
  ///@param toDegrees ending angle in degrees
  ///@see \#getToDegrees()
  ///@attr ref android.R.styleable\#RotateDrawable_toDegrees
  void setToDegrees(double toDegrees) => jniAccessors.callMethodWithArgs(
      reference, _id_setToDegrees, jni.JniType.voidType, [toDegrees]).check();

  static final _id_getToDegrees =
      jniAccessors.getMethodIDOf(_classRef, "getToDegrees", "()F");

  /// from: public float getToDegrees()
  ///
  /// @return ending angle for rotation in degrees
  ///@see \#setToDegrees(float)
  ///@attr ref android.R.styleable\#RotateDrawable_toDegrees
  double getToDegrees() => jniAccessors.callMethodWithArgs(
      reference, _id_getToDegrees, jni.JniType.floatType, []).float;

  static final _id_setPivotX =
      jniAccessors.getMethodIDOf(_classRef, "setPivotX", "(F)V");

  /// from: public void setPivotX(float pivotX)
  ///
  /// Sets the X position around which the drawable is rotated.
  ///
  /// If the X pivot is relative (as specified by
  /// \#setPivotXRelative(boolean)), then the position represents a
  /// fraction of the drawable width. Otherwise, the position represents an
  /// absolute value in pixels.
  ///@param pivotX X position around which to rotate
  ///@see \#setPivotXRelative(boolean)
  ///@attr ref android.R.styleable\#RotateDrawable_pivotX
  void setPivotX(double pivotX) => jniAccessors.callMethodWithArgs(
      reference, _id_setPivotX, jni.JniType.voidType, [pivotX]).check();

  static final _id_getPivotX =
      jniAccessors.getMethodIDOf(_classRef, "getPivotX", "()F");

  /// from: public float getPivotX()
  ///
  /// @return X position around which to rotate
  ///@see \#setPivotX(float)
  ///@attr ref android.R.styleable\#RotateDrawable_pivotX
  double getPivotX() => jniAccessors.callMethodWithArgs(
      reference, _id_getPivotX, jni.JniType.floatType, []).float;

  static final _id_setPivotXRelative =
      jniAccessors.getMethodIDOf(_classRef, "setPivotXRelative", "(Z)V");

  /// from: public void setPivotXRelative(boolean relative)
  ///
  /// Sets whether the X pivot value represents a fraction of the drawable
  /// width or an absolute value in pixels.
  ///@param relative true if the X pivot represents a fraction of the drawable
  ///            width, or false if it represents an absolute value in pixels
  ///@see \#isPivotXRelative()
  void setPivotXRelative(bool relative) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setPivotXRelative,
      jni.JniType.voidType,
      [relative]).check();

  static final _id_isPivotXRelative =
      jniAccessors.getMethodIDOf(_classRef, "isPivotXRelative", "()Z");

  /// from: public boolean isPivotXRelative()
  ///
  /// @return true if the X pivot represents a fraction of the drawable width,
  ///         or false if it represents an absolute value in pixels
  ///@see \#setPivotXRelative(boolean)
  bool isPivotXRelative() => jniAccessors.callMethodWithArgs(
      reference, _id_isPivotXRelative, jni.JniType.booleanType, []).boolean;

  static final _id_setPivotY =
      jniAccessors.getMethodIDOf(_classRef, "setPivotY", "(F)V");

  /// from: public void setPivotY(float pivotY)
  ///
  /// Sets the Y position around which the drawable is rotated.
  ///
  /// If the Y pivot is relative (as specified by
  /// \#setPivotYRelative(boolean)), then the position represents a
  /// fraction of the drawable height. Otherwise, the position represents an
  /// absolute value in pixels.
  ///@param pivotY Y position around which to rotate
  ///@see \#getPivotY()
  ///@attr ref android.R.styleable\#RotateDrawable_pivotY
  void setPivotY(double pivotY) => jniAccessors.callMethodWithArgs(
      reference, _id_setPivotY, jni.JniType.voidType, [pivotY]).check();

  static final _id_getPivotY =
      jniAccessors.getMethodIDOf(_classRef, "getPivotY", "()F");

  /// from: public float getPivotY()
  ///
  /// @return Y position around which to rotate
  ///@see \#setPivotY(float)
  ///@attr ref android.R.styleable\#RotateDrawable_pivotY
  double getPivotY() => jniAccessors.callMethodWithArgs(
      reference, _id_getPivotY, jni.JniType.floatType, []).float;

  static final _id_setPivotYRelative =
      jniAccessors.getMethodIDOf(_classRef, "setPivotYRelative", "(Z)V");

  /// from: public void setPivotYRelative(boolean relative)
  ///
  /// Sets whether the Y pivot value represents a fraction of the drawable
  /// height or an absolute value in pixels.
  ///@param relative True if the Y pivot represents a fraction of the drawable
  ///            height, or false if it represents an absolute value in pixels
  ///@see \#isPivotYRelative()
  void setPivotYRelative(bool relative) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setPivotYRelative,
      jni.JniType.voidType,
      [relative]).check();

  static final _id_isPivotYRelative =
      jniAccessors.getMethodIDOf(_classRef, "isPivotYRelative", "()Z");

  /// from: public boolean isPivotYRelative()
  ///
  /// @return true if the Y pivot represents a fraction of the drawable height,
  ///         or false if it represents an absolute value in pixels
  ///@see \#setPivotYRelative(boolean)
  bool isPivotYRelative() => jniAccessors.callMethodWithArgs(
      reference, _id_isPivotYRelative, jni.JniType.booleanType, []).boolean;

  static final _id_onLevelChange =
      jniAccessors.getMethodIDOf(_classRef, "onLevelChange", "(I)Z");

  /// from: protected boolean onLevelChange(int level)
  bool onLevelChange(int level) => jniAccessors.callMethodWithArgs(
      reference, _id_onLevelChange, jni.JniType.booleanType, [level]).boolean;
}
