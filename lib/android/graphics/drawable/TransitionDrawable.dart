// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "LayerDrawable.dart" as layerdrawable_;

import "../Canvas.dart" as canvas_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.TransitionDrawable
///
/// An extension of LayerDrawables that is intended to cross-fade between
/// the first and second layer. To start the transition, call \#startTransition(int). To
/// display just the first layer, call \#resetTransition().
///
/// It can be defined in an XML file with the <code>&lt;transition></code> element.
/// Each Drawable in the transition is defined in a nested <code>&lt;item></code>. For more
/// information, see the guide to <a href="{@docRoot}guide/topics/resources/drawable-resource.html">Drawable Resources</a>.
///
///@attr ref android.R.styleable\#LayerDrawableItem_left
///@attr ref android.R.styleable\#LayerDrawableItem_top
///@attr ref android.R.styleable\#LayerDrawableItem_right
///@attr ref android.R.styleable\#LayerDrawableItem_bottom
///@attr ref android.R.styleable\#LayerDrawableItem_drawable
///@attr ref android.R.styleable\#LayerDrawableItem_id
class TransitionDrawable extends layerdrawable_.LayerDrawable {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/TransitionDrawable");
  TransitionDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "([Landroid/graphics/drawable/Drawable;)V");

  /// from: public void <init>(android.graphics.drawable.Drawable[] layers)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new transition drawable with the specified list of layers. At least
  /// 2 layers are required for this drawable to work properly.
  TransitionDrawable.ctor1(jni.JniObject layers)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [layers.reference]).object);

  static final _id_startTransition =
      jniAccessors.getMethodIDOf(_classRef, "startTransition", "(I)V");

  /// from: public void startTransition(int durationMillis)
  ///
  /// Begin the second layer on top of the first layer.
  ///@param durationMillis The length of the transition in milliseconds
  void startTransition(int durationMillis) => jniAccessors.callMethodWithArgs(
      reference,
      _id_startTransition,
      jni.JniType.voidType,
      [durationMillis]).check();

  static final _id_resetTransition =
      jniAccessors.getMethodIDOf(_classRef, "resetTransition", "()V");

  /// from: public void resetTransition()
  ///
  /// Show only the first layer.
  void resetTransition() => jniAccessors.callMethodWithArgs(
      reference, _id_resetTransition, jni.JniType.voidType, []).check();

  static final _id_reverseTransition =
      jniAccessors.getMethodIDOf(_classRef, "reverseTransition", "(I)V");

  /// from: public void reverseTransition(int duration)
  ///
  /// Reverses the transition, picking up where the transition currently is.
  /// If the transition is not currently running, this will start the transition
  /// with the specified duration. If the transition is already running, the last
  /// known duration will be used.
  ///@param duration The duration to use if no transition is running.
  void reverseTransition(int duration) => jniAccessors.callMethodWithArgs(
      reference,
      _id_reverseTransition,
      jni.JniType.voidType,
      [duration]).check();

  static final _id_draw = jniAccessors.getMethodIDOf(
      _classRef, "draw", "(Landroid/graphics/Canvas;)V");

  /// from: public void draw(android.graphics.Canvas canvas)
  void draw(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_draw, jni.JniType.voidType, [canvas.reference]).check();

  static final _id_setCrossFadeEnabled =
      jniAccessors.getMethodIDOf(_classRef, "setCrossFadeEnabled", "(Z)V");

  /// from: public void setCrossFadeEnabled(boolean enabled)
  ///
  /// Enables or disables the cross fade of the drawables. When cross fade
  /// is disabled, the first drawable is always drawn opaque. With cross
  /// fade enabled, the first drawable is drawn with the opposite alpha of
  /// the second drawable. Cross fade is disabled by default.
  ///@param enabled True to enable cross fading, false otherwise.
  void setCrossFadeEnabled(bool enabled) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCrossFadeEnabled,
      jni.JniType.voidType,
      [enabled]).check();

  static final _id_isCrossFadeEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isCrossFadeEnabled", "()Z");

  /// from: public boolean isCrossFadeEnabled()
  ///
  /// Indicates whether the cross fade is enabled for this transition.
  ///@return True if cross fading is enabled, false otherwise.
  bool isCrossFadeEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_isCrossFadeEnabled, jni.JniType.booleanType, []).boolean;
}
