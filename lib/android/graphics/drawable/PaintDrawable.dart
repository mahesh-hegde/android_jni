// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ShapeDrawable.dart" as shapedrawable_;

import "../../content/res/Resources.dart" as resources_;

import "../../util/AttributeSet.dart" as attributeset_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.PaintDrawable
///
/// Drawable that draws its bounds in the given paint, with optional
/// rounded corners.
class PaintDrawable extends shapedrawable_.ShapeDrawable {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/PaintDrawable");
  PaintDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PaintDrawable()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int color)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PaintDrawable.ctor2(int color)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [color]).object);

  static final _id_setCornerRadius =
      jniAccessors.getMethodIDOf(_classRef, "setCornerRadius", "(F)V");

  /// from: public void setCornerRadius(float radius)
  ///
  /// Specify radius for the corners of the rectangle. If this is > 0, then the
  /// drawable is drawn in a round-rectangle, rather than a rectangle.
  ///@param radius the radius for the corners of the rectangle
  void setCornerRadius(double radius) => jniAccessors.callMethodWithArgs(
      reference, _id_setCornerRadius, jni.JniType.voidType, [radius]).check();

  static final _id_setCornerRadii =
      jniAccessors.getMethodIDOf(_classRef, "setCornerRadii", "([F)V");

  /// from: public void setCornerRadii(float[] radii)
  ///
  /// Specify radii for each of the 4 corners. For each corner, the array
  /// contains 2 values, [X_radius, Y_radius]. The corners are ordered
  /// top-left, top-right, bottom-right, bottom-left
  ///@param radii the x and y radii of the corners
  void setCornerRadii(jni.JniObject radii) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCornerRadii,
      jni.JniType.voidType,
      [radii.reference]).check();

  static final _id_inflateTag = jniAccessors.getMethodIDOf(
      _classRef,
      "inflateTag",
      "(Ljava/lang/String;Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)Z");

  /// from: protected boolean inflateTag(java.lang.String name, android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs)
  bool inflateTag(jni.JniString name, resources_.Resources r,
          jni.JniObject parser, attributeset_.AttributeSet attrs) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_inflateTag, jni.JniType.booleanType, [
        name.reference,
        r.reference,
        parser.reference,
        attrs.reference
      ]).boolean;
}
