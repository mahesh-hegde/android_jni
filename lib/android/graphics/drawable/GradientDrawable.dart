// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Drawable.dart" as drawable_;

import "../Rect.dart" as rect_;

import "../../content/res/ColorStateList.dart" as colorstatelist_;

import "../Canvas.dart" as canvas_;

import "../ColorFilter.dart" as colorfilter_;

import "../PorterDuff.dart" as porterduff_;

import "../../content/res/Resources.dart" as resources_;

import "../../util/AttributeSet.dart" as attributeset_;

import "../Outline.dart" as outline_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.GradientDrawable
///
/// A Drawable with a color gradient for buttons, backgrounds, etc.
///
/// It can be defined in an XML file with the <code>&lt;shape></code> element. For more
/// information, see the guide to <a href="{@docRoot}guide/topics/resources/drawable-resource.html">Drawable Resources</a>.
///
///@attr ref android.R.styleable\#GradientDrawable_visible
///@attr ref android.R.styleable\#GradientDrawable_shape
///@attr ref android.R.styleable\#GradientDrawable_innerRadiusRatio
///@attr ref android.R.styleable\#GradientDrawable_innerRadius
///@attr ref android.R.styleable\#GradientDrawable_thicknessRatio
///@attr ref android.R.styleable\#GradientDrawable_thickness
///@attr ref android.R.styleable\#GradientDrawable_useLevel
///@attr ref android.R.styleable\#GradientDrawableSize_width
///@attr ref android.R.styleable\#GradientDrawableSize_height
///@attr ref android.R.styleable\#GradientDrawableGradient_startColor
///@attr ref android.R.styleable\#GradientDrawableGradient_centerColor
///@attr ref android.R.styleable\#GradientDrawableGradient_endColor
///@attr ref android.R.styleable\#GradientDrawableGradient_useLevel
///@attr ref android.R.styleable\#GradientDrawableGradient_angle
///@attr ref android.R.styleable\#GradientDrawableGradient_type
///@attr ref android.R.styleable\#GradientDrawableGradient_centerX
///@attr ref android.R.styleable\#GradientDrawableGradient_centerY
///@attr ref android.R.styleable\#GradientDrawableGradient_gradientRadius
///@attr ref android.R.styleable\#GradientDrawableSolid_color
///@attr ref android.R.styleable\#GradientDrawableStroke_width
///@attr ref android.R.styleable\#GradientDrawableStroke_color
///@attr ref android.R.styleable\#GradientDrawableStroke_dashWidth
///@attr ref android.R.styleable\#GradientDrawableStroke_dashGap
///@attr ref android.R.styleable\#GradientDrawablePadding_left
///@attr ref android.R.styleable\#GradientDrawablePadding_top
///@attr ref android.R.styleable\#GradientDrawablePadding_right
///@attr ref android.R.styleable\#GradientDrawablePadding_bottom
class GradientDrawable extends drawable_.Drawable {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/GradientDrawable");
  GradientDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int LINE
  ///
  /// Shape is a line
  static const LINE = 2;

  /// from: static public final int LINEAR_GRADIENT
  ///
  /// Gradient is linear (default.)
  static const LINEAR_GRADIENT = 0;

  /// from: static public final int OVAL
  ///
  /// Shape is an ellipse
  static const OVAL = 1;

  /// from: static public final int RADIAL_GRADIENT
  ///
  /// Gradient is circular.
  static const RADIAL_GRADIENT = 1;

  /// from: static public final int RECTANGLE
  ///
  /// Shape is a rectangle, possibly with rounded corners
  static const RECTANGLE = 0;

  /// from: static public final int RING
  ///
  /// Shape is a ring.
  static const RING = 3;

  /// from: static public final int SWEEP_GRADIENT
  ///
  /// Gradient is a sweep.
  static const SWEEP_GRADIENT = 2;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GradientDrawable()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/graphics/drawable/GradientDrawable\$Orientation;[I)V");

  /// from: public void <init>(android.graphics.drawable.GradientDrawable.Orientation orientation, int[] colors)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new gradient drawable given an orientation and an array
  /// of colors for the gradient.
  GradientDrawable.ctor1(
      GradientDrawable_Orientation orientation, jni.JniObject colors)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [orientation.reference, colors.reference]).object);

  static final _id_getPadding = jniAccessors.getMethodIDOf(
      _classRef, "getPadding", "(Landroid/graphics/Rect;)Z");

  /// from: public boolean getPadding(android.graphics.Rect padding)
  bool getPadding(rect_.Rect padding) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getPadding,
      jni.JniType.booleanType,
      [padding.reference]).boolean;

  static final _id_setCornerRadii =
      jniAccessors.getMethodIDOf(_classRef, "setCornerRadii", "([F)V");

  /// from: public void setCornerRadii(float[] radii)
  ///
  /// Specifies radii for each of the 4 corners. For each corner, the array
  /// contains 2 values, <code>[X_radius, Y_radius]</code>. The corners are
  /// ordered top-left, top-right, bottom-right, bottom-left. This property
  /// is honored only when the shape is of type \#RECTANGLE.
  ///
  /// <strong>Note</strong>: changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///@param radii an array of length >= 8 containing 4 pairs of X and Y
  ///              radius for each corner, specified in pixels
  ///
  /// This value may be {@code null}.
  ///@see \#mutate()
  ///@see \#setShape(int)
  ///@see \#setCornerRadius(float)
  void setCornerRadii(jni.JniObject radii) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCornerRadii,
      jni.JniType.voidType,
      [radii.reference]).check();

  static final _id_getCornerRadii =
      jniAccessors.getMethodIDOf(_classRef, "getCornerRadii", "()[F");

  /// from: public float[] getCornerRadii()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the radii for each of the 4 corners. For each corner, the array
  /// contains 2 values, <code>[X_radius, Y_radius]</code>. The corners are
  /// ordered top-left, top-right, bottom-right, bottom-left.
  ///
  /// If the radius was previously set with \#setCornerRadius(float),
  /// or if the corners are not rounded, this method will return {@code null}.
  ///@return an array containing the radii for each of the 4 corners, or
  ///         {@code null}
  ///@see \#setCornerRadii(float[])
  jni.JniObject getCornerRadii() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCornerRadii, jni.JniType.objectType, []).object);

  static final _id_setCornerRadius =
      jniAccessors.getMethodIDOf(_classRef, "setCornerRadius", "(F)V");

  /// from: public void setCornerRadius(float radius)
  ///
  /// Specifies the radius for the corners of the gradient. If this is > 0,
  /// then the drawable is drawn in a round-rectangle, rather than a
  /// rectangle. This property is honored only when the shape is of type
  /// \#RECTANGLE.
  ///
  /// <strong>Note</strong>: changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///@param radius The radius in pixels of the corners of the rectangle shape
  ///@see \#mutate()
  ///@see \#setCornerRadii(float[])
  ///@see \#setShape(int)
  void setCornerRadius(double radius) => jniAccessors.callMethodWithArgs(
      reference, _id_setCornerRadius, jni.JniType.voidType, [radius]).check();

  static final _id_getCornerRadius =
      jniAccessors.getMethodIDOf(_classRef, "getCornerRadius", "()F");

  /// from: public float getCornerRadius()
  ///
  /// Returns the radius for the corners of the gradient, that was previously set with
  /// \#setCornerRadius(float).
  ///
  /// If the radius was previously cleared via passing {@code null}
  /// to \#setCornerRadii(float[]), this method will return 0.
  ///@return the radius in pixels of the corners of the rectangle shape, or 0
  ///@see \#setCornerRadius
  double getCornerRadius() => jniAccessors.callMethodWithArgs(
      reference, _id_getCornerRadius, jni.JniType.floatType, []).float;

  static final _id_setStroke =
      jniAccessors.getMethodIDOf(_classRef, "setStroke", "(II)V");

  /// from: public void setStroke(int width, int color)
  ///
  /// Set the stroke width and color for the drawable. If width is zero,
  /// then no stroke is drawn.
  ///
  /// <strong>Note</strong>: changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///
  ///@param width The width in pixels of the stroke
  ///@param color The color of the stroke
  ///@see \#mutate()
  ///@see \#setStroke(int, int, float, float)
  void setStroke(int width, int color) => jniAccessors.callMethodWithArgs(
      reference, _id_setStroke, jni.JniType.voidType, [width, color]).check();

  static final _id_setStroke1 = jniAccessors.getMethodIDOf(
      _classRef, "setStroke", "(ILandroid/content/res/ColorStateList;)V");

  /// from: public void setStroke(int width, android.content.res.ColorStateList colorStateList)
  ///
  /// Set the stroke width and color state list for the drawable. If width
  /// is zero, then no stroke is drawn.
  ///
  /// <strong>Note</strong>: changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///
  ///@param width The width in pixels of the stroke
  ///@param colorStateList The color state list of the stroke
  ///@see \#mutate()
  ///@see \#setStroke(int, ColorStateList, float, float)
  void setStroke1(int width, colorstatelist_.ColorStateList colorStateList) =>
      jniAccessors.callMethodWithArgs(reference, _id_setStroke1,
          jni.JniType.voidType, [width, colorStateList.reference]).check();

  static final _id_setStroke2 =
      jniAccessors.getMethodIDOf(_classRef, "setStroke", "(IIFF)V");

  /// from: public void setStroke(int width, int color, float dashWidth, float dashGap)
  ///
  /// Set the stroke width and color for the drawable. If width is zero,
  /// then no stroke is drawn. This method can also be used to dash the stroke.
  ///
  /// <strong>Note</strong>: changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///
  ///@param width The width in pixels of the stroke
  ///@param color The color of the stroke
  ///@param dashWidth The length in pixels of the dashes, set to 0 to disable dashes
  ///@param dashGap The gap in pixels between dashes
  ///@see \#mutate()
  ///@see \#setStroke(int, int)
  void setStroke2(int width, int color, double dashWidth, double dashGap) =>
      jniAccessors.callMethodWithArgs(reference, _id_setStroke2,
          jni.JniType.voidType, [width, color, dashWidth, dashGap]).check();

  static final _id_setStroke3 = jniAccessors.getMethodIDOf(
      _classRef, "setStroke", "(ILandroid/content/res/ColorStateList;FF)V");

  /// from: public void setStroke(int width, android.content.res.ColorStateList colorStateList, float dashWidth, float dashGap)
  ///
  /// Set the stroke width and color state list for the drawable. If width
  /// is zero, then no stroke is drawn. This method can also be used to dash
  /// the stroke.
  ///
  /// <strong>Note</strong>: changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///
  ///@param width The width in pixels of the stroke
  ///@param colorStateList The color state list of the stroke
  ///@param dashWidth The length in pixels of the dashes, set to 0 to disable dashes
  ///@param dashGap The gap in pixels between dashes
  ///@see \#mutate()
  ///@see \#setStroke(int, ColorStateList)
  void setStroke3(int width, colorstatelist_.ColorStateList colorStateList,
          double dashWidth, double dashGap) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setStroke3,
          jni.JniType.voidType,
          [width, colorStateList.reference, dashWidth, dashGap]).check();

  static final _id_setSize =
      jniAccessors.getMethodIDOf(_classRef, "setSize", "(II)V");

  /// from: public void setSize(int width, int height)
  ///
  /// Sets the size of the shape drawn by this drawable.
  ///
  /// <strong>Note</strong>: changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///
  ///@param width The width of the shape used by this drawable
  ///@param height The height of the shape used by this drawable
  ///@see \#mutate()
  ///@see \#setGradientType(int)
  void setSize(int width, int height) => jniAccessors.callMethodWithArgs(
      reference, _id_setSize, jni.JniType.voidType, [width, height]).check();

  static final _id_setShape =
      jniAccessors.getMethodIDOf(_classRef, "setShape", "(I)V");

  /// from: public void setShape(int shape)
  ///
  /// Sets the type of shape used to draw the gradient.
  ///
  /// <strong>Note</strong>: changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///
  ///@param shape The desired shape for this drawable: \#LINE,
  ///              \#OVAL, \#RECTANGLE or \#RING
  ///
  /// Value is android.graphics.drawable.GradientDrawable\#RECTANGLE, android.graphics.drawable.GradientDrawable\#OVAL, android.graphics.drawable.GradientDrawable\#LINE, or android.graphics.drawable.GradientDrawable\#RING
  ///@see \#mutate()
  void setShape(int shape) => jniAccessors.callMethodWithArgs(
      reference, _id_setShape, jni.JniType.voidType, [shape]).check();

  static final _id_getShape =
      jniAccessors.getMethodIDOf(_classRef, "getShape", "()I");

  /// from: public int getShape()
  ///
  /// Returns the type of shape used by this drawable, one of \#LINE,
  /// \#OVAL, \#RECTANGLE or \#RING.
  ///@return the type of shape used by this drawable
  /// Value is android.graphics.drawable.GradientDrawable\#RECTANGLE, android.graphics.drawable.GradientDrawable\#OVAL, android.graphics.drawable.GradientDrawable\#LINE, or android.graphics.drawable.GradientDrawable\#RING
  ///@see \#setShape(int)
  int getShape() => jniAccessors.callMethodWithArgs(
      reference, _id_getShape, jni.JniType.intType, []).integer;

  static final _id_setGradientType =
      jniAccessors.getMethodIDOf(_classRef, "setGradientType", "(I)V");

  /// from: public void setGradientType(int gradient)
  ///
  /// Sets the type of gradient used by this drawable.
  ///
  /// <strong>Note</strong>: changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///@param gradient The type of the gradient: \#LINEAR_GRADIENT,
  ///                 \#RADIAL_GRADIENT or \#SWEEP_GRADIENT
  ///
  /// Value is android.graphics.drawable.GradientDrawable\#LINEAR_GRADIENT, android.graphics.drawable.GradientDrawable\#RADIAL_GRADIENT, or android.graphics.drawable.GradientDrawable\#SWEEP_GRADIENT
  ///@see \#mutate()
  ///@see \#getGradientType()
  void setGradientType(int gradient) => jniAccessors.callMethodWithArgs(
      reference, _id_setGradientType, jni.JniType.voidType, [gradient]).check();

  static final _id_getGradientType =
      jniAccessors.getMethodIDOf(_classRef, "getGradientType", "()I");

  /// from: public int getGradientType()
  ///
  /// Returns the type of gradient used by this drawable, one of
  /// \#LINEAR_GRADIENT, \#RADIAL_GRADIENT, or
  /// \#SWEEP_GRADIENT.
  ///@return the type of gradient used by this drawable
  /// Value is android.graphics.drawable.GradientDrawable\#LINEAR_GRADIENT, android.graphics.drawable.GradientDrawable\#RADIAL_GRADIENT, or android.graphics.drawable.GradientDrawable\#SWEEP_GRADIENT
  ///@see \#setGradientType(int)
  int getGradientType() => jniAccessors.callMethodWithArgs(
      reference, _id_getGradientType, jni.JniType.intType, []).integer;

  static final _id_setGradientCenter =
      jniAccessors.getMethodIDOf(_classRef, "setGradientCenter", "(FF)V");

  /// from: public void setGradientCenter(float x, float y)
  ///
  /// Sets the position of the center of the gradient as a fraction of the
  /// width and height.
  ///
  /// The default value is (0.5, 0.5).
  ///
  /// <strong>Note</strong>: changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///@param x the X-position of the center of the gradient
  ///@param y the Y-position of the center of the gradient
  ///@see \#mutate()
  ///@see \#setGradientType(int)
  ///@see \#getGradientCenterX()
  ///@see \#getGradientCenterY()
  void setGradientCenter(double x, double y) => jniAccessors.callMethodWithArgs(
      reference, _id_setGradientCenter, jni.JniType.voidType, [x, y]).check();

  static final _id_getGradientCenterX =
      jniAccessors.getMethodIDOf(_classRef, "getGradientCenterX", "()F");

  /// from: public float getGradientCenterX()
  ///
  /// Returns the X-position of the center of the gradient as a fraction of
  /// the width.
  ///@return the X-position of the center of the gradient
  ///@see \#setGradientCenter(float, float)
  double getGradientCenterX() => jniAccessors.callMethodWithArgs(
      reference, _id_getGradientCenterX, jni.JniType.floatType, []).float;

  static final _id_getGradientCenterY =
      jniAccessors.getMethodIDOf(_classRef, "getGradientCenterY", "()F");

  /// from: public float getGradientCenterY()
  ///
  /// Returns the Y-position of the center of this gradient as a fraction of
  /// the height.
  ///@return the Y-position of the center of the gradient
  ///@see \#setGradientCenter(float, float)
  double getGradientCenterY() => jniAccessors.callMethodWithArgs(
      reference, _id_getGradientCenterY, jni.JniType.floatType, []).float;

  static final _id_setGradientRadius =
      jniAccessors.getMethodIDOf(_classRef, "setGradientRadius", "(F)V");

  /// from: public void setGradientRadius(float gradientRadius)
  ///
  /// Sets the radius of the gradient. The radius is honored only when the
  /// gradient type is set to \#RADIAL_GRADIENT.
  ///
  /// <strong>Note</strong>: changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///@param gradientRadius the radius of the gradient in pixels
  ///@see \#mutate()
  ///@see \#setGradientType(int)
  ///@see \#getGradientRadius()
  void setGradientRadius(double gradientRadius) =>
      jniAccessors.callMethodWithArgs(reference, _id_setGradientRadius,
          jni.JniType.voidType, [gradientRadius]).check();

  static final _id_getGradientRadius =
      jniAccessors.getMethodIDOf(_classRef, "getGradientRadius", "()F");

  /// from: public float getGradientRadius()
  ///
  /// Returns the radius of the gradient in pixels. The radius is valid only
  /// when the gradient type is set to \#RADIAL_GRADIENT.
  ///@return the radius of the gradient in pixels
  ///@see \#setGradientRadius(float)
  double getGradientRadius() => jniAccessors.callMethodWithArgs(
      reference, _id_getGradientRadius, jni.JniType.floatType, []).float;

  static final _id_setUseLevel =
      jniAccessors.getMethodIDOf(_classRef, "setUseLevel", "(Z)V");

  /// from: public void setUseLevel(boolean useLevel)
  ///
  /// Sets whether this drawable's {@code level} property will be used to
  /// scale the gradient. If a gradient is not used, this property has no
  /// effect.
  ///
  /// Scaling behavior varies based on gradient type:
  /// <ul>
  ///     <li>\#LINEAR_GRADIENT adjusts the ending position along the
  ///         gradient's axis of orientation (see \#getOrientation())
  ///     <li>\#RADIAL_GRADIENT adjusts the outer radius
  ///     <li>\#SWEEP_GRADIENT adjusts the ending angle
  /// <ul>
  ///
  /// The default value for this property is {@code false}.
  ///
  /// <strong>Note</strong>: This property corresponds to the
  /// {@code android:useLevel} attribute on the inner {@code &lt;gradient&gt;}
  /// tag, NOT the {@code android:useLevel} attribute on the outer
  /// {@code &lt;shape&gt;} tag. For example,
  /// <pre>{@code
  /// <shape ...>
  ///     <gradient
  ///         ...
  ///         android:useLevel="true" />
  /// </shape>
  /// }</pre>
  /// <strong>Note</strong>: Changing this property will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing this property.
  ///@param useLevel {@code true} if the gradient should be scaled based on
  ///                 level, {@code false} otherwise
  ///@see \#mutate()
  ///@see \#setLevel(int)
  ///@see \#getLevel()
  ///@see \#getUseLevel()
  ///@attr ref android.R.styleable\#GradientDrawableGradient_useLevel
  void setUseLevel(bool useLevel) => jniAccessors.callMethodWithArgs(
      reference, _id_setUseLevel, jni.JniType.voidType, [useLevel]).check();

  static final _id_getUseLevel =
      jniAccessors.getMethodIDOf(_classRef, "getUseLevel", "()Z");

  /// from: public boolean getUseLevel()
  ///
  /// Returns whether this drawable's {@code level} property will be used to
  /// scale the gradient.
  ///@return {@code true} if the gradient should be scaled based on level,
  ///         {@code false} otherwise
  ///@see \#setUseLevel(boolean)
  ///@attr ref android.R.styleable\#GradientDrawableGradient_useLevel
  bool getUseLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getUseLevel, jni.JniType.booleanType, []).boolean;

  static final _id_getOrientation = jniAccessors.getMethodIDOf(
      _classRef,
      "getOrientation",
      "()Landroid/graphics/drawable/GradientDrawable\$Orientation;");

  /// from: public android.graphics.drawable.GradientDrawable.Orientation getOrientation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the orientation of the gradient defined in this drawable.
  ///@return the orientation of the gradient defined in this drawable
  ///@see \#setOrientation(Orientation)
  GradientDrawable_Orientation getOrientation() =>
      GradientDrawable_Orientation.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getOrientation, jni.JniType.objectType, []).object);

  static final _id_setOrientation = jniAccessors.getMethodIDOf(
      _classRef,
      "setOrientation",
      "(Landroid/graphics/drawable/GradientDrawable\$Orientation;)V");

  /// from: public void setOrientation(android.graphics.drawable.GradientDrawable.Orientation orientation)
  ///
  /// Sets the orientation of the gradient defined in this drawable.
  ///
  /// <strong>Note</strong>: changing orientation will affect all instances
  /// of a drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing the orientation.
  ///@param orientation the desired orientation (angle) of the gradient
  ///@see \#mutate()
  ///@see \#getOrientation()
  void setOrientation(GradientDrawable_Orientation orientation) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOrientation,
          jni.JniType.voidType, [orientation.reference]).check();

  static final _id_setColors =
      jniAccessors.getMethodIDOf(_classRef, "setColors", "([I)V");

  /// from: public void setColors(int[] colors)
  ///
  /// Sets the colors used to draw the gradient.
  ///
  /// Each color is specified as an ARGB integer and the array must contain at
  /// least 2 colors.
  ///
  /// <strong>Note</strong>: changing colors will affect all instances of a
  /// drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing the colors.
  ///@param colors an array containing 2 or more ARGB colors
  ///@see \#mutate()
  ///@see \#setColor(int)
  void setColors(jni.JniObject colors) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setColors,
      jni.JniType.voidType,
      [colors.reference]).check();

  static final _id_getColors =
      jniAccessors.getMethodIDOf(_classRef, "getColors", "()[I");

  /// from: public int[] getColors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the colors used to draw the gradient, or {@code null} if the
  /// gradient is drawn using a single color or no colors.
  ///@return the colors used to draw the gradient, or {@code null}
  ///@see \#setColors(int[] colors)
  jni.JniObject getColors() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getColors, jni.JniType.objectType, []).object);

  static final _id_draw = jniAccessors.getMethodIDOf(
      _classRef, "draw", "(Landroid/graphics/Canvas;)V");

  /// from: public void draw(android.graphics.Canvas canvas)
  void draw(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_draw, jni.JniType.voidType, [canvas.reference]).check();

  static final _id_setColor =
      jniAccessors.getMethodIDOf(_classRef, "setColor", "(I)V");

  /// from: public void setColor(int argb)
  ///
  /// Changes this drawable to use a single color instead of a gradient.
  ///
  /// <strong>Note</strong>: changing color will affect all instances of a
  /// drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing the color.
  ///@param argb The color used to fill the shape
  ///@see \#mutate()
  ///@see \#setColors(int[])
  ///@see \#getColor
  void setColor(int argb) => jniAccessors.callMethodWithArgs(
      reference, _id_setColor, jni.JniType.voidType, [argb]).check();

  static final _id_setColor1 = jniAccessors.getMethodIDOf(
      _classRef, "setColor", "(Landroid/content/res/ColorStateList;)V");

  /// from: public void setColor(android.content.res.ColorStateList colorStateList)
  ///
  /// Changes this drawable to use a single color state list instead of a
  /// gradient. Calling this method with a null argument will clear the color
  /// and is equivalent to calling \#setColor(int) with the argument
  /// Color\#TRANSPARENT.
  ///
  /// <strong>Note</strong>: changing color will affect all instances of a
  /// drawable loaded from a resource. It is recommended to invoke
  /// \#mutate() before changing the color.
  ///
  ///@param colorStateList The color state list used to fill the shape
  ///
  /// This value may be {@code null}.
  ///@see \#mutate()
  ///@see \#getColor
  void setColor1(colorstatelist_.ColorStateList colorStateList) =>
      jniAccessors.callMethodWithArgs(reference, _id_setColor1,
          jni.JniType.voidType, [colorStateList.reference]).check();

  static final _id_getColor = jniAccessors.getMethodIDOf(
      _classRef, "getColor", "()Landroid/content/res/ColorStateList;");

  /// from: public android.content.res.ColorStateList getColor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the color state list used to fill the shape, or {@code null} if
  /// the shape is filled with a gradient or has no fill color.
  ///@return the color state list used to fill this gradient, or {@code null}
  ///@see \#setColor(int)
  ///@see \#setColor(ColorStateList)
  colorstatelist_.ColorStateList getColor() =>
      colorstatelist_.ColorStateList.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getColor, jni.JniType.objectType, []).object);

  static final _id_onStateChange =
      jniAccessors.getMethodIDOf(_classRef, "onStateChange", "([I)Z");

  /// from: protected boolean onStateChange(int[] stateSet)
  bool onStateChange(jni.JniObject stateSet) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onStateChange,
      jni.JniType.booleanType,
      [stateSet.reference]).boolean;

  static final _id_isStateful =
      jniAccessors.getMethodIDOf(_classRef, "isStateful", "()Z");

  /// from: public boolean isStateful()
  bool isStateful() => jniAccessors.callMethodWithArgs(
      reference, _id_isStateful, jni.JniType.booleanType, []).boolean;

  static final _id_getChangingConfigurations =
      jniAccessors.getMethodIDOf(_classRef, "getChangingConfigurations", "()I");

  /// from: public int getChangingConfigurations()
  ///
  /// @return Value is either <code>0</code> or a combination of android.content.pm.ActivityInfo\#CONFIG_MCC, android.content.pm.ActivityInfo\#CONFIG_MNC, android.content.pm.ActivityInfo\#CONFIG_LOCALE, android.content.pm.ActivityInfo\#CONFIG_TOUCHSCREEN, android.content.pm.ActivityInfo\#CONFIG_KEYBOARD, android.content.pm.ActivityInfo\#CONFIG_KEYBOARD_HIDDEN, android.content.pm.ActivityInfo\#CONFIG_NAVIGATION, android.content.pm.ActivityInfo\#CONFIG_ORIENTATION, android.content.pm.ActivityInfo\#CONFIG_SCREEN_LAYOUT, android.content.pm.ActivityInfo\#CONFIG_UI_MODE, android.content.pm.ActivityInfo\#CONFIG_SCREEN_SIZE, android.content.pm.ActivityInfo\#CONFIG_SMALLEST_SCREEN_SIZE, android.content.pm.ActivityInfo\#CONFIG_DENSITY, android.content.pm.ActivityInfo\#CONFIG_LAYOUT_DIRECTION, android.content.pm.ActivityInfo\#CONFIG_COLOR_MODE, and android.content.pm.ActivityInfo\#CONFIG_FONT_SCALE
  int getChangingConfigurations() => jniAccessors.callMethodWithArgs(reference,
      _id_getChangingConfigurations, jni.JniType.intType, []).integer;

  static final _id_setAlpha =
      jniAccessors.getMethodIDOf(_classRef, "setAlpha", "(I)V");

  /// from: public void setAlpha(int alpha)
  void setAlpha(int alpha) => jniAccessors.callMethodWithArgs(
      reference, _id_setAlpha, jni.JniType.voidType, [alpha]).check();

  static final _id_getAlpha =
      jniAccessors.getMethodIDOf(_classRef, "getAlpha", "()I");

  /// from: public int getAlpha()
  int getAlpha() => jniAccessors.callMethodWithArgs(
      reference, _id_getAlpha, jni.JniType.intType, []).integer;

  static final _id_setDither =
      jniAccessors.getMethodIDOf(_classRef, "setDither", "(Z)V");

  /// from: public void setDither(boolean dither)
  void setDither(bool dither) => jniAccessors.callMethodWithArgs(
      reference, _id_setDither, jni.JniType.voidType, [dither]).check();

  static final _id_getColorFilter = jniAccessors.getMethodIDOf(
      _classRef, "getColorFilter", "()Landroid/graphics/ColorFilter;");

  /// from: public android.graphics.ColorFilter getColorFilter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return This value may be {@code null}.
  colorfilter_.ColorFilter getColorFilter() =>
      colorfilter_.ColorFilter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getColorFilter, jni.JniType.objectType, []).object);

  static final _id_setColorFilter = jniAccessors.getMethodIDOf(
      _classRef, "setColorFilter", "(Landroid/graphics/ColorFilter;)V");

  /// from: public void setColorFilter(android.graphics.ColorFilter colorFilter)
  ///
  /// @param colorFilter This value may be {@code null}.
  void setColorFilter(colorfilter_.ColorFilter colorFilter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setColorFilter,
          jni.JniType.voidType, [colorFilter.reference]).check();

  static final _id_setTintList = jniAccessors.getMethodIDOf(
      _classRef, "setTintList", "(Landroid/content/res/ColorStateList;)V");

  /// from: public void setTintList(android.content.res.ColorStateList tint)
  ///
  /// @param tint This value may be {@code null}.
  void setTintList(colorstatelist_.ColorStateList tint) =>
      jniAccessors.callMethodWithArgs(reference, _id_setTintList,
          jni.JniType.voidType, [tint.reference]).check();

  static final _id_setTintMode = jniAccessors.getMethodIDOf(
      _classRef, "setTintMode", "(Landroid/graphics/PorterDuff\$Mode;)V");

  /// from: public void setTintMode(android.graphics.PorterDuff.Mode tintMode)
  ///
  /// @param tintMode This value may be {@code null}.
  void setTintMode(porterduff_.PorterDuff_Mode tintMode) =>
      jniAccessors.callMethodWithArgs(reference, _id_setTintMode,
          jni.JniType.voidType, [tintMode.reference]).check();

  static final _id_getOpacity =
      jniAccessors.getMethodIDOf(_classRef, "getOpacity", "()I");

  /// from: public int getOpacity()
  int getOpacity() => jniAccessors.callMethodWithArgs(
      reference, _id_getOpacity, jni.JniType.intType, []).integer;

  static final _id_onBoundsChange = jniAccessors.getMethodIDOf(
      _classRef, "onBoundsChange", "(Landroid/graphics/Rect;)V");

  /// from: protected void onBoundsChange(android.graphics.Rect r)
  void onBoundsChange(rect_.Rect r) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onBoundsChange,
      jni.JniType.voidType,
      [r.reference]).check();

  static final _id_onLevelChange =
      jniAccessors.getMethodIDOf(_classRef, "onLevelChange", "(I)Z");

  /// from: protected boolean onLevelChange(int level)
  bool onLevelChange(int level) => jniAccessors.callMethodWithArgs(
      reference, _id_onLevelChange, jni.JniType.booleanType, [level]).boolean;

  static final _id_inflate1 = jniAccessors.getMethodIDOf(_classRef, "inflate",
      "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources\$Theme;)V");

  /// from: public void inflate(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs, android.content.res.Resources.Theme theme)
  ///
  /// @param r This value must never be {@code null}.
  ///@param parser This value must never be {@code null}.
  ///@param attrs This value must never be {@code null}.
  ///@param theme This value may be {@code null}.
  void inflate1(resources_.Resources r, jni.JniObject parser,
          attributeset_.AttributeSet attrs, resources_.Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_inflate1, jni.JniType.voidType, [
        r.reference,
        parser.reference,
        attrs.reference,
        theme.reference
      ]).check();

  static final _id_applyTheme = jniAccessors.getMethodIDOf(
      _classRef, "applyTheme", "(Landroid/content/res/Resources\$Theme;)V");

  /// from: public void applyTheme(android.content.res.Resources.Theme t)
  ///
  /// @param t This value must never be {@code null}.
  void applyTheme(resources_.Resources_Theme t) =>
      jniAccessors.callMethodWithArgs(reference, _id_applyTheme,
          jni.JniType.voidType, [t.reference]).check();

  static final _id_canApplyTheme =
      jniAccessors.getMethodIDOf(_classRef, "canApplyTheme", "()Z");

  /// from: public boolean canApplyTheme()
  bool canApplyTheme() => jniAccessors.callMethodWithArgs(
      reference, _id_canApplyTheme, jni.JniType.booleanType, []).boolean;

  static final _id_getIntrinsicWidth =
      jniAccessors.getMethodIDOf(_classRef, "getIntrinsicWidth", "()I");

  /// from: public int getIntrinsicWidth()
  int getIntrinsicWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getIntrinsicWidth, jni.JniType.intType, []).integer;

  static final _id_getIntrinsicHeight =
      jniAccessors.getMethodIDOf(_classRef, "getIntrinsicHeight", "()I");

  /// from: public int getIntrinsicHeight()
  int getIntrinsicHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getIntrinsicHeight, jni.JniType.intType, []).integer;

  static final _id_getConstantState = jniAccessors.getMethodIDOf(
      _classRef,
      "getConstantState",
      "()Landroid/graphics/drawable/Drawable\$ConstantState;");

  /// from: public android.graphics.drawable.Drawable.ConstantState getConstantState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  drawable_.Drawable_ConstantState getConstantState() =>
      drawable_.Drawable_ConstantState.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getConstantState, jni.JniType.objectType, []).object);

  static final _id_getOutline = jniAccessors.getMethodIDOf(
      _classRef, "getOutline", "(Landroid/graphics/Outline;)V");

  /// from: public void getOutline(android.graphics.Outline outline)
  void getOutline(outline_.Outline outline) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getOutline,
      jni.JniType.voidType,
      [outline.reference]).check();

  static final _id_mutate = jniAccessors.getMethodIDOf(
      _classRef, "mutate", "()Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable mutate()
  /// The returned object must be deleted after use, by calling the `delete` method.
  drawable_.Drawable mutate() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_mutate, jni.JniType.objectType, []).object);
}

/// from: android.graphics.drawable.GradientDrawable$Orientation
///
/// Controls how the gradient is oriented relative to the drawable's bounds
class GradientDrawable_Orientation extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/graphics/drawable/GradientDrawable\$Orientation");
  GradientDrawable_Orientation.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(_classRef,
      "values", "()[Landroid/graphics/drawable/GradientDrawable\$Orientation;");

  /// from: static public android.graphics.drawable.GradientDrawable.Orientation[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/graphics/drawable/GradientDrawable\$Orientation;");

  /// from: static public android.graphics.drawable.GradientDrawable.Orientation valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static GradientDrawable_Orientation valueOf(jni.JniString name) =>
      GradientDrawable_Orientation.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_valueOf,
              jni.JniType.objectType, [name.reference]).object);
}
