// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "DrawableWrapper.dart" as drawablewrapper_;

import "Drawable.dart" as drawable_;

import "../../content/res/Resources.dart" as resources_;

import "../../util/AttributeSet.dart" as attributeset_;

import "../Canvas.dart" as canvas_;

import "../Rect.dart" as rect_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.ScaleDrawable
///
/// A Drawable that changes the size of another Drawable based on its current
/// level value. You can control how much the child Drawable changes in width
/// and height based on the level, as well as a gravity to control where it is
/// placed in its overall container. Most often used to implement things like
/// progress bars.
///
/// The default level may be specified from XML using the
/// android.R.styleable\#ScaleDrawable_level android:level property. When
/// this property is not specified, the default level is 0, which corresponds to
/// zero height and/or width depending on the values specified for
/// {@code android.R.styleable\#ScaleDrawable_scaleWidth scaleWidth} and
/// {@code android.R.styleable\#ScaleDrawable_scaleHeight scaleHeight}. At run
/// time, the level may be set via \#setLevel(int).
///
/// A scale drawable may be defined in an XML file with the {@code <scale>}
/// element. For more information, see the guide to
/// <a href="{@docRoot}guide/topics/resources/drawable-resource.html">Drawable
/// Resources</a>.
///@attr ref android.R.styleable\#ScaleDrawable_scaleWidth
///@attr ref android.R.styleable\#ScaleDrawable_scaleHeight
///@attr ref android.R.styleable\#ScaleDrawable_scaleGravity
///@attr ref android.R.styleable\#ScaleDrawable_drawable
///@attr ref android.R.styleable\#ScaleDrawable_level
class ScaleDrawable extends drawablewrapper_.DrawableWrapper {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/ScaleDrawable");
  ScaleDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/drawable/Drawable;IFF)V");

  /// from: public void <init>(android.graphics.drawable.Drawable drawable, int gravity, float scaleWidth, float scaleHeight)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new scale drawable with the specified gravity and scale
  /// properties.
  ///@param drawable the drawable to scale
  ///@param gravity gravity constant (see Gravity used to position
  ///                the scaled drawable within the parent container
  ///@param scaleWidth width scaling factor [0...1] to use then the level is
  ///                   at the maximum value, or -1 to not scale width
  ///@param scaleHeight height scaling factor [0...1] to use then the level
  ///                    is at the maximum value, or -1 to not scale height
  ScaleDrawable.ctor2(drawable_.Drawable drawable, int gravity,
      double scaleWidth, double scaleHeight)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [drawable.reference, gravity, scaleWidth, scaleHeight]).object);

  static final _id_inflate1 = jniAccessors.getMethodIDOf(_classRef, "inflate",
      "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources\$Theme;)V");

  /// from: public void inflate(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs, android.content.res.Resources.Theme theme)
  ///
  /// @param r This value must never be {@code null}.
  ///@param parser This value must never be {@code null}.
  ///@param attrs This value must never be {@code null}.
  ///@param theme This value may be {@code null}.
  void inflate1(resources_.Resources r, jni.JniObject parser,
          attributeset_.AttributeSet attrs, resources_.Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_inflate1, jni.JniType.voidType, [
        r.reference,
        parser.reference,
        attrs.reference,
        theme.reference
      ]).check();

  static final _id_applyTheme = jniAccessors.getMethodIDOf(
      _classRef, "applyTheme", "(Landroid/content/res/Resources\$Theme;)V");

  /// from: public void applyTheme(android.content.res.Resources.Theme t)
  ///
  /// @param t This value must never be {@code null}.
  void applyTheme(resources_.Resources_Theme t) =>
      jniAccessors.callMethodWithArgs(reference, _id_applyTheme,
          jni.JniType.voidType, [t.reference]).check();

  static final _id_draw = jniAccessors.getMethodIDOf(
      _classRef, "draw", "(Landroid/graphics/Canvas;)V");

  /// from: public void draw(android.graphics.Canvas canvas)
  void draw(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_draw, jni.JniType.voidType, [canvas.reference]).check();

  static final _id_getOpacity =
      jniAccessors.getMethodIDOf(_classRef, "getOpacity", "()I");

  /// from: public int getOpacity()
  int getOpacity() => jniAccessors.callMethodWithArgs(
      reference, _id_getOpacity, jni.JniType.intType, []).integer;

  static final _id_onLevelChange =
      jniAccessors.getMethodIDOf(_classRef, "onLevelChange", "(I)Z");

  /// from: protected boolean onLevelChange(int level)
  bool onLevelChange(int level) => jniAccessors.callMethodWithArgs(
      reference, _id_onLevelChange, jni.JniType.booleanType, [level]).boolean;

  static final _id_onBoundsChange = jniAccessors.getMethodIDOf(
      _classRef, "onBoundsChange", "(Landroid/graphics/Rect;)V");

  /// from: protected void onBoundsChange(android.graphics.Rect bounds)
  void onBoundsChange(rect_.Rect bounds) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onBoundsChange,
      jni.JniType.voidType,
      [bounds.reference]).check();
}
