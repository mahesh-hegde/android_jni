// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Drawable.dart" as drawable_;

import "../Picture.dart" as picture_;

import "../Canvas.dart" as canvas_;

import "../ColorFilter.dart" as colorfilter_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.PictureDrawable
///
/// Drawable subclass that wraps a Picture, allowing the picture to be used
/// wherever a Drawable is supported.
class PictureDrawable extends drawable_.Drawable {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/PictureDrawable");
  PictureDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/Picture;)V");

  /// from: public void <init>(android.graphics.Picture picture)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a new drawable referencing the specified picture. The picture
  /// may be null.
  ///@param picture The picture to associate with the drawable. May be null.
  PictureDrawable.ctor1(picture_.Picture picture)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [picture.reference]).object);

  static final _id_getPicture = jniAccessors.getMethodIDOf(
      _classRef, "getPicture", "()Landroid/graphics/Picture;");

  /// from: public android.graphics.Picture getPicture()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the picture associated with the drawable. May be null.
  ///@return the picture associated with the drawable, or null.
  picture_.Picture getPicture() =>
      picture_.Picture.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPicture, jni.JniType.objectType, []).object);

  static final _id_setPicture = jniAccessors.getMethodIDOf(
      _classRef, "setPicture", "(Landroid/graphics/Picture;)V");

  /// from: public void setPicture(android.graphics.Picture picture)
  ///
  /// Associate a picture with this drawable. The picture may be null.
  ///@param picture The picture to associate with the drawable. May be null.
  void setPicture(picture_.Picture picture) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setPicture,
      jni.JniType.voidType,
      [picture.reference]).check();

  static final _id_draw = jniAccessors.getMethodIDOf(
      _classRef, "draw", "(Landroid/graphics/Canvas;)V");

  /// from: public void draw(android.graphics.Canvas canvas)
  void draw(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_draw, jni.JniType.voidType, [canvas.reference]).check();

  static final _id_getIntrinsicWidth =
      jniAccessors.getMethodIDOf(_classRef, "getIntrinsicWidth", "()I");

  /// from: public int getIntrinsicWidth()
  int getIntrinsicWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getIntrinsicWidth, jni.JniType.intType, []).integer;

  static final _id_getIntrinsicHeight =
      jniAccessors.getMethodIDOf(_classRef, "getIntrinsicHeight", "()I");

  /// from: public int getIntrinsicHeight()
  int getIntrinsicHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getIntrinsicHeight, jni.JniType.intType, []).integer;

  static final _id_getOpacity =
      jniAccessors.getMethodIDOf(_classRef, "getOpacity", "()I");

  /// from: public int getOpacity()
  int getOpacity() => jniAccessors.callMethodWithArgs(
      reference, _id_getOpacity, jni.JniType.intType, []).integer;

  static final _id_setColorFilter = jniAccessors.getMethodIDOf(
      _classRef, "setColorFilter", "(Landroid/graphics/ColorFilter;)V");

  /// from: public void setColorFilter(android.graphics.ColorFilter colorFilter)
  void setColorFilter(colorfilter_.ColorFilter colorFilter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setColorFilter,
          jni.JniType.voidType, [colorFilter.reference]).check();

  static final _id_setAlpha =
      jniAccessors.getMethodIDOf(_classRef, "setAlpha", "(I)V");

  /// from: public void setAlpha(int alpha)
  void setAlpha(int alpha) => jniAccessors.callMethodWithArgs(
      reference, _id_setAlpha, jni.JniType.voidType, [alpha]).check();
}
