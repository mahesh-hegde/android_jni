// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Drawable.dart" as drawable_;

import "../Bitmap.dart" as bitmap_;

import "../Rect.dart" as rect_;

import "../../content/res/Resources.dart" as resources_;

import "../NinePatch.dart" as ninepatch_;

import "../Canvas.dart" as canvas_;

import "../../util/DisplayMetrics.dart" as displaymetrics_;

import "../Outline.dart" as outline_;

import "../ColorFilter.dart" as colorfilter_;

import "../../content/res/ColorStateList.dart" as colorstatelist_;

import "../PorterDuff.dart" as porterduff_;

import "../../util/AttributeSet.dart" as attributeset_;

import "../Paint.dart" as paint_;

import "../Region.dart" as region_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.NinePatchDrawable
///
/// A resizeable bitmap, with stretchable areas that you define. This type of image
/// is defined in a .png file with a special format.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about how to use a NinePatchDrawable, read the
/// <a href="{@docRoot}guide/topics/graphics/2d-graphics.html\#nine-patch">
/// Canvas and Drawables</a> developer guide. For information about creating a NinePatch image
/// file using the draw9patch tool, see the
/// <a href="{@docRoot}guide/developing/tools/draw9patch.html">Draw 9-patch</a> tool guide.
///</div>
class NinePatchDrawable extends drawable_.Drawable {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/NinePatchDrawable");
  NinePatchDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/graphics/Bitmap;[BLandroid/graphics/Rect;Ljava/lang/String;)V");

  /// from: public void <init>(android.graphics.Bitmap bitmap, byte[] chunk, android.graphics.Rect padding, java.lang.String srcName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create drawable from raw nine-patch data, not dealing with density.
  ///@deprecated Use \#NinePatchDrawable(Resources, Bitmap, byte[], Rect, String)
  ///             to ensure that the drawable has correctly set its target density.
  NinePatchDrawable.ctor1(bitmap_.Bitmap bitmap, jni.JniObject chunk,
      rect_.Rect padding, jni.JniString srcName)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          bitmap.reference,
          chunk.reference,
          padding.reference,
          srcName.reference
        ]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/res/Resources;Landroid/graphics/Bitmap;[BLandroid/graphics/Rect;Ljava/lang/String;)V");

  /// from: public void <init>(android.content.res.Resources res, android.graphics.Bitmap bitmap, byte[] chunk, android.graphics.Rect padding, java.lang.String srcName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create drawable from raw nine-patch data, setting initial target density
  /// based on the display metrics of the resources.
  NinePatchDrawable.ctor2(resources_.Resources res, bitmap_.Bitmap bitmap,
      jni.JniObject chunk, rect_.Rect padding, jni.JniString srcName)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, [
          res.reference,
          bitmap.reference,
          chunk.reference,
          padding.reference,
          srcName.reference
        ]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/NinePatch;)V");

  /// from: public void <init>(android.graphics.NinePatch patch)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create drawable from existing nine-patch, not dealing with density.
  ///@deprecated Use \#NinePatchDrawable(Resources, NinePatch)
  ///             to ensure that the drawable has correctly set its target
  ///             density.
  ///@param patch This value must never be {@code null}.
  NinePatchDrawable.ctor3(ninepatch_.NinePatch patch)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor3, [patch.reference]).object);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/res/Resources;Landroid/graphics/NinePatch;)V");

  /// from: public void <init>(android.content.res.Resources res, android.graphics.NinePatch patch)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create drawable from existing nine-patch, setting initial target density
  /// based on the display metrics of the resources.
  ///@param res This value may be {@code null}.
  ///@param patch This value must never be {@code null}.
  NinePatchDrawable.ctor4(resources_.Resources res, ninepatch_.NinePatch patch)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [res.reference, patch.reference]).object);

  static final _id_setTargetDensity = jniAccessors.getMethodIDOf(
      _classRef, "setTargetDensity", "(Landroid/graphics/Canvas;)V");

  /// from: public void setTargetDensity(android.graphics.Canvas canvas)
  ///
  /// Set the density scale at which this drawable will be rendered. This
  /// method assumes the drawable will be rendered at the same density as the
  /// specified canvas.
  ///@param canvas The Canvas from which the density scale must be obtained.
  ///
  /// This value must never be {@code null}.
  ///@see android.graphics.Bitmap\#setDensity(int)
  ///@see android.graphics.Bitmap\#getDensity()
  void setTargetDensity(canvas_.Canvas canvas) =>
      jniAccessors.callMethodWithArgs(reference, _id_setTargetDensity,
          jni.JniType.voidType, [canvas.reference]).check();

  static final _id_setTargetDensity1 = jniAccessors.getMethodIDOf(
      _classRef, "setTargetDensity", "(Landroid/util/DisplayMetrics;)V");

  /// from: public void setTargetDensity(android.util.DisplayMetrics metrics)
  ///
  /// Set the density scale at which this drawable will be rendered.
  ///@param metrics The DisplayMetrics indicating the density scale for this drawable.
  ///
  /// This value must never be {@code null}.
  ///@see android.graphics.Bitmap\#setDensity(int)
  ///@see android.graphics.Bitmap\#getDensity()
  void setTargetDensity1(displaymetrics_.DisplayMetrics metrics) =>
      jniAccessors.callMethodWithArgs(reference, _id_setTargetDensity1,
          jni.JniType.voidType, [metrics.reference]).check();

  static final _id_setTargetDensity2 =
      jniAccessors.getMethodIDOf(_classRef, "setTargetDensity", "(I)V");

  /// from: public void setTargetDensity(int density)
  ///
  /// Set the density at which this drawable will be rendered.
  ///@param density The density scale for this drawable.
  ///@see android.graphics.Bitmap\#setDensity(int)
  ///@see android.graphics.Bitmap\#getDensity()
  void setTargetDensity2(int density) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setTargetDensity2,
      jni.JniType.voidType,
      [density]).check();

  static final _id_draw = jniAccessors.getMethodIDOf(
      _classRef, "draw", "(Landroid/graphics/Canvas;)V");

  /// from: public void draw(android.graphics.Canvas canvas)
  void draw(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_draw, jni.JniType.voidType, [canvas.reference]).check();

  static final _id_getChangingConfigurations =
      jniAccessors.getMethodIDOf(_classRef, "getChangingConfigurations", "()I");

  /// from: public int getChangingConfigurations()
  ///
  /// @return Value is either <code>0</code> or a combination of android.content.pm.ActivityInfo\#CONFIG_MCC, android.content.pm.ActivityInfo\#CONFIG_MNC, android.content.pm.ActivityInfo\#CONFIG_LOCALE, android.content.pm.ActivityInfo\#CONFIG_TOUCHSCREEN, android.content.pm.ActivityInfo\#CONFIG_KEYBOARD, android.content.pm.ActivityInfo\#CONFIG_KEYBOARD_HIDDEN, android.content.pm.ActivityInfo\#CONFIG_NAVIGATION, android.content.pm.ActivityInfo\#CONFIG_ORIENTATION, android.content.pm.ActivityInfo\#CONFIG_SCREEN_LAYOUT, android.content.pm.ActivityInfo\#CONFIG_UI_MODE, android.content.pm.ActivityInfo\#CONFIG_SCREEN_SIZE, android.content.pm.ActivityInfo\#CONFIG_SMALLEST_SCREEN_SIZE, android.content.pm.ActivityInfo\#CONFIG_DENSITY, android.content.pm.ActivityInfo\#CONFIG_LAYOUT_DIRECTION, android.content.pm.ActivityInfo\#CONFIG_COLOR_MODE, and android.content.pm.ActivityInfo\#CONFIG_FONT_SCALE
  int getChangingConfigurations() => jniAccessors.callMethodWithArgs(reference,
      _id_getChangingConfigurations, jni.JniType.intType, []).integer;

  static final _id_getPadding = jniAccessors.getMethodIDOf(
      _classRef, "getPadding", "(Landroid/graphics/Rect;)Z");

  /// from: public boolean getPadding(android.graphics.Rect padding)
  ///
  /// @param padding This value must never be {@code null}.
  bool getPadding(rect_.Rect padding) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getPadding,
      jni.JniType.booleanType,
      [padding.reference]).boolean;

  static final _id_getOutline = jniAccessors.getMethodIDOf(
      _classRef, "getOutline", "(Landroid/graphics/Outline;)V");

  /// from: public void getOutline(android.graphics.Outline outline)
  ///
  /// @param outline This value must never be {@code null}.
  void getOutline(outline_.Outline outline) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getOutline,
      jni.JniType.voidType,
      [outline.reference]).check();

  static final _id_setAlpha =
      jniAccessors.getMethodIDOf(_classRef, "setAlpha", "(I)V");

  /// from: public void setAlpha(int alpha)
  void setAlpha(int alpha) => jniAccessors.callMethodWithArgs(
      reference, _id_setAlpha, jni.JniType.voidType, [alpha]).check();

  static final _id_getAlpha =
      jniAccessors.getMethodIDOf(_classRef, "getAlpha", "()I");

  /// from: public int getAlpha()
  int getAlpha() => jniAccessors.callMethodWithArgs(
      reference, _id_getAlpha, jni.JniType.intType, []).integer;

  static final _id_setColorFilter = jniAccessors.getMethodIDOf(
      _classRef, "setColorFilter", "(Landroid/graphics/ColorFilter;)V");

  /// from: public void setColorFilter(android.graphics.ColorFilter colorFilter)
  ///
  /// @param colorFilter This value may be {@code null}.
  void setColorFilter(colorfilter_.ColorFilter colorFilter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setColorFilter,
          jni.JniType.voidType, [colorFilter.reference]).check();

  static final _id_setTintList = jniAccessors.getMethodIDOf(
      _classRef, "setTintList", "(Landroid/content/res/ColorStateList;)V");

  /// from: public void setTintList(android.content.res.ColorStateList tint)
  ///
  /// @param tint This value may be {@code null}.
  void setTintList(colorstatelist_.ColorStateList tint) =>
      jniAccessors.callMethodWithArgs(reference, _id_setTintList,
          jni.JniType.voidType, [tint.reference]).check();

  static final _id_setTintMode = jniAccessors.getMethodIDOf(
      _classRef, "setTintMode", "(Landroid/graphics/PorterDuff\$Mode;)V");

  /// from: public void setTintMode(android.graphics.PorterDuff.Mode tintMode)
  ///
  /// @param tintMode This value may be {@code null}.
  void setTintMode(porterduff_.PorterDuff_Mode tintMode) =>
      jniAccessors.callMethodWithArgs(reference, _id_setTintMode,
          jni.JniType.voidType, [tintMode.reference]).check();

  static final _id_setDither =
      jniAccessors.getMethodIDOf(_classRef, "setDither", "(Z)V");

  /// from: public void setDither(boolean dither)
  void setDither(bool dither) => jniAccessors.callMethodWithArgs(
      reference, _id_setDither, jni.JniType.voidType, [dither]).check();

  static final _id_setAutoMirrored =
      jniAccessors.getMethodIDOf(_classRef, "setAutoMirrored", "(Z)V");

  /// from: public void setAutoMirrored(boolean mirrored)
  void setAutoMirrored(bool mirrored) => jniAccessors.callMethodWithArgs(
      reference, _id_setAutoMirrored, jni.JniType.voidType, [mirrored]).check();

  static final _id_isAutoMirrored =
      jniAccessors.getMethodIDOf(_classRef, "isAutoMirrored", "()Z");

  /// from: public boolean isAutoMirrored()
  bool isAutoMirrored() => jniAccessors.callMethodWithArgs(
      reference, _id_isAutoMirrored, jni.JniType.booleanType, []).boolean;

  static final _id_setFilterBitmap =
      jniAccessors.getMethodIDOf(_classRef, "setFilterBitmap", "(Z)V");

  /// from: public void setFilterBitmap(boolean filter)
  void setFilterBitmap(bool filter) => jniAccessors.callMethodWithArgs(
      reference, _id_setFilterBitmap, jni.JniType.voidType, [filter]).check();

  static final _id_isFilterBitmap =
      jniAccessors.getMethodIDOf(_classRef, "isFilterBitmap", "()Z");

  /// from: public boolean isFilterBitmap()
  bool isFilterBitmap() => jniAccessors.callMethodWithArgs(
      reference, _id_isFilterBitmap, jni.JniType.booleanType, []).boolean;

  static final _id_inflate1 = jniAccessors.getMethodIDOf(_classRef, "inflate",
      "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources\$Theme;)V");

  /// from: public void inflate(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs, android.content.res.Resources.Theme theme)
  void inflate1(resources_.Resources r, jni.JniObject parser,
          attributeset_.AttributeSet attrs, resources_.Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_inflate1, jni.JniType.voidType, [
        r.reference,
        parser.reference,
        attrs.reference,
        theme.reference
      ]).check();

  static final _id_applyTheme = jniAccessors.getMethodIDOf(
      _classRef, "applyTheme", "(Landroid/content/res/Resources\$Theme;)V");

  /// from: public void applyTheme(android.content.res.Resources.Theme t)
  ///
  /// @param t This value must never be {@code null}.
  void applyTheme(resources_.Resources_Theme t) =>
      jniAccessors.callMethodWithArgs(reference, _id_applyTheme,
          jni.JniType.voidType, [t.reference]).check();

  static final _id_canApplyTheme =
      jniAccessors.getMethodIDOf(_classRef, "canApplyTheme", "()Z");

  /// from: public boolean canApplyTheme()
  bool canApplyTheme() => jniAccessors.callMethodWithArgs(
      reference, _id_canApplyTheme, jni.JniType.booleanType, []).boolean;

  static final _id_getPaint = jniAccessors.getMethodIDOf(
      _classRef, "getPaint", "()Landroid/graphics/Paint;");

  /// from: public android.graphics.Paint getPaint()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return This value will never be {@code null}.
  paint_.Paint getPaint() =>
      paint_.Paint.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPaint, jni.JniType.objectType, []).object);

  static final _id_getIntrinsicWidth =
      jniAccessors.getMethodIDOf(_classRef, "getIntrinsicWidth", "()I");

  /// from: public int getIntrinsicWidth()
  int getIntrinsicWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getIntrinsicWidth, jni.JniType.intType, []).integer;

  static final _id_getIntrinsicHeight =
      jniAccessors.getMethodIDOf(_classRef, "getIntrinsicHeight", "()I");

  /// from: public int getIntrinsicHeight()
  int getIntrinsicHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getIntrinsicHeight, jni.JniType.intType, []).integer;

  static final _id_getOpacity =
      jniAccessors.getMethodIDOf(_classRef, "getOpacity", "()I");

  /// from: public int getOpacity()
  int getOpacity() => jniAccessors.callMethodWithArgs(
      reference, _id_getOpacity, jni.JniType.intType, []).integer;

  static final _id_getTransparentRegion = jniAccessors.getMethodIDOf(
      _classRef, "getTransparentRegion", "()Landroid/graphics/Region;");

  /// from: public android.graphics.Region getTransparentRegion()
  /// The returned object must be deleted after use, by calling the `delete` method.
  region_.Region getTransparentRegion() =>
      region_.Region.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getTransparentRegion, jni.JniType.objectType, []).object);

  static final _id_getConstantState = jniAccessors.getMethodIDOf(
      _classRef,
      "getConstantState",
      "()Landroid/graphics/drawable/Drawable\$ConstantState;");

  /// from: public android.graphics.drawable.Drawable.ConstantState getConstantState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  drawable_.Drawable_ConstantState getConstantState() =>
      drawable_.Drawable_ConstantState.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getConstantState, jni.JniType.objectType, []).object);

  static final _id_mutate = jniAccessors.getMethodIDOf(
      _classRef, "mutate", "()Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable mutate()
  /// The returned object must be deleted after use, by calling the `delete` method.
  drawable_.Drawable mutate() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_mutate, jni.JniType.objectType, []).object);

  static final _id_onStateChange =
      jniAccessors.getMethodIDOf(_classRef, "onStateChange", "([I)Z");

  /// from: protected boolean onStateChange(int[] stateSet)
  bool onStateChange(jni.JniObject stateSet) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onStateChange,
      jni.JniType.booleanType,
      [stateSet.reference]).boolean;

  static final _id_isStateful =
      jniAccessors.getMethodIDOf(_classRef, "isStateful", "()Z");

  /// from: public boolean isStateful()
  bool isStateful() => jniAccessors.callMethodWithArgs(
      reference, _id_isStateful, jni.JniType.booleanType, []).boolean;
}
