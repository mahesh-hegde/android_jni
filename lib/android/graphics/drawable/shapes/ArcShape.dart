// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "RectShape.dart" as rectshape_;

import "../../Canvas.dart" as canvas_;

import "../../Paint.dart" as paint_;

import "../../Outline.dart" as outline_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.shapes.ArcShape
///
/// Creates an arc shape. The arc shape starts at a specified angle and sweeps
/// clockwise, drawing slices of pie.
///
/// The arc can be drawn to a Canvas with its own
/// \#draw(Canvas, Paint) method, but more graphical control is available
/// if you instead pass the ArcShape to a
/// android.graphics.drawable.ShapeDrawable.
class ArcShape extends rectshape_.RectShape {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/shapes/ArcShape");
  ArcShape.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(FF)V");

  /// from: public void <init>(float startAngle, float sweepAngle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// ArcShape constructor.
  ///@param startAngle the angle (in degrees) where the arc begins
  ///@param sweepAngle the sweep angle (in degrees). Anything equal to or
  ///                   greater than 360 results in a complete circle/oval.
  ArcShape.ctor1(double startAngle, double sweepAngle)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [startAngle, sweepAngle]).object);

  static final _id_getStartAngle =
      jniAccessors.getMethodIDOf(_classRef, "getStartAngle", "()F");

  /// from: public final float getStartAngle()
  ///
  /// @return the angle (in degrees) where the arc begins
  double getStartAngle() => jniAccessors.callMethodWithArgs(
      reference, _id_getStartAngle, jni.JniType.floatType, []).float;

  static final _id_getSweepAngle =
      jniAccessors.getMethodIDOf(_classRef, "getSweepAngle", "()F");

  /// from: public final float getSweepAngle()
  ///
  /// @return the sweep angle (in degrees)
  double getSweepAngle() => jniAccessors.callMethodWithArgs(
      reference, _id_getSweepAngle, jni.JniType.floatType, []).float;

  static final _id_draw = jniAccessors.getMethodIDOf(_classRef, "draw",
      "(Landroid/graphics/Canvas;Landroid/graphics/Paint;)V");

  /// from: public void draw(android.graphics.Canvas canvas, android.graphics.Paint paint)
  void draw(canvas_.Canvas canvas, paint_.Paint paint) =>
      jniAccessors.callMethodWithArgs(reference, _id_draw, jni.JniType.voidType,
          [canvas.reference, paint.reference]).check();

  static final _id_getOutline = jniAccessors.getMethodIDOf(
      _classRef, "getOutline", "(Landroid/graphics/Outline;)V");

  /// from: public void getOutline(android.graphics.Outline outline)
  void getOutline(outline_.Outline outline) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getOutline,
      jni.JniType.voidType,
      [outline.reference]).check();

  static final _id_clone2 = jniAccessors.getMethodIDOf(
      _classRef, "clone", "()Landroid/graphics/drawable/shapes/ArcShape;");

  /// from: public android.graphics.drawable.shapes.ArcShape clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ArcShape clone2() => ArcShape.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_clone2, jni.JniType.objectType, []).object);
}
