// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "RectShape.dart" as rectshape_;

import "../../RectF.dart" as rectf_;

import "../../Canvas.dart" as canvas_;

import "../../Paint.dart" as paint_;

import "../../Outline.dart" as outline_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.shapes.RoundRectShape
///
/// Creates a rounded-corner rectangle. Optionally, an inset (rounded) rectangle
/// can be included (to make a sort of "O" shape).
///
/// The rounded rectangle can be drawn to a Canvas with its own draw() method,
/// but more graphical control is available if you instead pass
/// the RoundRectShape to a android.graphics.drawable.ShapeDrawable.
class RoundRectShape extends rectshape_.RectShape {
  static final _classRef = jniAccessors
      .getClassOf("android/graphics/drawable/shapes/RoundRectShape");
  RoundRectShape.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "([FLandroid/graphics/RectF;[F)V");

  /// from: public void <init>(float[] outerRadii, android.graphics.RectF inset, float[] innerRadii)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// RoundRectShape constructor.
  ///
  /// Specifies an outer (round)rect and an optional inner (round)rect.
  ///@param outerRadii An array of 8 radius values, for the outer roundrect.
  ///                   The first two floats are for the top-left corner
  ///                   (remaining pairs correspond clockwise). For no rounded
  ///                   corners on the outer rectangle, pass {@code null}.
  /// This value may be {@code null}.
  ///@param inset A RectF that specifies the distance from the inner
  ///              rect to each side of the outer rect. For no inner, pass
  ///              {@code null}.
  /// This value may be {@code null}.
  ///@param innerRadii An array of 8 radius values, for the inner roundrect.
  ///                   The first two floats are for the top-left corner
  ///                   (remaining pairs correspond clockwise). For no rounded
  ///                   corners on the inner rectangle, pass {@code null}. If
  ///                   inset parameter is {@code null}, this parameter is
  ///                   ignored.
  ///
  /// This value may be {@code null}.
  RoundRectShape.ctor1(
      jni.JniObject outerRadii, rectf_.RectF inset, jni.JniObject innerRadii)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          outerRadii.reference,
          inset.reference,
          innerRadii.reference
        ]).object);

  static final _id_draw = jniAccessors.getMethodIDOf(_classRef, "draw",
      "(Landroid/graphics/Canvas;Landroid/graphics/Paint;)V");

  /// from: public void draw(android.graphics.Canvas canvas, android.graphics.Paint paint)
  void draw(canvas_.Canvas canvas, paint_.Paint paint) =>
      jniAccessors.callMethodWithArgs(reference, _id_draw, jni.JniType.voidType,
          [canvas.reference, paint.reference]).check();

  static final _id_getOutline = jniAccessors.getMethodIDOf(
      _classRef, "getOutline", "(Landroid/graphics/Outline;)V");

  /// from: public void getOutline(android.graphics.Outline outline)
  void getOutline(outline_.Outline outline) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getOutline,
      jni.JniType.voidType,
      [outline.reference]).check();

  static final _id_onResize =
      jniAccessors.getMethodIDOf(_classRef, "onResize", "(FF)V");

  /// from: protected void onResize(float w, float h)
  void onResize(double w, double h) => jniAccessors.callMethodWithArgs(
      reference, _id_onResize, jni.JniType.voidType, [w, h]).check();

  static final _id_clone2 = jniAccessors.getMethodIDOf(_classRef, "clone",
      "()Landroid/graphics/drawable/shapes/RoundRectShape;");

  /// from: public android.graphics.drawable.shapes.RoundRectShape clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RoundRectShape clone2() =>
      RoundRectShape.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone2, jni.JniType.objectType, []).object);
}
