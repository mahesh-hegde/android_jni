// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Shape.dart" as shape_;

import "../../Canvas.dart" as canvas_;

import "../../Paint.dart" as paint_;

import "../../Outline.dart" as outline_;

import "../../RectF.dart" as rectf_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.shapes.RectShape
///
/// Defines a rectangle shape.
///
/// The rectangle can be drawn to a Canvas with its own draw() method,
/// but more graphical control is available if you instead pass
/// the RectShape to a android.graphics.drawable.ShapeDrawable.
class RectShape extends shape_.Shape {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/shapes/RectShape");
  RectShape.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RectShape()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_draw = jniAccessors.getMethodIDOf(_classRef, "draw",
      "(Landroid/graphics/Canvas;Landroid/graphics/Paint;)V");

  /// from: public void draw(android.graphics.Canvas canvas, android.graphics.Paint paint)
  void draw(canvas_.Canvas canvas, paint_.Paint paint) =>
      jniAccessors.callMethodWithArgs(reference, _id_draw, jni.JniType.voidType,
          [canvas.reference, paint.reference]).check();

  static final _id_getOutline = jniAccessors.getMethodIDOf(
      _classRef, "getOutline", "(Landroid/graphics/Outline;)V");

  /// from: public void getOutline(android.graphics.Outline outline)
  void getOutline(outline_.Outline outline) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getOutline,
      jni.JniType.voidType,
      [outline.reference]).check();

  static final _id_onResize =
      jniAccessors.getMethodIDOf(_classRef, "onResize", "(FF)V");

  /// from: protected void onResize(float width, float height)
  void onResize(double width, double height) => jniAccessors.callMethodWithArgs(
      reference, _id_onResize, jni.JniType.voidType, [width, height]).check();

  static final _id_rect = jniAccessors.getMethodIDOf(
      _classRef, "rect", "()Landroid/graphics/RectF;");

  /// from: protected final android.graphics.RectF rect()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the RectF that defines this rectangle's bounds.
  rectf_.RectF rect() => rectf_.RectF.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_rect, jni.JniType.objectType, []).object);

  static final _id_clone1 = jniAccessors.getMethodIDOf(
      _classRef, "clone", "()Landroid/graphics/drawable/shapes/RectShape;");

  /// from: public android.graphics.drawable.shapes.RectShape clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RectShape clone1() => RectShape.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_clone1, jni.JniType.objectType, []).object);
}
