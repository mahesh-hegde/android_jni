// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../net/Uri.dart" as uri_;

import "../../content/Context.dart" as context_;

import "../../os/Message.dart" as message_;

import "../../os/Handler.dart" as handler_;

import "Drawable.dart" as drawable_;

import "../Bitmap.dart" as bitmap_;

import "../../content/res/ColorStateList.dart" as colorstatelist_;

import "../PorterDuff.dart" as porterduff_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.Icon
///
/// An umbrella container for several serializable graphics representations, including Bitmaps,
/// compressed bitmap images (e.g.&nbsp;JPG or PNG), and drawable resources (including vectors).
///
/// <a href="https://developer.android.com/training/displaying-bitmaps/index.html">Much ink</a>
/// has been spilled on the best way to load images, and many clients may have different needs when
/// it comes to threading and fetching. This class is therefore focused on encapsulation rather than
/// behavior.
class Icon extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/Icon");
  Icon.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.graphics.drawable.Icon> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int TYPE_ADAPTIVE_BITMAP
  ///
  /// An icon that was created using Icon\#createWithAdaptiveBitmap.
  ///@see \#getType
  static const TYPE_ADAPTIVE_BITMAP = 5;

  /// from: static public final int TYPE_BITMAP
  ///
  /// An icon that was created using Icon\#createWithBitmap(Bitmap).
  ///@see \#getType
  static const TYPE_BITMAP = 1;

  /// from: static public final int TYPE_DATA
  ///
  /// An icon that was created using Icon\#createWithData(byte[], int, int).
  ///@see \#getType
  static const TYPE_DATA = 3;

  /// from: static public final int TYPE_RESOURCE
  ///
  /// An icon that was created using Icon\#createWithResource.
  ///@see \#getType
  static const TYPE_RESOURCE = 2;

  /// from: static public final int TYPE_URI
  ///
  /// An icon that was created using Icon\#createWithContentUri
  /// or Icon\#createWithFilePath(String).
  ///@see \#getType
  static const TYPE_URI = 4;

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public int getType()
  ///
  /// Gets the type of the icon provided.
  ///
  /// Note that new types may be added later, so callers should guard against other
  /// types being returned.
  ///@return Value is android.graphics.drawable.Icon\#TYPE_BITMAP, android.graphics.drawable.Icon\#TYPE_RESOURCE, android.graphics.drawable.Icon\#TYPE_DATA, android.graphics.drawable.Icon\#TYPE_URI, or android.graphics.drawable.Icon\#TYPE_ADAPTIVE_BITMAP
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_getResPackage = jniAccessors.getMethodIDOf(
      _classRef, "getResPackage", "()Ljava/lang/String;");

  /// from: public java.lang.String getResPackage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the package used to create this icon.
  ///
  /// Only valid for icons of type \#TYPE_RESOURCE.
  /// Note: This package may not be available if referenced in the future, and it is
  /// up to the caller to ensure safety if this package is re-used and/or persisted.
  ///@return This value will never be {@code null}.
  jni.JniString getResPackage() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getResPackage, jni.JniType.objectType, []).object);

  static final _id_getResId =
      jniAccessors.getMethodIDOf(_classRef, "getResId", "()I");

  /// from: public int getResId()
  ///
  /// Gets the resource used to create this icon.
  ///
  /// Only valid for icons of type \#TYPE_RESOURCE.
  /// Note: This resource may not be available if the application changes at all, and it is
  /// up to the caller to ensure safety if this resource is re-used and/or persisted.
  int getResId() => jniAccessors.callMethodWithArgs(
      reference, _id_getResId, jni.JniType.intType, []).integer;

  static final _id_getUri =
      jniAccessors.getMethodIDOf(_classRef, "getUri", "()Landroid/net/Uri;");

  /// from: public android.net.Uri getUri()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the uri used to create this icon.
  ///
  /// Only valid for icons of type \#TYPE_URI.
  /// Note: This uri may not be available in the future, and it is
  /// up to the caller to ensure safety if this uri is re-used and/or persisted.
  ///@return This value will never be {@code null}.
  uri_.Uri getUri() => uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getUri, jni.JniType.objectType, []).object);

  static final _id_loadDrawableAsync = jniAccessors.getMethodIDOf(_classRef,
      "loadDrawableAsync", "(Landroid/content/Context;Landroid/os/Message;)V");

  /// from: public void loadDrawableAsync(android.content.Context context, android.os.Message andThen)
  ///
  /// Invokes \#loadDrawable(Context) on the given android.os.Handler Handler
  /// and then sends <code>andThen</code> to the same Handler when finished.
  ///@param context android.content.Context Context in which to load the drawable; see
  ///                \#loadDrawable(Context)
  ///@param andThen android.os.Message to send to its target once the drawable
  ///                is available. The android.os.Message\#obj obj
  ///                property is populated with the Drawable.
  void loadDrawableAsync(context_.Context context, message_.Message andThen) =>
      jniAccessors.callMethodWithArgs(reference, _id_loadDrawableAsync,
          jni.JniType.voidType, [context.reference, andThen.reference]).check();

  static final _id_loadDrawableAsync1 = jniAccessors.getMethodIDOf(
      _classRef,
      "loadDrawableAsync",
      "(Landroid/content/Context;Landroid/graphics/drawable/Icon\$OnDrawableLoadedListener;Landroid/os/Handler;)V");

  /// from: public void loadDrawableAsync(android.content.Context context, android.graphics.drawable.Icon.OnDrawableLoadedListener listener, android.os.Handler handler)
  ///
  /// Invokes \#loadDrawable(Context) on a background thread and notifies the <code>
  /// OnDrawableLoadedListener\#onDrawableLoaded listener </code> on the {@code handler}
  /// when finished.
  ///@param context Context Context in which to load the drawable; see
  ///                \#loadDrawable(Context)
  ///@param listener to be OnDrawableLoadedListener\#onDrawableLoaded notified when
  ///                 \#loadDrawable(Context) finished
  ///@param handler Handler on which to notify the {@code listener}
  void loadDrawableAsync1(context_.Context context,
          Icon_OnDrawableLoadedListener listener, handler_.Handler handler) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_loadDrawableAsync1,
          jni.JniType.voidType,
          [context.reference, listener.reference, handler.reference]).check();

  static final _id_loadDrawable = jniAccessors.getMethodIDOf(
      _classRef,
      "loadDrawable",
      "(Landroid/content/Context;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadDrawable(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Drawable that can be used to draw the image inside this Icon, constructing it
  /// if necessary. Depending on the type of image, this may not be something you want to do on
  /// the UI thread, so consider using
  /// \#loadDrawableAsync(Context, Message) loadDrawableAsync instead.
  ///@param context android.content.Context Context in which to load the drawable; used
  ///                to access android.content.res.Resources Resources, for example.
  ///@return A fresh instance of a drawable for this image, yours to keep.
  drawable_.Drawable loadDrawable(context_.Context context) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_loadDrawable,
          jni.JniType.objectType,
          [context.reference]).object);

  static final _id_createWithResource = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createWithResource",
      "(Landroid/content/Context;I)Landroid/graphics/drawable/Icon;");

  /// from: static public android.graphics.drawable.Icon createWithResource(android.content.Context context, int resId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an Icon pointing to a drawable resource.
  ///@param context The context for the application whose resources should be used to resolve the
  ///                given resource ID.
  ///@param resId ID of the drawable resource
  static Icon createWithResource(context_.Context context, int resId) =>
      Icon.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createWithResource,
          jni.JniType.objectType,
          [context.reference, resId]).object);

  static final _id_createWithResource1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createWithResource",
      "(Ljava/lang/String;I)Landroid/graphics/drawable/Icon;");

  /// from: static public android.graphics.drawable.Icon createWithResource(java.lang.String resPackage, int resId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an Icon pointing to a drawable resource.
  ///@param resPackage Name of the package containing the resource in question
  ///@param resId ID of the drawable resource
  static Icon createWithResource1(jni.JniString resPackage, int resId) =>
      Icon.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createWithResource1,
          jni.JniType.objectType,
          [resPackage.reference, resId]).object);

  static final _id_createWithBitmap = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createWithBitmap",
      "(Landroid/graphics/Bitmap;)Landroid/graphics/drawable/Icon;");

  /// from: static public android.graphics.drawable.Icon createWithBitmap(android.graphics.Bitmap bits)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an Icon pointing to a bitmap in memory.
  ///@param bits A valid android.graphics.Bitmap object
  static Icon createWithBitmap(bitmap_.Bitmap bits) =>
      Icon.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createWithBitmap,
          jni.JniType.objectType,
          [bits.reference]).object);

  static final _id_createWithAdaptiveBitmap = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createWithAdaptiveBitmap",
      "(Landroid/graphics/Bitmap;)Landroid/graphics/drawable/Icon;");

  /// from: static public android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap bits)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an Icon pointing to a bitmap in memory that follows the icon design guideline defined
  /// by AdaptiveIconDrawable.
  ///@param bits A valid android.graphics.Bitmap object
  static Icon createWithAdaptiveBitmap(bitmap_.Bitmap bits) =>
      Icon.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createWithAdaptiveBitmap,
          jni.JniType.objectType,
          [bits.reference]).object);

  static final _id_createWithData = jniAccessors.getStaticMethodIDOf(
      _classRef, "createWithData", "([BII)Landroid/graphics/drawable/Icon;");

  /// from: static public android.graphics.drawable.Icon createWithData(byte[] data, int offset, int length)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an Icon pointing to a compressed bitmap stored in a byte array.
  ///@param data Byte array storing compressed bitmap data of a type that
  ///             android.graphics.BitmapFactory
  ///             can decode (see android.graphics.Bitmap.CompressFormat).
  ///@param offset Offset into <code>data</code> at which the bitmap data starts
  ///@param length Length of the bitmap data
  static Icon createWithData(jni.JniObject data, int offset, int length) =>
      Icon.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createWithData,
          jni.JniType.objectType,
          [data.reference, offset, length]).object);

  static final _id_createWithContentUri = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createWithContentUri",
      "(Ljava/lang/String;)Landroid/graphics/drawable/Icon;");

  /// from: static public android.graphics.drawable.Icon createWithContentUri(java.lang.String uri)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an Icon pointing to an image file specified by URI.
  ///@param uri A uri referring to local content:// or file:// image data.
  static Icon createWithContentUri(jni.JniString uri) =>
      Icon.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createWithContentUri,
          jni.JniType.objectType,
          [uri.reference]).object);

  static final _id_createWithContentUri1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createWithContentUri",
      "(Landroid/net/Uri;)Landroid/graphics/drawable/Icon;");

  /// from: static public android.graphics.drawable.Icon createWithContentUri(android.net.Uri uri)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an Icon pointing to an image file specified by URI.
  ///@param uri A uri referring to local content:// or file:// image data.
  static Icon createWithContentUri1(uri_.Uri uri) =>
      Icon.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createWithContentUri1,
          jni.JniType.objectType,
          [uri.reference]).object);

  static final _id_setTint = jniAccessors.getMethodIDOf(
      _classRef, "setTint", "(I)Landroid/graphics/drawable/Icon;");

  /// from: public android.graphics.drawable.Icon setTint(int tint)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Store a color to use whenever this Icon is drawn.
  ///@param tint a color, as in Drawable\#setTint(int)
  ///@return this same object, for use in chained construction
  Icon setTint(int tint) => Icon.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_setTint, jni.JniType.objectType, [tint]).object);

  static final _id_setTintList = jniAccessors.getMethodIDOf(
      _classRef,
      "setTintList",
      "(Landroid/content/res/ColorStateList;)Landroid/graphics/drawable/Icon;");

  /// from: public android.graphics.drawable.Icon setTintList(android.content.res.ColorStateList tintList)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Store a color to use whenever this Icon is drawn.
  ///@param tintList as in Drawable\#setTintList(ColorStateList), null to remove tint
  ///@return this same object, for use in chained construction
  Icon setTintList(colorstatelist_.ColorStateList tintList) =>
      Icon.fromRef(jniAccessors.callMethodWithArgs(reference, _id_setTintList,
          jni.JniType.objectType, [tintList.reference]).object);

  static final _id_setTintMode = jniAccessors.getMethodIDOf(
      _classRef,
      "setTintMode",
      "(Landroid/graphics/PorterDuff\$Mode;)Landroid/graphics/drawable/Icon;");

  /// from: public android.graphics.drawable.Icon setTintMode(android.graphics.PorterDuff.Mode mode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Store a blending mode to use whenever this Icon is drawn.
  ///@param mode a blending mode, as in Drawable\#setTintMode(PorterDuff.Mode), may be null
  ///@return this same object, for use in chained construction
  Icon setTintMode(porterduff_.PorterDuff_Mode mode) =>
      Icon.fromRef(jniAccessors.callMethodWithArgs(reference, _id_setTintMode,
          jni.JniType.objectType, [mode.reference]).object);

  static final _id_createWithFilePath = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createWithFilePath",
      "(Ljava/lang/String;)Landroid/graphics/drawable/Icon;");

  /// from: static public android.graphics.drawable.Icon createWithFilePath(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an Icon pointing to an image file specified by path.
  ///@param path A path to a file that contains compressed bitmap data of
  ///           a type that android.graphics.BitmapFactory can decode.
  static Icon createWithFilePath(jni.JniString path) =>
      Icon.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createWithFilePath,
          jni.JniType.objectType,
          [path.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Parcelable interface
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.graphics.drawable.Icon$OnDrawableLoadedListener
///
/// Implement this interface to receive a callback when
/// \#loadDrawableAsync(Context, OnDrawableLoadedListener, Handler) loadDrawableAsync
/// is finished and your Drawable is ready.
class Icon_OnDrawableLoadedListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/graphics/drawable/Icon\$OnDrawableLoadedListener");
  Icon_OnDrawableLoadedListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onDrawableLoaded = jniAccessors.getMethodIDOf(
      _classRef, "onDrawableLoaded", "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public abstract void onDrawableLoaded(android.graphics.drawable.Drawable d)
  void onDrawableLoaded(drawable_.Drawable d) =>
      jniAccessors.callMethodWithArgs(reference, _id_onDrawableLoaded,
          jni.JniType.voidType, [d.reference]).check();
}
