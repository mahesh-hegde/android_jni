// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "DrawableContainer.dart" as drawablecontainer_;

import "Drawable.dart" as drawable_;

import "../../content/res/Resources.dart" as resources_;

import "../../util/AttributeSet.dart" as attributeset_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.AnimationDrawable
///
/// An object used to create frame-by-frame animations, defined by a series of
/// Drawable objects, which can be used as a View object's background.
///
/// The simplest way to create a frame-by-frame animation is to define the
/// animation in an XML file, placed in the res/drawable/ folder, and set it as
/// the background to a View object. Then, call \#start() to run the
/// animation.
///
/// An AnimationDrawable defined in XML consists of a single
/// {@code <animation-list>} element and a series of nested
/// {@code <item>} tags. Each item defines a frame of the animation. See
/// the example below.
///
/// spin_animation.xml file in res/drawable/ folder:
/// <pre>
/// &lt;!-- Animation frames are wheel0.png through wheel5.png
///     files inside the res/drawable/ folder --&gt;
/// &lt;animation-list android:id=&quot;@+id/selected&quot; android:oneshot=&quot;false&quot;&gt;
///    &lt;item android:drawable=&quot;@drawable/wheel0&quot; android:duration=&quot;50&quot; /&gt;
///    &lt;item android:drawable=&quot;@drawable/wheel1&quot; android:duration=&quot;50&quot; /&gt;
///    &lt;item android:drawable=&quot;@drawable/wheel2&quot; android:duration=&quot;50&quot; /&gt;
///    &lt;item android:drawable=&quot;@drawable/wheel3&quot; android:duration=&quot;50&quot; /&gt;
///    &lt;item android:drawable=&quot;@drawable/wheel4&quot; android:duration=&quot;50&quot; /&gt;
///    &lt;item android:drawable=&quot;@drawable/wheel5&quot; android:duration=&quot;50&quot; /&gt;
/// &lt;/animation-list&gt;</pre>
///
/// Here is the code to load and play this animation.
/// <pre>
/// // Load the ImageView that will host the animation and
/// // set its background to our AnimationDrawable XML resource.
/// ImageView img = (ImageView)findViewById(R.id.spinning_wheel_image);
/// img.setBackgroundResource(R.drawable.spin_animation);
///
/// // Get the background, which has been compiled to an AnimationDrawable object.
/// AnimationDrawable frameAnimation = (AnimationDrawable) img.getBackground();
///
/// // Start the animation (looped playback by default).
/// frameAnimation.start();
/// </pre>
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about animating with {@code AnimationDrawable}, read the
/// <a href="{@docRoot}guide/topics/graphics/drawable-animation.html">Drawable Animation</a>
/// developer guide.
///
/// </div>
///@attr ref android.R.styleable\#AnimationDrawable_visible
///@attr ref android.R.styleable\#AnimationDrawable_variablePadding
///@attr ref android.R.styleable\#AnimationDrawable_oneshot
///@attr ref android.R.styleable\#AnimationDrawableItem_duration
///@attr ref android.R.styleable\#AnimationDrawableItem_drawable
class AnimationDrawable extends drawablecontainer_.DrawableContainer {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/AnimationDrawable");
  AnimationDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AnimationDrawable()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setVisible =
      jniAccessors.getMethodIDOf(_classRef, "setVisible", "(ZZ)Z");

  /// from: public boolean setVisible(boolean visible, boolean restart)
  ///
  /// Sets whether this AnimationDrawable is visible.
  ///
  /// When the drawable becomes invisible, it will pause its animation. A subsequent change to
  /// visible with <code>restart</code> set to true will restart the animation from the
  /// first frame. If <code>restart</code> is false, the drawable will resume from the most recent
  /// frame. If the drawable has already reached the last frame, it will then loop back to the
  /// first frame, unless it's a one shot drawable (set through \#setOneShot(boolean)),
  /// in which case, it will stay on the last frame.
  ///@param visible true if visible, false otherwise
  ///@param restart when visible, true to force the animation to restart
  ///                from the first frame
  ///@return true if the new visibility is different than its previous state
  bool setVisible(bool visible, bool restart) =>
      jniAccessors.callMethodWithArgs(reference, _id_setVisible,
          jni.JniType.booleanType, [visible, restart]).boolean;

  static final _id_start =
      jniAccessors.getMethodIDOf(_classRef, "start", "()V");

  /// from: public void start()
  ///
  /// Starts the animation from the first frame, looping if necessary. This method has no effect
  /// if the animation is running.
  ///
  /// <strong>Note:</strong> Do not call this in the
  /// android.app.Activity\#onCreate method of your activity, because
  /// the AnimationDrawable is not yet fully attached to the window.
  /// If you want to play the animation immediately without requiring
  /// interaction, then you might want to call it from the
  /// android.app.Activity\#onWindowFocusChanged method in your
  /// activity, which will get called when Android brings your window into
  /// focus.
  ///@see \#isRunning()
  ///@see \#stop()
  void start() => jniAccessors.callMethodWithArgs(
      reference, _id_start, jni.JniType.voidType, []).check();

  static final _id_stop = jniAccessors.getMethodIDOf(_classRef, "stop", "()V");

  /// from: public void stop()
  ///
  /// Stops the animation at the current frame. This method has no effect if the animation is not
  /// running.
  ///@see \#isRunning()
  ///@see \#start()
  void stop() => jniAccessors.callMethodWithArgs(
      reference, _id_stop, jni.JniType.voidType, []).check();

  static final _id_isRunning =
      jniAccessors.getMethodIDOf(_classRef, "isRunning", "()Z");

  /// from: public boolean isRunning()
  ///
  /// Indicates whether the animation is currently running or not.
  ///@return true if the animation is running, false otherwise
  bool isRunning() => jniAccessors.callMethodWithArgs(
      reference, _id_isRunning, jni.JniType.booleanType, []).boolean;

  static final _id_run = jniAccessors.getMethodIDOf(_classRef, "run", "()V");

  /// from: public void run()
  ///
  /// This method exists for implementation purpose only and should not be
  /// called directly. Invoke \#start() instead.
  ///@see \#start()
  void run() => jniAccessors
      .callMethodWithArgs(reference, _id_run, jni.JniType.voidType, []).check();

  static final _id_unscheduleSelf1 = jniAccessors.getMethodIDOf(
      _classRef, "unscheduleSelf", "(Ljava/lang/Runnable;)V");

  /// from: public void unscheduleSelf(java.lang.Runnable what)
  void unscheduleSelf1(jni.JniObject what) => jniAccessors.callMethodWithArgs(
      reference,
      _id_unscheduleSelf1,
      jni.JniType.voidType,
      [what.reference]).check();

  static final _id_getNumberOfFrames =
      jniAccessors.getMethodIDOf(_classRef, "getNumberOfFrames", "()I");

  /// from: public int getNumberOfFrames()
  ///
  /// @return The number of frames in the animation
  int getNumberOfFrames() => jniAccessors.callMethodWithArgs(
      reference, _id_getNumberOfFrames, jni.JniType.intType, []).integer;

  static final _id_getFrame = jniAccessors.getMethodIDOf(
      _classRef, "getFrame", "(I)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getFrame(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The Drawable at the specified frame index
  drawable_.Drawable getFrame(int index) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFrame, jni.JniType.objectType, [index]).object);

  static final _id_getDuration =
      jniAccessors.getMethodIDOf(_classRef, "getDuration", "(I)I");

  /// from: public int getDuration(int i)
  ///
  /// @return The duration in milliseconds of the frame at the
  ///         specified index
  int getDuration(int i) => jniAccessors.callMethodWithArgs(
      reference, _id_getDuration, jni.JniType.intType, [i]).integer;

  static final _id_isOneShot =
      jniAccessors.getMethodIDOf(_classRef, "isOneShot", "()Z");

  /// from: public boolean isOneShot()
  ///
  /// @return True of the animation will play once, false otherwise
  bool isOneShot() => jniAccessors.callMethodWithArgs(
      reference, _id_isOneShot, jni.JniType.booleanType, []).boolean;

  static final _id_setOneShot =
      jniAccessors.getMethodIDOf(_classRef, "setOneShot", "(Z)V");

  /// from: public void setOneShot(boolean oneShot)
  ///
  /// Sets whether the animation should play once or repeat.
  ///@param oneShot Pass true if the animation should only play once
  void setOneShot(bool oneShot) => jniAccessors.callMethodWithArgs(
      reference, _id_setOneShot, jni.JniType.voidType, [oneShot]).check();

  static final _id_addFrame = jniAccessors.getMethodIDOf(
      _classRef, "addFrame", "(Landroid/graphics/drawable/Drawable;I)V");

  /// from: public void addFrame(android.graphics.drawable.Drawable frame, int duration)
  ///
  /// Adds a frame to the animation
  ///@param frame The frame to add
  /// This value must never be {@code null}.
  ///@param duration How long in milliseconds the frame should appear
  void addFrame(drawable_.Drawable frame, int duration) =>
      jniAccessors.callMethodWithArgs(reference, _id_addFrame,
          jni.JniType.voidType, [frame.reference, duration]).check();

  static final _id_inflate2 = jniAccessors.getMethodIDOf(_classRef, "inflate",
      "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources\$Theme;)V");

  /// from: public void inflate(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs, android.content.res.Resources.Theme theme)
  void inflate2(resources_.Resources r, jni.JniObject parser,
          attributeset_.AttributeSet attrs, resources_.Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_inflate2, jni.JniType.voidType, [
        r.reference,
        parser.reference,
        attrs.reference,
        theme.reference
      ]).check();

  static final _id_mutate = jniAccessors.getMethodIDOf(
      _classRef, "mutate", "()Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable mutate()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return This value will never be {@code null}.
  drawable_.Drawable mutate() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_mutate, jni.JniType.objectType, []).object);

  static final _id_setConstantState = jniAccessors.getMethodIDOf(
      _classRef,
      "setConstantState",
      "(Landroid/graphics/drawable/DrawableContainer\$DrawableContainerState;)V");

  /// from: protected void setConstantState(android.graphics.drawable.DrawableContainer.DrawableContainerState state)
  ///
  /// @param state This value must never be {@code null}.
  void setConstantState(
          drawablecontainer_.DrawableContainer_DrawableContainerState state) =>
      jniAccessors.callMethodWithArgs(reference, _id_setConstantState,
          jni.JniType.voidType, [state.reference]).check();
}
