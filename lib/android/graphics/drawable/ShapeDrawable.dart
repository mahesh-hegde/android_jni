// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Drawable.dart" as drawable_;

import "shapes/Shape.dart" as shape_;

import "../Paint.dart" as paint_;

import "../Rect.dart" as rect_;

import "../Canvas.dart" as canvas_;

import "../../content/res/ColorStateList.dart" as colorstatelist_;

import "../PorterDuff.dart" as porterduff_;

import "../ColorFilter.dart" as colorfilter_;

import "../../content/res/Resources.dart" as resources_;

import "../../util/AttributeSet.dart" as attributeset_;

import "../Outline.dart" as outline_;

import "../Shader.dart" as shader_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.drawable.ShapeDrawable
///
/// A Drawable object that draws primitive shapes. A ShapeDrawable takes a
/// android.graphics.drawable.shapes.Shape object and manages its
/// presence on the screen. If no Shape is given, then the ShapeDrawable will
/// default to a android.graphics.drawable.shapes.RectShape.
///
/// This object can be defined in an XML file with the <code>&lt;shape></code>
/// element.
///
///
/// <div class="special reference"> <h3>Developer Guides</h3>
///
/// For more information about how to use ShapeDrawable, read the <a href="{@docRoot}guide/topics/graphics/2d-graphics.html\#shape-drawable">
/// Canvas and Drawables</a> document. For more information about defining a
/// ShapeDrawable in XML, read the
/// <a href="{@docRoot}guide/topics/resources/drawable-resource.html\#Shape">
/// Drawable Resources</a> document.
///
///
/// </div>
///@attr ref android.R.styleable\#ShapeDrawablePadding_left
///@attr ref android.R.styleable\#ShapeDrawablePadding_top
///@attr ref android.R.styleable\#ShapeDrawablePadding_right
///@attr ref android.R.styleable\#ShapeDrawablePadding_bottom
///@attr ref android.R.styleable\#ShapeDrawable_color
///@attr ref android.R.styleable\#ShapeDrawable_width
///@attr ref android.R.styleable\#ShapeDrawable_height
class ShapeDrawable extends drawable_.Drawable {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/drawable/ShapeDrawable");
  ShapeDrawable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// ShapeDrawable constructor.
  ShapeDrawable()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/drawable/shapes/Shape;)V");

  /// from: public void <init>(android.graphics.drawable.shapes.Shape s)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a ShapeDrawable with a specified Shape.
  ///@param s the Shape that this ShapeDrawable should be
  ShapeDrawable.ctor1(shape_.Shape s)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [s.reference]).object);

  static final _id_getShape = jniAccessors.getMethodIDOf(
      _classRef, "getShape", "()Landroid/graphics/drawable/shapes/Shape;");

  /// from: public android.graphics.drawable.shapes.Shape getShape()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Shape of this ShapeDrawable.
  shape_.Shape getShape() =>
      shape_.Shape.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getShape, jni.JniType.objectType, []).object);

  static final _id_setShape = jniAccessors.getMethodIDOf(
      _classRef, "setShape", "(Landroid/graphics/drawable/shapes/Shape;)V");

  /// from: public void setShape(android.graphics.drawable.shapes.Shape s)
  ///
  /// Sets the Shape of this ShapeDrawable.
  void setShape(shape_.Shape s) => jniAccessors.callMethodWithArgs(
      reference, _id_setShape, jni.JniType.voidType, [s.reference]).check();

  static final _id_setShaderFactory = jniAccessors.getMethodIDOf(
      _classRef,
      "setShaderFactory",
      "(Landroid/graphics/drawable/ShapeDrawable\$ShaderFactory;)V");

  /// from: public void setShaderFactory(android.graphics.drawable.ShapeDrawable.ShaderFactory fact)
  ///
  /// Sets a ShaderFactory to which requests for a
  /// android.graphics.Shader object will be made.
  ///@param fact an instance of your ShaderFactory implementation
  void setShaderFactory(ShapeDrawable_ShaderFactory fact) =>
      jniAccessors.callMethodWithArgs(reference, _id_setShaderFactory,
          jni.JniType.voidType, [fact.reference]).check();

  static final _id_getShaderFactory = jniAccessors.getMethodIDOf(
      _classRef,
      "getShaderFactory",
      "()Landroid/graphics/drawable/ShapeDrawable\$ShaderFactory;");

  /// from: public android.graphics.drawable.ShapeDrawable.ShaderFactory getShaderFactory()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the ShaderFactory used by this ShapeDrawable for requesting a
  /// android.graphics.Shader.
  ShapeDrawable_ShaderFactory getShaderFactory() =>
      ShapeDrawable_ShaderFactory.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getShaderFactory, jni.JniType.objectType, []).object);

  static final _id_getPaint = jniAccessors.getMethodIDOf(
      _classRef, "getPaint", "()Landroid/graphics/Paint;");

  /// from: public android.graphics.Paint getPaint()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Paint used to draw the shape.
  paint_.Paint getPaint() =>
      paint_.Paint.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPaint, jni.JniType.objectType, []).object);

  static final _id_setPadding =
      jniAccessors.getMethodIDOf(_classRef, "setPadding", "(IIII)V");

  /// from: public void setPadding(int left, int top, int right, int bottom)
  ///
  /// Sets padding for the shape.
  ///@param left padding for the left side (in pixels)
  ///@param top padding for the top (in pixels)
  ///@param right padding for the right side (in pixels)
  ///@param bottom padding for the bottom (in pixels)
  void setPadding(int left, int top, int right, int bottom) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPadding,
          jni.JniType.voidType, [left, top, right, bottom]).check();

  static final _id_setPadding1 = jniAccessors.getMethodIDOf(
      _classRef, "setPadding", "(Landroid/graphics/Rect;)V");

  /// from: public void setPadding(android.graphics.Rect padding)
  ///
  /// Sets padding for this shape, defined by a Rect object. Define the padding
  /// in the Rect object as: left, top, right, bottom.
  void setPadding1(rect_.Rect padding) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setPadding1,
      jni.JniType.voidType,
      [padding.reference]).check();

  static final _id_setIntrinsicWidth =
      jniAccessors.getMethodIDOf(_classRef, "setIntrinsicWidth", "(I)V");

  /// from: public void setIntrinsicWidth(int width)
  ///
  /// Sets the intrinsic (default) width for this shape.
  ///@param width the intrinsic width (in pixels)
  void setIntrinsicWidth(int width) => jniAccessors.callMethodWithArgs(
      reference, _id_setIntrinsicWidth, jni.JniType.voidType, [width]).check();

  static final _id_setIntrinsicHeight =
      jniAccessors.getMethodIDOf(_classRef, "setIntrinsicHeight", "(I)V");

  /// from: public void setIntrinsicHeight(int height)
  ///
  /// Sets the intrinsic (default) height for this shape.
  ///@param height the intrinsic height (in pixels)
  void setIntrinsicHeight(int height) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setIntrinsicHeight,
      jni.JniType.voidType,
      [height]).check();

  static final _id_getIntrinsicWidth =
      jniAccessors.getMethodIDOf(_classRef, "getIntrinsicWidth", "()I");

  /// from: public int getIntrinsicWidth()
  int getIntrinsicWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getIntrinsicWidth, jni.JniType.intType, []).integer;

  static final _id_getIntrinsicHeight =
      jniAccessors.getMethodIDOf(_classRef, "getIntrinsicHeight", "()I");

  /// from: public int getIntrinsicHeight()
  int getIntrinsicHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getIntrinsicHeight, jni.JniType.intType, []).integer;

  static final _id_getPadding = jniAccessors.getMethodIDOf(
      _classRef, "getPadding", "(Landroid/graphics/Rect;)Z");

  /// from: public boolean getPadding(android.graphics.Rect padding)
  bool getPadding(rect_.Rect padding) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getPadding,
      jni.JniType.booleanType,
      [padding.reference]).boolean;

  static final _id_onDraw = jniAccessors.getMethodIDOf(_classRef, "onDraw",
      "(Landroid/graphics/drawable/shapes/Shape;Landroid/graphics/Canvas;Landroid/graphics/Paint;)V");

  /// from: protected void onDraw(android.graphics.drawable.shapes.Shape shape, android.graphics.Canvas canvas, android.graphics.Paint paint)
  ///
  /// Called from the drawable's draw() method after the canvas has been set to
  /// draw the shape at (0,0). Subclasses can override for special effects such
  /// as multiple layers, stroking, etc.
  void onDraw(shape_.Shape shape, canvas_.Canvas canvas, paint_.Paint paint) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onDraw,
          jni.JniType.voidType,
          [shape.reference, canvas.reference, paint.reference]).check();

  static final _id_draw = jniAccessors.getMethodIDOf(
      _classRef, "draw", "(Landroid/graphics/Canvas;)V");

  /// from: public void draw(android.graphics.Canvas canvas)
  void draw(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_draw, jni.JniType.voidType, [canvas.reference]).check();

  static final _id_getChangingConfigurations =
      jniAccessors.getMethodIDOf(_classRef, "getChangingConfigurations", "()I");

  /// from: public int getChangingConfigurations()
  ///
  /// @return Value is either <code>0</code> or a combination of android.content.pm.ActivityInfo\#CONFIG_MCC, android.content.pm.ActivityInfo\#CONFIG_MNC, android.content.pm.ActivityInfo\#CONFIG_LOCALE, android.content.pm.ActivityInfo\#CONFIG_TOUCHSCREEN, android.content.pm.ActivityInfo\#CONFIG_KEYBOARD, android.content.pm.ActivityInfo\#CONFIG_KEYBOARD_HIDDEN, android.content.pm.ActivityInfo\#CONFIG_NAVIGATION, android.content.pm.ActivityInfo\#CONFIG_ORIENTATION, android.content.pm.ActivityInfo\#CONFIG_SCREEN_LAYOUT, android.content.pm.ActivityInfo\#CONFIG_UI_MODE, android.content.pm.ActivityInfo\#CONFIG_SCREEN_SIZE, android.content.pm.ActivityInfo\#CONFIG_SMALLEST_SCREEN_SIZE, android.content.pm.ActivityInfo\#CONFIG_DENSITY, android.content.pm.ActivityInfo\#CONFIG_LAYOUT_DIRECTION, android.content.pm.ActivityInfo\#CONFIG_COLOR_MODE, and android.content.pm.ActivityInfo\#CONFIG_FONT_SCALE
  int getChangingConfigurations() => jniAccessors.callMethodWithArgs(reference,
      _id_getChangingConfigurations, jni.JniType.intType, []).integer;

  static final _id_setAlpha =
      jniAccessors.getMethodIDOf(_classRef, "setAlpha", "(I)V");

  /// from: public void setAlpha(int alpha)
  ///
  /// Set the alpha level for this drawable [0..255]. Note that this drawable
  /// also has a color in its paint, which has an alpha as well. These two
  /// values are automatically combined during drawing. Thus if the color's
  /// alpha is 75% (i.e. 192) and the drawable's alpha is 50% (i.e. 128), then
  /// the combined alpha that will be used during drawing will be 37.5% (i.e.
  /// 96).
  void setAlpha(int alpha) => jniAccessors.callMethodWithArgs(
      reference, _id_setAlpha, jni.JniType.voidType, [alpha]).check();

  static final _id_getAlpha =
      jniAccessors.getMethodIDOf(_classRef, "getAlpha", "()I");

  /// from: public int getAlpha()
  int getAlpha() => jniAccessors.callMethodWithArgs(
      reference, _id_getAlpha, jni.JniType.intType, []).integer;

  static final _id_setTintList = jniAccessors.getMethodIDOf(
      _classRef, "setTintList", "(Landroid/content/res/ColorStateList;)V");

  /// from: public void setTintList(android.content.res.ColorStateList tint)
  void setTintList(colorstatelist_.ColorStateList tint) =>
      jniAccessors.callMethodWithArgs(reference, _id_setTintList,
          jni.JniType.voidType, [tint.reference]).check();

  static final _id_setTintMode = jniAccessors.getMethodIDOf(
      _classRef, "setTintMode", "(Landroid/graphics/PorterDuff\$Mode;)V");

  /// from: public void setTintMode(android.graphics.PorterDuff.Mode tintMode)
  void setTintMode(porterduff_.PorterDuff_Mode tintMode) =>
      jniAccessors.callMethodWithArgs(reference, _id_setTintMode,
          jni.JniType.voidType, [tintMode.reference]).check();

  static final _id_setColorFilter = jniAccessors.getMethodIDOf(
      _classRef, "setColorFilter", "(Landroid/graphics/ColorFilter;)V");

  /// from: public void setColorFilter(android.graphics.ColorFilter colorFilter)
  void setColorFilter(colorfilter_.ColorFilter colorFilter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setColorFilter,
          jni.JniType.voidType, [colorFilter.reference]).check();

  static final _id_getOpacity =
      jniAccessors.getMethodIDOf(_classRef, "getOpacity", "()I");

  /// from: public int getOpacity()
  int getOpacity() => jniAccessors.callMethodWithArgs(
      reference, _id_getOpacity, jni.JniType.intType, []).integer;

  static final _id_setDither =
      jniAccessors.getMethodIDOf(_classRef, "setDither", "(Z)V");

  /// from: public void setDither(boolean dither)
  void setDither(bool dither) => jniAccessors.callMethodWithArgs(
      reference, _id_setDither, jni.JniType.voidType, [dither]).check();

  static final _id_onBoundsChange = jniAccessors.getMethodIDOf(
      _classRef, "onBoundsChange", "(Landroid/graphics/Rect;)V");

  /// from: protected void onBoundsChange(android.graphics.Rect bounds)
  void onBoundsChange(rect_.Rect bounds) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onBoundsChange,
      jni.JniType.voidType,
      [bounds.reference]).check();

  static final _id_onStateChange =
      jniAccessors.getMethodIDOf(_classRef, "onStateChange", "([I)Z");

  /// from: protected boolean onStateChange(int[] stateSet)
  bool onStateChange(jni.JniObject stateSet) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onStateChange,
      jni.JniType.booleanType,
      [stateSet.reference]).boolean;

  static final _id_isStateful =
      jniAccessors.getMethodIDOf(_classRef, "isStateful", "()Z");

  /// from: public boolean isStateful()
  bool isStateful() => jniAccessors.callMethodWithArgs(
      reference, _id_isStateful, jni.JniType.booleanType, []).boolean;

  static final _id_inflateTag = jniAccessors.getMethodIDOf(
      _classRef,
      "inflateTag",
      "(Ljava/lang/String;Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)Z");

  /// from: protected boolean inflateTag(java.lang.String name, android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs)
  ///
  /// Subclasses override this to parse custom subelements. If you handle it,
  /// return true, else return _super.inflateTag(...)_.
  bool inflateTag(jni.JniString name, resources_.Resources r,
          jni.JniObject parser, attributeset_.AttributeSet attrs) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_inflateTag, jni.JniType.booleanType, [
        name.reference,
        r.reference,
        parser.reference,
        attrs.reference
      ]).boolean;

  static final _id_inflate1 = jniAccessors.getMethodIDOf(_classRef, "inflate",
      "(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/res/Resources\$Theme;)V");

  /// from: public void inflate(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.util.AttributeSet attrs, android.content.res.Resources.Theme theme)
  void inflate1(resources_.Resources r, jni.JniObject parser,
          attributeset_.AttributeSet attrs, resources_.Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_inflate1, jni.JniType.voidType, [
        r.reference,
        parser.reference,
        attrs.reference,
        theme.reference
      ]).check();

  static final _id_applyTheme = jniAccessors.getMethodIDOf(
      _classRef, "applyTheme", "(Landroid/content/res/Resources\$Theme;)V");

  /// from: public void applyTheme(android.content.res.Resources.Theme t)
  void applyTheme(resources_.Resources_Theme t) =>
      jniAccessors.callMethodWithArgs(reference, _id_applyTheme,
          jni.JniType.voidType, [t.reference]).check();

  static final _id_getOutline = jniAccessors.getMethodIDOf(
      _classRef, "getOutline", "(Landroid/graphics/Outline;)V");

  /// from: public void getOutline(android.graphics.Outline outline)
  void getOutline(outline_.Outline outline) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getOutline,
      jni.JniType.voidType,
      [outline.reference]).check();

  static final _id_getConstantState = jniAccessors.getMethodIDOf(
      _classRef,
      "getConstantState",
      "()Landroid/graphics/drawable/Drawable\$ConstantState;");

  /// from: public android.graphics.drawable.Drawable.ConstantState getConstantState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  drawable_.Drawable_ConstantState getConstantState() =>
      drawable_.Drawable_ConstantState.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getConstantState, jni.JniType.objectType, []).object);

  static final _id_mutate = jniAccessors.getMethodIDOf(
      _classRef, "mutate", "()Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable mutate()
  /// The returned object must be deleted after use, by calling the `delete` method.
  drawable_.Drawable mutate() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_mutate, jni.JniType.objectType, []).object);
}

/// from: android.graphics.drawable.ShapeDrawable$ShaderFactory
///
/// Base class defines a factory object that is called each time the drawable
/// is resized (has a new width or height). Its resize() method returns a
/// corresponding shader, or null. Implement this class if you'd like your
/// ShapeDrawable to use a special android.graphics.Shader, such as a
/// android.graphics.LinearGradient.
class ShapeDrawable_ShaderFactory extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/graphics/drawable/ShapeDrawable\$ShaderFactory");
  ShapeDrawable_ShaderFactory.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ShapeDrawable_ShaderFactory()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_resize = jniAccessors.getMethodIDOf(
      _classRef, "resize", "(II)Landroid/graphics/Shader;");

  /// from: public abstract android.graphics.Shader resize(int width, int height)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Shader to be drawn when a Drawable is drawn. The
  /// dimensions of the Drawable are passed because they may be needed to
  /// adjust how the Shader is configured for drawing. This is called by
  /// ShapeDrawable.setShape().
  ///@param width the width of the Drawable being drawn
  ///@param height the heigh of the Drawable being drawn
  ///@return the Shader to be drawn
  shader_.Shader resize(int width, int height) =>
      shader_.Shader.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_resize, jni.JniType.objectType, [width, height]).object);
}
