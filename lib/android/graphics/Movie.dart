// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Canvas.dart" as canvas_;

import "Paint.dart" as paint_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.Movie
///
/// @deprecated Prefer android.graphics.drawable.AnimatedImageDrawable.
class Movie extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/graphics/Movie");
  Movie.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_width =
      jniAccessors.getMethodIDOf(_classRef, "width", "()I");

  /// from: public native int width()
  int width() => jniAccessors.callMethodWithArgs(
      reference, _id_width, jni.JniType.intType, []).integer;

  static final _id_height =
      jniAccessors.getMethodIDOf(_classRef, "height", "()I");

  /// from: public native int height()
  int height() => jniAccessors.callMethodWithArgs(
      reference, _id_height, jni.JniType.intType, []).integer;

  static final _id_isOpaque =
      jniAccessors.getMethodIDOf(_classRef, "isOpaque", "()Z");

  /// from: public native boolean isOpaque()
  bool isOpaque() => jniAccessors.callMethodWithArgs(
      reference, _id_isOpaque, jni.JniType.booleanType, []).boolean;

  static final _id_duration =
      jniAccessors.getMethodIDOf(_classRef, "duration", "()I");

  /// from: public native int duration()
  int duration() => jniAccessors.callMethodWithArgs(
      reference, _id_duration, jni.JniType.intType, []).integer;

  static final _id_setTime =
      jniAccessors.getMethodIDOf(_classRef, "setTime", "(I)Z");

  /// from: public native boolean setTime(int relativeMilliseconds)
  bool setTime(int relativeMilliseconds) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setTime,
      jni.JniType.booleanType,
      [relativeMilliseconds]).boolean;

  static final _id_draw = jniAccessors.getMethodIDOf(_classRef, "draw",
      "(Landroid/graphics/Canvas;FFLandroid/graphics/Paint;)V");

  /// from: public void draw(android.graphics.Canvas canvas, float x, float y, android.graphics.Paint paint)
  void draw(canvas_.Canvas canvas, double x, double y, paint_.Paint paint) =>
      jniAccessors.callMethodWithArgs(reference, _id_draw, jni.JniType.voidType,
          [canvas.reference, x, y, paint.reference]).check();

  static final _id_draw1 = jniAccessors.getMethodIDOf(
      _classRef, "draw", "(Landroid/graphics/Canvas;FF)V");

  /// from: public void draw(android.graphics.Canvas canvas, float x, float y)
  void draw1(canvas_.Canvas canvas, double x, double y) =>
      jniAccessors.callMethodWithArgs(reference, _id_draw1,
          jni.JniType.voidType, [canvas.reference, x, y]).check();

  static final _id_decodeStream = jniAccessors.getStaticMethodIDOf(_classRef,
      "decodeStream", "(Ljava/io/InputStream;)Landroid/graphics/Movie;");

  /// from: static public android.graphics.Movie decodeStream(java.io.InputStream is)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Movie decodeStream(jni.JniObject is0) =>
      Movie.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_decodeStream, jni.JniType.objectType, [is0.reference]).object);

  static final _id_decodeByteArray = jniAccessors.getStaticMethodIDOf(
      _classRef, "decodeByteArray", "([BII)Landroid/graphics/Movie;");

  /// from: static public native android.graphics.Movie decodeByteArray(byte[] data, int offset, int length)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Movie decodeByteArray(jni.JniObject data, int offset, int length) =>
      Movie.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_decodeByteArray,
          jni.JniType.objectType,
          [data.reference, offset, length]).object);

  static final _id_decodeFile = jniAccessors.getStaticMethodIDOf(
      _classRef, "decodeFile", "(Ljava/lang/String;)Landroid/graphics/Movie;");

  /// from: static public android.graphics.Movie decodeFile(java.lang.String pathName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Movie decodeFile(jni.JniString pathName) =>
      Movie.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_decodeFile, jni.JniType.objectType, [pathName.reference]).object);

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();
}
