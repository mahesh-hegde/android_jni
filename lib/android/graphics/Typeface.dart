// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/res/AssetManager.dart" as assetmanager_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.Typeface
///
/// The Typeface class specifies the typeface and intrinsic style of a font.
/// This is used in the paint, along with optionally Paint settings like
/// textSize, textSkewX, textScaleX to specify
/// how text appears when drawn (and measured).
class Typeface extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/graphics/Typeface");
  Typeface.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int BOLD
  static const BOLD = 1;

  /// from: static public final int BOLD_ITALIC
  static const BOLD_ITALIC = 3;

  static final _id_DEFAULT = jniAccessors.getStaticFieldIDOf(
      _classRef, "DEFAULT", "Landroid/graphics/Typeface;");

  /// from: static public final android.graphics.Typeface DEFAULT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The default NORMAL typeface object
  static Typeface get DEFAULT => Typeface.fromRef(jniAccessors
      .getStaticField(_classRef, _id_DEFAULT, jni.JniType.objectType)
      .object);

  static final _id_DEFAULT_BOLD = jniAccessors.getStaticFieldIDOf(
      _classRef, "DEFAULT_BOLD", "Landroid/graphics/Typeface;");

  /// from: static public final android.graphics.Typeface DEFAULT_BOLD
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The default BOLD typeface object. Note: this may be not actually be
  /// bold, depending on what fonts are installed. Call getStyle() to know
  /// for sure.
  static Typeface get DEFAULT_BOLD => Typeface.fromRef(jniAccessors
      .getStaticField(_classRef, _id_DEFAULT_BOLD, jni.JniType.objectType)
      .object);

  /// from: static public final int ITALIC
  static const ITALIC = 2;

  static final _id_MONOSPACE = jniAccessors.getStaticFieldIDOf(
      _classRef, "MONOSPACE", "Landroid/graphics/Typeface;");

  /// from: static public final android.graphics.Typeface MONOSPACE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The NORMAL style of the default monospace typeface.
  static Typeface get MONOSPACE => Typeface.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MONOSPACE, jni.JniType.objectType)
      .object);

  /// from: static public final int NORMAL
  static const NORMAL = 0;

  static final _id_SANS_SERIF = jniAccessors.getStaticFieldIDOf(
      _classRef, "SANS_SERIF", "Landroid/graphics/Typeface;");

  /// from: static public final android.graphics.Typeface SANS_SERIF
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The NORMAL style of the default sans serif typeface.
  static Typeface get SANS_SERIF => Typeface.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SANS_SERIF, jni.JniType.objectType)
      .object);

  static final _id_SERIF = jniAccessors.getStaticFieldIDOf(
      _classRef, "SERIF", "Landroid/graphics/Typeface;");

  /// from: static public final android.graphics.Typeface SERIF
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The NORMAL style of the default serif typeface.
  static Typeface get SERIF => Typeface.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SERIF, jni.JniType.objectType)
      .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(J)V");

  /// from: void <init>(long ni)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Typeface(int ni)
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [ni]).object);

  static final _id_getWeight =
      jniAccessors.getMethodIDOf(_classRef, "getWeight", "()I");

  /// from: public int getWeight()
  ///
  /// Returns the typeface's weight value
  ///@return Value is between 0 and 1000 inclusive
  int getWeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getWeight, jni.JniType.intType, []).integer;

  static final _id_getStyle =
      jniAccessors.getMethodIDOf(_classRef, "getStyle", "()I");

  /// from: public int getStyle()
  ///
  /// Returns the typeface's intrinsic style attributes
  ///@return Value is android.graphics.Typeface\#NORMAL, android.graphics.Typeface\#BOLD, android.graphics.Typeface\#ITALIC, or android.graphics.Typeface\#BOLD_ITALIC
  int getStyle() => jniAccessors.callMethodWithArgs(
      reference, _id_getStyle, jni.JniType.intType, []).integer;

  static final _id_isBold =
      jniAccessors.getMethodIDOf(_classRef, "isBold", "()Z");

  /// from: public final boolean isBold()
  ///
  /// Returns true if getStyle() has the BOLD bit set.
  bool isBold() => jniAccessors.callMethodWithArgs(
      reference, _id_isBold, jni.JniType.booleanType, []).boolean;

  static final _id_isItalic =
      jniAccessors.getMethodIDOf(_classRef, "isItalic", "()Z");

  /// from: public final boolean isItalic()
  ///
  /// Returns true if getStyle() has the ITALIC bit set.
  bool isItalic() => jniAccessors.callMethodWithArgs(
      reference, _id_isItalic, jni.JniType.booleanType, []).boolean;

  static final _id_create = jniAccessors.getStaticMethodIDOf(
      _classRef, "create", "(Ljava/lang/String;I)Landroid/graphics/Typeface;");

  /// from: static public android.graphics.Typeface create(java.lang.String familyName, int style)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a typeface object given a family name, and option style information.
  /// If null is passed for the name, then the "default" font will be chosen.
  /// The resulting typeface object can be queried (getStyle()) to discover what
  /// its "real" style characteristics are.
  ///@param familyName May be null. The name of the font family.
  ///@param style The style (normal, bold, italic) of the typeface.
  ///               e.g. NORMAL, BOLD, ITALIC, BOLD_ITALIC
  /// Value is android.graphics.Typeface\#NORMAL, android.graphics.Typeface\#BOLD, android.graphics.Typeface\#ITALIC, or android.graphics.Typeface\#BOLD_ITALIC
  ///@return The best matching typeface.
  static Typeface create(jni.JniString familyName, int style) =>
      Typeface.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create,
          jni.JniType.objectType,
          [familyName.reference, style]).object);

  static final _id_create1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "create", "(Landroid/graphics/Typeface;I)Landroid/graphics/Typeface;");

  /// from: static public android.graphics.Typeface create(android.graphics.Typeface family, int style)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a typeface object that best matches the specified existing
  /// typeface and the specified Style. Use this call if you want to pick a new
  /// style from the same family of an existing typeface object. If family is
  /// null, this selects from the default font's family.
  ///
  ///
  /// This method is not thread safe on API 27 or before.
  /// This method is thread safe on API 28 or after.
  ///
  ///
  ///@param family An existing Typeface object. In case of {@code null}, the default
  ///               typeface is used instead.
  ///@param style The style (normal, bold, italic) of the typeface.
  ///               e.g. NORMAL, BOLD, ITALIC, BOLD_ITALIC
  /// Value is android.graphics.Typeface\#NORMAL, android.graphics.Typeface\#BOLD, android.graphics.Typeface\#ITALIC, or android.graphics.Typeface\#BOLD_ITALIC
  ///@return The best matching typeface.
  static Typeface create1(Typeface family, int style) =>
      Typeface.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create1,
          jni.JniType.objectType,
          [family.reference, style]).object);

  static final _id_create2 = jniAccessors.getStaticMethodIDOf(_classRef,
      "create", "(Landroid/graphics/Typeface;IZ)Landroid/graphics/Typeface;");

  /// from: static public android.graphics.Typeface create(android.graphics.Typeface family, int weight, boolean italic)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a typeface object that best matches the specified existing typeface and the specified
  /// weight and italic style
  /// Below are numerical values and corresponding common weight names.
  ///
  /// <table>
  /// <thead>
  /// <tr><th>Value</th><th>Common weight name</th></tr>
  /// </thead>
  /// <tbody>
  /// <tr><td>100</td><td>Thin</td></tr>
  /// <tr><td>200</td><td>Extra Light</td></tr>
  /// <tr><td>300</td><td>Light</td></tr>
  /// <tr><td>400</td><td>Normal</td></tr>
  /// <tr><td>500</td><td>Medium</td></tr>
  /// <tr><td>600</td><td>Semi Bold</td></tr>
  /// <tr><td>700</td><td>Bold</td></tr>
  /// <tr><td>800</td><td>Extra Bold</td></tr>
  /// <tr><td>900</td><td>Black</td></tr>
  /// </tbody>
  /// </table>
  ///
  ///
  /// This method is thread safe.
  ///
  ///
  ///@param family An existing Typeface object. In case of {@code null}, the default
  ///               typeface is used instead.
  /// This value may be {@code null}.
  ///@param weight The desired weight to be drawn.
  /// Value is between 1 and 1000 inclusive
  ///@param italic {@code true} if italic style is desired to be drawn. Otherwise, {@code false}
  ///@return A Typeface object for drawing specified weight and italic style. Never
  ///         returns {@code null}
  ///@see \#getWeight()
  ///@see \#isItalic()
  static Typeface create2(Typeface family, int weight, bool italic) =>
      Typeface.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create2,
          jni.JniType.objectType,
          [family.reference, weight, italic]).object);

  static final _id_defaultFromStyle = jniAccessors.getStaticMethodIDOf(
      _classRef, "defaultFromStyle", "(I)Landroid/graphics/Typeface;");

  /// from: static public android.graphics.Typeface defaultFromStyle(int style)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns one of the default typeface objects, based on the specified style
  ///@param style Value is android.graphics.Typeface\#NORMAL, android.graphics.Typeface\#BOLD, android.graphics.Typeface\#ITALIC, or android.graphics.Typeface\#BOLD_ITALIC
  ///@return the default typeface that corresponds to the style
  static Typeface defaultFromStyle(int style) =>
      Typeface.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_defaultFromStyle, jni.JniType.objectType, [style]).object);

  static final _id_createFromAsset = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createFromAsset",
      "(Landroid/content/res/AssetManager;Ljava/lang/String;)Landroid/graphics/Typeface;");

  /// from: static public android.graphics.Typeface createFromAsset(android.content.res.AssetManager mgr, java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new typeface from the specified font data.
  ///@param mgr The application's asset manager
  ///@param path The file name of the font data in the assets directory
  ///@return The new typeface.
  static Typeface createFromAsset(
          assetmanager_.AssetManager mgr, jni.JniString path) =>
      Typeface.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createFromAsset,
          jni.JniType.objectType,
          [mgr.reference, path.reference]).object);

  static final _id_createFromFile = jniAccessors.getStaticMethodIDOf(_classRef,
      "createFromFile", "(Ljava/io/File;)Landroid/graphics/Typeface;");

  /// from: static public android.graphics.Typeface createFromFile(java.io.File file)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new typeface from the specified font file.
  ///@param file The path to the font data.
  /// This value may be {@code null}.
  ///@return The new typeface.
  static Typeface createFromFile(jni.JniObject file) =>
      Typeface.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_createFromFile, jni.JniType.objectType, [file.reference]).object);

  static final _id_createFromFile1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "createFromFile", "(Ljava/lang/String;)Landroid/graphics/Typeface;");

  /// from: static public android.graphics.Typeface createFromFile(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new typeface from the specified font file.
  ///@param path The full path to the font data.
  /// This value may be {@code null}.
  ///@return The new typeface.
  static Typeface createFromFile1(jni.JniString path) =>
      Typeface.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createFromFile1,
          jni.JniType.objectType,
          [path.reference]).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}

/// from: android.graphics.Typeface$Builder
///
/// A builder class for creating new Typeface instance.
///
///
/// Examples,
/// 1) Create Typeface from ttf file.
/// <pre>
/// <code>
/// Typeface.Builder buidler = new Typeface.Builder("your_font_file.ttf");
/// Typeface typeface = builder.build();
/// </code>
/// </pre>
///
/// 2) Create Typeface from ttc file in assets directory.
/// <pre>
/// <code>
/// Typeface.Builder buidler = new Typeface.Builder(getAssets(), "your_font_file.ttc");
/// builder.setTtcIndex(2);  // Set index of font collection.
/// Typeface typeface = builder.build();
/// </code>
/// </pre>
///
/// 3) Create Typeface with variation settings.
/// <pre>
/// <code>
/// Typeface.Builder buidler = new Typeface.Builder("your_font_file.ttf");
/// builder.setFontVariationSettings("'wght' 700, 'slnt' 20, 'ital' 1");
/// builder.setWeight(700);  // Tell the system that this is a bold font.
/// builder.setItalic(true);  // Tell the system that this is an italic style font.
/// Typeface typeface = builder.build();
/// </code>
/// </pre>
///
///
class Typeface_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/Typeface\$Builder");
  Typeface_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/io/File;)V");

  /// from: public void <init>(java.io.File path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a builder with a file path.
  ///@param path The file object refers to the font file.
  ///
  /// This value must never be {@code null}.
  Typeface_Builder(jni.JniObject path)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [path.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/io/FileDescriptor;)V");

  /// from: public void <init>(java.io.FileDescriptor fd)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a builder with a file descriptor.
  ///
  /// Caller is responsible for closing the passed file descriptor after \#build is
  /// called.
  ///@param fd The file descriptor. The passed fd must be mmap-able.
  ///
  /// This value must never be {@code null}.
  Typeface_Builder.ctor1(jni.JniObject fd)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [fd.reference]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a builder with a file path.
  ///@param path The full path to the font file.
  ///
  /// This value must never be {@code null}.
  Typeface_Builder.ctor2(jni.JniString path)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [path.reference]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/res/AssetManager;Ljava/lang/String;)V");

  /// from: public void <init>(android.content.res.AssetManager assetManager, java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a builder from an asset manager and a file path in an asset directory.
  ///@param assetManager The application's asset manager
  /// This value must never be {@code null}.
  ///@param path The file name of the font data in the asset directory
  ///
  /// This value must never be {@code null}.
  Typeface_Builder.ctor3(
      assetmanager_.AssetManager assetManager, jni.JniString path)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3,
            [assetManager.reference, path.reference]).object);

  static final _id_setWeight = jniAccessors.getMethodIDOf(
      _classRef, "setWeight", "(I)Landroid/graphics/Typeface\$Builder;");

  /// from: public android.graphics.Typeface.Builder setWeight(int weight)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets weight of the font.
  ///
  /// Tells the system the weight of the given font. If not provided, the system will resolve
  /// the weight value by reading font tables.
  ///@param weight a weight value.
  ///
  /// Value is between 1 and 1000 inclusive
  Typeface_Builder setWeight(int weight) =>
      Typeface_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setWeight, jni.JniType.objectType, [weight]).object);

  static final _id_setItalic = jniAccessors.getMethodIDOf(
      _classRef, "setItalic", "(Z)Landroid/graphics/Typeface\$Builder;");

  /// from: public android.graphics.Typeface.Builder setItalic(boolean italic)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets italic information of the font.
  ///
  /// Tells the system the style of the given font. If not provided, the system will resolve
  /// the style by reading font tables.
  ///@param italic {@code true} if the font is italic. Otherwise {@code false}.
  Typeface_Builder setItalic(bool italic) =>
      Typeface_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setItalic, jni.JniType.objectType, [italic]).object);

  static final _id_setTtcIndex = jniAccessors.getMethodIDOf(
      _classRef, "setTtcIndex", "(I)Landroid/graphics/Typeface\$Builder;");

  /// from: public android.graphics.Typeface.Builder setTtcIndex(int ttcIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets an index of the font collection. See android.R.attr\#ttcIndex.
  ///
  /// Can not be used for Typeface source. build() method will return null for invalid index.
  ///@param ttcIndex An index of the font collection. If the font source is not font
  ///                 collection, do not call this method or specify 0.
  ///
  /// Value is 0 or greater
  Typeface_Builder setTtcIndex(int ttcIndex) =>
      Typeface_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setTtcIndex, jni.JniType.objectType, [ttcIndex]).object);

  static final _id_setFontVariationSettings = jniAccessors.getMethodIDOf(
      _classRef,
      "setFontVariationSettings",
      "(Ljava/lang/String;)Landroid/graphics/Typeface\$Builder;");

  /// from: public android.graphics.Typeface.Builder setFontVariationSettings(java.lang.String variationSettings)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a font variation settings.
  ///@param variationSettings See android.widget.TextView\#setFontVariationSettings.
  /// This value may be {@code null}.
  ///@throws IllegalArgumentException If given string is not a valid font variation settings
  ///                                  format.
  Typeface_Builder setFontVariationSettings(jni.JniString variationSettings) =>
      Typeface_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setFontVariationSettings,
          jni.JniType.objectType,
          [variationSettings.reference]).object);

  static final _id_setFontVariationSettings1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setFontVariationSettings",
      "([Landroid/graphics/fonts/FontVariationAxis;)Landroid/graphics/Typeface\$Builder;");

  /// from: public android.graphics.Typeface.Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[] axes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a font variation settings.
  ///@param axes An array of font variation axis tag-value pairs.
  ///
  /// This value may be {@code null}.
  Typeface_Builder setFontVariationSettings1(jni.JniObject axes) =>
      Typeface_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setFontVariationSettings1,
          jni.JniType.objectType,
          [axes.reference]).object);

  static final _id_setFallback = jniAccessors.getMethodIDOf(
      _classRef,
      "setFallback",
      "(Ljava/lang/String;)Landroid/graphics/Typeface\$Builder;");

  /// from: public android.graphics.Typeface.Builder setFallback(java.lang.String familyName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a fallback family name.
  ///
  /// By specifying a fallback family name, a fallback Typeface will be returned if the
  /// \#build method fails to create a Typeface from the provided font. The fallback
  /// family will be resolved with the provided weight and italic information specified by
  /// \#setWeight and \#setItalic.
  ///
  /// If \#setWeight is not called, the fallback family keeps the default weight.
  /// Similary, if \#setItalic is not called, the fallback family keeps the default
  /// italic information. For example, calling {@code builder.setFallback("sans-serif-light")}
  /// is equivalent to calling {@code builder.setFallback("sans-serif").setWeight(300)} in
  /// terms of fallback. The default weight and italic information are overridden by calling
  /// \#setWeight and \#setItalic. For example, if a Typeface is constructed
  /// using {@code builder.setFallback("sans-serif-light").setWeight(700)}, the fallback text
  /// will render as sans serif bold.
  ///@param familyName A family name to be used for fallback if the provided font can not be
  ///                   used. By passing {@code null}, build() returns {@code null}.
  ///                   If \#setFallback is not called on the builder, {@code null}
  ///                   is assumed.
  ///
  /// This value may be {@code null}.
  Typeface_Builder setFallback(jni.JniString familyName) =>
      Typeface_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setFallback,
          jni.JniType.objectType,
          [familyName.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/graphics/Typeface;");

  /// from: public android.graphics.Typeface build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Generates new Typeface from specified configuration.
  ///@return Newly created Typeface. May return null if some parameters are invalid.
  Typeface build() => Typeface.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
