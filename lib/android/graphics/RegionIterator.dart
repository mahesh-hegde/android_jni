// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Region.dart" as region_;

import "Rect.dart" as rect_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.RegionIterator
class RegionIterator extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/RegionIterator");
  RegionIterator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/Region;)V");

  /// from: public void <init>(android.graphics.Region region)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct an iterator for all of the rectangles in a region. This
  /// effectively makes a private copy of the region, so any subsequent edits
  /// to region will not affect the iterator.
  ///@param region the region that will be iterated
  RegionIterator(region_.Region region)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [region.reference]).object);

  static final _id_next = jniAccessors.getMethodIDOf(
      _classRef, "next", "(Landroid/graphics/Rect;)Z");

  /// from: public final boolean next(android.graphics.Rect r)
  ///
  /// Return the next rectangle in the region. If there are no more rectangles
  /// this returns false and r is unchanged. If there is at least one more,
  /// this returns true and r is set to that rectangle.
  bool next(rect_.Rect r) => jniAccessors.callMethodWithArgs(
      reference, _id_next, jni.JniType.booleanType, [r.reference]).boolean;

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();
}
