// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.Point
///
/// Point holds two integer coordinates
class Point extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/graphics/Point");
  Point.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.graphics.Point> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_x = jniAccessors.getFieldIDOf(_classRef, "x", "I");

  /// from: public int x
  int get x =>
      jniAccessors.getField(reference, _id_x, jni.JniType.intType).integer;

  /// from: public int x
  set x(int value) => jniEnv.SetIntField(reference, _id_x, value);

  static final _id_y = jniAccessors.getFieldIDOf(_classRef, "y", "I");

  /// from: public int y
  int get y =>
      jniAccessors.getField(reference, _id_y, jni.JniType.intType).integer;

  /// from: public int y
  set y(int value) => jniEnv.SetIntField(reference, _id_y, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Point()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int x, int y)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Point.ctor1(int x, int y)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [x, y]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/Point;)V");

  /// from: public void <init>(android.graphics.Point src)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Point.ctor2(Point src)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [src.reference]).object);

  static final _id_set0 = jniAccessors.getMethodIDOf(_classRef, "set", "(II)V");

  /// from: public void set(int x, int y)
  ///
  /// Set the point's x and y coordinates
  void set0(int x, int y) => jniAccessors.callMethodWithArgs(
      reference, _id_set0, jni.JniType.voidType, [x, y]).check();

  static final _id_negate =
      jniAccessors.getMethodIDOf(_classRef, "negate", "()V");

  /// from: public final void negate()
  ///
  /// Negate the point's coordinates
  void negate() => jniAccessors.callMethodWithArgs(
      reference, _id_negate, jni.JniType.voidType, []).check();

  static final _id_offset =
      jniAccessors.getMethodIDOf(_classRef, "offset", "(II)V");

  /// from: public final void offset(int dx, int dy)
  ///
  /// Offset the point's coordinates by dx, dy
  void offset(int dx, int dy) => jniAccessors.callMethodWithArgs(
      reference, _id_offset, jni.JniType.voidType, [dx, dy]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(II)Z");

  /// from: public final boolean equals(int x, int y)
  ///
  /// Returns true if the point's coordinates equal (x,y)
  bool equals1(int x, int y) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [x, y]).boolean;

  static final _id_equals2 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals2(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals2, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Parcelable interface methods
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  ///
  /// Write this point to the specified parcel. To restore a point from
  /// a parcel, use readFromParcel()
  ///@param out The parcel to write the point's coordinates into
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_readFromParcel = jniAccessors.getMethodIDOf(
      _classRef, "readFromParcel", "(Landroid/os/Parcel;)V");

  /// from: public void readFromParcel(android.os.Parcel in)
  ///
  /// Set the point's coordinates from the data stored in the specified
  /// parcel. To write a point to a parcel, call writeToParcel().
  ///@param in The parcel to read the point's coordinates from
  void readFromParcel(parcel_.Parcel in0) => jniAccessors.callMethodWithArgs(
      reference,
      _id_readFromParcel,
      jni.JniType.voidType,
      [in0.reference]).check();
}
