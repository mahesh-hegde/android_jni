// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.graphics.PixelFormat
class PixelFormat extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/graphics/PixelFormat");
  PixelFormat.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int A_8
  static const A_8 = 8;

  /// from: static public final int JPEG
  ///
  /// @deprecated use android.graphics.ImageFormat\#JPEG ImageFormat.JPEG instead.
  static const JPEG = 256;

  /// from: static public final int LA_88
  static const LA_88 = 10;

  /// from: static public final int L_8
  static const L_8 = 9;

  /// from: static public final int OPAQUE
  ///
  /// System chooses an opaque format (no alpha bits required)
  static const OPAQUE = -1;

  /// from: static public final int RGBA_1010102
  static const RGBA_1010102 = 43;

  /// from: static public final int RGBA_4444
  static const RGBA_4444 = 7;

  /// from: static public final int RGBA_5551
  static const RGBA_5551 = 6;

  /// from: static public final int RGBA_8888
  static const RGBA_8888 = 1;

  /// from: static public final int RGBA_F16
  static const RGBA_F16 = 22;

  /// from: static public final int RGBX_8888
  static const RGBX_8888 = 2;

  /// from: static public final int RGB_332
  static const RGB_332 = 11;

  /// from: static public final int RGB_565
  static const RGB_565 = 4;

  /// from: static public final int RGB_888
  static const RGB_888 = 3;

  /// from: static public final int TRANSLUCENT
  ///
  /// System chooses a format that supports translucency (many alpha bits)
  static const TRANSLUCENT = -3;

  /// from: static public final int TRANSPARENT
  ///
  /// System chooses a format that supports transparency
  /// (at least 1 alpha bit)
  static const TRANSPARENT = -2;

  /// from: static public final int UNKNOWN
  static const UNKNOWN = 0;

  /// from: static public final int YCbCr_420_SP
  ///
  /// @deprecated use android.graphics.ImageFormat\#NV21 ImageFormat.NV21 instead.
  static const YCbCr_420_SP = 17;

  /// from: static public final int YCbCr_422_I
  ///
  /// @deprecated use android.graphics.ImageFormat\#YUY2 ImageFormat.YUY2 instead.
  static const YCbCr_422_I = 20;

  /// from: static public final int YCbCr_422_SP
  ///
  /// @deprecated use android.graphics.ImageFormat\#NV16 ImageFormat.NV16 instead.
  static const YCbCr_422_SP = 16;

  static final _id_bitsPerPixel =
      jniAccessors.getFieldIDOf(_classRef, "bitsPerPixel", "I");

  /// from: public int bitsPerPixel
  int get bitsPerPixel => jniAccessors
      .getField(reference, _id_bitsPerPixel, jni.JniType.intType)
      .integer;

  /// from: public int bitsPerPixel
  set bitsPerPixel(int value) =>
      jniEnv.SetIntField(reference, _id_bitsPerPixel, value);

  static final _id_bytesPerPixel =
      jniAccessors.getFieldIDOf(_classRef, "bytesPerPixel", "I");

  /// from: public int bytesPerPixel
  int get bytesPerPixel => jniAccessors
      .getField(reference, _id_bytesPerPixel, jni.JniType.intType)
      .integer;

  /// from: public int bytesPerPixel
  set bytesPerPixel(int value) =>
      jniEnv.SetIntField(reference, _id_bytesPerPixel, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PixelFormat()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getPixelFormatInfo = jniAccessors.getStaticMethodIDOf(
      _classRef, "getPixelFormatInfo", "(ILandroid/graphics/PixelFormat;)V");

  /// from: static public void getPixelFormatInfo(int format, android.graphics.PixelFormat info)
  ///
  /// @param format Value is android.graphics.PixelFormat\#RGBA_8888, android.graphics.PixelFormat\#RGBX_8888, android.graphics.PixelFormat\#RGBA_F16, android.graphics.PixelFormat\#RGBA_1010102, android.graphics.PixelFormat\#RGB_888, or android.graphics.PixelFormat\#RGB_565
  static void getPixelFormatInfo(int format, PixelFormat info) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getPixelFormatInfo,
          jni.JniType.voidType, [format, info.reference]).check();

  static final _id_formatHasAlpha =
      jniAccessors.getStaticMethodIDOf(_classRef, "formatHasAlpha", "(I)Z");

  /// from: static public boolean formatHasAlpha(int format)
  ///
  /// @param format Value is android.graphics.PixelFormat\#RGBA_8888, android.graphics.PixelFormat\#RGBX_8888, android.graphics.PixelFormat\#RGBA_F16, android.graphics.PixelFormat\#RGBA_1010102, android.graphics.PixelFormat\#RGB_888, or android.graphics.PixelFormat\#RGB_565
  static bool formatHasAlpha(int format) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_formatHasAlpha,
          jni.JniType.booleanType, [format]).boolean;
}
