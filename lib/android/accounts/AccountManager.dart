// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "Account.dart" as account_;

import "AccountManagerFuture.dart" as accountmanagerfuture_;

import "AccountManagerCallback.dart" as accountmanagercallback_;

import "../os/Handler.dart" as handler_;

import "../os/Bundle.dart" as bundle_;

import "../app/Activity.dart" as activity_;

import "../content/Intent.dart" as intent_;

import "OnAccountsUpdateListener.dart" as onaccountsupdatelistener_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.accounts.AccountManager
///
/// This class provides access to a centralized registry of the user's
/// online accounts.  The user enters credentials (username and password) once
/// per account, granting applications access to online resources with
/// "one-click" approval.
///
/// Different online services have different ways of handling accounts and
/// authentication, so the account manager uses pluggable _authenticator_
/// modules for different _account types_.  Authenticators (which may be
/// written by third parties) handle the actual details of validating account
/// credentials and storing account information.  For example, Google, Facebook,
/// and Microsoft Exchange each have their own authenticator.
///
/// Many servers support some notion of an _authentication token_,
/// which can be used to authenticate a request to the server without sending
/// the user's actual password.  (Auth tokens are normally created with a
/// separate request which does include the user's credentials.)  AccountManager
/// can generate auth tokens for applications, so the application doesn't need to
/// handle passwords directly.  Auth tokens are normally reusable and cached by
/// AccountManager, but must be refreshed periodically.  It's the responsibility
/// of applications to _invalidate_ auth tokens when they stop working so
/// the AccountManager knows it needs to regenerate them.
///
/// Applications accessing a server normally go through these steps:
///
/// <ul>
/// <li>Get an instance of AccountManager using \#get(Context).
///
/// <li>List the available accounts using \#getAccountsByType or
/// \#getAccountsByTypeAndFeatures.  Normally applications will only
/// be interested in accounts with one particular _type_, which
/// identifies the authenticator.  Account _features_ are used to
/// identify particular account subtypes and capabilities.  Both the account
/// type and features are authenticator-specific strings, and must be known by
/// the application in coordination with its preferred authenticators.
///
/// <li>Select one or more of the available accounts, possibly by asking the
/// user for their preference.  If no suitable accounts are available,
/// \#addAccount may be called to prompt the user to create an
/// account of the appropriate type.
///
/// <li>__Important:__ If the application is using a previously remembered
/// account selection, it must make sure the account is still in the list
/// of accounts returned by \#getAccountsByType.  Requesting an auth token
/// for an account no longer on the device results in an undefined failure.
///
/// <li>Request an auth token for the selected account(s) using one of the
/// \#getAuthToken methods or related helpers.  Refer to the description
/// of each method for exact usage and error handling details.
///
/// <li>Make the request using the auth token.  The form of the auth token,
/// the format of the request, and the protocol used are all specific to the
/// service you are accessing.  The application may use whatever network and
/// protocol libraries are useful.
///
/// <li>__Important:__ If the request fails with an authentication error,
/// it could be that a cached auth token is stale and no longer honored by
/// the server.  The application must call \#invalidateAuthToken to remove
/// the token from the cache, otherwise requests will continue failing!  After
/// invalidating the auth token, immediately go back to the "Request an auth
/// token" step above.  If the process fails the second time, then it can be
/// treated as a "genuine" authentication failure and the user notified or other
/// appropriate actions taken.
/// </ul>
///
/// Some AccountManager methods may need to interact with the user to
/// prompt for credentials, present options, or ask the user to add an account.
/// The caller may choose whether to allow AccountManager to directly launch the
/// necessary user interface and wait for the user, or to return an Intent which
/// the caller may use to launch the interface, or (in some cases) to install a
/// notification which the user can select at any time to launch the interface.
/// To have AccountManager launch the interface directly, the caller must supply
/// the current foreground Activity context.
///
/// Many AccountManager methods take AccountManagerCallback and
/// Handler as parameters.  These methods return immediately and
/// run asynchronously. If a callback is provided then
/// AccountManagerCallback\#run will be invoked on the Handler's
/// thread when the request completes, successfully or not.
/// The result is retrieved by calling AccountManagerFuture\#getResult()
/// on the AccountManagerFuture returned by the method (and also passed
/// to the callback).  This method waits for the operation to complete (if
/// necessary) and either returns the result or throws an exception if an error
/// occurred during the operation.  To make the request synchronously, call
/// AccountManagerFuture\#getResult() immediately on receiving the
/// future from the method; no callback need be supplied.
///
/// Requests which may block, including
/// AccountManagerFuture\#getResult(), must never be called on
/// the application's main event thread.  These operations throw
/// IllegalStateException if they are used on the main thread.
class AccountManager extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/accounts/AccountManager");
  AccountManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_ACCOUNT_REMOVED
  ///
  /// Action sent as a broadcast Intent by the AccountsService when any account is removed
  /// or renamed. Only applications which were able to see the account will receive the intent.
  /// Intent extra will include the following fields:
  /// <ul>
  /// <li> \#KEY_ACCOUNT_NAME - the name of the removed account
  /// <li> \#KEY_ACCOUNT_TYPE - the type of the account
  /// </ul>
  static const ACTION_ACCOUNT_REMOVED =
      "android.accounts.action.ACCOUNT_REMOVED";

  /// from: static public final java.lang.String ACTION_AUTHENTICATOR_INTENT
  static const ACTION_AUTHENTICATOR_INTENT =
      "android.accounts.AccountAuthenticator";

  /// from: static public final java.lang.String AUTHENTICATOR_ATTRIBUTES_NAME
  static const AUTHENTICATOR_ATTRIBUTES_NAME = "account-authenticator";

  /// from: static public final java.lang.String AUTHENTICATOR_META_DATA_NAME
  static const AUTHENTICATOR_META_DATA_NAME =
      "android.accounts.AccountAuthenticator";

  /// from: static public final int ERROR_CODE_BAD_ARGUMENTS
  static const ERROR_CODE_BAD_ARGUMENTS = 7;

  /// from: static public final int ERROR_CODE_BAD_AUTHENTICATION
  static const ERROR_CODE_BAD_AUTHENTICATION = 9;

  /// from: static public final int ERROR_CODE_BAD_REQUEST
  static const ERROR_CODE_BAD_REQUEST = 8;

  /// from: static public final int ERROR_CODE_CANCELED
  static const ERROR_CODE_CANCELED = 4;

  /// from: static public final int ERROR_CODE_INVALID_RESPONSE
  static const ERROR_CODE_INVALID_RESPONSE = 5;

  /// from: static public final int ERROR_CODE_NETWORK_ERROR
  static const ERROR_CODE_NETWORK_ERROR = 3;

  /// from: static public final int ERROR_CODE_REMOTE_EXCEPTION
  static const ERROR_CODE_REMOTE_EXCEPTION = 1;

  /// from: static public final int ERROR_CODE_UNSUPPORTED_OPERATION
  static const ERROR_CODE_UNSUPPORTED_OPERATION = 6;

  /// from: static public final java.lang.String KEY_ACCOUNTS
  static const KEY_ACCOUNTS = "accounts";

  /// from: static public final java.lang.String KEY_ACCOUNT_AUTHENTICATOR_RESPONSE
  static const KEY_ACCOUNT_AUTHENTICATOR_RESPONSE =
      "accountAuthenticatorResponse";

  /// from: static public final java.lang.String KEY_ACCOUNT_MANAGER_RESPONSE
  static const KEY_ACCOUNT_MANAGER_RESPONSE = "accountManagerResponse";

  /// from: static public final java.lang.String KEY_ACCOUNT_NAME
  ///
  /// Bundle key used for the String account name in results
  /// from methods which return information about a particular account.
  static const KEY_ACCOUNT_NAME = "authAccount";

  /// from: static public final java.lang.String KEY_ACCOUNT_SESSION_BUNDLE
  ///
  /// Bundle key used for a Bundle in result from
  /// \#startAddAccountSession and friends which returns session data
  /// for installing an account later.
  static const KEY_ACCOUNT_SESSION_BUNDLE = "accountSessionBundle";

  /// from: static public final java.lang.String KEY_ACCOUNT_STATUS_TOKEN
  ///
  /// Bundle key used for the String account status token in result
  /// from \#startAddAccountSession and friends which returns
  /// information about a particular account.
  static const KEY_ACCOUNT_STATUS_TOKEN = "accountStatusToken";

  /// from: static public final java.lang.String KEY_ACCOUNT_TYPE
  ///
  /// Bundle key used for the String account type in results
  /// from methods which return information about a particular account.
  static const KEY_ACCOUNT_TYPE = "accountType";

  /// from: static public final java.lang.String KEY_ANDROID_PACKAGE_NAME
  ///
  /// The Android package of the caller will be set in the options bundle by the
  /// AccountManager and will be passed to the AccountManagerService and
  /// to the AccountAuthenticators. The uid of the caller will be known by the
  /// AccountManagerService as well as the AccountAuthenticators so they will be able to
  /// verify that the package is consistent with the uid (a uid might be shared by many
  /// packages).
  static const KEY_ANDROID_PACKAGE_NAME = "androidPackageName";

  /// from: static public final java.lang.String KEY_AUTHENTICATOR_TYPES
  static const KEY_AUTHENTICATOR_TYPES = "authenticator_types";

  /// from: static public final java.lang.String KEY_AUTHTOKEN
  ///
  /// Bundle key used for the auth token value in results
  /// from \#getAuthToken and friends.
  static const KEY_AUTHTOKEN = "authtoken";

  /// from: static public final java.lang.String KEY_AUTH_FAILED_MESSAGE
  static const KEY_AUTH_FAILED_MESSAGE = "authFailedMessage";

  /// from: static public final java.lang.String KEY_AUTH_TOKEN_LABEL
  static const KEY_AUTH_TOKEN_LABEL = "authTokenLabelKey";

  /// from: static public final java.lang.String KEY_BOOLEAN_RESULT
  static const KEY_BOOLEAN_RESULT = "booleanResult";

  /// from: static public final java.lang.String KEY_CALLER_PID
  ///
  /// The process id of caller app.
  static const KEY_CALLER_PID = "callerPid";

  /// from: static public final java.lang.String KEY_CALLER_UID
  ///
  /// The UID of caller app.
  static const KEY_CALLER_UID = "callerUid";

  /// from: static public final java.lang.String KEY_ERROR_CODE
  static const KEY_ERROR_CODE = "errorCode";

  /// from: static public final java.lang.String KEY_ERROR_MESSAGE
  static const KEY_ERROR_MESSAGE = "errorMessage";

  /// from: static public final java.lang.String KEY_INTENT
  ///
  /// Bundle key used for an Intent in results from methods that
  /// may require the caller to interact with the user.  The Intent can
  /// be used to start the corresponding user interface activity.
  static const KEY_INTENT = "intent";

  /// from: static public final java.lang.String KEY_LAST_AUTHENTICATED_TIME
  ///
  /// Bundle key used to supply the last time the credentials of the account
  /// were authenticated successfully. Time is specified in milliseconds since
  /// epoch. Associated time is updated on successful authentication of account
  /// on adding account, confirming credentials, or updating credentials.
  static const KEY_LAST_AUTHENTICATED_TIME = "lastAuthenticatedTime";

  /// from: static public final java.lang.String KEY_PASSWORD
  ///
  /// Bundle key used to supply the password directly in options to
  /// \#confirmCredentials, rather than prompting the user with
  /// the standard password prompt.
  static const KEY_PASSWORD = "password";

  /// from: static public final java.lang.String KEY_USERDATA
  static const KEY_USERDATA = "userdata";

  /// from: static public final java.lang.String LOGIN_ACCOUNTS_CHANGED_ACTION
  ///
  /// Action sent as a broadcast Intent by the AccountsService when accounts are added, accounts
  /// are removed, or an account's credentials (saved password, etc) are changed.
  ///@see \#addOnAccountsUpdatedListener
  ///@see \#ACTION_ACCOUNT_REMOVED
  ///@deprecated use \#addOnAccountsUpdatedListener to get account updates in runtime.
  static const LOGIN_ACCOUNTS_CHANGED_ACTION =
      "android.accounts.LOGIN_ACCOUNTS_CHANGED";

  /// from: static public final java.lang.String PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE
  ///
  /// Key to set default visibility for applications which don't satisfy conditions in
  /// \#PACKAGE_NAME_KEY_LEGACY_VISIBLE. If the value was not set by authenticator
  /// \#VISIBILITY_USER_MANAGED_NOT_VISIBLE is used.
  static const PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE =
      "android:accounts:key_legacy_not_visible";

  /// from: static public final java.lang.String PACKAGE_NAME_KEY_LEGACY_VISIBLE
  ///
  /// Key to set visibility for applications which satisfy one of the following conditions:
  /// <ul>
  /// <li>Target API level below android.os.Build.VERSION_CODES\#O and have
  /// deprecated android.Manifest.permission\#GET_ACCOUNTS permission.
  /// </li>
  /// <li> Have android.Manifest.permission\#GET_ACCOUNTS_PRIVILEGED permission. </li>
  /// <li> Have the same signature as authenticator. </li>
  /// <li> Have android.Manifest.permission\#READ_CONTACTS permission and
  /// account type may be associated with contacts data - (verified by
  /// android.Manifest.permission\#WRITE_CONTACTS permission check for the authenticator).
  /// </li>
  /// </ul>
  /// See \#getAccountVisibility. If the value was not set by authenticator
  /// \#VISIBILITY_USER_MANAGED_VISIBLE is used.
  static const PACKAGE_NAME_KEY_LEGACY_VISIBLE =
      "android:accounts:key_legacy_visible";

  /// from: static public final int VISIBILITY_NOT_VISIBLE
  ///
  /// Account is not visible to given application and only authenticator can grant visibility.
  static const VISIBILITY_NOT_VISIBLE = 3;

  /// from: static public final int VISIBILITY_UNDEFINED
  ///
  /// Account visibility was not set. Default visibility value will be used.
  /// See \#PACKAGE_NAME_KEY_LEGACY_VISIBLE, \#PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE
  static const VISIBILITY_UNDEFINED = 0;

  /// from: static public final int VISIBILITY_USER_MANAGED_NOT_VISIBLE
  ///
  /// Account is not visible to given application, but user can reveal it, for example, using
  /// \#newChooseAccountIntent(Account, List, String[], String, String, String[], Bundle)
  static const VISIBILITY_USER_MANAGED_NOT_VISIBLE = 4;

  /// from: static public final int VISIBILITY_USER_MANAGED_VISIBLE
  ///
  /// Account is visible to given application, but user can revoke visibility.
  static const VISIBILITY_USER_MANAGED_VISIBLE = 2;

  /// from: static public final int VISIBILITY_VISIBLE
  ///
  /// Account is always visible to given application and only authenticator can revoke visibility.
  static const VISIBILITY_VISIBLE = 1;

  static final _id_get0 = jniAccessors.getStaticMethodIDOf(_classRef, "get",
      "(Landroid/content/Context;)Landroid/accounts/AccountManager;");

  /// from: static public android.accounts.AccountManager get(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an AccountManager instance associated with a Context.
  /// The Context will be used as long as the AccountManager is
  /// active, so make sure to use a Context whose lifetime is
  /// commensurate with any listeners registered to
  /// \#addOnAccountsUpdatedListener or similar methods.
  ///
  /// It is safe to call this method from the main thread.
  ///
  /// No permission is required to call this method.
  ///@param context The Context to use when necessary
  ///@return An AccountManager instance
  static AccountManager get0(context_.Context context) =>
      AccountManager.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_get0, jni.JniType.objectType, [context.reference]).object);

  static final _id_getPassword = jniAccessors.getMethodIDOf(_classRef,
      "getPassword", "(Landroid/accounts/Account;)Ljava/lang/String;");

  /// from: public java.lang.String getPassword(android.accounts.Account account)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the saved password associated with the account. This is intended for authenticators and
  /// related code; applications should get an auth token instead.
  ///
  ///
  /// It is safe to call this method from the main thread.
  ///
  ///
  /// This method requires the caller to have a signature match with the authenticator that owns
  /// the specified account.
  ///
  ///
  /// __NOTE:__ If targeting your app to work on API level
  /// android.os.Build.VERSION_CODES\#LOLLIPOP_MR1 and before, AUTHENTICATE_ACCOUNTS
  /// permission is needed for those platforms. See docs for this function in API level
  /// android.os.Build.VERSION_CODES\#LOLLIPOP_MR1.
  ///
  /// Requires android.Manifest.permission\#AUTHENTICATE_ACCOUNTS
  ///@param account The account to query for a password. Must not be {@code null}.
  ///@return The account's password, null if none or if the account doesn't exist
  jni.JniString getPassword(account_.Account account) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getPassword, jni.JniType.objectType, [account.reference]).object);

  static final _id_getUserData = jniAccessors.getMethodIDOf(
      _classRef,
      "getUserData",
      "(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getUserData(android.accounts.Account account, java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the user data named by "key" associated with the account. This is intended for
  /// authenticators and related code to store arbitrary metadata along with accounts. The meaning
  /// of the keys and values is up to the authenticator for the account.
  ///
  ///
  /// It is safe to call this method from the main thread.
  ///
  ///
  /// This method requires the caller to have a signature match with the authenticator that owns
  /// the specified account.
  ///
  ///
  /// __NOTE:__ If targeting your app to work on API level
  /// android.os.Build.VERSION_CODES\#LOLLIPOP_MR1 and before, AUTHENTICATE_ACCOUNTS
  /// permission is needed for those platforms. See docs for this function in API level
  /// android.os.Build.VERSION_CODES\#LOLLIPOP_MR1.
  ///
  /// Requires android.Manifest.permission\#AUTHENTICATE_ACCOUNTS
  ///@param account The account to query for user data
  ///@return The user data, null if the account or key doesn't exist
  jni.JniString getUserData(account_.Account account, jni.JniString key) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getUserData,
          jni.JniType.objectType,
          [account.reference, key.reference]).object);

  static final _id_getAuthenticatorTypes = jniAccessors.getMethodIDOf(
      _classRef,
      "getAuthenticatorTypes",
      "()[Landroid/accounts/AuthenticatorDescription;");

  /// from: public android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Lists the currently registered authenticators.
  ///
  /// It is safe to call this method from the main thread.
  ///
  /// No permission is required to call this method.
  ///@return An array of AuthenticatorDescription for every
  ///     authenticator known to the AccountManager service.  Empty (never
  ///     null) if no authenticators are known.
  jni.JniObject getAuthenticatorTypes() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAuthenticatorTypes, jni.JniType.objectType, []).object);

  static final _id_getAccounts = jniAccessors.getMethodIDOf(
      _classRef, "getAccounts", "()[Landroid/accounts/Account;");

  /// from: public android.accounts.Account[] getAccounts()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Lists all accounts visible to the caller regardless of type. Equivalent to
  /// getAccountsByType(null). These accounts may be visible because the user granted access to the
  /// account, or the AbstractAcccountAuthenticator managing the account did so or because the
  /// client shares a signature with the managing AbstractAccountAuthenticator.
  ///
  ///
  /// It is safe to call this method from the main thread.
  ///
  /// Requires android.Manifest.permission\#GET_ACCOUNTS
  ///@return An array of Account, one for each account. Empty (never null) if no accounts
  ///         have been added.
  jni.JniObject getAccounts() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAccounts, jni.JniType.objectType, []).object);

  static final _id_getAccountsByTypeForPackage = jniAccessors.getMethodIDOf(
      _classRef,
      "getAccountsByTypeForPackage",
      "(Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;");

  /// from: public android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String type, java.lang.String packageName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the accounts visible to the specified package in an environment where some apps are
  /// not authorized to view all accounts. This method can only be called by system apps and
  /// authenticators managing the type.
  /// Beginning API level android.os.Build.VERSION_CODES\#O it also return accounts
  /// which user can make visible to the application (see \#VISIBILITY_USER_MANAGED_VISIBLE).
  ///@param type The type of accounts to return, null to retrieve all accounts
  ///@param packageName The package name of the app for which the accounts are to be returned
  ///@return An array of Account, one per matching account. Empty (never null) if no
  ///         accounts of the specified type can be accessed by the package.
  jni.JniObject getAccountsByTypeForPackage(
          jni.JniString type, jni.JniString packageName) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getAccountsByTypeForPackage,
          jni.JniType.objectType,
          [type.reference, packageName.reference]).object);

  static final _id_getAccountsByType = jniAccessors.getMethodIDOf(_classRef,
      "getAccountsByType", "(Ljava/lang/String;)[Landroid/accounts/Account;");

  /// from: public android.accounts.Account[] getAccountsByType(java.lang.String type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Lists all accounts of particular type visible to the caller. These accounts may be visible
  /// because the user granted access to the account, or the AbstractAcccountAuthenticator managing
  /// the account did so or because the client shares a signature with the managing
  /// AbstractAccountAuthenticator.
  ///
  ///
  /// The account type is a string token corresponding to the authenticator and useful domain of
  /// the account. For example, there are types corresponding to Google and Facebook. The exact
  /// string token to use will be published somewhere associated with the authenticator in
  /// question.
  ///
  ///
  /// It is safe to call this method from the main thread.
  ///
  ///
  /// Caller targeting API level android.os.Build.VERSION_CODES\#O and above, will get list
  /// of accounts made visible to it by user
  /// (see \#newChooseAccountIntent(Account, List, String[], String,
  /// String, String[], Bundle)) or AbstractAcccountAuthenticator
  /// using \#setAccountVisibility.
  /// android.Manifest.permission\#GET_ACCOUNTS permission is not used.
  ///
  ///
  /// Caller targeting API level below android.os.Build.VERSION_CODES\#O that have not been
  /// granted the android.Manifest.permission\#GET_ACCOUNTS permission, will only see those
  /// accounts managed by AbstractAccountAuthenticators whose signature matches the client.
  ///
  ///
  /// __NOTE:__ If targeting your app to work on API level
  /// android.os.Build.VERSION_CODES\#LOLLIPOP_MR1 and before,
  /// android.Manifest.permission\#GET_ACCOUNTS permission is
  /// needed for those platforms, irrespective of uid or signature match. See docs for this
  /// function in API level android.os.Build.VERSION_CODES\#LOLLIPOP_MR1.
  ///
  /// Requires android.Manifest.permission\#GET_ACCOUNTS
  ///@param type The type of accounts to return, null to retrieve all accounts
  ///@return An array of Account, one per matching account. Empty (never null) if no
  ///         accounts of the specified type have been added.
  jni.JniObject getAccountsByType(jni.JniString type) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getAccountsByType,
          jni.JniType.objectType,
          [type.reference]).object);

  static final _id_hasFeatures = jniAccessors.getMethodIDOf(
      _classRef,
      "hasFeatures",
      "(Landroid/accounts/Account;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<java.lang.Boolean> hasFeatures(android.accounts.Account account, java.lang.String[] features, android.accounts.AccountManagerCallback<java.lang.Boolean> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Finds out whether a particular account has all the specified features. Account features are
  /// authenticator-specific string tokens identifying boolean account properties. For example,
  /// features are used to tell whether Google accounts have a particular service (such as Google
  /// Calendar or Google Talk) enabled. The feature names and their meanings are published
  /// somewhere associated with the authenticator in question.
  ///
  ///
  /// This method may be called from any thread, but the returned AccountManagerFuture must
  /// not be used on the main thread.
  ///
  ///
  /// If caller target API level is below android.os.Build.VERSION_CODES\#O, it is
  /// required to hold the permission android.Manifest.permission\#GET_ACCOUNTS or have a
  /// signature match with the AbstractAccountAuthenticator that manages the account.
  ///@param account The Account to test
  ///@param features An array of the account features to check
  ///@param callback Callback to invoke when the request completes, null for no callback
  ///@param handler Handler identifying the callback thread, null for the main thread
  ///@return An AccountManagerFuture which resolves to a Boolean, true if the account
  ///         exists and has all of the specified features.
  accountmanagerfuture_.AccountManagerFuture hasFeatures(
          account_.Account account,
          jni.JniObject features,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_hasFeatures, jni.JniType.objectType, [
        account.reference,
        features.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_getAccountsByTypeAndFeatures = jniAccessors.getMethodIDOf(
      _classRef,
      "getAccountsByTypeAndFeatures",
      "(Ljava/lang/String;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.accounts.Account[]> getAccountsByTypeAndFeatures(java.lang.String type, java.lang.String[] features, android.accounts.AccountManagerCallback<android.accounts.Account[]> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Lists all accounts of a type which have certain features. The account type identifies the
  /// authenticator (see \#getAccountsByType). Account features are authenticator-specific
  /// string tokens identifying boolean account properties (see \#hasFeatures).
  ///
  ///
  /// Unlike \#getAccountsByType, this method calls the authenticator, which may contact the
  /// server or do other work to check account features, so the method returns an
  /// AccountManagerFuture.
  ///
  ///
  /// This method may be called from any thread, but the returned AccountManagerFuture must
  /// not be used on the main thread.
  ///
  ///
  /// Caller targeting API level android.os.Build.VERSION_CODES\#O and above, will get list
  /// of accounts made visible to it by user
  /// (see \#newChooseAccountIntent(Account, List, String[], String,
  /// String, String[], Bundle)) or AbstractAcccountAuthenticator
  /// using \#setAccountVisibility.
  /// android.Manifest.permission\#GET_ACCOUNTS permission is not used.
  ///
  ///
  /// Caller targeting API level below android.os.Build.VERSION_CODES\#O that have not been
  /// granted the android.Manifest.permission\#GET_ACCOUNTS permission, will only see those
  /// accounts managed by AbstractAccountAuthenticators whose signature matches the client.
  ///
  /// __NOTE:__ If targeting your app to work on API level
  /// android.os.Build.VERSION_CODES\#LOLLIPOP_MR1 and before,
  /// android.Manifest.permission\#GET_ACCOUNTS permission is
  /// needed for those platforms, irrespective of uid or signature match. See docs for this
  /// function in API level android.os.Build.VERSION_CODES\#LOLLIPOP_MR1.
  ///@param type The type of accounts to return, must not be null
  ///@param features An array of the account features to require, may be null or empty *
  ///@param callback Callback to invoke when the request completes, null for no callback
  ///@param handler Handler identifying the callback thread, null for the main thread
  ///@return An AccountManagerFuture which resolves to an array of Account, one
  ///         per account of the specified type which matches the requested features.
  accountmanagerfuture_.AccountManagerFuture getAccountsByTypeAndFeatures(
          jni.JniString type,
          jni.JniObject features,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getAccountsByTypeAndFeatures,
              jni.JniType.objectType, [
        type.reference,
        features.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_addAccountExplicitly = jniAccessors.getMethodIDOf(
      _classRef,
      "addAccountExplicitly",
      "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Z");

  /// from: public boolean addAccountExplicitly(android.accounts.Account account, java.lang.String password, android.os.Bundle userdata)
  ///
  /// Adds an account directly to the AccountManager. Normally used by sign-up
  /// wizards associated with authenticators, not directly by applications.
  /// Calling this method does not update the last authenticated timestamp,
  /// referred by \#KEY_LAST_AUTHENTICATED_TIME. To update it, call
  /// \#notifyAccountAuthenticated(Account) after getting success.
  /// However, if this method is called when it is triggered by addAccount() or
  /// addAccountAsUser() or similar functions, then there is no need to update
  /// timestamp manually as it is updated automatically by framework on
  /// successful completion of the mentioned functions.
  /// It is safe to call this method from the main thread.
  /// This method requires the caller to have a signature match with the
  /// authenticator that owns the specified account.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// AUTHENTICATE_ACCOUNTS permission is needed for those platforms. See docs
  /// for this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#AUTHENTICATE_ACCOUNTS
  ///@param account The Account to add
  ///@param password The password to associate with the account, null for none
  ///@param userdata String values to use for the account's userdata, null for
  ///            none
  ///@return True if the account was successfully added, false if the account
  ///         already exists, the account is null, or another error occurs.
  bool addAccountExplicitly(account_.Account account, jni.JniString password,
          bundle_.Bundle userdata) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addAccountExplicitly,
          jni.JniType.booleanType,
          [account.reference, password.reference, userdata.reference]).boolean;

  static final _id_addAccountExplicitly1 = jniAccessors.getMethodIDOf(
      _classRef,
      "addAccountExplicitly",
      "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;)Z");

  /// from: public boolean addAccountExplicitly(android.accounts.Account account, java.lang.String password, android.os.Bundle extras, java.util.Map<java.lang.String,java.lang.Integer> visibility)
  ///
  /// Adds an account directly to the AccountManager. Additionally it specifies Account visibility
  /// for given list of packages.
  ///
  /// Normally used by sign-up wizards associated with authenticators, not directly by
  /// applications.
  ///
  /// Calling this method does not update the last authenticated timestamp, referred by
  /// \#KEY_LAST_AUTHENTICATED_TIME. To update it, call
  /// \#notifyAccountAuthenticated(Account) after getting success.
  ///
  /// It is safe to call this method from the main thread.
  ///
  /// This method requires the caller to have a signature match with the authenticator that owns
  /// the specified account.
  ///@param account The Account to add
  ///@param password The password to associate with the account, null for none
  ///@param extras String values to use for the account's userdata, null for none
  ///@param visibility Map from packageName to visibility values which will be set before account
  ///        is added. See \#getAccountVisibility for possible values.
  ///@return True if the account was successfully added, false if the account already exists, the
  ///         account is null, or another error occurs.
  bool addAccountExplicitly1(account_.Account account, jni.JniString password,
          bundle_.Bundle extras, jni.JniObject visibility) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_addAccountExplicitly1, jni.JniType.booleanType, [
        account.reference,
        password.reference,
        extras.reference,
        visibility.reference
      ]).boolean;

  static final _id_getPackagesAndVisibilityForAccount =
      jniAccessors.getMethodIDOf(
          _classRef,
          "getPackagesAndVisibilityForAccount",
          "(Landroid/accounts/Account;)Ljava/util/Map;");

  /// from: public java.util.Map<java.lang.String,java.lang.Integer> getPackagesAndVisibilityForAccount(android.accounts.Account account)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns package names and visibility which were explicitly set for given account.
  ///
  /// This method requires the caller to have a signature match with the authenticator that owns
  /// the specified account.
  ///@param account The account for which visibility data should be returned
  ///@return Map from package names to visibility for given account
  jni.JniObject getPackagesAndVisibilityForAccount(account_.Account account) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPackagesAndVisibilityForAccount,
          jni.JniType.objectType,
          [account.reference]).object);

  static final _id_getAccountsAndVisibilityForPackage =
      jniAccessors.getMethodIDOf(
          _classRef,
          "getAccountsAndVisibilityForPackage",
          "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;");

  /// from: public java.util.Map<android.accounts.Account,java.lang.Integer> getAccountsAndVisibilityForPackage(java.lang.String packageName, java.lang.String accountType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets all accounts of given type and their visibility for specific package. This method
  /// requires the caller to have a signature match with the authenticator that manages
  /// accountType. It is a helper method which combines calls to \#getAccountsByType by
  /// authenticator and \#getAccountVisibility for every returned account.
  ///
  ///
  ///@param packageName Package name
  ///@param accountType Account type
  ///@return Map with visibility for all accounts of given type
  /// See \#getAccountVisibility for possible values
  jni.JniObject getAccountsAndVisibilityForPackage(
          jni.JniString packageName, jni.JniString accountType) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getAccountsAndVisibilityForPackage,
          jni.JniType.objectType,
          [packageName.reference, accountType.reference]).object);

  static final _id_setAccountVisibility = jniAccessors.getMethodIDOf(
      _classRef,
      "setAccountVisibility",
      "(Landroid/accounts/Account;Ljava/lang/String;I)Z");

  /// from: public boolean setAccountVisibility(android.accounts.Account account, java.lang.String packageName, int visibility)
  ///
  /// Set visibility value of given account to certain package.
  /// Package name must match installed application, or be equal to
  /// \#PACKAGE_NAME_KEY_LEGACY_VISIBLE or \#PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE.
  ///
  /// Possible visibility values:
  /// <ul>
  /// <li>\#VISIBILITY_UNDEFINED</li>
  /// <li>\#VISIBILITY_VISIBLE</li>
  /// <li>\#VISIBILITY_USER_MANAGED_VISIBLE</li>
  /// <li>\#VISIBILITY_NOT_VISIBLE
  /// <li>\#VISIBILITY_USER_MANAGED_NOT_VISIBLE</li>
  /// </ul>
  ///
  /// This method requires the caller to have a signature match with the authenticator that owns
  /// the specified account.
  ///@param account Account to update visibility
  ///@param packageName Package name of the application to modify account visibility
  ///@param visibility New visibility value
  ///
  /// Value is android.accounts.AccountManager\#VISIBILITY_UNDEFINED, android.accounts.AccountManager\#VISIBILITY_VISIBLE, android.accounts.AccountManager\#VISIBILITY_USER_MANAGED_VISIBLE, android.accounts.AccountManager\#VISIBILITY_NOT_VISIBLE, or android.accounts.AccountManager\#VISIBILITY_USER_MANAGED_NOT_VISIBLE
  ///@return True, if visibility value was successfully updated.
  bool setAccountVisibility(account_.Account account, jni.JniString packageName,
          int visibility) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setAccountVisibility,
          jni.JniType.booleanType,
          [account.reference, packageName.reference, visibility]).boolean;

  static final _id_getAccountVisibility = jniAccessors.getMethodIDOf(
      _classRef,
      "getAccountVisibility",
      "(Landroid/accounts/Account;Ljava/lang/String;)I");

  /// from: public int getAccountVisibility(android.accounts.Account account, java.lang.String packageName)
  ///
  /// Get visibility of certain account for given application. Possible returned values are:
  /// <ul>
  /// <li>\#VISIBILITY_VISIBLE</li>
  /// <li>\#VISIBILITY_USER_MANAGED_VISIBLE</li>
  /// <li>\#VISIBILITY_NOT_VISIBLE
  /// <li>\#VISIBILITY_USER_MANAGED_NOT_VISIBLE</li>
  /// </ul>
  ///
  ///
  /// This method requires the caller to have a signature match with the authenticator that owns
  /// the specified account.
  ///@param account Account to get visibility
  ///@param packageName Package name of the application to get account visibility
  ///@return int Visibility of given account.
  ///
  /// Value is android.accounts.AccountManager\#VISIBILITY_UNDEFINED, android.accounts.AccountManager\#VISIBILITY_VISIBLE, android.accounts.AccountManager\#VISIBILITY_USER_MANAGED_VISIBLE, android.accounts.AccountManager\#VISIBILITY_NOT_VISIBLE, or android.accounts.AccountManager\#VISIBILITY_USER_MANAGED_NOT_VISIBLE
  int getAccountVisibility(
          account_.Account account, jni.JniString packageName) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getAccountVisibility,
          jni.JniType.intType,
          [account.reference, packageName.reference]).integer;

  static final _id_notifyAccountAuthenticated = jniAccessors.getMethodIDOf(
      _classRef, "notifyAccountAuthenticated", "(Landroid/accounts/Account;)Z");

  /// from: public boolean notifyAccountAuthenticated(android.accounts.Account account)
  ///
  /// Notifies the system that the account has just been authenticated. This
  /// information may be used by other applications to verify the account. This
  /// should be called only when the user has entered correct credentials for
  /// the account.
  ///
  /// It is not safe to call this method from the main thread. As such, call it
  /// from another thread.
  /// This method requires the caller to have a signature match with the
  /// authenticator that owns the specified account.
  ///
  /// Requires android.Manifest.permission\#AUTHENTICATE_ACCOUNTS
  ///@param account The Account to be updated.
  ///@return boolean {@code true} if the authentication of the account has been successfully
  ///         acknowledged. Otherwise {@code false}.
  bool notifyAccountAuthenticated(account_.Account account) =>
      jniAccessors.callMethodWithArgs(reference, _id_notifyAccountAuthenticated,
          jni.JniType.booleanType, [account.reference]).boolean;

  static final _id_renameAccount = jniAccessors.getMethodIDOf(
      _classRef,
      "renameAccount",
      "(Landroid/accounts/Account;Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.accounts.Account> renameAccount(android.accounts.Account account, java.lang.String newName, android.accounts.AccountManagerCallback<android.accounts.Account> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Rename the specified Account.  This is equivalent to removing
  /// the existing account and adding a new renamed account with the old
  /// account's user data.
  ///
  /// It is safe to call this method from the main thread.
  ///
  /// This method requires the caller to have a signature match with the
  /// authenticator that manages the specified account.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator
  /// is needed for those platforms. See docs for this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#AUTHENTICATE_ACCOUNTS
  ///@param account The Account to rename
  ///@param newName String name to be associated with the account.
  ///@param callback Callback to invoke when the request completes, null for
  ///     no callback
  ///@param handler Handler identifying the callback thread, null for
  ///     the main thread
  ///@return An AccountManagerFuture which resolves to the Account
  ///     after the name change. If successful the account's name will be the
  ///     specified new name.
  accountmanagerfuture_.AccountManagerFuture renameAccount(
          account_.Account account,
          jni.JniString newName,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_renameAccount, jni.JniType.objectType, [
        account.reference,
        newName.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_getPreviousName = jniAccessors.getMethodIDOf(_classRef,
      "getPreviousName", "(Landroid/accounts/Account;)Ljava/lang/String;");

  /// from: public java.lang.String getPreviousName(android.accounts.Account account)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the previous name associated with the account or {@code null}, if
  /// none. This is intended so that clients of
  /// OnAccountsUpdateListener can determine if an
  /// authenticator has renamed an account.
  ///
  /// It is safe to call this method from the main thread.
  ///@param account The account to query for a previous name.
  ///@return The account's previous name, null if the account has never been
  ///         renamed.
  jni.JniString getPreviousName(account_.Account account) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPreviousName,
          jni.JniType.objectType,
          [account.reference]).object);

  static final _id_removeAccount = jniAccessors.getMethodIDOf(
      _classRef,
      "removeAccount",
      "(Landroid/accounts/Account;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<java.lang.Boolean> removeAccount(android.accounts.Account account, android.accounts.AccountManagerCallback<java.lang.Boolean> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Removes an account from the AccountManager.  Does nothing if the account
  /// does not exist.  Does not delete the account from the server.
  /// The authenticator may have its own policies preventing account
  /// deletion, in which case the account will not be deleted.
  ///
  /// This method requires the caller to have a signature match with the
  /// authenticator that manages the specified account.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// MANAGE_ACCOUNTS permission is needed for those platforms. See docs for
  /// this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#MANAGE_ACCOUNTS
  ///@param account The Account to remove
  ///@param callback Callback to invoke when the request completes,
  ///     null for no callback
  ///@param handler Handler identifying the callback thread,
  ///     null for the main thread
  ///@return An AccountManagerFuture which resolves to a Boolean,
  ///     true if the account has been successfully removed
  ///@deprecated use
  ///     \#removeAccount(Account, Activity, AccountManagerCallback, Handler)
  ///     instead
  accountmanagerfuture_.AccountManagerFuture removeAccount(
          account_.Account account,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_removeAccount, jni.JniType.objectType, [
        account.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_removeAccount1 = jniAccessors.getMethodIDOf(
      _classRef,
      "removeAccount",
      "(Landroid/accounts/Account;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> removeAccount(android.accounts.Account account, android.app.Activity activity, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Removes an account from the AccountManager. Does nothing if the account
  /// does not exist.  Does not delete the account from the server.
  /// The authenticator may have its own policies preventing account
  /// deletion, in which case the account will not be deleted.
  ///
  /// This method may be called from any thread, but the returned
  /// AccountManagerFuture must not be used on the main thread.
  ///
  /// This method requires the caller to have a signature match with the
  /// authenticator that manages the specified account.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// MANAGE_ACCOUNTS permission is needed for those platforms. See docs for
  /// this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#MANAGE_ACCOUNTS
  ///@param account The Account to remove
  ///@param activity The Activity context to use for launching a new
  ///     authenticator-defined sub-Activity to prompt the user to delete an
  ///     account; used only to call startActivity(); if null, the prompt
  ///     will not be launched directly, but the Intent may be
  ///     returned to the caller instead
  ///@param callback Callback to invoke when the request completes,
  ///     null for no callback
  ///@param handler Handler identifying the callback thread,
  ///     null for the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle with
  ///     \#KEY_BOOLEAN_RESULT if activity was specified and an account
  ///     was removed or if active. If no activity was specified, the returned
  ///     Bundle contains only \#KEY_INTENT with the Intent
  ///     needed to launch the actual account removal process, if authenticator
  ///     needs the activity launch. If an error occurred,
  ///     AccountManagerFuture\#getResult() throws:
  /// <ul>
  /// <li> AuthenticatorException if no authenticator was registered for
  ///      this account type or the authenticator failed to respond
  /// <li> OperationCanceledException if the operation was canceled for
  ///      any reason, including the user canceling the creation process or
  ///      adding accounts (of this type) has been disabled by policy
  /// </ul>
  accountmanagerfuture_.AccountManagerFuture removeAccount1(
          account_.Account account,
          activity_.Activity activity,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_removeAccount1, jni.JniType.objectType, [
        account.reference,
        activity.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_removeAccountExplicitly = jniAccessors.getMethodIDOf(
      _classRef, "removeAccountExplicitly", "(Landroid/accounts/Account;)Z");

  /// from: public boolean removeAccountExplicitly(android.accounts.Account account)
  ///
  /// Removes an account directly. Normally used by authenticators, not
  /// directly by applications. Does not delete the account from the server.
  /// The authenticator may have its own policies preventing account deletion,
  /// in which case the account will not be deleted.
  ///
  /// It is safe to call this method from the main thread.
  /// This method requires the caller to have a signature match with the
  /// authenticator that manages the specified account.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator
  /// is needed for those platforms. See docs for this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#AUTHENTICATE_ACCOUNTS
  ///@param account The Account to delete.
  ///@return True if the account was successfully deleted, false if the
  ///         account did not exist, the account is null, or another error
  ///         occurs.
  bool removeAccountExplicitly(account_.Account account) =>
      jniAccessors.callMethodWithArgs(reference, _id_removeAccountExplicitly,
          jni.JniType.booleanType, [account.reference]).boolean;

  static final _id_invalidateAuthToken = jniAccessors.getMethodIDOf(_classRef,
      "invalidateAuthToken", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void invalidateAuthToken(java.lang.String accountType, java.lang.String authToken)
  ///
  /// Removes an auth token from the AccountManager's cache.  Does nothing if
  /// the auth token is not currently in the cache.  Applications must call this
  /// method when the auth token is found to have expired or otherwise become
  /// invalid for authenticating requests.  The AccountManager does not validate
  /// or expire cached auth tokens otherwise.
  ///
  /// It is safe to call this method from the main thread.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// MANAGE_ACCOUNTS or USE_CREDENTIALS permission is needed for those
  /// platforms. See docs for this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#MANAGE_ACCOUNTS or android.Manifest.permission\#USE_CREDENTIALS
  ///@param accountType The account type of the auth token to invalidate, must not be null
  ///@param authToken The auth token to invalidate, may be null
  void invalidateAuthToken(
          jni.JniString accountType, jni.JniString authToken) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_invalidateAuthToken,
          jni.JniType.voidType,
          [accountType.reference, authToken.reference]).check();

  static final _id_peekAuthToken = jniAccessors.getMethodIDOf(
      _classRef,
      "peekAuthToken",
      "(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String peekAuthToken(android.accounts.Account account, java.lang.String authTokenType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an auth token from the AccountManager's cache.  If no auth
  /// token is cached for this account, null will be returned -- a new
  /// auth token will not be generated, and the server will not be contacted.
  /// Intended for use by the authenticator, not directly by applications.
  ///
  /// It is safe to call this method from the main thread.
  ///
  /// This method requires the caller to have a signature match with the
  /// authenticator that manages the specified account.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator
  /// is needed for those platforms. See docs for this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#AUTHENTICATE_ACCOUNTS
  ///@param account The account for which an auth token is to be fetched. Cannot be {@code null}.
  ///@param authTokenType The type of auth token to fetch. Cannot be {@code null}.
  ///@return The cached auth token for this account and type, or null if
  ///     no auth token is cached or the account does not exist.
  ///@see \#getAuthToken
  jni.JniString peekAuthToken(
          account_.Account account, jni.JniString authTokenType) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_peekAuthToken,
          jni.JniType.objectType,
          [account.reference, authTokenType.reference]).object);

  static final _id_setPassword = jniAccessors.getMethodIDOf(_classRef,
      "setPassword", "(Landroid/accounts/Account;Ljava/lang/String;)V");

  /// from: public void setPassword(android.accounts.Account account, java.lang.String password)
  ///
  /// Sets or forgets a saved password. This modifies the local copy of the
  /// password used to automatically authenticate the user; it does not change
  /// the user's account password on the server. Intended for use by the
  /// authenticator, not directly by applications.
  /// Calling this method does not update the last authenticated timestamp,
  /// referred by \#KEY_LAST_AUTHENTICATED_TIME. To update it, call
  /// \#notifyAccountAuthenticated(Account) after getting success.
  /// It is safe to call this method from the main thread.
  /// This method requires the caller to have a signature match with the
  /// authenticator that manages the specified account.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator
  /// is needed for those platforms. See docs for this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#AUTHENTICATE_ACCOUNTS
  ///@param account The account whose password is to be set. Cannot be
  ///            {@code null}.
  ///@param password The password to set, null to clear the password
  void setPassword(account_.Account account, jni.JniString password) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setPassword,
          jni.JniType.voidType,
          [account.reference, password.reference]).check();

  static final _id_clearPassword = jniAccessors.getMethodIDOf(
      _classRef, "clearPassword", "(Landroid/accounts/Account;)V");

  /// from: public void clearPassword(android.accounts.Account account)
  ///
  /// Forgets a saved password.  This erases the local copy of the password;
  /// it does not change the user's account password on the server.
  /// Has the same effect as setPassword(account, null) but requires fewer
  /// permissions, and may be used by applications or management interfaces
  /// to "sign out" from an account.
  ///
  /// This method only successfully clear the account's password when the
  /// caller has the same signature as the authenticator that owns the
  /// specified account. Otherwise, this method will silently fail.
  ///
  /// It is safe to call this method from the main thread.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// MANAGE_ACCOUNTS permission is needed for those platforms. See docs for
  /// this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#MANAGE_ACCOUNTS
  ///@param account The account whose password to clear
  void clearPassword(account_.Account account) =>
      jniAccessors.callMethodWithArgs(reference, _id_clearPassword,
          jni.JniType.voidType, [account.reference]).check();

  static final _id_setUserData = jniAccessors.getMethodIDOf(
      _classRef,
      "setUserData",
      "(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void setUserData(android.accounts.Account account, java.lang.String key, java.lang.String value)
  ///
  /// Sets one userdata key for an account.  Intended by use for the
  /// authenticator to stash state for itself, not directly by applications.
  /// The meaning of the keys and values is up to the authenticator.
  ///
  /// It is safe to call this method from the main thread.
  ///
  /// This method requires the caller to have a signature match with the
  /// authenticator that manages the specified account.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator
  /// is needed for those platforms. See docs for this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#AUTHENTICATE_ACCOUNTS
  ///@param account Account whose user data is to be set. Must not be {@code null}.
  ///@param key String user data key to set.  Must not be null
  ///@param value String value to set, {@code null} to clear this user data key
  void setUserData(
          account_.Account account, jni.JniString key, jni.JniString value) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setUserData,
          jni.JniType.voidType,
          [account.reference, key.reference, value.reference]).check();

  static final _id_setAuthToken = jniAccessors.getMethodIDOf(
      _classRef,
      "setAuthToken",
      "(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void setAuthToken(android.accounts.Account account, java.lang.String authTokenType, java.lang.String authToken)
  ///
  /// Adds an auth token to the AccountManager cache for an account.
  /// If the account does not exist then this call has no effect.
  /// Replaces any previous auth token for this account and auth token type.
  /// Intended for use by the authenticator, not directly by applications.
  ///
  /// It is safe to call this method from the main thread.
  ///
  /// This method requires the caller to have a signature match with the
  /// authenticator that manages the specified account.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator
  /// is needed for those platforms. See docs for this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#AUTHENTICATE_ACCOUNTS
  ///@param account The account to set an auth token for
  ///@param authTokenType The type of the auth token, see {\#getAuthToken}
  ///@param authToken The auth token to add to the cache
  void setAuthToken(account_.Account account, jni.JniString authTokenType,
          jni.JniString authToken) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_setAuthToken, jni.JniType.voidType, [
        account.reference,
        authTokenType.reference,
        authToken.reference
      ]).check();

  static final _id_blockingGetAuthToken = jniAccessors.getMethodIDOf(
      _classRef,
      "blockingGetAuthToken",
      "(Landroid/accounts/Account;Ljava/lang/String;Z)Ljava/lang/String;");

  /// from: public java.lang.String blockingGetAuthToken(android.accounts.Account account, java.lang.String authTokenType, boolean notifyAuthFailure)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This convenience helper synchronously gets an auth token with
  /// \#getAuthToken(Account, String, boolean, AccountManagerCallback, Handler).
  ///
  /// This method may block while a network request completes, and must
  /// never be made from the main thread.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// USE_CREDENTIALS permission is needed for those platforms. See docs for
  /// this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#USE_CREDENTIALS
  ///@param account The account to fetch an auth token for
  ///@param authTokenType The auth token type, see \#getAuthToken getAuthToken()
  ///@param notifyAuthFailure If true, display a notification and return null
  ///     if authentication fails; if false, prompt and wait for the user to
  ///     re-enter correct credentials before returning
  ///@return An auth token of the specified type for this account, or null
  ///     if authentication fails or none can be fetched.
  ///@throws AuthenticatorException if the authenticator failed to respond
  ///@throws OperationCanceledException if the request was canceled for any
  ///     reason, including the user canceling a credential request
  ///@throws java.io.IOException if the authenticator experienced an I/O problem
  ///     creating a new auth token, usually because of network trouble
  jni.JniString blockingGetAuthToken(account_.Account account,
          jni.JniString authTokenType, bool notifyAuthFailure) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_blockingGetAuthToken, jni.JniType.objectType, [
        account.reference,
        authTokenType.reference,
        notifyAuthFailure
      ]).object);

  static final _id_getAuthToken = jniAccessors.getMethodIDOf(
      _classRef,
      "getAuthToken",
      "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> getAuthToken(android.accounts.Account account, java.lang.String authTokenType, android.os.Bundle options, android.app.Activity activity, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an auth token of the specified type for a particular account,
  /// prompting the user for credentials if necessary.  This method is
  /// intended for applications running in the foreground where it makes
  /// sense to ask the user directly for a password.
  ///
  /// If a previously generated auth token is cached for this account and
  /// type, then it is returned.  Otherwise, if a saved password is
  /// available, it is sent to the server to generate a new auth token.
  /// Otherwise, the user is prompted to enter a password.
  ///
  /// Some authenticators have auth token _types_, whose value
  /// is authenticator-dependent.  Some services use different token types to
  /// access different functionality -- for example, Google uses different auth
  /// tokens to access Gmail and Google Calendar for the same account.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// USE_CREDENTIALS permission is needed for those platforms. See docs for
  /// this function in API level 22.
  ///
  /// This method may be called from any thread, but the returned
  /// AccountManagerFuture must not be used on the main thread.
  ///
  /// Requires android.Manifest.permission\#USE_CREDENTIALS
  ///@param account The account to fetch an auth token for
  ///@param authTokenType The auth token type, an authenticator-dependent
  ///     string token, must not be null
  ///@param options Authenticator-specific options for the request,
  ///     may be null or empty
  ///@param activity The Activity context to use for launching a new
  ///     authenticator-defined sub-Activity to prompt the user for a password
  ///     if necessary; used only to call startActivity(); must not be null.
  ///@param callback Callback to invoke when the request completes,
  ///     null for no callback
  ///@param handler Handler identifying the callback thread,
  ///     null for the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle with
  ///     at least the following fields:
  /// <ul>
  /// <li> \#KEY_ACCOUNT_NAME - the name of the account you supplied
  /// <li> \#KEY_ACCOUNT_TYPE - the type of the account
  /// <li> \#KEY_AUTHTOKEN - the auth token you wanted
  /// </ul>
  ///
  /// (Other authenticator-specific values may be returned.)  If an auth token
  /// could not be fetched, AccountManagerFuture\#getResult() throws:
  /// <ul>
  /// <li> AuthenticatorException if the authenticator failed to respond
  /// <li> OperationCanceledException if the operation is canceled for
  ///      any reason, incluidng the user canceling a credential request
  /// <li> IOException if the authenticator experienced an I/O problem
  ///      creating a new auth token, usually because of network trouble
  /// </ul>
  /// If the account is no longer present on the device, the return value is
  /// authenticator-dependent.  The caller should verify the validity of the
  /// account before requesting an auth token.
  accountmanagerfuture_.AccountManagerFuture getAuthToken(
          account_.Account account,
          jni.JniString authTokenType,
          bundle_.Bundle options,
          activity_.Activity activity,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getAuthToken, jni.JniType.objectType, [
        account.reference,
        authTokenType.reference,
        options.reference,
        activity.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_getAuthToken1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getAuthToken",
      "(Landroid/accounts/Account;Ljava/lang/String;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> getAuthToken(android.accounts.Account account, java.lang.String authTokenType, boolean notifyAuthFailure, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an auth token of the specified type for a particular account,
  /// optionally raising a notification if the user must enter credentials.
  /// This method is intended for background tasks and services where the
  /// user should not be immediately interrupted with a password prompt.
  ///
  /// If a previously generated auth token is cached for this account and
  /// type, then it is returned.  Otherwise, if a saved password is
  /// available, it is sent to the server to generate a new auth token.
  /// Otherwise, an Intent is returned which, when started, will
  /// prompt the user for a password.  If the notifyAuthFailure parameter is
  /// set, a status bar notification is also created with the same Intent,
  /// alerting the user that they need to enter a password at some point.
  ///
  /// In that case, you may need to wait until the user responds, which
  /// could take hours or days or forever.  When the user does respond and
  /// supply a new password, the account manager will broadcast the
  /// \#LOGIN_ACCOUNTS_CHANGED_ACTION Intent and
  /// notify OnAccountsUpdateListener which applications can
  /// use to try again.
  ///
  /// If notifyAuthFailure is not set, it is the application's
  /// responsibility to launch the returned Intent at some point.
  /// Either way, the result from this call will not wait for user action.
  ///
  /// Some authenticators have auth token _types_, whose value
  /// is authenticator-dependent.  Some services use different token types to
  /// access different functionality -- for example, Google uses different auth
  /// tokens to access Gmail and Google Calendar for the same account.
  ///
  /// This method may be called from any thread, but the returned
  /// AccountManagerFuture must not be used on the main thread.
  ///
  /// Requires android.Manifest.permission\#USE_CREDENTIALS
  ///@param account The account to fetch an auth token for
  ///@param authTokenType The auth token type, an authenticator-dependent
  ///     string token, must not be null
  ///@param notifyAuthFailure True to add a notification to prompt the
  ///     user for a password if necessary, false to leave that to the caller
  ///@param callback Callback to invoke when the request completes,
  ///     null for no callback
  ///@param handler Handler identifying the callback thread,
  ///     null for the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle with
  ///     at least the following fields on success:
  /// <ul>
  /// <li> \#KEY_ACCOUNT_NAME - the name of the account you supplied
  /// <li> \#KEY_ACCOUNT_TYPE - the type of the account
  /// <li> \#KEY_AUTHTOKEN - the auth token you wanted
  /// </ul>
  ///
  /// (Other authenticator-specific values may be returned.)  If the user
  /// must enter credentials, the returned Bundle contains only
  /// \#KEY_INTENT with the Intent needed to launch a prompt.
  ///
  /// If an error occurred, AccountManagerFuture\#getResult() throws:
  /// <ul>
  /// <li> AuthenticatorException if the authenticator failed to respond
  /// <li> OperationCanceledException if the operation is canceled for
  ///      any reason, incluidng the user canceling a credential request
  /// <li> IOException if the authenticator experienced an I/O problem
  ///      creating a new auth token, usually because of network trouble
  /// </ul>
  /// If the account is no longer present on the device, the return value is
  /// authenticator-dependent.  The caller should verify the validity of the
  /// account before requesting an auth token.
  ///@deprecated use \#getAuthToken(Account, String, android.os.Bundle,
  /// boolean, AccountManagerCallback, android.os.Handler) instead
  accountmanagerfuture_.AccountManagerFuture getAuthToken1(
          account_.Account account,
          jni.JniString authTokenType,
          bool notifyAuthFailure,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getAuthToken1, jni.JniType.objectType, [
        account.reference,
        authTokenType.reference,
        notifyAuthFailure,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_getAuthToken2 = jniAccessors.getMethodIDOf(
      _classRef,
      "getAuthToken",
      "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> getAuthToken(android.accounts.Account account, java.lang.String authTokenType, android.os.Bundle options, boolean notifyAuthFailure, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an auth token of the specified type for a particular account,
  /// optionally raising a notification if the user must enter credentials.
  /// This method is intended for background tasks and services where the
  /// user should not be immediately interrupted with a password prompt.
  ///
  /// If a previously generated auth token is cached for this account and
  /// type, then it is returned.  Otherwise, if a saved password is
  /// available, it is sent to the server to generate a new auth token.
  /// Otherwise, an Intent is returned which, when started, will
  /// prompt the user for a password.  If the notifyAuthFailure parameter is
  /// set, a status bar notification is also created with the same Intent,
  /// alerting the user that they need to enter a password at some point.
  ///
  /// In that case, you may need to wait until the user responds, which
  /// could take hours or days or forever.  When the user does respond and
  /// supply a new password, the account manager will broadcast the
  /// \#LOGIN_ACCOUNTS_CHANGED_ACTION Intent and
  /// notify OnAccountsUpdateListener which applications can
  /// use to try again.
  ///
  /// If notifyAuthFailure is not set, it is the application's
  /// responsibility to launch the returned Intent at some point.
  /// Either way, the result from this call will not wait for user action.
  ///
  /// Some authenticators have auth token _types_, whose value
  /// is authenticator-dependent.  Some services use different token types to
  /// access different functionality -- for example, Google uses different auth
  /// tokens to access Gmail and Google Calendar for the same account.
  ///
  /// This method may be called from any thread, but the returned
  /// AccountManagerFuture must not be used on the main thread.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// USE_CREDENTIALS permission is needed for those platforms. See docs for
  /// this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#USE_CREDENTIALS
  ///@param account The account to fetch an auth token for
  ///@param authTokenType The auth token type, an authenticator-dependent
  ///     string token, must not be null
  ///@param options Authenticator-specific options for the request,
  ///     may be null or empty
  ///@param notifyAuthFailure True to add a notification to prompt the
  ///     user for a password if necessary, false to leave that to the caller
  ///@param callback Callback to invoke when the request completes,
  ///     null for no callback
  ///@param handler Handler identifying the callback thread,
  ///     null for the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle with
  ///     at least the following fields on success:
  /// <ul>
  /// <li> \#KEY_ACCOUNT_NAME - the name of the account you supplied
  /// <li> \#KEY_ACCOUNT_TYPE - the type of the account
  /// <li> \#KEY_AUTHTOKEN - the auth token you wanted
  /// </ul>
  ///
  /// (Other authenticator-specific values may be returned.)  If the user
  /// must enter credentials, the returned Bundle contains only
  /// \#KEY_INTENT with the Intent needed to launch a prompt.
  ///
  /// If an error occurred, AccountManagerFuture\#getResult() throws:
  /// <ul>
  /// <li> AuthenticatorException if the authenticator failed to respond
  /// <li> OperationCanceledException if the operation is canceled for
  ///      any reason, incluidng the user canceling a credential request
  /// <li> IOException if the authenticator experienced an I/O problem
  ///      creating a new auth token, usually because of network trouble
  /// </ul>
  /// If the account is no longer present on the device, the return value is
  /// authenticator-dependent.  The caller should verify the validity of the
  /// account before requesting an auth token.
  accountmanagerfuture_.AccountManagerFuture getAuthToken2(
          account_.Account account,
          jni.JniString authTokenType,
          bundle_.Bundle options,
          bool notifyAuthFailure,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getAuthToken2, jni.JniType.objectType, [
        account.reference,
        authTokenType.reference,
        options.reference,
        notifyAuthFailure,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_addAccount = jniAccessors.getMethodIDOf(
      _classRef,
      "addAccount",
      "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> addAccount(java.lang.String accountType, java.lang.String authTokenType, java.lang.String[] requiredFeatures, android.os.Bundle addAccountOptions, android.app.Activity activity, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Asks the user to add an account of a specified type.  The authenticator
  /// for this account type processes this request with the appropriate user
  /// interface.  If the user does elect to create a new account, the account
  /// name is returned.
  ///
  /// This method may be called from any thread, but the returned
  /// AccountManagerFuture must not be used on the main thread.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// MANAGE_ACCOUNTS permission is needed for those platforms. See docs for
  /// this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#MANAGE_ACCOUNTS
  ///@param accountType The type of account to add; must not be null
  ///@param authTokenType The type of auth token (see \#getAuthToken)
  ///     this account will need to be able to generate, null for none
  ///@param requiredFeatures The features (see \#hasFeatures) this
  ///     account must have, null for none
  ///@param addAccountOptions Authenticator-specific options for the request,
  ///     may be null or empty
  ///@param activity The Activity context to use for launching a new
  ///     authenticator-defined sub-Activity to prompt the user to create an
  ///     account; used only to call startActivity(); if null, the prompt
  ///     will not be launched directly, but the necessary Intent
  ///     will be returned to the caller instead
  ///@param callback Callback to invoke when the request completes,
  ///     null for no callback
  ///@param handler Handler identifying the callback thread,
  ///     null for the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle with
  ///     these fields if activity was specified and an account was created:
  /// <ul>
  /// <li> \#KEY_ACCOUNT_NAME - the name of the account created
  /// <li> \#KEY_ACCOUNT_TYPE - the type of the account
  /// </ul>
  ///
  /// If no activity was specified, the returned Bundle contains only
  /// \#KEY_INTENT with the Intent needed to launch the
  /// actual account creation process.  If an error occurred,
  /// AccountManagerFuture\#getResult() throws:
  /// <ul>
  /// <li> AuthenticatorException if no authenticator was registered for
  ///      this account type or the authenticator failed to respond
  /// <li> OperationCanceledException if the operation was canceled for
  ///      any reason, including the user canceling the creation process or adding accounts
  ///      (of this type) has been disabled by policy
  /// <li> IOException if the authenticator experienced an I/O problem
  ///      creating a new account, usually because of network trouble
  /// </ul>
  accountmanagerfuture_.AccountManagerFuture addAccount(
          jni.JniString accountType,
          jni.JniString authTokenType,
          jni.JniObject requiredFeatures,
          bundle_.Bundle addAccountOptions,
          activity_.Activity activity,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_addAccount, jni.JniType.objectType, [
        accountType.reference,
        authTokenType.reference,
        requiredFeatures.reference,
        addAccountOptions.reference,
        activity.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_confirmCredentials = jniAccessors.getMethodIDOf(
      _classRef,
      "confirmCredentials",
      "(Landroid/accounts/Account;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> confirmCredentials(android.accounts.Account account, android.os.Bundle options, android.app.Activity activity, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Confirms that the user knows the password for an account to make extra
  /// sure they are the owner of the account.  The user-entered password can
  /// be supplied directly, otherwise the authenticator for this account type
  /// prompts the user with the appropriate interface.  This method is
  /// intended for applications which want extra assurance; for example, the
  /// phone lock screen uses this to let the user unlock the phone with an
  /// account password if they forget the lock pattern.
  ///
  /// If the user-entered password matches a saved password for this
  /// account, the request is considered valid; otherwise the authenticator
  /// verifies the password (usually by contacting the server).
  ///
  /// This method may be called from any thread, but the returned
  /// AccountManagerFuture must not be used on the main thread.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// MANAGE_ACCOUNTS permission is needed for those platforms. See docs
  /// for this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#MANAGE_ACCOUNTS
  ///@param account The account to confirm password knowledge for
  ///@param options Authenticator-specific options for the request;
  ///     if the \#KEY_PASSWORD string field is present, the
  ///     authenticator may use it directly rather than prompting the user;
  ///     may be null or empty
  ///@param activity The Activity context to use for launching a new
  ///     authenticator-defined sub-Activity to prompt the user to enter a
  ///     password; used only to call startActivity(); if null, the prompt
  ///     will not be launched directly, but the necessary Intent
  ///     will be returned to the caller instead
  ///@param callback Callback to invoke when the request completes,
  ///     null for no callback
  ///@param handler Handler identifying the callback thread,
  ///     null for the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle
  ///     with these fields if activity or password was supplied and
  ///     the account was successfully verified:
  /// <ul>
  /// <li> \#KEY_ACCOUNT_NAME - the name of the account verified
  /// <li> \#KEY_ACCOUNT_TYPE - the type of the account
  /// <li> \#KEY_BOOLEAN_RESULT - true to indicate success
  /// </ul>
  ///
  /// If no activity or password was specified, the returned Bundle contains
  /// \#KEY_INTENT with the Intent needed to launch the
  /// password prompt.
  ///
  /// Also the returning Bundle may contain \#KEY_LAST_AUTHENTICATED_TIME indicating the last time the
  /// credential was validated/created.
  ///
  /// If an error occurred,AccountManagerFuture\#getResult() throws:
  /// <ul>
  /// <li> AuthenticatorException if the authenticator failed to respond
  /// <li> OperationCanceledException if the operation was canceled for
  ///      any reason, including the user canceling the password prompt
  /// <li> IOException if the authenticator experienced an I/O problem
  ///      verifying the password, usually because of network trouble
  /// </ul>
  accountmanagerfuture_.AccountManagerFuture confirmCredentials(
          account_.Account account,
          bundle_.Bundle options,
          activity_.Activity activity,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_confirmCredentials, jni.JniType.objectType, [
        account.reference,
        options.reference,
        activity.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_updateCredentials = jniAccessors.getMethodIDOf(
      _classRef,
      "updateCredentials",
      "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> updateCredentials(android.accounts.Account account, java.lang.String authTokenType, android.os.Bundle options, android.app.Activity activity, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Asks the user to enter a new password for an account, updating the
  /// saved credentials for the account.  Normally this happens automatically
  /// when the server rejects credentials during an auth token fetch, but this
  /// can be invoked directly to ensure we have the correct credentials stored.
  ///
  /// This method may be called from any thread, but the returned
  /// AccountManagerFuture must not be used on the main thread.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// MANAGE_ACCOUNTS permission is needed for those platforms. See docs for
  /// this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#MANAGE_ACCOUNTS
  ///@param account The account to update credentials for
  ///@param authTokenType The credentials entered must allow an auth token
  ///     of this type to be created (but no actual auth token is returned);
  ///     may be null
  ///@param options Authenticator-specific options for the request;
  ///     may be null or empty
  ///@param activity The Activity context to use for launching a new
  ///     authenticator-defined sub-Activity to prompt the user to enter a
  ///     password; used only to call startActivity(); if null, the prompt
  ///     will not be launched directly, but the necessary Intent
  ///     will be returned to the caller instead
  ///@param callback Callback to invoke when the request completes,
  ///     null for no callback
  ///@param handler Handler identifying the callback thread,
  ///     null for the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle
  ///     with these fields if an activity was supplied and the account
  ///     credentials were successfully updated:
  /// <ul>
  /// <li> \#KEY_ACCOUNT_NAME - the name of the account
  /// <li> \#KEY_ACCOUNT_TYPE - the type of the account
  /// </ul>
  ///
  /// If no activity was specified, the returned Bundle contains
  /// \#KEY_INTENT with the Intent needed to launch the
  /// password prompt. If an error occurred,
  /// AccountManagerFuture\#getResult() throws:
  /// <ul>
  /// <li> AuthenticatorException if the authenticator failed to respond
  /// <li> OperationCanceledException if the operation was canceled for
  ///      any reason, including the user canceling the password prompt
  /// <li> IOException if the authenticator experienced an I/O problem
  ///      verifying the password, usually because of network trouble
  /// </ul>
  accountmanagerfuture_.AccountManagerFuture updateCredentials(
          account_.Account account,
          jni.JniString authTokenType,
          bundle_.Bundle options,
          activity_.Activity activity,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_updateCredentials, jni.JniType.objectType, [
        account.reference,
        authTokenType.reference,
        options.reference,
        activity.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_editProperties = jniAccessors.getMethodIDOf(
      _classRef,
      "editProperties",
      "(Ljava/lang/String;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> editProperties(java.lang.String accountType, android.app.Activity activity, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Offers the user an opportunity to change an authenticator's settings.
  /// These properties are for the authenticator in general, not a particular
  /// account.  Not all authenticators support this method.
  ///
  /// This method may be called from any thread, but the returned
  /// AccountManagerFuture must not be used on the main thread.
  ///
  /// This method requires the caller to have the same signature as the
  /// authenticator associated with the specified account type.
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before,
  /// MANAGE_ACCOUNTS permission is needed for those platforms. See docs
  /// for this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#MANAGE_ACCOUNTS
  ///@param accountType The account type associated with the authenticator
  ///     to adjust
  ///@param activity The Activity context to use for launching a new
  ///     authenticator-defined sub-Activity to adjust authenticator settings;
  ///     used only to call startActivity(); if null, the settings dialog will
  ///     not be launched directly, but the necessary Intent will be
  ///     returned to the caller instead
  ///@param callback Callback to invoke when the request completes,
  ///     null for no callback
  ///@param handler Handler identifying the callback thread,
  ///     null for the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle
  ///     which is empty if properties were edited successfully, or
  ///     if no activity was specified, contains only \#KEY_INTENT
  ///     needed to launch the authenticator's settings dialog.
  ///     If an error occurred, AccountManagerFuture\#getResult()
  ///     throws:
  /// <ul>
  /// <li> AuthenticatorException if no authenticator was registered for
  ///      this account type or the authenticator failed to respond
  /// <li> OperationCanceledException if the operation was canceled for
  ///      any reason, including the user canceling the settings dialog
  /// <li> IOException if the authenticator experienced an I/O problem
  ///      updating settings, usually because of network trouble
  /// </ul>
  accountmanagerfuture_.AccountManagerFuture editProperties(
          jni.JniString accountType,
          activity_.Activity activity,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_editProperties, jni.JniType.objectType, [
        accountType.reference,
        activity.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_getAuthTokenByFeatures = jniAccessors.getMethodIDOf(
      _classRef,
      "getAuthTokenByFeatures",
      "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/Bundle;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> getAuthTokenByFeatures(java.lang.String accountType, java.lang.String authTokenType, java.lang.String[] features, android.app.Activity activity, android.os.Bundle addAccountOptions, android.os.Bundle getAuthTokenOptions, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This convenience helper combines the functionality of \#getAccountsByTypeAndFeatures,
  /// \#getAuthToken, and \#addAccount.
  ///
  ///
  /// This method gets a list of the accounts matching specific type and feature set which are
  /// visible to the caller (see \#getAccountsByType for details);
  /// if there is exactly one already visible account, it is used; if there are some
  /// accounts for which user grant visibility, the user is prompted to pick one; if there are
  /// none, the user is prompted to add one. Finally, an auth token is acquired for the chosen
  /// account.
  ///
  ///
  /// This method may be called from any thread, but the returned AccountManagerFuture must
  /// not be used on the main thread.
  ///
  ///
  /// __NOTE:__ If targeting your app to work on API level 22 and before, MANAGE_ACCOUNTS
  /// permission is needed for those platforms. See docs for this function in API level 22.
  ///
  /// Requires android.Manifest.permission\#MANAGE_ACCOUNTS
  ///@param accountType The account type required (see \#getAccountsByType), must not be
  ///        null
  ///@param authTokenType The desired auth token type (see \#getAuthToken), must not be
  ///        null
  ///@param features Required features for the account (see
  ///        \#getAccountsByTypeAndFeatures), may be null or empty
  ///@param activity The Activity context to use for launching new sub-Activities to
  ///        prompt to add an account, select an account, and/or enter a password, as necessary;
  ///        used only to call startActivity(); should not be null
  ///@param addAccountOptions Authenticator-specific options to use for adding new accounts; may
  ///        be null or empty
  ///@param getAuthTokenOptions Authenticator-specific options to use for getting auth tokens; may
  ///        be null or empty
  ///@param callback Callback to invoke when the request completes, null for no callback
  ///@param handler Handler identifying the callback thread, null for the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle with at least the
  ///         following fields:
  ///         <ul>
  ///         <li>\#KEY_ACCOUNT_NAME - the name of the account
  ///         <li>\#KEY_ACCOUNT_TYPE - the type of the account
  ///         <li>\#KEY_AUTHTOKEN - the auth token you wanted
  ///         </ul>
  ///
  ///         If an error occurred, AccountManagerFuture\#getResult() throws:
  ///         <ul>
  ///         <li>AuthenticatorException if no authenticator was registered for this
  ///         account type or the authenticator failed to respond
  ///         <li>OperationCanceledException if the operation was canceled for any reason,
  ///         including the user canceling any operation
  ///         <li>IOException if the authenticator experienced an I/O problem updating
  ///         settings, usually because of network trouble
  ///         </ul>
  accountmanagerfuture_.AccountManagerFuture getAuthTokenByFeatures(
          jni.JniString accountType,
          jni.JniString authTokenType,
          jni.JniObject features,
          activity_.Activity activity,
          bundle_.Bundle addAccountOptions,
          bundle_.Bundle getAuthTokenOptions,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getAuthTokenByFeatures, jni.JniType.objectType, [
        accountType.reference,
        authTokenType.reference,
        features.reference,
        activity.reference,
        addAccountOptions.reference,
        getAuthTokenOptions.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_newChooseAccountIntent = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "newChooseAccountIntent",
      "(Landroid/accounts/Account;Ljava/util/ArrayList;[Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;");

  /// from: static public android.content.Intent newChooseAccountIntent(android.accounts.Account selectedAccount, java.util.ArrayList<android.accounts.Account> allowableAccounts, java.lang.String[] allowableAccountTypes, boolean alwaysPromptForAccount, java.lang.String descriptionOverrideText, java.lang.String addAccountAuthTokenType, java.lang.String[] addAccountRequiredFeatures, android.os.Bundle addAccountOptions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Deprecated in favor of \#newChooseAccountIntent(Account, List, String[], String,
  /// String, String[], Bundle).
  ///
  /// Returns an intent to an Activity that prompts the user to choose from a list of
  /// accounts.
  /// The caller will then typically start the activity by calling
  /// <code>startActivityForResult(intent, ...);</code>.
  ///
  /// On success the activity returns a Bundle with the account name and type specified using
  /// keys \#KEY_ACCOUNT_NAME and \#KEY_ACCOUNT_TYPE.
  /// Chosen account is marked as \#VISIBILITY_USER_MANAGED_VISIBLE to the caller
  /// (see \#setAccountVisibility) and will be returned to it in consequent
  /// \#getAccountsByType) calls.
  ///
  /// The most common case is to call this with one account type, e.g.:
  ///
  /// <pre>  newChooseAccountIntent(null, null, new String[]{"com.google"}, false, null,
  /// null, null, null);</pre>
  ///@param selectedAccount if specified, indicates that the Account is the currently
  /// selected one, according to the caller's definition of selected.
  ///@param allowableAccounts an optional List of accounts that are allowed to be
  /// shown. If not specified then this field will not limit the displayed accounts.
  ///@param allowableAccountTypes an optional string array of account types. These are used
  /// both to filter the shown accounts and to filter the list of account types that are shown
  /// when adding an account. If not specified then this field will not limit the displayed
  /// account types when adding an account.
  ///@param alwaysPromptForAccount boolean that is ignored.
  ///@param descriptionOverrideText if non-null this string is used as the description in the
  /// accounts chooser screen rather than the default
  ///@param addAccountAuthTokenType this string is passed as the \#addAccount
  /// authTokenType parameter
  ///@param addAccountRequiredFeatures this string array is passed as the \#addAccount
  /// requiredFeatures parameter
  ///@param addAccountOptions This Bundle is passed as the \#addAccount options
  /// parameter
  ///@return an Intent that can be used to launch the ChooseAccount activity flow.
  static intent_.Intent newChooseAccountIntent(
          account_.Account selectedAccount,
          jni.JniObject allowableAccounts,
          jni.JniObject allowableAccountTypes,
          bool alwaysPromptForAccount,
          jni.JniString descriptionOverrideText,
          jni.JniString addAccountAuthTokenType,
          jni.JniObject addAccountRequiredFeatures,
          bundle_.Bundle addAccountOptions) =>
      intent_.Intent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_newChooseAccountIntent, jni.JniType.objectType, [
        selectedAccount.reference,
        allowableAccounts.reference,
        allowableAccountTypes.reference,
        alwaysPromptForAccount,
        descriptionOverrideText.reference,
        addAccountAuthTokenType.reference,
        addAccountRequiredFeatures.reference,
        addAccountOptions.reference
      ]).object);

  static final _id_newChooseAccountIntent1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "newChooseAccountIntent",
      "(Landroid/accounts/Account;Ljava/util/List;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;");

  /// from: static public android.content.Intent newChooseAccountIntent(android.accounts.Account selectedAccount, java.util.List<android.accounts.Account> allowableAccounts, java.lang.String[] allowableAccountTypes, java.lang.String descriptionOverrideText, java.lang.String addAccountAuthTokenType, java.lang.String[] addAccountRequiredFeatures, android.os.Bundle addAccountOptions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an intent to an Activity that prompts the user to choose from a list of
  /// accounts.
  /// The caller will then typically start the activity by calling
  /// <code>startActivityForResult(intent, ...);</code>.
  ///
  /// On success the activity returns a Bundle with the account name and type specified using
  /// keys \#KEY_ACCOUNT_NAME and \#KEY_ACCOUNT_TYPE.
  /// Chosen account is marked as \#VISIBILITY_USER_MANAGED_VISIBLE to the caller
  /// (see \#setAccountVisibility) and will be returned to it in consequent
  /// \#getAccountsByType) calls.
  ///
  /// The most common case is to call this with one account type, e.g.:
  ///
  /// <pre>  newChooseAccountIntent(null, null, new String[]{"com.google"}, null, null, null,
  /// null);</pre>
  ///@param selectedAccount if specified, indicates that the Account is the currently
  /// selected one, according to the caller's definition of selected.
  ///@param allowableAccounts an optional List of accounts that are allowed to be
  /// shown. If not specified then this field will not limit the displayed accounts.
  ///@param allowableAccountTypes an optional string array of account types. These are used
  /// both to filter the shown accounts and to filter the list of account types that are shown
  /// when adding an account. If not specified then this field will not limit the displayed
  /// account types when adding an account.
  ///@param descriptionOverrideText if non-null this string is used as the description in the
  /// accounts chooser screen rather than the default
  ///@param addAccountAuthTokenType this string is passed as the \#addAccount
  /// authTokenType parameter
  ///@param addAccountRequiredFeatures this string array is passed as the \#addAccount
  /// requiredFeatures parameter
  ///@param addAccountOptions This Bundle is passed as the \#addAccount options
  /// parameter
  ///@return an Intent that can be used to launch the ChooseAccount activity flow.
  static intent_.Intent newChooseAccountIntent1(
          account_.Account selectedAccount,
          jni.JniObject allowableAccounts,
          jni.JniObject allowableAccountTypes,
          jni.JniString descriptionOverrideText,
          jni.JniString addAccountAuthTokenType,
          jni.JniObject addAccountRequiredFeatures,
          bundle_.Bundle addAccountOptions) =>
      intent_.Intent.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_newChooseAccountIntent1, jni.JniType.objectType, [
        selectedAccount.reference,
        allowableAccounts.reference,
        allowableAccountTypes.reference,
        descriptionOverrideText.reference,
        addAccountAuthTokenType.reference,
        addAccountRequiredFeatures.reference,
        addAccountOptions.reference
      ]).object);

  static final _id_addOnAccountsUpdatedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnAccountsUpdatedListener",
      "(Landroid/accounts/OnAccountsUpdateListener;Landroid/os/Handler;Z)V");

  /// from: public void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener listener, android.os.Handler handler, boolean updateImmediately)
  ///
  /// Adds an OnAccountsUpdateListener to this instance of the AccountManager. This
  /// listener will be notified whenever user or AbstractAcccountAuthenticator made changes to
  /// accounts of any type related to the caller. This method is equivalent to
  /// addOnAccountsUpdatedListener(listener, handler, updateImmediately, null)
  ///
  /// Requires android.Manifest.permission\#GET_ACCOUNTS
  ///@see \#addOnAccountsUpdatedListener(OnAccountsUpdateListener, Handler, boolean,
  ///      String[])
  void addOnAccountsUpdatedListener(
          onaccountsupdatelistener_.OnAccountsUpdateListener listener,
          handler_.Handler handler,
          bool updateImmediately) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addOnAccountsUpdatedListener,
          jni.JniType.voidType,
          [listener.reference, handler.reference, updateImmediately]).check();

  static final _id_addOnAccountsUpdatedListener1 = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnAccountsUpdatedListener",
      "(Landroid/accounts/OnAccountsUpdateListener;Landroid/os/Handler;Z[Ljava/lang/String;)V");

  /// from: public void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener listener, android.os.Handler handler, boolean updateImmediately, java.lang.String[] accountTypes)
  ///
  /// Adds an OnAccountsUpdateListener to this instance of the AccountManager. This
  /// listener will be notified whenever user or AbstractAcccountAuthenticator made changes to
  /// accounts of given types related to the caller -
  /// either list of accounts returned by \#getAccounts()
  /// was changed, or new account was added for which user can grant access to the caller.
  ///
  /// As long as this listener is present, the AccountManager instance will not be
  /// garbage-collected, and neither will the Context used to retrieve it, which may be a
  /// large Activity instance. To avoid memory leaks, you must remove this listener before then.
  /// Normally listeners are added in an Activity or Service's Activity\#onCreate and
  /// removed in Activity\#onDestroy.
  ///
  /// It is safe to call this method from the main thread.
  ///@param listener The listener to send notifications to
  ///@param handler Handler identifying the thread to use for notifications, null for the
  ///        main thread
  ///@param updateImmediately If true, the listener will be invoked (on the handler thread) right
  ///        away with the current account list
  ///@param accountTypes If set, only changes to accounts of given types will be reported.
  ///@throws IllegalArgumentException if listener is null
  ///@throws IllegalStateException if listener was already added
  void addOnAccountsUpdatedListener1(
          onaccountsupdatelistener_.OnAccountsUpdateListener listener,
          handler_.Handler handler,
          bool updateImmediately,
          jni.JniObject accountTypes) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_addOnAccountsUpdatedListener1, jni.JniType.voidType, [
        listener.reference,
        handler.reference,
        updateImmediately,
        accountTypes.reference
      ]).check();

  static final _id_removeOnAccountsUpdatedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removeOnAccountsUpdatedListener",
      "(Landroid/accounts/OnAccountsUpdateListener;)V");

  /// from: public void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener listener)
  ///
  /// Removes an OnAccountsUpdateListener previously registered with
  /// \#addOnAccountsUpdatedListener.  The listener will no longer
  /// receive notifications of account changes.
  ///
  /// It is safe to call this method from the main thread.
  ///
  /// No permission is required to call this method.
  ///@param listener The previously added listener to remove
  ///@throws IllegalArgumentException if listener is null
  ///@throws IllegalStateException if listener was not already added
  void removeOnAccountsUpdatedListener(
          onaccountsupdatelistener_.OnAccountsUpdateListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeOnAccountsUpdatedListener,
          jni.JniType.voidType,
          [listener.reference]).check();

  static final _id_startAddAccountSession = jniAccessors.getMethodIDOf(
      _classRef,
      "startAddAccountSession",
      "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> startAddAccountSession(java.lang.String accountType, java.lang.String authTokenType, java.lang.String[] requiredFeatures, android.os.Bundle options, android.app.Activity activity, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Asks the user to authenticate with an account of a specified type. The
  /// authenticator for this account type processes this request with the
  /// appropriate user interface. If the user does elect to authenticate with a
  /// new account, a bundle of session data for installing the account later is
  /// returned with optional account password and account status token.
  ///
  /// This method may be called from any thread, but the returned
  /// AccountManagerFuture must not be used on the main thread.
  ///
  ///
  /// __NOTE:__ The account will not be installed to the device by calling
  /// this api alone. \#finishSession should be called after this to install the
  /// account on device.
  ///@param accountType The type of account to add; must not be null
  ///@param authTokenType The type of auth token (see \#getAuthToken)
  ///            this account will need to be able to generate, null for none
  ///@param requiredFeatures The features (see \#hasFeatures) this
  ///            account must have, null for none
  ///@param options Authenticator-specific options for the request, may be
  ///            null or empty
  ///@param activity The Activity context to use for launching a new
  ///            authenticator-defined sub-Activity to prompt the user to
  ///            create an account; used only to call startActivity(); if null,
  ///            the prompt will not be launched directly, but the necessary
  ///            Intent will be returned to the caller instead
  ///@param callback Callback to invoke when the request completes, null for
  ///            no callback
  ///@param handler Handler identifying the callback thread, null for
  ///            the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle with
  ///         these fields if activity was specified and user was authenticated
  ///         with an account:
  ///         <ul>
  ///         <li>\#KEY_ACCOUNT_SESSION_BUNDLE - encrypted Bundle for
  ///         adding the the to the device later.
  ///         <li>\#KEY_ACCOUNT_STATUS_TOKEN - optional, token to check
  ///         status of the account
  ///         </ul>
  ///         If no activity was specified, the returned Bundle contains only
  ///         \#KEY_INTENT with the Intent needed to launch the
  ///         actual account creation process. If authenticator doesn't support
  ///         this method, the returned Bundle contains only
  ///         \#KEY_ACCOUNT_SESSION_BUNDLE with encrypted
  ///         {@code options} needed to add account later. If an error
  ///         occurred, AccountManagerFuture\#getResult() throws:
  ///         <ul>
  ///         <li>AuthenticatorException if no authenticator was
  ///         registered for this account type or the authenticator failed to
  ///         respond
  ///         <li>OperationCanceledException if the operation was
  ///         canceled for any reason, including the user canceling the
  ///         creation process or adding accounts (of this type) has been
  ///         disabled by policy
  ///         <li>IOException if the authenticator experienced an I/O
  ///         problem creating a new account, usually because of network
  ///         trouble
  ///         </ul>
  ///@see \#finishSession
  accountmanagerfuture_.AccountManagerFuture startAddAccountSession(
          jni.JniString accountType,
          jni.JniString authTokenType,
          jni.JniObject requiredFeatures,
          bundle_.Bundle options,
          activity_.Activity activity,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_startAddAccountSession, jni.JniType.objectType, [
        accountType.reference,
        authTokenType.reference,
        requiredFeatures.reference,
        options.reference,
        activity.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_startUpdateCredentialsSession = jniAccessors.getMethodIDOf(
      _classRef,
      "startUpdateCredentialsSession",
      "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> startUpdateCredentialsSession(android.accounts.Account account, java.lang.String authTokenType, android.os.Bundle options, android.app.Activity activity, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Asks the user to enter a new password for an account but not updating the
  /// saved credentials for the account until \#finishSession is called.
  ///
  /// This method may be called from any thread, but the returned
  /// AccountManagerFuture must not be used on the main thread.
  ///
  /// __NOTE:__ The saved credentials for the account alone will not be
  /// updated by calling this API alone. \#finishSession should be called after
  /// this to update local credentials
  ///@param account The account to update credentials for
  ///@param authTokenType The credentials entered must allow an auth token of
  ///            this type to be created (but no actual auth token is
  ///            returned); may be null
  ///@param options Authenticator-specific options for the request; may be
  ///            null or empty
  ///@param activity The Activity context to use for launching a new
  ///            authenticator-defined sub-Activity to prompt the user to enter
  ///            a password; used only to call startActivity(); if null, the
  ///            prompt will not be launched directly, but the necessary
  ///            Intent will be returned to the caller instead
  ///@param callback Callback to invoke when the request completes, null for
  ///            no callback
  ///@param handler Handler identifying the callback thread, null for
  ///            the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle with
  ///         these fields if an activity was supplied and user was
  ///         successfully re-authenticated to the account:
  ///         <ul>
  ///         <li>\#KEY_ACCOUNT_SESSION_BUNDLE - encrypted Bundle for
  ///         updating the local credentials on device later.
  ///         <li>\#KEY_ACCOUNT_STATUS_TOKEN - optional, token to check
  ///         status of the account
  ///         </ul>
  ///         If no activity was specified, the returned Bundle contains
  ///         \#KEY_INTENT with the Intent needed to launch the
  ///         password prompt. If an error occurred,
  ///         AccountManagerFuture\#getResult() throws:
  ///         <ul>
  ///         <li>AuthenticatorException if the authenticator failed to
  ///         respond
  ///         <li>OperationCanceledException if the operation was
  ///         canceled for any reason, including the user canceling the
  ///         password prompt
  ///         <li>IOException if the authenticator experienced an I/O
  ///         problem verifying the password, usually because of network
  ///         trouble
  ///         </ul>
  ///@see \#finishSession
  accountmanagerfuture_.AccountManagerFuture startUpdateCredentialsSession(
          account_.Account account,
          jni.JniString authTokenType,
          bundle_.Bundle options,
          activity_.Activity activity,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_startUpdateCredentialsSession,
              jni.JniType.objectType, [
        account.reference,
        authTokenType.reference,
        options.reference,
        activity.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_finishSession = jniAccessors.getMethodIDOf(
      _classRef,
      "finishSession",
      "(Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<android.os.Bundle> finishSession(android.os.Bundle sessionBundle, android.app.Activity activity, android.accounts.AccountManagerCallback<android.os.Bundle> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Finishes the session started by \#startAddAccountSession or
  /// \#startUpdateCredentialsSession. This will either add the account
  /// to AccountManager or update the local credentials stored.
  ///
  /// This method may be called from any thread, but the returned
  /// AccountManagerFuture must not be used on the main thread.
  ///@param sessionBundle a Bundle created by \#startAddAccountSession or
  ///            \#startUpdateCredentialsSession
  ///@param activity The Activity context to use for launching a new
  ///            authenticator-defined sub-Activity to prompt the user to
  ///            create an account or reauthenticate existing account; used
  ///            only to call startActivity(); if null, the prompt will not
  ///            be launched directly, but the necessary Intent will
  ///            be returned to the caller instead
  ///@param callback Callback to invoke when the request completes, null for
  ///            no callback
  ///@param handler Handler identifying the callback thread, null for
  ///            the main thread
  ///@return An AccountManagerFuture which resolves to a Bundle with
  ///         these fields if an activity was supplied and an account was added
  ///         to device or local credentials were updated::
  ///         <ul>
  ///         <li>\#KEY_ACCOUNT_NAME - the name of the account created
  ///         <li>\#KEY_ACCOUNT_TYPE - the type of the account
  ///         <li>\#KEY_ACCOUNT_STATUS_TOKEN - optional, token to check
  ///         status of the account
  ///         </ul>
  ///         If no activity was specified and additional information is needed
  ///         from user, the returned Bundle may contains only
  ///         \#KEY_INTENT with the Intent needed to launch the
  ///         actual account creation process. If an error occurred,
  ///         AccountManagerFuture\#getResult() throws:
  ///         <ul>
  ///         <li>AuthenticatorException if no authenticator was
  ///         registered for this account type or the authenticator failed to
  ///         respond
  ///         <li>OperationCanceledException if the operation was
  ///         canceled for any reason, including the user canceling the
  ///         creation process or adding accounts (of this type) has been
  ///         disabled by policy
  ///         <li>IOException if the authenticator experienced an I/O
  ///         problem creating a new account, usually because of network
  ///         trouble
  ///         </ul>
  ///@see \#startAddAccountSession and \#startUpdateCredentialsSession
  accountmanagerfuture_.AccountManagerFuture finishSession(
          bundle_.Bundle sessionBundle,
          activity_.Activity activity,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_finishSession, jni.JniType.objectType, [
        sessionBundle.reference,
        activity.reference,
        callback.reference,
        handler.reference
      ]).object);

  static final _id_isCredentialsUpdateSuggested = jniAccessors.getMethodIDOf(
      _classRef,
      "isCredentialsUpdateSuggested",
      "(Landroid/accounts/Account;Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;");

  /// from: public android.accounts.AccountManagerFuture<java.lang.Boolean> isCredentialsUpdateSuggested(android.accounts.Account account, java.lang.String statusToken, android.accounts.AccountManagerCallback<java.lang.Boolean> callback, android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Checks whether \#updateCredentials or \#startUpdateCredentialsSession should be
  /// called with respect to the specified account.
  ///
  /// This method may be called from any thread, but the returned AccountManagerFuture must
  /// not be used on the main thread.
  ///@param account The Account to be checked whether \#updateCredentials or
  /// \#startUpdateCredentialsSession should be called
  ///@param statusToken a String of token to check account staus
  ///@param callback Callback to invoke when the request completes, null for no callback
  ///@param handler Handler identifying the callback thread, null for the main thread
  ///@return An AccountManagerFuture which resolves to a Boolean, true if the credentials
  ///         of the account should be updated.
  accountmanagerfuture_.AccountManagerFuture isCredentialsUpdateSuggested(
          account_.Account account,
          jni.JniString statusToken,
          accountmanagercallback_.AccountManagerCallback callback,
          handler_.Handler handler) =>
      accountmanagerfuture_.AccountManagerFuture.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_isCredentialsUpdateSuggested,
              jni.JniType.objectType, [
        account.reference,
        statusToken.reference,
        callback.reference,
        handler.reference
      ]).object);
}
