// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.accounts.AuthenticatorDescription
///
/// A Parcelable value type that contains information about an account authenticator.
class AuthenticatorDescription extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/accounts/AuthenticatorDescription");
  AuthenticatorDescription.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.accounts.AuthenticatorDescription> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to create the object from a parcel.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_accountPreferencesId =
      jniAccessors.getFieldIDOf(_classRef, "accountPreferencesId", "I");

  /// from: public final int accountPreferencesId
  ///
  /// A resource id for a hierarchy of PreferenceScreen to be added to the settings page for the
  /// account. See AbstractAccountAuthenticator for an example.
  int get accountPreferencesId => jniAccessors
      .getField(reference, _id_accountPreferencesId, jni.JniType.intType)
      .integer;

  static final _id_customTokens =
      jniAccessors.getFieldIDOf(_classRef, "customTokens", "Z");

  /// from: public final boolean customTokens
  ///
  /// Authenticator handles its own token caching and permission screen
  bool get customTokens => jniAccessors
      .getField(reference, _id_customTokens, jni.JniType.booleanType)
      .boolean;

  static final _id_iconId = jniAccessors.getFieldIDOf(_classRef, "iconId", "I");

  /// from: public final int iconId
  ///
  /// A resource id of a icon for the authenticator
  int get iconId =>
      jniAccessors.getField(reference, _id_iconId, jni.JniType.intType).integer;

  static final _id_labelId =
      jniAccessors.getFieldIDOf(_classRef, "labelId", "I");

  /// from: public final int labelId
  ///
  /// A resource id of a label for the authenticator that is suitable for displaying
  int get labelId => jniAccessors
      .getField(reference, _id_labelId, jni.JniType.intType)
      .integer;

  static final _id_packageName =
      jniAccessors.getFieldIDOf(_classRef, "packageName", "Ljava/lang/String;");

  /// from: public final java.lang.String packageName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The package name that can be used to lookup the resources from above.
  jni.JniString get packageName => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_packageName, jni.JniType.objectType)
      .object);

  static final _id_smallIconId =
      jniAccessors.getFieldIDOf(_classRef, "smallIconId", "I");

  /// from: public final int smallIconId
  ///
  /// A resource id of a smaller icon for the authenticator
  int get smallIconId => jniAccessors
      .getField(reference, _id_smallIconId, jni.JniType.intType)
      .integer;

  static final _id_type =
      jniAccessors.getFieldIDOf(_classRef, "type", "Ljava/lang/String;");

  /// from: public final java.lang.String type
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The string that uniquely identifies an authenticator
  jni.JniString get type => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_type, jni.JniType.objectType)
      .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Ljava/lang/String;IIIIZ)V");

  /// from: public void <init>(java.lang.String type, java.lang.String packageName, int labelId, int iconId, int smallIconId, int prefId, boolean customTokens)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A constructor for a full AuthenticatorDescription
  AuthenticatorDescription(jni.JniString type, jni.JniString packageName,
      int labelId, int iconId, int smallIconId, int prefId, bool customTokens)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          type.reference,
          packageName.reference,
          labelId,
          iconId,
          smallIconId,
          prefId,
          customTokens
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Ljava/lang/String;IIII)V");

  /// from: public void <init>(java.lang.String type, java.lang.String packageName, int labelId, int iconId, int smallIconId, int prefId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AuthenticatorDescription.ctor1(jni.JniString type, jni.JniString packageName,
      int labelId, int iconId, int smallIconId, int prefId)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          type.reference,
          packageName.reference,
          labelId,
          iconId,
          smallIconId,
          prefId
        ]).object);

  static final _id_newKey = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "newKey",
      "(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription;");

  /// from: static public android.accounts.AuthenticatorDescription newKey(java.lang.String type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A factory method for creating an AuthenticatorDescription that can be used as a key
  /// to identify the authenticator by its type.
  static AuthenticatorDescription newKey(jni.JniString type) =>
      AuthenticatorDescription.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_newKey,
          jni.JniType.objectType,
          [type.reference]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// @inheritDoc
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// Returns the hashcode of the type only.
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  ///
  /// Compares the type only, suitable for key comparisons.
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// @inheritDoc
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
