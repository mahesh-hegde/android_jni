// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../app/Activity.dart" as activity_;

import "../os/Bundle.dart" as bundle_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.accounts.AccountAuthenticatorActivity
///
/// Base class for implementing an Activity that is used to help implement an
/// AbstractAccountAuthenticator. If the AbstractAccountAuthenticator needs to use an activity
/// to handle the request then it can have the activity extend AccountAuthenticatorActivity.
/// The AbstractAccountAuthenticator passes in the response to the intent using the following:
/// <pre>
///      intent.putExtra(AccountManager\#KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);
/// </pre>
/// The activity then sets the result that is to be handed to the response via
/// \#setAccountAuthenticatorResult(android.os.Bundle).
/// This result will be sent as the result of the request when the activity finishes. If this
/// is never set or if it is set to null then error AccountManager\#ERROR_CODE_CANCELED
/// will be called on the response.
class AccountAuthenticatorActivity extends activity_.Activity {
  static final _classRef =
      jniAccessors.getClassOf("android/accounts/AccountAuthenticatorActivity");
  AccountAuthenticatorActivity.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AccountAuthenticatorActivity.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_setAccountAuthenticatorResult = jniAccessors.getMethodIDOf(
      _classRef, "setAccountAuthenticatorResult", "(Landroid/os/Bundle;)V");

  /// from: public final void setAccountAuthenticatorResult(android.os.Bundle result)
  ///
  /// Set the result that is to be sent as the result of the request that caused this
  /// Activity to be launched. If result is null or this method is never called then
  /// the request will be canceled.
  ///@param result this is returned as the result of the AbstractAccountAuthenticator request
  void setAccountAuthenticatorResult(bundle_.Bundle result) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setAccountAuthenticatorResult,
          jni.JniType.voidType,
          [result.reference]).check();

  static final _id_onCreate = jniAccessors.getMethodIDOf(
      _classRef, "onCreate", "(Landroid/os/Bundle;)V");

  /// from: protected void onCreate(android.os.Bundle icicle)
  ///
  /// Retreives the AccountAuthenticatorResponse from either the intent of the icicle, if the
  /// icicle is non-zero.
  ///@param icicle the save instance data of this Activity, may be null
  void onCreate(bundle_.Bundle icicle) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onCreate,
      jni.JniType.voidType,
      [icicle.reference]).check();

  static final _id_finish =
      jniAccessors.getMethodIDOf(_classRef, "finish", "()V");

  /// from: public void finish()
  ///
  /// Sends the result or a Constants.ERROR_CODE_CANCELED error if a result isn't present.
  void finish() => jniAccessors.callMethodWithArgs(
      reference, _id_finish, jni.JniType.voidType, []).check();
}
