// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "../os/IBinder.dart" as ibinder_;

import "../os/Bundle.dart" as bundle_;

import "AccountAuthenticatorResponse.dart" as accountauthenticatorresponse_;

import "Account.dart" as account_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.accounts.AbstractAccountAuthenticator
///
/// Abstract base class for creating AccountAuthenticators.
/// In order to be an authenticator one must extend this class, provider implementations for the
/// abstract methods and write a service that returns the result of \#getIBinder()
/// in the service's android.app.Service\#onBind(android.content.Intent) when invoked
/// with an intent with action AccountManager\#ACTION_AUTHENTICATOR_INTENT. This service
/// must specify the following intent filter and metadata tags in its AndroidManifest.xml file
/// <pre>
///   &lt;intent-filter&gt;
///     &lt;action android:name="android.accounts.AccountAuthenticator" /&gt;
///   &lt;/intent-filter&gt;
///   &lt;meta-data android:name="android.accounts.AccountAuthenticator"
///             android:resource="@xml/authenticator" /&gt;
/// </pre>
/// The <code>android:resource</code> attribute must point to a resource that looks like:
/// <pre>
/// &lt;account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
///    android:accountType="typeOfAuthenticator"
///    android:icon="@drawable/icon"
///    android:smallIcon="@drawable/miniIcon"
///    android:label="@string/label"
///    android:accountPreferences="@xml/account_preferences"
/// /&gt;
/// </pre>
/// Replace the icons and labels with your own resources. The <code>android:accountType</code>
/// attribute must be a string that uniquely identifies your authenticator and will be the same
/// string that user will use when making calls on the AccountManager and it also
/// corresponds to Account\#type for your accounts. One user of the android:icon is the
/// "Account & Sync" settings page and one user of the android:smallIcon is the Contact Application's
/// tab panels.
///
/// The preferences attribute points to a PreferenceScreen xml hierarchy that contains
/// a list of PreferenceScreens that can be invoked to manage the authenticator. An example is:
/// <pre>
/// &lt;PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"&gt;
///    &lt;PreferenceCategory android:title="@string/title_fmt" /&gt;
///    &lt;PreferenceScreen
///         android:key="key1"
///         android:title="@string/key1_action"
///         android:summary="@string/key1_summary"&gt;
///         &lt;intent
///             android:action="key1.ACTION"
///             android:targetPackage="key1.package"
///             android:targetClass="key1.class" /&gt;
///     &lt;/PreferenceScreen&gt;
/// &lt;/PreferenceScreen&gt;
/// </pre>
///
///
/// The standard pattern for implementing any of the abstract methods is the following:
/// <ul>
/// <li> If the supplied arguments are enough for the authenticator to fully satisfy the request
/// then it will do so and return a Bundle that contains the results.
/// <li> If the authenticator needs information from the user to satisfy the request then it
/// will create an Intent to an activity that will prompt the user for the information
/// and then carry out the request. This intent must be returned in a Bundle as key
/// AccountManager\#KEY_INTENT.
///
/// The activity needs to return the final result when it is complete so the Intent should contain
/// the AccountAuthenticatorResponse as AccountManager\#KEY_ACCOUNT_MANAGER_RESPONSE.
/// The activity must then call AccountAuthenticatorResponse\#onResult or
/// AccountAuthenticatorResponse\#onError when it is complete.
/// <li> If the authenticator cannot synchronously process the request and return a result then it
/// may choose to return null and then use the AccountManagerResponse to send the result
/// when it has completed the request.
/// </ul>
///
/// The following descriptions of each of the abstract authenticator methods will not describe the
/// possible asynchronous nature of the request handling and will instead just describe the input
/// parameters and the expected result.
///
/// When writing an activity to satisfy these requests one must pass in the AccountManagerResponse
/// and return the result via that response when the activity finishes (or whenever else  the
/// activity author deems it is the correct time to respond).
/// The AccountAuthenticatorActivity handles this, so one may wish to extend that when
/// writing activities to handle these requests.
class AbstractAccountAuthenticator extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/accounts/AbstractAccountAuthenticator");
  AbstractAccountAuthenticator.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String KEY_CUSTOM_TOKEN_EXPIRY
  ///
  /// Bundle key used for the {@code long} expiration time (in millis from the unix epoch) of the
  /// associated auth token.
  ///@see \#getAuthToken
  static const KEY_CUSTOM_TOKEN_EXPIRY = "android.accounts.expiry";

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AbstractAccountAuthenticator(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_getIBinder = jniAccessors.getMethodIDOf(
      _classRef, "getIBinder", "()Landroid/os/IBinder;");

  /// from: public final android.os.IBinder getIBinder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the IBinder for the AccountAuthenticator
  ibinder_.IBinder getIBinder() =>
      ibinder_.IBinder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getIBinder, jni.JniType.objectType, []).object);

  static final _id_editProperties = jniAccessors.getMethodIDOf(
      _classRef,
      "editProperties",
      "(Landroid/accounts/AccountAuthenticatorResponse;Ljava/lang/String;)Landroid/os/Bundle;");

  /// from: public abstract android.os.Bundle editProperties(android.accounts.AccountAuthenticatorResponse response, java.lang.String accountType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Bundle that contains the Intent of the activity that can be used to edit the
  /// properties. In order to indicate success the activity should call response.setResult()
  /// with a non-null Bundle.
  ///@param response used to set the result for the request. If the Constants.INTENT_KEY
  ///   is set in the bundle then this response field is to be used for sending future
  ///   results if and when the Intent is started.
  ///@param accountType the AccountType whose properties are to be edited.
  ///@return a Bundle containing the result or the Intent to start to continue the request.
  ///   If this is null then the request is considered to still be active and the result should
  ///   sent later using response.
  bundle_.Bundle editProperties(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          jni.JniString accountType) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_editProperties,
          jni.JniType.objectType,
          [response.reference, accountType.reference]).object);

  static final _id_addAccount = jniAccessors.getMethodIDOf(
      _classRef,
      "addAccount",
      "(Landroid/accounts/AccountAuthenticatorResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;");

  /// from: public abstract android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse response, java.lang.String accountType, java.lang.String authTokenType, java.lang.String[] requiredFeatures, android.os.Bundle options)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds an account of the specified accountType.
  ///@param response to send the result back to the AccountManager, will never be null
  ///@param accountType the type of account to add, will never be null
  ///@param authTokenType the type of auth token to retrieve after adding the account, may be null
  ///@param requiredFeatures a String array of authenticator-specific features that the added
  /// account must support, may be null
  ///@param options a Bundle of authenticator-specific options. It always contains
  /// AccountManager\#KEY_CALLER_PID and AccountManager\#KEY_CALLER_UID
  /// fields which will let authenticator know the identity of the caller.
  ///@return a Bundle result or null if the result is to be returned via the response. The result
  /// will contain either:
  /// <ul>
  /// <li> AccountManager\#KEY_INTENT, or
  /// <li> AccountManager\#KEY_ACCOUNT_NAME and AccountManager\#KEY_ACCOUNT_TYPE of
  /// the account that was added, or
  /// <li> AccountManager\#KEY_ERROR_CODE and AccountManager\#KEY_ERROR_MESSAGE to
  /// indicate an error
  /// </ul>
  ///@throws NetworkErrorException if the authenticator could not honor the request due to a
  /// network error
  bundle_.Bundle addAccount(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          jni.JniString accountType,
          jni.JniString authTokenType,
          jni.JniObject requiredFeatures,
          bundle_.Bundle options) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_addAccount, jni.JniType.objectType, [
        response.reference,
        accountType.reference,
        authTokenType.reference,
        requiredFeatures.reference,
        options.reference
      ]).object);

  static final _id_confirmCredentials = jniAccessors.getMethodIDOf(
      _classRef,
      "confirmCredentials",
      "(Landroid/accounts/AccountAuthenticatorResponse;Landroid/accounts/Account;Landroid/os/Bundle;)Landroid/os/Bundle;");

  /// from: public abstract android.os.Bundle confirmCredentials(android.accounts.AccountAuthenticatorResponse response, android.accounts.Account account, android.os.Bundle options)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Checks that the user knows the credentials of an account.
  ///@param response to send the result back to the AccountManager, will never be null
  ///@param account the account whose credentials are to be checked, will never be null
  ///@param options a Bundle of authenticator-specific options, may be null
  ///@return a Bundle result or null if the result is to be returned via the response. The result
  /// will contain either:
  /// <ul>
  /// <li> AccountManager\#KEY_INTENT, or
  /// <li> AccountManager\#KEY_BOOLEAN_RESULT, true if the check succeeded, false otherwise
  /// <li> AccountManager\#KEY_ERROR_CODE and AccountManager\#KEY_ERROR_MESSAGE to
  /// indicate an error
  /// </ul>
  ///@throws NetworkErrorException if the authenticator could not honor the request due to a
  /// network error
  bundle_.Bundle confirmCredentials(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          account_.Account account,
          bundle_.Bundle options) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_confirmCredentials,
          jni.JniType.objectType,
          [response.reference, account.reference, options.reference]).object);

  static final _id_getAuthToken = jniAccessors.getMethodIDOf(
      _classRef,
      "getAuthToken",
      "(Landroid/accounts/AccountAuthenticatorResponse;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;");

  /// from: public abstract android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse response, android.accounts.Account account, java.lang.String authTokenType, android.os.Bundle options)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an authtoken for an account.
  ///
  /// If not {@code null}, the resultant Bundle will contain different sets of keys
  /// depending on whether a token was successfully issued and, if not, whether one
  /// could be issued via some android.app.Activity.
  ///
  /// If a token cannot be provided without some additional activity, the Bundle should contain
  /// AccountManager\#KEY_INTENT with an associated Intent. On the other hand, if
  /// there is no such activity, then a Bundle containing
  /// AccountManager\#KEY_ERROR_CODE and AccountManager\#KEY_ERROR_MESSAGE should be
  /// returned.
  ///
  /// If a token can be successfully issued, the implementation should return the
  /// AccountManager\#KEY_ACCOUNT_NAME and AccountManager\#KEY_ACCOUNT_TYPE of the
  /// account associated with the token as well as the AccountManager\#KEY_AUTHTOKEN. In
  /// addition AbstractAccountAuthenticator implementations that declare themselves
  /// {@code android:customTokens=true} may also provide a non-negative \#KEY_CUSTOM_TOKEN_EXPIRY long value containing the expiration timestamp of the expiration
  /// time (in millis since the unix epoch), tokens will be cached in memory based on
  /// application's packageName/signature for however long that was specified.
  ///
  /// Implementers should assume that tokens will be cached on the basis of account and
  /// authTokenType. The system may ignore the contents of the supplied options Bundle when
  /// determining to re-use a cached token. Furthermore, implementers should assume a supplied
  /// expiration time will be treated as non-binding advice.
  ///
  /// Finally, note that for {@code android:customTokens=false} authenticators, tokens are cached
  /// indefinitely until some client calls AccountManager\#invalidateAuthToken(String,String).
  ///@param response to send the result back to the AccountManager, will never be null
  ///@param account the account whose credentials are to be retrieved, will never be null
  ///@param authTokenType the type of auth token to retrieve, will never be null
  ///@param options a Bundle of authenticator-specific options. It always contains
  /// AccountManager\#KEY_CALLER_PID and AccountManager\#KEY_CALLER_UID
  /// fields which will let authenticator know the identity of the caller.
  ///@return a Bundle result or null if the result is to be returned via the response.
  ///@throws NetworkErrorException if the authenticator could not honor the request due to a
  /// network error
  bundle_.Bundle getAuthToken(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          account_.Account account,
          jni.JniString authTokenType,
          bundle_.Bundle options) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAuthToken, jni.JniType.objectType, [
        response.reference,
        account.reference,
        authTokenType.reference,
        options.reference
      ]).object);

  static final _id_getAuthTokenLabel = jniAccessors.getMethodIDOf(
      _classRef, "getAuthTokenLabel", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public abstract java.lang.String getAuthTokenLabel(java.lang.String authTokenType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Ask the authenticator for a localized label for the given authTokenType.
  ///@param authTokenType the authTokenType whose label is to be returned, will never be null
  ///@return the localized label of the auth token type, may be null if the type isn't known
  jni.JniString getAuthTokenLabel(jni.JniString authTokenType) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getAuthTokenLabel,
          jni.JniType.objectType,
          [authTokenType.reference]).object);

  static final _id_updateCredentials = jniAccessors.getMethodIDOf(
      _classRef,
      "updateCredentials",
      "(Landroid/accounts/AccountAuthenticatorResponse;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;");

  /// from: public abstract android.os.Bundle updateCredentials(android.accounts.AccountAuthenticatorResponse response, android.accounts.Account account, java.lang.String authTokenType, android.os.Bundle options)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Update the locally stored credentials for an account.
  ///@param response to send the result back to the AccountManager, will never be null
  ///@param account the account whose credentials are to be updated, will never be null
  ///@param authTokenType the type of auth token to retrieve after updating the credentials,
  /// may be null
  ///@param options a Bundle of authenticator-specific options, may be null
  ///@return a Bundle result or null if the result is to be returned via the response. The result
  /// will contain either:
  /// <ul>
  /// <li> AccountManager\#KEY_INTENT, or
  /// <li> AccountManager\#KEY_ACCOUNT_NAME and AccountManager\#KEY_ACCOUNT_TYPE of
  /// the account whose credentials were updated, or
  /// <li> AccountManager\#KEY_ERROR_CODE and AccountManager\#KEY_ERROR_MESSAGE to
  /// indicate an error
  /// </ul>
  ///@throws NetworkErrorException if the authenticator could not honor the request due to a
  /// network error
  bundle_.Bundle updateCredentials(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          account_.Account account,
          jni.JniString authTokenType,
          bundle_.Bundle options) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_updateCredentials, jni.JniType.objectType, [
        response.reference,
        account.reference,
        authTokenType.reference,
        options.reference
      ]).object);

  static final _id_hasFeatures = jniAccessors.getMethodIDOf(
      _classRef,
      "hasFeatures",
      "(Landroid/accounts/AccountAuthenticatorResponse;Landroid/accounts/Account;[Ljava/lang/String;)Landroid/os/Bundle;");

  /// from: public abstract android.os.Bundle hasFeatures(android.accounts.AccountAuthenticatorResponse response, android.accounts.Account account, java.lang.String[] features)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Checks if the account supports all the specified authenticator specific features.
  ///@param response to send the result back to the AccountManager, will never be null
  ///@param account the account to check, will never be null
  ///@param features an array of features to check, will never be null
  ///@return a Bundle result or null if the result is to be returned via the response. The result
  /// will contain either:
  /// <ul>
  /// <li> AccountManager\#KEY_INTENT, or
  /// <li> AccountManager\#KEY_BOOLEAN_RESULT, true if the account has all the features,
  /// false otherwise
  /// <li> AccountManager\#KEY_ERROR_CODE and AccountManager\#KEY_ERROR_MESSAGE to
  /// indicate an error
  /// </ul>
  ///@throws NetworkErrorException if the authenticator could not honor the request due to a
  /// network error
  bundle_.Bundle hasFeatures(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          account_.Account account,
          jni.JniObject features) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_hasFeatures,
          jni.JniType.objectType,
          [response.reference, account.reference, features.reference]).object);

  static final _id_getAccountRemovalAllowed = jniAccessors.getMethodIDOf(
      _classRef,
      "getAccountRemovalAllowed",
      "(Landroid/accounts/AccountAuthenticatorResponse;Landroid/accounts/Account;)Landroid/os/Bundle;");

  /// from: public android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse response, android.accounts.Account account)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Checks if the removal of this account is allowed.
  ///@param response to send the result back to the AccountManager, will never be null
  ///@param account the account to check, will never be null
  ///@return a Bundle result or null if the result is to be returned via the response. The result
  /// will contain either:
  /// <ul>
  /// <li> AccountManager\#KEY_INTENT, or
  /// <li> AccountManager\#KEY_BOOLEAN_RESULT, true if the removal of the account is
  /// allowed, false otherwise
  /// <li> AccountManager\#KEY_ERROR_CODE and AccountManager\#KEY_ERROR_MESSAGE to
  /// indicate an error
  /// </ul>
  ///@throws NetworkErrorException if the authenticator could not honor the request due to a
  /// network error
  bundle_.Bundle getAccountRemovalAllowed(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          account_.Account account) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getAccountRemovalAllowed,
          jni.JniType.objectType,
          [response.reference, account.reference]).object);

  static final _id_getAccountCredentialsForCloning = jniAccessors.getMethodIDOf(
      _classRef,
      "getAccountCredentialsForCloning",
      "(Landroid/accounts/AccountAuthenticatorResponse;Landroid/accounts/Account;)Landroid/os/Bundle;");

  /// from: public android.os.Bundle getAccountCredentialsForCloning(android.accounts.AccountAuthenticatorResponse response, android.accounts.Account account)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Bundle that contains whatever is required to clone the account on a different
  /// user. The Bundle is passed to the authenticator instance in the target user via
  /// \#addAccountFromCredentials(AccountAuthenticatorResponse, Account, Bundle).
  /// The default implementation returns null, indicating that cloning is not supported.
  ///@param response to send the result back to the AccountManager, will never be null
  ///@param account the account to clone, will never be null
  ///@return a Bundle result or null if the result is to be returned via the response.
  ///@throws NetworkErrorException
  ///@see \#addAccountFromCredentials(AccountAuthenticatorResponse, Account, Bundle)
  bundle_.Bundle getAccountCredentialsForCloning(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          account_.Account account) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getAccountCredentialsForCloning,
          jni.JniType.objectType,
          [response.reference, account.reference]).object);

  static final _id_addAccountFromCredentials = jniAccessors.getMethodIDOf(
      _classRef,
      "addAccountFromCredentials",
      "(Landroid/accounts/AccountAuthenticatorResponse;Landroid/accounts/Account;Landroid/os/Bundle;)Landroid/os/Bundle;");

  /// from: public android.os.Bundle addAccountFromCredentials(android.accounts.AccountAuthenticatorResponse response, android.accounts.Account account, android.os.Bundle accountCredentials)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an account based on credentials provided by the authenticator instance of another
  /// user on the device, who has chosen to share the account with this user.
  ///@param response to send the result back to the AccountManager, will never be null
  ///@param account the account to clone, will never be null
  ///@param accountCredentials the Bundle containing the required credentials to create the
  /// account. Contents of the Bundle are only meaningful to the authenticator. This Bundle is
  /// provided by \#getAccountCredentialsForCloning(AccountAuthenticatorResponse, Account).
  ///@return a Bundle result or null if the result is to be returned via the response.
  ///@throws NetworkErrorException
  ///@see \#getAccountCredentialsForCloning(AccountAuthenticatorResponse, Account)
  bundle_.Bundle addAccountFromCredentials(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          account_.Account account,
          bundle_.Bundle accountCredentials) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_addAccountFromCredentials, jni.JniType.objectType, [
        response.reference,
        account.reference,
        accountCredentials.reference
      ]).object);

  static final _id_startAddAccountSession = jniAccessors.getMethodIDOf(
      _classRef,
      "startAddAccountSession",
      "(Landroid/accounts/AccountAuthenticatorResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;");

  /// from: public android.os.Bundle startAddAccountSession(android.accounts.AccountAuthenticatorResponse response, java.lang.String accountType, java.lang.String authTokenType, java.lang.String[] requiredFeatures, android.os.Bundle options)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Starts the add account session to authenticate user to an account of the
  /// specified accountType. No file I/O should be performed in this call.
  /// Account should be added to device only when \#finishSession is
  /// called after this.
  ///
  /// Note: when overriding this method, \#finishSession should be
  /// overridden too.
  ///
  ///
  ///@param response to send the result back to the AccountManager, will never
  ///            be null
  ///@param accountType the type of account to authenticate with, will never
  ///            be null
  ///@param authTokenType the type of auth token to retrieve after
  ///            authenticating with the account, may be null
  ///@param requiredFeatures a String array of authenticator-specific features
  ///            that the account authenticated with must support, may be null
  ///@param options a Bundle of authenticator-specific options, may be null
  ///@return a Bundle result or null if the result is to be returned via the
  ///         response. The result will contain either:
  ///         <ul>
  ///         <li>AccountManager\#KEY_INTENT, or
  ///         <li>AccountManager\#KEY_ACCOUNT_SESSION_BUNDLE for adding
  ///         the account to device later, and if account is authenticated,
  ///         optional AccountManager\#KEY_PASSWORD and
  ///         AccountManager\#KEY_ACCOUNT_STATUS_TOKEN for checking the
  ///         status of the account, or
  ///         <li>AccountManager\#KEY_ERROR_CODE and
  ///         AccountManager\#KEY_ERROR_MESSAGE to indicate an error
  ///         </ul>
  ///@throws NetworkErrorException if the authenticator could not honor the
  ///             request due to a network error
  ///@see \#finishSession(AccountAuthenticatorResponse, String, Bundle)
  bundle_.Bundle startAddAccountSession(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          jni.JniString accountType,
          jni.JniString authTokenType,
          jni.JniObject requiredFeatures,
          bundle_.Bundle options) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_startAddAccountSession, jni.JniType.objectType, [
        response.reference,
        accountType.reference,
        authTokenType.reference,
        requiredFeatures.reference,
        options.reference
      ]).object);

  static final _id_startUpdateCredentialsSession = jniAccessors.getMethodIDOf(
      _classRef,
      "startUpdateCredentialsSession",
      "(Landroid/accounts/AccountAuthenticatorResponse;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;");

  /// from: public android.os.Bundle startUpdateCredentialsSession(android.accounts.AccountAuthenticatorResponse response, android.accounts.Account account, java.lang.String authTokenType, android.os.Bundle options)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Asks user to re-authenticate for an account but defers updating the
  /// locally stored credentials. No file I/O should be performed in this call.
  /// Local credentials should be updated only when \#finishSession is
  /// called after this.
  ///
  /// Note: when overriding this method, \#finishSession should be
  /// overridden too.
  ///
  ///
  ///@param response to send the result back to the AccountManager, will never
  ///            be null
  ///@param account the account whose credentials are to be updated, will
  ///            never be null
  ///@param authTokenType the type of auth token to retrieve after updating
  ///            the credentials, may be null
  ///@param options a Bundle of authenticator-specific options, may be null
  ///@return a Bundle result or null if the result is to be returned via the
  ///         response. The result will contain either:
  ///         <ul>
  ///         <li>AccountManager\#KEY_INTENT, or
  ///         <li>AccountManager\#KEY_ACCOUNT_SESSION_BUNDLE for
  ///         updating the locally stored credentials later, and if account is
  ///         re-authenticated, optional AccountManager\#KEY_PASSWORD
  ///         and AccountManager\#KEY_ACCOUNT_STATUS_TOKEN for checking
  ///         the status of the account later, or
  ///         <li>AccountManager\#KEY_ERROR_CODE and
  ///         AccountManager\#KEY_ERROR_MESSAGE to indicate an error
  ///         </ul>
  ///@throws NetworkErrorException if the authenticator could not honor the
  ///             request due to a network error
  ///@see \#finishSession(AccountAuthenticatorResponse, String, Bundle)
  bundle_.Bundle startUpdateCredentialsSession(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          account_.Account account,
          jni.JniString authTokenType,
          bundle_.Bundle options) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_startUpdateCredentialsSession, jni.JniType.objectType, [
        response.reference,
        account.reference,
        authTokenType.reference,
        options.reference
      ]).object);

  static final _id_finishSession = jniAccessors.getMethodIDOf(
      _classRef,
      "finishSession",
      "(Landroid/accounts/AccountAuthenticatorResponse;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;");

  /// from: public android.os.Bundle finishSession(android.accounts.AccountAuthenticatorResponse response, java.lang.String accountType, android.os.Bundle sessionBundle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Finishes the session started by \#startAddAccountSession or
  /// \#startUpdateCredentials by installing the account to device with
  /// AccountManager, or updating the local credentials. File I/O may be
  /// performed in this call.
  ///
  /// Note: when overriding this method, \#startAddAccountSession and
  /// \#startUpdateCredentialsSession should be overridden too.
  ///
  ///
  ///@param response to send the result back to the AccountManager, will never
  ///            be null
  ///@param accountType the type of account to authenticate with, will never
  ///            be null
  ///@param sessionBundle a bundle of session data created by
  ///            \#startAddAccountSession used for adding account to
  ///            device, or by \#startUpdateCredentialsSession used for
  ///            updating local credentials.
  ///@return a Bundle result or null if the result is to be returned via the
  ///         response. The result will contain either:
  ///         <ul>
  ///         <li>AccountManager\#KEY_INTENT, or
  ///         <li>AccountManager\#KEY_ACCOUNT_NAME and
  ///         AccountManager\#KEY_ACCOUNT_TYPE of the account that was
  ///         added or local credentials were updated, and optional
  ///         AccountManager\#KEY_ACCOUNT_STATUS_TOKEN for checking
  ///         the status of the account later, or
  ///         <li>AccountManager\#KEY_ERROR_CODE and
  ///         AccountManager\#KEY_ERROR_MESSAGE to indicate an error
  ///         </ul>
  ///@throws NetworkErrorException if the authenticator could not honor the request due to a
  ///             network error
  ///@see \#startAddAccountSession and \#startUpdateCredentialsSession
  bundle_.Bundle finishSession(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          jni.JniString accountType,
          bundle_.Bundle sessionBundle) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_finishSession, jni.JniType.objectType, [
        response.reference,
        accountType.reference,
        sessionBundle.reference
      ]).object);

  static final _id_isCredentialsUpdateSuggested = jniAccessors.getMethodIDOf(
      _classRef,
      "isCredentialsUpdateSuggested",
      "(Landroid/accounts/AccountAuthenticatorResponse;Landroid/accounts/Account;Ljava/lang/String;)Landroid/os/Bundle;");

  /// from: public android.os.Bundle isCredentialsUpdateSuggested(android.accounts.AccountAuthenticatorResponse response, android.accounts.Account account, java.lang.String statusToken)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Checks if update of the account credentials is suggested.
  ///@param response to send the result back to the AccountManager, will never be null.
  ///@param account the account to check, will never be null
  ///@param statusToken a String of token to check if update of credentials is suggested.
  ///@return a Bundle result or null if the result is to be returned via the response. The result
  ///         will contain either:
  ///         <ul>
  ///         <li>AccountManager\#KEY_BOOLEAN_RESULT, true if update of account's
  ///         credentials is suggested, false otherwise
  ///         <li>AccountManager\#KEY_ERROR_CODE and
  ///         AccountManager\#KEY_ERROR_MESSAGE to indicate an error
  ///         </ul>
  ///@throws NetworkErrorException if the authenticator could not honor the request due to a
  ///             network error
  bundle_.Bundle isCredentialsUpdateSuggested(
          accountauthenticatorresponse_.AccountAuthenticatorResponse response,
          account_.Account account,
          jni.JniString statusToken) =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_isCredentialsUpdateSuggested, jni.JniType.objectType, [
        response.reference,
        account.reference,
        statusToken.reference
      ]).object);
}
