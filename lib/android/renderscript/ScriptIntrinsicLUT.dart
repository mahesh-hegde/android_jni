// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ScriptIntrinsic.dart" as scriptintrinsic_;

import "RenderScript.dart" as renderscript_;

import "Element.dart" as element_;

import "Allocation.dart" as allocation_;

import "Script.dart" as script_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.renderscript.ScriptIntrinsicLUT
///
/// Intrinsic for applying a per-channel lookup table. Each
/// channel of the input has an independant lookup table. The
/// tables are 256 entries in size and can cover the full value
/// range of Element\#U8_4.
class ScriptIntrinsicLUT extends scriptintrinsic_.ScriptIntrinsic {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/ScriptIntrinsicLUT");
  ScriptIntrinsicLUT.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(JLandroid/renderscript/RenderScript;)V");

  /// from: void <init>(long id, android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ScriptIntrinsicLUT(int id, renderscript_.RenderScript rs)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [id, rs.reference]).object);

  static final _id_create = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "create",
      "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element;)Landroid/renderscript/ScriptIntrinsicLUT;");

  /// from: static public android.renderscript.ScriptIntrinsicLUT create(android.renderscript.RenderScript rs, android.renderscript.Element e)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Supported elements types are Element\#U8_4
  ///
  /// The defaults tables are identity.
  ///@param rs The RenderScript context
  ///@param e Element type for intputs and outputs
  ///@return ScriptIntrinsicLUT
  static ScriptIntrinsicLUT create(
          renderscript_.RenderScript rs, element_.Element e) =>
      ScriptIntrinsicLUT.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create,
          jni.JniType.objectType,
          [rs.reference, e.reference]).object);

  static final _id_destroy1 =
      jniAccessors.getMethodIDOf(_classRef, "destroy", "()V");

  /// from: public void destroy()
  void destroy1() => jniAccessors.callMethodWithArgs(
      reference, _id_destroy1, jni.JniType.voidType, []).check();

  static final _id_setRed =
      jniAccessors.getMethodIDOf(_classRef, "setRed", "(II)V");

  /// from: public void setRed(int index, int value)
  ///
  /// Set an entry in the red channel lookup table
  ///@param index Must be 0-255
  ///@param value Must be 0-255
  void setRed(int index, int value) => jniAccessors.callMethodWithArgs(
      reference, _id_setRed, jni.JniType.voidType, [index, value]).check();

  static final _id_setGreen =
      jniAccessors.getMethodIDOf(_classRef, "setGreen", "(II)V");

  /// from: public void setGreen(int index, int value)
  ///
  /// Set an entry in the green channel lookup table
  ///@param index Must be 0-255
  ///@param value Must be 0-255
  void setGreen(int index, int value) => jniAccessors.callMethodWithArgs(
      reference, _id_setGreen, jni.JniType.voidType, [index, value]).check();

  static final _id_setBlue =
      jniAccessors.getMethodIDOf(_classRef, "setBlue", "(II)V");

  /// from: public void setBlue(int index, int value)
  ///
  /// Set an entry in the blue channel lookup table
  ///@param index Must be 0-255
  ///@param value Must be 0-255
  void setBlue(int index, int value) => jniAccessors.callMethodWithArgs(
      reference, _id_setBlue, jni.JniType.voidType, [index, value]).check();

  static final _id_setAlpha =
      jniAccessors.getMethodIDOf(_classRef, "setAlpha", "(II)V");

  /// from: public void setAlpha(int index, int value)
  ///
  /// Set an entry in the alpha channel lookup table
  ///@param index Must be 0-255
  ///@param value Must be 0-255
  void setAlpha(int index, int value) => jniAccessors.callMethodWithArgs(
      reference, _id_setAlpha, jni.JniType.voidType, [index, value]).check();

  static final _id_forEach4 = jniAccessors.getMethodIDOf(_classRef, "forEach",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEach(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Invoke the kernel and apply the lookup to each cell of ain
  /// and copy to aout.
  ///@param ain Input allocation
  ///@param aout Output allocation
  void forEach4(allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEach4,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEach5 = jniAccessors.getMethodIDOf(_classRef, "forEach",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEach(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Invoke the kernel and apply the lookup to each cell of ain
  /// and copy to aout.
  ///@param ain Input allocation
  ///@param aout Output allocation
  ///@param opt Options for clipping
  void forEach5(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEach5,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelID = jniAccessors.getMethodIDOf(
      _classRef, "getKernelID", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelID()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for this intrinsic kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelID() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKernelID, jni.JniType.objectType, []).object);
}
