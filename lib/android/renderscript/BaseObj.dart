// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "RenderScript.dart" as renderscript_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.renderscript.BaseObj
///
/// BaseObj is the base class for all RenderScript objects owned by a RS context.
/// It is responsible for lifetime management and resource tracking. This class
/// should not be used by a user application.
class BaseObj extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/BaseObj");
  BaseObj.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(JLandroid/renderscript/RenderScript;)V");

  /// from: void <init>(long id, android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  BaseObj(int id, renderscript_.RenderScript rs)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [id, rs.reference]).object);

  static final _id_setName =
      jniAccessors.getMethodIDOf(_classRef, "setName", "(Ljava/lang/String;)V");

  /// from: public void setName(java.lang.String name)
  ///
  /// setName assigns a name to an object.  This object can later be looked up
  /// by this name.
  ///@param name The name to assign to the object.
  void setName(jni.JniString name) => jniAccessors.callMethodWithArgs(
      reference, _id_setName, jni.JniType.voidType, [name.reference]).check();

  static final _id_getName =
      jniAccessors.getMethodIDOf(_classRef, "getName", "()Ljava/lang/String;");

  /// from: public java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return name of the renderscript object
  jni.JniString getName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();

  static final _id_destroy =
      jniAccessors.getMethodIDOf(_classRef, "destroy", "()V");

  /// from: public void destroy()
  ///
  /// Frees any native resources associated with this object.  The
  /// primary use is to force immediate cleanup of resources when it is
  /// believed the GC will not respond quickly enough.
  void destroy() => jniAccessors.callMethodWithArgs(
      reference, _id_destroy, jni.JniType.voidType, []).check();

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// Calculates the hash code value for a BaseObj.
  ///@return int
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  ///
  /// Compare the current BaseObj with another BaseObj for equality.
  ///@param obj The object to check equality with.
  ///@return boolean
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;
}
