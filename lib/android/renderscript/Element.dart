// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BaseObj.dart" as baseobj_;

import "RenderScript.dart" as renderscript_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.renderscript.Element
///
/// An Element represents one item within an android.renderscript.Allocation.  An Element is roughly equivalent to a C
/// type in a RenderScript kernel. Elements may be basic or complex. Some basic
/// elements are
/// <ul> <li>A single float value (equivalent to a float in a
/// kernel)</li> <li>A four-element float vector (equivalent to a float4 in a
/// kernel)</li> <li>An unsigned 32-bit integer (equivalent to an unsigned int in
/// a kernel)</li> <li>A single signed 8-bit integer (equivalent to a char in a
/// kernel)</li> </ul> A complex element is roughly equivalent to a C struct
/// and contains a number of basic or complex Elements. From Java code, a complex
/// element contains a list of sub-elements and names that represents a
/// particular data structure. Structs used in RS scripts are available to Java
/// code by using the {@code ScriptField_structname} class that is reflected from
/// a particular script.
///
///
/// Basic Elements are comprised of a android.renderscript.Element.DataType and a android.renderscript.Element.DataKind. The DataType encodes C type
/// information of an Element, while the DataKind encodes how that Element should
/// be interpreted by a android.renderscript.Sampler. Note that android.renderscript.Allocation objects with DataKind android.renderscript.Element.DataKind\#USER cannot be used as input for a
/// android.renderscript.Sampler. In general, android.renderscript.Allocation objects that are intended for use with a
/// android.renderscript.Sampler should use bitmap-derived Elements such
/// as android.renderscript.Element\#RGBA_8888 or {@link
/// android.renderscript\#Element.A_8}.
///
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about creating an application that uses RenderScript, read the
/// <a href="{@docRoot}guide/topics/renderscript/index.html">RenderScript</a> developer guide.
///
/// </div>
class Element extends baseobj_.BaseObj {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Element");
  Element.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(JLandroid/renderscript/RenderScript;)V");

  /// from: void <init>(long id, android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Element(int id, renderscript_.RenderScript rs)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [id, rs.reference]).object);

  static final _id_getBytesSize =
      jniAccessors.getMethodIDOf(_classRef, "getBytesSize", "()I");

  /// from: public int getBytesSize()
  ///
  /// @return element size in bytes
  int getBytesSize() => jniAccessors.callMethodWithArgs(
      reference, _id_getBytesSize, jni.JniType.intType, []).integer;

  static final _id_getVectorSize =
      jniAccessors.getMethodIDOf(_classRef, "getVectorSize", "()I");

  /// from: public int getVectorSize()
  ///
  /// Returns the number of vector components. 2 for float2, 4 for
  /// float4, etc.
  ///@return element vector size
  int getVectorSize() => jniAccessors.callMethodWithArgs(
      reference, _id_getVectorSize, jni.JniType.intType, []).integer;

  static final _id_isComplex =
      jniAccessors.getMethodIDOf(_classRef, "isComplex", "()Z");

  /// from: public boolean isComplex()
  ///
  /// Return if a element is too complex for use as a data source for a Mesh or
  /// a Program.
  ///@return boolean
  bool isComplex() => jniAccessors.callMethodWithArgs(
      reference, _id_isComplex, jni.JniType.booleanType, []).boolean;

  static final _id_getSubElementCount =
      jniAccessors.getMethodIDOf(_classRef, "getSubElementCount", "()I");

  /// from: public int getSubElementCount()
  ///
  /// Elements could be simple, such as an int or a float, or a
  /// structure with multiple sub elements, such as a collection of
  /// floats, float2, float4. This function returns zero for simple
  /// elements or the number of sub-elements otherwise.
  ///@return number of sub-elements in this element
  int getSubElementCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getSubElementCount, jni.JniType.intType, []).integer;

  static final _id_getSubElement = jniAccessors.getMethodIDOf(
      _classRef, "getSubElement", "(I)Landroid/renderscript/Element;");

  /// from: public android.renderscript.Element getSubElement(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// For complex elements, this function will return the
  /// sub-element at index
  ///@param index index of the sub-element to return
  ///@return sub-element in this element at given index
  Element getSubElement(int index) =>
      Element.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSubElement, jni.JniType.objectType, [index]).object);

  static final _id_getSubElementName = jniAccessors.getMethodIDOf(
      _classRef, "getSubElementName", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getSubElementName(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// For complex elements, this function will return the
  /// sub-element name at index
  ///@param index index of the sub-element
  ///@return sub-element in this element at given index
  jni.JniString getSubElementName(int index) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSubElementName, jni.JniType.objectType, [index]).object);

  static final _id_getSubElementArraySize =
      jniAccessors.getMethodIDOf(_classRef, "getSubElementArraySize", "(I)I");

  /// from: public int getSubElementArraySize(int index)
  ///
  /// For complex elements, some sub-elements could be statically
  /// sized arrays. This function will return the array size for
  /// sub-element at index
  ///@param index index of the sub-element
  ///@return array size of sub-element in this element at given index
  int getSubElementArraySize(int index) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getSubElementArraySize,
      jni.JniType.intType,
      [index]).integer;

  static final _id_getSubElementOffsetBytes =
      jniAccessors.getMethodIDOf(_classRef, "getSubElementOffsetBytes", "(I)I");

  /// from: public int getSubElementOffsetBytes(int index)
  ///
  /// This function specifies the location of a sub-element within
  /// the element
  ///@param index index of the sub-element
  ///@return offset in bytes of sub-element in this element at given index
  int getSubElementOffsetBytes(int index) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getSubElementOffsetBytes,
      jni.JniType.intType,
      [index]).integer;

  static final _id_getDataType = jniAccessors.getMethodIDOf(
      _classRef, "getDataType", "()Landroid/renderscript/Element\$DataType;");

  /// from: public android.renderscript.Element.DataType getDataType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return element data type
  Element_DataType getDataType() =>
      Element_DataType.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDataType, jni.JniType.objectType, []).object);

  static final _id_getDataKind = jniAccessors.getMethodIDOf(
      _classRef, "getDataKind", "()Landroid/renderscript/Element\$DataKind;");

  /// from: public android.renderscript.Element.DataKind getDataKind()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return element data kind
  Element_DataKind getDataKind() =>
      Element_DataKind.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDataKind, jni.JniType.objectType, []).object);

  static final _id_BOOLEAN = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "BOOLEAN",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element BOOLEAN(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Utility function for returning an Element containing a single Boolean.
  ///@param rs Context to which the element will belong.
  ///@return Element
  static Element BOOLEAN(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_BOOLEAN, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U8 = jniAccessors.getStaticMethodIDOf(_classRef, "U8",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U8(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Utility function for returning an Element containing a single UNSIGNED_8.
  ///@param rs Context to which the element will belong.
  ///@return Element
  static Element U8(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U8, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I8 = jniAccessors.getStaticMethodIDOf(_classRef, "I8",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I8(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Utility function for returning an Element containing a single SIGNED_8.
  ///@param rs Context to which the element will belong.
  ///@return Element
  static Element I8(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I8, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U16 = jniAccessors.getStaticMethodIDOf(_classRef, "U16",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U16(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U16(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U16, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I16 = jniAccessors.getStaticMethodIDOf(_classRef, "I16",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I16(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I16(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I16, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U32 = jniAccessors.getStaticMethodIDOf(_classRef, "U32",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U32(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U32(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U32, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I32 = jniAccessors.getStaticMethodIDOf(_classRef, "I32",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I32(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I32(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I32, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U64 = jniAccessors.getStaticMethodIDOf(_classRef, "U64",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U64(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U64(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U64, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I64 = jniAccessors.getStaticMethodIDOf(_classRef, "I64",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I64(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I64(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I64, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F16 = jniAccessors.getStaticMethodIDOf(_classRef, "F16",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F16(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F16(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F16, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F32 = jniAccessors.getStaticMethodIDOf(_classRef, "F32",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F32(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F32(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F32, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F64 = jniAccessors.getStaticMethodIDOf(_classRef, "F64",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F64(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F64(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F64, jni.JniType.objectType, [rs.reference]).object);

  static final _id_ELEMENT = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ELEMENT",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element ELEMENT(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element ELEMENT(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_ELEMENT, jni.JniType.objectType, [rs.reference]).object);

  static final _id_TYPE = jniAccessors.getStaticMethodIDOf(_classRef, "TYPE",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element TYPE(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element TYPE(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_TYPE, jni.JniType.objectType, [rs.reference]).object);

  static final _id_ALLOCATION = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ALLOCATION",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element ALLOCATION(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element ALLOCATION(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_ALLOCATION, jni.JniType.objectType, [rs.reference]).object);

  static final _id_SAMPLER = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "SAMPLER",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element SAMPLER(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element SAMPLER(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_SAMPLER, jni.JniType.objectType, [rs.reference]).object);

  static final _id_SCRIPT = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "SCRIPT",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element SCRIPT(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element SCRIPT(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_SCRIPT, jni.JniType.objectType, [rs.reference]).object);

  static final _id_MESH = jniAccessors.getStaticMethodIDOf(_classRef, "MESH",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element MESH(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element MESH(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_MESH, jni.JniType.objectType, [rs.reference]).object);

  static final _id_PROGRAM_FRAGMENT = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "PROGRAM_FRAGMENT",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element PROGRAM_FRAGMENT(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element PROGRAM_FRAGMENT(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_PROGRAM_FRAGMENT, jni.JniType.objectType, [rs.reference]).object);

  static final _id_PROGRAM_VERTEX = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "PROGRAM_VERTEX",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element PROGRAM_VERTEX(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element PROGRAM_VERTEX(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_PROGRAM_VERTEX, jni.JniType.objectType, [rs.reference]).object);

  static final _id_PROGRAM_RASTER = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "PROGRAM_RASTER",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element PROGRAM_RASTER(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element PROGRAM_RASTER(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_PROGRAM_RASTER, jni.JniType.objectType, [rs.reference]).object);

  static final _id_PROGRAM_STORE = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "PROGRAM_STORE",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element PROGRAM_STORE(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element PROGRAM_STORE(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_PROGRAM_STORE, jni.JniType.objectType, [rs.reference]).object);

  static final _id_FONT = jniAccessors.getStaticMethodIDOf(_classRef, "FONT",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element FONT(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element FONT(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_FONT, jni.JniType.objectType, [rs.reference]).object);

  static final _id_A_8 = jniAccessors.getStaticMethodIDOf(_classRef, "A_8",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element A_8(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element A_8(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_A_8, jni.JniType.objectType, [rs.reference]).object);

  static final _id_RGB_565 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "RGB_565",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element RGB_565(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element RGB_565(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_RGB_565, jni.JniType.objectType, [rs.reference]).object);

  static final _id_RGB_888 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "RGB_888",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element RGB_888(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element RGB_888(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_RGB_888, jni.JniType.objectType, [rs.reference]).object);

  static final _id_RGBA_5551 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "RGBA_5551",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element RGBA_5551(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element RGBA_5551(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_RGBA_5551, jni.JniType.objectType, [rs.reference]).object);

  static final _id_RGBA_4444 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "RGBA_4444",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element RGBA_4444(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element RGBA_4444(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_RGBA_4444, jni.JniType.objectType, [rs.reference]).object);

  static final _id_RGBA_8888 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "RGBA_8888",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element RGBA_8888(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element RGBA_8888(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_RGBA_8888, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F16_2 = jniAccessors.getStaticMethodIDOf(_classRef, "F16_2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F16_2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F16_2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F16_2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F16_3 = jniAccessors.getStaticMethodIDOf(_classRef, "F16_3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F16_3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F16_3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F16_3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F16_4 = jniAccessors.getStaticMethodIDOf(_classRef, "F16_4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F16_4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F16_4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F16_4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F32_2 = jniAccessors.getStaticMethodIDOf(_classRef, "F32_2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F32_2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F32_2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F32_2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F32_3 = jniAccessors.getStaticMethodIDOf(_classRef, "F32_3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F32_3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F32_3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F32_3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F32_4 = jniAccessors.getStaticMethodIDOf(_classRef, "F32_4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F32_4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F32_4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F32_4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F64_2 = jniAccessors.getStaticMethodIDOf(_classRef, "F64_2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F64_2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F64_2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F64_2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F64_3 = jniAccessors.getStaticMethodIDOf(_classRef, "F64_3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F64_3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F64_3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F64_3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_F64_4 = jniAccessors.getStaticMethodIDOf(_classRef, "F64_4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element F64_4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element F64_4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_F64_4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U8_2 = jniAccessors.getStaticMethodIDOf(_classRef, "U8_2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U8_2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U8_2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U8_2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U8_3 = jniAccessors.getStaticMethodIDOf(_classRef, "U8_3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U8_3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U8_3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U8_3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U8_4 = jniAccessors.getStaticMethodIDOf(_classRef, "U8_4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U8_4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U8_4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U8_4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I8_2 = jniAccessors.getStaticMethodIDOf(_classRef, "I8_2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I8_2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I8_2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I8_2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I8_3 = jniAccessors.getStaticMethodIDOf(_classRef, "I8_3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I8_3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I8_3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I8_3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I8_4 = jniAccessors.getStaticMethodIDOf(_classRef, "I8_4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I8_4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I8_4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I8_4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U16_2 = jniAccessors.getStaticMethodIDOf(_classRef, "U16_2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U16_2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U16_2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U16_2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U16_3 = jniAccessors.getStaticMethodIDOf(_classRef, "U16_3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U16_3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U16_3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U16_3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U16_4 = jniAccessors.getStaticMethodIDOf(_classRef, "U16_4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U16_4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U16_4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U16_4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I16_2 = jniAccessors.getStaticMethodIDOf(_classRef, "I16_2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I16_2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I16_2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I16_2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I16_3 = jniAccessors.getStaticMethodIDOf(_classRef, "I16_3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I16_3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I16_3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I16_3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I16_4 = jniAccessors.getStaticMethodIDOf(_classRef, "I16_4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I16_4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I16_4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I16_4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U32_2 = jniAccessors.getStaticMethodIDOf(_classRef, "U32_2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U32_2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U32_2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U32_2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U32_3 = jniAccessors.getStaticMethodIDOf(_classRef, "U32_3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U32_3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U32_3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U32_3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U32_4 = jniAccessors.getStaticMethodIDOf(_classRef, "U32_4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U32_4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U32_4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U32_4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I32_2 = jniAccessors.getStaticMethodIDOf(_classRef, "I32_2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I32_2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I32_2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I32_2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I32_3 = jniAccessors.getStaticMethodIDOf(_classRef, "I32_3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I32_3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I32_3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I32_3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I32_4 = jniAccessors.getStaticMethodIDOf(_classRef, "I32_4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I32_4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I32_4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I32_4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U64_2 = jniAccessors.getStaticMethodIDOf(_classRef, "U64_2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U64_2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U64_2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U64_2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U64_3 = jniAccessors.getStaticMethodIDOf(_classRef, "U64_3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U64_3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U64_3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U64_3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_U64_4 = jniAccessors.getStaticMethodIDOf(_classRef, "U64_4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element U64_4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element U64_4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_U64_4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I64_2 = jniAccessors.getStaticMethodIDOf(_classRef, "I64_2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I64_2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I64_2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I64_2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I64_3 = jniAccessors.getStaticMethodIDOf(_classRef, "I64_3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I64_3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I64_3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I64_3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_I64_4 = jniAccessors.getStaticMethodIDOf(_classRef, "I64_4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element I64_4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element I64_4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_I64_4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_YUV = jniAccessors.getStaticMethodIDOf(_classRef, "YUV",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element YUV(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element YUV(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_YUV, jni.JniType.objectType, [rs.reference]).object);

  static final _id_MATRIX_4X4 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "MATRIX_4X4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element MATRIX_4X4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element MATRIX_4X4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_MATRIX_4X4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_MATRIX4X4 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "MATRIX4X4",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element MATRIX4X4(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated use MATRIX_4X4
  static Element MATRIX4X4(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_MATRIX4X4, jni.JniType.objectType, [rs.reference]).object);

  static final _id_MATRIX_3X3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "MATRIX_3X3",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element MATRIX_3X3(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element MATRIX_3X3(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_MATRIX_3X3, jni.JniType.objectType, [rs.reference]).object);

  static final _id_MATRIX_2X2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "MATRIX_2X2",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element MATRIX_2X2(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element MATRIX_2X2(renderscript_.RenderScript rs) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_MATRIX_2X2, jni.JniType.objectType, [rs.reference]).object);

  static final _id_createVector = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createVector",
      "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element\$DataType;I)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element createVector(android.renderscript.RenderScript rs, android.renderscript.Element.DataType dt, int size)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a custom vector element of the specified DataType and vector size.
  /// DataKind will be set to USER. Only primitive types (FLOAT_32, FLOAT_64,
  /// SIGNED_8, SIGNED_16, SIGNED_32, SIGNED_64, UNSIGNED_8, UNSIGNED_16,
  /// UNSIGNED_32, UNSIGNED_64, BOOLEAN) are supported.
  ///@param rs The context associated with the new Element.
  ///@param dt The DataType for the new Element.
  ///@param size Vector size for the new Element.  Range 2-4 inclusive
  ///             supported.
  ///@return Element
  static Element createVector(
          renderscript_.RenderScript rs, Element_DataType dt, int size) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createVector,
          jni.JniType.objectType,
          [rs.reference, dt.reference, size]).object);

  static final _id_createPixel = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createPixel",
      "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element\$DataType;Landroid/renderscript/Element\$DataKind;)Landroid/renderscript/Element;");

  /// from: static public android.renderscript.Element createPixel(android.renderscript.RenderScript rs, android.renderscript.Element.DataType dt, android.renderscript.Element.DataKind dk)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new pixel Element type.  A matching DataType and DataKind must
  /// be provided.  The DataType and DataKind must contain the same number of
  /// components.  Vector size will be set to 1.
  ///@param rs The context associated with the new Element.
  ///@param dt The DataType for the new element.
  ///@param dk The DataKind to specify the mapping of each component in the
  ///           DataType.
  ///@return Element
  static Element createPixel(renderscript_.RenderScript rs, Element_DataType dt,
          Element_DataKind dk) =>
      Element.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createPixel,
          jni.JniType.objectType,
          [rs.reference, dt.reference, dk.reference]).object);

  static final _id_isCompatible = jniAccessors.getMethodIDOf(
      _classRef, "isCompatible", "(Landroid/renderscript/Element;)Z");

  /// from: public boolean isCompatible(android.renderscript.Element e)
  ///
  /// Check if the current Element is compatible with another Element.
  /// Primitive Elements are compatible if they share the same underlying
  /// size and type (i.e. U8 is compatible with A_8). User-defined Elements
  /// must be equal in order to be compatible. This requires strict name
  /// equivalence for all sub-Elements (in addition to structural equivalence).
  ///@param e The Element to check compatibility with.
  ///@return boolean true if the Elements are compatible, otherwise false.
  bool isCompatible(Element e) => jniAccessors.callMethodWithArgs(reference,
      _id_isCompatible, jni.JniType.booleanType, [e.reference]).boolean;
}

/// from: android.renderscript.Element$DataType
///
/// DataType represents the basic type information for a basic element.  The
/// naming convention follows.  For numeric types it is FLOAT,
/// SIGNED, or UNSIGNED followed by the _BITS where BITS is the
/// size of the data.  BOOLEAN is a true / false (1,0)
/// represented in an 8 bit container.  The UNSIGNED variants
/// with multiple bit definitions are for packed graphical data
/// formats and represent vectors with per vector member sizes
/// which are treated as a single unit for packing and alignment
/// purposes.
///
/// MATRIX the three matrix types contain FLOAT_32 elements and are treated
/// as 32 bits for alignment purposes.
///
/// RS_* objects:  opaque handles with implementation dependent
/// sizes.
class Element_DataType extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Element\$DataType");
  Element_DataType.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/renderscript/Element\$DataType;");

  /// from: static public android.renderscript.Element.DataType[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/renderscript/Element\$DataType;");

  /// from: static public android.renderscript.Element.DataType valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element_DataType valueOf(jni.JniString name) =>
      Element_DataType.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_valueOf, jni.JniType.objectType, [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Element_DataType()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.renderscript.Element$DataKind
///
/// The special interpretation of the data if required.  This is primarly
/// useful for graphical data.  USER indicates no special interpretation is
/// expected.  PIXEL is used in conjunction with the standard data types for
/// representing texture formats.
class Element_DataKind extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Element\$DataKind");
  Element_DataKind.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/renderscript/Element\$DataKind;");

  /// from: static public android.renderscript.Element.DataKind[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/renderscript/Element\$DataKind;");

  /// from: static public android.renderscript.Element.DataKind valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Element_DataKind valueOf(jni.JniString name) =>
      Element_DataKind.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_valueOf, jni.JniType.objectType, [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Element_DataKind()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.renderscript.Element$Builder
///
/// Builder class for producing complex elements with matching field and name
/// pairs.  The builder starts empty.  The order in which elements are added
/// is retained for the layout in memory.
class Element_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Element\$Builder");
  Element_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/renderscript/RenderScript;)V");

  /// from: public void <init>(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a builder object.
  ///@param rs
  Element_Builder(renderscript_.RenderScript rs)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [rs.reference]).object);

  static final _id_add = jniAccessors.getMethodIDOf(_classRef, "add",
      "(Landroid/renderscript/Element;Ljava/lang/String;I)Landroid/renderscript/Element\$Builder;");

  /// from: public android.renderscript.Element.Builder add(android.renderscript.Element element, java.lang.String name, int arraySize)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Add an array of elements to this element.
  ///@param element
  ///@param name
  ///@param arraySize
  Element_Builder add(Element element, jni.JniString name, int arraySize) =>
      Element_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_add,
          jni.JniType.objectType,
          [element.reference, name.reference, arraySize]).object);

  static final _id_add1 = jniAccessors.getMethodIDOf(_classRef, "add",
      "(Landroid/renderscript/Element;Ljava/lang/String;)Landroid/renderscript/Element\$Builder;");

  /// from: public android.renderscript.Element.Builder add(android.renderscript.Element element, java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Add a single element to this Element.
  ///@param element
  ///@param name
  Element_Builder add1(Element element, jni.JniString name) =>
      Element_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_add1,
          jni.JniType.objectType,
          [element.reference, name.reference]).object);

  static final _id_create = jniAccessors.getMethodIDOf(
      _classRef, "create", "()Landroid/renderscript/Element;");

  /// from: public android.renderscript.Element create()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create the element from this builder.
  ///@return Element
  Element create() => Element.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_create, jni.JniType.objectType, []).object);
}
