// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BaseObj.dart" as baseobj_;

import "Element.dart" as element_;

import "FieldPacker.dart" as fieldpacker_;

import "Allocation.dart" as allocation_;

import "RenderScript.dart" as renderscript_;

import "Type.dart" as type_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.renderscript.Script
///
/// The parent class for all executable scripts. This should not be used by
/// applications.
class Script extends baseobj_.BaseObj {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Script");
  Script.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_createKernelID = jniAccessors.getMethodIDOf(
      _classRef,
      "createKernelID",
      "(IILandroid/renderscript/Element;Landroid/renderscript/Element;)Landroid/renderscript/Script\$KernelID;");

  /// from: protected android.renderscript.Script.KernelID createKernelID(int slot, int sig, android.renderscript.Element ein, android.renderscript.Element eout)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Only to be used by generated reflected classes.
  Script_KernelID createKernelID(
          int slot, int sig, element_.Element ein, element_.Element eout) =>
      Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createKernelID,
          jni.JniType.objectType,
          [slot, sig, ein.reference, eout.reference]).object);

  static final _id_createInvokeID = jniAccessors.getMethodIDOf(_classRef,
      "createInvokeID", "(I)Landroid/renderscript/Script\$InvokeID;");

  /// from: protected android.renderscript.Script.InvokeID createInvokeID(int slot)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Only to be used by generated reflected classes.
  Script_InvokeID createInvokeID(int slot) =>
      Script_InvokeID.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_createInvokeID, jni.JniType.objectType, [slot]).object);

  static final _id_createFieldID = jniAccessors.getMethodIDOf(
      _classRef,
      "createFieldID",
      "(ILandroid/renderscript/Element;)Landroid/renderscript/Script\$FieldID;");

  /// from: protected android.renderscript.Script.FieldID createFieldID(int slot, android.renderscript.Element e)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Only to be used by generated reflected classes.
  Script_FieldID createFieldID(int slot, element_.Element e) =>
      Script_FieldID.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createFieldID,
          jni.JniType.objectType,
          [slot, e.reference]).object);

  static final _id_invoke =
      jniAccessors.getMethodIDOf(_classRef, "invoke", "(I)V");

  /// from: protected void invoke(int slot)
  ///
  /// Only intended for use by generated reflected code.
  void invoke(int slot) => jniAccessors.callMethodWithArgs(
      reference, _id_invoke, jni.JniType.voidType, [slot]).check();

  static final _id_invoke1 = jniAccessors.getMethodIDOf(
      _classRef, "invoke", "(ILandroid/renderscript/FieldPacker;)V");

  /// from: protected void invoke(int slot, android.renderscript.FieldPacker v)
  ///
  /// Only intended for use by generated reflected code.
  void invoke1(int slot, fieldpacker_.FieldPacker v) =>
      jniAccessors.callMethodWithArgs(reference, _id_invoke1,
          jni.JniType.voidType, [slot, v.reference]).check();

  static final _id_forEach = jniAccessors.getMethodIDOf(_classRef, "forEach",
      "(ILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/FieldPacker;)V");

  /// from: protected void forEach(int slot, android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.FieldPacker v)
  ///
  /// Only intended for use by generated reflected code.
  void forEach(int slot, allocation_.Allocation ain,
          allocation_.Allocation aout, fieldpacker_.FieldPacker v) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEach,
          jni.JniType.voidType,
          [slot, ain.reference, aout.reference, v.reference]).check();

  static final _id_forEach1 = jniAccessors.getMethodIDOf(_classRef, "forEach",
      "(ILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/FieldPacker;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: protected void forEach(int slot, android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.FieldPacker v, android.renderscript.Script.LaunchOptions sc)
  ///
  /// Only intended for use by generated reflected code.
  void forEach1(
          int slot,
          allocation_.Allocation ain,
          allocation_.Allocation aout,
          fieldpacker_.FieldPacker v,
          Script_LaunchOptions sc) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_forEach1, jni.JniType.voidType, [
        slot,
        ain.reference,
        aout.reference,
        v.reference,
        sc.reference
      ]).check();

  static final _id_forEach2 = jniAccessors.getMethodIDOf(_classRef, "forEach",
      "(I[Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/FieldPacker;)V");

  /// from: protected void forEach(int slot, android.renderscript.Allocation[] ains, android.renderscript.Allocation aout, android.renderscript.FieldPacker v)
  ///
  /// Only intended for use by generated reflected code.
  void forEach2(int slot, jni.JniObject ains, allocation_.Allocation aout,
          fieldpacker_.FieldPacker v) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEach2,
          jni.JniType.voidType,
          [slot, ains.reference, aout.reference, v.reference]).check();

  static final _id_forEach3 = jniAccessors.getMethodIDOf(_classRef, "forEach",
      "(I[Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/FieldPacker;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: protected void forEach(int slot, android.renderscript.Allocation[] ains, android.renderscript.Allocation aout, android.renderscript.FieldPacker v, android.renderscript.Script.LaunchOptions sc)
  ///
  /// Only intended for use by generated reflected code.
  void forEach3(int slot, jni.JniObject ains, allocation_.Allocation aout,
          fieldpacker_.FieldPacker v, Script_LaunchOptions sc) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_forEach3, jni.JniType.voidType, [
        slot,
        ains.reference,
        aout.reference,
        v.reference,
        sc.reference
      ]).check();

  static final _id_reduce = jniAccessors.getMethodIDOf(_classRef, "reduce",
      "(I[Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: protected void reduce(int slot, android.renderscript.Allocation[] ains, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions sc)
  ///
  /// Only intended for use by generated reflected code.  (General reduction)
  void reduce(int slot, jni.JniObject ains, allocation_.Allocation aout,
          Script_LaunchOptions sc) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_reduce,
          jni.JniType.voidType,
          [slot, ains.reference, aout.reference, sc.reference]).check();

  static final _id_bindAllocation = jniAccessors.getMethodIDOf(
      _classRef, "bindAllocation", "(Landroid/renderscript/Allocation;I)V");

  /// from: public void bindAllocation(android.renderscript.Allocation va, int slot)
  ///
  /// Only intended for use by generated reflected code.
  void bindAllocation(allocation_.Allocation va, int slot) =>
      jniAccessors.callMethodWithArgs(reference, _id_bindAllocation,
          jni.JniType.voidType, [va.reference, slot]).check();

  static final _id_setVar =
      jniAccessors.getMethodIDOf(_classRef, "setVar", "(IF)V");

  /// from: public void setVar(int index, float v)
  ///
  /// Only intended for use by generated reflected code.
  void setVar(int index, double v) => jniAccessors.callMethodWithArgs(
      reference, _id_setVar, jni.JniType.voidType, [index, v]).check();

  static final _id_getVarF =
      jniAccessors.getMethodIDOf(_classRef, "getVarF", "(I)F");

  /// from: public float getVarF(int index)
  double getVarF(int index) => jniAccessors.callMethodWithArgs(
      reference, _id_getVarF, jni.JniType.floatType, [index]).float;

  static final _id_setVar1 =
      jniAccessors.getMethodIDOf(_classRef, "setVar", "(ID)V");

  /// from: public void setVar(int index, double v)
  ///
  /// Only intended for use by generated reflected code.
  void setVar1(int index, double v) => jniAccessors.callMethodWithArgs(
      reference, _id_setVar1, jni.JniType.voidType, [index, v]).check();

  static final _id_getVarD =
      jniAccessors.getMethodIDOf(_classRef, "getVarD", "(I)D");

  /// from: public double getVarD(int index)
  double getVarD(int index) => jniAccessors.callMethodWithArgs(
      reference, _id_getVarD, jni.JniType.doubleType, [index]).doubleFloat;

  static final _id_setVar2 =
      jniAccessors.getMethodIDOf(_classRef, "setVar", "(II)V");

  /// from: public void setVar(int index, int v)
  ///
  /// Only intended for use by generated reflected code.
  void setVar2(int index, int v) => jniAccessors.callMethodWithArgs(
      reference, _id_setVar2, jni.JniType.voidType, [index, v]).check();

  static final _id_getVarI =
      jniAccessors.getMethodIDOf(_classRef, "getVarI", "(I)I");

  /// from: public int getVarI(int index)
  int getVarI(int index) => jniAccessors.callMethodWithArgs(
      reference, _id_getVarI, jni.JniType.intType, [index]).integer;

  static final _id_setVar3 =
      jniAccessors.getMethodIDOf(_classRef, "setVar", "(IJ)V");

  /// from: public void setVar(int index, long v)
  ///
  /// Only intended for use by generated reflected code.
  void setVar3(int index, int v) => jniAccessors.callMethodWithArgs(
      reference, _id_setVar3, jni.JniType.voidType, [index, v]).check();

  static final _id_getVarJ =
      jniAccessors.getMethodIDOf(_classRef, "getVarJ", "(I)J");

  /// from: public long getVarJ(int index)
  int getVarJ(int index) => jniAccessors.callMethodWithArgs(
      reference, _id_getVarJ, jni.JniType.longType, [index]).long;

  static final _id_setVar4 =
      jniAccessors.getMethodIDOf(_classRef, "setVar", "(IZ)V");

  /// from: public void setVar(int index, boolean v)
  ///
  /// Only intended for use by generated reflected code.
  void setVar4(int index, bool v) => jniAccessors.callMethodWithArgs(
      reference, _id_setVar4, jni.JniType.voidType, [index, v]).check();

  static final _id_getVarB =
      jniAccessors.getMethodIDOf(_classRef, "getVarB", "(I)Z");

  /// from: public boolean getVarB(int index)
  bool getVarB(int index) => jniAccessors.callMethodWithArgs(
      reference, _id_getVarB, jni.JniType.booleanType, [index]).boolean;

  static final _id_setVar5 = jniAccessors.getMethodIDOf(
      _classRef, "setVar", "(ILandroid/renderscript/BaseObj;)V");

  /// from: public void setVar(int index, android.renderscript.BaseObj o)
  ///
  /// Only intended for use by generated reflected code.
  void setVar5(int index, baseobj_.BaseObj o) =>
      jniAccessors.callMethodWithArgs(reference, _id_setVar5,
          jni.JniType.voidType, [index, o.reference]).check();

  static final _id_setVar6 = jniAccessors.getMethodIDOf(
      _classRef, "setVar", "(ILandroid/renderscript/FieldPacker;)V");

  /// from: public void setVar(int index, android.renderscript.FieldPacker v)
  ///
  /// Only intended for use by generated reflected code.
  void setVar6(int index, fieldpacker_.FieldPacker v) =>
      jniAccessors.callMethodWithArgs(reference, _id_setVar6,
          jni.JniType.voidType, [index, v.reference]).check();

  static final _id_setVar7 = jniAccessors.getMethodIDOf(_classRef, "setVar",
      "(ILandroid/renderscript/FieldPacker;Landroid/renderscript/Element;[I)V");

  /// from: public void setVar(int index, android.renderscript.FieldPacker v, android.renderscript.Element e, int[] dims)
  ///
  /// Only intended for use by generated reflected code.
  void setVar7(int index, fieldpacker_.FieldPacker v, element_.Element e,
          jni.JniObject dims) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setVar7,
          jni.JniType.voidType,
          [index, v.reference, e.reference, dims.reference]).check();

  static final _id_getVarV = jniAccessors.getMethodIDOf(
      _classRef, "getVarV", "(ILandroid/renderscript/FieldPacker;)V");

  /// from: public void getVarV(int index, android.renderscript.FieldPacker v)
  ///
  /// Only intended for use by generated reflected code.
  void getVarV(int index, fieldpacker_.FieldPacker v) =>
      jniAccessors.callMethodWithArgs(reference, _id_getVarV,
          jni.JniType.voidType, [index, v.reference]).check();

  static final _id_setTimeZone = jniAccessors.getMethodIDOf(
      _classRef, "setTimeZone", "(Ljava/lang/String;)V");

  /// from: public void setTimeZone(java.lang.String timeZone)
  void setTimeZone(jni.JniString timeZone) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setTimeZone,
      jni.JniType.voidType,
      [timeZone.reference]).check();
}

/// from: android.renderscript.Script$LaunchOptions
///
/// Class for specifying the specifics about how a kernel will be
/// launched.
///
/// This class can specify a potential range of cells on which to
/// run a kernel.  If no set is called for a dimension then this
/// class will have no impact on that dimension when the kernel
/// is executed.
///
/// The forEach kernel launch will operate over the intersection of
/// the dimensions.
///
/// Example:
/// LaunchOptions with setX(5, 15)
/// Allocation with dimension X=10, Y=10
/// The resulting forEach run would execute over:
/// x = 5 to 9 (inclusive) and
/// y = 0 to 9 (inclusive).
class Script_LaunchOptions extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Script\$LaunchOptions");
  Script_LaunchOptions.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Script_LaunchOptions()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setX = jniAccessors.getMethodIDOf(
      _classRef, "setX", "(II)Landroid/renderscript/Script\$LaunchOptions;");

  /// from: public android.renderscript.Script.LaunchOptions setX(int xstartArg, int xendArg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the X range. xstartArg is the lowest coordinate of the range,
  /// and xendArg-1 is the highest coordinate of the range.
  ///@param xstartArg Must be >= 0
  ///@param xendArg Must be > xstartArg
  ///@return LaunchOptions
  Script_LaunchOptions setX(int xstartArg, int xendArg) =>
      Script_LaunchOptions.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setX, jni.JniType.objectType, [xstartArg, xendArg]).object);

  static final _id_setY = jniAccessors.getMethodIDOf(
      _classRef, "setY", "(II)Landroid/renderscript/Script\$LaunchOptions;");

  /// from: public android.renderscript.Script.LaunchOptions setY(int ystartArg, int yendArg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the Y range. ystartArg is the lowest coordinate of the range,
  /// and yendArg-1 is the highest coordinate of the range.
  ///@param ystartArg Must be >= 0
  ///@param yendArg Must be > ystartArg
  ///@return LaunchOptions
  Script_LaunchOptions setY(int ystartArg, int yendArg) =>
      Script_LaunchOptions.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setY, jni.JniType.objectType, [ystartArg, yendArg]).object);

  static final _id_setZ = jniAccessors.getMethodIDOf(
      _classRef, "setZ", "(II)Landroid/renderscript/Script\$LaunchOptions;");

  /// from: public android.renderscript.Script.LaunchOptions setZ(int zstartArg, int zendArg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the Z range. zstartArg is the lowest coordinate of the range,
  /// and zendArg-1 is the highest coordinate of the range.
  ///@param zstartArg Must be >= 0
  ///@param zendArg Must be > zstartArg
  ///@return LaunchOptions
  Script_LaunchOptions setZ(int zstartArg, int zendArg) =>
      Script_LaunchOptions.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setZ, jni.JniType.objectType, [zstartArg, zendArg]).object);

  static final _id_getXStart =
      jniAccessors.getMethodIDOf(_classRef, "getXStart", "()I");

  /// from: public int getXStart()
  ///
  /// Returns the current X start
  ///@return int current value
  int getXStart() => jniAccessors.callMethodWithArgs(
      reference, _id_getXStart, jni.JniType.intType, []).integer;

  static final _id_getXEnd =
      jniAccessors.getMethodIDOf(_classRef, "getXEnd", "()I");

  /// from: public int getXEnd()
  ///
  /// Returns the current X end
  ///@return int current value
  int getXEnd() => jniAccessors.callMethodWithArgs(
      reference, _id_getXEnd, jni.JniType.intType, []).integer;

  static final _id_getYStart =
      jniAccessors.getMethodIDOf(_classRef, "getYStart", "()I");

  /// from: public int getYStart()
  ///
  /// Returns the current Y start
  ///@return int current value
  int getYStart() => jniAccessors.callMethodWithArgs(
      reference, _id_getYStart, jni.JniType.intType, []).integer;

  static final _id_getYEnd =
      jniAccessors.getMethodIDOf(_classRef, "getYEnd", "()I");

  /// from: public int getYEnd()
  ///
  /// Returns the current Y end
  ///@return int current value
  int getYEnd() => jniAccessors.callMethodWithArgs(
      reference, _id_getYEnd, jni.JniType.intType, []).integer;

  static final _id_getZStart =
      jniAccessors.getMethodIDOf(_classRef, "getZStart", "()I");

  /// from: public int getZStart()
  ///
  /// Returns the current Z start
  ///@return int current value
  int getZStart() => jniAccessors.callMethodWithArgs(
      reference, _id_getZStart, jni.JniType.intType, []).integer;

  static final _id_getZEnd =
      jniAccessors.getMethodIDOf(_classRef, "getZEnd", "()I");

  /// from: public int getZEnd()
  ///
  /// Returns the current Z end
  ///@return int current value
  int getZEnd() => jniAccessors.callMethodWithArgs(
      reference, _id_getZEnd, jni.JniType.intType, []).integer;
}

/// from: android.renderscript.Script$KernelID
///
/// KernelID is an identifier for a Script + root function pair. It is used
/// as an identifier for ScriptGroup creation.
///
/// This class should not be directly created. Instead use the method in the
/// reflected or intrinsic code "getKernelID_funcname()".
class Script_KernelID extends baseobj_.BaseObj {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Script\$KernelID");
  Script_KernelID.fromRef(jni.JObject ref) : super.fromRef(ref);
}

/// from: android.renderscript.Script$InvokeID
///
/// InvokeID is an identifier for an invoke function. It is used
/// as an identifier for ScriptGroup creation.
///
/// This class should not be directly created. Instead use the method in the
/// reflected or intrinsic code "getInvokeID_funcname()".
class Script_InvokeID extends baseobj_.BaseObj {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Script\$InvokeID");
  Script_InvokeID.fromRef(jni.JObject ref) : super.fromRef(ref);
}

/// from: android.renderscript.Script$FieldID
///
/// FieldID is an identifier for a Script + exported field pair. It is used
/// as an identifier for ScriptGroup creation.
///
/// This class should not be directly created. Instead use the method in the
/// reflected or intrinsic code "getFieldID_funcname()".
class Script_FieldID extends baseobj_.BaseObj {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Script\$FieldID");
  Script_FieldID.fromRef(jni.JObject ref) : super.fromRef(ref);
}

/// from: android.renderscript.Script$FieldBase
///
/// Only intended for use by generated reflected code.
class Script_FieldBase extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Script\$FieldBase");
  Script_FieldBase.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_mAllocation = jniAccessors.getFieldIDOf(
      _classRef, "mAllocation", "Landroid/renderscript/Allocation;");

  /// from: protected android.renderscript.Allocation mAllocation
  /// The returned object must be deleted after use, by calling the `delete` method.
  allocation_.Allocation get mAllocation =>
      allocation_.Allocation.fromRef(jniAccessors
          .getField(reference, _id_mAllocation, jni.JniType.objectType)
          .object);

  /// from: protected android.renderscript.Allocation mAllocation
  /// The returned object must be deleted after use, by calling the `delete` method.
  set mAllocation(allocation_.Allocation value) =>
      jniEnv.SetObjectField(reference, _id_mAllocation, value.reference);

  static final _id_mElement = jniAccessors.getFieldIDOf(
      _classRef, "mElement", "Landroid/renderscript/Element;");

  /// from: protected android.renderscript.Element mElement
  /// The returned object must be deleted after use, by calling the `delete` method.
  element_.Element get mElement => element_.Element.fromRef(jniAccessors
      .getField(reference, _id_mElement, jni.JniType.objectType)
      .object);

  /// from: protected android.renderscript.Element mElement
  /// The returned object must be deleted after use, by calling the `delete` method.
  set mElement(element_.Element value) =>
      jniEnv.SetObjectField(reference, _id_mElement, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: protected void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Script_FieldBase()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_init = jniAccessors.getMethodIDOf(
      _classRef, "init", "(Landroid/renderscript/RenderScript;I)V");

  /// from: protected void init(android.renderscript.RenderScript rs, int dimx)
  void init(renderscript_.RenderScript rs, int dimx) =>
      jniAccessors.callMethodWithArgs(reference, _id_init, jni.JniType.voidType,
          [rs.reference, dimx]).check();

  static final _id_init1 = jniAccessors.getMethodIDOf(
      _classRef, "init", "(Landroid/renderscript/RenderScript;II)V");

  /// from: protected void init(android.renderscript.RenderScript rs, int dimx, int usages)
  void init1(renderscript_.RenderScript rs, int dimx, int usages) =>
      jniAccessors.callMethodWithArgs(reference, _id_init1,
          jni.JniType.voidType, [rs.reference, dimx, usages]).check();

  static final _id_getElement = jniAccessors.getMethodIDOf(
      _classRef, "getElement", "()Landroid/renderscript/Element;");

  /// from: public android.renderscript.Element getElement()
  /// The returned object must be deleted after use, by calling the `delete` method.
  element_.Element getElement() =>
      element_.Element.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getElement, jni.JniType.objectType, []).object);

  static final _id_getType = jniAccessors.getMethodIDOf(
      _classRef, "getType", "()Landroid/renderscript/Type;");

  /// from: public android.renderscript.Type getType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  type_.Type getType() => type_.Type.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.objectType, []).object);

  static final _id_getAllocation = jniAccessors.getMethodIDOf(
      _classRef, "getAllocation", "()Landroid/renderscript/Allocation;");

  /// from: public android.renderscript.Allocation getAllocation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  allocation_.Allocation getAllocation() =>
      allocation_.Allocation.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAllocation, jni.JniType.objectType, []).object);

  static final _id_updateAllocation =
      jniAccessors.getMethodIDOf(_classRef, "updateAllocation", "()V");

  /// from: public void updateAllocation()
  void updateAllocation() => jniAccessors.callMethodWithArgs(
      reference, _id_updateAllocation, jni.JniType.voidType, []).check();
}

/// from: android.renderscript.Script$Builder
///
/// Only intended for use by generated reflected code.
class Script_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Script\$Builder");
  Script_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);
}
