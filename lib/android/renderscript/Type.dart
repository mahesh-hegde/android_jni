// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BaseObj.dart" as baseobj_;

import "RenderScript.dart" as renderscript_;

import "Element.dart" as element_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.renderscript.Type
///
/// A Type describes the android.renderscript.Element and dimensions used for an android.renderscript.Allocation or a parallel operation. Types are created through android.renderscript.Type.Builder.
///
///
/// A Type always includes an android.renderscript.Element and an X
/// dimension. A Type may be multidimensional, up to three dimensions. A nonzero
/// value in the Y or Z dimensions indicates that the dimension is present. Note
/// that a Type with only a given X dimension and a Type with the same X
/// dimension but Y = 1 are not equivalent.
///
///
/// A Type also supports inclusion of level of detail (LOD) or cube map
/// faces. LOD and cube map faces are booleans to indicate present or not
/// present.
///
///
/// A Type also supports YUV format information to support an
/// android.renderscript.Allocation in a YUV format. The YUV formats
/// supported are android.graphics.ImageFormat\#YV12,
/// android.graphics.ImageFormat\#NV21, and
/// android.graphics.ImageFormat\#YUV_420_888
///
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about creating an application that uses RenderScript, read the
/// <a href="{@docRoot}guide/topics/renderscript/index.html">RenderScript</a> developer guide.
///
/// </div>
class Type extends baseobj_.BaseObj {
  static final _classRef = jniAccessors.getClassOf("android/renderscript/Type");
  Type.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(JLandroid/renderscript/RenderScript;)V");

  /// from: void <init>(long id, android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Type(int id, renderscript_.RenderScript rs)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [id, rs.reference]).object);

  static final _id_getElement = jniAccessors.getMethodIDOf(
      _classRef, "getElement", "()Landroid/renderscript/Element;");

  /// from: public android.renderscript.Element getElement()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the element associated with this Type.
  ///@return Element
  element_.Element getElement() =>
      element_.Element.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getElement, jni.JniType.objectType, []).object);

  static final _id_getX = jniAccessors.getMethodIDOf(_classRef, "getX", "()I");

  /// from: public int getX()
  ///
  /// Return the value of the X dimension.
  ///@return int
  int getX() => jniAccessors
      .callMethodWithArgs(reference, _id_getX, jni.JniType.intType, []).integer;

  static final _id_getY = jniAccessors.getMethodIDOf(_classRef, "getY", "()I");

  /// from: public int getY()
  ///
  /// Return the value of the Y dimension or 0 for a 1D allocation.
  ///@return int
  int getY() => jniAccessors
      .callMethodWithArgs(reference, _id_getY, jni.JniType.intType, []).integer;

  static final _id_getZ = jniAccessors.getMethodIDOf(_classRef, "getZ", "()I");

  /// from: public int getZ()
  ///
  /// Return the value of the Z dimension or 0 for a 1D or 2D allocation.
  ///@return int
  int getZ() => jniAccessors
      .callMethodWithArgs(reference, _id_getZ, jni.JniType.intType, []).integer;

  static final _id_getYuv =
      jniAccessors.getMethodIDOf(_classRef, "getYuv", "()I");

  /// from: public int getYuv()
  ///
  /// Get the YUV format
  ///@return int
  int getYuv() => jniAccessors.callMethodWithArgs(
      reference, _id_getYuv, jni.JniType.intType, []).integer;

  static final _id_hasMipmaps =
      jniAccessors.getMethodIDOf(_classRef, "hasMipmaps", "()Z");

  /// from: public boolean hasMipmaps()
  ///
  /// Return if the Type has a mipmap chain.
  ///@return boolean
  bool hasMipmaps() => jniAccessors.callMethodWithArgs(
      reference, _id_hasMipmaps, jni.JniType.booleanType, []).boolean;

  static final _id_hasFaces =
      jniAccessors.getMethodIDOf(_classRef, "hasFaces", "()Z");

  /// from: public boolean hasFaces()
  ///
  /// Return if the Type is a cube map.
  ///@return boolean
  bool hasFaces() => jniAccessors.callMethodWithArgs(
      reference, _id_hasFaces, jni.JniType.booleanType, []).boolean;

  static final _id_getCount =
      jniAccessors.getMethodIDOf(_classRef, "getCount", "()I");

  /// from: public int getCount()
  ///
  /// Return the total number of accessable cells in the Type.
  ///@return int
  int getCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getCount, jni.JniType.intType, []).integer;

  static final _id_createX = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createX",
      "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element;I)Landroid/renderscript/Type;");

  /// from: static public android.renderscript.Type createX(android.renderscript.RenderScript rs, android.renderscript.Element e, int dimX)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Utility function for creating basic 1D types. The type is
  /// created without mipmaps enabled.
  ///@param rs The RenderScript context
  ///@param e The Element for the Type
  ///@param dimX The X dimension, must be > 0
  ///@return Type
  static Type createX(
          renderscript_.RenderScript rs, element_.Element e, int dimX) =>
      Type.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef, _id_createX,
          jni.JniType.objectType, [rs.reference, e.reference, dimX]).object);

  static final _id_createXY = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createXY",
      "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element;II)Landroid/renderscript/Type;");

  /// from: static public android.renderscript.Type createXY(android.renderscript.RenderScript rs, android.renderscript.Element e, int dimX, int dimY)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Utility function for creating basic 2D types. The type is
  /// created without mipmaps or cubemaps.
  ///@param rs The RenderScript context
  ///@param e The Element for the Type
  ///@param dimX The X dimension, must be > 0
  ///@param dimY The Y dimension, must be > 0
  ///@return Type
  static Type createXY(renderscript_.RenderScript rs, element_.Element e,
          int dimX, int dimY) =>
      Type.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createXY,
          jni.JniType.objectType,
          [rs.reference, e.reference, dimX, dimY]).object);

  static final _id_createXYZ = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createXYZ",
      "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element;III)Landroid/renderscript/Type;");

  /// from: static public android.renderscript.Type createXYZ(android.renderscript.RenderScript rs, android.renderscript.Element e, int dimX, int dimY, int dimZ)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Utility function for creating basic 3D types. The type is
  /// created without mipmaps.
  ///@param rs The RenderScript context
  ///@param e The Element for the Type
  ///@param dimX The X dimension, must be > 0
  ///@param dimY The Y dimension, must be > 0
  ///@param dimZ The Z dimension, must be > 0
  ///@return Type
  static Type createXYZ(renderscript_.RenderScript rs, element_.Element e,
          int dimX, int dimY, int dimZ) =>
      Type.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createXYZ,
          jni.JniType.objectType,
          [rs.reference, e.reference, dimX, dimY, dimZ]).object);
}

/// from: android.renderscript.Type$CubemapFace
class Type_CubemapFace extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Type\$CubemapFace");
  Type_CubemapFace.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/renderscript/Type\$CubemapFace;");

  /// from: static public android.renderscript.Type.CubemapFace[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/renderscript/Type\$CubemapFace;");

  /// from: static public android.renderscript.Type.CubemapFace valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Type_CubemapFace valueOf(jni.JniString name) =>
      Type_CubemapFace.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_valueOf, jni.JniType.objectType, [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Type_CubemapFace()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.renderscript.Type$Builder
///
/// Builder class for Type.
class Type_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/Type\$Builder");
  Type_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element;)V");

  /// from: public void <init>(android.renderscript.RenderScript rs, android.renderscript.Element e)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new builder object.
  ///@param rs
  ///@param e The element for the type to be created.
  Type_Builder(renderscript_.RenderScript rs, element_.Element e)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [rs.reference, e.reference]).object);

  static final _id_setX = jniAccessors.getMethodIDOf(
      _classRef, "setX", "(I)Landroid/renderscript/Type\$Builder;");

  /// from: public android.renderscript.Type.Builder setX(int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Add a dimension to the Type.
  ///@param value
  Type_Builder setX(int value) =>
      Type_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setX, jni.JniType.objectType, [value]).object);

  static final _id_setY = jniAccessors.getMethodIDOf(
      _classRef, "setY", "(I)Landroid/renderscript/Type\$Builder;");

  /// from: public android.renderscript.Type.Builder setY(int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Type_Builder setY(int value) =>
      Type_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setY, jni.JniType.objectType, [value]).object);

  static final _id_setZ = jniAccessors.getMethodIDOf(
      _classRef, "setZ", "(I)Landroid/renderscript/Type\$Builder;");

  /// from: public android.renderscript.Type.Builder setZ(int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Type_Builder setZ(int value) =>
      Type_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setZ, jni.JniType.objectType, [value]).object);

  static final _id_setMipmaps = jniAccessors.getMethodIDOf(
      _classRef, "setMipmaps", "(Z)Landroid/renderscript/Type\$Builder;");

  /// from: public android.renderscript.Type.Builder setMipmaps(boolean value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Type_Builder setMipmaps(bool value) =>
      Type_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setMipmaps, jni.JniType.objectType, [value]).object);

  static final _id_setFaces = jniAccessors.getMethodIDOf(
      _classRef, "setFaces", "(Z)Landroid/renderscript/Type\$Builder;");

  /// from: public android.renderscript.Type.Builder setFaces(boolean value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Type_Builder setFaces(bool value) =>
      Type_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setFaces, jni.JniType.objectType, [value]).object);

  static final _id_setYuvFormat = jniAccessors.getMethodIDOf(
      _classRef, "setYuvFormat", "(I)Landroid/renderscript/Type\$Builder;");

  /// from: public android.renderscript.Type.Builder setYuvFormat(int yuvFormat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the YUV layout for a Type.
  ///@param yuvFormat android.graphics.ImageFormat\#YV12, android.graphics.ImageFormat\#NV21, or
  /// android.graphics.ImageFormat\#YUV_420_888.
  Type_Builder setYuvFormat(int yuvFormat) =>
      Type_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setYuvFormat, jni.JniType.objectType, [yuvFormat]).object);

  static final _id_create = jniAccessors.getMethodIDOf(
      _classRef, "create", "()Landroid/renderscript/Type;");

  /// from: public android.renderscript.Type create()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Validate structure and create a new Type.
  ///@return Type
  Type create() => Type.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_create, jni.JniType.objectType, []).object);
}
