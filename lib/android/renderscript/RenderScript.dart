// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.renderscript.RenderScript
///
/// This class provides access to a RenderScript context, which controls RenderScript
/// initialization, resource management, and teardown. An instance of the RenderScript
/// class must be created before any other RS objects can be created.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about creating an application that uses RenderScript, read the
/// <a href="{@docRoot}guide/topics/renderscript/index.html">RenderScript</a> developer guide.
///
/// </div>
class RenderScript extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/RenderScript");
  RenderScript.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CREATE_FLAG_LOW_LATENCY
  static const CREATE_FLAG_LOW_LATENCY = 2;

  /// from: static public final int CREATE_FLAG_LOW_POWER
  static const CREATE_FLAG_LOW_POWER = 4;

  /// from: static public final int CREATE_FLAG_NONE
  static const CREATE_FLAG_NONE = 0;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: void <init>(android.content.Context ctx)
  /// The returned object must be deleted after use, by calling the `delete` method.
  RenderScript(context_.Context ctx)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [ctx.reference]).object);

  static final _id_getMinorVersion =
      jniAccessors.getStaticMethodIDOf(_classRef, "getMinorVersion", "()J");

  /// from: static public long getMinorVersion()
  ///
  /// Returns an identifier that can be used to identify a particular
  /// minor version of RS.
  ///@return The minor RenderScript version number
  static int getMinorVersion() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_getMinorVersion, jni.JniType.longType, []).long;

  static final _id_setMessageHandler = jniAccessors.getMethodIDOf(
      _classRef,
      "setMessageHandler",
      "(Landroid/renderscript/RenderScript\$RSMessageHandler;)V");

  /// from: public void setMessageHandler(android.renderscript.RenderScript.RSMessageHandler msg)
  void setMessageHandler(RenderScript_RSMessageHandler msg) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMessageHandler,
          jni.JniType.voidType, [msg.reference]).check();

  static final _id_getMessageHandler = jniAccessors.getMethodIDOf(
      _classRef,
      "getMessageHandler",
      "()Landroid/renderscript/RenderScript\$RSMessageHandler;");

  /// from: public android.renderscript.RenderScript.RSMessageHandler getMessageHandler()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RenderScript_RSMessageHandler getMessageHandler() =>
      RenderScript_RSMessageHandler.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMessageHandler, jni.JniType.objectType, []).object);

  static final _id_sendMessage =
      jniAccessors.getMethodIDOf(_classRef, "sendMessage", "(I[I)V");

  /// from: public void sendMessage(int id, int[] data)
  ///
  /// Place a message into the message queue to be sent back to the message
  /// handler once all previous commands have been executed.
  ///@param id
  ///@param data
  void sendMessage(int id, jni.JniObject data) =>
      jniAccessors.callMethodWithArgs(reference, _id_sendMessage,
          jni.JniType.voidType, [id, data.reference]).check();

  static final _id_setErrorHandler = jniAccessors.getMethodIDOf(
      _classRef,
      "setErrorHandler",
      "(Landroid/renderscript/RenderScript\$RSErrorHandler;)V");

  /// from: public void setErrorHandler(android.renderscript.RenderScript.RSErrorHandler msg)
  void setErrorHandler(RenderScript_RSErrorHandler msg) =>
      jniAccessors.callMethodWithArgs(reference, _id_setErrorHandler,
          jni.JniType.voidType, [msg.reference]).check();

  static final _id_getErrorHandler = jniAccessors.getMethodIDOf(
      _classRef,
      "getErrorHandler",
      "()Landroid/renderscript/RenderScript\$RSErrorHandler;");

  /// from: public android.renderscript.RenderScript.RSErrorHandler getErrorHandler()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RenderScript_RSErrorHandler getErrorHandler() =>
      RenderScript_RSErrorHandler.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getErrorHandler, jni.JniType.objectType, []).object);

  static final _id_setPriority = jniAccessors.getMethodIDOf(_classRef,
      "setPriority", "(Landroid/renderscript/RenderScript\$Priority;)V");

  /// from: public void setPriority(android.renderscript.RenderScript.Priority p)
  ///
  /// Change the priority of the worker threads for this context.
  ///@param p New priority to be set.
  void setPriority(RenderScript_Priority p) => jniAccessors.callMethodWithArgs(
      reference, _id_setPriority, jni.JniType.voidType, [p.reference]).check();

  static final _id_getApplicationContext = jniAccessors.getMethodIDOf(
      _classRef, "getApplicationContext", "()Landroid/content/Context;");

  /// from: public final android.content.Context getApplicationContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the application context associated with the RenderScript context.
  ///@return The application context.
  context_.Context getApplicationContext() =>
      context_.Context.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getApplicationContext, jni.JniType.objectType, []).object);

  static final _id_create = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "create",
      "(Landroid/content/Context;)Landroid/renderscript/RenderScript;");

  /// from: static public android.renderscript.RenderScript create(android.content.Context ctx)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// calls create(ctx, ContextType.NORMAL, CREATE_FLAG_NONE)
  ///
  /// See documentation for @create for details
  ///@param ctx The context.
  ///@return RenderScript
  static RenderScript create(context_.Context ctx) =>
      RenderScript.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_create, jni.JniType.objectType, [ctx.reference]).object);

  static final _id_create1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "create",
      "(Landroid/content/Context;Landroid/renderscript/RenderScript\$ContextType;)Landroid/renderscript/RenderScript;");

  /// from: static public android.renderscript.RenderScript create(android.content.Context ctx, android.renderscript.RenderScript.ContextType ct)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// calls create(ctx, ct, CREATE_FLAG_NONE)
  ///
  /// See documentation for @create for details
  ///@param ctx The context.
  ///@param ct The type of context to be created.
  ///@return RenderScript
  static RenderScript create1(
          context_.Context ctx, RenderScript_ContextType ct) =>
      RenderScript.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create1,
          jni.JniType.objectType,
          [ctx.reference, ct.reference]).object);

  static final _id_create2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "create",
      "(Landroid/content/Context;Landroid/renderscript/RenderScript\$ContextType;I)Landroid/renderscript/RenderScript;");

  /// from: static public android.renderscript.RenderScript create(android.content.Context ctx, android.renderscript.RenderScript.ContextType ct, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets or creates a RenderScript context of the specified type.
  ///
  /// The returned context will be cached for future reuse within
  /// the process. When an application is finished using
  /// RenderScript it should call releaseAllContexts()
  ///
  /// A process context is a context designed for easy creation and
  /// lifecycle management.  Multiple calls to this function will
  /// return the same object provided they are called with the same
  /// options.  This allows it to be used any time a RenderScript
  /// context is needed.
  ///
  /// Prior to API 23 this always created a new context.
  ///@param ctx The context.
  ///@param ct The type of context to be created.
  ///@param flags The OR of the CREATE_FLAG_* options desired
  ///@return RenderScript
  static RenderScript create2(
          context_.Context ctx, RenderScript_ContextType ct, int flags) =>
      RenderScript.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create2,
          jni.JniType.objectType,
          [ctx.reference, ct.reference, flags]).object);

  static final _id_releaseAllContexts =
      jniAccessors.getStaticMethodIDOf(_classRef, "releaseAllContexts", "()V");

  /// from: static public void releaseAllContexts()
  ///
  /// Releases all the process contexts.  This is the same as
  /// calling .destroy() on each unique context retreived with
  /// create(...). If no contexts have been created this
  /// function does nothing.
  ///
  /// Typically you call this when your application is losing focus
  /// and will not be using a context for some time.
  ///
  /// This has no effect on a context created with
  /// createMultiContext()
  static void releaseAllContexts() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_releaseAllContexts, jni.JniType.voidType, []).check();

  static final _id_createMultiContext = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createMultiContext",
      "(Landroid/content/Context;Landroid/renderscript/RenderScript\$ContextType;II)Landroid/renderscript/RenderScript;");

  /// from: static public android.renderscript.RenderScript createMultiContext(android.content.Context ctx, android.renderscript.RenderScript.ContextType ct, int flags, int API_number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a RenderScript context.
  ///
  /// This is an advanced function intended for applications which
  /// need to create more than one RenderScript context to be used
  /// at the same time.
  ///
  /// If you need a single context please use create()
  ///@param ctx The context.
  ///@return RenderScript
  static RenderScript createMultiContext(context_.Context ctx,
          RenderScript_ContextType ct, int flags, int API_number) =>
      RenderScript.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createMultiContext,
          jni.JniType.objectType,
          [ctx.reference, ct.reference, flags, API_number]).object);

  static final _id_contextDump =
      jniAccessors.getMethodIDOf(_classRef, "contextDump", "()V");

  /// from: public void contextDump()
  ///
  /// Print the currently available debugging information about the state of
  /// the RS context to the log.
  void contextDump() => jniAccessors.callMethodWithArgs(
      reference, _id_contextDump, jni.JniType.voidType, []).check();

  static final _id_finish =
      jniAccessors.getMethodIDOf(_classRef, "finish", "()V");

  /// from: public void finish()
  ///
  /// Wait for any pending asynchronous opeations (such as copies to a RS
  /// allocation or RS script executions) to complete.
  void finish() => jniAccessors.callMethodWithArgs(
      reference, _id_finish, jni.JniType.voidType, []).check();

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();

  static final _id_destroy =
      jniAccessors.getMethodIDOf(_classRef, "destroy", "()V");

  /// from: public void destroy()
  ///
  /// Destroys this RenderScript context.  Once this function is called,
  /// using this context or any objects belonging to this context is
  /// illegal.
  ///
  /// API 23+, this function is a NOP if the context was created
  /// with create().  Please use releaseAllContexts() to clean up
  /// contexts created with the create function.
  void destroy() => jniAccessors.callMethodWithArgs(
      reference, _id_destroy, jni.JniType.voidType, []).check();
}

/// from: android.renderscript.RenderScript$RSMessageHandler
///
/// The base class from which an application should derive in order
/// to receive RS messages from scripts. When a script calls {@code
/// rsSendToClient}, the data fields will be filled, and the run
/// method will be called on a separate thread.  This will occur
/// some time after {@code rsSendToClient} completes in the script,
/// as {@code rsSendToClient} is asynchronous. Message handlers are
/// not guaranteed to have completed when android.renderscript.RenderScript\#finish returns.
class RenderScript_RSMessageHandler extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/renderscript/RenderScript\$RSMessageHandler");
  RenderScript_RSMessageHandler.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_mData = jniAccessors.getFieldIDOf(_classRef, "mData", "[I");

  /// from: protected int[] mData
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject get mData => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_mData, jni.JniType.objectType)
      .object);

  /// from: protected int[] mData
  /// The returned object must be deleted after use, by calling the `delete` method.
  set mData(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_mData, value.reference);

  static final _id_mID = jniAccessors.getFieldIDOf(_classRef, "mID", "I");

  /// from: protected int mID
  int get mID =>
      jniAccessors.getField(reference, _id_mID, jni.JniType.intType).integer;

  /// from: protected int mID
  set mID(int value) => jniEnv.SetIntField(reference, _id_mID, value);

  static final _id_mLength =
      jniAccessors.getFieldIDOf(_classRef, "mLength", "I");

  /// from: protected int mLength
  int get mLength => jniAccessors
      .getField(reference, _id_mLength, jni.JniType.intType)
      .integer;

  /// from: protected int mLength
  set mLength(int value) => jniEnv.SetIntField(reference, _id_mLength, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RenderScript_RSMessageHandler()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_run = jniAccessors.getMethodIDOf(_classRef, "run", "()V");

  /// from: public void run()
  void run() => jniAccessors
      .callMethodWithArgs(reference, _id_run, jni.JniType.voidType, []).check();
}

/// from: android.renderscript.RenderScript$RSErrorHandler
///
/// The runtime error handler base class.  An application should derive from this class
/// if it wishes to install an error handler.  When errors occur at runtime,
/// the fields in this class will be filled, and the run method will be called.
class RenderScript_RSErrorHandler extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/renderscript/RenderScript\$RSErrorHandler");
  RenderScript_RSErrorHandler.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_mErrorMessage = jniAccessors.getFieldIDOf(
      _classRef, "mErrorMessage", "Ljava/lang/String;");

  /// from: protected java.lang.String mErrorMessage
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString get mErrorMessage => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_mErrorMessage, jni.JniType.objectType)
      .object);

  /// from: protected java.lang.String mErrorMessage
  /// The returned object must be deleted after use, by calling the `delete` method.
  set mErrorMessage(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_mErrorMessage, value.reference);

  static final _id_mErrorNum =
      jniAccessors.getFieldIDOf(_classRef, "mErrorNum", "I");

  /// from: protected int mErrorNum
  int get mErrorNum => jniAccessors
      .getField(reference, _id_mErrorNum, jni.JniType.intType)
      .integer;

  /// from: protected int mErrorNum
  set mErrorNum(int value) =>
      jniEnv.SetIntField(reference, _id_mErrorNum, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RenderScript_RSErrorHandler()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_run = jniAccessors.getMethodIDOf(_classRef, "run", "()V");

  /// from: public void run()
  void run() => jniAccessors
      .callMethodWithArgs(reference, _id_run, jni.JniType.voidType, []).check();
}

/// from: android.renderscript.RenderScript$Priority
///
/// RenderScript worker thread priority enumeration.  The default value is
/// NORMAL.  Applications wishing to do background processing should set
/// their priority to LOW to avoid starving forground processes.
class RenderScript_Priority extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/RenderScript\$Priority");
  RenderScript_Priority.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/renderscript/RenderScript\$Priority;");

  /// from: static public android.renderscript.RenderScript.Priority[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/renderscript/RenderScript\$Priority;");

  /// from: static public android.renderscript.RenderScript.Priority valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RenderScript_Priority valueOf(jni.JniString name) =>
      RenderScript_Priority.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RenderScript_Priority()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.renderscript.RenderScript$ContextType
///
/// ContextType specifies the specific type of context to be created.
class RenderScript_ContextType extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/RenderScript\$ContextType");
  RenderScript_ContextType.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(_classRef,
      "values", "()[Landroid/renderscript/RenderScript\$ContextType;");

  /// from: static public android.renderscript.RenderScript.ContextType[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/renderscript/RenderScript\$ContextType;");

  /// from: static public android.renderscript.RenderScript.ContextType valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RenderScript_ContextType valueOf(jni.JniString name) =>
      RenderScript_ContextType.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RenderScript_ContextType()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
