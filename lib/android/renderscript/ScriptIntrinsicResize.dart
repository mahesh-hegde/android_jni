// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ScriptIntrinsic.dart" as scriptintrinsic_;

import "RenderScript.dart" as renderscript_;

import "Allocation.dart" as allocation_;

import "Script.dart" as script_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.renderscript.ScriptIntrinsicResize
///
/// Intrinsic for performing a resize of a 2D allocation.
class ScriptIntrinsicResize extends scriptintrinsic_.ScriptIntrinsic {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/ScriptIntrinsicResize");
  ScriptIntrinsicResize.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(JLandroid/renderscript/RenderScript;)V");

  /// from: void <init>(long id, android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ScriptIntrinsicResize(int id, renderscript_.RenderScript rs)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [id, rs.reference]).object);

  static final _id_create = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "create",
      "(Landroid/renderscript/RenderScript;)Landroid/renderscript/ScriptIntrinsicResize;");

  /// from: static public android.renderscript.ScriptIntrinsicResize create(android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Supported elements types are Element\#U8, Element\#U8_2, Element\#U8_3, Element\#U8_4
  /// Element\#F32, Element\#F32_2, Element\#F32_3, Element\#F32_4
  ///@param rs The RenderScript context
  ///@return ScriptIntrinsicResize
  static ScriptIntrinsicResize create(renderscript_.RenderScript rs) =>
      ScriptIntrinsicResize.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create,
          jni.JniType.objectType,
          [rs.reference]).object);

  static final _id_setInput = jniAccessors.getMethodIDOf(
      _classRef, "setInput", "(Landroid/renderscript/Allocation;)V");

  /// from: public void setInput(android.renderscript.Allocation ain)
  ///
  /// Set the input of the resize.
  /// Must match the element type supplied during create.
  ///@param ain The input allocation.
  void setInput(allocation_.Allocation ain) => jniAccessors.callMethodWithArgs(
      reference, _id_setInput, jni.JniType.voidType, [ain.reference]).check();

  static final _id_getFieldID_Input = jniAccessors.getMethodIDOf(_classRef,
      "getFieldID_Input", "()Landroid/renderscript/Script\$FieldID;");

  /// from: public android.renderscript.Script.FieldID getFieldID_Input()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a FieldID for the input field of this intrinsic.
  ///@return Script.FieldID The FieldID object.
  script_.Script_FieldID getFieldID_Input() =>
      script_.Script_FieldID.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFieldID_Input, jni.JniType.objectType, []).object);

  static final _id_forEach_bicubic = jniAccessors.getMethodIDOf(
      _classRef, "forEach_bicubic", "(Landroid/renderscript/Allocation;)V");

  /// from: public void forEach_bicubic(android.renderscript.Allocation aout)
  ///
  /// Resize copy the input allocation to the output specified. The
  /// Allocation is rescaled if necessary using bi-cubic
  /// interpolation.
  ///@param aout Output allocation. Element type must match
  ///             current input.  Must not be same as input.
  void forEach_bicubic(allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEach_bicubic,
          jni.JniType.voidType, [aout.reference]).check();

  static final _id_forEach_bicubic1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEach_bicubic",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEach_bicubic(android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Resize copy the input allocation to the output specified. The
  /// Allocation is rescaled if necessary using bi-cubic
  /// interpolation.
  ///@param aout Output allocation. Element type must match
  ///             current input.
  ///@param opt LaunchOptions for clipping
  void forEach_bicubic1(
          allocation_.Allocation aout, script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEach_bicubic1,
          jni.JniType.voidType, [aout.reference, opt.reference]).check();

  static final _id_getKernelID_bicubic = jniAccessors.getMethodIDOf(_classRef,
      "getKernelID_bicubic", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelID_bicubic()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for this intrinsic kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelID_bicubic() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getKernelID_bicubic, jni.JniType.objectType, []).object);
}
