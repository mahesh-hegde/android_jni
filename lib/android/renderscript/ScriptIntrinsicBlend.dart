// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ScriptIntrinsic.dart" as scriptintrinsic_;

import "RenderScript.dart" as renderscript_;

import "Element.dart" as element_;

import "Allocation.dart" as allocation_;

import "Script.dart" as script_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.renderscript.ScriptIntrinsicBlend
///
/// Intrinsic kernels for blending two android.renderscript.Allocation objects.
class ScriptIntrinsicBlend extends scriptintrinsic_.ScriptIntrinsic {
  static final _classRef =
      jniAccessors.getClassOf("android/renderscript/ScriptIntrinsicBlend");
  ScriptIntrinsicBlend.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(JLandroid/renderscript/RenderScript;)V");

  /// from: void <init>(long id, android.renderscript.RenderScript rs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ScriptIntrinsicBlend(int id, renderscript_.RenderScript rs)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [id, rs.reference]).object);

  static final _id_create = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "create",
      "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element;)Landroid/renderscript/ScriptIntrinsicBlend;");

  /// from: static public android.renderscript.ScriptIntrinsicBlend create(android.renderscript.RenderScript rs, android.renderscript.Element e)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Supported elements types are Element\#U8_4
  ///@param rs The RenderScript context
  ///@param e Element type for inputs and outputs
  ///@return ScriptIntrinsicBlend
  static ScriptIntrinsicBlend create(
          renderscript_.RenderScript rs, element_.Element e) =>
      ScriptIntrinsicBlend.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create,
          jni.JniType.objectType,
          [rs.reference, e.reference]).object);

  static final _id_forEachClear = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachClear",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachClear(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = {0, 0, 0, 0}
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachClear(allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachClear,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachClear1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachClear",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachClear(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = {0, 0, 0, 0}
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachClear1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachClear1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDClear = jniAccessors.getMethodIDOf(_classRef,
      "getKernelIDClear", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDClear()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the Clear kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDClear() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKernelIDClear, jni.JniType.objectType, []).object);

  static final _id_forEachSrc = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSrc",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachSrc(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = src
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachSrc(allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachSrc,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachSrc1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSrc",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachSrc(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = src
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachSrc1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachSrc1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDSrc = jniAccessors.getMethodIDOf(
      _classRef, "getKernelIDSrc", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDSrc()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the Src kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDSrc() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKernelIDSrc, jni.JniType.objectType, []).object);

  static final _id_forEachDst = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachDst",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachDst(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = dst
  ///
  /// This is a NOP.
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachDst(allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachDst,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachDst1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachDst",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachDst(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = dst
  ///
  /// This is a NOP.
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachDst1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachDst1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDDst = jniAccessors.getMethodIDOf(
      _classRef, "getKernelIDDst", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDDst()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the Dst kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDDst() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKernelIDDst, jni.JniType.objectType, []).object);

  static final _id_forEachSrcOver = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSrcOver",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachSrcOver(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = src + dst * (1.0 - src.a)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachSrcOver(
          allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachSrcOver,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachSrcOver1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSrcOver",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachSrcOver(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = src + dst * (1.0 - src.a)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachSrcOver1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachSrcOver1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDSrcOver = jniAccessors.getMethodIDOf(_classRef,
      "getKernelIDSrcOver", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDSrcOver()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the SrcOver kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDSrcOver() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getKernelIDSrcOver, jni.JniType.objectType, []).object);

  static final _id_forEachDstOver = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachDstOver",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachDstOver(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = dst + src * (1.0 - dst.a)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachDstOver(
          allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachDstOver,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachDstOver1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachDstOver",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachDstOver(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = dst + src * (1.0 - dst.a)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachDstOver1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachDstOver1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDDstOver = jniAccessors.getMethodIDOf(_classRef,
      "getKernelIDDstOver", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDDstOver()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the DstOver kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDDstOver() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getKernelIDDstOver, jni.JniType.objectType, []).object);

  static final _id_forEachSrcIn = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSrcIn",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachSrcIn(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = src * dst.a
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachSrcIn(allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachSrcIn,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachSrcIn1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSrcIn",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachSrcIn(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = src * dst.a
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachSrcIn1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachSrcIn1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDSrcIn = jniAccessors.getMethodIDOf(_classRef,
      "getKernelIDSrcIn", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDSrcIn()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the SrcIn kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDSrcIn() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKernelIDSrcIn, jni.JniType.objectType, []).object);

  static final _id_forEachDstIn = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachDstIn",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachDstIn(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = dst * src.a
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachDstIn(allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachDstIn,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachDstIn1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachDstIn",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachDstIn(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = dst * src.a
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachDstIn1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachDstIn1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDDstIn = jniAccessors.getMethodIDOf(_classRef,
      "getKernelIDDstIn", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDDstIn()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the DstIn kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDDstIn() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKernelIDDstIn, jni.JniType.objectType, []).object);

  static final _id_forEachSrcOut = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSrcOut",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachSrcOut(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = src * (1.0 - dst.a)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachSrcOut(allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachSrcOut,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachSrcOut1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSrcOut",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachSrcOut(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = src * (1.0 - dst.a)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachSrcOut1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachSrcOut1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDSrcOut = jniAccessors.getMethodIDOf(_classRef,
      "getKernelIDSrcOut", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDSrcOut()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the SrcOut kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDSrcOut() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKernelIDSrcOut, jni.JniType.objectType, []).object);

  static final _id_forEachDstOut = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachDstOut",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachDstOut(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = dst * (1.0 - src.a)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachDstOut(allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachDstOut,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachDstOut1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachDstOut",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachDstOut(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = dst * (1.0 - src.a)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachDstOut1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachDstOut1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDDstOut = jniAccessors.getMethodIDOf(_classRef,
      "getKernelIDDstOut", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDDstOut()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the DstOut kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDDstOut() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKernelIDDstOut, jni.JniType.objectType, []).object);

  static final _id_forEachSrcAtop = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSrcAtop",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachSrcAtop(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// dst.rgb = src.rgb * dst.a + (1.0 - src.a) * dst.rgb
  /// dst.a = dst.a
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachSrcAtop(
          allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachSrcAtop,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachSrcAtop1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSrcAtop",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachSrcAtop(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// dst.rgb = src.rgb * dst.a + (1.0 - src.a) * dst.rgb
  /// dst.a = dst.a
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachSrcAtop1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachSrcAtop1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDSrcAtop = jniAccessors.getMethodIDOf(_classRef,
      "getKernelIDSrcAtop", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDSrcAtop()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the SrcAtop kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDSrcAtop() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getKernelIDSrcAtop, jni.JniType.objectType, []).object);

  static final _id_forEachDstAtop = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachDstAtop",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachDstAtop(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// dst = dst.rgb * src.a + (1.0 - dst.a) * src.rgb
  /// dst.a = src.a
  /// Note: Before API 23, the alpha channel was not correctly set.
  ///       Please use with caution when targeting older APIs.
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachDstAtop(
          allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachDstAtop,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachDstAtop1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachDstAtop",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachDstAtop(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// dst = dst.rgb * src.a + (1.0 - dst.a) * src.rgb
  /// dst.a = src.a
  /// Note: Before API 23, the alpha channel was not correctly set.
  ///       Please use with caution when targeting older APIs.
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachDstAtop1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachDstAtop1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDDstAtop = jniAccessors.getMethodIDOf(_classRef,
      "getKernelIDDstAtop", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDDstAtop()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the DstAtop kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDDstAtop() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getKernelIDDstAtop, jni.JniType.objectType, []).object);

  static final _id_forEachXor = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachXor",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachXor(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = {src.r ^ dst.r, src.g ^ dst.g, src.b ^ dst.b, src.a ^ dst.a}
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachXor(allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachXor,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachXor1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachXor",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachXor(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = {src.r ^ dst.r, src.g ^ dst.g, src.b ^ dst.b, src.a ^ dst.a}
  ///
  /// __Note:__ this is NOT the Porter/Duff XOR mode; this is a bitwise xor.
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachXor1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachXor1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDXor = jniAccessors.getMethodIDOf(
      _classRef, "getKernelIDXor", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDXor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the Xor kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDXor() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKernelIDXor, jni.JniType.objectType, []).object);

  static final _id_forEachMultiply = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachMultiply",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachMultiply(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = src * dst
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachMultiply(
          allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachMultiply,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachMultiply1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachMultiply",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachMultiply(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = src * dst
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachMultiply1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachMultiply1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDMultiply = jniAccessors.getMethodIDOf(_classRef,
      "getKernelIDMultiply", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDMultiply()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the Multiply kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDMultiply() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getKernelIDMultiply, jni.JniType.objectType, []).object);

  static final _id_forEachAdd = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachAdd",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachAdd(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = min(src + dst, 1.0)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachAdd(allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachAdd,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachAdd1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachAdd",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachAdd(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = min(src + dst, 1.0)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachAdd1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachAdd1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDAdd = jniAccessors.getMethodIDOf(
      _classRef, "getKernelIDAdd", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDAdd()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the Add kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDAdd() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKernelIDAdd, jni.JniType.objectType, []).object);

  static final _id_forEachSubtract = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSubtract",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V");

  /// from: public void forEachSubtract(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
  ///
  /// Sets dst = max(dst - src, 0.0)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  void forEachSubtract(
          allocation_.Allocation ain, allocation_.Allocation aout) =>
      jniAccessors.callMethodWithArgs(reference, _id_forEachSubtract,
          jni.JniType.voidType, [ain.reference, aout.reference]).check();

  static final _id_forEachSubtract1 = jniAccessors.getMethodIDOf(
      _classRef,
      "forEachSubtract",
      "(Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Script\$LaunchOptions;)V");

  /// from: public void forEachSubtract(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
  ///
  /// Sets dst = max(dst - src, 0.0)
  ///@param ain The source buffer
  ///@param aout The destination buffer
  ///@param opt LaunchOptions for clipping
  void forEachSubtract1(allocation_.Allocation ain, allocation_.Allocation aout,
          script_.Script_LaunchOptions opt) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_forEachSubtract1,
          jni.JniType.voidType,
          [ain.reference, aout.reference, opt.reference]).check();

  static final _id_getKernelIDSubtract = jniAccessors.getMethodIDOf(_classRef,
      "getKernelIDSubtract", "()Landroid/renderscript/Script\$KernelID;");

  /// from: public android.renderscript.Script.KernelID getKernelIDSubtract()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a KernelID for the Subtract kernel.
  ///@return Script.KernelID The KernelID object.
  script_.Script_KernelID getKernelIDSubtract() =>
      script_.Script_KernelID.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getKernelIDSubtract, jni.JniType.objectType, []).object);
}
