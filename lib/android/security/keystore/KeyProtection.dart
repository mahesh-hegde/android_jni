// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.security.keystore.KeyProtection
///
/// Specification of how a key or key pair is secured when imported into the
/// <a href="{@docRoot}training/articles/keystore.html">Android Keystore system</a>. This class
/// specifies authorized uses of the imported key, such as whether user authentication is required
/// for using the key, what operations the key is authorized for (e.g., decryption, but not signing)
/// with what parameters (e.g., only with a particular padding scheme or digest), and the key's
/// validity start and end dates. Key use authorizations expressed in this class apply only to secret
/// keys and private keys -- public keys can be used for any supported operations.
///
/// To import a key or key pair into the Android Keystore, create an instance of this class using
/// the Builder and pass the instance into java.security.KeyStore\#setEntry(String, java.security.KeyStore.Entry, ProtectionParameter) KeyStore.setEntry
/// with the key or key pair being imported.
///
/// To obtain the secret/symmetric or private key from the Android Keystore use
/// java.security.KeyStore\#getKey(String, char[]) KeyStore.getKey(String, null) or
/// java.security.KeyStore\#getEntry(String, java.security.KeyStore.ProtectionParameter) KeyStore.getEntry(String, null).
/// To obtain the public key from the Android Keystore use
/// java.security.KeyStore\#getCertificate(String) and then
/// Certificate\#getPublicKey().
///
/// To help obtain algorithm-specific public parameters of key pairs stored in the Android
/// Keystore, its private keys implement java.security.interfaces.ECKey or
/// java.security.interfaces.RSAKey interfaces whereas its public keys implement
/// java.security.interfaces.ECPublicKey or java.security.interfaces.RSAPublicKey
/// interfaces.
///
/// NOTE: The key material of keys stored in the Android Keystore is not accessible.
///
/// Instances of this class are immutable.
///
/// <h3>Known issues</h3>
/// A known bug in Android 6.0 (API Level 23) causes user authentication-related authorizations to be
/// enforced even for public keys. To work around this issue extract the public key material to use
/// outside of Android Keystore. For example:
/// <pre> {@code
/// PublicKey unrestrictedPublicKey =
///         KeyFactory.getInstance(publicKey.getAlgorithm()).generatePublic(
///                 new X509EncodedKeySpec(publicKey.getEncoded()));
/// }</pre>
///
/// <h3>Example: AES key for encryption/decryption in GCM mode</h3>
/// This example illustrates how to import an AES key into the Android KeyStore under alias
/// {@code key1} authorized to be used only for encryption/decryption in GCM mode with no padding.
/// The key must export its key material via Key\#getEncoded() in {@code RAW} format.
/// <pre> {@code
/// SecretKey key = ...; // AES key
///
/// KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
/// keyStore.load(null);
/// keyStore.setEntry(
///         "key1",
///         new KeyStore.SecretKeyEntry(key),
///         new KeyProtection.Builder(KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
///                 .setBlockMode(KeyProperties.BLOCK_MODE_GCM)
///                 .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
///                 .build());
/// // Key imported, obtain a reference to it.
/// SecretKey keyStoreKey = (SecretKey) keyStore.getKey("key1", null);
/// // The original key can now be discarded.
///
/// Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
/// cipher.init(Cipher.ENCRYPT_MODE, keyStoreKey);
/// ...
/// }</pre>
///
/// <h3>Example: HMAC key for generating MACs using SHA-512</h3>
/// This example illustrates how to import an HMAC key into the Android KeyStore under alias
/// {@code key1} authorized to be used only for generating MACs using SHA-512 digest. The key must
/// export its key material via Key\#getEncoded() in {@code RAW} format.
/// <pre> {@code
/// SecretKey key = ...; // HMAC key of algorithm "HmacSHA512".
///
/// KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
/// keyStore.load(null);
/// keyStore.setEntry(
///         "key1",
///         new KeyStore.SecretKeyEntry(key),
///         new KeyProtection.Builder(KeyProperties.PURPOSE_SIGN).build());
/// // Key imported, obtain a reference to it.
/// SecretKey keyStoreKey = (SecretKey) keyStore.getKey("key1", null);
/// // The original key can now be discarded.
///
/// Mac mac = Mac.getInstance("HmacSHA512");
/// mac.init(keyStoreKey);
/// ...
/// }</pre>
///
/// <h3>Example: EC key pair for signing/verification using ECDSA</h3>
/// This example illustrates how to import an EC key pair into the Android KeyStore under alias
/// {@code key2} with the private key authorized to be used only for signing with SHA-256 or SHA-512
/// digests. The use of the public key is unrestricted. Both the private and the public key must
/// export their key material via Key\#getEncoded() in {@code PKCS\#8} and {@code X.509} format
/// respectively.
/// <pre> {@code
/// PrivateKey privateKey = ...;   // EC private key
/// Certificate[] certChain = ...; // Certificate chain with the first certificate
///                                // containing the corresponding EC public key.
///
/// KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
/// keyStore.load(null);
/// keyStore.setEntry(
///         "key2",
///         new KeyStore.PrivateKeyEntry(privateKey, certChain),
///         new KeyProtection.Builder(KeyProperties.PURPOSE_SIGN)
///                 .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)
///                 .build());
/// // Key pair imported, obtain a reference to it.
/// PrivateKey keyStorePrivateKey = (PrivateKey) keyStore.getKey("key2", null);
/// PublicKey publicKey = keyStore.getCertificate("key2").getPublicKey();
/// // The original private key can now be discarded.
///
/// Signature signature = Signature.getInstance("SHA256withECDSA");
/// signature.initSign(keyStorePrivateKey);
/// ...
/// }</pre>
///
/// <h3>Example: RSA key pair for signing/verification using PKCS\#1 padding</h3>
/// This example illustrates how to import an RSA key pair into the Android KeyStore under alias
/// {@code key2} with the private key authorized to be used only for signing using the PKCS\#1
/// signature padding scheme with SHA-256 digest and only if the user has been authenticated within
/// the last ten minutes. The use of the public key is unrestricted (see Known Issues). Both the
/// private and the public key must export their key material via Key\#getEncoded() in
/// {@code PKCS\#8} and {@code X.509} format respectively.
/// <pre> {@code
/// PrivateKey privateKey = ...;   // RSA private key
/// Certificate[] certChain = ...; // Certificate chain with the first certificate
///                                // containing the corresponding RSA public key.
///
/// KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
/// keyStore.load(null);
/// keyStore.setEntry(
///         "key2",
///         new KeyStore.PrivateKeyEntry(privateKey, certChain),
///         new KeyProtection.Builder(KeyProperties.PURPOSE_SIGN)
///                 .setDigests(KeyProperties.DIGEST_SHA256)
///                 .setSignaturePaddings(KeyProperties.SIGNATURE_PADDING_RSA_PKCS1)
///                 // Only permit this key to be used if the user
///                 // authenticated within the last ten minutes.
///                 .setUserAuthenticationRequired(true)
///                 .setUserAuthenticationValidityDurationSeconds(10 * 60)
///                 .build());
/// // Key pair imported, obtain a reference to it.
/// PrivateKey keyStorePrivateKey = (PrivateKey) keyStore.getKey("key2", null);
/// PublicKey publicKey = keyStore.getCertificate("key2").getPublicKey();
/// // The original private key can now be discarded.
///
/// Signature signature = Signature.getInstance("SHA256withRSA");
/// signature.initSign(keyStorePrivateKey);
/// ...
/// }</pre>
///
/// <h3>Example: RSA key pair for encryption/decryption using PKCS\#1 padding</h3>
/// This example illustrates how to import an RSA key pair into the Android KeyStore under alias
/// {@code key2} with the private key authorized to be used only for decryption using the PKCS\#1
/// encryption padding scheme. The use of public key is unrestricted, thus permitting encryption
/// using any padding schemes and digests. Both the private and the public key must export their key
/// material via Key\#getEncoded() in {@code PKCS\#8} and {@code X.509} format respectively.
/// <pre> {@code
/// PrivateKey privateKey = ...;   // RSA private key
/// Certificate[] certChain = ...; // Certificate chain with the first certificate
///                                // containing the corresponding RSA public key.
///
/// KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
/// keyStore.load(null);
/// keyStore.setEntry(
///         "key2",
///         new KeyStore.PrivateKeyEntry(privateKey, certChain),
///         new KeyProtection.Builder(KeyProperties.PURPOSE_DECRYPT)
///                 .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1)
///                 .build());
/// // Key pair imported, obtain a reference to it.
/// PrivateKey keyStorePrivateKey = (PrivateKey) keyStore.getKey("key2", null);
/// PublicKey publicKey = keyStore.getCertificate("key2").getPublicKey();
/// // The original private key can now be discarded.
///
/// Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
/// cipher.init(Cipher.DECRYPT_MODE, keyStorePrivateKey);
/// ...
/// }</pre>
class KeyProtection extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/security/keystore/KeyProtection");
  KeyProtection.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;I[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ZZIZZZJZZZZ)V");

  /// from: void <init>(java.util.Date keyValidityStart, java.util.Date keyValidityForOriginationEnd, java.util.Date keyValidityForConsumptionEnd, int purposes, java.lang.String[] encryptionPaddings, java.lang.String[] signaturePaddings, java.lang.String[] digests, java.lang.String[] blockModes, boolean randomizedEncryptionRequired, boolean userAuthenticationRequired, int userAuthenticationValidityDurationSeconds, boolean userPresenceRequred, boolean userAuthenticationValidWhileOnBody, boolean invalidatedByBiometricEnrollment, long boundToSecureUserId, boolean criticalToDeviceEncryption, boolean userConfirmationRequired, boolean unlockedDeviceRequired, boolean isStrongBoxBacked)
  /// The returned object must be deleted after use, by calling the `delete` method.
  KeyProtection(
      jni.JniObject keyValidityStart,
      jni.JniObject keyValidityForOriginationEnd,
      jni.JniObject keyValidityForConsumptionEnd,
      int purposes,
      jni.JniObject encryptionPaddings,
      jni.JniObject signaturePaddings,
      jni.JniObject digests,
      jni.JniObject blockModes,
      bool randomizedEncryptionRequired,
      bool userAuthenticationRequired,
      int userAuthenticationValidityDurationSeconds,
      bool userPresenceRequred,
      bool userAuthenticationValidWhileOnBody,
      bool invalidatedByBiometricEnrollment,
      int boundToSecureUserId,
      bool criticalToDeviceEncryption,
      bool userConfirmationRequired,
      bool unlockedDeviceRequired,
      bool isStrongBoxBacked)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          keyValidityStart.reference,
          keyValidityForOriginationEnd.reference,
          keyValidityForConsumptionEnd.reference,
          purposes,
          encryptionPaddings.reference,
          signaturePaddings.reference,
          digests.reference,
          blockModes.reference,
          randomizedEncryptionRequired,
          userAuthenticationRequired,
          userAuthenticationValidityDurationSeconds,
          userPresenceRequred,
          userAuthenticationValidWhileOnBody,
          invalidatedByBiometricEnrollment,
          boundToSecureUserId,
          criticalToDeviceEncryption,
          userConfirmationRequired,
          unlockedDeviceRequired,
          isStrongBoxBacked
        ]).object);

  static final _id_getKeyValidityStart = jniAccessors.getMethodIDOf(
      _classRef, "getKeyValidityStart", "()Ljava/util/Date;");

  /// from: public java.util.Date getKeyValidityStart()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the time instant before which the key is not yet valid.
  ///@return instant or {@code null} if not restricted.
  jni.JniObject getKeyValidityStart() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getKeyValidityStart, jni.JniType.objectType, []).object);

  static final _id_getKeyValidityForConsumptionEnd = jniAccessors.getMethodIDOf(
      _classRef, "getKeyValidityForConsumptionEnd", "()Ljava/util/Date;");

  /// from: public java.util.Date getKeyValidityForConsumptionEnd()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the time instant after which the key is no long valid for decryption and verification.
  ///@return instant or {@code null} if not restricted.
  jni.JniObject getKeyValidityForConsumptionEnd() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getKeyValidityForConsumptionEnd,
          jni.JniType.objectType, []).object);

  static final _id_getKeyValidityForOriginationEnd = jniAccessors.getMethodIDOf(
      _classRef, "getKeyValidityForOriginationEnd", "()Ljava/util/Date;");

  /// from: public java.util.Date getKeyValidityForOriginationEnd()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the time instant after which the key is no long valid for encryption and signing.
  ///@return instant or {@code null} if not restricted.
  jni.JniObject getKeyValidityForOriginationEnd() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getKeyValidityForOriginationEnd,
          jni.JniType.objectType, []).object);

  static final _id_getPurposes =
      jniAccessors.getMethodIDOf(_classRef, "getPurposes", "()I");

  /// from: public int getPurposes()
  ///
  /// Gets the set of purposes (e.g., encrypt, decrypt, sign) for which the key can be used.
  /// Attempts to use the key for any other purpose will be rejected.
  ///
  /// See KeyProperties.{@code PURPOSE} flags.
  ///@return Value is either <code>0</code> or a combination of android.security.keystore.KeyProperties\#PURPOSE_ENCRYPT, android.security.keystore.KeyProperties\#PURPOSE_DECRYPT, android.security.keystore.KeyProperties\#PURPOSE_SIGN, android.security.keystore.KeyProperties\#PURPOSE_VERIFY, and android.security.keystore.KeyProperties\#PURPOSE_WRAP_KEY
  int getPurposes() => jniAccessors.callMethodWithArgs(
      reference, _id_getPurposes, jni.JniType.intType, []).integer;

  static final _id_getEncryptionPaddings = jniAccessors.getMethodIDOf(
      _classRef, "getEncryptionPaddings", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] getEncryptionPaddings()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the set of padding schemes (e.g., {@code PKCS7Padding}, {@code PKCS1Padding},
  /// {@code NoPadding}) with which the key can be used when encrypting/decrypting. Attempts to use
  /// the key with any other padding scheme will be rejected.
  ///
  /// See KeyProperties.{@code ENCRYPTION_PADDING} constants.
  ///@return This value will never be {@code null}.
  ///
  /// Value is android.security.keystore.KeyProperties\#ENCRYPTION_PADDING_NONE, android.security.keystore.KeyProperties\#ENCRYPTION_PADDING_PKCS7, android.security.keystore.KeyProperties\#ENCRYPTION_PADDING_RSA_PKCS1, or android.security.keystore.KeyProperties\#ENCRYPTION_PADDING_RSA_OAEP
  jni.JniObject getEncryptionPaddings() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getEncryptionPaddings, jni.JniType.objectType, []).object);

  static final _id_getSignaturePaddings = jniAccessors.getMethodIDOf(
      _classRef, "getSignaturePaddings", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] getSignaturePaddings()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the set of padding schemes (e.g., {@code PSS}, {@code PKCS\#1}) with which the key
  /// can be used when signing/verifying. Attempts to use the key with any other padding scheme
  /// will be rejected.
  ///
  /// See KeyProperties.{@code SIGNATURE_PADDING} constants.
  ///@return This value will never be {@code null}.
  ///
  /// Value is android.security.keystore.KeyProperties\#SIGNATURE_PADDING_RSA_PKCS1, or android.security.keystore.KeyProperties\#SIGNATURE_PADDING_RSA_PSS
  jni.JniObject getSignaturePaddings() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSignaturePaddings, jni.JniType.objectType, []).object);

  static final _id_getDigests = jniAccessors.getMethodIDOf(
      _classRef, "getDigests", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] getDigests()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the set of digest algorithms (e.g., {@code SHA-256}, {@code SHA-384}) with which the key
  /// can be used.
  ///
  /// See KeyProperties.{@code DIGEST} constants.
  ///@throws IllegalStateException if this set has not been specified.
  ///@see \#isDigestsSpecified()
  ///@return This value will never be {@code null}.
  ///
  /// Value is android.security.keystore.KeyProperties\#DIGEST_NONE, android.security.keystore.KeyProperties\#DIGEST_MD5, android.security.keystore.KeyProperties\#DIGEST_SHA1, android.security.keystore.KeyProperties\#DIGEST_SHA224, android.security.keystore.KeyProperties\#DIGEST_SHA256, android.security.keystore.KeyProperties\#DIGEST_SHA384, or android.security.keystore.KeyProperties\#DIGEST_SHA512
  jni.JniObject getDigests() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDigests, jni.JniType.objectType, []).object);

  static final _id_isDigestsSpecified =
      jniAccessors.getMethodIDOf(_classRef, "isDigestsSpecified", "()Z");

  /// from: public boolean isDigestsSpecified()
  ///
  /// Returns {@code true} if the set of digest algorithms with which the key can be used has been
  /// specified.
  ///@see \#getDigests()
  bool isDigestsSpecified() => jniAccessors.callMethodWithArgs(
      reference, _id_isDigestsSpecified, jni.JniType.booleanType, []).boolean;

  static final _id_getBlockModes = jniAccessors.getMethodIDOf(
      _classRef, "getBlockModes", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] getBlockModes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the set of block modes (e.g., {@code GCM}, {@code CBC}) with which the key can be used
  /// when encrypting/decrypting. Attempts to use the key with any other block modes will be
  /// rejected.
  ///
  /// See KeyProperties.{@code BLOCK_MODE} constants.
  ///@return This value will never be {@code null}.
  ///
  /// Value is android.security.keystore.KeyProperties\#BLOCK_MODE_ECB, android.security.keystore.KeyProperties\#BLOCK_MODE_CBC, android.security.keystore.KeyProperties\#BLOCK_MODE_CTR, or android.security.keystore.KeyProperties\#BLOCK_MODE_GCM
  jni.JniObject getBlockModes() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getBlockModes, jni.JniType.objectType, []).object);

  static final _id_isRandomizedEncryptionRequired = jniAccessors.getMethodIDOf(
      _classRef, "isRandomizedEncryptionRequired", "()Z");

  /// from: public boolean isRandomizedEncryptionRequired()
  ///
  /// Returns {@code true} if encryption using this key must be sufficiently randomized to produce
  /// different ciphertexts for the same plaintext every time. The formal cryptographic property
  /// being required is _indistinguishability under chosen-plaintext attack ({@code
  /// IND-CPA})_. This property is important because it mitigates several classes of
  /// weaknesses due to which ciphertext may leak information about plaintext. For example, if a
  /// given plaintext always produces the same ciphertext, an attacker may see the repeated
  /// ciphertexts and be able to deduce something about the plaintext.
  bool isRandomizedEncryptionRequired() => jniAccessors.callMethodWithArgs(
      reference,
      _id_isRandomizedEncryptionRequired,
      jni.JniType.booleanType, []).boolean;

  static final _id_isUserAuthenticationRequired = jniAccessors.getMethodIDOf(
      _classRef, "isUserAuthenticationRequired", "()Z");

  /// from: public boolean isUserAuthenticationRequired()
  ///
  /// Returns {@code true} if the key is authorized to be used only if the user has been
  /// authenticated.
  ///
  /// This authorization applies only to secret key and private key operations. Public key
  /// operations are not restricted.
  ///@see \#getUserAuthenticationValidityDurationSeconds()
  ///@see Builder\#setUserAuthenticationRequired(boolean)
  bool isUserAuthenticationRequired() => jniAccessors.callMethodWithArgs(
      reference,
      _id_isUserAuthenticationRequired,
      jni.JniType.booleanType, []).boolean;

  static final _id_isUserConfirmationRequired = jniAccessors.getMethodIDOf(
      _classRef, "isUserConfirmationRequired", "()Z");

  /// from: public boolean isUserConfirmationRequired()
  ///
  /// Returns {@code true} if the key is authorized to be used only for messages confirmed by the
  /// user.
  ///
  /// Confirmation is separate from user authentication (see
  /// \#isUserAuthenticationRequired()). Keys can be created that require confirmation but
  /// not user authentication, or user authentication but not confirmation, or both. Confirmation
  /// verifies that some user with physical possession of the device has approved a displayed
  /// message. User authentication verifies that the correct user is present and has
  /// authenticated.
  ///
  /// This authorization applies only to secret key and private key operations. Public key
  /// operations are not restricted.
  ///@see Builder\#setUserConfirmationRequired(boolean)
  bool isUserConfirmationRequired() => jniAccessors.callMethodWithArgs(
      reference,
      _id_isUserConfirmationRequired,
      jni.JniType.booleanType, []).boolean;

  static final _id_getUserAuthenticationValidityDurationSeconds =
      jniAccessors.getMethodIDOf(
          _classRef, "getUserAuthenticationValidityDurationSeconds", "()I");

  /// from: public int getUserAuthenticationValidityDurationSeconds()
  ///
  /// Gets the duration of time (seconds) for which this key is authorized to be used after the
  /// user is successfully authenticated. This has effect only if user authentication is required
  /// (see \#isUserAuthenticationRequired()).
  ///
  /// This authorization applies only to secret key and private key operations. Public key
  /// operations are not restricted.
  ///@return duration in seconds or {@code -1} if authentication is required for every use of the
  ///         key.
  ///@see \#isUserAuthenticationRequired()
  ///@see Builder\#setUserAuthenticationValidityDurationSeconds(int)
  int getUserAuthenticationValidityDurationSeconds() =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getUserAuthenticationValidityDurationSeconds,
          jni.JniType.intType, []).integer;

  static final _id_isUserPresenceRequired =
      jniAccessors.getMethodIDOf(_classRef, "isUserPresenceRequired", "()Z");

  /// from: public boolean isUserPresenceRequired()
  ///
  /// Returns {@code true} if the key is authorized to be used only if a test of user presence has
  /// been performed between the {@code Signature.initSign()} and {@code Signature.sign()} calls.
  /// It requires that the KeyStore implementation have a direct way to validate the user presence
  /// for example a KeyStore hardware backed strongbox can use a button press that is observable
  /// in hardware. A test for user presence is tangential to authentication. The test can be part
  /// of an authentication step as long as this step can be validated by the hardware protecting
  /// the key and cannot be spoofed. For example, a physical button press can be used as a test of
  /// user presence if the other pins connected to the button are not able to simulate a button
  /// press. There must be no way for the primary processor to fake a button press, or that
  /// button must not be used as a test of user presence.
  bool isUserPresenceRequired() => jniAccessors.callMethodWithArgs(reference,
      _id_isUserPresenceRequired, jni.JniType.booleanType, []).boolean;

  static final _id_isUserAuthenticationValidWhileOnBody = jniAccessors
      .getMethodIDOf(_classRef, "isUserAuthenticationValidWhileOnBody", "()Z");

  /// from: public boolean isUserAuthenticationValidWhileOnBody()
  ///
  /// Returns {@code true} if the key will be de-authorized when the device is removed from the
  /// user's body.  This option has no effect on keys that don't have an authentication validity
  /// duration, and has no effect if the device lacks an on-body sensor.
  ///
  /// Authorization applies only to secret key and private key operations. Public key operations
  /// are not restricted.
  ///@see \#isUserAuthenticationRequired()
  ///@see \#getUserAuthenticationValidityDurationSeconds()
  ///@see Builder\#setUserAuthenticationValidWhileOnBody(boolean)
  bool isUserAuthenticationValidWhileOnBody() =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_isUserAuthenticationValidWhileOnBody,
          jni.JniType.booleanType, []).boolean;

  static final _id_isInvalidatedByBiometricEnrollment = jniAccessors
      .getMethodIDOf(_classRef, "isInvalidatedByBiometricEnrollment", "()Z");

  /// from: public boolean isInvalidatedByBiometricEnrollment()
  ///
  /// Returns {@code true} if the key is irreversibly invalidated when a new fingerprint is
  /// enrolled or all enrolled fingerprints are removed. This has effect only for keys that
  /// require fingerprint user authentication for every use.
  ///@see \#isUserAuthenticationRequired()
  ///@see \#getUserAuthenticationValidityDurationSeconds()
  ///@see Builder\#setInvalidatedByBiometricEnrollment(boolean)
  bool isInvalidatedByBiometricEnrollment() => jniAccessors.callMethodWithArgs(
      reference,
      _id_isInvalidatedByBiometricEnrollment,
      jni.JniType.booleanType, []).boolean;

  static final _id_isUnlockedDeviceRequired =
      jniAccessors.getMethodIDOf(_classRef, "isUnlockedDeviceRequired", "()Z");

  /// from: public boolean isUnlockedDeviceRequired()
  ///
  /// Returns {@code true} if the screen must be unlocked for this key to be used for decryption or
  /// signing. Encryption and signature verification will still be available when the screen is
  /// locked.
  ///@see Builder\#setUnlockedDeviceRequired(boolean)
  bool isUnlockedDeviceRequired() => jniAccessors.callMethodWithArgs(reference,
      _id_isUnlockedDeviceRequired, jni.JniType.booleanType, []).boolean;
}

/// from: android.security.keystore.KeyProtection$Builder
///
/// Builder of KeyProtection instances.
class KeyProtection_Builder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/security/keystore/KeyProtection\$Builder");
  KeyProtection_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int purposes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new instance of the {@code Builder}.
  ///@param purposes set of purposes (e.g., encrypt, decrypt, sign) for which the key can be
  ///        used. Attempts to use the key for any other purpose will be rejected.
  ///
  ///        See KeyProperties.{@code PURPOSE} flags.
  ///
  /// Value is either <code>0</code> or a combination of android.security.keystore.KeyProperties\#PURPOSE_ENCRYPT, android.security.keystore.KeyProperties\#PURPOSE_DECRYPT, android.security.keystore.KeyProperties\#PURPOSE_SIGN, android.security.keystore.KeyProperties\#PURPOSE_VERIFY, and android.security.keystore.KeyProperties\#PURPOSE_WRAP_KEY
  KeyProtection_Builder(int purposes)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [purposes]).object);

  static final _id_setKeyValidityStart = jniAccessors.getMethodIDOf(
      _classRef,
      "setKeyValidityStart",
      "(Ljava/util/Date;)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setKeyValidityStart(java.util.Date startDate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the time instant before which the key is not yet valid.
  ///
  /// By default, the key is valid at any instant.
  ///@see \#setKeyValidityEnd(Date)
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setKeyValidityStart(jni.JniObject startDate) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setKeyValidityStart,
          jni.JniType.objectType,
          [startDate.reference]).object);

  static final _id_setKeyValidityEnd = jniAccessors.getMethodIDOf(
      _classRef,
      "setKeyValidityEnd",
      "(Ljava/util/Date;)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setKeyValidityEnd(java.util.Date endDate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the time instant after which the key is no longer valid.
  ///
  /// By default, the key is valid at any instant.
  ///@see \#setKeyValidityStart(Date)
  ///@see \#setKeyValidityForConsumptionEnd(Date)
  ///@see \#setKeyValidityForOriginationEnd(Date)
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setKeyValidityEnd(jni.JniObject endDate) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setKeyValidityEnd,
          jni.JniType.objectType,
          [endDate.reference]).object);

  static final _id_setKeyValidityForOriginationEnd = jniAccessors.getMethodIDOf(
      _classRef,
      "setKeyValidityForOriginationEnd",
      "(Ljava/util/Date;)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setKeyValidityForOriginationEnd(java.util.Date endDate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the time instant after which the key is no longer valid for encryption and signing.
  ///
  /// By default, the key is valid at any instant.
  ///@see \#setKeyValidityForConsumptionEnd(Date)
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setKeyValidityForOriginationEnd(
          jni.JniObject endDate) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setKeyValidityForOriginationEnd,
          jni.JniType.objectType,
          [endDate.reference]).object);

  static final _id_setKeyValidityForConsumptionEnd = jniAccessors.getMethodIDOf(
      _classRef,
      "setKeyValidityForConsumptionEnd",
      "(Ljava/util/Date;)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setKeyValidityForConsumptionEnd(java.util.Date endDate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the time instant after which the key is no longer valid for decryption and
  /// verification.
  ///
  /// By default, the key is valid at any instant.
  ///@see \#setKeyValidityForOriginationEnd(Date)
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setKeyValidityForConsumptionEnd(
          jni.JniObject endDate) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setKeyValidityForConsumptionEnd,
          jni.JniType.objectType,
          [endDate.reference]).object);

  static final _id_setEncryptionPaddings = jniAccessors.getMethodIDOf(
      _classRef,
      "setEncryptionPaddings",
      "([Ljava/lang/String;)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setEncryptionPaddings(java.lang.String[] paddings)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the set of padding schemes (e.g., {@code OAEPPadding}, {@code PKCS7Padding},
  /// {@code NoPadding}) with which the key can be used when encrypting/decrypting. Attempts to
  /// use the key with any other padding scheme will be rejected.
  ///
  /// This must be specified for keys which are used for encryption/decryption.
  ///
  /// For RSA private keys used by TLS/SSL servers to authenticate themselves to clients it
  /// is usually necessary to authorize the use of no/any padding
  /// (KeyProperties\#ENCRYPTION_PADDING_NONE) and/or PKCS\#1 encryption padding
  /// (KeyProperties\#ENCRYPTION_PADDING_RSA_PKCS1). This is because RSA decryption is
  /// required by some cipher suites, and some stacks request decryption using no padding
  /// whereas others request PKCS\#1 padding.
  ///
  /// See KeyProperties.{@code ENCRYPTION_PADDING} constants.
  ///@param paddings Value is android.security.keystore.KeyProperties\#ENCRYPTION_PADDING_NONE, android.security.keystore.KeyProperties\#ENCRYPTION_PADDING_PKCS7, android.security.keystore.KeyProperties\#ENCRYPTION_PADDING_RSA_PKCS1, or android.security.keystore.KeyProperties\#ENCRYPTION_PADDING_RSA_OAEP
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setEncryptionPaddings(jni.JniObject paddings) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setEncryptionPaddings,
          jni.JniType.objectType,
          [paddings.reference]).object);

  static final _id_setSignaturePaddings = jniAccessors.getMethodIDOf(
      _classRef,
      "setSignaturePaddings",
      "([Ljava/lang/String;)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setSignaturePaddings(java.lang.String[] paddings)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the set of padding schemes (e.g., {@code PSS}, {@code PKCS\#1}) with which the key
  /// can be used when signing/verifying. Attempts to use the key with any other padding scheme
  /// will be rejected.
  ///
  /// This must be specified for RSA keys which are used for signing/verification.
  ///
  /// See KeyProperties.{@code SIGNATURE_PADDING} constants.
  ///@param paddings Value is android.security.keystore.KeyProperties\#SIGNATURE_PADDING_RSA_PKCS1, or android.security.keystore.KeyProperties\#SIGNATURE_PADDING_RSA_PSS
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setSignaturePaddings(jni.JniObject paddings) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setSignaturePaddings,
          jni.JniType.objectType,
          [paddings.reference]).object);

  static final _id_setDigests = jniAccessors.getMethodIDOf(
      _classRef,
      "setDigests",
      "([Ljava/lang/String;)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setDigests(java.lang.String[] digests)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the set of digest algorithms (e.g., {@code SHA-256}, {@code SHA-384}) with which the
  /// key can be used. Attempts to use the key with any other digest algorithm will be
  /// rejected.
  ///
  /// This must be specified for signing/verification keys and RSA encryption/decryption
  /// keys used with RSA OAEP padding scheme because these operations involve a digest. For
  /// HMAC keys, the default is the digest specified in Key\#getAlgorithm() (e.g.,
  /// {@code SHA-256} for key algorithm {@code HmacSHA256}). HMAC keys cannot be authorized
  /// for more than one digest.
  ///
  /// For private keys used for TLS/SSL client or server authentication it is usually
  /// necessary to authorize the use of no digest (KeyProperties\#DIGEST_NONE). This is
  /// because TLS/SSL stacks typically generate the necessary digest(s) themselves and then use
  /// a private key to sign it.
  ///
  /// See KeyProperties.{@code DIGEST} constants.
  ///@param digests Value is android.security.keystore.KeyProperties\#DIGEST_NONE, android.security.keystore.KeyProperties\#DIGEST_MD5, android.security.keystore.KeyProperties\#DIGEST_SHA1, android.security.keystore.KeyProperties\#DIGEST_SHA224, android.security.keystore.KeyProperties\#DIGEST_SHA256, android.security.keystore.KeyProperties\#DIGEST_SHA384, or android.security.keystore.KeyProperties\#DIGEST_SHA512
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setDigests(jni.JniObject digests) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setDigests, jni.JniType.objectType, [digests.reference]).object);

  static final _id_setBlockModes = jniAccessors.getMethodIDOf(
      _classRef,
      "setBlockModes",
      "([Ljava/lang/String;)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setBlockModes(java.lang.String[] blockModes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the set of block modes (e.g., {@code GCM}, {@code CBC}) with which the key can be
  /// used when encrypting/decrypting. Attempts to use the key with any other block modes will
  /// be rejected.
  ///
  /// This must be specified for symmetric encryption/decryption keys.
  ///
  /// See KeyProperties.{@code BLOCK_MODE} constants.
  ///@param blockModes Value is android.security.keystore.KeyProperties\#BLOCK_MODE_ECB, android.security.keystore.KeyProperties\#BLOCK_MODE_CBC, android.security.keystore.KeyProperties\#BLOCK_MODE_CTR, or android.security.keystore.KeyProperties\#BLOCK_MODE_GCM
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setBlockModes(jni.JniObject blockModes) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setBlockModes,
          jni.JniType.objectType,
          [blockModes.reference]).object);

  static final _id_setRandomizedEncryptionRequired = jniAccessors.getMethodIDOf(
      _classRef,
      "setRandomizedEncryptionRequired",
      "(Z)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setRandomizedEncryptionRequired(boolean required)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets whether encryption using this key must be sufficiently randomized to produce
  /// different ciphertexts for the same plaintext every time. The formal cryptographic
  /// property being required is _indistinguishability under chosen-plaintext attack
  /// ({@code IND-CPA})_. This property is important because it mitigates several classes
  /// of weaknesses due to which ciphertext may leak information about plaintext. For example,
  /// if a given plaintext always produces the same ciphertext, an attacker may see the
  /// repeated ciphertexts and be able to deduce something about the plaintext.
  ///
  /// By default, {@code IND-CPA} is required.
  ///
  /// When {@code IND-CPA} is required:
  /// <ul>
  /// <li>transformation which do not offer {@code IND-CPA}, such as symmetric ciphers using
  /// {@code ECB} mode or RSA encryption without padding, are prohibited;</li>
  /// <li>in transformations which use an IV, such as symmetric ciphers in {@code GCM},
  /// {@code CBC}, and {@code CTR} block modes, caller-provided IVs are rejected when
  /// encrypting, to ensure that only random IVs are used.</li>
  ///
  /// Before disabling this requirement, consider the following approaches instead:
  /// <ul>
  /// <li>If you are generating a random IV for encryption and then initializing a {@code}
  /// Cipher using the IV, the solution is to let the {@code Cipher} generate a random IV
  /// instead. This will occur if the {@code Cipher} is initialized for encryption without an
  /// IV. The IV can then be queried via Cipher\#getIV().</li>
  /// <li>If you are generating a non-random IV (e.g., an IV derived from something not fully
  /// random, such as the name of the file being encrypted, or transaction ID, or password,
  /// or a device identifier), consider changing your design to use a random IV which will then
  /// be provided in addition to the ciphertext to the entities which need to decrypt the
  /// ciphertext.</li>
  /// <li>If you are using RSA encryption without padding, consider switching to padding
  /// schemes which offer {@code IND-CPA}, such as PKCS\#1 or OAEP.</li>
  /// </ul>
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setRandomizedEncryptionRequired(bool required0) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setRandomizedEncryptionRequired,
          jni.JniType.objectType,
          [required0]).object);

  static final _id_setUserAuthenticationRequired = jniAccessors.getMethodIDOf(
      _classRef,
      "setUserAuthenticationRequired",
      "(Z)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setUserAuthenticationRequired(boolean required)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets whether this key is authorized to be used only if the user has been authenticated.
  ///
  /// By default, the key is authorized to be used regardless of whether the user has been
  /// authenticated.
  ///
  /// When user authentication is required:
  /// <ul>
  /// <li>The key can only be import if secure lock screen is set up (see
  /// KeyguardManager\#isDeviceSecure()). Additionally, if the key requires that user
  /// authentication takes place for every use of the key (see
  /// \#setUserAuthenticationValidityDurationSeconds(int)), at least one fingerprint
  /// must be enrolled (see FingerprintManager\#hasEnrolledFingerprints()).</li>
  /// <li>The use of the key must be authorized by the user by authenticating to this Android
  /// device using a subset of their secure lock screen credentials such as
  /// password/PIN/pattern or fingerprint.
  /// <a href="{@docRoot}training/articles/keystore.html\#UserAuthentication">More
  /// information</a>.
  /// <li>The key will become _irreversibly invalidated_ once the secure lock screen is
  /// disabled (reconfigured to None, Swipe or other mode which does not authenticate the user)
  /// or when the secure lock screen is forcibly reset (e.g., by a Device Administrator).
  /// Additionally, if the key requires that user authentication takes place for every use of
  /// the key, it is also irreversibly invalidated once a new fingerprint is enrolled or once\
  /// no more fingerprints are enrolled, unless \#setInvalidatedByBiometricEnrollment(boolean) is used to allow validity after
  /// enrollment. Attempts to initialize cryptographic operations using such keys will throw
  /// KeyPermanentlyInvalidatedException.</li> </ul>
  ///
  /// This authorization applies only to secret key and private key operations. Public key
  /// operations are not restricted.
  ///@see \#setUserAuthenticationValidityDurationSeconds(int)
  ///@see KeyguardManager\#isDeviceSecure()
  ///@see FingerprintManager\#hasEnrolledFingerprints()
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setUserAuthenticationRequired(bool required0) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setUserAuthenticationRequired,
          jni.JniType.objectType,
          [required0]).object);

  static final _id_setUserConfirmationRequired = jniAccessors.getMethodIDOf(
      _classRef,
      "setUserConfirmationRequired",
      "(Z)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setUserConfirmationRequired(boolean required)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets whether this key is authorized to be used only for messages confirmed by the
  /// user.
  ///
  /// Confirmation is separate from user authentication (see
  /// \#setUserAuthenticationRequired(boolean)). Keys can be created that require
  /// confirmation but not user authentication, or user authentication but not confirmation,
  /// or both. Confirmation verifies that some user with physical possession of the device has
  /// approved a displayed message. User authentication verifies that the correct user is
  /// present and has authenticated.
  ///
  /// This authorization applies only to secret key and private key operations. Public key
  /// operations are not restricted.
  ///@see android.security.ConfirmationPrompter ConfirmationPrompter class for
  /// more details about user confirmations.
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setUserConfirmationRequired(bool required0) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setUserConfirmationRequired,
          jni.JniType.objectType,
          [required0]).object);

  static final _id_setUserAuthenticationValidityDurationSeconds =
      jniAccessors.getMethodIDOf(
          _classRef,
          "setUserAuthenticationValidityDurationSeconds",
          "(I)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setUserAuthenticationValidityDurationSeconds(int seconds)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the duration of time (seconds) for which this key is authorized to be used after the
  /// user is successfully authenticated. This has effect if the key requires user
  /// authentication for its use (see \#setUserAuthenticationRequired(boolean)).
  ///
  /// By default, if user authentication is required, it must take place for every use of
  /// the key.
  ///
  /// Cryptographic operations involving keys which require user authentication to take
  /// place for every operation can only use fingerprint authentication. This is achieved by
  /// initializing a cryptographic operation (Signature, Cipher, Mac)
  /// with the key, wrapping it into a FingerprintManager.CryptoObject, invoking
  /// {@code FingerprintManager.authenticate} with {@code CryptoObject}, and proceeding with
  /// the cryptographic operation only if the authentication flow succeeds.
  ///
  /// Cryptographic operations involving keys which are authorized to be used for a duration
  /// of time after a successful user authentication event can only use secure lock screen
  /// authentication. These cryptographic operations will throw
  /// UserNotAuthenticatedException during initialization if the user needs to be
  /// authenticated to proceed. This situation can be resolved by the user unlocking the secure
  /// lock screen of the Android or by going through the confirm credential flow initiated by
  /// KeyguardManager\#createConfirmDeviceCredentialIntent(CharSequence, CharSequence).
  /// Once resolved, initializing a new cryptographic operation using this key (or any other
  /// key which is authorized to be used for a fixed duration of time after user
  /// authentication) should succeed provided the user authentication flow completed
  /// successfully.
  ///@param seconds duration in seconds or {@code -1} if user authentication must take place
  ///        for every use of the key.
  ///
  /// Value is -1 or greater
  ///@see \#setUserAuthenticationRequired(boolean)
  ///@see FingerprintManager
  ///@see FingerprintManager.CryptoObject
  ///@see KeyguardManager
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setUserAuthenticationValidityDurationSeconds(
          int seconds) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setUserAuthenticationValidityDurationSeconds,
          jni.JniType.objectType,
          [seconds]).object);

  static final _id_setUserPresenceRequired = jniAccessors.getMethodIDOf(
      _classRef,
      "setUserPresenceRequired",
      "(Z)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setUserPresenceRequired(boolean required)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets whether a test of user presence is required to be performed between the
  /// {@code Signature.initSign()} and {@code Signature.sign()} method calls. It requires that
  /// the KeyStore implementation have a direct way to validate the user presence for example
  /// a KeyStore hardware backed strongbox can use a button press that is observable in
  /// hardware. A test for user presence is tangential to authentication. The test can be part
  /// of an authentication step as long as this step can be validated by the hardware
  /// protecting the key and cannot be spoofed. For example, a physical button press can be
  /// used as a test of user presence if the other pins connected to the button are not able
  /// to simulate a button press. There must be no way for the primary processor to fake a
  /// button press, or that button must not be used as a test of user presence.
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setUserPresenceRequired(bool required0) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setUserPresenceRequired,
          jni.JniType.objectType,
          [required0]).object);

  static final _id_setUserAuthenticationValidWhileOnBody =
      jniAccessors.getMethodIDOf(
          _classRef,
          "setUserAuthenticationValidWhileOnBody",
          "(Z)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setUserAuthenticationValidWhileOnBody(boolean remainsValid)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets whether the key will remain authorized only until the device is removed from the
  /// user's body up to the limit of the authentication validity period (see
  /// \#setUserAuthenticationValidityDurationSeconds and
  /// \#setUserAuthenticationRequired). Once the device has been removed from the
  /// user's body, the key will be considered unauthorized and the user will need to
  /// re-authenticate to use it. For keys without an authentication validity period this
  /// parameter has no effect.
  ///
  /// Similarly, on devices that do not have an on-body sensor, this parameter will have no
  /// effect; the device will always be considered to be "on-body" and the key will therefore
  /// remain authorized until the validity period ends.
  ///@param remainsValid if {@code true}, and if the device supports on-body detection, key
  /// will be invalidated when the device is removed from the user's body or when the
  /// authentication validity expires, whichever occurs first.
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setUserAuthenticationValidWhileOnBody(
          bool remainsValid) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setUserAuthenticationValidWhileOnBody,
          jni.JniType.objectType,
          [remainsValid]).object);

  static final _id_setInvalidatedByBiometricEnrollment =
      jniAccessors.getMethodIDOf(
          _classRef,
          "setInvalidatedByBiometricEnrollment",
          "(Z)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setInvalidatedByBiometricEnrollment(boolean invalidateKey)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets whether this key should be invalidated on fingerprint enrollment.  This
  /// applies only to keys which require user authentication (see \#setUserAuthenticationRequired(boolean)) and if no positive validity duration has been
  /// set (see \#setUserAuthenticationValidityDurationSeconds(int), meaning the key is
  /// valid for fingerprint authentication only.
  ///
  /// By default, {@code invalidateKey} is {@code true}, so keys that are valid for
  /// fingerprint authentication only are _irreversibly invalidated_ when a new
  /// fingerprint is enrolled, or when all existing fingerprints are deleted.  That may be
  /// changed by calling this method with {@code invalidateKey} set to {@code false}.
  ///
  /// Invalidating keys on enrollment of a new finger or unenrollment of all fingers
  /// improves security by ensuring that an unauthorized person who obtains the password can't
  /// gain the use of fingerprint-authenticated keys by enrolling their own finger.  However,
  /// invalidating keys makes key-dependent operations impossible, requiring some fallback
  /// procedure to authenticate the user and set up a new key.
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setInvalidatedByBiometricEnrollment(
          bool invalidateKey) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setInvalidatedByBiometricEnrollment,
          jni.JniType.objectType,
          [invalidateKey]).object);

  static final _id_setUnlockedDeviceRequired = jniAccessors.getMethodIDOf(
      _classRef,
      "setUnlockedDeviceRequired",
      "(Z)Landroid/security/keystore/KeyProtection\$Builder;");

  /// from: public android.security.keystore.KeyProtection.Builder setUnlockedDeviceRequired(boolean unlockedDeviceRequired)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets whether the keystore requires the screen to be unlocked before allowing decryption
  /// using this key. If this is set to {@code true}, any attempt to decrypt or sign using this
  /// key while the screen is locked will fail. A locked device requires a PIN, password,
  /// fingerprint, or other trusted factor to access. While the screen is locked, the key can
  /// still be used for encryption or signature verification.
  ///@return This value will never be {@code null}.
  KeyProtection_Builder setUnlockedDeviceRequired(
          bool unlockedDeviceRequired) =>
      KeyProtection_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setUnlockedDeviceRequired,
          jni.JniType.objectType,
          [unlockedDeviceRequired]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/security/keystore/KeyProtection;");

  /// from: public android.security.keystore.KeyProtection build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds an instance of KeyProtection.
  ///@throws IllegalArgumentException if a required field is missing
  ///@return This value will never be {@code null}.
  KeyProtection build() =>
      KeyProtection.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
