// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.security.AttestedKeyPair
///
/// The {@code AttestedKeyPair} class contains a {@code KeyPair} instance of
/// keys generated by Keystore and owned by KeyChain, as well as an attestation
/// record for the key.
///
/// Such keys can be obtained by calling
/// android.app.admin.DevicePolicyManager\#generateKeyPair.
class AttestedKeyPair extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/security/AttestedKeyPair");
  AttestedKeyPair.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/security/KeyPair;[Ljava/security/cert/Certificate;)V");

  /// from: void <init>(java.security.KeyPair keyPair, java.security.cert.Certificate[] attestationRecord)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide Only created by the platform, no need to expose as public API.
  AttestedKeyPair(jni.JniObject keyPair, jni.JniObject attestationRecord)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [keyPair.reference, attestationRecord.reference]).object);

  static final _id_getKeyPair = jniAccessors.getMethodIDOf(
      _classRef, "getKeyPair", "()Ljava/security/KeyPair;");

  /// from: public java.security.KeyPair getKeyPair()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the generated key pair associated with the attestation record
  /// in this instance.
  jni.JniObject getKeyPair() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKeyPair, jni.JniType.objectType, []).object);

  static final _id_getAttestationRecord = jniAccessors.getMethodIDOf(
      _classRef, "getAttestationRecord", "()Ljava/util/List;");

  /// from: public java.util.List<java.security.cert.Certificate> getAttestationRecord()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the attestation record for the key pair in this instance.
  ///
  /// The attestation record is a chain of certificates. The leaf certificate links to the public
  /// key of this key pair and other properties of the key or the device. If the key is in secure
  /// hardware, and if the secure hardware supports attestation, the leaf certificate will be
  /// signed by a chain of certificates rooted at a trustworthy CA key. Otherwise the chain will be
  /// rooted at an untrusted certificate.
  ///
  /// The attestation record could be for properties of the key, or include device identifiers.
  ///
  /// See android.security.keystore.KeyGenParameterSpec.Builder\#setAttestationChallenge
  /// and  <a href="https://developer.android.com/training/articles/security-key-attestation.html">
  /// Key Attestation</a> for the format of the attestation record inside the certificate.
  jni.JniObject getAttestationRecord() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAttestationRecord, jni.JniType.objectType, []).object);
}
