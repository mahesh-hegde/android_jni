// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.security.KeyStoreParameter
///
/// This provides the optional parameters that can be specified for
/// {@code KeyStore} entries that work with
/// <a href="{@docRoot}training/articles/keystore.html">Android KeyStore
/// facility</a>. The Android KeyStore facility is accessed through a
/// java.security.KeyStore API using the {@code AndroidKeyStore}
/// provider. The {@code context} passed in may be used to pop up some UI to ask
/// the user to unlock or initialize the Android KeyStore facility.
///
/// Any entries placed in the {@code KeyStore} may be retrieved later. Note that
/// there is only one logical instance of the {@code KeyStore} per application
/// UID so apps using the {@code sharedUid} facility will also share a
/// {@code KeyStore}.
///
/// Keys may be generated using the KeyPairGenerator facility with a
/// KeyPairGeneratorSpec to specify the entry's {@code alias}. A
/// self-signed X.509 certificate will be attached to generated entries, but that
/// may be replaced at a later time by a certificate signed by a real Certificate
/// Authority.
///@deprecated Use KeyProtection instead.
class KeyStoreParameter extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/security/KeyStoreParameter");
  KeyStoreParameter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_isEncryptionRequired =
      jniAccessors.getMethodIDOf(_classRef, "isEncryptionRequired", "()Z");

  /// from: public boolean isEncryptionRequired()
  ///
  /// Returns {@code true} if the java.security.KeyStore entry must be encrypted at rest.
  /// This will protect the entry with the secure lock screen credential (e.g., password, PIN, or
  /// pattern).
  ///
  /// Note that encrypting the key at rest requires that the secure lock screen (e.g., password,
  /// PIN, pattern) is set up, otherwise key generation will fail. Moreover, this key will be
  /// deleted when the secure lock screen is disabled or reset (e.g., by the user or a Device
  /// Administrator). Finally, this key cannot be used until the user unlocks the secure lock
  /// screen after boot.
  ///@see KeyguardManager\#isDeviceSecure()
  bool isEncryptionRequired() => jniAccessors.callMethodWithArgs(
      reference, _id_isEncryptionRequired, jni.JniType.booleanType, []).boolean;
}

/// from: android.security.KeyStoreParameter$Builder
///
/// Builder class for KeyStoreParameter objects.
///
/// This will build protection parameters for use with the
/// <a href="{@docRoot}training/articles/keystore.html">Android KeyStore
/// facility</a>.
///
/// This can be used to require that KeyStore entries be stored encrypted.
///
/// Example:
///
/// <pre class="prettyprint">
/// KeyStoreParameter params = new KeyStoreParameter.Builder(mContext)
///         .setEncryptionRequired()
///         .build();
/// </pre>
///@deprecated Use KeyProtection.Builder instead.
class KeyStoreParameter_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/security/KeyStoreParameter\$Builder");
  KeyStoreParameter_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new instance of the {@code Builder} with the given
  /// {@code context}. The {@code context} passed in may be used to pop up
  /// some UI to ask the user to unlock or initialize the Android KeyStore
  /// facility.
  ///@param context This value must never be {@code null}.
  KeyStoreParameter_Builder(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_setEncryptionRequired = jniAccessors.getMethodIDOf(
      _classRef,
      "setEncryptionRequired",
      "(Z)Landroid/security/KeyStoreParameter\$Builder;");

  /// from: public android.security.KeyStoreParameter.Builder setEncryptionRequired(boolean required)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets whether this java.security.KeyStore entry must be encrypted at rest.
  /// Encryption at rest will protect the entry with the secure lock screen credential (e.g.,
  /// password, PIN, or pattern).
  ///
  /// Note that enabling this feature requires that the secure lock screen (e.g., password,
  /// PIN, pattern) is set up, otherwise setting the {@code KeyStore} entry will fail.
  /// Moreover, this entry will be deleted when the secure lock screen is disabled or reset
  /// (e.g., by the user or a Device Administrator). Finally, this entry cannot be used until
  /// the user unlocks the secure lock screen after boot.
  ///@see KeyguardManager\#isDeviceSecure()
  ///@return This value will never be {@code null}.
  KeyStoreParameter_Builder setEncryptionRequired(bool required0) =>
      KeyStoreParameter_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setEncryptionRequired,
          jni.JniType.objectType,
          [required0]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/security/KeyStoreParameter;");

  /// from: public android.security.KeyStoreParameter build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds the instance of the {@code KeyStoreParameter}.
  ///@throws IllegalArgumentException if a required field is missing
  ///@return built instance of {@code KeyStoreParameter}
  ///
  /// This value will never be {@code null}.
  KeyStoreParameter build() =>
      KeyStoreParameter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
