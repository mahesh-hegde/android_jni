// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.security.NetworkSecurityPolicy
///
/// Network security policy.
///
/// Network stacks/components should honor this policy to make it possible to centrally control
/// the relevant aspects of network security behavior.
///
/// The policy currently consists of a single flag: whether cleartext network traffic is
/// permitted. See \#isCleartextTrafficPermitted().
class NetworkSecurityPolicy extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/security/NetworkSecurityPolicy");
  NetworkSecurityPolicy.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getInstance", "()Landroid/security/NetworkSecurityPolicy;");

  /// from: static public android.security.NetworkSecurityPolicy getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the policy for this process.
  ///
  /// It's fine to cache this reference. Any changes to the policy will be immediately visible
  /// through the reference.
  static NetworkSecurityPolicy getInstance() =>
      NetworkSecurityPolicy.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getInstance, jni.JniType.objectType, []).object);

  static final _id_isCleartextTrafficPermitted = jniAccessors.getMethodIDOf(
      _classRef, "isCleartextTrafficPermitted", "()Z");

  /// from: public boolean isCleartextTrafficPermitted()
  ///
  /// Returns whether cleartext network traffic (e.g.&nbsp;HTTP, FTP, WebSockets, XMPP, IMAP, SMTP --
  /// without TLS or STARTTLS) is permitted for all network communication from this process.
  ///
  /// When cleartext network traffic is not permitted, the platform's components (e.g. HTTP and
  /// FTP stacks, android.app.DownloadManager, android.media.MediaPlayer) will
  /// refuse this process's requests to use cleartext traffic. Third-party libraries are strongly
  /// encouraged to honor this setting as well.
  ///
  /// This flag is honored on a best effort basis because it's impossible to prevent all
  /// cleartext traffic from Android applications given the level of access provided to them. For
  /// example, there's no expectation that the java.net.Socket API will honor this flag
  /// because it cannot determine whether its traffic is in cleartext. However, most network
  /// traffic from applications is handled by higher-level network stacks/components which can
  /// honor this aspect of the policy.
  ///
  /// NOTE: android.webkit.WebView honors this flag for applications targeting API level
  /// 26 and up.
  bool isCleartextTrafficPermitted() => jniAccessors.callMethodWithArgs(
      reference,
      _id_isCleartextTrafficPermitted,
      jni.JniType.booleanType, []).boolean;

  static final _id_isCleartextTrafficPermitted1 = jniAccessors.getMethodIDOf(
      _classRef, "isCleartextTrafficPermitted", "(Ljava/lang/String;)Z");

  /// from: public boolean isCleartextTrafficPermitted(java.lang.String hostname)
  ///
  /// Returns whether cleartext network traffic (e.g.&nbsp;HTTP, FTP, XMPP, IMAP, SMTP -- without
  /// TLS or STARTTLS) is permitted for communicating with {@code hostname} for this process.
  ///@see \#isCleartextTrafficPermitted()
  bool isCleartextTrafficPermitted1(jni.JniString hostname) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_isCleartextTrafficPermitted1,
          jni.JniType.booleanType,
          [hostname.reference]).boolean;
}
