// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../print/PrintJobId.dart" as printjobid_;

import "../print/PrintJobInfo.dart" as printjobinfo_;

import "PrintDocument.dart" as printdocument_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.printservice.PrintJob
///
/// This class represents a print job from the perspective of a print
/// service. It provides APIs for observing the print job state and
/// performing operations on the print job.
///
/// <strong>Note: </strong> All methods of this class must be invoked on
/// the main application thread.
///
///
class PrintJob extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/printservice/PrintJob");
  PrintJob.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PrintJob()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getId = jniAccessors.getMethodIDOf(
      _classRef, "getId", "()Landroid/print/PrintJobId;");

  /// from: public android.print.PrintJobId getId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the unique print job id.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return The id.
  printjobid_.PrintJobId getId() =>
      printjobid_.PrintJobId.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getId, jni.JniType.objectType, []).object);

  static final _id_getInfo = jniAccessors.getMethodIDOf(
      _classRef, "getInfo", "()Landroid/print/PrintJobInfo;");

  /// from: public android.print.PrintJobInfo getInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the PrintJobInfo that describes this job.
  ///
  /// <strong>Node:</strong>The returned info object is a snapshot of the
  /// current print job state. Every call to this method returns a fresh
  /// info object that reflects the current print job state.
  ///
  ///
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return The print job info.
  ///
  /// This value will never be {@code null}.
  printjobinfo_.PrintJobInfo getInfo() =>
      printjobinfo_.PrintJobInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getInfo, jni.JniType.objectType, []).object);

  static final _id_getDocument = jniAccessors.getMethodIDOf(
      _classRef, "getDocument", "()Landroid/printservice/PrintDocument;");

  /// from: public android.printservice.PrintDocument getDocument()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the printed document.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return The document.
  ///
  /// This value will never be {@code null}.
  printdocument_.PrintDocument getDocument() =>
      printdocument_.PrintDocument.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDocument, jni.JniType.objectType, []).object);

  static final _id_isQueued =
      jniAccessors.getMethodIDOf(_classRef, "isQueued", "()Z");

  /// from: public boolean isQueued()
  ///
  /// Gets whether this print job is queued. Such a print job is
  /// ready to be printed and can be started or cancelled.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return Whether the print job is queued.
  ///@see \#start()
  ///@see \#cancel()
  bool isQueued() => jniAccessors.callMethodWithArgs(
      reference, _id_isQueued, jni.JniType.booleanType, []).boolean;

  static final _id_isStarted =
      jniAccessors.getMethodIDOf(_classRef, "isStarted", "()Z");

  /// from: public boolean isStarted()
  ///
  /// Gets whether this print job is started. Such a print job is
  /// being printed and can be completed or canceled or failed.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return Whether the print job is started.
  ///@see \#complete()
  ///@see \#cancel()
  ///@see \#fail(String)
  bool isStarted() => jniAccessors.callMethodWithArgs(
      reference, _id_isStarted, jni.JniType.booleanType, []).boolean;

  static final _id_isBlocked =
      jniAccessors.getMethodIDOf(_classRef, "isBlocked", "()Z");

  /// from: public boolean isBlocked()
  ///
  /// Gets whether this print job is blocked. Such a print job is halted
  /// due to an abnormal condition and can be started or canceled or failed.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return Whether the print job is blocked.
  ///@see \#start()
  ///@see \#cancel()
  ///@see \#fail(String)
  bool isBlocked() => jniAccessors.callMethodWithArgs(
      reference, _id_isBlocked, jni.JniType.booleanType, []).boolean;

  static final _id_isCompleted =
      jniAccessors.getMethodIDOf(_classRef, "isCompleted", "()Z");

  /// from: public boolean isCompleted()
  ///
  /// Gets whether this print job is completed. Such a print job
  /// is successfully printed. This is a final state.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return Whether the print job is completed.
  ///@see \#complete()
  bool isCompleted() => jniAccessors.callMethodWithArgs(
      reference, _id_isCompleted, jni.JniType.booleanType, []).boolean;

  static final _id_isFailed =
      jniAccessors.getMethodIDOf(_classRef, "isFailed", "()Z");

  /// from: public boolean isFailed()
  ///
  /// Gets whether this print job is failed. Such a print job is
  /// not successfully printed due to an error. This is a final state.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return Whether the print job is failed.
  ///@see \#fail(String)
  bool isFailed() => jniAccessors.callMethodWithArgs(
      reference, _id_isFailed, jni.JniType.booleanType, []).boolean;

  static final _id_isCancelled =
      jniAccessors.getMethodIDOf(_classRef, "isCancelled", "()Z");

  /// from: public boolean isCancelled()
  ///
  /// Gets whether this print job is cancelled. Such a print job was
  /// cancelled as a result of a user request. This is a final state.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return Whether the print job is cancelled.
  ///@see \#cancel()
  bool isCancelled() => jniAccessors.callMethodWithArgs(
      reference, _id_isCancelled, jni.JniType.booleanType, []).boolean;

  static final _id_start =
      jniAccessors.getMethodIDOf(_classRef, "start", "()Z");

  /// from: public boolean start()
  ///
  /// Starts the print job. You should call this method if \#isQueued() or \#isBlocked() returns true and you started
  /// resumed printing.
  ///
  /// This resets the print status to null. Set the new status by using \#setStatus.
  ///
  ///
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return Whether the job was started.
  ///@see \#isQueued()
  ///@see \#isBlocked()
  bool start() => jniAccessors.callMethodWithArgs(
      reference, _id_start, jni.JniType.booleanType, []).boolean;

  static final _id_block =
      jniAccessors.getMethodIDOf(_classRef, "block", "(Ljava/lang/String;)Z");

  /// from: public boolean block(java.lang.String reason)
  ///
  /// Blocks the print job. You should call this method if \#isStarted() returns true and
  /// you need to block the print job. For example, the user has to add some paper to continue
  /// printing. To resume the print job call \#start(). To change the reason call
  /// \#setStatus(CharSequence).
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@param reason The human readable, short, and translated reason why the print job is blocked.
  /// This value may be {@code null}.
  ///@return Whether the job was blocked.
  ///@see \#isStarted()
  ///@see \#isBlocked()
  bool block(jni.JniString reason) => jniAccessors.callMethodWithArgs(reference,
      _id_block, jni.JniType.booleanType, [reason.reference]).boolean;

  static final _id_complete =
      jniAccessors.getMethodIDOf(_classRef, "complete", "()Z");

  /// from: public boolean complete()
  ///
  /// Completes the print job. You should call this method if \#isStarted() returns true and you are done printing.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return Whether the job as completed.
  ///@see \#isStarted()
  bool complete() => jniAccessors.callMethodWithArgs(
      reference, _id_complete, jni.JniType.booleanType, []).boolean;

  static final _id_fail =
      jniAccessors.getMethodIDOf(_classRef, "fail", "(Ljava/lang/String;)Z");

  /// from: public boolean fail(java.lang.String error)
  ///
  /// Fails the print job. You should call this method if \#isQueued() or \#isStarted() or \#isBlocked()
  /// returns true you failed while printing.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@param error The human readable, short, and translated reason
  /// for the failure.
  /// This value may be {@code null}.
  ///@return Whether the job was failed.
  ///@see \#isQueued()
  ///@see \#isStarted()
  ///@see \#isBlocked()
  bool fail(jni.JniString error) => jniAccessors.callMethodWithArgs(
      reference, _id_fail, jni.JniType.booleanType, [error.reference]).boolean;

  static final _id_cancel =
      jniAccessors.getMethodIDOf(_classRef, "cancel", "()Z");

  /// from: public boolean cancel()
  ///
  /// Cancels the print job. You should call this method if \#isQueued() or \#isStarted() or \#isBlocked() returns
  /// true and you canceled the print job as a response to a call to
  /// PrintService\#onRequestCancelPrintJob(PrintJob).
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return Whether the job is canceled.
  ///@see \#isStarted()
  ///@see \#isQueued()
  ///@see \#isBlocked()
  bool cancel() => jniAccessors.callMethodWithArgs(
      reference, _id_cancel, jni.JniType.booleanType, []).boolean;

  static final _id_setProgress =
      jniAccessors.getMethodIDOf(_classRef, "setProgress", "(F)V");

  /// from: public void setProgress(float progress)
  ///
  /// Sets the progress of this print job as a fraction of 1.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@param progress The new progress
  ///
  /// Value is between 0.0 and 1.0 inclusive
  void setProgress(double progress) => jniAccessors.callMethodWithArgs(
      reference, _id_setProgress, jni.JniType.voidType, [progress]).check();

  static final _id_setStatus = jniAccessors.getMethodIDOf(
      _classRef, "setStatus", "(Ljava/lang/CharSequence;)V");

  /// from: public void setStatus(java.lang.CharSequence status)
  ///
  /// Sets the status of this print job. This should be a human readable, short, and translated
  /// description of the current state of the print job.
  /// <p/>
  /// This overrides any previously set status set via \#setStatus(CharSequence),
  /// \#setStatus(int), \#block(String), or \#fail(String),
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@param status The new status. If null the status will be empty.
  ///
  /// This value may be {@code null}.
  void setStatus(jni.JniObject status) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setStatus,
      jni.JniType.voidType,
      [status.reference]).check();

  static final _id_setStatus1 =
      jniAccessors.getMethodIDOf(_classRef, "setStatus", "(I)V");

  /// from: public void setStatus(int statusResId)
  ///
  /// Sets the status of this print job as a string resource.
  /// <p/>
  /// This overrides any previously set status set via \#setStatus(CharSequence),
  /// \#setStatus(int), \#block(String), or \#fail(String),
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@param statusResId The new status as a String resource. If 0 the status will be empty.
  void setStatus1(int statusResId) => jniAccessors.callMethodWithArgs(
      reference, _id_setStatus1, jni.JniType.voidType, [statusResId]).check();

  static final _id_setTag =
      jniAccessors.getMethodIDOf(_classRef, "setTag", "(Ljava/lang/String;)Z");

  /// from: public boolean setTag(java.lang.String tag)
  ///
  /// Sets a tag that is valid in the context of a PrintService
  /// and is not interpreted by the system. For example, a print service
  /// may set as a tag the key of the print job returned by a remote
  /// print server, if the printing is off handed to a cloud based service.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@param tag The tag.
  /// This value must never be {@code null}.
  ///@return True if the tag was set, false otherwise.
  bool setTag(jni.JniString tag) => jniAccessors.callMethodWithArgs(
      reference, _id_setTag, jni.JniType.booleanType, [tag.reference]).boolean;

  static final _id_getTag =
      jniAccessors.getMethodIDOf(_classRef, "getTag", "()Ljava/lang/String;");

  /// from: public java.lang.String getTag()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the print job tag.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@return The tag or null.
  ///@see \#setTag(String)
  jni.JniString getTag() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTag, jni.JniType.objectType, []).object);

  static final _id_getAdvancedStringOption = jniAccessors.getMethodIDOf(
      _classRef,
      "getAdvancedStringOption",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getAdvancedStringOption(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the value of an advanced (printer specific) print option.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@param key The option key.
  ///@return The option value.
  jni.JniString getAdvancedStringOption(jni.JniString key) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getAdvancedStringOption,
          jni.JniType.objectType,
          [key.reference]).object);

  static final _id_hasAdvancedOption = jniAccessors.getMethodIDOf(
      _classRef, "hasAdvancedOption", "(Ljava/lang/String;)Z");

  /// from: public boolean hasAdvancedOption(java.lang.String key)
  ///
  /// Gets whether this job has a given advanced (printer specific) print
  /// option.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@param key The option key.
  ///@return Whether the option is present.
  bool hasAdvancedOption(jni.JniString key) => jniAccessors.callMethodWithArgs(
      reference,
      _id_hasAdvancedOption,
      jni.JniType.booleanType,
      [key.reference]).boolean;

  static final _id_getAdvancedIntOption = jniAccessors.getMethodIDOf(
      _classRef, "getAdvancedIntOption", "(Ljava/lang/String;)I");

  /// from: public int getAdvancedIntOption(java.lang.String key)
  ///
  /// Gets the value of an advanced (printer specific) print option.
  ///
  /// This method must be called from the
  ///  *            {@linkplain Looper\#getMainLooper() main thread} of your app.
  ///@param key The option key.
  ///@return The option value.
  int getAdvancedIntOption(jni.JniString key) =>
      jniAccessors.callMethodWithArgs(reference, _id_getAdvancedIntOption,
          jni.JniType.intType, [key.reference]).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}
