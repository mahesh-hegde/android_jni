// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "WebResourceResponse.dart" as webresourceresponse_;

import "WebResourceRequest.dart" as webresourcerequest_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.ServiceWorkerClient
///
/// Base class for clients to capture Service Worker related callbacks,
/// see ServiceWorkerController for usage example.
class ServiceWorkerClient extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/ServiceWorkerClient");
  ServiceWorkerClient.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ServiceWorkerClient()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_shouldInterceptRequest = jniAccessors.getMethodIDOf(
      _classRef,
      "shouldInterceptRequest",
      "(Landroid/webkit/WebResourceRequest;)Landroid/webkit/WebResourceResponse;");

  /// from: public android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebResourceRequest request)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Notify the host application of a resource request and allow the
  /// application to return the data. If the return value is {@code null}, the
  /// Service Worker will continue to load the resource as usual.
  /// Otherwise, the return response and data will be used.
  ///
  /// <p class="note">__Note:__ This method is called on a thread other than the UI thread so
  /// clients should exercise caution when accessing private data or the view system.
  ///@param request Object containing the details of the request.
  ///@return A android.webkit.WebResourceResponse containing the
  ///         response information or {@code null} if the WebView should load the
  ///         resource itself.
  ///@see WebViewClient\#shouldInterceptRequest(WebView, WebResourceRequest)
  webresourceresponse_.WebResourceResponse shouldInterceptRequest(
          webresourcerequest_.WebResourceRequest request) =>
      webresourceresponse_.WebResourceResponse.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_shouldInterceptRequest,
              jni.JniType.objectType, [request.reference]).object);
}
