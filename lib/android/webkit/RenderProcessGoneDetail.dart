// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.RenderProcessGoneDetail
///
/// This class provides more specific information about why the render process
/// exited. The application may use this to decide how to handle the situation.
class RenderProcessGoneDetail extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/RenderProcessGoneDetail");
  RenderProcessGoneDetail.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RenderProcessGoneDetail()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_didCrash =
      jniAccessors.getMethodIDOf(_classRef, "didCrash", "()Z");

  /// from: public abstract boolean didCrash()
  ///
  /// Indicates whether the render process was observed to crash, or whether
  /// it was killed by the system.
  ///
  /// If the render process was killed, this is most likely caused by the
  /// system being low on memory.
  ///@return {@code true} if render process crashed, otherwise it was killed by
  ///         system.
  bool didCrash() => jniAccessors.callMethodWithArgs(
      reference, _id_didCrash, jni.JniType.booleanType, []).boolean;

  static final _id_rendererPriorityAtExit =
      jniAccessors.getMethodIDOf(_classRef, "rendererPriorityAtExit", "()I");

  /// from: public abstract int rendererPriorityAtExit()
  ///
  /// Returns the renderer priority that was set at the time that the
  /// renderer exited.  This may be greater than the priority that
  /// any individual WebView requested using
  /// WebView\#setRendererPriorityPolicy.
  ///@return the priority of the renderer at exit.
  ///
  /// Value is android.webkit.WebView\#RENDERER_PRIORITY_WAIVED, android.webkit.WebView\#RENDERER_PRIORITY_BOUND, or android.webkit.WebView\#RENDERER_PRIORITY_IMPORTANT
  int rendererPriorityAtExit() => jniAccessors.callMethodWithArgs(
      reference, _id_rendererPriorityAtExit, jni.JniType.intType, []).integer;
}
