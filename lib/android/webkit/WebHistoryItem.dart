// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../graphics/Bitmap.dart" as bitmap_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.WebHistoryItem
///
/// A convenience class for accessing fields in an entry in the back/forward list
/// of a WebView. Each WebHistoryItem is a snapshot of the requested history
/// item. Each history item may be updated during the load of a page.
///@see WebBackForwardList
class WebHistoryItem extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/WebHistoryItem");
  WebHistoryItem.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  WebHistoryItem()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getUrl =
      jniAccessors.getMethodIDOf(_classRef, "getUrl", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getUrl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the url of this history item. The url is the base url of this
  /// history item. See getTargetUrl() for the url that is the actual target of
  /// this history item.
  ///@return The base url of this history item.
  /// Note: The VM ensures 32-bit atomic read/write operations so we don't have
  /// to synchronize this method.
  jni.JniString getUrl() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUrl, jni.JniType.objectType, []).object);

  static final _id_getOriginalUrl = jniAccessors.getMethodIDOf(
      _classRef, "getOriginalUrl", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getOriginalUrl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the original url of this history item. This was the requested
  /// url, the final url may be different as there might have been
  /// redirects while loading the site.
  ///@return The original url of this history item.
  jni.JniString getOriginalUrl() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getOriginalUrl, jni.JniType.objectType, []).object);

  static final _id_getTitle =
      jniAccessors.getMethodIDOf(_classRef, "getTitle", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getTitle()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the document title of this history item.
  ///@return The document title of this history item.
  /// Note: The VM ensures 32-bit atomic read/write operations so we don't have
  /// to synchronize this method.
  jni.JniString getTitle() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTitle, jni.JniType.objectType, []).object);

  static final _id_getFavicon = jniAccessors.getMethodIDOf(
      _classRef, "getFavicon", "()Landroid/graphics/Bitmap;");

  /// from: public abstract android.graphics.Bitmap getFavicon()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the favicon of this history item or {@code null} if no favicon was found.
  ///@return A Bitmap containing the favicon for this history item or {@code null}.
  /// Note: The VM ensures 32-bit atomic read/write operations so we don't have
  /// to synchronize this method.
  bitmap_.Bitmap getFavicon() =>
      bitmap_.Bitmap.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFavicon, jni.JniType.objectType, []).object);

  static final _id_clone = jniAccessors.getMethodIDOf(
      _classRef, "clone", "()Landroid/webkit/WebHistoryItem;");

  /// from: protected abstract android.webkit.WebHistoryItem clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Clone the history item for use by clients of WebView.
  WebHistoryItem clone() =>
      WebHistoryItem.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);
}
