// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../net/Uri.dart" as uri_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.WebResourceRequest
///
/// Encompasses parameters to the WebViewClient\#shouldInterceptRequest method.
class WebResourceRequest extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/WebResourceRequest");
  WebResourceRequest.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getUrl =
      jniAccessors.getMethodIDOf(_classRef, "getUrl", "()Landroid/net/Uri;");

  /// from: public abstract android.net.Uri getUrl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the URL for which the resource request was made.
  ///@return the URL for which the resource request was made.
  uri_.Uri getUrl() => uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getUrl, jni.JniType.objectType, []).object);

  static final _id_isForMainFrame =
      jniAccessors.getMethodIDOf(_classRef, "isForMainFrame", "()Z");

  /// from: public abstract boolean isForMainFrame()
  ///
  /// Gets whether the request was made for the main frame.
  ///@return whether the request was made for the main frame. Will be {@code false} for iframes,
  ///         for example.
  bool isForMainFrame() => jniAccessors.callMethodWithArgs(
      reference, _id_isForMainFrame, jni.JniType.booleanType, []).boolean;

  static final _id_isRedirect =
      jniAccessors.getMethodIDOf(_classRef, "isRedirect", "()Z");

  /// from: public abstract boolean isRedirect()
  ///
  /// Gets whether the request was a result of a server-side redirect.
  ///@return whether the request was a result of a server-side redirect.
  bool isRedirect() => jniAccessors.callMethodWithArgs(
      reference, _id_isRedirect, jni.JniType.booleanType, []).boolean;

  static final _id_hasGesture =
      jniAccessors.getMethodIDOf(_classRef, "hasGesture", "()Z");

  /// from: public abstract boolean hasGesture()
  ///
  /// Gets whether a gesture (such as a click) was associated with the request.
  /// For security reasons in certain situations this method may return {@code false} even though
  /// the sequence of events which caused the request to be created was initiated by a user
  /// gesture.
  ///@return whether a gesture was associated with the request.
  bool hasGesture() => jniAccessors.callMethodWithArgs(
      reference, _id_hasGesture, jni.JniType.booleanType, []).boolean;

  static final _id_getMethod = jniAccessors.getMethodIDOf(
      _classRef, "getMethod", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getMethod()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the method associated with the request, for example "GET".
  ///@return the method associated with the request.
  jni.JniString getMethod() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMethod, jni.JniType.objectType, []).object);

  static final _id_getRequestHeaders = jniAccessors.getMethodIDOf(
      _classRef, "getRequestHeaders", "()Ljava/util/Map;");

  /// from: public abstract java.util.Map<java.lang.String,java.lang.String> getRequestHeaders()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the headers associated with the request. These are represented as a mapping of header
  /// name to header value.
  ///@return the headers associated with the request.
  jni.JniObject getRequestHeaders() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getRequestHeaders, jni.JniType.objectType, []).object);
}
