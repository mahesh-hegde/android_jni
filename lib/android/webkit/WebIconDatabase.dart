// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../graphics/Bitmap.dart" as bitmap_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.WebIconDatabase
///
/// Functions for manipulating the icon database used by WebView.
/// These functions require that a WebView be constructed before being invoked
/// and WebView.getIconDatabase() will return a WebIconDatabase object. This
/// WebIconDatabase object is a single instance and all methods operate on that
/// single object.
/// The main use-case for this class is calling \#open
/// to enable favicon functionality on all WebView instances in this process.
///@deprecated This class is only required when running on devices
///             up to android.os.Build.VERSION_CODES\#JELLY_BEAN_MR2
class WebIconDatabase extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/WebIconDatabase");
  WebIconDatabase.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  WebIconDatabase()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_open =
      jniAccessors.getMethodIDOf(_classRef, "open", "(Ljava/lang/String;)V");

  /// from: public abstract void open(java.lang.String path)
  ///
  /// Open a the icon database and store the icons in the given path.
  ///@param path The directory path where the icon database will be stored.
  void open(jni.JniString path) => jniAccessors.callMethodWithArgs(
      reference, _id_open, jni.JniType.voidType, [path.reference]).check();

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public abstract void close()
  ///
  /// Close the shared instance of the icon database.
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_removeAllIcons =
      jniAccessors.getMethodIDOf(_classRef, "removeAllIcons", "()V");

  /// from: public abstract void removeAllIcons()
  ///
  /// Removes all the icons in the database.
  void removeAllIcons() => jniAccessors.callMethodWithArgs(
      reference, _id_removeAllIcons, jni.JniType.voidType, []).check();

  static final _id_requestIconForPageUrl = jniAccessors.getMethodIDOf(
      _classRef,
      "requestIconForPageUrl",
      "(Ljava/lang/String;Landroid/webkit/WebIconDatabase\$IconListener;)V");

  /// from: public abstract void requestIconForPageUrl(java.lang.String url, android.webkit.WebIconDatabase.IconListener listener)
  ///
  /// Request the Bitmap representing the icon for the given page
  /// url. If the icon exists, the listener will be called with the result.
  ///@param url The page's url.
  ///@param listener An implementation on IconListener to receive the result.
  void requestIconForPageUrl(
          jni.JniString url, WebIconDatabase_IconListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_requestIconForPageUrl,
          jni.JniType.voidType, [url.reference, listener.reference]).check();

  static final _id_retainIconForPageUrl = jniAccessors.getMethodIDOf(
      _classRef, "retainIconForPageUrl", "(Ljava/lang/String;)V");

  /// from: public abstract void retainIconForPageUrl(java.lang.String url)
  ///
  /// Retain the icon for the given page url.
  ///@param url The page's url.
  void retainIconForPageUrl(jni.JniString url) =>
      jniAccessors.callMethodWithArgs(reference, _id_retainIconForPageUrl,
          jni.JniType.voidType, [url.reference]).check();

  static final _id_releaseIconForPageUrl = jniAccessors.getMethodIDOf(
      _classRef, "releaseIconForPageUrl", "(Ljava/lang/String;)V");

  /// from: public abstract void releaseIconForPageUrl(java.lang.String url)
  ///
  /// Release the icon for the given page url.
  ///@param url The page's url.
  void releaseIconForPageUrl(jni.JniString url) =>
      jniAccessors.callMethodWithArgs(reference, _id_releaseIconForPageUrl,
          jni.JniType.voidType, [url.reference]).check();

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getInstance", "()Landroid/webkit/WebIconDatabase;");

  /// from: static public android.webkit.WebIconDatabase getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the global instance of WebIconDatabase.
  ///@return A single instance of WebIconDatabase. It will be the same
  ///         instance for the current process each time this method is
  ///         called.
  static WebIconDatabase getInstance() =>
      WebIconDatabase.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getInstance, jni.JniType.objectType, []).object);
}

/// from: android.webkit.WebIconDatabase$IconListener
///
/// Interface for receiving icons from the database.
///@deprecated This interface is obsolete.
class WebIconDatabase_IconListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/WebIconDatabase\$IconListener");
  WebIconDatabase_IconListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onReceivedIcon = jniAccessors.getMethodIDOf(_classRef,
      "onReceivedIcon", "(Ljava/lang/String;Landroid/graphics/Bitmap;)V");

  /// from: public abstract void onReceivedIcon(java.lang.String url, android.graphics.Bitmap icon)
  ///
  /// Called when the icon has been retrieved from the database and the
  /// result is non-null.
  ///@param url The url passed in the request.
  ///@param icon The favicon for the given url.
  void onReceivedIcon(jni.JniString url, bitmap_.Bitmap icon) =>
      jniAccessors.callMethodWithArgs(reference, _id_onReceivedIcon,
          jni.JniType.voidType, [url.reference, icon.reference]).check();
}
