// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.SafeBrowsingResponse
///
/// Used to indicate an action to take when hitting a malicious URL. Instances of this class are
/// created by the WebView and passed to android.webkit.WebViewClient\#onSafeBrowsingHit. The
/// host application must call \#showInterstitial(boolean), \#proceed(boolean), or
/// \#backToSafety(boolean) to set the WebView's response to the Safe Browsing hit.
///
///
/// If reporting is enabled, all reports will be sent according to the privacy policy referenced by
/// android.webkit.WebView\#getSafeBrowsingPrivacyPolicyUrl().
class SafeBrowsingResponse extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/SafeBrowsingResponse");
  SafeBrowsingResponse.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SafeBrowsingResponse()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_showInterstitial =
      jniAccessors.getMethodIDOf(_classRef, "showInterstitial", "(Z)V");

  /// from: public abstract void showInterstitial(boolean allowReporting)
  ///
  /// Display the default interstitial.
  ///@param allowReporting {@code true} if the interstitial should show a reporting checkbox.
  void showInterstitial(bool allowReporting) => jniAccessors.callMethodWithArgs(
      reference,
      _id_showInterstitial,
      jni.JniType.voidType,
      [allowReporting]).check();

  static final _id_proceed =
      jniAccessors.getMethodIDOf(_classRef, "proceed", "(Z)V");

  /// from: public abstract void proceed(boolean report)
  ///
  /// Act as if the user clicked "visit this unsafe site."
  ///@param report {@code true} to enable Safe Browsing reporting.
  void proceed(bool report) => jniAccessors.callMethodWithArgs(
      reference, _id_proceed, jni.JniType.voidType, [report]).check();

  static final _id_backToSafety =
      jniAccessors.getMethodIDOf(_classRef, "backToSafety", "(Z)V");

  /// from: public abstract void backToSafety(boolean report)
  ///
  /// Act as if the user clicked "back to safety."
  ///@param report {@code true} to enable Safe Browsing reporting.
  void backToSafety(bool report) => jniAccessors.callMethodWithArgs(
      reference, _id_backToSafety, jni.JniType.voidType, [report]).check();
}
