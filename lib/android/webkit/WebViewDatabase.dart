// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.WebViewDatabase
///
/// This class allows developers to determine whether any WebView used in the
/// application has stored any of the following types of browsing data and
/// to clear any such stored data for all WebViews in the application.
/// <ul>
///  <li>Username/password pairs for web forms</li>
///  <li>HTTP authentication username/password pairs</li>
///  <li>Data entered into text fields (e.g. for autocomplete suggestions)</li>
/// </ul>
class WebViewDatabase extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/WebViewDatabase");
  WebViewDatabase.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  WebViewDatabase()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Landroid/content/Context;)Landroid/webkit/WebViewDatabase;");

  /// from: static public android.webkit.WebViewDatabase getInstance(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static WebViewDatabase getInstance(context_.Context context) =>
      WebViewDatabase.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getInstance, jni.JniType.objectType, [context.reference]).object);

  static final _id_hasUsernamePassword =
      jniAccessors.getMethodIDOf(_classRef, "hasUsernamePassword", "()Z");

  /// from: public abstract boolean hasUsernamePassword()
  ///
  /// Gets whether there are any saved username/password pairs for web forms.
  /// Note that these are unrelated to HTTP authentication credentials.
  ///@return {@code true} if there are any saved username/password pairs
  ///@see WebView\#savePassword
  ///@see \#clearUsernamePassword
  ///@deprecated Saving passwords in WebView will not be supported in future versions.
  bool hasUsernamePassword() => jniAccessors.callMethodWithArgs(
      reference, _id_hasUsernamePassword, jni.JniType.booleanType, []).boolean;

  static final _id_clearUsernamePassword =
      jniAccessors.getMethodIDOf(_classRef, "clearUsernamePassword", "()V");

  /// from: public abstract void clearUsernamePassword()
  ///
  /// Clears any saved username/password pairs for web forms.
  /// Note that these are unrelated to HTTP authentication credentials.
  ///@see WebView\#savePassword
  ///@see \#hasUsernamePassword
  ///@deprecated Saving passwords in WebView will not be supported in future versions.
  void clearUsernamePassword() => jniAccessors.callMethodWithArgs(
      reference, _id_clearUsernamePassword, jni.JniType.voidType, []).check();

  static final _id_hasHttpAuthUsernamePassword = jniAccessors.getMethodIDOf(
      _classRef, "hasHttpAuthUsernamePassword", "()Z");

  /// from: public abstract boolean hasHttpAuthUsernamePassword()
  ///
  /// Gets whether there are any saved credentials for HTTP authentication.
  ///@return whether there are any saved credentials
  ///@see \#getHttpAuthUsernamePassword
  ///@see \#setHttpAuthUsernamePassword
  ///@see \#clearHttpAuthUsernamePassword
  bool hasHttpAuthUsernamePassword() => jniAccessors.callMethodWithArgs(
      reference,
      _id_hasHttpAuthUsernamePassword,
      jni.JniType.booleanType, []).boolean;

  static final _id_clearHttpAuthUsernamePassword = jniAccessors.getMethodIDOf(
      _classRef, "clearHttpAuthUsernamePassword", "()V");

  /// from: public abstract void clearHttpAuthUsernamePassword()
  ///
  /// Clears any saved credentials for HTTP authentication. This method only clears the username
  /// and password stored in WebViewDatabase instance. The username and password are not read from
  /// the WebViewDatabase during WebViewClient\#onReceivedHttpAuthRequest. It is up
  /// to the app to do this or not.
  ///
  /// The username and password used for http authentication might be cached in the network stack
  /// itself, and are not cleared when this method is called.  WebView does not provide a special
  /// mechanism to clear HTTP authentication for implementing client logout. The client logout
  /// mechanism should be implemented by the Web site designer (such as server sending a HTTP 401
  /// for invalidating credentials).
  ///@see \#getHttpAuthUsernamePassword
  ///@see \#setHttpAuthUsernamePassword
  ///@see \#hasHttpAuthUsernamePassword
  void clearHttpAuthUsernamePassword() => jniAccessors.callMethodWithArgs(
      reference,
      _id_clearHttpAuthUsernamePassword,
      jni.JniType.voidType, []).check();

  static final _id_setHttpAuthUsernamePassword = jniAccessors.getMethodIDOf(
      _classRef,
      "setHttpAuthUsernamePassword",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public abstract void setHttpAuthUsernamePassword(java.lang.String host, java.lang.String realm, java.lang.String username, java.lang.String password)
  ///
  /// Stores HTTP authentication credentials for a given host and realm to the WebViewDatabase
  /// instance.
  ///
  /// To use HTTP authentication, the embedder application has to implement
  /// WebViewClient\#onReceivedHttpAuthRequest, and call HttpAuthHandler\#proceed
  /// with the correct username and password.
  ///
  /// The embedder app can get the username and password any way it chooses, and does not have to
  /// use WebViewDatabase.
  ///
  /// Notes:
  /// <li>
  /// WebViewDatabase is provided only as a convenience to store and retrieve http
  /// authentication credentials. WebView does not read from it during HTTP authentication.
  /// </li>
  /// <li>
  /// WebView does not provide a special mechanism to clear HTTP authentication credentials for
  /// implementing client logout. The client logout mechanism should be implemented by the Web site
  /// designer (such as server sending a HTTP 401 for invalidating credentials).
  /// </li>
  ///@param host the host to which the credentials apply
  ///@param realm the realm to which the credentials apply
  ///@param username the username
  ///@param password the password
  ///@see \#getHttpAuthUsernamePassword
  ///@see \#hasHttpAuthUsernamePassword
  ///@see \#clearHttpAuthUsernamePassword
  void setHttpAuthUsernamePassword(jni.JniString host, jni.JniString realm,
          jni.JniString username, jni.JniString password) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_setHttpAuthUsernamePassword, jni.JniType.voidType, [
        host.reference,
        realm.reference,
        username.reference,
        password.reference
      ]).check();

  static final _id_getHttpAuthUsernamePassword = jniAccessors.getMethodIDOf(
      _classRef,
      "getHttpAuthUsernamePassword",
      "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;");

  /// from: public abstract java.lang.String[] getHttpAuthUsernamePassword(java.lang.String host, java.lang.String realm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves HTTP authentication credentials for a given host and realm from the WebViewDatabase instance.
  ///@param host the host to which the credentials apply
  ///@param realm the realm to which the credentials apply
  ///@return the credentials as a String array, if found. The first element
  ///         is the username and the second element is the password. {@code null} if
  ///         no credentials are found.
  ///@see \#setHttpAuthUsernamePassword
  ///@see \#hasHttpAuthUsernamePassword
  ///@see \#clearHttpAuthUsernamePassword
  jni.JniObject getHttpAuthUsernamePassword(
          jni.JniString host, jni.JniString realm) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getHttpAuthUsernamePassword,
          jni.JniType.objectType,
          [host.reference, realm.reference]).object);

  static final _id_hasFormData =
      jniAccessors.getMethodIDOf(_classRef, "hasFormData", "()Z");

  /// from: public abstract boolean hasFormData()
  ///
  /// Gets whether there is any saved data for web forms.
  ///@return whether there is any saved data for web forms
  ///@see \#clearFormData
  bool hasFormData() => jniAccessors.callMethodWithArgs(
      reference, _id_hasFormData, jni.JniType.booleanType, []).boolean;

  static final _id_clearFormData =
      jniAccessors.getMethodIDOf(_classRef, "clearFormData", "()V");

  /// from: public abstract void clearFormData()
  ///
  /// Clears any saved data for web forms.
  ///@see \#hasFormData
  void clearFormData() => jniAccessors.callMethodWithArgs(
      reference, _id_clearFormData, jni.JniType.voidType, []).check();
}
