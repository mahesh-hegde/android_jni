// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.ConsoleMessage
///
/// Public class representing a JavaScript console message from WebCore. This could be a issued
/// by a call to one of the <code>console</code> logging functions (e.g.
/// <code>console.log('...')</code>) or a JavaScript error on the  page. To receive notifications
/// of these messages, override the
/// WebChromeClient\#onConsoleMessage(ConsoleMessage) function.
class ConsoleMessage extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/ConsoleMessage");
  ConsoleMessage.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;Ljava/lang/String;ILandroid/webkit/ConsoleMessage\$MessageLevel;)V");

  /// from: public void <init>(java.lang.String message, java.lang.String sourceId, int lineNumber, android.webkit.ConsoleMessage.MessageLevel msgLevel)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ConsoleMessage(jni.JniString message, jni.JniString sourceId, int lineNumber,
      ConsoleMessage_MessageLevel msgLevel)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          message.reference,
          sourceId.reference,
          lineNumber,
          msgLevel.reference
        ]).object);

  static final _id_messageLevel = jniAccessors.getMethodIDOf(_classRef,
      "messageLevel", "()Landroid/webkit/ConsoleMessage\$MessageLevel;");

  /// from: public android.webkit.ConsoleMessage.MessageLevel messageLevel()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ConsoleMessage_MessageLevel messageLevel() =>
      ConsoleMessage_MessageLevel.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_messageLevel, jni.JniType.objectType, []).object);

  static final _id_message =
      jniAccessors.getMethodIDOf(_classRef, "message", "()Ljava/lang/String;");

  /// from: public java.lang.String message()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString message() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_message, jni.JniType.objectType, []).object);

  static final _id_sourceId =
      jniAccessors.getMethodIDOf(_classRef, "sourceId", "()Ljava/lang/String;");

  /// from: public java.lang.String sourceId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString sourceId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_sourceId, jni.JniType.objectType, []).object);

  static final _id_lineNumber =
      jniAccessors.getMethodIDOf(_classRef, "lineNumber", "()I");

  /// from: public int lineNumber()
  int lineNumber() => jniAccessors.callMethodWithArgs(
      reference, _id_lineNumber, jni.JniType.intType, []).integer;
}

/// from: android.webkit.ConsoleMessage$MessageLevel
class ConsoleMessage_MessageLevel extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/ConsoleMessage\$MessageLevel");
  ConsoleMessage_MessageLevel.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/webkit/ConsoleMessage\$MessageLevel;");

  /// from: static public android.webkit.ConsoleMessage.MessageLevel[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/webkit/ConsoleMessage\$MessageLevel;");

  /// from: static public android.webkit.ConsoleMessage.MessageLevel valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static ConsoleMessage_MessageLevel valueOf(jni.JniString name) =>
      ConsoleMessage_MessageLevel.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);
}
