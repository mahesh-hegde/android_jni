// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.WebMessage
///
/// The Java representation of the HTML5 PostMessage event. See
/// https://html.spec.whatwg.org/multipage/comms.html\#the-messageevent-interfaces
/// for definition of a MessageEvent in HTML5.
class WebMessage extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/webkit/WebMessage");
  WebMessage.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String data)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a WebMessage.
  ///@param data the data of the message.
  WebMessage(jni.JniString data)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [data.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;[Landroid/webkit/WebMessagePort;)V");

  /// from: public void <init>(java.lang.String data, android.webkit.WebMessagePort[] ports)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a WebMessage.
  ///@param data the data of the message.
  ///@param ports the ports that are sent with the message.
  WebMessage.ctor1(jni.JniString data, jni.JniObject ports)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [data.reference, ports.reference]).object);

  static final _id_getData =
      jniAccessors.getMethodIDOf(_classRef, "getData", "()Ljava/lang/String;");

  /// from: public java.lang.String getData()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the data of the message.
  jni.JniString getData() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getData, jni.JniType.objectType, []).object);

  static final _id_getPorts = jniAccessors.getMethodIDOf(
      _classRef, "getPorts", "()[Landroid/webkit/WebMessagePort;");

  /// from: public android.webkit.WebMessagePort[] getPorts()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the ports that are sent with the message, or {@code null} if no port
  /// is sent.
  jni.JniObject getPorts() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPorts, jni.JniType.objectType, []).object);
}
