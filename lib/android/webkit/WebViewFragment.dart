// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../app/Fragment.dart" as fragment_;

import "../view/View.dart" as view_;

import "../view/LayoutInflater.dart" as layoutinflater_;

import "../view/ViewGroup.dart" as viewgroup_;

import "../os/Bundle.dart" as bundle_;

import "WebView.dart" as webview_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.WebViewFragment
///
/// A fragment that displays a WebView.
///
/// The WebView is automically paused or resumed when the Fragment is paused or resumed.
///@deprecated Manually call WebView\#onPause() and WebView\#onResume()
class WebViewFragment extends fragment_.Fragment {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/WebViewFragment");
  WebViewFragment.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  WebViewFragment()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onCreateView = jniAccessors.getMethodIDOf(
      _classRef,
      "onCreateView",
      "(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;");

  /// from: public android.view.View onCreateView(android.view.LayoutInflater inflater, android.view.ViewGroup container, android.os.Bundle savedInstanceState)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Called to instantiate the view. Creates and returns the WebView.
  view_.View onCreateView(layoutinflater_.LayoutInflater inflater,
          viewgroup_.ViewGroup container, bundle_.Bundle savedInstanceState) =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_onCreateView, jni.JniType.objectType, [
        inflater.reference,
        container.reference,
        savedInstanceState.reference
      ]).object);

  static final _id_onPause =
      jniAccessors.getMethodIDOf(_classRef, "onPause", "()V");

  /// from: public void onPause()
  ///
  /// Called when the fragment is visible to the user and actively running. Resumes the WebView.
  void onPause() => jniAccessors.callMethodWithArgs(
      reference, _id_onPause, jni.JniType.voidType, []).check();

  static final _id_onResume =
      jniAccessors.getMethodIDOf(_classRef, "onResume", "()V");

  /// from: public void onResume()
  ///
  /// Called when the fragment is no longer resumed. Pauses the WebView.
  void onResume() => jniAccessors.callMethodWithArgs(
      reference, _id_onResume, jni.JniType.voidType, []).check();

  static final _id_onDestroyView =
      jniAccessors.getMethodIDOf(_classRef, "onDestroyView", "()V");

  /// from: public void onDestroyView()
  ///
  /// Called when the WebView has been detached from the fragment.
  /// The WebView is no longer available after this time.
  void onDestroyView() => jniAccessors.callMethodWithArgs(
      reference, _id_onDestroyView, jni.JniType.voidType, []).check();

  static final _id_onDestroy =
      jniAccessors.getMethodIDOf(_classRef, "onDestroy", "()V");

  /// from: public void onDestroy()
  ///
  /// Called when the fragment is no longer in use. Destroys the internal state of the WebView.
  void onDestroy() => jniAccessors.callMethodWithArgs(
      reference, _id_onDestroy, jni.JniType.voidType, []).check();

  static final _id_getWebView = jniAccessors.getMethodIDOf(
      _classRef, "getWebView", "()Landroid/webkit/WebView;");

  /// from: public android.webkit.WebView getWebView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the WebView.
  webview_.WebView getWebView() =>
      webview_.WebView.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getWebView, jni.JniType.objectType, []).object);
}
