// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ValueCallback.dart" as valuecallback_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.GeolocationPermissions
///
/// This class is used to manage permissions for the WebView's Geolocation
/// JavaScript API.
///
/// Geolocation permissions are applied to an origin, which consists of the
/// host, scheme and port of a URI. In order for web content to use the
/// Geolocation API, permission must be granted for that content's origin.
///
/// This class stores Geolocation permissions. An origin's permission state can
/// be either allowed or denied. This class uses Strings to represent
/// an origin.
///
/// When an origin attempts to use the Geolocation API, but no permission state
/// is currently set for that origin,
/// WebChromeClient\#onGeolocationPermissionsShowPrompt(String,GeolocationPermissions.Callback) WebChromeClient.onGeolocationPermissionsShowPrompt()
/// is called. This allows the permission state to be set for that origin.
///
/// The methods of this class can be used to modify and interrogate the stored
/// Geolocation permissions at any time.
class GeolocationPermissions extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/GeolocationPermissions");
  GeolocationPermissions.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getInstance", "()Landroid/webkit/GeolocationPermissions;");

  /// from: static public android.webkit.GeolocationPermissions getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the singleton instance of this class. This method cannot be
  /// called before the application instantiates a WebView instance.
  ///@return the singleton GeolocationPermissions instance
  static GeolocationPermissions getInstance() =>
      GeolocationPermissions.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getInstance, jni.JniType.objectType, []).object);

  static final _id_getOrigins = jniAccessors.getMethodIDOf(
      _classRef, "getOrigins", "(Landroid/webkit/ValueCallback;)V");

  /// from: public void getOrigins(android.webkit.ValueCallback<java.util.Set<java.lang.String>> callback)
  ///
  /// Gets the set of origins for which Geolocation permissions are stored.
  ///@param callback a ValueCallback to receive the result of this
  ///                 request. This object's
  ///                 ValueCallback\#onReceiveValue(T) onReceiveValue()
  ///                 method will be invoked asynchronously with a set of
  ///                 Strings containing the origins for which Geolocation
  ///                 permissions are stored.
  void getOrigins(valuecallback_.ValueCallback callback) =>
      jniAccessors.callMethodWithArgs(reference, _id_getOrigins,
          jni.JniType.voidType, [callback.reference]).check();

  static final _id_getAllowed = jniAccessors.getMethodIDOf(_classRef,
      "getAllowed", "(Ljava/lang/String;Landroid/webkit/ValueCallback;)V");

  /// from: public void getAllowed(java.lang.String origin, android.webkit.ValueCallback<java.lang.Boolean> callback)
  ///
  /// Gets the Geolocation permission state for the specified origin.
  ///@param origin the origin for which Geolocation permission is requested
  ///@param callback a ValueCallback to receive the result of this
  ///                 request. This object's
  ///                 ValueCallback\#onReceiveValue(T) onReceiveValue()
  ///                 method will be invoked asynchronously with a boolean
  ///                 indicating whether or not the origin can use the
  ///                 Geolocation API.
  void getAllowed(
          jni.JniString origin, valuecallback_.ValueCallback callback) =>
      jniAccessors.callMethodWithArgs(reference, _id_getAllowed,
          jni.JniType.voidType, [origin.reference, callback.reference]).check();

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, "clear", "(Ljava/lang/String;)V");

  /// from: public void clear(java.lang.String origin)
  ///
  /// Clears the Geolocation permission state for the specified origin.
  ///@param origin the origin for which Geolocation permissions are cleared
  void clear(jni.JniString origin) => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniType.voidType, [origin.reference]).check();

  static final _id_allow =
      jniAccessors.getMethodIDOf(_classRef, "allow", "(Ljava/lang/String;)V");

  /// from: public void allow(java.lang.String origin)
  ///
  /// Allows the specified origin to use the Geolocation API.
  ///@param origin the origin for which Geolocation API use is allowed
  void allow(jni.JniString origin) => jniAccessors.callMethodWithArgs(
      reference, _id_allow, jni.JniType.voidType, [origin.reference]).check();

  static final _id_clearAll =
      jniAccessors.getMethodIDOf(_classRef, "clearAll", "()V");

  /// from: public void clearAll()
  ///
  /// Clears the Geolocation permission state for all origins.
  void clearAll() => jniAccessors.callMethodWithArgs(
      reference, _id_clearAll, jni.JniType.voidType, []).check();
}

/// from: android.webkit.GeolocationPermissions$Callback
///
/// A callback interface used by the host application to set the Geolocation
/// permission state for an origin.
class GeolocationPermissions_Callback extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/webkit/GeolocationPermissions\$Callback");
  GeolocationPermissions_Callback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_invoke = jniAccessors.getMethodIDOf(
      _classRef, "invoke", "(Ljava/lang/String;ZZ)V");

  /// from: public abstract void invoke(java.lang.String origin, boolean allow, boolean retain)
  ///
  /// Sets the Geolocation permission state for the supplied origin.
  ///@param origin the origin for which permissions are set
  ///@param allow whether or not the origin should be allowed to use the
  ///              Geolocation API
  ///@param retain whether the permission should be retained beyond the
  ///               lifetime of a page currently being displayed by a
  ///               WebView
  void invoke(jni.JniString origin, bool allow, bool retain) =>
      jniAccessors.callMethodWithArgs(reference, _id_invoke,
          jni.JniType.voidType, [origin.reference, allow, retain]).check();
}
