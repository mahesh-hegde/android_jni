// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.ServiceWorkerWebSettings
///
/// Manages settings state for all Service Workers. These settings are not tied to
/// the lifetime of any WebView because service workers can outlive WebView instances.
/// The settings are similar to WebSettings but only settings relevant to
/// Service Workers are supported.
class ServiceWorkerWebSettings extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/ServiceWorkerWebSettings");
  ServiceWorkerWebSettings.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ServiceWorkerWebSettings()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setCacheMode =
      jniAccessors.getMethodIDOf(_classRef, "setCacheMode", "(I)V");

  /// from: public abstract void setCacheMode(int mode)
  ///
  /// Overrides the way the cache is used, see WebSettings\#setCacheMode.
  ///@param mode the mode to use. One of WebSettings\#LOAD_DEFAULT,
  ///     WebSettings\#LOAD_CACHE_ELSE_NETWORK, WebSettings\#LOAD_NO_CACHE
  ///     or WebSettings\#LOAD_CACHE_ONLY. The default value is
  ///     WebSettings\#LOAD_DEFAULT.
  ///
  /// Value is android.webkit.WebSettings\#LOAD_DEFAULT, android.webkit.WebSettings\#LOAD_NORMAL, android.webkit.WebSettings\#LOAD_CACHE_ELSE_NETWORK, android.webkit.WebSettings\#LOAD_NO_CACHE, or android.webkit.WebSettings\#LOAD_CACHE_ONLY
  void setCacheMode(int mode) => jniAccessors.callMethodWithArgs(
      reference, _id_setCacheMode, jni.JniType.voidType, [mode]).check();

  static final _id_getCacheMode =
      jniAccessors.getMethodIDOf(_classRef, "getCacheMode", "()I");

  /// from: public abstract int getCacheMode()
  ///
  /// Gets the current setting for overriding the cache mode.
  ///@return the current setting for overriding the cache mode
  /// Value is android.webkit.WebSettings\#LOAD_DEFAULT, android.webkit.WebSettings\#LOAD_NORMAL, android.webkit.WebSettings\#LOAD_CACHE_ELSE_NETWORK, android.webkit.WebSettings\#LOAD_NO_CACHE, or android.webkit.WebSettings\#LOAD_CACHE_ONLY
  ///@see \#setCacheMode
  int getCacheMode() => jniAccessors.callMethodWithArgs(
      reference, _id_getCacheMode, jni.JniType.intType, []).integer;

  static final _id_setAllowContentAccess =
      jniAccessors.getMethodIDOf(_classRef, "setAllowContentAccess", "(Z)V");

  /// from: public abstract void setAllowContentAccess(boolean allow)
  ///
  /// Enables or disables content URL access from Service Workers, see
  /// WebSettings\#setAllowContentAccess.
  void setAllowContentAccess(bool allow) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setAllowContentAccess,
      jni.JniType.voidType,
      [allow]).check();

  static final _id_getAllowContentAccess =
      jniAccessors.getMethodIDOf(_classRef, "getAllowContentAccess", "()Z");

  /// from: public abstract boolean getAllowContentAccess()
  ///
  /// Gets whether Service Workers support content URL access.
  ///@see \#setAllowContentAccess
  bool getAllowContentAccess() => jniAccessors.callMethodWithArgs(reference,
      _id_getAllowContentAccess, jni.JniType.booleanType, []).boolean;

  static final _id_setAllowFileAccess =
      jniAccessors.getMethodIDOf(_classRef, "setAllowFileAccess", "(Z)V");

  /// from: public abstract void setAllowFileAccess(boolean allow)
  ///
  /// Enables or disables file access within Service Workers, see
  /// WebSettings\#setAllowFileAccess.
  void setAllowFileAccess(bool allow) => jniAccessors.callMethodWithArgs(
      reference, _id_setAllowFileAccess, jni.JniType.voidType, [allow]).check();

  static final _id_getAllowFileAccess =
      jniAccessors.getMethodIDOf(_classRef, "getAllowFileAccess", "()Z");

  /// from: public abstract boolean getAllowFileAccess()
  ///
  /// Gets whether Service Workers support file access.
  ///@see \#setAllowFileAccess
  bool getAllowFileAccess() => jniAccessors.callMethodWithArgs(
      reference, _id_getAllowFileAccess, jni.JniType.booleanType, []).boolean;

  static final _id_setBlockNetworkLoads =
      jniAccessors.getMethodIDOf(_classRef, "setBlockNetworkLoads", "(Z)V");

  /// from: public abstract void setBlockNetworkLoads(boolean flag)
  ///
  /// Sets whether Service Workers should not load resources from the network,
  /// see WebSettings\#setBlockNetworkLoads.
  ///@param flag {@code true} means block network loads by the Service Workers
  void setBlockNetworkLoads(bool flag) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setBlockNetworkLoads,
      jni.JniType.voidType,
      [flag]).check();

  static final _id_getBlockNetworkLoads =
      jniAccessors.getMethodIDOf(_classRef, "getBlockNetworkLoads", "()Z");

  /// from: public abstract boolean getBlockNetworkLoads()
  ///
  /// Gets whether Service Workers are prohibited from loading any resources from the network.
  ///@return {@code true} if the Service Workers are not allowed to load any resources from the
  ///         network
  ///@see \#setBlockNetworkLoads
  bool getBlockNetworkLoads() => jniAccessors.callMethodWithArgs(
      reference, _id_getBlockNetworkLoads, jni.JniType.booleanType, []).boolean;
}
