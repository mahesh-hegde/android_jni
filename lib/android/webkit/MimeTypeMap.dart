// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.MimeTypeMap
///
/// Two-way map that maps MIME-types to file extensions and vice versa.
///
/// See also java.net.URLConnection\#guessContentTypeFromName
/// and java.net.URLConnection\#guessContentTypeFromStream. This
/// class and {@code URLConnection} share the same MIME-type database.
class MimeTypeMap extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/MimeTypeMap");
  MimeTypeMap.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MimeTypeMap()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getFileExtensionFromUrl = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getFileExtensionFromUrl",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getFileExtensionFromUrl(java.lang.String url)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the file extension or an empty string if there is no
  /// extension. This method is a convenience method for obtaining the
  /// extension of a url and has undefined results for other Strings.
  ///@param url
  ///@return The file extension of the given url.
  static jni.JniString getFileExtensionFromUrl(jni.JniString url) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getFileExtensionFromUrl,
          jni.JniType.objectType,
          [url.reference]).object);

  static final _id_hasMimeType = jniAccessors.getMethodIDOf(
      _classRef, "hasMimeType", "(Ljava/lang/String;)Z");

  /// from: public boolean hasMimeType(java.lang.String mimeType)
  ///
  /// Return {@code true} if the given MIME type has an entry in the map.
  ///@param mimeType A MIME type (i.e. text/plain)
  ///@return {@code true} if there is a mimeType entry in the map.
  bool hasMimeType(jni.JniString mimeType) => jniAccessors.callMethodWithArgs(
      reference,
      _id_hasMimeType,
      jni.JniType.booleanType,
      [mimeType.reference]).boolean;

  static final _id_getMimeTypeFromExtension = jniAccessors.getMethodIDOf(
      _classRef,
      "getMimeTypeFromExtension",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getMimeTypeFromExtension(java.lang.String extension)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the MIME type for the given extension.
  ///@param extension A file extension without the leading '.'
  ///@return The MIME type for the given extension or {@code null} if there is none.
  jni.JniString getMimeTypeFromExtension(jni.JniString extension0) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getMimeTypeFromExtension,
          jni.JniType.objectType,
          [extension0.reference]).object);

  static final _id_hasExtension = jniAccessors.getMethodIDOf(
      _classRef, "hasExtension", "(Ljava/lang/String;)Z");

  /// from: public boolean hasExtension(java.lang.String extension)
  ///
  /// Return {@code true} if the given extension has a registered MIME type.
  ///@param extension A file extension without the leading '.'
  ///@return {@code true} if there is an extension entry in the map.
  bool hasExtension(jni.JniString extension0) =>
      jniAccessors.callMethodWithArgs(reference, _id_hasExtension,
          jni.JniType.booleanType, [extension0.reference]).boolean;

  static final _id_getExtensionFromMimeType = jniAccessors.getMethodIDOf(
      _classRef,
      "getExtensionFromMimeType",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getExtensionFromMimeType(java.lang.String mimeType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the registered extension for the given MIME type. Note that some
  /// MIME types map to multiple extensions. This call will return the most
  /// common extension for the given MIME type.
  ///@param mimeType A MIME type (i.e. text/plain)
  ///@return The extension for the given MIME type or {@code null} if there is none.
  jni.JniString getExtensionFromMimeType(jni.JniString mimeType) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getExtensionFromMimeType,
          jni.JniType.objectType,
          [mimeType.reference]).object);

  static final _id_getSingleton = jniAccessors.getStaticMethodIDOf(
      _classRef, "getSingleton", "()Landroid/webkit/MimeTypeMap;");

  /// from: static public android.webkit.MimeTypeMap getSingleton()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the singleton instance of MimeTypeMap.
  ///@return The singleton instance of the MIME-type map.
  static MimeTypeMap getSingleton() =>
      MimeTypeMap.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getSingleton, jni.JniType.objectType, []).object);
}
