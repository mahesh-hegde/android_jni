// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "WebHistoryItem.dart" as webhistoryitem_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.WebBackForwardList
///
/// This class contains the back/forward list for a WebView.
/// WebView.copyBackForwardList() will return a copy of this class used to
/// inspect the entries in the list.
class WebBackForwardList extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/WebBackForwardList");
  WebBackForwardList.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  WebBackForwardList()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getCurrentItem = jniAccessors.getMethodIDOf(
      _classRef, "getCurrentItem", "()Landroid/webkit/WebHistoryItem;");

  /// from: public abstract android.webkit.WebHistoryItem getCurrentItem()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the current history item. This method returns {@code null} if the list is
  /// empty.
  ///@return The current history item.
  webhistoryitem_.WebHistoryItem getCurrentItem() =>
      webhistoryitem_.WebHistoryItem.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCurrentItem, jni.JniType.objectType, []).object);

  static final _id_getCurrentIndex =
      jniAccessors.getMethodIDOf(_classRef, "getCurrentIndex", "()I");

  /// from: public abstract int getCurrentIndex()
  ///
  /// Get the index of the current history item. This index can be used to
  /// directly index into the array list.
  ///@return The current index from 0...n or -1 if the list is empty.
  int getCurrentIndex() => jniAccessors.callMethodWithArgs(
      reference, _id_getCurrentIndex, jni.JniType.intType, []).integer;

  static final _id_getItemAtIndex = jniAccessors.getMethodIDOf(
      _classRef, "getItemAtIndex", "(I)Landroid/webkit/WebHistoryItem;");

  /// from: public abstract android.webkit.WebHistoryItem getItemAtIndex(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the history item at the given index. The index range is from 0...n
  /// where 0 is the first item and n is the last item.
  ///@param index The index to retrieve.
  webhistoryitem_.WebHistoryItem getItemAtIndex(int index) =>
      webhistoryitem_.WebHistoryItem.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getItemAtIndex,
          jni.JniType.objectType,
          [index]).object);

  static final _id_getSize =
      jniAccessors.getMethodIDOf(_classRef, "getSize", "()I");

  /// from: public abstract int getSize()
  ///
  /// Get the total size of the back/forward list.
  ///@return The size of the list.
  int getSize() => jniAccessors.callMethodWithArgs(
      reference, _id_getSize, jni.JniType.intType, []).integer;

  static final _id_clone = jniAccessors.getMethodIDOf(
      _classRef, "clone", "()Landroid/webkit/WebBackForwardList;");

  /// from: protected abstract android.webkit.WebBackForwardList clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Clone the entire object to be used in the UI thread by clients of
  /// WebView. This creates a copy that should never be modified by any of the
  /// webkit package classes.
  WebBackForwardList clone() =>
      WebBackForwardList.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);
}
