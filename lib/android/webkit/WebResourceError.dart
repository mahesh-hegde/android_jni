// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.WebResourceError
///
/// Encapsulates information about errors occured during loading of web resources. See
/// WebViewClient\#onReceivedError(WebView, WebResourceRequest, WebResourceError) WebViewClient.onReceivedError(WebView, WebResourceRequest, WebResourceError)
class WebResourceError extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/WebResourceError");
  WebResourceError.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getErrorCode =
      jniAccessors.getMethodIDOf(_classRef, "getErrorCode", "()I");

  /// from: public abstract int getErrorCode()
  ///
  /// Gets the error code of the error. The code corresponds to one
  /// of the ERROR_* constants in WebViewClient.
  ///@return The error code of the error
  int getErrorCode() => jniAccessors.callMethodWithArgs(
      reference, _id_getErrorCode, jni.JniType.intType, []).integer;

  static final _id_getDescription = jniAccessors.getMethodIDOf(
      _classRef, "getDescription", "()Ljava/lang/CharSequence;");

  /// from: public abstract java.lang.CharSequence getDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the string describing the error. Descriptions are localized,
  /// and thus can be used for communicating the problem to the user.
  ///@return The description of the error
  jni.JniObject getDescription() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDescription, jni.JniType.objectType, []).object);
}
