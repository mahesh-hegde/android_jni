// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.webkit.DownloadListener
class DownloadListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/webkit/DownloadListener");
  DownloadListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onDownloadStart = jniAccessors.getMethodIDOf(
      _classRef,
      "onDownloadStart",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V");

  /// from: public abstract void onDownloadStart(java.lang.String url, java.lang.String userAgent, java.lang.String contentDisposition, java.lang.String mimetype, long contentLength)
  ///
  /// Notify the host application that a file should be downloaded
  ///@param url The full url to the content that should be downloaded
  ///@param userAgent the user agent to be used for the download.
  ///@param contentDisposition Content-disposition http header, if
  ///                           present.
  ///@param mimetype The mimetype of the content reported by the server
  ///@param contentLength The file size reported by the server
  void onDownloadStart(
          jni.JniString url,
          jni.JniString userAgent,
          jni.JniString contentDisposition,
          jni.JniString mimetype,
          int contentLength) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onDownloadStart, jni.JniType.voidType, [
        url.reference,
        userAgent.reference,
        contentDisposition.reference,
        mimetype.reference,
        contentLength
      ]).check();
}
