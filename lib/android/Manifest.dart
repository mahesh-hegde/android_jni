// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../_init.dart" show jniEnv, jniAccessors;

/// from: android.Manifest
class Manifest extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/Manifest");
  Manifest.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Manifest()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.Manifest$permission_group
class Manifest_permission_group extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/Manifest\$permission_group");
  Manifest_permission_group.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CALENDAR
  ///
  /// Used for runtime permissions related to user's calendar.
  static const CALENDAR = "android.permission-group.CALENDAR";

  /// from: static public final java.lang.String CALL_LOG
  ///
  /// Used for permissions that are associated telephony features.
  static const CALL_LOG = "android.permission-group.CALL_LOG";

  /// from: static public final java.lang.String CAMERA
  ///
  /// Used for permissions that are associated with accessing
  /// camera or capturing images/video from the device.
  static const CAMERA = "android.permission-group.CAMERA";

  /// from: static public final java.lang.String CONTACTS
  ///
  /// Used for runtime permissions related to contacts and profiles on this
  /// device.
  static const CONTACTS = "android.permission-group.CONTACTS";

  /// from: static public final java.lang.String LOCATION
  ///
  /// Used for permissions that allow accessing the device location.
  static const LOCATION = "android.permission-group.LOCATION";

  /// from: static public final java.lang.String MICROPHONE
  ///
  /// Used for permissions that are associated with accessing
  /// microphone audio from the device. Note that phone calls also capture audio
  /// but are in a separate (more visible) permission group.
  static const MICROPHONE = "android.permission-group.MICROPHONE";

  /// from: static public final java.lang.String PHONE
  ///
  /// Used for permissions that are associated telephony features.
  static const PHONE = "android.permission-group.PHONE";

  /// from: static public final java.lang.String SENSORS
  ///
  /// Used for permissions that are associated with accessing
  /// body or environmental sensors.
  static const SENSORS = "android.permission-group.SENSORS";

  /// from: static public final java.lang.String SMS
  ///
  /// Used for runtime permissions related to user's SMS messages.
  static const SMS = "android.permission-group.SMS";

  /// from: static public final java.lang.String STORAGE
  ///
  /// Used for runtime permissions related to the shared external storage.
  static const STORAGE = "android.permission-group.STORAGE";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Manifest_permission_group()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.Manifest$permission
class Manifest_permission extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/Manifest\$permission");
  Manifest_permission.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACCEPT_HANDOVER
  ///
  /// Allows a calling app to continue a call which was started in another app.  An example is a
  /// video calling app that wants to continue a voice call on the user's mobile network.
  /// When the handover of a call from one app to another takes place, there are two devices
  /// which are involved in the handover; the initiating and receiving devices.  The initiating
  /// device is where the request to handover the call was started, and the receiving device is
  /// where the handover request is confirmed by the other party.
  /// This permission protects access to the
  /// android.telecom.TelecomManager\#acceptHandover(Uri, int, PhoneAccountHandle) which
  /// the receiving side of the handover uses to accept a handover.
  /// Protection level: dangerous
  static const ACCEPT_HANDOVER = "android.permission.ACCEPT_HANDOVER";

  /// from: static public final java.lang.String ACCESS_CHECKIN_PROPERTIES
  ///
  /// Allows read/write access to the "properties" table in the checkin
  /// database, to change values that get uploaded.
  /// Not for use by third-party applications.
  static const ACCESS_CHECKIN_PROPERTIES =
      "android.permission.ACCESS_CHECKIN_PROPERTIES";

  /// from: static public final java.lang.String ACCESS_COARSE_LOCATION
  ///
  /// Allows an app to access approximate location.
  /// Alternatively, you might want \#ACCESS_FINE_LOCATION.
  /// Protection level: dangerous
  static const ACCESS_COARSE_LOCATION =
      "android.permission.ACCESS_COARSE_LOCATION";

  /// from: static public final java.lang.String ACCESS_FINE_LOCATION
  ///
  /// Allows an app to access precise location.
  /// Alternatively, you might want \#ACCESS_COARSE_LOCATION.
  /// Protection level: dangerous
  static const ACCESS_FINE_LOCATION = "android.permission.ACCESS_FINE_LOCATION";

  /// from: static public final java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS
  ///
  /// Allows an application to access extra location provider commands.
  /// Protection level: normal
  static const ACCESS_LOCATION_EXTRA_COMMANDS =
      "android.permission.ACCESS_LOCATION_EXTRA_COMMANDS";

  /// from: static public final java.lang.String ACCESS_NETWORK_STATE
  ///
  /// Allows applications to access information about networks.
  /// Protection level: normal
  static const ACCESS_NETWORK_STATE = "android.permission.ACCESS_NETWORK_STATE";

  /// from: static public final java.lang.String ACCESS_NOTIFICATION_POLICY
  ///
  /// Marker permission for applications that wish to access notification policy.
  /// Protection level: normal
  static const ACCESS_NOTIFICATION_POLICY =
      "android.permission.ACCESS_NOTIFICATION_POLICY";

  /// from: static public final java.lang.String ACCESS_WIFI_STATE
  ///
  /// Allows applications to access information about Wi-Fi networks.
  /// Protection level: normal
  static const ACCESS_WIFI_STATE = "android.permission.ACCESS_WIFI_STATE";

  /// from: static public final java.lang.String ACCOUNT_MANAGER
  ///
  /// Allows applications to call into AccountAuthenticators.
  /// Not for use by third-party applications.
  static const ACCOUNT_MANAGER = "android.permission.ACCOUNT_MANAGER";

  /// from: static public final java.lang.String ADD_VOICEMAIL
  ///
  /// Allows an application to add voicemails into the system.
  /// Protection level: dangerous
  static const ADD_VOICEMAIL = "com.android.voicemail.permission.ADD_VOICEMAIL";

  /// from: static public final java.lang.String ANSWER_PHONE_CALLS
  ///
  /// Allows the app to answer an incoming phone call.
  /// Protection level: dangerous
  static const ANSWER_PHONE_CALLS = "android.permission.ANSWER_PHONE_CALLS";

  /// from: static public final java.lang.String BATTERY_STATS
  ///
  /// Allows an application to collect battery statistics
  static const BATTERY_STATS = "android.permission.BATTERY_STATS";

  /// from: static public final java.lang.String BIND_ACCESSIBILITY_SERVICE
  ///
  /// Must be required by an android.accessibilityservice.AccessibilityService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature
  static const BIND_ACCESSIBILITY_SERVICE =
      "android.permission.BIND_ACCESSIBILITY_SERVICE";

  /// from: static public final java.lang.String BIND_APPWIDGET
  ///
  /// Allows an application to tell the AppWidget service which application
  /// can access AppWidget's data.  The normal user flow is that a user
  /// picks an AppWidget to go into a particular host, thereby giving that
  /// host application access to the private data from the AppWidget app.
  /// An application that has this permission should honor that contract.
  /// Not for use by third-party applications.
  static const BIND_APPWIDGET = "android.permission.BIND_APPWIDGET";

  /// from: static public final java.lang.String BIND_AUTOFILL_SERVICE
  ///
  /// Must be required by a android.service.autofill.AutofillService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature
  static const BIND_AUTOFILL_SERVICE =
      "android.permission.BIND_AUTOFILL_SERVICE";

  /// from: static public final java.lang.String BIND_CARRIER_MESSAGING_SERVICE
  ///
  /// @deprecated Use android.Manifest.permission\#BIND_CARRIER_SERVICES instead
  static const BIND_CARRIER_MESSAGING_SERVICE =
      "android.permission.BIND_CARRIER_MESSAGING_SERVICE";

  /// from: static public final java.lang.String BIND_CARRIER_SERVICES
  ///
  /// The system process that is allowed to bind to services in carrier apps will
  /// have this permission. Carrier apps should use this permission to protect
  /// their services that only the system is allowed to bind to.
  /// Protection level: signature|privileged
  static const BIND_CARRIER_SERVICES =
      "android.permission.BIND_CARRIER_SERVICES";

  /// from: static public final java.lang.String BIND_CHOOSER_TARGET_SERVICE
  ///
  /// Must be required by a android.service.chooser.ChooserTargetService, to ensure that
  /// only the system can bind to it.
  /// Protection level: signature
  static const BIND_CHOOSER_TARGET_SERVICE =
      "android.permission.BIND_CHOOSER_TARGET_SERVICE";

  /// from: static public final java.lang.String BIND_CONDITION_PROVIDER_SERVICE
  ///
  /// Must be required by a android.service.notification.ConditionProviderService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature
  static const BIND_CONDITION_PROVIDER_SERVICE =
      "android.permission.BIND_CONDITION_PROVIDER_SERVICE";

  /// from: static public final java.lang.String BIND_DEVICE_ADMIN
  ///
  /// Must be required by device administration receiver, to ensure that only the
  /// system can interact with it.
  /// Protection level: signature
  static const BIND_DEVICE_ADMIN = "android.permission.BIND_DEVICE_ADMIN";

  /// from: static public final java.lang.String BIND_DREAM_SERVICE
  ///
  /// Must be required by an android.service.dreams.DreamService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature
  static const BIND_DREAM_SERVICE = "android.permission.BIND_DREAM_SERVICE";

  /// from: static public final java.lang.String BIND_INCALL_SERVICE
  ///
  /// Must be required by a android.telecom.InCallService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature|privileged
  static const BIND_INCALL_SERVICE = "android.permission.BIND_INCALL_SERVICE";

  /// from: static public final java.lang.String BIND_INPUT_METHOD
  ///
  /// Must be required by an android.inputmethodservice.InputMethodService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature
  static const BIND_INPUT_METHOD = "android.permission.BIND_INPUT_METHOD";

  /// from: static public final java.lang.String BIND_MIDI_DEVICE_SERVICE
  ///
  /// Must be required by an android.media.midi.MidiDeviceService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature
  static const BIND_MIDI_DEVICE_SERVICE =
      "android.permission.BIND_MIDI_DEVICE_SERVICE";

  /// from: static public final java.lang.String BIND_NFC_SERVICE
  ///
  /// Must be required by a android.nfc.cardemulation.HostApduService
  /// or android.nfc.cardemulation.OffHostApduService to ensure that only
  /// the system can bind to it.
  /// Protection level: signature
  static const BIND_NFC_SERVICE = "android.permission.BIND_NFC_SERVICE";

  /// from: static public final java.lang.String BIND_NOTIFICATION_LISTENER_SERVICE
  ///
  /// Must be required by an android.service.notification.NotificationListenerService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature
  static const BIND_NOTIFICATION_LISTENER_SERVICE =
      "android.permission.BIND_NOTIFICATION_LISTENER_SERVICE";

  /// from: static public final java.lang.String BIND_PRINT_SERVICE
  ///
  /// Must be required by a android.printservice.PrintService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature
  static const BIND_PRINT_SERVICE = "android.permission.BIND_PRINT_SERVICE";

  /// from: static public final java.lang.String BIND_QUICK_SETTINGS_TILE
  ///
  /// Allows an application to bind to third party quick settings tiles.
  /// Should only be requested by the System, should be required by
  /// TileService declarations.
  static const BIND_QUICK_SETTINGS_TILE =
      "android.permission.BIND_QUICK_SETTINGS_TILE";

  /// from: static public final java.lang.String BIND_REMOTEVIEWS
  ///
  /// Must be required by a android.widget.RemoteViewsService,
  /// to ensure that only the system can bind to it.
  static const BIND_REMOTEVIEWS = "android.permission.BIND_REMOTEVIEWS";

  /// from: static public final java.lang.String BIND_SCREENING_SERVICE
  ///
  /// Must be required by a android.telecom.CallScreeningService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature|privileged
  static const BIND_SCREENING_SERVICE =
      "android.permission.BIND_SCREENING_SERVICE";

  /// from: static public final java.lang.String BIND_TELECOM_CONNECTION_SERVICE
  ///
  /// Must be required by a android.telecom.ConnectionService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature|privileged
  static const BIND_TELECOM_CONNECTION_SERVICE =
      "android.permission.BIND_TELECOM_CONNECTION_SERVICE";

  /// from: static public final java.lang.String BIND_TEXT_SERVICE
  ///
  /// Must be required by a TextService (e.g.&nbsp;SpellCheckerService)
  /// to ensure that only the system can bind to it.
  /// Protection level: signature
  static const BIND_TEXT_SERVICE = "android.permission.BIND_TEXT_SERVICE";

  /// from: static public final java.lang.String BIND_TV_INPUT
  ///
  /// Must be required by a android.media.tv.TvInputService
  /// to ensure that only the system can bind to it.
  /// Protection level: signature|privileged
  static const BIND_TV_INPUT = "android.permission.BIND_TV_INPUT";

  /// from: static public final java.lang.String BIND_VISUAL_VOICEMAIL_SERVICE
  ///
  /// Must be required by a link android.telephony.VisualVoicemailService to ensure that
  /// only the system can bind to it.
  /// Protection level: signature|privileged
  static const BIND_VISUAL_VOICEMAIL_SERVICE =
      "android.permission.BIND_VISUAL_VOICEMAIL_SERVICE";

  /// from: static public final java.lang.String BIND_VOICE_INTERACTION
  ///
  /// Must be required by a android.service.voice.VoiceInteractionService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature
  static const BIND_VOICE_INTERACTION =
      "android.permission.BIND_VOICE_INTERACTION";

  /// from: static public final java.lang.String BIND_VPN_SERVICE
  ///
  /// Must be required by a android.net.VpnService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature
  static const BIND_VPN_SERVICE = "android.permission.BIND_VPN_SERVICE";

  /// from: static public final java.lang.String BIND_VR_LISTENER_SERVICE
  ///
  /// Must be required by an android.service.vr.VrListenerService, to ensure that only
  /// the system can bind to it.
  /// Protection level: signature
  static const BIND_VR_LISTENER_SERVICE =
      "android.permission.BIND_VR_LISTENER_SERVICE";

  /// from: static public final java.lang.String BIND_WALLPAPER
  ///
  /// Must be required by a android.service.wallpaper.WallpaperService,
  /// to ensure that only the system can bind to it.
  /// Protection level: signature|privileged
  static const BIND_WALLPAPER = "android.permission.BIND_WALLPAPER";

  /// from: static public final java.lang.String BLUETOOTH
  ///
  /// Allows applications to connect to paired bluetooth devices.
  /// Protection level: normal
  static const BLUETOOTH = "android.permission.BLUETOOTH";

  /// from: static public final java.lang.String BLUETOOTH_ADMIN
  ///
  /// Allows applications to discover and pair bluetooth devices.
  /// Protection level: normal
  static const BLUETOOTH_ADMIN = "android.permission.BLUETOOTH_ADMIN";

  /// from: static public final java.lang.String BLUETOOTH_PRIVILEGED
  ///
  /// Allows applications to pair bluetooth devices without user interaction, and to
  /// allow or disallow phonebook access or message access.
  /// This is not available to third party applications.
  static const BLUETOOTH_PRIVILEGED = "android.permission.BLUETOOTH_PRIVILEGED";

  /// from: static public final java.lang.String BODY_SENSORS
  ///
  /// Allows an application to access data from sensors that the user uses to
  /// measure what is happening inside his/her body, such as heart rate.
  /// Protection level: dangerous
  static const BODY_SENSORS = "android.permission.BODY_SENSORS";

  /// from: static public final java.lang.String BROADCAST_PACKAGE_REMOVED
  ///
  /// Allows an application to broadcast a notification that an application
  /// package has been removed.
  /// Not for use by third-party applications.
  static const BROADCAST_PACKAGE_REMOVED =
      "android.permission.BROADCAST_PACKAGE_REMOVED";

  /// from: static public final java.lang.String BROADCAST_SMS
  ///
  /// Allows an application to broadcast an SMS receipt notification.
  /// Not for use by third-party applications.
  static const BROADCAST_SMS = "android.permission.BROADCAST_SMS";

  /// from: static public final java.lang.String BROADCAST_STICKY
  ///
  /// Allows an application to broadcast sticky intents.  These are
  /// broadcasts whose data is held by the system after being finished,
  /// so that clients can quickly retrieve that data without having
  /// to wait for the next broadcast.
  /// Protection level: normal
  static const BROADCAST_STICKY = "android.permission.BROADCAST_STICKY";

  /// from: static public final java.lang.String BROADCAST_WAP_PUSH
  ///
  /// Allows an application to broadcast a WAP PUSH receipt notification.
  /// Not for use by third-party applications.
  static const BROADCAST_WAP_PUSH = "android.permission.BROADCAST_WAP_PUSH";

  /// from: static public final java.lang.String CALL_PHONE
  ///
  /// Allows an application to initiate a phone call without going through
  /// the Dialer user interface for the user to confirm the call.
  /// Protection level: dangerous
  static const CALL_PHONE = "android.permission.CALL_PHONE";

  /// from: static public final java.lang.String CALL_PRIVILEGED
  ///
  /// Allows an application to call any phone number, including emergency
  /// numbers, without going through the Dialer user interface for the user
  /// to confirm the call being placed.
  /// Not for use by third-party applications.
  static const CALL_PRIVILEGED = "android.permission.CALL_PRIVILEGED";

  /// from: static public final java.lang.String CAMERA
  ///
  /// Required to be able to access the camera device.
  /// This will automatically enforce the <a href="{@docRoot}guide/topics/manifest/uses-feature-element.html">
  /// <uses-feature>}</a> manifest element for _all_ camera features.
  /// If you do not require all camera features or can properly operate if a camera
  /// is not available, then you must modify your manifest as appropriate in order to
  /// install on devices that don't support all camera features.
  ///
  /// Protection level: dangerous
  static const CAMERA = "android.permission.CAMERA";

  /// from: static public final java.lang.String CAPTURE_AUDIO_OUTPUT
  ///
  /// Allows an application to capture audio output.
  /// Not for use by third-party applications.
  ///
  static const CAPTURE_AUDIO_OUTPUT = "android.permission.CAPTURE_AUDIO_OUTPUT";

  /// from: static public final java.lang.String CAPTURE_SECURE_VIDEO_OUTPUT
  ///
  /// Allows an application to capture secure video output.
  /// Not for use by third-party applications.
  ///
  static const CAPTURE_SECURE_VIDEO_OUTPUT =
      "android.permission.CAPTURE_SECURE_VIDEO_OUTPUT";

  /// from: static public final java.lang.String CAPTURE_VIDEO_OUTPUT
  ///
  /// Allows an application to capture video output.
  /// Not for use by third-party applications.
  ///
  static const CAPTURE_VIDEO_OUTPUT = "android.permission.CAPTURE_VIDEO_OUTPUT";

  /// from: static public final java.lang.String CHANGE_COMPONENT_ENABLED_STATE
  ///
  /// Allows an application to change whether an application component (other than its own) is
  /// enabled or not.
  /// Not for use by third-party applications.
  static const CHANGE_COMPONENT_ENABLED_STATE =
      "android.permission.CHANGE_COMPONENT_ENABLED_STATE";

  /// from: static public final java.lang.String CHANGE_CONFIGURATION
  ///
  /// Allows an application to modify the current configuration, such
  /// as locale.
  static const CHANGE_CONFIGURATION = "android.permission.CHANGE_CONFIGURATION";

  /// from: static public final java.lang.String CHANGE_NETWORK_STATE
  ///
  /// Allows applications to change network connectivity state.
  /// Protection level: normal
  static const CHANGE_NETWORK_STATE = "android.permission.CHANGE_NETWORK_STATE";

  /// from: static public final java.lang.String CHANGE_WIFI_MULTICAST_STATE
  ///
  /// Allows applications to enter Wi-Fi Multicast mode.
  /// Protection level: normal
  static const CHANGE_WIFI_MULTICAST_STATE =
      "android.permission.CHANGE_WIFI_MULTICAST_STATE";

  /// from: static public final java.lang.String CHANGE_WIFI_STATE
  ///
  /// Allows applications to change Wi-Fi connectivity state.
  /// Protection level: normal
  static const CHANGE_WIFI_STATE = "android.permission.CHANGE_WIFI_STATE";

  /// from: static public final java.lang.String CLEAR_APP_CACHE
  ///
  /// Allows an application to clear the caches of all installed
  /// applications on the device.
  /// Protection level: signature|privileged
  static const CLEAR_APP_CACHE = "android.permission.CLEAR_APP_CACHE";

  /// from: static public final java.lang.String CONTROL_LOCATION_UPDATES
  ///
  /// Allows enabling/disabling location update notifications from
  /// the radio.
  /// Not for use by third-party applications.
  static const CONTROL_LOCATION_UPDATES =
      "android.permission.CONTROL_LOCATION_UPDATES";

  /// from: static public final java.lang.String DELETE_CACHE_FILES
  ///
  /// Old permission for deleting an app's cache files, no longer used,
  /// but signals for us to quietly ignore calls instead of throwing an exception.
  static const DELETE_CACHE_FILES = "android.permission.DELETE_CACHE_FILES";

  /// from: static public final java.lang.String DELETE_PACKAGES
  ///
  /// Allows an application to delete packages.
  /// Not for use by third-party applications.
  /// Starting in android.os.Build.VERSION_CODES\#N, user confirmation is requested
  /// when the application deleting the package is not the same application that installed the
  /// package.
  static const DELETE_PACKAGES = "android.permission.DELETE_PACKAGES";

  /// from: static public final java.lang.String DIAGNOSTIC
  ///
  /// Allows applications to RW to diagnostic resources.
  /// Not for use by third-party applications.
  static const DIAGNOSTIC = "android.permission.DIAGNOSTIC";

  /// from: static public final java.lang.String DISABLE_KEYGUARD
  ///
  /// Allows applications to disable the keyguard if it is not secure.
  /// Protection level: normal
  static const DISABLE_KEYGUARD = "android.permission.DISABLE_KEYGUARD";

  /// from: static public final java.lang.String DUMP
  ///
  /// Allows an application to retrieve state dump information from system services.
  /// Not for use by third-party applications.
  static const DUMP = "android.permission.DUMP";

  /// from: static public final java.lang.String EXPAND_STATUS_BAR
  ///
  /// Allows an application to expand or collapse the status bar.
  /// Protection level: normal
  static const EXPAND_STATUS_BAR = "android.permission.EXPAND_STATUS_BAR";

  /// from: static public final java.lang.String FACTORY_TEST
  ///
  /// Run as a manufacturer test application, running as the root user.
  /// Only available when the device is running in manufacturer test mode.
  /// Not for use by third-party applications.
  static const FACTORY_TEST = "android.permission.FACTORY_TEST";

  /// from: static public final java.lang.String FOREGROUND_SERVICE
  ///
  /// Allows a regular application to use android.app.Service\#startForeground Service.startForeground.
  /// Protection level: normal
  static const FOREGROUND_SERVICE = "android.permission.FOREGROUND_SERVICE";

  /// from: static public final java.lang.String GET_ACCOUNTS
  ///
  /// Allows access to the list of accounts in the Accounts Service.
  /// <p class="note"><strong>Note:</strong> Beginning with Android 6.0 (API level
  /// 23), if an app shares the signature of the authenticator that manages an
  /// account, it does not need <code>"GET_ACCOUNTS"</code> permission to read
  /// information about that account. On Android 5.1 and lower, all apps need
  /// <code>"GET_ACCOUNTS"</code> permission to read information about any
  /// account.
  ///
  /// Protection level: dangerous
  static const GET_ACCOUNTS = "android.permission.GET_ACCOUNTS";

  /// from: static public final java.lang.String GET_ACCOUNTS_PRIVILEGED
  ///
  /// Allows access to the list of accounts in the Accounts Service.
  static const GET_ACCOUNTS_PRIVILEGED =
      "android.permission.GET_ACCOUNTS_PRIVILEGED";

  /// from: static public final java.lang.String GET_PACKAGE_SIZE
  ///
  /// Allows an application to find out the space used by any package.
  /// Protection level: normal
  static const GET_PACKAGE_SIZE = "android.permission.GET_PACKAGE_SIZE";

  /// from: static public final java.lang.String GET_TASKS
  ///
  /// @deprecated No longer enforced.
  static const GET_TASKS = "android.permission.GET_TASKS";

  /// from: static public final java.lang.String GLOBAL_SEARCH
  ///
  /// This permission can be used on content providers to allow the global
  /// search system to access their data.  Typically it used when the
  /// provider has some permissions protecting it (which global search
  /// would not be expected to hold), and added as a read-only permission
  /// to the path in the provider where global search queries are
  /// performed.  This permission can not be held by regular applications;
  /// it is used by applications to protect themselves from everyone else
  /// besides global search.
  static const GLOBAL_SEARCH = "android.permission.GLOBAL_SEARCH";

  /// from: static public final java.lang.String INSTALL_LOCATION_PROVIDER
  ///
  /// Allows an application to install a location provider into the Location Manager.
  /// Not for use by third-party applications.
  static const INSTALL_LOCATION_PROVIDER =
      "android.permission.INSTALL_LOCATION_PROVIDER";

  /// from: static public final java.lang.String INSTALL_PACKAGES
  ///
  /// Allows an application to install packages.
  /// Not for use by third-party applications.
  static const INSTALL_PACKAGES = "android.permission.INSTALL_PACKAGES";

  /// from: static public final java.lang.String INSTALL_SHORTCUT
  ///
  /// Allows an application to install a shortcut in Launcher.
  /// In Android O (API level 26) and higher, the <code>INSTALL_SHORTCUT</code> broadcast no
  /// longer has any effect on your app because it's a private, implicit
  /// broadcast. Instead, you should create an app shortcut by using the
  /// android.content.pm.ShortcutManager\#requestPinShortcut requestPinShortcut()
  /// method from the android.content.pm.ShortcutManager class.
  /// Protection level: normal
  static const INSTALL_SHORTCUT =
      "com.android.launcher.permission.INSTALL_SHORTCUT";

  /// from: static public final java.lang.String INSTANT_APP_FOREGROUND_SERVICE
  ///
  /// Allows an instant app to create foreground services.
  static const INSTANT_APP_FOREGROUND_SERVICE =
      "android.permission.INSTANT_APP_FOREGROUND_SERVICE";

  /// from: static public final java.lang.String INTERNET
  ///
  /// Allows applications to open network sockets.
  /// Protection level: normal
  static const INTERNET = "android.permission.INTERNET";

  /// from: static public final java.lang.String KILL_BACKGROUND_PROCESSES
  ///
  /// Allows an application to call
  /// android.app.ActivityManager\#killBackgroundProcesses.
  /// Protection level: normal
  static const KILL_BACKGROUND_PROCESSES =
      "android.permission.KILL_BACKGROUND_PROCESSES";

  /// from: static public final java.lang.String LOCATION_HARDWARE
  ///
  /// Allows an application to use location features in hardware,
  /// such as the geofencing api.
  /// Not for use by third-party applications.
  static const LOCATION_HARDWARE = "android.permission.LOCATION_HARDWARE";

  /// from: static public final java.lang.String MANAGE_DOCUMENTS
  ///
  /// Allows an application to manage access to documents, usually as part
  /// of a document picker.
  /// This permission should _only_ be requested by the platform
  /// document management app.  This permission cannot be granted to
  /// third-party apps.
  /// Protection level: signature
  static const MANAGE_DOCUMENTS = "android.permission.MANAGE_DOCUMENTS";

  /// from: static public final java.lang.String MANAGE_OWN_CALLS
  ///
  /// Allows a calling application which manages it own calls through the self-managed
  /// android.telecom.ConnectionService APIs.  See
  /// android.telecom.PhoneAccount\#CAPABILITY_SELF_MANAGED for more information on the
  /// self-managed ConnectionService APIs.
  /// Protection level: normal
  static const MANAGE_OWN_CALLS = "android.permission.MANAGE_OWN_CALLS";

  /// from: static public final java.lang.String MASTER_CLEAR
  ///
  /// Not for use by third-party applications.
  static const MASTER_CLEAR = "android.permission.MASTER_CLEAR";

  /// from: static public final java.lang.String MEDIA_CONTENT_CONTROL
  ///
  /// Allows an application to know what content is playing and control its playback.
  /// Not for use by third-party applications due to privacy of media consumption
  ///
  static const MEDIA_CONTENT_CONTROL =
      "android.permission.MEDIA_CONTENT_CONTROL";

  /// from: static public final java.lang.String MODIFY_AUDIO_SETTINGS
  ///
  /// Allows an application to modify global audio settings.
  /// Protection level: normal
  static const MODIFY_AUDIO_SETTINGS =
      "android.permission.MODIFY_AUDIO_SETTINGS";

  /// from: static public final java.lang.String MODIFY_PHONE_STATE
  ///
  /// Allows modification of the telephony state - power on, mmi, etc.
  /// Does not include placing calls.
  /// Not for use by third-party applications.
  static const MODIFY_PHONE_STATE = "android.permission.MODIFY_PHONE_STATE";

  /// from: static public final java.lang.String MOUNT_FORMAT_FILESYSTEMS
  ///
  /// Allows formatting file systems for removable storage.
  /// Not for use by third-party applications.
  static const MOUNT_FORMAT_FILESYSTEMS =
      "android.permission.MOUNT_FORMAT_FILESYSTEMS";

  /// from: static public final java.lang.String MOUNT_UNMOUNT_FILESYSTEMS
  ///
  /// Allows mounting and unmounting file systems for removable storage.
  /// Not for use by third-party applications.
  static const MOUNT_UNMOUNT_FILESYSTEMS =
      "android.permission.MOUNT_UNMOUNT_FILESYSTEMS";

  /// from: static public final java.lang.String NFC
  ///
  /// Allows applications to perform I/O operations over NFC.
  /// Protection level: normal
  static const NFC = "android.permission.NFC";

  /// from: static public final java.lang.String NFC_TRANSACTION_EVENT
  ///
  /// Allows applications to receive NFC transaction events.
  /// Protection level: normal
  static const NFC_TRANSACTION_EVENT =
      "android.permission.NFC_TRANSACTION_EVENT";

  /// from: static public final java.lang.String PACKAGE_USAGE_STATS
  ///
  /// Allows an application to collect component usage
  /// statistics
  /// Declaring the permission implies intention to use the API and the user of the
  /// device can grant permission through the Settings application.
  static const PACKAGE_USAGE_STATS = "android.permission.PACKAGE_USAGE_STATS";

  /// from: static public final java.lang.String PERSISTENT_ACTIVITY
  ///
  /// @deprecated This functionality will be removed in the future; please do
  /// not use. Allow an application to make its activities persistent.
  static const PERSISTENT_ACTIVITY = "android.permission.PERSISTENT_ACTIVITY";

  /// from: static public final java.lang.String PROCESS_OUTGOING_CALLS
  ///
  /// Allows an application to see the number being dialed during an outgoing
  /// call with the option to redirect the call to a different number or
  /// abort the call altogether.
  /// Protection level: dangerous
  static const PROCESS_OUTGOING_CALLS =
      "android.permission.PROCESS_OUTGOING_CALLS";

  /// from: static public final java.lang.String READ_CALENDAR
  ///
  /// Allows an application to read the user's calendar data.
  /// Protection level: dangerous
  static const READ_CALENDAR = "android.permission.READ_CALENDAR";

  /// from: static public final java.lang.String READ_CALL_LOG
  ///
  /// Allows an application to read the user's call log.
  /// <p class="note"><strong>Note:</strong> If your app uses the
  /// \#READ_CONTACTS permission and _both_ your <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#min">{@code
  /// minSdkVersion}</a> and <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#target">{@code
  /// targetSdkVersion}</a> values are set to 15 or lower, the system implicitly
  /// grants your app this permission. If you don't need this permission, be sure your <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#target">{@code
  /// targetSdkVersion}</a> is 16 or higher.
  ///
  /// Protection level: dangerous
  static const READ_CALL_LOG = "android.permission.READ_CALL_LOG";

  /// from: static public final java.lang.String READ_CONTACTS
  ///
  /// Allows an application to read the user's contacts data.
  /// Protection level: dangerous
  static const READ_CONTACTS = "android.permission.READ_CONTACTS";

  /// from: static public final java.lang.String READ_EXTERNAL_STORAGE
  ///
  /// Allows an application to read from external storage.
  /// Any app that declares the \#WRITE_EXTERNAL_STORAGE permission is implicitly
  /// granted this permission.
  ///
  /// This permission is enforced starting in API level 19.  Before API level 19, this
  /// permission is not enforced and all apps still have access to read from external storage.
  /// You can test your app with the permission enforced by enabling _Protect USB
  /// storage_ under Developer options in the Settings app on a device running Android 4.1 or
  /// higher.
  ///
  /// Also starting in API level 19, this permission is _not_ required to
  /// read/write files in your application-specific directories returned by
  /// android.content.Context\#getExternalFilesDir and
  /// android.content.Context\#getExternalCacheDir.
  /// <p class="note"><strong>Note:</strong> If _both_ your <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#min">{@code
  /// minSdkVersion}</a> and <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#target">{@code
  /// targetSdkVersion}</a> values are set to 3 or lower, the system implicitly
  /// grants your app this permission. If you don't need this permission, be sure your <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#target">{@code
  /// targetSdkVersion}</a> is 4 or higher.
  /// Protection level: dangerous
  static const READ_EXTERNAL_STORAGE =
      "android.permission.READ_EXTERNAL_STORAGE";

  /// from: static public final java.lang.String READ_FRAME_BUFFER
  ///
  /// Allows an application to take screen shots and more generally
  /// get access to the frame buffer data.
  /// Not for use by third-party applications.
  static const READ_FRAME_BUFFER = "android.permission.READ_FRAME_BUFFER";

  /// from: static public final java.lang.String READ_INPUT_STATE
  ///
  /// Allows an application to retrieve the current state of keys and
  /// switches.
  /// Not for use by third-party applications.
  ///@deprecated The API that used this permission has been removed.
  static const READ_INPUT_STATE = "android.permission.READ_INPUT_STATE";

  /// from: static public final java.lang.String READ_LOGS
  ///
  /// Allows an application to read the low-level system log files.
  /// Not for use by third-party applications, because
  /// Log entries can contain the user's private information.
  static const READ_LOGS = "android.permission.READ_LOGS";

  /// from: static public final java.lang.String READ_PHONE_NUMBERS
  ///
  /// Allows read access to the device's phone number(s). This is a subset of the capabilities
  /// granted by \#READ_PHONE_STATE but is exposed to instant applications.
  /// Protection level: dangerous
  static const READ_PHONE_NUMBERS = "android.permission.READ_PHONE_NUMBERS";

  /// from: static public final java.lang.String READ_PHONE_STATE
  ///
  /// Allows read only access to phone state, including the phone number of the device,
  /// current cellular network information, the status of any ongoing calls, and a list of any
  /// android.telecom.PhoneAccounts registered on the device.
  /// <p class="note"><strong>Note:</strong> If _both_ your <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#min">{@code
  /// minSdkVersion}</a> and <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#target">{@code
  /// targetSdkVersion}</a> values are set to 3 or lower, the system implicitly
  /// grants your app this permission. If you don't need this permission, be sure your <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#target">{@code
  /// targetSdkVersion}</a> is 4 or higher.
  /// Protection level: dangerous
  static const READ_PHONE_STATE = "android.permission.READ_PHONE_STATE";

  /// from: static public final java.lang.String READ_SMS
  ///
  /// Allows an application to read SMS messages.
  /// Protection level: dangerous
  static const READ_SMS = "android.permission.READ_SMS";

  /// from: static public final java.lang.String READ_SYNC_SETTINGS
  ///
  /// Allows applications to read the sync settings.
  /// Protection level: normal
  static const READ_SYNC_SETTINGS = "android.permission.READ_SYNC_SETTINGS";

  /// from: static public final java.lang.String READ_SYNC_STATS
  ///
  /// Allows applications to read the sync stats.
  /// Protection level: normal
  static const READ_SYNC_STATS = "android.permission.READ_SYNC_STATS";

  /// from: static public final java.lang.String READ_VOICEMAIL
  ///
  /// Allows an application to read voicemails in the system.
  /// Protection level: signature|privileged
  static const READ_VOICEMAIL =
      "com.android.voicemail.permission.READ_VOICEMAIL";

  /// from: static public final java.lang.String REBOOT
  ///
  /// Required to be able to reboot the device.
  /// Not for use by third-party applications.
  static const REBOOT = "android.permission.REBOOT";

  /// from: static public final java.lang.String RECEIVE_BOOT_COMPLETED
  ///
  /// Allows an application to receive the
  /// android.content.Intent\#ACTION_BOOT_COMPLETED that is
  /// broadcast after the system finishes booting.  If you don't
  /// request this permission, you will not receive the broadcast at
  /// that time.  Though holding this permission does not have any
  /// security implications, it can have a negative impact on the
  /// user experience by increasing the amount of time it takes the
  /// system to start and allowing applications to have themselves
  /// running without the user being aware of them.  As such, you must
  /// explicitly declare your use of this facility to make that visible
  /// to the user.
  /// Protection level: normal
  static const RECEIVE_BOOT_COMPLETED =
      "android.permission.RECEIVE_BOOT_COMPLETED";

  /// from: static public final java.lang.String RECEIVE_MMS
  ///
  /// Allows an application to monitor incoming MMS messages.
  /// Protection level: dangerous
  static const RECEIVE_MMS = "android.permission.RECEIVE_MMS";

  /// from: static public final java.lang.String RECEIVE_SMS
  ///
  /// Allows an application to receive SMS messages.
  /// Protection level: dangerous
  static const RECEIVE_SMS = "android.permission.RECEIVE_SMS";

  /// from: static public final java.lang.String RECEIVE_WAP_PUSH
  ///
  /// Allows an application to receive WAP push messages.
  /// Protection level: dangerous
  static const RECEIVE_WAP_PUSH = "android.permission.RECEIVE_WAP_PUSH";

  /// from: static public final java.lang.String RECORD_AUDIO
  ///
  /// Allows an application to record audio.
  /// Protection level: dangerous
  static const RECORD_AUDIO = "android.permission.RECORD_AUDIO";

  /// from: static public final java.lang.String REORDER_TASKS
  ///
  /// Allows an application to change the Z-order of tasks.
  /// Protection level: normal
  static const REORDER_TASKS = "android.permission.REORDER_TASKS";

  /// from: static public final java.lang.String REQUEST_COMPANION_RUN_IN_BACKGROUND
  ///
  /// Allows a companion app to run in the background.
  /// Protection level: normal
  static const REQUEST_COMPANION_RUN_IN_BACKGROUND =
      "android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND";

  /// from: static public final java.lang.String REQUEST_COMPANION_USE_DATA_IN_BACKGROUND
  ///
  /// Allows a companion app to use data in the background.
  /// Protection level: normal
  static const REQUEST_COMPANION_USE_DATA_IN_BACKGROUND =
      "android.permission.REQUEST_COMPANION_USE_DATA_IN_BACKGROUND";

  /// from: static public final java.lang.String REQUEST_DELETE_PACKAGES
  ///
  /// Allows an application to request deleting packages. Apps
  /// targeting APIs android.os.Build.VERSION_CODES\#P or greater must hold this
  /// permission in order to use android.content.Intent\#ACTION_UNINSTALL_PACKAGE or
  /// android.content.pm.PackageInstaller\#uninstall.
  /// Protection level: normal
  static const REQUEST_DELETE_PACKAGES =
      "android.permission.REQUEST_DELETE_PACKAGES";

  /// from: static public final java.lang.String REQUEST_IGNORE_BATTERY_OPTIMIZATIONS
  ///
  /// Permission an application must hold in order to use
  /// android.provider.Settings\#ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS.
  /// This is a normal permission: an app requesting it will always be granted the
  /// permission, without the user needing to approve or see it.
  static const REQUEST_IGNORE_BATTERY_OPTIMIZATIONS =
      "android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS";

  /// from: static public final java.lang.String REQUEST_INSTALL_PACKAGES
  ///
  /// Allows an application to request installing packages. Apps
  /// targeting APIs greater than 25 must hold this permission in
  /// order to use android.content.Intent\#ACTION_INSTALL_PACKAGE.
  /// Protection level: signature
  static const REQUEST_INSTALL_PACKAGES =
      "android.permission.REQUEST_INSTALL_PACKAGES";

  /// from: static public final java.lang.String RESTART_PACKAGES
  ///
  /// @deprecated The android.app.ActivityManager\#restartPackage
  /// API is no longer supported.
  static const RESTART_PACKAGES = "android.permission.RESTART_PACKAGES";

  /// from: static public final java.lang.String SEND_RESPOND_VIA_MESSAGE
  ///
  /// Allows an application (Phone) to send a request to other applications
  /// to handle the respond-via-message action during incoming calls.
  /// Not for use by third-party applications.
  static const SEND_RESPOND_VIA_MESSAGE =
      "android.permission.SEND_RESPOND_VIA_MESSAGE";

  /// from: static public final java.lang.String SEND_SMS
  ///
  /// Allows an application to send SMS messages.
  /// Protection level: dangerous
  static const SEND_SMS = "android.permission.SEND_SMS";

  /// from: static public final java.lang.String SET_ALARM
  ///
  /// Allows an application to broadcast an Intent to set an alarm for the user.
  /// Protection level: normal
  static const SET_ALARM = "com.android.alarm.permission.SET_ALARM";

  /// from: static public final java.lang.String SET_ALWAYS_FINISH
  ///
  /// Allows an application to control whether activities are immediately
  /// finished when put in the background.
  /// Not for use by third-party applications.
  static const SET_ALWAYS_FINISH = "android.permission.SET_ALWAYS_FINISH";

  /// from: static public final java.lang.String SET_ANIMATION_SCALE
  ///
  /// Modify the global animation scaling factor.
  /// Not for use by third-party applications.
  static const SET_ANIMATION_SCALE = "android.permission.SET_ANIMATION_SCALE";

  /// from: static public final java.lang.String SET_DEBUG_APP
  ///
  /// Configure an application for debugging.
  /// Not for use by third-party applications.
  static const SET_DEBUG_APP = "android.permission.SET_DEBUG_APP";

  /// from: static public final java.lang.String SET_PREFERRED_APPLICATIONS
  ///
  /// @deprecated No longer useful, see
  /// android.content.pm.PackageManager\#addPackageToPreferred
  /// for details.
  static const SET_PREFERRED_APPLICATIONS =
      "android.permission.SET_PREFERRED_APPLICATIONS";

  /// from: static public final java.lang.String SET_PROCESS_LIMIT
  ///
  /// Allows an application to set the maximum number of (not needed)
  /// application processes that can be running.
  /// Not for use by third-party applications.
  static const SET_PROCESS_LIMIT = "android.permission.SET_PROCESS_LIMIT";

  /// from: static public final java.lang.String SET_TIME
  ///
  /// Allows applications to set the system time.
  /// Not for use by third-party applications.
  static const SET_TIME = "android.permission.SET_TIME";

  /// from: static public final java.lang.String SET_TIME_ZONE
  ///
  /// Allows applications to set the system time zone.
  /// Not for use by third-party applications.
  static const SET_TIME_ZONE = "android.permission.SET_TIME_ZONE";

  /// from: static public final java.lang.String SET_WALLPAPER
  ///
  /// Allows applications to set the wallpaper.
  /// Protection level: normal
  static const SET_WALLPAPER = "android.permission.SET_WALLPAPER";

  /// from: static public final java.lang.String SET_WALLPAPER_HINTS
  ///
  /// Allows applications to set the wallpaper hints.
  /// Protection level: normal
  static const SET_WALLPAPER_HINTS = "android.permission.SET_WALLPAPER_HINTS";

  /// from: static public final java.lang.String SIGNAL_PERSISTENT_PROCESSES
  ///
  /// Allow an application to request that a signal be sent to all persistent processes.
  /// Not for use by third-party applications.
  static const SIGNAL_PERSISTENT_PROCESSES =
      "android.permission.SIGNAL_PERSISTENT_PROCESSES";

  /// from: static public final java.lang.String STATUS_BAR
  ///
  /// Allows an application to open, close, or disable the status bar
  /// and its icons.
  /// Not for use by third-party applications.
  static const STATUS_BAR = "android.permission.STATUS_BAR";

  /// from: static public final java.lang.String SYSTEM_ALERT_WINDOW
  ///
  /// Allows an app to create windows using the type
  /// android.view.WindowManager.LayoutParams\#TYPE_APPLICATION_OVERLAY,
  /// shown on top of all other apps.  Very few apps
  /// should use this permission; these windows are intended for
  /// system-level interaction with the user.
  /// <p class="note"><strong>Note:</strong> If the app
  /// targets API level 23 or higher, the app user must explicitly grant
  /// this permission to the app through a permission management screen. The app requests
  /// the user's approval by sending an intent with action
  /// android.provider.Settings\#ACTION_MANAGE_OVERLAY_PERMISSION.
  /// The app can check whether it has this authorization by calling
  /// android.provider.Settings\#canDrawOverlays Settings.canDrawOverlays().
  /// Protection level: signature
  static const SYSTEM_ALERT_WINDOW = "android.permission.SYSTEM_ALERT_WINDOW";

  /// from: static public final java.lang.String TRANSMIT_IR
  ///
  /// Allows using the device's IR transmitter, if available.
  /// Protection level: normal
  static const TRANSMIT_IR = "android.permission.TRANSMIT_IR";

  /// from: static public final java.lang.String UNINSTALL_SHORTCUT
  ///
  /// <p class="caution"><strong>Don't use this permission in your app.</strong><br>This
  /// permission is no longer supported.
  static const UNINSTALL_SHORTCUT =
      "com.android.launcher.permission.UNINSTALL_SHORTCUT";

  /// from: static public final java.lang.String UPDATE_DEVICE_STATS
  ///
  /// Allows an application to update device statistics.
  /// Not for use by third-party applications.
  static const UPDATE_DEVICE_STATS = "android.permission.UPDATE_DEVICE_STATS";

  /// from: static public final java.lang.String USE_BIOMETRIC
  ///
  /// Allows an app to use device supported biometric modalities.
  /// Protection level: normal
  static const USE_BIOMETRIC = "android.permission.USE_BIOMETRIC";

  /// from: static public final java.lang.String USE_FINGERPRINT
  ///
  /// Allows an app to use fingerprint hardware.
  /// Protection level: normal
  ///@deprecated Applications should request android.Manifest.permission\#USE_BIOMETRIC instead
  static const USE_FINGERPRINT = "android.permission.USE_FINGERPRINT";

  /// from: static public final java.lang.String USE_SIP
  ///
  /// Allows an application to use SIP service.
  /// Protection level: dangerous
  static const USE_SIP = "android.permission.USE_SIP";

  /// from: static public final java.lang.String VIBRATE
  ///
  /// Allows access to the vibrator.
  /// Protection level: normal
  static const VIBRATE = "android.permission.VIBRATE";

  /// from: static public final java.lang.String WAKE_LOCK
  ///
  /// Allows using PowerManager WakeLocks to keep processor from sleeping or screen
  /// from dimming.
  /// Protection level: normal
  static const WAKE_LOCK = "android.permission.WAKE_LOCK";

  /// from: static public final java.lang.String WRITE_APN_SETTINGS
  ///
  /// Allows applications to write the apn settings.
  /// Not for use by third-party applications.
  static const WRITE_APN_SETTINGS = "android.permission.WRITE_APN_SETTINGS";

  /// from: static public final java.lang.String WRITE_CALENDAR
  ///
  /// Allows an application to write the user's calendar data.
  /// Protection level: dangerous
  static const WRITE_CALENDAR = "android.permission.WRITE_CALENDAR";

  /// from: static public final java.lang.String WRITE_CALL_LOG
  ///
  /// Allows an application to write (but not read) the user's
  /// call log data.
  /// <p class="note"><strong>Note:</strong> If your app uses the
  /// \#WRITE_CONTACTS permission and _both_ your <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#min">{@code
  /// minSdkVersion}</a> and <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#target">{@code
  /// targetSdkVersion}</a> values are set to 15 or lower, the system implicitly
  /// grants your app this permission. If you don't need this permission, be sure your <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#target">{@code
  /// targetSdkVersion}</a> is 16 or higher.
  ///
  /// Protection level: dangerous
  static const WRITE_CALL_LOG = "android.permission.WRITE_CALL_LOG";

  /// from: static public final java.lang.String WRITE_CONTACTS
  ///
  /// Allows an application to write the user's contacts data.
  /// Protection level: dangerous
  static const WRITE_CONTACTS = "android.permission.WRITE_CONTACTS";

  /// from: static public final java.lang.String WRITE_EXTERNAL_STORAGE
  ///
  /// Allows an application to write to external storage.
  /// <p class="note"><strong>Note:</strong> If _both_ your <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#min">{@code
  /// minSdkVersion}</a> and <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#target">{@code
  /// targetSdkVersion}</a> values are set to 3 or lower, the system implicitly
  /// grants your app this permission. If you don't need this permission, be sure your <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html\#target">{@code
  /// targetSdkVersion}</a> is 4 or higher.
  /// Starting in API level 19, this permission is _not_ required to
  /// read/write files in your application-specific directories returned by
  /// android.content.Context\#getExternalFilesDir and
  /// android.content.Context\#getExternalCacheDir.
  /// Protection level: dangerous
  static const WRITE_EXTERNAL_STORAGE =
      "android.permission.WRITE_EXTERNAL_STORAGE";

  /// from: static public final java.lang.String WRITE_GSERVICES
  ///
  /// Allows an application to modify the Google service map.
  /// Not for use by third-party applications.
  static const WRITE_GSERVICES = "android.permission.WRITE_GSERVICES";

  /// from: static public final java.lang.String WRITE_SECURE_SETTINGS
  ///
  /// Allows an application to read or write the secure system settings.
  /// Not for use by third-party applications.
  static const WRITE_SECURE_SETTINGS =
      "android.permission.WRITE_SECURE_SETTINGS";

  /// from: static public final java.lang.String WRITE_SETTINGS
  ///
  /// Allows an application to read or write the system settings.
  /// <p class="note"><strong>Note:</strong> If the app targets API level 23
  /// or higher, the app user
  /// must explicitly grant this permission to the app through a permission management screen.
  /// The app requests the user's approval by sending an intent with action
  /// android.provider.Settings\#ACTION_MANAGE_WRITE_SETTINGS. The app
  /// can check whether it has this authorization by calling android.provider.Settings.System\#canWrite Settings.System.canWrite().
  /// Protection level: signature
  static const WRITE_SETTINGS = "android.permission.WRITE_SETTINGS";

  /// from: static public final java.lang.String WRITE_SYNC_SETTINGS
  ///
  /// Allows applications to write the sync settings.
  /// Protection level: normal
  static const WRITE_SYNC_SETTINGS = "android.permission.WRITE_SYNC_SETTINGS";

  /// from: static public final java.lang.String WRITE_VOICEMAIL
  ///
  /// Allows an application to modify and remove existing voicemails in the system.
  /// Protection level: signature|privileged
  static const WRITE_VOICEMAIL =
      "com.android.voicemail.permission.WRITE_VOICEMAIL";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Manifest_permission()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
