// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "GestureStore.dart" as gesturestore_;

import "Gesture.dart" as gesture_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.gesture.GestureLibrary
class GestureLibrary extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/gesture/GestureLibrary");
  GestureLibrary.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_mStore = jniAccessors.getFieldIDOf(
      _classRef, "mStore", "Landroid/gesture/GestureStore;");

  /// from: protected final android.gesture.GestureStore mStore
  /// The returned object must be deleted after use, by calling the `delete` method.
  gesturestore_.GestureStore get mStore =>
      gesturestore_.GestureStore.fromRef(jniAccessors
          .getField(reference, _id_mStore, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: protected void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GestureLibrary()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_save = jniAccessors.getMethodIDOf(_classRef, "save", "()Z");

  /// from: public abstract boolean save()
  bool save() => jniAccessors.callMethodWithArgs(
      reference, _id_save, jni.JniType.booleanType, []).boolean;

  static final _id_load = jniAccessors.getMethodIDOf(_classRef, "load", "()Z");

  /// from: public abstract boolean load()
  bool load() => jniAccessors.callMethodWithArgs(
      reference, _id_load, jni.JniType.booleanType, []).boolean;

  static final _id_isReadOnly =
      jniAccessors.getMethodIDOf(_classRef, "isReadOnly", "()Z");

  /// from: public boolean isReadOnly()
  bool isReadOnly() => jniAccessors.callMethodWithArgs(
      reference, _id_isReadOnly, jni.JniType.booleanType, []).boolean;

  static final _id_setOrientationStyle =
      jniAccessors.getMethodIDOf(_classRef, "setOrientationStyle", "(I)V");

  /// from: public void setOrientationStyle(int style)
  void setOrientationStyle(int style) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setOrientationStyle,
      jni.JniType.voidType,
      [style]).check();

  static final _id_getOrientationStyle =
      jniAccessors.getMethodIDOf(_classRef, "getOrientationStyle", "()I");

  /// from: public int getOrientationStyle()
  int getOrientationStyle() => jniAccessors.callMethodWithArgs(
      reference, _id_getOrientationStyle, jni.JniType.intType, []).integer;

  static final _id_setSequenceType =
      jniAccessors.getMethodIDOf(_classRef, "setSequenceType", "(I)V");

  /// from: public void setSequenceType(int type)
  void setSequenceType(int type) => jniAccessors.callMethodWithArgs(
      reference, _id_setSequenceType, jni.JniType.voidType, [type]).check();

  static final _id_getSequenceType =
      jniAccessors.getMethodIDOf(_classRef, "getSequenceType", "()I");

  /// from: public int getSequenceType()
  int getSequenceType() => jniAccessors.callMethodWithArgs(
      reference, _id_getSequenceType, jni.JniType.intType, []).integer;

  static final _id_getGestureEntries = jniAccessors.getMethodIDOf(
      _classRef, "getGestureEntries", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.String> getGestureEntries()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getGestureEntries() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getGestureEntries, jni.JniType.objectType, []).object);

  static final _id_recognize = jniAccessors.getMethodIDOf(_classRef,
      "recognize", "(Landroid/gesture/Gesture;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList<android.gesture.Prediction> recognize(android.gesture.Gesture gesture)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject recognize(gesture_.Gesture gesture) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_recognize, jni.JniType.objectType, [gesture.reference]).object);

  static final _id_addGesture = jniAccessors.getMethodIDOf(_classRef,
      "addGesture", "(Ljava/lang/String;Landroid/gesture/Gesture;)V");

  /// from: public void addGesture(java.lang.String entryName, android.gesture.Gesture gesture)
  void addGesture(jni.JniString entryName, gesture_.Gesture gesture) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addGesture,
          jni.JniType.voidType,
          [entryName.reference, gesture.reference]).check();

  static final _id_removeGesture = jniAccessors.getMethodIDOf(_classRef,
      "removeGesture", "(Ljava/lang/String;Landroid/gesture/Gesture;)V");

  /// from: public void removeGesture(java.lang.String entryName, android.gesture.Gesture gesture)
  void removeGesture(jni.JniString entryName, gesture_.Gesture gesture) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeGesture,
          jni.JniType.voidType,
          [entryName.reference, gesture.reference]).check();

  static final _id_removeEntry = jniAccessors.getMethodIDOf(
      _classRef, "removeEntry", "(Ljava/lang/String;)V");

  /// from: public void removeEntry(java.lang.String entryName)
  void removeEntry(jni.JniString entryName) => jniAccessors.callMethodWithArgs(
      reference,
      _id_removeEntry,
      jni.JniType.voidType,
      [entryName.reference]).check();

  static final _id_getGestures = jniAccessors.getMethodIDOf(
      _classRef, "getGestures", "(Ljava/lang/String;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList<android.gesture.Gesture> getGestures(java.lang.String entryName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getGestures(jni.JniString entryName) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getGestures,
          jni.JniType.objectType,
          [entryName.reference]).object);
}
