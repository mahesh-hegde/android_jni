// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../graphics/RectF.dart" as rectf_;

import "../graphics/Path.dart" as path_;

import "OrientedBoundingBox.dart" as orientedboundingbox_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.gesture.GestureStroke
///
/// A gesture stroke started on a touch down and ended on a touch up. A stroke
/// consists of a sequence of timed points. One or multiple strokes form a gesture.
class GestureStroke extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/gesture/GestureStroke");
  GestureStroke.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_boundingBox = jniAccessors.getFieldIDOf(
      _classRef, "boundingBox", "Landroid/graphics/RectF;");

  /// from: public final android.graphics.RectF boundingBox
  /// The returned object must be deleted after use, by calling the `delete` method.
  rectf_.RectF get boundingBox => rectf_.RectF.fromRef(jniAccessors
      .getField(reference, _id_boundingBox, jni.JniType.objectType)
      .object);

  static final _id_length = jniAccessors.getFieldIDOf(_classRef, "length", "F");

  /// from: public final float length
  double get length =>
      jniAccessors.getField(reference, _id_length, jni.JniType.floatType).float;

  static final _id_points =
      jniAccessors.getFieldIDOf(_classRef, "points", "[F");

  /// from: public final float[] points
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject get points => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_points, jni.JniType.objectType)
      .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/util/ArrayList;)V");

  /// from: public void <init>(java.util.ArrayList<android.gesture.GesturePoint> points)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A constructor that constructs a gesture stroke from a list of gesture points.
  ///@param points
  GestureStroke(jni.JniObject points)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [points.reference]).object);

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, "clone", "()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject clone() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_getPath = jniAccessors.getMethodIDOf(
      _classRef, "getPath", "()Landroid/graphics/Path;");

  /// from: public android.graphics.Path getPath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  path_.Path getPath() => path_.Path.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getPath, jni.JniType.objectType, []).object);

  static final _id_toPath = jniAccessors.getMethodIDOf(
      _classRef, "toPath", "(FFI)Landroid/graphics/Path;");

  /// from: public android.graphics.Path toPath(float width, float height, int numSample)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Converts the stroke to a Path of a given number of points.
  ///@param width the width of the bounding box of the target path
  ///@param height the height of the bounding box of the target path
  ///@param numSample the number of points needed
  ///@return the path
  path_.Path toPath(double width, double height, int numSample) =>
      path_.Path.fromRef(jniAccessors.callMethodWithArgs(reference, _id_toPath,
          jni.JniType.objectType, [width, height, numSample]).object);

  static final _id_clearPath =
      jniAccessors.getMethodIDOf(_classRef, "clearPath", "()V");

  /// from: public void clearPath()
  ///
  /// Invalidates the cached path that is used to render the stroke.
  void clearPath() => jniAccessors.callMethodWithArgs(
      reference, _id_clearPath, jni.JniType.voidType, []).check();

  static final _id_computeOrientedBoundingBox = jniAccessors.getMethodIDOf(
      _classRef,
      "computeOrientedBoundingBox",
      "()Landroid/gesture/OrientedBoundingBox;");

  /// from: public android.gesture.OrientedBoundingBox computeOrientedBoundingBox()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Computes an oriented bounding box of the stroke.
  ///@return OrientedBoundingBox
  orientedboundingbox_.OrientedBoundingBox computeOrientedBoundingBox() =>
      orientedboundingbox_.OrientedBoundingBox.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_computeOrientedBoundingBox,
              jni.JniType.objectType, []).object);
}
