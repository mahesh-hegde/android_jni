// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../widget/FrameLayout.dart" as framelayout_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "Gesture.dart" as gesture_;

import "../graphics/Path.dart" as path_;

import "../graphics/Canvas.dart" as canvas_;

import "../view/MotionEvent.dart" as motionevent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.gesture.GestureOverlayView
///
/// A transparent overlay for gesture input that can be placed on top of other
/// widgets or contain other widgets.
///@attr ref android.R.styleable\#GestureOverlayView_eventsInterceptionEnabled
///@attr ref android.R.styleable\#GestureOverlayView_fadeDuration
///@attr ref android.R.styleable\#GestureOverlayView_fadeOffset
///@attr ref android.R.styleable\#GestureOverlayView_fadeEnabled
///@attr ref android.R.styleable\#GestureOverlayView_gestureStrokeWidth
///@attr ref android.R.styleable\#GestureOverlayView_gestureStrokeAngleThreshold
///@attr ref android.R.styleable\#GestureOverlayView_gestureStrokeLengthThreshold
///@attr ref android.R.styleable\#GestureOverlayView_gestureStrokeSquarenessThreshold
///@attr ref android.R.styleable\#GestureOverlayView_gestureStrokeType
///@attr ref android.R.styleable\#GestureOverlayView_gestureColor
///@attr ref android.R.styleable\#GestureOverlayView_orientation
///@attr ref android.R.styleable\#GestureOverlayView_uncertainGestureColor
class GestureOverlayView extends framelayout_.FrameLayout {
  static final _classRef =
      jniAccessors.getClassOf("android/gesture/GestureOverlayView");
  GestureOverlayView.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int GESTURE_STROKE_TYPE_MULTIPLE
  static const GESTURE_STROKE_TYPE_MULTIPLE = 1;

  /// from: static public final int GESTURE_STROKE_TYPE_SINGLE
  static const GESTURE_STROKE_TYPE_SINGLE = 0;

  /// from: static public final int ORIENTATION_HORIZONTAL
  static const ORIENTATION_HORIZONTAL = 0;

  /// from: static public final int ORIENTATION_VERTICAL
  static const ORIENTATION_VERTICAL = 1;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GestureOverlayView(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GestureOverlayView.ctor1(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GestureOverlayView.ctor2(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GestureOverlayView.ctor3(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_getCurrentStroke = jniAccessors.getMethodIDOf(
      _classRef, "getCurrentStroke", "()Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList<android.gesture.GesturePoint> getCurrentStroke()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getCurrentStroke() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCurrentStroke, jni.JniType.objectType, []).object);

  static final _id_getOrientation =
      jniAccessors.getMethodIDOf(_classRef, "getOrientation", "()I");

  /// from: public int getOrientation()
  int getOrientation() => jniAccessors.callMethodWithArgs(
      reference, _id_getOrientation, jni.JniType.intType, []).integer;

  static final _id_setOrientation =
      jniAccessors.getMethodIDOf(_classRef, "setOrientation", "(I)V");

  /// from: public void setOrientation(int orientation)
  void setOrientation(int orientation) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setOrientation,
      jni.JniType.voidType,
      [orientation]).check();

  static final _id_setGestureColor =
      jniAccessors.getMethodIDOf(_classRef, "setGestureColor", "(I)V");

  /// from: public void setGestureColor(int color)
  void setGestureColor(int color) => jniAccessors.callMethodWithArgs(
      reference, _id_setGestureColor, jni.JniType.voidType, [color]).check();

  static final _id_setUncertainGestureColor =
      jniAccessors.getMethodIDOf(_classRef, "setUncertainGestureColor", "(I)V");

  /// from: public void setUncertainGestureColor(int color)
  void setUncertainGestureColor(int color) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setUncertainGestureColor,
      jni.JniType.voidType,
      [color]).check();

  static final _id_getUncertainGestureColor =
      jniAccessors.getMethodIDOf(_classRef, "getUncertainGestureColor", "()I");

  /// from: public int getUncertainGestureColor()
  int getUncertainGestureColor() => jniAccessors.callMethodWithArgs(
      reference, _id_getUncertainGestureColor, jni.JniType.intType, []).integer;

  static final _id_getGestureColor =
      jniAccessors.getMethodIDOf(_classRef, "getGestureColor", "()I");

  /// from: public int getGestureColor()
  int getGestureColor() => jniAccessors.callMethodWithArgs(
      reference, _id_getGestureColor, jni.JniType.intType, []).integer;

  static final _id_getGestureStrokeWidth =
      jniAccessors.getMethodIDOf(_classRef, "getGestureStrokeWidth", "()F");

  /// from: public float getGestureStrokeWidth()
  double getGestureStrokeWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getGestureStrokeWidth, jni.JniType.floatType, []).float;

  static final _id_setGestureStrokeWidth =
      jniAccessors.getMethodIDOf(_classRef, "setGestureStrokeWidth", "(F)V");

  /// from: public void setGestureStrokeWidth(float gestureStrokeWidth)
  void setGestureStrokeWidth(double gestureStrokeWidth) =>
      jniAccessors.callMethodWithArgs(reference, _id_setGestureStrokeWidth,
          jni.JniType.voidType, [gestureStrokeWidth]).check();

  static final _id_getGestureStrokeType =
      jniAccessors.getMethodIDOf(_classRef, "getGestureStrokeType", "()I");

  /// from: public int getGestureStrokeType()
  int getGestureStrokeType() => jniAccessors.callMethodWithArgs(
      reference, _id_getGestureStrokeType, jni.JniType.intType, []).integer;

  static final _id_setGestureStrokeType =
      jniAccessors.getMethodIDOf(_classRef, "setGestureStrokeType", "(I)V");

  /// from: public void setGestureStrokeType(int gestureStrokeType)
  void setGestureStrokeType(int gestureStrokeType) =>
      jniAccessors.callMethodWithArgs(reference, _id_setGestureStrokeType,
          jni.JniType.voidType, [gestureStrokeType]).check();

  static final _id_getGestureStrokeLengthThreshold = jniAccessors.getMethodIDOf(
      _classRef, "getGestureStrokeLengthThreshold", "()F");

  /// from: public float getGestureStrokeLengthThreshold()
  double getGestureStrokeLengthThreshold() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getGestureStrokeLengthThreshold,
      jni.JniType.floatType, []).float;

  static final _id_setGestureStrokeLengthThreshold = jniAccessors.getMethodIDOf(
      _classRef, "setGestureStrokeLengthThreshold", "(F)V");

  /// from: public void setGestureStrokeLengthThreshold(float gestureStrokeLengthThreshold)
  void setGestureStrokeLengthThreshold(double gestureStrokeLengthThreshold) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setGestureStrokeLengthThreshold,
          jni.JniType.voidType,
          [gestureStrokeLengthThreshold]).check();

  static final _id_getGestureStrokeSquarenessTreshold = jniAccessors
      .getMethodIDOf(_classRef, "getGestureStrokeSquarenessTreshold", "()F");

  /// from: public float getGestureStrokeSquarenessTreshold()
  double getGestureStrokeSquarenessTreshold() =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getGestureStrokeSquarenessTreshold,
          jni.JniType.floatType, []).float;

  static final _id_setGestureStrokeSquarenessTreshold = jniAccessors
      .getMethodIDOf(_classRef, "setGestureStrokeSquarenessTreshold", "(F)V");

  /// from: public void setGestureStrokeSquarenessTreshold(float gestureStrokeSquarenessTreshold)
  void setGestureStrokeSquarenessTreshold(
          double gestureStrokeSquarenessTreshold) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setGestureStrokeSquarenessTreshold,
          jni.JniType.voidType,
          [gestureStrokeSquarenessTreshold]).check();

  static final _id_getGestureStrokeAngleThreshold = jniAccessors.getMethodIDOf(
      _classRef, "getGestureStrokeAngleThreshold", "()F");

  /// from: public float getGestureStrokeAngleThreshold()
  double getGestureStrokeAngleThreshold() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getGestureStrokeAngleThreshold,
      jni.JniType.floatType, []).float;

  static final _id_setGestureStrokeAngleThreshold = jniAccessors.getMethodIDOf(
      _classRef, "setGestureStrokeAngleThreshold", "(F)V");

  /// from: public void setGestureStrokeAngleThreshold(float gestureStrokeAngleThreshold)
  void setGestureStrokeAngleThreshold(double gestureStrokeAngleThreshold) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setGestureStrokeAngleThreshold,
          jni.JniType.voidType,
          [gestureStrokeAngleThreshold]).check();

  static final _id_isEventsInterceptionEnabled = jniAccessors.getMethodIDOf(
      _classRef, "isEventsInterceptionEnabled", "()Z");

  /// from: public boolean isEventsInterceptionEnabled()
  bool isEventsInterceptionEnabled() => jniAccessors.callMethodWithArgs(
      reference,
      _id_isEventsInterceptionEnabled,
      jni.JniType.booleanType, []).boolean;

  static final _id_setEventsInterceptionEnabled = jniAccessors.getMethodIDOf(
      _classRef, "setEventsInterceptionEnabled", "(Z)V");

  /// from: public void setEventsInterceptionEnabled(boolean enabled)
  void setEventsInterceptionEnabled(bool enabled) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setEventsInterceptionEnabled,
          jni.JniType.voidType,
          [enabled]).check();

  static final _id_isFadeEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isFadeEnabled", "()Z");

  /// from: public boolean isFadeEnabled()
  bool isFadeEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_isFadeEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_setFadeEnabled =
      jniAccessors.getMethodIDOf(_classRef, "setFadeEnabled", "(Z)V");

  /// from: public void setFadeEnabled(boolean fadeEnabled)
  void setFadeEnabled(bool fadeEnabled) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setFadeEnabled,
      jni.JniType.voidType,
      [fadeEnabled]).check();

  static final _id_getGesture = jniAccessors.getMethodIDOf(
      _classRef, "getGesture", "()Landroid/gesture/Gesture;");

  /// from: public android.gesture.Gesture getGesture()
  /// The returned object must be deleted after use, by calling the `delete` method.
  gesture_.Gesture getGesture() =>
      gesture_.Gesture.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getGesture, jni.JniType.objectType, []).object);

  static final _id_setGesture = jniAccessors.getMethodIDOf(
      _classRef, "setGesture", "(Landroid/gesture/Gesture;)V");

  /// from: public void setGesture(android.gesture.Gesture gesture)
  void setGesture(gesture_.Gesture gesture) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setGesture,
      jni.JniType.voidType,
      [gesture.reference]).check();

  static final _id_getGesturePath = jniAccessors.getMethodIDOf(
      _classRef, "getGesturePath", "()Landroid/graphics/Path;");

  /// from: public android.graphics.Path getGesturePath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  path_.Path getGesturePath() =>
      path_.Path.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getGesturePath, jni.JniType.objectType, []).object);

  static final _id_getGesturePath1 = jniAccessors.getMethodIDOf(_classRef,
      "getGesturePath", "(Landroid/graphics/Path;)Landroid/graphics/Path;");

  /// from: public android.graphics.Path getGesturePath(android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  path_.Path getGesturePath1(path_.Path path) =>
      path_.Path.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getGesturePath1,
          jni.JniType.objectType,
          [path.reference]).object);

  static final _id_isGestureVisible =
      jniAccessors.getMethodIDOf(_classRef, "isGestureVisible", "()Z");

  /// from: public boolean isGestureVisible()
  bool isGestureVisible() => jniAccessors.callMethodWithArgs(
      reference, _id_isGestureVisible, jni.JniType.booleanType, []).boolean;

  static final _id_setGestureVisible =
      jniAccessors.getMethodIDOf(_classRef, "setGestureVisible", "(Z)V");

  /// from: public void setGestureVisible(boolean visible)
  void setGestureVisible(bool visible) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setGestureVisible,
      jni.JniType.voidType,
      [visible]).check();

  static final _id_getFadeOffset =
      jniAccessors.getMethodIDOf(_classRef, "getFadeOffset", "()J");

  /// from: public long getFadeOffset()
  int getFadeOffset() => jniAccessors.callMethodWithArgs(
      reference, _id_getFadeOffset, jni.JniType.longType, []).long;

  static final _id_setFadeOffset =
      jniAccessors.getMethodIDOf(_classRef, "setFadeOffset", "(J)V");

  /// from: public void setFadeOffset(long fadeOffset)
  void setFadeOffset(int fadeOffset) => jniAccessors.callMethodWithArgs(
      reference, _id_setFadeOffset, jni.JniType.voidType, [fadeOffset]).check();

  static final _id_addOnGestureListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnGestureListener",
      "(Landroid/gesture/GestureOverlayView\$OnGestureListener;)V");

  /// from: public void addOnGestureListener(android.gesture.GestureOverlayView.OnGestureListener listener)
  void addOnGestureListener(GestureOverlayView_OnGestureListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_addOnGestureListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_removeOnGestureListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removeOnGestureListener",
      "(Landroid/gesture/GestureOverlayView\$OnGestureListener;)V");

  /// from: public void removeOnGestureListener(android.gesture.GestureOverlayView.OnGestureListener listener)
  void removeOnGestureListener(GestureOverlayView_OnGestureListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_removeOnGestureListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_removeAllOnGestureListeners = jniAccessors.getMethodIDOf(
      _classRef, "removeAllOnGestureListeners", "()V");

  /// from: public void removeAllOnGestureListeners()
  void removeAllOnGestureListeners() => jniAccessors.callMethodWithArgs(
      reference,
      _id_removeAllOnGestureListeners,
      jni.JniType.voidType, []).check();

  static final _id_addOnGesturePerformedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnGesturePerformedListener",
      "(Landroid/gesture/GestureOverlayView\$OnGesturePerformedListener;)V");

  /// from: public void addOnGesturePerformedListener(android.gesture.GestureOverlayView.OnGesturePerformedListener listener)
  void addOnGesturePerformedListener(
          GestureOverlayView_OnGesturePerformedListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addOnGesturePerformedListener,
          jni.JniType.voidType,
          [listener.reference]).check();

  static final _id_removeOnGesturePerformedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removeOnGesturePerformedListener",
      "(Landroid/gesture/GestureOverlayView\$OnGesturePerformedListener;)V");

  /// from: public void removeOnGesturePerformedListener(android.gesture.GestureOverlayView.OnGesturePerformedListener listener)
  void removeOnGesturePerformedListener(
          GestureOverlayView_OnGesturePerformedListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeOnGesturePerformedListener,
          jni.JniType.voidType,
          [listener.reference]).check();

  static final _id_removeAllOnGesturePerformedListeners = jniAccessors
      .getMethodIDOf(_classRef, "removeAllOnGesturePerformedListeners", "()V");

  /// from: public void removeAllOnGesturePerformedListeners()
  void removeAllOnGesturePerformedListeners() =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeAllOnGesturePerformedListeners,
          jni.JniType.voidType, []).check();

  static final _id_addOnGesturingListener = jniAccessors.getMethodIDOf(
      _classRef,
      "addOnGesturingListener",
      "(Landroid/gesture/GestureOverlayView\$OnGesturingListener;)V");

  /// from: public void addOnGesturingListener(android.gesture.GestureOverlayView.OnGesturingListener listener)
  void addOnGesturingListener(
          GestureOverlayView_OnGesturingListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_addOnGesturingListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_removeOnGesturingListener = jniAccessors.getMethodIDOf(
      _classRef,
      "removeOnGesturingListener",
      "(Landroid/gesture/GestureOverlayView\$OnGesturingListener;)V");

  /// from: public void removeOnGesturingListener(android.gesture.GestureOverlayView.OnGesturingListener listener)
  void removeOnGesturingListener(
          GestureOverlayView_OnGesturingListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_removeOnGesturingListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_removeAllOnGesturingListeners = jniAccessors.getMethodIDOf(
      _classRef, "removeAllOnGesturingListeners", "()V");

  /// from: public void removeAllOnGesturingListeners()
  void removeAllOnGesturingListeners() => jniAccessors.callMethodWithArgs(
      reference,
      _id_removeAllOnGesturingListeners,
      jni.JniType.voidType, []).check();

  static final _id_isGesturing =
      jniAccessors.getMethodIDOf(_classRef, "isGesturing", "()Z");

  /// from: public boolean isGesturing()
  bool isGesturing() => jniAccessors.callMethodWithArgs(
      reference, _id_isGesturing, jni.JniType.booleanType, []).boolean;

  static final _id_draw1 = jniAccessors.getMethodIDOf(
      _classRef, "draw", "(Landroid/graphics/Canvas;)V");

  /// from: public void draw(android.graphics.Canvas canvas)
  void draw1(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_draw1, jni.JniType.voidType, [canvas.reference]).check();

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, "clear", "(Z)V");

  /// from: public void clear(boolean animated)
  void clear(bool animated) => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniType.voidType, [animated]).check();

  static final _id_cancelClearAnimation =
      jniAccessors.getMethodIDOf(_classRef, "cancelClearAnimation", "()V");

  /// from: public void cancelClearAnimation()
  void cancelClearAnimation() => jniAccessors.callMethodWithArgs(
      reference, _id_cancelClearAnimation, jni.JniType.voidType, []).check();

  static final _id_cancelGesture =
      jniAccessors.getMethodIDOf(_classRef, "cancelGesture", "()V");

  /// from: public void cancelGesture()
  void cancelGesture() => jniAccessors.callMethodWithArgs(
      reference, _id_cancelGesture, jni.JniType.voidType, []).check();

  static final _id_onDetachedFromWindow1 =
      jniAccessors.getMethodIDOf(_classRef, "onDetachedFromWindow", "()V");

  /// from: protected void onDetachedFromWindow()
  void onDetachedFromWindow1() => jniAccessors.callMethodWithArgs(
      reference, _id_onDetachedFromWindow1, jni.JniType.voidType, []).check();

  static final _id_dispatchTouchEvent1 = jniAccessors.getMethodIDOf(
      _classRef, "dispatchTouchEvent", "(Landroid/view/MotionEvent;)Z");

  /// from: public boolean dispatchTouchEvent(android.view.MotionEvent event)
  bool dispatchTouchEvent1(motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_dispatchTouchEvent1,
          jni.JniType.booleanType, [event.reference]).boolean;
}

/// from: android.gesture.GestureOverlayView$OnGesturingListener
class GestureOverlayView_OnGesturingListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/gesture/GestureOverlayView\$OnGesturingListener");
  GestureOverlayView_OnGesturingListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onGesturingStarted = jniAccessors.getMethodIDOf(_classRef,
      "onGesturingStarted", "(Landroid/gesture/GestureOverlayView;)V");

  /// from: public abstract void onGesturingStarted(android.gesture.GestureOverlayView overlay)
  void onGesturingStarted(GestureOverlayView overlay) =>
      jniAccessors.callMethodWithArgs(reference, _id_onGesturingStarted,
          jni.JniType.voidType, [overlay.reference]).check();

  static final _id_onGesturingEnded = jniAccessors.getMethodIDOf(
      _classRef, "onGesturingEnded", "(Landroid/gesture/GestureOverlayView;)V");

  /// from: public abstract void onGesturingEnded(android.gesture.GestureOverlayView overlay)
  void onGesturingEnded(GestureOverlayView overlay) =>
      jniAccessors.callMethodWithArgs(reference, _id_onGesturingEnded,
          jni.JniType.voidType, [overlay.reference]).check();
}

/// from: android.gesture.GestureOverlayView$OnGesturePerformedListener
class GestureOverlayView_OnGesturePerformedListener extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/gesture/GestureOverlayView\$OnGesturePerformedListener");
  GestureOverlayView_OnGesturePerformedListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onGesturePerformed = jniAccessors.getMethodIDOf(
      _classRef,
      "onGesturePerformed",
      "(Landroid/gesture/GestureOverlayView;Landroid/gesture/Gesture;)V");

  /// from: public abstract void onGesturePerformed(android.gesture.GestureOverlayView overlay, android.gesture.Gesture gesture)
  void onGesturePerformed(
          GestureOverlayView overlay, gesture_.Gesture gesture) =>
      jniAccessors.callMethodWithArgs(reference, _id_onGesturePerformed,
          jni.JniType.voidType, [overlay.reference, gesture.reference]).check();
}

/// from: android.gesture.GestureOverlayView$OnGestureListener
class GestureOverlayView_OnGestureListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/gesture/GestureOverlayView\$OnGestureListener");
  GestureOverlayView_OnGestureListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onGestureStarted = jniAccessors.getMethodIDOf(
      _classRef,
      "onGestureStarted",
      "(Landroid/gesture/GestureOverlayView;Landroid/view/MotionEvent;)V");

  /// from: public abstract void onGestureStarted(android.gesture.GestureOverlayView overlay, android.view.MotionEvent event)
  void onGestureStarted(
          GestureOverlayView overlay, motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onGestureStarted,
          jni.JniType.voidType, [overlay.reference, event.reference]).check();

  static final _id_onGesture = jniAccessors.getMethodIDOf(
      _classRef,
      "onGesture",
      "(Landroid/gesture/GestureOverlayView;Landroid/view/MotionEvent;)V");

  /// from: public abstract void onGesture(android.gesture.GestureOverlayView overlay, android.view.MotionEvent event)
  void onGesture(GestureOverlayView overlay, motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onGesture,
          jni.JniType.voidType, [overlay.reference, event.reference]).check();

  static final _id_onGestureEnded = jniAccessors.getMethodIDOf(
      _classRef,
      "onGestureEnded",
      "(Landroid/gesture/GestureOverlayView;Landroid/view/MotionEvent;)V");

  /// from: public abstract void onGestureEnded(android.gesture.GestureOverlayView overlay, android.view.MotionEvent event)
  void onGestureEnded(
          GestureOverlayView overlay, motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onGestureEnded,
          jni.JniType.voidType, [overlay.reference, event.reference]).check();

  static final _id_onGestureCancelled = jniAccessors.getMethodIDOf(
      _classRef,
      "onGestureCancelled",
      "(Landroid/gesture/GestureOverlayView;Landroid/view/MotionEvent;)V");

  /// from: public abstract void onGestureCancelled(android.gesture.GestureOverlayView overlay, android.view.MotionEvent event)
  void onGestureCancelled(
          GestureOverlayView overlay, motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onGestureCancelled,
          jni.JniType.voidType, [overlay.reference, event.reference]).check();
}
