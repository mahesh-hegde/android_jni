// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.gesture.OrientedBoundingBox
///
/// An oriented bounding box
class OrientedBoundingBox extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/gesture/OrientedBoundingBox");
  OrientedBoundingBox.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_centerX =
      jniAccessors.getFieldIDOf(_classRef, "centerX", "F");

  /// from: public final float centerX
  double get centerX => jniAccessors
      .getField(reference, _id_centerX, jni.JniType.floatType)
      .float;

  static final _id_centerY =
      jniAccessors.getFieldIDOf(_classRef, "centerY", "F");

  /// from: public final float centerY
  double get centerY => jniAccessors
      .getField(reference, _id_centerY, jni.JniType.floatType)
      .float;

  static final _id_height = jniAccessors.getFieldIDOf(_classRef, "height", "F");

  /// from: public final float height
  double get height =>
      jniAccessors.getField(reference, _id_height, jni.JniType.floatType).float;

  static final _id_orientation =
      jniAccessors.getFieldIDOf(_classRef, "orientation", "F");

  /// from: public final float orientation
  double get orientation => jniAccessors
      .getField(reference, _id_orientation, jni.JniType.floatType)
      .float;

  static final _id_squareness =
      jniAccessors.getFieldIDOf(_classRef, "squareness", "F");

  /// from: public final float squareness
  double get squareness => jniAccessors
      .getField(reference, _id_squareness, jni.JniType.floatType)
      .float;

  static final _id_width = jniAccessors.getFieldIDOf(_classRef, "width", "F");

  /// from: public final float width
  double get width =>
      jniAccessors.getField(reference, _id_width, jni.JniType.floatType).float;
}
