// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "GestureStroke.dart" as gesturestroke_;

import "../graphics/RectF.dart" as rectf_;

import "../graphics/Path.dart" as path_;

import "../graphics/Bitmap.dart" as bitmap_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.gesture.Gesture
///
/// A gesture is a hand-drawn shape on a touch screen. It can have one or multiple strokes.
/// Each stroke is a sequence of timed points. A user-defined gesture can be recognized by
/// a GestureLibrary.
class Gesture extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/gesture/Gesture");
  Gesture.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.gesture.Gesture> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Gesture()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, "clone", "()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject clone() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_getStrokes = jniAccessors.getMethodIDOf(
      _classRef, "getStrokes", "()Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList<android.gesture.GestureStroke> getStrokes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return all the strokes of the gesture
  jni.JniObject getStrokes() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getStrokes, jni.JniType.objectType, []).object);

  static final _id_getStrokesCount =
      jniAccessors.getMethodIDOf(_classRef, "getStrokesCount", "()I");

  /// from: public int getStrokesCount()
  ///
  /// @return the number of strokes included by this gesture
  int getStrokesCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getStrokesCount, jni.JniType.intType, []).integer;

  static final _id_addStroke = jniAccessors.getMethodIDOf(
      _classRef, "addStroke", "(Landroid/gesture/GestureStroke;)V");

  /// from: public void addStroke(android.gesture.GestureStroke stroke)
  ///
  /// Adds a stroke to the gesture.
  ///@param stroke
  void addStroke(gesturestroke_.GestureStroke stroke) =>
      jniAccessors.callMethodWithArgs(reference, _id_addStroke,
          jni.JniType.voidType, [stroke.reference]).check();

  static final _id_getLength =
      jniAccessors.getMethodIDOf(_classRef, "getLength", "()F");

  /// from: public float getLength()
  ///
  /// Calculates the total length of the gesture. When there are multiple strokes in
  /// the gesture, this returns the sum of the lengths of all the strokes.
  ///@return the length of the gesture
  double getLength() => jniAccessors.callMethodWithArgs(
      reference, _id_getLength, jni.JniType.floatType, []).float;

  static final _id_getBoundingBox = jniAccessors.getMethodIDOf(
      _classRef, "getBoundingBox", "()Landroid/graphics/RectF;");

  /// from: public android.graphics.RectF getBoundingBox()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the bounding box of the gesture
  rectf_.RectF getBoundingBox() =>
      rectf_.RectF.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getBoundingBox, jni.JniType.objectType, []).object);

  static final _id_toPath = jniAccessors.getMethodIDOf(
      _classRef, "toPath", "()Landroid/graphics/Path;");

  /// from: public android.graphics.Path toPath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  path_.Path toPath() => path_.Path.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_toPath, jni.JniType.objectType, []).object);

  static final _id_toPath1 = jniAccessors.getMethodIDOf(
      _classRef, "toPath", "(Landroid/graphics/Path;)Landroid/graphics/Path;");

  /// from: public android.graphics.Path toPath(android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  path_.Path toPath1(path_.Path path) =>
      path_.Path.fromRef(jniAccessors.callMethodWithArgs(reference, _id_toPath1,
          jni.JniType.objectType, [path.reference]).object);

  static final _id_toPath2 = jniAccessors.getMethodIDOf(
      _classRef, "toPath", "(IIII)Landroid/graphics/Path;");

  /// from: public android.graphics.Path toPath(int width, int height, int edge, int numSample)
  /// The returned object must be deleted after use, by calling the `delete` method.
  path_.Path toPath2(int width, int height, int edge, int numSample) =>
      path_.Path.fromRef(jniAccessors.callMethodWithArgs(reference, _id_toPath2,
          jni.JniType.objectType, [width, height, edge, numSample]).object);

  static final _id_toPath3 = jniAccessors.getMethodIDOf(_classRef, "toPath",
      "(Landroid/graphics/Path;IIII)Landroid/graphics/Path;");

  /// from: public android.graphics.Path toPath(android.graphics.Path path, int width, int height, int edge, int numSample)
  /// The returned object must be deleted after use, by calling the `delete` method.
  path_.Path toPath3(
          path_.Path path, int width, int height, int edge, int numSample) =>
      path_.Path.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_toPath3,
          jni.JniType.objectType,
          [path.reference, width, height, edge, numSample]).object);

  static final _id_getID =
      jniAccessors.getMethodIDOf(_classRef, "getID", "()J");

  /// from: public long getID()
  ///
  /// @return the id of the gesture
  int getID() => jniAccessors
      .callMethodWithArgs(reference, _id_getID, jni.JniType.longType, []).long;

  static final _id_toBitmap = jniAccessors.getMethodIDOf(
      _classRef, "toBitmap", "(IIIII)Landroid/graphics/Bitmap;");

  /// from: public android.graphics.Bitmap toBitmap(int width, int height, int edge, int numSample, int color)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a bitmap of the gesture with a transparent background.
  ///@param width width of the target bitmap
  ///@param height height of the target bitmap
  ///@param edge the edge
  ///@param numSample
  ///@param color
  ///@return the bitmap
  bitmap_.Bitmap toBitmap(
          int width, int height, int edge, int numSample, int color) =>
      bitmap_.Bitmap.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_toBitmap,
          jni.JniType.objectType,
          [width, height, edge, numSample, color]).object);

  static final _id_toBitmap1 = jniAccessors.getMethodIDOf(
      _classRef, "toBitmap", "(IIII)Landroid/graphics/Bitmap;");

  /// from: public android.graphics.Bitmap toBitmap(int width, int height, int inset, int color)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a bitmap of the gesture with a transparent background.
  ///@param width
  ///@param height
  ///@param inset
  ///@param color
  ///@return the bitmap
  bitmap_.Bitmap toBitmap1(int width, int height, int inset, int color) =>
      bitmap_.Bitmap.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_toBitmap1,
          jni.JniType.objectType,
          [width, height, inset, color]).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
