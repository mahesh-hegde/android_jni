// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.gesture.GesturePoint
///
/// A timed point of a gesture stroke. Multiple points form a stroke.
class GesturePoint extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/gesture/GesturePoint");
  GesturePoint.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_timestamp =
      jniAccessors.getFieldIDOf(_classRef, "timestamp", "J");

  /// from: public final long timestamp
  int get timestamp => jniAccessors
      .getField(reference, _id_timestamp, jni.JniType.longType)
      .long;

  static final _id_x = jniAccessors.getFieldIDOf(_classRef, "x", "F");

  /// from: public final float x
  double get x =>
      jniAccessors.getField(reference, _id_x, jni.JniType.floatType).float;

  static final _id_y = jniAccessors.getFieldIDOf(_classRef, "y", "F");

  /// from: public final float y
  double get y =>
      jniAccessors.getField(reference, _id_y, jni.JniType.floatType).float;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(FFJ)V");

  /// from: public void <init>(float x, float y, long t)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GesturePoint(double x, double y, int t)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [x, y, t]).object);

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, "clone", "()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject clone() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);
}
