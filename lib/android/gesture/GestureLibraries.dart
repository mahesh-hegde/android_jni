// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "GestureLibrary.dart" as gesturelibrary_;

import "../content/Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.gesture.GestureLibraries
class GestureLibraries extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/gesture/GestureLibraries");
  GestureLibraries.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_fromFile = jniAccessors.getStaticMethodIDOf(_classRef,
      "fromFile", "(Ljava/lang/String;)Landroid/gesture/GestureLibrary;");

  /// from: static public android.gesture.GestureLibrary fromFile(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static gesturelibrary_.GestureLibrary fromFile(jni.JniString path) =>
      gesturelibrary_.GestureLibrary.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_fromFile,
              jni.JniType.objectType, [path.reference]).object);

  static final _id_fromFile1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "fromFile", "(Ljava/io/File;)Landroid/gesture/GestureLibrary;");

  /// from: static public android.gesture.GestureLibrary fromFile(java.io.File path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static gesturelibrary_.GestureLibrary fromFile1(jni.JniObject path) =>
      gesturelibrary_.GestureLibrary.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_fromFile1,
              jni.JniType.objectType, [path.reference]).object);

  static final _id_fromPrivateFile = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "fromPrivateFile",
      "(Landroid/content/Context;Ljava/lang/String;)Landroid/gesture/GestureLibrary;");

  /// from: static public android.gesture.GestureLibrary fromPrivateFile(android.content.Context context, java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static gesturelibrary_.GestureLibrary fromPrivateFile(
          context_.Context context, jni.JniString name) =>
      gesturelibrary_.GestureLibrary.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef,
              _id_fromPrivateFile,
              jni.JniType.objectType,
              [context.reference, name.reference]).object);

  static final _id_fromRawResource = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "fromRawResource",
      "(Landroid/content/Context;I)Landroid/gesture/GestureLibrary;");

  /// from: static public android.gesture.GestureLibrary fromRawResource(android.content.Context context, int resourceId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static gesturelibrary_.GestureLibrary fromRawResource(
          context_.Context context, int resourceId) =>
      gesturelibrary_.GestureLibrary.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_fromRawResource,
              jni.JniType.objectType, [context.reference, resourceId]).object);
}
