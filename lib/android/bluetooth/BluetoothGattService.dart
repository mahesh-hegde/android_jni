// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;

import "BluetoothGattCharacteristic.dart" as bluetoothgattcharacteristic_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.bluetooth.BluetoothGattService
///
/// Represents a Bluetooth GATT Service
///
///  Gatt Service contains a collection of BluetoothGattCharacteristic,
/// as well as referenced services.
class BluetoothGattService extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/bluetooth/BluetoothGattService");
  BluetoothGattService.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.bluetooth.BluetoothGattService> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int SERVICE_TYPE_PRIMARY
  ///
  /// Primary service
  static const SERVICE_TYPE_PRIMARY = 0;

  /// from: static public final int SERVICE_TYPE_SECONDARY
  ///
  /// Secondary service (included by primary services)
  static const SERVICE_TYPE_SECONDARY = 1;

  static final _id_mCharacteristics = jniAccessors.getFieldIDOf(
      _classRef, "mCharacteristics", "Ljava/util/List;");

  /// from: protected java.util.List<android.bluetooth.BluetoothGattCharacteristic> mCharacteristics
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// List of characteristics included in this service.
  jni.JniObject get mCharacteristics => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_mCharacteristics, jni.JniType.objectType)
      .object);

  /// from: protected java.util.List<android.bluetooth.BluetoothGattCharacteristic> mCharacteristics
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// List of characteristics included in this service.
  set mCharacteristics(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_mCharacteristics, value.reference);

  static final _id_mIncludedServices = jniAccessors.getFieldIDOf(
      _classRef, "mIncludedServices", "Ljava/util/List;");

  /// from: protected java.util.List<android.bluetooth.BluetoothGattService> mIncludedServices
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// List of included services for this service.
  jni.JniObject get mIncludedServices => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_mIncludedServices, jni.JniType.objectType)
      .object);

  /// from: protected java.util.List<android.bluetooth.BluetoothGattService> mIncludedServices
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// List of included services for this service.
  set mIncludedServices(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_mIncludedServices, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/UUID;I)V");

  /// from: public void <init>(java.util.UUID uuid, int serviceType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new BluetoothGattService.
  /// Requires android.Manifest.permission\#BLUETOOTH permission.
  ///@param uuid The UUID for this service
  ///@param serviceType The type of this service,
  /// BluetoothGattService\#SERVICE_TYPE_PRIMARY
  /// or BluetoothGattService\#SERVICE_TYPE_SECONDARY
  BluetoothGattService(jni.JniObject uuid, int serviceType)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [uuid.reference, serviceType]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// @hide
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_addService = jniAccessors.getMethodIDOf(
      _classRef, "addService", "(Landroid/bluetooth/BluetoothGattService;)Z");

  /// from: public boolean addService(android.bluetooth.BluetoothGattService service)
  ///
  /// Add an included service to this service.
  /// Requires android.Manifest.permission\#BLUETOOTH permission.
  ///@param service The service to be added
  ///@return true, if the included service was added to the service
  bool addService(BluetoothGattService service) =>
      jniAccessors.callMethodWithArgs(reference, _id_addService,
          jni.JniType.booleanType, [service.reference]).boolean;

  static final _id_addCharacteristic = jniAccessors.getMethodIDOf(
      _classRef,
      "addCharacteristic",
      "(Landroid/bluetooth/BluetoothGattCharacteristic;)Z");

  /// from: public boolean addCharacteristic(android.bluetooth.BluetoothGattCharacteristic characteristic)
  ///
  /// Add a characteristic to this service.
  /// Requires android.Manifest.permission\#BLUETOOTH permission.
  ///@param characteristic The characteristics to be added
  ///@return true, if the characteristic was added to the service
  bool addCharacteristic(
          bluetoothgattcharacteristic_.BluetoothGattCharacteristic
              characteristic) =>
      jniAccessors.callMethodWithArgs(reference, _id_addCharacteristic,
          jni.JniType.booleanType, [characteristic.reference]).boolean;

  static final _id_getUuid =
      jniAccessors.getMethodIDOf(_classRef, "getUuid", "()Ljava/util/UUID;");

  /// from: public java.util.UUID getUuid()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the UUID of this service
  ///@return UUID of this service
  jni.JniObject getUuid() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUuid, jni.JniType.objectType, []).object);

  static final _id_getInstanceId =
      jniAccessors.getMethodIDOf(_classRef, "getInstanceId", "()I");

  /// from: public int getInstanceId()
  ///
  /// Returns the instance ID for this service
  ///
  /// If a remote device offers multiple services with the same UUID
  /// (ex. multiple battery services for different batteries), the instance
  /// ID is used to distuinguish services.
  ///@return Instance ID of this service
  int getInstanceId() => jniAccessors.callMethodWithArgs(
      reference, _id_getInstanceId, jni.JniType.intType, []).integer;

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public int getType()
  ///
  /// Get the type of this service (primary/secondary)
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_getIncludedServices = jniAccessors.getMethodIDOf(
      _classRef, "getIncludedServices", "()Ljava/util/List;");

  /// from: public java.util.List<android.bluetooth.BluetoothGattService> getIncludedServices()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the list of included GATT services for this service.
  ///@return List of included services or empty list if no included services were discovered.
  jni.JniObject getIncludedServices() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getIncludedServices, jni.JniType.objectType, []).object);

  static final _id_getCharacteristics = jniAccessors.getMethodIDOf(
      _classRef, "getCharacteristics", "()Ljava/util/List;");

  /// from: public java.util.List<android.bluetooth.BluetoothGattCharacteristic> getCharacteristics()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a list of characteristics included in this service.
  ///@return Characteristics included in this service
  jni.JniObject getCharacteristics() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getCharacteristics, jni.JniType.objectType, []).object);

  static final _id_getCharacteristic = jniAccessors.getMethodIDOf(
      _classRef,
      "getCharacteristic",
      "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattCharacteristic;");

  /// from: public android.bluetooth.BluetoothGattCharacteristic getCharacteristic(java.util.UUID uuid)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a characteristic with a given UUID out of the list of
  /// characteristics offered by this service.
  ///
  /// This is a convenience function to allow access to a given characteristic
  /// without enumerating over the list returned by \#getCharacteristics
  /// manually.
  ///
  /// If a remote service offers multiple characteristics with the same
  /// UUID, the first instance of a characteristic with the given UUID
  /// is returned.
  ///@return GATT characteristic object or null if no characteristic with the given UUID was
  /// found.
  bluetoothgattcharacteristic_.BluetoothGattCharacteristic getCharacteristic(
          jni.JniObject uuid) =>
      bluetoothgattcharacteristic_.BluetoothGattCharacteristic.fromRef(
          jniAccessors.callMethodWithArgs(reference, _id_getCharacteristic,
              jni.JniType.objectType, [uuid.reference]).object);
}
