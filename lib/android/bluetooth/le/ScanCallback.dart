// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ScanResult.dart" as scanresult_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.bluetooth.le.ScanCallback
///
/// Bluetooth LE scan callbacks. Scan results are reported using these callbacks.
///@see BluetoothLeScanner\#startScan
class ScanCallback extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/bluetooth/le/ScanCallback");
  ScanCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int SCAN_FAILED_ALREADY_STARTED
  ///
  /// Fails to start scan as BLE scan with the same settings is already started by the app.
  static const SCAN_FAILED_ALREADY_STARTED = 1;

  /// from: static public final int SCAN_FAILED_APPLICATION_REGISTRATION_FAILED
  ///
  /// Fails to start scan as app cannot be registered.
  static const SCAN_FAILED_APPLICATION_REGISTRATION_FAILED = 2;

  /// from: static public final int SCAN_FAILED_FEATURE_UNSUPPORTED
  ///
  /// Fails to start power optimized scan as this feature is not supported.
  static const SCAN_FAILED_FEATURE_UNSUPPORTED = 4;

  /// from: static public final int SCAN_FAILED_INTERNAL_ERROR
  ///
  /// Fails to start scan due an internal error
  static const SCAN_FAILED_INTERNAL_ERROR = 3;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ScanCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onScanResult = jniAccessors.getMethodIDOf(
      _classRef, "onScanResult", "(ILandroid/bluetooth/le/ScanResult;)V");

  /// from: public void onScanResult(int callbackType, android.bluetooth.le.ScanResult result)
  ///
  /// Callback when a BLE advertisement has been found.
  ///@param callbackType Determines how this callback was triggered. Could be one of ScanSettings\#CALLBACK_TYPE_ALL_MATCHES, ScanSettings\#CALLBACK_TYPE_FIRST_MATCH or
  /// ScanSettings\#CALLBACK_TYPE_MATCH_LOST
  ///@param result A Bluetooth LE scan result.
  void onScanResult(int callbackType, scanresult_.ScanResult result) =>
      jniAccessors.callMethodWithArgs(reference, _id_onScanResult,
          jni.JniType.voidType, [callbackType, result.reference]).check();

  static final _id_onBatchScanResults = jniAccessors.getMethodIDOf(
      _classRef, "onBatchScanResults", "(Ljava/util/List;)V");

  /// from: public void onBatchScanResults(java.util.List<android.bluetooth.le.ScanResult> results)
  ///
  /// Callback when batch results are delivered.
  ///@param results List of scan results that are previously scanned.
  void onBatchScanResults(jni.JniObject results) =>
      jniAccessors.callMethodWithArgs(reference, _id_onBatchScanResults,
          jni.JniType.voidType, [results.reference]).check();

  static final _id_onScanFailed =
      jniAccessors.getMethodIDOf(_classRef, "onScanFailed", "(I)V");

  /// from: public void onScanFailed(int errorCode)
  ///
  /// Callback when scan could not be started.
  ///@param errorCode Error code (one of SCAN_FAILED_*) for scan failure.
  void onScanFailed(int errorCode) => jniAccessors.callMethodWithArgs(
      reference, _id_onScanFailed, jni.JniType.voidType, [errorCode]).check();
}
