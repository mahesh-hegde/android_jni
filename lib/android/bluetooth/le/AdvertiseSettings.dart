// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.bluetooth.le.AdvertiseSettings
///
/// The AdvertiseSettings provide a way to adjust advertising preferences for each
/// Bluetooth LE advertisement instance. Use AdvertiseSettings.Builder to create an
/// instance of this class.
class AdvertiseSettings extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/bluetooth/le/AdvertiseSettings");
  AdvertiseSettings.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ADVERTISE_MODE_BALANCED
  ///
  /// Perform Bluetooth LE advertising in balanced power mode. This is balanced between advertising
  /// frequency and power consumption.
  static const ADVERTISE_MODE_BALANCED = 1;

  /// from: static public final int ADVERTISE_MODE_LOW_LATENCY
  ///
  /// Perform Bluetooth LE advertising in low latency, high power mode. This has the highest power
  /// consumption and should not be used for continuous background advertising.
  static const ADVERTISE_MODE_LOW_LATENCY = 2;

  /// from: static public final int ADVERTISE_MODE_LOW_POWER
  ///
  /// Perform Bluetooth LE advertising in low power mode. This is the default and preferred
  /// advertising mode as it consumes the least power.
  static const ADVERTISE_MODE_LOW_POWER = 0;

  /// from: static public final int ADVERTISE_TX_POWER_HIGH
  ///
  /// Advertise using high TX power level. This corresponds to largest visibility range of the
  /// advertising packet.
  static const ADVERTISE_TX_POWER_HIGH = 3;

  /// from: static public final int ADVERTISE_TX_POWER_LOW
  ///
  /// Advertise using low TX power level.
  static const ADVERTISE_TX_POWER_LOW = 1;

  /// from: static public final int ADVERTISE_TX_POWER_MEDIUM
  ///
  /// Advertise using medium TX power level.
  static const ADVERTISE_TX_POWER_MEDIUM = 2;

  /// from: static public final int ADVERTISE_TX_POWER_ULTRA_LOW
  ///
  /// Advertise using the lowest transmission (TX) power level. Low transmission power can be used
  /// to restrict the visibility range of advertising packets.
  static const ADVERTISE_TX_POWER_ULTRA_LOW = 0;

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.bluetooth.le.AdvertiseSettings> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AdvertiseSettings(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [in0.reference]).object);

  static final _id_getMode =
      jniAccessors.getMethodIDOf(_classRef, "getMode", "()I");

  /// from: public int getMode()
  ///
  /// Returns the advertise mode.
  int getMode() => jniAccessors.callMethodWithArgs(
      reference, _id_getMode, jni.JniType.intType, []).integer;

  static final _id_getTxPowerLevel =
      jniAccessors.getMethodIDOf(_classRef, "getTxPowerLevel", "()I");

  /// from: public int getTxPowerLevel()
  ///
  /// Returns the TX power level for advertising.
  int getTxPowerLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getTxPowerLevel, jni.JniType.intType, []).integer;

  static final _id_isConnectable =
      jniAccessors.getMethodIDOf(_classRef, "isConnectable", "()Z");

  /// from: public boolean isConnectable()
  ///
  /// Returns whether the advertisement will indicate connectable.
  bool isConnectable() => jniAccessors.callMethodWithArgs(
      reference, _id_isConnectable, jni.JniType.booleanType, []).boolean;

  static final _id_getTimeout =
      jniAccessors.getMethodIDOf(_classRef, "getTimeout", "()I");

  /// from: public int getTimeout()
  ///
  /// Returns the advertising time limit in milliseconds.
  int getTimeout() => jniAccessors.callMethodWithArgs(
      reference, _id_getTimeout, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.bluetooth.le.AdvertiseSettings$Builder
///
/// Builder class for AdvertiseSettings.
class AdvertiseSettings_Builder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/bluetooth/le/AdvertiseSettings\$Builder");
  AdvertiseSettings_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AdvertiseSettings_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setAdvertiseMode = jniAccessors.getMethodIDOf(
      _classRef,
      "setAdvertiseMode",
      "(I)Landroid/bluetooth/le/AdvertiseSettings\$Builder;");

  /// from: public android.bluetooth.le.AdvertiseSettings.Builder setAdvertiseMode(int advertiseMode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set advertise mode to control the advertising power and latency.
  ///@param advertiseMode Bluetooth LE Advertising mode, can only be one of AdvertiseSettings\#ADVERTISE_MODE_LOW_POWER,
  /// AdvertiseSettings\#ADVERTISE_MODE_BALANCED,
  /// or AdvertiseSettings\#ADVERTISE_MODE_LOW_LATENCY.
  ///@throws IllegalArgumentException If the advertiseMode is invalid.
  AdvertiseSettings_Builder setAdvertiseMode(int advertiseMode) =>
      AdvertiseSettings_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAdvertiseMode,
          jni.JniType.objectType,
          [advertiseMode]).object);

  static final _id_setTxPowerLevel = jniAccessors.getMethodIDOf(
      _classRef,
      "setTxPowerLevel",
      "(I)Landroid/bluetooth/le/AdvertiseSettings\$Builder;");

  /// from: public android.bluetooth.le.AdvertiseSettings.Builder setTxPowerLevel(int txPowerLevel)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set advertise TX power level to control the transmission power level for the advertising.
  ///@param txPowerLevel Transmission power of Bluetooth LE Advertising, can only be one of
  /// AdvertiseSettings\#ADVERTISE_TX_POWER_ULTRA_LOW, AdvertiseSettings\#ADVERTISE_TX_POWER_LOW,
  /// AdvertiseSettings\#ADVERTISE_TX_POWER_MEDIUM
  /// or AdvertiseSettings\#ADVERTISE_TX_POWER_HIGH.
  ///@throws IllegalArgumentException If the {@code txPowerLevel} is invalid.
  AdvertiseSettings_Builder setTxPowerLevel(int txPowerLevel) =>
      AdvertiseSettings_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setTxPowerLevel,
          jni.JniType.objectType,
          [txPowerLevel]).object);

  static final _id_setConnectable = jniAccessors.getMethodIDOf(_classRef,
      "setConnectable", "(Z)Landroid/bluetooth/le/AdvertiseSettings\$Builder;");

  /// from: public android.bluetooth.le.AdvertiseSettings.Builder setConnectable(boolean connectable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set whether the advertisement type should be connectable or non-connectable.
  ///@param connectable Controls whether the advertisment type will be connectable (true) or
  /// non-connectable (false).
  AdvertiseSettings_Builder setConnectable(bool connectable) =>
      AdvertiseSettings_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setConnectable,
          jni.JniType.objectType,
          [connectable]).object);

  static final _id_setTimeout = jniAccessors.getMethodIDOf(_classRef,
      "setTimeout", "(I)Landroid/bluetooth/le/AdvertiseSettings\$Builder;");

  /// from: public android.bluetooth.le.AdvertiseSettings.Builder setTimeout(int timeoutMillis)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Limit advertising to a given amount of time.
  ///@param timeoutMillis Advertising time limit. May not exceed 180000 milliseconds. A value
  /// of 0 will disable the time limit.
  ///@throws IllegalArgumentException If the provided timeout is over 180000 ms.
  AdvertiseSettings_Builder setTimeout(int timeoutMillis) =>
      AdvertiseSettings_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setTimeout,
          jni.JniType.objectType,
          [timeoutMillis]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/bluetooth/le/AdvertiseSettings;");

  /// from: public android.bluetooth.le.AdvertiseSettings build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Build the AdvertiseSettings object.
  AdvertiseSettings build() =>
      AdvertiseSettings.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
