// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AdvertiseData.dart" as advertisedata_;

import "AdvertisingSetParameters.dart" as advertisingsetparameters_;

import "PeriodicAdvertisingParameters.dart" as periodicadvertisingparameters_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.bluetooth.le.AdvertisingSet
///
/// This class provides a way to control single Bluetooth LE advertising instance.
///
/// To get an instance of AdvertisingSet, call the
/// BluetoothLeAdvertiser\#startAdvertisingSet method.
///
/// __Note:__ Most of the methods here require android.Manifest.permission\#BLUETOOTH_ADMIN
/// permission.
///@see AdvertiseData
class AdvertisingSet extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/bluetooth/le/AdvertisingSet");
  AdvertisingSet.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AdvertisingSet()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_enableAdvertising =
      jniAccessors.getMethodIDOf(_classRef, "enableAdvertising", "(ZII)V");

  /// from: public void enableAdvertising(boolean enable, int duration, int maxExtendedAdvertisingEvents)
  ///
  /// Enables Advertising. This method returns immediately, the operation status is
  /// delivered through {@code callback.onAdvertisingEnabled()}.
  ///
  /// Requires android.Manifest.permission\#BLUETOOTH_ADMIN
  ///@param enable whether the advertising should be enabled (true), or disabled (false)
  ///@param duration advertising duration, in 10ms unit. Valid range is from 1 (10ms) to 65535
  /// (655,350 ms)
  ///@param maxExtendedAdvertisingEvents maximum number of extended advertising events the
  /// controller shall attempt to send prior to terminating the extended advertising, even if the
  /// duration has not expired. Valid range is from 1 to 255.
  void enableAdvertising(
          bool enable, int duration, int maxExtendedAdvertisingEvents) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_enableAdvertising,
          jni.JniType.voidType,
          [enable, duration, maxExtendedAdvertisingEvents]).check();

  static final _id_setAdvertisingData = jniAccessors.getMethodIDOf(_classRef,
      "setAdvertisingData", "(Landroid/bluetooth/le/AdvertiseData;)V");

  /// from: public void setAdvertisingData(android.bluetooth.le.AdvertiseData advertiseData)
  ///
  /// Set/update data being Advertised. Make sure that data doesn't exceed the size limit for
  /// specified AdvertisingSetParameters. This method returns immediately, the operation status is
  /// delivered through {@code callback.onAdvertisingDataSet()}.
  ///
  /// Advertising data must be empty if non-legacy scannable advertising is used.
  ///@param advertiseData Advertisement data to be broadcasted. Size must not exceed BluetoothAdapter\#getLeMaximumAdvertisingDataLength. If the advertisement is connectable,
  /// three bytes will be added for flags. If the update takes place when the advertising set is
  /// enabled, the data can be maximum 251 bytes long.
  void setAdvertisingData(advertisedata_.AdvertiseData advertiseData) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAdvertisingData,
          jni.JniType.voidType, [advertiseData.reference]).check();

  static final _id_setScanResponseData = jniAccessors.getMethodIDOf(_classRef,
      "setScanResponseData", "(Landroid/bluetooth/le/AdvertiseData;)V");

  /// from: public void setScanResponseData(android.bluetooth.le.AdvertiseData scanResponse)
  ///
  /// Set/update scan response data. Make sure that data doesn't exceed the size limit for
  /// specified AdvertisingSetParameters. This method returns immediately, the operation status
  /// is delivered through {@code callback.onScanResponseDataSet()}.
  ///@param scanResponse Scan response associated with the advertisement data. Size must not
  /// exceed BluetoothAdapter\#getLeMaximumAdvertisingDataLength. If the update takes place
  /// when the advertising set is enabled, the data can be maximum 251 bytes long.
  void setScanResponseData(advertisedata_.AdvertiseData scanResponse) =>
      jniAccessors.callMethodWithArgs(reference, _id_setScanResponseData,
          jni.JniType.voidType, [scanResponse.reference]).check();

  static final _id_setAdvertisingParameters = jniAccessors.getMethodIDOf(
      _classRef,
      "setAdvertisingParameters",
      "(Landroid/bluetooth/le/AdvertisingSetParameters;)V");

  /// from: public void setAdvertisingParameters(android.bluetooth.le.AdvertisingSetParameters parameters)
  ///
  /// Update advertising parameters associated with this AdvertisingSet. Must be called when
  /// advertising is not active. This method returns immediately, the operation status is delivered
  /// through {@code callback.onAdvertisingParametersUpdated}.
  ///@param parameters advertising set parameters.
  void setAdvertisingParameters(
          advertisingsetparameters_.AdvertisingSetParameters parameters) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAdvertisingParameters,
          jni.JniType.voidType, [parameters.reference]).check();

  static final _id_setPeriodicAdvertisingParameters =
      jniAccessors.getMethodIDOf(_classRef, "setPeriodicAdvertisingParameters",
          "(Landroid/bluetooth/le/PeriodicAdvertisingParameters;)V");

  /// from: public void setPeriodicAdvertisingParameters(android.bluetooth.le.PeriodicAdvertisingParameters parameters)
  ///
  /// Update periodic advertising parameters associated with this set. Must be called when
  /// periodic advertising is not enabled. This method returns immediately, the operation
  /// status is delivered through {@code callback.onPeriodicAdvertisingParametersUpdated()}.
  void setPeriodicAdvertisingParameters(
          periodicadvertisingparameters_.PeriodicAdvertisingParameters
              parameters) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setPeriodicAdvertisingParameters,
          jni.JniType.voidType,
          [parameters.reference]).check();

  static final _id_setPeriodicAdvertisingData = jniAccessors.getMethodIDOf(
      _classRef,
      "setPeriodicAdvertisingData",
      "(Landroid/bluetooth/le/AdvertiseData;)V");

  /// from: public void setPeriodicAdvertisingData(android.bluetooth.le.AdvertiseData periodicData)
  ///
  /// Used to set periodic advertising data, must be called after setPeriodicAdvertisingParameters,
  /// or after advertising was started with periodic advertising data set. This method returns
  /// immediately, the operation status is delivered through
  /// {@code callback.onPeriodicAdvertisingDataSet()}.
  ///@param periodicData Periodic advertising data. Size must not exceed BluetoothAdapter\#getLeMaximumAdvertisingDataLength. If the update takes place when the
  /// periodic advertising is enabled for this set, the data can be maximum 251 bytes long.
  void setPeriodicAdvertisingData(advertisedata_.AdvertiseData periodicData) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPeriodicAdvertisingData,
          jni.JniType.voidType, [periodicData.reference]).check();

  static final _id_setPeriodicAdvertisingEnabled = jniAccessors.getMethodIDOf(
      _classRef, "setPeriodicAdvertisingEnabled", "(Z)V");

  /// from: public void setPeriodicAdvertisingEnabled(boolean enable)
  ///
  /// Used to enable/disable periodic advertising. This method returns immediately, the operation
  /// status is delivered through {@code callback.onPeriodicAdvertisingEnable()}.
  ///@param enable whether the periodic advertising should be enabled (true), or disabled
  /// (false).
  void setPeriodicAdvertisingEnabled(bool enable) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setPeriodicAdvertisingEnabled,
          jni.JniType.voidType,
          [enable]).check();
}
