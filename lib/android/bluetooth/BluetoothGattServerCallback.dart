// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BluetoothDevice.dart" as bluetoothdevice_;

import "BluetoothGattService.dart" as bluetoothgattservice_;

import "BluetoothGattCharacteristic.dart" as bluetoothgattcharacteristic_;

import "BluetoothGattDescriptor.dart" as bluetoothgattdescriptor_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.bluetooth.BluetoothGattServerCallback
///
/// This abstract class is used to implement BluetoothGattServer callbacks.
class BluetoothGattServerCallback extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/bluetooth/BluetoothGattServerCallback");
  BluetoothGattServerCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BluetoothGattServerCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onConnectionStateChange = jniAccessors.getMethodIDOf(
      _classRef,
      "onConnectionStateChange",
      "(Landroid/bluetooth/BluetoothDevice;II)V");

  /// from: public void onConnectionStateChange(android.bluetooth.BluetoothDevice device, int status, int newState)
  ///
  /// Callback indicating when a remote device has been connected or disconnected.
  ///@param device Remote device that has been connected or disconnected.
  ///@param status Status of the connect or disconnect operation.
  ///@param newState Returns the new connection state. Can be one of BluetoothProfile\#STATE_DISCONNECTED or BluetoothProfile\#STATE_CONNECTED
  void onConnectionStateChange(
          bluetoothdevice_.BluetoothDevice device, int status, int newState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onConnectionStateChange,
          jni.JniType.voidType, [device.reference, status, newState]).check();

  static final _id_onServiceAdded = jniAccessors.getMethodIDOf(_classRef,
      "onServiceAdded", "(ILandroid/bluetooth/BluetoothGattService;)V");

  /// from: public void onServiceAdded(int status, android.bluetooth.BluetoothGattService service)
  ///
  /// Indicates whether a local service has been added successfully.
  ///@param status Returns BluetoothGatt\#GATT_SUCCESS if the service was added
  /// successfully.
  ///@param service The service that has been added
  void onServiceAdded(
          int status, bluetoothgattservice_.BluetoothGattService service) =>
      jniAccessors.callMethodWithArgs(reference, _id_onServiceAdded,
          jni.JniType.voidType, [status, service.reference]).check();

  static final _id_onCharacteristicReadRequest = jniAccessors.getMethodIDOf(
      _classRef,
      "onCharacteristicReadRequest",
      "(Landroid/bluetooth/BluetoothDevice;IILandroid/bluetooth/BluetoothGattCharacteristic;)V");

  /// from: public void onCharacteristicReadRequest(android.bluetooth.BluetoothDevice device, int requestId, int offset, android.bluetooth.BluetoothGattCharacteristic characteristic)
  ///
  /// A remote client has requested to read a local characteristic.
  ///
  /// An application must call BluetoothGattServer\#sendResponse
  /// to complete the request.
  ///@param device The remote device that has requested the read operation
  ///@param requestId The Id of the request
  ///@param offset Offset into the value of the characteristic
  ///@param characteristic Characteristic to be read
  void onCharacteristicReadRequest(
          bluetoothdevice_.BluetoothDevice device,
          int requestId,
          int offset,
          bluetoothgattcharacteristic_.BluetoothGattCharacteristic
              characteristic) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onCharacteristicReadRequest, jni.JniType.voidType, [
        device.reference,
        requestId,
        offset,
        characteristic.reference
      ]).check();

  static final _id_onCharacteristicWriteRequest = jniAccessors.getMethodIDOf(
      _classRef,
      "onCharacteristicWriteRequest",
      "(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/BluetoothGattCharacteristic;ZZI[B)V");

  /// from: public void onCharacteristicWriteRequest(android.bluetooth.BluetoothDevice device, int requestId, android.bluetooth.BluetoothGattCharacteristic characteristic, boolean preparedWrite, boolean responseNeeded, int offset, byte[] value)
  ///
  /// A remote client has requested to write to a local characteristic.
  ///
  /// An application must call BluetoothGattServer\#sendResponse
  /// to complete the request.
  ///@param device The remote device that has requested the write operation
  ///@param requestId The Id of the request
  ///@param characteristic Characteristic to be written to.
  ///@param preparedWrite true, if this write operation should be queued for later execution.
  ///@param responseNeeded true, if the remote device requires a response
  ///@param offset The offset given for the value
  ///@param value The value the client wants to assign to the characteristic
  void onCharacteristicWriteRequest(
          bluetoothdevice_.BluetoothDevice device,
          int requestId,
          bluetoothgattcharacteristic_.BluetoothGattCharacteristic
              characteristic,
          bool preparedWrite,
          bool responseNeeded,
          int offset,
          jni.JniObject value) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onCharacteristicWriteRequest, jni.JniType.voidType, [
        device.reference,
        requestId,
        characteristic.reference,
        preparedWrite,
        responseNeeded,
        offset,
        value.reference
      ]).check();

  static final _id_onDescriptorReadRequest = jniAccessors.getMethodIDOf(
      _classRef,
      "onDescriptorReadRequest",
      "(Landroid/bluetooth/BluetoothDevice;IILandroid/bluetooth/BluetoothGattDescriptor;)V");

  /// from: public void onDescriptorReadRequest(android.bluetooth.BluetoothDevice device, int requestId, int offset, android.bluetooth.BluetoothGattDescriptor descriptor)
  ///
  /// A remote client has requested to read a local descriptor.
  ///
  /// An application must call BluetoothGattServer\#sendResponse
  /// to complete the request.
  ///@param device The remote device that has requested the read operation
  ///@param requestId The Id of the request
  ///@param offset Offset into the value of the characteristic
  ///@param descriptor Descriptor to be read
  void onDescriptorReadRequest(
          bluetoothdevice_.BluetoothDevice device,
          int requestId,
          int offset,
          bluetoothgattdescriptor_.BluetoothGattDescriptor descriptor) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onDescriptorReadRequest,
          jni.JniType.voidType,
          [device.reference, requestId, offset, descriptor.reference]).check();

  static final _id_onDescriptorWriteRequest = jniAccessors.getMethodIDOf(
      _classRef,
      "onDescriptorWriteRequest",
      "(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/BluetoothGattDescriptor;ZZI[B)V");

  /// from: public void onDescriptorWriteRequest(android.bluetooth.BluetoothDevice device, int requestId, android.bluetooth.BluetoothGattDescriptor descriptor, boolean preparedWrite, boolean responseNeeded, int offset, byte[] value)
  ///
  /// A remote client has requested to write to a local descriptor.
  ///
  /// An application must call BluetoothGattServer\#sendResponse
  /// to complete the request.
  ///@param device The remote device that has requested the write operation
  ///@param requestId The Id of the request
  ///@param descriptor Descriptor to be written to.
  ///@param preparedWrite true, if this write operation should be queued for later execution.
  ///@param responseNeeded true, if the remote device requires a response
  ///@param offset The offset given for the value
  ///@param value The value the client wants to assign to the descriptor
  void onDescriptorWriteRequest(
          bluetoothdevice_.BluetoothDevice device,
          int requestId,
          bluetoothgattdescriptor_.BluetoothGattDescriptor descriptor,
          bool preparedWrite,
          bool responseNeeded,
          int offset,
          jni.JniObject value) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onDescriptorWriteRequest, jni.JniType.voidType, [
        device.reference,
        requestId,
        descriptor.reference,
        preparedWrite,
        responseNeeded,
        offset,
        value.reference
      ]).check();

  static final _id_onExecuteWrite = jniAccessors.getMethodIDOf(
      _classRef, "onExecuteWrite", "(Landroid/bluetooth/BluetoothDevice;IZ)V");

  /// from: public void onExecuteWrite(android.bluetooth.BluetoothDevice device, int requestId, boolean execute)
  ///
  /// Execute all pending write operations for this device.
  ///
  /// An application must call BluetoothGattServer\#sendResponse
  /// to complete the request.
  ///@param device The remote device that has requested the write operations
  ///@param requestId The Id of the request
  ///@param execute Whether the pending writes should be executed (true) or cancelled (false)
  void onExecuteWrite(bluetoothdevice_.BluetoothDevice device, int requestId,
          bool execute) =>
      jniAccessors.callMethodWithArgs(reference, _id_onExecuteWrite,
          jni.JniType.voidType, [device.reference, requestId, execute]).check();

  static final _id_onNotificationSent = jniAccessors.getMethodIDOf(_classRef,
      "onNotificationSent", "(Landroid/bluetooth/BluetoothDevice;I)V");

  /// from: public void onNotificationSent(android.bluetooth.BluetoothDevice device, int status)
  ///
  /// Callback invoked when a notification or indication has been sent to
  /// a remote device.
  ///
  /// When multiple notifications are to be sent, an application must
  /// wait for this callback to be received before sending additional
  /// notifications.
  ///@param device The remote device the notification has been sent to
  ///@param status BluetoothGatt\#GATT_SUCCESS if the operation was successful
  void onNotificationSent(
          bluetoothdevice_.BluetoothDevice device, int status) =>
      jniAccessors.callMethodWithArgs(reference, _id_onNotificationSent,
          jni.JniType.voidType, [device.reference, status]).check();

  static final _id_onMtuChanged = jniAccessors.getMethodIDOf(
      _classRef, "onMtuChanged", "(Landroid/bluetooth/BluetoothDevice;I)V");

  /// from: public void onMtuChanged(android.bluetooth.BluetoothDevice device, int mtu)
  ///
  /// Callback indicating the MTU for a given device connection has changed.
  ///
  /// This callback will be invoked if a remote client has requested to change
  /// the MTU for a given connection.
  ///@param device The remote device that requested the MTU change
  ///@param mtu The new MTU size
  void onMtuChanged(bluetoothdevice_.BluetoothDevice device, int mtu) =>
      jniAccessors.callMethodWithArgs(reference, _id_onMtuChanged,
          jni.JniType.voidType, [device.reference, mtu]).check();

  static final _id_onPhyUpdate = jniAccessors.getMethodIDOf(
      _classRef, "onPhyUpdate", "(Landroid/bluetooth/BluetoothDevice;III)V");

  /// from: public void onPhyUpdate(android.bluetooth.BluetoothDevice device, int txPhy, int rxPhy, int status)
  ///
  /// Callback triggered as result of BluetoothGattServer\#setPreferredPhy, or as a result
  /// of remote device changing the PHY.
  ///@param device The remote device
  ///@param txPhy the transmitter PHY in use. One of BluetoothDevice\#PHY_LE_1M, BluetoothDevice\#PHY_LE_2M, and BluetoothDevice\#PHY_LE_CODED
  ///@param rxPhy the receiver PHY in use. One of BluetoothDevice\#PHY_LE_1M, BluetoothDevice\#PHY_LE_2M, and BluetoothDevice\#PHY_LE_CODED
  ///@param status Status of the PHY update operation. BluetoothGatt\#GATT_SUCCESS if the
  /// operation succeeds.
  void onPhyUpdate(bluetoothdevice_.BluetoothDevice device, int txPhy,
          int rxPhy, int status) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onPhyUpdate,
          jni.JniType.voidType,
          [device.reference, txPhy, rxPhy, status]).check();

  static final _id_onPhyRead = jniAccessors.getMethodIDOf(
      _classRef, "onPhyRead", "(Landroid/bluetooth/BluetoothDevice;III)V");

  /// from: public void onPhyRead(android.bluetooth.BluetoothDevice device, int txPhy, int rxPhy, int status)
  ///
  /// Callback triggered as result of BluetoothGattServer\#readPhy
  ///@param device The remote device that requested the PHY read
  ///@param txPhy the transmitter PHY in use. One of BluetoothDevice\#PHY_LE_1M, BluetoothDevice\#PHY_LE_2M, and BluetoothDevice\#PHY_LE_CODED
  ///@param rxPhy the receiver PHY in use. One of BluetoothDevice\#PHY_LE_1M, BluetoothDevice\#PHY_LE_2M, and BluetoothDevice\#PHY_LE_CODED
  ///@param status Status of the PHY read operation. BluetoothGatt\#GATT_SUCCESS if the
  /// operation succeeds.
  void onPhyRead(bluetoothdevice_.BluetoothDevice device, int txPhy, int rxPhy,
          int status) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onPhyRead,
          jni.JniType.voidType,
          [device.reference, txPhy, rxPhy, status]).check();
}
