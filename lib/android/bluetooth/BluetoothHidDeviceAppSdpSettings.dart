// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.bluetooth.BluetoothHidDeviceAppSdpSettings
///
/// Represents the Service Discovery Protocol (SDP) settings for a Bluetooth HID Device application.
///
/// The BluetoothHidDevice framework adds the SDP record during app registration, so that the
/// Android device can be discovered as a Bluetooth HID Device.
///
/// {@see BluetoothHidDevice}
class BluetoothHidDeviceAppSdpSettings extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/bluetooth/BluetoothHidDeviceAppSdpSettings");
  BluetoothHidDeviceAppSdpSettings.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.bluetooth.BluetoothHidDeviceAppSdpSettings> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;B[B)V");

  /// from: public void <init>(java.lang.String name, java.lang.String description, java.lang.String provider, byte subclass, byte[] descriptors)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a BluetoothHidDeviceAppSdpSettings object for the Bluetooth SDP record.
  ///@param name Name of this Bluetooth HID device. Maximum length is 50 bytes.
  ///@param description Description for this Bluetooth HID device. Maximum length is 50 bytes.
  ///@param provider Provider of this Bluetooth HID device. Maximum length is 50 bytes.
  ///@param subclass Subclass of this Bluetooth HID device. See <a href="www.usb.org/developers/hidpage/HID1_11.pdf">
  ///     www.usb.org/developers/hidpage/HID1_11.pdf Section 4.2</a>
  ///@param descriptors Descriptors of this Bluetooth HID device. See <a href="www.usb.org/developers/hidpage/HID1_11.pdf">
  ///     www.usb.org/developers/hidpage/HID1_11.pdf Chapter 6</a> Maximum length is 2048 bytes.
  BluetoothHidDeviceAppSdpSettings(
      jni.JniString name,
      jni.JniString description,
      jni.JniString provider,
      int subclass,
      jni.JniObject descriptors)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          name.reference,
          description.reference,
          provider.reference,
          subclass,
          descriptors.reference
        ]).object);

  static final _id_getName =
      jniAccessors.getMethodIDOf(_classRef, "getName", "()Ljava/lang/String;");

  /// from: public java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_getDescription = jniAccessors.getMethodIDOf(
      _classRef, "getDescription", "()Ljava/lang/String;");

  /// from: public java.lang.String getDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getDescription() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDescription, jni.JniType.objectType, []).object);

  static final _id_getProvider = jniAccessors.getMethodIDOf(
      _classRef, "getProvider", "()Ljava/lang/String;");

  /// from: public java.lang.String getProvider()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getProvider() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getProvider, jni.JniType.objectType, []).object);

  static final _id_getSubclass =
      jniAccessors.getMethodIDOf(_classRef, "getSubclass", "()B");

  /// from: public byte getSubclass()
  int getSubclass() => jniAccessors.callMethodWithArgs(
      reference, _id_getSubclass, jni.JniType.byteType, []).byte;

  static final _id_getDescriptors =
      jniAccessors.getMethodIDOf(_classRef, "getDescriptors", "()[B");

  /// from: public byte[] getDescriptors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getDescriptors() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDescriptors, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();
}
