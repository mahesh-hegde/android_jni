// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BluetoothGatt.dart" as bluetoothgatt_;

import "BluetoothGattCharacteristic.dart" as bluetoothgattcharacteristic_;

import "BluetoothGattDescriptor.dart" as bluetoothgattdescriptor_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.bluetooth.BluetoothGattCallback
///
/// This abstract class is used to implement BluetoothGatt callbacks.
class BluetoothGattCallback extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/bluetooth/BluetoothGattCallback");
  BluetoothGattCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BluetoothGattCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onPhyUpdate = jniAccessors.getMethodIDOf(
      _classRef, "onPhyUpdate", "(Landroid/bluetooth/BluetoothGatt;III)V");

  /// from: public void onPhyUpdate(android.bluetooth.BluetoothGatt gatt, int txPhy, int rxPhy, int status)
  ///
  /// Callback triggered as result of BluetoothGatt\#setPreferredPhy, or as a result of
  /// remote device changing the PHY.
  ///@param gatt GATT client
  ///@param txPhy the transmitter PHY in use. One of BluetoothDevice\#PHY_LE_1M, BluetoothDevice\#PHY_LE_2M, and BluetoothDevice\#PHY_LE_CODED.
  ///@param rxPhy the receiver PHY in use. One of BluetoothDevice\#PHY_LE_1M, BluetoothDevice\#PHY_LE_2M, and BluetoothDevice\#PHY_LE_CODED.
  ///@param status Status of the PHY update operation. BluetoothGatt\#GATT_SUCCESS if the
  /// operation succeeds.
  void onPhyUpdate(bluetoothgatt_.BluetoothGatt gatt, int txPhy, int rxPhy,
          int status) =>
      jniAccessors.callMethodWithArgs(reference, _id_onPhyUpdate,
          jni.JniType.voidType, [gatt.reference, txPhy, rxPhy, status]).check();

  static final _id_onPhyRead = jniAccessors.getMethodIDOf(
      _classRef, "onPhyRead", "(Landroid/bluetooth/BluetoothGatt;III)V");

  /// from: public void onPhyRead(android.bluetooth.BluetoothGatt gatt, int txPhy, int rxPhy, int status)
  ///
  /// Callback triggered as result of BluetoothGatt\#readPhy
  ///@param gatt GATT client
  ///@param txPhy the transmitter PHY in use. One of BluetoothDevice\#PHY_LE_1M, BluetoothDevice\#PHY_LE_2M, and BluetoothDevice\#PHY_LE_CODED.
  ///@param rxPhy the receiver PHY in use. One of BluetoothDevice\#PHY_LE_1M, BluetoothDevice\#PHY_LE_2M, and BluetoothDevice\#PHY_LE_CODED.
  ///@param status Status of the PHY read operation. BluetoothGatt\#GATT_SUCCESS if the
  /// operation succeeds.
  void onPhyRead(bluetoothgatt_.BluetoothGatt gatt, int txPhy, int rxPhy,
          int status) =>
      jniAccessors.callMethodWithArgs(reference, _id_onPhyRead,
          jni.JniType.voidType, [gatt.reference, txPhy, rxPhy, status]).check();

  static final _id_onConnectionStateChange = jniAccessors.getMethodIDOf(
      _classRef,
      "onConnectionStateChange",
      "(Landroid/bluetooth/BluetoothGatt;II)V");

  /// from: public void onConnectionStateChange(android.bluetooth.BluetoothGatt gatt, int status, int newState)
  ///
  /// Callback indicating when GATT client has connected/disconnected to/from a remote
  /// GATT server.
  ///@param gatt GATT client
  ///@param status Status of the connect or disconnect operation. BluetoothGatt\#GATT_SUCCESS if the operation succeeds.
  ///@param newState Returns the new connection state. Can be one of BluetoothProfile\#STATE_DISCONNECTED or BluetoothProfile\#STATE_CONNECTED
  void onConnectionStateChange(
          bluetoothgatt_.BluetoothGatt gatt, int status, int newState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onConnectionStateChange,
          jni.JniType.voidType, [gatt.reference, status, newState]).check();

  static final _id_onServicesDiscovered = jniAccessors.getMethodIDOf(_classRef,
      "onServicesDiscovered", "(Landroid/bluetooth/BluetoothGatt;I)V");

  /// from: public void onServicesDiscovered(android.bluetooth.BluetoothGatt gatt, int status)
  ///
  /// Callback invoked when the list of remote services, characteristics and descriptors
  /// for the remote device have been updated, ie new services have been discovered.
  ///@param gatt GATT client invoked BluetoothGatt\#discoverServices
  ///@param status BluetoothGatt\#GATT_SUCCESS if the remote device has been explored
  /// successfully.
  void onServicesDiscovered(bluetoothgatt_.BluetoothGatt gatt, int status) =>
      jniAccessors.callMethodWithArgs(reference, _id_onServicesDiscovered,
          jni.JniType.voidType, [gatt.reference, status]).check();

  static final _id_onCharacteristicRead = jniAccessors.getMethodIDOf(
      _classRef,
      "onCharacteristicRead",
      "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V");

  /// from: public void onCharacteristicRead(android.bluetooth.BluetoothGatt gatt, android.bluetooth.BluetoothGattCharacteristic characteristic, int status)
  ///
  /// Callback reporting the result of a characteristic read operation.
  ///@param gatt GATT client invoked BluetoothGatt\#readCharacteristic
  ///@param characteristic Characteristic that was read from the associated remote device.
  ///@param status BluetoothGatt\#GATT_SUCCESS if the read operation was completed
  /// successfully.
  void onCharacteristicRead(
          bluetoothgatt_.BluetoothGatt gatt,
          bluetoothgattcharacteristic_.BluetoothGattCharacteristic
              characteristic,
          int status) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onCharacteristicRead,
          jni.JniType.voidType,
          [gatt.reference, characteristic.reference, status]).check();

  static final _id_onCharacteristicWrite = jniAccessors.getMethodIDOf(
      _classRef,
      "onCharacteristicWrite",
      "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V");

  /// from: public void onCharacteristicWrite(android.bluetooth.BluetoothGatt gatt, android.bluetooth.BluetoothGattCharacteristic characteristic, int status)
  ///
  /// Callback indicating the result of a characteristic write operation.
  ///
  /// If this callback is invoked while a reliable write transaction is
  /// in progress, the value of the characteristic represents the value
  /// reported by the remote device. An application should compare this
  /// value to the desired value to be written. If the values don't match,
  /// the application must abort the reliable write transaction.
  ///@param gatt GATT client invoked BluetoothGatt\#writeCharacteristic
  ///@param characteristic Characteristic that was written to the associated remote device.
  ///@param status The result of the write operation BluetoothGatt\#GATT_SUCCESS if the
  /// operation succeeds.
  void onCharacteristicWrite(
          bluetoothgatt_.BluetoothGatt gatt,
          bluetoothgattcharacteristic_.BluetoothGattCharacteristic
              characteristic,
          int status) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onCharacteristicWrite,
          jni.JniType.voidType,
          [gatt.reference, characteristic.reference, status]).check();

  static final _id_onCharacteristicChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onCharacteristicChanged",
      "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;)V");

  /// from: public void onCharacteristicChanged(android.bluetooth.BluetoothGatt gatt, android.bluetooth.BluetoothGattCharacteristic characteristic)
  ///
  /// Callback triggered as a result of a remote characteristic notification.
  ///@param gatt GATT client the characteristic is associated with
  ///@param characteristic Characteristic that has been updated as a result of a remote
  /// notification event.
  void onCharacteristicChanged(
          bluetoothgatt_.BluetoothGatt gatt,
          bluetoothgattcharacteristic_.BluetoothGattCharacteristic
              characteristic) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onCharacteristicChanged,
          jni.JniType.voidType,
          [gatt.reference, characteristic.reference]).check();

  static final _id_onDescriptorRead = jniAccessors.getMethodIDOf(
      _classRef,
      "onDescriptorRead",
      "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V");

  /// from: public void onDescriptorRead(android.bluetooth.BluetoothGatt gatt, android.bluetooth.BluetoothGattDescriptor descriptor, int status)
  ///
  /// Callback reporting the result of a descriptor read operation.
  ///@param gatt GATT client invoked BluetoothGatt\#readDescriptor
  ///@param descriptor Descriptor that was read from the associated remote device.
  ///@param status BluetoothGatt\#GATT_SUCCESS if the read operation was completed
  /// successfully
  void onDescriptorRead(
          bluetoothgatt_.BluetoothGatt gatt,
          bluetoothgattdescriptor_.BluetoothGattDescriptor descriptor,
          int status) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onDescriptorRead,
          jni.JniType.voidType,
          [gatt.reference, descriptor.reference, status]).check();

  static final _id_onDescriptorWrite = jniAccessors.getMethodIDOf(
      _classRef,
      "onDescriptorWrite",
      "(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V");

  /// from: public void onDescriptorWrite(android.bluetooth.BluetoothGatt gatt, android.bluetooth.BluetoothGattDescriptor descriptor, int status)
  ///
  /// Callback indicating the result of a descriptor write operation.
  ///@param gatt GATT client invoked BluetoothGatt\#writeDescriptor
  ///@param descriptor Descriptor that was writte to the associated remote device.
  ///@param status The result of the write operation BluetoothGatt\#GATT_SUCCESS if the
  /// operation succeeds.
  void onDescriptorWrite(
          bluetoothgatt_.BluetoothGatt gatt,
          bluetoothgattdescriptor_.BluetoothGattDescriptor descriptor,
          int status) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onDescriptorWrite,
          jni.JniType.voidType,
          [gatt.reference, descriptor.reference, status]).check();

  static final _id_onReliableWriteCompleted = jniAccessors.getMethodIDOf(
      _classRef,
      "onReliableWriteCompleted",
      "(Landroid/bluetooth/BluetoothGatt;I)V");

  /// from: public void onReliableWriteCompleted(android.bluetooth.BluetoothGatt gatt, int status)
  ///
  /// Callback invoked when a reliable write transaction has been completed.
  ///@param gatt GATT client invoked BluetoothGatt\#executeReliableWrite
  ///@param status BluetoothGatt\#GATT_SUCCESS if the reliable write transaction was
  /// executed successfully
  void onReliableWriteCompleted(
          bluetoothgatt_.BluetoothGatt gatt, int status) =>
      jniAccessors.callMethodWithArgs(reference, _id_onReliableWriteCompleted,
          jni.JniType.voidType, [gatt.reference, status]).check();

  static final _id_onReadRemoteRssi = jniAccessors.getMethodIDOf(
      _classRef, "onReadRemoteRssi", "(Landroid/bluetooth/BluetoothGatt;II)V");

  /// from: public void onReadRemoteRssi(android.bluetooth.BluetoothGatt gatt, int rssi, int status)
  ///
  /// Callback reporting the RSSI for a remote device connection.
  ///
  /// This callback is triggered in response to the
  /// BluetoothGatt\#readRemoteRssi function.
  ///@param gatt GATT client invoked BluetoothGatt\#readRemoteRssi
  ///@param rssi The RSSI value for the remote device
  ///@param status BluetoothGatt\#GATT_SUCCESS if the RSSI was read successfully
  void onReadRemoteRssi(
          bluetoothgatt_.BluetoothGatt gatt, int rssi, int status) =>
      jniAccessors.callMethodWithArgs(reference, _id_onReadRemoteRssi,
          jni.JniType.voidType, [gatt.reference, rssi, status]).check();

  static final _id_onMtuChanged = jniAccessors.getMethodIDOf(
      _classRef, "onMtuChanged", "(Landroid/bluetooth/BluetoothGatt;II)V");

  /// from: public void onMtuChanged(android.bluetooth.BluetoothGatt gatt, int mtu, int status)
  ///
  /// Callback indicating the MTU for a given device connection has changed.
  ///
  /// This callback is triggered in response to the
  /// BluetoothGatt\#requestMtu function, or in response to a connection
  /// event.
  ///@param gatt GATT client invoked BluetoothGatt\#requestMtu
  ///@param mtu The new MTU size
  ///@param status BluetoothGatt\#GATT_SUCCESS if the MTU has been changed successfully
  void onMtuChanged(bluetoothgatt_.BluetoothGatt gatt, int mtu, int status) =>
      jniAccessors.callMethodWithArgs(reference, _id_onMtuChanged,
          jni.JniType.voidType, [gatt.reference, mtu, status]).check();
}
