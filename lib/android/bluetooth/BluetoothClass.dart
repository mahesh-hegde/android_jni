// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.bluetooth.BluetoothClass
///
/// Represents a Bluetooth class, which describes general characteristics
/// and capabilities of a device. For example, a Bluetooth class will
/// specify the general device type such as a phone, a computer, or
/// headset, and whether it's capable of services such as audio or telephony.
///
/// Every Bluetooth class is composed of zero or more service classes, and
/// exactly one device class. The device class is further broken down into major
/// and minor device class components.
///
/// BluetoothClass is useful as a hint to roughly describe a device
/// (for example to show an icon in the UI), but does not reliably describe which
/// Bluetooth profiles or services are actually supported by a device. Accurate
/// service discovery is done through SDP requests, which are automatically
/// performed when creating an RFCOMM socket with BluetoothDevice\#createRfcommSocketToServiceRecord and BluetoothAdapter\#listenUsingRfcommWithServiceRecord
///
///
/// Use BluetoothDevice\#getBluetoothClass to retrieve the class for
/// a remote device.
///
/// <!--
/// The Bluetooth class is a 32 bit field. The format of these bits is defined at
/// http://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
/// (login required). This class contains that 32 bit field, and provides
/// constants and methods to determine which Service Class(es) and Device Class
/// are encoded in that field.
/// -->
class BluetoothClass extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/bluetooth/BluetoothClass");
  BluetoothClass.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.bluetooth.BluetoothClass> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: void <init>(int classInt)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  BluetoothClass(int classInt)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [classInt]).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_hasService =
      jniAccessors.getMethodIDOf(_classRef, "hasService", "(I)Z");

  /// from: public boolean hasService(int service)
  ///
  /// Return true if the specified service class is supported by this
  /// BluetoothClass.
  /// Valid service classes are the public constants in
  /// BluetoothClass.Service. For example, BluetoothClass.Service\#AUDIO.
  ///@param service valid service class
  ///@return true if the service class is supported
  bool hasService(int service) => jniAccessors.callMethodWithArgs(
      reference, _id_hasService, jni.JniType.booleanType, [service]).boolean;

  static final _id_getMajorDeviceClass =
      jniAccessors.getMethodIDOf(_classRef, "getMajorDeviceClass", "()I");

  /// from: public int getMajorDeviceClass()
  ///
  /// Return the major device class component of this BluetoothClass.
  /// Values returned from this function can be compared with the
  /// public constants in BluetoothClass.Device.Major to determine
  /// which major class is encoded in this Bluetooth class.
  ///@return major device class component
  int getMajorDeviceClass() => jniAccessors.callMethodWithArgs(
      reference, _id_getMajorDeviceClass, jni.JniType.intType, []).integer;

  static final _id_getDeviceClass =
      jniAccessors.getMethodIDOf(_classRef, "getDeviceClass", "()I");

  /// from: public int getDeviceClass()
  ///
  /// Return the (major and minor) device class component of this
  /// BluetoothClass.
  /// Values returned from this function can be compared with the
  /// public constants in BluetoothClass.Device to determine which
  /// device class is encoded in this Bluetooth class.
  ///@return device class component
  int getDeviceClass() => jniAccessors.callMethodWithArgs(
      reference, _id_getDeviceClass, jni.JniType.intType, []).integer;
}

/// from: android.bluetooth.BluetoothClass$Service
///
/// Defines all service class constants.
/// Each BluetoothClass encodes zero or more service classes.
class BluetoothClass_Service extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/bluetooth/BluetoothClass\$Service");
  BluetoothClass_Service.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int AUDIO
  static const AUDIO = 2097152;

  /// from: static public final int CAPTURE
  static const CAPTURE = 524288;

  /// from: static public final int INFORMATION
  static const INFORMATION = 8388608;

  /// from: static public final int LIMITED_DISCOVERABILITY
  static const LIMITED_DISCOVERABILITY = 8192;

  /// from: static public final int NETWORKING
  static const NETWORKING = 131072;

  /// from: static public final int OBJECT_TRANSFER
  static const OBJECT_TRANSFER = 1048576;

  /// from: static public final int POSITIONING
  static const POSITIONING = 65536;

  /// from: static public final int RENDER
  static const RENDER = 262144;

  /// from: static public final int TELEPHONY
  static const TELEPHONY = 4194304;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BluetoothClass_Service()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.bluetooth.BluetoothClass$Device
///
/// Defines all device class constants.
/// Each BluetoothClass encodes exactly one device class, with
/// major and minor components.
/// The constants in BluetoothClass.Device represent a combination of major and minor
/// device components (the complete device class). The constants in BluetoothClass.Device.Major represent only major device classes.
/// See BluetoothClass.Service for service class constants.
class BluetoothClass_Device extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/bluetooth/BluetoothClass\$Device");
  BluetoothClass_Device.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int AUDIO_VIDEO_CAMCORDER
  static const AUDIO_VIDEO_CAMCORDER = 1076;

  /// from: static public final int AUDIO_VIDEO_CAR_AUDIO
  static const AUDIO_VIDEO_CAR_AUDIO = 1056;

  /// from: static public final int AUDIO_VIDEO_HANDSFREE
  static const AUDIO_VIDEO_HANDSFREE = 1032;

  /// from: static public final int AUDIO_VIDEO_HEADPHONES
  static const AUDIO_VIDEO_HEADPHONES = 1048;

  /// from: static public final int AUDIO_VIDEO_HIFI_AUDIO
  static const AUDIO_VIDEO_HIFI_AUDIO = 1064;

  /// from: static public final int AUDIO_VIDEO_LOUDSPEAKER
  static const AUDIO_VIDEO_LOUDSPEAKER = 1044;

  /// from: static public final int AUDIO_VIDEO_MICROPHONE
  static const AUDIO_VIDEO_MICROPHONE = 1040;

  /// from: static public final int AUDIO_VIDEO_PORTABLE_AUDIO
  static const AUDIO_VIDEO_PORTABLE_AUDIO = 1052;

  /// from: static public final int AUDIO_VIDEO_SET_TOP_BOX
  static const AUDIO_VIDEO_SET_TOP_BOX = 1060;

  /// from: static public final int AUDIO_VIDEO_UNCATEGORIZED
  static const AUDIO_VIDEO_UNCATEGORIZED = 1024;

  /// from: static public final int AUDIO_VIDEO_VCR
  static const AUDIO_VIDEO_VCR = 1068;

  /// from: static public final int AUDIO_VIDEO_VIDEO_CAMERA
  static const AUDIO_VIDEO_VIDEO_CAMERA = 1072;

  /// from: static public final int AUDIO_VIDEO_VIDEO_CONFERENCING
  static const AUDIO_VIDEO_VIDEO_CONFERENCING = 1088;

  /// from: static public final int AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER
  static const AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER = 1084;

  /// from: static public final int AUDIO_VIDEO_VIDEO_GAMING_TOY
  static const AUDIO_VIDEO_VIDEO_GAMING_TOY = 1096;

  /// from: static public final int AUDIO_VIDEO_VIDEO_MONITOR
  static const AUDIO_VIDEO_VIDEO_MONITOR = 1080;

  /// from: static public final int AUDIO_VIDEO_WEARABLE_HEADSET
  static const AUDIO_VIDEO_WEARABLE_HEADSET = 1028;

  /// from: static public final int COMPUTER_DESKTOP
  static const COMPUTER_DESKTOP = 260;

  /// from: static public final int COMPUTER_HANDHELD_PC_PDA
  static const COMPUTER_HANDHELD_PC_PDA = 272;

  /// from: static public final int COMPUTER_LAPTOP
  static const COMPUTER_LAPTOP = 268;

  /// from: static public final int COMPUTER_PALM_SIZE_PC_PDA
  static const COMPUTER_PALM_SIZE_PC_PDA = 276;

  /// from: static public final int COMPUTER_SERVER
  static const COMPUTER_SERVER = 264;

  /// from: static public final int COMPUTER_UNCATEGORIZED
  static const COMPUTER_UNCATEGORIZED = 256;

  /// from: static public final int COMPUTER_WEARABLE
  static const COMPUTER_WEARABLE = 280;

  /// from: static public final int HEALTH_BLOOD_PRESSURE
  static const HEALTH_BLOOD_PRESSURE = 2308;

  /// from: static public final int HEALTH_DATA_DISPLAY
  static const HEALTH_DATA_DISPLAY = 2332;

  /// from: static public final int HEALTH_GLUCOSE
  static const HEALTH_GLUCOSE = 2320;

  /// from: static public final int HEALTH_PULSE_OXIMETER
  static const HEALTH_PULSE_OXIMETER = 2324;

  /// from: static public final int HEALTH_PULSE_RATE
  static const HEALTH_PULSE_RATE = 2328;

  /// from: static public final int HEALTH_THERMOMETER
  static const HEALTH_THERMOMETER = 2312;

  /// from: static public final int HEALTH_UNCATEGORIZED
  static const HEALTH_UNCATEGORIZED = 2304;

  /// from: static public final int HEALTH_WEIGHING
  static const HEALTH_WEIGHING = 2316;

  /// from: static public final int PHONE_CELLULAR
  static const PHONE_CELLULAR = 516;

  /// from: static public final int PHONE_CORDLESS
  static const PHONE_CORDLESS = 520;

  /// from: static public final int PHONE_ISDN
  static const PHONE_ISDN = 532;

  /// from: static public final int PHONE_MODEM_OR_GATEWAY
  static const PHONE_MODEM_OR_GATEWAY = 528;

  /// from: static public final int PHONE_SMART
  static const PHONE_SMART = 524;

  /// from: static public final int PHONE_UNCATEGORIZED
  static const PHONE_UNCATEGORIZED = 512;

  /// from: static public final int TOY_CONTROLLER
  static const TOY_CONTROLLER = 2064;

  /// from: static public final int TOY_DOLL_ACTION_FIGURE
  static const TOY_DOLL_ACTION_FIGURE = 2060;

  /// from: static public final int TOY_GAME
  static const TOY_GAME = 2068;

  /// from: static public final int TOY_ROBOT
  static const TOY_ROBOT = 2052;

  /// from: static public final int TOY_UNCATEGORIZED
  static const TOY_UNCATEGORIZED = 2048;

  /// from: static public final int TOY_VEHICLE
  static const TOY_VEHICLE = 2056;

  /// from: static public final int WEARABLE_GLASSES
  static const WEARABLE_GLASSES = 1812;

  /// from: static public final int WEARABLE_HELMET
  static const WEARABLE_HELMET = 1808;

  /// from: static public final int WEARABLE_JACKET
  static const WEARABLE_JACKET = 1804;

  /// from: static public final int WEARABLE_PAGER
  static const WEARABLE_PAGER = 1800;

  /// from: static public final int WEARABLE_UNCATEGORIZED
  static const WEARABLE_UNCATEGORIZED = 1792;

  /// from: static public final int WEARABLE_WRIST_WATCH
  static const WEARABLE_WRIST_WATCH = 1796;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BluetoothClass_Device()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.bluetooth.BluetoothClass$Device$Major
///
/// Defines all major device class constants.
/// See BluetoothClass.Device for minor classes.
class BluetoothClass_Device_Major extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/bluetooth/BluetoothClass\$Device\$Major");
  BluetoothClass_Device_Major.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int AUDIO_VIDEO
  static const AUDIO_VIDEO = 1024;

  /// from: static public final int COMPUTER
  static const COMPUTER = 256;

  /// from: static public final int HEALTH
  static const HEALTH = 2304;

  /// from: static public final int IMAGING
  static const IMAGING = 1536;

  /// from: static public final int MISC
  static const MISC = 0;

  /// from: static public final int NETWORKING
  static const NETWORKING = 768;

  /// from: static public final int PERIPHERAL
  static const PERIPHERAL = 1280;

  /// from: static public final int PHONE
  static const PHONE = 512;

  /// from: static public final int TOY
  static const TOY = 2048;

  /// from: static public final int UNCATEGORIZED
  static const UNCATEGORIZED = 7936;

  /// from: static public final int WEARABLE
  static const WEARABLE = 1792;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BluetoothClass_Device_Major()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
