// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;

import "BluetoothGattDescriptor.dart" as bluetoothgattdescriptor_;

import "BluetoothGattService.dart" as bluetoothgattservice_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.bluetooth.BluetoothGattCharacteristic
///
/// Represents a Bluetooth GATT Characteristic
///
/// A GATT characteristic is a basic data element used to construct a GATT service,
/// BluetoothGattService. The characteristic contains a value as well as
/// additional information and optional GATT descriptors, BluetoothGattDescriptor.
class BluetoothGattCharacteristic extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/bluetooth/BluetoothGattCharacteristic");
  BluetoothGattCharacteristic.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.bluetooth.BluetoothGattCharacteristic> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int FORMAT_FLOAT
  ///
  /// Characteristic value format type float (32-bit float)
  static const FORMAT_FLOAT = 52;

  /// from: static public final int FORMAT_SFLOAT
  ///
  /// Characteristic value format type sfloat (16-bit float)
  static const FORMAT_SFLOAT = 50;

  /// from: static public final int FORMAT_SINT16
  ///
  /// Characteristic value format type sint16
  static const FORMAT_SINT16 = 34;

  /// from: static public final int FORMAT_SINT32
  ///
  /// Characteristic value format type sint32
  static const FORMAT_SINT32 = 36;

  /// from: static public final int FORMAT_SINT8
  ///
  /// Characteristic value format type sint8
  static const FORMAT_SINT8 = 33;

  /// from: static public final int FORMAT_UINT16
  ///
  /// Characteristic value format type uint16
  static const FORMAT_UINT16 = 18;

  /// from: static public final int FORMAT_UINT32
  ///
  /// Characteristic value format type uint32
  static const FORMAT_UINT32 = 20;

  /// from: static public final int FORMAT_UINT8
  ///
  /// Characteristic value format type uint8
  static const FORMAT_UINT8 = 17;

  /// from: static public final int PERMISSION_READ
  ///
  /// Characteristic read permission
  static const PERMISSION_READ = 1;

  /// from: static public final int PERMISSION_READ_ENCRYPTED
  ///
  /// Characteristic permission: Allow encrypted read operations
  static const PERMISSION_READ_ENCRYPTED = 2;

  /// from: static public final int PERMISSION_READ_ENCRYPTED_MITM
  ///
  /// Characteristic permission: Allow reading with man-in-the-middle protection
  static const PERMISSION_READ_ENCRYPTED_MITM = 4;

  /// from: static public final int PERMISSION_WRITE
  ///
  /// Characteristic write permission
  static const PERMISSION_WRITE = 16;

  /// from: static public final int PERMISSION_WRITE_ENCRYPTED
  ///
  /// Characteristic permission: Allow encrypted writes
  static const PERMISSION_WRITE_ENCRYPTED = 32;

  /// from: static public final int PERMISSION_WRITE_ENCRYPTED_MITM
  ///
  /// Characteristic permission: Allow encrypted writes with man-in-the-middle
  /// protection
  static const PERMISSION_WRITE_ENCRYPTED_MITM = 64;

  /// from: static public final int PERMISSION_WRITE_SIGNED
  ///
  /// Characteristic permission: Allow signed write operations
  static const PERMISSION_WRITE_SIGNED = 128;

  /// from: static public final int PERMISSION_WRITE_SIGNED_MITM
  ///
  /// Characteristic permission: Allow signed write operations with
  /// man-in-the-middle protection
  static const PERMISSION_WRITE_SIGNED_MITM = 256;

  /// from: static public final int PROPERTY_BROADCAST
  ///
  /// Characteristic proprty: Characteristic is broadcastable.
  static const PROPERTY_BROADCAST = 1;

  /// from: static public final int PROPERTY_EXTENDED_PROPS
  ///
  /// Characteristic property: Characteristic has extended properties
  static const PROPERTY_EXTENDED_PROPS = 128;

  /// from: static public final int PROPERTY_INDICATE
  ///
  /// Characteristic property: Characteristic supports indication
  static const PROPERTY_INDICATE = 32;

  /// from: static public final int PROPERTY_NOTIFY
  ///
  /// Characteristic property: Characteristic supports notification
  static const PROPERTY_NOTIFY = 16;

  /// from: static public final int PROPERTY_READ
  ///
  /// Characteristic property: Characteristic is readable.
  static const PROPERTY_READ = 2;

  /// from: static public final int PROPERTY_SIGNED_WRITE
  ///
  /// Characteristic property: Characteristic supports write with signature
  static const PROPERTY_SIGNED_WRITE = 64;

  /// from: static public final int PROPERTY_WRITE
  ///
  /// Characteristic property: Characteristic can be written.
  static const PROPERTY_WRITE = 8;

  /// from: static public final int PROPERTY_WRITE_NO_RESPONSE
  ///
  /// Characteristic property: Characteristic can be written without response.
  static const PROPERTY_WRITE_NO_RESPONSE = 4;

  /// from: static public final int WRITE_TYPE_DEFAULT
  ///
  /// Write characteristic, requesting acknoledgement by the remote device
  static const WRITE_TYPE_DEFAULT = 2;

  /// from: static public final int WRITE_TYPE_NO_RESPONSE
  ///
  /// Write characteristic without requiring a response by the remote device
  static const WRITE_TYPE_NO_RESPONSE = 1;

  /// from: static public final int WRITE_TYPE_SIGNED
  ///
  /// Write characteristic including authentication signature
  static const WRITE_TYPE_SIGNED = 4;

  static final _id_mDescriptors =
      jniAccessors.getFieldIDOf(_classRef, "mDescriptors", "Ljava/util/List;");

  /// from: protected java.util.List<android.bluetooth.BluetoothGattDescriptor> mDescriptors
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// List of descriptors included in this characteristic.
  jni.JniObject get mDescriptors => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_mDescriptors, jni.JniType.objectType)
      .object);

  /// from: protected java.util.List<android.bluetooth.BluetoothGattDescriptor> mDescriptors
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// List of descriptors included in this characteristic.
  set mDescriptors(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_mDescriptors, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/UUID;II)V");

  /// from: public void <init>(java.util.UUID uuid, int properties, int permissions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new BluetoothGattCharacteristic.
  /// Requires android.Manifest.permission\#BLUETOOTH permission.
  ///@param uuid The UUID for this characteristic
  ///@param properties Properties of this characteristic
  ///@param permissions Permissions for this characteristic
  BluetoothGattCharacteristic(
      jni.JniObject uuid, int properties, int permissions)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [uuid.reference, properties, permissions]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_addDescriptor = jniAccessors.getMethodIDOf(_classRef,
      "addDescriptor", "(Landroid/bluetooth/BluetoothGattDescriptor;)Z");

  /// from: public boolean addDescriptor(android.bluetooth.BluetoothGattDescriptor descriptor)
  ///
  /// Adds a descriptor to this characteristic.
  /// Requires android.Manifest.permission\#BLUETOOTH permission.
  ///@param descriptor Descriptor to be added to this characteristic.
  ///@return true, if the descriptor was added to the characteristic
  bool addDescriptor(
          bluetoothgattdescriptor_.BluetoothGattDescriptor descriptor) =>
      jniAccessors.callMethodWithArgs(reference, _id_addDescriptor,
          jni.JniType.booleanType, [descriptor.reference]).boolean;

  static final _id_getService = jniAccessors.getMethodIDOf(
      _classRef, "getService", "()Landroid/bluetooth/BluetoothGattService;");

  /// from: public android.bluetooth.BluetoothGattService getService()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the service this characteristic belongs to.
  ///@return The asscociated service
  bluetoothgattservice_.BluetoothGattService getService() =>
      bluetoothgattservice_.BluetoothGattService.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getService, jni.JniType.objectType, []).object);

  static final _id_getUuid =
      jniAccessors.getMethodIDOf(_classRef, "getUuid", "()Ljava/util/UUID;");

  /// from: public java.util.UUID getUuid()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the UUID of this characteristic
  ///@return UUID of this characteristic
  jni.JniObject getUuid() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUuid, jni.JniType.objectType, []).object);

  static final _id_getInstanceId =
      jniAccessors.getMethodIDOf(_classRef, "getInstanceId", "()I");

  /// from: public int getInstanceId()
  ///
  /// Returns the instance ID for this characteristic.
  ///
  /// If a remote device offers multiple characteristics with the same UUID,
  /// the instance ID is used to distuinguish between characteristics.
  ///@return Instance ID of this characteristic
  int getInstanceId() => jniAccessors.callMethodWithArgs(
      reference, _id_getInstanceId, jni.JniType.intType, []).integer;

  static final _id_getProperties =
      jniAccessors.getMethodIDOf(_classRef, "getProperties", "()I");

  /// from: public int getProperties()
  ///
  /// Returns the properties of this characteristic.
  ///
  /// The properties contain a bit mask of property flags indicating
  /// the features of this characteristic.
  ///@return Properties of this characteristic
  int getProperties() => jniAccessors.callMethodWithArgs(
      reference, _id_getProperties, jni.JniType.intType, []).integer;

  static final _id_getPermissions =
      jniAccessors.getMethodIDOf(_classRef, "getPermissions", "()I");

  /// from: public int getPermissions()
  ///
  /// Returns the permissions for this characteristic.
  ///@return Permissions of this characteristic
  int getPermissions() => jniAccessors.callMethodWithArgs(
      reference, _id_getPermissions, jni.JniType.intType, []).integer;

  static final _id_getWriteType =
      jniAccessors.getMethodIDOf(_classRef, "getWriteType", "()I");

  /// from: public int getWriteType()
  ///
  /// Gets the write type for this characteristic.
  ///@return Write type for this characteristic
  int getWriteType() => jniAccessors.callMethodWithArgs(
      reference, _id_getWriteType, jni.JniType.intType, []).integer;

  static final _id_setWriteType =
      jniAccessors.getMethodIDOf(_classRef, "setWriteType", "(I)V");

  /// from: public void setWriteType(int writeType)
  ///
  /// Set the write type for this characteristic
  ///
  /// Setting the write type of a characteristic determines how the
  /// BluetoothGatt\#writeCharacteristic function write this
  /// characteristic.
  ///@param writeType The write type to for this characteristic. Can be one of: \#WRITE_TYPE_DEFAULT, \#WRITE_TYPE_NO_RESPONSE or \#WRITE_TYPE_SIGNED.
  void setWriteType(int writeType) => jniAccessors.callMethodWithArgs(
      reference, _id_setWriteType, jni.JniType.voidType, [writeType]).check();

  static final _id_getDescriptors = jniAccessors.getMethodIDOf(
      _classRef, "getDescriptors", "()Ljava/util/List;");

  /// from: public java.util.List<android.bluetooth.BluetoothGattDescriptor> getDescriptors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a list of descriptors for this characteristic.
  ///@return Descriptors for this characteristic
  jni.JniObject getDescriptors() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDescriptors, jni.JniType.objectType, []).object);

  static final _id_getDescriptor = jniAccessors.getMethodIDOf(
      _classRef,
      "getDescriptor",
      "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattDescriptor;");

  /// from: public android.bluetooth.BluetoothGattDescriptor getDescriptor(java.util.UUID uuid)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a descriptor with a given UUID out of the list of
  /// descriptors for this characteristic.
  ///@return GATT descriptor object or null if no descriptor with the given UUID was found.
  bluetoothgattdescriptor_.BluetoothGattDescriptor getDescriptor(
          jni.JniObject uuid) =>
      bluetoothgattdescriptor_.BluetoothGattDescriptor.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getDescriptor,
              jni.JniType.objectType, [uuid.reference]).object);

  static final _id_getValue =
      jniAccessors.getMethodIDOf(_classRef, "getValue", "()[B");

  /// from: public byte[] getValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the stored value for this characteristic.
  ///
  /// This function returns the stored value for this characteristic as
  /// retrieved by calling BluetoothGatt\#readCharacteristic. The cached
  /// value of the characteristic is updated as a result of a read characteristic
  /// operation or if a characteristic update notification has been received.
  ///@return Cached value of the characteristic
  jni.JniObject getValue() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getValue, jni.JniType.objectType, []).object);

  static final _id_getIntValue = jniAccessors.getMethodIDOf(
      _classRef, "getIntValue", "(II)Ljava/lang/Integer;");

  /// from: public java.lang.Integer getIntValue(int formatType, int offset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the stored value of this characteristic.
  ///
  /// The formatType parameter determines how the characteristic value
  /// is to be interpreted. For example, settting formatType to
  /// \#FORMAT_UINT16 specifies that the first two bytes of the
  /// characteristic value at the given offset are interpreted to generate the
  /// return value.
  ///@param formatType The format type used to interpret the characteristic value.
  ///@param offset Offset at which the integer value can be found.
  ///@return Cached value of the characteristic or null of offset exceeds value size.
  jni.JniObject getIntValue(int formatType, int offset) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getIntValue,
          jni.JniType.objectType,
          [formatType, offset]).object);

  static final _id_getFloatValue = jniAccessors.getMethodIDOf(
      _classRef, "getFloatValue", "(II)Ljava/lang/Float;");

  /// from: public java.lang.Float getFloatValue(int formatType, int offset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the stored value of this characteristic.
  /// See \#getValue for details.
  ///@param formatType The format type used to interpret the characteristic value.
  ///@param offset Offset at which the float value can be found.
  ///@return Cached value of the characteristic at a given offset or null if the requested offset
  /// exceeds the value size.
  jni.JniObject getFloatValue(int formatType, int offset) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getFloatValue,
          jni.JniType.objectType,
          [formatType, offset]).object);

  static final _id_getStringValue = jniAccessors.getMethodIDOf(
      _classRef, "getStringValue", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getStringValue(int offset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the stored value of this characteristic.
  /// See \#getValue for details.
  ///@param offset Offset at which the string value can be found.
  ///@return Cached value of the characteristic
  jni.JniString getStringValue(int offset) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getStringValue, jni.JniType.objectType, [offset]).object);

  static final _id_setValue =
      jniAccessors.getMethodIDOf(_classRef, "setValue", "([B)Z");

  /// from: public boolean setValue(byte[] value)
  ///
  /// Updates the locally stored value of this characteristic.
  ///
  /// This function modifies the locally stored cached value of this
  /// characteristic. To send the value to the remote device, call
  /// BluetoothGatt\#writeCharacteristic to send the value to the
  /// remote device.
  ///@param value New value for this characteristic
  ///@return true if the locally stored value has been set, false if the requested value could not
  /// be stored locally.
  bool setValue(jni.JniObject value) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setValue,
      jni.JniType.booleanType,
      [value.reference]).boolean;

  static final _id_setValue1 =
      jniAccessors.getMethodIDOf(_classRef, "setValue", "(III)Z");

  /// from: public boolean setValue(int value, int formatType, int offset)
  ///
  /// Set the locally stored value of this characteristic.
  /// See \#setValue(byte[]) for details.
  ///@param value New value for this characteristic
  ///@param formatType Integer format type used to transform the value parameter
  ///@param offset Offset at which the value should be placed
  ///@return true if the locally stored value has been set
  bool setValue1(int value, int formatType, int offset) =>
      jniAccessors.callMethodWithArgs(reference, _id_setValue1,
          jni.JniType.booleanType, [value, formatType, offset]).boolean;

  static final _id_setValue2 =
      jniAccessors.getMethodIDOf(_classRef, "setValue", "(IIII)Z");

  /// from: public boolean setValue(int mantissa, int exponent, int formatType, int offset)
  ///
  /// Set the locally stored value of this characteristic.
  /// See \#setValue(byte[]) for details.
  ///@param mantissa Mantissa for this characteristic
  ///@param exponent exponent value for this characteristic
  ///@param formatType Float format type used to transform the value parameter
  ///@param offset Offset at which the value should be placed
  ///@return true if the locally stored value has been set
  bool setValue2(int mantissa, int exponent, int formatType, int offset) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setValue2,
          jni.JniType.booleanType,
          [mantissa, exponent, formatType, offset]).boolean;

  static final _id_setValue3 = jniAccessors.getMethodIDOf(
      _classRef, "setValue", "(Ljava/lang/String;)Z");

  /// from: public boolean setValue(java.lang.String value)
  ///
  /// Set the locally stored value of this characteristic.
  /// See \#setValue(byte[]) for details.
  ///@param value New value for this characteristic
  ///@return true if the locally stored value has been set
  bool setValue3(jni.JniString value) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setValue3,
      jni.JniType.booleanType,
      [value.reference]).boolean;
}
