// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.bluetooth.BluetoothHidDeviceAppQosSettings
///
/// Represents the Quality of Service (QoS) settings for a Bluetooth HID Device application.
///
/// The BluetoothHidDevice framework will update the L2CAP QoS settings for the app during
/// registration.
///
/// {@see BluetoothHidDevice}
class BluetoothHidDeviceAppQosSettings extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/bluetooth/BluetoothHidDeviceAppQosSettings");
  BluetoothHidDeviceAppQosSettings.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.bluetooth.BluetoothHidDeviceAppQosSettings> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int MAX
  static const MAX = -1;

  /// from: static public final int SERVICE_BEST_EFFORT
  static const SERVICE_BEST_EFFORT = 1;

  /// from: static public final int SERVICE_GUARANTEED
  static const SERVICE_GUARANTEED = 2;

  /// from: static public final int SERVICE_NO_TRAFFIC
  static const SERVICE_NO_TRAFFIC = 0;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIIIII)V");

  /// from: public void <init>(int serviceType, int tokenRate, int tokenBucketSize, int peakBandwidth, int latency, int delayVariation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a BluetoothHidDeviceAppQosSettings object for the Bluetooth L2CAP channel. The QoS
  /// Settings is optional. Please refer to Bluetooth HID Specfication v1.1.1 Section 5.2 and
  /// Appendix D for parameters.
  ///@param serviceType L2CAP service type, default = SERVICE_BEST_EFFORT
  ///@param tokenRate L2CAP token rate, default = 0
  ///@param tokenBucketSize L2CAP token bucket size, default = 0
  ///@param peakBandwidth L2CAP peak bandwidth, default = 0
  ///@param latency L2CAP latency, default = MAX
  ///@param delayVariation L2CAP delay variation, default = MAX
  BluetoothHidDeviceAppQosSettings(int serviceType, int tokenRate,
      int tokenBucketSize, int peakBandwidth, int latency, int delayVariation)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          serviceType,
          tokenRate,
          tokenBucketSize,
          peakBandwidth,
          latency,
          delayVariation
        ]).object);

  static final _id_getServiceType =
      jniAccessors.getMethodIDOf(_classRef, "getServiceType", "()I");

  /// from: public int getServiceType()
  int getServiceType() => jniAccessors.callMethodWithArgs(
      reference, _id_getServiceType, jni.JniType.intType, []).integer;

  static final _id_getTokenRate =
      jniAccessors.getMethodIDOf(_classRef, "getTokenRate", "()I");

  /// from: public int getTokenRate()
  int getTokenRate() => jniAccessors.callMethodWithArgs(
      reference, _id_getTokenRate, jni.JniType.intType, []).integer;

  static final _id_getTokenBucketSize =
      jniAccessors.getMethodIDOf(_classRef, "getTokenBucketSize", "()I");

  /// from: public int getTokenBucketSize()
  int getTokenBucketSize() => jniAccessors.callMethodWithArgs(
      reference, _id_getTokenBucketSize, jni.JniType.intType, []).integer;

  static final _id_getPeakBandwidth =
      jniAccessors.getMethodIDOf(_classRef, "getPeakBandwidth", "()I");

  /// from: public int getPeakBandwidth()
  int getPeakBandwidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getPeakBandwidth, jni.JniType.intType, []).integer;

  static final _id_getLatency =
      jniAccessors.getMethodIDOf(_classRef, "getLatency", "()I");

  /// from: public int getLatency()
  int getLatency() => jniAccessors.callMethodWithArgs(
      reference, _id_getLatency, jni.JniType.intType, []).integer;

  static final _id_getDelayVariation =
      jniAccessors.getMethodIDOf(_classRef, "getDelayVariation", "()I");

  /// from: public int getDelayVariation()
  int getDelayVariation() => jniAccessors.callMethodWithArgs(
      reference, _id_getDelayVariation, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();
}
