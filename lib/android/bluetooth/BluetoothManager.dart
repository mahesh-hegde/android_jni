// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "BluetoothAdapter.dart" as bluetoothadapter_;

import "BluetoothDevice.dart" as bluetoothdevice_;

import "BluetoothGattServer.dart" as bluetoothgattserver_;

import "BluetoothGattServerCallback.dart" as bluetoothgattservercallback_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.bluetooth.BluetoothManager
///
/// High level manager used to obtain an instance of an BluetoothAdapter
/// and to conduct overall Bluetooth Management.
///
/// Use android.content.Context\#getSystemService(java.lang.String)
/// with Context\#BLUETOOTH_SERVICE to create an BluetoothManager,
/// then call \#getAdapter to obtain the BluetoothAdapter.
///
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
///
/// For more information about using BLUETOOTH, read the <a href="{@docRoot}guide/topics/connectivity/bluetooth.html">Bluetooth</a> developer
/// guide.
///
///
/// </div>
///
/// Requires the android.content.pm.PackageManager\#FEATURE_BLUETOOTH PackageManager\#FEATURE_BLUETOOTH feature which can be detected using android.content.pm.PackageManager\#hasSystemFeature(String) PackageManager.hasSystemFeature(String).
///@see Context\#getSystemService
///@see BluetoothAdapter\#getDefaultAdapter()
class BluetoothManager extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/bluetooth/BluetoothManager");
  BluetoothManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  BluetoothManager(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_getAdapter = jniAccessors.getMethodIDOf(
      _classRef, "getAdapter", "()Landroid/bluetooth/BluetoothAdapter;");

  /// from: public android.bluetooth.BluetoothAdapter getAdapter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the default BLUETOOTH Adapter for this device.
  ///@return the default BLUETOOTH Adapter
  bluetoothadapter_.BluetoothAdapter getAdapter() =>
      bluetoothadapter_.BluetoothAdapter.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getAdapter, jni.JniType.objectType, []).object);

  static final _id_getConnectionState = jniAccessors.getMethodIDOf(_classRef,
      "getConnectionState", "(Landroid/bluetooth/BluetoothDevice;I)I");

  /// from: public int getConnectionState(android.bluetooth.BluetoothDevice device, int profile)
  ///
  /// Get the current connection state of the profile to the remote device.
  ///
  /// This is not specific to any application configuration but represents
  /// the connection state of the local Bluetooth adapter for certain profile.
  /// This can be used by applications like status bar which would just like
  /// to know the state of Bluetooth.
  ///
  /// Requires android.Manifest.permission\#BLUETOOTH
  ///@param device Remote bluetooth device.
  ///@param profile GATT or GATT_SERVER
  ///@return State of the profile connection. One of BluetoothProfile\#STATE_CONNECTED,
  /// BluetoothProfile\#STATE_CONNECTING, BluetoothProfile\#STATE_DISCONNECTED,
  /// BluetoothProfile\#STATE_DISCONNECTING
  int getConnectionState(
          bluetoothdevice_.BluetoothDevice device, int profile) =>
      jniAccessors.callMethodWithArgs(reference, _id_getConnectionState,
          jni.JniType.intType, [device.reference, profile]).integer;

  static final _id_getConnectedDevices = jniAccessors.getMethodIDOf(
      _classRef, "getConnectedDevices", "(I)Ljava/util/List;");

  /// from: public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices(int profile)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get connected devices for the specified profile.
  ///
  ///  Return the set of devices which are in state BluetoothProfile\#STATE_CONNECTED
  ///
  /// This is not specific to any application configuration but represents
  /// the connection state of Bluetooth for this profile.
  /// This can be used by applications like status bar which would just like
  /// to know the state of Bluetooth.
  ///
  /// Requires android.Manifest.permission\#BLUETOOTH
  ///@param profile GATT or GATT_SERVER
  ///@return List of devices. The list will be empty on error.
  jni.JniObject getConnectedDevices(int profile) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getConnectedDevices, jni.JniType.objectType, [profile]).object);

  static final _id_getDevicesMatchingConnectionStates =
      jniAccessors.getMethodIDOf(_classRef,
          "getDevicesMatchingConnectionStates", "(I[I)Ljava/util/List;");

  /// from: public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int profile, int[] states)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a list of devices that match any of the given connection
  /// states.
  ///
  ///  If none of the devices match any of the given states,
  /// an empty list will be returned.
  ///
  /// This is not specific to any application configuration but represents
  /// the connection state of the local Bluetooth adapter for this profile.
  /// This can be used by applications like status bar which would just like
  /// to know the state of the local adapter.
  ///
  /// Requires android.Manifest.permission\#BLUETOOTH
  ///@param profile GATT or GATT_SERVER
  ///@param states Array of states. States can be one of BluetoothProfile\#STATE_CONNECTED,
  /// BluetoothProfile\#STATE_CONNECTING, BluetoothProfile\#STATE_DISCONNECTED,
  /// BluetoothProfile\#STATE_DISCONNECTING,
  ///@return List of devices. The list will be empty on error.
  jni.JniObject getDevicesMatchingConnectionStates(
          int profile, jni.JniObject states) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDevicesMatchingConnectionStates,
          jni.JniType.objectType,
          [profile, states.reference]).object);

  static final _id_openGattServer = jniAccessors.getMethodIDOf(
      _classRef,
      "openGattServer",
      "(Landroid/content/Context;Landroid/bluetooth/BluetoothGattServerCallback;)Landroid/bluetooth/BluetoothGattServer;");

  /// from: public android.bluetooth.BluetoothGattServer openGattServer(android.content.Context context, android.bluetooth.BluetoothGattServerCallback callback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Open a GATT Server
  /// The callback is used to deliver results to Caller, such as connection status as well
  /// as the results of any other GATT server operations.
  /// The method returns a BluetoothGattServer instance. You can use BluetoothGattServer
  /// to conduct GATT server operations.
  ///@param context App context
  ///@param callback GATT server callback handler that will receive asynchronous callbacks.
  ///@return BluetoothGattServer instance
  bluetoothgattserver_.BluetoothGattServer openGattServer(
          context_.Context context,
          bluetoothgattservercallback_.BluetoothGattServerCallback callback) =>
      bluetoothgattserver_.BluetoothGattServer.fromRef(jniAccessors
          .callMethodWithArgs(
              reference,
              _id_openGattServer,
              jni.JniType.objectType,
              [context.reference, callback.reference]).object);
}
