// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.UrlQuerySanitizer
///
/// Sanitizes the Query portion of a URL. Simple example:
/// <code>
/// UrlQuerySanitizer sanitizer = new UrlQuerySanitizer();
/// sanitizer.setAllowUnregisteredParamaters(true);
/// sanitizer.parseUrl("http://example.com/?name=Joe+User");
/// String name = sanitizer.getValue("name"));
/// // name now contains "Joe_User"
/// </code>
///
/// Register ValueSanitizers to customize the way individual
/// parameters are sanitized:
/// <code>
/// UrlQuerySanitizer sanitizer = new UrlQuerySanitizer();
/// sanitizer.registerParamater("name", UrlQuerySanitizer.createSpaceLegal());
/// sanitizer.parseUrl("http://example.com/?name=Joe+User");
/// String name = sanitizer.getValue("name"));
/// // name now contains "Joe User". (The string is first decoded, which
/// // converts the '+' to a ' '. Then the string is sanitized, which
/// // converts the ' ' to an '_'. (The ' ' is converted because the default
/// unregistered parameter sanitizer does not allow any special characters,
/// and ' ' is a special character.)
/// </code>
///
/// There are several ways to create ValueSanitizers. In order of increasing
/// sophistication:
/// <ol>
/// <li>Call one of the UrlQuerySanitizer.createXXX() methods.
/// <li>Construct your own instance of
/// UrlQuerySanitizer.IllegalCharacterValueSanitizer.
/// <li>Subclass UrlQuerySanitizer.ValueSanitizer to define your own value
/// sanitizer.
/// </ol>
class UrlQuerySanitizer extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/UrlQuerySanitizer");
  UrlQuerySanitizer.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a UrlQuerySanitizer.
  ///
  /// Defaults:
  /// <ul>
  /// <li>unregistered parameters are not allowed.
  /// <li>the last instance of a repeated parameter is preferred.
  /// <li>The default value sanitizer is an AllIllegal value sanitizer.
  /// <ul>
  UrlQuerySanitizer()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String url)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a UrlQuerySanitizer and parse a URL.
  /// This constructor is provided for convenience when the
  /// default parsing behavior is acceptable.
  ///
  /// Because the URL is parsed before the constructor returns, there isn't
  /// a chance to configure the sanitizer to change the parsing behavior.
  ///
  /// <code>
  /// UrlQuerySanitizer sanitizer = new UrlQuerySanitizer(myUrl);
  /// String name = sanitizer.getValue("name");
  /// </code>
  ///
  /// Defaults:
  /// <ul>
  /// <li>unregistered parameters _are_ allowed.
  /// <li>the last instance of a repeated parameter is preferred.
  /// <li>The default value sanitizer is an AllIllegal value sanitizer.
  /// <ul>
  UrlQuerySanitizer.ctor1(jni.JniString url)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [url.reference]).object);

  static final _id_getUnregisteredParameterValueSanitizer =
      jniAccessors.getMethodIDOf(
          _classRef,
          "getUnregisteredParameterValueSanitizer",
          "()Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: public android.net.UrlQuerySanitizer.ValueSanitizer getUnregisteredParameterValueSanitizer()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the current value sanitizer used when processing
  /// unregistered parameter values.
  ///
  /// __Note:__ The default unregistered parameter value sanitizer is
  /// one that doesn't allow any special characters, similar to what
  /// is returned by calling createAllIllegal.
  ///@return the current ValueSanitizer used to sanitize unregistered
  /// parameter values.
  UrlQuerySanitizer_ValueSanitizer getUnregisteredParameterValueSanitizer() =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getUnregisteredParameterValueSanitizer,
          jni.JniType.objectType, []).object);

  static final _id_setUnregisteredParameterValueSanitizer =
      jniAccessors.getMethodIDOf(
          _classRef,
          "setUnregisteredParameterValueSanitizer",
          "(Landroid/net/UrlQuerySanitizer\$ValueSanitizer;)V");

  /// from: public void setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer.ValueSanitizer sanitizer)
  ///
  /// Set the value sanitizer used when processing unregistered
  /// parameter values.
  ///@param sanitizer set the ValueSanitizer used to sanitize unregistered
  /// parameter values.
  void setUnregisteredParameterValueSanitizer(
          UrlQuerySanitizer_ValueSanitizer sanitizer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setUnregisteredParameterValueSanitizer,
          jni.JniType.voidType,
          [sanitizer.reference]).check();

  static final _id_getAllIllegal = jniAccessors.getStaticMethodIDOf(_classRef,
      "getAllIllegal", "()Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: static public final android.net.UrlQuerySanitizer.ValueSanitizer getAllIllegal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a value sanitizer that does not allow any special characters,
  /// and also does not allow script URLs.
  ///@return a value sanitizer
  static UrlQuerySanitizer_ValueSanitizer getAllIllegal() =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef, _id_getAllIllegal, jni.JniType.objectType, []).object);

  static final _id_getAllButNulLegal = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getAllButNulLegal",
      "()Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: static public final android.net.UrlQuerySanitizer.ValueSanitizer getAllButNulLegal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a value sanitizer that allows everything except Nul ('\0')
  /// characters. Script URLs are allowed.
  ///@return a value sanitizer
  static UrlQuerySanitizer_ValueSanitizer getAllButNulLegal() =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_getAllButNulLegal,
              jni.JniType.objectType, []).object);

  static final _id_getAllButWhitespaceLegal = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getAllButWhitespaceLegal",
      "()Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: static public final android.net.UrlQuerySanitizer.ValueSanitizer getAllButWhitespaceLegal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a value sanitizer that allows everything except Nul ('\0')
  /// characters, space (' '), and other whitespace characters.
  /// Script URLs are allowed.
  ///@return a value sanitizer
  static UrlQuerySanitizer_ValueSanitizer getAllButWhitespaceLegal() =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_getAllButWhitespaceLegal,
              jni.JniType.objectType, []).object);

  static final _id_getUrlLegal = jniAccessors.getStaticMethodIDOf(_classRef,
      "getUrlLegal", "()Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: static public final android.net.UrlQuerySanitizer.ValueSanitizer getUrlLegal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a value sanitizer that allows all the characters used by
  /// encoded URLs. Does not allow script URLs.
  ///@return a value sanitizer
  static UrlQuerySanitizer_ValueSanitizer getUrlLegal() =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef, _id_getUrlLegal, jni.JniType.objectType, []).object);

  static final _id_getUrlAndSpaceLegal = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getUrlAndSpaceLegal",
      "()Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: static public final android.net.UrlQuerySanitizer.ValueSanitizer getUrlAndSpaceLegal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a value sanitizer that allows all the characters used by
  /// encoded URLs and allows spaces, which are not technically legal
  /// in encoded URLs, but commonly appear anyway.
  /// Does not allow script URLs.
  ///@return a value sanitizer
  static UrlQuerySanitizer_ValueSanitizer getUrlAndSpaceLegal() =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_getUrlAndSpaceLegal,
              jni.JniType.objectType, []).object);

  static final _id_getAmpLegal = jniAccessors.getStaticMethodIDOf(_classRef,
      "getAmpLegal", "()Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: static public final android.net.UrlQuerySanitizer.ValueSanitizer getAmpLegal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a value sanitizer that does not allow any special characters
  /// except ampersand ('&'). Does not allow script URLs.
  ///@return a value sanitizer
  static UrlQuerySanitizer_ValueSanitizer getAmpLegal() =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef, _id_getAmpLegal, jni.JniType.objectType, []).object);

  static final _id_getAmpAndSpaceLegal = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getAmpAndSpaceLegal",
      "()Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: static public final android.net.UrlQuerySanitizer.ValueSanitizer getAmpAndSpaceLegal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a value sanitizer that does not allow any special characters
  /// except ampersand ('&') and space (' '). Does not allow script URLs.
  ///@return a value sanitizer
  static UrlQuerySanitizer_ValueSanitizer getAmpAndSpaceLegal() =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_getAmpAndSpaceLegal,
              jni.JniType.objectType, []).object);

  static final _id_getSpaceLegal = jniAccessors.getStaticMethodIDOf(_classRef,
      "getSpaceLegal", "()Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: static public final android.net.UrlQuerySanitizer.ValueSanitizer getSpaceLegal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a value sanitizer that does not allow any special characters
  /// except space (' '). Does not allow script URLs.
  ///@return a value sanitizer
  static UrlQuerySanitizer_ValueSanitizer getSpaceLegal() =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef, _id_getSpaceLegal, jni.JniType.objectType, []).object);

  static final _id_getAllButNulAndAngleBracketsLegal =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "getAllButNulAndAngleBracketsLegal",
          "()Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: static public final android.net.UrlQuerySanitizer.ValueSanitizer getAllButNulAndAngleBracketsLegal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a value sanitizer that allows any special characters
  /// except angle brackets ('<' and '>') and Nul ('\0').
  /// Allows script URLs.
  ///@return a value sanitizer
  static UrlQuerySanitizer_ValueSanitizer getAllButNulAndAngleBracketsLegal() =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef,
              _id_getAllButNulAndAngleBracketsLegal,
              jni.JniType.objectType, []).object);

  static final _id_parseUrl = jniAccessors.getMethodIDOf(
      _classRef, "parseUrl", "(Ljava/lang/String;)V");

  /// from: public void parseUrl(java.lang.String url)
  ///
  /// Parse the query parameters out of an encoded URL.
  /// Works by extracting the query portion from the URL and then
  /// calling parseQuery(). If there is no query portion it is
  /// treated as if the query portion is an empty string.
  ///@param url the encoded URL to parse.
  void parseUrl(jni.JniString url) => jniAccessors.callMethodWithArgs(
      reference, _id_parseUrl, jni.JniType.voidType, [url.reference]).check();

  static final _id_parseQuery = jniAccessors.getMethodIDOf(
      _classRef, "parseQuery", "(Ljava/lang/String;)V");

  /// from: public void parseQuery(java.lang.String query)
  ///
  /// Parse a query. A query string is any number of parameter-value clauses
  /// separated by any non-zero number of ampersands. A parameter-value clause
  /// is a parameter followed by an equal sign, followed by a value. If the
  /// equal sign is missing, the value is assumed to be the empty string.
  ///@param query the query to parse.
  void parseQuery(jni.JniString query) => jniAccessors.callMethodWithArgs(
      reference,
      _id_parseQuery,
      jni.JniType.voidType,
      [query.reference]).check();

  static final _id_getParameterSet = jniAccessors.getMethodIDOf(
      _classRef, "getParameterSet", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.String> getParameterSet()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get a set of all of the parameters found in the sanitized query.
  ///
  /// Note: Do not modify this set. Treat it as a read-only set.
  ///@return all the parameters found in the current query.
  jni.JniObject getParameterSet() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getParameterSet, jni.JniType.objectType, []).object);

  static final _id_getParameterList = jniAccessors.getMethodIDOf(
      _classRef, "getParameterList", "()Ljava/util/List;");

  /// from: public java.util.List<android.net.UrlQuerySanitizer.ParameterValuePair> getParameterList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// An array list of all of the parameter value pairs in the sanitized
  /// query, in the order they appeared in the query. May contain duplicate
  /// parameters.
  /// <p class="note">__Note:__ Do not modify this list. Treat it as a read-only list.
  ///
  jni.JniObject getParameterList() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getParameterList, jni.JniType.objectType, []).object);

  static final _id_hasParameter = jniAccessors.getMethodIDOf(
      _classRef, "hasParameter", "(Ljava/lang/String;)Z");

  /// from: public boolean hasParameter(java.lang.String parameter)
  ///
  /// Check if a parameter exists in the current sanitized query.
  ///@param parameter the unencoded name of a parameter.
  ///@return true if the paramater exists in the current sanitized queary.
  bool hasParameter(jni.JniString parameter) => jniAccessors.callMethodWithArgs(
      reference,
      _id_hasParameter,
      jni.JniType.booleanType,
      [parameter.reference]).boolean;

  static final _id_getValue = jniAccessors.getMethodIDOf(
      _classRef, "getValue", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getValue(java.lang.String parameter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the value for a parameter in the current sanitized query.
  /// Returns null if the parameter does not
  /// exit.
  ///@param parameter the unencoded name of a parameter.
  ///@return the sanitized unencoded value of the parameter,
  /// or null if the parameter does not exist.
  jni.JniString getValue(jni.JniString parameter) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getValue, jni.JniType.objectType, [parameter.reference]).object);

  static final _id_registerParameter = jniAccessors.getMethodIDOf(
      _classRef,
      "registerParameter",
      "(Ljava/lang/String;Landroid/net/UrlQuerySanitizer\$ValueSanitizer;)V");

  /// from: public void registerParameter(java.lang.String parameter, android.net.UrlQuerySanitizer.ValueSanitizer valueSanitizer)
  ///
  /// Register a value sanitizer for a particular parameter. Can also be used
  /// to replace or remove an already-set value sanitizer.
  ///
  /// Registering a non-null value sanitizer for a particular parameter
  /// makes that parameter a registered parameter.
  ///@param parameter an unencoded parameter name
  ///@param valueSanitizer the value sanitizer to use for a particular
  /// parameter. May be null in order to unregister that parameter.
  ///@see \#getAllowUnregisteredParamaters()
  void registerParameter(jni.JniString parameter,
          UrlQuerySanitizer_ValueSanitizer valueSanitizer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_registerParameter,
          jni.JniType.voidType,
          [parameter.reference, valueSanitizer.reference]).check();

  static final _id_registerParameters = jniAccessors.getMethodIDOf(
      _classRef,
      "registerParameters",
      "([Ljava/lang/String;Landroid/net/UrlQuerySanitizer\$ValueSanitizer;)V");

  /// from: public void registerParameters(java.lang.String[] parameters, android.net.UrlQuerySanitizer.ValueSanitizer valueSanitizer)
  ///
  /// Register a value sanitizer for an array of parameters.
  ///@param parameters An array of unencoded parameter names.
  ///@param valueSanitizer
  ///@see \#registerParameter
  void registerParameters(jni.JniObject parameters,
          UrlQuerySanitizer_ValueSanitizer valueSanitizer) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_registerParameters,
          jni.JniType.voidType,
          [parameters.reference, valueSanitizer.reference]).check();

  static final _id_setAllowUnregisteredParamaters = jniAccessors.getMethodIDOf(
      _classRef, "setAllowUnregisteredParamaters", "(Z)V");

  /// from: public void setAllowUnregisteredParamaters(boolean allowUnregisteredParamaters)
  ///
  /// Set whether or not unregistered parameters are allowed. If they
  /// are not allowed, then they will be dropped when a query is sanitized.
  ///
  /// Defaults to false.
  ///@param allowUnregisteredParamaters true to allow unregistered parameters.
  ///@see \#getAllowUnregisteredParamaters()
  void setAllowUnregisteredParamaters(bool allowUnregisteredParamaters) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setAllowUnregisteredParamaters,
          jni.JniType.voidType,
          [allowUnregisteredParamaters]).check();

  static final _id_getAllowUnregisteredParamaters = jniAccessors.getMethodIDOf(
      _classRef, "getAllowUnregisteredParamaters", "()Z");

  /// from: public boolean getAllowUnregisteredParamaters()
  ///
  /// Get whether or not unregistered parameters are allowed. If not
  /// allowed, they will be dropped when a query is parsed.
  ///@return true if unregistered parameters are allowed.
  ///@see \#setAllowUnregisteredParamaters(boolean)
  bool getAllowUnregisteredParamaters() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getAllowUnregisteredParamaters,
      jni.JniType.booleanType, []).boolean;

  static final _id_setPreferFirstRepeatedParameter = jniAccessors.getMethodIDOf(
      _classRef, "setPreferFirstRepeatedParameter", "(Z)V");

  /// from: public void setPreferFirstRepeatedParameter(boolean preferFirstRepeatedParameter)
  ///
  /// Set whether or not the first occurrence of a repeated parameter is
  /// preferred. True means the first repeated parameter is preferred.
  /// False means that the last repeated parameter is preferred.
  ///
  /// The preferred parameter is the one that is returned when getParameter
  /// is called.
  ///
  /// defaults to false.
  ///@param preferFirstRepeatedParameter True if the first repeated
  /// parameter is preferred.
  ///@see \#getPreferFirstRepeatedParameter()
  void setPreferFirstRepeatedParameter(bool preferFirstRepeatedParameter) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setPreferFirstRepeatedParameter,
          jni.JniType.voidType,
          [preferFirstRepeatedParameter]).check();

  static final _id_getPreferFirstRepeatedParameter = jniAccessors.getMethodIDOf(
      _classRef, "getPreferFirstRepeatedParameter", "()Z");

  /// from: public boolean getPreferFirstRepeatedParameter()
  ///
  /// Get whether or not the first occurrence of a repeated parameter is
  /// preferred.
  ///@return true if the first occurrence of a repeated parameter is
  /// preferred.
  ///@see \#setPreferFirstRepeatedParameter(boolean)
  bool getPreferFirstRepeatedParameter() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getPreferFirstRepeatedParameter,
      jni.JniType.booleanType, []).boolean;

  static final _id_parseEntry = jniAccessors.getMethodIDOf(
      _classRef, "parseEntry", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: protected void parseEntry(java.lang.String parameter, java.lang.String value)
  ///
  /// Parse an escaped parameter-value pair. The default implementation
  /// unescapes both the parameter and the value, then looks up the
  /// effective value sanitizer for the parameter and uses it to sanitize
  /// the value. If all goes well then addSanitizedValue is called with
  /// the unescaped parameter and the sanitized unescaped value.
  ///@param parameter an escaped parameter
  ///@param value an unsanitzied escaped value
  void parseEntry(jni.JniString parameter, jni.JniString value) =>
      jniAccessors.callMethodWithArgs(reference, _id_parseEntry,
          jni.JniType.voidType, [parameter.reference, value.reference]).check();

  static final _id_addSanitizedEntry = jniAccessors.getMethodIDOf(_classRef,
      "addSanitizedEntry", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: protected void addSanitizedEntry(java.lang.String parameter, java.lang.String value)
  ///
  /// Record a sanitized parameter-value pair. Override if you want to
  /// do additional filtering or validation.
  ///@param parameter an unescaped parameter
  ///@param value a sanitized unescaped value
  void addSanitizedEntry(jni.JniString parameter, jni.JniString value) =>
      jniAccessors.callMethodWithArgs(reference, _id_addSanitizedEntry,
          jni.JniType.voidType, [parameter.reference, value.reference]).check();

  static final _id_getValueSanitizer = jniAccessors.getMethodIDOf(
      _classRef,
      "getValueSanitizer",
      "(Ljava/lang/String;)Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: public android.net.UrlQuerySanitizer.ValueSanitizer getValueSanitizer(java.lang.String parameter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the value sanitizer for a parameter. Returns null if there
  /// is no value sanitizer registered for the parameter.
  ///@param parameter the unescaped parameter
  ///@return the currently registered value sanitizer for this parameter.
  ///@see \#registerParameter(String, android.net.UrlQuerySanitizer.ValueSanitizer)
  UrlQuerySanitizer_ValueSanitizer getValueSanitizer(jni.JniString parameter) =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getValueSanitizer,
          jni.JniType.objectType,
          [parameter.reference]).object);

  static final _id_getEffectiveValueSanitizer = jniAccessors.getMethodIDOf(
      _classRef,
      "getEffectiveValueSanitizer",
      "(Ljava/lang/String;)Landroid/net/UrlQuerySanitizer\$ValueSanitizer;");

  /// from: public android.net.UrlQuerySanitizer.ValueSanitizer getEffectiveValueSanitizer(java.lang.String parameter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the effective value sanitizer for a parameter. Like getValueSanitizer,
  /// except if there is no value sanitizer registered for a parameter, and
  /// unregistered paramaters are allowed, then the default value sanitizer is
  /// returned.
  ///@param parameter an unescaped parameter
  ///@return the effective value sanitizer for a parameter.
  UrlQuerySanitizer_ValueSanitizer getEffectiveValueSanitizer(
          jni.JniString parameter) =>
      UrlQuerySanitizer_ValueSanitizer.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getEffectiveValueSanitizer,
          jni.JniType.objectType,
          [parameter.reference]).object);

  static final _id_unescape = jniAccessors.getMethodIDOf(
      _classRef, "unescape", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String unescape(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Unescape an escaped string.
  /// <ul>
  /// <li>'+' characters are replaced by
  /// ' ' characters.
  /// <li>Valid "%xx" escape sequences are replaced by the
  /// corresponding unescaped character.
  /// <li>Invalid escape sequences such as %1z", are passed through unchanged.
  /// <ol>
  ///@param string the escaped string
  ///@return the unescaped string.
  jni.JniString unescape(jni.JniString string) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_unescape, jni.JniType.objectType, [string.reference]).object);

  static final _id_isHexDigit =
      jniAccessors.getMethodIDOf(_classRef, "isHexDigit", "(C)Z");

  /// from: protected boolean isHexDigit(char c)
  ///
  /// Test if a character is a hexidecimal digit. Both upper case and lower
  /// case hex digits are allowed.
  ///@param c the character to test
  ///@return true if c is a hex digit.
  bool isHexDigit(int c) => jniAccessors.callMethodWithArgs(
      reference, _id_isHexDigit, jni.JniType.booleanType, [c]).boolean;

  static final _id_decodeHexDigit =
      jniAccessors.getMethodIDOf(_classRef, "decodeHexDigit", "(C)I");

  /// from: protected int decodeHexDigit(char c)
  ///
  /// Convert a character that represents a hexidecimal digit into an integer.
  /// If the character is not a hexidecimal digit, then -1 is returned.
  /// Both upper case and lower case hex digits are allowed.
  ///@param c the hexidecimal digit.
  ///@return the integer value of the hexidecimal digit.
  int decodeHexDigit(int c) => jniAccessors.callMethodWithArgs(
      reference, _id_decodeHexDigit, jni.JniType.intType, [c]).integer;

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, "clear", "()V");

  /// from: protected void clear()
  ///
  /// Clear the existing entries. Called to get ready to parse a new
  /// query string.
  void clear() => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniType.voidType, []).check();
}

/// from: android.net.UrlQuerySanitizer$ValueSanitizer
///
/// A functor used to sanitize a single query value.
class UrlQuerySanitizer_ValueSanitizer extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/UrlQuerySanitizer\$ValueSanitizer");
  UrlQuerySanitizer_ValueSanitizer.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_sanitize = jniAccessors.getMethodIDOf(
      _classRef, "sanitize", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public abstract java.lang.String sanitize(java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sanitize an unencoded value.
  ///@param value
  ///@return the sanitized unencoded value
  jni.JniString sanitize(jni.JniString value) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_sanitize, jni.JniType.objectType, [value.reference]).object);
}

/// from: android.net.UrlQuerySanitizer$ParameterValuePair
///
/// A simple tuple that holds parameter-value pairs.
class UrlQuerySanitizer_ParameterValuePair extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/net/UrlQuerySanitizer\$ParameterValuePair");
  UrlQuerySanitizer_ParameterValuePair.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_mParameter =
      jniAccessors.getFieldIDOf(_classRef, "mParameter", "Ljava/lang/String;");

  /// from: public java.lang.String mParameter
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The unencoded parameter
  jni.JniString get mParameter => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_mParameter, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String mParameter
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The unencoded parameter
  set mParameter(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_mParameter, value.reference);

  static final _id_mValue =
      jniAccessors.getFieldIDOf(_classRef, "mValue", "Ljava/lang/String;");

  /// from: public java.lang.String mValue
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The unencoded value
  jni.JniString get mValue => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_mValue, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String mValue
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The unencoded value
  set mValue(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_mValue, value.reference);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String parameter, java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a parameter-value tuple.
  ///@param parameter an unencoded parameter
  ///@param value an unencoded value
  UrlQuerySanitizer_ParameterValuePair(
      jni.JniString parameter, jni.JniString value)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [parameter.reference, value.reference]).object);
}

/// from: android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer
///
/// Sanitize values based on which characters they contain. Illegal
/// characters are replaced with either space or '_', depending upon
/// whether space is a legal character or not.
class UrlQuerySanitizer_IllegalCharacterValueSanitizer extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/net/UrlQuerySanitizer\$IllegalCharacterValueSanitizer");
  UrlQuerySanitizer_IllegalCharacterValueSanitizer.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  /// from: static public final int ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL
  ///
  /// <ul>
  /// <li>Allow all but.
  /// <ul>
  ///  <li>Nul ('\0')
  ///  <li>Angle brackets ('<', '>')
  /// </ul>
  /// <li>Deny script URLs.
  /// </ul>
  static const ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL = 1439;

  /// from: static public final int ALL_BUT_NUL_LEGAL
  ///
  /// <ul>
  /// <li>Allow all special characters except Nul. ('\0').
  /// <li>Allow script URLs.
  /// </ul>
  static const ALL_BUT_NUL_LEGAL = 1535;

  /// from: static public final int ALL_BUT_WHITESPACE_LEGAL
  ///
  /// <ul>
  /// <li>Allow all special characters except for:
  /// <ul>
  ///  <li>whitespace characters
  ///  <li>Nul ('\0')
  /// </ul>
  /// <li>Allow script URLs.
  /// </ul>
  static const ALL_BUT_WHITESPACE_LEGAL = 1532;

  /// from: static public final int ALL_ILLEGAL
  ///
  /// <ul>
  /// <li>Deny all special characters.
  /// <li>Deny script URLs.
  /// </ul>
  static const ALL_ILLEGAL = 0;

  /// from: static public final int ALL_OK
  ///
  /// Mask with all fields set to OK
  static const ALL_OK = 2047;

  /// from: static public final int ALL_WHITESPACE_OK
  ///
  /// Mask with both regular space and other whitespace OK
  static const ALL_WHITESPACE_OK = 3;

  /// from: static public final int AMP_AND_SPACE_LEGAL
  ///
  /// <ul>
  /// <li>Allow ampersand.
  /// <li>Allow space.
  /// <li>Deny script URLs.
  /// </ul>
  static const AMP_AND_SPACE_LEGAL = 129;

  /// from: static public final int AMP_LEGAL
  ///
  /// <ul>
  /// <li>Allow ampersand.
  /// <li>Deny script URLs.
  /// </ul>
  static const AMP_LEGAL = 128;

  /// from: static public final int AMP_OK
  ///
  /// Allow ampersand characters ('&')
  static const AMP_OK = 128;

  /// from: static public final int DQUOTE_OK
  ///
  /// Allow double quote characters. ('"')
  static const DQUOTE_OK = 8;

  /// from: static public final int GT_OK
  ///
  /// Allow greater-than characters. ('>')
  static const GT_OK = 64;

  /// from: static public final int LT_OK
  ///
  /// Allow less-than characters. ('<')
  static const LT_OK = 32;

  /// from: static public final int NON_7_BIT_ASCII_OK
  ///
  /// Allow characters with character codes 128 to 255.
  static const NON_7_BIT_ASCII_OK = 4;

  /// from: static public final int NUL_OK
  ///
  /// Allow nul characters ('\0')
  static const NUL_OK = 512;

  /// from: static public final int OTHER_WHITESPACE_OK
  ///
  /// Allow whitespace characters other than space. The
  /// other whitespace characters are
  /// '\t' '\f' '\n' '\r' and '\0x000b' (vertical tab)
  static const OTHER_WHITESPACE_OK = 2;

  /// from: static public final int PCT_OK
  ///
  /// Allow percent-sign characters ('%')
  static const PCT_OK = 256;

  /// from: static public final int SCRIPT_URL_OK
  ///
  /// Allow text to start with a script URL
  /// such as "javascript:" or "vbscript:"
  static const SCRIPT_URL_OK = 1024;

  /// from: static public final int SPACE_LEGAL
  ///
  /// <ul>
  /// <li>Allow space.
  /// <li>Deny script URLs.
  /// </ul>
  static const SPACE_LEGAL = 1;

  /// from: static public final int SPACE_OK
  ///
  /// Allow space (' ') characters.
  static const SPACE_OK = 1;

  /// from: static public final int SQUOTE_OK
  ///
  /// Allow single quote characters. ('\'')
  static const SQUOTE_OK = 16;

  /// from: static public final int URL_AND_SPACE_LEGAL
  ///
  /// <ul>
  /// <li>Allow characters used by encoded URLs.
  /// <li>Allow spaces.
  /// <li>Deny script URLs.
  /// </ul>
  static const URL_AND_SPACE_LEGAL = 405;

  /// from: static public final int URL_LEGAL
  ///
  /// <ul>
  /// <li>Allow characters used by encoded URLs.
  /// <li>Deny script URLs.
  /// </ul>
  static const URL_LEGAL = 404;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a sanitizer. The parameters set the behavior of the
  /// sanitizer.
  ///@param flags some combination of the XXX_OK flags.
  UrlQuerySanitizer_IllegalCharacterValueSanitizer(int flags)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [flags]).object);

  static final _id_sanitize = jniAccessors.getMethodIDOf(
      _classRef, "sanitize", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String sanitize(java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sanitize a value.
  /// <ol>
  /// <li>If script URLs are not OK, the will be removed.
  /// <li>If neither spaces nor other white space is OK, then
  /// white space will be trimmed from the beginning and end of
  /// the URL. (Just the actual white space characters are trimmed, not
  /// other control codes.)
  /// <li> Illegal characters will be replaced with
  /// either ' ' or '_', depending on whether a space is itself a
  /// legal character.
  /// </ol>
  ///@param value
  ///@return the sanitized value
  jni.JniString sanitize(jni.JniString value) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_sanitize, jni.JniType.objectType, [value.reference]).object);
}
