// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.http.X509TrustManagerExtensions
///
/// X509TrustManager wrapper exposing Android-added features.
///
/// The checkServerTrusted method allows callers to perform additional
/// verification of certificate chains after they have been successfully verified
/// by the platform.
///
///
class X509TrustManagerExtensions extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/http/X509TrustManagerExtensions");
  X509TrustManagerExtensions.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljavax/net/ssl/X509TrustManager;)V");

  /// from: public void <init>(javax.net.ssl.X509TrustManager tm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new X509TrustManagerExtensions wrapper.
  ///@param tm A X509TrustManager as returned by TrustManagerFactory.getInstance();
  ///@throws IllegalArgumentException If tm is an unsupported TrustManager type.
  X509TrustManagerExtensions(jni.JniObject tm)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [tm.reference]).object);

  static final _id_checkServerTrusted = jniAccessors.getMethodIDOf(
      _classRef,
      "checkServerTrusted",
      "([Ljava/security/cert/X509Certificate;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;");

  /// from: public java.util.List<java.security.cert.X509Certificate> checkServerTrusted(java.security.cert.X509Certificate[] chain, java.lang.String authType, java.lang.String host)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Verifies the given certificate chain.
  ///
  /// See X509TrustManager\#checkServerTrusted(X509Certificate[], String) for a
  /// description of the chain and authType parameters. The final parameter, host, should be the
  /// hostname of the server.
  ///
  ///@throws CertificateException if the chain does not verify correctly.
  ///@return the properly ordered chain used for verification as a list of X509Certificates.
  jni.JniObject checkServerTrusted(
          jni.JniObject chain, jni.JniString authType, jni.JniString host) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_checkServerTrusted,
          jni.JniType.objectType,
          [chain.reference, authType.reference, host.reference]).object);

  static final _id_isUserAddedCertificate = jniAccessors.getMethodIDOf(
      _classRef,
      "isUserAddedCertificate",
      "(Ljava/security/cert/X509Certificate;)Z");

  /// from: public boolean isUserAddedCertificate(java.security.cert.X509Certificate cert)
  ///
  /// Checks whether a CA certificate is added by an user.
  ///
  /// Since X509TrustManager\#checkServerTrusted may allow its parameter {@code chain} to
  /// chain up to user-added CA certificates, this method can be used to perform additional
  /// policies for user-added CA certificates.
  ///@return {@code true} to indicate that the certificate authority exists in the user added
  /// certificate store, {@code false} otherwise.
  bool isUserAddedCertificate(jni.JniObject cert) =>
      jniAccessors.callMethodWithArgs(reference, _id_isUserAddedCertificate,
          jni.JniType.booleanType, [cert.reference]).boolean;

  static final _id_isSameTrustConfiguration = jniAccessors.getMethodIDOf(
      _classRef,
      "isSameTrustConfiguration",
      "(Ljava/lang/String;Ljava/lang/String;)Z");

  /// from: public boolean isSameTrustConfiguration(java.lang.String hostname1, java.lang.String hostname2)
  ///
  /// Returns {@code true} if the TrustManager uses the same trust configuration for the provided
  /// hostnames.
  bool isSameTrustConfiguration(
          jni.JniString hostname1, jni.JniString hostname2) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_isSameTrustConfiguration,
          jni.JniType.booleanType,
          [hostname1.reference, hostname2.reference]).boolean;
}
