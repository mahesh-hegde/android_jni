// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "SslCertificate.dart" as sslcertificate_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.http.SslError
///
/// This class represents a set of one or more SSL errors and the associated SSL
/// certificate.
class SslError extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/net/http/SslError");
  SslError.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int SSL_DATE_INVALID
  ///
  /// The date of the certificate is invalid
  static const SSL_DATE_INVALID = 4;

  /// from: static public final int SSL_EXPIRED
  ///
  /// The certificate has expired
  static const SSL_EXPIRED = 1;

  /// from: static public final int SSL_IDMISMATCH
  ///
  /// Hostname mismatch
  static const SSL_IDMISMATCH = 2;

  /// from: static public final int SSL_INVALID
  ///
  /// A generic error occurred
  static const SSL_INVALID = 5;

  /// from: static public final int SSL_MAX_ERROR
  ///
  /// The number of different SSL errors.
  ///@deprecated This constant is not necessary for using the SslError API and
  ///             can change from release to release.
  static const SSL_MAX_ERROR = 6;

  /// from: static public final int SSL_NOTYETVALID
  ///
  /// The certificate is not yet valid
  static const SSL_NOTYETVALID = 0;

  /// from: static public final int SSL_UNTRUSTED
  ///
  /// The certificate authority is not trusted
  static const SSL_UNTRUSTED = 3;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(ILandroid/net/http/SslCertificate;)V");

  /// from: public void <init>(int error, android.net.http.SslCertificate certificate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new SslError object using the supplied error and certificate.
  /// The URL will be set to the empty string.
  ///@param error The SSL error
  ///@param certificate The associated SSL certificate
  ///@deprecated Use \#SslError(int, SslCertificate, String)
  SslError(int error, sslcertificate_.SslCertificate certificate)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [error, certificate.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(ILjava/security/cert/X509Certificate;)V");

  /// from: public void <init>(int error, java.security.cert.X509Certificate certificate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new SslError object using the supplied error and certificate.
  /// The URL will be set to the empty string.
  ///@param error The SSL error
  ///@param certificate The associated SSL certificate
  ///@deprecated Use \#SslError(int, X509Certificate, String)
  SslError.ctor1(int error, jni.JniObject certificate)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [error, certificate.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(ILandroid/net/http/SslCertificate;Ljava/lang/String;)V");

  /// from: public void <init>(int error, android.net.http.SslCertificate certificate, java.lang.String url)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new SslError object using the supplied error, certificate and
  /// URL.
  ///@param error The SSL error
  ///@param certificate The associated SSL certificate
  ///@param url The associated URL
  SslError.ctor2(
      int error, sslcertificate_.SslCertificate certificate, jni.JniString url)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [error, certificate.reference, url.reference]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(ILjava/security/cert/X509Certificate;Ljava/lang/String;)V");

  /// from: public void <init>(int error, java.security.cert.X509Certificate certificate, java.lang.String url)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new SslError object using the supplied error, certificate and
  /// URL.
  ///@param error The SSL error
  ///@param certificate The associated SSL certificate
  ///@param url The associated URL
  SslError.ctor3(int error, jni.JniObject certificate, jni.JniString url)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3,
            [error, certificate.reference, url.reference]).object);

  static final _id_getCertificate = jniAccessors.getMethodIDOf(
      _classRef, "getCertificate", "()Landroid/net/http/SslCertificate;");

  /// from: public android.net.http.SslCertificate getCertificate()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the SSL certificate associated with this object.
  ///@return The SSL certificate, non-null.
  sslcertificate_.SslCertificate getCertificate() =>
      sslcertificate_.SslCertificate.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCertificate, jni.JniType.objectType, []).object);

  static final _id_getUrl =
      jniAccessors.getMethodIDOf(_classRef, "getUrl", "()Ljava/lang/String;");

  /// from: public java.lang.String getUrl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the URL associated with this object.
  ///@return The URL, non-null.
  jni.JniString getUrl() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUrl, jni.JniType.objectType, []).object);

  static final _id_addError =
      jniAccessors.getMethodIDOf(_classRef, "addError", "(I)Z");

  /// from: public boolean addError(int error)
  ///
  /// Adds the supplied SSL error to the set.
  ///@param error The SSL error to add
  ///@return True if the error being added is a known SSL error, otherwise
  ///         false.
  bool addError(int error) => jniAccessors.callMethodWithArgs(
      reference, _id_addError, jni.JniType.booleanType, [error]).boolean;

  static final _id_hasError =
      jniAccessors.getMethodIDOf(_classRef, "hasError", "(I)Z");

  /// from: public boolean hasError(int error)
  ///
  /// Determines whether this object includes the supplied error.
  ///@param error The SSL error to check for
  ///@return True if this object includes the error, otherwise false.
  bool hasError(int error) => jniAccessors.callMethodWithArgs(
      reference, _id_hasError, jni.JniType.booleanType, [error]).boolean;

  static final _id_getPrimaryError =
      jniAccessors.getMethodIDOf(_classRef, "getPrimaryError", "()I");

  /// from: public int getPrimaryError()
  ///
  /// Gets the most severe SSL error in this object's set of errors.
  /// Returns -1 if the set is empty.
  ///@return The most severe SSL error, or -1 if the set is empty.
  int getPrimaryError() => jniAccessors.callMethodWithArgs(
      reference, _id_getPrimaryError, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a string representation of this object.
  ///@return A String representation of this object.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
