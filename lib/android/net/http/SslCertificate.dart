// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Bundle.dart" as bundle_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.http.SslCertificate
///
/// SSL certificate info (certificate details) class
class SslCertificate extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/http/SslCertificate");
  SslCertificate.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String issuedTo, java.lang.String issuedBy, java.lang.String validNotBefore, java.lang.String validNotAfter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new SSL certificate object
  ///@param issuedTo The entity this certificate is issued to
  ///@param issuedBy The entity that issued this certificate
  ///@param validNotBefore The not-before date from the certificate
  ///     validity period in ISO 8601 format
  ///@param validNotAfter The not-after date from the certificate
  ///     validity period in ISO 8601 format
  ///@deprecated Use \#SslCertificate(X509Certificate)
  SslCertificate(jni.JniString issuedTo, jni.JniString issuedBy,
      jni.JniString validNotBefore, jni.JniString validNotAfter)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          issuedTo.reference,
          issuedBy.reference,
          validNotBefore.reference,
          validNotAfter.reference
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;)V");

  /// from: public void <init>(java.lang.String issuedTo, java.lang.String issuedBy, java.util.Date validNotBefore, java.util.Date validNotAfter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new SSL certificate object
  ///@param issuedTo The entity this certificate is issued to
  ///@param issuedBy The entity that issued this certificate
  ///@param validNotBefore The not-before date from the certificate validity period
  ///@param validNotAfter The not-after date from the certificate validity period
  ///@deprecated Use \#SslCertificate(X509Certificate)
  SslCertificate.ctor1(jni.JniString issuedTo, jni.JniString issuedBy,
      jni.JniObject validNotBefore, jni.JniObject validNotAfter)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          issuedTo.reference,
          issuedBy.reference,
          validNotBefore.reference,
          validNotAfter.reference
        ]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/security/cert/X509Certificate;)V");

  /// from: public void <init>(java.security.cert.X509Certificate certificate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new SSL certificate object from an X509 certificate
  ///@param certificate X509 certificate
  SslCertificate.ctor2(jni.JniObject certificate)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [certificate.reference]).object);

  static final _id_saveState = jniAccessors.getStaticMethodIDOf(_classRef,
      "saveState", "(Landroid/net/http/SslCertificate;)Landroid/os/Bundle;");

  /// from: static public android.os.Bundle saveState(android.net.http.SslCertificate certificate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Saves the certificate state to a bundle
  ///@param certificate The SSL certificate to store
  ///@return A bundle with the certificate stored in it or null if fails
  static bundle_.Bundle saveState(SslCertificate certificate) =>
      bundle_.Bundle.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_saveState,
          jni.JniType.objectType,
          [certificate.reference]).object);

  static final _id_restoreState = jniAccessors.getStaticMethodIDOf(_classRef,
      "restoreState", "(Landroid/os/Bundle;)Landroid/net/http/SslCertificate;");

  /// from: static public android.net.http.SslCertificate restoreState(android.os.Bundle bundle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Restores the certificate stored in the bundle
  ///@param bundle The bundle with the certificate state stored in it
  ///@return The SSL certificate stored in the bundle or null if fails
  static SslCertificate restoreState(bundle_.Bundle bundle) =>
      SslCertificate.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_restoreState, jni.JniType.objectType, [bundle.reference]).object);

  static final _id_getValidNotBeforeDate = jniAccessors.getMethodIDOf(
      _classRef, "getValidNotBeforeDate", "()Ljava/util/Date;");

  /// from: public java.util.Date getValidNotBeforeDate()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return Not-before date from the certificate validity period or
  /// "" if none has been set
  jni.JniObject getValidNotBeforeDate() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getValidNotBeforeDate, jni.JniType.objectType, []).object);

  static final _id_getValidNotBefore = jniAccessors.getMethodIDOf(
      _classRef, "getValidNotBefore", "()Ljava/lang/String;");

  /// from: public java.lang.String getValidNotBefore()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return Not-before date from the certificate validity period in
  /// ISO 8601 format or "" if none has been set
  ///@deprecated Use \#getValidNotBeforeDate()
  jni.JniString getValidNotBefore() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getValidNotBefore, jni.JniType.objectType, []).object);

  static final _id_getValidNotAfterDate = jniAccessors.getMethodIDOf(
      _classRef, "getValidNotAfterDate", "()Ljava/util/Date;");

  /// from: public java.util.Date getValidNotAfterDate()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return Not-after date from the certificate validity period or
  /// "" if none has been set
  jni.JniObject getValidNotAfterDate() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getValidNotAfterDate, jni.JniType.objectType, []).object);

  static final _id_getValidNotAfter = jniAccessors.getMethodIDOf(
      _classRef, "getValidNotAfter", "()Ljava/lang/String;");

  /// from: public java.lang.String getValidNotAfter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return Not-after date from the certificate validity period in
  /// ISO 8601 format or "" if none has been set
  ///@deprecated Use \#getValidNotAfterDate()
  jni.JniString getValidNotAfter() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getValidNotAfter, jni.JniType.objectType, []).object);

  static final _id_getIssuedTo = jniAccessors.getMethodIDOf(
      _classRef, "getIssuedTo", "()Landroid/net/http/SslCertificate\$DName;");

  /// from: public android.net.http.SslCertificate.DName getIssuedTo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return Issued-to distinguished name or null if none has been set
  SslCertificate_DName getIssuedTo() =>
      SslCertificate_DName.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getIssuedTo, jni.JniType.objectType, []).object);

  static final _id_getIssuedBy = jniAccessors.getMethodIDOf(
      _classRef, "getIssuedBy", "()Landroid/net/http/SslCertificate\$DName;");

  /// from: public android.net.http.SslCertificate.DName getIssuedBy()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return Issued-by distinguished name or null if none has been set
  SslCertificate_DName getIssuedBy() =>
      SslCertificate_DName.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getIssuedBy, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return A string representation of this certificate for debugging
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.net.http.SslCertificate$DName
///
/// A distinguished name helper class: a 3-tuple of:
/// <ul>
///   <li>the most specific common name (CN)</li>
///   <li>the most specific organization (O)</li>
///   <li>the most specific organizational unit (OU)</li>
/// <ul>
class SslCertificate_DName extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/http/SslCertificate\$DName");
  SslCertificate_DName.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String dName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new {@code DName} from a string. The attributes
  /// are assumed to come in most significant to least
  /// significant order which is true of human readable values
  /// returned by methods such as {@code X500Principal.getName()}.
  /// Be aware that the underlying sources of distinguished names
  /// such as instances of {@code X509Certificate} are encoded in
  /// least significant to most significant order, so make sure
  /// the value passed here has the expected ordering of
  /// attributes.
  SslCertificate_DName(jni.JniString dName)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [dName.reference]).object);

  static final _id_getDName =
      jniAccessors.getMethodIDOf(_classRef, "getDName", "()Ljava/lang/String;");

  /// from: public java.lang.String getDName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The distinguished name (normally includes CN, O, and OU names)
  jni.JniString getDName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDName, jni.JniType.objectType, []).object);

  static final _id_getCName =
      jniAccessors.getMethodIDOf(_classRef, "getCName", "()Ljava/lang/String;");

  /// from: public java.lang.String getCName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The most specific Common-name (CN) component of this name
  jni.JniString getCName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCName, jni.JniType.objectType, []).object);

  static final _id_getOName =
      jniAccessors.getMethodIDOf(_classRef, "getOName", "()Ljava/lang/String;");

  /// from: public java.lang.String getOName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The most specific Organization (O) component of this name
  jni.JniString getOName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getOName, jni.JniType.objectType, []).object);

  static final _id_getUName =
      jniAccessors.getMethodIDOf(_classRef, "getUName", "()Ljava/lang/String;");

  /// from: public java.lang.String getUName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The most specific Organizational Unit (OU) component of this name
  jni.JniString getUName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUName, jni.JniType.objectType, []).object);
}
