// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.MacAddress
///
/// Representation of a MAC address.
///
/// This class only supports 48 bits long addresses and does not support 64 bits long addresses.
/// Instances of this class are immutable.
class MacAddress extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/net/MacAddress");
  MacAddress.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_BROADCAST_ADDRESS = jniAccessors.getStaticFieldIDOf(
      _classRef, "BROADCAST_ADDRESS", "Landroid/net/MacAddress;");

  /// from: static public final android.net.MacAddress BROADCAST_ADDRESS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The MacAddress representing the unique broadcast MAC address.
  static MacAddress get BROADCAST_ADDRESS => MacAddress.fromRef(jniAccessors
      .getStaticField(_classRef, _id_BROADCAST_ADDRESS, jni.JniType.objectType)
      .object);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.MacAddress> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int TYPE_BROADCAST
  ///
  /// Indicates a MAC address is the broadcast address.
  static const TYPE_BROADCAST = 3;

  /// from: static public final int TYPE_MULTICAST
  ///
  /// Indicates a MAC address is a multicast address.
  static const TYPE_MULTICAST = 2;

  /// from: static public final int TYPE_UNICAST
  ///
  /// Indicates a MAC address is a unicast address.
  static const TYPE_UNICAST = 1;

  static final _id_getAddressType =
      jniAccessors.getMethodIDOf(_classRef, "getAddressType", "()I");

  /// from: public int getAddressType()
  ///
  /// Returns the type of this address.
  ///@return the int constant representing the MAC address type of this MacAddress.
  ///
  /// Value is android.net.MacAddress.TYPE_UNKNOWN, android.net.MacAddress\#TYPE_UNICAST, android.net.MacAddress\#TYPE_MULTICAST, or android.net.MacAddress\#TYPE_BROADCAST
  int getAddressType() => jniAccessors.callMethodWithArgs(
      reference, _id_getAddressType, jni.JniType.intType, []).integer;

  static final _id_isLocallyAssigned =
      jniAccessors.getMethodIDOf(_classRef, "isLocallyAssigned", "()Z");

  /// from: public boolean isLocallyAssigned()
  ///
  /// @return true if this MacAddress is a locally assigned address.
  bool isLocallyAssigned() => jniAccessors.callMethodWithArgs(
      reference, _id_isLocallyAssigned, jni.JniType.booleanType, []).boolean;

  static final _id_toByteArray =
      jniAccessors.getMethodIDOf(_classRef, "toByteArray", "()[B");

  /// from: public byte[] toByteArray()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return a byte array representation of this MacAddress.
  ///
  /// This value will never be {@code null}.
  jni.JniObject toByteArray() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toByteArray, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return This value will never be {@code null}.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_toOuiString = jniAccessors.getMethodIDOf(
      _classRef, "toOuiString", "()Ljava/lang/String;");

  /// from: public java.lang.String toOuiString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return a String representation of the OUI part of this MacAddress made of 3 hexadecimal
  /// numbers in [0,ff] joined by ':' characters.
  ///
  /// This value will never be {@code null}.
  jni.JniString toOuiString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toOuiString, jni.JniType.objectType, []).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_fromString = jniAccessors.getStaticMethodIDOf(
      _classRef, "fromString", "(Ljava/lang/String;)Landroid/net/MacAddress;");

  /// from: static public android.net.MacAddress fromString(java.lang.String addr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a MacAddress from the given String representation. A valid String representation
  /// for a MacAddress is a series of 6 values in the range [0,ff] printed in hexadecimal
  /// and joined by ':' characters.
  ///@param addr a String representation of a MAC address.
  /// This value must never be {@code null}.
  ///@return the MacAddress corresponding to the given String representation.
  /// This value will never be {@code null}.
  ///@throws IllegalArgumentException if the given String is not a valid representation.
  static MacAddress fromString(jni.JniString addr) =>
      MacAddress.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_fromString, jni.JniType.objectType, [addr.reference]).object);

  static final _id_fromBytes = jniAccessors.getStaticMethodIDOf(
      _classRef, "fromBytes", "([B)Landroid/net/MacAddress;");

  /// from: static public android.net.MacAddress fromBytes(byte[] addr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a MacAddress from the given byte array representation.
  /// A valid byte array representation for a MacAddress is a non-null array of length 6.
  ///@param addr a byte array representation of a MAC address.
  /// This value must never be {@code null}.
  ///@return the MacAddress corresponding to the given byte array representation.
  ///@throws IllegalArgumentException if the given byte array is not a valid representation.
  static MacAddress fromBytes(jni.JniObject addr) =>
      MacAddress.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_fromBytes, jni.JniType.objectType, [addr.reference]).object);
}
