// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "Uri.dart" as uri_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.ProxyInfo
///
/// Describes a proxy configuration.
///
/// Proxy configurations are already integrated within the {@code java.net} and
/// Apache HTTP stack. So URLConnection and Apache's {@code HttpClient} will use
/// them automatically.
///
/// Other HTTP stacks will need to obtain the proxy info from
/// Proxy\#PROXY_CHANGE_ACTION broadcast as the extra Proxy\#EXTRA_PROXY_INFO.
class ProxyInfo extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/net/ProxyInfo");
  ProxyInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.ProxyInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/net/Uri;)V");

  /// from: void <init>(android.net.Uri pacFileUrl)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a ProxyProperties that points at a PAC URL.
  ///@hide
  ProxyInfo(uri_.Uri pacFileUrl)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [pacFileUrl.reference]).object);

  static final _id_buildDirectProxy = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "buildDirectProxy",
      "(Ljava/lang/String;I)Landroid/net/ProxyInfo;");

  /// from: static public android.net.ProxyInfo buildDirectProxy(java.lang.String host, int port)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a ProxyInfo object that points at a Direct proxy
  /// on the specified host and port.
  static ProxyInfo buildDirectProxy(jni.JniString host, int port) =>
      ProxyInfo.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildDirectProxy,
          jni.JniType.objectType,
          [host.reference, port]).object);

  static final _id_buildDirectProxy1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "buildDirectProxy",
      "(Ljava/lang/String;ILjava/util/List;)Landroid/net/ProxyInfo;");

  /// from: static public android.net.ProxyInfo buildDirectProxy(java.lang.String host, int port, java.util.List<java.lang.String> exclList)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a ProxyInfo object that points at a Direct proxy
  /// on the specified host and port.
  ///
  /// The proxy will not be used to access any host in exclusion list, exclList.
  ///@param exclList Hosts to exclude using the proxy on connections for.  These
  ///                 hosts can use wildcards such as *.example.com.
  static ProxyInfo buildDirectProxy1(
          jni.JniString host, int port, jni.JniObject exclList) =>
      ProxyInfo.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildDirectProxy1,
          jni.JniType.objectType,
          [host.reference, port, exclList.reference]).object);

  static final _id_buildPacProxy = jniAccessors.getStaticMethodIDOf(
      _classRef, "buildPacProxy", "(Landroid/net/Uri;)Landroid/net/ProxyInfo;");

  /// from: static public android.net.ProxyInfo buildPacProxy(android.net.Uri pacUri)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a ProxyInfo that will download and run the PAC script
  /// at the specified URL.
  static ProxyInfo buildPacProxy(uri_.Uri pacUri) =>
      ProxyInfo.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildPacProxy,
          jni.JniType.objectType,
          [pacUri.reference]).object);

  static final _id_getPacFileUrl = jniAccessors.getMethodIDOf(
      _classRef, "getPacFileUrl", "()Landroid/net/Uri;");

  /// from: public android.net.Uri getPacFileUrl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the URL of the current PAC script or null if there is
  /// no PAC script.
  uri_.Uri getPacFileUrl() => uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getPacFileUrl, jni.JniType.objectType, []).object);

  static final _id_getHost =
      jniAccessors.getMethodIDOf(_classRef, "getHost", "()Ljava/lang/String;");

  /// from: public java.lang.String getHost()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// When configured to use a Direct Proxy this returns the host
  /// of the proxy.
  jni.JniString getHost() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getHost, jni.JniType.objectType, []).object);

  static final _id_getPort =
      jniAccessors.getMethodIDOf(_classRef, "getPort", "()I");

  /// from: public int getPort()
  ///
  /// When configured to use a Direct Proxy this returns the port
  /// of the proxy
  int getPort() => jniAccessors.callMethodWithArgs(
      reference, _id_getPort, jni.JniType.intType, []).integer;

  static final _id_getExclusionList = jniAccessors.getMethodIDOf(
      _classRef, "getExclusionList", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] getExclusionList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// When configured to use a Direct Proxy this returns the list
  /// of hosts for which the proxy is ignored.
  jni.JniObject getExclusionList() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExclusionList, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Implement the Parcelable interface
  ///@hide
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface.
  ///@hide
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
