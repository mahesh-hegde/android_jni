// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.LinkAddress
///
/// Identifies an IP address on a network link.
///
/// A {@code LinkAddress} consists of:
/// <ul>
/// <li>An IP address and prefix length (e.g., {@code 2001:db8::1/64} or {@code 192.0.2.1/24}).
/// The address must be unicast, as multicast addresses cannot be assigned to interfaces.
/// <li>Address flags: A bitmask of {@code OsConstants.IFA_F_*} values representing properties
/// of the address (e.g., {@code android.system.OsConstants.IFA_F_OPTIMISTIC}).
/// <li>Address scope: One of the {@code OsConstants.IFA_F_*} values; defines the scope in which
/// the address is unique (e.g.,
/// {@code android.system.OsConstants.RT_SCOPE_LINK} or
/// {@code android.system.OsConstants.RT_SCOPE_UNIVERSE}).
/// </ul>
class LinkAddress extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/net/LinkAddress");
  LinkAddress.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.LinkAddress> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Implement the Parcelable interface.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a string representation of this address, such as "192.0.2.1/24" or "2001:db8::1/64".
  /// The string representation does not contain the flags and scope, just the address and prefix
  /// length.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  ///
  /// Compares this {@code LinkAddress} instance against {@code obj}. Two addresses are equal if
  /// their address, prefix length, flags and scope are equal. Thus, for example, two addresses
  /// that have the same address and prefix length are not equal if one of them is deprecated and
  /// the other is not.
  ///@param obj the object to be tested for equality.
  ///@return {@code true} if both objects are equal, {@code false} otherwise.
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// Returns a hashcode for this address.
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_getAddress = jniAccessors.getMethodIDOf(
      _classRef, "getAddress", "()Ljava/net/InetAddress;");

  /// from: public java.net.InetAddress getAddress()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the InetAddress of this {@code LinkAddress}.
  jni.JniObject getAddress() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAddress, jni.JniType.objectType, []).object);

  static final _id_getPrefixLength =
      jniAccessors.getMethodIDOf(_classRef, "getPrefixLength", "()I");

  /// from: public int getPrefixLength()
  ///
  /// Returns the prefix length of this {@code LinkAddress}.
  int getPrefixLength() => jniAccessors.callMethodWithArgs(
      reference, _id_getPrefixLength, jni.JniType.intType, []).integer;

  static final _id_getFlags =
      jniAccessors.getMethodIDOf(_classRef, "getFlags", "()I");

  /// from: public int getFlags()
  ///
  /// Returns the flags of this {@code LinkAddress}.
  int getFlags() => jniAccessors.callMethodWithArgs(
      reference, _id_getFlags, jni.JniType.intType, []).integer;

  static final _id_getScope =
      jniAccessors.getMethodIDOf(_classRef, "getScope", "()I");

  /// from: public int getScope()
  ///
  /// Returns the scope of this {@code LinkAddress}.
  int getScope() => jniAccessors.callMethodWithArgs(
      reference, _id_getScope, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Implement the Parcelable interface.
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
