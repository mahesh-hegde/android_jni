// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.rtp.AudioCodec
///
/// This class defines a collection of audio codecs to be used with
/// AudioStreams. Their parameters are designed to be exchanged using
/// Session Description Protocol (SDP). Most of the values listed here can be
/// found in RFC 3551, while others are described in separated standards.
///
/// Few simple configurations are defined as public static instances for the
/// convenience of direct uses. More complicated ones could be obtained using
/// \#getCodec(int, String, String). For example, one can use the
/// following snippet to create a mode-1-only AMR codec.
///
/// <pre>
/// AudioCodec codec = AudioCodec.getCodec(100, "AMR/8000", "mode-set=1");
/// </pre>
///@see AudioStream
class AudioCodec extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/rtp/AudioCodec");
  AudioCodec.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_AMR = jniAccessors.getStaticFieldIDOf(
      _classRef, "AMR", "Landroid/net/rtp/AudioCodec;");

  /// from: static public final android.net.rtp.AudioCodec AMR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adaptive Multi-Rate narrowband audio codec, also known as AMR or AMR-NB.
  /// Currently CRC, robust sorting, and interleaving are not supported. See
  /// more details about these features in RFC 4867.
  static AudioCodec get AMR => AudioCodec.fromRef(jniAccessors
      .getStaticField(_classRef, _id_AMR, jni.JniType.objectType)
      .object);

  static final _id_GSM = jniAccessors.getStaticFieldIDOf(
      _classRef, "GSM", "Landroid/net/rtp/AudioCodec;");

  /// from: static public final android.net.rtp.AudioCodec GSM
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// GSM Full-Rate audio codec, also known as GSM-FR, GSM 06.10, GSM, or
  /// simply FR.
  static AudioCodec get GSM => AudioCodec.fromRef(jniAccessors
      .getStaticField(_classRef, _id_GSM, jni.JniType.objectType)
      .object);

  static final _id_GSM_EFR = jniAccessors.getStaticFieldIDOf(
      _classRef, "GSM_EFR", "Landroid/net/rtp/AudioCodec;");

  /// from: static public final android.net.rtp.AudioCodec GSM_EFR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// GSM Enhanced Full-Rate audio codec, also known as GSM-EFR, GSM 06.60, or
  /// simply EFR.
  static AudioCodec get GSM_EFR => AudioCodec.fromRef(jniAccessors
      .getStaticField(_classRef, _id_GSM_EFR, jni.JniType.objectType)
      .object);

  static final _id_PCMA = jniAccessors.getStaticFieldIDOf(
      _classRef, "PCMA", "Landroid/net/rtp/AudioCodec;");

  /// from: static public final android.net.rtp.AudioCodec PCMA
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// G.711 a-law audio codec.
  static AudioCodec get PCMA => AudioCodec.fromRef(jniAccessors
      .getStaticField(_classRef, _id_PCMA, jni.JniType.objectType)
      .object);

  static final _id_PCMU = jniAccessors.getStaticFieldIDOf(
      _classRef, "PCMU", "Landroid/net/rtp/AudioCodec;");

  /// from: static public final android.net.rtp.AudioCodec PCMU
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// G.711 u-law audio codec.
  static AudioCodec get PCMU => AudioCodec.fromRef(jniAccessors
      .getStaticField(_classRef, _id_PCMU, jni.JniType.objectType)
      .object);

  static final _id_fmtp =
      jniAccessors.getFieldIDOf(_classRef, "fmtp", "Ljava/lang/String;");

  /// from: public final java.lang.String fmtp
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The format parameters to be used in the corresponding SDP attribute.
  jni.JniString get fmtp => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_fmtp, jni.JniType.objectType)
      .object);

  static final _id_rtpmap =
      jniAccessors.getFieldIDOf(_classRef, "rtpmap", "Ljava/lang/String;");

  /// from: public final java.lang.String rtpmap
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The encoding parameters to be used in the corresponding SDP attribute.
  jni.JniString get rtpmap => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_rtpmap, jni.JniType.objectType)
      .object);

  static final _id_type = jniAccessors.getFieldIDOf(_classRef, "type", "I");

  /// from: public final int type
  ///
  /// The RTP payload type of the encoding.
  int get type =>
      jniAccessors.getField(reference, _id_type, jni.JniType.intType).integer;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(ILjava/lang/String;Ljava/lang/String;)V");

  /// from: void <init>(int type, java.lang.String rtpmap, java.lang.String fmtp)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AudioCodec(int type, jni.JniString rtpmap, jni.JniString fmtp)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [type, rtpmap.reference, fmtp.reference]).object);

  static final _id_getCodecs = jniAccessors.getStaticMethodIDOf(
      _classRef, "getCodecs", "()[Landroid/net/rtp/AudioCodec;");

  /// from: static public android.net.rtp.AudioCodec[] getCodecs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns system supported audio codecs.
  static jni.JniObject getCodecs() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getCodecs, jni.JniType.objectType, []).object);

  static final _id_getCodec = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getCodec",
      "(ILjava/lang/String;Ljava/lang/String;)Landroid/net/rtp/AudioCodec;");

  /// from: static public android.net.rtp.AudioCodec getCodec(int type, java.lang.String rtpmap, java.lang.String fmtp)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an AudioCodec according to the given configuration.
  ///@param type The payload type of the encoding defined in RTP/AVP.
  ///@param rtpmap The encoding parameters specified in the corresponding SDP
  ///     attribute, or null if it is not available.
  ///@param fmtp The format parameters specified in the corresponding SDP
  ///     attribute, or null if it is not available.
  ///@return The configured AudioCodec or {@code null} if it is not supported.
  static AudioCodec getCodec(
          int type, jni.JniString rtpmap, jni.JniString fmtp) =>
      AudioCodec.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getCodec,
          jni.JniType.objectType,
          [type, rtpmap.reference, fmtp.reference]).object);
}
