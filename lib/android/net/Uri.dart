// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.Uri
///
/// Immutable URI reference. A URI reference includes a URI and a fragment, the
/// component of the URI following a '\#'. Builds and parses URI references
/// which conform to
/// <a href="http://www.faqs.org/rfcs/rfc2396.html">RFC 2396</a>.
///
/// In the interest of performance, this class performs little to no
/// validation. Behavior is undefined for invalid input. This class is very
/// forgiving--in the face of invalid input, it will return garbage
/// rather than throw an exception unless otherwise specified.
class Uri extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/net/Uri");
  Uri.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.Uri> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Reads Uris from Parcels.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_EMPTY =
      jniAccessors.getStaticFieldIDOf(_classRef, "EMPTY", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri EMPTY
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The empty URI, equivalent to "".
  static Uri get EMPTY => Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_EMPTY, jni.JniType.objectType)
      .object);

  static final _id_isHierarchical =
      jniAccessors.getMethodIDOf(_classRef, "isHierarchical", "()Z");

  /// from: public abstract boolean isHierarchical()
  ///
  /// Returns true if this URI is hierarchical like "http://google.com".
  /// Absolute URIs are hierarchical if the scheme-specific part starts with
  /// a '/'. Relative URIs are always hierarchical.
  bool isHierarchical() => jniAccessors.callMethodWithArgs(
      reference, _id_isHierarchical, jni.JniType.booleanType, []).boolean;

  static final _id_isOpaque =
      jniAccessors.getMethodIDOf(_classRef, "isOpaque", "()Z");

  /// from: public boolean isOpaque()
  ///
  /// Returns true if this URI is opaque like "mailto:nobody@google.com". The
  /// scheme-specific part of an opaque URI cannot start with a '/'.
  bool isOpaque() => jniAccessors.callMethodWithArgs(
      reference, _id_isOpaque, jni.JniType.booleanType, []).boolean;

  static final _id_isRelative =
      jniAccessors.getMethodIDOf(_classRef, "isRelative", "()Z");

  /// from: public abstract boolean isRelative()
  ///
  /// Returns true if this URI is relative, i.e.&nbsp;if it doesn't contain an
  /// explicit scheme.
  ///@return true if this URI is relative, false if it's absolute
  bool isRelative() => jniAccessors.callMethodWithArgs(
      reference, _id_isRelative, jni.JniType.booleanType, []).boolean;

  static final _id_isAbsolute =
      jniAccessors.getMethodIDOf(_classRef, "isAbsolute", "()Z");

  /// from: public boolean isAbsolute()
  ///
  /// Returns true if this URI is absolute, i.e.&nbsp;if it contains an
  /// explicit scheme.
  ///@return true if this URI is absolute, false if it's relative
  bool isAbsolute() => jniAccessors.callMethodWithArgs(
      reference, _id_isAbsolute, jni.JniType.booleanType, []).boolean;

  static final _id_getScheme = jniAccessors.getMethodIDOf(
      _classRef, "getScheme", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getScheme()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the scheme of this URI. Example: "http"
  ///@return the scheme or null if this is a relative URI
  jni.JniString getScheme() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getScheme, jni.JniType.objectType, []).object);

  static final _id_getSchemeSpecificPart = jniAccessors.getMethodIDOf(
      _classRef, "getSchemeSpecificPart", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getSchemeSpecificPart()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the scheme-specific part of this URI, i.e.&nbsp;everything between
  /// the scheme separator ':' and the fragment separator '\#'. If this is a
  /// relative URI, this method returns the entire URI. Decodes escaped octets.
  ///
  /// Example: "//www.google.com/search?q=android"
  ///@return the decoded scheme-specific-part
  jni.JniString getSchemeSpecificPart() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSchemeSpecificPart, jni.JniType.objectType, []).object);

  static final _id_getEncodedSchemeSpecificPart = jniAccessors.getMethodIDOf(
      _classRef, "getEncodedSchemeSpecificPart", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedSchemeSpecificPart()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the scheme-specific part of this URI, i.e.&nbsp;everything between
  /// the scheme separator ':' and the fragment separator '\#'. If this is a
  /// relative URI, this method returns the entire URI. Leaves escaped octets
  /// intact.
  ///
  /// Example: "//www.google.com/search?q=android"
  ///@return the decoded scheme-specific-part
  jni.JniString getEncodedSchemeSpecificPart() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getEncodedSchemeSpecificPart, jni.JniType.objectType, []).object);

  static final _id_getAuthority = jniAccessors.getMethodIDOf(
      _classRef, "getAuthority", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getAuthority()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the decoded authority part of this URI. For
  /// server addresses, the authority is structured as follows:
  /// {@code [ userinfo '@' ] host [ ':' port ]}
  ///
  /// Examples: "google.com", "bob@google.com:80"
  ///@return the authority for this URI or null if not present
  jni.JniString getAuthority() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAuthority, jni.JniType.objectType, []).object);

  static final _id_getEncodedAuthority = jniAccessors.getMethodIDOf(
      _classRef, "getEncodedAuthority", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedAuthority()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the encoded authority part of this URI. For
  /// server addresses, the authority is structured as follows:
  /// {@code [ userinfo '@' ] host [ ':' port ]}
  ///
  /// Examples: "google.com", "bob@google.com:80"
  ///@return the authority for this URI or null if not present
  jni.JniString getEncodedAuthority() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getEncodedAuthority, jni.JniType.objectType, []).object);

  static final _id_getUserInfo = jniAccessors.getMethodIDOf(
      _classRef, "getUserInfo", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getUserInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the decoded user information from the authority.
  /// For example, if the authority is "nobody@google.com", this method will
  /// return "nobody".
  ///@return the user info for this URI or null if not present
  jni.JniString getUserInfo() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUserInfo, jni.JniType.objectType, []).object);

  static final _id_getEncodedUserInfo = jniAccessors.getMethodIDOf(
      _classRef, "getEncodedUserInfo", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedUserInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the encoded user information from the authority.
  /// For example, if the authority is "nobody@google.com", this method will
  /// return "nobody".
  ///@return the user info for this URI or null if not present
  jni.JniString getEncodedUserInfo() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getEncodedUserInfo, jni.JniType.objectType, []).object);

  static final _id_getHost =
      jniAccessors.getMethodIDOf(_classRef, "getHost", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getHost()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the encoded host from the authority for this URI. For example,
  /// if the authority is "bob@google.com", this method will return
  /// "google.com".
  ///@return the host for this URI or null if not present
  jni.JniString getHost() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getHost, jni.JniType.objectType, []).object);

  static final _id_getPort =
      jniAccessors.getMethodIDOf(_classRef, "getPort", "()I");

  /// from: public abstract int getPort()
  ///
  /// Gets the port from the authority for this URI. For example,
  /// if the authority is "google.com:80", this method will return 80.
  ///@return the port for this URI or -1 if invalid or not present
  int getPort() => jniAccessors.callMethodWithArgs(
      reference, _id_getPort, jni.JniType.intType, []).integer;

  static final _id_getPath =
      jniAccessors.getMethodIDOf(_classRef, "getPath", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getPath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the decoded path.
  ///@return the decoded path, or null if this is not a hierarchical URI
  /// (like "mailto:nobody@google.com") or the URI is invalid
  jni.JniString getPath() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPath, jni.JniType.objectType, []).object);

  static final _id_getEncodedPath = jniAccessors.getMethodIDOf(
      _classRef, "getEncodedPath", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedPath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the encoded path.
  ///@return the encoded path, or null if this is not a hierarchical URI
  /// (like "mailto:nobody@google.com") or the URI is invalid
  jni.JniString getEncodedPath() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getEncodedPath, jni.JniType.objectType, []).object);

  static final _id_getQuery =
      jniAccessors.getMethodIDOf(_classRef, "getQuery", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getQuery()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the decoded query component from this URI. The query comes after
  /// the query separator ('?') and before the fragment separator ('\#'). This
  /// method would return "q=android" for
  /// "http://www.google.com/search?q=android".
  ///@return the decoded query or null if there isn't one
  jni.JniString getQuery() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getQuery, jni.JniType.objectType, []).object);

  static final _id_getEncodedQuery = jniAccessors.getMethodIDOf(
      _classRef, "getEncodedQuery", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedQuery()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the encoded query component from this URI. The query comes after
  /// the query separator ('?') and before the fragment separator ('\#'). This
  /// method would return "q=android" for
  /// "http://www.google.com/search?q=android".
  ///@return the encoded query or null if there isn't one
  jni.JniString getEncodedQuery() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getEncodedQuery, jni.JniType.objectType, []).object);

  static final _id_getFragment = jniAccessors.getMethodIDOf(
      _classRef, "getFragment", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getFragment()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the decoded fragment part of this URI, everything after the '\#'.
  ///@return the decoded fragment or null if there isn't one
  jni.JniString getFragment() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFragment, jni.JniType.objectType, []).object);

  static final _id_getEncodedFragment = jniAccessors.getMethodIDOf(
      _classRef, "getEncodedFragment", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getEncodedFragment()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the encoded fragment part of this URI, everything after the '\#'.
  ///@return the encoded fragment or null if there isn't one
  jni.JniString getEncodedFragment() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getEncodedFragment, jni.JniType.objectType, []).object);

  static final _id_getPathSegments = jniAccessors.getMethodIDOf(
      _classRef, "getPathSegments", "()Ljava/util/List;");

  /// from: public abstract java.util.List<java.lang.String> getPathSegments()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the decoded path segments.
  ///@return decoded path segments, each without a leading or trailing '/'
  jni.JniObject getPathSegments() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPathSegments, jni.JniType.objectType, []).object);

  static final _id_getLastPathSegment = jniAccessors.getMethodIDOf(
      _classRef, "getLastPathSegment", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String getLastPathSegment()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the decoded last segment in the path.
  ///@return the decoded last segment or null if the path is empty
  jni.JniString getLastPathSegment() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getLastPathSegment, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  ///
  /// Compares this Uri to another object for equality. Returns true if the
  /// encoded string representations of this Uri and the given Uri are
  /// equal. Case counts. Paths are not normalized. If one Uri specifies a
  /// default port explicitly and the other leaves it implicit, they will not
  /// be considered equal.
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// Hashes the encoded string represention of this Uri consistently with
  /// \#equals(Object).
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_compareTo = jniAccessors.getMethodIDOf(
      _classRef, "compareTo", "(Landroid/net/Uri;)I");

  /// from: public int compareTo(android.net.Uri other)
  ///
  /// Compares the string representation of this Uri with that of
  /// another.
  int compareTo(Uri other) => jniAccessors.callMethodWithArgs(
      reference, _id_compareTo, jni.JniType.intType, [other.reference]).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public abstract java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the encoded string representation of this URI.
  /// Example: "http://google.com/"
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_buildUpon = jniAccessors.getMethodIDOf(
      _classRef, "buildUpon", "()Landroid/net/Uri\$Builder;");

  /// from: public abstract android.net.Uri.Builder buildUpon()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new builder, copying the attributes from this Uri.
  Uri_Builder buildUpon() =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_buildUpon, jni.JniType.objectType, []).object);

  static final _id_parse = jniAccessors.getStaticMethodIDOf(
      _classRef, "parse", "(Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri parse(java.lang.String uriString)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a Uri which parses the given encoded URI string.
  ///@param uriString an RFC 2396-compliant, encoded URI
  ///@throws NullPointerException if uriString is null
  ///@return Uri for this given uri string
  static Uri parse(jni.JniString uriString) =>
      Uri.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef, _id_parse,
          jni.JniType.objectType, [uriString.reference]).object);

  static final _id_fromFile = jniAccessors.getStaticMethodIDOf(
      _classRef, "fromFile", "(Ljava/io/File;)Landroid/net/Uri;");

  /// from: static public android.net.Uri fromFile(java.io.File file)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a Uri from a file. The URI has the form
  /// "file://<absolute path>". Encodes path characters with the exception of
  /// '/'.
  ///
  /// Example: "file:///tmp/android.txt"
  ///@throws NullPointerException if file is null
  ///@return a Uri for the given file
  static Uri fromFile(jni.JniObject file) =>
      Uri.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef, _id_fromFile,
          jni.JniType.objectType, [file.reference]).object);

  static final _id_fromParts = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "fromParts",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri fromParts(java.lang.String scheme, java.lang.String ssp, java.lang.String fragment)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an opaque Uri from the given components. Encodes the ssp
  /// which means this method cannot be used to create hierarchical URIs.
  ///@param scheme of the URI
  ///@param ssp scheme-specific-part, everything between the
  ///  scheme separator (':') and the fragment separator ('\#'), which will
  ///  get encoded
  ///@param fragment fragment, everything after the '\#', null if undefined,
  ///  will get encoded
  ///@throws NullPointerException if scheme or ssp is null
  ///@return Uri composed of the given scheme, ssp, and fragment
  ///@see Builder if you don't want the ssp and fragment to be encoded
  static Uri fromParts(
          jni.JniString scheme, jni.JniString ssp, jni.JniString fragment) =>
      Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_fromParts,
          jni.JniType.objectType,
          [scheme.reference, ssp.reference, fragment.reference]).object);

  static final _id_getQueryParameterNames = jniAccessors.getMethodIDOf(
      _classRef, "getQueryParameterNames", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.String> getQueryParameterNames()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a set of the unique names of all query parameters. Iterating
  /// over the set will return the names in order of their first occurrence.
  ///@throws UnsupportedOperationException if this isn't a hierarchical URI
  ///@return a set of decoded names
  jni.JniObject getQueryParameterNames() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getQueryParameterNames, jni.JniType.objectType, []).object);

  static final _id_getQueryParameters = jniAccessors.getMethodIDOf(
      _classRef, "getQueryParameters", "(Ljava/lang/String;)Ljava/util/List;");

  /// from: public java.util.List<java.lang.String> getQueryParameters(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Searches the query string for parameter values with the given key.
  ///@param key which will be encoded
  ///@throws UnsupportedOperationException if this isn't a hierarchical URI
  ///@throws NullPointerException if key is null
  ///@return a list of decoded values
  jni.JniObject getQueryParameters(jni.JniString key) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getQueryParameters,
          jni.JniType.objectType,
          [key.reference]).object);

  static final _id_getQueryParameter = jniAccessors.getMethodIDOf(
      _classRef, "getQueryParameter", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getQueryParameter(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Searches the query string for the first value with the given key.
  ///
  /// <strong>Warning:</strong> Prior to Jelly Bean, this decoded
  /// the '+' character as '+' rather than ' '.
  ///@param key which will be encoded
  ///@throws UnsupportedOperationException if this isn't a hierarchical URI
  ///@throws NullPointerException if key is null
  ///@return the decoded value or null if no parameter is found
  jni.JniString getQueryParameter(jni.JniString key) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getQueryParameter,
          jni.JniType.objectType,
          [key.reference]).object);

  static final _id_getBooleanQueryParameter = jniAccessors.getMethodIDOf(
      _classRef, "getBooleanQueryParameter", "(Ljava/lang/String;Z)Z");

  /// from: public boolean getBooleanQueryParameter(java.lang.String key, boolean defaultValue)
  ///
  /// Searches the query string for the first value with the given key and interprets it
  /// as a boolean value. "false" and "0" are interpreted as <code>false</code>, everything
  /// else is interpreted as <code>true</code>.
  ///@param key which will be decoded
  ///@param defaultValue the default value to return if there is no query parameter for key
  ///@return the boolean interpretation of the query parameter key
  bool getBooleanQueryParameter(jni.JniString key, bool defaultValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_getBooleanQueryParameter,
          jni.JniType.booleanType, [key.reference, defaultValue]).boolean;

  static final _id_normalizeScheme = jniAccessors.getMethodIDOf(
      _classRef, "normalizeScheme", "()Landroid/net/Uri;");

  /// from: public android.net.Uri normalizeScheme()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an equivalent URI with a lowercase scheme component.
  /// This aligns the Uri with Android best practices for
  /// intent filtering.
  ///
  /// For example, "HTTP://www.android.com" becomes
  /// "http://www.android.com"
  ///
  /// All URIs received from outside Android (such as user input,
  /// or external sources like Bluetooth, NFC, or the Internet) should
  /// be normalized before they are used to create an Intent.
  ///
  /// <p class="note">This method does _not_ validate bad URI's,
  /// or 'fix' poorly formatted URI's - so do not use it for input validation.
  /// A Uri will always be returned, even if the Uri is badly formatted to
  /// begin with and a scheme component cannot be found.
  ///@return normalized Uri (never null)
  ///@see android.content.Intent\#setData
  ///@see android.content.Intent\#setDataAndNormalize
  Uri normalizeScheme() => Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_normalizeScheme, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getStaticMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;Landroid/net/Uri;)V");

  /// from: static public void writeToParcel(android.os.Parcel out, android.net.Uri uri)
  ///
  /// Writes a Uri to a Parcel.
  ///@param out parcel to write to
  ///@param uri to write, can be null
  static void writeToParcel(parcel_.Parcel out, Uri uri) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, uri.reference]).check();

  static final _id_encode = jniAccessors.getStaticMethodIDOf(
      _classRef, "encode", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String encode(java.lang.String s)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Encodes characters in the given string as '%'-escaped octets
  /// using the UTF-8 scheme. Leaves letters ("A-Z", "a-z"), numbers
  /// ("0-9"), and unreserved characters ("_-!.~'()*") intact. Encodes
  /// all other characters.
  ///@param s string to encode
  ///@return an encoded version of s suitable for use as a URI component,
  ///  or null if s is null
  static jni.JniString encode(jni.JniString s) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_encode, jni.JniType.objectType, [s.reference]).object);

  static final _id_encode1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "encode", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String encode(java.lang.String s, java.lang.String allow)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Encodes characters in the given string as '%'-escaped octets
  /// using the UTF-8 scheme. Leaves letters ("A-Z", "a-z"), numbers
  /// ("0-9"), and unreserved characters ("_-!.~'()*") intact. Encodes
  /// all other characters with the exception of those specified in the
  /// allow argument.
  ///@param s string to encode
  ///@param allow set of additional characters to allow in the encoded form,
  ///  null if no characters should be skipped
  ///@return an encoded version of s suitable for use as a URI component,
  ///  or null if s is null
  static jni.JniString encode1(jni.JniString s, jni.JniString allow) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_encode1,
          jni.JniType.objectType,
          [s.reference, allow.reference]).object);

  static final _id_decode = jniAccessors.getStaticMethodIDOf(
      _classRef, "decode", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String decode(java.lang.String s)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Decodes '%'-escaped octets in the given string using the UTF-8 scheme.
  /// Replaces invalid octets with the unicode replacement character
  /// ("\\uFFFD").
  ///@param s encoded string to decode
  ///@return the given string with escaped octets decoded, or null if
  ///  s is null
  static jni.JniString decode(jni.JniString s) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_decode, jni.JniType.objectType, [s.reference]).object);

  static final _id_withAppendedPath = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "withAppendedPath",
      "(Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri withAppendedPath(android.net.Uri baseUri, java.lang.String pathSegment)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new Uri by appending an already-encoded path segment to a
  /// base Uri.
  ///@param baseUri Uri to append path segment to
  ///@param pathSegment encoded path segment to append
  ///@return a new Uri based on baseUri with the given segment appended to
  ///  the path
  ///@throws NullPointerException if baseUri is null
  static Uri withAppendedPath(Uri baseUri, jni.JniString pathSegment) =>
      Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_withAppendedPath,
          jni.JniType.objectType,
          [baseUri.reference, pathSegment.reference]).object);
}

/// from: android.net.Uri$Builder
///
/// Helper class for building or manipulating URI references. Not safe for
/// concurrent use.
///
/// An absolute hierarchical URI reference follows the pattern:
/// {@code <scheme>://<authority><absolute path>?<query>\#<fragment>}
///
/// Relative URI references (which are always hierarchical) follow one
/// of two patterns: {@code <relative or absolute path>?<query>\#<fragment>}
/// or {@code //<authority><absolute path>?<query>\#<fragment>}
///
/// An opaque URI follows this pattern:
/// {@code <scheme>:<opaque part>\#<fragment>}
///
/// Use Uri\#buildUpon() to obtain a builder representing an existing URI.
class Uri_Builder extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/net/Uri\$Builder");
  Uri_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new Builder.
  Uri_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_scheme = jniAccessors.getMethodIDOf(
      _classRef, "scheme", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder scheme(java.lang.String scheme)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the scheme.
  ///@param scheme name or {@code null} if this is a relative Uri
  Uri_Builder scheme(jni.JniString scheme) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(reference, _id_scheme,
          jni.JniType.objectType, [scheme.reference]).object);

  static final _id_opaquePart = jniAccessors.getMethodIDOf(_classRef,
      "opaquePart", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder opaquePart(java.lang.String opaquePart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Encodes and sets the given opaque scheme-specific-part.
  ///@param opaquePart decoded opaque part
  Uri_Builder opaquePart(jni.JniString opaquePart) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_opaquePart,
          jni.JniType.objectType,
          [opaquePart.reference]).object);

  static final _id_encodedOpaquePart = jniAccessors.getMethodIDOf(_classRef,
      "encodedOpaquePart", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder encodedOpaquePart(java.lang.String opaquePart)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the previously encoded opaque scheme-specific-part.
  ///@param opaquePart encoded opaque part
  Uri_Builder encodedOpaquePart(jni.JniString opaquePart) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_encodedOpaquePart,
          jni.JniType.objectType,
          [opaquePart.reference]).object);

  static final _id_authority = jniAccessors.getMethodIDOf(
      _classRef, "authority", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder authority(java.lang.String authority)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Encodes and sets the authority.
  Uri_Builder authority(jni.JniString authority) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_authority, jni.JniType.objectType, [authority.reference]).object);

  static final _id_encodedAuthority = jniAccessors.getMethodIDOf(_classRef,
      "encodedAuthority", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder encodedAuthority(java.lang.String authority)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the previously encoded authority.
  Uri_Builder encodedAuthority(jni.JniString authority) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_encodedAuthority,
          jni.JniType.objectType,
          [authority.reference]).object);

  static final _id_path = jniAccessors.getMethodIDOf(
      _classRef, "path", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder path(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the path. Leaves '/' characters intact but encodes others as
  /// necessary.
  ///
  /// If the path is not null and doesn't start with a '/', and if
  /// you specify a scheme and/or authority, the builder will prepend the
  /// given path with a '/'.
  Uri_Builder path(jni.JniString path) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(reference, _id_path,
          jni.JniType.objectType, [path.reference]).object);

  static final _id_encodedPath = jniAccessors.getMethodIDOf(_classRef,
      "encodedPath", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder encodedPath(java.lang.String path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the previously encoded path.
  ///
  /// If the path is not null and doesn't start with a '/', and if
  /// you specify a scheme and/or authority, the builder will prepend the
  /// given path with a '/'.
  Uri_Builder encodedPath(jni.JniString path) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_encodedPath, jni.JniType.objectType, [path.reference]).object);

  static final _id_appendPath = jniAccessors.getMethodIDOf(_classRef,
      "appendPath", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder appendPath(java.lang.String newSegment)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Encodes the given segment and appends it to the path.
  Uri_Builder appendPath(jni.JniString newSegment) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_appendPath,
          jni.JniType.objectType,
          [newSegment.reference]).object);

  static final _id_appendEncodedPath = jniAccessors.getMethodIDOf(_classRef,
      "appendEncodedPath", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder appendEncodedPath(java.lang.String newSegment)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Appends the given segment to the path.
  Uri_Builder appendEncodedPath(jni.JniString newSegment) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_appendEncodedPath,
          jni.JniType.objectType,
          [newSegment.reference]).object);

  static final _id_query = jniAccessors.getMethodIDOf(
      _classRef, "query", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder query(java.lang.String query)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Encodes and sets the query.
  Uri_Builder query(jni.JniString query) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(reference, _id_query,
          jni.JniType.objectType, [query.reference]).object);

  static final _id_encodedQuery = jniAccessors.getMethodIDOf(_classRef,
      "encodedQuery", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder encodedQuery(java.lang.String query)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the previously encoded query.
  Uri_Builder encodedQuery(jni.JniString query) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_encodedQuery, jni.JniType.objectType, [query.reference]).object);

  static final _id_fragment = jniAccessors.getMethodIDOf(
      _classRef, "fragment", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder fragment(java.lang.String fragment)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Encodes and sets the fragment.
  Uri_Builder fragment(jni.JniString fragment) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_fragment, jni.JniType.objectType, [fragment.reference]).object);

  static final _id_encodedFragment = jniAccessors.getMethodIDOf(_classRef,
      "encodedFragment", "(Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder encodedFragment(java.lang.String fragment)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the previously encoded fragment.
  Uri_Builder encodedFragment(jni.JniString fragment) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_encodedFragment,
          jni.JniType.objectType,
          [fragment.reference]).object);

  static final _id_appendQueryParameter = jniAccessors.getMethodIDOf(
      _classRef,
      "appendQueryParameter",
      "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder appendQueryParameter(java.lang.String key, java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Encodes the key and value and then appends the parameter to the
  /// query string.
  ///@param key which will be encoded
  ///@param value which will be encoded
  Uri_Builder appendQueryParameter(jni.JniString key, jni.JniString value) =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_appendQueryParameter,
          jni.JniType.objectType,
          [key.reference, value.reference]).object);

  static final _id_clearQuery = jniAccessors.getMethodIDOf(
      _classRef, "clearQuery", "()Landroid/net/Uri\$Builder;");

  /// from: public android.net.Uri.Builder clearQuery()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Clears the the previously set query.
  Uri_Builder clearQuery() =>
      Uri_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clearQuery, jni.JniType.objectType, []).object);

  static final _id_build =
      jniAccessors.getMethodIDOf(_classRef, "build", "()Landroid/net/Uri;");

  /// from: public android.net.Uri build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a Uri with the current attributes.
  ///@throws UnsupportedOperationException if the URI is opaque and the
  ///  scheme is null
  Uri build() => Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
