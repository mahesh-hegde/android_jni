// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/IBinder.dart" as ibinder_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.CaptivePortal
///
/// A class allowing apps handling the ConnectivityManager\#ACTION_CAPTIVE_PORTAL_SIGN_IN
/// activity to indicate to the system different outcomes of captive portal sign in.  This class is
/// passed as an extra named ConnectivityManager\#EXTRA_CAPTIVE_PORTAL with the
/// {@code ACTION_CAPTIVE_PORTAL_SIGN_IN} activity.
class CaptivePortal extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/net/CaptivePortal");
  CaptivePortal.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.CaptivePortal> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/os/IBinder;)V");

  /// from: void <init>(android.os.IBinder binder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  CaptivePortal(ibinder_.IBinder binder)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [binder.reference]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_reportCaptivePortalDismissed = jniAccessors.getMethodIDOf(
      _classRef, "reportCaptivePortalDismissed", "()V");

  /// from: public void reportCaptivePortalDismissed()
  ///
  /// Indicate to the system that the captive portal has been
  /// dismissed.  In response the framework will re-evaluate the network's
  /// connectivity and might take further action thereafter.
  void reportCaptivePortalDismissed() => jniAccessors.callMethodWithArgs(
      reference,
      _id_reportCaptivePortalDismissed,
      jni.JniType.voidType, []).check();

  static final _id_ignoreNetwork =
      jniAccessors.getMethodIDOf(_classRef, "ignoreNetwork", "()V");

  /// from: public void ignoreNetwork()
  ///
  /// Indicate to the system that the user does not want to pursue signing in to the
  /// captive portal and the system should continue to prefer other networks
  /// without captive portals for use as the default active data network.  The
  /// system will not retest the network for a captive portal so as to avoid
  /// disturbing the user with further sign in to network notifications.
  void ignoreNetwork() => jniAccessors.callMethodWithArgs(
      reference, _id_ignoreNetwork, jni.JniType.voidType, []).check();
}
