// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.DhcpInfo
///
/// A simple object for retrieving the results of a DHCP request.
class DhcpInfo extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/net/DhcpInfo");
  DhcpInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_dns1 = jniAccessors.getFieldIDOf(_classRef, "dns1", "I");

  /// from: public int dns1
  int get dns1 =>
      jniAccessors.getField(reference, _id_dns1, jni.JniType.intType).integer;

  /// from: public int dns1
  set dns1(int value) => jniEnv.SetIntField(reference, _id_dns1, value);

  static final _id_dns2 = jniAccessors.getFieldIDOf(_classRef, "dns2", "I");

  /// from: public int dns2
  int get dns2 =>
      jniAccessors.getField(reference, _id_dns2, jni.JniType.intType).integer;

  /// from: public int dns2
  set dns2(int value) => jniEnv.SetIntField(reference, _id_dns2, value);

  static final _id_gateway =
      jniAccessors.getFieldIDOf(_classRef, "gateway", "I");

  /// from: public int gateway
  int get gateway => jniAccessors
      .getField(reference, _id_gateway, jni.JniType.intType)
      .integer;

  /// from: public int gateway
  set gateway(int value) => jniEnv.SetIntField(reference, _id_gateway, value);

  static final _id_ipAddress =
      jniAccessors.getFieldIDOf(_classRef, "ipAddress", "I");

  /// from: public int ipAddress
  int get ipAddress => jniAccessors
      .getField(reference, _id_ipAddress, jni.JniType.intType)
      .integer;

  /// from: public int ipAddress
  set ipAddress(int value) =>
      jniEnv.SetIntField(reference, _id_ipAddress, value);

  static final _id_leaseDuration =
      jniAccessors.getFieldIDOf(_classRef, "leaseDuration", "I");

  /// from: public int leaseDuration
  int get leaseDuration => jniAccessors
      .getField(reference, _id_leaseDuration, jni.JniType.intType)
      .integer;

  /// from: public int leaseDuration
  set leaseDuration(int value) =>
      jniEnv.SetIntField(reference, _id_leaseDuration, value);

  static final _id_netmask =
      jniAccessors.getFieldIDOf(_classRef, "netmask", "I");

  /// from: public int netmask
  int get netmask => jniAccessors
      .getField(reference, _id_netmask, jni.JniType.intType)
      .integer;

  /// from: public int netmask
  set netmask(int value) => jniEnv.SetIntField(reference, _id_netmask, value);

  static final _id_serverAddress =
      jniAccessors.getFieldIDOf(_classRef, "serverAddress", "I");

  /// from: public int serverAddress
  int get serverAddress => jniAccessors
      .getField(reference, _id_serverAddress, jni.JniType.intType)
      .integer;

  /// from: public int serverAddress
  set serverAddress(int value) =>
      jniEnv.SetIntField(reference, _id_serverAddress, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  DhcpInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Implement the Parcelable interface {@hide }
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface {@hide }
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
