// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.Credentials
///
/// A class for representing UNIX credentials passed via ancillary data
/// on UNIX domain sockets. See "man 7 unix" on a desktop linux distro.
class Credentials extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/net/Credentials");
  Credentials.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(III)V");

  /// from: public void <init>(int pid, int uid, int gid)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Credentials(int pid, int uid, int gid)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [pid, uid, gid]).object);

  static final _id_getPid =
      jniAccessors.getMethodIDOf(_classRef, "getPid", "()I");

  /// from: public int getPid()
  int getPid() => jniAccessors.callMethodWithArgs(
      reference, _id_getPid, jni.JniType.intType, []).integer;

  static final _id_getUid =
      jniAccessors.getMethodIDOf(_classRef, "getUid", "()I");

  /// from: public int getUid()
  int getUid() => jniAccessors.callMethodWithArgs(
      reference, _id_getUid, jni.JniType.intType, []).integer;

  static final _id_getGid =
      jniAccessors.getMethodIDOf(_classRef, "getGid", "()I");

  /// from: public int getGid()
  int getGid() => jniAccessors.callMethodWithArgs(
      reference, _id_getGid, jni.JniType.intType, []).integer;
}
