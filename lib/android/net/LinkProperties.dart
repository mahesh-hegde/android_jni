// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "ProxyInfo.dart" as proxyinfo_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.LinkProperties
///
/// Describes the properties of a network link.
///
/// A link represents a connection to a network.
/// It may have multiple addresses and multiple gateways,
/// multiple dns servers but only one http proxy and one
/// network interface.
///
/// Note that this is just a holder of data.  Modifying it
/// does not affect live networks.
class LinkProperties extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/LinkProperties");
  LinkProperties.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.LinkProperties> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Implement the Parcelable interface.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  LinkProperties()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getInterfaceName = jniAccessors.getMethodIDOf(
      _classRef, "getInterfaceName", "()Ljava/lang/String;");

  /// from: public java.lang.String getInterfaceName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the interface name for this link.  May be {@code null} if not set.
  ///@return The interface name set for this link or {@code null}.
  jni.JniString getInterfaceName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getInterfaceName, jni.JniType.objectType, []).object);

  static final _id_getLinkAddresses = jniAccessors.getMethodIDOf(
      _classRef, "getLinkAddresses", "()Ljava/util/List;");

  /// from: public java.util.List<android.net.LinkAddress> getLinkAddresses()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns all the LinkAddress on this link.  Typically a link will have
  /// one IPv4 address and one or more IPv6 addresses.
  ///@return An unmodifiable List of LinkAddress for this link.
  jni.JniObject getLinkAddresses() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLinkAddresses, jni.JniType.objectType, []).object);

  static final _id_getDnsServers = jniAccessors.getMethodIDOf(
      _classRef, "getDnsServers", "()Ljava/util/List;");

  /// from: public java.util.List<java.net.InetAddress> getDnsServers()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns all the InetAddress for DNS servers on this link.
  ///@return An umodifiable List of InetAddress for DNS servers on
  ///         this link.
  jni.JniObject getDnsServers() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDnsServers, jni.JniType.objectType, []).object);

  static final _id_isPrivateDnsActive =
      jniAccessors.getMethodIDOf(_classRef, "isPrivateDnsActive", "()Z");

  /// from: public boolean isPrivateDnsActive()
  ///
  /// Returns whether private DNS is currently in use on this network. When
  /// private DNS is in use, applications must not send unencrypted DNS
  /// queries as doing so could reveal private user information. Furthermore,
  /// if private DNS is in use and \#getPrivateDnsServerName is not
  /// {@code null}, DNS queries must be sent to the specified DNS server.
  ///@return {@code true} if private DNS is in use, {@code false} otherwise.
  bool isPrivateDnsActive() => jniAccessors.callMethodWithArgs(
      reference, _id_isPrivateDnsActive, jni.JniType.booleanType, []).boolean;

  static final _id_getPrivateDnsServerName = jniAccessors.getMethodIDOf(
      _classRef, "getPrivateDnsServerName", "()Ljava/lang/String;");

  /// from: public java.lang.String getPrivateDnsServerName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the private DNS server name that is in use. If not {@code null},
  /// private DNS is in strict mode. In this mode, applications should ensure
  /// that all DNS queries are encrypted and sent to this hostname and that
  /// queries are only sent if the hostname's certificate is valid. If
  /// {@code null} and \#isPrivateDnsActive is {@code true}, private
  /// DNS is in opportunistic mode, and applications should ensure that DNS
  /// queries are encrypted and sent to a DNS server returned by
  /// \#getDnsServers. System DNS will handle each of these cases
  /// correctly, but applications implementing their own DNS lookups must make
  /// sure to follow these requirements.
  ///@return The private DNS server name.
  jni.JniString getPrivateDnsServerName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getPrivateDnsServerName, jni.JniType.objectType, []).object);

  static final _id_getDomains = jniAccessors.getMethodIDOf(
      _classRef, "getDomains", "()Ljava/lang/String;");

  /// from: public java.lang.String getDomains()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the DNS domains search path set for this link.
  ///@return A String containing the comma separated domains to search when resolving
  ///         host names on this link.
  jni.JniString getDomains() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDomains, jni.JniType.objectType, []).object);

  static final _id_getRoutes =
      jniAccessors.getMethodIDOf(_classRef, "getRoutes", "()Ljava/util/List;");

  /// from: public java.util.List<android.net.RouteInfo> getRoutes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns all the RouteInfo set on this link.
  ///@return An unmodifiable List of RouteInfo for this link.
  jni.JniObject getRoutes() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getRoutes, jni.JniType.objectType, []).object);

  static final _id_getHttpProxy = jniAccessors.getMethodIDOf(
      _classRef, "getHttpProxy", "()Landroid/net/ProxyInfo;");

  /// from: public android.net.ProxyInfo getHttpProxy()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the recommended ProxyInfo (or {@code null}) set on this link.
  ///@return The ProxyInfo set on this link
  proxyinfo_.ProxyInfo getHttpProxy() =>
      proxyinfo_.ProxyInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getHttpProxy, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Implement the Parcelable interface
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
