// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "LocalSocketAddress.dart" as localsocketaddress_;

import "LocalSocket.dart" as localsocket_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.LocalServerSocket
///
/// Non-standard class for creating an inbound UNIX-domain socket
/// in the Linux abstract namespace.
class LocalServerSocket extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/LocalServerSocket");
  LocalServerSocket.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new server socket listening at specified name.
  /// On the Android platform, the name is created in the Linux
  /// abstract namespace (instead of on the filesystem).
  ///@param name address for socket
  ///@throws IOException
  LocalServerSocket(jni.JniString name)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [name.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/io/FileDescriptor;)V");

  /// from: public void <init>(java.io.FileDescriptor fd)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a LocalServerSocket from a file descriptor that's already
  /// been created and bound. listen() will be called immediately on it.
  /// Used for cases where file descriptors are passed in via environment
  /// variables
  ///@param fd bound file descriptor
  ///@throws IOException
  LocalServerSocket.ctor1(jni.JniObject fd)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [fd.reference]).object);

  static final _id_getLocalSocketAddress = jniAccessors.getMethodIDOf(
      _classRef, "getLocalSocketAddress", "()Landroid/net/LocalSocketAddress;");

  /// from: public android.net.LocalSocketAddress getLocalSocketAddress()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Obtains the socket's local address
  ///@return local address
  localsocketaddress_.LocalSocketAddress getLocalSocketAddress() =>
      localsocketaddress_.LocalSocketAddress.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getLocalSocketAddress,
              jni.JniType.objectType, []).object);

  static final _id_accept = jniAccessors.getMethodIDOf(
      _classRef, "accept", "()Landroid/net/LocalSocket;");

  /// from: public android.net.LocalSocket accept()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Accepts a new connection to the socket. Blocks until a new
  /// connection arrives.
  ///@return a socket representing the new connection.
  ///@throws IOException
  localsocket_.LocalSocket accept() =>
      localsocket_.LocalSocket.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_accept, jni.JniType.objectType, []).object);

  static final _id_getFileDescriptor = jniAccessors.getMethodIDOf(
      _classRef, "getFileDescriptor", "()Ljava/io/FileDescriptor;");

  /// from: public java.io.FileDescriptor getFileDescriptor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns file descriptor or null if not yet open/already closed
  ///@return fd or null
  jni.JniObject getFileDescriptor() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFileDescriptor, jni.JniType.objectType, []).object);

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  ///
  /// Closes server socket.
  ///@throws IOException
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();
}
