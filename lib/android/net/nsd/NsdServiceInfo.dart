// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.nsd.NsdServiceInfo
///
/// A class representing service information for network service discovery
/// {@see NsdManager}
class NsdServiceInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/nsd/NsdServiceInfo");
  NsdServiceInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.nsd.NsdServiceInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Implement the Parcelable interface
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  NsdServiceInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getServiceName = jniAccessors.getMethodIDOf(
      _classRef, "getServiceName", "()Ljava/lang/String;");

  /// from: public java.lang.String getServiceName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the service name
  jni.JniString getServiceName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getServiceName, jni.JniType.objectType, []).object);

  static final _id_setServiceName = jniAccessors.getMethodIDOf(
      _classRef, "setServiceName", "(Ljava/lang/String;)V");

  /// from: public void setServiceName(java.lang.String s)
  ///
  /// Set the service name
  void setServiceName(jni.JniString s) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setServiceName,
      jni.JniType.voidType,
      [s.reference]).check();

  static final _id_getServiceType = jniAccessors.getMethodIDOf(
      _classRef, "getServiceType", "()Ljava/lang/String;");

  /// from: public java.lang.String getServiceType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the service type
  jni.JniString getServiceType() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getServiceType, jni.JniType.objectType, []).object);

  static final _id_setServiceType = jniAccessors.getMethodIDOf(
      _classRef, "setServiceType", "(Ljava/lang/String;)V");

  /// from: public void setServiceType(java.lang.String s)
  ///
  /// Set the service type
  void setServiceType(jni.JniString s) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setServiceType,
      jni.JniType.voidType,
      [s.reference]).check();

  static final _id_getHost = jniAccessors.getMethodIDOf(
      _classRef, "getHost", "()Ljava/net/InetAddress;");

  /// from: public java.net.InetAddress getHost()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the host address. The host address is valid for a resolved service.
  jni.JniObject getHost() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getHost, jni.JniType.objectType, []).object);

  static final _id_setHost = jniAccessors.getMethodIDOf(
      _classRef, "setHost", "(Ljava/net/InetAddress;)V");

  /// from: public void setHost(java.net.InetAddress s)
  ///
  /// Set the host address
  void setHost(jni.JniObject s) => jniAccessors.callMethodWithArgs(
      reference, _id_setHost, jni.JniType.voidType, [s.reference]).check();

  static final _id_getPort =
      jniAccessors.getMethodIDOf(_classRef, "getPort", "()I");

  /// from: public int getPort()
  ///
  /// Get port number. The port number is valid for a resolved service.
  int getPort() => jniAccessors.callMethodWithArgs(
      reference, _id_getPort, jni.JniType.intType, []).integer;

  static final _id_setPort =
      jniAccessors.getMethodIDOf(_classRef, "setPort", "(I)V");

  /// from: public void setPort(int p)
  ///
  /// Set port number
  void setPort(int p) => jniAccessors.callMethodWithArgs(
      reference, _id_setPort, jni.JniType.voidType, [p]).check();

  static final _id_setAttribute = jniAccessors.getMethodIDOf(
      _classRef, "setAttribute", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void setAttribute(java.lang.String key, java.lang.String value)
  ///
  /// Add a service attribute as a key/value pair.
  ///
  ///  Service attributes are included as DNS-SD TXT record pairs.
  ///
  ///  The key must be US-ASCII printable characters, excluding the '=' character.  Values may
  /// be UTF-8 strings or null.  The total length of key + value must be less than 255 bytes.
  ///
  ///  Keys should be short, ideally no more than 9 characters, and unique per instance of
  /// NsdServiceInfo.  Calling \#setAttribute twice with the same key will overwrite
  /// first value.
  void setAttribute(jni.JniString key, jni.JniString value) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAttribute,
          jni.JniType.voidType, [key.reference, value.reference]).check();

  static final _id_removeAttribute = jniAccessors.getMethodIDOf(
      _classRef, "removeAttribute", "(Ljava/lang/String;)V");

  /// from: public void removeAttribute(java.lang.String key)
  ///
  /// Remove an attribute by key
  void removeAttribute(jni.JniString key) => jniAccessors.callMethodWithArgs(
      reference,
      _id_removeAttribute,
      jni.JniType.voidType,
      [key.reference]).check();

  static final _id_getAttributes = jniAccessors.getMethodIDOf(
      _classRef, "getAttributes", "()Ljava/util/Map;");

  /// from: public java.util.Map<java.lang.String,byte[]> getAttributes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve attributes as a map of String keys to byte[] values. The attributes map is only
  /// valid for a resolved service.
  ///
  ///  The returned map is unmodifiable; changes must be made through \#setAttribute and
  /// \#removeAttribute.
  jni.JniObject getAttributes() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAttributes, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Implement the Parcelable interface
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
