// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.SSLSessionCache
///
/// File-based cache of established SSL sessions.  When re-establishing a
/// connection to the same server, using an SSL session cache can save some time,
/// power, and bandwidth by skipping directly to an encrypted stream.
/// This is a persistent cache which can span executions of the application.
///@see SSLCertificateSocketFactory
class SSLSessionCache extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/SSLSessionCache");
  SSLSessionCache.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/io/File;)V");

  /// from: public void <init>(java.io.File dir)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a session cache using the specified directory.
  /// Individual session entries will be files within the directory.
  /// Multiple instances for the same directory share data internally.
  ///@param dir to store session files in (created if necessary)
  ///@throws IOException if the cache can't be opened
  SSLSessionCache(jni.JniObject dir)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [dir.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a session cache at the default location for this app.
  /// Multiple instances share data internally.
  ///@param context for the application
  SSLSessionCache.ctor1(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference]).object);
}
