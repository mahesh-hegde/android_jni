// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.sip.SipErrorCode
///
/// Defines error codes returned during SIP actions. For example, during
/// SipRegistrationListener\#onRegistrationFailed onRegistrationFailed(),
/// SipSession.Listener\#onError onError(),
/// SipSession.Listener\#onCallChangeFailed onCallChangeFailed() and
/// SipSession.Listener\#onRegistrationFailed onRegistrationFailed().
class SipErrorCode extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/sip/SipErrorCode");
  SipErrorCode.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CLIENT_ERROR
  ///
  /// When some error occurs on the device, possibly due to a bug.
  static const CLIENT_ERROR = -4;

  /// from: static public final int CROSS_DOMAIN_AUTHENTICATION
  ///
  /// Cross-domain authentication required.
  static const CROSS_DOMAIN_AUTHENTICATION = -11;

  /// from: static public final int DATA_CONNECTION_LOST
  ///
  /// When data connection is lost.
  static const DATA_CONNECTION_LOST = -10;

  /// from: static public final int INVALID_CREDENTIALS
  ///
  /// When invalid credentials are provided.
  static const INVALID_CREDENTIALS = -8;

  /// from: static public final int INVALID_REMOTE_URI
  ///
  /// When the remote URI is not valid.
  static const INVALID_REMOTE_URI = -6;

  /// from: static public final int IN_PROGRESS
  ///
  /// The client is in a transaction and cannot initiate a new one.
  static const IN_PROGRESS = -9;

  /// from: static public final int NO_ERROR
  ///
  /// Not an error.
  static const NO_ERROR = 0;

  /// from: static public final int PEER_NOT_REACHABLE
  ///
  /// When the peer is not reachable.
  static const PEER_NOT_REACHABLE = -7;

  /// from: static public final int SERVER_ERROR
  ///
  /// When server responds with an error.
  static const SERVER_ERROR = -2;

  /// from: static public final int SERVER_UNREACHABLE
  ///
  /// When the server is not reachable.
  static const SERVER_UNREACHABLE = -12;

  /// from: static public final int SOCKET_ERROR
  ///
  /// When some socket error occurs.
  static const SOCKET_ERROR = -1;

  /// from: static public final int TIME_OUT
  ///
  /// When the transaction gets timed out.
  static const TIME_OUT = -5;

  /// from: static public final int TRANSACTION_TERMINTED
  ///
  /// When transaction is terminated unexpectedly.
  static const TRANSACTION_TERMINTED = -3;

  static final _id_toString1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "toString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String toString(int errorCode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString toString1(int errorCode) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_toString1, jni.JniType.objectType, [errorCode]).object);
}
