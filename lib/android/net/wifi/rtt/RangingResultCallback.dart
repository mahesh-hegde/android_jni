// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.rtt.RangingResultCallback
///
/// Base class for ranging result callbacks. Should be extended by applications and set when calling
/// WifiRttManager\#startRanging(RangingRequest, java.util.concurrent.Executor, RangingResultCallback).
/// If the ranging operation fails in whole (not attempted) then \#onRangingFailure(int)
/// will be called with a failure code. If the ranging operation is performed for each of the
/// requested peers then the \#onRangingResults(List) will be called with the set of
/// results (@link RangingResult, each of which has its own success/failure code
/// RangingResult\#getStatus().
class RangingResultCallback extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/wifi/rtt/RangingResultCallback");
  RangingResultCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int STATUS_CODE_FAIL
  ///
  /// A failure code for the whole ranging request operation. Indicates a failure.
  static const STATUS_CODE_FAIL = 1;

  /// from: static public final int STATUS_CODE_FAIL_RTT_NOT_AVAILABLE
  ///
  /// A failure code for the whole ranging request operation. Indicates that the request failed due
  /// to RTT not being available - e.g. Wi-Fi was disabled. Use the
  /// WifiRttManager\#isAvailable() and WifiRttManager\#ACTION_WIFI_RTT_STATE_CHANGED
  /// to track RTT availability.
  static const STATUS_CODE_FAIL_RTT_NOT_AVAILABLE = 2;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RangingResultCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onRangingFailure =
      jniAccessors.getMethodIDOf(_classRef, "onRangingFailure", "(I)V");

  /// from: public abstract void onRangingFailure(int code)
  ///
  /// Called when a ranging operation failed in whole - i.e. no ranging operation to any of the
  /// devices specified in the request was attempted.
  ///@param code A status code indicating the type of failure.
  ///
  /// Value is android.net.wifi.rtt.RangingResultCallback\#STATUS_CODE_FAIL, or android.net.wifi.rtt.RangingResultCallback\#STATUS_CODE_FAIL_RTT_NOT_AVAILABLE
  void onRangingFailure(int code) => jniAccessors.callMethodWithArgs(
      reference, _id_onRangingFailure, jni.JniType.voidType, [code]).check();

  static final _id_onRangingResults = jniAccessors.getMethodIDOf(
      _classRef, "onRangingResults", "(Ljava/util/List;)V");

  /// from: public abstract void onRangingResults(java.util.List<android.net.wifi.rtt.RangingResult> results)
  ///
  /// Called when a ranging operation was executed. The list of results corresponds to devices
  /// specified in the ranging request.
  ///@param results List of range measurements, one per requested device.
  ///
  /// This value must never be {@code null}.
  void onRangingResults(jni.JniObject results) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRangingResults,
          jni.JniType.voidType, [results.reference]).check();
}
