// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.SupplicantState
///
/// From <code>defs.h</code> in <code>wpa_supplicant</code>.
/// <p/>
/// These enumeration values are used to indicate the current wpa_supplicant
/// state. This is more fine-grained than most users will be interested in.
/// In general, it is better to use
/// android.net.NetworkInfo.State NetworkInfo.State.
/// <p/>
/// Note, the order of these enum constants must match the numerical values of the
/// state constants in <code>defs.h</code> in <code>wpa_supplicant</code>.
class SupplicantState extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/wifi/SupplicantState");
  SupplicantState.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/net/wifi/SupplicantState;");

  /// from: static public android.net.wifi.SupplicantState[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(_classRef,
      "valueOf", "(Ljava/lang/String;)Landroid/net/wifi/SupplicantState;");

  /// from: static public android.net.wifi.SupplicantState valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static SupplicantState valueOf(jni.JniString name) =>
      SupplicantState.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_valueOf, jni.JniType.objectType, [name.reference]).object);

  static final _id_isValidState = jniAccessors.getStaticMethodIDOf(
      _classRef, "isValidState", "(Landroid/net/wifi/SupplicantState;)Z");

  /// from: static public boolean isValidState(android.net.wifi.SupplicantState state)
  ///
  /// Returns {@code true} if the supplicant state is valid and {@code false}
  /// otherwise.
  ///@param state The supplicant state
  ///@return {@code true} if the supplicant state is valid and {@code false}
  /// otherwise.
  static bool isValidState(SupplicantState state) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isValidState,
          jni.JniType.booleanType, [state.reference]).boolean;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Implement the Parcelable interface {@hide }
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface {@hide }
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
