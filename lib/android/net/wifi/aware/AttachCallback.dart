// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "WifiAwareSession.dart" as wifiawaresession_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.aware.AttachCallback
///
/// Base class for Aware attach callbacks. Should be extended by applications and set when calling
/// WifiAwareManager\#attach(AttachCallback, android.os.Handler). These are callbacks
/// applying to the Aware connection as a whole - not to specific publish or subscribe sessions -
/// for that see DiscoverySessionCallback.
class AttachCallback extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/wifi/aware/AttachCallback");
  AttachCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AttachCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onAttached = jniAccessors.getMethodIDOf(
      _classRef, "onAttached", "(Landroid/net/wifi/aware/WifiAwareSession;)V");

  /// from: public void onAttached(android.net.wifi.aware.WifiAwareSession session)
  ///
  /// Called when Aware attach operation
  /// WifiAwareManager\#attach(AttachCallback, android.os.Handler)
  /// is completed and that we can now start discovery sessions or connections.
  ///@param session The Aware object on which we can execute further Aware operations - e.g.
  ///                discovery, connections.
  void onAttached(wifiawaresession_.WifiAwareSession session) =>
      jniAccessors.callMethodWithArgs(reference, _id_onAttached,
          jni.JniType.voidType, [session.reference]).check();

  static final _id_onAttachFailed =
      jniAccessors.getMethodIDOf(_classRef, "onAttachFailed", "()V");

  /// from: public void onAttachFailed()
  ///
  /// Called when Aware attach operation
  /// WifiAwareManager\#attach(AttachCallback, android.os.Handler) failed.
  void onAttachFailed() => jniAccessors.callMethodWithArgs(
      reference, _id_onAttachFailed, jni.JniType.voidType, []).check();
}
