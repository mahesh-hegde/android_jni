// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../os/Parcelable.dart" as parcelable_;

import "../../../os/Parcel.dart" as parcel_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.aware.SubscribeConfig
///
/// Defines the configuration of a Aware subscribe session. Built using
/// SubscribeConfig.Builder. Subscribe is done using
/// WifiAwareSession\#subscribe(SubscribeConfig, DiscoverySessionCallback,
/// android.os.Handler) or
/// SubscribeDiscoverySession\#updateSubscribe(SubscribeConfig).
class SubscribeConfig extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/wifi/aware/SubscribeConfig");
  SubscribeConfig.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.wifi.aware.SubscribeConfig> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int SUBSCRIBE_TYPE_ACTIVE
  ///
  /// Defines an active subscribe session - a subscribe session where
  /// subscribe packets are transmitted over-the-air. Configuration is done
  /// using SubscribeConfig.Builder\#setSubscribeType(int).
  static const SUBSCRIBE_TYPE_ACTIVE = 1;

  /// from: static public final int SUBSCRIBE_TYPE_PASSIVE
  ///
  /// Defines a passive subscribe session - a subscribe session where
  /// subscribe packets are not transmitted over-the-air and the device listens
  /// and matches to transmitted publish packets. Configuration is done using
  /// SubscribeConfig.Builder\#setSubscribeType(int).
  static const SUBSCRIBE_TYPE_PASSIVE = 0;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "([B[B[BIIZZIZI)V");

  /// from: void <init>(byte[] serviceName, byte[] serviceSpecificInfo, byte[] matchFilter, int subscribeType, int ttlSec, boolean enableTerminateNotification, boolean minDistanceMmSet, int minDistanceMm, boolean maxDistanceMmSet, int maxDistanceMm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  SubscribeConfig(
      jni.JniObject serviceName,
      jni.JniObject serviceSpecificInfo,
      jni.JniObject matchFilter,
      int subscribeType,
      int ttlSec,
      bool enableTerminateNotification,
      bool minDistanceMmSet,
      int minDistanceMm,
      bool maxDistanceMmSet,
      int maxDistanceMm)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          serviceName.reference,
          serviceSpecificInfo.reference,
          matchFilter.reference,
          subscribeType,
          ttlSec,
          enableTerminateNotification,
          minDistanceMmSet,
          minDistanceMm,
          maxDistanceMmSet,
          maxDistanceMm
        ]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}

/// from: android.net.wifi.aware.SubscribeConfig$Builder
///
/// Builder used to build SubscribeConfig objects.
class SubscribeConfig_Builder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/net/wifi/aware/SubscribeConfig\$Builder");
  SubscribeConfig_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SubscribeConfig_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setServiceName = jniAccessors.getMethodIDOf(
      _classRef,
      "setServiceName",
      "(Ljava/lang/String;)Landroid/net/wifi/aware/SubscribeConfig\$Builder;");

  /// from: public android.net.wifi.aware.SubscribeConfig.Builder setServiceName(java.lang.String serviceName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specify the service name of the subscribe session. The actual on-air
  /// value is a 6 byte hashed representation of this string.
  ///
  /// The Service Name is a UTF-8 encoded string from 1 to 255 bytes in length.
  /// The only acceptable single-byte UTF-8 symbols for a Service Name are alphanumeric
  /// values (A-Z, a-z, 0-9), the hyphen ('-'), and the period ('.'). All valid multi-byte
  /// UTF-8 characters are acceptable in a Service Name.
  ///
  /// Must be called - an empty ServiceName is not valid.
  ///@param serviceName The service name for the subscribe session.
  ///
  /// This value must never be {@code null}.
  ///@return The builder to facilitate chaining
  ///         {@code builder.setXXX(..).setXXX(..)}.
  SubscribeConfig_Builder setServiceName(jni.JniString serviceName) =>
      SubscribeConfig_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setServiceName,
          jni.JniType.objectType,
          [serviceName.reference]).object);

  static final _id_setServiceSpecificInfo = jniAccessors.getMethodIDOf(
      _classRef,
      "setServiceSpecificInfo",
      "([B)Landroid/net/wifi/aware/SubscribeConfig\$Builder;");

  /// from: public android.net.wifi.aware.SubscribeConfig.Builder setServiceSpecificInfo(byte[] serviceSpecificInfo)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specify service specific information for the subscribe session. This is
  /// a free-form byte array available to the application to send
  /// additional information as part of the discovery operation - i.e. it
  /// will not be used to determine whether a publish/subscribe match
  /// occurs.
  ///
  ///     Optional. Empty by default.
  ///@param serviceSpecificInfo A byte-array for the service-specific
  ///            information field.
  ///
  /// This value may be {@code null}.
  ///@return The builder to facilitate chaining
  ///         {@code builder.setXXX(..).setXXX(..)}.
  SubscribeConfig_Builder setServiceSpecificInfo(
          jni.JniObject serviceSpecificInfo) =>
      SubscribeConfig_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setServiceSpecificInfo,
          jni.JniType.objectType,
          [serviceSpecificInfo.reference]).object);

  static final _id_setMatchFilter = jniAccessors.getMethodIDOf(
      _classRef,
      "setMatchFilter",
      "(Ljava/util/List;)Landroid/net/wifi/aware/SubscribeConfig\$Builder;");

  /// from: public android.net.wifi.aware.SubscribeConfig.Builder setMatchFilter(java.util.List<byte[]> matchFilter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The match filter for a subscribe session. Used to determine whether a service
  /// discovery occurred - in addition to relying on the service name.
  ///
  ///     Optional. Empty by default.
  ///@param matchFilter A list of match filter entries (each of which is an arbitrary byte
  ///                    array).
  ///
  /// This value may be {@code null}.
  ///@return The builder to facilitate chaining
  ///         {@code builder.setXXX(..).setXXX(..)}.
  SubscribeConfig_Builder setMatchFilter(jni.JniObject matchFilter) =>
      SubscribeConfig_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setMatchFilter,
          jni.JniType.objectType,
          [matchFilter.reference]).object);

  static final _id_setSubscribeType = jniAccessors.getMethodIDOf(
      _classRef,
      "setSubscribeType",
      "(I)Landroid/net/wifi/aware/SubscribeConfig\$Builder;");

  /// from: public android.net.wifi.aware.SubscribeConfig.Builder setSubscribeType(int subscribeType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the type of the subscribe session: active (subscribe packets are
  /// transmitted over-the-air), or passive (no subscribe packets are
  /// transmitted, a match is made against a solicited/active publish
  /// session whose packets are transmitted over-the-air).
  ///@param subscribeType Subscribe session type:
  ///            SubscribeConfig\#SUBSCRIBE_TYPE_ACTIVE or
  ///            SubscribeConfig\#SUBSCRIBE_TYPE_PASSIVE.
  ///
  /// Value is android.net.wifi.aware.SubscribeConfig\#SUBSCRIBE_TYPE_PASSIVE, or android.net.wifi.aware.SubscribeConfig\#SUBSCRIBE_TYPE_ACTIVE
  ///@return The builder to facilitate chaining
  ///         {@code builder.setXXX(..).setXXX(..)}.
  SubscribeConfig_Builder setSubscribeType(int subscribeType) =>
      SubscribeConfig_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setSubscribeType,
          jni.JniType.objectType,
          [subscribeType]).object);

  static final _id_setTtlSec = jniAccessors.getMethodIDOf(_classRef,
      "setTtlSec", "(I)Landroid/net/wifi/aware/SubscribeConfig\$Builder;");

  /// from: public android.net.wifi.aware.SubscribeConfig.Builder setTtlSec(int ttlSec)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the time interval (in seconds) an active (
  /// SubscribeConfig.Builder\#setSubscribeType(int)) subscribe session
  /// will be alive - i.e. broadcasting a packet. When the TTL is reached
  /// an event will be generated for
  /// DiscoverySessionCallback\#onSessionTerminated().
  ///
  ///     Optional. 0 by default - indicating the session doesn't terminate on its own.
  ///     Session will be terminated when DiscoverySession\#close() is
  ///     called.
  ///@param ttlSec Lifetime of a subscribe session in seconds.
  ///@return The builder to facilitate chaining
  ///         {@code builder.setXXX(..).setXXX(..)}.
  SubscribeConfig_Builder setTtlSec(int ttlSec) =>
      SubscribeConfig_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setTtlSec, jni.JniType.objectType, [ttlSec]).object);

  static final _id_setTerminateNotificationEnabled = jniAccessors.getMethodIDOf(
      _classRef,
      "setTerminateNotificationEnabled",
      "(Z)Landroid/net/wifi/aware/SubscribeConfig\$Builder;");

  /// from: public android.net.wifi.aware.SubscribeConfig.Builder setTerminateNotificationEnabled(boolean enable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Configure whether a subscribe terminate notification
  /// DiscoverySessionCallback\#onSessionTerminated() is reported
  /// back to the callback.
  ///@param enable If true the terminate callback will be called when the
  ///            subscribe is terminated. Otherwise it will not be called.
  ///@return The builder to facilitate chaining
  ///         {@code builder.setXXX(..).setXXX(..)}.
  SubscribeConfig_Builder setTerminateNotificationEnabled(bool enable) =>
      SubscribeConfig_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setTerminateNotificationEnabled,
          jni.JniType.objectType,
          [enable]).object);

  static final _id_setMinDistanceMm = jniAccessors.getMethodIDOf(
      _classRef,
      "setMinDistanceMm",
      "(I)Landroid/net/wifi/aware/SubscribeConfig\$Builder;");

  /// from: public android.net.wifi.aware.SubscribeConfig.Builder setMinDistanceMm(int minDistanceMm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Configure the minimum distance to a discovered publisher at which to trigger a discovery
  /// notification. I.e. discovery will be triggered if we've found a matching publisher
  /// (based on the other criteria in this configuration) __and__ the distance to the
  /// publisher is larger than the value specified in this API. Can be used in conjunction with
  /// \#setMaxDistanceMm(int) to specify a geofence, i.e. discovery with min <=
  /// distance <= max.
  ///
  /// For ranging to be used in discovery it must also be enabled on the publisher using
  /// PublishConfig.Builder\#setRangingEnabled(boolean). However, ranging may
  /// not be available or enabled on the publisher or may be temporarily disabled on either
  /// subscriber or publisher - in such cases discovery will proceed without ranging.
  ///
  /// When ranging is enabled and available on both publisher and subscriber and a service
  /// is discovered based on geofence constraints the
  /// DiscoverySessionCallback\#onServiceDiscoveredWithinRange(PeerHandle, byte[], List, int)
  /// is called, otherwise the
  /// DiscoverySessionCallback\#onServiceDiscovered(PeerHandle, byte[], List)
  /// is called.
  ///
  /// The device must support Wi-Fi RTT for this feature to be used. Feature support is checked
  /// as described in android.net.wifi.rtt.
  ///@param minDistanceMm Minimum distance, in mm, to the publisher above which to trigger
  ///                      discovery.
  ///@return The builder to facilitate chaining
  ///         {@code builder.setXXX(..).setXXX(..)}.
  SubscribeConfig_Builder setMinDistanceMm(int minDistanceMm) =>
      SubscribeConfig_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setMinDistanceMm,
          jni.JniType.objectType,
          [minDistanceMm]).object);

  static final _id_setMaxDistanceMm = jniAccessors.getMethodIDOf(
      _classRef,
      "setMaxDistanceMm",
      "(I)Landroid/net/wifi/aware/SubscribeConfig\$Builder;");

  /// from: public android.net.wifi.aware.SubscribeConfig.Builder setMaxDistanceMm(int maxDistanceMm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Configure the maximum distance to a discovered publisher at which to trigger a discovery
  /// notification. I.e. discovery will be triggered if we've found a matching publisher
  /// (based on the other criteria in this configuration) __and__ the distance to the
  /// publisher is smaller than the value specified in this API. Can be used in conjunction
  /// with \#setMinDistanceMm(int) to specify a geofence, i.e. discovery with min <=
  /// distance <= max.
  ///
  /// For ranging to be used in discovery it must also be enabled on the publisher using
  /// PublishConfig.Builder\#setRangingEnabled(boolean). However, ranging may
  /// not be available or enabled on the publisher or may be temporarily disabled on either
  /// subscriber or publisher - in such cases discovery will proceed without ranging.
  ///
  /// When ranging is enabled and available on both publisher and subscriber and a service
  /// is discovered based on geofence constraints the
  /// DiscoverySessionCallback\#onServiceDiscoveredWithinRange(PeerHandle, byte[], List, int)
  /// is called, otherwise the
  /// DiscoverySessionCallback\#onServiceDiscovered(PeerHandle, byte[], List)
  /// is called.
  ///
  /// The device must support Wi-Fi RTT for this feature to be used. Feature support is checked
  /// as described in android.net.wifi.rtt.
  ///@param maxDistanceMm Maximum distance, in mm, to the publisher below which to trigger
  ///                      discovery.
  ///@return The builder to facilitate chaining
  ///         {@code builder.setXXX(..).setXXX(..)}.
  SubscribeConfig_Builder setMaxDistanceMm(int maxDistanceMm) =>
      SubscribeConfig_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setMaxDistanceMm,
          jni.JniType.objectType,
          [maxDistanceMm]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/net/wifi/aware/SubscribeConfig;");

  /// from: public android.net.wifi.aware.SubscribeConfig build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Build SubscribeConfig given the current requests made on the
  /// builder.
  SubscribeConfig build() =>
      SubscribeConfig.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
