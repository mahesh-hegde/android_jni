// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "DiscoverySession.dart" as discoverysession_;

import "SubscribeConfig.dart" as subscribeconfig_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.aware.SubscribeDiscoverySession
///
/// A class representing a Aware subscribe session. Created when
/// WifiAwareSession\#subscribe(SubscribeConfig,
/// DiscoverySessionCallback, android.os.Handler)
/// is called and a discovery session is created and returned in
/// DiscoverySessionCallback\#onSubscribeStarted(SubscribeDiscoverySession).
/// See baseline functionality of all discovery sessions in DiscoverySession.
/// This object allows updating an existing/running subscribe discovery session using
/// \#updateSubscribe(SubscribeConfig).
class SubscribeDiscoverySession extends discoverysession_.DiscoverySession {
  static final _classRef = jniAccessors
      .getClassOf("android/net/wifi/aware/SubscribeDiscoverySession");
  SubscribeDiscoverySession.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_updateSubscribe = jniAccessors.getMethodIDOf(_classRef,
      "updateSubscribe", "(Landroid/net/wifi/aware/SubscribeConfig;)V");

  /// from: public void updateSubscribe(android.net.wifi.aware.SubscribeConfig subscribeConfig)
  ///
  /// Re-configure the currently active subscribe session. The
  /// DiscoverySessionCallback is not replaced - the same listener used
  /// at creation is still used. The results of the configuration are returned using
  /// DiscoverySessionCallback:
  /// <ul>
  ///     <li>DiscoverySessionCallback\#onSessionConfigUpdated(): configuration
  ///     update succeeded.
  ///     <li>DiscoverySessionCallback\#onSessionConfigFailed(): configuration
  ///     update failed. The subscribe discovery session is still running using its previous
  ///     configuration (i.e. update failure does not terminate the session).
  /// </ul>
  ///@param subscribeConfig The new discovery subscribe session configuration
  ///                        (SubscribeConfig).
  ///
  /// This value must never be {@code null}.
  void updateSubscribe(subscribeconfig_.SubscribeConfig subscribeConfig) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateSubscribe,
          jni.JniType.voidType, [subscribeConfig.reference]).check();
}
