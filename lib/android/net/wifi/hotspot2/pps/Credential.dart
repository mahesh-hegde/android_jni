// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../../os/Parcelable.dart" as parcelable_;

import "../../../../os/Parcel.dart" as parcel_;
import "../../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.hotspot2.pps.Credential
///
/// Class representing Credential subtree in the PerProviderSubscription (PPS)
/// Management Object (MO) tree.
/// For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0
/// Release 2 Technical Specification.
///
/// In addition to the fields in the Credential subtree, this will also maintain necessary
/// information for the private key and certificates associated with this credential.
class Credential extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/wifi/hotspot2/pps/Credential");
  Credential.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.wifi.hotspot2.pps.Credential> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for creating Credential with default values.
  Credential()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/net/wifi/hotspot2/pps/Credential;)V");

  /// from: public void <init>(android.net.wifi.hotspot2.pps.Credential source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Copy constructor.
  ///@param source The source to copy from
  Credential.ctor1(Credential source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [source.reference]).object);

  static final _id_setRealm = jniAccessors.getMethodIDOf(
      _classRef, "setRealm", "(Ljava/lang/String;)V");

  /// from: public void setRealm(java.lang.String realm)
  ///
  /// Set the realm associated with this credential.
  ///@param realm The realm to set to
  void setRealm(jni.JniString realm) => jniAccessors.callMethodWithArgs(
      reference, _id_setRealm, jni.JniType.voidType, [realm.reference]).check();

  static final _id_getRealm =
      jniAccessors.getMethodIDOf(_classRef, "getRealm", "()Ljava/lang/String;");

  /// from: public java.lang.String getRealm()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the realm associated with this credential.
  ///@return the realm associated with this credential
  jni.JniString getRealm() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getRealm, jni.JniType.objectType, []).object);

  static final _id_setUserCredential = jniAccessors.getMethodIDOf(
      _classRef,
      "setUserCredential",
      "(Landroid/net/wifi/hotspot2/pps/Credential\$UserCredential;)V");

  /// from: public void setUserCredential(android.net.wifi.hotspot2.pps.Credential.UserCredential userCredential)
  ///
  /// Set the user credential information.
  ///@param userCredential The user credential to set to
  void setUserCredential(Credential_UserCredential userCredential) =>
      jniAccessors.callMethodWithArgs(reference, _id_setUserCredential,
          jni.JniType.voidType, [userCredential.reference]).check();

  static final _id_getUserCredential = jniAccessors.getMethodIDOf(
      _classRef,
      "getUserCredential",
      "()Landroid/net/wifi/hotspot2/pps/Credential\$UserCredential;");

  /// from: public android.net.wifi.hotspot2.pps.Credential.UserCredential getUserCredential()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the user credential information.
  ///@return user credential information
  Credential_UserCredential getUserCredential() =>
      Credential_UserCredential.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUserCredential, jni.JniType.objectType, []).object);

  static final _id_setCertCredential = jniAccessors.getMethodIDOf(
      _classRef,
      "setCertCredential",
      "(Landroid/net/wifi/hotspot2/pps/Credential\$CertificateCredential;)V");

  /// from: public void setCertCredential(android.net.wifi.hotspot2.pps.Credential.CertificateCredential certCredential)
  ///
  /// Set the certificate credential information.
  ///@param certCredential The certificate credential to set to
  void setCertCredential(Credential_CertificateCredential certCredential) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCertCredential,
          jni.JniType.voidType, [certCredential.reference]).check();

  static final _id_getCertCredential = jniAccessors.getMethodIDOf(
      _classRef,
      "getCertCredential",
      "()Landroid/net/wifi/hotspot2/pps/Credential\$CertificateCredential;");

  /// from: public android.net.wifi.hotspot2.pps.Credential.CertificateCredential getCertCredential()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the certificate credential information.
  ///@return certificate credential information
  Credential_CertificateCredential getCertCredential() =>
      Credential_CertificateCredential.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCertCredential, jni.JniType.objectType, []).object);

  static final _id_setSimCredential = jniAccessors.getMethodIDOf(
      _classRef,
      "setSimCredential",
      "(Landroid/net/wifi/hotspot2/pps/Credential\$SimCredential;)V");

  /// from: public void setSimCredential(android.net.wifi.hotspot2.pps.Credential.SimCredential simCredential)
  ///
  /// Set the SIM credential information.
  ///@param simCredential The SIM credential to set to
  void setSimCredential(Credential_SimCredential simCredential) =>
      jniAccessors.callMethodWithArgs(reference, _id_setSimCredential,
          jni.JniType.voidType, [simCredential.reference]).check();

  static final _id_getSimCredential = jniAccessors.getMethodIDOf(
      _classRef,
      "getSimCredential",
      "()Landroid/net/wifi/hotspot2/pps/Credential\$SimCredential;");

  /// from: public android.net.wifi.hotspot2.pps.Credential.SimCredential getSimCredential()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the SIM credential information.
  ///@return SIM credential information
  Credential_SimCredential getSimCredential() =>
      Credential_SimCredential.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSimCredential, jni.JniType.objectType, []).object);

  static final _id_setCaCertificate = jniAccessors.getMethodIDOf(
      _classRef, "setCaCertificate", "(Ljava/security/cert/X509Certificate;)V");

  /// from: public void setCaCertificate(java.security.cert.X509Certificate caCertificate)
  ///
  /// Set the CA (Certification Authority) certificate associated with this credential.
  ///@param caCertificate The CA certificate to set to
  void setCaCertificate(jni.JniObject caCertificate) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCaCertificate,
          jni.JniType.voidType, [caCertificate.reference]).check();

  static final _id_getCaCertificate = jniAccessors.getMethodIDOf(
      _classRef, "getCaCertificate", "()Ljava/security/cert/X509Certificate;");

  /// from: public java.security.cert.X509Certificate getCaCertificate()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the CA (Certification Authority) certificate associated with this credential.
  ///@return CA certificate associated with this credential
  jni.JniObject getCaCertificate() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCaCertificate, jni.JniType.objectType, []).object);

  static final _id_setClientCertificateChain = jniAccessors.getMethodIDOf(
      _classRef,
      "setClientCertificateChain",
      "([Ljava/security/cert/X509Certificate;)V");

  /// from: public void setClientCertificateChain(java.security.cert.X509Certificate[] certificateChain)
  ///
  /// Set the client certificate chain associated with this credential.
  ///@param certificateChain The client certificate chain to set to
  void setClientCertificateChain(jni.JniObject certificateChain) =>
      jniAccessors.callMethodWithArgs(reference, _id_setClientCertificateChain,
          jni.JniType.voidType, [certificateChain.reference]).check();

  static final _id_getClientCertificateChain = jniAccessors.getMethodIDOf(
      _classRef,
      "getClientCertificateChain",
      "()[Ljava/security/cert/X509Certificate;");

  /// from: public java.security.cert.X509Certificate[] getClientCertificateChain()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the client certificate chain associated with this credential.
  ///@return client certificate chain associated with this credential
  jni.JniObject getClientCertificateChain() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getClientCertificateChain, jni.JniType.objectType, []).object);

  static final _id_setClientPrivateKey = jniAccessors.getMethodIDOf(
      _classRef, "setClientPrivateKey", "(Ljava/security/PrivateKey;)V");

  /// from: public void setClientPrivateKey(java.security.PrivateKey clientPrivateKey)
  ///
  /// Set the client private key associated with this credential.
  ///@param clientPrivateKey the client private key to set to
  void setClientPrivateKey(jni.JniObject clientPrivateKey) =>
      jniAccessors.callMethodWithArgs(reference, _id_setClientPrivateKey,
          jni.JniType.voidType, [clientPrivateKey.reference]).check();

  static final _id_getClientPrivateKey = jniAccessors.getMethodIDOf(
      _classRef, "getClientPrivateKey", "()Ljava/security/PrivateKey;");

  /// from: public java.security.PrivateKey getClientPrivateKey()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the client private key associated with this credential.
  ///@return client private key associated with this credential.
  jni.JniObject getClientPrivateKey() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getClientPrivateKey, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object thatObject)
  bool equals1(jni.JniObject thatObject) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [thatObject.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.net.wifi.hotspot2.pps.Credential$UserCredential
///
/// Username-password based credential.
/// Contains the fields under PerProviderSubscription/Credential/UsernamePassword subtree.
class Credential_UserCredential extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/net/wifi/hotspot2/pps/Credential\$UserCredential");
  Credential_UserCredential.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.wifi.hotspot2.pps.Credential.UserCredential> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for creating UserCredential with default values.
  Credential_UserCredential()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/net/wifi/hotspot2/pps/Credential\$UserCredential;)V");

  /// from: public void <init>(android.net.wifi.hotspot2.pps.Credential.UserCredential source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Copy constructor.
  ///@param source The source to copy from
  Credential_UserCredential.ctor1(Credential_UserCredential source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [source.reference]).object);

  static final _id_setUsername = jniAccessors.getMethodIDOf(
      _classRef, "setUsername", "(Ljava/lang/String;)V");

  /// from: public void setUsername(java.lang.String username)
  ///
  /// Set the username associated with this user credential.
  ///@param username The username to set to
  void setUsername(jni.JniString username) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setUsername,
      jni.JniType.voidType,
      [username.reference]).check();

  static final _id_getUsername = jniAccessors.getMethodIDOf(
      _classRef, "getUsername", "()Ljava/lang/String;");

  /// from: public java.lang.String getUsername()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the username associated with this user credential.
  ///@return the username associated with this user credential
  jni.JniString getUsername() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUsername, jni.JniType.objectType, []).object);

  static final _id_setPassword = jniAccessors.getMethodIDOf(
      _classRef, "setPassword", "(Ljava/lang/String;)V");

  /// from: public void setPassword(java.lang.String password)
  ///
  /// Set the Base64-encoded password associated with this user credential.
  ///@param password The password to set to
  void setPassword(jni.JniString password) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setPassword,
      jni.JniType.voidType,
      [password.reference]).check();

  static final _id_getPassword = jniAccessors.getMethodIDOf(
      _classRef, "getPassword", "()Ljava/lang/String;");

  /// from: public java.lang.String getPassword()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the Base64-encoded password associated with this user credential.
  ///@return the Base64-encoded password associated with this user credential
  jni.JniString getPassword() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPassword, jni.JniType.objectType, []).object);

  static final _id_setEapType =
      jniAccessors.getMethodIDOf(_classRef, "setEapType", "(I)V");

  /// from: public void setEapType(int eapType)
  ///
  /// Set the EAP (Extensible Authentication Protocol) method type associated with this
  /// user credential.
  /// Refer to
  /// <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xml\#eap-numbers-4">
  /// EAP Numbers</a> for valid values.
  ///@param eapType The EAP method type associated with this user credential
  void setEapType(int eapType) => jniAccessors.callMethodWithArgs(
      reference, _id_setEapType, jni.JniType.voidType, [eapType]).check();

  static final _id_getEapType =
      jniAccessors.getMethodIDOf(_classRef, "getEapType", "()I");

  /// from: public int getEapType()
  ///
  /// Get the EAP (Extensible Authentication Protocol) method type associated with this
  /// user credential.
  ///@return EAP method type
  int getEapType() => jniAccessors.callMethodWithArgs(
      reference, _id_getEapType, jni.JniType.intType, []).integer;

  static final _id_setNonEapInnerMethod = jniAccessors.getMethodIDOf(
      _classRef, "setNonEapInnerMethod", "(Ljava/lang/String;)V");

  /// from: public void setNonEapInnerMethod(java.lang.String nonEapInnerMethod)
  ///
  /// Set the inner non-EAP method associated with this user credential.
  ///@param nonEapInnerMethod The non-EAP inner method to set to
  void setNonEapInnerMethod(jni.JniString nonEapInnerMethod) =>
      jniAccessors.callMethodWithArgs(reference, _id_setNonEapInnerMethod,
          jni.JniType.voidType, [nonEapInnerMethod.reference]).check();

  static final _id_getNonEapInnerMethod = jniAccessors.getMethodIDOf(
      _classRef, "getNonEapInnerMethod", "()Ljava/lang/String;");

  /// from: public java.lang.String getNonEapInnerMethod()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the inner non-EAP method associated with this user credential.
  ///@return Non-EAP inner method associated with this user credential
  jni.JniString getNonEapInnerMethod() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getNonEapInnerMethod, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object thatObject)
  bool equals1(jni.JniObject thatObject) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [thatObject.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.net.wifi.hotspot2.pps.Credential$SimCredential
///
/// SIM (Subscriber Identify Module) based credential.
/// Contains fields under PerProviderSubscription/Credential/SIM subtree.
class Credential_SimCredential extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/net/wifi/hotspot2/pps/Credential\$SimCredential");
  Credential_SimCredential.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.wifi.hotspot2.pps.Credential.SimCredential> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for creating SimCredential with default values.
  Credential_SimCredential()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/net/wifi/hotspot2/pps/Credential\$SimCredential;)V");

  /// from: public void <init>(android.net.wifi.hotspot2.pps.Credential.SimCredential source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Copy constructor
  ///@param source The source to copy from
  Credential_SimCredential.ctor1(Credential_SimCredential source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [source.reference]).object);

  static final _id_setImsi =
      jniAccessors.getMethodIDOf(_classRef, "setImsi", "(Ljava/lang/String;)V");

  /// from: public void setImsi(java.lang.String imsi)
  ///
  /// Set the IMSI (International Mobile Subscriber Identity) associated with this SIM
  /// credential.
  ///@param imsi The IMSI to set to
  void setImsi(jni.JniString imsi) => jniAccessors.callMethodWithArgs(
      reference, _id_setImsi, jni.JniType.voidType, [imsi.reference]).check();

  static final _id_getImsi =
      jniAccessors.getMethodIDOf(_classRef, "getImsi", "()Ljava/lang/String;");

  /// from: public java.lang.String getImsi()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the IMSI (International Mobile Subscriber Identity) associated with this SIM
  /// credential.
  ///@return IMSI associated with this SIM credential
  jni.JniString getImsi() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getImsi, jni.JniType.objectType, []).object);

  static final _id_setEapType =
      jniAccessors.getMethodIDOf(_classRef, "setEapType", "(I)V");

  /// from: public void setEapType(int eapType)
  ///
  /// Set the EAP (Extensible Authentication Protocol) method type associated with this
  /// SIM credential.
  ///@param eapType The EAP method type to set to
  void setEapType(int eapType) => jniAccessors.callMethodWithArgs(
      reference, _id_setEapType, jni.JniType.voidType, [eapType]).check();

  static final _id_getEapType =
      jniAccessors.getMethodIDOf(_classRef, "getEapType", "()I");

  /// from: public int getEapType()
  ///
  /// Get the EAP (Extensible Authentication Protocol) method type associated with this
  /// SIM credential.
  ///@return EAP method type associated with this SIM credential
  int getEapType() => jniAccessors.callMethodWithArgs(
      reference, _id_getEapType, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object thatObject)
  bool equals1(jni.JniObject thatObject) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [thatObject.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.net.wifi.hotspot2.pps.Credential$CertificateCredential
///
/// Certificate based credential.  This is used for EAP-TLS.
/// Contains fields under PerProviderSubscription/Credential/DigitalCertificate subtree.
class Credential_CertificateCredential extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/net/wifi/hotspot2/pps/Credential\$CertificateCredential");
  Credential_CertificateCredential.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.wifi.hotspot2.pps.Credential.CertificateCredential> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for creating CertificateCredential with default values.
  Credential_CertificateCredential()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/net/wifi/hotspot2/pps/Credential\$CertificateCredential;)V");

  /// from: public void <init>(android.net.wifi.hotspot2.pps.Credential.CertificateCredential source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Copy constructor.
  ///@param source The source to copy from
  Credential_CertificateCredential.ctor1(
      Credential_CertificateCredential source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [source.reference]).object);

  static final _id_setCertType = jniAccessors.getMethodIDOf(
      _classRef, "setCertType", "(Ljava/lang/String;)V");

  /// from: public void setCertType(java.lang.String certType)
  ///
  /// Set the certificate type associated with this certificate credential.
  ///@param certType The certificate type to set to
  void setCertType(jni.JniString certType) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCertType,
      jni.JniType.voidType,
      [certType.reference]).check();

  static final _id_getCertType = jniAccessors.getMethodIDOf(
      _classRef, "getCertType", "()Ljava/lang/String;");

  /// from: public java.lang.String getCertType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the certificate type associated with this certificate credential.
  ///@return certificate type
  jni.JniString getCertType() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCertType, jni.JniType.objectType, []).object);

  static final _id_setCertSha256Fingerprint = jniAccessors.getMethodIDOf(
      _classRef, "setCertSha256Fingerprint", "([B)V");

  /// from: public void setCertSha256Fingerprint(byte[] certSha256Fingerprint)
  ///
  /// Set the certificate SHA-256 fingerprint associated with this certificate credential.
  ///@param certSha256Fingerprint The certificate fingerprint to set to
  void setCertSha256Fingerprint(jni.JniObject certSha256Fingerprint) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCertSha256Fingerprint,
          jni.JniType.voidType, [certSha256Fingerprint.reference]).check();

  static final _id_getCertSha256Fingerprint =
      jniAccessors.getMethodIDOf(_classRef, "getCertSha256Fingerprint", "()[B");

  /// from: public byte[] getCertSha256Fingerprint()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the certificate SHA-256 fingerprint associated with this certificate credential.
  ///@return certificate SHA-256 fingerprint
  jni.JniObject getCertSha256Fingerprint() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getCertSha256Fingerprint, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object thatObject)
  bool equals1(jni.JniObject thatObject) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [thatObject.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
