// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../os/Parcelable.dart" as parcelable_;

import "pps/HomeSp.dart" as homesp_;

import "pps/Credential.dart" as credential_;

import "../../../os/Parcel.dart" as parcel_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.hotspot2.PasspointConfiguration
///
/// Class representing Passpoint configuration.  This contains configurations specified in
/// PerProviderSubscription (PPS) Management Object (MO) tree.
///
/// For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0
/// Release 2 Technical Specification.
class PasspointConfiguration extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/net/wifi/hotspot2/PasspointConfiguration");
  PasspointConfiguration.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.wifi.hotspot2.PasspointConfiguration> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for creating PasspointConfiguration with default values.
  PasspointConfiguration()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/net/wifi/hotspot2/PasspointConfiguration;)V");

  /// from: public void <init>(android.net.wifi.hotspot2.PasspointConfiguration source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Copy constructor.
  ///@param source The source to copy from
  PasspointConfiguration.ctor1(PasspointConfiguration source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [source.reference]).object);

  static final _id_setHomeSp = jniAccessors.getMethodIDOf(
      _classRef, "setHomeSp", "(Landroid/net/wifi/hotspot2/pps/HomeSp;)V");

  /// from: public void setHomeSp(android.net.wifi.hotspot2.pps.HomeSp homeSp)
  ///
  /// Set the Home SP (Service Provider) information.
  ///@param homeSp The Home SP information to set to
  void setHomeSp(homesp_.HomeSp homeSp) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setHomeSp,
      jni.JniType.voidType,
      [homeSp.reference]).check();

  static final _id_getHomeSp = jniAccessors.getMethodIDOf(
      _classRef, "getHomeSp", "()Landroid/net/wifi/hotspot2/pps/HomeSp;");

  /// from: public android.net.wifi.hotspot2.pps.HomeSp getHomeSp()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the Home SP (Service Provider) information.
  ///@return Home SP information
  homesp_.HomeSp getHomeSp() =>
      homesp_.HomeSp.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getHomeSp, jni.JniType.objectType, []).object);

  static final _id_setCredential = jniAccessors.getMethodIDOf(_classRef,
      "setCredential", "(Landroid/net/wifi/hotspot2/pps/Credential;)V");

  /// from: public void setCredential(android.net.wifi.hotspot2.pps.Credential credential)
  ///
  /// Set the credential information.
  ///@param credential The credential information to set to
  void setCredential(credential_.Credential credential) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCredential,
          jni.JniType.voidType, [credential.reference]).check();

  static final _id_getCredential = jniAccessors.getMethodIDOf(_classRef,
      "getCredential", "()Landroid/net/wifi/hotspot2/pps/Credential;");

  /// from: public android.net.wifi.hotspot2.pps.Credential getCredential()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the credential information.
  ///@return credential information
  credential_.Credential getCredential() =>
      credential_.Credential.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCredential, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object thatObject)
  bool equals1(jni.JniObject thatObject) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [thatObject.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
