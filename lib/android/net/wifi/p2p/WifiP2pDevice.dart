// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../os/Parcelable.dart" as parcelable_;

import "../../../os/Parcel.dart" as parcel_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.p2p.WifiP2pDevice
///
/// A class representing a Wi-Fi p2p device
///
/// Note that the operations are not thread safe
/// {@see WifiP2pManager}
class WifiP2pDevice extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/wifi/p2p/WifiP2pDevice");
  WifiP2pDevice.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int AVAILABLE
  static const AVAILABLE = 3;

  /// from: static public final int CONNECTED
  static const CONNECTED = 0;

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.wifi.p2p.WifiP2pDevice> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Implement the Parcelable interface
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int FAILED
  static const FAILED = 2;

  /// from: static public final int INVITED
  static const INVITED = 1;

  /// from: static public final int UNAVAILABLE
  static const UNAVAILABLE = 4;

  static final _id_deviceAddress = jniAccessors.getFieldIDOf(
      _classRef, "deviceAddress", "Ljava/lang/String;");

  /// from: public java.lang.String deviceAddress
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The device MAC address uniquely identifies a Wi-Fi p2p device
  jni.JniString get deviceAddress => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_deviceAddress, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String deviceAddress
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The device MAC address uniquely identifies a Wi-Fi p2p device
  set deviceAddress(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_deviceAddress, value.reference);

  static final _id_deviceName =
      jniAccessors.getFieldIDOf(_classRef, "deviceName", "Ljava/lang/String;");

  /// from: public java.lang.String deviceName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The device name is a user friendly string to identify a Wi-Fi p2p device
  jni.JniString get deviceName => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_deviceName, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String deviceName
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The device name is a user friendly string to identify a Wi-Fi p2p device
  set deviceName(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_deviceName, value.reference);

  static final _id_primaryDeviceType = jniAccessors.getFieldIDOf(
      _classRef, "primaryDeviceType", "Ljava/lang/String;");

  /// from: public java.lang.String primaryDeviceType
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Primary device type identifies the type of device. For example, an application
  /// could filter the devices discovered to only display printers if the purpose is to
  /// enable a printing action from the user. See the Wi-Fi Direct technical specification
  /// for the full list of standard device types supported.
  jni.JniString get primaryDeviceType => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_primaryDeviceType, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String primaryDeviceType
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Primary device type identifies the type of device. For example, an application
  /// could filter the devices discovered to only display printers if the purpose is to
  /// enable a printing action from the user. See the Wi-Fi Direct technical specification
  /// for the full list of standard device types supported.
  set primaryDeviceType(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_primaryDeviceType, value.reference);

  static final _id_secondaryDeviceType = jniAccessors.getFieldIDOf(
      _classRef, "secondaryDeviceType", "Ljava/lang/String;");

  /// from: public java.lang.String secondaryDeviceType
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Secondary device type is an optional attribute that can be provided by a device in
  /// addition to the primary device type.
  jni.JniString get secondaryDeviceType => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_secondaryDeviceType, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String secondaryDeviceType
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Secondary device type is an optional attribute that can be provided by a device in
  /// addition to the primary device type.
  set secondaryDeviceType(jni.JniString value) => jniEnv.SetObjectField(
      reference, _id_secondaryDeviceType, value.reference);

  static final _id_status = jniAccessors.getFieldIDOf(_classRef, "status", "I");

  /// from: public int status
  ///
  /// Device connection status
  int get status =>
      jniAccessors.getField(reference, _id_status, jni.JniType.intType).integer;

  /// from: public int status
  ///
  /// Device connection status
  set status(int value) => jniEnv.SetIntField(reference, _id_status, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  WifiP2pDevice()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/net/wifi/p2p/WifiP2pDevice;)V");

  /// from: public void <init>(android.net.wifi.p2p.WifiP2pDevice source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// copy constructor
  WifiP2pDevice.ctor1(WifiP2pDevice source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [source.reference]).object);

  static final _id_wpsPbcSupported =
      jniAccessors.getMethodIDOf(_classRef, "wpsPbcSupported", "()Z");

  /// from: public boolean wpsPbcSupported()
  ///
  /// Returns true if WPS push button configuration is supported
  bool wpsPbcSupported() => jniAccessors.callMethodWithArgs(
      reference, _id_wpsPbcSupported, jni.JniType.booleanType, []).boolean;

  static final _id_wpsKeypadSupported =
      jniAccessors.getMethodIDOf(_classRef, "wpsKeypadSupported", "()Z");

  /// from: public boolean wpsKeypadSupported()
  ///
  /// Returns true if WPS keypad configuration is supported
  bool wpsKeypadSupported() => jniAccessors.callMethodWithArgs(
      reference, _id_wpsKeypadSupported, jni.JniType.booleanType, []).boolean;

  static final _id_wpsDisplaySupported =
      jniAccessors.getMethodIDOf(_classRef, "wpsDisplaySupported", "()Z");

  /// from: public boolean wpsDisplaySupported()
  ///
  /// Returns true if WPS display configuration is supported
  bool wpsDisplaySupported() => jniAccessors.callMethodWithArgs(
      reference, _id_wpsDisplaySupported, jni.JniType.booleanType, []).boolean;

  static final _id_isServiceDiscoveryCapable =
      jniAccessors.getMethodIDOf(_classRef, "isServiceDiscoveryCapable", "()Z");

  /// from: public boolean isServiceDiscoveryCapable()
  ///
  /// Returns true if the device is capable of service discovery
  bool isServiceDiscoveryCapable() => jniAccessors.callMethodWithArgs(reference,
      _id_isServiceDiscoveryCapable, jni.JniType.booleanType, []).boolean;

  static final _id_isGroupOwner =
      jniAccessors.getMethodIDOf(_classRef, "isGroupOwner", "()Z");

  /// from: public boolean isGroupOwner()
  ///
  /// Returns true if the device is a group owner
  bool isGroupOwner() => jniAccessors.callMethodWithArgs(
      reference, _id_isGroupOwner, jni.JniType.booleanType, []).boolean;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Implement the Parcelable interface
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
