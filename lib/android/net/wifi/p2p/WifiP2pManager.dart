// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../content/Context.dart" as context_;

import "../../../os/Looper.dart" as looper_;

import "WifiP2pConfig.dart" as wifip2pconfig_;

import "nsd/WifiP2pServiceInfo.dart" as wifip2pserviceinfo_;

import "nsd/WifiP2pServiceRequest.dart" as wifip2pservicerequest_;

import "WifiP2pDevice.dart" as wifip2pdevice_;

import "WifiP2pDeviceList.dart" as wifip2pdevicelist_;

import "WifiP2pGroup.dart" as wifip2pgroup_;

import "WifiP2pInfo.dart" as wifip2pinfo_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.p2p.WifiP2pManager
///
/// This class provides the API for managing Wi-Fi peer-to-peer connectivity. This lets an
/// application discover available peers, setup connection to peers and query for the list of peers.
/// When a p2p connection is formed over wifi, the device continues to maintain the uplink
/// connection over mobile or any other available network for internet connectivity on the device.
///
///  The API is asynchronous and responses to requests from an application are on listener
/// callbacks provided by the application. The application needs to do an initialization with
/// \#initialize before doing any p2p operation.
///
///  Most application calls need a ActionListener instance for receiving callbacks
/// ActionListener\#onSuccess or ActionListener\#onFailure. Action callbacks
/// indicate whether the initiation of the action was a success or a failure.
/// Upon failure, the reason of failure can be one of \#ERROR, \#P2P_UNSUPPORTED
/// or \#BUSY.
///
///  An application can initiate discovery of peers with \#discoverPeers. An initiated
/// discovery request from an application stays active until the device starts connecting to a peer
/// ,forms a p2p group or there is an explicit \#stopPeerDiscovery.
/// Applications can listen to \#WIFI_P2P_DISCOVERY_CHANGED_ACTION to know if a peer-to-peer
/// discovery is running or stopped. Additionally, \#WIFI_P2P_PEERS_CHANGED_ACTION indicates
/// if the peer list has changed.
///
///  When an application needs to fetch the current list of peers, it can request the list
/// of peers with \#requestPeers. When the peer list is available
/// PeerListListener\#onPeersAvailable is called with the device list.
///
///  An application can initiate a connection request to a peer through \#connect. See
/// WifiP2pConfig for details on setting up the configuration. For communication with legacy
/// Wi-Fi devices that do not support p2p, an app can create a group using \#createGroup
/// which creates an access point whose details can be fetched with \#requestGroupInfo.
///
///  After a successful group formation through \#createGroup or through \#connect,
/// use \#requestConnectionInfo to fetch the connection details. The connection info
/// WifiP2pInfo contains the address of the group owner
/// WifiP2pInfo\#groupOwnerAddress and a flag WifiP2pInfo\#isGroupOwner to indicate
/// if the current device is a p2p group owner. A p2p client can thus communicate with
/// the p2p group owner through a socket connection.
///
///  With peer discovery using \#discoverPeers, an application discovers the neighboring
/// peers, but has no good way to figure out which peer to establish a connection with. For example,
/// if a game application is interested in finding all the neighboring peers that are also running
/// the same game, it has no way to find out until after the connection is setup. Pre-association
/// service discovery is meant to address this issue of filtering the peers based on the running
/// services.
///
/// With pre-association service discovery, an application can advertise a service for a
/// application on a peer device prior to a connection setup between the devices.
/// Currently, DNS based service discovery (Bonjour) and Upnp are the higher layer protocols
/// supported. Get Bonjour resources at dns-sd.org and Upnp resources at upnp.org
/// As an example, a video application can discover a Upnp capable media renderer
/// prior to setting up a Wi-fi p2p connection with the device.
///
///  An application can advertise a Upnp or a Bonjour service with a call to
/// \#addLocalService. After a local service is added,
/// the framework automatically responds to a peer application discovering the service prior
/// to establishing a p2p connection. A call to \#removeLocalService removes a local
/// service and \#clearLocalServices can be used to clear all local services.
///
///  An application that is looking for peer devices that support certain services
/// can do so with a call to  \#discoverServices. Prior to initiating the discovery,
/// application can add service discovery request with a call to \#addServiceRequest,
/// remove a service discovery request with a call to \#removeServiceRequest or clear
/// all requests with a call to \#clearServiceRequests. When no service requests remain,
/// a previously running service discovery will stop.
///
/// The application is notified of a result of service discovery request through listener callbacks
/// set through \#setDnsSdResponseListeners for Bonjour or
/// \#setUpnpServiceResponseListener for Upnp.
///
/// <p class="note"><strong>Note:</strong>
/// Registering an application handler with \#initialize requires the permissions
/// android.Manifest.permission\#ACCESS_WIFI_STATE and
/// android.Manifest.permission\#CHANGE_WIFI_STATE to perform any further peer-to-peer
/// operations.
///
/// {@see WifiP2pConfig}
/// {@see WifiP2pInfo}
/// {@see WifiP2pGroup}
/// {@see WifiP2pDevice}
/// {@see WifiP2pDeviceList}
/// {@see android.net.wifi.WpsInfo}
class WifiP2pManager extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/wifi/p2p/WifiP2pManager");
  WifiP2pManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int BUSY
  ///
  /// Passed with ActionListener\#onFailure.
  /// Indicates that the operation failed because the framework is busy and
  /// unable to service the request
  static const BUSY = 2;

  /// from: static public final int ERROR
  ///
  /// Passed with ActionListener\#onFailure.
  /// Indicates that the operation failed due to an internal error.
  static const ERROR = 0;

  /// from: static public final java.lang.String EXTRA_DISCOVERY_STATE
  ///
  /// The lookup key for an int that indicates whether p2p discovery has started or stopped.
  /// Retrieve it with android.content.Intent\#getIntExtra(String,int).
  ///@see \#WIFI_P2P_DISCOVERY_STARTED
  ///@see \#WIFI_P2P_DISCOVERY_STOPPED
  static const EXTRA_DISCOVERY_STATE = "discoveryState";

  /// from: static public final java.lang.String EXTRA_NETWORK_INFO
  ///
  /// The lookup key for a android.net.NetworkInfo object associated with the
  /// p2p network. Retrieve with
  /// android.content.Intent\#getParcelableExtra(String).
  static const EXTRA_NETWORK_INFO = "networkInfo";

  /// from: static public final java.lang.String EXTRA_P2P_DEVICE_LIST
  ///
  /// The lookup key for a android.net.wifi.p2p.WifiP2pDeviceList object representing
  /// the new peer list when \#WIFI_P2P_PEERS_CHANGED_ACTION broadcast is sent.
  ///
  /// Retrieve with android.content.Intent\#getParcelableExtra(String).
  static const EXTRA_P2P_DEVICE_LIST = "wifiP2pDeviceList";

  /// from: static public final java.lang.String EXTRA_WIFI_P2P_DEVICE
  ///
  /// The lookup key for a android.net.wifi.p2p.WifiP2pDevice object
  /// Retrieve with android.content.Intent\#getParcelableExtra(String).
  static const EXTRA_WIFI_P2P_DEVICE = "wifiP2pDevice";

  /// from: static public final java.lang.String EXTRA_WIFI_P2P_GROUP
  ///
  /// The lookup key for a android.net.wifi.p2p.WifiP2pGroup object
  /// associated with the p2p network. Retrieve with
  /// android.content.Intent\#getParcelableExtra(String).
  static const EXTRA_WIFI_P2P_GROUP = "p2pGroupInfo";

  /// from: static public final java.lang.String EXTRA_WIFI_P2P_INFO
  ///
  /// The lookup key for a android.net.wifi.p2p.WifiP2pInfo object
  /// Retrieve with android.content.Intent\#getParcelableExtra(String).
  static const EXTRA_WIFI_P2P_INFO = "wifiP2pInfo";

  /// from: static public final java.lang.String EXTRA_WIFI_STATE
  ///
  /// The lookup key for an int that indicates whether Wi-Fi p2p is enabled or disabled.
  /// Retrieve it with android.content.Intent\#getIntExtra(String,int).
  ///@see \#WIFI_P2P_STATE_DISABLED
  ///@see \#WIFI_P2P_STATE_ENABLED
  static const EXTRA_WIFI_STATE = "wifi_p2p_state";

  /// from: static public final int NO_SERVICE_REQUESTS
  ///
  /// Passed with ActionListener\#onFailure.
  /// Indicates that the \#discoverServices failed because no service
  /// requests are added. Use \#addServiceRequest to add a service
  /// request.
  static const NO_SERVICE_REQUESTS = 3;

  /// from: static public final int P2P_UNSUPPORTED
  ///
  /// Passed with ActionListener\#onFailure.
  /// Indicates that the operation failed because p2p is unsupported on the device.
  static const P2P_UNSUPPORTED = 1;

  /// from: static public final java.lang.String WIFI_P2P_CONNECTION_CHANGED_ACTION
  ///
  /// Broadcast intent action indicating that the state of Wi-Fi p2p connectivity
  /// has changed. One extra \#EXTRA_WIFI_P2P_INFO provides the p2p connection info in
  /// the form of a WifiP2pInfo object. Another extra \#EXTRA_NETWORK_INFO provides
  /// the network info in the form of a android.net.NetworkInfo. A third extra provides
  /// the details of the group.
  ///@see \#EXTRA_WIFI_P2P_INFO
  ///@see \#EXTRA_NETWORK_INFO
  ///@see \#EXTRA_WIFI_P2P_GROUP
  static const WIFI_P2P_CONNECTION_CHANGED_ACTION =
      "android.net.wifi.p2p.CONNECTION_STATE_CHANGE";

  /// from: static public final java.lang.String WIFI_P2P_DISCOVERY_CHANGED_ACTION
  ///
  /// Broadcast intent action indicating that peer discovery has either started or stopped.
  /// One extra \#EXTRA_DISCOVERY_STATE indicates whether discovery has started
  /// or stopped.
  ///
  /// Note that discovery will be stopped during a connection setup. If the application tries
  /// to re-initiate discovery during this time, it can fail.
  static const WIFI_P2P_DISCOVERY_CHANGED_ACTION =
      "android.net.wifi.p2p.DISCOVERY_STATE_CHANGE";

  /// from: static public final int WIFI_P2P_DISCOVERY_STARTED
  ///
  /// p2p discovery has started
  ///@see \#WIFI_P2P_DISCOVERY_CHANGED_ACTION
  static const WIFI_P2P_DISCOVERY_STARTED = 2;

  /// from: static public final int WIFI_P2P_DISCOVERY_STOPPED
  ///
  /// p2p discovery has stopped
  ///@see \#WIFI_P2P_DISCOVERY_CHANGED_ACTION
  static const WIFI_P2P_DISCOVERY_STOPPED = 1;

  /// from: static public final java.lang.String WIFI_P2P_PEERS_CHANGED_ACTION
  ///
  /// Broadcast intent action indicating that the available peer list has changed. This
  /// can be sent as a result of peers being found, lost or updated.
  ///
  ///  An extra \#EXTRA_P2P_DEVICE_LIST provides the full list of
  /// current peers. The full list of peers can also be obtained any time with
  /// \#requestPeers.
  ///@see \#EXTRA_P2P_DEVICE_LIST
  static const WIFI_P2P_PEERS_CHANGED_ACTION =
      "android.net.wifi.p2p.PEERS_CHANGED";

  /// from: static public final java.lang.String WIFI_P2P_STATE_CHANGED_ACTION
  ///
  /// Broadcast intent action to indicate whether Wi-Fi p2p is enabled or disabled. An
  /// extra \#EXTRA_WIFI_STATE provides the state information as int.
  ///@see \#EXTRA_WIFI_STATE
  static const WIFI_P2P_STATE_CHANGED_ACTION =
      "android.net.wifi.p2p.STATE_CHANGED";

  /// from: static public final int WIFI_P2P_STATE_DISABLED
  ///
  /// Wi-Fi p2p is disabled.
  ///@see \#WIFI_P2P_STATE_CHANGED_ACTION
  static const WIFI_P2P_STATE_DISABLED = 1;

  /// from: static public final int WIFI_P2P_STATE_ENABLED
  ///
  /// Wi-Fi p2p is enabled.
  ///@see \#WIFI_P2P_STATE_CHANGED_ACTION
  static const WIFI_P2P_STATE_ENABLED = 2;

  /// from: static public final java.lang.String WIFI_P2P_THIS_DEVICE_CHANGED_ACTION
  ///
  /// Broadcast intent action indicating that this device details have changed.
  static const WIFI_P2P_THIS_DEVICE_CHANGED_ACTION =
      "android.net.wifi.p2p.THIS_DEVICE_CHANGED";

  static final _id_initialize = jniAccessors.getMethodIDOf(
      _classRef,
      "initialize",
      "(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/p2p/WifiP2pManager\$ChannelListener;)Landroid/net/wifi/p2p/WifiP2pManager\$Channel;");

  /// from: public android.net.wifi.p2p.WifiP2pManager.Channel initialize(android.content.Context srcContext, android.os.Looper srcLooper, android.net.wifi.p2p.WifiP2pManager.ChannelListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Registers the application with the Wi-Fi framework. This function
  /// must be the first to be called before any p2p operations are performed.
  ///@param srcContext is the context of the source
  ///@param srcLooper is the Looper on which the callbacks are receivied
  ///@param listener for callback at loss of framework communication. Can be null.
  ///@return Channel instance that is necessary for performing any further p2p operations
  WifiP2pManager_Channel initialize(context_.Context srcContext,
          looper_.Looper srcLooper, WifiP2pManager_ChannelListener listener) =>
      WifiP2pManager_Channel.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_initialize, jni.JniType.objectType, [
        srcContext.reference,
        srcLooper.reference,
        listener.reference
      ]).object);

  static final _id_discoverPeers = jniAccessors.getMethodIDOf(
      _classRef,
      "discoverPeers",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Initiate peer discovery. A discovery process involves scanning for available Wi-Fi peers
  /// for the purpose of establishing a connection.
  ///
  ///  The function call immediately returns after sending a discovery request
  /// to the framework. The application is notified of a success or failure to initiate
  /// discovery through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///
  ///  The discovery remains active until a connection is initiated or
  /// a p2p group is formed. Register for \#WIFI_P2P_PEERS_CHANGED_ACTION intent to
  /// determine when the framework notifies of a change as peers are discovered.
  ///
  ///  Upon receiving a \#WIFI_P2P_PEERS_CHANGED_ACTION intent, an application
  /// can request for the list of peers using \#requestPeers.
  ///@param c is the channel created at \#initialize
  ///@param listener for callbacks on success or failure. Can be null.
  void discoverPeers(
          WifiP2pManager_Channel c, WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_discoverPeers,
          jni.JniType.voidType, [c.reference, listener.reference]).check();

  static final _id_stopPeerDiscovery = jniAccessors.getMethodIDOf(
      _classRef,
      "stopPeerDiscovery",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Stop an ongoing peer discovery
  ///
  ///  The function call immediately returns after sending a stop request
  /// to the framework. The application is notified of a success or failure to initiate
  /// stop through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///@param c is the channel created at \#initialize
  ///@param listener for callbacks on success or failure. Can be null.
  void stopPeerDiscovery(
          WifiP2pManager_Channel c, WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_stopPeerDiscovery,
          jni.JniType.voidType, [c.reference, listener.reference]).check();

  static final _id_connect = jniAccessors.getMethodIDOf(_classRef, "connect",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pConfig;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void connect(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pConfig config, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Start a p2p connection to a device with the specified configuration.
  ///
  ///  The function call immediately returns after sending a connection request
  /// to the framework. The application is notified of a success or failure to initiate
  /// connect through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///
  ///  Register for \#WIFI_P2P_CONNECTION_CHANGED_ACTION intent to
  /// determine when the framework notifies of a change in connectivity.
  ///
  ///  If the current device is not part of a p2p group, a connect request initiates
  /// a group negotiation with the peer.
  ///
  ///  If the current device is part of an existing p2p group or has created
  /// a p2p group with \#createGroup, an invitation to join the group is sent to
  /// the peer device.
  ///@param c is the channel created at \#initialize
  ///@param config options as described in WifiP2pConfig class
  ///@param listener for callbacks on success or failure. Can be null.
  void connect(WifiP2pManager_Channel c, wifip2pconfig_.WifiP2pConfig config,
          WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_connect,
          jni.JniType.voidType,
          [c.reference, config.reference, listener.reference]).check();

  static final _id_cancelConnect = jniAccessors.getMethodIDOf(
      _classRef,
      "cancelConnect",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Cancel any ongoing p2p group negotiation
  ///
  ///  The function call immediately returns after sending a connection cancellation request
  /// to the framework. The application is notified of a success or failure to initiate
  /// cancellation through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///@param c is the channel created at \#initialize
  ///@param listener for callbacks on success or failure. Can be null.
  void cancelConnect(
          WifiP2pManager_Channel c, WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_cancelConnect,
          jni.JniType.voidType, [c.reference, listener.reference]).check();

  static final _id_createGroup = jniAccessors.getMethodIDOf(
      _classRef,
      "createGroup",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void createGroup(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Create a p2p group with the current device as the group owner. This essentially creates
  /// an access point that can accept connections from legacy clients as well as other p2p
  /// devices.
  ///
  /// <p class="note"><strong>Note:</strong>
  /// This function would normally not be used unless the current device needs
  /// to form a p2p connection with a legacy client
  ///
  ///  The function call immediately returns after sending a group creation request
  /// to the framework. The application is notified of a success or failure to initiate
  /// group creation through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///
  ///  Application can request for the group details with \#requestGroupInfo.
  ///@param c is the channel created at \#initialize
  ///@param listener for callbacks on success or failure. Can be null.
  void createGroup(
          WifiP2pManager_Channel c, WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_createGroup,
          jni.JniType.voidType, [c.reference, listener.reference]).check();

  static final _id_removeGroup = jniAccessors.getMethodIDOf(
      _classRef,
      "removeGroup",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void removeGroup(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Remove the current p2p group.
  ///
  ///  The function call immediately returns after sending a group removal request
  /// to the framework. The application is notified of a success or failure to initiate
  /// group removal through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///@param c is the channel created at \#initialize
  ///@param listener for callbacks on success or failure. Can be null.
  void removeGroup(
          WifiP2pManager_Channel c, WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_removeGroup,
          jni.JniType.voidType, [c.reference, listener.reference]).check();

  static final _id_addLocalService = jniAccessors.getMethodIDOf(
      _classRef,
      "addLocalService",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceInfo;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void addLocalService(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.nsd.WifiP2pServiceInfo servInfo, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Register a local service for service discovery. If a local service is registered,
  /// the framework automatically responds to a service discovery request from a peer.
  ///
  ///  The function call immediately returns after sending a request to add a local
  /// service to the framework. The application is notified of a success or failure to
  /// add service through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///
  /// The service information is set through WifiP2pServiceInfo.<br>
  /// or its subclass calls  WifiP2pUpnpServiceInfo\#newInstance or
  ///  WifiP2pDnsSdServiceInfo\#newInstance for a Upnp or Bonjour service
  /// respectively
  ///
  /// The service information can be cleared with calls to
  ///  \#removeLocalService or \#clearLocalServices.
  ///@param c is the channel created at \#initialize
  ///@param servInfo is a local service information.
  ///@param listener for callbacks on success or failure. Can be null.
  void addLocalService(
          WifiP2pManager_Channel c,
          wifip2pserviceinfo_.WifiP2pServiceInfo servInfo,
          WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addLocalService,
          jni.JniType.voidType,
          [c.reference, servInfo.reference, listener.reference]).check();

  static final _id_removeLocalService = jniAccessors.getMethodIDOf(
      _classRef,
      "removeLocalService",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceInfo;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void removeLocalService(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.nsd.WifiP2pServiceInfo servInfo, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Remove a registered local service added with \#addLocalService
  ///
  ///  The function call immediately returns after sending a request to remove a
  /// local service to the framework. The application is notified of a success or failure to
  /// add service through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///@param c is the channel created at \#initialize
  ///@param servInfo is the local service information.
  ///@param listener for callbacks on success or failure. Can be null.
  void removeLocalService(
          WifiP2pManager_Channel c,
          wifip2pserviceinfo_.WifiP2pServiceInfo servInfo,
          WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeLocalService,
          jni.JniType.voidType,
          [c.reference, servInfo.reference, listener.reference]).check();

  static final _id_clearLocalServices = jniAccessors.getMethodIDOf(
      _classRef,
      "clearLocalServices",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void clearLocalServices(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Clear all registered local services of service discovery.
  ///
  ///  The function call immediately returns after sending a request to clear all
  /// local services to the framework. The application is notified of a success or failure to
  /// add service through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///@param c is the channel created at \#initialize
  ///@param listener for callbacks on success or failure. Can be null.
  void clearLocalServices(
          WifiP2pManager_Channel c, WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_clearLocalServices,
          jni.JniType.voidType, [c.reference, listener.reference]).check();

  static final _id_setServiceResponseListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setServiceResponseListener",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$ServiceResponseListener;)V");

  /// from: public void setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener listener)
  ///
  /// Register a callback to be invoked on receiving service discovery response.
  /// Used only for vendor specific protocol right now. For Bonjour or Upnp, use
  /// \#setDnsSdResponseListeners or \#setUpnpServiceResponseListener
  /// respectively.
  ///
  ///  see \#discoverServices for the detail.
  ///@param c is the channel created at \#initialize
  ///@param listener for callbacks on receiving service discovery response.
  void setServiceResponseListener(WifiP2pManager_Channel c,
          WifiP2pManager_ServiceResponseListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setServiceResponseListener,
          jni.JniType.voidType, [c.reference, listener.reference]).check();

  static final _id_setDnsSdResponseListeners = jniAccessors.getMethodIDOf(
      _classRef,
      "setDnsSdResponseListeners",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$DnsSdServiceResponseListener;Landroid/net/wifi/p2p/WifiP2pManager\$DnsSdTxtRecordListener;)V");

  /// from: public void setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener servListener, android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener txtListener)
  ///
  /// Register a callback to be invoked on receiving Bonjour service discovery
  /// response.
  ///
  ///  see \#discoverServices for the detail.
  ///@param c
  ///@param servListener is for listening to a Bonjour service response
  ///@param txtListener is for listening to a Bonjour TXT record response
  void setDnsSdResponseListeners(
          WifiP2pManager_Channel c,
          WifiP2pManager_DnsSdServiceResponseListener servListener,
          WifiP2pManager_DnsSdTxtRecordListener txtListener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setDnsSdResponseListeners,
          jni.JniType.voidType,
          [c.reference, servListener.reference, txtListener.reference]).check();

  static final _id_setUpnpServiceResponseListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setUpnpServiceResponseListener",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$UpnpServiceResponseListener;)V");

  /// from: public void setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener listener)
  ///
  /// Register a callback to be invoked on receiving upnp service discovery
  /// response.
  ///
  ///  see \#discoverServices for the detail.
  ///@param c is the channel created at \#initialize
  ///@param listener for callbacks on receiving service discovery response.
  void setUpnpServiceResponseListener(WifiP2pManager_Channel c,
          WifiP2pManager_UpnpServiceResponseListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setUpnpServiceResponseListener,
          jni.JniType.voidType,
          [c.reference, listener.reference]).check();

  static final _id_discoverServices = jniAccessors.getMethodIDOf(
      _classRef,
      "discoverServices",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void discoverServices(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Initiate service discovery. A discovery process involves scanning for
  /// requested services for the purpose of establishing a connection to a peer
  /// that supports an available service.
  ///
  ///  The function call immediately returns after sending a request to start service
  /// discovery to the framework. The application is notified of a success or failure to initiate
  /// discovery through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///
  ///  The services to be discovered are specified with calls to \#addServiceRequest.
  ///
  /// The application is notified of the response against the service discovery request
  /// through listener callbacks registered by \#setServiceResponseListener or
  /// \#setDnsSdResponseListeners, or \#setUpnpServiceResponseListener.
  ///@param c is the channel created at \#initialize
  ///@param listener for callbacks on success or failure. Can be null.
  void discoverServices(
          WifiP2pManager_Channel c, WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_discoverServices,
          jni.JniType.voidType, [c.reference, listener.reference]).check();

  static final _id_addServiceRequest = jniAccessors.getMethodIDOf(
      _classRef,
      "addServiceRequest",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceRequest;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.nsd.WifiP2pServiceRequest req, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Add a service discovery request.
  ///
  ///  The function call immediately returns after sending a request to add service
  /// discovery request to the framework. The application is notified of a success or failure to
  /// add service through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///
  /// After service discovery request is added, you can initiate service discovery by
  /// \#discoverServices.
  ///
  /// The added service requests can be cleared with calls to
  /// \#removeServiceRequest(Channel, WifiP2pServiceRequest, ActionListener) or
  /// \#clearServiceRequests(Channel, ActionListener).
  ///@param c is the channel created at \#initialize
  ///@param req is the service discovery request.
  ///@param listener for callbacks on success or failure. Can be null.
  void addServiceRequest(
          WifiP2pManager_Channel c,
          wifip2pservicerequest_.WifiP2pServiceRequest req,
          WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addServiceRequest,
          jni.JniType.voidType,
          [c.reference, req.reference, listener.reference]).check();

  static final _id_removeServiceRequest = jniAccessors.getMethodIDOf(
      _classRef,
      "removeServiceRequest",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceRequest;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void removeServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.nsd.WifiP2pServiceRequest req, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Remove a specified service discovery request added with \#addServiceRequest
  ///
  ///  The function call immediately returns after sending a request to remove service
  /// discovery request to the framework. The application is notified of a success or failure to
  /// add service through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///@param c is the channel created at \#initialize
  ///@param req is the service discovery request.
  ///@param listener for callbacks on success or failure. Can be null.
  void removeServiceRequest(
          WifiP2pManager_Channel c,
          wifip2pservicerequest_.WifiP2pServiceRequest req,
          WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_removeServiceRequest,
          jni.JniType.voidType,
          [c.reference, req.reference, listener.reference]).check();

  static final _id_clearServiceRequests = jniAccessors.getMethodIDOf(
      _classRef,
      "clearServiceRequests",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$ActionListener;)V");

  /// from: public void clearServiceRequests(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.ActionListener listener)
  ///
  /// Clear all registered service discovery requests.
  ///
  ///  The function call immediately returns after sending a request to clear all
  /// service discovery requests to the framework. The application is notified of a success
  /// or failure to add service through listener callbacks ActionListener\#onSuccess or
  /// ActionListener\#onFailure.
  ///@param c is the channel created at \#initialize
  ///@param listener for callbacks on success or failure. Can be null.
  void clearServiceRequests(
          WifiP2pManager_Channel c, WifiP2pManager_ActionListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_clearServiceRequests,
          jni.JniType.voidType, [c.reference, listener.reference]).check();

  static final _id_requestPeers = jniAccessors.getMethodIDOf(
      _classRef,
      "requestPeers",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$PeerListListener;)V");

  /// from: public void requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.PeerListListener listener)
  ///
  /// Request the current list of peers.
  ///@param c is the channel created at \#initialize
  ///@param listener for callback when peer list is available. Can be null.
  void requestPeers(
          WifiP2pManager_Channel c, WifiP2pManager_PeerListListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_requestPeers,
          jni.JniType.voidType, [c.reference, listener.reference]).check();

  static final _id_requestConnectionInfo = jniAccessors.getMethodIDOf(
      _classRef,
      "requestConnectionInfo",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$ConnectionInfoListener;)V");

  /// from: public void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener listener)
  ///
  /// Request device connection info.
  ///@param c is the channel created at \#initialize
  ///@param listener for callback when connection info is available. Can be null.
  void requestConnectionInfo(WifiP2pManager_Channel c,
          WifiP2pManager_ConnectionInfoListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_requestConnectionInfo,
          jni.JniType.voidType, [c.reference, listener.reference]).check();

  static final _id_requestGroupInfo = jniAccessors.getMethodIDOf(
      _classRef,
      "requestGroupInfo",
      "(Landroid/net/wifi/p2p/WifiP2pManager\$Channel;Landroid/net/wifi/p2p/WifiP2pManager\$GroupInfoListener;)V");

  /// from: public void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.GroupInfoListener listener)
  ///
  /// Request p2p group info.
  ///@param c is the channel created at \#initialize
  ///@param listener for callback when group info is available. Can be null.
  void requestGroupInfo(WifiP2pManager_Channel c,
          WifiP2pManager_GroupInfoListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_requestGroupInfo,
          jni.JniType.voidType, [c.reference, listener.reference]).check();
}

/// from: android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener
///
/// Interface for callback invocation when upnp service discovery response
/// is received
class WifiP2pManager_UpnpServiceResponseListener extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/net/wifi/p2p/WifiP2pManager\$UpnpServiceResponseListener");
  WifiP2pManager_UpnpServiceResponseListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onUpnpServiceAvailable = jniAccessors.getMethodIDOf(
      _classRef,
      "onUpnpServiceAvailable",
      "(Ljava/util/List;Landroid/net/wifi/p2p/WifiP2pDevice;)V");

  /// from: public abstract void onUpnpServiceAvailable(java.util.List<java.lang.String> uniqueServiceNames, android.net.wifi.p2p.WifiP2pDevice srcDevice)
  ///
  /// The requested upnp service response is available.
  ///
  /// This function is invoked when the specified device or service is found.
  ///@param uniqueServiceNames The list of unique service names.<br>
  /// e.g) uuid:6859dede-8574-59ab-9332-123456789012::urn:schemas-upnp-org:device:
  /// MediaServer:1
  ///@param srcDevice source device.
  void onUpnpServiceAvailable(jni.JniObject uniqueServiceNames,
          wifip2pdevice_.WifiP2pDevice srcDevice) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onUpnpServiceAvailable,
          jni.JniType.voidType,
          [uniqueServiceNames.reference, srcDevice.reference]).check();
}

/// from: android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener
///
/// Interface for callback invocation when service discovery response other than
/// Upnp or Bonjour is received
class WifiP2pManager_ServiceResponseListener extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/net/wifi/p2p/WifiP2pManager\$ServiceResponseListener");
  WifiP2pManager_ServiceResponseListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onServiceAvailable = jniAccessors.getMethodIDOf(_classRef,
      "onServiceAvailable", "(I[BLandroid/net/wifi/p2p/WifiP2pDevice;)V");

  /// from: public abstract void onServiceAvailable(int protocolType, byte[] responseData, android.net.wifi.p2p.WifiP2pDevice srcDevice)
  ///
  /// The requested service response is available.
  ///@param protocolType protocol type. currently only
  /// WifiP2pServiceInfo\#SERVICE_TYPE_VENDOR_SPECIFIC.
  ///@param responseData service discovery response data based on the requested
  ///  service protocol type. The format depends on the service type.
  ///@param srcDevice source device.
  void onServiceAvailable(int protocolType, jni.JniObject responseData,
          wifip2pdevice_.WifiP2pDevice srcDevice) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onServiceAvailable,
          jni.JniType.voidType,
          [protocolType, responseData.reference, srcDevice.reference]).check();
}

/// from: android.net.wifi.p2p.WifiP2pManager$PeerListListener
///
/// Interface for callback invocation when peer list is available
class WifiP2pManager_PeerListListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/net/wifi/p2p/WifiP2pManager\$PeerListListener");
  WifiP2pManager_PeerListListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onPeersAvailable = jniAccessors.getMethodIDOf(_classRef,
      "onPeersAvailable", "(Landroid/net/wifi/p2p/WifiP2pDeviceList;)V");

  /// from: public abstract void onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList peers)
  ///
  /// The requested peer list is available
  ///@param peers List of available peers
  void onPeersAvailable(wifip2pdevicelist_.WifiP2pDeviceList peers) =>
      jniAccessors.callMethodWithArgs(reference, _id_onPeersAvailable,
          jni.JniType.voidType, [peers.reference]).check();
}

/// from: android.net.wifi.p2p.WifiP2pManager$GroupInfoListener
///
/// Interface for callback invocation when group info is available
class WifiP2pManager_GroupInfoListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/net/wifi/p2p/WifiP2pManager\$GroupInfoListener");
  WifiP2pManager_GroupInfoListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onGroupInfoAvailable = jniAccessors.getMethodIDOf(_classRef,
      "onGroupInfoAvailable", "(Landroid/net/wifi/p2p/WifiP2pGroup;)V");

  /// from: public abstract void onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup group)
  ///
  /// The requested p2p group info is available
  ///@param group Wi-Fi p2p group info
  void onGroupInfoAvailable(wifip2pgroup_.WifiP2pGroup group) =>
      jniAccessors.callMethodWithArgs(reference, _id_onGroupInfoAvailable,
          jni.JniType.voidType, [group.reference]).check();
}

/// from: android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener
///
/// Interface for callback invocation when Bonjour TXT record is available
/// for a service
class WifiP2pManager_DnsSdTxtRecordListener extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/net/wifi/p2p/WifiP2pManager\$DnsSdTxtRecordListener");
  WifiP2pManager_DnsSdTxtRecordListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onDnsSdTxtRecordAvailable = jniAccessors.getMethodIDOf(
      _classRef,
      "onDnsSdTxtRecordAvailable",
      "(Ljava/lang/String;Ljava/util/Map;Landroid/net/wifi/p2p/WifiP2pDevice;)V");

  /// from: public abstract void onDnsSdTxtRecordAvailable(java.lang.String fullDomainName, java.util.Map<java.lang.String,java.lang.String> txtRecordMap, android.net.wifi.p2p.WifiP2pDevice srcDevice)
  ///
  /// The requested Bonjour service response is available.
  ///
  /// This function is invoked when the device with the specified full
  /// service domain service returned TXT record.
  ///@param fullDomainName full domain name. <br>
  /// e.g) "MyPrinter._ipp._tcp.local.".
  ///@param txtRecordMap TXT record data as a map of key/value pairs
  ///@param srcDevice source device.
  void onDnsSdTxtRecordAvailable(jni.JniString fullDomainName,
          jni.JniObject txtRecordMap, wifip2pdevice_.WifiP2pDevice srcDevice) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onDnsSdTxtRecordAvailable, jni.JniType.voidType, [
        fullDomainName.reference,
        txtRecordMap.reference,
        srcDevice.reference
      ]).check();
}

/// from: android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener
///
/// Interface for callback invocation when Bonjour service discovery response
/// is received
class WifiP2pManager_DnsSdServiceResponseListener extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/net/wifi/p2p/WifiP2pManager\$DnsSdServiceResponseListener");
  WifiP2pManager_DnsSdServiceResponseListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onDnsSdServiceAvailable = jniAccessors.getMethodIDOf(
      _classRef,
      "onDnsSdServiceAvailable",
      "(Ljava/lang/String;Ljava/lang/String;Landroid/net/wifi/p2p/WifiP2pDevice;)V");

  /// from: public abstract void onDnsSdServiceAvailable(java.lang.String instanceName, java.lang.String registrationType, android.net.wifi.p2p.WifiP2pDevice srcDevice)
  ///
  /// The requested Bonjour service response is available.
  ///
  /// This function is invoked when the device with the specified Bonjour
  /// registration type returned the instance name.
  ///@param instanceName instance name.<br>
  ///  e.g) "MyPrinter".
  ///@param registrationType <br>
  /// e.g) "_ipp._tcp.local."
  ///@param srcDevice source device.
  void onDnsSdServiceAvailable(
          jni.JniString instanceName,
          jni.JniString registrationType,
          wifip2pdevice_.WifiP2pDevice srcDevice) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onDnsSdServiceAvailable, jni.JniType.voidType, [
        instanceName.reference,
        registrationType.reference,
        srcDevice.reference
      ]).check();
}

/// from: android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener
///
/// Interface for callback invocation when connection info is available
class WifiP2pManager_ConnectionInfoListener extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/net/wifi/p2p/WifiP2pManager\$ConnectionInfoListener");
  WifiP2pManager_ConnectionInfoListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onConnectionInfoAvailable = jniAccessors.getMethodIDOf(
      _classRef,
      "onConnectionInfoAvailable",
      "(Landroid/net/wifi/p2p/WifiP2pInfo;)V");

  /// from: public abstract void onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo info)
  ///
  /// The requested connection info is available
  ///@param info Wi-Fi p2p connection info
  void onConnectionInfoAvailable(wifip2pinfo_.WifiP2pInfo info) =>
      jniAccessors.callMethodWithArgs(reference, _id_onConnectionInfoAvailable,
          jni.JniType.voidType, [info.reference]).check();
}

/// from: android.net.wifi.p2p.WifiP2pManager$ChannelListener
///
/// Interface for callback invocation when framework channel is lost
class WifiP2pManager_ChannelListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/net/wifi/p2p/WifiP2pManager\$ChannelListener");
  WifiP2pManager_ChannelListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onChannelDisconnected =
      jniAccessors.getMethodIDOf(_classRef, "onChannelDisconnected", "()V");

  /// from: public abstract void onChannelDisconnected()
  ///
  /// The channel to the framework has been disconnected.
  /// Application could try re-initializing using \#initialize
  void onChannelDisconnected() => jniAccessors.callMethodWithArgs(
      reference, _id_onChannelDisconnected, jni.JniType.voidType, []).check();
}

/// from: android.net.wifi.p2p.WifiP2pManager$Channel
///
/// A channel that connects the application to the Wifi p2p framework.
/// Most p2p operations require a Channel as an argument. An instance of Channel is obtained
/// by doing a call on \#initialize
class WifiP2pManager_Channel extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/wifi/p2p/WifiP2pManager\$Channel");
  WifiP2pManager_Channel.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  ///
  /// Close the current P2P connection and indicate to the P2P service that connections
  /// created by the app can be removed.
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  ///
  /// @hide
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();
}

/// from: android.net.wifi.p2p.WifiP2pManager$ActionListener
///
/// Interface for callback invocation on an application action
class WifiP2pManager_ActionListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/net/wifi/p2p/WifiP2pManager\$ActionListener");
  WifiP2pManager_ActionListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onSuccess =
      jniAccessors.getMethodIDOf(_classRef, "onSuccess", "()V");

  /// from: public abstract void onSuccess()
  ///
  /// The operation succeeded
  void onSuccess() => jniAccessors.callMethodWithArgs(
      reference, _id_onSuccess, jni.JniType.voidType, []).check();

  static final _id_onFailure =
      jniAccessors.getMethodIDOf(_classRef, "onFailure", "(I)V");

  /// from: public abstract void onFailure(int reason)
  ///
  /// The operation failed
  ///@param reason The reason for failure could be one of \#P2P_UNSUPPORTED,
  /// \#ERROR or \#BUSY
  void onFailure(int reason) => jniAccessors.callMethodWithArgs(
      reference, _id_onFailure, jni.JniType.voidType, [reason]).check();
}
