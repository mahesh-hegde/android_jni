// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../../os/Parcel.dart" as parcel_;
import "../../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.p2p.nsd.WifiP2pServiceInfo
///
/// A class for storing service information that is advertised
/// over a Wi-Fi peer-to-peer setup
///@see WifiP2pUpnpServiceInfo
///@see WifiP2pDnsSdServiceInfo
class WifiP2pServiceInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/wifi/p2p/nsd/WifiP2pServiceInfo");
  WifiP2pServiceInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int SERVICE_TYPE_ALL
  ///
  /// All service protocol types.
  static const SERVICE_TYPE_ALL = 0;

  /// from: static public final int SERVICE_TYPE_BONJOUR
  ///
  /// DNS based service discovery protocol.
  static const SERVICE_TYPE_BONJOUR = 1;

  /// from: static public final int SERVICE_TYPE_UPNP
  ///
  /// UPnP protocol.
  static const SERVICE_TYPE_UPNP = 2;

  /// from: static public final int SERVICE_TYPE_VENDOR_SPECIFIC
  ///
  /// Vendor Specific protocol
  static const SERVICE_TYPE_VENDOR_SPECIFIC = 255;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Implement the Parcelable interface {@hide }
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface {@hide }
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
