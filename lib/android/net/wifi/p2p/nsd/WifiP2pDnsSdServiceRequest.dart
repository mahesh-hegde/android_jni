// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "WifiP2pServiceRequest.dart" as wifip2pservicerequest_;
import "../../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest
///
/// A class for creating a Bonjour service discovery request for use with
/// WifiP2pManager\#addServiceRequest and WifiP2pManager\#removeServiceRequest
///
/// {@see WifiP2pManager}
/// {@see WifiP2pServiceRequest}
/// {@see WifiP2pUpnpServiceRequest}
class WifiP2pDnsSdServiceRequest
    extends wifip2pservicerequest_.WifiP2pServiceRequest {
  static final _classRef = jniAccessors
      .getClassOf("android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceRequest");
  WifiP2pDnsSdServiceRequest.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This constructor is only used in newInstance().
  ///@hide
  WifiP2pDnsSdServiceRequest.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_newInstance2 = jniAccessors.getStaticMethodIDOf(_classRef,
      "newInstance", "()Landroid/net/wifi/p2p/nsd/WifiP2pDnsSdServiceRequest;");

  /// from: static public android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a service discovery request to search all Bonjour services.
  ///@return service request for Bonjour.
  static WifiP2pDnsSdServiceRequest newInstance2() =>
      WifiP2pDnsSdServiceRequest.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_newInstance2, jni.JniType.objectType, []).object);

  static final _id_newInstance3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "newInstance",
      "(Ljava/lang/String;)Landroid/net/wifi/p2p/nsd/WifiP2pDnsSdServiceRequest;");

  /// from: static public android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance(java.lang.String serviceType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a service discovery to search for Bonjour services with the specified
  /// service type.
  ///@param serviceType service type. Cannot be null <br>
  ///  "_afpovertcp._tcp."(Apple File Sharing over TCP)<br>
  ///  "_ipp._tcp" (IP Printing over TCP)<br>
  ///  "_http._tcp" (http service)
  ///@return service request for DnsSd.
  static WifiP2pDnsSdServiceRequest newInstance3(jni.JniString serviceType) =>
      WifiP2pDnsSdServiceRequest.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_newInstance3,
          jni.JniType.objectType,
          [serviceType.reference]).object);

  static final _id_newInstance4 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "newInstance",
      "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/wifi/p2p/nsd/WifiP2pDnsSdServiceRequest;");

  /// from: static public android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance(java.lang.String instanceName, java.lang.String serviceType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a service discovery request to get the TXT data from the specified
  /// Bonjour service.
  ///@param instanceName instance name. Cannot be null. <br>
  ///  "MyPrinter"
  ///@param serviceType service type. Cannot be null. <br>
  /// e.g) <br>
  ///  "_afpovertcp._tcp"(Apple File Sharing over TCP)<br>
  ///  "_ipp._tcp" (IP Printing over TCP)<br>
  ///@return service request for Bonjour.
  static WifiP2pDnsSdServiceRequest newInstance4(
          jni.JniString instanceName, jni.JniString serviceType) =>
      WifiP2pDnsSdServiceRequest.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_newInstance4,
          jni.JniType.objectType,
          [instanceName.reference, serviceType.reference]).object);
}
