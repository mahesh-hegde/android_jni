// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../os/Parcelable.dart" as parcelable_;

import "../WpsInfo.dart" as wpsinfo_;

import "../../../os/Parcel.dart" as parcel_;
import "../../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.net.wifi.p2p.WifiP2pConfig
///
/// A class representing a Wi-Fi P2p configuration for setting up a connection
///
/// {@see WifiP2pManager}
class WifiP2pConfig extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/net/wifi/p2p/WifiP2pConfig");
  WifiP2pConfig.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.net.wifi.p2p.WifiP2pConfig> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Implement the Parcelable interface
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_deviceAddress = jniAccessors.getFieldIDOf(
      _classRef, "deviceAddress", "Ljava/lang/String;");

  /// from: public java.lang.String deviceAddress
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The device MAC address uniquely identifies a Wi-Fi p2p device
  jni.JniString get deviceAddress => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_deviceAddress, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String deviceAddress
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The device MAC address uniquely identifies a Wi-Fi p2p device
  set deviceAddress(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_deviceAddress, value.reference);

  static final _id_groupOwnerIntent =
      jniAccessors.getFieldIDOf(_classRef, "groupOwnerIntent", "I");

  /// from: public int groupOwnerIntent
  ///
  /// This is an integer value between 0 and 15 where 0 indicates the least
  /// inclination to be a group owner and 15 indicates the highest inclination
  /// to be a group owner.
  ///
  /// A value of -1 indicates the system can choose an appropriate value.
  int get groupOwnerIntent => jniAccessors
      .getField(reference, _id_groupOwnerIntent, jni.JniType.intType)
      .integer;

  /// from: public int groupOwnerIntent
  ///
  /// This is an integer value between 0 and 15 where 0 indicates the least
  /// inclination to be a group owner and 15 indicates the highest inclination
  /// to be a group owner.
  ///
  /// A value of -1 indicates the system can choose an appropriate value.
  set groupOwnerIntent(int value) =>
      jniEnv.SetIntField(reference, _id_groupOwnerIntent, value);

  static final _id_wps =
      jniAccessors.getFieldIDOf(_classRef, "wps", "Landroid/net/wifi/WpsInfo;");

  /// from: public android.net.wifi.WpsInfo wps
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Wi-Fi Protected Setup information
  wpsinfo_.WpsInfo get wps => wpsinfo_.WpsInfo.fromRef(
      jniAccessors.getField(reference, _id_wps, jni.JniType.objectType).object);

  /// from: public android.net.wifi.WpsInfo wps
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Wi-Fi Protected Setup information
  set wps(wpsinfo_.WpsInfo value) =>
      jniEnv.SetObjectField(reference, _id_wps, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  WifiP2pConfig()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/net/wifi/p2p/WifiP2pConfig;)V");

  /// from: public void <init>(android.net.wifi.p2p.WifiP2pConfig source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// copy constructor
  WifiP2pConfig.ctor1(WifiP2pConfig source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [source.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Implement the Parcelable interface
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
