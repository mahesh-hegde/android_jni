// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Bundle.dart" as bundle_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.speech.tts.SynthesisRequest
///
/// Contains data required by engines to synthesize speech. This data is:
/// <ul>
///   <li>The text to synthesize</li>
///   <li>The synthesis locale, represented as a language, country and a variant.
///   The language is an ISO 639-3 letter language code, and the country is an
///   ISO 3166 alpha 3 code. The variant is not specified.</li>
///   <li>The name of the voice requested for this synthesis. May be empty if
///   the client uses TextToSpeech\#setLanguage instead of
///   TextToSpeech\#setVoice</li>
///   <li>The synthesis speech rate, with 100 being the normal, and
///   higher values representing higher speech rates.</li>
///   <li>The voice pitch, with 100 being the default pitch.</li>
/// </ul>
///
/// Any additional parameters sent to the text to speech service are passed in
/// uninterpreted, see the {@code params} argument in TextToSpeech\#speak
/// and TextToSpeech\#synthesizeToFile.
class SynthesisRequest extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/speech/tts/SynthesisRequest");
  SynthesisRequest.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void <init>(java.lang.String text, android.os.Bundle params)
  /// The returned object must be deleted after use, by calling the `delete` method.
  SynthesisRequest(jni.JniString text, bundle_.Bundle params)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [text.reference, params.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/CharSequence;Landroid/os/Bundle;)V");

  /// from: public void <init>(java.lang.CharSequence text, android.os.Bundle params)
  /// The returned object must be deleted after use, by calling the `delete` method.
  SynthesisRequest.ctor1(jni.JniObject text, bundle_.Bundle params)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [text.reference, params.reference]).object);

  static final _id_getText =
      jniAccessors.getMethodIDOf(_classRef, "getText", "()Ljava/lang/String;");

  /// from: public java.lang.String getText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the text which should be synthesized.
  ///@deprecated As of API level 21, replaced by \#getCharSequenceText.
  jni.JniString getText() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText, jni.JniType.objectType, []).object);

  static final _id_getCharSequenceText = jniAccessors.getMethodIDOf(
      _classRef, "getCharSequenceText", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getCharSequenceText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the text which should be synthesized.
  jni.JniObject getCharSequenceText() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getCharSequenceText, jni.JniType.objectType, []).object);

  static final _id_getVoiceName = jniAccessors.getMethodIDOf(
      _classRef, "getVoiceName", "()Ljava/lang/String;");

  /// from: public java.lang.String getVoiceName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the name of the voice to use.
  jni.JniString getVoiceName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getVoiceName, jni.JniType.objectType, []).object);

  static final _id_getLanguage = jniAccessors.getMethodIDOf(
      _classRef, "getLanguage", "()Ljava/lang/String;");

  /// from: public java.lang.String getLanguage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the ISO 3-letter language code for the language to use.
  jni.JniString getLanguage() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLanguage, jni.JniType.objectType, []).object);

  static final _id_getCountry = jniAccessors.getMethodIDOf(
      _classRef, "getCountry", "()Ljava/lang/String;");

  /// from: public java.lang.String getCountry()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the ISO 3-letter country code for the language to use.
  jni.JniString getCountry() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCountry, jni.JniType.objectType, []).object);

  static final _id_getVariant = jniAccessors.getMethodIDOf(
      _classRef, "getVariant", "()Ljava/lang/String;");

  /// from: public java.lang.String getVariant()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the language variant to use.
  jni.JniString getVariant() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getVariant, jni.JniType.objectType, []).object);

  static final _id_getSpeechRate =
      jniAccessors.getMethodIDOf(_classRef, "getSpeechRate", "()I");

  /// from: public int getSpeechRate()
  ///
  /// Gets the speech rate to use. The normal rate is 100.
  int getSpeechRate() => jniAccessors.callMethodWithArgs(
      reference, _id_getSpeechRate, jni.JniType.intType, []).integer;

  static final _id_getPitch =
      jniAccessors.getMethodIDOf(_classRef, "getPitch", "()I");

  /// from: public int getPitch()
  ///
  /// Gets the pitch to use. The normal pitch is 100.
  int getPitch() => jniAccessors.callMethodWithArgs(
      reference, _id_getPitch, jni.JniType.intType, []).integer;

  static final _id_getParams = jniAccessors.getMethodIDOf(
      _classRef, "getParams", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getParams()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the additional params, if any.
  bundle_.Bundle getParams() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getParams, jni.JniType.objectType, []).object);

  static final _id_getCallerUid =
      jniAccessors.getMethodIDOf(_classRef, "getCallerUid", "()I");

  /// from: public int getCallerUid()
  ///
  /// Gets the request caller Uid.
  int getCallerUid() => jniAccessors.callMethodWithArgs(
      reference, _id_getCallerUid, jni.JniType.intType, []).integer;
}
