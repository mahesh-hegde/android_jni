// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.autofill.FieldClassification
///
/// Represents the <a href="AutofillService.html\#FieldClassification">field classification</a>
/// results for a given field.
class FieldClassification extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/autofill/FieldClassification");
  FieldClassification.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/util/ArrayList;)V");

  /// from: void <init>(java.util.ArrayList<android.service.autofill.FieldClassification.Match> matches)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  FieldClassification(jni.JniObject matches)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [matches.reference]).object);

  static final _id_getMatches =
      jniAccessors.getMethodIDOf(_classRef, "getMatches", "()Ljava/util/List;");

  /// from: public java.util.List<android.service.autofill.FieldClassification.Match> getMatches()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the Match matches with the highest Match\#getScore() scores (sorted in
  /// descending order).
  ///
  /// __Note:__ There's no guarantee of how many matches will be returned. In fact,
  /// the Android System might return just the top match to minimize the impact of field
  /// classification in the device's health.
  ///@return This value will never be {@code null}.
  jni.JniObject getMatches() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMatches, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.service.autofill.FieldClassification$Match
///
/// Represents the score of a UserData entry for the field.
class FieldClassification_Match extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/service/autofill/FieldClassification\$Match");
  FieldClassification_Match.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;F)V");

  /// from: void <init>(java.lang.String categoryId, float score)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  FieldClassification_Match(jni.JniString categoryId, double score)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [categoryId.reference, score]).object);

  static final _id_getCategoryId = jniAccessors.getMethodIDOf(
      _classRef, "getCategoryId", "()Ljava/lang/String;");

  /// from: public java.lang.String getCategoryId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the category id of the UserData entry.
  ///@return This value will never be {@code null}.
  jni.JniString getCategoryId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCategoryId, jni.JniType.objectType, []).object);

  static final _id_getScore =
      jniAccessors.getMethodIDOf(_classRef, "getScore", "()F");

  /// from: public float getScore()
  ///
  /// Gets a classification score for the value of this field compared to the value of the
  /// UserData entry.
  ///
  /// The score is based in a comparison of the field value and the user data entry, and it
  /// ranges from {@code 0.0F} to {@code 1.0F}:
  /// <ul>
  ///   <li>{@code 1.0F} represents a full match ({@code 100%}).
  ///   <li>{@code 0.0F} represents a full mismatch ({@code 0%}).
  ///   <li>Any other value is a partial match.
  /// </ul>
  ///
  /// How the score is calculated depends on the
  /// UserData.Builder\#setFieldClassificationAlgorithm(String, android.os.Bundle) algorithm used.
  double getScore() => jniAccessors.callMethodWithArgs(
      reference, _id_getScore, jni.JniType.floatType, []).float;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
