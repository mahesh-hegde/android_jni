// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "../../widget/RemoteViews.dart" as remoteviews_;

import "Transformation.dart" as transformation_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.autofill.BatchUpdates
///
/// Defines actions to be applied to a RemoteViews template presentation.
///
///
/// It supports 2 types of actions:
///
/// <ol>
///   <li>RemoteViews Actions to be applied to the template.
///   <li>Transformation Transformations to be applied on child views.
/// </ol>
///
/// Typically used on CustomDescription custom descriptions to conditionally display
/// differents views based on user input - see
/// CustomDescription.Builder\#batchUpdate(Validator, BatchUpdates) for more information.
class BatchUpdates extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/autofill/BatchUpdates");
  BatchUpdates.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.service.autofill.BatchUpdates> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/service/autofill/BatchUpdates\$Builder;)V");

  /// from: void <init>(android.service.autofill.BatchUpdates.Builder builder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  BatchUpdates(BatchUpdates_Builder builder)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [builder.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.service.autofill.BatchUpdates$Builder
///
/// Builder for BatchUpdates objects.
class BatchUpdates_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/autofill/BatchUpdates\$Builder");
  BatchUpdates_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BatchUpdates_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_updateTemplate = jniAccessors.getMethodIDOf(
      _classRef,
      "updateTemplate",
      "(Landroid/widget/RemoteViews;)Landroid/service/autofill/BatchUpdates\$Builder;");

  /// from: public android.service.autofill.BatchUpdates.Builder updateTemplate(android.widget.RemoteViews updates)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Applies the {@code updates} in the underlying presentation template.
  ///
  /// __Note:__ The updates are applied before the
  /// \#transformChild(int, Transformation) transformations are applied to the children
  /// views.
  ///
  /// Theme does not work with RemoteViews layout. Avoid hardcoded text color
  /// or background color: Autofill on different platforms may have different themes.
  ///@param updates a RemoteViews with the updated actions to be applied in the
  /// underlying presentation template.
  ///
  /// This value must never be {@code null}.
  ///@return this builder
  ///@throws IllegalArgumentException if {@code condition} is not a class provided
  /// by the Android System.
  BatchUpdates_Builder updateTemplate(remoteviews_.RemoteViews updates) =>
      BatchUpdates_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_updateTemplate,
          jni.JniType.objectType,
          [updates.reference]).object);

  static final _id_transformChild = jniAccessors.getMethodIDOf(
      _classRef,
      "transformChild",
      "(ILandroid/service/autofill/Transformation;)Landroid/service/autofill/BatchUpdates\$Builder;");

  /// from: public android.service.autofill.BatchUpdates.Builder transformChild(int id, android.service.autofill.Transformation transformation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a transformation to replace the value of a child view with the fields in the
  /// screen.
  ///
  /// When multiple transformations are added for the same child view, they are applied
  /// in the same order as added.
  ///
  /// __Note:__ The transformations are applied after the
  /// \#updateTemplate(RemoteViews) updates are applied to the presentation template.
  ///@param id view id of the children view.
  ///@param transformation an implementation provided by the Android System.
  /// This value must never be {@code null}.
  ///@return this builder.
  ///@throws IllegalArgumentException if {@code transformation} is not a class provided
  /// by the Android System.
  BatchUpdates_Builder transformChild(
          int id, transformation_.Transformation transformation) =>
      BatchUpdates_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_transformChild,
          jni.JniType.objectType,
          [id, transformation.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/service/autofill/BatchUpdates;");

  /// from: public android.service.autofill.BatchUpdates build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new BatchUpdates instance.
  ///@throws IllegalStateException if \#build() was already called before or no call
  /// to \#updateTemplate(RemoteViews) or \#transformChild(int, Transformation)
  /// has been made.
  BatchUpdates build() => BatchUpdates.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
