// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "../../os/Bundle.dart" as bundle_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.autofill.FillRequest
///
/// This class represents a request to an autofill service
/// to interpret the screen and provide information to the system which views are
/// interesting for saving and what are the possible ways to fill the inputs on
/// the screen if applicable.
///@see AutofillService\#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback)
class FillRequest extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/autofill/FillRequest");
  FillRequest.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.service.autofill.FillRequest> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int FLAG_MANUAL_REQUEST
  ///
  /// Indicates autofill was explicitly requested by the user.
  ///
  /// Users typically make an explicit request to autofill a screen in two situations:
  /// <ul>
  ///   <li>The app disabled autofill (using View\#setImportantForAutofill(int).
  ///   <li>The service could not figure out how to autofill a screen (but the user knows the
  ///       service has data for that app).
  /// </ul>
  ///
  /// This flag is particularly useful for the second case. For example, the service could offer
  /// a complex UI where the user can map which screen views belong to each user data, or it could
  /// offer a simpler UI where the user picks the data for just the view used to trigger the
  /// request (that would be the view whose
  /// android.app.assist.AssistStructure.ViewNode\#isFocused() method returns {@code true}).
  ///
  /// An explicit autofill request is triggered when the
  /// android.view.autofill.AutofillManager\#requestAutofill(View) or
  /// android.view.autofill.AutofillManager\#requestAutofill(View, int, android.graphics.Rect)
  /// is called. For example, standard android.widget.TextView views show an
  /// {@code AUTOFILL} option in the overflow menu that triggers such request.
  static const FLAG_MANUAL_REQUEST = 1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel parcel)
  /// The returned object must be deleted after use, by calling the `delete` method.
  FillRequest(parcel_.Parcel parcel)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [parcel.reference]).object);

  static final _id_getId =
      jniAccessors.getMethodIDOf(_classRef, "getId", "()I");

  /// from: public int getId()
  ///
  /// Gets the unique id of this request.
  int getId() => jniAccessors.callMethodWithArgs(
      reference, _id_getId, jni.JniType.intType, []).integer;

  static final _id_getFlags =
      jniAccessors.getMethodIDOf(_classRef, "getFlags", "()I");

  /// from: public int getFlags()
  ///
  /// Gets the flags associated with this request.
  ///@see \#FLAG_MANUAL_REQUEST
  ///@return Value is either <code>0</code> or android.service.autofill.FillRequest\#FLAG_MANUAL_REQUEST
  int getFlags() => jniAccessors.callMethodWithArgs(
      reference, _id_getFlags, jni.JniType.intType, []).integer;

  static final _id_getFillContexts = jniAccessors.getMethodIDOf(
      _classRef, "getFillContexts", "()Ljava/util/List;");

  /// from: public java.util.List<android.service.autofill.FillContext> getFillContexts()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the contexts associated with each previous fill request.
  ///@return This value will never be {@code null}.
  jni.JniObject getFillContexts() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFillContexts, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_getClientState = jniAccessors.getMethodIDOf(
      _classRef, "getClientState", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getClientState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the latest client state bundle set by the service in a
  /// FillResponse.Builder\#setClientState(Bundle) fill response.
  ///
  /// __Note:__ Prior to Android android.os.Build.VERSION_CODES\#P, only client state
  /// bundles set by FillResponse.Builder\#setClientState(Bundle) were considered. On
  /// Android android.os.Build.VERSION_CODES\#P and higher, bundles set in the result of
  /// an authenticated request through the
  /// android.view.autofill.AutofillManager\#EXTRA_CLIENT_STATE extra are
  /// also considered (and take precedence when set).
  ///@return The client state.
  ///
  /// This value may be {@code null}.
  bundle_.Bundle getClientState() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getClientState, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}
