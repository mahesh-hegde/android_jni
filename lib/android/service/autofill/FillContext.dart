// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../app/assist/AssistStructure.dart" as assiststructure_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.autofill.FillContext
///
/// This class represents a context for each fill request made via AutofillService\#onFillRequest(FillRequest, CancellationSignal, FillCallback).
/// It contains a snapshot of the UI state, the view ids that were returned by
/// the AutofillService autofill service as both required to trigger a save
/// and optional that can be saved, and the id of the corresponding FillRequest.
///
/// This context allows you to inspect the values for the interesting views
/// in the context they appeared. Also a reference to the corresponding fill
/// request is useful to store meta-data in the client state bundle passed
/// to FillResponse.Builder\#setClientState(Bundle) to avoid interpreting
/// the UI state again while saving.
class FillContext extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/autofill/FillContext");
  FillContext.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.service.autofill.FillContext> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_getRequestId =
      jniAccessors.getMethodIDOf(_classRef, "getRequestId", "()I");

  /// from: public int getRequestId()
  ///
  /// Gets the id of the FillRequest fill request this context
  /// corresponds to. This is useful to associate your custom client
  /// state with every request to avoid reinterpreting the UI when saving
  /// user data.
  ///@return The request id.
  int getRequestId() => jniAccessors.callMethodWithArgs(
      reference, _id_getRequestId, jni.JniType.intType, []).integer;

  static final _id_getStructure = jniAccessors.getMethodIDOf(
      _classRef, "getStructure", "()Landroid/app/assist/AssistStructure;");

  /// from: public android.app.assist.AssistStructure getStructure()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The screen content.
  assiststructure_.AssistStructure getStructure() =>
      assiststructure_.AssistStructure.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getStructure, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}
