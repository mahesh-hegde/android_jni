// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "../../widget/RemoteViews.dart" as remoteviews_;

import "Transformation.dart" as transformation_;

import "Validator.dart" as validator_;

import "BatchUpdates.dart" as batchupdates_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.autofill.CustomDescription
///
/// Defines a custom description for the autofill save UI.
///
/// This is useful when the autofill service needs to show a detailed view of what would be saved;
/// for example, when the screen contains a credit card, it could display a logo of the credit card
/// bank, the last four digits of the credit card number, and its expiration number.
///
/// A custom description is made of 2 parts:
/// <ul>
///   <li>A RemoteViews presentation template containing children views.
///   <li>Transformation Transformations to populate the children views.
/// </ul>
///
/// For the credit card example mentioned above, the (simplified) template would be:
///
/// <pre class="prettyprint">
/// &lt;LinearLayout&gt;
///   &lt;ImageView android:id="@+id/templateccLogo"/&gt;
///   &lt;TextView android:id="@+id/templateCcNumber"/&gt;
///   &lt;TextView android:id="@+id/templateExpDate"/&gt;
/// &lt;/LinearLayout&gt;
/// </pre>
///
/// Which in code translates to:
///
/// <pre class="prettyprint">
///   CustomDescription.Builder buider = new Builder(new RemoteViews(pgkName, R.layout.cc_template);
/// </pre>
///
/// Then the value of each of the 3 children would be changed at runtime based on the the value of
/// the screen fields and the Transformation Transformations:
///
/// <pre class="prettyprint">
/// // Image child - different logo for each bank, based on credit card prefix
/// builder.addChild(R.id.templateccLogo,
///   new ImageTransformation.Builder(ccNumberId)
///     .addOption(Pattern.compile("^4815.*$"), R.drawable.ic_credit_card_logo1)
///     .addOption(Pattern.compile("^1623.*$"), R.drawable.ic_credit_card_logo2)
///     .addOption(Pattern.compile("^42.*$"), R.drawable.ic_credit_card_logo3)
///     .build();
/// // Masked credit card number (as .....LAST_4_DIGITS)
/// builder.addChild(R.id.templateCcNumber, new CharSequenceTransformation
///     .Builder(ccNumberId, Pattern.compile("^.*(\\d\\d\\d\\d)$"), "...$1")
///     .build();
/// // Expiration date as MM / YYYY:
/// builder.addChild(R.id.templateExpDate, new CharSequenceTransformation
///     .Builder(ccExpMonthId, Pattern.compile("^(\\d\\d)$"), "Exp: $1")
///     .addField(ccExpYearId, Pattern.compile("^(\\d\\d)$"), "/$1")
///     .build();
/// </pre>
///
/// See ImageTransformation, CharSequenceTransformation for more info about these
/// transformations.
class CustomDescription extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/autofill/CustomDescription");
  CustomDescription.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.service.autofill.CustomDescription> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.service.autofill.CustomDescription$Builder
///
/// Builder for CustomDescription objects.
class CustomDescription_Builder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/service/autofill/CustomDescription\$Builder");
  CustomDescription_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/widget/RemoteViews;)V");

  /// from: public void <init>(android.widget.RemoteViews parentPresentation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Default constructor.
  ///
  /// __Note:__ If any child view of presentation triggers a
  /// RemoteViews\#setOnClickPendingIntent(int, android.app.PendingIntent) pending intent
  /// on click, such PendingIntent must follow the restrictions below, otherwise
  /// it might not be triggered or the autofill save UI might not be shown when its activity
  /// is finished:
  /// <ul>
  ///   <li>It cannot be created with the PendingIntent\#FLAG_IMMUTABLE flag.
  ///   <li>It must be a PendingIntent for an Activity.
  ///   <li>The activity must call Activity\#finish() when done.
  ///   <li>The activity should not launch other activities.
  /// </ul>
  ///@param parentPresentation template presentation with (optional) children views.
  /// This value must never be {@code null}.
  ///@throws NullPointerException if {@code parentPresentation} is null (on Android
  /// android.os.Build.VERSION_CODES\#P or higher).
  CustomDescription_Builder(remoteviews_.RemoteViews parentPresentation)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [parentPresentation.reference]).object);

  static final _id_addChild = jniAccessors.getMethodIDOf(_classRef, "addChild",
      "(ILandroid/service/autofill/Transformation;)Landroid/service/autofill/CustomDescription\$Builder;");

  /// from: public android.service.autofill.CustomDescription.Builder addChild(int id, android.service.autofill.Transformation transformation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a transformation to replace the value of a child view with the fields in the
  /// screen.
  ///
  /// When multiple transformations are added for the same child view, they will be applied
  /// in the same order as added.
  ///@param id view id of the children view.
  ///@param transformation an implementation provided by the Android System.
  /// This value must never be {@code null}.
  ///@return this builder.
  ///@throws IllegalArgumentException if {@code transformation} is not a class provided
  /// by the Android System.
  CustomDescription_Builder addChild(
          int id, transformation_.Transformation transformation) =>
      CustomDescription_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addChild,
          jni.JniType.objectType,
          [id, transformation.reference]).object);

  static final _id_batchUpdate = jniAccessors.getMethodIDOf(
      _classRef,
      "batchUpdate",
      "(Landroid/service/autofill/Validator;Landroid/service/autofill/BatchUpdates;)Landroid/service/autofill/CustomDescription\$Builder;");

  /// from: public android.service.autofill.CustomDescription.Builder batchUpdate(android.service.autofill.Validator condition, android.service.autofill.BatchUpdates updates)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Updates the RemoteViews presentation template when a condition is satisfied by
  /// applying a series of remote view operations. This allows dynamic customization of the
  /// portion of the save UI that is controlled by the autofill service. Such dynamic
  /// customization is based on the content of target views.
  ///
  /// The updates are applied in the sequence they are added, after the
  /// \#addChild(int, Transformation) transformations are applied to the children
  /// views.
  ///
  /// For example, to make children views visible when fields are not empty:
  ///
  /// <pre class="prettyprint">
  /// RemoteViews template = new RemoteViews(pgkName, R.layout.my_full_template);
  ///
  /// Pattern notEmptyPattern = Pattern.compile(".+");
  /// Validator hasAddress = new RegexValidator(addressAutofillId, notEmptyPattern);
  /// Validator hasCcNumber = new RegexValidator(ccNumberAutofillId, notEmptyPattern);
  ///
  /// RemoteViews addressUpdates = new RemoteViews(pgkName, R.layout.my_full_template)
  /// addressUpdates.setViewVisibility(R.id.address, View.VISIBLE);
  ///
  /// // Make address visible
  /// BatchUpdates addressBatchUpdates = new BatchUpdates.Builder()
  ///     .updateTemplate(addressUpdates)
  ///     .build();
  ///
  /// RemoteViews ccUpdates = new RemoteViews(pgkName, R.layout.my_full_template)
  /// ccUpdates.setViewVisibility(R.id.cc_number, View.VISIBLE);
  ///
  /// // Mask credit card number (as .....LAST_4_DIGITS) and make it visible
  /// BatchUpdates ccBatchUpdates = new BatchUpdates.Builder()
  ///     .updateTemplate(ccUpdates)
  ///     .transformChild(R.id.templateCcNumber, new CharSequenceTransformation
  ///                     .Builder(ccNumberId, Pattern.compile("^.*(\\d\\d\\d\\d)$"), "...$1")
  ///                     .build())
  ///     .build();
  ///
  /// CustomDescription customDescription = new CustomDescription.Builder(template)
  ///     .batchUpdate(hasAddress, addressBatchUpdates)
  ///     .batchUpdate(hasCcNumber, ccBatchUpdates)
  ///     .build();
  /// </pre>
  ///
  /// Another approach is to add a child first, then apply the transformations. Example:
  ///
  /// <pre class="prettyprint">
  /// RemoteViews template = new RemoteViews(pgkName, R.layout.my_base_template);
  ///
  /// RemoteViews addressPresentation = new RemoteViews(pgkName, R.layout.address)
  /// RemoteViews addressUpdates = new RemoteViews(pgkName, R.layout.my_template)
  /// addressUpdates.addView(R.id.parentId, addressPresentation);
  /// BatchUpdates addressBatchUpdates = new BatchUpdates.Builder()
  ///     .updateTemplate(addressUpdates)
  ///     .build();
  ///
  /// RemoteViews ccPresentation = new RemoteViews(pgkName, R.layout.cc)
  /// RemoteViews ccUpdates = new RemoteViews(pgkName, R.layout.my_template)
  /// ccUpdates.addView(R.id.parentId, ccPresentation);
  /// BatchUpdates ccBatchUpdates = new BatchUpdates.Builder()
  ///     .updateTemplate(ccUpdates)
  ///     .transformChild(R.id.templateCcNumber, new CharSequenceTransformation
  ///                     .Builder(ccNumberId, Pattern.compile("^.*(\\d\\d\\d\\d)$"), "...$1")
  ///                     .build())
  ///     .build();
  ///
  /// CustomDescription customDescription = new CustomDescription.Builder(template)
  ///     .batchUpdate(hasAddress, addressBatchUpdates)
  ///     .batchUpdate(hasCcNumber, ccBatchUpdates)
  ///     .build();
  /// </pre>
  ///@param condition condition used to trigger the updates.
  /// This value must never be {@code null}.
  ///@param updates actions to be applied to the
  /// \#CustomDescription.Builder(RemoteViews) template presentation when the condition
  /// is satisfied.
  ///
  /// This value must never be {@code null}.
  ///@return this builder
  ///@throws IllegalArgumentException if {@code condition} is not a class provided
  /// by the Android System.
  CustomDescription_Builder batchUpdate(
          validator_.Validator condition, batchupdates_.BatchUpdates updates) =>
      CustomDescription_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_batchUpdate,
          jni.JniType.objectType,
          [condition.reference, updates.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/service/autofill/CustomDescription;");

  /// from: public android.service.autofill.CustomDescription build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new CustomDescription instance.
  CustomDescription build() =>
      CustomDescription.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
