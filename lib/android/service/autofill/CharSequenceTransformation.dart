// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "../../view/autofill/AutofillId.dart" as autofillid_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.autofill.CharSequenceTransformation
///
/// Replaces a TextView child of a CustomDescription with the contents of one or
/// more regular expressions (regexs).
///
/// When it contains more than one field, the fields that match their regex are added to the
/// overall transformation result.
///
/// For example, a transformation to mask a credit card number contained in just one field would
/// be:
///
/// <pre class="prettyprint">
/// new CharSequenceTransformation
///     .Builder(ccNumberId, Pattern.compile("^.*(\\d\\d\\d\\d)$"), "...$1")
///     .build();
/// </pre>
///
/// But a transformation that generates a {@code Exp: MM / YYYY} credit expiration date from two
/// fields (month and year) would be:
///
/// <pre class="prettyprint">
/// new CharSequenceTransformation
///   .Builder(ccExpMonthId, Pattern.compile("^(\\d\\d)$"), "Exp: $1")
///   .addField(ccExpYearId, Pattern.compile("^(\\d\\d\\d\\d)$"), " / $1");
/// </pre>
class CharSequenceTransformation extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/service/autofill/CharSequenceTransformation");
  CharSequenceTransformation.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.service.autofill.CharSequenceTransformation> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/service/autofill/CharSequenceTransformation\$Builder;)V");

  /// from: void <init>(android.service.autofill.CharSequenceTransformation.Builder builder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CharSequenceTransformation(CharSequenceTransformation_Builder builder)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [builder.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}

/// from: android.service.autofill.CharSequenceTransformation$Builder
///
/// Builder for CharSequenceTransformation objects.
class CharSequenceTransformation_Builder extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/service/autofill/CharSequenceTransformation\$Builder");
  CharSequenceTransformation_Builder.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/view/autofill/AutofillId;Ljava/util/regex/Pattern;Ljava/lang/String;)V");

  /// from: public void <init>(android.view.autofill.AutofillId id, java.util.regex.Pattern regex, java.lang.String subst)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new builder and adds the first transformed contents of a field to the overall
  /// result of this transformation.
  ///@param id id of the screen field.
  /// This value must never be {@code null}.
  ///@param regex regular expression with groups (delimited by {@code (} and {@code (}) that
  /// are used to substitute parts of the value.
  /// This value must never be {@code null}.
  ///@param subst the string that substitutes the matched regex, using {@code $} for
  /// group substitution ({@code $1} for 1st group match, {@code $2} for 2nd, etc).
  ///
  /// This value must never be {@code null}.
  CharSequenceTransformation_Builder(
      autofillid_.AutofillId id, jni.JniObject regex, jni.JniString subst)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [id.reference, regex.reference, subst.reference]).object);

  static final _id_addField = jniAccessors.getMethodIDOf(_classRef, "addField",
      "(Landroid/view/autofill/AutofillId;Ljava/util/regex/Pattern;Ljava/lang/String;)Landroid/service/autofill/CharSequenceTransformation\$Builder;");

  /// from: public android.service.autofill.CharSequenceTransformation.Builder addField(android.view.autofill.AutofillId id, java.util.regex.Pattern regex, java.lang.String subst)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds the transformed contents of a field to the overall result of this transformation.
  ///@param id id of the screen field.
  /// This value must never be {@code null}.
  ///@param regex regular expression with groups (delimited by {@code (} and {@code (}) that
  /// are used to substitute parts of the value.
  /// This value must never be {@code null}.
  ///@param subst the string that substitutes the matched regex, using {@code $} for
  /// group substitution ({@code $1} for 1st group match, {@code $2} for 2nd, etc).
  ///
  /// This value must never be {@code null}.
  ///@return this builder.
  CharSequenceTransformation_Builder addField(autofillid_.AutofillId id,
          jni.JniObject regex, jni.JniString subst) =>
      CharSequenceTransformation_Builder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_addField, jni.JniType.objectType,
              [id.reference, regex.reference, subst.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(_classRef, "build",
      "()Landroid/service/autofill/CharSequenceTransformation;");

  /// from: public android.service.autofill.CharSequenceTransformation build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new CharSequenceTransformation instance.
  CharSequenceTransformation build() =>
      CharSequenceTransformation.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
