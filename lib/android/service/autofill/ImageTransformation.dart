// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "../../view/autofill/AutofillId.dart" as autofillid_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.autofill.ImageTransformation
///
/// Replaces the content of a child ImageView of a
/// RemoteViews presentation template with the first image that matches a regular expression
/// (regex).
///
/// Typically used to display credit card logos. Example:
///
/// <pre class="prettyprint">
///   new ImageTransformation.Builder(ccNumberId, Pattern.compile("^4815.*$"),
///                                   R.drawable.ic_credit_card_logo1, "Brand 1")
///     .addOption(Pattern.compile("^1623.*$"), R.drawable.ic_credit_card_logo2, "Brand 2")
///     .addOption(Pattern.compile("^42.*$"), R.drawable.ic_credit_card_logo3, "Brand 3")
///     .build();
/// </pre>
///
/// There is no imposed limit in the number of options, but keep in mind that regexs are
/// expensive to evaluate, so use the minimum number of regexs and add the most common first
/// (for example, if this is a tranformation for a credit card logo and the most common credit card
/// issuers are banks X and Y, add the regexes that resolves these 2 banks first).
class ImageTransformation extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/autofill/ImageTransformation");
  ImageTransformation.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.service.autofill.ImageTransformation> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}

/// from: android.service.autofill.ImageTransformation$Builder
///
/// Builder for ImageTransformation objects.
class ImageTransformation_Builder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/service/autofill/ImageTransformation\$Builder");
  ImageTransformation_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/view/autofill/AutofillId;Ljava/util/regex/Pattern;I)V");

  /// from: public void <init>(android.view.autofill.AutofillId id, java.util.regex.Pattern regex, int resId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new builder for a autofill id and add a first option.
  ///@param id id of the screen field that will be used to evaluate whether the image should
  /// be used.
  /// This value must never be {@code null}.
  ///@param regex regular expression defining what should be matched to use this image.
  /// This value must never be {@code null}.
  ///@param resId resource id of the image (in the autofill service's package). The
  /// RemoteViews presentation must contain a ImageView child with that id.
  ///@deprecated use
  /// \#ImageTransformation.Builder(AutofillId, Pattern, int, CharSequence) instead.
  ImageTransformation_Builder(
      autofillid_.AutofillId id, jni.JniObject regex, int resId)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [id.reference, regex.reference, resId]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/view/autofill/AutofillId;Ljava/util/regex/Pattern;ILjava/lang/CharSequence;)V");

  /// from: public void <init>(android.view.autofill.AutofillId id, java.util.regex.Pattern regex, int resId, java.lang.CharSequence contentDescription)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new builder for a autofill id and add a first option.
  ///@param id id of the screen field that will be used to evaluate whether the image should
  /// be used.
  /// This value must never be {@code null}.
  ///@param regex regular expression defining what should be matched to use this image.
  /// This value must never be {@code null}.
  ///@param resId resource id of the image (in the autofill service's package). The
  /// RemoteViews presentation must contain a ImageView child with that id.
  ///@param contentDescription content description to be applied in the child view.
  ///
  /// This value must never be {@code null}.
  ImageTransformation_Builder.ctor1(autofillid_.AutofillId id,
      jni.JniObject regex, int resId, jni.JniObject contentDescription)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          id.reference,
          regex.reference,
          resId,
          contentDescription.reference
        ]).object);

  static final _id_addOption = jniAccessors.getMethodIDOf(
      _classRef,
      "addOption",
      "(Ljava/util/regex/Pattern;I)Landroid/service/autofill/ImageTransformation\$Builder;");

  /// from: public android.service.autofill.ImageTransformation.Builder addOption(java.util.regex.Pattern regex, int resId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds an option to replace the child view with a different image when the regex matches.
  ///@param regex regular expression defining what should be matched to use this image.
  /// This value must never be {@code null}.
  ///@param resId resource id of the image (in the autofill service's package). The
  /// RemoteViews presentation must contain a ImageView child with that id.
  ///@return this build
  ///@deprecated use \#addOption(Pattern, int, CharSequence) instead.
  ImageTransformation_Builder addOption(jni.JniObject regex, int resId) =>
      ImageTransformation_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addOption,
          jni.JniType.objectType,
          [regex.reference, resId]).object);

  static final _id_addOption1 = jniAccessors.getMethodIDOf(
      _classRef,
      "addOption",
      "(Ljava/util/regex/Pattern;ILjava/lang/CharSequence;)Landroid/service/autofill/ImageTransformation\$Builder;");

  /// from: public android.service.autofill.ImageTransformation.Builder addOption(java.util.regex.Pattern regex, int resId, java.lang.CharSequence contentDescription)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds an option to replace the child view with a different image and content description
  /// when the regex matches.
  ///@param regex regular expression defining what should be matched to use this image.
  /// This value must never be {@code null}.
  ///@param resId resource id of the image (in the autofill service's package). The
  /// RemoteViews presentation must contain a ImageView child with that id.
  ///@param contentDescription content description to be applied in the child view.
  ///
  /// This value must never be {@code null}.
  ///@return this build
  ImageTransformation_Builder addOption1(
          jni.JniObject regex, int resId, jni.JniObject contentDescription) =>
      ImageTransformation_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addOption1,
          jni.JniType.objectType,
          [regex.reference, resId, contentDescription.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/service/autofill/ImageTransformation;");

  /// from: public android.service.autofill.ImageTransformation build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new ImageTransformation instance.
  ImageTransformation build() =>
      ImageTransformation.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
