// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "../../widget/RemoteViews.dart" as remoteviews_;

import "../../content/IntentSender.dart" as intentsender_;

import "../../view/autofill/AutofillId.dart" as autofillid_;

import "../../view/autofill/AutofillValue.dart" as autofillvalue_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.autofill.Dataset
///
/// A dataset object represents a group of fields (key / value pairs) used to autofill parts of a
/// screen.
///
/// <a name="BasicUsage"></a>
/// <h3>Basic usage</h3>
///
/// In its simplest form, a dataset contains one or more fields (comprised of
/// an AutofillId id, a AutofillValue value, and an optional filter
/// Pattern regex); and one or more RemoteViews presentations for these fields
/// (each field could have its own RemoteViews presentation, or use the default
/// RemoteViews presentation associated with the whole dataset).
///
/// When an autofill service returns datasets in a FillResponse
/// and the screen input is focused in a view that is present in at least one of these datasets,
/// the Android System displays a UI containing the RemoteViews presentation of
/// all datasets pairs that have that view's AutofillId. Then, when the user selects a
/// dataset from the UI, all views in that dataset are autofilled.
///
/// <a name="Authentication"></a>
/// <h3>Dataset authentication</h3>
///
/// In a more sophisticated form, the dataset values can be protected until the user authenticates
/// the dataset&mdash;in that case, when a dataset is selected by the user, the Android System
/// launches an intent set by the service to "unlock" the dataset.
///
/// For example, when a data set contains credit card information (such as number,
/// expiration date, and verification code), you could provide a dataset presentation saying
/// "Tap to authenticate". Then when the user taps that option, you would launch an activity asking
/// the user to enter the credit card code, and if the user enters a valid code, you could then
/// "unlock" the dataset.
///
/// You can also use authenticated datasets to offer an interactive UI for the user. For example,
/// if the activity being autofilled is an account creation screen, you could use an authenticated
/// dataset to automatically generate a random password for the user.
///
/// See Dataset.Builder\#setAuthentication(IntentSender) for more details about the dataset
/// authentication mechanism.
///
/// <a name="Filtering"></a>
/// <h3>Filtering</h3>
/// The autofill UI automatically changes which values are shown based on value of the view
/// anchoring it, following the rules below:
/// <ol>
///   <li>If the view's android.view.View\#getAutofillValue() autofill value is not
/// AutofillValue\#isText() text or is empty, all datasets are shown.
///   <li>Datasets that have a filter regex (set through
/// Dataset.Builder\#setValue(AutofillId, AutofillValue, Pattern) or
/// Dataset.Builder\#setValue(AutofillId, AutofillValue, Pattern, RemoteViews)) and whose
/// regex matches the view's text value converted to lower case are shown.
///   <li>Datasets that do not require authentication, have a field value that is
/// AutofillValue\#isText() text and whose AutofillValue\#getTextValue() value starts
/// with the lower case value of the view's text are shown.
///   <li>All other datasets are hidden.
/// </ol>
///
/// <a name="MoreInfo"></a>
/// <h3>More information</h3>
/// See android.service.autofill.AutofillService for more information and examples about
/// the role of datasets in the autofill workflow.
class Dataset extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/autofill/Dataset");
  Dataset.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.service.autofill.Dataset> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/service/autofill/Dataset\$Builder;)V");

  /// from: void <init>(android.service.autofill.Dataset.Builder builder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Dataset(Dataset_Builder builder)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [builder.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}

/// from: android.service.autofill.Dataset$Builder
///
/// A builder for Dataset objects. You must provide at least
/// one value for a field or set an authentication intent.
class Dataset_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/autofill/Dataset\$Builder");
  Dataset_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/widget/RemoteViews;)V");

  /// from: public void <init>(android.widget.RemoteViews presentation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new builder.
  ///@param presentation The presentation used to visualize this dataset.
  ///
  /// This value must never be {@code null}.
  Dataset_Builder(remoteviews_.RemoteViews presentation)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [presentation.reference]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new builder for a dataset where each field will be visualized independently.
  ///
  /// When using this constructor, fields must be set through
  /// \#setValue(AutofillId, AutofillValue, RemoteViews) or
  /// \#setValue(AutofillId, AutofillValue, Pattern, RemoteViews).
  Dataset_Builder.ctor1()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, []).object);

  static final _id_setAuthentication = jniAccessors.getMethodIDOf(
      _classRef,
      "setAuthentication",
      "(Landroid/content/IntentSender;)Landroid/service/autofill/Dataset\$Builder;");

  /// from: public android.service.autofill.Dataset.Builder setAuthentication(android.content.IntentSender authentication)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Triggers a custom UI before before autofilling the screen with the contents of this
  /// dataset.
  ///
  /// __Note:__ Although the name of this method suggests that it should be used just for
  /// authentication flow, it can be used for other advanced flows; see AutofillService
  /// for examples.
  ///
  /// This method is called when you need to provide an authentication
  /// UI for the data set. For example, when a data set contains credit card information
  /// (such as number, expiration date, and verification code), you can display UI
  /// asking for the verification code before filing in the data. Even if the
  /// data set is completely populated the system will launch the specified authentication
  /// intent and will need your approval to fill it in. Since the data set is "locked"
  /// until the user authenticates it, typically this data set name is masked
  /// (for example, "VISA....1234"). Typically you would want to store the data set
  /// labels non-encrypted and the actual sensitive data encrypted and not in memory.
  /// This allows showing the labels in the UI while involving the user if one of
  /// the items with these labels is chosen. Note that if you use sensitive data as
  /// a label, for example an email address, then it should also be encrypted.
  ///
  ///
  /// When a user triggers autofill, the system launches the provided intent
  /// whose extras will have the android.view.autofill.AutofillManager\#EXTRA_ASSIST_STRUCTURE screen content,
  /// and your android.view.autofill.AutofillManager\#EXTRA_CLIENT_STATE client
  /// state. Once you complete your authentication flow you should set the activity
  /// result to android.app.Activity\#RESULT_OK and provide the fully populated
  /// Dataset dataset or a fully-populated FillResponse response by
  /// setting it to the android.view.autofill.AutofillManager\#EXTRA_AUTHENTICATION_RESULT extra. If you
  /// provide a dataset in the result, it will replace the authenticated dataset and
  /// will be immediately filled in. If you provide a response, it will replace the
  /// current response and the UI will be refreshed. For example, if you provided
  /// credit card information without the CVV for the data set in the FillResponse response then the returned data set should contain the CVV entry.
  ///
  /// __Note:__ Do not make the provided pending intent
  /// immutable by using android.app.PendingIntent\#FLAG_IMMUTABLE as the
  /// platform needs to fill in the authentication arguments.
  ///@param authentication Intent to an activity with your authentication flow.
  /// This value may be {@code null}.
  ///@return this builder.
  ///
  /// This value will never be {@code null}.
  ///@see android.app.PendingIntent
  Dataset_Builder setAuthentication(
          intentsender_.IntentSender authentication) =>
      Dataset_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAuthentication,
          jni.JniType.objectType,
          [authentication.reference]).object);

  static final _id_setId = jniAccessors.getMethodIDOf(_classRef, "setId",
      "(Ljava/lang/String;)Landroid/service/autofill/Dataset\$Builder;");

  /// from: public android.service.autofill.Dataset.Builder setId(java.lang.String id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the id for the dataset so its usage can be tracked.
  ///
  /// Dataset usage can be tracked for 2 purposes:
  ///
  /// <ul>
  ///   <li>For statistical purposes, the service can call
  /// AutofillService\#getFillEventHistory() when handling AutofillService\#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback)
  /// calls.
  ///   <li>For normal autofill workflow, the service can call
  ///   SaveRequest\#getDatasetIds() when handling
  ///   AutofillService\#onSaveRequest(SaveRequest, SaveCallback) calls.
  /// </ul>
  ///@param id id for this dataset or {@code null} to unset.
  ///
  /// This value may be {@code null}.
  ///@return this builder.
  Dataset_Builder setId(jni.JniString id) =>
      Dataset_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setId, jni.JniType.objectType, [id.reference]).object);

  static final _id_setValue = jniAccessors.getMethodIDOf(_classRef, "setValue",
      "(Landroid/view/autofill/AutofillId;Landroid/view/autofill/AutofillValue;)Landroid/service/autofill/Dataset\$Builder;");

  /// from: public android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId id, android.view.autofill.AutofillValue value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the value of a field.
  ///
  /// __Note:__ Prior to Android android.os.Build.VERSION_CODES\#P, this method would
  /// throw an IllegalStateException if this builder was constructed without a
  /// RemoteViews presentation. Android android.os.Build.VERSION_CODES\#P and
  /// higher removed this restriction because datasets used as an
  /// android.view.autofill.AutofillManager\#EXTRA_AUTHENTICATION_RESULT authentication result do not need a presentation. But if you don't set the presentation
  /// in the constructor in a dataset that is meant to be shown to the user, the autofill UI
  /// for this field will not be displayed.
  ///
  /// __Note:__ On Android android.os.Build.VERSION_CODES\#P and
  /// higher, datasets that require authentication can be also be filtered by passing a
  /// AutofillValue\#forText(CharSequence) text value as the {@code value} parameter.
  ///@param id id returned by android.app.assist.AssistStructure.ViewNode\#getAutofillId().
  /// This value must never be {@code null}.
  ///@param value value to be autofilled. Pass {@code null} if you do not have the value
  ///        but the target view is a logical part of the dataset. For example, if
  ///        the dataset needs authentication and you have no access to the value.
  /// This value may be {@code null}.
  ///@return this builder.
  Dataset_Builder setValue(
          autofillid_.AutofillId id, autofillvalue_.AutofillValue value) =>
      Dataset_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setValue,
          jni.JniType.objectType,
          [id.reference, value.reference]).object);

  static final _id_setValue1 = jniAccessors.getMethodIDOf(_classRef, "setValue",
      "(Landroid/view/autofill/AutofillId;Landroid/view/autofill/AutofillValue;Landroid/widget/RemoteViews;)Landroid/service/autofill/Dataset\$Builder;");

  /// from: public android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId id, android.view.autofill.AutofillValue value, android.widget.RemoteViews presentation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the value of a field, using a custom RemoteViews presentation to
  /// visualize it.
  ///
  /// __Note:__ On Android android.os.Build.VERSION_CODES\#P and
  /// higher, datasets that require authentication can be also be filtered by passing a
  /// AutofillValue\#forText(CharSequence) text value as the  {@code value} parameter.
  ///
  /// Theme does not work with RemoteViews layout. Avoid hardcoded text color
  /// or background color: Autofill on different platforms may have different themes.
  ///@param id id returned by android.app.assist.AssistStructure.ViewNode\#getAutofillId().
  /// This value must never be {@code null}.
  ///@param value the value to be autofilled. Pass {@code null} if you do not have the value
  ///        but the target view is a logical part of the dataset. For example, if
  ///        the dataset needs authentication and you have no access to the value.
  /// This value may be {@code null}.
  ///@param presentation the presentation used to visualize this field.
  /// This value must never be {@code null}.
  ///@return this builder.
  Dataset_Builder setValue1(
          autofillid_.AutofillId id,
          autofillvalue_.AutofillValue value,
          remoteviews_.RemoteViews presentation) =>
      Dataset_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setValue1,
          jni.JniType.objectType,
          [id.reference, value.reference, presentation.reference]).object);

  static final _id_setValue2 = jniAccessors.getMethodIDOf(_classRef, "setValue",
      "(Landroid/view/autofill/AutofillId;Landroid/view/autofill/AutofillValue;Ljava/util/regex/Pattern;)Landroid/service/autofill/Dataset\$Builder;");

  /// from: public android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId id, android.view.autofill.AutofillValue value, java.util.regex.Pattern filter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the value of a field using an <a href="\#Filtering">explicit filter</a>.
  ///
  /// This method is typically used when the dataset requires authentication and the service
  /// does not know its value but wants to hide the dataset after the user enters a minimum
  /// number of characters. For example, if the dataset represents a credit card number and the
  /// service does not want to show the "Tap to authenticate" message until the user tapped
  /// 4 digits, in which case the filter would be {@code Pattern.compile("\\d.{4,}")}.
  ///
  /// __Note:__ If the dataset requires authentication but the service knows its text
  /// value it's easier to filter by calling \#setValue(AutofillId, AutofillValue) and
  /// use the value to filter.
  ///@param id id returned by android.app.assist.AssistStructure.ViewNode\#getAutofillId().
  /// This value must never be {@code null}.
  ///@param value the value to be autofilled. Pass {@code null} if you do not have the value
  ///        but the target view is a logical part of the dataset. For example, if
  ///        the dataset needs authentication and you have no access to the value.
  /// This value may be {@code null}.
  ///@param filter regex used to determine if the dataset should be shown in the autofill UI;
  ///        when {@code null}, it disables filtering on that dataset (this is the recommended
  ///        approach when {@code value} is not {@code null} and field contains sensitive data
  ///        such as passwords).
  ///
  /// This value may be {@code null}.
  ///@return this builder.
  ///@throws IllegalStateException if the builder was constructed without a
  ///         RemoteViews presentation.
  Dataset_Builder setValue2(autofillid_.AutofillId id,
          autofillvalue_.AutofillValue value, jni.JniObject filter) =>
      Dataset_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setValue2,
          jni.JniType.objectType,
          [id.reference, value.reference, filter.reference]).object);

  static final _id_setValue3 = jniAccessors.getMethodIDOf(_classRef, "setValue",
      "(Landroid/view/autofill/AutofillId;Landroid/view/autofill/AutofillValue;Ljava/util/regex/Pattern;Landroid/widget/RemoteViews;)Landroid/service/autofill/Dataset\$Builder;");

  /// from: public android.service.autofill.Dataset.Builder setValue(android.view.autofill.AutofillId id, android.view.autofill.AutofillValue value, java.util.regex.Pattern filter, android.widget.RemoteViews presentation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the value of a field, using a custom RemoteViews presentation to
  /// visualize it and a <a href="\#Filtering">explicit filter</a>.
  ///
  /// This method is typically used when the dataset requires authentication and the service
  /// does not know its value but wants to hide the dataset after the user enters a minimum
  /// number of characters. For example, if the dataset represents a credit card number and the
  /// service does not want to show the "Tap to authenticate" message until the user tapped
  /// 4 digits, in which case the filter would be {@code Pattern.compile("\\d.{4,}")}.
  ///
  /// __Note:__ If the dataset requires authentication but the service knows its text
  /// value it's easier to filter by calling
  /// \#setValue(AutofillId, AutofillValue, RemoteViews) and using the value to filter.
  ///@param id id returned by android.app.assist.AssistStructure.ViewNode\#getAutofillId().
  /// This value must never be {@code null}.
  ///@param value the value to be autofilled. Pass {@code null} if you do not have the value
  ///        but the target view is a logical part of the dataset. For example, if
  ///        the dataset needs authentication and you have no access to the value.
  /// This value may be {@code null}.
  ///@param filter regex used to determine if the dataset should be shown in the autofill UI;
  ///        when {@code null}, it disables filtering on that dataset (this is the recommended
  ///        approach when {@code value} is not {@code null} and field contains sensitive data
  ///        such as passwords).
  /// This value may be {@code null}.
  ///@param presentation the presentation used to visualize this field.
  ///
  /// This value must never be {@code null}.
  ///@return this builder.
  Dataset_Builder setValue3(
          autofillid_.AutofillId id,
          autofillvalue_.AutofillValue value,
          jni.JniObject filter,
          remoteviews_.RemoteViews presentation) =>
      Dataset_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setValue3, jni.JniType.objectType, [
        id.reference,
        value.reference,
        filter.reference,
        presentation.reference
      ]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/service/autofill/Dataset;");

  /// from: public android.service.autofill.Dataset build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new Dataset instance.
  ///
  /// You should not interact with this builder once this method is called.
  ///@throws IllegalStateException if no field was set (through
  /// \#setValue(AutofillId, AutofillValue) or
  /// \#setValue(AutofillId, AutofillValue, RemoteViews)).
  ///@return The built dataset.
  ///
  /// This value will never be {@code null}.
  Dataset build() => Dataset.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
