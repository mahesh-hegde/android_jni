// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Bundle.dart" as bundle_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.autofill.FillEventHistory
///
/// Describes what happened after the last
/// AutofillService\#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback)
/// call.
///
/// This history is typically used to keep track of previous user actions to optimize further
/// requests. For example, the service might return email addresses in alphabetical order by
/// default, but change that order based on the address the user picked on previous requests.
///
/// The history is not persisted over reboots, and it's cleared every time the service
/// replies to a
/// AutofillService\#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback)
/// by calling FillCallback\#onSuccess(FillResponse) or
/// FillCallback\#onFailure(CharSequence) (if the service doesn't call any of these methods,
/// the history will clear out after some pre-defined time).
class FillEventHistory extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/autofill/FillEventHistory");
  FillEventHistory.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.service.autofill.FillEventHistory> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_getClientState = jniAccessors.getMethodIDOf(
      _classRef, "getClientState", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getClientState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the client state set in the previous FillResponse.
  ///
  /// __Note: __the state is associated with the app that was autofilled in the previous
  /// AutofillService\#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback)
  /// , which is not necessary the same app being autofilled now.
  ///@deprecated use \#getEvents() then Event\#getClientState() instead.
  ///@return This value may be {@code null}.
  bundle_.Bundle getClientState() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getClientState, jni.JniType.objectType, []).object);

  static final _id_getEvents =
      jniAccessors.getMethodIDOf(_classRef, "getEvents", "()Ljava/util/List;");

  /// from: public java.util.List<android.service.autofill.FillEventHistory.Event> getEvents()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the events occurred after the latest call to
  /// FillCallback\#onSuccess(FillResponse).
  ///@return The list of events or {@code null} if non occurred.
  jni.JniObject getEvents() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getEvents, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}

/// from: android.service.autofill.FillEventHistory$Event
///
/// Description of an event that occured after the latest call to
/// FillCallback\#onSuccess(FillResponse).
class FillEventHistory_Event extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/service/autofill/FillEventHistory\$Event");
  FillEventHistory_Event.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int TYPE_AUTHENTICATION_SELECTED
  ///
  /// A FillResponse.Builder\#setAuthentication(android.view.autofill.AutofillId[],
  /// IntentSender, android.widget.RemoteViews) fill response authentication was selected.
  static const TYPE_AUTHENTICATION_SELECTED = 2;

  /// from: static public final int TYPE_CONTEXT_COMMITTED
  ///
  /// A committed autofill context for which the autofill service provided datasets.
  ///
  /// This event is useful to track:
  /// <ul>
  ///   <li>Which datasets (if any) were selected by the user
  ///       (\#getSelectedDatasetIds()).
  ///   <li>Which datasets (if any) were NOT selected by the user
  ///       (\#getIgnoredDatasetIds()).
  ///   <li>Which fields in the selected datasets were changed by the user after the dataset
  ///       was selected (\#getChangedFields().
  ///   <li>Which fields match the UserData set by the service.
  /// </ul>
  ///
  /// __Note: __This event is only generated when:
  /// <ul>
  ///   <li>The autofill context is committed.
  ///   <li>The service provides at least one dataset in the
  ///       FillResponse fill responses associated with the context.
  ///   <li>The last FillResponse fill responses associated with the context has the
  ///       FillResponse\#FLAG_TRACK_CONTEXT_COMMITED flag.
  /// </ul>
  ///
  /// See android.view.autofill.AutofillManager for more information about autofill
  /// contexts.
  static const TYPE_CONTEXT_COMMITTED = 4;

  /// from: static public final int TYPE_DATASET_AUTHENTICATION_SELECTED
  ///
  /// A Dataset.Builder\#setAuthentication(IntentSender) dataset authentication was
  /// selected. The dataset authenticated can be read from \#getDatasetId().
  static const TYPE_DATASET_AUTHENTICATION_SELECTED = 1;

  /// from: static public final int TYPE_DATASET_SELECTED
  ///
  /// A dataset was selected. The dataset selected can be read from \#getDatasetId().
  ///
  /// __Note: __on Android android.os.Build.VERSION_CODES\#O, this event was also
  /// incorrectly reported after a
  /// Dataset.Builder\#setAuthentication(IntentSender) dataset authentication was
  /// selected and the service returned a dataset in the
  /// AutofillManager\#EXTRA_AUTHENTICATION_RESULT of the activity launched from that
  /// IntentSender. This behavior was fixed on Android
  /// android.os.Build.VERSION_CODES\#O_MR1.
  static const TYPE_DATASET_SELECTED = 0;

  /// from: static public final int TYPE_SAVE_SHOWN
  ///
  /// A save UI was shown.
  static const TYPE_SAVE_SHOWN = 3;

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public int getType()
  ///
  /// Returns the type of the event.
  ///@return The type of the event
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_getDatasetId = jniAccessors.getMethodIDOf(
      _classRef, "getDatasetId", "()Ljava/lang/String;");

  /// from: public java.lang.String getDatasetId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the id of dataset the id was on.
  ///@return The id of dataset, or {@code null} the event is not associated with a dataset.
  jni.JniString getDatasetId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDatasetId, jni.JniType.objectType, []).object);

  static final _id_getClientState = jniAccessors.getMethodIDOf(
      _classRef, "getClientState", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getClientState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the client state from the FillResponse used to generate this event.
  ///
  /// __Note: __the state is associated with the app that was autofilled in the previous
  /// AutofillService\#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback),
  /// which is not necessary the same app being autofilled now.
  ///@return This value may be {@code null}.
  bundle_.Bundle getClientState() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getClientState, jni.JniType.objectType, []).object);

  static final _id_getSelectedDatasetIds = jniAccessors.getMethodIDOf(
      _classRef, "getSelectedDatasetIds", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.String> getSelectedDatasetIds()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns which datasets were selected by the user.
  ///
  /// __Note: __Only set on events of type \#TYPE_CONTEXT_COMMITTED.
  ///@return This value will never be {@code null}.
  jni.JniObject getSelectedDatasetIds() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSelectedDatasetIds, jni.JniType.objectType, []).object);

  static final _id_getIgnoredDatasetIds = jniAccessors.getMethodIDOf(
      _classRef, "getIgnoredDatasetIds", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.String> getIgnoredDatasetIds()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns which datasets were NOT selected by the user.
  ///
  /// __Note: __Only set on events of type \#TYPE_CONTEXT_COMMITTED.
  ///@return This value will never be {@code null}.
  jni.JniObject getIgnoredDatasetIds() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getIgnoredDatasetIds, jni.JniType.objectType, []).object);

  static final _id_getChangedFields = jniAccessors.getMethodIDOf(
      _classRef, "getChangedFields", "()Ljava/util/Map;");

  /// from: public java.util.Map<android.view.autofill.AutofillId,java.lang.String> getChangedFields()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns which fields in the selected datasets were changed by the user after the dataset
  /// was selected.
  ///
  /// For example, server provides:
  ///
  /// <pre class="prettyprint">
  ///  FillResponse response = new FillResponse.Builder()
  ///      .addDataset(new Dataset.Builder(presentation1)
  ///          .setId("4815")
  ///          .setValue(usernameId, AutofillValue.forText("MrPlow"))
  ///          .build())
  ///      .addDataset(new Dataset.Builder(presentation2)
  ///          .setId("162342")
  ///          .setValue(passwordId, AutofillValue.forText("D'OH"))
  ///          .build())
  ///      .build();
  /// </pre>
  ///
  /// User select both datasets (for username and password) but after the fields are
  /// autofilled, user changes them to:
  ///
  /// <pre class="prettyprint">
  ///   username = "ElBarto";
  ///   password = "AyCaramba";
  /// </pre>
  ///
  /// Then the result is the following map:
  ///
  /// <pre class="prettyprint">
  ///   usernameId => "4815"
  ///   passwordId => "162342"
  /// </pre>
  ///
  /// __Note: __Only set on events of type \#TYPE_CONTEXT_COMMITTED.
  ///@return map map whose key is the id of the change fields, and value is the id of
  /// dataset that has that field and was selected by the user.
  ///
  /// This value will never be {@code null}.
  jni.JniObject getChangedFields() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getChangedFields, jni.JniType.objectType, []).object);

  static final _id_getFieldsClassification = jniAccessors.getMethodIDOf(
      _classRef, "getFieldsClassification", "()Ljava/util/Map;");

  /// from: public java.util.Map<android.view.autofill.AutofillId,android.service.autofill.FieldClassification> getFieldsClassification()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the <a href="AutofillService.html\#FieldClassification">field classification</a>
  /// results.
  ///
  /// __Note: __Only set on events of type \#TYPE_CONTEXT_COMMITTED, when the
  /// service requested FillResponse.Builder\#setFieldClassificationIds(AutofillId...) field classification.
  ///@return This value will never be {@code null}.
  jni.JniObject getFieldsClassification() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getFieldsClassification, jni.JniType.objectType, []).object);

  static final _id_getManuallyEnteredField = jniAccessors.getMethodIDOf(
      _classRef, "getManuallyEnteredField", "()Ljava/util/Map;");

  /// from: public java.util.Map<android.view.autofill.AutofillId,java.util.Set<java.lang.String>> getManuallyEnteredField()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns which fields were available on datasets provided by the service but manually
  /// entered by the user.
  ///
  /// For example, server provides:
  ///
  /// <pre class="prettyprint">
  ///  FillResponse response = new FillResponse.Builder()
  ///      .addDataset(new Dataset.Builder(presentation1)
  ///          .setId("4815")
  ///          .setValue(usernameId, AutofillValue.forText("MrPlow"))
  ///          .setValue(passwordId, AutofillValue.forText("AyCaramba"))
  ///          .build())
  ///      .addDataset(new Dataset.Builder(presentation2)
  ///          .setId("162342")
  ///          .setValue(usernameId, AutofillValue.forText("ElBarto"))
  ///          .setValue(passwordId, AutofillValue.forText("D'OH"))
  ///          .build())
  ///      .addDataset(new Dataset.Builder(presentation3)
  ///          .setId("108")
  ///          .setValue(usernameId, AutofillValue.forText("MrPlow"))
  ///          .setValue(passwordId, AutofillValue.forText("D'OH"))
  ///          .build())
  ///      .build();
  /// </pre>
  ///
  /// User doesn't select a dataset but manually enters:
  ///
  /// <pre class="prettyprint">
  ///   username = "MrPlow";
  ///   password = "D'OH";
  /// </pre>
  ///
  /// Then the result is the following map:
  ///
  /// <pre class="prettyprint">
  ///   usernameId => { "4815", "108"}
  ///   passwordId => { "162342", "108" }
  /// </pre>
  ///
  /// __Note: __Only set on events of type \#TYPE_CONTEXT_COMMITTED.
  ///@return map map whose key is the id of the manually-entered field, and value is the
  /// ids of the datasets that have that value but were not selected by the user.
  ///
  /// This value will never be {@code null}.
  jni.JniObject getManuallyEnteredField() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getManuallyEnteredField, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
