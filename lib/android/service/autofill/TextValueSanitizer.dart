// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.autofill.TextValueSanitizer
///
/// Sanitizes a text AutofillValue using a regular expression (regex) substitution.
///
/// For example, to remove spaces from groups of 4-digits in a credit card:
///
/// <pre class="prettyprint">
/// new TextValueSanitizer(Pattern.compile("^(\\d{4})\\s?(\\d{4})\\s?(\\d{4})\\s?(\\d{4})$"),
///     "$1$2$3$4")
/// </pre>
class TextValueSanitizer extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/autofill/TextValueSanitizer");
  TextValueSanitizer.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.service.autofill.TextValueSanitizer> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/util/regex/Pattern;Ljava/lang/String;)V");

  /// from: public void <init>(java.util.regex.Pattern regex, java.lang.String subst)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Default constructor.
  ///@param regex regular expression with groups (delimited by {@code (} and {@code (}) that
  /// are used to substitute parts of the AutofillValue\#getTextValue() text value.
  /// This value must never be {@code null}.
  ///@param subst the string that substitutes the matched regex, using {@code $} for
  /// group substitution ({@code $1} for 1st group match, {@code $2} for 2nd, etc).
  ///
  /// This value must never be {@code null}.
  TextValueSanitizer(jni.JniObject regex, jni.JniString subst)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [regex.reference, subst.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();
}
