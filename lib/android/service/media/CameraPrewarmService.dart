// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../app/Service.dart" as service_;

import "../../os/IBinder.dart" as ibinder_;

import "../../content/Intent.dart" as intent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.media.CameraPrewarmService
///
/// Extend this class to implement a camera prewarm service. See
/// android.provider.MediaStore\#META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE.
class CameraPrewarmService extends service_.Service {
  static final _classRef =
      jniAccessors.getClassOf("android/service/media/CameraPrewarmService");
  CameraPrewarmService.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  CameraPrewarmService.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_onBind = jniAccessors.getMethodIDOf(
      _classRef, "onBind", "(Landroid/content/Intent;)Landroid/os/IBinder;");

  /// from: public android.os.IBinder onBind(android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ibinder_.IBinder onBind(intent_.Intent intent) =>
      ibinder_.IBinder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onBind, jni.JniType.objectType, [intent.reference]).object);

  static final _id_onUnbind = jniAccessors.getMethodIDOf(
      _classRef, "onUnbind", "(Landroid/content/Intent;)Z");

  /// from: public boolean onUnbind(android.content.Intent intent)
  bool onUnbind(intent_.Intent intent) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onUnbind,
      jni.JniType.booleanType,
      [intent.reference]).boolean;

  static final _id_onPrewarm =
      jniAccessors.getMethodIDOf(_classRef, "onPrewarm", "()V");

  /// from: public abstract void onPrewarm()
  ///
  /// Called when the camera should be prewarmed.
  void onPrewarm() => jniAccessors.callMethodWithArgs(
      reference, _id_onPrewarm, jni.JniType.voidType, []).check();

  static final _id_onCooldown =
      jniAccessors.getMethodIDOf(_classRef, "onCooldown", "(Z)V");

  /// from: public abstract void onCooldown(boolean cameraIntentFired)
  ///
  /// Called when prewarm phase is done, either because the camera launch intent has been fired
  /// at this point or prewarm is no longer needed. A client should close the camera
  /// immediately in the latter case.
  ///
  /// In case the camera launch intent has been fired, there is no guarantee about the ordering
  /// of these two events. Cooldown might happen either before or after the activity has been
  /// created that handles the camera intent.
  ///@param cameraIntentFired Indicates whether the intent to launch the camera has been
  ///                          fired.
  void onCooldown(bool cameraIntentFired) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onCooldown,
      jni.JniType.voidType,
      [cameraIntentFired]).check();
}
