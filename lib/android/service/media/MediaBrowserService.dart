// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../app/Service.dart" as service_;

import "../../os/IBinder.dart" as ibinder_;

import "../../content/Intent.dart" as intent_;

import "../../os/Bundle.dart" as bundle_;

import "../../media/session/MediaSession.dart" as mediasession_;

import "../../media/session/MediaSessionManager.dart" as mediasessionmanager_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.media.MediaBrowserService
///
/// Base class for media browser services.
///
/// Media browser services enable applications to browse media content provided by an application
/// and ask the application to start playing it. They may also be used to control content that
/// is already playing by way of a MediaSession.
///
///
///
/// To extend this class, you must declare the service in your manifest file with
/// an intent filter with the \#SERVICE_INTERFACE action.
///
/// For example:
///
///<pre>
/// &lt;service android:name=".MyMediaBrowserService"
///          android:label="&\#64;string/service_name" >
///     &lt;intent-filter>
///         &lt;action android:name="android.media.browse.MediaBrowserService" />
///     &lt;/intent-filter>
/// &lt;/service>
/// </pre>
class MediaBrowserService extends service_.Service {
  static final _classRef =
      jniAccessors.getClassOf("android/service/media/MediaBrowserService");
  MediaBrowserService.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String SERVICE_INTERFACE
  ///
  /// The Intent that must be declared as handled by the service.
  static const SERVICE_INTERFACE = "android.media.browse.MediaBrowserService";

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MediaBrowserService.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_onCreate =
      jniAccessors.getMethodIDOf(_classRef, "onCreate", "()V");

  /// from: public void onCreate()
  void onCreate() => jniAccessors.callMethodWithArgs(
      reference, _id_onCreate, jni.JniType.voidType, []).check();

  static final _id_onBind = jniAccessors.getMethodIDOf(
      _classRef, "onBind", "(Landroid/content/Intent;)Landroid/os/IBinder;");

  /// from: public android.os.IBinder onBind(android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ibinder_.IBinder onBind(intent_.Intent intent) =>
      ibinder_.IBinder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onBind, jni.JniType.objectType, [intent.reference]).object);

  static final _id_dump = jniAccessors.getMethodIDOf(_classRef, "dump",
      "(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V");

  /// from: public void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args)
  void dump(jni.JniObject fd, jni.JniObject writer, jni.JniObject args) =>
      jniAccessors.callMethodWithArgs(reference, _id_dump, jni.JniType.voidType,
          [fd.reference, writer.reference, args.reference]).check();

  static final _id_onGetRoot = jniAccessors.getMethodIDOf(
      _classRef,
      "onGetRoot",
      "(Ljava/lang/String;ILandroid/os/Bundle;)Landroid/service/media/MediaBrowserService\$BrowserRoot;");

  /// from: public abstract android.service.media.MediaBrowserService.BrowserRoot onGetRoot(java.lang.String clientPackageName, int clientUid, android.os.Bundle rootHints)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Called to get the root information for browsing by a particular client.
  ///
  /// The implementation should verify that the client package has permission
  /// to access browse media information before returning the root id; it
  /// should return null if the client is not allowed to access this
  /// information.
  ///
  ///
  ///@param clientPackageName The package name of the application which is
  ///            requesting access to browse media.
  /// This value must never be {@code null}.
  ///@param clientUid The uid of the application which is requesting access to
  ///            browse media.
  ///@param rootHints An optional bundle of service-specific arguments to send
  ///            to the media browser service when connecting and retrieving the
  ///            root id for browsing, or null if none. The contents of this
  ///            bundle may affect the information returned when browsing.
  /// This value may be {@code null}.
  ///@return The BrowserRoot for accessing this app's content or null.
  ///@see BrowserRoot\#EXTRA_RECENT
  ///@see BrowserRoot\#EXTRA_OFFLINE
  ///@see BrowserRoot\#EXTRA_SUGGESTED
  MediaBrowserService_BrowserRoot onGetRoot(jni.JniString clientPackageName,
          int clientUid, bundle_.Bundle rootHints) =>
      MediaBrowserService_BrowserRoot.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_onGetRoot, jni.JniType.objectType, [
        clientPackageName.reference,
        clientUid,
        rootHints.reference
      ]).object);

  static final _id_onLoadChildren = jniAccessors.getMethodIDOf(
      _classRef,
      "onLoadChildren",
      "(Ljava/lang/String;Landroid/service/media/MediaBrowserService\$Result;)V");

  /// from: public abstract void onLoadChildren(java.lang.String parentId, android.service.media.MediaBrowserService.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result)
  ///
  /// Called to get information about the children of a media item.
  ///
  /// Implementations must call Result\#sendResult result.sendResult
  /// with the list of children. If loading the children will be an expensive
  /// operation that should be performed on another thread,
  /// Result\#detach result.detach may be called before returning from
  /// this function, and then Result\#sendResult result.sendResult
  /// called when the loading is complete.
  ///
  ///
  /// In case the media item does not have any children, call Result\#sendResult
  /// with an empty list. When the given {@code parentId} is invalid, implementations must
  /// call Result\#sendResult result.sendResult with {@code null}, which will invoke
  /// MediaBrowser.SubscriptionCallback\#onError.
  ///
  ///
  ///@param parentId The id of the parent media item whose children are to be
  ///            queried.
  /// This value must never be {@code null}.
  ///@param result The Result to send the list of children to.
  ///
  /// This value must never be {@code null}.
  void onLoadChildren(
          jni.JniString parentId, MediaBrowserService_Result result) =>
      jniAccessors.callMethodWithArgs(reference, _id_onLoadChildren,
          jni.JniType.voidType, [parentId.reference, result.reference]).check();

  static final _id_onLoadChildren1 = jniAccessors.getMethodIDOf(
      _classRef,
      "onLoadChildren",
      "(Ljava/lang/String;Landroid/service/media/MediaBrowserService\$Result;Landroid/os/Bundle;)V");

  /// from: public void onLoadChildren(java.lang.String parentId, android.service.media.MediaBrowserService.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result, android.os.Bundle options)
  ///
  /// Called to get information about the children of a media item.
  ///
  /// Implementations must call Result\#sendResult result.sendResult
  /// with the list of children. If loading the children will be an expensive
  /// operation that should be performed on another thread,
  /// Result\#detach result.detach may be called before returning from
  /// this function, and then Result\#sendResult result.sendResult
  /// called when the loading is complete.
  ///
  ///
  /// In case the media item does not have any children, call Result\#sendResult
  /// with an empty list. When the given {@code parentId} is invalid, implementations must
  /// call Result\#sendResult result.sendResult with {@code null}, which will invoke
  /// MediaBrowser.SubscriptionCallback\#onError.
  ///
  ///
  ///@param parentId The id of the parent media item whose children are to be
  ///            queried.
  /// This value must never be {@code null}.
  ///@param result The Result to send the list of children to.
  /// This value must never be {@code null}.
  ///@param options The bundle of service-specific arguments sent from the media
  ///            browser. The information returned through the result should be
  ///            affected by the contents of this bundle.
  ///
  /// This value must never be {@code null}.
  void onLoadChildren1(jni.JniString parentId,
          MediaBrowserService_Result result, bundle_.Bundle options) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onLoadChildren1,
          jni.JniType.voidType,
          [parentId.reference, result.reference, options.reference]).check();

  static final _id_onLoadItem = jniAccessors.getMethodIDOf(
      _classRef,
      "onLoadItem",
      "(Ljava/lang/String;Landroid/service/media/MediaBrowserService\$Result;)V");

  /// from: public void onLoadItem(java.lang.String itemId, android.service.media.MediaBrowserService.Result<android.media.browse.MediaBrowser.MediaItem> result)
  ///
  /// Called to get information about a specific media item.
  ///
  /// Implementations must call Result\#sendResult result.sendResult. If
  /// loading the item will be an expensive operation Result\#detach result.detach may be called before returning from this function, and
  /// then Result\#sendResult result.sendResult called when the item has
  /// been loaded.
  ///
  ///
  /// When the given {@code itemId} is invalid, implementations must call
  /// Result\#sendResult result.sendResult with {@code null}.
  ///
  ///
  /// The default implementation will invoke MediaBrowser.ItemCallback\#onError.
  ///
  ///
  ///@param itemId The id for the specific
  ///            android.media.browse.MediaBrowser.MediaItem.
  ///@param result The Result to send the item to.
  void onLoadItem(jni.JniString itemId, MediaBrowserService_Result result) =>
      jniAccessors.callMethodWithArgs(reference, _id_onLoadItem,
          jni.JniType.voidType, [itemId.reference, result.reference]).check();

  static final _id_setSessionToken = jniAccessors.getMethodIDOf(_classRef,
      "setSessionToken", "(Landroid/media/session/MediaSession\$Token;)V");

  /// from: public void setSessionToken(android.media.session.MediaSession.Token token)
  ///
  /// Call to set the media session.
  ///
  /// This should be called as soon as possible during the service's startup.
  /// It may only be called once.
  ///@param token The token for the service's MediaSession.
  void setSessionToken(mediasession_.MediaSession_Token token) =>
      jniAccessors.callMethodWithArgs(reference, _id_setSessionToken,
          jni.JniType.voidType, [token.reference]).check();

  static final _id_getSessionToken = jniAccessors.getMethodIDOf(_classRef,
      "getSessionToken", "()Landroid/media/session/MediaSession\$Token;");

  /// from: public android.media.session.MediaSession.Token getSessionToken()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the session token, or null if it has not yet been created
  /// or if it has been destroyed.
  mediasession_.MediaSession_Token getSessionToken() =>
      mediasession_.MediaSession_Token.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSessionToken, jni.JniType.objectType, []).object);

  static final _id_getBrowserRootHints = jniAccessors.getMethodIDOf(
      _classRef, "getBrowserRootHints", "()Landroid/os/Bundle;");

  /// from: public final android.os.Bundle getBrowserRootHints()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the root hints sent from the currently connected MediaBrowser.
  /// The root hints are service-specific arguments included in an optional bundle sent to the
  /// media browser service when connecting and retrieving the root id for browsing, or null if
  /// none. The contents of this bundle may affect the information returned when browsing.
  ///@throws IllegalStateException If this method is called outside of \#onGetRoot or
  ///             \#onLoadChildren or \#onLoadItem.
  ///@see MediaBrowserService.BrowserRoot\#EXTRA_RECENT
  ///@see MediaBrowserService.BrowserRoot\#EXTRA_OFFLINE
  ///@see MediaBrowserService.BrowserRoot\#EXTRA_SUGGESTED
  bundle_.Bundle getBrowserRootHints() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getBrowserRootHints, jni.JniType.objectType, []).object);

  static final _id_getCurrentBrowserInfo = jniAccessors.getMethodIDOf(
      _classRef,
      "getCurrentBrowserInfo",
      "()Landroid/media/session/MediaSessionManager\$RemoteUserInfo;");

  /// from: public final android.media.session.MediaSessionManager.RemoteUserInfo getCurrentBrowserInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the browser information who sent the current request.
  ///@throws IllegalStateException If this method is called outside of \#onGetRoot or
  ///             \#onLoadChildren or \#onLoadItem.
  ///@see MediaSessionManager\#isTrustedForMediaControl(RemoteUserInfo)
  mediasessionmanager_.MediaSessionManager_RemoteUserInfo
      getCurrentBrowserInfo() =>
          mediasessionmanager_.MediaSessionManager_RemoteUserInfo.fromRef(
              jniAccessors.callMethodWithArgs(
                  reference,
                  _id_getCurrentBrowserInfo,
                  jni.JniType.objectType, []).object);

  static final _id_notifyChildrenChanged = jniAccessors.getMethodIDOf(
      _classRef, "notifyChildrenChanged", "(Ljava/lang/String;)V");

  /// from: public void notifyChildrenChanged(java.lang.String parentId)
  ///
  /// Notifies all connected media browsers that the children of
  /// the specified parent id have changed in some way.
  /// This will cause browsers to fetch subscribed content again.
  ///@param parentId The id of the parent media item whose
  /// children changed.
  ///
  /// This value must never be {@code null}.
  void notifyChildrenChanged(jni.JniString parentId) =>
      jniAccessors.callMethodWithArgs(reference, _id_notifyChildrenChanged,
          jni.JniType.voidType, [parentId.reference]).check();

  static final _id_notifyChildrenChanged1 = jniAccessors.getMethodIDOf(
      _classRef,
      "notifyChildrenChanged",
      "(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void notifyChildrenChanged(java.lang.String parentId, android.os.Bundle options)
  ///
  /// Notifies all connected media browsers that the children of
  /// the specified parent id have changed in some way.
  /// This will cause browsers to fetch subscribed content again.
  ///@param parentId The id of the parent media item whose
  ///            children changed.
  /// This value must never be {@code null}.
  ///@param options The bundle of service-specific arguments to send
  ///            to the media browser. The contents of this bundle may
  ///            contain the information about the change.
  ///
  /// This value must never be {@code null}.
  void notifyChildrenChanged1(jni.JniString parentId, bundle_.Bundle options) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_notifyChildrenChanged1,
          jni.JniType.voidType,
          [parentId.reference, options.reference]).check();
}

/// from: android.service.media.MediaBrowserService$Result
///
/// Completion handler for asynchronous callback methods in MediaBrowserService.
///
/// Each of the methods that takes one of these to send the result must call
/// \#sendResult to respond to the caller with the given results. If those
/// functions return without calling \#sendResult, they must instead call
/// \#detach before returning, and then may call \#sendResult when
/// they are done. If more than one of those methods is called, an exception will
/// be thrown.
///@see \#onLoadChildren
///@see \#onLoadItem
class MediaBrowserService_Result extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/service/media/MediaBrowserService\$Result");
  MediaBrowserService_Result.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/Object;)V");

  /// from: void <init>(java.lang.Object debug)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MediaBrowserService_Result(jni.JniObject debug)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [debug.reference]).object);

  static final _id_detach =
      jniAccessors.getMethodIDOf(_classRef, "detach", "()V");

  /// from: public void detach()
  ///
  /// Detach this message from the current thread and allow the \#sendResult
  /// call to happen later.
  void detach() => jniAccessors.callMethodWithArgs(
      reference, _id_detach, jni.JniType.voidType, []).check();
}

/// from: android.service.media.MediaBrowserService$BrowserRoot
///
/// Contains information that the browser service needs to send to the client
/// when first connected.
class MediaBrowserService_BrowserRoot extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/service/media/MediaBrowserService\$BrowserRoot");
  MediaBrowserService_BrowserRoot.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String EXTRA_OFFLINE
  ///
  /// The lookup key for a boolean that indicates whether the browser service should return a
  /// browser root for offline media items.
  ///
  /// When creating a media browser for a given media browser service, this key can be
  /// supplied as a root hint for retrieving media items that are can be played without an
  /// internet connection.
  /// If the media browser service can provide such media items, the implementation must return
  /// the key in the root hint when \#onGetRoot(String, int, Bundle) is called back.
  ///
  /// The root hint may contain multiple keys.
  ///@see \#EXTRA_RECENT
  ///@see \#EXTRA_SUGGESTED
  static const EXTRA_OFFLINE = "android.service.media.extra.OFFLINE";

  /// from: static public final java.lang.String EXTRA_RECENT
  ///
  /// The lookup key for a boolean that indicates whether the browser service should return a
  /// browser root for recently played media items.
  ///
  /// When creating a media browser for a given media browser service, this key can be
  /// supplied as a root hint for retrieving media items that are recently played.
  /// If the media browser service can provide such media items, the implementation must return
  /// the key in the root hint when \#onGetRoot(String, int, Bundle) is called back.
  ///
  /// The root hint may contain multiple keys.
  ///@see \#EXTRA_OFFLINE
  ///@see \#EXTRA_SUGGESTED
  static const EXTRA_RECENT = "android.service.media.extra.RECENT";

  /// from: static public final java.lang.String EXTRA_SUGGESTED
  ///
  /// The lookup key for a boolean that indicates whether the browser service should return a
  /// browser root for suggested media items.
  ///
  /// When creating a media browser for a given media browser service, this key can be
  /// supplied as a root hint for retrieving the media items suggested by the media browser
  /// service. The list of media items passed in android.media.browse.MediaBrowser.SubscriptionCallback\#onChildrenLoaded(String, List)
  /// is considered ordered by relevance, first being the top suggestion.
  /// If the media browser service can provide such media items, the implementation must return
  /// the key in the root hint when \#onGetRoot(String, int, Bundle) is called back.
  ///
  /// The root hint may contain multiple keys.
  ///@see \#EXTRA_RECENT
  ///@see \#EXTRA_OFFLINE
  static const EXTRA_SUGGESTED = "android.service.media.extra.SUGGESTED";

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void <init>(java.lang.String rootId, android.os.Bundle extras)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a browser root.
  ///@param rootId The root id for browsing.
  /// This value must never be {@code null}.
  ///@param extras Any extras about the browser service.
  ///
  /// This value may be {@code null}.
  MediaBrowserService_BrowserRoot(jni.JniString rootId, bundle_.Bundle extras)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [rootId.reference, extras.reference]).object);

  static final _id_getRootId = jniAccessors.getMethodIDOf(
      _classRef, "getRootId", "()Ljava/lang/String;");

  /// from: public java.lang.String getRootId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the root id for browsing.
  jni.JniString getRootId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getRootId, jni.JniType.objectType, []).object);

  static final _id_getExtras = jniAccessors.getMethodIDOf(
      _classRef, "getExtras", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets any extras about the browser service.
  bundle_.Bundle getExtras() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtras, jni.JniType.objectType, []).object);
}
