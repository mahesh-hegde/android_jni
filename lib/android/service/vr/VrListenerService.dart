// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../app/Service.dart" as service_;

import "../../os/IBinder.dart" as ibinder_;

import "../../content/Intent.dart" as intent_;

import "../../content/ComponentName.dart" as componentname_;

import "../../content/Context.dart" as context_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.vr.VrListenerService
///
/// A service that is bound from the system while running in virtual reality (VR) mode.
///
/// To extend this class, you must declare the service in your manifest file with
/// the android.Manifest.permission\#BIND_VR_LISTENER_SERVICE permission
/// and include an intent filter with the \#SERVICE_INTERFACE action. For example:
///
/// <pre>
/// &lt;service android:name=".VrListener"
///          android:label="&\#64;string/service_name"
///          android:permission="android.permission.BIND_VR_LISTENER_SERVICE">
///     &lt;intent-filter>
///         &lt;action android:name="android.service.vr.VrListenerService" />
///     &lt;/intent-filter>
/// &lt;/service>
/// </pre>
///
/// This service is bound when the system enters VR mode and is unbound when the system leaves VR
/// mode.
///
/// The system will enter VR mode when an application that has previously called
/// android.app.Activity\#setVrModeEnabled gains user focus.  The system will only start this
/// service if the VR application has specifically targeted this service by specifying
/// its ComponentName in the call to android.app.Activity\#setVrModeEnabled and if
/// this service is installed and enabled in the current user's settings.
///
///@see android.provider.Settings\#ACTION_VR_LISTENER_SETTINGS
///@see android.app.Activity\#setVrModeEnabled
///@see android.R.attr\#enableVrMode
class VrListenerService extends service_.Service {
  static final _classRef =
      jniAccessors.getClassOf("android/service/vr/VrListenerService");
  VrListenerService.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String SERVICE_INTERFACE
  ///
  /// The Intent that must be declared as handled by the service.
  static const SERVICE_INTERFACE = "android.service.vr.VrListenerService";

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  VrListenerService.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_onBind = jniAccessors.getMethodIDOf(
      _classRef, "onBind", "(Landroid/content/Intent;)Landroid/os/IBinder;");

  /// from: public android.os.IBinder onBind(android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ibinder_.IBinder onBind(intent_.Intent intent) =>
      ibinder_.IBinder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onBind, jni.JniType.objectType, [intent.reference]).object);

  static final _id_onCurrentVrActivityChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onCurrentVrActivityChanged",
      "(Landroid/content/ComponentName;)V");

  /// from: public void onCurrentVrActivityChanged(android.content.ComponentName component)
  ///
  /// Called when the current activity using VR mode has changed.
  ///
  /// This will be called when this service is initially bound, but is not
  /// guaranteed to be called before onUnbind.  In general, this is intended to be used to
  /// determine when user focus has transitioned between two VR activities.  If both activities
  /// have declared android.R.attr\#enableVrMode with this service (and this
  /// service is present and enabled), this service will not be unbound during the activity
  /// transition.
  ///
  ///@param component the ComponentName of the VR activity that the system has
  ///    switched to, or null if the system is displaying a 2D activity in VR compatibility mode.
  ///@see android.app.Activity\#setVrModeEnabled
  ///@see android.R.attr\#enableVrMode
  void onCurrentVrActivityChanged(componentname_.ComponentName component) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCurrentVrActivityChanged,
          jni.JniType.voidType, [component.reference]).check();

  static final _id_isVrModePackageEnabled = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "isVrModePackageEnabled",
      "(Landroid/content/Context;Landroid/content/ComponentName;)Z");

  /// from: static public final boolean isVrModePackageEnabled(android.content.Context context, android.content.ComponentName requestedComponent)
  ///
  /// Checks if the given component is enabled in user settings.
  ///
  /// If this component is not enabled in the user's settings, it will not be started when
  /// the system enters VR mode.  The user interface for enabling VrListenerService components
  /// can be started by sending the android.provider.Settings\#ACTION_VR_LISTENER_SETTINGS
  /// intent.
  ///
  ///@param context the Context to use for looking up the requested component.
  /// This value must never be {@code null}.
  ///@param requestedComponent the name of the component that implements
  /// android.service.vr.VrListenerService to check.
  ///
  /// This value must never be {@code null}.
  ///@return {@code true} if this component is enabled in settings.
  ///@see android.provider.Settings\#ACTION_VR_LISTENER_SETTINGS
  static bool isVrModePackageEnabled(context_.Context context,
          componentname_.ComponentName requestedComponent) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_isVrModePackageEnabled,
          jni.JniType.booleanType,
          [context.reference, requestedComponent.reference]).boolean;
}
