// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../net/Uri.dart" as uri_;

import "../../os/Parcel.dart" as parcel_;

import "../../content/Context.dart" as context_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.notification.Condition
///
/// The current condition of an android.app.AutomaticZenRule, provided by the
/// ConditionProviderService that owns the rule. Used to tell the system to enter Do Not
/// Disturb mode and request that the system exit Do Not Disturb mode.
class Condition extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/service/notification/Condition");
  Condition.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.service.notification.Condition> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int FLAG_RELEVANT_ALWAYS
  static const FLAG_RELEVANT_ALWAYS = 2;

  /// from: static public final int FLAG_RELEVANT_NOW
  static const FLAG_RELEVANT_NOW = 1;

  /// from: static public final java.lang.String SCHEME
  static const SCHEME = "condition";

  /// from: static public final int STATE_ERROR
  static const STATE_ERROR = 3;

  /// from: static public final int STATE_FALSE
  ///
  /// Indicates that Do Not Disturb should be turned off. Note that all Conditions from all
  /// ConditionProviderService providers must be off for Do Not Disturb to be turned off on
  /// the device.
  static const STATE_FALSE = 0;

  /// from: static public final int STATE_TRUE
  ///
  /// Indicates that Do Not Disturb should be turned on.
  static const STATE_TRUE = 1;

  /// from: static public final int STATE_UNKNOWN
  static const STATE_UNKNOWN = 2;

  static final _id_flags = jniAccessors.getFieldIDOf(_classRef, "flags", "I");

  /// from: public final int flags
  int get flags =>
      jniAccessors.getField(reference, _id_flags, jni.JniType.intType).integer;

  static final _id_icon = jniAccessors.getFieldIDOf(_classRef, "icon", "I");

  /// from: public final int icon
  int get icon =>
      jniAccessors.getField(reference, _id_icon, jni.JniType.intType).integer;

  static final _id_id =
      jniAccessors.getFieldIDOf(_classRef, "id", "Landroid/net/Uri;");

  /// from: public final android.net.Uri id
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The URI representing the rule being updated.
  /// See android.app.AutomaticZenRule\#getConditionId().
  uri_.Uri get id => uri_.Uri.fromRef(
      jniAccessors.getField(reference, _id_id, jni.JniType.objectType).object);

  static final _id_line1 =
      jniAccessors.getFieldIDOf(_classRef, "line1", "Ljava/lang/String;");

  /// from: public final java.lang.String line1
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString get line1 => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_line1, jni.JniType.objectType)
      .object);

  static final _id_line2 =
      jniAccessors.getFieldIDOf(_classRef, "line2", "Ljava/lang/String;");

  /// from: public final java.lang.String line2
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString get line2 => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_line2, jni.JniType.objectType)
      .object);

  static final _id_state = jniAccessors.getFieldIDOf(_classRef, "state", "I");

  /// from: public final int state
  ///
  /// The state of this condition. \#STATE_TRUE will enable Do Not Disturb mode.
  /// \#STATE_FALSE will turn Do Not Disturb off for this rule. Note that Do Not Disturb
  /// might still be enabled globally if other conditions are in a \#STATE_TRUE state.
  ///
  /// Value is android.service.notification.Condition\#STATE_FALSE, android.service.notification.Condition\#STATE_TRUE, android.service.notification.Condition\#STATE_UNKNOWN, or android.service.notification.Condition\#STATE_ERROR
  int get state =>
      jniAccessors.getField(reference, _id_state, jni.JniType.intType).integer;

  static final _id_summary =
      jniAccessors.getFieldIDOf(_classRef, "summary", "Ljava/lang/String;");

  /// from: public final java.lang.String summary
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A summary of what the rule encoded in \#id means when it is enabled. User visible
  /// if the state of the condition is \#STATE_TRUE.
  jni.JniString get summary => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_summary, jni.JniType.objectType)
      .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/net/Uri;Ljava/lang/String;I)V");

  /// from: public void <init>(android.net.Uri id, java.lang.String summary, int state)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// An object representing the current state of a android.app.AutomaticZenRule.
  ///@param id the android.app.AutomaticZenRule\#getConditionId() of the zen rule
  ///@param summary a user visible description of the rule state.
  Condition(uri_.Uri id, jni.JniString summary, int state)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [id.reference, summary.reference, state]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;III)V");

  /// from: public void <init>(android.net.Uri id, java.lang.String summary, java.lang.String line1, java.lang.String line2, int icon, int state, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Condition.ctor1(uri_.Uri id, jni.JniString summary, jni.JniString line1,
      jni.JniString line2, int icon, int state, int flags)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          id.reference,
          summary.reference,
          line1.reference,
          line2.reference,
          icon,
          state,
          flags
        ]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Condition.ctor2(parcel_.Parcel source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [source.reference]).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_stateToString = jniAccessors.getStaticMethodIDOf(
      _classRef, "stateToString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String stateToString(int state)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString stateToString(int state) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_stateToString, jni.JniType.objectType, [state]).object);

  static final _id_relevanceToString = jniAccessors.getStaticMethodIDOf(
      _classRef, "relevanceToString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String relevanceToString(int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString relevanceToString(int flags) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_relevanceToString, jni.JniType.objectType, [flags]).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_copy = jniAccessors.getMethodIDOf(
      _classRef, "copy", "()Landroid/service/notification/Condition;");

  /// from: public android.service.notification.Condition copy()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Condition copy() => Condition.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_copy, jni.JniType.objectType, []).object);

  static final _id_newId = jniAccessors.getStaticMethodIDOf(_classRef, "newId",
      "(Landroid/content/Context;)Landroid/net/Uri\$Builder;");

  /// from: static public android.net.Uri.Builder newId(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static uri_.Uri_Builder newId(context_.Context context) =>
      uri_.Uri_Builder.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_newId, jni.JniType.objectType, [context.reference]).object);

  static final _id_isValidId = jniAccessors.getStaticMethodIDOf(
      _classRef, "isValidId", "(Landroid/net/Uri;Ljava/lang/String;)Z");

  /// from: static public boolean isValidId(android.net.Uri id, java.lang.String pkg)
  static bool isValidId(uri_.Uri id, jni.JniString pkg) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isValidId,
          jni.JniType.booleanType, [id.reference, pkg.reference]).boolean;
}
