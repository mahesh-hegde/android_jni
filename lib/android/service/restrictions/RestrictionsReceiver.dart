// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../content/BroadcastReceiver.dart" as broadcastreceiver_;

import "../../content/Context.dart" as context_;

import "../../os/PersistableBundle.dart" as persistablebundle_;

import "../../content/Intent.dart" as intent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.service.restrictions.RestrictionsReceiver
///
/// Abstract implementation of a Restrictions Provider BroadcastReceiver. To implement a
/// Restrictions Provider, extend from this class and implement the abstract methods.
/// Export this receiver in the manifest. A profile owner device admin can then register this
/// component as a Restrictions Provider using
/// DevicePolicyManager\#setRestrictionsProvider(ComponentName, ComponentName).
///
/// The function of a Restrictions Provider is to transport permission requests from apps on this
/// device to an administrator (most likely on a remote device or computer) and deliver back
/// responses. The response should be sent back to the app via
/// RestrictionsManager\#notifyPermissionResponse(String, PersistableBundle).
///@see RestrictionsManager
class RestrictionsReceiver extends broadcastreceiver_.BroadcastReceiver {
  static final _classRef = jniAccessors
      .getClassOf("android/service/restrictions/RestrictionsReceiver");
  RestrictionsReceiver.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RestrictionsReceiver()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onRequestPermission = jniAccessors.getMethodIDOf(
      _classRef,
      "onRequestPermission",
      "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/PersistableBundle;)V");

  /// from: public abstract void onRequestPermission(android.content.Context context, java.lang.String packageName, java.lang.String requestType, java.lang.String requestId, android.os.PersistableBundle request)
  ///
  /// An asynchronous permission request made by an application for an operation that requires
  /// authorization by a local or remote administrator other than the user. The Restrictions
  /// Provider should transfer the request to the administrator and deliver back a response, when
  /// available. The calling application is aware that the response could take an indefinite
  /// amount of time.
  ///
  /// If the request bundle contains the key RestrictionsManager\#REQUEST_KEY_NEW_REQUEST,
  /// then a new request must be sent. Otherwise the provider can look up any previous response
  /// to the same requestId and return the cached response.
  ///@param packageName the application requesting permission.
  ///@param requestType the type of request, which determines the content and presentation of
  /// the request data.
  ///@param request the request data bundle containing at a minimum a request id.
  ///@see RestrictionsManager\#REQUEST_TYPE_APPROVAL
  ///@see RestrictionsManager\#REQUEST_TYPE_LOCAL_APPROVAL
  ///@see RestrictionsManager\#REQUEST_KEY_ID
  void onRequestPermission(
          context_.Context context,
          jni.JniString packageName,
          jni.JniString requestType,
          jni.JniString requestId,
          persistablebundle_.PersistableBundle request) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onRequestPermission, jni.JniType.voidType, [
        context.reference,
        packageName.reference,
        requestType.reference,
        requestId.reference,
        request.reference
      ]).check();

  static final _id_onReceive = jniAccessors.getMethodIDOf(_classRef,
      "onReceive", "(Landroid/content/Context;Landroid/content/Intent;)V");

  /// from: public void onReceive(android.content.Context context, android.content.Intent intent)
  ///
  /// Intercept standard Restrictions Provider broadcasts.  Implementations
  /// should not override this method; it is better to implement the
  /// convenience callbacks for each action.
  void onReceive(context_.Context context, intent_.Intent intent) =>
      jniAccessors.callMethodWithArgs(reference, _id_onReceive,
          jni.JniType.voidType, [context.reference, intent.reference]).check();
}
