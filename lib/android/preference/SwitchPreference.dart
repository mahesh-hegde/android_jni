// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "TwoStatePreference.dart" as twostatepreference_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../view/View.dart" as view_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.preference.SwitchPreference
///
/// A Preference that provides a two-state toggleable option.
///
/// This preference will store a boolean into the SharedPreferences.
///@attr ref android.R.styleable\#SwitchPreference_summaryOff
///@attr ref android.R.styleable\#SwitchPreference_summaryOn
///@attr ref android.R.styleable\#SwitchPreference_switchTextOff
///@attr ref android.R.styleable\#SwitchPreference_switchTextOn
///@attr ref android.R.styleable\#SwitchPreference_disableDependentsState
class SwitchPreference extends twostatepreference_.TwoStatePreference {
  static final _classRef =
      jniAccessors.getClassOf("android/preference/SwitchPreference");
  SwitchPreference.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a new SwitchPreference with the given style options.
  ///@param context The Context that will style this preference
  ///@param attrs Style attributes that differ from the default
  ///@param defStyleAttr An attribute in the current theme that contains a
  ///        reference to a style resource that supplies default values for
  ///        the view. Can be 0 to not look for defaults.
  ///@param defStyleRes A resource identifier of a style resource that
  ///        supplies default values for the view, used only if
  ///        defStyleAttr is 0 or can not be found in the theme. Can be 0
  ///        to not look for defaults.
  SwitchPreference(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a new SwitchPreference with the given style options.
  ///@param context The Context that will style this preference
  ///@param attrs Style attributes that differ from the default
  ///@param defStyleAttr An attribute in the current theme that contains a
  ///        reference to a style resource that supplies default values for
  ///        the view. Can be 0 to not look for defaults.
  SwitchPreference.ctor1(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a new SwitchPreference with the given style options.
  ///@param context The Context that will style this preference
  ///@param attrs Style attributes that differ from the default
  SwitchPreference.ctor2(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [context.reference, attrs.reference]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a new SwitchPreference with default style options.
  ///@param context The Context that will style this preference
  SwitchPreference.ctor3(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor3, [context.reference]).object);

  static final _id_onBindView1 = jniAccessors.getMethodIDOf(
      _classRef, "onBindView", "(Landroid/view/View;)V");

  /// from: protected void onBindView(android.view.View view)
  void onBindView1(view_.View view) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onBindView1,
      jni.JniType.voidType,
      [view.reference]).check();

  static final _id_setSwitchTextOn = jniAccessors.getMethodIDOf(
      _classRef, "setSwitchTextOn", "(Ljava/lang/CharSequence;)V");

  /// from: public void setSwitchTextOn(java.lang.CharSequence onText)
  ///
  /// Set the text displayed on the switch widget in the on state.
  /// This should be a very short string; one word if possible.
  ///@param onText Text to display in the on state
  void setSwitchTextOn(jni.JniObject onText) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setSwitchTextOn,
      jni.JniType.voidType,
      [onText.reference]).check();

  static final _id_setSwitchTextOff = jniAccessors.getMethodIDOf(
      _classRef, "setSwitchTextOff", "(Ljava/lang/CharSequence;)V");

  /// from: public void setSwitchTextOff(java.lang.CharSequence offText)
  ///
  /// Set the text displayed on the switch widget in the off state.
  /// This should be a very short string; one word if possible.
  ///@param offText Text to display in the off state
  void setSwitchTextOff(jni.JniObject offText) =>
      jniAccessors.callMethodWithArgs(reference, _id_setSwitchTextOff,
          jni.JniType.voidType, [offText.reference]).check();

  static final _id_setSwitchTextOn1 =
      jniAccessors.getMethodIDOf(_classRef, "setSwitchTextOn", "(I)V");

  /// from: public void setSwitchTextOn(int resId)
  ///
  /// Set the text displayed on the switch widget in the on state.
  /// This should be a very short string; one word if possible.
  ///@param resId The text as a string resource ID
  void setSwitchTextOn1(int resId) => jniAccessors.callMethodWithArgs(
      reference, _id_setSwitchTextOn1, jni.JniType.voidType, [resId]).check();

  static final _id_setSwitchTextOff1 =
      jniAccessors.getMethodIDOf(_classRef, "setSwitchTextOff", "(I)V");

  /// from: public void setSwitchTextOff(int resId)
  ///
  /// Set the text displayed on the switch widget in the off state.
  /// This should be a very short string; one word if possible.
  ///@param resId The text as a string resource ID
  void setSwitchTextOff1(int resId) => jniAccessors.callMethodWithArgs(
      reference, _id_setSwitchTextOff1, jni.JniType.voidType, [resId]).check();

  static final _id_getSwitchTextOn = jniAccessors.getMethodIDOf(
      _classRef, "getSwitchTextOn", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getSwitchTextOn()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The text that will be displayed on the switch widget in the on state
  jni.JniObject getSwitchTextOn() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSwitchTextOn, jni.JniType.objectType, []).object);

  static final _id_getSwitchTextOff = jniAccessors.getMethodIDOf(
      _classRef, "getSwitchTextOff", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getSwitchTextOff()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The text that will be displayed on the switch widget in the off state
  jni.JniObject getSwitchTextOff() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSwitchTextOff, jni.JniType.objectType, []).object);
}
