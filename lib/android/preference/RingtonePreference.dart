// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Preference.dart" as preference_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../content/Intent.dart" as intent_;

import "../net/Uri.dart" as uri_;

import "../content/res/TypedArray.dart" as typedarray_;

import "PreferenceManager.dart" as preferencemanager_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.preference.RingtonePreference
///
/// A Preference that allows the user to choose a ringtone from those on the device.
/// The chosen ringtone's URI will be persisted as a string.
///
/// If the user chooses the "Default" item, the saved string will be one of
/// System\#DEFAULT_RINGTONE_URI,
/// System\#DEFAULT_NOTIFICATION_URI, or
/// System\#DEFAULT_ALARM_ALERT_URI. If the user chooses the "Silent"
/// item, the saved string will be an empty string.
///@attr ref android.R.styleable\#RingtonePreference_ringtoneType
///@attr ref android.R.styleable\#RingtonePreference_showDefault
///@attr ref android.R.styleable\#RingtonePreference_showSilent
class RingtonePreference extends preference_.Preference {
  static final _classRef =
      jniAccessors.getClassOf("android/preference/RingtonePreference");
  RingtonePreference.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  RingtonePreference(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  RingtonePreference.ctor1(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  RingtonePreference.ctor2(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [context.reference, attrs.reference]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  RingtonePreference.ctor3(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor3, [context.reference]).object);

  static final _id_getRingtoneType =
      jniAccessors.getMethodIDOf(_classRef, "getRingtoneType", "()I");

  /// from: public int getRingtoneType()
  ///
  /// Returns the sound type(s) that are shown in the picker.
  ///@return The sound type(s) that are shown in the picker.
  ///@see \#setRingtoneType(int)
  int getRingtoneType() => jniAccessors.callMethodWithArgs(
      reference, _id_getRingtoneType, jni.JniType.intType, []).integer;

  static final _id_setRingtoneType =
      jniAccessors.getMethodIDOf(_classRef, "setRingtoneType", "(I)V");

  /// from: public void setRingtoneType(int type)
  ///
  /// Sets the sound type(s) that are shown in the picker.
  ///@param type The sound type(s) that are shown in the picker.
  ///@see RingtoneManager\#EXTRA_RINGTONE_TYPE
  void setRingtoneType(int type) => jniAccessors.callMethodWithArgs(
      reference, _id_setRingtoneType, jni.JniType.voidType, [type]).check();

  static final _id_getShowDefault =
      jniAccessors.getMethodIDOf(_classRef, "getShowDefault", "()Z");

  /// from: public boolean getShowDefault()
  ///
  /// Returns whether to a show an item for the default sound/ringtone.
  ///@return Whether to show an item for the default sound/ringtone.
  bool getShowDefault() => jniAccessors.callMethodWithArgs(
      reference, _id_getShowDefault, jni.JniType.booleanType, []).boolean;

  static final _id_setShowDefault =
      jniAccessors.getMethodIDOf(_classRef, "setShowDefault", "(Z)V");

  /// from: public void setShowDefault(boolean showDefault)
  ///
  /// Sets whether to show an item for the default sound/ringtone. The default
  /// to use will be deduced from the sound type(s) being shown.
  ///@param showDefault Whether to show the default or not.
  ///@see RingtoneManager\#EXTRA_RINGTONE_SHOW_DEFAULT
  void setShowDefault(bool showDefault) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setShowDefault,
      jni.JniType.voidType,
      [showDefault]).check();

  static final _id_getShowSilent =
      jniAccessors.getMethodIDOf(_classRef, "getShowSilent", "()Z");

  /// from: public boolean getShowSilent()
  ///
  /// Returns whether to a show an item for 'Silent'.
  ///@return Whether to show an item for 'Silent'.
  bool getShowSilent() => jniAccessors.callMethodWithArgs(
      reference, _id_getShowSilent, jni.JniType.booleanType, []).boolean;

  static final _id_setShowSilent =
      jniAccessors.getMethodIDOf(_classRef, "setShowSilent", "(Z)V");

  /// from: public void setShowSilent(boolean showSilent)
  ///
  /// Sets whether to show an item for 'Silent'.
  ///@param showSilent Whether to show 'Silent'.
  ///@see RingtoneManager\#EXTRA_RINGTONE_SHOW_SILENT
  void setShowSilent(bool showSilent) => jniAccessors.callMethodWithArgs(
      reference, _id_setShowSilent, jni.JniType.voidType, [showSilent]).check();

  static final _id_onClick =
      jniAccessors.getMethodIDOf(_classRef, "onClick", "()V");

  /// from: protected void onClick()
  void onClick() => jniAccessors.callMethodWithArgs(
      reference, _id_onClick, jni.JniType.voidType, []).check();

  static final _id_onPrepareRingtonePickerIntent = jniAccessors.getMethodIDOf(
      _classRef,
      "onPrepareRingtonePickerIntent",
      "(Landroid/content/Intent;)V");

  /// from: protected void onPrepareRingtonePickerIntent(android.content.Intent ringtonePickerIntent)
  ///
  /// Prepares the intent to launch the ringtone picker. This can be modified
  /// to adjust the parameters of the ringtone picker.
  ///@param ringtonePickerIntent The ringtone picker intent that can be
  ///            modified by putting extras.
  void onPrepareRingtonePickerIntent(intent_.Intent ringtonePickerIntent) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onPrepareRingtonePickerIntent,
          jni.JniType.voidType,
          [ringtonePickerIntent.reference]).check();

  static final _id_onSaveRingtone = jniAccessors.getMethodIDOf(
      _classRef, "onSaveRingtone", "(Landroid/net/Uri;)V");

  /// from: protected void onSaveRingtone(android.net.Uri ringtoneUri)
  ///
  /// Called when a ringtone is chosen.
  ///
  /// By default, this saves the ringtone URI to the persistent storage as a
  /// string.
  ///@param ringtoneUri The chosen ringtone's Uri. Can be null.
  void onSaveRingtone(uri_.Uri ringtoneUri) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onSaveRingtone,
      jni.JniType.voidType,
      [ringtoneUri.reference]).check();

  static final _id_onRestoreRingtone = jniAccessors.getMethodIDOf(
      _classRef, "onRestoreRingtone", "()Landroid/net/Uri;");

  /// from: protected android.net.Uri onRestoreRingtone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Called when the chooser is about to be shown and the current ringtone
  /// should be marked. Can return null to not mark any ringtone.
  ///
  /// By default, this restores the previous ringtone URI from the persistent
  /// storage.
  ///@return The ringtone to be marked as the current ringtone.
  uri_.Uri onRestoreRingtone() =>
      uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_onRestoreRingtone, jni.JniType.objectType, []).object);

  static final _id_onGetDefaultValue = jniAccessors.getMethodIDOf(
      _classRef,
      "onGetDefaultValue",
      "(Landroid/content/res/TypedArray;I)Ljava/lang/Object;");

  /// from: protected java.lang.Object onGetDefaultValue(android.content.res.TypedArray a, int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onGetDefaultValue(typedarray_.TypedArray a, int index) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_onGetDefaultValue,
          jni.JniType.objectType,
          [a.reference, index]).object);

  static final _id_onSetInitialValue = jniAccessors.getMethodIDOf(
      _classRef, "onSetInitialValue", "(ZLjava/lang/Object;)V");

  /// from: protected void onSetInitialValue(boolean restorePersistedValue, java.lang.Object defaultValueObj)
  void onSetInitialValue(
          bool restorePersistedValue, jni.JniObject defaultValueObj) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onSetInitialValue,
          jni.JniType.voidType,
          [restorePersistedValue, defaultValueObj.reference]).check();

  static final _id_onAttachedToHierarchy = jniAccessors.getMethodIDOf(_classRef,
      "onAttachedToHierarchy", "(Landroid/preference/PreferenceManager;)V");

  /// from: protected void onAttachedToHierarchy(android.preference.PreferenceManager preferenceManager)
  void onAttachedToHierarchy(
          preferencemanager_.PreferenceManager preferenceManager) =>
      jniAccessors.callMethodWithArgs(reference, _id_onAttachedToHierarchy,
          jni.JniType.voidType, [preferenceManager.reference]).check();

  static final _id_onActivityResult = jniAccessors.getMethodIDOf(
      _classRef, "onActivityResult", "(IILandroid/content/Intent;)Z");

  /// from: public boolean onActivityResult(int requestCode, int resultCode, android.content.Intent data)
  bool onActivityResult(int requestCode, int resultCode, intent_.Intent data) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onActivityResult,
          jni.JniType.booleanType,
          [requestCode, resultCode, data.reference]).boolean;
}
