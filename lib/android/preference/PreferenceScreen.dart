// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "PreferenceGroup.dart" as preferencegroup_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../widget/ListAdapter.dart" as listadapter_;

import "../widget/ListView.dart" as listview_;

import "../content/DialogInterface.dart" as dialoginterface_;

import "../app/Dialog.dart" as dialog_;

import "../widget/AdapterView.dart" as adapterview_;

import "../view/View.dart" as view_;

import "../os/Parcelable.dart" as parcelable_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.preference.PreferenceScreen
///
/// Represents a top-level Preference that
/// is the root of a Preference hierarchy. A PreferenceActivity
/// points to an instance of this class to show the preferences. To instantiate
/// this class, use PreferenceManager\#createPreferenceScreen(Context).
/// <ul>
/// This class can appear in two places:
/// <li> When a PreferenceActivity points to this, it is used as the root
/// and is not shown (only the contained preferences are shown).
/// <li> When it appears inside another preference hierarchy, it is shown and
/// serves as the gateway to another screen of preferences (either by showing
/// another screen of preferences as a Dialog or via a
/// Context\#startActivity(android.content.Intent) from the
/// Preference\#getIntent()). The children of this PreferenceScreen
/// are NOT shown in the screen that this PreferenceScreen is shown in.
/// Instead, a separate screen will be shown when this preference is clicked.
/// </ul>
/// Here's an example XML layout of a PreferenceScreen:
///
/// <pre>
/// &lt;PreferenceScreen
///        xmlns:android="http://schemas.android.com/apk/res/android"
///        android:key="first_preferencescreen"&gt;
///    &lt;CheckBoxPreference
///            android:key="wifi enabled"
///            android:title="WiFi" /&gt;
///    &lt;PreferenceScreen
///            android:key="second_preferencescreen"
///            android:title="WiFi settings"&gt;
///        &lt;CheckBoxPreference
///                android:key="prefer wifi"
///                android:title="Prefer WiFi" /&gt;
///        ... other preferences here ...
///    &lt;/PreferenceScreen&gt;
/// &lt;/PreferenceScreen&gt; </pre>
///
/// In this example, the "first_preferencescreen" will be used as the root of the
/// hierarchy and given to a PreferenceActivity. The first screen will
/// show preferences "WiFi" (which can be used to quickly enable/disable WiFi)
/// and "WiFi settings". The "WiFi settings" is the "second_preferencescreen" and when
/// clicked will show another screen of preferences such as "Prefer WiFi" (and
/// the other preferences that are children of the "second_preferencescreen" tag).
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For information about building a settings UI with Preferences,
/// read the <a href="{@docRoot}guide/topics/ui/settings.html">Settings</a>
/// guide.
///
/// </div>
///@see PreferenceCategory
class PreferenceScreen extends preferencegroup_.PreferenceGroup {
  static final _classRef =
      jniAccessors.getClassOf("android/preference/PreferenceScreen");
  PreferenceScreen.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Do NOT use this constructor, use PreferenceManager\#createPreferenceScreen(Context).
  ///@hide-
  PreferenceScreen.ctor2(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [context.reference, attrs.reference]).object);

  static final _id_getRootAdapter = jniAccessors.getMethodIDOf(
      _classRef, "getRootAdapter", "()Landroid/widget/ListAdapter;");

  /// from: public android.widget.ListAdapter getRootAdapter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an adapter that can be attached to a PreferenceActivity
  /// or PreferenceFragment to show the preferences contained in this
  /// PreferenceScreen.
  ///
  /// This PreferenceScreen will NOT appear in the returned adapter, instead
  /// it appears in the hierarchy above this PreferenceScreen.
  ///
  /// This adapter's Adapter\#getItem(int) should always return a
  /// subclass of Preference.
  ///@return An adapter that provides the Preference contained in this
  ///         PreferenceScreen.
  listadapter_.ListAdapter getRootAdapter() =>
      listadapter_.ListAdapter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getRootAdapter, jni.JniType.objectType, []).object);

  static final _id_onCreateRootAdapter = jniAccessors.getMethodIDOf(
      _classRef, "onCreateRootAdapter", "()Landroid/widget/ListAdapter;");

  /// from: protected android.widget.ListAdapter onCreateRootAdapter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates the root adapter.
  ///@return An adapter that contains the preferences contained in this PreferenceScreen.
  ///@see \#getRootAdapter()
  listadapter_.ListAdapter onCreateRootAdapter() =>
      listadapter_.ListAdapter.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_onCreateRootAdapter,
          jni.JniType.objectType, []).object);

  static final _id_bind = jniAccessors.getMethodIDOf(
      _classRef, "bind", "(Landroid/widget/ListView;)V");

  /// from: public void bind(android.widget.ListView listView)
  ///
  /// Binds a ListView to the preferences contained in this PreferenceScreen via
  /// \#getRootAdapter(). It also handles passing list item clicks to the corresponding
  /// Preference contained by this PreferenceScreen.
  ///@param listView The list view to attach to.
  void bind(listview_.ListView listView) => jniAccessors.callMethodWithArgs(
      reference, _id_bind, jni.JniType.voidType, [listView.reference]).check();

  static final _id_onClick1 =
      jniAccessors.getMethodIDOf(_classRef, "onClick", "()V");

  /// from: protected void onClick()
  void onClick1() => jniAccessors.callMethodWithArgs(
      reference, _id_onClick1, jni.JniType.voidType, []).check();

  static final _id_onDismiss = jniAccessors.getMethodIDOf(
      _classRef, "onDismiss", "(Landroid/content/DialogInterface;)V");

  /// from: public void onDismiss(android.content.DialogInterface dialog)
  void onDismiss(dialoginterface_.DialogInterface dialog) =>
      jniAccessors.callMethodWithArgs(reference, _id_onDismiss,
          jni.JniType.voidType, [dialog.reference]).check();

  static final _id_getDialog = jniAccessors.getMethodIDOf(
      _classRef, "getDialog", "()Landroid/app/Dialog;");

  /// from: public android.app.Dialog getDialog()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to get a handle to the dialog.
  /// This is useful for cases where we want to manipulate the dialog
  /// as we would with any other activity or view.
  dialog_.Dialog getDialog() =>
      dialog_.Dialog.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDialog, jni.JniType.objectType, []).object);

  static final _id_onItemClick = jniAccessors.getMethodIDOf(_classRef,
      "onItemClick", "(Landroid/widget/AdapterView;Landroid/view/View;IJ)V");

  /// from: public void onItemClick(android.widget.AdapterView parent, android.view.View view, int position, long id)
  void onItemClick(adapterview_.AdapterView parent, view_.View view,
          int position, int id) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onItemClick,
          jni.JniType.voidType,
          [parent.reference, view.reference, position, id]).check();

  static final _id_isOnSameScreenAsChildren =
      jniAccessors.getMethodIDOf(_classRef, "isOnSameScreenAsChildren", "()Z");

  /// from: protected boolean isOnSameScreenAsChildren()
  bool isOnSameScreenAsChildren() => jniAccessors.callMethodWithArgs(reference,
      _id_isOnSameScreenAsChildren, jni.JniType.booleanType, []).boolean;

  static final _id_onSaveInstanceState1 = jniAccessors.getMethodIDOf(
      _classRef, "onSaveInstanceState", "()Landroid/os/Parcelable;");

  /// from: protected android.os.Parcelable onSaveInstanceState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  parcelable_.Parcelable onSaveInstanceState1() =>
      parcelable_.Parcelable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onSaveInstanceState1, jni.JniType.objectType, []).object);

  static final _id_onRestoreInstanceState1 = jniAccessors.getMethodIDOf(
      _classRef, "onRestoreInstanceState", "(Landroid/os/Parcelable;)V");

  /// from: protected void onRestoreInstanceState(android.os.Parcelable state)
  void onRestoreInstanceState1(parcelable_.Parcelable state) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRestoreInstanceState1,
          jni.JniType.voidType, [state.reference]).check();
}
