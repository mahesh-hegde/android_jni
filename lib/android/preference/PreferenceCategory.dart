// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "PreferenceGroup.dart" as preferencegroup_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "Preference.dart" as preference_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.preference.PreferenceCategory
///
/// Used to group Preference objects
/// and provide a disabled title above the group.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For information about building a settings UI with Preferences,
/// read the <a href="{@docRoot}guide/topics/ui/settings.html">Settings</a>
/// guide.
///
/// </div>
class PreferenceCategory extends preferencegroup_.PreferenceGroup {
  static final _classRef =
      jniAccessors.getClassOf("android/preference/PreferenceCategory");
  PreferenceCategory.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PreferenceCategory(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PreferenceCategory.ctor1(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PreferenceCategory.ctor2(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [context.reference, attrs.reference]).object);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PreferenceCategory.ctor4(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [context.reference]).object);

  static final _id_onPrepareAddPreference = jniAccessors.getMethodIDOf(
      _classRef,
      "onPrepareAddPreference",
      "(Landroid/preference/Preference;)Z");

  /// from: protected boolean onPrepareAddPreference(android.preference.Preference preference)
  bool onPrepareAddPreference(preference_.Preference preference) =>
      jniAccessors.callMethodWithArgs(reference, _id_onPrepareAddPreference,
          jni.JniType.booleanType, [preference.reference]).boolean;

  static final _id_isEnabled1 =
      jniAccessors.getMethodIDOf(_classRef, "isEnabled", "()Z");

  /// from: public boolean isEnabled()
  bool isEnabled1() => jniAccessors.callMethodWithArgs(
      reference, _id_isEnabled1, jni.JniType.booleanType, []).boolean;

  static final _id_shouldDisableDependents1 =
      jniAccessors.getMethodIDOf(_classRef, "shouldDisableDependents", "()Z");

  /// from: public boolean shouldDisableDependents()
  bool shouldDisableDependents1() => jniAccessors.callMethodWithArgs(reference,
      _id_shouldDisableDependents1, jni.JniType.booleanType, []).boolean;
}
