// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../app/Fragment.dart" as fragment_;

import "../os/Bundle.dart" as bundle_;

import "../view/View.dart" as view_;

import "../view/LayoutInflater.dart" as layoutinflater_;

import "../view/ViewGroup.dart" as viewgroup_;

import "../content/Intent.dart" as intent_;

import "PreferenceManager.dart" as preferencemanager_;

import "PreferenceScreen.dart" as preferencescreen_;

import "Preference.dart" as preference_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.preference.PreferenceFragment
///
/// Shows a hierarchy of Preference objects as
/// lists. These preferences will
/// automatically save to SharedPreferences as the user interacts with
/// them. To retrieve an instance of SharedPreferences that the
/// preference hierarchy in this fragment will use, call
/// PreferenceManager\#getDefaultSharedPreferences(android.content.Context)
/// with a context in the same package as this fragment.
///
/// Furthermore, the preferences shown will follow the visual style of system
/// preferences. It is easy to create a hierarchy of preferences (that can be
/// shown on multiple screens) via XML. For these reasons, it is recommended to
/// use this fragment (as a superclass) to deal with preferences in applications.
///
/// A PreferenceScreen object should be at the top of the preference
/// hierarchy. Furthermore, subsequent PreferenceScreen in the hierarchy
/// denote a screen break--that is the preferences contained within subsequent
/// PreferenceScreen should be shown on another screen. The preference
/// framework handles showing these other screens from the preference hierarchy.
///
/// The preference hierarchy can be formed in multiple ways:
/// <li> From an XML file specifying the hierarchy
/// <li> From different Activity Activities that each specify its own
/// preferences in an XML file via Activity meta-data
/// <li> From an object hierarchy rooted with PreferenceScreen
///
/// To inflate from XML, use the \#addPreferencesFromResource(int). The
/// root element should be a PreferenceScreen. Subsequent elements can point
/// to actual Preference subclasses. As mentioned above, subsequent
/// PreferenceScreen in the hierarchy will result in the screen break.
///
/// To specify an Intent to query Activity Activities that each
/// have preferences, use \#addPreferencesFromIntent. Each
/// Activity can specify meta-data in the manifest (via the key
/// PreferenceManager\#METADATA_KEY_PREFERENCES) that points to an XML
/// resource. These XML resources will be inflated into a single preference
/// hierarchy and shown by this fragment.
///
/// To specify an object hierarchy rooted with PreferenceScreen, use
/// \#setPreferenceScreen(PreferenceScreen).
///
/// As a convenience, this fragment implements a click listener for any
/// preference in the current hierarchy, see
/// \#onPreferenceTreeClick(PreferenceScreen, Preference).
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For information about using {@code PreferenceFragment},
/// read the <a href="{@docRoot}guide/topics/ui/settings.html">Settings</a>
/// guide.
///
/// </div>
///
/// <a name="SampleCode"></a>
/// <h3>Sample Code</h3>
///
/// The following sample code shows a simple preference fragment that is
/// populated from a resource.  The resource it loads is:
///
///
/// {@sample development/samples/ApiDemos/res/xml/preferences.xml preferences}
///
/// The fragment implementation itself simply populates the preferences
/// when created.  Note that the preferences framework takes care of loading
/// the current values out of the app preferences and writing them when changed:
///
///
/// {@sample development/samples/ApiDemos/src/com/example/android/apis/preference/FragmentPreferences.java
///      fragment}
///@see Preference
///@see PreferenceScreen
///@deprecated Use android.support.v7.preference.PreferenceFragmentCompat
class PreferenceFragment extends fragment_.Fragment {
  static final _classRef =
      jniAccessors.getClassOf("android/preference/PreferenceFragment");
  PreferenceFragment.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PreferenceFragment()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onCreate = jniAccessors.getMethodIDOf(
      _classRef, "onCreate", "(Landroid/os/Bundle;)V");

  /// from: public void onCreate(android.os.Bundle savedInstanceState)
  ///
  /// @param savedInstanceState This value may be {@code null}.
  void onCreate(bundle_.Bundle savedInstanceState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCreate,
          jni.JniType.voidType, [savedInstanceState.reference]).check();

  static final _id_onCreateView = jniAccessors.getMethodIDOf(
      _classRef,
      "onCreateView",
      "(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;");

  /// from: public android.view.View onCreateView(android.view.LayoutInflater inflater, android.view.ViewGroup container, android.os.Bundle savedInstanceState)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param container This value may be {@code null}.
  ///@param savedInstanceState This value may be {@code null}.
  view_.View onCreateView(layoutinflater_.LayoutInflater inflater,
          viewgroup_.ViewGroup container, bundle_.Bundle savedInstanceState) =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_onCreateView, jni.JniType.objectType, [
        inflater.reference,
        container.reference,
        savedInstanceState.reference
      ]).object);

  static final _id_onViewCreated = jniAccessors.getMethodIDOf(
      _classRef, "onViewCreated", "(Landroid/view/View;Landroid/os/Bundle;)V");

  /// from: public void onViewCreated(android.view.View view, android.os.Bundle savedInstanceState)
  ///
  /// @param savedInstanceState This value may be {@code null}.
  void onViewCreated(view_.View view, bundle_.Bundle savedInstanceState) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onViewCreated,
          jni.JniType.voidType,
          [view.reference, savedInstanceState.reference]).check();

  static final _id_onActivityCreated = jniAccessors.getMethodIDOf(
      _classRef, "onActivityCreated", "(Landroid/os/Bundle;)V");

  /// from: public void onActivityCreated(android.os.Bundle savedInstanceState)
  ///
  /// @param savedInstanceState This value may be {@code null}.
  void onActivityCreated(bundle_.Bundle savedInstanceState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onActivityCreated,
          jni.JniType.voidType, [savedInstanceState.reference]).check();

  static final _id_onStart =
      jniAccessors.getMethodIDOf(_classRef, "onStart", "()V");

  /// from: public void onStart()
  void onStart() => jniAccessors.callMethodWithArgs(
      reference, _id_onStart, jni.JniType.voidType, []).check();

  static final _id_onStop =
      jniAccessors.getMethodIDOf(_classRef, "onStop", "()V");

  /// from: public void onStop()
  void onStop() => jniAccessors.callMethodWithArgs(
      reference, _id_onStop, jni.JniType.voidType, []).check();

  static final _id_onDestroyView =
      jniAccessors.getMethodIDOf(_classRef, "onDestroyView", "()V");

  /// from: public void onDestroyView()
  void onDestroyView() => jniAccessors.callMethodWithArgs(
      reference, _id_onDestroyView, jni.JniType.voidType, []).check();

  static final _id_onDestroy =
      jniAccessors.getMethodIDOf(_classRef, "onDestroy", "()V");

  /// from: public void onDestroy()
  void onDestroy() => jniAccessors.callMethodWithArgs(
      reference, _id_onDestroy, jni.JniType.voidType, []).check();

  static final _id_onSaveInstanceState = jniAccessors.getMethodIDOf(
      _classRef, "onSaveInstanceState", "(Landroid/os/Bundle;)V");

  /// from: public void onSaveInstanceState(android.os.Bundle outState)
  void onSaveInstanceState(bundle_.Bundle outState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSaveInstanceState,
          jni.JniType.voidType, [outState.reference]).check();

  static final _id_onActivityResult = jniAccessors.getMethodIDOf(
      _classRef, "onActivityResult", "(IILandroid/content/Intent;)V");

  /// from: public void onActivityResult(int requestCode, int resultCode, android.content.Intent data)
  void onActivityResult(int requestCode, int resultCode, intent_.Intent data) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onActivityResult,
          jni.JniType.voidType,
          [requestCode, resultCode, data.reference]).check();

  static final _id_getPreferenceManager = jniAccessors.getMethodIDOf(_classRef,
      "getPreferenceManager", "()Landroid/preference/PreferenceManager;");

  /// from: public android.preference.PreferenceManager getPreferenceManager()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the PreferenceManager used by this fragment.
  ///@return The PreferenceManager.
  preferencemanager_.PreferenceManager getPreferenceManager() =>
      preferencemanager_.PreferenceManager.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getPreferenceManager,
              jni.JniType.objectType, []).object);

  static final _id_setPreferenceScreen = jniAccessors.getMethodIDOf(_classRef,
      "setPreferenceScreen", "(Landroid/preference/PreferenceScreen;)V");

  /// from: public void setPreferenceScreen(android.preference.PreferenceScreen preferenceScreen)
  ///
  /// Sets the root of the preference hierarchy that this fragment is showing.
  ///@param preferenceScreen The root PreferenceScreen of the preference hierarchy.
  void setPreferenceScreen(
          preferencescreen_.PreferenceScreen preferenceScreen) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPreferenceScreen,
          jni.JniType.voidType, [preferenceScreen.reference]).check();

  static final _id_getPreferenceScreen = jniAccessors.getMethodIDOf(_classRef,
      "getPreferenceScreen", "()Landroid/preference/PreferenceScreen;");

  /// from: public android.preference.PreferenceScreen getPreferenceScreen()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the root of the preference hierarchy that this fragment is showing.
  ///@return The PreferenceScreen that is the root of the preference
  ///         hierarchy.
  preferencescreen_.PreferenceScreen getPreferenceScreen() =>
      preferencescreen_.PreferenceScreen.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getPreferenceScreen,
              jni.JniType.objectType, []).object);

  static final _id_addPreferencesFromIntent = jniAccessors.getMethodIDOf(
      _classRef, "addPreferencesFromIntent", "(Landroid/content/Intent;)V");

  /// from: public void addPreferencesFromIntent(android.content.Intent intent)
  ///
  /// Adds preferences from activities that match the given Intent.
  ///@param intent The Intent to query activities.
  void addPreferencesFromIntent(intent_.Intent intent) =>
      jniAccessors.callMethodWithArgs(reference, _id_addPreferencesFromIntent,
          jni.JniType.voidType, [intent.reference]).check();

  static final _id_addPreferencesFromResource = jniAccessors.getMethodIDOf(
      _classRef, "addPreferencesFromResource", "(I)V");

  /// from: public void addPreferencesFromResource(int preferencesResId)
  ///
  /// Inflates the given XML resource and adds the preference hierarchy to the current
  /// preference hierarchy.
  ///@param preferencesResId The XML resource ID to inflate.
  void addPreferencesFromResource(int preferencesResId) =>
      jniAccessors.callMethodWithArgs(reference, _id_addPreferencesFromResource,
          jni.JniType.voidType, [preferencesResId]).check();

  static final _id_onPreferenceTreeClick = jniAccessors.getMethodIDOf(
      _classRef,
      "onPreferenceTreeClick",
      "(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z");

  /// from: public boolean onPreferenceTreeClick(android.preference.PreferenceScreen preferenceScreen, android.preference.Preference preference)
  ///
  /// {@inheritDoc}
  bool onPreferenceTreeClick(
          preferencescreen_.PreferenceScreen preferenceScreen,
          preference_.Preference preference) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onPreferenceTreeClick,
          jni.JniType.booleanType,
          [preferenceScreen.reference, preference.reference]).boolean;

  static final _id_findPreference = jniAccessors.getMethodIDOf(
      _classRef,
      "findPreference",
      "(Ljava/lang/CharSequence;)Landroid/preference/Preference;");

  /// from: public android.preference.Preference findPreference(java.lang.CharSequence key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Finds a Preference based on its key.
  ///@param key The key of the preference to retrieve.
  ///@return The Preference with the key, or null.
  ///@see PreferenceGroup\#findPreference(CharSequence)
  preference_.Preference findPreference(jni.JniObject key) =>
      preference_.Preference.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_findPreference, jni.JniType.objectType, [key.reference]).object);
}

/// from: android.preference.PreferenceFragment$OnPreferenceStartFragmentCallback
///
/// Interface that PreferenceFragment's containing activity should
/// implement to be able to process preference items that wish to
/// switch to a new fragment.
///@deprecated Use android.support.v7.preference.PreferenceFragmentCompat.OnPreferenceStartFragmentCallback
class PreferenceFragment_OnPreferenceStartFragmentCallback
    extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/preference/PreferenceFragment\$OnPreferenceStartFragmentCallback");
  PreferenceFragment_OnPreferenceStartFragmentCallback.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onPreferenceStartFragment = jniAccessors.getMethodIDOf(
      _classRef,
      "onPreferenceStartFragment",
      "(Landroid/preference/PreferenceFragment;Landroid/preference/Preference;)Z");

  /// from: public abstract boolean onPreferenceStartFragment(android.preference.PreferenceFragment caller, android.preference.Preference pref)
  ///
  /// Called when the user has clicked on a Preference that has
  /// a fragment class name associated with it.  The implementation
  /// to should instantiate and switch to an instance of the given
  /// fragment.
  bool onPreferenceStartFragment(
          PreferenceFragment caller, preference_.Preference pref) =>
      jniAccessors.callMethodWithArgs(reference, _id_onPreferenceStartFragment,
          jni.JniType.booleanType, [caller.reference, pref.reference]).boolean;
}
