// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "DialogPreference.dart" as dialogpreference_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../view/View.dart" as view_;

import "../widget/EditText.dart" as edittext_;

import "../content/res/TypedArray.dart" as typedarray_;

import "../os/Parcelable.dart" as parcelable_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.preference.EditTextPreference
///
/// A Preference that allows for string
/// input.
///
/// It is a subclass of DialogPreference and shows the EditText
/// in a dialog. This EditText can be modified either programmatically
/// via \#getEditText(), or through XML by setting any EditText
/// attributes on the EditTextPreference.
///
/// This preference will store a string into the SharedPreferences.
///
/// See android.R.styleable\#EditText EditText Attributes.
class EditTextPreference extends dialogpreference_.DialogPreference {
  static final _classRef =
      jniAccessors.getClassOf("android/preference/EditTextPreference");
  EditTextPreference.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  EditTextPreference(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  EditTextPreference.ctor1(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  EditTextPreference.ctor2(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [context.reference, attrs.reference]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  EditTextPreference.ctor3(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor3, [context.reference]).object);

  static final _id_setText =
      jniAccessors.getMethodIDOf(_classRef, "setText", "(Ljava/lang/String;)V");

  /// from: public void setText(java.lang.String text)
  ///
  /// Saves the text to the SharedPreferences.
  ///@param text The text to save
  void setText(jni.JniString text) => jniAccessors.callMethodWithArgs(
      reference, _id_setText, jni.JniType.voidType, [text.reference]).check();

  static final _id_getText =
      jniAccessors.getMethodIDOf(_classRef, "getText", "()Ljava/lang/String;");

  /// from: public java.lang.String getText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the text from the SharedPreferences.
  ///@return The current preference value.
  jni.JniString getText() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText, jni.JniType.objectType, []).object);

  static final _id_onBindDialogView = jniAccessors.getMethodIDOf(
      _classRef, "onBindDialogView", "(Landroid/view/View;)V");

  /// from: protected void onBindDialogView(android.view.View view)
  void onBindDialogView(view_.View view) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onBindDialogView,
      jni.JniType.voidType,
      [view.reference]).check();

  static final _id_onAddEditTextToDialogView = jniAccessors.getMethodIDOf(
      _classRef,
      "onAddEditTextToDialogView",
      "(Landroid/view/View;Landroid/widget/EditText;)V");

  /// from: protected void onAddEditTextToDialogView(android.view.View dialogView, android.widget.EditText editText)
  ///
  /// Adds the EditText widget of this preference to the dialog's view.
  ///@param dialogView The dialog view.
  void onAddEditTextToDialogView(
          view_.View dialogView, edittext_.EditText editText) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onAddEditTextToDialogView,
          jni.JniType.voidType,
          [dialogView.reference, editText.reference]).check();

  static final _id_onDialogClosed =
      jniAccessors.getMethodIDOf(_classRef, "onDialogClosed", "(Z)V");

  /// from: protected void onDialogClosed(boolean positiveResult)
  void onDialogClosed(bool positiveResult) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onDialogClosed,
      jni.JniType.voidType,
      [positiveResult]).check();

  static final _id_onGetDefaultValue1 = jniAccessors.getMethodIDOf(
      _classRef,
      "onGetDefaultValue",
      "(Landroid/content/res/TypedArray;I)Ljava/lang/Object;");

  /// from: protected java.lang.Object onGetDefaultValue(android.content.res.TypedArray a, int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onGetDefaultValue1(typedarray_.TypedArray a, int index) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_onGetDefaultValue1,
          jni.JniType.objectType,
          [a.reference, index]).object);

  static final _id_onSetInitialValue1 = jniAccessors.getMethodIDOf(
      _classRef, "onSetInitialValue", "(ZLjava/lang/Object;)V");

  /// from: protected void onSetInitialValue(boolean restoreValue, java.lang.Object defaultValue)
  void onSetInitialValue1(bool restoreValue, jni.JniObject defaultValue) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSetInitialValue1,
          jni.JniType.voidType, [restoreValue, defaultValue.reference]).check();

  static final _id_shouldDisableDependents1 =
      jniAccessors.getMethodIDOf(_classRef, "shouldDisableDependents", "()Z");

  /// from: public boolean shouldDisableDependents()
  bool shouldDisableDependents1() => jniAccessors.callMethodWithArgs(reference,
      _id_shouldDisableDependents1, jni.JniType.booleanType, []).boolean;

  static final _id_getEditText = jniAccessors.getMethodIDOf(
      _classRef, "getEditText", "()Landroid/widget/EditText;");

  /// from: public android.widget.EditText getEditText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the EditText widget that will be shown in the dialog.
  ///@return The EditText widget that will be shown in the dialog.
  edittext_.EditText getEditText() =>
      edittext_.EditText.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getEditText, jni.JniType.objectType, []).object);

  static final _id_onSaveInstanceState = jniAccessors.getMethodIDOf(
      _classRef, "onSaveInstanceState", "()Landroid/os/Parcelable;");

  /// from: protected android.os.Parcelable onSaveInstanceState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  parcelable_.Parcelable onSaveInstanceState() =>
      parcelable_.Parcelable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onSaveInstanceState, jni.JniType.objectType, []).object);

  static final _id_onRestoreInstanceState = jniAccessors.getMethodIDOf(
      _classRef, "onRestoreInstanceState", "(Landroid/os/Parcelable;)V");

  /// from: protected void onRestoreInstanceState(android.os.Parcelable state)
  void onRestoreInstanceState(parcelable_.Parcelable state) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRestoreInstanceState,
          jni.JniType.voidType, [state.reference]).check();
}
