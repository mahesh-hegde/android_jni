// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../app/ListActivity.dart" as listactivity_;

import "../view/MenuItem.dart" as menuitem_;

import "../os/Bundle.dart" as bundle_;

import "../view/View.dart" as view_;

import "../content/Intent.dart" as intent_;

import "../widget/ListView.dart" as listview_;

import "../app/Fragment.dart" as fragment_;

import "PreferenceFragment.dart" as preferencefragment_;

import "Preference.dart" as preference_;

import "PreferenceManager.dart" as preferencemanager_;

import "PreferenceScreen.dart" as preferencescreen_;

import "../os/Parcelable.dart" as parcelable_;

import "../content/res/Resources.dart" as resources_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.preference.PreferenceActivity
///
/// This is the base class for an activity to show a hierarchy of preferences
/// to the user.  Prior to android.os.Build.VERSION_CODES\#HONEYCOMB
/// this class only allowed the display of a single set of preference; this
/// functionality should now be found in the new PreferenceFragment
/// class.  If you are using PreferenceActivity in its old mode, the documentation
/// there applies to the deprecated APIs here.
///
/// This activity shows one or more headers of preferences, each of which
/// is associated with a PreferenceFragment to display the preferences
/// of that header.  The actual layout and display of these associations can
/// however vary; currently there are two major approaches it may take:
///
/// <ul>
/// <li>On a small screen it may display only the headers as a single list when first launched.
/// Selecting one of the header items will only show the PreferenceFragment of that header (on
/// Android N and lower a new Activity is launched).
/// <li>On a large screen in may display both the headers and current PreferenceFragment together as
/// panes. Selecting a header item switches to showing the correct PreferenceFragment for that item.
/// </ul>
///
/// Subclasses of PreferenceActivity should implement
/// \#onBuildHeaders to populate the header list with the desired
/// items.  Doing this implicitly switches the class into its new "headers
/// + fragments" mode rather than the old style of just showing a single
/// preferences list.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For information about using {@code PreferenceActivity},
/// read the <a href="{@docRoot}guide/topics/ui/settings.html">Settings</a>
/// guide.
///
/// </div>
///
/// <a name="SampleCode"></a>
/// <h3>Sample Code</h3>
///
/// The following sample code shows a simple preference activity that
/// has two different sets of preferences.  The implementation, consisting
/// of the activity itself as well as its two preference fragments is:
///
///
/// {@sample development/samples/ApiDemos/src/com/example/android/apis/preference/PreferenceWithHeaders.java
///      activity}
///
/// The preference_headers resource describes the headers to be displayed
/// and the fragments associated with them.  It is:
///
/// {@sample development/samples/ApiDemos/res/xml/preference_headers.xml headers}
///
/// The first header is shown by Prefs1Fragment, which populates itself
/// from the following XML resource:
///
///
/// {@sample development/samples/ApiDemos/res/xml/fragmented_preferences.xml preferences}
///
/// Note that this XML resource contains a preference screen holding another
/// fragment, the Prefs1FragmentInner implemented here.  This allows the user
/// to traverse down a hierarchy of preferences; pressing back will pop each
/// fragment off the stack to return to the previous preferences.
///
/// See PreferenceFragment for information on implementing the
/// fragments themselves.
class PreferenceActivity extends listactivity_.ListActivity {
  static final _classRef =
      jniAccessors.getClassOf("android/preference/PreferenceActivity");
  PreferenceActivity.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String EXTRA_NO_HEADERS
  ///
  /// When starting this activity, the invoking Intent can contain this extra
  /// boolean that the header list should not be displayed.  This is most often
  /// used in conjunction with \#EXTRA_SHOW_FRAGMENT to launch
  /// the activity to display a specific fragment that the user has navigated
  /// to.
  static const EXTRA_NO_HEADERS = ":android:no_headers";

  /// from: static public final java.lang.String EXTRA_SHOW_FRAGMENT
  ///
  /// When starting this activity, the invoking Intent can contain this extra
  /// string to specify which fragment should be initially displayed.
  /// <p/>Starting from Key Lime Pie, when this argument is passed in, the PreferenceActivity
  /// will call isValidFragment() to confirm that the fragment class name is valid for this
  /// activity.
  static const EXTRA_SHOW_FRAGMENT = ":android:show_fragment";

  /// from: static public final java.lang.String EXTRA_SHOW_FRAGMENT_ARGUMENTS
  ///
  /// When starting this activity and using \#EXTRA_SHOW_FRAGMENT,
  /// this extra can also be specified to supply a Bundle of arguments to pass
  /// to that fragment when it is instantiated during the initial creation
  /// of PreferenceActivity.
  static const EXTRA_SHOW_FRAGMENT_ARGUMENTS = ":android:show_fragment_args";

  /// from: static public final java.lang.String EXTRA_SHOW_FRAGMENT_SHORT_TITLE
  ///
  /// When starting this activity and using \#EXTRA_SHOW_FRAGMENT,
  /// this extra can also be specify to supply the short title to be shown for
  /// that fragment.
  static const EXTRA_SHOW_FRAGMENT_SHORT_TITLE =
      ":android:show_fragment_short_title";

  /// from: static public final java.lang.String EXTRA_SHOW_FRAGMENT_TITLE
  ///
  /// When starting this activity and using \#EXTRA_SHOW_FRAGMENT,
  /// this extra can also be specify to supply the title to be shown for
  /// that fragment.
  static const EXTRA_SHOW_FRAGMENT_TITLE = ":android:show_fragment_title";

  /// from: static public final long HEADER_ID_UNDEFINED
  ///
  /// Default value for Header\#id Header.id indicating that no
  /// identifier value is set.  All other values (including those below -1)
  /// are valid.
  static const HEADER_ID_UNDEFINED = -1;

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PreferenceActivity.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_onOptionsItemSelected1 = jniAccessors.getMethodIDOf(
      _classRef, "onOptionsItemSelected", "(Landroid/view/MenuItem;)Z");

  /// from: public boolean onOptionsItemSelected(android.view.MenuItem item)
  bool onOptionsItemSelected1(menuitem_.MenuItem item) =>
      jniAccessors.callMethodWithArgs(reference, _id_onOptionsItemSelected1,
          jni.JniType.booleanType, [item.reference]).boolean;

  static final _id_onCreate2 = jniAccessors.getMethodIDOf(
      _classRef, "onCreate", "(Landroid/os/Bundle;)V");

  /// from: protected void onCreate(android.os.Bundle savedInstanceState)
  ///
  /// @param savedInstanceState This value may be {@code null}.
  void onCreate2(bundle_.Bundle savedInstanceState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCreate2,
          jni.JniType.voidType, [savedInstanceState.reference]).check();

  static final _id_onBackPressed1 =
      jniAccessors.getMethodIDOf(_classRef, "onBackPressed", "()V");

  /// from: public void onBackPressed()
  void onBackPressed1() => jniAccessors.callMethodWithArgs(
      reference, _id_onBackPressed1, jni.JniType.voidType, []).check();

  static final _id_hasHeaders =
      jniAccessors.getMethodIDOf(_classRef, "hasHeaders", "()Z");

  /// from: public boolean hasHeaders()
  ///
  /// Returns true if this activity is currently showing the header list.
  bool hasHeaders() => jniAccessors.callMethodWithArgs(
      reference, _id_hasHeaders, jni.JniType.booleanType, []).boolean;

  static final _id_isMultiPane =
      jniAccessors.getMethodIDOf(_classRef, "isMultiPane", "()Z");

  /// from: public boolean isMultiPane()
  ///
  /// Returns true if this activity is showing multiple panes -- the headers
  /// and a preference fragment.
  bool isMultiPane() => jniAccessors.callMethodWithArgs(
      reference, _id_isMultiPane, jni.JniType.booleanType, []).boolean;

  static final _id_onIsMultiPane =
      jniAccessors.getMethodIDOf(_classRef, "onIsMultiPane", "()Z");

  /// from: public boolean onIsMultiPane()
  ///
  /// Called to determine if the activity should run in multi-pane mode.
  /// The default implementation returns true if the screen is large
  /// enough.
  bool onIsMultiPane() => jniAccessors.callMethodWithArgs(
      reference, _id_onIsMultiPane, jni.JniType.booleanType, []).boolean;

  static final _id_onIsHidingHeaders =
      jniAccessors.getMethodIDOf(_classRef, "onIsHidingHeaders", "()Z");

  /// from: public boolean onIsHidingHeaders()
  ///
  /// Called to determine whether the header list should be hidden.
  /// The default implementation returns the
  /// value given in \#EXTRA_NO_HEADERS or false if it is not supplied.
  /// This is set to false, for example, when the activity is being re-launched
  /// to show a particular preference activity.
  bool onIsHidingHeaders() => jniAccessors.callMethodWithArgs(
      reference, _id_onIsHidingHeaders, jni.JniType.booleanType, []).boolean;

  static final _id_onGetInitialHeader = jniAccessors.getMethodIDOf(
      _classRef,
      "onGetInitialHeader",
      "()Landroid/preference/PreferenceActivity\$Header;");

  /// from: public android.preference.PreferenceActivity.Header onGetInitialHeader()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Called to determine the initial header to be shown.  The default
  /// implementation simply returns the fragment of the first header.  Note
  /// that the returned Header object does not actually need to exist in
  /// your header list -- whatever its fragment is will simply be used to
  /// show for the initial UI.
  PreferenceActivity_Header onGetInitialHeader() =>
      PreferenceActivity_Header.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_onGetInitialHeader,
          jni.JniType.objectType, []).object);

  static final _id_onGetNewHeader = jniAccessors.getMethodIDOf(_classRef,
      "onGetNewHeader", "()Landroid/preference/PreferenceActivity\$Header;");

  /// from: public android.preference.PreferenceActivity.Header onGetNewHeader()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Called after the header list has been updated (\#onBuildHeaders
  /// has been called and returned due to \#invalidateHeaders()) to
  /// specify the header that should now be selected.  The default implementation
  /// returns null to keep whatever header is currently selected.
  PreferenceActivity_Header onGetNewHeader() =>
      PreferenceActivity_Header.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_onGetNewHeader, jni.JniType.objectType, []).object);

  static final _id_onBuildHeaders = jniAccessors.getMethodIDOf(
      _classRef, "onBuildHeaders", "(Ljava/util/List;)V");

  /// from: public void onBuildHeaders(java.util.List<android.preference.PreferenceActivity.Header> target)
  ///
  /// Called when the activity needs its list of headers build.  By
  /// implementing this and adding at least one item to the list, you
  /// will cause the activity to run in its modern fragment mode.  Note
  /// that this function may not always be called; for example, if the
  /// activity has been asked to display a particular fragment without
  /// the header list, there is no need to build the headers.
  ///
  /// Typical implementations will use \#loadHeadersFromResource
  /// to fill in the list from a resource.
  ///@param target The list in which to place the headers.
  void onBuildHeaders(jni.JniObject target) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onBuildHeaders,
      jni.JniType.voidType,
      [target.reference]).check();

  static final _id_invalidateHeaders =
      jniAccessors.getMethodIDOf(_classRef, "invalidateHeaders", "()V");

  /// from: public void invalidateHeaders()
  ///
  /// Call when you need to change the headers being displayed.  Will result
  /// in onBuildHeaders() later being called to retrieve the new list.
  void invalidateHeaders() => jniAccessors.callMethodWithArgs(
      reference, _id_invalidateHeaders, jni.JniType.voidType, []).check();

  static final _id_loadHeadersFromResource = jniAccessors.getMethodIDOf(
      _classRef, "loadHeadersFromResource", "(ILjava/util/List;)V");

  /// from: public void loadHeadersFromResource(int resid, java.util.List<android.preference.PreferenceActivity.Header> target)
  ///
  /// Parse the given XML file as a header description, adding each
  /// parsed Header into the target list.
  ///@param resid The XML resource to load and parse.
  ///@param target The list in which the parsed headers should be placed.
  void loadHeadersFromResource(int resid, jni.JniObject target) =>
      jniAccessors.callMethodWithArgs(reference, _id_loadHeadersFromResource,
          jni.JniType.voidType, [resid, target.reference]).check();

  static final _id_isValidFragment = jniAccessors.getMethodIDOf(
      _classRef, "isValidFragment", "(Ljava/lang/String;)Z");

  /// from: protected boolean isValidFragment(java.lang.String fragmentName)
  ///
  /// Subclasses should override this method and verify that the given fragment is a valid type
  /// to be attached to this activity. The default implementation returns <code>true</code> for
  /// apps built for <code>android:targetSdkVersion</code> older than
  /// android.os.Build.VERSION_CODES\#KITKAT. For later versions, it will throw an exception.
  ///@param fragmentName the class name of the Fragment about to be attached to this activity.
  ///@return true if the fragment class name is valid for this Activity and false otherwise.
  bool isValidFragment(jni.JniString fragmentName) =>
      jniAccessors.callMethodWithArgs(reference, _id_isValidFragment,
          jni.JniType.booleanType, [fragmentName.reference]).boolean;

  static final _id_setListFooter = jniAccessors.getMethodIDOf(
      _classRef, "setListFooter", "(Landroid/view/View;)V");

  /// from: public void setListFooter(android.view.View view)
  ///
  /// Set a footer that should be shown at the bottom of the header list.
  void setListFooter(view_.View view) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setListFooter,
      jni.JniType.voidType,
      [view.reference]).check();

  static final _id_onStop1 =
      jniAccessors.getMethodIDOf(_classRef, "onStop", "()V");

  /// from: protected void onStop()
  void onStop1() => jniAccessors.callMethodWithArgs(
      reference, _id_onStop1, jni.JniType.voidType, []).check();

  static final _id_onDestroy =
      jniAccessors.getMethodIDOf(_classRef, "onDestroy", "()V");

  /// from: protected void onDestroy()
  void onDestroy() => jniAccessors.callMethodWithArgs(
      reference, _id_onDestroy, jni.JniType.voidType, []).check();

  static final _id_onSaveInstanceState2 = jniAccessors.getMethodIDOf(
      _classRef, "onSaveInstanceState", "(Landroid/os/Bundle;)V");

  /// from: protected void onSaveInstanceState(android.os.Bundle outState)
  void onSaveInstanceState2(bundle_.Bundle outState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSaveInstanceState2,
          jni.JniType.voidType, [outState.reference]).check();

  static final _id_onRestoreInstanceState = jniAccessors.getMethodIDOf(
      _classRef, "onRestoreInstanceState", "(Landroid/os/Bundle;)V");

  /// from: protected void onRestoreInstanceState(android.os.Bundle state)
  void onRestoreInstanceState(bundle_.Bundle state) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRestoreInstanceState,
          jni.JniType.voidType, [state.reference]).check();

  static final _id_onActivityResult1 = jniAccessors.getMethodIDOf(
      _classRef, "onActivityResult", "(IILandroid/content/Intent;)V");

  /// from: protected void onActivityResult(int requestCode, int resultCode, android.content.Intent data)
  void onActivityResult1(
          int requestCode, int resultCode, intent_.Intent data) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onActivityResult1,
          jni.JniType.voidType,
          [requestCode, resultCode, data.reference]).check();

  static final _id_onContentChanged =
      jniAccessors.getMethodIDOf(_classRef, "onContentChanged", "()V");

  /// from: public void onContentChanged()
  void onContentChanged() => jniAccessors.callMethodWithArgs(
      reference, _id_onContentChanged, jni.JniType.voidType, []).check();

  static final _id_onListItemClick = jniAccessors.getMethodIDOf(_classRef,
      "onListItemClick", "(Landroid/widget/ListView;Landroid/view/View;IJ)V");

  /// from: protected void onListItemClick(android.widget.ListView l, android.view.View v, int position, long id)
  void onListItemClick(
          listview_.ListView l, view_.View v, int position, int id) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onListItemClick,
          jni.JniType.voidType,
          [l.reference, v.reference, position, id]).check();

  static final _id_onHeaderClick = jniAccessors.getMethodIDOf(_classRef,
      "onHeaderClick", "(Landroid/preference/PreferenceActivity\$Header;I)V");

  /// from: public void onHeaderClick(android.preference.PreferenceActivity.Header header, int position)
  ///
  /// Called when the user selects an item in the header list.  The default
  /// implementation will call either
  /// \#startWithFragment(String, Bundle, Fragment, int, int, int)
  /// or \#switchToHeader(Header) as appropriate.
  ///@param header The header that was selected.
  ///@param position The header's position in the list.
  void onHeaderClick(PreferenceActivity_Header header, int position) =>
      jniAccessors.callMethodWithArgs(reference, _id_onHeaderClick,
          jni.JniType.voidType, [header.reference, position]).check();

  static final _id_onBuildStartFragmentIntent = jniAccessors.getMethodIDOf(
      _classRef,
      "onBuildStartFragmentIntent",
      "(Ljava/lang/String;Landroid/os/Bundle;II)Landroid/content/Intent;");

  /// from: public android.content.Intent onBuildStartFragmentIntent(java.lang.String fragmentName, android.os.Bundle args, int titleRes, int shortTitleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Called by \#startWithFragment(String, Bundle, Fragment, int, int, int) when
  /// in single-pane mode, to build an Intent to launch a new activity showing
  /// the selected fragment.  The default implementation constructs an Intent
  /// that re-launches the current activity with the appropriate arguments to
  /// display the fragment.
  ///@param fragmentName The name of the fragment to display.
  ///@param args Optional arguments to supply to the fragment.
  ///@param titleRes Optional resource ID of title to show for this item.
  ///@param shortTitleRes Optional resource ID of short title to show for this item.
  ///@return Returns an Intent that can be launched to display the given
  /// fragment.
  intent_.Intent onBuildStartFragmentIntent(jni.JniString fragmentName,
          bundle_.Bundle args, int titleRes, int shortTitleRes) =>
      intent_.Intent.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_onBuildStartFragmentIntent, jni.JniType.objectType, [
        fragmentName.reference,
        args.reference,
        titleRes,
        shortTitleRes
      ]).object);

  static final _id_startWithFragment = jniAccessors.getMethodIDOf(
      _classRef,
      "startWithFragment",
      "(Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Fragment;I)V");

  /// from: public void startWithFragment(java.lang.String fragmentName, android.os.Bundle args, android.app.Fragment resultTo, int resultRequestCode)
  ///
  /// Like \#startWithFragment(String, Bundle, Fragment, int, int, int)
  /// but uses a 0 titleRes.
  void startWithFragment(jni.JniString fragmentName, bundle_.Bundle args,
          fragment_.Fragment resultTo, int resultRequestCode) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_startWithFragment, jni.JniType.voidType, [
        fragmentName.reference,
        args.reference,
        resultTo.reference,
        resultRequestCode
      ]).check();

  static final _id_startWithFragment1 = jniAccessors.getMethodIDOf(
      _classRef,
      "startWithFragment",
      "(Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Fragment;III)V");

  /// from: public void startWithFragment(java.lang.String fragmentName, android.os.Bundle args, android.app.Fragment resultTo, int resultRequestCode, int titleRes, int shortTitleRes)
  ///
  /// Start a new instance of this activity, showing only the given
  /// preference fragment.  When launched in this mode, the header list
  /// will be hidden and the given preference fragment will be instantiated
  /// and fill the entire activity.
  ///@param fragmentName The name of the fragment to display.
  ///@param args Optional arguments to supply to the fragment.
  ///@param resultTo Option fragment that should receive the result of
  /// the activity launch.
  ///@param resultRequestCode If resultTo is non-null, this is the request
  /// code in which to report the result.
  ///@param titleRes Resource ID of string to display for the title of
  /// this set of preferences.
  ///@param shortTitleRes Resource ID of string to display for the short title of
  /// this set of preferences.
  void startWithFragment1(
          jni.JniString fragmentName,
          bundle_.Bundle args,
          fragment_.Fragment resultTo,
          int resultRequestCode,
          int titleRes,
          int shortTitleRes) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_startWithFragment1, jni.JniType.voidType, [
        fragmentName.reference,
        args.reference,
        resultTo.reference,
        resultRequestCode,
        titleRes,
        shortTitleRes
      ]).check();

  static final _id_showBreadCrumbs = jniAccessors.getMethodIDOf(_classRef,
      "showBreadCrumbs", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");

  /// from: public void showBreadCrumbs(java.lang.CharSequence title, java.lang.CharSequence shortTitle)
  ///
  /// Change the base title of the bread crumbs for the current preferences.
  /// This will normally be called for you.  See
  /// android.app.FragmentBreadCrumbs for more information.
  void showBreadCrumbs(jni.JniObject title, jni.JniObject shortTitle) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_showBreadCrumbs,
          jni.JniType.voidType,
          [title.reference, shortTitle.reference]).check();

  static final _id_setParentTitle = jniAccessors.getMethodIDOf(
      _classRef,
      "setParentTitle",
      "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/view/View\$OnClickListener;)V");

  /// from: public void setParentTitle(java.lang.CharSequence title, java.lang.CharSequence shortTitle, android.view.View.OnClickListener listener)
  ///
  /// Should be called after onCreate to ensure that the breadcrumbs, if any, were created.
  /// This prepends a title to the fragment breadcrumbs and attaches a listener to any clicks
  /// on the parent entry.
  ///@param title the title for the breadcrumb
  ///@param shortTitle the short title for the breadcrumb
  void setParentTitle(jni.JniObject title, jni.JniObject shortTitle,
          view_.View_OnClickListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setParentTitle,
          jni.JniType.voidType,
          [title.reference, shortTitle.reference, listener.reference]).check();

  static final _id_switchToHeader = jniAccessors.getMethodIDOf(
      _classRef, "switchToHeader", "(Ljava/lang/String;Landroid/os/Bundle;)V");

  /// from: public void switchToHeader(java.lang.String fragmentName, android.os.Bundle args)
  ///
  /// When in two-pane mode, switch the fragment pane to show the given
  /// preference fragment.
  ///@param fragmentName The name of the fragment to display.
  ///@param args Optional arguments to supply to the fragment.
  void switchToHeader(jni.JniString fragmentName, bundle_.Bundle args) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_switchToHeader,
          jni.JniType.voidType,
          [fragmentName.reference, args.reference]).check();

  static final _id_switchToHeader1 = jniAccessors.getMethodIDOf(_classRef,
      "switchToHeader", "(Landroid/preference/PreferenceActivity\$Header;)V");

  /// from: public void switchToHeader(android.preference.PreferenceActivity.Header header)
  ///
  /// When in two-pane mode, switch to the fragment pane to show the given
  /// preference fragment.
  ///@param header The new header to display.
  void switchToHeader1(PreferenceActivity_Header header) =>
      jniAccessors.callMethodWithArgs(reference, _id_switchToHeader1,
          jni.JniType.voidType, [header.reference]).check();

  static final _id_startPreferenceFragment = jniAccessors.getMethodIDOf(
      _classRef, "startPreferenceFragment", "(Landroid/app/Fragment;Z)V");

  /// from: public void startPreferenceFragment(android.app.Fragment fragment, boolean push)
  ///
  /// Start a new fragment.
  ///@param fragment The fragment to start
  ///@param push If true, the current fragment will be pushed onto the back stack.  If false,
  /// the current fragment will be replaced.
  void startPreferenceFragment(fragment_.Fragment fragment, bool push) =>
      jniAccessors.callMethodWithArgs(reference, _id_startPreferenceFragment,
          jni.JniType.voidType, [fragment.reference, push]).check();

  static final _id_startPreferencePanel = jniAccessors.getMethodIDOf(
      _classRef,
      "startPreferencePanel",
      "(Ljava/lang/String;Landroid/os/Bundle;ILjava/lang/CharSequence;Landroid/app/Fragment;I)V");

  /// from: public void startPreferencePanel(java.lang.String fragmentClass, android.os.Bundle args, int titleRes, java.lang.CharSequence titleText, android.app.Fragment resultTo, int resultRequestCode)
  ///
  /// Start a new fragment containing a preference panel.  If the preferences
  /// are being displayed in multi-pane mode, the given fragment class will
  /// be instantiated and placed in the appropriate pane.  If running in
  /// single-pane mode, a new activity will be launched in which to show the
  /// fragment.
  ///@param fragmentClass Full name of the class implementing the fragment.
  ///@param args Any desired arguments to supply to the fragment.
  ///@param titleRes Optional resource identifier of the title of this
  /// fragment.
  ///@param titleText Optional text of the title of this fragment.
  ///@param resultTo Optional fragment that result data should be sent to.
  /// If non-null, resultTo.onActivityResult() will be called when this
  /// preference panel is done.  The launched panel must use
  /// \#finishPreferencePanel(Fragment, int, Intent) when done.
  ///@param resultRequestCode If resultTo is non-null, this is the caller's
  /// request code to be received with the result.
  void startPreferencePanel(
          jni.JniString fragmentClass,
          bundle_.Bundle args,
          int titleRes,
          jni.JniObject titleText,
          fragment_.Fragment resultTo,
          int resultRequestCode) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_startPreferencePanel, jni.JniType.voidType, [
        fragmentClass.reference,
        args.reference,
        titleRes,
        titleText.reference,
        resultTo.reference,
        resultRequestCode
      ]).check();

  static final _id_finishPreferencePanel = jniAccessors.getMethodIDOf(
      _classRef,
      "finishPreferencePanel",
      "(Landroid/app/Fragment;ILandroid/content/Intent;)V");

  /// from: public void finishPreferencePanel(android.app.Fragment caller, int resultCode, android.content.Intent resultData)
  ///
  /// Called by a preference panel fragment to finish itself.
  ///@param caller The fragment that is asking to be finished.
  ///@param resultCode Optional result code to send back to the original
  /// launching fragment.
  ///@param resultData Optional result data to send back to the original
  /// launching fragment.
  void finishPreferencePanel(fragment_.Fragment caller, int resultCode,
          intent_.Intent resultData) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_finishPreferencePanel,
          jni.JniType.voidType,
          [caller.reference, resultCode, resultData.reference]).check();

  static final _id_onPreferenceStartFragment = jniAccessors.getMethodIDOf(
      _classRef,
      "onPreferenceStartFragment",
      "(Landroid/preference/PreferenceFragment;Landroid/preference/Preference;)Z");

  /// from: public boolean onPreferenceStartFragment(android.preference.PreferenceFragment caller, android.preference.Preference pref)
  bool onPreferenceStartFragment(preferencefragment_.PreferenceFragment caller,
          preference_.Preference pref) =>
      jniAccessors.callMethodWithArgs(reference, _id_onPreferenceStartFragment,
          jni.JniType.booleanType, [caller.reference, pref.reference]).boolean;

  static final _id_getPreferenceManager = jniAccessors.getMethodIDOf(_classRef,
      "getPreferenceManager", "()Landroid/preference/PreferenceManager;");

  /// from: public android.preference.PreferenceManager getPreferenceManager()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the PreferenceManager used by this activity.
  ///@return The PreferenceManager.
  ///@deprecated This function is not relevant for a modern fragment-based
  /// PreferenceActivity.
  preferencemanager_.PreferenceManager getPreferenceManager() =>
      preferencemanager_.PreferenceManager.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getPreferenceManager,
              jni.JniType.objectType, []).object);

  static final _id_setPreferenceScreen = jniAccessors.getMethodIDOf(_classRef,
      "setPreferenceScreen", "(Landroid/preference/PreferenceScreen;)V");

  /// from: public void setPreferenceScreen(android.preference.PreferenceScreen preferenceScreen)
  ///
  /// Sets the root of the preference hierarchy that this activity is showing.
  ///@param preferenceScreen The root PreferenceScreen of the preference hierarchy.
  ///@deprecated This function is not relevant for a modern fragment-based
  /// PreferenceActivity.
  void setPreferenceScreen(
          preferencescreen_.PreferenceScreen preferenceScreen) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPreferenceScreen,
          jni.JniType.voidType, [preferenceScreen.reference]).check();

  static final _id_getPreferenceScreen = jniAccessors.getMethodIDOf(_classRef,
      "getPreferenceScreen", "()Landroid/preference/PreferenceScreen;");

  /// from: public android.preference.PreferenceScreen getPreferenceScreen()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the root of the preference hierarchy that this activity is showing.
  ///@return The PreferenceScreen that is the root of the preference
  ///         hierarchy.
  ///@deprecated This function is not relevant for a modern fragment-based
  /// PreferenceActivity.
  preferencescreen_.PreferenceScreen getPreferenceScreen() =>
      preferencescreen_.PreferenceScreen.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getPreferenceScreen,
              jni.JniType.objectType, []).object);

  static final _id_addPreferencesFromIntent = jniAccessors.getMethodIDOf(
      _classRef, "addPreferencesFromIntent", "(Landroid/content/Intent;)V");

  /// from: public void addPreferencesFromIntent(android.content.Intent intent)
  ///
  /// Adds preferences from activities that match the given Intent.
  ///@param intent The Intent to query activities.
  ///@deprecated This function is not relevant for a modern fragment-based
  /// PreferenceActivity.
  void addPreferencesFromIntent(intent_.Intent intent) =>
      jniAccessors.callMethodWithArgs(reference, _id_addPreferencesFromIntent,
          jni.JniType.voidType, [intent.reference]).check();

  static final _id_addPreferencesFromResource = jniAccessors.getMethodIDOf(
      _classRef, "addPreferencesFromResource", "(I)V");

  /// from: public void addPreferencesFromResource(int preferencesResId)
  ///
  /// Inflates the given XML resource and adds the preference hierarchy to the current
  /// preference hierarchy.
  ///@param preferencesResId The XML resource ID to inflate.
  ///@deprecated This function is not relevant for a modern fragment-based
  /// PreferenceActivity.
  void addPreferencesFromResource(int preferencesResId) =>
      jniAccessors.callMethodWithArgs(reference, _id_addPreferencesFromResource,
          jni.JniType.voidType, [preferencesResId]).check();

  static final _id_onPreferenceTreeClick = jniAccessors.getMethodIDOf(
      _classRef,
      "onPreferenceTreeClick",
      "(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z");

  /// from: public boolean onPreferenceTreeClick(android.preference.PreferenceScreen preferenceScreen, android.preference.Preference preference)
  ///
  /// {@inheritDoc}
  ///@deprecated This function is not relevant for a modern fragment-based
  /// PreferenceActivity.
  bool onPreferenceTreeClick(
          preferencescreen_.PreferenceScreen preferenceScreen,
          preference_.Preference preference) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onPreferenceTreeClick,
          jni.JniType.booleanType,
          [preferenceScreen.reference, preference.reference]).boolean;

  static final _id_findPreference = jniAccessors.getMethodIDOf(
      _classRef,
      "findPreference",
      "(Ljava/lang/CharSequence;)Landroid/preference/Preference;");

  /// from: public android.preference.Preference findPreference(java.lang.CharSequence key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Finds a Preference based on its key.
  ///@param key The key of the preference to retrieve.
  ///@return The Preference with the key, or null.
  ///@see PreferenceGroup\#findPreference(CharSequence)
  ///@deprecated This function is not relevant for a modern fragment-based
  /// PreferenceActivity.
  preference_.Preference findPreference(jni.JniObject key) =>
      preference_.Preference.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_findPreference, jni.JniType.objectType, [key.reference]).object);

  static final _id_onNewIntent1 = jniAccessors.getMethodIDOf(
      _classRef, "onNewIntent", "(Landroid/content/Intent;)V");

  /// from: protected void onNewIntent(android.content.Intent intent)
  void onNewIntent1(intent_.Intent intent) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onNewIntent1,
      jni.JniType.voidType,
      [intent.reference]).check();
}

/// from: android.preference.PreferenceActivity$Header
///
/// Description of a single Header item that the user can select.
class PreferenceActivity_Header extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/preference/PreferenceActivity\$Header");
  PreferenceActivity_Header.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.preference.PreferenceActivity.Header> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_breadCrumbShortTitle = jniAccessors.getFieldIDOf(
      _classRef, "breadCrumbShortTitle", "Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence breadCrumbShortTitle
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Optional text to show as the short title in the bread crumb.
  ///@attr ref android.R.styleable\#PreferenceHeader_breadCrumbShortTitle
  jni.JniObject get breadCrumbShortTitle => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_breadCrumbShortTitle, jni.JniType.objectType)
      .object);

  /// from: public java.lang.CharSequence breadCrumbShortTitle
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Optional text to show as the short title in the bread crumb.
  ///@attr ref android.R.styleable\#PreferenceHeader_breadCrumbShortTitle
  set breadCrumbShortTitle(jni.JniObject value) => jniEnv.SetObjectField(
      reference, _id_breadCrumbShortTitle, value.reference);

  static final _id_breadCrumbShortTitleRes =
      jniAccessors.getFieldIDOf(_classRef, "breadCrumbShortTitleRes", "I");

  /// from: public int breadCrumbShortTitleRes
  ///
  /// Resource ID of optional text to show as the short title in the bread crumb.
  ///@attr ref android.R.styleable\#PreferenceHeader_breadCrumbShortTitle
  int get breadCrumbShortTitleRes => jniAccessors
      .getField(reference, _id_breadCrumbShortTitleRes, jni.JniType.intType)
      .integer;

  /// from: public int breadCrumbShortTitleRes
  ///
  /// Resource ID of optional text to show as the short title in the bread crumb.
  ///@attr ref android.R.styleable\#PreferenceHeader_breadCrumbShortTitle
  set breadCrumbShortTitleRes(int value) =>
      jniEnv.SetIntField(reference, _id_breadCrumbShortTitleRes, value);

  static final _id_breadCrumbTitle = jniAccessors.getFieldIDOf(
      _classRef, "breadCrumbTitle", "Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence breadCrumbTitle
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Optional text to show as the title in the bread crumb.
  ///@attr ref android.R.styleable\#PreferenceHeader_breadCrumbTitle
  jni.JniObject get breadCrumbTitle => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_breadCrumbTitle, jni.JniType.objectType)
      .object);

  /// from: public java.lang.CharSequence breadCrumbTitle
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Optional text to show as the title in the bread crumb.
  ///@attr ref android.R.styleable\#PreferenceHeader_breadCrumbTitle
  set breadCrumbTitle(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_breadCrumbTitle, value.reference);

  static final _id_breadCrumbTitleRes =
      jniAccessors.getFieldIDOf(_classRef, "breadCrumbTitleRes", "I");

  /// from: public int breadCrumbTitleRes
  ///
  /// Resource ID of optional text to show as the title in the bread crumb.
  ///@attr ref android.R.styleable\#PreferenceHeader_breadCrumbTitle
  int get breadCrumbTitleRes => jniAccessors
      .getField(reference, _id_breadCrumbTitleRes, jni.JniType.intType)
      .integer;

  /// from: public int breadCrumbTitleRes
  ///
  /// Resource ID of optional text to show as the title in the bread crumb.
  ///@attr ref android.R.styleable\#PreferenceHeader_breadCrumbTitle
  set breadCrumbTitleRes(int value) =>
      jniEnv.SetIntField(reference, _id_breadCrumbTitleRes, value);

  static final _id_extras =
      jniAccessors.getFieldIDOf(_classRef, "extras", "Landroid/os/Bundle;");

  /// from: public android.os.Bundle extras
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Optional additional data for use by subclasses of PreferenceActivity.
  bundle_.Bundle get extras => bundle_.Bundle.fromRef(jniAccessors
      .getField(reference, _id_extras, jni.JniType.objectType)
      .object);

  /// from: public android.os.Bundle extras
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Optional additional data for use by subclasses of PreferenceActivity.
  set extras(bundle_.Bundle value) =>
      jniEnv.SetObjectField(reference, _id_extras, value.reference);

  static final _id_fragment =
      jniAccessors.getFieldIDOf(_classRef, "fragment", "Ljava/lang/String;");

  /// from: public java.lang.String fragment
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full class name of the fragment to display when this header is
  /// selected.
  ///@attr ref android.R.styleable\#PreferenceHeader_fragment
  jni.JniString get fragment => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_fragment, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String fragment
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Full class name of the fragment to display when this header is
  /// selected.
  ///@attr ref android.R.styleable\#PreferenceHeader_fragment
  set fragment(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_fragment, value.reference);

  static final _id_fragmentArguments = jniAccessors.getFieldIDOf(
      _classRef, "fragmentArguments", "Landroid/os/Bundle;");

  /// from: public android.os.Bundle fragmentArguments
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Optional arguments to supply to the fragment when it is
  /// instantiated.
  bundle_.Bundle get fragmentArguments => bundle_.Bundle.fromRef(jniAccessors
      .getField(reference, _id_fragmentArguments, jni.JniType.objectType)
      .object);

  /// from: public android.os.Bundle fragmentArguments
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Optional arguments to supply to the fragment when it is
  /// instantiated.
  set fragmentArguments(bundle_.Bundle value) =>
      jniEnv.SetObjectField(reference, _id_fragmentArguments, value.reference);

  static final _id_iconRes =
      jniAccessors.getFieldIDOf(_classRef, "iconRes", "I");

  /// from: public int iconRes
  ///
  /// Optional icon resource to show for this header.
  ///@attr ref android.R.styleable\#PreferenceHeader_icon
  int get iconRes => jniAccessors
      .getField(reference, _id_iconRes, jni.JniType.intType)
      .integer;

  /// from: public int iconRes
  ///
  /// Optional icon resource to show for this header.
  ///@attr ref android.R.styleable\#PreferenceHeader_icon
  set iconRes(int value) => jniEnv.SetIntField(reference, _id_iconRes, value);

  static final _id_id = jniAccessors.getFieldIDOf(_classRef, "id", "J");

  /// from: public long id
  ///
  /// Identifier for this header, to correlate with a new list when
  /// it is updated.  The default value is
  /// PreferenceActivity\#HEADER_ID_UNDEFINED, meaning no id.
  ///@attr ref android.R.styleable\#PreferenceHeader_id
  int get id =>
      jniAccessors.getField(reference, _id_id, jni.JniType.longType).long;

  /// from: public long id
  ///
  /// Identifier for this header, to correlate with a new list when
  /// it is updated.  The default value is
  /// PreferenceActivity\#HEADER_ID_UNDEFINED, meaning no id.
  ///@attr ref android.R.styleable\#PreferenceHeader_id
  set id(int value) => jniEnv.SetLongField(reference, _id_id, value);

  static final _id_intent = jniAccessors.getFieldIDOf(
      _classRef, "intent", "Landroid/content/Intent;");

  /// from: public android.content.Intent intent
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Intent to launch when the preference is selected.
  intent_.Intent get intent => intent_.Intent.fromRef(jniAccessors
      .getField(reference, _id_intent, jni.JniType.objectType)
      .object);

  /// from: public android.content.Intent intent
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Intent to launch when the preference is selected.
  set intent(intent_.Intent value) =>
      jniEnv.SetObjectField(reference, _id_intent, value.reference);

  static final _id_summary = jniAccessors.getFieldIDOf(
      _classRef, "summary", "Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence summary
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Optional summary describing what this header controls.
  ///@attr ref android.R.styleable\#PreferenceHeader_summary
  jni.JniObject get summary => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_summary, jni.JniType.objectType)
      .object);

  /// from: public java.lang.CharSequence summary
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Optional summary describing what this header controls.
  ///@attr ref android.R.styleable\#PreferenceHeader_summary
  set summary(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_summary, value.reference);

  static final _id_summaryRes =
      jniAccessors.getFieldIDOf(_classRef, "summaryRes", "I");

  /// from: public int summaryRes
  ///
  /// Resource ID of optional summary describing what this header controls.
  ///@attr ref android.R.styleable\#PreferenceHeader_summary
  int get summaryRes => jniAccessors
      .getField(reference, _id_summaryRes, jni.JniType.intType)
      .integer;

  /// from: public int summaryRes
  ///
  /// Resource ID of optional summary describing what this header controls.
  ///@attr ref android.R.styleable\#PreferenceHeader_summary
  set summaryRes(int value) =>
      jniEnv.SetIntField(reference, _id_summaryRes, value);

  static final _id_title =
      jniAccessors.getFieldIDOf(_classRef, "title", "Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence title
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Title of the header that is shown to the user.
  ///@attr ref android.R.styleable\#PreferenceHeader_title
  jni.JniObject get title => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_title, jni.JniType.objectType)
      .object);

  /// from: public java.lang.CharSequence title
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Title of the header that is shown to the user.
  ///@attr ref android.R.styleable\#PreferenceHeader_title
  set title(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_title, value.reference);

  static final _id_titleRes =
      jniAccessors.getFieldIDOf(_classRef, "titleRes", "I");

  /// from: public int titleRes
  ///
  /// Resource ID of title of the header that is shown to the user.
  ///@attr ref android.R.styleable\#PreferenceHeader_title
  int get titleRes => jniAccessors
      .getField(reference, _id_titleRes, jni.JniType.intType)
      .integer;

  /// from: public int titleRes
  ///
  /// Resource ID of title of the header that is shown to the user.
  ///@attr ref android.R.styleable\#PreferenceHeader_title
  set titleRes(int value) => jniEnv.SetIntField(reference, _id_titleRes, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PreferenceActivity_Header()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getTitle = jniAccessors.getMethodIDOf(_classRef, "getTitle",
      "(Landroid/content/res/Resources;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getTitle(android.content.res.Resources res)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the currently set title.  If \#titleRes is set,
  /// this resource is loaded from <var>res</var> and returned.  Otherwise
  /// \#title is returned.
  jni.JniObject getTitle(resources_.Resources res) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getTitle, jni.JniType.objectType, [res.reference]).object);

  static final _id_getSummary = jniAccessors.getMethodIDOf(
      _classRef,
      "getSummary",
      "(Landroid/content/res/Resources;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getSummary(android.content.res.Resources res)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the currently set summary.  If \#summaryRes is set,
  /// this resource is loaded from <var>res</var> and returned.  Otherwise
  /// \#summary is returned.
  jni.JniObject getSummary(resources_.Resources res) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSummary, jni.JniType.objectType, [res.reference]).object);

  static final _id_getBreadCrumbTitle = jniAccessors.getMethodIDOf(
      _classRef,
      "getBreadCrumbTitle",
      "(Landroid/content/res/Resources;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getBreadCrumbTitle(android.content.res.Resources res)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the currently set bread crumb title.  If \#breadCrumbTitleRes is set,
  /// this resource is loaded from <var>res</var> and returned.  Otherwise
  /// \#breadCrumbTitle is returned.
  jni.JniObject getBreadCrumbTitle(resources_.Resources res) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getBreadCrumbTitle,
          jni.JniType.objectType,
          [res.reference]).object);

  static final _id_getBreadCrumbShortTitle = jniAccessors.getMethodIDOf(
      _classRef,
      "getBreadCrumbShortTitle",
      "(Landroid/content/res/Resources;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getBreadCrumbShortTitle(android.content.res.Resources res)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the currently set bread crumb short title.  If
  /// \#breadCrumbShortTitleRes is set,
  /// this resource is loaded from <var>res</var> and returned.  Otherwise
  /// \#breadCrumbShortTitle is returned.
  jni.JniObject getBreadCrumbShortTitle(resources_.Resources res) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getBreadCrumbShortTitle,
          jni.JniType.objectType,
          [res.reference]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_readFromParcel = jniAccessors.getMethodIDOf(
      _classRef, "readFromParcel", "(Landroid/os/Parcel;)V");

  /// from: public void readFromParcel(android.os.Parcel in)
  void readFromParcel(parcel_.Parcel in0) => jniAccessors.callMethodWithArgs(
      reference,
      _id_readFromParcel,
      jni.JniType.voidType,
      [in0.reference]).check();
}
