// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.mtp.MtpObjectInfo
///
/// This class encapsulates information about an object on an MTP device.
/// This corresponds to the ObjectInfo Dataset described in
/// section 5.3.1 of the MTP specification.
class MtpObjectInfo extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/mtp/MtpObjectInfo");
  MtpObjectInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getObjectHandle =
      jniAccessors.getMethodIDOf(_classRef, "getObjectHandle", "()I");

  /// from: public int getObjectHandle()
  ///
  /// Returns the object handle for the MTP object
  ///@return the object handle
  int getObjectHandle() => jniAccessors.callMethodWithArgs(
      reference, _id_getObjectHandle, jni.JniType.intType, []).integer;

  static final _id_getStorageId =
      jniAccessors.getMethodIDOf(_classRef, "getStorageId", "()I");

  /// from: public int getStorageId()
  ///
  /// Returns the storage ID for the MTP object's storage unit
  ///@return the storage ID
  int getStorageId() => jniAccessors.callMethodWithArgs(
      reference, _id_getStorageId, jni.JniType.intType, []).integer;

  static final _id_getFormat =
      jniAccessors.getMethodIDOf(_classRef, "getFormat", "()I");

  /// from: public int getFormat()
  ///
  /// Returns the format code for the MTP object
  ///@return the format code
  int getFormat() => jniAccessors.callMethodWithArgs(
      reference, _id_getFormat, jni.JniType.intType, []).integer;

  static final _id_getProtectionStatus =
      jniAccessors.getMethodIDOf(_classRef, "getProtectionStatus", "()I");

  /// from: public int getProtectionStatus()
  ///
  /// Returns the protection status for the MTP object
  /// Possible values are:
  ///
  /// <ul>
  /// <li> android.mtp.MtpConstants\#PROTECTION_STATUS_NONE
  /// <li> android.mtp.MtpConstants\#PROTECTION_STATUS_READ_ONLY
  /// <li> android.mtp.MtpConstants\#PROTECTION_STATUS_NON_TRANSFERABLE_DATA
  /// </ul>
  ///@return the protection status
  int getProtectionStatus() => jniAccessors.callMethodWithArgs(
      reference, _id_getProtectionStatus, jni.JniType.intType, []).integer;

  static final _id_getCompressedSize =
      jniAccessors.getMethodIDOf(_classRef, "getCompressedSize", "()I");

  /// from: public int getCompressedSize()
  ///
  /// Returns the size of the MTP object
  ///@return the object size
  int getCompressedSize() => jniAccessors.callMethodWithArgs(
      reference, _id_getCompressedSize, jni.JniType.intType, []).integer;

  static final _id_getCompressedSizeLong =
      jniAccessors.getMethodIDOf(_classRef, "getCompressedSizeLong", "()J");

  /// from: public long getCompressedSizeLong()
  ///
  /// Returns the size of the MTP object
  ///@return the object size
  int getCompressedSizeLong() => jniAccessors.callMethodWithArgs(
      reference, _id_getCompressedSizeLong, jni.JniType.longType, []).long;

  static final _id_getThumbFormat =
      jniAccessors.getMethodIDOf(_classRef, "getThumbFormat", "()I");

  /// from: public int getThumbFormat()
  ///
  /// Returns the format code for the MTP object's thumbnail
  /// Will be zero for objects with no thumbnail
  ///@return the thumbnail format code
  int getThumbFormat() => jniAccessors.callMethodWithArgs(
      reference, _id_getThumbFormat, jni.JniType.intType, []).integer;

  static final _id_getThumbCompressedSize =
      jniAccessors.getMethodIDOf(_classRef, "getThumbCompressedSize", "()I");

  /// from: public int getThumbCompressedSize()
  ///
  /// Returns the size of the MTP object's thumbnail
  /// Will be zero for objects with no thumbnail
  ///@return the thumbnail size
  int getThumbCompressedSize() => jniAccessors.callMethodWithArgs(
      reference, _id_getThumbCompressedSize, jni.JniType.intType, []).integer;

  static final _id_getThumbCompressedSizeLong = jniAccessors.getMethodIDOf(
      _classRef, "getThumbCompressedSizeLong", "()J");

  /// from: public long getThumbCompressedSizeLong()
  ///
  /// Returns the size of the MTP object's thumbnail
  /// Will be zero for objects with no thumbnail
  ///@return the thumbnail size
  int getThumbCompressedSizeLong() => jniAccessors.callMethodWithArgs(
      reference, _id_getThumbCompressedSizeLong, jni.JniType.longType, []).long;

  static final _id_getThumbPixWidth =
      jniAccessors.getMethodIDOf(_classRef, "getThumbPixWidth", "()I");

  /// from: public int getThumbPixWidth()
  ///
  /// Returns the width of the MTP object's thumbnail in pixels
  /// Will be zero for objects with no thumbnail
  ///@return the thumbnail width
  int getThumbPixWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getThumbPixWidth, jni.JniType.intType, []).integer;

  static final _id_getThumbPixWidthLong =
      jniAccessors.getMethodIDOf(_classRef, "getThumbPixWidthLong", "()J");

  /// from: public long getThumbPixWidthLong()
  ///
  /// Returns the width of the MTP object's thumbnail in pixels
  /// Will be zero for objects with no thumbnail
  ///@return the thumbnail width
  int getThumbPixWidthLong() => jniAccessors.callMethodWithArgs(
      reference, _id_getThumbPixWidthLong, jni.JniType.longType, []).long;

  static final _id_getThumbPixHeight =
      jniAccessors.getMethodIDOf(_classRef, "getThumbPixHeight", "()I");

  /// from: public int getThumbPixHeight()
  ///
  /// Returns the height of the MTP object's thumbnail in pixels
  /// Will be zero for objects with no thumbnail
  ///@return the thumbnail height
  int getThumbPixHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getThumbPixHeight, jni.JniType.intType, []).integer;

  static final _id_getThumbPixHeightLong =
      jniAccessors.getMethodIDOf(_classRef, "getThumbPixHeightLong", "()J");

  /// from: public long getThumbPixHeightLong()
  ///
  /// Returns the height of the MTP object's thumbnail in pixels
  /// Will be zero for objects with no thumbnail
  ///@return the thumbnail height
  int getThumbPixHeightLong() => jniAccessors.callMethodWithArgs(
      reference, _id_getThumbPixHeightLong, jni.JniType.longType, []).long;

  static final _id_getImagePixWidth =
      jniAccessors.getMethodIDOf(_classRef, "getImagePixWidth", "()I");

  /// from: public int getImagePixWidth()
  ///
  /// Returns the width of the MTP object in pixels
  /// Will be zero for non-image objects
  ///@return the image width
  int getImagePixWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getImagePixWidth, jni.JniType.intType, []).integer;

  static final _id_getImagePixWidthLong =
      jniAccessors.getMethodIDOf(_classRef, "getImagePixWidthLong", "()J");

  /// from: public long getImagePixWidthLong()
  ///
  /// Returns the width of the MTP object in pixels
  /// Will be zero for non-image objects
  ///@return the image width
  int getImagePixWidthLong() => jniAccessors.callMethodWithArgs(
      reference, _id_getImagePixWidthLong, jni.JniType.longType, []).long;

  static final _id_getImagePixHeight =
      jniAccessors.getMethodIDOf(_classRef, "getImagePixHeight", "()I");

  /// from: public int getImagePixHeight()
  ///
  /// Returns the height of the MTP object in pixels
  /// Will be zero for non-image objects
  ///@return the image height
  int getImagePixHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getImagePixHeight, jni.JniType.intType, []).integer;

  static final _id_getImagePixHeightLong =
      jniAccessors.getMethodIDOf(_classRef, "getImagePixHeightLong", "()J");

  /// from: public long getImagePixHeightLong()
  ///
  /// Returns the height of the MTP object in pixels
  /// Will be zero for non-image objects
  ///@return the image height
  int getImagePixHeightLong() => jniAccessors.callMethodWithArgs(
      reference, _id_getImagePixHeightLong, jni.JniType.longType, []).long;

  static final _id_getImagePixDepth =
      jniAccessors.getMethodIDOf(_classRef, "getImagePixDepth", "()I");

  /// from: public int getImagePixDepth()
  ///
  /// Returns the depth of the MTP object in bits per pixel
  /// Will be zero for non-image objects
  ///@return the image depth
  int getImagePixDepth() => jniAccessors.callMethodWithArgs(
      reference, _id_getImagePixDepth, jni.JniType.intType, []).integer;

  static final _id_getImagePixDepthLong =
      jniAccessors.getMethodIDOf(_classRef, "getImagePixDepthLong", "()J");

  /// from: public long getImagePixDepthLong()
  ///
  /// Returns the depth of the MTP object in bits per pixel
  /// Will be zero for non-image objects
  ///@return the image depth
  int getImagePixDepthLong() => jniAccessors.callMethodWithArgs(
      reference, _id_getImagePixDepthLong, jni.JniType.longType, []).long;

  static final _id_getParent =
      jniAccessors.getMethodIDOf(_classRef, "getParent", "()I");

  /// from: public int getParent()
  ///
  /// Returns the object handle for the object's parent
  /// Will be zero for the root directory of a storage unit
  ///@return the object's parent
  int getParent() => jniAccessors.callMethodWithArgs(
      reference, _id_getParent, jni.JniType.intType, []).integer;

  static final _id_getAssociationType =
      jniAccessors.getMethodIDOf(_classRef, "getAssociationType", "()I");

  /// from: public int getAssociationType()
  ///
  /// Returns the association type for the MTP object
  /// Will be zero objects that are not of format
  /// android.mtp.MtpConstants\#FORMAT_ASSOCIATION
  /// For directories the association type is typically
  /// android.mtp.MtpConstants\#ASSOCIATION_TYPE_GENERIC_FOLDER
  ///@return the object's association type
  int getAssociationType() => jniAccessors.callMethodWithArgs(
      reference, _id_getAssociationType, jni.JniType.intType, []).integer;

  static final _id_getAssociationDesc =
      jniAccessors.getMethodIDOf(_classRef, "getAssociationDesc", "()I");

  /// from: public int getAssociationDesc()
  ///
  /// Returns the association description for the MTP object
  /// Will be zero objects that are not of format
  /// android.mtp.MtpConstants\#FORMAT_ASSOCIATION
  ///@return the object's association description
  int getAssociationDesc() => jniAccessors.callMethodWithArgs(
      reference, _id_getAssociationDesc, jni.JniType.intType, []).integer;

  static final _id_getSequenceNumber =
      jniAccessors.getMethodIDOf(_classRef, "getSequenceNumber", "()I");

  /// from: public int getSequenceNumber()
  ///
  /// Returns the sequence number for the MTP object
  /// This field is typically not used for MTP devices,
  /// but is sometimes used to define a sequence of photos
  /// on PTP cameras.
  ///@return the object's sequence number
  int getSequenceNumber() => jniAccessors.callMethodWithArgs(
      reference, _id_getSequenceNumber, jni.JniType.intType, []).integer;

  static final _id_getSequenceNumberLong =
      jniAccessors.getMethodIDOf(_classRef, "getSequenceNumberLong", "()J");

  /// from: public long getSequenceNumberLong()
  ///
  /// Returns the sequence number for the MTP object
  /// This field is typically not used for MTP devices,
  /// but is sometimes used to define a sequence of photos
  /// on PTP cameras.
  ///@return the object's sequence number
  int getSequenceNumberLong() => jniAccessors.callMethodWithArgs(
      reference, _id_getSequenceNumberLong, jni.JniType.longType, []).long;

  static final _id_getName =
      jniAccessors.getMethodIDOf(_classRef, "getName", "()Ljava/lang/String;");

  /// from: public java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the name of the MTP object
  ///@return the object's name
  ///
  /// This value will never be {@code null}.
  jni.JniString getName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_getDateCreated =
      jniAccessors.getMethodIDOf(_classRef, "getDateCreated", "()J");

  /// from: public long getDateCreated()
  ///
  /// Returns the creation date of the MTP object
  /// The value is represented as milliseconds since January 1, 1970
  ///@return the object's creation date
  int getDateCreated() => jniAccessors.callMethodWithArgs(
      reference, _id_getDateCreated, jni.JniType.longType, []).long;

  static final _id_getDateModified =
      jniAccessors.getMethodIDOf(_classRef, "getDateModified", "()J");

  /// from: public long getDateModified()
  ///
  /// Returns the modification date of the MTP object
  /// The value is represented as milliseconds since January 1, 1970
  ///@return the object's modification date
  int getDateModified() => jniAccessors.callMethodWithArgs(
      reference, _id_getDateModified, jni.JniType.longType, []).long;

  static final _id_getKeywords = jniAccessors.getMethodIDOf(
      _classRef, "getKeywords", "()Ljava/lang/String;");

  /// from: public java.lang.String getKeywords()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a comma separated list of keywords for the MTP object
  ///@return the object's keyword list
  ///
  /// This value will never be {@code null}.
  jni.JniString getKeywords() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKeywords, jni.JniType.objectType, []).object);
}

/// from: android.mtp.MtpObjectInfo$Builder
///
/// Builds a new object info instance.
class MtpObjectInfo_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/mtp/MtpObjectInfo\$Builder");
  MtpObjectInfo_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/mtp/MtpObjectInfo;)V");

  /// from: public void <init>(android.mtp.MtpObjectInfo objectInfo)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder on a copy of an existing object info.
  /// All fields, except the object handle will be copied.
  ///@param objectInfo object info of an existing entry
  MtpObjectInfo_Builder.ctor1(MtpObjectInfo objectInfo)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [objectInfo.reference]).object);

  static final _id_setObjectHandle = jniAccessors.getMethodIDOf(
      _classRef, "setObjectHandle", "(I)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setObjectHandle(int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setObjectHandle(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setObjectHandle, jni.JniType.objectType, [value]).object);

  static final _id_setAssociationDesc = jniAccessors.getMethodIDOf(_classRef,
      "setAssociationDesc", "(I)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setAssociationDesc(int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setAssociationDesc(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setAssociationDesc, jni.JniType.objectType, [value]).object);

  static final _id_setAssociationType = jniAccessors.getMethodIDOf(_classRef,
      "setAssociationType", "(I)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setAssociationType(int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setAssociationType(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setAssociationType, jni.JniType.objectType, [value]).object);

  static final _id_setCompressedSize = jniAccessors.getMethodIDOf(_classRef,
      "setCompressedSize", "(J)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setCompressedSize(long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setCompressedSize(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setCompressedSize, jni.JniType.objectType, [value]).object);

  static final _id_setDateCreated = jniAccessors.getMethodIDOf(
      _classRef, "setDateCreated", "(J)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setDateCreated(long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setDateCreated(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setDateCreated, jni.JniType.objectType, [value]).object);

  static final _id_setDateModified = jniAccessors.getMethodIDOf(
      _classRef, "setDateModified", "(J)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setDateModified(long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setDateModified(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setDateModified, jni.JniType.objectType, [value]).object);

  static final _id_setFormat = jniAccessors.getMethodIDOf(
      _classRef, "setFormat", "(I)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setFormat(int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setFormat(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setFormat, jni.JniType.objectType, [value]).object);

  static final _id_setImagePixDepth = jniAccessors.getMethodIDOf(
      _classRef, "setImagePixDepth", "(J)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setImagePixDepth(long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setImagePixDepth(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setImagePixDepth, jni.JniType.objectType, [value]).object);

  static final _id_setImagePixHeight = jniAccessors.getMethodIDOf(_classRef,
      "setImagePixHeight", "(J)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setImagePixHeight(long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setImagePixHeight(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setImagePixHeight, jni.JniType.objectType, [value]).object);

  static final _id_setImagePixWidth = jniAccessors.getMethodIDOf(
      _classRef, "setImagePixWidth", "(J)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setImagePixWidth(long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setImagePixWidth(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setImagePixWidth, jni.JniType.objectType, [value]).object);

  static final _id_setKeywords = jniAccessors.getMethodIDOf(
      _classRef,
      "setKeywords",
      "(Ljava/lang/String;)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setKeywords(java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param value This value must never be {@code null}.
  MtpObjectInfo_Builder setKeywords(jni.JniString value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setKeywords, jni.JniType.objectType, [value.reference]).object);

  static final _id_setName = jniAccessors.getMethodIDOf(_classRef, "setName",
      "(Ljava/lang/String;)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setName(java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param value This value must never be {@code null}.
  MtpObjectInfo_Builder setName(jni.JniString value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setName, jni.JniType.objectType, [value.reference]).object);

  static final _id_setParent = jniAccessors.getMethodIDOf(
      _classRef, "setParent", "(I)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setParent(int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setParent(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setParent, jni.JniType.objectType, [value]).object);

  static final _id_setProtectionStatus = jniAccessors.getMethodIDOf(_classRef,
      "setProtectionStatus", "(I)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setProtectionStatus(int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setProtectionStatus(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setProtectionStatus, jni.JniType.objectType, [value]).object);

  static final _id_setSequenceNumber = jniAccessors.getMethodIDOf(_classRef,
      "setSequenceNumber", "(J)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setSequenceNumber(long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setSequenceNumber(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setSequenceNumber, jni.JniType.objectType, [value]).object);

  static final _id_setStorageId = jniAccessors.getMethodIDOf(
      _classRef, "setStorageId", "(I)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setStorageId(int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setStorageId(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setStorageId, jni.JniType.objectType, [value]).object);

  static final _id_setThumbCompressedSize = jniAccessors.getMethodIDOf(
      _classRef,
      "setThumbCompressedSize",
      "(J)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setThumbCompressedSize(long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setThumbCompressedSize(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setThumbCompressedSize, jni.JniType.objectType, [value]).object);

  static final _id_setThumbFormat = jniAccessors.getMethodIDOf(
      _classRef, "setThumbFormat", "(I)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setThumbFormat(int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setThumbFormat(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setThumbFormat, jni.JniType.objectType, [value]).object);

  static final _id_setThumbPixHeight = jniAccessors.getMethodIDOf(_classRef,
      "setThumbPixHeight", "(J)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setThumbPixHeight(long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setThumbPixHeight(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setThumbPixHeight, jni.JniType.objectType, [value]).object);

  static final _id_setThumbPixWidth = jniAccessors.getMethodIDOf(
      _classRef, "setThumbPixWidth", "(J)Landroid/mtp/MtpObjectInfo\$Builder;");

  /// from: public android.mtp.MtpObjectInfo.Builder setThumbPixWidth(long value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpObjectInfo_Builder setThumbPixWidth(int value) =>
      MtpObjectInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setThumbPixWidth, jni.JniType.objectType, [value]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/mtp/MtpObjectInfo;");

  /// from: public android.mtp.MtpObjectInfo build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds the object info instance. Once called, methods of the builder
  /// must not be called anymore.
  ///@return the object info of the newly created file, or NULL in case
  ///         of an error.
  MtpObjectInfo build() =>
      MtpObjectInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
