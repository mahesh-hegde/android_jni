// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.mtp.MtpConstants
///
/// A class containing constants in the MTP and PTP specifications.
class MtpConstants extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/mtp/MtpConstants");
  MtpConstants.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ASSOCIATION_TYPE_GENERIC_FOLDER
  ///
  /// Association type for objects representing file system directories.
  static const ASSOCIATION_TYPE_GENERIC_FOLDER = 1;

  /// from: static public final int FORMAT_3GP_CONTAINER
  ///
  /// Format code for 3GP files
  static const FORMAT_3GP_CONTAINER = 47492;

  /// from: static public final int FORMAT_AAC
  ///
  /// Format code for AAC audio files
  static const FORMAT_AAC = 47363;

  /// from: static public final int FORMAT_ABSTRACT_AUDIO_ALBUM
  ///
  /// Format code for audio albums
  static const FORMAT_ABSTRACT_AUDIO_ALBUM = 47619;

  /// from: static public final int FORMAT_ABSTRACT_AUDIO_PLAYLIST
  ///
  /// Format code for abstract audio playlists
  static const FORMAT_ABSTRACT_AUDIO_PLAYLIST = 47625;

  /// from: static public final int FORMAT_ABSTRACT_AV_PLAYLIST
  ///
  /// Format code for abstract AV playlists
  static const FORMAT_ABSTRACT_AV_PLAYLIST = 47621;

  /// from: static public final int FORMAT_ABSTRACT_DOCUMENT
  ///
  /// Format code for abstract documents
  static const FORMAT_ABSTRACT_DOCUMENT = 47745;

  /// from: static public final int FORMAT_ABSTRACT_IMAGE_ALBUM
  ///
  /// Format code for image albums
  static const FORMAT_ABSTRACT_IMAGE_ALBUM = 47618;

  /// from: static public final int FORMAT_ABSTRACT_MEDIACAST
  ///
  /// Format code for abstract mediacasts
  static const FORMAT_ABSTRACT_MEDIACAST = 47627;

  /// from: static public final int FORMAT_ABSTRACT_MULTIMEDIA_ALBUM
  ///
  /// Format code for multimedia albums
  static const FORMAT_ABSTRACT_MULTIMEDIA_ALBUM = 47617;

  /// from: static public final int FORMAT_ABSTRACT_VIDEO_ALBUM
  ///
  /// Format code for video albums
  static const FORMAT_ABSTRACT_VIDEO_ALBUM = 47620;

  /// from: static public final int FORMAT_ABSTRACT_VIDEO_PLAYLIST
  ///
  /// Format code for abstract video playlists
  static const FORMAT_ABSTRACT_VIDEO_PLAYLIST = 47626;

  /// from: static public final int FORMAT_AIFF
  ///
  /// Format code for AIFF audio files
  static const FORMAT_AIFF = 12295;

  /// from: static public final int FORMAT_ASF
  ///
  /// Format code for ASF files
  static const FORMAT_ASF = 12300;

  /// from: static public final int FORMAT_ASSOCIATION
  ///
  /// Format code for associations (folders and directories)
  static const FORMAT_ASSOCIATION = 12289;

  /// from: static public final int FORMAT_ASX_PLAYLIST
  ///
  /// Format code for ASX playlist files
  static const FORMAT_ASX_PLAYLIST = 47635;

  /// from: static public final int FORMAT_AUDIBLE
  ///
  /// Format code for Audible audio files
  static const FORMAT_AUDIBLE = 47364;

  /// from: static public final int FORMAT_AVI
  ///
  /// Format code for AVI video files
  static const FORMAT_AVI = 12298;

  /// from: static public final int FORMAT_BMP
  ///
  /// Format code for BMP image files
  static const FORMAT_BMP = 14340;

  /// from: static public final int FORMAT_DEFINED
  ///
  /// Format code for unknown image files.
  ///
  /// Will be used for the formats which are not specified in PTP specification.
  /// For instance, WEBP and WBMP.
  static const FORMAT_DEFINED = 14336;

  /// from: static public final int FORMAT_DNG
  ///
  /// Format code for DNG files
  static const FORMAT_DNG = 14353;

  /// from: static public final int FORMAT_DPOF
  ///
  /// Format code for DPOF files
  static const FORMAT_DPOF = 12294;

  /// from: static public final int FORMAT_EXECUTABLE
  ///
  /// Format code for executable files
  static const FORMAT_EXECUTABLE = 12291;

  /// from: static public final int FORMAT_EXIF_JPEG
  ///
  /// Format code for JPEG image files
  static const FORMAT_EXIF_JPEG = 14337;

  /// from: static public final int FORMAT_FLAC
  ///
  /// Format code for FLAC audio files
  static const FORMAT_FLAC = 47366;

  /// from: static public final int FORMAT_GIF
  ///
  /// Format code for GIF image files
  static const FORMAT_GIF = 14343;

  /// from: static public final int FORMAT_HTML
  ///
  /// Format code for HTML files
  static const FORMAT_HTML = 12293;

  /// from: static public final int FORMAT_JFIF
  ///
  /// Format code for JFIF image files
  static const FORMAT_JFIF = 14344;

  /// from: static public final int FORMAT_JP2
  ///
  /// Format code for JP2 files
  static const FORMAT_JP2 = 14351;

  /// from: static public final int FORMAT_JPX
  ///
  /// Format code for JPX files
  static const FORMAT_JPX = 14352;

  /// from: static public final int FORMAT_M3U_PLAYLIST
  ///
  /// Format code for M3u playlist files
  static const FORMAT_M3U_PLAYLIST = 47633;

  /// from: static public final int FORMAT_MP2
  ///
  /// Format code for MP2 files
  static const FORMAT_MP2 = 47491;

  /// from: static public final int FORMAT_MP3
  ///
  /// Format code for MP3 audio files
  static const FORMAT_MP3 = 12297;

  /// from: static public final int FORMAT_MP4_CONTAINER
  ///
  /// Format code for MP4 files
  static const FORMAT_MP4_CONTAINER = 47490;

  /// from: static public final int FORMAT_MPEG
  ///
  /// Format code for MPEG video files
  static const FORMAT_MPEG = 12299;

  /// from: static public final int FORMAT_MPL_PLAYLIST
  ///
  /// Format code for MPL playlist files
  static const FORMAT_MPL_PLAYLIST = 47634;

  /// from: static public final int FORMAT_MS_EXCEL_SPREADSHEET
  ///
  /// Format code for MS Excel spreadsheets
  static const FORMAT_MS_EXCEL_SPREADSHEET = 47749;

  /// from: static public final int FORMAT_MS_POWERPOINT_PRESENTATION
  ///
  /// Format code for MS PowerPoint presentatiosn
  static const FORMAT_MS_POWERPOINT_PRESENTATION = 47750;

  /// from: static public final int FORMAT_MS_WORD_DOCUMENT
  ///
  /// Format code for MS Word documents
  static const FORMAT_MS_WORD_DOCUMENT = 47747;

  /// from: static public final int FORMAT_OGG
  ///
  /// Format code for OGG audio files
  static const FORMAT_OGG = 47362;

  /// from: static public final int FORMAT_PICT
  ///
  /// Format code for PICT image files
  static const FORMAT_PICT = 14346;

  /// from: static public final int FORMAT_PLS_PLAYLIST
  ///
  /// Format code for PLS playlist files
  static const FORMAT_PLS_PLAYLIST = 47636;

  /// from: static public final int FORMAT_PNG
  ///
  /// Format code for PNG image files
  static const FORMAT_PNG = 14347;

  /// from: static public final int FORMAT_SCRIPT
  ///
  /// Format code for script files
  static const FORMAT_SCRIPT = 12290;

  /// from: static public final int FORMAT_TEXT
  ///
  /// Format code for text files
  static const FORMAT_TEXT = 12292;

  /// from: static public final int FORMAT_TIFF
  ///
  /// Format code for TIFF image files
  static const FORMAT_TIFF = 14349;

  /// from: static public final int FORMAT_TIFF_EP
  ///
  /// Format code for TIFF EP image files
  static const FORMAT_TIFF_EP = 14338;

  /// from: static public final int FORMAT_UNDEFINED
  ///
  /// Undefined format code
  static const FORMAT_UNDEFINED = 12288;

  /// from: static public final int FORMAT_UNDEFINED_AUDIO
  ///
  /// Format code for undefined audio files files
  static const FORMAT_UNDEFINED_AUDIO = 47360;

  /// from: static public final int FORMAT_UNDEFINED_COLLECTION
  ///
  /// Format code for undefined collections
  static const FORMAT_UNDEFINED_COLLECTION = 47616;

  /// from: static public final int FORMAT_UNDEFINED_DOCUMENT
  ///
  /// Format code for undefined document files
  static const FORMAT_UNDEFINED_DOCUMENT = 47744;

  /// from: static public final int FORMAT_UNDEFINED_FIRMWARE
  ///
  /// Format code for firmware files
  static const FORMAT_UNDEFINED_FIRMWARE = 47106;

  /// from: static public final int FORMAT_UNDEFINED_VIDEO
  ///
  /// Format code for undefined video files
  static const FORMAT_UNDEFINED_VIDEO = 47488;

  /// from: static public final int FORMAT_WAV
  ///
  /// Format code for WAV audio files
  static const FORMAT_WAV = 12296;

  /// from: static public final int FORMAT_WINDOWS_IMAGE_FORMAT
  ///
  /// Format code for Windows image files
  static const FORMAT_WINDOWS_IMAGE_FORMAT = 47233;

  /// from: static public final int FORMAT_WMA
  ///
  /// Format code for WMA audio files
  static const FORMAT_WMA = 47361;

  /// from: static public final int FORMAT_WMV
  ///
  /// Format code for WMV video files
  static const FORMAT_WMV = 47489;

  /// from: static public final int FORMAT_WPL_PLAYLIST
  ///
  /// Format code for WPL playlist files
  static const FORMAT_WPL_PLAYLIST = 47632;

  /// from: static public final int FORMAT_XML_DOCUMENT
  ///
  /// Format code for XML documents
  static const FORMAT_XML_DOCUMENT = 47746;

  /// from: static public final int OPERATION_CLOSE_SESSION
  ///
  /// Operation code for CloseSession
  static const OPERATION_CLOSE_SESSION = 4099;

  /// from: static public final int OPERATION_COPY_OBJECT
  ///
  /// Operation code for CopyObject
  static const OPERATION_COPY_OBJECT = 4122;

  /// from: static public final int OPERATION_DELETE_OBJECT
  ///
  /// Operation code for DeleteObject
  static const OPERATION_DELETE_OBJECT = 4107;

  /// from: static public final int OPERATION_FORMAT_STORE
  ///
  /// Operation code for FormatStore
  static const OPERATION_FORMAT_STORE = 4111;

  /// from: static public final int OPERATION_GET_DEVICE_INFO
  ///
  /// Operation code for GetDeviceInfo
  static const OPERATION_GET_DEVICE_INFO = 4097;

  /// from: static public final int OPERATION_GET_DEVICE_PROP_DESC
  ///
  /// Operation code for GetDevicePropDesc
  static const OPERATION_GET_DEVICE_PROP_DESC = 4116;

  /// from: static public final int OPERATION_GET_DEVICE_PROP_VALUE
  ///
  /// Operation code for GetDevicePropValue
  static const OPERATION_GET_DEVICE_PROP_VALUE = 4117;

  /// from: static public final int OPERATION_GET_NUM_OBJECTS
  ///
  /// Operation code for GetNumObjects
  static const OPERATION_GET_NUM_OBJECTS = 4102;

  /// from: static public final int OPERATION_GET_OBJECT
  ///
  /// Operation code for GetObject
  static const OPERATION_GET_OBJECT = 4105;

  /// from: static public final int OPERATION_GET_OBJECT_HANDLES
  ///
  /// Operation code for GetObjectHandles
  static const OPERATION_GET_OBJECT_HANDLES = 4103;

  /// from: static public final int OPERATION_GET_OBJECT_INFO
  ///
  /// Operation code for GetObjectInfo
  static const OPERATION_GET_OBJECT_INFO = 4104;

  /// from: static public final int OPERATION_GET_OBJECT_PROPS_SUPPORTED
  ///
  /// Operation code for GetObjectPropsSupported
  static const OPERATION_GET_OBJECT_PROPS_SUPPORTED = 38913;

  /// from: static public final int OPERATION_GET_OBJECT_PROP_DESC
  ///
  /// Operation code for GetObjectPropDesc
  static const OPERATION_GET_OBJECT_PROP_DESC = 38914;

  /// from: static public final int OPERATION_GET_OBJECT_PROP_VALUE
  ///
  /// Operation code for GetObjectPropValue
  static const OPERATION_GET_OBJECT_PROP_VALUE = 38915;

  /// from: static public final int OPERATION_GET_OBJECT_REFERENCES
  ///
  /// Operation code for GetObjectReferences
  static const OPERATION_GET_OBJECT_REFERENCES = 38928;

  /// from: static public final int OPERATION_GET_PARTIAL_OBJECT
  ///
  /// Operation code for GetPartialObject
  static const OPERATION_GET_PARTIAL_OBJECT = 4123;

  /// from: static public final int OPERATION_GET_PARTIAL_OBJECT_64
  ///
  /// Operation code for GetPartialObject64
  static const OPERATION_GET_PARTIAL_OBJECT_64 = 38337;

  /// from: static public final int OPERATION_GET_STORAGE_INFO
  ///
  /// Operation code for GetStorageInfo
  static const OPERATION_GET_STORAGE_INFO = 4101;

  /// from: static public final int OPERATION_GET_STORAGE_I_DS
  ///
  /// Operation code for GetStorageIDs
  static const OPERATION_GET_STORAGE_I_DS = 4100;

  /// from: static public final int OPERATION_GET_THUMB
  ///
  /// Operation code for GetThumb
  static const OPERATION_GET_THUMB = 4106;

  /// from: static public final int OPERATION_INITIATE_CAPTURE
  ///
  /// Operation code for InitiateCapture
  static const OPERATION_INITIATE_CAPTURE = 4110;

  /// from: static public final int OPERATION_INITIATE_OPEN_CAPTURE
  ///
  /// Operation code for InitiateOpenCapture
  static const OPERATION_INITIATE_OPEN_CAPTURE = 4124;

  /// from: static public final int OPERATION_MOVE_OBJECT
  ///
  /// Operation code for MoveObject
  static const OPERATION_MOVE_OBJECT = 4121;

  /// from: static public final int OPERATION_OPEN_SESSION
  ///
  /// Operation code for OpenSession
  static const OPERATION_OPEN_SESSION = 4098;

  /// from: static public final int OPERATION_POWER_DOWN
  ///
  /// Operation code for PowerDown
  static const OPERATION_POWER_DOWN = 4115;

  /// from: static public final int OPERATION_RESET_DEVICE
  ///
  /// Operation code for ResetDevice
  static const OPERATION_RESET_DEVICE = 4112;

  /// from: static public final int OPERATION_RESET_DEVICE_PROP_VALUE
  ///
  /// Operation code for ResetDevicePropValue
  static const OPERATION_RESET_DEVICE_PROP_VALUE = 4119;

  /// from: static public final int OPERATION_SELF_TEST
  ///
  /// Operation code for SelfTest
  static const OPERATION_SELF_TEST = 4113;

  /// from: static public final int OPERATION_SEND_OBJECT
  ///
  /// Operation code for SendObject
  static const OPERATION_SEND_OBJECT = 4109;

  /// from: static public final int OPERATION_SEND_OBJECT_INFO
  ///
  /// Operation code for SendObjectInfo
  static const OPERATION_SEND_OBJECT_INFO = 4108;

  /// from: static public final int OPERATION_SET_DEVICE_PROP_VALUE
  ///
  /// Operation code for SetDevicePropValue
  static const OPERATION_SET_DEVICE_PROP_VALUE = 4118;

  /// from: static public final int OPERATION_SET_OBJECT_PROP_VALUE
  ///
  /// Operation code for SetObjectPropValue
  static const OPERATION_SET_OBJECT_PROP_VALUE = 38916;

  /// from: static public final int OPERATION_SET_OBJECT_PROTECTION
  ///
  /// Operation code for SetObjectProtection
  static const OPERATION_SET_OBJECT_PROTECTION = 4114;

  /// from: static public final int OPERATION_SET_OBJECT_REFERENCES
  ///
  /// Operation code for SetObjectReferences
  static const OPERATION_SET_OBJECT_REFERENCES = 38929;

  /// from: static public final int OPERATION_SKIP
  ///
  /// Operation code for Skip
  static const OPERATION_SKIP = 38944;

  /// from: static public final int OPERATION_TERMINATE_OPEN_CAPTURE
  ///
  /// Operation code for TerminateOpenCapture
  static const OPERATION_TERMINATE_OPEN_CAPTURE = 4120;

  /// from: static public final int PROTECTION_STATUS_NONE
  ///
  /// Object is not protected. It may be modified and deleted, and its properties
  /// may be modified.
  static const PROTECTION_STATUS_NONE = 0;

  /// from: static public final int PROTECTION_STATUS_NON_TRANSFERABLE_DATA
  ///
  /// Object's contents can not be transfered from the device, but the object
  /// may be moved or deleted and its properties may be modified.
  static const PROTECTION_STATUS_NON_TRANSFERABLE_DATA = 32771;

  /// from: static public final int PROTECTION_STATUS_READ_ONLY
  ///
  /// Object can not be modified or deleted and its properties can not be modified.
  static const PROTECTION_STATUS_READ_ONLY = 32769;

  /// from: static public final int PROTECTION_STATUS_READ_ONLY_DATA
  ///
  /// Object can not be modified or deleted but its properties are modifiable.
  static const PROTECTION_STATUS_READ_ONLY_DATA = 32770;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MtpConstants()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_isAbstractObject =
      jniAccessors.getStaticMethodIDOf(_classRef, "isAbstractObject", "(I)Z");

  /// from: static public boolean isAbstractObject(int format)
  ///
  /// Returns true if the object is abstract (that is, it has no representation
  /// in the underlying file system).
  ///@param format the format of the object
  ///@return true if the object is abstract
  static bool isAbstractObject(int format) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isAbstractObject,
          jni.JniType.booleanType, [format]).boolean;
}
