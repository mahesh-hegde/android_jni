// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.mtp.MtpStorageInfo
///
/// This class encapsulates information about a storage unit on an MTP device.
/// This corresponds to the StorageInfo Dataset described in
/// section 5.2.2 of the MTP specification.
class MtpStorageInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/mtp/MtpStorageInfo");
  MtpStorageInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getStorageId =
      jniAccessors.getMethodIDOf(_classRef, "getStorageId", "()I");

  /// from: public int getStorageId()
  ///
  /// Returns the storage ID for the storage unit.
  /// The storage ID uniquely identifies the storage unit on the MTP device.
  ///@return the storage ID
  int getStorageId() => jniAccessors.callMethodWithArgs(
      reference, _id_getStorageId, jni.JniType.intType, []).integer;

  static final _id_getMaxCapacity =
      jniAccessors.getMethodIDOf(_classRef, "getMaxCapacity", "()J");

  /// from: public long getMaxCapacity()
  ///
  /// Returns the maximum storage capacity for the storage unit in bytes
  ///@return the maximum capacity
  int getMaxCapacity() => jniAccessors.callMethodWithArgs(
      reference, _id_getMaxCapacity, jni.JniType.longType, []).long;

  static final _id_getFreeSpace =
      jniAccessors.getMethodIDOf(_classRef, "getFreeSpace", "()J");

  /// from: public long getFreeSpace()
  ///
  /// Returns the amount of free space in the storage unit in bytes
  ///@return the amount of free space
  int getFreeSpace() => jniAccessors.callMethodWithArgs(
      reference, _id_getFreeSpace, jni.JniType.longType, []).long;

  static final _id_getDescription = jniAccessors.getMethodIDOf(
      _classRef, "getDescription", "()Ljava/lang/String;");

  /// from: public java.lang.String getDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the description string for the storage unit.
  /// This is typically displayed to the user in the user interface on the
  /// MTP host.
  ///@return the storage unit description
  ///
  /// This value will never be {@code null}.
  jni.JniString getDescription() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDescription, jni.JniType.objectType, []).object);

  static final _id_getVolumeIdentifier = jniAccessors.getMethodIDOf(
      _classRef, "getVolumeIdentifier", "()Ljava/lang/String;");

  /// from: public java.lang.String getVolumeIdentifier()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the volume identifier for the storage unit
  ///@return the storage volume identifier
  ///
  /// This value will never be {@code null}.
  jni.JniString getVolumeIdentifier() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getVolumeIdentifier, jni.JniType.objectType, []).object);
}
