// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.Parcelable
///
/// Interface for classes whose instances can be written to
/// and restored from a Parcel.  Classes implementing the Parcelable
/// interface must also have a non-null static field called <code>CREATOR</code>
/// of a type that implements the Parcelable.Creator interface.
///
/// A typical implementation of Parcelable is:
///
///
/// <pre>
/// public class MyParcelable implements Parcelable {
///     private int mData;
///
///     public int describeContents() {
///         return 0;
///     }
///
///     public void writeToParcel(Parcel out, int flags) {
///         out.writeInt(mData);
///     }
///
///     public static final Parcelable.Creator&lt;MyParcelable&gt; CREATOR
///             = new Parcelable.Creator&lt;MyParcelable&gt;() {
///         public MyParcelable createFromParcel(Parcel in) {
///             return new MyParcelable(in);
///         }
///
///         public MyParcelable[] newArray(int size) {
///             return new MyParcelable[size];
///         }
///     };
///
///     private MyParcelable(Parcel in) {
///         mData = in.readInt();
///     }
/// }</pre>
class Parcelable extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/os/Parcelable");
  Parcelable.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CONTENTS_FILE_DESCRIPTOR
  ///
  /// Descriptor bit used with \#describeContents(): indicates that
  /// the Parcelable object's flattened representation includes a file descriptor.
  ///@see \#describeContents()
  static const CONTENTS_FILE_DESCRIPTOR = 1;

  /// from: static public final int PARCELABLE_WRITE_RETURN_VALUE
  ///
  /// Flag for use with \#writeToParcel: the object being written
  /// is a return value, that is the result of a function such as
  /// "<code>Parcelable someFunction()</code>",
  /// "<code>void someFunction(out Parcelable)</code>", or
  /// "<code>void someFunction(inout Parcelable)</code>".  Some implementations
  /// may want to release resources at this point.
  static const PARCELABLE_WRITE_RETURN_VALUE = 1;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public abstract int describeContents()
  ///
  /// Describe the kinds of special objects contained in this Parcelable
  /// instance's marshaled representation. For example, if the object will
  /// include a file descriptor in the output of \#writeToParcel(Parcel, int),
  /// the return value of this method must include the
  /// \#CONTENTS_FILE_DESCRIPTOR bit.
  ///@return a bitmask indicating the set of special object types marshaled
  /// by this Parcelable object instance.
  ///
  /// Value is either <code>0</code> or android.os.Parcelable\#CONTENTS_FILE_DESCRIPTOR
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public abstract void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Flatten this object in to a Parcel.
  ///@param dest The Parcel in which the object should be written.
  ///@param flags Additional flags about how the object should be written.
  /// May be 0 or \#PARCELABLE_WRITE_RETURN_VALUE.
  ///
  /// Value is either <code>0</code> or a combination of android.os.Parcelable\#PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.os.Parcelable$Creator
///
/// Interface that must be implemented and provided as a public CREATOR
/// field that generates instances of your Parcelable class from a Parcel.
class Parcelable_Creator extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/os/Parcelable\$Creator");
  Parcelable_Creator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_newArray = jniAccessors.getMethodIDOf(
      _classRef, "newArray", "(I)[Ljava/lang/Object;");

  /// from: public abstract T[] newArray(int size)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new array of the Parcelable class.
  ///@param size Size of the array.
  ///@return Returns an array of the Parcelable class, with every entry
  /// initialized to null.
  jni.JniObject newArray(int size) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_newArray, jni.JniType.objectType, [size]).object);
}

/// from: android.os.Parcelable$ClassLoaderCreator
///
/// Specialization of Creator that allows you to receive the
/// ClassLoader the object is being created in.
class Parcelable_ClassLoaderCreator extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/os/Parcelable\$ClassLoaderCreator");
  Parcelable_ClassLoaderCreator.fromRef(jni.JObject ref) : super.fromRef(ref);
}
