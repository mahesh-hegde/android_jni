// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.CancellationSignal
///
/// Provides the ability to cancel an operation in progress.
class CancellationSignal extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/os/CancellationSignal");
  CancellationSignal.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a cancellation signal, initially not canceled.
  CancellationSignal()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_isCanceled =
      jniAccessors.getMethodIDOf(_classRef, "isCanceled", "()Z");

  /// from: public boolean isCanceled()
  ///
  /// Returns true if the operation has been canceled.
  ///@return True if the operation has been canceled.
  bool isCanceled() => jniAccessors.callMethodWithArgs(
      reference, _id_isCanceled, jni.JniType.booleanType, []).boolean;

  static final _id_throwIfCanceled =
      jniAccessors.getMethodIDOf(_classRef, "throwIfCanceled", "()V");

  /// from: public void throwIfCanceled()
  ///
  /// Throws OperationCanceledException if the operation has been canceled.
  ///@throws OperationCanceledException if the operation has been canceled.
  void throwIfCanceled() => jniAccessors.callMethodWithArgs(
      reference, _id_throwIfCanceled, jni.JniType.voidType, []).check();

  static final _id_cancel =
      jniAccessors.getMethodIDOf(_classRef, "cancel", "()V");

  /// from: public void cancel()
  ///
  /// Cancels the operation and signals the cancellation listener.
  /// If the operation has not yet started, then it will be canceled as soon as it does.
  void cancel() => jniAccessors.callMethodWithArgs(
      reference, _id_cancel, jni.JniType.voidType, []).check();

  static final _id_setOnCancelListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnCancelListener",
      "(Landroid/os/CancellationSignal\$OnCancelListener;)V");

  /// from: public void setOnCancelListener(android.os.CancellationSignal.OnCancelListener listener)
  ///
  /// Sets the cancellation listener to be called when canceled.
  ///
  /// This method is intended to be used by the recipient of a cancellation signal
  /// such as a database or a content provider to handle cancellation requests
  /// while performing a long-running operation.  This method is not intended to be
  /// used by applications themselves.
  ///
  /// If CancellationSignal\#cancel has already been called, then the provided
  /// listener is invoked immediately.
  ///
  /// This method is guaranteed that the listener will not be called after it
  /// has been removed.
  ///@param listener The cancellation listener, or null to remove the current listener.
  void setOnCancelListener(CancellationSignal_OnCancelListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnCancelListener,
          jni.JniType.voidType, [listener.reference]).check();
}

/// from: android.os.CancellationSignal$OnCancelListener
///
/// Listens for cancellation.
class CancellationSignal_OnCancelListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/os/CancellationSignal\$OnCancelListener");
  CancellationSignal_OnCancelListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onCancel =
      jniAccessors.getMethodIDOf(_classRef, "onCancel", "()V");

  /// from: public abstract void onCancel()
  ///
  /// Called when CancellationSignal\#cancel is invoked.
  void onCancel() => jniAccessors.callMethodWithArgs(
      reference, _id_onCancel, jni.JniType.voidType, []).check();
}
