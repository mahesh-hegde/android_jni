// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../Parcelable.dart" as parcelable_;

import "../Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.health.TimerStat
///
/// A TimerStat object stores a count and a time.
///@more When possible, the other APIs in this package avoid requiring a TimerStat
/// object to be constructed, even internally, but the getTimers method on
/// android.os.health.HealthStats does require TimerStat objects.
class TimerStat extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/os/health/TimerStat");
  TimerStat.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.os.health.TimerStat> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The CREATOR instance for use by aidl Binder interfaces.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct an empty TimerStat object with the count and time set to 0.
  TimerStat()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IJ)V");

  /// from: public void <init>(int count, long time)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a TimerStat object with the supplied count and time fields.
  ///@param count The count
  ///@param time The time
  TimerStat.ctor1(int count, int time)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [count, time]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a TimerStat object reading the values from a android.os.Parcel Parcel
  /// object.
  TimerStat.ctor2(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [in0.reference]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// @inheritDoc
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  ///
  /// Write this TimerStat object to a parcel.
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_setCount =
      jniAccessors.getMethodIDOf(_classRef, "setCount", "(I)V");

  /// from: public void setCount(int count)
  ///
  /// Set the count for this timer.
  void setCount(int count) => jniAccessors.callMethodWithArgs(
      reference, _id_setCount, jni.JniType.voidType, [count]).check();

  static final _id_getCount =
      jniAccessors.getMethodIDOf(_classRef, "getCount", "()I");

  /// from: public int getCount()
  ///
  /// Get the count for this timer.
  int getCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getCount, jni.JniType.intType, []).integer;

  static final _id_setTime =
      jniAccessors.getMethodIDOf(_classRef, "setTime", "(J)V");

  /// from: public void setTime(long time)
  ///
  /// Set the time for this timer in milliseconds.
  void setTime(int time) => jniAccessors.callMethodWithArgs(
      reference, _id_setTime, jni.JniType.voidType, [time]).check();

  static final _id_getTime =
      jniAccessors.getMethodIDOf(_classRef, "getTime", "()J");

  /// from: public long getTime()
  ///
  /// Get the time for this timer in milliseconds.
  int getTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getTime, jni.JniType.longType, []).long;
}
