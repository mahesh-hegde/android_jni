// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Parcelable.dart" as parcelable_;

import "Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.WorkSource
///
/// Describes the source of some work that may be done by someone else.
/// Currently the public representation of what a work source is is not
/// defined; this is an opaque container.
class WorkSource extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/os/WorkSource");
  WorkSource.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.os.WorkSource> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an empty work source.
  WorkSource()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/os/WorkSource;)V");

  /// from: public void <init>(android.os.WorkSource orig)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new WorkSource that is a copy of an existing one.
  /// If <var>orig</var> is null, an empty WorkSource is created.
  WorkSource.ctor1(WorkSource orig)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [orig.reference]).object);

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, "clear", "()V");

  /// from: public void clear()
  ///
  /// Clear this WorkSource to be empty.
  void clear() => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniType.voidType, []).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_diff = jniAccessors.getMethodIDOf(
      _classRef, "diff", "(Landroid/os/WorkSource;)Z");

  /// from: public boolean diff(android.os.WorkSource other)
  ///
  /// Compare this WorkSource with another.
  ///@param other The WorkSource to compare against.
  ///@return If there is a difference, true is returned.
  bool diff(WorkSource other) => jniAccessors.callMethodWithArgs(
      reference, _id_diff, jni.JniType.booleanType, [other.reference]).boolean;

  static final _id_set0 = jniAccessors.getMethodIDOf(
      _classRef, "set", "(Landroid/os/WorkSource;)V");

  /// from: public void set(android.os.WorkSource other)
  ///
  /// Replace the current contents of this work source with the given
  /// work source.  If {@code other} is null, the current work source
  /// will be made empty.
  void set0(WorkSource other) => jniAccessors.callMethodWithArgs(
      reference, _id_set0, jni.JniType.voidType, [other.reference]).check();

  static final _id_add = jniAccessors.getMethodIDOf(
      _classRef, "add", "(Landroid/os/WorkSource;)Z");

  /// from: public boolean add(android.os.WorkSource other)
  ///
  /// Merge the contents of <var>other</var> WorkSource in to this one.
  ///@param other The other WorkSource whose contents are to be merged.
  ///@return Returns true if any new sources were added.
  bool add(WorkSource other) => jniAccessors.callMethodWithArgs(
      reference, _id_add, jni.JniType.booleanType, [other.reference]).boolean;

  static final _id_remove = jniAccessors.getMethodIDOf(
      _classRef, "remove", "(Landroid/os/WorkSource;)Z");

  /// from: public boolean remove(android.os.WorkSource other)
  bool remove(WorkSource other) => jniAccessors.callMethodWithArgs(reference,
      _id_remove, jni.JniType.booleanType, [other.reference]).boolean;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
