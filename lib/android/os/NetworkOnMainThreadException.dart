// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.NetworkOnMainThreadException
///
/// The exception that is thrown when an application attempts
/// to perform a networking operation on its main thread.
///
/// This is only thrown for applications targeting the Honeycomb
/// SDK or higher.  Applications targeting earlier SDK versions
/// are allowed to do networking on their main event loop threads,
/// but it's heavily discouraged.  See the document
/// <a href="{@docRoot}guide/practices/design/responsiveness.html">
/// Designing for Responsiveness</a>.
///
/// Also see StrictMode.
class NetworkOnMainThreadException extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/os/NetworkOnMainThreadException");
  NetworkOnMainThreadException.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  NetworkOnMainThreadException()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
