// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.FileUriExposedException
///
/// The exception that is thrown when an application exposes a {@code file://}
/// android.net.Uri to another app.
///
/// This exposure is discouraged since the receiving app may not have access to
/// the shared path. For example, the receiving app may not have requested the
/// android.Manifest.permission\#READ_EXTERNAL_STORAGE runtime permission,
/// or the platform may be sharing the android.net.Uri across user
/// profile boundaries.
///
/// Instead, apps should use {@code content://} Uris so the platform can extend
/// temporary permission for the receiving app to access the resource.
///
/// This is only thrown for applications targeting Build.VERSION_CODES\#N
/// or higher. Applications targeting earlier SDK versions are allowed to share
/// {@code file://} android.net.Uri, but it's strongly discouraged.
///@see android.support.v4.content.FileProvider
///@see Intent\#FLAG_GRANT_READ_URI_PERMISSION
class FileUriExposedException extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/os/FileUriExposedException");
  FileUriExposedException.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  FileUriExposedException(jni.JniString message)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [message.reference]).object);
}
