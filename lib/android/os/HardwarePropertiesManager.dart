// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.HardwarePropertiesManager
///
/// The HardwarePropertiesManager class provides a mechanism of accessing hardware state of a
/// device: CPU, GPU and battery temperatures, CPU usage per core, fan speed, etc.
class HardwarePropertiesManager extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/os/HardwarePropertiesManager");
  HardwarePropertiesManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int DEVICE_TEMPERATURE_BATTERY
  ///
  /// Temperature of battery in Celsius.
  static const DEVICE_TEMPERATURE_BATTERY = 2;

  /// from: static public final int DEVICE_TEMPERATURE_CPU
  ///
  /// Temperature of CPUs in Celsius.
  static const DEVICE_TEMPERATURE_CPU = 0;

  /// from: static public final int DEVICE_TEMPERATURE_GPU
  ///
  /// Temperature of GPUs in Celsius.
  static const DEVICE_TEMPERATURE_GPU = 1;

  /// from: static public final int DEVICE_TEMPERATURE_SKIN
  ///
  /// Temperature of device skin in Celsius.
  static const DEVICE_TEMPERATURE_SKIN = 3;

  /// from: static public final int TEMPERATURE_CURRENT
  ///
  /// Get current temperature.
  static const TEMPERATURE_CURRENT = 0;

  /// from: static public final int TEMPERATURE_SHUTDOWN
  ///
  /// Get shutdown temperature threshold.
  static const TEMPERATURE_SHUTDOWN = 2;

  /// from: static public final int TEMPERATURE_THROTTLING
  ///
  /// Get throttling temperature threshold.
  static const TEMPERATURE_THROTTLING = 1;

  /// from: static public final int TEMPERATURE_THROTTLING_BELOW_VR_MIN
  ///
  /// Get throttling temperature threshold above which minimum clockrates for VR mode will not be
  /// met.
  static const TEMPERATURE_THROTTLING_BELOW_VR_MIN = 3;

  /// from: static public final float UNDEFINED_TEMPERATURE
  ///
  /// Undefined temperature constant.
  static const UNDEFINED_TEMPERATURE = -3.4028235e+38;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  HardwarePropertiesManager()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getDeviceTemperatures =
      jniAccessors.getMethodIDOf(_classRef, "getDeviceTemperatures", "(II)[F");

  /// from: public float[] getDeviceTemperatures(int type, int source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an array of device temperatures in Celsius.
  ///@param type type of requested device temperature, one of \#DEVICE_TEMPERATURE_CPU,
  /// \#DEVICE_TEMPERATURE_GPU, \#DEVICE_TEMPERATURE_BATTERY or \#DEVICE_TEMPERATURE_SKIN.
  /// Value is android.os.HardwarePropertiesManager\#DEVICE_TEMPERATURE_CPU, android.os.HardwarePropertiesManager\#DEVICE_TEMPERATURE_GPU, android.os.HardwarePropertiesManager\#DEVICE_TEMPERATURE_BATTERY, or android.os.HardwarePropertiesManager\#DEVICE_TEMPERATURE_SKIN
  ///@param source source of requested device temperature, one of \#TEMPERATURE_CURRENT,
  /// \#TEMPERATURE_THROTTLING, \#TEMPERATURE_THROTTLING_BELOW_VR_MIN or
  /// \#TEMPERATURE_SHUTDOWN.
  /// Value is android.os.HardwarePropertiesManager\#TEMPERATURE_CURRENT, android.os.HardwarePropertiesManager\#TEMPERATURE_THROTTLING, android.os.HardwarePropertiesManager\#TEMPERATURE_SHUTDOWN, or android.os.HardwarePropertiesManager\#TEMPERATURE_THROTTLING_BELOW_VR_MIN
  ///@return an array of requested float device temperatures. Temperature equals to
  ///         \#UNDEFINED_TEMPERATURE if undefined.
  ///         Empty if platform doesn't provide the queried temperature.
  ///
  /// This value will never be {@code null}.
  ///@throws SecurityException if something other than the device owner or the current VR service
  ///         tries to retrieve information provided by this service.
  jni.JniObject getDeviceTemperatures(int type, int source) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDeviceTemperatures,
          jni.JniType.objectType,
          [type, source]).object);

  static final _id_getCpuUsages = jniAccessors.getMethodIDOf(
      _classRef, "getCpuUsages", "()[Landroid/os/CpuUsageInfo;");

  /// from: public android.os.CpuUsageInfo[] getCpuUsages()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an array of CPU usage info for each core.
  ///@return an array of android.os.CpuUsageInfo for each core. Return {@code null} for
  ///         each unplugged core.
  ///         Empty if CPU usage is not supported on this system.
  ///@throws SecurityException if something other than the device owner or the current VR service
  ///         tries to retrieve information provided by this service.
  jni.JniObject getCpuUsages() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCpuUsages, jni.JniType.objectType, []).object);

  static final _id_getFanSpeeds =
      jniAccessors.getMethodIDOf(_classRef, "getFanSpeeds", "()[F");

  /// from: public float[] getFanSpeeds()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an array of fan speeds in RPM.
  ///@return an array of float fan speeds in RPM. Empty if there are no fans or fan speed is not
  /// supported on this system.
  ///
  /// This value will never be {@code null}.
  ///@throws SecurityException if something other than the device owner or the current VR service
  ///         tries to retrieve information provided by this service.
  jni.JniObject getFanSpeeds() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFanSpeeds, jni.JniType.objectType, []).object);
}
