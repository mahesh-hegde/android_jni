// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.ConditionVariable
///
/// Class that implements the condition variable locking paradigm.
///
///
/// This differs from the built-in java.lang.Object wait() and notify()
/// in that this class contains the condition to wait on itself.  That means
/// open(), close() and block() are sticky.  If open() is called before block(),
/// block() will not block, and instead return immediately.
///
///
/// This class uses itself as the object to wait on, so if you wait()
/// or notify() on a ConditionVariable, the results are undefined.
class ConditionVariable extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/os/ConditionVariable");
  ConditionVariable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create the ConditionVariable in the default closed state.
  ConditionVariable()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Z)V");

  /// from: public void <init>(boolean state)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create the ConditionVariable with the given state.
  ///
  ///
  /// Pass true for opened and false for closed.
  ConditionVariable.ctor1(bool state)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [state]).object);

  static final _id_open = jniAccessors.getMethodIDOf(_classRef, "open", "()V");

  /// from: public void open()
  ///
  /// Open the condition, and release all threads that are blocked.
  ///
  ///
  /// Any threads that later approach block() will not block unless close()
  /// is called.
  void open() => jniAccessors.callMethodWithArgs(
      reference, _id_open, jni.JniType.voidType, []).check();

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  ///
  /// Reset the condition to the closed state.
  ///
  ///
  /// Any threads that call block() will block until someone calls open.
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_block =
      jniAccessors.getMethodIDOf(_classRef, "block", "()V");

  /// from: public void block()
  ///
  /// Block the current thread until the condition is opened.
  ///
  ///
  /// If the condition is already opened, return immediately.
  void block() => jniAccessors.callMethodWithArgs(
      reference, _id_block, jni.JniType.voidType, []).check();

  static final _id_block1 =
      jniAccessors.getMethodIDOf(_classRef, "block", "(J)Z");

  /// from: public boolean block(long timeout)
  ///
  /// Block the current thread until the condition is opened or until
  /// timeout milliseconds have passed.
  ///
  ///
  /// If the condition is already opened, return immediately.
  ///@param timeout the maximum time to wait in milliseconds.
  ///@return true if the condition was opened, false if the call returns
  /// because of the timeout.
  bool block1(int timeout) => jniAccessors.callMethodWithArgs(
      reference, _id_block1, jni.JniType.booleanType, [timeout]).boolean;
}
