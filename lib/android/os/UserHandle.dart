// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Parcelable.dart" as parcelable_;

import "Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.UserHandle
///
/// Representation of a user on the device.
class UserHandle extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/os/UserHandle");
  UserHandle.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.os.UserHandle> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Instantiate a new UserHandle from the data in a Parcel that was
  /// previously written with \#writeToParcel(Parcel, int).  Note that you
  /// must not use this with data written by
  /// \#writeToParcel(UserHandle, Parcel) since it is not possible
  /// to handle a null UserHandle here.
  ///@param in The Parcel containing the previously written UserHandle,
  /// positioned at the location in the buffer where it was written.
  UserHandle(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [in0.reference]).object);

  static final _id_getUserHandleForUid = jniAccessors.getStaticMethodIDOf(
      _classRef, "getUserHandleForUid", "(I)Landroid/os/UserHandle;");

  /// from: static public android.os.UserHandle getUserHandleForUid(int uid)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the user for a given uid.
  ///@param uid A uid for an application running in a particular user.
  ///@return A UserHandle for that user.
  static UserHandle getUserHandleForUid(int uid) =>
      UserHandle.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getUserHandleForUid, jni.JniType.objectType, [uid]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_writeToParcel1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "writeToParcel", "(Landroid/os/UserHandle;Landroid/os/Parcel;)V");

  /// from: static public void writeToParcel(android.os.UserHandle h, android.os.Parcel out)
  ///
  /// Write a UserHandle to a Parcel, handling null pointers.  Must be
  /// read with \#readFromParcel(Parcel).
  ///@param h The UserHandle to be written.
  ///@param out The Parcel in which the UserHandle will be placed.
  ///@see \#readFromParcel(Parcel)
  static void writeToParcel1(UserHandle h, parcel_.Parcel out) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_writeToParcel1,
          jni.JniType.voidType, [h.reference, out.reference]).check();

  static final _id_readFromParcel = jniAccessors.getStaticMethodIDOf(_classRef,
      "readFromParcel", "(Landroid/os/Parcel;)Landroid/os/UserHandle;");

  /// from: static public android.os.UserHandle readFromParcel(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Read a UserHandle from a Parcel that was previously written
  /// with \#writeToParcel(UserHandle, Parcel), returning either
  /// a null or new object as appropriate.
  ///@param in The Parcel from which to read the UserHandle
  ///@return Returns a new UserHandle matching the previously written
  /// object, or null if a null had been written.
  ///@see \#writeToParcel(UserHandle, Parcel)
  static UserHandle readFromParcel(parcel_.Parcel in0) =>
      UserHandle.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_readFromParcel, jni.JniType.objectType, [in0.reference]).object);
}
