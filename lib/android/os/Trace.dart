// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.Trace
///
/// Writes trace events to the system trace buffer.  These trace events can be
/// collected and visualized using the Systrace tool.
///
/// This tracing mechanism is independent of the method tracing mechanism
/// offered by Debug\#startMethodTracing.  In particular, it enables
/// tracing of events that occur across multiple processes.
/// For information about using the Systrace tool, read <a href="{@docRoot}tools/debugging/systrace.html">Analyzing Display and Performance
/// with Systrace</a>.
class Trace extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/os/Trace");
  Trace.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_beginSection = jniAccessors.getStaticMethodIDOf(
      _classRef, "beginSection", "(Ljava/lang/String;)V");

  /// from: static public void beginSection(java.lang.String sectionName)
  ///
  /// Writes a trace message to indicate that a given section of code has begun. This call must
  /// be followed by a corresponding call to \#endSection() on the same thread.
  ///
  /// <p class="note"> At this time the vertical bar character '|', newline character '\n', and
  /// null character '\0' are used internally by the tracing mechanism.  If sectionName contains
  /// these characters they will be replaced with a space character in the trace.
  ///@param sectionName The name of the code section to appear in the trace.  This may be at
  /// most 127 Unicode code units long.
  static void beginSection(jni.JniString sectionName) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_beginSection,
          jni.JniType.voidType, [sectionName.reference]).check();

  static final _id_endSection =
      jniAccessors.getStaticMethodIDOf(_classRef, "endSection", "()V");

  /// from: static public void endSection()
  ///
  /// Writes a trace message to indicate that a given section of code has ended. This call must
  /// be preceeded by a corresponding call to \#beginSection(String). Calling this method
  /// will mark the end of the most recently begun section of code, so care must be taken to
  /// ensure that beginSection / endSection pairs are properly nested and called from the same
  /// thread.
  static void endSection() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_endSection, jni.JniType.voidType, []).check();
}
