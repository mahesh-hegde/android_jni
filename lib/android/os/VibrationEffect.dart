// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Parcelable.dart" as parcelable_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.VibrationEffect
///
/// A VibrationEffect describes a haptic effect to be performed by a Vibrator.
///
/// These effects may be any number of things, from single shot vibrations to complex waveforms.
class VibrationEffect extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/os/VibrationEffect");
  VibrationEffect.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.os.VibrationEffect> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int DEFAULT_AMPLITUDE
  ///
  /// The default vibration strength of the device.
  static const DEFAULT_AMPLITUDE = -1;

  static final _id_createOneShot = jniAccessors.getStaticMethodIDOf(
      _classRef, "createOneShot", "(JI)Landroid/os/VibrationEffect;");

  /// from: static public android.os.VibrationEffect createOneShot(long milliseconds, int amplitude)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a one shot vibration.
  ///
  /// One shot vibrations will vibrate constantly for the specified period of time at the
  /// specified amplitude, and then stop.
  ///@param milliseconds The number of milliseconds to vibrate. This must be a positive number.
  ///@param amplitude The strength of the vibration. This must be a value between 1 and 255, or
  /// \#DEFAULT_AMPLITUDE.
  ///@return The desired effect.
  static VibrationEffect createOneShot(int milliseconds, int amplitude) =>
      VibrationEffect.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createOneShot,
          jni.JniType.objectType,
          [milliseconds, amplitude]).object);

  static final _id_createWaveform = jniAccessors.getStaticMethodIDOf(
      _classRef, "createWaveform", "([JI)Landroid/os/VibrationEffect;");

  /// from: static public android.os.VibrationEffect createWaveform(long[] timings, int repeat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a waveform vibration.
  ///
  /// Waveform vibrations are a potentially repeating series of timing and amplitude pairs. For
  /// each pair, the value in the amplitude array determines the strength of the vibration and the
  /// value in the timing array determines how long it vibrates for. An amplitude of 0 implies no
  /// vibration (i.e. off), and any pairs with a timing value of 0 will be ignored.
  ///
  /// The amplitude array of the generated waveform will be the same size as the given
  /// timing array with alternating values of 0 (i.e. off) and \#DEFAULT_AMPLITUDE,
  /// starting with 0. Therefore the first timing value will be the period to wait before turning
  /// the vibrator on, the second value will be how long to vibrate at \#DEFAULT_AMPLITUDE
  /// strength, etc.
  ///
  ///
  /// To cause the pattern to repeat, pass the index into the timings array at which to start the
  /// repetition, or -1 to disable repeating.
  ///
  ///
  ///@param timings The pattern of alternating on-off timings, starting with off. Timing values
  ///                of 0 will cause the timing / amplitude pair to be ignored.
  ///@param repeat The index into the timings array at which to repeat, or -1 if you you don't
  ///               want to repeat.
  ///@return The desired effect.
  static VibrationEffect createWaveform(jni.JniObject timings, int repeat) =>
      VibrationEffect.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createWaveform,
          jni.JniType.objectType,
          [timings.reference, repeat]).object);

  static final _id_createWaveform1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "createWaveform", "([J[II)Landroid/os/VibrationEffect;");

  /// from: static public android.os.VibrationEffect createWaveform(long[] timings, int[] amplitudes, int repeat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a waveform vibration.
  ///
  /// Waveform vibrations are a potentially repeating series of timing and amplitude pairs. For
  /// each pair, the value in the amplitude array determines the strength of the vibration and the
  /// value in the timing array determines how long it vibrates for. An amplitude of 0 implies no
  /// vibration (i.e. off), and any pairs with a timing value of 0 will be ignored.
  ///
  ///
  /// To cause the pattern to repeat, pass the index into the timings array at which to start the
  /// repetition, or -1 to disable repeating.
  ///
  ///
  ///@param timings The timing values of the timing / amplitude pairs. Timing values of 0
  ///                will cause the pair to be ignored.
  ///@param amplitudes The amplitude values of the timing / amplitude pairs. Amplitude values
  ///                   must be between 0 and 255, or equal to \#DEFAULT_AMPLITUDE. An
  ///                   amplitude value of 0 implies the motor is off.
  ///@param repeat The index into the timings array at which to repeat, or -1 if you you don't
  ///               want to repeat.
  ///@return The desired effect.
  static VibrationEffect createWaveform1(
          jni.JniObject timings, jni.JniObject amplitudes, int repeat) =>
      VibrationEffect.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createWaveform1,
          jni.JniType.objectType,
          [timings.reference, amplitudes.reference, repeat]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
