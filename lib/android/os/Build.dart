// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.Build
///
/// Information about the current build, extracted from system properties.
class Build extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/os/Build");
  Build.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_BOARD =
      jniAccessors.getStaticFieldIDOf(_classRef, "BOARD", "Ljava/lang/String;");

  /// from: static public final java.lang.String BOARD
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the underlying board, like "goldfish".
  static jni.JniString get BOARD => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_BOARD, jni.JniType.objectType)
      .object);

  static final _id_BOOTLOADER = jniAccessors.getStaticFieldIDOf(
      _classRef, "BOOTLOADER", "Ljava/lang/String;");

  /// from: static public final java.lang.String BOOTLOADER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The system bootloader version number.
  static jni.JniString get BOOTLOADER => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_BOOTLOADER, jni.JniType.objectType)
      .object);

  static final _id_BRAND =
      jniAccessors.getStaticFieldIDOf(_classRef, "BRAND", "Ljava/lang/String;");

  /// from: static public final java.lang.String BRAND
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The consumer-visible brand with which the product/hardware will be associated, if any.
  static jni.JniString get BRAND => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_BRAND, jni.JniType.objectType)
      .object);

  static final _id_CPU_ABI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CPU_ABI", "Ljava/lang/String;");

  /// from: static public final java.lang.String CPU_ABI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the instruction set (CPU type + ABI convention) of native code.
  ///@deprecated Use \#SUPPORTED_ABIS instead.
  static jni.JniString get CPU_ABI => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CPU_ABI, jni.JniType.objectType)
      .object);

  static final _id_CPU_ABI2 = jniAccessors.getStaticFieldIDOf(
      _classRef, "CPU_ABI2", "Ljava/lang/String;");

  /// from: static public final java.lang.String CPU_ABI2
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the second instruction set (CPU type + ABI convention) of native code.
  ///@deprecated Use \#SUPPORTED_ABIS instead.
  static jni.JniString get CPU_ABI2 => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CPU_ABI2, jni.JniType.objectType)
      .object);

  static final _id_DEVICE = jniAccessors.getStaticFieldIDOf(
      _classRef, "DEVICE", "Ljava/lang/String;");

  /// from: static public final java.lang.String DEVICE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the industrial design.
  static jni.JniString get DEVICE => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_DEVICE, jni.JniType.objectType)
      .object);

  static final _id_DISPLAY = jniAccessors.getStaticFieldIDOf(
      _classRef, "DISPLAY", "Ljava/lang/String;");

  /// from: static public final java.lang.String DISPLAY
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A build ID string meant for displaying to the user
  static jni.JniString get DISPLAY => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_DISPLAY, jni.JniType.objectType)
      .object);

  static final _id_FINGERPRINT = jniAccessors.getStaticFieldIDOf(
      _classRef, "FINGERPRINT", "Ljava/lang/String;");

  /// from: static public final java.lang.String FINGERPRINT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A string that uniquely identifies this build.  Do not attempt to parse this value.
  static jni.JniString get FINGERPRINT => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_FINGERPRINT, jni.JniType.objectType)
      .object);

  static final _id_HARDWARE = jniAccessors.getStaticFieldIDOf(
      _classRef, "HARDWARE", "Ljava/lang/String;");

  /// from: static public final java.lang.String HARDWARE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the hardware (from the kernel command line or /proc).
  static jni.JniString get HARDWARE => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_HARDWARE, jni.JniType.objectType)
      .object);

  static final _id_HOST =
      jniAccessors.getStaticFieldIDOf(_classRef, "HOST", "Ljava/lang/String;");

  /// from: static public final java.lang.String HOST
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString get HOST => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_HOST, jni.JniType.objectType)
      .object);

  static final _id_ID =
      jniAccessors.getStaticFieldIDOf(_classRef, "ID", "Ljava/lang/String;");

  /// from: static public final java.lang.String ID
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Either a changelist number, or a label like "M4-rc20".
  static jni.JniString get ID => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ID, jni.JniType.objectType)
      .object);

  static final _id_MANUFACTURER = jniAccessors.getStaticFieldIDOf(
      _classRef, "MANUFACTURER", "Ljava/lang/String;");

  /// from: static public final java.lang.String MANUFACTURER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The manufacturer of the product/hardware.
  static jni.JniString get MANUFACTURER => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MANUFACTURER, jni.JniType.objectType)
      .object);

  static final _id_MODEL =
      jniAccessors.getStaticFieldIDOf(_classRef, "MODEL", "Ljava/lang/String;");

  /// from: static public final java.lang.String MODEL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The end-user-visible name for the end product.
  static jni.JniString get MODEL => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MODEL, jni.JniType.objectType)
      .object);

  static final _id_PRODUCT = jniAccessors.getStaticFieldIDOf(
      _classRef, "PRODUCT", "Ljava/lang/String;");

  /// from: static public final java.lang.String PRODUCT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The name of the overall product.
  static jni.JniString get PRODUCT => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_PRODUCT, jni.JniType.objectType)
      .object);

  static final _id_RADIO =
      jniAccessors.getStaticFieldIDOf(_classRef, "RADIO", "Ljava/lang/String;");

  /// from: static public final java.lang.String RADIO
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The radio firmware version number.
  ///@deprecated The radio firmware version is frequently not
  /// available when this class is initialized, leading to a blank or
  /// "unknown" value for this string.  Use
  /// \#getRadioVersion instead.
  static jni.JniString get RADIO => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_RADIO, jni.JniType.objectType)
      .object);

  static final _id_SERIAL = jniAccessors.getStaticFieldIDOf(
      _classRef, "SERIAL", "Ljava/lang/String;");

  /// from: static public final java.lang.String SERIAL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A hardware serial number, if available. Alphanumeric only, case-insensitive.
  /// For apps targeting SDK higher than Build.VERSION_CODES\#O_MR1 this
  /// field is set to Build\#UNKNOWN.
  ///@deprecated Use \#getSerial() instead.
  static jni.JniString get SERIAL => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SERIAL, jni.JniType.objectType)
      .object);

  static final _id_SUPPORTED_32_BIT_ABIS = jniAccessors.getStaticFieldIDOf(
      _classRef, "SUPPORTED_32_BIT_ABIS", "[Ljava/lang/String;");

  /// from: static public final java.lang.String[] SUPPORTED_32_BIT_ABIS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// An ordered list of __32 bit__ ABIs supported by this device. The most preferred ABI
  /// is the first element in the list.
  ///
  /// See \#SUPPORTED_ABIS and \#SUPPORTED_64_BIT_ABIS.
  static jni.JniObject get SUPPORTED_32_BIT_ABIS =>
      jni.JniObject.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_SUPPORTED_32_BIT_ABIS, jni.JniType.objectType)
          .object);

  static final _id_SUPPORTED_64_BIT_ABIS = jniAccessors.getStaticFieldIDOf(
      _classRef, "SUPPORTED_64_BIT_ABIS", "[Ljava/lang/String;");

  /// from: static public final java.lang.String[] SUPPORTED_64_BIT_ABIS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// An ordered list of __64 bit__ ABIs supported by this device. The most preferred ABI
  /// is the first element in the list.
  ///
  /// See \#SUPPORTED_ABIS and \#SUPPORTED_32_BIT_ABIS.
  static jni.JniObject get SUPPORTED_64_BIT_ABIS =>
      jni.JniObject.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_SUPPORTED_64_BIT_ABIS, jni.JniType.objectType)
          .object);

  static final _id_SUPPORTED_ABIS = jniAccessors.getStaticFieldIDOf(
      _classRef, "SUPPORTED_ABIS", "[Ljava/lang/String;");

  /// from: static public final java.lang.String[] SUPPORTED_ABIS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// An ordered list of ABIs supported by this device. The most preferred ABI is the first
  /// element in the list.
  ///
  /// See \#SUPPORTED_32_BIT_ABIS and \#SUPPORTED_64_BIT_ABIS.
  static jni.JniObject get SUPPORTED_ABIS => jni.JniObject.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SUPPORTED_ABIS, jni.JniType.objectType)
      .object);

  static final _id_TAGS =
      jniAccessors.getStaticFieldIDOf(_classRef, "TAGS", "Ljava/lang/String;");

  /// from: static public final java.lang.String TAGS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Comma-separated tags describing the build, like "unsigned,debug".
  static jni.JniString get TAGS => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_TAGS, jni.JniType.objectType)
      .object);

  static final _id_TIME =
      jniAccessors.getStaticFieldIDOf(_classRef, "TIME", "J");

  /// from: static public final long TIME
  static int get TIME => jniAccessors
      .getStaticField(_classRef, _id_TIME, jni.JniType.longType)
      .long;

  static final _id_TYPE =
      jniAccessors.getStaticFieldIDOf(_classRef, "TYPE", "Ljava/lang/String;");

  /// from: static public final java.lang.String TYPE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The type of build, like "user" or "eng".
  static jni.JniString get TYPE => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_TYPE, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String UNKNOWN
  ///
  /// Value used for when a build property is unknown.
  static const UNKNOWN = "unknown";

  static final _id_USER =
      jniAccessors.getStaticFieldIDOf(_classRef, "USER", "Ljava/lang/String;");

  /// from: static public final java.lang.String USER
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniString get USER => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_USER, jni.JniType.objectType)
      .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Build()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getSerial = jniAccessors.getStaticMethodIDOf(
      _classRef, "getSerial", "()Ljava/lang/String;");

  /// from: static public java.lang.String getSerial()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the hardware serial number, if available.
  ///
  /// <p class="note">__Note:__ Root access may allow you to modify device identifiers, such as
  /// the hardware serial number. If you change these identifiers, you can use
  /// <a href="/training/articles/security-key-attestation.html">key attestation</a> to obtain
  /// proof of the device's original identifiers.
  ///
  /// Requires android.Manifest.permission\#READ_PHONE_STATE
  ///@return The serial number if specified.
  static jni.JniString getSerial() =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getSerial, jni.JniType.objectType, []).object);

  static final _id_getRadioVersion = jniAccessors.getStaticMethodIDOf(
      _classRef, "getRadioVersion", "()Ljava/lang/String;");

  /// from: static public java.lang.String getRadioVersion()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the version string for the radio firmware.  May return
  /// null (if, for instance, the radio is not currently on).
  static jni.JniString getRadioVersion() =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getRadioVersion, jni.JniType.objectType, []).object);
}

/// from: android.os.Build$VERSION_CODES
///
/// Enumeration of the currently known SDK version codes.  These are the
/// values that can be found in VERSION\#SDK.  Version numbers
/// increment monotonically with each official platform release.
class Build_VERSION_CODES extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/os/Build\$VERSION_CODES");
  Build_VERSION_CODES.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int BASE
  ///
  /// October 2008: The original, first, version of Android.  Yay!
  static const BASE = 1;

  /// from: static public final int BASE_1_1
  ///
  /// February 2009: First Android update, officially called 1.1.
  static const BASE_1_1 = 2;

  /// from: static public final int CUPCAKE
  ///
  /// May 2009: Android 1.5.
  static const CUPCAKE = 3;

  /// from: static public final int CUR_DEVELOPMENT
  ///
  /// Magic version number for a current development build, which has
  /// not yet turned into an official release.
  static const CUR_DEVELOPMENT = 10000;

  /// from: static public final int DONUT
  ///
  /// September 2009: Android 1.6.
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li> They must explicitly request the
  /// android.Manifest.permission\#WRITE_EXTERNAL_STORAGE permission to be
  /// able to modify the contents of the SD card.  (Apps targeting
  /// earlier versions will always request the permission.)
  /// <li> They must explicitly request the
  /// android.Manifest.permission\#READ_PHONE_STATE permission to be
  /// able to be able to retrieve phone state info.  (Apps targeting
  /// earlier versions will always request the permission.)
  /// <li> They are assumed to support different screen densities and
  /// sizes.  (Apps targeting earlier versions are assumed to only support
  /// medium density normal size screens unless otherwise indicated).
  /// They can still explicitly specify screen support either way with the
  /// supports-screens manifest tag.
  /// <li> android.widget.TabHost will use the new dark tab
  /// background design.
  /// </ul>
  static const DONUT = 4;

  /// from: static public final int ECLAIR
  ///
  /// November 2009: Android 2.0
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li> The android.app.Service\#onStartCommand Service.onStartCommand function will return the new
  /// android.app.Service\#START_STICKY behavior instead of the
  /// old compatibility android.app.Service\#START_STICKY_COMPATIBILITY.
  /// <li> The android.app.Activity class will now execute back
  /// key presses on the key up instead of key down, to be able to detect
  /// canceled presses from virtual keys.
  /// <li> The android.widget.TabWidget class will use a new color scheme
  /// for tabs. In the new scheme, the foreground tab has a medium gray background
  /// the background tabs have a dark gray background.
  /// </ul>
  static const ECLAIR = 5;

  /// from: static public final int ECLAIR_0_1
  ///
  /// December 2009: Android 2.0.1
  static const ECLAIR_0_1 = 6;

  /// from: static public final int ECLAIR_MR1
  ///
  /// January 2010: Android 2.1
  static const ECLAIR_MR1 = 7;

  /// from: static public final int FROYO
  ///
  /// June 2010: Android 2.2
  static const FROYO = 8;

  /// from: static public final int GINGERBREAD
  ///
  /// November 2010: Android 2.3
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li> The application's notification icons will be shown on the new
  /// dark status bar background, so must be visible in this situation.
  /// </ul>
  static const GINGERBREAD = 9;

  /// from: static public final int GINGERBREAD_MR1
  ///
  /// February 2011: Android 2.3.3.
  static const GINGERBREAD_MR1 = 10;

  /// from: static public final int HONEYCOMB
  ///
  /// February 2011: Android 3.0.
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li> The default theme for applications is now dark holographic:
  ///      android.R.style\#Theme_Holo.
  /// <li> On large screen devices that do not have a physical menu
  /// button, the soft (compatibility) menu is disabled.
  /// <li> The activity lifecycle has changed slightly as per
  /// android.app.Activity.
  /// <li> An application will crash if it does not call through
  /// to the super implementation of its
  /// android.app.Activity\#onPause Activity.onPause() method.
  /// <li> When an application requires a permission to access one of
  /// its components (activity, receiver, service, provider), this
  /// permission is no longer enforced when the application wants to
  /// access its own component.  This means it can require a permission
  /// on a component that it does not itself hold and still access that
  /// component.
  /// <li> android.content.Context\#getSharedPreferences Context.getSharedPreferences() will not automatically reload
  /// the preferences if they have changed on storage, unless
  /// android.content.Context\#MODE_MULTI_PROCESS is used.
  /// <li> android.view.ViewGroup\#setMotionEventSplittingEnabled
  /// will default to true.
  /// <li> android.view.WindowManager.LayoutParams\#FLAG_SPLIT_TOUCH
  /// is enabled by default on windows.
  /// <li> android.widget.PopupWindow\#isSplitTouchEnabled() PopupWindow.isSplitTouchEnabled() will return true by default.
  /// <li> android.widget.GridView and android.widget.ListView
  /// will use android.view.View\#setActivated View.setActivated
  /// for selected items if they do not implement android.widget.Checkable.
  /// <li> android.widget.Scroller will be constructed with
  /// "flywheel" behavior enabled by default.
  /// </ul>
  static const HONEYCOMB = 11;

  /// from: static public final int HONEYCOMB_MR1
  ///
  /// May 2011: Android 3.1.
  static const HONEYCOMB_MR1 = 12;

  /// from: static public final int HONEYCOMB_MR2
  ///
  /// June 2011: Android 3.2.
  ///
  /// Update to Honeycomb MR1 to support 7 inch tablets, improve
  /// screen compatibility mode, etc.
  ///
  ///
  /// As of this version, applications that don't say whether they
  /// support XLARGE screens will be assumed to do so only if they target
  /// \#HONEYCOMB or later; it had been \#GINGERBREAD or
  /// later.  Applications that don't support a screen size at least as
  /// large as the current screen will provide the user with a UI to
  /// switch them in to screen size compatibility mode.
  ///
  ///
  /// This version introduces new screen size resource qualifiers
  /// based on the screen size in dp: see
  /// android.content.res.Configuration\#screenWidthDp,
  /// android.content.res.Configuration\#screenHeightDp, and
  /// android.content.res.Configuration\#smallestScreenWidthDp.
  /// Supplying these in &lt;supports-screens&gt; as per
  /// android.content.pm.ApplicationInfo\#requiresSmallestWidthDp,
  /// android.content.pm.ApplicationInfo\#compatibleWidthLimitDp, and
  /// android.content.pm.ApplicationInfo\#largestWidthLimitDp is
  /// preferred over the older screen size buckets and for older devices
  /// the appropriate buckets will be inferred from them.
  ///
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li>New android.content.pm.PackageManager\#FEATURE_SCREEN_PORTRAIT
  /// and android.content.pm.PackageManager\#FEATURE_SCREEN_LANDSCAPE
  /// features were introduced in this release.  Applications that target
  /// previous platform versions are assumed to require both portrait and
  /// landscape support in the device; when targeting Honeycomb MR1 or
  /// greater the application is responsible for specifying any specific
  /// orientation it requires.
  ///
  /// <li>android.os.AsyncTask will use the serial executor
  /// by default when calling android.os.AsyncTask\#execute.
  ///
  /// <li>android.content.pm.ActivityInfo\#configChanges ActivityInfo.configChanges will have the
  /// android.content.pm.ActivityInfo\#CONFIG_SCREEN_SIZE and
  /// android.content.pm.ActivityInfo\#CONFIG_SMALLEST_SCREEN_SIZE
  /// bits set; these need to be cleared for older applications because
  /// some developers have done absolute comparisons against this value
  /// instead of correctly masking the bits they are interested in.
  /// </ul>
  static const HONEYCOMB_MR2 = 13;

  /// from: static public final int ICE_CREAM_SANDWICH
  ///
  /// October 2011: Android 4.0.
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li> For devices without a dedicated menu key, the software compatibility
  /// menu key will not be shown even on phones.  By targeting Ice Cream Sandwich
  /// or later, your UI must always have its own menu UI affordance if needed,
  /// on both tablets and phones.  The ActionBar will take care of this for you.
  /// <li> 2d drawing hardware acceleration is now turned on by default.
  /// You can use
  /// android.R.attr\#hardwareAccelerated android:hardwareAccelerated
  /// to turn it off if needed, although this is strongly discouraged since
  /// it will result in poor performance on larger screen devices.
  /// <li> The default theme for applications is now the "device default" theme:
  ///      android.R.style\#Theme_DeviceDefault. This may be the
  ///      holo dark theme or a different dark theme defined by the specific device.
  ///      The android.R.style\#Theme_Holo family must not be modified
  ///      for a device to be considered compatible. Applications that explicitly
  ///      request a theme from the Holo family will be guaranteed that these themes
  ///      will not change character within the same platform version. Applications
  ///      that wish to blend in with the device should use a theme from the
  ///      android.R.style\#Theme_DeviceDefault family.
  /// <li> Managed cursors can now throw an exception if you directly close
  /// the cursor yourself without stopping the management of it; previously failures
  /// would be silently ignored.
  /// <li> The fadingEdge attribute on views will be ignored (fading edges is no
  /// longer a standard part of the UI).  A new requiresFadingEdge attribute allows
  /// applications to still force fading edges on for special cases.
  /// <li> android.content.Context\#bindService Context.bindService()
  /// will not automatically add in android.content.Context\#BIND_WAIVE_PRIORITY.
  /// <li> App Widgets will have standard padding automatically added around
  /// them, rather than relying on the padding being baked into the widget itself.
  /// <li> An exception will be thrown if you try to change the type of a
  /// window after it has been added to the window manager.  Previously this
  /// would result in random incorrect behavior.
  /// <li> android.view.animation.AnimationSet will parse out
  /// the duration, fillBefore, fillAfter, repeatMode, and startOffset
  /// XML attributes that are defined.
  /// <li> android.app.ActionBar\#setHomeButtonEnabled ActionBar.setHomeButtonEnabled() is false by default.
  /// </ul>
  static const ICE_CREAM_SANDWICH = 14;

  /// from: static public final int ICE_CREAM_SANDWICH_MR1
  ///
  /// December 2011: Android 4.0.3.
  static const ICE_CREAM_SANDWICH_MR1 = 15;

  /// from: static public final int JELLY_BEAN
  ///
  /// June 2012: Android 4.1.
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li> You must explicitly request the android.Manifest.permission\#READ_CALL_LOG
  /// and/or android.Manifest.permission\#WRITE_CALL_LOG permissions;
  /// access to the call log is no longer implicitly provided through
  /// android.Manifest.permission\#READ_CONTACTS and
  /// android.Manifest.permission\#WRITE_CONTACTS.
  /// <li> android.widget.RemoteViews will throw an exception if
  /// setting an onClick handler for views being generated by a
  /// android.widget.RemoteViewsService for a collection container;
  /// previously this just resulted in a warning log message.
  /// <li> New android.app.ActionBar policy for embedded tabs:
  /// embedded tabs are now always stacked in the action bar when in portrait
  /// mode, regardless of the size of the screen.
  /// <li> android.webkit.WebSettings\#setAllowFileAccessFromFileURLs(boolean) WebSettings.setAllowFileAccessFromFileURLs and
  /// android.webkit.WebSettings\#setAllowUniversalAccessFromFileURLs(boolean) WebSettings.setAllowUniversalAccessFromFileURLs default to false.
  /// <li> Calls to android.content.pm.PackageManager\#setComponentEnabledSetting PackageManager.setComponentEnabledSetting will now throw an
  /// IllegalArgumentException if the given component class name does not
  /// exist in the application's manifest.
  /// <li> android.nfc.NfcAdapter\#setNdefPushMessage NfcAdapter.setNdefPushMessage,
  /// android.nfc.NfcAdapter\#setNdefPushMessageCallback NfcAdapter.setNdefPushMessageCallback and
  /// android.nfc.NfcAdapter\#setOnNdefPushCompleteCallback NfcAdapter.setOnNdefPushCompleteCallback will throw
  /// IllegalStateException if called after the Activity has been destroyed.
  /// <li> Accessibility services must require the new
  /// android.Manifest.permission\#BIND_ACCESSIBILITY_SERVICE permission or
  /// they will not be available for use.
  /// <li> android.accessibilityservice.AccessibilityServiceInfo\#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS must be set
  /// for unimportant views to be included in queries.
  /// </ul>
  static const JELLY_BEAN = 16;

  /// from: static public final int JELLY_BEAN_MR1
  ///
  /// November 2012: Android 4.2, Moar jelly beans!
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li>Content Providers: The default value of {@code android:exported} is now
  /// {@code false}. See
  /// <a href="{@docRoot}guide/topics/manifest/provider-element.html\#exported">
  /// the android:exported section</a> in the provider documentation for more details.</li>
  /// <li>android.view.View\#getLayoutDirection() View.getLayoutDirection()
  /// can return different values than android.view.View\#LAYOUT_DIRECTION_LTR
  /// based on the locale etc.
  /// <li> android.webkit.WebView\#addJavascriptInterface(Object, String) WebView.addJavascriptInterface requires explicit annotations on methods
  /// for them to be accessible from Javascript.
  /// </ul>
  static const JELLY_BEAN_MR1 = 17;

  /// from: static public final int JELLY_BEAN_MR2
  ///
  /// July 2013: Android 4.3, the revenge of the beans.
  static const JELLY_BEAN_MR2 = 18;

  /// from: static public final int KITKAT
  ///
  /// October 2013: Android 4.4, KitKat, another tasty treat.
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li> The default result of
  /// android.preference.PreferenceActivity\#isValidFragment(String) PreferenceActivity.isValueFragment becomes false instead of true.</li>
  /// <li> In android.webkit.WebView, apps targeting earlier versions will have
  /// JS URLs evaluated directly and any result of the evaluation will not replace
  /// the current page content.  Apps targetting KITKAT or later that load a JS URL will
  /// have the result of that URL replace the content of the current page</li>
  /// <li> android.app.AlarmManager\#set AlarmManager.set becomes interpreted as
  /// an inexact value, to give the system more flexibility in scheduling alarms.</li>
  /// <li> android.content.Context\#getSharedPreferences(String, int) Context.getSharedPreferences no longer allows a null name.</li>
  /// <li> android.widget.RelativeLayout changes to compute wrapped content
  /// margins correctly.</li>
  /// <li> android.app.ActionBar's window content overlay is allowed to be
  /// drawn.</li>
  /// <li>The android.Manifest.permission\#READ_EXTERNAL_STORAGE
  /// permission is now always enforced.</li>
  /// <li>Access to package-specific external storage directories belonging
  /// to the calling app no longer requires the
  /// android.Manifest.permission\#READ_EXTERNAL_STORAGE or
  /// android.Manifest.permission\#WRITE_EXTERNAL_STORAGE
  /// permissions.</li>
  /// </ul>
  static const KITKAT = 19;

  /// from: static public final int KITKAT_WATCH
  ///
  /// June 2014: Android 4.4W. KitKat for watches, snacks on the run.
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li>android.app.AlertDialog might not have a default background if the theme does
  /// not specify one.</li>
  /// </ul>
  static const KITKAT_WATCH = 20;

  /// from: static public final int LOLLIPOP
  ///
  /// November 2014: Lollipop.  A flat one with beautiful shadows.  But still tasty.
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li> android.content.Context\#bindService Context.bindService now
  /// requires an explicit Intent, and will throw an exception if given an implicit
  /// Intent.</li>
  /// <li> android.app.Notification.Builder Notification.Builder will
  /// not have the colors of their various notification elements adjusted to better
  /// match the new material design look.</li>
  /// <li> android.os.Message will validate that a message is not currently
  /// in use when it is recycled.</li>
  /// <li> Hardware accelerated drawing in windows will be enabled automatically
  /// in most places.</li>
  /// <li> android.widget.Spinner throws an exception if attaching an
  /// adapter with more than one item type.</li>
  /// <li> If the app is a launcher, the launcher will be available to the user
  /// even when they are using corporate profiles (which requires that the app
  /// use android.content.pm.LauncherApps to correctly populate its
  /// apps UI).</li>
  /// <li> Calling android.app.Service\#stopForeground Service.stopForeground
  /// with removeNotification false will modify the still posted notification so that
  /// it is no longer forced to be ongoing.</li>
  /// <li> A android.service.dreams.DreamService must require the
  /// android.Manifest.permission\#BIND_DREAM_SERVICE permission to be usable.</li>
  /// </ul>
  static const LOLLIPOP = 21;

  /// from: static public final int LOLLIPOP_MR1
  ///
  /// March 2015: Lollipop with an extra sugar coating on the outside!
  static const LOLLIPOP_MR1 = 22;

  /// from: static public final int M
  ///
  /// M is for Marshmallow!
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li> Runtime permissions.  Dangerous permissions are no longer granted at
  /// install time, but must be requested by the application at runtime through
  /// android.app.Activity\#requestPermissions.</li>
  /// <li> Bluetooth and Wi-Fi scanning now requires holding the location permission.</li>
  /// <li> android.app.AlarmManager\#setTimeZone AlarmManager.setTimeZone will fail if
  /// the given timezone is non-Olson.</li>
  /// <li> Activity transitions will only return shared
  /// elements mapped in the returned view hierarchy back to the calling activity.</li>
  /// <li> android.view.View allows a number of behaviors that may break
  /// existing apps: Canvas throws an exception if restore() is called too many times,
  /// widgets may return a hint size when returning UNSPECIFIED measure specs, and it
  /// will respect the attributes android.R.attr\#foreground,
  /// android.R.attr\#foregroundGravity, android.R.attr\#foregroundTint, and
  /// android.R.attr\#foregroundTintMode.</li>
  /// <li> android.view.MotionEvent\#getButtonState MotionEvent.getButtonState
  /// will no longer report android.view.MotionEvent\#BUTTON_PRIMARY
  /// and android.view.MotionEvent\#BUTTON_SECONDARY as synonyms for
  /// android.view.MotionEvent\#BUTTON_STYLUS_PRIMARY and
  /// android.view.MotionEvent\#BUTTON_STYLUS_SECONDARY.</li>
  /// <li> android.widget.ScrollView now respects the layout param margins
  /// when measuring.</li>
  /// </ul>
  static const M = 23;

  /// from: static public final int N
  ///
  /// N is for Nougat.
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li> android.app.DownloadManager.Request\#setAllowedNetworkTypes DownloadManager.Request.setAllowedNetworkTypes
  /// will disable "allow over metered" when specifying only
  /// android.app.DownloadManager.Request\#NETWORK_WIFI.</li>
  /// <li> android.app.DownloadManager no longer allows access to raw
  /// file paths.</li>
  /// <li> android.app.Notification.Builder\#setShowWhen Notification.Builder.setShowWhen
  /// must be called explicitly to have the time shown, and various other changes in
  /// android.app.Notification.Builder Notification.Builder to how notifications
  /// are shown.</li>
  /// <li>android.content.Context\#MODE_WORLD_READABLE and
  /// android.content.Context\#MODE_WORLD_WRITEABLE are no longer supported.</li>
  /// <li>android.os.FileUriExposedException will be thrown to applications.</li>
  /// <li>Applications will see global drag and drops as per
  /// android.view.View\#DRAG_FLAG_GLOBAL.</li>
  /// <li>android.webkit.WebView\#evaluateJavascript WebView.evaluateJavascript
  /// will not persist state from an empty WebView.</li>
  /// <li>android.animation.AnimatorSet will not ignore calls to end() before
  /// start().</li>
  /// <li>android.app.AlarmManager\#cancel(android.app.PendingIntent) AlarmManager.cancel will throw a NullPointerException if given a null operation.</li>
  /// <li>android.app.FragmentManager will ensure fragments have been created
  /// before being placed on the back stack.</li>
  /// <li>android.app.FragmentManager restores fragments in
  /// android.app.Fragment\#onCreate Fragment.onCreate rather than after the
  /// method returns.</li>
  /// <li>android.R.attr\#resizeableActivity defaults to true.</li>
  /// <li>android.graphics.drawable.AnimatedVectorDrawable throws exceptions when
  /// opening invalid VectorDrawable animations.</li>
  /// <li>android.view.ViewGroup.MarginLayoutParams will no longer be dropped
  /// when converting between some types of layout params (such as
  /// android.widget.LinearLayout.LayoutParams LinearLayout.LayoutParams to
  /// android.widget.RelativeLayout.LayoutParams RelativeLayout.LayoutParams).</li>
  /// <li>Your application processes will not be killed when the device density changes.</li>
  /// <li>Drag and drop. After a view receives the
  /// android.view.DragEvent\#ACTION_DRAG_ENTERED event, when the drag shadow moves into
  /// a descendant view that can accept the data, the view receives the
  /// android.view.DragEvent\#ACTION_DRAG_EXITED event and won\u2019t receive
  /// android.view.DragEvent\#ACTION_DRAG_LOCATION and
  /// android.view.DragEvent\#ACTION_DROP events while the drag shadow is within that
  /// descendant view, even if the descendant view returns <code>false</code> from its handler
  /// for these events.</li>
  /// </ul>
  static const N = 24;

  /// from: static public final int N_MR1
  ///
  /// N MR1: Nougat++.
  static const N_MR1 = 25;

  /// from: static public final int O
  ///
  /// O.
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li><a href="{@docRoot}about/versions/oreo/background.html">Background execution limits</a>
  /// are applied to the application.</li>
  /// <li>The behavior of AccountManager's
  /// android.accounts.AccountManager\#getAccountsByType,
  /// android.accounts.AccountManager\#getAccountsByTypeAndFeatures, and
  /// android.accounts.AccountManager\#hasFeatures has changed as documented there.</li>
  /// <li>android.app.ActivityManager.RunningAppProcessInfo\#IMPORTANCE_PERCEPTIBLE_PRE_26
  /// is now returned as
  /// android.app.ActivityManager.RunningAppProcessInfo\#IMPORTANCE_PERCEPTIBLE.</li>
  /// <li>The android.app.NotificationManager now requires the use of notification
  /// channels.</li>
  /// <li>Changes to the strict mode that are set in
  /// Application\#onCreate Application.onCreate will no longer be clobbered after
  /// that function returns.</li>
  /// <li>A shared library apk with native code will have that native code included in
  /// the library path of its clients.</li>
  /// <li>android.content.Context\#getSharedPreferences Context.getSharedPreferences
  /// in credential encrypted storage will throw an exception before the user is unlocked.</li>
  /// <li>Attempting to retrieve a Context\#FINGERPRINT_SERVICE on a device that
  /// does not support that feature will now throw a runtime exception.</li>
  /// <li>android.app.Fragment will stop any active view animations when
  /// the fragment is stopped.</li>
  /// <li>Some compatibility code in Resources that attempts to use the default Theme
  /// the app may be using will be turned off, requiring the app to explicitly request
  /// resources with the right theme.</li>
  /// <li>android.content.ContentResolver\#notifyChange ContentResolver.notifyChange and
  /// android.content.ContentResolver\#registerContentObserver ContentResolver.registerContentObserver
  /// will throw a SecurityException if the caller does not have permission to access
  /// the provider (or the provider doesn't exit); otherwise the call will be silently
  /// ignored.</li>
  /// <li>android.hardware.camera2.CameraDevice\#createCaptureRequest CameraDevice.createCaptureRequest will enable
  /// android.hardware.camera2.CaptureRequest\#CONTROL_ENABLE_ZSL by default for
  /// still image capture.</li>
  /// <li>WallpaperManager's android.app.WallpaperManager\#getWallpaperFile,
  /// android.app.WallpaperManager\#getDrawable,
  /// android.app.WallpaperManager\#getFastDrawable,
  /// android.app.WallpaperManager\#peekDrawable, and
  /// android.app.WallpaperManager\#peekFastDrawable will throw an exception
  /// if you can not access the wallpaper.</li>
  /// <li>The behavior of
  /// android.hardware.usb.UsbDeviceConnection\#requestWait UsbDeviceConnection.requestWait
  /// is modified as per the documentation there.</li>
  /// <li>StrictMode.VmPolicy.Builder\#detectAll StrictMode.VmPolicy.Builder.detectAll
  /// will also enable StrictMode.VmPolicy.Builder\#detectContentUriWithoutPermission
  /// and StrictMode.VmPolicy.Builder\#detectUntaggedSockets.</li>
  /// <li>StrictMode.ThreadPolicy.Builder\#detectAll StrictMode.ThreadPolicy.Builder.detectAll
  /// will also enable StrictMode.ThreadPolicy.Builder\#detectUnbufferedIo.</li>
  /// <li>android.provider.DocumentsContract's various methods will throw failure
  /// exceptions back to the caller instead of returning null.
  /// <li>View\#hasFocusable View.hasFocusable now includes auto-focusable views.</li>
  /// <li>android.view.SurfaceView will no longer always change the underlying
  /// Surface object when something about it changes; apps need to look at the current
  /// state of the object to determine which things they are interested in have changed.</li>
  /// <li>android.view.WindowManager.LayoutParams\#TYPE_APPLICATION_OVERLAY must be
  /// used for overlay windows, other system overlay window types are not allowed.</li>
  /// <li>android.view.ViewTreeObserver\#addOnDrawListener ViewTreeObserver.addOnDrawListener will throw an exception if called from within
  /// onDraw.</li>
  /// <li>android.graphics.Canvas\#setBitmap Canvas.setBitmap will no longer preserve
  /// the current matrix and clip stack of the canvas.</li>
  /// <li>android.widget.ListPopupWindow\#setHeight ListPopupWindow.setHeight
  /// will throw an exception if a negative height is supplied.</li>
  /// <li>android.widget.TextView will use internationalized input for numbers,
  /// dates, and times.</li>
  /// <li>android.widget.Toast must be used for showing toast windows; the toast
  /// window type can not be directly used.</li>
  /// <li>android.net.wifi.WifiManager\#getConnectionInfo WifiManager.getConnectionInfo
  /// requires that the caller hold the location permission to return BSSID/SSID</li>
  /// <li>android.net.wifi.p2p.WifiP2pManager\#requestPeers WifiP2pManager.requestPeers
  /// requires the caller hold the location permission.</li>
  /// <li>android.R.attr\#maxAspectRatio defaults to 0, meaning there is no restriction
  /// on the app's maximum aspect ratio (so it can be stretched to fill larger screens).</li>
  /// <li>android.R.attr\#focusable defaults to a new state ({@code auto}) where it will
  /// inherit the value of android.R.attr\#clickable unless explicitly overridden.</li>
  /// <li>A default theme-appropriate focus-state highlight will be supplied to all Views
  /// which don't provide a focus-state drawable themselves. This can be disabled by setting
  /// android.R.attr\#defaultFocusHighlightEnabled to false.</li>
  /// </ul>
  static const O = 26;

  /// from: static public final int O_MR1
  ///
  /// O MR1.
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li>Apps exporting and linking to apk shared libraries must explicitly
  /// enumerate all signing certificates in a consistent order.</li>
  /// <li>android.R.attr\#screenOrientation can not be used to request a fixed
  /// orientation if the associated activity is not fullscreen and opaque.</li>
  /// </ul>
  static const O_MR1 = 27;

  /// from: static public final int P
  ///
  /// P.
  ///
  /// Applications targeting this or a later release will get these
  /// new changes in behavior:
  ///
  /// <ul>
  /// <li>android.app.Service\#startForeground Service.startForeground requires
  /// that apps hold the permission
  /// android.Manifest.permission\#FOREGROUND_SERVICE.</li>
  /// <li>android.widget.LinearLayout will always remeasure weighted children,
  /// even if there is no excess space.</li>
  /// </ul>
  static const P = 28;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Build_VERSION_CODES()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.os.Build$VERSION
///
/// Various version strings.
class Build_VERSION extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/os/Build\$VERSION");
  Build_VERSION.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_BASE_OS = jniAccessors.getStaticFieldIDOf(
      _classRef, "BASE_OS", "Ljava/lang/String;");

  /// from: static public final java.lang.String BASE_OS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The base OS build the product is based on.
  static jni.JniString get BASE_OS => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_BASE_OS, jni.JniType.objectType)
      .object);

  static final _id_CODENAME = jniAccessors.getStaticFieldIDOf(
      _classRef, "CODENAME", "Ljava/lang/String;");

  /// from: static public final java.lang.String CODENAME
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The current development codename, or the string "REL" if this is
  /// a release build.
  static jni.JniString get CODENAME => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CODENAME, jni.JniType.objectType)
      .object);

  static final _id_INCREMENTAL = jniAccessors.getStaticFieldIDOf(
      _classRef, "INCREMENTAL", "Ljava/lang/String;");

  /// from: static public final java.lang.String INCREMENTAL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The internal value used by the underlying source control to
  /// represent this build.  E.g., a perforce changelist number
  /// or a git hash.
  static jni.JniString get INCREMENTAL => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_INCREMENTAL, jni.JniType.objectType)
      .object);

  static final _id_PREVIEW_SDK_INT =
      jniAccessors.getStaticFieldIDOf(_classRef, "PREVIEW_SDK_INT", "I");

  /// from: static public final int PREVIEW_SDK_INT
  ///
  /// The developer preview revision of a prerelease SDK. This value will always
  /// be <code>0</code> on production platform builds/devices.
  ///
  /// When this value is nonzero, any new API added since the last
  /// officially published \#SDK_INT API level is only guaranteed to be present
  /// on that specific preview revision. For example, an API <code>Activity.fooBar()</code>
  /// might be present in preview revision 1 but renamed or removed entirely in
  /// preview revision 2, which may cause an app attempting to call it to crash
  /// at runtime.
  ///
  ///
  /// Experimental apps targeting preview APIs should check this value for
  /// equality (<code>==</code>) with the preview SDK revision they were built for
  /// before using any prerelease platform APIs. Apps that detect a preview SDK revision
  /// other than the specific one they expect should fall back to using APIs from
  /// the previously published API level only to avoid unwanted runtime exceptions.
  ///
  ///
  static int get PREVIEW_SDK_INT => jniAccessors
      .getStaticField(_classRef, _id_PREVIEW_SDK_INT, jni.JniType.intType)
      .integer;

  static final _id_RELEASE = jniAccessors.getStaticFieldIDOf(
      _classRef, "RELEASE", "Ljava/lang/String;");

  /// from: static public final java.lang.String RELEASE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The user-visible version string.  E.g., "1.0" or "3.4b5".
  static jni.JniString get RELEASE => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_RELEASE, jni.JniType.objectType)
      .object);

  static final _id_SDK =
      jniAccessors.getStaticFieldIDOf(_classRef, "SDK", "Ljava/lang/String;");

  /// from: static public final java.lang.String SDK
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The user-visible SDK version of the framework in its raw String
  /// representation; use \#SDK_INT instead.
  ///@deprecated Use \#SDK_INT to easily get this as an integer.
  static jni.JniString get SDK => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SDK, jni.JniType.objectType)
      .object);

  static final _id_SDK_INT =
      jniAccessors.getStaticFieldIDOf(_classRef, "SDK_INT", "I");

  /// from: static public final int SDK_INT
  ///
  /// The SDK version of the software currently running on this hardware
  /// device. This value never changes while a device is booted, but it may
  /// increase when the hardware manufacturer provides an OTA update.
  ///
  /// Possible values are defined in Build.VERSION_CODES.
  ///@see \#FIRST_SDK_INT
  static int get SDK_INT => jniAccessors
      .getStaticField(_classRef, _id_SDK_INT, jni.JniType.intType)
      .integer;

  static final _id_SECURITY_PATCH = jniAccessors.getStaticFieldIDOf(
      _classRef, "SECURITY_PATCH", "Ljava/lang/String;");

  /// from: static public final java.lang.String SECURITY_PATCH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The user-visible security patch level.
  static jni.JniString get SECURITY_PATCH => jni.JniString.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SECURITY_PATCH, jni.JniType.objectType)
      .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Build_VERSION()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
