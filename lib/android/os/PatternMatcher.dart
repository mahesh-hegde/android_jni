// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Parcelable.dart" as parcelable_;

import "Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.PatternMatcher
///
/// A simple pattern matcher, which is safe to use on untrusted data: it does
/// not provide full reg-exp support, only simple globbing that can not be
/// used maliciously.
class PatternMatcher extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/os/PatternMatcher");
  PatternMatcher.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.os.PatternMatcher> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int PATTERN_ADVANCED_GLOB
  ///
  /// Pattern type: the given pattern is interpreted with a regular
  /// expression-like syntax for matching against the string it is tested
  /// against. Supported tokens include dot ({@code .}) and sets ({@code [...]})
  /// with full support for character ranges and the not ({@code ^}) modifier.
  /// Supported modifiers include star ({@code *}) for zero-or-more, plus ({@code +})
  /// for one-or-more and full range ({@code {...}}) support. This is a simple
  /// evaluation implementation in which matching is done against the pattern in
  /// real time with no backtracking support.
  static const PATTERN_ADVANCED_GLOB = 3;

  /// from: static public final int PATTERN_LITERAL
  ///
  /// Pattern type: the given pattern must exactly match the string it is
  /// tested against.
  static const PATTERN_LITERAL = 0;

  /// from: static public final int PATTERN_PREFIX
  ///
  /// Pattern type: the given pattern must match the
  /// beginning of the string it is tested against.
  static const PATTERN_PREFIX = 1;

  /// from: static public final int PATTERN_SIMPLE_GLOB
  ///
  /// Pattern type: the given pattern is interpreted with a
  /// simple glob syntax for matching against the string it is tested against.
  /// In this syntax, you can use the '*' character to match against zero or
  /// more occurrences of the character immediately before.  If the
  /// character before it is '.' it will match any character.  The character
  /// '\' can be used as an escape.  This essentially provides only the '*'
  /// wildcard part of a normal regexp.
  static const PATTERN_SIMPLE_GLOB = 2;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;I)V");

  /// from: public void <init>(java.lang.String pattern, int type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PatternMatcher(jni.JniString pattern, int type)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [pattern.reference, type]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel src)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PatternMatcher.ctor1(parcel_.Parcel src)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [src.reference]).object);

  static final _id_getPath =
      jniAccessors.getMethodIDOf(_classRef, "getPath", "()Ljava/lang/String;");

  /// from: public final java.lang.String getPath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getPath() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPath, jni.JniType.objectType, []).object);

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public final int getType()
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_match =
      jniAccessors.getMethodIDOf(_classRef, "match", "(Ljava/lang/String;)Z");

  /// from: public boolean match(java.lang.String str)
  bool match(jni.JniString str) => jniAccessors.callMethodWithArgs(
      reference, _id_match, jni.JniType.booleanType, [str.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
