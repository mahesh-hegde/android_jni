// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BaseBundle.dart" as basebundle_;

import "Parcelable.dart" as parcelable_;

import "Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.PersistableBundle
///
/// A mapping from String keys to values of various types. The set of types
/// supported by this class is purposefully restricted to simple objects that can
/// safely be persisted to and restored from disk.
///@see Bundle
class PersistableBundle extends basebundle_.BaseBundle {
  static final _classRef =
      jniAccessors.getClassOf("android/os/PersistableBundle");
  PersistableBundle.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.os.PersistableBundle> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_EMPTY = jniAccessors.getStaticFieldIDOf(
      _classRef, "EMPTY", "Landroid/os/PersistableBundle;");

  /// from: static public final android.os.PersistableBundle EMPTY
  /// The returned object must be deleted after use, by calling the `delete` method.
  static PersistableBundle get EMPTY => PersistableBundle.fromRef(jniAccessors
      .getStaticField(_classRef, _id_EMPTY, jni.JniType.objectType)
      .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new, empty PersistableBundle.
  PersistableBundle()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int capacity)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new, empty PersistableBundle sized to hold the given number of
  /// elements. The PersistableBundle will grow as needed.
  ///@param capacity the initial capacity of the PersistableBundle
  PersistableBundle.ctor1(int capacity)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [capacity]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/os/PersistableBundle;)V");

  /// from: public void <init>(android.os.PersistableBundle b)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a PersistableBundle containing a copy of the mappings from the given
  /// PersistableBundle.  Does only a shallow copy of the original PersistableBundle -- see
  /// \#deepCopy() if that is not what you want.
  ///@param b a PersistableBundle to be copied.
  ///@see \#deepCopy()
  PersistableBundle.ctor2(PersistableBundle b)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [b.reference]).object);

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, "clone", "()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Clones the current PersistableBundle. The internal map is cloned, but the keys and
  /// values to which it refers are copied by reference.
  jni.JniObject clone() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_deepCopy = jniAccessors.getMethodIDOf(
      _classRef, "deepCopy", "()Landroid/os/PersistableBundle;");

  /// from: public android.os.PersistableBundle deepCopy()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Make a deep copy of the given bundle.  Traverses into inner containers and copies
  /// them as well, so they are not shared across bundles.  Will traverse in to
  /// Bundle, PersistableBundle, ArrayList, and all types of
  /// primitive arrays.  Other types of objects (such as Parcelable or Serializable)
  /// are referenced as-is and not copied in any way.
  PersistableBundle deepCopy() =>
      PersistableBundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_deepCopy, jni.JniType.objectType, []).object);

  static final _id_putPersistableBundle = jniAccessors.getMethodIDOf(
      _classRef,
      "putPersistableBundle",
      "(Ljava/lang/String;Landroid/os/PersistableBundle;)V");

  /// from: public void putPersistableBundle(java.lang.String key, android.os.PersistableBundle value)
  ///
  /// Inserts a PersistableBundle value into the mapping of this Bundle, replacing
  /// any existing value for the given key.  Either key or value may be null.
  ///@param key a String, or null
  /// This value may be {@code null}.
  ///@param value a Bundle object, or null
  ///
  /// This value may be {@code null}.
  void putPersistableBundle(jni.JniString key, PersistableBundle value) =>
      jniAccessors.callMethodWithArgs(reference, _id_putPersistableBundle,
          jni.JniType.voidType, [key.reference, value.reference]).check();

  static final _id_getPersistableBundle = jniAccessors.getMethodIDOf(
      _classRef,
      "getPersistableBundle",
      "(Ljava/lang/String;)Landroid/os/PersistableBundle;");

  /// from: public android.os.PersistableBundle getPersistableBundle(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the value associated with the given key, or null if
  /// no mapping of the desired type exists for the given key or a null
  /// value is explicitly associated with the key.
  ///@param key a String, or null
  /// This value may be {@code null}.
  ///@return a Bundle value, or null
  PersistableBundle getPersistableBundle(jni.JniString key) =>
      PersistableBundle.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPersistableBundle,
          jni.JniType.objectType,
          [key.reference]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Report the nature of this Parcelable's contents
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  ///
  /// Writes the PersistableBundle contents to a Parcel, typically in order for
  /// it to be passed through an IBinder connection.
  ///@param parcel The parcel to copy this bundle to.
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: synchronized public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
