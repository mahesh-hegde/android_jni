// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../util/AndroidRuntimeException.dart" as androidruntimeexception_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.BadParcelableException
///
/// Exception thrown when a Parcelable is malformed or otherwise invalid.
///
/// This is typically encountered when a custom Parcelable object is
/// passed to another process that doesn't have the same Parcelable class
/// in its ClassLoader.
class BadParcelableException
    extends androidruntimeexception_.AndroidRuntimeException {
  static final _classRef =
      jniAccessors.getClassOf("android/os/BadParcelableException");
  BadParcelableException.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String msg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  BadParcelableException.ctor1(jni.JniString msg)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [msg.reference]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/Exception;)V");

  /// from: public void <init>(java.lang.Exception cause)
  /// The returned object must be deleted after use, by calling the `delete` method.
  BadParcelableException.ctor3(jni.JniObject cause)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor3, [cause.reference]).object);
}
