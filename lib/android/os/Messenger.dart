// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Parcelable.dart" as parcelable_;

import "Handler.dart" as handler_;

import "IBinder.dart" as ibinder_;

import "Message.dart" as message_;

import "Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.Messenger
///
/// Reference to a Handler, which others can use to send messages to it.
/// This allows for the implementation of message-based communication across
/// processes, by creating a Messenger pointing to a Handler in one process,
/// and handing that Messenger to another process.
///
/// Note: the implementation underneath is just a simple wrapper around
/// a Binder that is used to perform the communication.  This means
/// semantically you should treat it as such: this class does not impact process
/// lifecycle management (you must be using some higher-level component to tell
/// the system that your process needs to continue running), the connection will
/// break if your process goes away for any reason, etc.
///
class Messenger extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/os/Messenger");
  Messenger.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.os.Messenger> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/os/Handler;)V");

  /// from: public void <init>(android.os.Handler target)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new Messenger pointing to the given Handler.  Any Message
  /// objects sent through this Messenger will appear in the Handler as if
  /// Handler\#sendMessage(Message) Handler.sendMessage(Message) had
  /// been called directly.
  ///@param target The Handler that will receive sent messages.
  Messenger(handler_.Handler target)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [target.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/os/IBinder;)V");

  /// from: public void <init>(android.os.IBinder target)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a Messenger from a raw IBinder, which had previously been
  /// retrieved with \#getBinder.
  ///@param target The IBinder this Messenger should communicate with.
  Messenger.ctor1(ibinder_.IBinder target)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [target.reference]).object);

  static final _id_send =
      jniAccessors.getMethodIDOf(_classRef, "send", "(Landroid/os/Message;)V");

  /// from: public void send(android.os.Message message)
  ///
  /// Send a Message to this Messenger's Handler.
  ///@param message The Message to send.  Usually retrieved through
  /// Message\#obtain() Message.obtain().
  ///@throws RemoteException Throws DeadObjectException if the target
  /// Handler no longer exists.
  void send(message_.Message message) => jniAccessors.callMethodWithArgs(
      reference, _id_send, jni.JniType.voidType, [message.reference]).check();

  static final _id_getBinder = jniAccessors.getMethodIDOf(
      _classRef, "getBinder", "()Landroid/os/IBinder;");

  /// from: public android.os.IBinder getBinder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the IBinder that this Messenger is using to communicate with
  /// its associated Handler.
  ///@return Returns the IBinder backing this Messenger.
  ibinder_.IBinder getBinder() =>
      ibinder_.IBinder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getBinder, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object otherObj)
  ///
  /// Comparison operator on two Messenger objects, such that true
  /// is returned then they both point to the same Handler.
  bool equals1(jni.JniObject otherObj) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [otherObj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_writeMessengerOrNullToParcel =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "writeMessengerOrNullToParcel",
          "(Landroid/os/Messenger;Landroid/os/Parcel;)V");

  /// from: static public void writeMessengerOrNullToParcel(android.os.Messenger messenger, android.os.Parcel out)
  ///
  /// Convenience function for writing either a Messenger or null pointer to
  /// a Parcel.  You must use this with \#readMessengerOrNullFromParcel
  /// for later reading it.
  ///@param messenger The Messenger to write, or null.
  ///@param out Where to write the Messenger.
  static void writeMessengerOrNullToParcel(
          Messenger messenger, parcel_.Parcel out) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_writeMessengerOrNullToParcel,
          jni.JniType.voidType,
          [messenger.reference, out.reference]).check();

  static final _id_readMessengerOrNullFromParcel =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "readMessengerOrNullFromParcel",
          "(Landroid/os/Parcel;)Landroid/os/Messenger;");

  /// from: static public android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience function for reading either a Messenger or null pointer from
  /// a Parcel.  You must have previously written the Messenger with
  /// \#writeMessengerOrNullToParcel.
  ///@param in The Parcel containing the written Messenger.
  ///@return Returns the Messenger read from the Parcel, or null if null had
  /// been written.
  static Messenger readMessengerOrNullFromParcel(parcel_.Parcel in0) =>
      Messenger.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_readMessengerOrNullFromParcel,
          jni.JniType.objectType,
          [in0.reference]).object);
}
