// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "IBinder.dart" as ibinder_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.os.IInterface
///
/// Base class for Binder interfaces.  When defining a new interface,
/// you must derive it from IInterface.
class IInterface extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/os/IInterface");
  IInterface.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_asBinder = jniAccessors.getMethodIDOf(
      _classRef, "asBinder", "()Landroid/os/IBinder;");

  /// from: public abstract android.os.IBinder asBinder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve the Binder object associated with this interface.
  /// You must use this instead of a plain cast, so that proxy objects
  /// can return the correct result.
  ibinder_.IBinder asBinder() =>
      ibinder_.IBinder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_asBinder, jni.JniType.objectType, []).object);
}
