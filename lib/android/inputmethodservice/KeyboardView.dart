// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../view/View.dart" as view_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "Keyboard.dart" as keyboard_;

import "../graphics/Canvas.dart" as canvas_;

import "../view/MotionEvent.dart" as motionevent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.inputmethodservice.KeyboardView
///
/// A view that renders a virtual Keyboard. It handles rendering of keys and
/// detecting key presses and touch movements.
///@attr ref android.R.styleable\#KeyboardView_keyBackground
///@attr ref android.R.styleable\#KeyboardView_keyPreviewLayout
///@attr ref android.R.styleable\#KeyboardView_keyPreviewOffset
///@attr ref android.R.styleable\#KeyboardView_keyPreviewHeight
///@attr ref android.R.styleable\#KeyboardView_labelTextSize
///@attr ref android.R.styleable\#KeyboardView_keyTextSize
///@attr ref android.R.styleable\#KeyboardView_keyTextColor
///@attr ref android.R.styleable\#KeyboardView_verticalCorrection
///@attr ref android.R.styleable\#KeyboardView_popupLayout
class KeyboardView extends view_.View {
  static final _classRef =
      jniAccessors.getClassOf("android/inputmethodservice/KeyboardView");
  KeyboardView.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  KeyboardView.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  KeyboardView.ctor2(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  KeyboardView.ctor3(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_onAttachedToWindow =
      jniAccessors.getMethodIDOf(_classRef, "onAttachedToWindow", "()V");

  /// from: protected void onAttachedToWindow()
  void onAttachedToWindow() => jniAccessors.callMethodWithArgs(
      reference, _id_onAttachedToWindow, jni.JniType.voidType, []).check();

  static final _id_setOnKeyboardActionListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnKeyboardActionListener",
      "(Landroid/inputmethodservice/KeyboardView\$OnKeyboardActionListener;)V");

  /// from: public void setOnKeyboardActionListener(android.inputmethodservice.KeyboardView.OnKeyboardActionListener listener)
  void setOnKeyboardActionListener(
          KeyboardView_OnKeyboardActionListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setOnKeyboardActionListener,
          jni.JniType.voidType,
          [listener.reference]).check();

  static final _id_getOnKeyboardActionListener = jniAccessors.getMethodIDOf(
      _classRef,
      "getOnKeyboardActionListener",
      "()Landroid/inputmethodservice/KeyboardView\$OnKeyboardActionListener;");

  /// from: protected android.inputmethodservice.KeyboardView.OnKeyboardActionListener getOnKeyboardActionListener()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the OnKeyboardActionListener object.
  ///@return the listener attached to this keyboard
  KeyboardView_OnKeyboardActionListener getOnKeyboardActionListener() =>
      KeyboardView_OnKeyboardActionListener.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getOnKeyboardActionListener,
              jni.JniType.objectType, []).object);

  static final _id_setKeyboard = jniAccessors.getMethodIDOf(
      _classRef, "setKeyboard", "(Landroid/inputmethodservice/Keyboard;)V");

  /// from: public void setKeyboard(android.inputmethodservice.Keyboard keyboard)
  ///
  /// Attaches a keyboard to this view. The keyboard can be switched at any time and the
  /// view will re-layout itself to accommodate the keyboard.
  ///@see Keyboard
  ///@see \#getKeyboard()
  ///@param keyboard the keyboard to display in this view
  void setKeyboard(keyboard_.Keyboard keyboard) =>
      jniAccessors.callMethodWithArgs(reference, _id_setKeyboard,
          jni.JniType.voidType, [keyboard.reference]).check();

  static final _id_getKeyboard = jniAccessors.getMethodIDOf(
      _classRef, "getKeyboard", "()Landroid/inputmethodservice/Keyboard;");

  /// from: public android.inputmethodservice.Keyboard getKeyboard()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the current keyboard being displayed by this view.
  ///@return the currently attached keyboard
  ///@see \#setKeyboard(Keyboard)
  keyboard_.Keyboard getKeyboard() =>
      keyboard_.Keyboard.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKeyboard, jni.JniType.objectType, []).object);

  static final _id_setShifted =
      jniAccessors.getMethodIDOf(_classRef, "setShifted", "(Z)Z");

  /// from: public boolean setShifted(boolean shifted)
  ///
  /// Sets the state of the shift key of the keyboard, if any.
  ///@param shifted whether or not to enable the state of the shift key
  ///@return true if the shift key state changed, false if there was no change
  ///@see KeyboardView\#isShifted()
  bool setShifted(bool shifted) => jniAccessors.callMethodWithArgs(
      reference, _id_setShifted, jni.JniType.booleanType, [shifted]).boolean;

  static final _id_isShifted =
      jniAccessors.getMethodIDOf(_classRef, "isShifted", "()Z");

  /// from: public boolean isShifted()
  ///
  /// Returns the state of the shift key of the keyboard, if any.
  ///@return true if the shift is in a pressed state, false otherwise. If there is
  /// no shift key on the keyboard or there is no keyboard attached, it returns false.
  ///@see KeyboardView\#setShifted(boolean)
  bool isShifted() => jniAccessors.callMethodWithArgs(
      reference, _id_isShifted, jni.JniType.booleanType, []).boolean;

  static final _id_setPreviewEnabled =
      jniAccessors.getMethodIDOf(_classRef, "setPreviewEnabled", "(Z)V");

  /// from: public void setPreviewEnabled(boolean previewEnabled)
  ///
  /// Enables or disables the key feedback popup. This is a popup that shows a magnified
  /// version of the depressed key. By default the preview is enabled.
  ///@param previewEnabled whether or not to enable the key feedback popup
  ///@see \#isPreviewEnabled()
  void setPreviewEnabled(bool previewEnabled) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPreviewEnabled,
          jni.JniType.voidType, [previewEnabled]).check();

  static final _id_isPreviewEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isPreviewEnabled", "()Z");

  /// from: public boolean isPreviewEnabled()
  ///
  /// Returns the enabled state of the key feedback popup.
  ///@return whether or not the key feedback popup is enabled
  ///@see \#setPreviewEnabled(boolean)
  bool isPreviewEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_isPreviewEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_setVerticalCorrection =
      jniAccessors.getMethodIDOf(_classRef, "setVerticalCorrection", "(I)V");

  /// from: public void setVerticalCorrection(int verticalOffset)
  void setVerticalCorrection(int verticalOffset) =>
      jniAccessors.callMethodWithArgs(reference, _id_setVerticalCorrection,
          jni.JniType.voidType, [verticalOffset]).check();

  static final _id_setPopupParent = jniAccessors.getMethodIDOf(
      _classRef, "setPopupParent", "(Landroid/view/View;)V");

  /// from: public void setPopupParent(android.view.View v)
  void setPopupParent(view_.View v) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setPopupParent,
      jni.JniType.voidType,
      [v.reference]).check();

  static final _id_setPopupOffset =
      jniAccessors.getMethodIDOf(_classRef, "setPopupOffset", "(II)V");

  /// from: public void setPopupOffset(int x, int y)
  void setPopupOffset(int x, int y) => jniAccessors.callMethodWithArgs(
      reference, _id_setPopupOffset, jni.JniType.voidType, [x, y]).check();

  static final _id_setProximityCorrectionEnabled = jniAccessors.getMethodIDOf(
      _classRef, "setProximityCorrectionEnabled", "(Z)V");

  /// from: public void setProximityCorrectionEnabled(boolean enabled)
  ///
  /// When enabled, calls to OnKeyboardActionListener\#onKey will include key
  /// codes for adjacent keys.  When disabled, only the primary key code will be
  /// reported.
  ///@param enabled whether or not the proximity correction is enabled
  void setProximityCorrectionEnabled(bool enabled) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setProximityCorrectionEnabled,
          jni.JniType.voidType,
          [enabled]).check();

  static final _id_isProximityCorrectionEnabled = jniAccessors.getMethodIDOf(
      _classRef, "isProximityCorrectionEnabled", "()Z");

  /// from: public boolean isProximityCorrectionEnabled()
  ///
  /// Returns true if proximity correction is enabled.
  bool isProximityCorrectionEnabled() => jniAccessors.callMethodWithArgs(
      reference,
      _id_isProximityCorrectionEnabled,
      jni.JniType.booleanType, []).boolean;

  static final _id_onClick = jniAccessors.getMethodIDOf(
      _classRef, "onClick", "(Landroid/view/View;)V");

  /// from: public void onClick(android.view.View v)
  ///
  /// Popup keyboard close button clicked.
  ///@hide
  void onClick(view_.View v) => jniAccessors.callMethodWithArgs(
      reference, _id_onClick, jni.JniType.voidType, [v.reference]).check();

  static final _id_onMeasure =
      jniAccessors.getMethodIDOf(_classRef, "onMeasure", "(II)V");

  /// from: public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
  void onMeasure(int widthMeasureSpec, int heightMeasureSpec) =>
      jniAccessors.callMethodWithArgs(reference, _id_onMeasure,
          jni.JniType.voidType, [widthMeasureSpec, heightMeasureSpec]).check();

  static final _id_onSizeChanged =
      jniAccessors.getMethodIDOf(_classRef, "onSizeChanged", "(IIII)V");

  /// from: public void onSizeChanged(int w, int h, int oldw, int oldh)
  void onSizeChanged(int w, int h, int oldw, int oldh) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSizeChanged,
          jni.JniType.voidType, [w, h, oldw, oldh]).check();

  static final _id_onDraw = jniAccessors.getMethodIDOf(
      _classRef, "onDraw", "(Landroid/graphics/Canvas;)V");

  /// from: public void onDraw(android.graphics.Canvas canvas)
  void onDraw(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_onDraw, jni.JniType.voidType, [canvas.reference]).check();

  static final _id_invalidateAllKeys =
      jniAccessors.getMethodIDOf(_classRef, "invalidateAllKeys", "()V");

  /// from: public void invalidateAllKeys()
  ///
  /// Requests a redraw of the entire keyboard. Calling \#invalidate is not sufficient
  /// because the keyboard renders the keys to an off-screen buffer and an invalidate() only
  /// draws the cached buffer.
  ///@see \#invalidateKey(int)
  void invalidateAllKeys() => jniAccessors.callMethodWithArgs(
      reference, _id_invalidateAllKeys, jni.JniType.voidType, []).check();

  static final _id_invalidateKey =
      jniAccessors.getMethodIDOf(_classRef, "invalidateKey", "(I)V");

  /// from: public void invalidateKey(int keyIndex)
  ///
  /// Invalidates a key so that it will be redrawn on the next repaint. Use this method if only
  /// one key is changing it's content. Any changes that affect the position or size of the key
  /// may not be honored.
  ///@param keyIndex the index of the key in the attached Keyboard.
  ///@see \#invalidateAllKeys
  void invalidateKey(int keyIndex) => jniAccessors.callMethodWithArgs(
      reference, _id_invalidateKey, jni.JniType.voidType, [keyIndex]).check();

  static final _id_onLongPress = jniAccessors.getMethodIDOf(_classRef,
      "onLongPress", "(Landroid/inputmethodservice/Keyboard\$Key;)Z");

  /// from: protected boolean onLongPress(android.inputmethodservice.Keyboard.Key popupKey)
  ///
  /// Called when a key is long pressed. By default this will open any popup keyboard associated
  /// with this key through the attributes popupLayout and popupCharacters.
  ///@param popupKey the key that was long pressed
  ///@return true if the long press is handled, false otherwise. Subclasses should call the
  /// method on the base class if the subclass doesn't wish to handle the call.
  bool onLongPress(keyboard_.Keyboard_Key popupKey) =>
      jniAccessors.callMethodWithArgs(reference, _id_onLongPress,
          jni.JniType.booleanType, [popupKey.reference]).boolean;

  static final _id_onHoverEvent = jniAccessors.getMethodIDOf(
      _classRef, "onHoverEvent", "(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onHoverEvent(android.view.MotionEvent event)
  bool onHoverEvent(motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onHoverEvent,
          jni.JniType.booleanType, [event.reference]).boolean;

  static final _id_onTouchEvent = jniAccessors.getMethodIDOf(
      _classRef, "onTouchEvent", "(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTouchEvent(android.view.MotionEvent me)
  bool onTouchEvent(motionevent_.MotionEvent me) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTouchEvent,
          jni.JniType.booleanType, [me.reference]).boolean;

  static final _id_swipeRight =
      jniAccessors.getMethodIDOf(_classRef, "swipeRight", "()V");

  /// from: protected void swipeRight()
  void swipeRight() => jniAccessors.callMethodWithArgs(
      reference, _id_swipeRight, jni.JniType.voidType, []).check();

  static final _id_swipeLeft =
      jniAccessors.getMethodIDOf(_classRef, "swipeLeft", "()V");

  /// from: protected void swipeLeft()
  void swipeLeft() => jniAccessors.callMethodWithArgs(
      reference, _id_swipeLeft, jni.JniType.voidType, []).check();

  static final _id_swipeUp =
      jniAccessors.getMethodIDOf(_classRef, "swipeUp", "()V");

  /// from: protected void swipeUp()
  void swipeUp() => jniAccessors.callMethodWithArgs(
      reference, _id_swipeUp, jni.JniType.voidType, []).check();

  static final _id_swipeDown =
      jniAccessors.getMethodIDOf(_classRef, "swipeDown", "()V");

  /// from: protected void swipeDown()
  void swipeDown() => jniAccessors.callMethodWithArgs(
      reference, _id_swipeDown, jni.JniType.voidType, []).check();

  static final _id_closing =
      jniAccessors.getMethodIDOf(_classRef, "closing", "()V");

  /// from: public void closing()
  void closing() => jniAccessors.callMethodWithArgs(
      reference, _id_closing, jni.JniType.voidType, []).check();

  static final _id_onDetachedFromWindow =
      jniAccessors.getMethodIDOf(_classRef, "onDetachedFromWindow", "()V");

  /// from: public void onDetachedFromWindow()
  void onDetachedFromWindow() => jniAccessors.callMethodWithArgs(
      reference, _id_onDetachedFromWindow, jni.JniType.voidType, []).check();

  static final _id_handleBack =
      jniAccessors.getMethodIDOf(_classRef, "handleBack", "()Z");

  /// from: public boolean handleBack()
  bool handleBack() => jniAccessors.callMethodWithArgs(
      reference, _id_handleBack, jni.JniType.booleanType, []).boolean;
}

/// from: android.inputmethodservice.KeyboardView$OnKeyboardActionListener
///
/// Listener for virtual keyboard events.
class KeyboardView_OnKeyboardActionListener extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/inputmethodservice/KeyboardView\$OnKeyboardActionListener");
  KeyboardView_OnKeyboardActionListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onPress =
      jniAccessors.getMethodIDOf(_classRef, "onPress", "(I)V");

  /// from: public abstract void onPress(int primaryCode)
  ///
  /// Called when the user presses a key. This is sent before the \#onKey is called.
  /// For keys that repeat, this is only called once.
  ///@param primaryCode the unicode of the key being pressed. If the touch is not on a valid
  /// key, the value will be zero.
  void onPress(int primaryCode) => jniAccessors.callMethodWithArgs(
      reference, _id_onPress, jni.JniType.voidType, [primaryCode]).check();

  static final _id_onRelease =
      jniAccessors.getMethodIDOf(_classRef, "onRelease", "(I)V");

  /// from: public abstract void onRelease(int primaryCode)
  ///
  /// Called when the user releases a key. This is sent after the \#onKey is called.
  /// For keys that repeat, this is only called once.
  ///@param primaryCode the code of the key that was released
  void onRelease(int primaryCode) => jniAccessors.callMethodWithArgs(
      reference, _id_onRelease, jni.JniType.voidType, [primaryCode]).check();

  static final _id_onKey =
      jniAccessors.getMethodIDOf(_classRef, "onKey", "(I[I)V");

  /// from: public abstract void onKey(int primaryCode, int[] keyCodes)
  ///
  /// Send a key press to the listener.
  ///@param primaryCode this is the key that was pressed
  ///@param keyCodes the codes for all the possible alternative keys
  /// with the primary code being the first. If the primary key code is
  /// a single character such as an alphabet or number or symbol, the alternatives
  /// will include other characters that may be on the same key or adjacent keys.
  /// These codes are useful to correct for accidental presses of a key adjacent to
  /// the intended key.
  void onKey(int primaryCode, jni.JniObject keyCodes) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKey,
          jni.JniType.voidType, [primaryCode, keyCodes.reference]).check();

  static final _id_onText = jniAccessors.getMethodIDOf(
      _classRef, "onText", "(Ljava/lang/CharSequence;)V");

  /// from: public abstract void onText(java.lang.CharSequence text)
  ///
  /// Sends a sequence of characters to the listener.
  ///@param text the sequence of characters to be displayed.
  void onText(jni.JniObject text) => jniAccessors.callMethodWithArgs(
      reference, _id_onText, jni.JniType.voidType, [text.reference]).check();

  static final _id_swipeLeft =
      jniAccessors.getMethodIDOf(_classRef, "swipeLeft", "()V");

  /// from: public abstract void swipeLeft()
  ///
  /// Called when the user quickly moves the finger from right to left.
  void swipeLeft() => jniAccessors.callMethodWithArgs(
      reference, _id_swipeLeft, jni.JniType.voidType, []).check();

  static final _id_swipeRight =
      jniAccessors.getMethodIDOf(_classRef, "swipeRight", "()V");

  /// from: public abstract void swipeRight()
  ///
  /// Called when the user quickly moves the finger from left to right.
  void swipeRight() => jniAccessors.callMethodWithArgs(
      reference, _id_swipeRight, jni.JniType.voidType, []).check();

  static final _id_swipeDown =
      jniAccessors.getMethodIDOf(_classRef, "swipeDown", "()V");

  /// from: public abstract void swipeDown()
  ///
  /// Called when the user quickly moves the finger from up to down.
  void swipeDown() => jniAccessors.callMethodWithArgs(
      reference, _id_swipeDown, jni.JniType.voidType, []).check();

  static final _id_swipeUp =
      jniAccessors.getMethodIDOf(_classRef, "swipeUp", "()V");

  /// from: public abstract void swipeUp()
  ///
  /// Called when the user quickly moves the finger from down to up.
  void swipeUp() => jniAccessors.callMethodWithArgs(
      reference, _id_swipeUp, jni.JniType.voidType, []).check();
}
