// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "NfcAdapter.dart" as nfcadapter_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.nfc.NfcManager
///
/// High level manager used to obtain an instance of an NfcAdapter.
///
/// Use android.content.Context\#getSystemService(java.lang.String)
/// with Context\#NFC_SERVICE to create an NfcManager,
/// then call \#getDefaultAdapter to obtain the NfcAdapter.
///
/// Alternately, you can just call the static helper
/// NfcAdapter\#getDefaultAdapter(android.content.Context).
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about using NFC, read the
/// <a href="{@docRoot}guide/topics/nfc/index.html">Near Field Communication</a> developer guide.
///
/// </div>
///@see NfcAdapter\#getDefaultAdapter(android.content.Context)
class NfcManager extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/nfc/NfcManager");
  NfcManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getDefaultAdapter = jniAccessors.getMethodIDOf(
      _classRef, "getDefaultAdapter", "()Landroid/nfc/NfcAdapter;");

  /// from: public android.nfc.NfcAdapter getDefaultAdapter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the default NFC Adapter for this device.
  ///@return the default NFC Adapter
  nfcadapter_.NfcAdapter getDefaultAdapter() =>
      nfcadapter_.NfcAdapter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDefaultAdapter, jni.JniType.objectType, []).object);
}
