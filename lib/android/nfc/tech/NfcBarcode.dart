// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../Tag.dart" as tag_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.nfc.tech.NfcBarcode
///
/// Provides access to tags containing just a barcode.
///
/// Acquire an NfcBarcode object using \#get.
class NfcBarcode extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/nfc/tech/NfcBarcode");
  NfcBarcode.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int TYPE_KOVIO
  ///
  /// Kovio Tags
  static const TYPE_KOVIO = 1;

  /// from: static public final int TYPE_UNKNOWN
  static const TYPE_UNKNOWN = -1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/nfc/Tag;)V");

  /// from: void <init>(android.nfc.Tag tag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Internal constructor, to be used by NfcAdapter
  ///@hide
  NfcBarcode(tag_.Tag tag)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [tag.reference]).object);

  static final _id_get0 = jniAccessors.getStaticMethodIDOf(
      _classRef, "get", "(Landroid/nfc/Tag;)Landroid/nfc/tech/NfcBarcode;");

  /// from: static public android.nfc.tech.NfcBarcode get(android.nfc.Tag tag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get an instance of NfcBarcode for the given tag.
  ///
  /// Returns null if NfcBarcode was not enumerated in Tag\#getTechList.
  ///
  /// Does not cause any RF activity and does not block.
  ///@param tag an NfcBarcode compatible tag
  ///@return NfcBarcode object
  static NfcBarcode get0(tag_.Tag tag) =>
      NfcBarcode.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_get0, jni.JniType.objectType, [tag.reference]).object);

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()I");

  /// from: public int getType()
  ///
  /// Returns the NFC Barcode tag type.
  ///
  /// Currently only one of \#TYPE_KOVIO or \#TYPE_UNKNOWN.
  ///
  /// Does not cause any RF activity and does not block.
  ///@return the NFC Barcode tag type
  int getType() => jniAccessors.callMethodWithArgs(
      reference, _id_getType, jni.JniType.intType, []).integer;

  static final _id_getBarcode =
      jniAccessors.getMethodIDOf(_classRef, "getBarcode", "()[B");

  /// from: public byte[] getBarcode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the barcode of an NfcBarcode tag.
  ///
  ///  Tags of \#TYPE_KOVIO return 16 bytes:
  ///     <ul>
  ///      The first byte is 0x80 ORd with a manufacturer ID, corresponding
  ///       to ISO/IEC 7816-6.
  ///      The second byte describes the payload data format. Defined data
  ///       format types include the following:<ul>
  ///       <li>0x00: Reserved for manufacturer assignment</li>
  ///       <li>0x01: 96-bit URL with "http://www." prefix</li>
  ///       <li>0x02: 96-bit URL with "https://www." prefix</li>
  ///       <li>0x03: 96-bit URL with "http://" prefix</li>
  ///       <li>0x04: 96-bit URL with "https://" prefix</li>
  ///       <li>0x05: 96-bit GS1 EPC</li>
  ///       <li>0x06-0xFF: reserved</li>
  ///       </ul>
  ///     The following 12 bytes are payload:<ul>
  ///       <li> In case of a URL payload, the payload is encoded in US-ASCII,
  ///            following the limitations defined in RFC3987.
  ///            {@see <a href="http://www.ietf.org/rfc/rfc3987.txt">RFC 3987</a>}</li>
  ///       <li> In case of GS1 EPC data, see <a href="http://www.gs1.org/gsmp/kc/epcglobal/tds/">
  ///            GS1 Electronic Product Code (EPC) Tag Data Standard (TDS)</a> for more details.
  ///       </li>
  ///     </ul>
  ///     The last 2 bytes comprise the CRC.
  ///     </ul>
  /// Does not cause any RF activity and does not block.
  ///@return a byte array containing the barcode
  ///@see <a href="http://www.thinfilm.no/docs/thinfilm-nfc-barcode-datasheet.pdf">
  ///      Thinfilm NFC Barcode tag specification (previously Kovio NFC Barcode)</a>
  ///@see <a href="http://www.thinfilm.no/docs/thinfilm-nfc-barcode-data-format.pdf">
  ///      Thinfilm NFC Barcode data format (previously Kovio NFC Barcode)</a>
  jni.JniObject getBarcode() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getBarcode, jni.JniType.objectType, []).object);

  static final _id_isConnected =
      jniAccessors.getMethodIDOf(_classRef, "isConnected", "()Z");

  /// from: public boolean isConnected()
  bool isConnected() => jniAccessors.callMethodWithArgs(
      reference, _id_isConnected, jni.JniType.booleanType, []).boolean;

  static final _id_getTag =
      jniAccessors.getMethodIDOf(_classRef, "getTag", "()Landroid/nfc/Tag;");

  /// from: public android.nfc.Tag getTag()
  /// The returned object must be deleted after use, by calling the `delete` method.
  tag_.Tag getTag() => tag_.Tag.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getTag, jni.JniType.objectType, []).object);

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_connect =
      jniAccessors.getMethodIDOf(_classRef, "connect", "()V");

  /// from: public void connect()
  void connect() => jniAccessors.callMethodWithArgs(
      reference, _id_connect, jni.JniType.voidType, []).check();
}
