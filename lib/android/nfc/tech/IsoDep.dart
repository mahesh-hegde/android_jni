// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../Tag.dart" as tag_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.nfc.tech.IsoDep
///
/// Provides access to ISO-DEP (ISO 14443-4) properties and I/O operations on a Tag.
///
/// Acquire an IsoDep object using \#get.
/// The primary ISO-DEP I/O operation is \#transceive. Applications must
/// implement their own protocol stack on top of \#transceive.
/// Tags that enumerate the IsoDep technology in Tag\#getTechList
/// will also enumerate
/// NfcA or NfcB (since IsoDep builds on top of either of these).
///
/// <p class="note"><strong>Note:</strong> Methods that perform I/O operations
/// require the android.Manifest.permission\#NFC permission.
class IsoDep extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/nfc/tech/IsoDep");
  IsoDep.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_get0 = jniAccessors.getStaticMethodIDOf(
      _classRef, "get", "(Landroid/nfc/Tag;)Landroid/nfc/tech/IsoDep;");

  /// from: static public android.nfc.tech.IsoDep get(android.nfc.Tag tag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get an instance of IsoDep for the given tag.
  /// Does not cause any RF activity and does not block.
  /// Returns null if IsoDep was not enumerated in Tag\#getTechList.
  /// This indicates the tag does not support ISO-DEP.
  ///@param tag an ISO-DEP compatible tag
  ///@return ISO-DEP object
  static IsoDep get0(tag_.Tag tag) =>
      IsoDep.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_get0, jni.JniType.objectType, [tag.reference]).object);

  static final _id_setTimeout =
      jniAccessors.getMethodIDOf(_classRef, "setTimeout", "(I)V");

  /// from: public void setTimeout(int timeout)
  ///
  /// Set the timeout of \#transceive in milliseconds.
  /// The timeout only applies to ISO-DEP \#transceive, and is
  /// reset to a default value when \#close is called.
  /// Setting a longer timeout may be useful when performing
  /// transactions that require a long processing time on the tag
  /// such as key generation.
  ///
  /// <p class="note">Requires the android.Manifest.permission\#NFC permission.
  ///@param timeout timeout value in milliseconds
  void setTimeout(int timeout) => jniAccessors.callMethodWithArgs(
      reference, _id_setTimeout, jni.JniType.voidType, [timeout]).check();

  static final _id_getTimeout =
      jniAccessors.getMethodIDOf(_classRef, "getTimeout", "()I");

  /// from: public int getTimeout()
  ///
  /// Get the current timeout for \#transceive in milliseconds.
  ///
  /// <p class="note">Requires the android.Manifest.permission\#NFC permission.
  ///@return timeout value in milliseconds
  int getTimeout() => jniAccessors.callMethodWithArgs(
      reference, _id_getTimeout, jni.JniType.intType, []).integer;

  static final _id_getHistoricalBytes =
      jniAccessors.getMethodIDOf(_classRef, "getHistoricalBytes", "()[B");

  /// from: public byte[] getHistoricalBytes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the ISO-DEP historical bytes for NfcA tags.
  /// Does not cause any RF activity and does not block.
  /// The historical bytes can be used to help identify a tag. They are present
  /// only on IsoDep tags that are based on NfcA RF technology.
  /// If this tag is not NfcA then null is returned.
  /// In ISO 14443-4 terminology, the historical bytes are a subset of the RATS
  /// response.
  ///@return ISO-DEP historical bytes, or null if this is not a NfcA tag
  jni.JniObject getHistoricalBytes() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getHistoricalBytes, jni.JniType.objectType, []).object);

  static final _id_getHiLayerResponse =
      jniAccessors.getMethodIDOf(_classRef, "getHiLayerResponse", "()[B");

  /// from: public byte[] getHiLayerResponse()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the higher layer response bytes for NfcB tags.
  /// Does not cause any RF activity and does not block.
  /// The higher layer response bytes can be used to help identify a tag.
  /// They are present only on IsoDep tags that are based on NfcB
  /// RF technology. If this tag is not NfcB then null is returned.
  /// In ISO 14443-4 terminology, the higher layer bytes are a subset of the
  /// ATTRIB response.
  ///@return ISO-DEP historical bytes, or null if this is not a NfcB tag
  jni.JniObject getHiLayerResponse() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getHiLayerResponse, jni.JniType.objectType, []).object);

  static final _id_transceive =
      jniAccessors.getMethodIDOf(_classRef, "transceive", "([B)[B");

  /// from: public byte[] transceive(byte[] data)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Send raw ISO-DEP data to the tag and receive the response.
  ///
  /// Applications must only send the INF payload, and not the start of frame and
  /// end of frame indicators. Applications do not need to fragment the payload, it
  /// will be automatically fragmented and defragmented by \#transceive if
  /// it exceeds FSD/FSC limits.
  ///
  /// Use \#getMaxTransceiveLength to retrieve the maximum number of bytes
  /// that can be sent with \#transceive.
  ///
  /// This is an I/O operation and will block until complete. It must
  /// not be called from the main application thread. A blocked call will be canceled with
  /// IOException if \#close is called from another thread.
  ///
  /// <p class="note">Requires the android.Manifest.permission\#NFC permission.
  ///@param data command bytes to send, must not be null
  ///@return response bytes received, will not be null
  ///@throws TagLostException if the tag leaves the field
  ///@throws IOException if there is an I/O failure, or this operation is canceled
  jni.JniObject transceive(jni.JniObject data) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_transceive, jni.JniType.objectType, [data.reference]).object);

  static final _id_getMaxTransceiveLength =
      jniAccessors.getMethodIDOf(_classRef, "getMaxTransceiveLength", "()I");

  /// from: public int getMaxTransceiveLength()
  ///
  /// Return the maximum number of bytes that can be sent with \#transceive.
  ///@return the maximum number of bytes that can be sent with \#transceive.
  int getMaxTransceiveLength() => jniAccessors.callMethodWithArgs(
      reference, _id_getMaxTransceiveLength, jni.JniType.intType, []).integer;

  static final _id_isExtendedLengthApduSupported = jniAccessors.getMethodIDOf(
      _classRef, "isExtendedLengthApduSupported", "()Z");

  /// from: public boolean isExtendedLengthApduSupported()
  ///
  /// Standard APDUs have a 1-byte length field, allowing a maximum of
  /// 255 payload bytes, which results in a maximum APDU length of 261 bytes.
  ///
  /// Extended length APDUs have a 3-byte length field, allowing 65535
  /// payload bytes.
  ///
  /// Some NFC adapters, like the one used in the Nexus S and the Galaxy Nexus
  /// do not support extended length APDUs. They are expected to be well-supported
  /// in the future though. Use this method to check for extended length APDU
  /// support.
  ///@return whether the NFC adapter on this device supports extended length APDUs.
  bool isExtendedLengthApduSupported() => jniAccessors.callMethodWithArgs(
      reference,
      _id_isExtendedLengthApduSupported,
      jni.JniType.booleanType, []).boolean;

  static final _id_isConnected =
      jniAccessors.getMethodIDOf(_classRef, "isConnected", "()Z");

  /// from: public boolean isConnected()
  bool isConnected() => jniAccessors.callMethodWithArgs(
      reference, _id_isConnected, jni.JniType.booleanType, []).boolean;

  static final _id_getTag =
      jniAccessors.getMethodIDOf(_classRef, "getTag", "()Landroid/nfc/Tag;");

  /// from: public android.nfc.Tag getTag()
  /// The returned object must be deleted after use, by calling the `delete` method.
  tag_.Tag getTag() => tag_.Tag.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getTag, jni.JniType.objectType, []).object);

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_connect =
      jniAccessors.getMethodIDOf(_classRef, "connect", "()V");

  /// from: public void connect()
  void connect() => jniAccessors.callMethodWithArgs(
      reference, _id_connect, jni.JniType.voidType, []).check();
}
