// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../Tag.dart" as tag_;

import "../NdefMessage.dart" as ndefmessage_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.nfc.tech.NdefFormatable
///
/// Provide access to NDEF format operations on a Tag.
///
/// Acquire a NdefFormatable object using \#get.
///
/// Android devices with NFC must only enumerate and implement this
/// class for tags for which it can format to NDEF.
///
/// Unfortunately the procedures to convert unformated tags to NDEF formatted
/// tags are not specified by NFC Forum, and are not generally well-known. So
/// there is no mandatory set of tags for which all Android devices with NFC
/// must support NdefFormatable.
///
/// <p class="note"><strong>Note:</strong> Methods that perform I/O operations
/// require the android.Manifest.permission\#NFC permission.
class NdefFormatable extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/nfc/tech/NdefFormatable");
  NdefFormatable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/nfc/Tag;)V");

  /// from: void <init>(android.nfc.Tag tag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Internal constructor, to be used by NfcAdapter
  ///@hide
  NdefFormatable(tag_.Tag tag)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [tag.reference]).object);

  static final _id_get0 = jniAccessors.getStaticMethodIDOf(
      _classRef, "get", "(Landroid/nfc/Tag;)Landroid/nfc/tech/NdefFormatable;");

  /// from: static public android.nfc.tech.NdefFormatable get(android.nfc.Tag tag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get an instance of NdefFormatable for the given tag.
  /// Does not cause any RF activity and does not block.
  /// Returns null if NdefFormatable was not enumerated in Tag\#getTechList.
  /// This indicates the tag is not NDEF formatable by this Android device.
  ///@param tag an NDEF formatable tag
  ///@return NDEF formatable object
  static NdefFormatable get0(tag_.Tag tag) =>
      NdefFormatable.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_get0, jni.JniType.objectType, [tag.reference]).object);

  static final _id_format = jniAccessors.getMethodIDOf(
      _classRef, "format", "(Landroid/nfc/NdefMessage;)V");

  /// from: public void format(android.nfc.NdefMessage firstMessage)
  ///
  /// Format a tag as NDEF, and write a NdefMessage.
  ///
  /// This is a multi-step process, an IOException is thrown
  /// if any one step fails.
  /// The card is left in a read-write state after this operation.
  ///
  /// This is an I/O operation and will block until complete. It must
  /// not be called from the main application thread. A blocked call will be canceled with
  /// IOException if \#close is called from another thread.
  ///
  /// <p class="note">Requires the android.Manifest.permission\#NFC permission.
  ///@param firstMessage the NDEF message to write after formatting, can be null
  ///@throws TagLostException if the tag leaves the field
  ///@throws IOException if there is an I/O failure, or the operation is canceled
  ///@throws FormatException if the NDEF Message to write is malformed
  void format(ndefmessage_.NdefMessage firstMessage) =>
      jniAccessors.callMethodWithArgs(reference, _id_format,
          jni.JniType.voidType, [firstMessage.reference]).check();

  static final _id_formatReadOnly = jniAccessors.getMethodIDOf(
      _classRef, "formatReadOnly", "(Landroid/nfc/NdefMessage;)V");

  /// from: public void formatReadOnly(android.nfc.NdefMessage firstMessage)
  ///
  /// Formats a tag as NDEF, write a NdefMessage, and make read-only.
  ///
  /// This is a multi-step process, an IOException is thrown
  /// if any one step fails.
  /// The card is left in a read-only state if this method returns successfully.
  ///
  /// This is an I/O operation and will block until complete. It must
  /// not be called from the main application thread. A blocked call will be canceled with
  /// IOException if \#close is called from another thread.
  ///
  /// <p class="note">Requires the android.Manifest.permission\#NFC permission.
  ///@param firstMessage the NDEF message to write after formatting
  ///@throws TagLostException if the tag leaves the field
  ///@throws IOException if there is an I/O failure, or the operation is canceled
  ///@throws FormatException if the NDEF Message to write is malformed
  void formatReadOnly(ndefmessage_.NdefMessage firstMessage) =>
      jniAccessors.callMethodWithArgs(reference, _id_formatReadOnly,
          jni.JniType.voidType, [firstMessage.reference]).check();

  static final _id_isConnected =
      jniAccessors.getMethodIDOf(_classRef, "isConnected", "()Z");

  /// from: public boolean isConnected()
  bool isConnected() => jniAccessors.callMethodWithArgs(
      reference, _id_isConnected, jni.JniType.booleanType, []).boolean;

  static final _id_getTag =
      jniAccessors.getMethodIDOf(_classRef, "getTag", "()Landroid/nfc/Tag;");

  /// from: public android.nfc.Tag getTag()
  /// The returned object must be deleted after use, by calling the `delete` method.
  tag_.Tag getTag() => tag_.Tag.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getTag, jni.JniType.objectType, []).object);

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_connect =
      jniAccessors.getMethodIDOf(_classRef, "connect", "()V");

  /// from: public void connect()
  void connect() => jniAccessors.callMethodWithArgs(
      reference, _id_connect, jni.JniType.voidType, []).check();
}
