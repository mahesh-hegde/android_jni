// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../app/Service.dart" as service_;

import "../../os/IBinder.dart" as ibinder_;

import "../../content/Intent.dart" as intent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.nfc.cardemulation.OffHostApduService
///
/// OffHostApduService is a convenience Service class that can be
/// extended to describe one or more NFC applications that are residing
/// off-host, for example on an embedded secure element or a UICC.
///
/// <div class="special reference">
/// <h3>Developer Guide</h3>
/// For a general introduction into the topic of card emulation,
/// please read the <a href="{@docRoot}guide/topics/nfc/ce.html">
/// NFC card emulation developer guide.</a>
///
/// </div>
///
/// <h3>NFC Protocols</h3>
/// Off-host applications represented by this class are based on the NFC-Forum ISO-DEP
/// protocol (based on ISO/IEC 14443-4) and support processing
/// command Application Protocol Data Units (APDUs) as
/// defined in the ISO/IEC 7816-4 specification.
///
/// <h3>Service selection</h3>
/// When a remote NFC device wants to talk to your
/// off-host NFC application, it sends a so-called
/// "SELECT AID" APDU as defined in the ISO/IEC 7816-4 specification.
/// The AID is an application identifier defined in ISO/IEC 7816-4.
///
/// The registration procedure for AIDs is defined in the
/// ISO/IEC 7816-5 specification. If you don't want to register an
/// AID, you are free to use AIDs in the proprietary range:
/// bits 8-5 of the first byte must each be set to '1'. For example,
/// "0xF00102030405" is a proprietary AID. If you do use proprietary
/// AIDs, it is recommended to choose an AID of at least 6 bytes,
/// to reduce the risk of collisions with other applications that
/// might be using proprietary AIDs as well.
///
/// <h3>AID groups</h3>
/// In some cases, an off-host environment may need to register multiple AIDs
/// to implement a certain application, and it needs to be sure
/// that it is the default handler for all of these AIDs (as opposed
/// to some AIDs in the group going to another service).
///
/// An AID group is a list of AIDs that should be considered as
/// belonging together by the OS. For all AIDs in an AID group, the
/// OS will guarantee one of the following:
/// <ul>
/// <li>All AIDs in the group are routed to the off-host execution environment
/// <li>No AIDs in the group are routed to the off-host execution environment
/// </ul>
/// In other words, there is no in-between state, where some AIDs
/// in the group can be routed to this off-host execution environment,
/// and some to another or a host-based HostApduService.
/// <h3>AID groups and categories</h3>
/// Each AID group can be associated with a category. This allows
/// the Android OS to classify services, and it allows the user to
/// set defaults at the category level instead of the AID level.
///
/// You can use
/// CardEmulation\#isDefaultServiceForCategory(android.content.ComponentName, String)
/// to determine if your off-host service is the default handler for a category.
///
/// In this version of the platform, the only known categories
/// are CardEmulation\#CATEGORY_PAYMENT and CardEmulation\#CATEGORY_OTHER.
/// AID groups without a category, or with a category that is not recognized
/// by the current platform version, will automatically be
/// grouped into the CardEmulation\#CATEGORY_OTHER category.
///
/// <h3>Service AID registration</h3>
/// To tell the platform which AIDs
/// reside off-host and are managed by this service, a \#SERVICE_META_DATA
/// entry must be included in the declaration of the service. An
/// example of a OffHostApduService manifest declaration is shown below:
/// <pre> &lt;service android:name=".MyOffHostApduService" android:exported="true" android:permission="android.permission.BIND_NFC_SERVICE"&gt;
///     &lt;intent-filter&gt;
///         &lt;action android:name="android.nfc.cardemulation.action.OFF_HOST_APDU_SERVICE"/&gt;
///     &lt;/intent-filter&gt;
///     &lt;meta-data android:name="android.nfc.cardemulation.off_host_apdu_ervice" android:resource="@xml/apduservice"/&gt;
/// &lt;/service&gt;</pre>
///
/// This meta-data tag points to an apduservice.xml file.
/// An example of this file with a single AID group declaration is shown below:
/// <pre>
/// &lt;offhost-apdu-service xmlns:android="http://schemas.android.com/apk/res/android"
///           android:description="@string/servicedesc"&gt;
///       &lt;aid-group android:description="@string/subscription" android:category="other">
///           &lt;aid-filter android:name="F0010203040506"/&gt;
///           &lt;aid-filter android:name="F0394148148100"/&gt;
///       &lt;/aid-group&gt;
/// &lt;/offhost-apdu-service&gt;
/// </pre>
///
/// The android.R.styleable\#OffHostApduService &lt;offhost-apdu-service&gt; is required
/// to contain a
/// android.R.styleable\#OffHostApduService_description &lt;android:description&gt;
/// attribute that contains a user-friendly description of the service that may be shown in UI.
///
/// The android.R.styleable\#OffHostApduService &lt;offhost-apdu-service&gt; must
/// contain one or more android.R.styleable\#AidGroup &lt;aid-group&gt; tags.
/// Each android.R.styleable\#AidGroup &lt;aid-group&gt; must contain one or
/// more android.R.styleable\#AidFilter &lt;aid-filter&gt; tags, each of which
/// contains a single AID. The AID must be specified in hexadecimal format, and contain
/// an even number of characters.
///
/// This registration will allow the service to be included
/// as an option for being the default handler for categories.
/// The Android OS will take care of correctly
/// routing the AIDs to the off-host execution environment,
/// based on which service the user has selected to be the handler for a certain category.
///
/// The service may define additional actions outside of the
/// Android namespace that provide further interaction with
/// the off-host execution environment.
///
/// <p class="note">Use of this class requires the
/// PackageManager\#FEATURE_NFC_HOST_CARD_EMULATION to be present
/// on the device.
class OffHostApduService extends service_.Service {
  static final _classRef =
      jniAccessors.getClassOf("android/nfc/cardemulation/OffHostApduService");
  OffHostApduService.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String SERVICE_INTERFACE
  ///
  /// The Intent action that must be declared as handled by the service.
  static const SERVICE_INTERFACE =
      "android.nfc.cardemulation.action.OFF_HOST_APDU_SERVICE";

  /// from: static public final java.lang.String SERVICE_META_DATA
  ///
  /// The name of the meta-data element that contains
  /// more information about this service.
  static const SERVICE_META_DATA =
      "android.nfc.cardemulation.off_host_apdu_service";

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  OffHostApduService.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_onBind = jniAccessors.getMethodIDOf(
      _classRef, "onBind", "(Landroid/content/Intent;)Landroid/os/IBinder;");

  /// from: public abstract android.os.IBinder onBind(android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The Android platform itself will not bind to this service,
  /// but merely uses its declaration to keep track of what AIDs
  /// the service is interested in. This information is then used
  /// to present the user with a list of applications that can handle
  /// an AID, as well as correctly route those AIDs either to the host (in case
  /// the user preferred a HostApduService), or to an off-host
  /// execution environment (in case the user preferred a OffHostApduService.
  ///
  /// Implementers may define additional actions outside of the
  /// Android namespace that allow further interactions with
  /// the off-host execution environment. Such implementations
  /// would need to override this method.
  ibinder_.IBinder onBind(intent_.Intent intent) =>
      ibinder_.IBinder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onBind, jni.JniType.objectType, [intent.reference]).object);
}
