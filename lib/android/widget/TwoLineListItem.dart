// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "RelativeLayout.dart" as relativelayout_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "TextView.dart" as textview_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.TwoLineListItem
///
/// A view group with two children, intended for use in ListViews. This item has two
/// android.widget.TextView TextViews elements (or subclasses) with the ID values
/// android.R.id\#text1 text1
/// and android.R.id\#text2 text2. There is an optional third View element with the
/// ID android.R.id\#selectedIcon selectedIcon, which can be any View subclass
/// (though it is typically a graphic View, such as android.widget.ImageView ImageView)
/// that can be displayed when a TwoLineListItem has focus. Android supplies a
/// android.R.layout\#two_line_list_item standard layout resource for TwoLineListView
/// (which does not include a selected item icon), but you can design your own custom XML
/// layout for this object.
///@attr ref android.R.styleable\#TwoLineListItem_mode
///@deprecated This class can be implemented easily by apps using a RelativeLayout
/// or a LinearLayout.
class TwoLineListItem extends relativelayout_.RelativeLayout {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/TwoLineListItem");
  TwoLineListItem.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TwoLineListItem(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TwoLineListItem.ctor1(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TwoLineListItem.ctor2(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TwoLineListItem.ctor3(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_onFinishInflate1 =
      jniAccessors.getMethodIDOf(_classRef, "onFinishInflate", "()V");

  /// from: protected void onFinishInflate()
  void onFinishInflate1() => jniAccessors.callMethodWithArgs(
      reference, _id_onFinishInflate1, jni.JniType.voidType, []).check();

  static final _id_getText1 = jniAccessors.getMethodIDOf(
      _classRef, "getText1", "()Landroid/widget/TextView;");

  /// from: public android.widget.TextView getText1()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a handle to the item with ID text1.
  ///@return A handle to the item with ID text1.
  textview_.TextView getText1() =>
      textview_.TextView.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText1, jni.JniType.objectType, []).object);

  static final _id_getText2 = jniAccessors.getMethodIDOf(
      _classRef, "getText2", "()Landroid/widget/TextView;");

  /// from: public android.widget.TextView getText2()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a handle to the item with ID text2.
  ///@return A handle to the item with ID text2.
  textview_.TextView getText2() =>
      textview_.TextView.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getText2, jni.JniType.objectType, []).object);

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);
}
