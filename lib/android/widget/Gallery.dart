// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AbsSpinner.dart" as absspinner_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../view/View.dart" as view_;

import "../view/animation/Transformation.dart" as transformation_;

import "../view/ViewGroup.dart" as viewgroup_;

import "../view/MotionEvent.dart" as motionevent_;

import "../view/ContextMenu.dart" as contextmenu_;

import "../view/KeyEvent.dart" as keyevent_;

import "../graphics/Rect.dart" as rect_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.Gallery
///
/// A view that shows items in a center-locked, horizontally scrolling list.
///
/// The default values for the Gallery assume you will be using
/// android.R.styleable\#Theme_galleryItemBackground as the background for
/// each View given to the Gallery from the Adapter. If you are not doing this,
/// you may need to adjust some Gallery properties, such as the spacing.
///
/// Views given to the Gallery should use Gallery.LayoutParams as their
/// layout parameters type.
///@attr ref android.R.styleable\#Gallery_animationDuration
///@attr ref android.R.styleable\#Gallery_spacing
///@attr ref android.R.styleable\#Gallery_gravity
///@deprecated This widget is no longer supported. Other horizontally scrolling
/// widgets include HorizontalScrollView and android.support.v4.view.ViewPager
/// from the support library.
class Gallery extends absspinner_.AbsSpinner {
  static final _classRef = jniAccessors.getClassOf("android/widget/Gallery");
  Gallery.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Gallery(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Gallery.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Gallery.ctor2(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Gallery.ctor3(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_onAttachedToWindow1 =
      jniAccessors.getMethodIDOf(_classRef, "onAttachedToWindow", "()V");

  /// from: protected void onAttachedToWindow()
  void onAttachedToWindow1() => jniAccessors.callMethodWithArgs(
      reference, _id_onAttachedToWindow1, jni.JniType.voidType, []).check();

  static final _id_setCallbackDuringFling =
      jniAccessors.getMethodIDOf(_classRef, "setCallbackDuringFling", "(Z)V");

  /// from: public void setCallbackDuringFling(boolean shouldCallback)
  ///
  /// Whether or not to callback on any \#getOnItemSelectedListener()
  /// while the items are being flinged. If false, only the final selected item
  /// will cause the callback. If true, all items between the first and the
  /// final will cause callbacks.
  ///@param shouldCallback Whether or not to callback on the listener while
  ///            the items are being flinged.
  void setCallbackDuringFling(bool shouldCallback) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCallbackDuringFling,
          jni.JniType.voidType, [shouldCallback]).check();

  static final _id_setAnimationDuration =
      jniAccessors.getMethodIDOf(_classRef, "setAnimationDuration", "(I)V");

  /// from: public void setAnimationDuration(int animationDurationMillis)
  ///
  /// Sets how long the transition animation should run when a child view
  /// changes position. Only relevant if animation is turned on.
  ///@param animationDurationMillis The duration of the transition, in
  ///        milliseconds.
  ///@attr ref android.R.styleable\#Gallery_animationDuration
  void setAnimationDuration(int animationDurationMillis) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAnimationDuration,
          jni.JniType.voidType, [animationDurationMillis]).check();

  static final _id_setSpacing =
      jniAccessors.getMethodIDOf(_classRef, "setSpacing", "(I)V");

  /// from: public void setSpacing(int spacing)
  ///
  /// Sets the spacing between items in a Gallery
  ///@param spacing The spacing in pixels between items in the Gallery
  ///@attr ref android.R.styleable\#Gallery_spacing
  void setSpacing(int spacing) => jniAccessors.callMethodWithArgs(
      reference, _id_setSpacing, jni.JniType.voidType, [spacing]).check();

  static final _id_setUnselectedAlpha =
      jniAccessors.getMethodIDOf(_classRef, "setUnselectedAlpha", "(F)V");

  /// from: public void setUnselectedAlpha(float unselectedAlpha)
  ///
  /// Sets the alpha of items that are not selected in the Gallery.
  ///@param unselectedAlpha the alpha for the items that are not selected.
  ///@attr ref android.R.styleable\#Gallery_unselectedAlpha
  void setUnselectedAlpha(double unselectedAlpha) =>
      jniAccessors.callMethodWithArgs(reference, _id_setUnselectedAlpha,
          jni.JniType.voidType, [unselectedAlpha]).check();

  static final _id_getChildStaticTransformation1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getChildStaticTransformation",
      "(Landroid/view/View;Landroid/view/animation/Transformation;)Z");

  /// from: protected boolean getChildStaticTransformation(android.view.View child, android.view.animation.Transformation t)
  bool getChildStaticTransformation1(
          view_.View child, transformation_.Transformation t) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_getChildStaticTransformation1,
          jni.JniType.booleanType,
          [child.reference, t.reference]).boolean;

  static final _id_computeHorizontalScrollExtent1 = jniAccessors.getMethodIDOf(
      _classRef, "computeHorizontalScrollExtent", "()I");

  /// from: protected int computeHorizontalScrollExtent()
  int computeHorizontalScrollExtent1() => jniAccessors.callMethodWithArgs(
      reference,
      _id_computeHorizontalScrollExtent1,
      jni.JniType.intType, []).integer;

  static final _id_computeHorizontalScrollOffset1 = jniAccessors.getMethodIDOf(
      _classRef, "computeHorizontalScrollOffset", "()I");

  /// from: protected int computeHorizontalScrollOffset()
  int computeHorizontalScrollOffset1() => jniAccessors.callMethodWithArgs(
      reference,
      _id_computeHorizontalScrollOffset1,
      jni.JniType.intType, []).integer;

  static final _id_computeHorizontalScrollRange1 = jniAccessors.getMethodIDOf(
      _classRef, "computeHorizontalScrollRange", "()I");

  /// from: protected int computeHorizontalScrollRange()
  int computeHorizontalScrollRange1() => jniAccessors.callMethodWithArgs(
      reference,
      _id_computeHorizontalScrollRange1,
      jni.JniType.intType, []).integer;

  static final _id_checkLayoutParams1 = jniAccessors.getMethodIDOf(_classRef,
      "checkLayoutParams", "(Landroid/view/ViewGroup\$LayoutParams;)Z");

  /// from: protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams p)
  bool checkLayoutParams1(viewgroup_.ViewGroup_LayoutParams p) =>
      jniAccessors.callMethodWithArgs(reference, _id_checkLayoutParams1,
          jni.JniType.booleanType, [p.reference]).boolean;

  static final _id_generateLayoutParams2 = jniAccessors.getMethodIDOf(
      _classRef,
      "generateLayoutParams",
      "(Landroid/view/ViewGroup\$LayoutParams;)Landroid/view/ViewGroup\$LayoutParams;");

  /// from: protected android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams p)
  /// The returned object must be deleted after use, by calling the `delete` method.
  viewgroup_.ViewGroup_LayoutParams generateLayoutParams2(
          viewgroup_.ViewGroup_LayoutParams p) =>
      viewgroup_.ViewGroup_LayoutParams.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_generateLayoutParams2,
          jni.JniType.objectType,
          [p.reference]).object);

  static final _id_generateLayoutParams3 = jniAccessors.getMethodIDOf(
      _classRef,
      "generateLayoutParams",
      "(Landroid/util/AttributeSet;)Landroid/view/ViewGroup\$LayoutParams;");

  /// from: public android.view.ViewGroup.LayoutParams generateLayoutParams(android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  viewgroup_.ViewGroup_LayoutParams generateLayoutParams3(
          attributeset_.AttributeSet attrs) =>
      viewgroup_.ViewGroup_LayoutParams.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_generateLayoutParams3,
          jni.JniType.objectType,
          [attrs.reference]).object);

  static final _id_generateDefaultLayoutParams1 = jniAccessors.getMethodIDOf(
      _classRef,
      "generateDefaultLayoutParams",
      "()Landroid/view/ViewGroup\$LayoutParams;");

  /// from: protected android.view.ViewGroup.LayoutParams generateDefaultLayoutParams()
  /// The returned object must be deleted after use, by calling the `delete` method.
  viewgroup_.ViewGroup_LayoutParams generateDefaultLayoutParams1() =>
      viewgroup_.ViewGroup_LayoutParams.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_generateDefaultLayoutParams1,
          jni.JniType.objectType, []).object);

  static final _id_onLayout1 =
      jniAccessors.getMethodIDOf(_classRef, "onLayout", "(ZIIII)V");

  /// from: protected void onLayout(boolean changed, int l, int t, int r, int b)
  void onLayout1(bool changed, int l, int t, int r, int b) =>
      jniAccessors.callMethodWithArgs(reference, _id_onLayout1,
          jni.JniType.voidType, [changed, l, t, r, b]).check();

  static final _id_onTouchEvent1 = jniAccessors.getMethodIDOf(
      _classRef, "onTouchEvent", "(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTouchEvent(android.view.MotionEvent event)
  bool onTouchEvent1(motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTouchEvent1,
          jni.JniType.booleanType, [event.reference]).boolean;

  static final _id_onSingleTapUp = jniAccessors.getMethodIDOf(
      _classRef, "onSingleTapUp", "(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onSingleTapUp(android.view.MotionEvent e)
  bool onSingleTapUp(motionevent_.MotionEvent e) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSingleTapUp,
          jni.JniType.booleanType, [e.reference]).boolean;

  static final _id_onFling = jniAccessors.getMethodIDOf(_classRef, "onFling",
      "(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z");

  /// from: public boolean onFling(android.view.MotionEvent e1, android.view.MotionEvent e2, float velocityX, float velocityY)
  bool onFling(motionevent_.MotionEvent e1, motionevent_.MotionEvent e2,
          double velocityX, double velocityY) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onFling,
          jni.JniType.booleanType,
          [e1.reference, e2.reference, velocityX, velocityY]).boolean;

  static final _id_onScroll = jniAccessors.getMethodIDOf(_classRef, "onScroll",
      "(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z");

  /// from: public boolean onScroll(android.view.MotionEvent e1, android.view.MotionEvent e2, float distanceX, float distanceY)
  bool onScroll(motionevent_.MotionEvent e1, motionevent_.MotionEvent e2,
          double distanceX, double distanceY) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onScroll,
          jni.JniType.booleanType,
          [e1.reference, e2.reference, distanceX, distanceY]).boolean;

  static final _id_onDown = jniAccessors.getMethodIDOf(
      _classRef, "onDown", "(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onDown(android.view.MotionEvent e)
  bool onDown(motionevent_.MotionEvent e) => jniAccessors.callMethodWithArgs(
      reference, _id_onDown, jni.JniType.booleanType, [e.reference]).boolean;

  static final _id_onLongPress = jniAccessors.getMethodIDOf(
      _classRef, "onLongPress", "(Landroid/view/MotionEvent;)V");

  /// from: public void onLongPress(android.view.MotionEvent e)
  ///
  /// @param e This value must never be {@code null}.
  void onLongPress(motionevent_.MotionEvent e) =>
      jniAccessors.callMethodWithArgs(reference, _id_onLongPress,
          jni.JniType.voidType, [e.reference]).check();

  static final _id_onShowPress = jniAccessors.getMethodIDOf(
      _classRef, "onShowPress", "(Landroid/view/MotionEvent;)V");

  /// from: public void onShowPress(android.view.MotionEvent e)
  void onShowPress(motionevent_.MotionEvent e) =>
      jniAccessors.callMethodWithArgs(reference, _id_onShowPress,
          jni.JniType.voidType, [e.reference]).check();

  static final _id_dispatchSetSelected1 =
      jniAccessors.getMethodIDOf(_classRef, "dispatchSetSelected", "(Z)V");

  /// from: public void dispatchSetSelected(boolean selected)
  void dispatchSetSelected1(bool selected) => jniAccessors.callMethodWithArgs(
      reference,
      _id_dispatchSetSelected1,
      jni.JniType.voidType,
      [selected]).check();

  static final _id_dispatchSetPressed1 =
      jniAccessors.getMethodIDOf(_classRef, "dispatchSetPressed", "(Z)V");

  /// from: protected void dispatchSetPressed(boolean pressed)
  void dispatchSetPressed1(bool pressed) => jniAccessors.callMethodWithArgs(
      reference,
      _id_dispatchSetPressed1,
      jni.JniType.voidType,
      [pressed]).check();

  static final _id_getContextMenuInfo1 = jniAccessors.getMethodIDOf(_classRef,
      "getContextMenuInfo", "()Landroid/view/ContextMenu\$ContextMenuInfo;");

  /// from: protected android.view.ContextMenu.ContextMenuInfo getContextMenuInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  contextmenu_.ContextMenu_ContextMenuInfo getContextMenuInfo1() =>
      contextmenu_.ContextMenu_ContextMenuInfo.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getContextMenuInfo1,
              jni.JniType.objectType, []).object);

  static final _id_showContextMenuForChild2 = jniAccessors.getMethodIDOf(
      _classRef, "showContextMenuForChild", "(Landroid/view/View;)Z");

  /// from: public boolean showContextMenuForChild(android.view.View originalView)
  bool showContextMenuForChild2(view_.View originalView) =>
      jniAccessors.callMethodWithArgs(reference, _id_showContextMenuForChild2,
          jni.JniType.booleanType, [originalView.reference]).boolean;

  static final _id_showContextMenuForChild3 = jniAccessors.getMethodIDOf(
      _classRef, "showContextMenuForChild", "(Landroid/view/View;FF)Z");

  /// from: public boolean showContextMenuForChild(android.view.View originalView, float x, float y)
  bool showContextMenuForChild3(view_.View originalView, double x, double y) =>
      jniAccessors.callMethodWithArgs(reference, _id_showContextMenuForChild3,
          jni.JniType.booleanType, [originalView.reference, x, y]).boolean;

  static final _id_showContextMenu2 =
      jniAccessors.getMethodIDOf(_classRef, "showContextMenu", "()Z");

  /// from: public boolean showContextMenu()
  bool showContextMenu2() => jniAccessors.callMethodWithArgs(
      reference, _id_showContextMenu2, jni.JniType.booleanType, []).boolean;

  static final _id_showContextMenu3 =
      jniAccessors.getMethodIDOf(_classRef, "showContextMenu", "(FF)Z");

  /// from: public boolean showContextMenu(float x, float y)
  bool showContextMenu3(double x, double y) => jniAccessors.callMethodWithArgs(
      reference, _id_showContextMenu3, jni.JniType.booleanType, [x, y]).boolean;

  static final _id_dispatchKeyEvent1 = jniAccessors.getMethodIDOf(
      _classRef, "dispatchKeyEvent", "(Landroid/view/KeyEvent;)Z");

  /// from: public boolean dispatchKeyEvent(android.view.KeyEvent event)
  bool dispatchKeyEvent1(keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_dispatchKeyEvent1,
          jni.JniType.booleanType, [event.reference]).boolean;

  static final _id_onKeyDown1 = jniAccessors.getMethodIDOf(
      _classRef, "onKeyDown", "(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyDown(int keyCode, android.view.KeyEvent event)
  ///
  /// Handles left, right, and clicking
  ///@see android.view.View\#onKeyDown
  bool onKeyDown1(int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyDown1,
          jni.JniType.booleanType, [keyCode, event.reference]).boolean;

  static final _id_onKeyUp1 = jniAccessors.getMethodIDOf(
      _classRef, "onKeyUp", "(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyUp(int keyCode, android.view.KeyEvent event)
  bool onKeyUp1(int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyUp1,
          jni.JniType.booleanType, [keyCode, event.reference]).boolean;

  static final _id_setGravity =
      jniAccessors.getMethodIDOf(_classRef, "setGravity", "(I)V");

  /// from: public void setGravity(int gravity)
  ///
  /// Describes how the child views are aligned.
  ///@param gravity
  ///@attr ref android.R.styleable\#Gallery_gravity
  void setGravity(int gravity) => jniAccessors.callMethodWithArgs(
      reference, _id_setGravity, jni.JniType.voidType, [gravity]).check();

  static final _id_getChildDrawingOrder1 =
      jniAccessors.getMethodIDOf(_classRef, "getChildDrawingOrder", "(II)I");

  /// from: protected int getChildDrawingOrder(int childCount, int i)
  int getChildDrawingOrder1(int childCount, int i) =>
      jniAccessors.callMethodWithArgs(reference, _id_getChildDrawingOrder1,
          jni.JniType.intType, [childCount, i]).integer;

  static final _id_onFocusChanged1 = jniAccessors.getMethodIDOf(
      _classRef, "onFocusChanged", "(ZILandroid/graphics/Rect;)V");

  /// from: protected void onFocusChanged(boolean gainFocus, int direction, android.graphics.Rect previouslyFocusedRect)
  void onFocusChanged1(
          bool gainFocus, int direction, rect_.Rect previouslyFocusedRect) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onFocusChanged1,
          jni.JniType.voidType,
          [gainFocus, direction, previouslyFocusedRect.reference]).check();

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);
}

/// from: android.widget.Gallery$LayoutParams
///
/// Gallery extends LayoutParams to provide a place to hold current
/// Transformation information along with previous position/transformation
/// info.
class Gallery_LayoutParams extends viewgroup_.ViewGroup_LayoutParams {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/Gallery\$LayoutParams");
  Gallery_LayoutParams.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context c, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Gallery_LayoutParams(context_.Context c, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [c.reference, attrs.reference]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int w, int h)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Gallery_LayoutParams.ctor1(int w, int h)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [w, h]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/view/ViewGroup\$LayoutParams;)V");

  /// from: public void <init>(android.view.ViewGroup.LayoutParams source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Gallery_LayoutParams.ctor2(viewgroup_.ViewGroup_LayoutParams source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [source.reference]).object);
}
