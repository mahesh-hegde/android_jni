// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../view/View.dart" as view_;

import "../view/ViewGroup.dart" as viewgroup_;

import "../view/MotionEvent.dart" as motionevent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.ZoomButtonsController
///
/// The ZoomButtonsController handles showing and hiding the zoom
/// controls and positioning it relative to an owner view. It also gives the
/// client access to the zoom controls container, allowing for additional
/// accessory buttons to be shown in the zoom controls window.
///
/// Typically, clients should call \#setVisible(boolean) setVisible(true)
/// on a touch down or move (no need to call \#setVisible(boolean) setVisible(false) since it will time out on its own). Also, whenever the
/// owner cannot be zoomed further, the client should update
/// \#setZoomInEnabled(boolean) and \#setZoomOutEnabled(boolean).
///
/// If you are using this with a custom View, please call
/// \#setVisible(boolean) setVisible(false) from
/// View\#onDetachedFromWindow and from View\#onVisibilityChanged
/// when <code>visibility != View.VISIBLE</code>.
///@deprecated This functionality and UI is better handled with custom views and layouts
/// rather than a dedicated zoom-control widget
class ZoomButtonsController extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/ZoomButtonsController");
  ZoomButtonsController.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/view/View;)V");

  /// from: public void <init>(android.view.View ownerView)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor for the ZoomButtonsController.
  ///@param ownerView The view that is being zoomed by the zoom controls. The
  ///            zoom controls will be displayed aligned with this view.
  ZoomButtonsController(view_.View ownerView)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [ownerView.reference]).object);

  static final _id_setZoomInEnabled =
      jniAccessors.getMethodIDOf(_classRef, "setZoomInEnabled", "(Z)V");

  /// from: public void setZoomInEnabled(boolean enabled)
  ///
  /// Whether to enable the zoom in control.
  ///@param enabled Whether to enable the zoom in control.
  void setZoomInEnabled(bool enabled) => jniAccessors.callMethodWithArgs(
      reference, _id_setZoomInEnabled, jni.JniType.voidType, [enabled]).check();

  static final _id_setZoomOutEnabled =
      jniAccessors.getMethodIDOf(_classRef, "setZoomOutEnabled", "(Z)V");

  /// from: public void setZoomOutEnabled(boolean enabled)
  ///
  /// Whether to enable the zoom out control.
  ///@param enabled Whether to enable the zoom out control.
  void setZoomOutEnabled(bool enabled) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setZoomOutEnabled,
      jni.JniType.voidType,
      [enabled]).check();

  static final _id_setZoomSpeed =
      jniAccessors.getMethodIDOf(_classRef, "setZoomSpeed", "(J)V");

  /// from: public void setZoomSpeed(long speed)
  ///
  /// Sets the delay between zoom callbacks as the user holds a zoom button.
  ///@param speed The delay in milliseconds between zoom callbacks.
  void setZoomSpeed(int speed) => jniAccessors.callMethodWithArgs(
      reference, _id_setZoomSpeed, jni.JniType.voidType, [speed]).check();

  static final _id_setOnZoomListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnZoomListener",
      "(Landroid/widget/ZoomButtonsController\$OnZoomListener;)V");

  /// from: public void setOnZoomListener(android.widget.ZoomButtonsController.OnZoomListener listener)
  ///
  /// Sets the OnZoomListener listener that receives callbacks to zoom.
  ///@param listener The listener that will be told to zoom.
  void setOnZoomListener(ZoomButtonsController_OnZoomListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnZoomListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_setFocusable =
      jniAccessors.getMethodIDOf(_classRef, "setFocusable", "(Z)V");

  /// from: public void setFocusable(boolean focusable)
  ///
  /// Sets whether the zoom controls should be focusable. If the controls are
  /// focusable, then trackball and arrow key interactions are possible.
  /// Otherwise, only touch interactions are possible.
  ///@param focusable Whether the zoom controls should be focusable.
  void setFocusable(bool focusable) => jniAccessors.callMethodWithArgs(
      reference, _id_setFocusable, jni.JniType.voidType, [focusable]).check();

  static final _id_isAutoDismissed =
      jniAccessors.getMethodIDOf(_classRef, "isAutoDismissed", "()Z");

  /// from: public boolean isAutoDismissed()
  ///
  /// Whether the zoom controls will be automatically dismissed after showing.
  ///@return Whether the zoom controls will be auto dismissed after showing.
  bool isAutoDismissed() => jniAccessors.callMethodWithArgs(
      reference, _id_isAutoDismissed, jni.JniType.booleanType, []).boolean;

  static final _id_setAutoDismissed =
      jniAccessors.getMethodIDOf(_classRef, "setAutoDismissed", "(Z)V");

  /// from: public void setAutoDismissed(boolean autoDismiss)
  ///
  /// Sets whether the zoom controls will be automatically dismissed after
  /// showing.
  void setAutoDismissed(bool autoDismiss) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setAutoDismissed,
      jni.JniType.voidType,
      [autoDismiss]).check();

  static final _id_isVisible =
      jniAccessors.getMethodIDOf(_classRef, "isVisible", "()Z");

  /// from: public boolean isVisible()
  ///
  /// Whether the zoom controls are visible to the user.
  ///@return Whether the zoom controls are visible to the user.
  bool isVisible() => jniAccessors.callMethodWithArgs(
      reference, _id_isVisible, jni.JniType.booleanType, []).boolean;

  static final _id_setVisible =
      jniAccessors.getMethodIDOf(_classRef, "setVisible", "(Z)V");

  /// from: public void setVisible(boolean visible)
  ///
  /// Sets whether the zoom controls should be visible to the user.
  ///@param visible Whether the zoom controls should be visible to the user.
  void setVisible(bool visible) => jniAccessors.callMethodWithArgs(
      reference, _id_setVisible, jni.JniType.voidType, [visible]).check();

  static final _id_getContainer = jniAccessors.getMethodIDOf(
      _classRef, "getContainer", "()Landroid/view/ViewGroup;");

  /// from: public android.view.ViewGroup getContainer()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the container that is the parent of the zoom controls.
  ///
  /// The client can add other views to this container to link them with the
  /// zoom controls.
  ///@return The container of the zoom controls. It will be a layout that
  ///         respects the gravity of a child's layout parameters.
  viewgroup_.ViewGroup getContainer() =>
      viewgroup_.ViewGroup.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getContainer, jni.JniType.objectType, []).object);

  static final _id_getZoomControls = jniAccessors.getMethodIDOf(
      _classRef, "getZoomControls", "()Landroid/view/View;");

  /// from: public android.view.View getZoomControls()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the view for the zoom controls.
  ///@return The zoom controls view.
  view_.View getZoomControls() =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getZoomControls, jni.JniType.objectType, []).object);

  static final _id_onTouch = jniAccessors.getMethodIDOf(
      _classRef, "onTouch", "(Landroid/view/View;Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTouch(android.view.View v, android.view.MotionEvent event)
  ///
  /// @hide The ZoomButtonsController implements the OnTouchListener, but this
  ///       does not need to be shown in its public API.
  bool onTouch(view_.View v, motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTouch,
          jni.JniType.booleanType, [v.reference, event.reference]).boolean;
}

/// from: android.widget.ZoomButtonsController$OnZoomListener
///
/// Interface that will be called when the user performs an interaction that
/// triggers some action, for example zooming.
class ZoomButtonsController_OnZoomListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/widget/ZoomButtonsController\$OnZoomListener");
  ZoomButtonsController_OnZoomListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onVisibilityChanged =
      jniAccessors.getMethodIDOf(_classRef, "onVisibilityChanged", "(Z)V");

  /// from: public abstract void onVisibilityChanged(boolean visible)
  ///
  /// Called when the zoom controls' visibility changes.
  ///@param visible Whether the zoom controls are visible.
  void onVisibilityChanged(bool visible) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onVisibilityChanged,
      jni.JniType.voidType,
      [visible]).check();

  static final _id_onZoom =
      jniAccessors.getMethodIDOf(_classRef, "onZoom", "(Z)V");

  /// from: public abstract void onZoom(boolean zoomIn)
  ///
  /// Called when the owner view needs to be zoomed.
  ///@param zoomIn The direction of the zoom: true to zoom in, false to zoom out.
  void onZoom(bool zoomIn) => jniAccessors.callMethodWithArgs(
      reference, _id_onZoom, jni.JniType.voidType, [zoomIn]).check();
}
