// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../view/View.dart" as view_;

import "../view/ViewGroup.dart" as viewgroup_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.SpinnerAdapter
///
/// Extended Adapter that is the bridge between a
/// android.widget.Spinner and its data. A spinner adapter allows to
/// define two different views: one that shows the data in the spinner itself
/// and one that shows the data in the drop down list when the spinner is
/// pressed.
class SpinnerAdapter extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/SpinnerAdapter");
  SpinnerAdapter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getDropDownView = jniAccessors.getMethodIDOf(
      _classRef,
      "getDropDownView",
      "(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;");

  /// from: public abstract android.view.View getDropDownView(int position, android.view.View convertView, android.view.ViewGroup parent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a android.view.View that displays in the drop down popup
  /// the data at the specified position in the data set.
  ///@param position index of the item whose view we want.
  ///@param convertView the old view to reuse, if possible. Note: You should
  ///        check that this view is non-null and of an appropriate type before
  ///        using. If it is not possible to convert this view to display the
  ///        correct data, this method can create a new view.
  ///@param parent the parent that this view will eventually be attached to
  ///@return a android.view.View corresponding to the data at the
  ///         specified position.
  view_.View getDropDownView(
          int position, view_.View convertView, viewgroup_.ViewGroup parent) =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDropDownView,
          jni.JniType.objectType,
          [position, convertView.reference, parent.reference]).object);
}
