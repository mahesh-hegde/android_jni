// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ViewSwitcher.dart" as viewswitcher_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../view/View.dart" as view_;

import "../view/ViewGroup.dart" as viewgroup_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.TextSwitcher
///
/// Specialized android.widget.ViewSwitcher that contains
/// only children of type android.widget.TextView.
///
/// A TextSwitcher is useful to animate a label on screen. Whenever
/// \#setText(CharSequence) is called, TextSwitcher animates the current text
/// out and animates the new text in.
class TextSwitcher extends viewswitcher_.ViewSwitcher {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/TextSwitcher");
  TextSwitcher.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new empty TextSwitcher.
  ///@param context the application's environment
  TextSwitcher(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new empty TextSwitcher for the given context and with the
  /// specified set attributes.
  ///@param context the application environment
  ///@param attrs a collection of attributes
  TextSwitcher.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_addView5 = jniAccessors.getMethodIDOf(_classRef, "addView",
      "(Landroid/view/View;ILandroid/view/ViewGroup\$LayoutParams;)V");

  /// from: public void addView(android.view.View child, int index, android.view.ViewGroup.LayoutParams params)
  ///
  /// {@inheritDoc}
  ///@throws IllegalArgumentException if child is not an instance of
  ///         android.widget.TextView
  void addView5(view_.View child, int index,
          viewgroup_.ViewGroup_LayoutParams params) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addView5,
          jni.JniType.voidType,
          [child.reference, index, params.reference]).check();

  static final _id_setText = jniAccessors.getMethodIDOf(
      _classRef, "setText", "(Ljava/lang/CharSequence;)V");

  /// from: public void setText(java.lang.CharSequence text)
  ///
  /// Sets the text of the next view and switches to the next view. This can
  /// be used to animate the old text out and animate the next text in.
  ///@param text the new text to display
  void setText(jni.JniObject text) => jniAccessors.callMethodWithArgs(
      reference, _id_setText, jni.JniType.voidType, [text.reference]).check();

  static final _id_setCurrentText = jniAccessors.getMethodIDOf(
      _classRef, "setCurrentText", "(Ljava/lang/CharSequence;)V");

  /// from: public void setCurrentText(java.lang.CharSequence text)
  ///
  /// Sets the text of the text view that is currently showing.  This does
  /// not perform the animations.
  ///@param text the new text to display
  void setCurrentText(jni.JniObject text) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCurrentText,
      jni.JniType.voidType,
      [text.reference]).check();

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);
}
