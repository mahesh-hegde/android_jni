// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ViewAnimator.dart" as viewanimator_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.ViewFlipper
///
/// Simple ViewAnimator that will animate between two or more views
/// that have been added to it.  Only one child is shown at a time.  If
/// requested, can automatically flip between each child at a regular interval.
///@attr ref android.R.styleable\#ViewFlipper_flipInterval
///@attr ref android.R.styleable\#ViewFlipper_autoStart
class ViewFlipper extends viewanimator_.ViewAnimator {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/ViewFlipper");
  ViewFlipper.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ViewFlipper(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ViewFlipper.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_onAttachedToWindow1 =
      jniAccessors.getMethodIDOf(_classRef, "onAttachedToWindow", "()V");

  /// from: protected void onAttachedToWindow()
  void onAttachedToWindow1() => jniAccessors.callMethodWithArgs(
      reference, _id_onAttachedToWindow1, jni.JniType.voidType, []).check();

  static final _id_onDetachedFromWindow1 =
      jniAccessors.getMethodIDOf(_classRef, "onDetachedFromWindow", "()V");

  /// from: protected void onDetachedFromWindow()
  void onDetachedFromWindow1() => jniAccessors.callMethodWithArgs(
      reference, _id_onDetachedFromWindow1, jni.JniType.voidType, []).check();

  static final _id_onWindowVisibilityChanged1 = jniAccessors.getMethodIDOf(
      _classRef, "onWindowVisibilityChanged", "(I)V");

  /// from: protected void onWindowVisibilityChanged(int visibility)
  void onWindowVisibilityChanged1(int visibility) =>
      jniAccessors.callMethodWithArgs(reference, _id_onWindowVisibilityChanged1,
          jni.JniType.voidType, [visibility]).check();

  static final _id_setFlipInterval =
      jniAccessors.getMethodIDOf(_classRef, "setFlipInterval", "(I)V");

  /// from: public void setFlipInterval(int milliseconds)
  ///
  /// How long to wait before flipping to the next view
  ///@param milliseconds time in milliseconds
  void setFlipInterval(int milliseconds) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setFlipInterval,
      jni.JniType.voidType,
      [milliseconds]).check();

  static final _id_startFlipping =
      jniAccessors.getMethodIDOf(_classRef, "startFlipping", "()V");

  /// from: public void startFlipping()
  ///
  /// Start a timer to cycle through child views
  void startFlipping() => jniAccessors.callMethodWithArgs(
      reference, _id_startFlipping, jni.JniType.voidType, []).check();

  static final _id_stopFlipping =
      jniAccessors.getMethodIDOf(_classRef, "stopFlipping", "()V");

  /// from: public void stopFlipping()
  ///
  /// No more flips
  void stopFlipping() => jniAccessors.callMethodWithArgs(
      reference, _id_stopFlipping, jni.JniType.voidType, []).check();

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);

  static final _id_isFlipping =
      jniAccessors.getMethodIDOf(_classRef, "isFlipping", "()Z");

  /// from: public boolean isFlipping()
  ///
  /// Returns true if the child views are flipping.
  bool isFlipping() => jniAccessors.callMethodWithArgs(
      reference, _id_isFlipping, jni.JniType.booleanType, []).boolean;

  static final _id_setAutoStart =
      jniAccessors.getMethodIDOf(_classRef, "setAutoStart", "(Z)V");

  /// from: public void setAutoStart(boolean autoStart)
  ///
  /// Set if this view automatically calls \#startFlipping() when it
  /// becomes attached to a window.
  void setAutoStart(bool autoStart) => jniAccessors.callMethodWithArgs(
      reference, _id_setAutoStart, jni.JniType.voidType, [autoStart]).check();

  static final _id_isAutoStart =
      jniAccessors.getMethodIDOf(_classRef, "isAutoStart", "()Z");

  /// from: public boolean isAutoStart()
  ///
  /// Returns true if this view automatically calls \#startFlipping()
  /// when it becomes attached to a window.
  bool isAutoStart() => jniAccessors.callMethodWithArgs(
      reference, _id_isAutoStart, jni.JniType.booleanType, []).boolean;
}
