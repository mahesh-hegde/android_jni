// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../database/Cursor.dart" as cursor_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.FilterQueryProvider
///
/// This class can be used by external clients of CursorAdapter and
/// CursorTreeAdapter to define how the content of the adapter should be
/// filtered.
///@see \#runQuery(CharSequence)
class FilterQueryProvider extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/FilterQueryProvider");
  FilterQueryProvider.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_runQuery = jniAccessors.getMethodIDOf(_classRef, "runQuery",
      "(Ljava/lang/CharSequence;)Landroid/database/Cursor;");

  /// from: public abstract android.database.Cursor runQuery(java.lang.CharSequence constraint)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Runs a query with the specified constraint. This query is requested
  /// by the filter attached to this adapter.
  ///
  /// Contract: when constraint is null or empty, the original results,
  /// prior to any filtering, must be returned.
  ///@param constraint the constraint with which the query must
  ///        be filtered
  ///@return a Cursor representing the results of the new query
  cursor_.Cursor runQuery(jni.JniObject constraint) =>
      cursor_.Cursor.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_runQuery, jni.JniType.objectType, [constraint.reference]).object);
}
