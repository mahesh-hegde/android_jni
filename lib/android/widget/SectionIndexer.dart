// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.SectionIndexer
///
/// Interface that may implemented on Adapters to enable fast scrolling
/// between sections of an AbsListView.
///
/// A section is a group of list items that have something in common. For
/// example, they may begin with the same letter or they may be songs from the
/// same artist.
///
/// ExpandableListAdapters that consider groups and sections as
/// synonymous should account for collapsed groups and return an appropriate
/// section/position.
///@see AbsListView\#setFastScrollEnabled(boolean)
class SectionIndexer extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/SectionIndexer");
  SectionIndexer.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getSections = jniAccessors.getMethodIDOf(
      _classRef, "getSections", "()[Ljava/lang/Object;");

  /// from: public abstract java.lang.Object[] getSections()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an array of objects representing sections of the list. The
  /// returned array and its contents should be non-null.
  ///
  /// The list view will call toString() on the objects to get the preview text
  /// to display while scrolling. For example, an adapter may return an array
  /// of Strings representing letters of the alphabet. Or, it may return an
  /// array of objects whose toString() methods return their section titles.
  ///@return the array of section objects
  jni.JniObject getSections() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSections, jni.JniType.objectType, []).object);

  static final _id_getPositionForSection =
      jniAccessors.getMethodIDOf(_classRef, "getPositionForSection", "(I)I");

  /// from: public abstract int getPositionForSection(int sectionIndex)
  ///
  /// Given the index of a section within the array of section objects, returns
  /// the starting position of that section within the adapter.
  ///
  /// If the section's starting position is outside of the adapter bounds, the
  /// position must be clipped to fall within the size of the adapter.
  ///@param sectionIndex the index of the section within the array of section
  ///            objects
  ///@return the starting position of that section within the adapter,
  ///         constrained to fall within the adapter bounds
  int getPositionForSection(int sectionIndex) =>
      jniAccessors.callMethodWithArgs(reference, _id_getPositionForSection,
          jni.JniType.intType, [sectionIndex]).integer;

  static final _id_getSectionForPosition =
      jniAccessors.getMethodIDOf(_classRef, "getSectionForPosition", "(I)I");

  /// from: public abstract int getSectionForPosition(int position)
  ///
  /// Given a position within the adapter, returns the index of the
  /// corresponding section within the array of section objects.
  ///
  /// If the section index is outside of the section array bounds, the index
  /// must be clipped to fall within the size of the section array.
  ///
  /// For example, consider an indexer where the section at array index 0
  /// starts at adapter position 100. Calling this method with position 10,
  /// which is before the first section, must return index 0.
  ///@param position the position within the adapter for which to return the
  ///            corresponding section index
  ///@return the index of the corresponding section within the array of
  ///         section objects, constrained to fall within the array bounds
  int getSectionForPosition(int position) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getSectionForPosition,
      jni.JniType.intType,
      [position]).integer;
}
