// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AbsListView.dart" as abslistview_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "ListAdapter.dart" as listadapter_;

import "../content/Intent.dart" as intent_;

import "../view/View.dart" as view_;

import "../view/ViewGroup.dart" as viewgroup_;

import "../view/KeyEvent.dart" as keyevent_;

import "../graphics/Rect.dart" as rect_;

import "../view/accessibility/AccessibilityNodeInfo.dart"
    as accessibilitynodeinfo_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.GridView
///
/// A view that shows items in two-dimensional scrolling grid. The items in the
/// grid come from the ListAdapter associated with this view.
///
/// See the <a href="{@docRoot}guide/topics/ui/layout/gridview.html">Grid
/// View</a> guide.
///
///@attr ref android.R.styleable\#GridView_horizontalSpacing
///@attr ref android.R.styleable\#GridView_verticalSpacing
///@attr ref android.R.styleable\#GridView_stretchMode
///@attr ref android.R.styleable\#GridView_columnWidth
///@attr ref android.R.styleable\#GridView_numColumns
///@attr ref android.R.styleable\#GridView_gravity
class GridView extends abslistview_.AbsListView {
  static final _classRef = jniAccessors.getClassOf("android/widget/GridView");
  GridView.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int AUTO_FIT
  ///
  /// Creates as many columns as can fit on screen.
  ///@see \#setNumColumns(int)
  static const AUTO_FIT = -1;

  /// from: static public final int NO_STRETCH
  ///
  /// Disables stretching.
  ///@see \#setStretchMode(int)
  static const NO_STRETCH = 0;

  /// from: static public final int STRETCH_COLUMN_WIDTH
  ///
  /// Stretches columns.
  ///@see \#setStretchMode(int)
  static const STRETCH_COLUMN_WIDTH = 2;

  /// from: static public final int STRETCH_SPACING
  ///
  /// Stretches the spacing between columns.
  ///@see \#setStretchMode(int)
  static const STRETCH_SPACING = 1;

  /// from: static public final int STRETCH_SPACING_UNIFORM
  ///
  /// Stretches the spacing between columns. The spacing is uniform.
  ///@see \#setStretchMode(int)
  static const STRETCH_SPACING_UNIFORM = 3;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GridView(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GridView.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GridView.ctor2(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GridView.ctor3(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_getAdapter1 = jniAccessors.getMethodIDOf(
      _classRef, "getAdapter", "()Landroid/widget/ListAdapter;");

  /// from: public android.widget.ListAdapter getAdapter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  listadapter_.ListAdapter getAdapter1() =>
      listadapter_.ListAdapter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAdapter1, jni.JniType.objectType, []).object);

  static final _id_setRemoteViewsAdapter = jniAccessors.getMethodIDOf(
      _classRef, "setRemoteViewsAdapter", "(Landroid/content/Intent;)V");

  /// from: public void setRemoteViewsAdapter(android.content.Intent intent)
  ///
  /// Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService
  /// through the specified intent.
  ///@param intent the intent used to identify the RemoteViewsService for the adapter to connect to.
  void setRemoteViewsAdapter(intent_.Intent intent) =>
      jniAccessors.callMethodWithArgs(reference, _id_setRemoteViewsAdapter,
          jni.JniType.voidType, [intent.reference]).check();

  static final _id_setAdapter1 = jniAccessors.getMethodIDOf(
      _classRef, "setAdapter", "(Landroid/widget/ListAdapter;)V");

  /// from: public void setAdapter(android.widget.ListAdapter adapter)
  ///
  /// Sets the data behind this GridView.
  ///@param adapter the adapter providing the grid's data
  void setAdapter1(listadapter_.ListAdapter adapter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAdapter1,
          jni.JniType.voidType, [adapter.reference]).check();

  static final _id_smoothScrollToPosition =
      jniAccessors.getMethodIDOf(_classRef, "smoothScrollToPosition", "(I)V");

  /// from: public void smoothScrollToPosition(int position)
  ///
  /// Smoothly scroll to the specified adapter position. The view will
  /// scroll such that the indicated position is displayed.
  ///@param position Scroll to this adapter position.
  void smoothScrollToPosition(int position) => jniAccessors.callMethodWithArgs(
      reference,
      _id_smoothScrollToPosition,
      jni.JniType.voidType,
      [position]).check();

  static final _id_smoothScrollByOffset =
      jniAccessors.getMethodIDOf(_classRef, "smoothScrollByOffset", "(I)V");

  /// from: public void smoothScrollByOffset(int offset)
  ///
  /// Smoothly scroll to the specified adapter position offset. The view will
  /// scroll such that the indicated position is displayed.
  ///@param offset The amount to offset from the adapter position to scroll to.
  void smoothScrollByOffset(int offset) => jniAccessors.callMethodWithArgs(
      reference,
      _id_smoothScrollByOffset,
      jni.JniType.voidType,
      [offset]).check();

  static final _id_onMeasure1 =
      jniAccessors.getMethodIDOf(_classRef, "onMeasure", "(II)V");

  /// from: protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
  void onMeasure1(int widthMeasureSpec, int heightMeasureSpec) =>
      jniAccessors.callMethodWithArgs(reference, _id_onMeasure1,
          jni.JniType.voidType, [widthMeasureSpec, heightMeasureSpec]).check();

  static final _id_attachLayoutAnimationParameters1 =
      jniAccessors.getMethodIDOf(_classRef, "attachLayoutAnimationParameters",
          "(Landroid/view/View;Landroid/view/ViewGroup\$LayoutParams;II)V");

  /// from: protected void attachLayoutAnimationParameters(android.view.View child, android.view.ViewGroup.LayoutParams params, int index, int count)
  void attachLayoutAnimationParameters1(view_.View child,
          viewgroup_.ViewGroup_LayoutParams params, int index, int count) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_attachLayoutAnimationParameters1,
          jni.JniType.voidType,
          [child.reference, params.reference, index, count]).check();

  static final _id_layoutChildren =
      jniAccessors.getMethodIDOf(_classRef, "layoutChildren", "()V");

  /// from: protected void layoutChildren()
  void layoutChildren() => jniAccessors.callMethodWithArgs(
      reference, _id_layoutChildren, jni.JniType.voidType, []).check();

  static final _id_setSelection1 =
      jniAccessors.getMethodIDOf(_classRef, "setSelection", "(I)V");

  /// from: public void setSelection(int position)
  ///
  /// Sets the currently selected item
  ///@param position Index (starting at 0) of the data item to be selected.
  ///
  /// If in touch mode, the item will not be selected but it will still be positioned
  /// appropriately.
  void setSelection1(int position) => jniAccessors.callMethodWithArgs(
      reference, _id_setSelection1, jni.JniType.voidType, [position]).check();

  static final _id_onKeyDown1 = jniAccessors.getMethodIDOf(
      _classRef, "onKeyDown", "(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyDown(int keyCode, android.view.KeyEvent event)
  bool onKeyDown1(int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyDown1,
          jni.JniType.booleanType, [keyCode, event.reference]).boolean;

  static final _id_onKeyMultiple1 = jniAccessors.getMethodIDOf(
      _classRef, "onKeyMultiple", "(IILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyMultiple(int keyCode, int repeatCount, android.view.KeyEvent event)
  bool onKeyMultiple1(int keyCode, int repeatCount, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onKeyMultiple1,
          jni.JniType.booleanType,
          [keyCode, repeatCount, event.reference]).boolean;

  static final _id_onKeyUp1 = jniAccessors.getMethodIDOf(
      _classRef, "onKeyUp", "(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyUp(int keyCode, android.view.KeyEvent event)
  bool onKeyUp1(int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyUp1,
          jni.JniType.booleanType, [keyCode, event.reference]).boolean;

  static final _id_onFocusChanged1 = jniAccessors.getMethodIDOf(
      _classRef, "onFocusChanged", "(ZILandroid/graphics/Rect;)V");

  /// from: protected void onFocusChanged(boolean gainFocus, int direction, android.graphics.Rect previouslyFocusedRect)
  void onFocusChanged1(
          bool gainFocus, int direction, rect_.Rect previouslyFocusedRect) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onFocusChanged1,
          jni.JniType.voidType,
          [gainFocus, direction, previouslyFocusedRect.reference]).check();

  static final _id_setGravity =
      jniAccessors.getMethodIDOf(_classRef, "setGravity", "(I)V");

  /// from: public void setGravity(int gravity)
  ///
  /// Set the gravity for this grid. Gravity describes how the child views
  /// are horizontally aligned. Defaults to Gravity.LEFT
  ///@param gravity the gravity to apply to this grid's children
  ///@attr ref android.R.styleable\#GridView_gravity
  void setGravity(int gravity) => jniAccessors.callMethodWithArgs(
      reference, _id_setGravity, jni.JniType.voidType, [gravity]).check();

  static final _id_getGravity =
      jniAccessors.getMethodIDOf(_classRef, "getGravity", "()I");

  /// from: public int getGravity()
  ///
  /// Describes how the child views are horizontally aligned. Defaults to Gravity.LEFT
  ///@return the gravity that will be applied to this grid's children
  ///@attr ref android.R.styleable\#GridView_gravity
  int getGravity() => jniAccessors.callMethodWithArgs(
      reference, _id_getGravity, jni.JniType.intType, []).integer;

  static final _id_setHorizontalSpacing =
      jniAccessors.getMethodIDOf(_classRef, "setHorizontalSpacing", "(I)V");

  /// from: public void setHorizontalSpacing(int horizontalSpacing)
  ///
  /// Set the amount of horizontal (x) spacing to place between each item
  /// in the grid.
  ///@param horizontalSpacing The amount of horizontal space between items,
  /// in pixels.
  ///@attr ref android.R.styleable\#GridView_horizontalSpacing
  void setHorizontalSpacing(int horizontalSpacing) =>
      jniAccessors.callMethodWithArgs(reference, _id_setHorizontalSpacing,
          jni.JniType.voidType, [horizontalSpacing]).check();

  static final _id_getHorizontalSpacing =
      jniAccessors.getMethodIDOf(_classRef, "getHorizontalSpacing", "()I");

  /// from: public int getHorizontalSpacing()
  ///
  /// Returns the amount of horizontal spacing currently used between each item in the grid.
  ///
  /// This is only accurate for the current layout. If \#setHorizontalSpacing(int)
  /// has been called but layout is not yet complete, this method may return a stale value.
  /// To get the horizontal spacing that was explicitly requested use
  /// \#getRequestedHorizontalSpacing().
  ///
  ///@return Current horizontal spacing between each item in pixels
  ///@see \#setHorizontalSpacing(int)
  ///@see \#getRequestedHorizontalSpacing()
  ///@attr ref android.R.styleable\#GridView_horizontalSpacing
  int getHorizontalSpacing() => jniAccessors.callMethodWithArgs(
      reference, _id_getHorizontalSpacing, jni.JniType.intType, []).integer;

  static final _id_getRequestedHorizontalSpacing = jniAccessors.getMethodIDOf(
      _classRef, "getRequestedHorizontalSpacing", "()I");

  /// from: public int getRequestedHorizontalSpacing()
  ///
  /// Returns the requested amount of horizontal spacing between each item in the grid.
  ///
  /// The value returned may have been supplied during inflation as part of a style,
  /// the default GridView style, or by a call to \#setHorizontalSpacing(int).
  /// If layout is not yet complete or if GridView calculated a different horizontal spacing
  /// from what was requested, this may return a different value from
  /// \#getHorizontalSpacing().
  ///
  ///@return The currently requested horizontal spacing between items, in pixels
  ///@see \#setHorizontalSpacing(int)
  ///@see \#getHorizontalSpacing()
  ///@attr ref android.R.styleable\#GridView_horizontalSpacing
  int getRequestedHorizontalSpacing() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getRequestedHorizontalSpacing,
      jni.JniType.intType, []).integer;

  static final _id_setVerticalSpacing =
      jniAccessors.getMethodIDOf(_classRef, "setVerticalSpacing", "(I)V");

  /// from: public void setVerticalSpacing(int verticalSpacing)
  ///
  /// Set the amount of vertical (y) spacing to place between each item
  /// in the grid.
  ///@param verticalSpacing The amount of vertical space between items,
  /// in pixels.
  ///@see \#getVerticalSpacing()
  ///@attr ref android.R.styleable\#GridView_verticalSpacing
  void setVerticalSpacing(int verticalSpacing) =>
      jniAccessors.callMethodWithArgs(reference, _id_setVerticalSpacing,
          jni.JniType.voidType, [verticalSpacing]).check();

  static final _id_getVerticalSpacing =
      jniAccessors.getMethodIDOf(_classRef, "getVerticalSpacing", "()I");

  /// from: public int getVerticalSpacing()
  ///
  /// Returns the amount of vertical spacing between each item in the grid.
  ///@return The vertical spacing between items in pixels
  ///@see \#setVerticalSpacing(int)
  ///@attr ref android.R.styleable\#GridView_verticalSpacing
  int getVerticalSpacing() => jniAccessors.callMethodWithArgs(
      reference, _id_getVerticalSpacing, jni.JniType.intType, []).integer;

  static final _id_setStretchMode =
      jniAccessors.getMethodIDOf(_classRef, "setStretchMode", "(I)V");

  /// from: public void setStretchMode(int stretchMode)
  ///
  /// Control how items are stretched to fill their space.
  ///@param stretchMode Either \#NO_STRETCH,
  /// \#STRETCH_SPACING, \#STRETCH_SPACING_UNIFORM, or \#STRETCH_COLUMN_WIDTH.
  ///
  /// Value is android.widget.GridView\#NO_STRETCH, android.widget.GridView\#STRETCH_SPACING, android.widget.GridView\#STRETCH_COLUMN_WIDTH, or android.widget.GridView\#STRETCH_SPACING_UNIFORM
  ///@attr ref android.R.styleable\#GridView_stretchMode
  void setStretchMode(int stretchMode) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setStretchMode,
      jni.JniType.voidType,
      [stretchMode]).check();

  static final _id_getStretchMode =
      jniAccessors.getMethodIDOf(_classRef, "getStretchMode", "()I");

  /// from: public int getStretchMode()
  ///
  /// @return Value is android.widget.GridView\#NO_STRETCH, android.widget.GridView\#STRETCH_SPACING, android.widget.GridView\#STRETCH_COLUMN_WIDTH, or android.widget.GridView\#STRETCH_SPACING_UNIFORM
  int getStretchMode() => jniAccessors.callMethodWithArgs(
      reference, _id_getStretchMode, jni.JniType.intType, []).integer;

  static final _id_setColumnWidth =
      jniAccessors.getMethodIDOf(_classRef, "setColumnWidth", "(I)V");

  /// from: public void setColumnWidth(int columnWidth)
  ///
  /// Set the width of columns in the grid.
  ///@param columnWidth The column width, in pixels.
  ///@attr ref android.R.styleable\#GridView_columnWidth
  void setColumnWidth(int columnWidth) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setColumnWidth,
      jni.JniType.voidType,
      [columnWidth]).check();

  static final _id_getColumnWidth =
      jniAccessors.getMethodIDOf(_classRef, "getColumnWidth", "()I");

  /// from: public int getColumnWidth()
  ///
  /// Return the width of a column in the grid.
  ///
  /// This may not be valid yet if a layout is pending.
  ///
  ///@return The column width in pixels
  ///@see \#setColumnWidth(int)
  ///@see \#getRequestedColumnWidth()
  ///@attr ref android.R.styleable\#GridView_columnWidth
  int getColumnWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getColumnWidth, jni.JniType.intType, []).integer;

  static final _id_getRequestedColumnWidth =
      jniAccessors.getMethodIDOf(_classRef, "getRequestedColumnWidth", "()I");

  /// from: public int getRequestedColumnWidth()
  ///
  /// Return the requested width of a column in the grid.
  ///
  /// This may not be the actual column width used. Use \#getColumnWidth()
  /// to retrieve the current real width of a column.
  ///
  ///@return The requested column width in pixels
  ///@see \#setColumnWidth(int)
  ///@see \#getColumnWidth()
  ///@attr ref android.R.styleable\#GridView_columnWidth
  int getRequestedColumnWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getRequestedColumnWidth, jni.JniType.intType, []).integer;

  static final _id_setNumColumns =
      jniAccessors.getMethodIDOf(_classRef, "setNumColumns", "(I)V");

  /// from: public void setNumColumns(int numColumns)
  ///
  /// Set the number of columns in the grid
  ///@param numColumns The desired number of columns.
  ///@attr ref android.R.styleable\#GridView_numColumns
  void setNumColumns(int numColumns) => jniAccessors.callMethodWithArgs(
      reference, _id_setNumColumns, jni.JniType.voidType, [numColumns]).check();

  static final _id_getNumColumns =
      jniAccessors.getMethodIDOf(_classRef, "getNumColumns", "()I");

  /// from: public int getNumColumns()
  ///
  /// Get the number of columns in the grid.
  /// Returns \#AUTO_FIT if the Grid has never been laid out.
  ///@attr ref android.R.styleable\#GridView_numColumns
  ///@see \#setNumColumns(int)
  int getNumColumns() => jniAccessors.callMethodWithArgs(
      reference, _id_getNumColumns, jni.JniType.intType, []).integer;

  static final _id_computeVerticalScrollExtent1 = jniAccessors.getMethodIDOf(
      _classRef, "computeVerticalScrollExtent", "()I");

  /// from: protected int computeVerticalScrollExtent()
  int computeVerticalScrollExtent1() => jniAccessors.callMethodWithArgs(
      reference,
      _id_computeVerticalScrollExtent1,
      jni.JniType.intType, []).integer;

  static final _id_computeVerticalScrollOffset1 = jniAccessors.getMethodIDOf(
      _classRef, "computeVerticalScrollOffset", "()I");

  /// from: protected int computeVerticalScrollOffset()
  int computeVerticalScrollOffset1() => jniAccessors.callMethodWithArgs(
      reference,
      _id_computeVerticalScrollOffset1,
      jni.JniType.intType, []).integer;

  static final _id_computeVerticalScrollRange1 = jniAccessors.getMethodIDOf(
      _classRef, "computeVerticalScrollRange", "()I");

  /// from: protected int computeVerticalScrollRange()
  int computeVerticalScrollRange1() => jniAccessors.callMethodWithArgs(
      reference,
      _id_computeVerticalScrollRange1,
      jni.JniType.intType, []).integer;

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);

  static final _id_onInitializeAccessibilityNodeInfoForItem =
      jniAccessors.getMethodIDOf(
          _classRef,
          "onInitializeAccessibilityNodeInfoForItem",
          "(Landroid/view/View;ILandroid/view/accessibility/AccessibilityNodeInfo;)V");

  /// from: public void onInitializeAccessibilityNodeInfoForItem(android.view.View view, int position, android.view.accessibility.AccessibilityNodeInfo info)
  void onInitializeAccessibilityNodeInfoForItem(view_.View view, int position,
          accessibilitynodeinfo_.AccessibilityNodeInfo info) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onInitializeAccessibilityNodeInfoForItem,
          jni.JniType.voidType,
          [view.reference, position, info.reference]).check();
}
