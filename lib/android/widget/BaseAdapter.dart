// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../database/DataSetObserver.dart" as datasetobserver_;

import "../view/View.dart" as view_;

import "../view/ViewGroup.dart" as viewgroup_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.BaseAdapter
///
/// Common base class of common implementation for an Adapter that can be
/// used in both ListView (by implementing the specialized
/// ListAdapter interface) and Spinner (by implementing the
/// specialized SpinnerAdapter interface).
class BaseAdapter extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/BaseAdapter");
  BaseAdapter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BaseAdapter()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_hasStableIds =
      jniAccessors.getMethodIDOf(_classRef, "hasStableIds", "()Z");

  /// from: public boolean hasStableIds()
  bool hasStableIds() => jniAccessors.callMethodWithArgs(
      reference, _id_hasStableIds, jni.JniType.booleanType, []).boolean;

  static final _id_registerDataSetObserver = jniAccessors.getMethodIDOf(
      _classRef,
      "registerDataSetObserver",
      "(Landroid/database/DataSetObserver;)V");

  /// from: public void registerDataSetObserver(android.database.DataSetObserver observer)
  void registerDataSetObserver(datasetobserver_.DataSetObserver observer) =>
      jniAccessors.callMethodWithArgs(reference, _id_registerDataSetObserver,
          jni.JniType.voidType, [observer.reference]).check();

  static final _id_unregisterDataSetObserver = jniAccessors.getMethodIDOf(
      _classRef,
      "unregisterDataSetObserver",
      "(Landroid/database/DataSetObserver;)V");

  /// from: public void unregisterDataSetObserver(android.database.DataSetObserver observer)
  void unregisterDataSetObserver(datasetobserver_.DataSetObserver observer) =>
      jniAccessors.callMethodWithArgs(reference, _id_unregisterDataSetObserver,
          jni.JniType.voidType, [observer.reference]).check();

  static final _id_notifyDataSetChanged =
      jniAccessors.getMethodIDOf(_classRef, "notifyDataSetChanged", "()V");

  /// from: public void notifyDataSetChanged()
  ///
  /// Notifies the attached observers that the underlying data has been changed
  /// and any View reflecting the data set should refresh itself.
  void notifyDataSetChanged() => jniAccessors.callMethodWithArgs(
      reference, _id_notifyDataSetChanged, jni.JniType.voidType, []).check();

  static final _id_notifyDataSetInvalidated =
      jniAccessors.getMethodIDOf(_classRef, "notifyDataSetInvalidated", "()V");

  /// from: public void notifyDataSetInvalidated()
  ///
  /// Notifies the attached observers that the underlying data is no longer valid
  /// or available. Once invoked this adapter is no longer valid and should
  /// not report further data set changes.
  void notifyDataSetInvalidated() => jniAccessors.callMethodWithArgs(reference,
      _id_notifyDataSetInvalidated, jni.JniType.voidType, []).check();

  static final _id_areAllItemsEnabled =
      jniAccessors.getMethodIDOf(_classRef, "areAllItemsEnabled", "()Z");

  /// from: public boolean areAllItemsEnabled()
  bool areAllItemsEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_areAllItemsEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_isEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isEnabled", "(I)Z");

  /// from: public boolean isEnabled(int position)
  bool isEnabled(int position) => jniAccessors.callMethodWithArgs(
      reference, _id_isEnabled, jni.JniType.booleanType, [position]).boolean;

  static final _id_getDropDownView = jniAccessors.getMethodIDOf(
      _classRef,
      "getDropDownView",
      "(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;");

  /// from: public android.view.View getDropDownView(int position, android.view.View convertView, android.view.ViewGroup parent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  view_.View getDropDownView(
          int position, view_.View convertView, viewgroup_.ViewGroup parent) =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDropDownView,
          jni.JniType.objectType,
          [position, convertView.reference, parent.reference]).object);

  static final _id_getItemViewType =
      jniAccessors.getMethodIDOf(_classRef, "getItemViewType", "(I)I");

  /// from: public int getItemViewType(int position)
  int getItemViewType(int position) => jniAccessors.callMethodWithArgs(
      reference, _id_getItemViewType, jni.JniType.intType, [position]).integer;

  static final _id_getViewTypeCount =
      jniAccessors.getMethodIDOf(_classRef, "getViewTypeCount", "()I");

  /// from: public int getViewTypeCount()
  int getViewTypeCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getViewTypeCount, jni.JniType.intType, []).integer;

  static final _id_isEmpty =
      jniAccessors.getMethodIDOf(_classRef, "isEmpty", "()Z");

  /// from: public boolean isEmpty()
  bool isEmpty() => jniAccessors.callMethodWithArgs(
      reference, _id_isEmpty, jni.JniType.booleanType, []).boolean;

  static final _id_getAutofillOptions = jniAccessors.getMethodIDOf(
      _classRef, "getAutofillOptions", "()[Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence[] getAutofillOptions()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAutofillOptions() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAutofillOptions, jni.JniType.objectType, []).object);

  static final _id_setAutofillOptions = jniAccessors.getMethodIDOf(
      _classRef, "setAutofillOptions", "([Ljava/lang/CharSequence;)V");

  /// from: public void setAutofillOptions(java.lang.CharSequence[] options)
  ///
  /// Sets the value returned by \#getAutofillOptions()
  ///@param options This value may be {@code null}.
  void setAutofillOptions(jni.JniObject options) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAutofillOptions,
          jni.JniType.voidType, [options.reference]).check();
}
