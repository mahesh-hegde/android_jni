// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ResourceCursorTreeAdapter.dart" as resourcecursortreeadapter_;

import "../content/Context.dart" as context_;

import "../database/Cursor.dart" as cursor_;

import "../view/View.dart" as view_;

import "ImageView.dart" as imageview_;

import "TextView.dart" as textview_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.SimpleCursorTreeAdapter
///
/// An easy adapter to map columns from a cursor to TextViews or ImageViews
/// defined in an XML file. You can specify which columns you want, which views
/// you want to display the columns, and the XML file that defines the appearance
/// of these views. Separate XML files for child and groups are possible.
///
/// Binding occurs in two phases. First, if a
/// android.widget.SimpleCursorTreeAdapter.ViewBinder is available,
/// ViewBinder\#setViewValue(android.view.View, android.database.Cursor, int)
/// is invoked. If the returned value is true, binding has occurred. If the
/// returned value is false and the view to bind is a TextView,
/// \#setViewText(TextView, String) is invoked. If the returned value
/// is false and the view to bind is an ImageView,
/// \#setViewImage(ImageView, String) is invoked. If no appropriate
/// binding can be found, an IllegalStateException is thrown.
class SimpleCursorTreeAdapter
    extends resourcecursortreeadapter_.ResourceCursorTreeAdapter {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/SimpleCursorTreeAdapter");
  SimpleCursorTreeAdapter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor6 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/database/Cursor;II[Ljava/lang/String;[III[Ljava/lang/String;[I)V");

  /// from: public void <init>(android.content.Context context, android.database.Cursor cursor, int collapsedGroupLayout, int expandedGroupLayout, java.lang.String[] groupFrom, int[] groupTo, int childLayout, int lastChildLayout, java.lang.String[] childFrom, int[] childTo)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param context The context where the ExpandableListView
  ///            associated with this SimpleCursorTreeAdapter is
  ///            running
  ///@param cursor The database cursor
  ///@param collapsedGroupLayout The resource identifier of a layout file that
  ///            defines the views for a collapsed group. The layout file
  ///            should include at least those named views defined in groupTo.
  ///@param expandedGroupLayout The resource identifier of a layout file that
  ///            defines the views for an expanded group. The layout file
  ///            should include at least those named views defined in groupTo.
  ///@param groupFrom A list of column names that will be used to display the
  ///            data for a group.
  ///@param groupTo The group views (from the group layouts) that should
  ///            display column in the "from" parameter. These should all be
  ///            TextViews or ImageViews. The first N views in this list are
  ///            given the values of the first N columns in the from parameter.
  ///@param childLayout The resource identifier of a layout file that defines
  ///            the views for a child (except the last). The layout file
  ///            should include at least those named views defined in childTo.
  ///@param lastChildLayout The resource identifier of a layout file that
  ///            defines the views for the last child within a group. The
  ///            layout file should include at least those named views defined
  ///            in childTo.
  ///@param childFrom A list of column names that will be used to display the
  ///            data for a child.
  ///@param childTo The child views (from the child layouts) that should
  ///            display column in the "from" parameter. These should all be
  ///            TextViews or ImageViews. The first N views in this list are
  ///            given the values of the first N columns in the from parameter.
  SimpleCursorTreeAdapter.ctor6(
      context_.Context context,
      cursor_.Cursor cursor,
      int collapsedGroupLayout,
      int expandedGroupLayout,
      jni.JniObject groupFrom,
      jni.JniObject groupTo,
      int childLayout,
      int lastChildLayout,
      jni.JniObject childFrom,
      jni.JniObject childTo)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor6, [
          context.reference,
          cursor.reference,
          collapsedGroupLayout,
          expandedGroupLayout,
          groupFrom.reference,
          groupTo.reference,
          childLayout,
          lastChildLayout,
          childFrom.reference,
          childTo.reference
        ]).object);

  static final _id_ctor7 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/database/Cursor;II[Ljava/lang/String;[II[Ljava/lang/String;[I)V");

  /// from: public void <init>(android.content.Context context, android.database.Cursor cursor, int collapsedGroupLayout, int expandedGroupLayout, java.lang.String[] groupFrom, int[] groupTo, int childLayout, java.lang.String[] childFrom, int[] childTo)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param context The context where the ExpandableListView
  ///            associated with this SimpleCursorTreeAdapter is
  ///            running
  ///@param cursor The database cursor
  ///@param collapsedGroupLayout The resource identifier of a layout file that
  ///            defines the views for a collapsed group. The layout file
  ///            should include at least those named views defined in groupTo.
  ///@param expandedGroupLayout The resource identifier of a layout file that
  ///            defines the views for an expanded group. The layout file
  ///            should include at least those named views defined in groupTo.
  ///@param groupFrom A list of column names that will be used to display the
  ///            data for a group.
  ///@param groupTo The group views (from the group layouts) that should
  ///            display column in the "from" parameter. These should all be
  ///            TextViews or ImageViews. The first N views in this list are
  ///            given the values of the first N columns in the from parameter.
  ///@param childLayout The resource identifier of a layout file that defines
  ///            the views for a child. The layout file
  ///            should include at least those named views defined in childTo.
  ///@param childFrom A list of column names that will be used to display the
  ///            data for a child.
  ///@param childTo The child views (from the child layouts) that should
  ///            display column in the "from" parameter. These should all be
  ///            TextViews or ImageViews. The first N views in this list are
  ///            given the values of the first N columns in the from parameter.
  SimpleCursorTreeAdapter.ctor7(
      context_.Context context,
      cursor_.Cursor cursor,
      int collapsedGroupLayout,
      int expandedGroupLayout,
      jni.JniObject groupFrom,
      jni.JniObject groupTo,
      int childLayout,
      jni.JniObject childFrom,
      jni.JniObject childTo)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor7, [
          context.reference,
          cursor.reference,
          collapsedGroupLayout,
          expandedGroupLayout,
          groupFrom.reference,
          groupTo.reference,
          childLayout,
          childFrom.reference,
          childTo.reference
        ]).object);

  static final _id_ctor8 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/database/Cursor;I[Ljava/lang/String;[II[Ljava/lang/String;[I)V");

  /// from: public void <init>(android.content.Context context, android.database.Cursor cursor, int groupLayout, java.lang.String[] groupFrom, int[] groupTo, int childLayout, java.lang.String[] childFrom, int[] childTo)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param context The context where the ExpandableListView
  ///            associated with this SimpleCursorTreeAdapter is
  ///            running
  ///@param cursor The database cursor
  ///@param groupLayout The resource identifier of a layout file that defines
  ///            the views for a group. The layout file should include at least
  ///            those named views defined in groupTo.
  ///@param groupFrom A list of column names that will be used to display the
  ///            data for a group.
  ///@param groupTo The group views (from the group layouts) that should
  ///            display column in the "from" parameter. These should all be
  ///            TextViews or ImageViews. The first N views in this list are
  ///            given the values of the first N columns in the from parameter.
  ///@param childLayout The resource identifier of a layout file that defines
  ///            the views for a child. The layout file should include at least
  ///            those named views defined in childTo.
  ///@param childFrom A list of column names that will be used to display the
  ///            data for a child.
  ///@param childTo The child views (from the child layouts) that should
  ///            display column in the "from" parameter. These should all be
  ///            TextViews or ImageViews. The first N views in this list are
  ///            given the values of the first N columns in the from parameter.
  SimpleCursorTreeAdapter.ctor8(
      context_.Context context,
      cursor_.Cursor cursor,
      int groupLayout,
      jni.JniObject groupFrom,
      jni.JniObject groupTo,
      int childLayout,
      jni.JniObject childFrom,
      jni.JniObject childTo)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor8, [
          context.reference,
          cursor.reference,
          groupLayout,
          groupFrom.reference,
          groupTo.reference,
          childLayout,
          childFrom.reference,
          childTo.reference
        ]).object);

  static final _id_getViewBinder = jniAccessors.getMethodIDOf(
      _classRef,
      "getViewBinder",
      "()Landroid/widget/SimpleCursorTreeAdapter\$ViewBinder;");

  /// from: public android.widget.SimpleCursorTreeAdapter.ViewBinder getViewBinder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the ViewBinder used to bind data to views.
  ///@return a ViewBinder or null if the binder does not exist
  ///@see \#setViewBinder(android.widget.SimpleCursorTreeAdapter.ViewBinder)
  SimpleCursorTreeAdapter_ViewBinder getViewBinder() =>
      SimpleCursorTreeAdapter_ViewBinder.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getViewBinder, jni.JniType.objectType, []).object);

  static final _id_setViewBinder = jniAccessors.getMethodIDOf(
      _classRef,
      "setViewBinder",
      "(Landroid/widget/SimpleCursorTreeAdapter\$ViewBinder;)V");

  /// from: public void setViewBinder(android.widget.SimpleCursorTreeAdapter.ViewBinder viewBinder)
  ///
  /// Sets the binder used to bind data to views.
  ///@param viewBinder the binder used to bind data to views, can be null to
  ///        remove the existing binder
  ///@see \#getViewBinder()
  void setViewBinder(SimpleCursorTreeAdapter_ViewBinder viewBinder) =>
      jniAccessors.callMethodWithArgs(reference, _id_setViewBinder,
          jni.JniType.voidType, [viewBinder.reference]).check();

  static final _id_bindChildView1 = jniAccessors.getMethodIDOf(
      _classRef,
      "bindChildView",
      "(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;Z)V");

  /// from: protected void bindChildView(android.view.View view, android.content.Context context, android.database.Cursor cursor, boolean isLastChild)
  void bindChildView1(view_.View view, context_.Context context,
          cursor_.Cursor cursor, bool isLastChild) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_bindChildView1, jni.JniType.voidType, [
        view.reference,
        context.reference,
        cursor.reference,
        isLastChild
      ]).check();

  static final _id_bindGroupView1 = jniAccessors.getMethodIDOf(
      _classRef,
      "bindGroupView",
      "(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;Z)V");

  /// from: protected void bindGroupView(android.view.View view, android.content.Context context, android.database.Cursor cursor, boolean isExpanded)
  void bindGroupView1(view_.View view, context_.Context context,
          cursor_.Cursor cursor, bool isExpanded) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_bindGroupView1, jni.JniType.voidType, [
        view.reference,
        context.reference,
        cursor.reference,
        isExpanded
      ]).check();

  static final _id_setViewImage = jniAccessors.getMethodIDOf(_classRef,
      "setViewImage", "(Landroid/widget/ImageView;Ljava/lang/String;)V");

  /// from: protected void setViewImage(android.widget.ImageView v, java.lang.String value)
  ///
  /// Called by bindView() to set the image for an ImageView. By default, the
  /// value will be treated as a Uri. Intended to be overridden by Adapters
  /// that need to filter strings retrieved from the database.
  ///@param v ImageView to receive an image
  ///@param value the value retrieved from the cursor
  void setViewImage(imageview_.ImageView v, jni.JniString value) =>
      jniAccessors.callMethodWithArgs(reference, _id_setViewImage,
          jni.JniType.voidType, [v.reference, value.reference]).check();

  static final _id_setViewText = jniAccessors.getMethodIDOf(_classRef,
      "setViewText", "(Landroid/widget/TextView;Ljava/lang/String;)V");

  /// from: public void setViewText(android.widget.TextView v, java.lang.String text)
  ///
  /// Called by bindView() to set the text for a TextView but only if
  /// there is no existing ViewBinder or if the existing ViewBinder cannot
  /// handle binding to a TextView.
  ///
  /// Intended to be overridden by Adapters that need to filter strings
  /// retrieved from the database.
  ///@param v TextView to receive text
  ///@param text the text to be set for the TextView
  void setViewText(textview_.TextView v, jni.JniString text) =>
      jniAccessors.callMethodWithArgs(reference, _id_setViewText,
          jni.JniType.voidType, [v.reference, text.reference]).check();
}

/// from: android.widget.SimpleCursorTreeAdapter$ViewBinder
///
/// This class can be used by external clients of SimpleCursorTreeAdapter
/// to bind values from the Cursor to views.
///
/// You should use this class to bind values from the Cursor to views
/// that are not directly supported by SimpleCursorTreeAdapter or to
/// change the way binding occurs for views supported by
/// SimpleCursorTreeAdapter.
///@see SimpleCursorTreeAdapter\#setViewImage(ImageView, String)
///@see SimpleCursorTreeAdapter\#setViewText(TextView, String)
class SimpleCursorTreeAdapter_ViewBinder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/widget/SimpleCursorTreeAdapter\$ViewBinder");
  SimpleCursorTreeAdapter_ViewBinder.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_setViewValue = jniAccessors.getMethodIDOf(_classRef,
      "setViewValue", "(Landroid/view/View;Landroid/database/Cursor;I)Z");

  /// from: public abstract boolean setViewValue(android.view.View view, android.database.Cursor cursor, int columnIndex)
  ///
  /// Binds the Cursor column defined by the specified index to the specified view.
  ///
  /// When binding is handled by this ViewBinder, this method must return true.
  /// If this method returns false, SimpleCursorTreeAdapter will attempts to handle
  /// the binding on its own.
  ///@param view the view to bind the data to
  ///@param cursor the cursor to get the data from
  ///@param columnIndex the column at which the data can be found in the cursor
  ///@return true if the data was bound to the view, false otherwise
  bool setViewValue(view_.View view, cursor_.Cursor cursor, int columnIndex) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setViewValue,
          jni.JniType.booleanType,
          [view.reference, cursor.reference, columnIndex]).boolean;
}
