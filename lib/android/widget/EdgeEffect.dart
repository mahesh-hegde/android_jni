// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "../graphics/Canvas.dart" as canvas_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.EdgeEffect
///
/// This class performs the graphical effect used at the edges of scrollable widgets
/// when the user scrolls beyond the content bounds in 2D space.
///
/// EdgeEffect is stateful. Custom widgets using EdgeEffect should create an
/// instance for each edge that should show the effect, feed it input data using
/// the methods \#onAbsorb(int), \#onPull(float), and \#onRelease(),
/// and draw the effect using \#draw(Canvas) in the widget's overridden
/// android.view.View\#draw(Canvas) method. If \#isFinished() returns
/// false after drawing, the edge effect's animation is not yet complete and the widget
/// should schedule another drawing pass to continue the animation.
///
///
/// When drawing, widgets should draw their main content and child views first,
/// usually by invoking <code>super.draw(canvas)</code> from an overridden <code>draw</code>
/// method. (This will invoke onDraw and dispatch drawing to child views as needed.)
/// The edge effect may then be drawn on top of the view's content using the
/// \#draw(Canvas) method.
///
class EdgeEffect extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/widget/EdgeEffect");
  EdgeEffect.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a new EdgeEffect with a theme appropriate for the provided context.
  ///@param context Context used to provide theming and resource information for the EdgeEffect
  EdgeEffect(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_setSize =
      jniAccessors.getMethodIDOf(_classRef, "setSize", "(II)V");

  /// from: public void setSize(int width, int height)
  ///
  /// Set the size of this edge effect in pixels.
  ///@param width Effect width in pixels
  ///@param height Effect height in pixels
  void setSize(int width, int height) => jniAccessors.callMethodWithArgs(
      reference, _id_setSize, jni.JniType.voidType, [width, height]).check();

  static final _id_isFinished =
      jniAccessors.getMethodIDOf(_classRef, "isFinished", "()Z");

  /// from: public boolean isFinished()
  ///
  /// Reports if this EdgeEffect's animation is finished. If this method returns false
  /// after a call to \#draw(Canvas) the host widget should schedule another
  /// drawing pass to continue the animation.
  ///@return true if animation is finished, false if drawing should continue on the next frame.
  bool isFinished() => jniAccessors.callMethodWithArgs(
      reference, _id_isFinished, jni.JniType.booleanType, []).boolean;

  static final _id_finish =
      jniAccessors.getMethodIDOf(_classRef, "finish", "()V");

  /// from: public void finish()
  ///
  /// Immediately finish the current animation.
  /// After this call \#isFinished() will return true.
  void finish() => jniAccessors.callMethodWithArgs(
      reference, _id_finish, jni.JniType.voidType, []).check();

  static final _id_onPull =
      jniAccessors.getMethodIDOf(_classRef, "onPull", "(F)V");

  /// from: public void onPull(float deltaDistance)
  ///
  /// A view should call this when content is pulled away from an edge by the user.
  /// This will update the state of the current visual effect and its associated animation.
  /// The host view should always android.view.View\#invalidate() after this
  /// and draw the results accordingly.
  ///
  /// Views using EdgeEffect should favor \#onPull(float, float) when the displacement
  /// of the pull point is known.
  ///
  ///@param deltaDistance Change in distance since the last call. Values may be 0 (no change) to
  ///                      1.f (full length of the view) or negative values to express change
  ///                      back toward the edge reached to initiate the effect.
  void onPull(double deltaDistance) => jniAccessors.callMethodWithArgs(
      reference, _id_onPull, jni.JniType.voidType, [deltaDistance]).check();

  static final _id_onPull1 =
      jniAccessors.getMethodIDOf(_classRef, "onPull", "(FF)V");

  /// from: public void onPull(float deltaDistance, float displacement)
  ///
  /// A view should call this when content is pulled away from an edge by the user.
  /// This will update the state of the current visual effect and its associated animation.
  /// The host view should always android.view.View\#invalidate() after this
  /// and draw the results accordingly.
  ///@param deltaDistance Change in distance since the last call. Values may be 0 (no change) to
  ///                      1.f (full length of the view) or negative values to express change
  ///                      back toward the edge reached to initiate the effect.
  ///@param displacement The displacement from the starting side of the effect of the point
  ///                     initiating the pull. In the case of touch this is the finger position.
  ///                     Values may be from 0-1.
  void onPull1(double deltaDistance, double displacement) =>
      jniAccessors.callMethodWithArgs(reference, _id_onPull1,
          jni.JniType.voidType, [deltaDistance, displacement]).check();

  static final _id_onRelease =
      jniAccessors.getMethodIDOf(_classRef, "onRelease", "()V");

  /// from: public void onRelease()
  ///
  /// Call when the object is released after being pulled.
  /// This will begin the "decay" phase of the effect. After calling this method
  /// the host view should android.view.View\#invalidate() and thereby
  /// draw the results accordingly.
  void onRelease() => jniAccessors.callMethodWithArgs(
      reference, _id_onRelease, jni.JniType.voidType, []).check();

  static final _id_onAbsorb =
      jniAccessors.getMethodIDOf(_classRef, "onAbsorb", "(I)V");

  /// from: public void onAbsorb(int velocity)
  ///
  /// Call when the effect absorbs an impact at the given velocity.
  /// Used when a fling reaches the scroll boundary.
  ///
  /// When using a android.widget.Scroller or android.widget.OverScroller,
  /// the method <code>getCurrVelocity</code> will provide a reasonable approximation
  /// to use here.
  ///
  ///@param velocity Velocity at impact in pixels per second.
  void onAbsorb(int velocity) => jniAccessors.callMethodWithArgs(
      reference, _id_onAbsorb, jni.JniType.voidType, [velocity]).check();

  static final _id_setColor =
      jniAccessors.getMethodIDOf(_classRef, "setColor", "(I)V");

  /// from: public void setColor(int color)
  ///
  /// Set the color of this edge effect in argb.
  ///@param color Color in argb
  void setColor(int color) => jniAccessors.callMethodWithArgs(
      reference, _id_setColor, jni.JniType.voidType, [color]).check();

  static final _id_getColor =
      jniAccessors.getMethodIDOf(_classRef, "getColor", "()I");

  /// from: public int getColor()
  ///
  /// Return the color of this edge effect in argb.
  ///@return The color of this edge effect in argb
  int getColor() => jniAccessors.callMethodWithArgs(
      reference, _id_getColor, jni.JniType.intType, []).integer;

  static final _id_draw = jniAccessors.getMethodIDOf(
      _classRef, "draw", "(Landroid/graphics/Canvas;)Z");

  /// from: public boolean draw(android.graphics.Canvas canvas)
  ///
  /// Draw into the provided canvas. Assumes that the canvas has been rotated
  /// accordingly and the size has been set. The effect will be drawn the full
  /// width of X=0 to X=width, beginning from Y=0 and extending to some factor <
  /// 1.f of height.
  ///@param canvas Canvas to draw into
  ///@return true if drawing should continue beyond this frame to continue the
  ///         animation
  bool draw(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_draw, jni.JniType.booleanType, [canvas.reference]).boolean;

  static final _id_getMaxHeight =
      jniAccessors.getMethodIDOf(_classRef, "getMaxHeight", "()I");

  /// from: public int getMaxHeight()
  ///
  /// Return the maximum height that the edge effect will be drawn at given the original
  /// \#setSize(int, int) input size.
  ///@return The maximum height of the edge effect
  int getMaxHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getMaxHeight, jni.JniType.intType, []).integer;
}
