// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.Checkable
///
/// Defines an extension for views that make them checkable.
class Checkable extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/widget/Checkable");
  Checkable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_setChecked =
      jniAccessors.getMethodIDOf(_classRef, "setChecked", "(Z)V");

  /// from: public abstract void setChecked(boolean checked)
  ///
  /// Change the checked state of the view
  ///@param checked The new checked state
  void setChecked(bool checked) => jniAccessors.callMethodWithArgs(
      reference, _id_setChecked, jni.JniType.voidType, [checked]).check();

  static final _id_isChecked =
      jniAccessors.getMethodIDOf(_classRef, "isChecked", "()Z");

  /// from: public abstract boolean isChecked()
  ///
  /// @return The current checked state of the view
  bool isChecked() => jniAccessors.callMethodWithArgs(
      reference, _id_isChecked, jni.JniType.booleanType, []).boolean;

  static final _id_toggle =
      jniAccessors.getMethodIDOf(_classRef, "toggle", "()V");

  /// from: public abstract void toggle()
  ///
  /// Change the checked state of the view to the inverse of its current state
  void toggle() => jniAccessors.callMethodWithArgs(
      reference, _id_toggle, jni.JniType.voidType, []).check();
}
