// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BaseAdapter.dart" as baseadapter_;

import "../content/Context.dart" as context_;

import "../view/View.dart" as view_;

import "../view/ViewGroup.dart" as viewgroup_;

import "../content/res/Resources.dart" as resources_;

import "Filter.dart" as filter_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.ArrayAdapter
///
/// You can use this adapter to provide views for an AdapterView,
/// Returns a view for each object in a collection of data objects you
/// provide, and can be used with list-based user interface widgets such as
/// ListView or Spinner.
///
/// By default, the array adapter creates a view by calling Object\#toString() on each
/// data object in the collection you provide, and places the result in a TextView.
/// You may also customize what type of view is used for the data object in the collection.
/// To customize what type of view is used for the data object,
/// override \#getView(int, View, ViewGroup)
/// and inflate a view resource.
/// For a code example, see
/// the <a href="https://developer.android.com/samples/CustomChoiceList/index.html">
/// CustomChoiceList</a> sample.
///
///
///
/// For an example of using an array adapter with a ListView, see the
/// <a href="{@docRoot}guide/topics/ui/declaring-layout.html\#AdapterViews">
/// Adapter Views</a> guide.
///
///
///
/// For an example of using an array adapter with a Spinner, see the
/// <a href="{@docRoot}guide/topics/ui/controls/spinner.html">Spinners</a> guide.
///
///
/// <p class="note"><strong>Note:</strong>
/// If you are considering using array adapter with a ListView, consider using
/// android.support.v7.widget.RecyclerView instead.
/// RecyclerView offers similar features with better performance and more flexibility than
/// ListView provides.
/// See the
/// <a href="https://developer.android.com/guide/topics/ui/layout/recyclerview.html">
/// Recycler View</a> guide.
///
class ArrayAdapter extends baseadapter_.BaseAdapter {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/ArrayAdapter");
  ArrayAdapter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;I)V");

  /// from: public void <init>(android.content.Context context, int resource)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor
  ///@param context The current context.
  /// This value must never be {@code null}.
  ///@param resource The resource ID for a layout file containing a TextView to use when
  ///                 instantiating views.
  ArrayAdapter.ctor1(context_.Context context, int resource)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, resource]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;II)V");

  /// from: public void <init>(android.content.Context context, int resource, int textViewResourceId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor
  ///@param context The current context.
  /// This value must never be {@code null}.
  ///@param resource The resource ID for a layout file containing a layout to use when
  ///                 instantiating views.
  ///@param textViewResourceId The id of the TextView within the layout resource to be populated
  ArrayAdapter.ctor2(
      context_.Context context, int resource, int textViewResourceId)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, resource, textViewResourceId]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;I[Ljava/lang/Object;)V");

  /// from: public void <init>(android.content.Context context, int resource, T[] objects)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor. This constructor will result in the underlying data collection being
  /// immutable, so methods such as \#clear() will throw an exception.
  ///@param context The current context.
  /// This value must never be {@code null}.
  ///@param resource The resource ID for a layout file containing a TextView to use when
  ///                 instantiating views.
  ///@param objects The objects to represent in the ListView.
  ///
  /// This value must never be {@code null}.
  ArrayAdapter.ctor3(
      context_.Context context, int resource, jni.JniObject objects)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3,
            [context.reference, resource, objects.reference]).object);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;II[Ljava/lang/Object;)V");

  /// from: public void <init>(android.content.Context context, int resource, int textViewResourceId, T[] objects)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor. This constructor will result in the underlying data collection being
  /// immutable, so methods such as \#clear() will throw an exception.
  ///@param context The current context.
  /// This value must never be {@code null}.
  ///@param resource The resource ID for a layout file containing a layout to use when
  ///                 instantiating views.
  ///@param textViewResourceId The id of the TextView within the layout resource to be populated
  ///@param objects The objects to represent in the ListView.
  ///
  /// This value must never be {@code null}.
  ArrayAdapter.ctor4(context_.Context context, int resource,
      int textViewResourceId, jni.JniObject objects)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor4, [
          context.reference,
          resource,
          textViewResourceId,
          objects.reference
        ]).object);

  static final _id_ctor5 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;ILjava/util/List;)V");

  /// from: public void <init>(android.content.Context context, int resource, java.util.List<T> objects)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor
  ///@param context The current context.
  /// This value must never be {@code null}.
  ///@param resource The resource ID for a layout file containing a TextView to use when
  ///                 instantiating views.
  ///@param objects The objects to represent in the ListView.
  ///
  /// This value must never be {@code null}.
  ArrayAdapter.ctor5(
      context_.Context context, int resource, jni.JniObject objects)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor5,
            [context.reference, resource, objects.reference]).object);

  static final _id_ctor6 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;IILjava/util/List;)V");

  /// from: public void <init>(android.content.Context context, int resource, int textViewResourceId, java.util.List<T> objects)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor
  ///@param context The current context.
  /// This value must never be {@code null}.
  ///@param resource The resource ID for a layout file containing a layout to use when
  ///                 instantiating views.
  ///@param textViewResourceId The id of the TextView within the layout resource to be populated
  ///@param objects The objects to represent in the ListView.
  ///
  /// This value must never be {@code null}.
  ArrayAdapter.ctor6(context_.Context context, int resource,
      int textViewResourceId, jni.JniObject objects)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor6, [
          context.reference,
          resource,
          textViewResourceId,
          objects.reference
        ]).object);

  static final _id_addAll = jniAccessors.getMethodIDOf(
      _classRef, "addAll", "(Ljava/util/Collection;)V");

  /// from: public void addAll(java.util.Collection<? extends T> collection)
  ///
  /// Adds the specified Collection at the end of the array.
  ///@param collection The Collection to add at the end of the array.
  /// This value must never be {@code null}.
  ///@throws UnsupportedOperationException if the <tt>addAll</tt> operation
  ///         is not supported by this list
  ///@throws ClassCastException if the class of an element of the specified
  ///         collection prevents it from being added to this list
  ///@throws NullPointerException if the specified collection contains one
  ///         or more null elements and this list does not permit null
  ///         elements, or if the specified collection is null
  ///@throws IllegalArgumentException if some property of an element of the
  ///         specified collection prevents it from being added to this list
  void addAll(jni.JniObject collection) => jniAccessors.callMethodWithArgs(
      reference,
      _id_addAll,
      jni.JniType.voidType,
      [collection.reference]).check();

  static final _id_addAll1 =
      jniAccessors.getMethodIDOf(_classRef, "addAll", "([Ljava/lang/Object;)V");

  /// from: public void addAll(T[] items)
  ///
  /// Adds the specified items at the end of the array.
  ///@param items The items to add at the end of the array.
  ///@throws UnsupportedOperationException if the underlying data collection is immutable
  void addAll1(jni.JniObject items) => jniAccessors.callMethodWithArgs(
      reference, _id_addAll1, jni.JniType.voidType, [items.reference]).check();

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, "clear", "()V");

  /// from: public void clear()
  ///
  /// Remove all elements from the list.
  ///@throws UnsupportedOperationException if the underlying data collection is immutable
  void clear() => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniType.voidType, []).check();

  static final _id_sort = jniAccessors.getMethodIDOf(
      _classRef, "sort", "(Ljava/util/Comparator;)V");

  /// from: public void sort(java.util.Comparator<? super T> comparator)
  ///
  /// Sorts the content of this adapter using the specified comparator.
  ///@param comparator The comparator used to sort the objects contained
  ///        in this adapter.
  ///
  /// This value must never be {@code null}.
  void sort(jni.JniObject comparator) => jniAccessors.callMethodWithArgs(
      reference,
      _id_sort,
      jni.JniType.voidType,
      [comparator.reference]).check();

  static final _id_notifyDataSetChanged =
      jniAccessors.getMethodIDOf(_classRef, "notifyDataSetChanged", "()V");

  /// from: public void notifyDataSetChanged()
  void notifyDataSetChanged() => jniAccessors.callMethodWithArgs(
      reference, _id_notifyDataSetChanged, jni.JniType.voidType, []).check();

  static final _id_setNotifyOnChange =
      jniAccessors.getMethodIDOf(_classRef, "setNotifyOnChange", "(Z)V");

  /// from: public void setNotifyOnChange(boolean notifyOnChange)
  ///
  /// Control whether methods that change the list (\#add, \#addAll(Collection),
  /// \#addAll(Object[]), \#insert, \#remove, \#clear,
  /// \#sort(Comparator)) automatically call \#notifyDataSetChanged.  If set to
  /// false, caller must manually call notifyDataSetChanged() to have the changes
  /// reflected in the attached view.
  ///
  /// The default is true, and calling notifyDataSetChanged()
  /// resets the flag to true.
  ///@param notifyOnChange if true, modifications to the list will
  ///                       automatically call \#notifyDataSetChanged
  void setNotifyOnChange(bool notifyOnChange) =>
      jniAccessors.callMethodWithArgs(reference, _id_setNotifyOnChange,
          jni.JniType.voidType, [notifyOnChange]).check();

  static final _id_getContext = jniAccessors.getMethodIDOf(
      _classRef, "getContext", "()Landroid/content/Context;");

  /// from: public android.content.Context getContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the context associated with this array adapter. The context is used
  /// to create views from the resource passed to the constructor.
  ///@return The Context associated with this adapter.
  ///
  /// This value will never be {@code null}.
  context_.Context getContext() =>
      context_.Context.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getContext, jni.JniType.objectType, []).object);

  static final _id_getCount =
      jniAccessors.getMethodIDOf(_classRef, "getCount", "()I");

  /// from: public int getCount()
  int getCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getCount, jni.JniType.intType, []).integer;

  static final _id_getItemId =
      jniAccessors.getMethodIDOf(_classRef, "getItemId", "(I)J");

  /// from: public long getItemId(int position)
  int getItemId(int position) => jniAccessors.callMethodWithArgs(
      reference, _id_getItemId, jni.JniType.longType, [position]).long;

  static final _id_getView = jniAccessors.getMethodIDOf(_classRef, "getView",
      "(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;");

  /// from: public android.view.View getView(int position, android.view.View convertView, android.view.ViewGroup parent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param convertView This value may be {@code null}.
  ///@param parent This value must never be {@code null}.
  ///@return This value will never be {@code null}.
  view_.View getView(
          int position, view_.View convertView, viewgroup_.ViewGroup parent) =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getView,
          jni.JniType.objectType,
          [position, convertView.reference, parent.reference]).object);

  static final _id_setDropDownViewResource =
      jniAccessors.getMethodIDOf(_classRef, "setDropDownViewResource", "(I)V");

  /// from: public void setDropDownViewResource(int resource)
  ///
  /// Sets the layout resource to create the drop down views.
  ///
  ///@param resource the layout resource defining the drop down views
  ///@see \#getDropDownView(int, android.view.View, android.view.ViewGroup)
  void setDropDownViewResource(int resource) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setDropDownViewResource,
      jni.JniType.voidType,
      [resource]).check();

  static final _id_setDropDownViewTheme = jniAccessors.getMethodIDOf(_classRef,
      "setDropDownViewTheme", "(Landroid/content/res/Resources\$Theme;)V");

  /// from: public void setDropDownViewTheme(android.content.res.Resources.Theme theme)
  ///
  /// Sets the Resources.Theme against which drop-down views are
  /// inflated.
  ///
  /// By default, drop-down views are inflated against the theme of the
  /// Context passed to the adapter's constructor.
  ///@param theme the theme against which to inflate drop-down views or
  ///              {@code null} to use the theme from the adapter's context
  /// This value may be {@code null}.
  ///@see \#getDropDownView(int, View, ViewGroup)
  void setDropDownViewTheme(resources_.Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(reference, _id_setDropDownViewTheme,
          jni.JniType.voidType, [theme.reference]).check();

  static final _id_getDropDownViewTheme = jniAccessors.getMethodIDOf(_classRef,
      "getDropDownViewTheme", "()Landroid/content/res/Resources\$Theme;");

  /// from: public android.content.res.Resources.Theme getDropDownViewTheme()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return This value may be {@code null}.
  resources_.Resources_Theme getDropDownViewTheme() =>
      resources_.Resources_Theme.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDropDownViewTheme,
          jni.JniType.objectType, []).object);

  static final _id_getDropDownView = jniAccessors.getMethodIDOf(
      _classRef,
      "getDropDownView",
      "(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;");

  /// from: public android.view.View getDropDownView(int position, android.view.View convertView, android.view.ViewGroup parent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param convertView This value may be {@code null}.
  ///@param parent This value must never be {@code null}.
  view_.View getDropDownView(
          int position, view_.View convertView, viewgroup_.ViewGroup parent) =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDropDownView,
          jni.JniType.objectType,
          [position, convertView.reference, parent.reference]).object);

  static final _id_createFromResource = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createFromResource",
      "(Landroid/content/Context;II)Landroid/widget/ArrayAdapter;");

  /// from: static public android.widget.ArrayAdapter<java.lang.CharSequence> createFromResource(android.content.Context context, int textArrayResId, int textViewResId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new ArrayAdapter from external resources. The content of the array is
  /// obtained through android.content.res.Resources\#getTextArray(int).
  ///@param context The application's environment.
  /// This value must never be {@code null}.
  ///@param textArrayResId The identifier of the array to use as the data source.
  ///@param textViewResId The identifier of the layout used to create views.
  ///@return An ArrayAdapter<CharSequence>.
  ///
  /// This value will never be {@code null}.
  static ArrayAdapter createFromResource(
          context_.Context context, int textArrayResId, int textViewResId) =>
      ArrayAdapter.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createFromResource,
          jni.JniType.objectType,
          [context.reference, textArrayResId, textViewResId]).object);

  static final _id_getFilter = jniAccessors.getMethodIDOf(
      _classRef, "getFilter", "()Landroid/widget/Filter;");

  /// from: public android.widget.Filter getFilter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return This value will never be {@code null}.
  filter_.Filter getFilter() =>
      filter_.Filter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFilter, jni.JniType.objectType, []).object);

  static final _id_getAutofillOptions = jniAccessors.getMethodIDOf(
      _classRef, "getAutofillOptions", "()[Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence[] getAutofillOptions()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  ///@return values from the string array used by \#createFromResource(Context, int, int),
  /// or {@code null} if object was created otherwsie or if contents were dynamically changed after
  /// creation.
  jni.JniObject getAutofillOptions() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAutofillOptions, jni.JniType.objectType, []).object);
}
