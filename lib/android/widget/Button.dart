// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "TextView.dart" as textview_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../view/PointerIcon.dart" as pointericon_;

import "../view/MotionEvent.dart" as motionevent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.Button
///
/// A user interface element the user can tap or click to perform an action.
///
/// To display a button in an activity, add a button to the activity's layout XML file:
///
///
/// <pre>
/// &lt;Button
///     android:id="@+id/button_id"
///     android:layout_height="wrap_content"
///     android:layout_width="wrap_content"
///     android:text="@string/self_destruct" /&gt;</pre>
///
/// To specify an action when the button is pressed, set a click
/// listener on the button object in the corresponding activity code:
///
///
/// <pre>
/// public class MyActivity extends Activity {
///     protected void onCreate(Bundle savedInstanceState) {
///         super.onCreate(savedInstanceState);
///
///         setContentView(R.layout.content_layout_id);
///
///         final Button button = findViewById(R.id.button_id);
///         button.setOnClickListener(new View.OnClickListener() {
///             public void onClick(View v) {
///                 // Code here executes on main thread after user presses button
///             }
///         });
///     }
/// }</pre>
///
/// The above snippet creates an instance of android.view.View.OnClickListener and wires
/// the listener to the button using
/// \#setOnClickListener setOnClickListener(View.OnClickListener).
/// As a result, the system executes the code you write in {@code onClick(View)} after the
/// user presses the button.
///
///
/// <p class="note">The system executes the code in {@code onClick} on the
/// <a href="{@docRoot}guide/components/processes-and-threads.html\#Threads">main thread</a>.
/// This means your onClick code must execute quickly to avoid delaying your app's response
/// to further user actions.  See
/// <a href="{@docRoot}training/articles/perf-anr.html">Keeping Your App Responsive</a>
/// for more details.
///
///
/// Every button is styled using the system's default button background, which is often
/// different from one version of the platform to another. If you are not satisfied with the
/// default button style, you can customize it. For more details and code samples, see the
/// <a href="{@docRoot}guide/topics/ui/controls/button.html\#Style">Styling Your Button</a>
/// guide.
///
///
/// For all XML style attributes available on Button see
/// android.R.styleable\#Button Button Attributes,
/// android.R.styleable\#TextView TextView Attributes,
/// android.R.styleable\#View View Attributes.  See the
/// <a href="{@docRoot}guide/topics/ui/themes.html\#ApplyingStyles">Styles and Themes</a>
/// guide to learn how to implement and organize overrides to style-related attributes.
///
class Button extends textview_.TextView {
  static final _classRef = jniAccessors.getClassOf("android/widget/Button");
  Button.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Simple constructor to use when creating a button from code.
  ///@param context The Context the Button is running in, through which it can
  ///        access the current theme, resources, etc.
  ///@see \#Button(Context, AttributeSet)
  Button(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// LayoutInflater calls this constructor when inflating a Button from XML.
  /// The attributes defined by the current theme's
  /// android.R.attr\#buttonStyle android:buttonStyle
  /// override base view attributes.
  ///
  /// You typically do not call this constructor to create your own button instance in code.
  /// However, you must override this constructor when
  /// <a href="{@docRoot}training/custom-views/index.html">creating custom views</a>.
  ///@param context The Context the view is running in, through which it can
  ///        access the current theme, resources, etc.
  ///@param attrs The attributes of the XML Button tag being used to inflate the view.
  ///@see \#Button(Context, AttributeSet, int)
  ///@see android.view.View\#View(Context, AttributeSet)
  Button.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This constructor allows a Button subclass to use its own class-specific base style from a
  /// theme attribute when inflating. The attributes defined by the current theme's
  /// {@code defStyleAttr} override base view attributes.
  ///
  /// For Button's base view attributes see
  /// android.R.styleable\#Button Button Attributes,
  /// android.R.styleable\#TextView TextView Attributes,
  /// android.R.styleable\#View View Attributes.
  ///@param context The Context the Button is running in, through which it can
  ///        access the current theme, resources, etc.
  ///@param attrs The attributes of the XML Button tag that is inflating the view.
  ///@param defStyleAttr The resource identifier of an attribute in the current theme
  ///        whose value is the the resource id of a style. The specified style\u2019s
  ///        attribute values serve as default values for the button. Set this parameter
  ///        to 0 to avoid use of default values.
  ///@see \#Button(Context, AttributeSet, int, int)
  ///@see android.view.View\#View(Context, AttributeSet, int)
  Button.ctor2(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This constructor allows a Button subclass to use its own class-specific base style from
  /// either a theme attribute or style resource when inflating. To see how the final value of a
  /// particular attribute is resolved based on your inputs to this constructor, see
  /// android.view.View\#View(Context, AttributeSet, int, int).
  ///@param context The Context the Button is running in, through which it can
  ///        access the current theme, resources, etc.
  ///@param attrs The attributes of the XML Button tag that is inflating the view.
  ///@param defStyleAttr The resource identifier of an attribute in the current theme
  ///        whose value is the the resource id of a style. The specified style\u2019s
  ///        attribute values serve as default values for the button. Set this parameter
  ///        to 0 to avoid use of default values.
  ///@param defStyleRes The identifier of a style resource that
  ///        supplies default values for the button, used only if
  ///        defStyleAttr is 0 or cannot be found in the theme.
  ///        Set this parameter to 0 to avoid use of default values.
  ///@see \#Button(Context, AttributeSet, int)
  ///@see android.view.View\#View(Context, AttributeSet, int, int)
  Button.ctor3(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);

  static final _id_onResolvePointerIcon = jniAccessors.getMethodIDOf(
      _classRef,
      "onResolvePointerIcon",
      "(Landroid/view/MotionEvent;I)Landroid/view/PointerIcon;");

  /// from: public android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent event, int pointerIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  pointericon_.PointerIcon onResolvePointerIcon(
          motionevent_.MotionEvent event, int pointerIndex) =>
      pointericon_.PointerIcon.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_onResolvePointerIcon,
          jni.JniType.objectType,
          [event.reference, pointerIndex]).object);
}
