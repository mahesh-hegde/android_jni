// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ImageView.dart" as imageview_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../view/PointerIcon.dart" as pointericon_;

import "../view/MotionEvent.dart" as motionevent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.ImageButton
///
///
/// Displays a button with an image (instead of text) that can be pressed
/// or clicked by the user. By default, an ImageButton looks like a regular
/// android.widget.Button, with the standard button background
/// that changes color during different button states. The image on the surface
/// of the button is defined either by the {@code android:src} attribute in the
/// {@code <ImageButton>} XML element or by the
/// \#setImageResource(int) method.
///
///
/// To remove the standard button background image, define your own
/// background image or set the background color to be transparent.
///
/// To indicate the different button states (focused, selected, etc.), you can
/// define a different image for each state. E.g., a blue image by default, an
/// orange one for when focused, and a yellow one for when pressed. An easy way to
/// do this is with an XML drawable "selector." For example:
///
/// <pre>
/// &lt;?xml version="1.0" encoding="utf-8"?&gt;
/// &lt;selector xmlns:android="http://schemas.android.com/apk/res/android"&gt;
///     &lt;item android:state_pressed="true"
///           android:drawable="@drawable/button_pressed" /&gt; &lt;!-- pressed --&gt;
///     &lt;item android:state_focused="true"
///           android:drawable="@drawable/button_focused" /&gt; &lt;!-- focused --&gt;
///     &lt;item android:drawable="@drawable/button_normal" /&gt; &lt;!-- default --&gt;
/// &lt;/selector&gt;</pre>
///
/// Save the XML file in your project {@code res/drawable/} folder and then
/// reference it as a drawable for the source of your ImageButton (in the
/// {@code android:src} attribute). Android will automatically change the image
/// based on the state of the button and the corresponding images
/// defined in the XML.
///
///
/// The order of the {@code <item>} elements is important because they are
/// evaluated in order. This is why the "normal" button image comes last, because
/// it will only be applied after {@code android:state_pressed} and {@code
/// android:state_focused} have both evaluated false.
///
///
/// See the <a href="{@docRoot}guide/topics/ui/controls/button.html">Buttons</a>
/// guide.
///
///
/// <strong>XML attributes</strong>
///
///
/// See android.R.styleable\#ImageView Button Attributes,
/// android.R.styleable\#View View Attributes
///
///
class ImageButton extends imageview_.ImageView {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/ImageButton");
  ImageButton.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ImageButton(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ImageButton.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ImageButton.ctor2(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ImageButton.ctor3(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_onSetAlpha1 =
      jniAccessors.getMethodIDOf(_classRef, "onSetAlpha", "(I)Z");

  /// from: protected boolean onSetAlpha(int alpha)
  bool onSetAlpha1(int alpha) => jniAccessors.callMethodWithArgs(
      reference, _id_onSetAlpha1, jni.JniType.booleanType, [alpha]).boolean;

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);

  static final _id_onResolvePointerIcon1 = jniAccessors.getMethodIDOf(
      _classRef,
      "onResolvePointerIcon",
      "(Landroid/view/MotionEvent;I)Landroid/view/PointerIcon;");

  /// from: public android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent event, int pointerIndex)
  /// The returned object must be deleted after use, by calling the `delete` method.
  pointericon_.PointerIcon onResolvePointerIcon1(
          motionevent_.MotionEvent event, int pointerIndex) =>
      pointericon_.PointerIcon.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_onResolvePointerIcon1,
          jni.JniType.objectType,
          [event.reference, pointerIndex]).object);
}
