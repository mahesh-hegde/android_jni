// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.Filter
///
/// A filter constrains data with a filtering pattern.
///
///
/// Filters are usually created by android.widget.Filterable
/// classes.
///
///
/// Filtering operations performed by calling \#filter(CharSequence) or
/// \#filter(CharSequence, android.widget.Filter.FilterListener) are
/// performed asynchronously. When these methods are called, a filtering request
/// is posted in a request queue and processed later. Any call to one of these
/// methods will cancel any previous non-executed filtering request.
///
///@see android.widget.Filterable
class Filter extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/widget/Filter");
  Filter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new asynchronous filter.
  ///
  Filter()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_filter = jniAccessors.getMethodIDOf(
      _classRef, "filter", "(Ljava/lang/CharSequence;)V");

  /// from: public final void filter(java.lang.CharSequence constraint)
  ///
  /// Starts an asynchronous filtering operation. Calling this method
  /// cancels all previous non-executed filtering requests and posts a new
  /// filtering request that will be executed later.
  ///
  ///@param constraint the constraint used to filter the data
  ///@see \#filter(CharSequence, android.widget.Filter.FilterListener)
  void filter(jni.JniObject constraint) => jniAccessors.callMethodWithArgs(
      reference,
      _id_filter,
      jni.JniType.voidType,
      [constraint.reference]).check();

  static final _id_filter1 = jniAccessors.getMethodIDOf(_classRef, "filter",
      "(Ljava/lang/CharSequence;Landroid/widget/Filter\$FilterListener;)V");

  /// from: public final void filter(java.lang.CharSequence constraint, android.widget.Filter.FilterListener listener)
  ///
  /// Starts an asynchronous filtering operation. Calling this method
  /// cancels all previous non-executed filtering requests and posts a new
  /// filtering request that will be executed later.
  ///
  ///
  /// Upon completion, the listener is notified.
  ///
  ///@param constraint the constraint used to filter the data
  ///@param listener a listener notified upon completion of the operation
  ///@see \#filter(CharSequence)
  ///@see \#performFiltering(CharSequence)
  ///@see \#publishResults(CharSequence, android.widget.Filter.FilterResults)
  void filter1(jni.JniObject constraint, Filter_FilterListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_filter1,
          jni.JniType.voidType,
          [constraint.reference, listener.reference]).check();

  static final _id_performFiltering = jniAccessors.getMethodIDOf(
      _classRef,
      "performFiltering",
      "(Ljava/lang/CharSequence;)Landroid/widget/Filter\$FilterResults;");

  /// from: protected abstract android.widget.Filter.FilterResults performFiltering(java.lang.CharSequence constraint)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Invoked in a worker thread to filter the data according to the
  /// constraint. Subclasses must implement this method to perform the
  /// filtering operation. Results computed by the filtering operation
  /// must be returned as a android.widget.Filter.FilterResults that
  /// will then be published in the UI thread through
  /// \#publishResults(CharSequence,
  /// android.widget.Filter.FilterResults).
  ///
  ///
  /// <strong>Contract:</strong> When the constraint is null, the original
  /// data must be restored.
  ///
  ///@param constraint the constraint used to filter the data
  ///@return the results of the filtering operation
  ///@see \#filter(CharSequence, android.widget.Filter.FilterListener)
  ///@see \#publishResults(CharSequence, android.widget.Filter.FilterResults)
  ///@see android.widget.Filter.FilterResults
  Filter_FilterResults performFiltering(jni.JniObject constraint) =>
      Filter_FilterResults.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_performFiltering,
          jni.JniType.objectType,
          [constraint.reference]).object);

  static final _id_publishResults = jniAccessors.getMethodIDOf(
      _classRef,
      "publishResults",
      "(Ljava/lang/CharSequence;Landroid/widget/Filter\$FilterResults;)V");

  /// from: protected abstract void publishResults(java.lang.CharSequence constraint, android.widget.Filter.FilterResults results)
  ///
  /// Invoked in the UI thread to publish the filtering results in the
  /// user interface. Subclasses must implement this method to display the
  /// results computed in \#performFiltering.
  ///
  ///@param constraint the constraint used to filter the data
  ///@param results the results of the filtering operation
  ///@see \#filter(CharSequence, android.widget.Filter.FilterListener)
  ///@see \#performFiltering(CharSequence)
  ///@see android.widget.Filter.FilterResults
  void publishResults(jni.JniObject constraint, Filter_FilterResults results) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_publishResults,
          jni.JniType.voidType,
          [constraint.reference, results.reference]).check();

  static final _id_convertResultToString = jniAccessors.getMethodIDOf(_classRef,
      "convertResultToString", "(Ljava/lang/Object;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence convertResultToString(java.lang.Object resultValue)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Converts a value from the filtered set into a CharSequence. Subclasses
  /// should override this method to convert their results. The default
  /// implementation returns an empty String for null values or the default
  /// String representation of the value.
  ///
  ///@param resultValue the value to convert to a CharSequence
  ///@return a CharSequence representing the value
  jni.JniObject convertResultToString(jni.JniObject resultValue) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_convertResultToString,
          jni.JniType.objectType,
          [resultValue.reference]).object);
}

/// from: android.widget.Filter$FilterResults
///
/// Holds the results of a filtering operation. The results are the values
/// computed by the filtering operation and the number of these values.
///
class Filter_FilterResults extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/Filter\$FilterResults");
  Filter_FilterResults.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_count = jniAccessors.getFieldIDOf(_classRef, "count", "I");

  /// from: public int count
  ///
  /// Contains the number of values computed by the filtering
  /// operation.
  ///
  int get count =>
      jniAccessors.getField(reference, _id_count, jni.JniType.intType).integer;

  /// from: public int count
  ///
  /// Contains the number of values computed by the filtering
  /// operation.
  ///
  set count(int value) => jniEnv.SetIntField(reference, _id_count, value);

  static final _id_values =
      jniAccessors.getFieldIDOf(_classRef, "values", "Ljava/lang/Object;");

  /// from: public java.lang.Object values
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Contains all the values computed by the filtering operation.
  ///
  jni.JniObject get values => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_values, jni.JniType.objectType)
      .object);

  /// from: public java.lang.Object values
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Contains all the values computed by the filtering operation.
  ///
  set values(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_values, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Filter_FilterResults()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.widget.Filter$FilterListener
///
/// Listener used to receive a notification upon completion of a filtering
/// operation.
///
class Filter_FilterListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/Filter\$FilterListener");
  Filter_FilterListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onFilterComplete =
      jniAccessors.getMethodIDOf(_classRef, "onFilterComplete", "(I)V");

  /// from: public abstract void onFilterComplete(int count)
  ///
  /// Notifies the end of a filtering operation.
  ///
  ///@param count the number of values computed by the filter
  void onFilterComplete(int count) => jniAccessors.callMethodWithArgs(
      reference, _id_onFilterComplete, jni.JniType.voidType, [count]).check();
}
