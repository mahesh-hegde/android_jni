// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../database/DataSetObserver.dart" as datasetobserver_;

import "../database/Cursor.dart" as cursor_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.AlphabetIndexer
///
/// A helper class for adapters that implement the SectionIndexer interface.
/// If the items in the adapter are sorted by simple alphabet-based sorting, then
/// this class provides a way to do fast indexing of large lists using binary search.
/// It caches the indices that have been determined through the binary search and also
/// invalidates the cache if changes occur in the cursor.
/// <p/>
/// Your adapter is responsible for updating the cursor by calling \#setCursor if the
/// cursor changes. \#getPositionForSection method does the binary search for the starting
/// index of a given section (alphabet).
class AlphabetIndexer extends datasetobserver_.DataSetObserver {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/AlphabetIndexer");
  AlphabetIndexer.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_mAlphabet = jniAccessors.getFieldIDOf(
      _classRef, "mAlphabet", "Ljava/lang/CharSequence;");

  /// from: protected java.lang.CharSequence mAlphabet
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The string of characters that make up the indexing sections.
  jni.JniObject get mAlphabet => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_mAlphabet, jni.JniType.objectType)
      .object);

  /// from: protected java.lang.CharSequence mAlphabet
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The string of characters that make up the indexing sections.
  set mAlphabet(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_mAlphabet, value.reference);

  static final _id_mColumnIndex =
      jniAccessors.getFieldIDOf(_classRef, "mColumnIndex", "I");

  /// from: protected int mColumnIndex
  ///
  /// The index of the cursor column that this list is sorted on.
  int get mColumnIndex => jniAccessors
      .getField(reference, _id_mColumnIndex, jni.JniType.intType)
      .integer;

  /// from: protected int mColumnIndex
  ///
  /// The index of the cursor column that this list is sorted on.
  set mColumnIndex(int value) =>
      jniEnv.SetIntField(reference, _id_mColumnIndex, value);

  static final _id_mDataCursor = jniAccessors.getFieldIDOf(
      _classRef, "mDataCursor", "Landroid/database/Cursor;");

  /// from: protected android.database.Cursor mDataCursor
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Cursor that is used by the adapter of the list view.
  cursor_.Cursor get mDataCursor => cursor_.Cursor.fromRef(jniAccessors
      .getField(reference, _id_mDataCursor, jni.JniType.objectType)
      .object);

  /// from: protected android.database.Cursor mDataCursor
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Cursor that is used by the adapter of the list view.
  set mDataCursor(cursor_.Cursor value) =>
      jniEnv.SetObjectField(reference, _id_mDataCursor, value.reference);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/database/Cursor;ILjava/lang/CharSequence;)V");

  /// from: public void <init>(android.database.Cursor cursor, int sortedColumnIndex, java.lang.CharSequence alphabet)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs the indexer.
  ///@param cursor the cursor containing the data set
  ///@param sortedColumnIndex the column number in the cursor that is sorted
  ///        alphabetically
  ///@param alphabet string containing the alphabet, with space as the first character.
  ///        For example, use the string " ABCDEFGHIJKLMNOPQRSTUVWXYZ" for English indexing.
  ///        The characters must be uppercase and be sorted in ascii/unicode order. Basically
  ///        characters in the alphabet will show up as preview letters.
  AlphabetIndexer.ctor1(
      cursor_.Cursor cursor, int sortedColumnIndex, jni.JniObject alphabet)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [cursor.reference, sortedColumnIndex, alphabet.reference]).object);

  static final _id_getSections = jniAccessors.getMethodIDOf(
      _classRef, "getSections", "()[Ljava/lang/Object;");

  /// from: public java.lang.Object[] getSections()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the section array constructed from the alphabet provided in the constructor.
  ///@return the section array
  jni.JniObject getSections() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSections, jni.JniType.objectType, []).object);

  static final _id_setCursor = jniAccessors.getMethodIDOf(
      _classRef, "setCursor", "(Landroid/database/Cursor;)V");

  /// from: public void setCursor(android.database.Cursor cursor)
  ///
  /// Sets a new cursor as the data set and resets the cache of indices.
  ///@param cursor the new cursor to use as the data set
  void setCursor(cursor_.Cursor cursor) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCursor,
      jni.JniType.voidType,
      [cursor.reference]).check();

  static final _id_compare = jniAccessors.getMethodIDOf(
      _classRef, "compare", "(Ljava/lang/String;Ljava/lang/String;)I");

  /// from: protected int compare(java.lang.String word, java.lang.String letter)
  ///
  /// Default implementation compares the first character of word with letter.
  int compare(jni.JniString word, jni.JniString letter) =>
      jniAccessors.callMethodWithArgs(reference, _id_compare,
          jni.JniType.intType, [word.reference, letter.reference]).integer;

  static final _id_getPositionForSection =
      jniAccessors.getMethodIDOf(_classRef, "getPositionForSection", "(I)I");

  /// from: public int getPositionForSection(int sectionIndex)
  ///
  /// Performs a binary search or cache lookup to find the first row that
  /// matches a given section's starting letter.
  ///@param sectionIndex the section to search for
  ///@return the row index of the first occurrence, or the nearest next letter.
  /// For instance, if searching for "T" and no "T" is found, then the first
  /// row starting with "U" or any higher letter is returned. If there is no
  /// data following "T" at all, then the list size is returned.
  int getPositionForSection(int sectionIndex) =>
      jniAccessors.callMethodWithArgs(reference, _id_getPositionForSection,
          jni.JniType.intType, [sectionIndex]).integer;

  static final _id_getSectionForPosition =
      jniAccessors.getMethodIDOf(_classRef, "getSectionForPosition", "(I)I");

  /// from: public int getSectionForPosition(int position)
  ///
  /// Returns the section index for a given position in the list by querying the item
  /// and comparing it with all items in the section array.
  int getSectionForPosition(int position) => jniAccessors.callMethodWithArgs(
      reference,
      _id_getSectionForPosition,
      jni.JniType.intType,
      [position]).integer;

  static final _id_onChanged =
      jniAccessors.getMethodIDOf(_classRef, "onChanged", "()V");

  /// from: public void onChanged()
  void onChanged() => jniAccessors.callMethodWithArgs(
      reference, _id_onChanged, jni.JniType.voidType, []).check();

  static final _id_onInvalidated =
      jniAccessors.getMethodIDOf(_classRef, "onInvalidated", "()V");

  /// from: public void onInvalidated()
  void onInvalidated() => jniAccessors.callMethodWithArgs(
      reference, _id_onInvalidated, jni.JniType.voidType, []).check();
}
