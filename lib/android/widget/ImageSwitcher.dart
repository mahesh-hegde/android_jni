// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ViewSwitcher.dart" as viewswitcher_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../net/Uri.dart" as uri_;

import "../graphics/drawable/Drawable.dart" as drawable_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.ImageSwitcher
///
/// ViewSwitcher that switches between two ImageViews when a new
/// image is set on it. The views added to an ImageSwitcher must all be
/// ImageView ImageViews.
class ImageSwitcher extends viewswitcher_.ViewSwitcher {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/ImageSwitcher");
  ImageSwitcher.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new empty ImageSwitcher.
  ///@param context the application's environment
  ImageSwitcher(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new empty ImageSwitcher for the given context and with the
  /// specified set attributes.
  ///@param context the application environment
  ///@param attrs a collection of attributes
  ImageSwitcher.ctor1(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_setImageResource =
      jniAccessors.getMethodIDOf(_classRef, "setImageResource", "(I)V");

  /// from: public void setImageResource(int resid)
  ///
  /// Sets a new image on the ImageSwitcher with the given resource id.
  /// This will set that image resource on the next ImageView in the switcher and will
  /// then switch to that view.
  ///@param resid a Drawable resource id
  ///@see ImageView\#setImageResource(int)
  void setImageResource(int resid) => jniAccessors.callMethodWithArgs(
      reference, _id_setImageResource, jni.JniType.voidType, [resid]).check();

  static final _id_setImageURI = jniAccessors.getMethodIDOf(
      _classRef, "setImageURI", "(Landroid/net/Uri;)V");

  /// from: public void setImageURI(android.net.Uri uri)
  ///
  /// Sets a new image on the ImageSwitcher with the given Uri.
  /// This will set that image on the next ImageView in the switcher and will
  /// then switch to that view.
  ///@param uri the Uri of an image
  ///@see ImageView\#setImageURI(Uri)
  void setImageURI(uri_.Uri uri) => jniAccessors.callMethodWithArgs(reference,
      _id_setImageURI, jni.JniType.voidType, [uri.reference]).check();

  static final _id_setImageDrawable = jniAccessors.getMethodIDOf(
      _classRef, "setImageDrawable", "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void setImageDrawable(android.graphics.drawable.Drawable drawable)
  ///
  /// Sets a new drawable on the ImageSwitcher.
  /// This will set that drawable on the next ImageView in the switcher and will
  /// then switch to that view.
  ///@param drawable the drawable to be set or {@code null} to clear the content
  ///@see ImageView\#setImageDrawable(Drawable)
  void setImageDrawable(drawable_.Drawable drawable) =>
      jniAccessors.callMethodWithArgs(reference, _id_setImageDrawable,
          jni.JniType.voidType, [drawable.reference]).check();

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);
}
