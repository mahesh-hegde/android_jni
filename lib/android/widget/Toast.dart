// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "../view/View.dart" as view_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.Toast
///
/// A toast is a view containing a quick little message for the user.  The toast class
/// helps you create and show those.
/// {@more }
///
///
/// When the view is shown to the user, appears as a floating view over the
/// application.  It will never receive focus.  The user will probably be in the
/// middle of typing something else.  The idea is to be as unobtrusive as
/// possible, while still showing the user the information you want them to see.
/// Two examples are the volume control, and the brief message saying that your
/// settings have been saved.
///
/// The easiest way to use this class is to call one of the static methods that constructs
/// everything you need and returns a new Toast object.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For information about creating Toast notifications, read the
/// <a href="{@docRoot}guide/topics/ui/notifiers/toasts.html">Toast Notifications</a> developer
/// guide.
///
/// </div>
class Toast extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/widget/Toast");
  Toast.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int LENGTH_LONG
  ///
  /// Show the view or text notification for a long period of time.  This time
  /// could be user-definable.
  ///@see \#setDuration
  static const LENGTH_LONG = 1;

  /// from: static public final int LENGTH_SHORT
  ///
  /// Show the view or text notification for a short period of time.  This time
  /// could be user-definable.  This is the default.
  ///@see \#setDuration
  static const LENGTH_SHORT = 0;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct an empty Toast object.  You must call \#setView before you
  /// can call \#show.
  ///@param context The context to use.  Usually your android.app.Application
  ///                 or android.app.Activity object.
  Toast(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_show0 = jniAccessors.getMethodIDOf(_classRef, "show", "()V");

  /// from: public void show()
  ///
  /// Show the view for the specified duration.
  void show0() => jniAccessors.callMethodWithArgs(
      reference, _id_show0, jni.JniType.voidType, []).check();

  static final _id_cancel =
      jniAccessors.getMethodIDOf(_classRef, "cancel", "()V");

  /// from: public void cancel()
  ///
  /// Close the view if it's showing, or don't show it if it isn't showing yet.
  /// You do not normally have to call this.  Normally view will disappear on its own
  /// after the appropriate duration.
  void cancel() => jniAccessors.callMethodWithArgs(
      reference, _id_cancel, jni.JniType.voidType, []).check();

  static final _id_setView = jniAccessors.getMethodIDOf(
      _classRef, "setView", "(Landroid/view/View;)V");

  /// from: public void setView(android.view.View view)
  ///
  /// Set the view to show.
  ///@see \#getView
  void setView(view_.View view) => jniAccessors.callMethodWithArgs(
      reference, _id_setView, jni.JniType.voidType, [view.reference]).check();

  static final _id_getView =
      jniAccessors.getMethodIDOf(_classRef, "getView", "()Landroid/view/View;");

  /// from: public android.view.View getView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the view.
  ///@see \#setView
  view_.View getView() => view_.View.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getView, jni.JniType.objectType, []).object);

  static final _id_setDuration =
      jniAccessors.getMethodIDOf(_classRef, "setDuration", "(I)V");

  /// from: public void setDuration(int duration)
  ///
  /// Set how long to show the view for.
  ///@see \#LENGTH_SHORT
  ///@see \#LENGTH_LONG
  ///@param duration Value is android.widget.Toast\#LENGTH_SHORT, or android.widget.Toast\#LENGTH_LONG
  void setDuration(int duration) => jniAccessors.callMethodWithArgs(
      reference, _id_setDuration, jni.JniType.voidType, [duration]).check();

  static final _id_getDuration =
      jniAccessors.getMethodIDOf(_classRef, "getDuration", "()I");

  /// from: public int getDuration()
  ///
  /// Return the duration.
  ///@see \#setDuration
  ///@return Value is android.widget.Toast\#LENGTH_SHORT, or android.widget.Toast\#LENGTH_LONG
  int getDuration() => jniAccessors.callMethodWithArgs(
      reference, _id_getDuration, jni.JniType.intType, []).integer;

  static final _id_setMargin =
      jniAccessors.getMethodIDOf(_classRef, "setMargin", "(FF)V");

  /// from: public void setMargin(float horizontalMargin, float verticalMargin)
  ///
  /// Set the margins of the view.
  ///@param horizontalMargin The horizontal margin, in percentage of the
  ///        container width, between the container's edges and the
  ///        notification
  ///@param verticalMargin The vertical margin, in percentage of the
  ///        container height, between the container's edges and the
  ///        notification
  void setMargin(double horizontalMargin, double verticalMargin) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMargin,
          jni.JniType.voidType, [horizontalMargin, verticalMargin]).check();

  static final _id_getHorizontalMargin =
      jniAccessors.getMethodIDOf(_classRef, "getHorizontalMargin", "()F");

  /// from: public float getHorizontalMargin()
  ///
  /// Return the horizontal margin.
  double getHorizontalMargin() => jniAccessors.callMethodWithArgs(
      reference, _id_getHorizontalMargin, jni.JniType.floatType, []).float;

  static final _id_getVerticalMargin =
      jniAccessors.getMethodIDOf(_classRef, "getVerticalMargin", "()F");

  /// from: public float getVerticalMargin()
  ///
  /// Return the vertical margin.
  double getVerticalMargin() => jniAccessors.callMethodWithArgs(
      reference, _id_getVerticalMargin, jni.JniType.floatType, []).float;

  static final _id_setGravity =
      jniAccessors.getMethodIDOf(_classRef, "setGravity", "(III)V");

  /// from: public void setGravity(int gravity, int xOffset, int yOffset)
  ///
  /// Set the location at which the notification should appear on the screen.
  ///@see android.view.Gravity
  ///@see \#getGravity
  void setGravity(int gravity, int xOffset, int yOffset) =>
      jniAccessors.callMethodWithArgs(reference, _id_setGravity,
          jni.JniType.voidType, [gravity, xOffset, yOffset]).check();

  static final _id_getGravity =
      jniAccessors.getMethodIDOf(_classRef, "getGravity", "()I");

  /// from: public int getGravity()
  ///
  /// Get the location at which the notification should appear on the screen.
  ///@see android.view.Gravity
  ///@see \#getGravity
  int getGravity() => jniAccessors.callMethodWithArgs(
      reference, _id_getGravity, jni.JniType.intType, []).integer;

  static final _id_getXOffset =
      jniAccessors.getMethodIDOf(_classRef, "getXOffset", "()I");

  /// from: public int getXOffset()
  ///
  /// Return the X offset in pixels to apply to the gravity's location.
  int getXOffset() => jniAccessors.callMethodWithArgs(
      reference, _id_getXOffset, jni.JniType.intType, []).integer;

  static final _id_getYOffset =
      jniAccessors.getMethodIDOf(_classRef, "getYOffset", "()I");

  /// from: public int getYOffset()
  ///
  /// Return the Y offset in pixels to apply to the gravity's location.
  int getYOffset() => jniAccessors.callMethodWithArgs(
      reference, _id_getYOffset, jni.JniType.intType, []).integer;

  static final _id_makeText = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "makeText",
      "(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;");

  /// from: static public android.widget.Toast makeText(android.content.Context context, java.lang.CharSequence text, int duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Make a standard toast that just contains a text view.
  ///@param context The context to use.  Usually your android.app.Application
  ///                 or android.app.Activity object.
  ///@param text The text to show.  Can be formatted text.
  ///@param duration How long to display the message.  Either \#LENGTH_SHORT or
  ///                 \#LENGTH_LONG
  ///
  ///
  /// Value is android.widget.Toast\#LENGTH_SHORT, or android.widget.Toast\#LENGTH_LONG
  static Toast makeText(
          context_.Context context, jni.JniObject text, int duration) =>
      Toast.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_makeText,
          jni.JniType.objectType,
          [context.reference, text.reference, duration]).object);

  static final _id_makeText1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "makeText", "(Landroid/content/Context;II)Landroid/widget/Toast;");

  /// from: static public android.widget.Toast makeText(android.content.Context context, int resId, int duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Make a standard toast that just contains a text view with the text from a resource.
  ///@param context The context to use.  Usually your android.app.Application
  ///                 or android.app.Activity object.
  ///@param resId The resource id of the string resource to use.  Can be formatted text.
  ///@param duration How long to display the message.  Either \#LENGTH_SHORT or
  ///                 \#LENGTH_LONG
  ///
  /// Value is android.widget.Toast\#LENGTH_SHORT, or android.widget.Toast\#LENGTH_LONG
  ///@throws Resources.NotFoundException if the resource can't be found.
  static Toast makeText1(context_.Context context, int resId, int duration) =>
      Toast.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_makeText1,
          jni.JniType.objectType,
          [context.reference, resId, duration]).object);

  static final _id_setText =
      jniAccessors.getMethodIDOf(_classRef, "setText", "(I)V");

  /// from: public void setText(int resId)
  ///
  /// Update the text in a Toast that was previously created using one of the makeText() methods.
  ///@param resId The new text for the Toast.
  void setText(int resId) => jniAccessors.callMethodWithArgs(
      reference, _id_setText, jni.JniType.voidType, [resId]).check();

  static final _id_setText1 = jniAccessors.getMethodIDOf(
      _classRef, "setText", "(Ljava/lang/CharSequence;)V");

  /// from: public void setText(java.lang.CharSequence s)
  ///
  /// Update the text in a Toast that was previously created using one of the makeText() methods.
  ///@param s The new text for the Toast.
  void setText1(jni.JniObject s) => jniAccessors.callMethodWithArgs(
      reference, _id_setText1, jni.JniType.voidType, [s.reference]).check();
}
