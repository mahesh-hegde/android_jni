// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "LinearLayout.dart" as linearlayout_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../view/ViewGroup.dart" as viewgroup_;

import "../view/View.dart" as view_;

import "../view/ViewStructure.dart" as viewstructure_;

import "../view/autofill/AutofillValue.dart" as autofillvalue_;

import "../content/res/TypedArray.dart" as typedarray_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.RadioGroup
///
/// This class is used to create a multiple-exclusion scope for a set of radio
/// buttons. Checking one radio button that belongs to a radio group unchecks
/// any previously checked radio button within the same group.
///
///
/// Intially, all of the radio buttons are unchecked. While it is not possible
/// to uncheck a particular radio button, the radio group can be cleared to
/// remove the checked state.
///
///
/// The selection is identified by the unique id of the radio button as defined
/// in the XML layout file.
///
///
/// <strong>XML Attributes</strong>
///
/// See android.R.styleable\#RadioGroup RadioGroup Attributes,
/// android.R.styleable\#LinearLayout LinearLayout Attributes,
/// android.R.styleable\#ViewGroup ViewGroup Attributes,
/// android.R.styleable\#View View Attributes
///
/// Also see
/// android.widget.LinearLayout.LayoutParams LinearLayout.LayoutParams
/// for layout attributes.
///
///@see RadioButton
class RadioGroup extends linearlayout_.LinearLayout {
  static final _classRef = jniAccessors.getClassOf("android/widget/RadioGroup");
  RadioGroup.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  RadioGroup(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  RadioGroup.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_setOnHierarchyChangeListener1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnHierarchyChangeListener",
      "(Landroid/view/ViewGroup\$OnHierarchyChangeListener;)V");

  /// from: public void setOnHierarchyChangeListener(android.view.ViewGroup.OnHierarchyChangeListener listener)
  ///
  /// {@inheritDoc}
  void setOnHierarchyChangeListener1(
          viewgroup_.ViewGroup_OnHierarchyChangeListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setOnHierarchyChangeListener1,
          jni.JniType.voidType,
          [listener.reference]).check();

  static final _id_onFinishInflate1 =
      jniAccessors.getMethodIDOf(_classRef, "onFinishInflate", "()V");

  /// from: protected void onFinishInflate()
  ///
  /// {@inheritDoc}
  void onFinishInflate1() => jniAccessors.callMethodWithArgs(
      reference, _id_onFinishInflate1, jni.JniType.voidType, []).check();

  static final _id_addView5 = jniAccessors.getMethodIDOf(_classRef, "addView",
      "(Landroid/view/View;ILandroid/view/ViewGroup\$LayoutParams;)V");

  /// from: public void addView(android.view.View child, int index, android.view.ViewGroup.LayoutParams params)
  void addView5(view_.View child, int index,
          viewgroup_.ViewGroup_LayoutParams params) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addView5,
          jni.JniType.voidType,
          [child.reference, index, params.reference]).check();

  static final _id_check =
      jniAccessors.getMethodIDOf(_classRef, "check", "(I)V");

  /// from: public void check(int id)
  ///
  /// Sets the selection to the radio button whose identifier is passed in
  /// parameter. Using -1 as the selection identifier clears the selection;
  /// such an operation is equivalent to invoking \#clearCheck().
  ///
  ///@param id the unique id of the radio button to select in this group
  ///@see \#getCheckedRadioButtonId()
  ///@see \#clearCheck()
  void check(int id) => jniAccessors.callMethodWithArgs(
      reference, _id_check, jni.JniType.voidType, [id]).check();

  static final _id_getCheckedRadioButtonId =
      jniAccessors.getMethodIDOf(_classRef, "getCheckedRadioButtonId", "()I");

  /// from: public int getCheckedRadioButtonId()
  ///
  /// Returns the identifier of the selected radio button in this group.
  /// Upon empty selection, the returned value is -1.
  ///
  ///@return the unique id of the selected radio button in this group
  ///@see \#check(int)
  ///@see \#clearCheck()
  ///@attr ref android.R.styleable\#RadioGroup_checkedButton
  int getCheckedRadioButtonId() => jniAccessors.callMethodWithArgs(
      reference, _id_getCheckedRadioButtonId, jni.JniType.intType, []).integer;

  static final _id_clearCheck =
      jniAccessors.getMethodIDOf(_classRef, "clearCheck", "()V");

  /// from: public void clearCheck()
  ///
  /// Clears the selection. When the selection is cleared, no radio button
  /// in this group is selected and \#getCheckedRadioButtonId() returns
  /// null.
  ///
  ///@see \#check(int)
  ///@see \#getCheckedRadioButtonId()
  void clearCheck() => jniAccessors.callMethodWithArgs(
      reference, _id_clearCheck, jni.JniType.voidType, []).check();

  static final _id_setOnCheckedChangeListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnCheckedChangeListener",
      "(Landroid/widget/RadioGroup\$OnCheckedChangeListener;)V");

  /// from: public void setOnCheckedChangeListener(android.widget.RadioGroup.OnCheckedChangeListener listener)
  ///
  /// Register a callback to be invoked when the checked radio button
  /// changes in this group.
  ///
  ///@param listener the callback to call on checked state change
  void setOnCheckedChangeListener(
          RadioGroup_OnCheckedChangeListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnCheckedChangeListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_generateLayoutParams4 = jniAccessors.getMethodIDOf(
      _classRef,
      "generateLayoutParams",
      "(Landroid/util/AttributeSet;)Landroid/widget/RadioGroup\$LayoutParams;");

  /// from: public android.widget.RadioGroup.LayoutParams generateLayoutParams(android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  RadioGroup_LayoutParams generateLayoutParams4(
          attributeset_.AttributeSet attrs) =>
      RadioGroup_LayoutParams.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_generateLayoutParams4,
          jni.JniType.objectType,
          [attrs.reference]).object);

  static final _id_checkLayoutParams = jniAccessors.getMethodIDOf(_classRef,
      "checkLayoutParams", "(Landroid/view/ViewGroup\$LayoutParams;)Z");

  /// from: protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams p)
  ///
  /// {@inheritDoc}
  bool checkLayoutParams(viewgroup_.ViewGroup_LayoutParams p) =>
      jniAccessors.callMethodWithArgs(reference, _id_checkLayoutParams,
          jni.JniType.booleanType, [p.reference]).boolean;

  static final _id_generateDefaultLayoutParams1 = jniAccessors.getMethodIDOf(
      _classRef,
      "generateDefaultLayoutParams",
      "()Landroid/widget/LinearLayout\$LayoutParams;");

  /// from: protected android.widget.LinearLayout.LayoutParams generateDefaultLayoutParams()
  /// The returned object must be deleted after use, by calling the `delete` method.
  linearlayout_.LinearLayout_LayoutParams generateDefaultLayoutParams1() =>
      linearlayout_.LinearLayout_LayoutParams.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_generateDefaultLayoutParams1,
              jni.JniType.objectType, []).object);

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);

  static final _id_onProvideAutofillStructure1 = jniAccessors.getMethodIDOf(
      _classRef,
      "onProvideAutofillStructure",
      "(Landroid/view/ViewStructure;I)V");

  /// from: public void onProvideAutofillStructure(android.view.ViewStructure structure, int flags)
  void onProvideAutofillStructure1(
          viewstructure_.ViewStructure structure, int flags) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onProvideAutofillStructure1,
          jni.JniType.voidType,
          [structure.reference, flags]).check();

  static final _id_autofill2 = jniAccessors.getMethodIDOf(
      _classRef, "autofill", "(Landroid/view/autofill/AutofillValue;)V");

  /// from: public void autofill(android.view.autofill.AutofillValue value)
  void autofill2(autofillvalue_.AutofillValue value) =>
      jniAccessors.callMethodWithArgs(reference, _id_autofill2,
          jni.JniType.voidType, [value.reference]).check();

  static final _id_getAutofillType1 =
      jniAccessors.getMethodIDOf(_classRef, "getAutofillType", "()I");

  /// from: public int getAutofillType()
  ///
  /// @return Value is android.view.View\#AUTOFILL_TYPE_NONE, android.view.View\#AUTOFILL_TYPE_TEXT, android.view.View\#AUTOFILL_TYPE_TOGGLE, android.view.View\#AUTOFILL_TYPE_LIST, or android.view.View\#AUTOFILL_TYPE_DATE
  int getAutofillType1() => jniAccessors.callMethodWithArgs(
      reference, _id_getAutofillType1, jni.JniType.intType, []).integer;

  static final _id_getAutofillValue1 = jniAccessors.getMethodIDOf(
      _classRef, "getAutofillValue", "()Landroid/view/autofill/AutofillValue;");

  /// from: public android.view.autofill.AutofillValue getAutofillValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  autofillvalue_.AutofillValue getAutofillValue1() =>
      autofillvalue_.AutofillValue.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAutofillValue1, jni.JniType.objectType, []).object);
}

/// from: android.widget.RadioGroup$OnCheckedChangeListener
///
/// Interface definition for a callback to be invoked when the checked
/// radio button changed in this group.
///
class RadioGroup_OnCheckedChangeListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/widget/RadioGroup\$OnCheckedChangeListener");
  RadioGroup_OnCheckedChangeListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onCheckedChanged = jniAccessors.getMethodIDOf(
      _classRef, "onCheckedChanged", "(Landroid/widget/RadioGroup;I)V");

  /// from: public abstract void onCheckedChanged(android.widget.RadioGroup group, int checkedId)
  ///
  /// Called when the checked radio button has changed. When the
  /// selection is cleared, checkedId is -1.
  ///
  ///@param group the group in which the checked radio button has changed
  ///@param checkedId the unique identifier of the newly checked radio button
  void onCheckedChanged(RadioGroup group, int checkedId) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCheckedChanged,
          jni.JniType.voidType, [group.reference, checkedId]).check();
}

/// from: android.widget.RadioGroup$LayoutParams
///
/// This set of layout parameters defaults the width and the height of
/// the children to \#WRAP_CONTENT when they are not specified in the
/// XML file. Otherwise, this class ussed the value read from the XML file.
///
///
/// See
/// android.R.styleable\#LinearLayout_Layout LinearLayout Attributes
/// for a list of all child view attributes that this class supports.
///
class RadioGroup_LayoutParams extends linearlayout_.LinearLayout_LayoutParams {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/RadioGroup\$LayoutParams");
  RadioGroup_LayoutParams.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context c, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  RadioGroup_LayoutParams(context_.Context c, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [c.reference, attrs.reference]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int w, int h)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  RadioGroup_LayoutParams.ctor1(int w, int h)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [w, h]).object);

  static final _id_ctor4 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIF)V");

  /// from: public void <init>(int w, int h, float initWeight)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  RadioGroup_LayoutParams.ctor4(int w, int h, double initWeight)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [w, h, initWeight]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/view/ViewGroup\$LayoutParams;)V");

  /// from: public void <init>(android.view.ViewGroup.LayoutParams p)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  RadioGroup_LayoutParams.ctor2(viewgroup_.ViewGroup_LayoutParams p)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [p.reference]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/view/ViewGroup\$MarginLayoutParams;)V");

  /// from: public void <init>(android.view.ViewGroup.MarginLayoutParams source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  RadioGroup_LayoutParams.ctor3(viewgroup_.ViewGroup_MarginLayoutParams source)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor3, [source.reference]).object);

  static final _id_setBaseAttributes1 = jniAccessors.getMethodIDOf(
      _classRef, "setBaseAttributes", "(Landroid/content/res/TypedArray;II)V");

  /// from: protected void setBaseAttributes(android.content.res.TypedArray a, int widthAttr, int heightAttr)
  ///
  /// Fixes the child's width to
  /// android.view.ViewGroup.LayoutParams\#WRAP_CONTENT and the child's
  /// height to  android.view.ViewGroup.LayoutParams\#WRAP_CONTENT
  /// when not specified in the XML file.
  ///
  ///@param a the styled attributes set
  ///@param widthAttr the width attribute to fetch
  ///@param heightAttr the height attribute to fetch
  void setBaseAttributes1(
          typedarray_.TypedArray a, int widthAttr, int heightAttr) =>
      jniAccessors.callMethodWithArgs(reference, _id_setBaseAttributes1,
          jni.JniType.voidType, [a.reference, widthAttr, heightAttr]).check();
}
