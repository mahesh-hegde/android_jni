// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.Advanceable
///
/// This interface can be implemented by any collection-type view which has a notion of
/// progressing through its set of children. The interface exists to give AppWidgetHosts a way of
/// taking responsibility for automatically advancing such collections.
class Advanceable extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/Advanceable");
  Advanceable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_advance =
      jniAccessors.getMethodIDOf(_classRef, "advance", "()V");

  /// from: public abstract void advance()
  ///
  /// Advances this collection, eg. shows the next view.
  void advance() => jniAccessors.callMethodWithArgs(
      reference, _id_advance, jni.JniType.voidType, []).check();

  static final _id_fyiWillBeAdvancedByHostKThx = jniAccessors.getMethodIDOf(
      _classRef, "fyiWillBeAdvancedByHostKThx", "()V");

  /// from: public abstract void fyiWillBeAdvancedByHostKThx()
  ///
  /// Called by the AppWidgetHost once before it begins to call advance(), allowing the
  /// collection to do any required setup.
  void fyiWillBeAdvancedByHostKThx() => jniAccessors.callMethodWithArgs(
      reference,
      _id_fyiWillBeAdvancedByHostKThx,
      jni.JniType.voidType, []).check();
}
