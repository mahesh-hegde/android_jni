// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "EditText.dart" as edittext_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../content/res/Resources.dart" as resources_;

import "../view/View.dart" as view_;

import "../graphics/drawable/Drawable.dart" as drawable_;

import "AdapterView.dart" as adapterview_;

import "ListAdapter.dart" as listadapter_;

import "../view/KeyEvent.dart" as keyevent_;

import "../view/inputmethod/CompletionInfo.dart" as completioninfo_;

import "../graphics/Rect.dart" as rect_;

import "Filter.dart" as filter_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.AutoCompleteTextView
///
/// An editable text view that shows completion suggestions automatically
/// while the user is typing. The list of suggestions is displayed in a drop
/// down menu from which the user can choose an item to replace the content
/// of the edit box with.
///
///
/// The drop down can be dismissed at any time by pressing the back key or,
/// if no item is selected in the drop down, by pressing the enter/dpad center
/// key.
///
///
/// The list of suggestions is obtained from a data adapter and appears
/// only after a given number of characters defined by
/// \#getThreshold() the threshold.
///
///
/// The following code snippet shows how to create a text view which suggests
/// various countries names while the user is typing:
///
///
/// <pre class="prettyprint">
/// public class CountriesActivity extends Activity {
///     protected void onCreate(Bundle icicle) {
///         super.onCreate(icicle);
///         setContentView(R.layout.countries);
///
///         ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this,
///                 android.R.layout.simple_dropdown_item_1line, COUNTRIES);
///         AutoCompleteTextView textView = (AutoCompleteTextView)
///                 findViewById(R.id.countries_list);
///         textView.setAdapter(adapter);
///     }
///
///     private static final String[] COUNTRIES = new String[] {
///         "Belgium", "France", "Italy", "Germany", "Spain"
///     };
/// }
/// </pre>
///
/// See the <a href="{@docRoot}guide/topics/ui/controls/text.html">Text Fields</a>
/// guide.
///
///@attr ref android.R.styleable\#AutoCompleteTextView_completionHint
///@attr ref android.R.styleable\#AutoCompleteTextView_completionThreshold
///@attr ref android.R.styleable\#AutoCompleteTextView_completionHintView
///@attr ref android.R.styleable\#AutoCompleteTextView_dropDownSelector
///@attr ref android.R.styleable\#AutoCompleteTextView_dropDownAnchor
///@attr ref android.R.styleable\#AutoCompleteTextView_dropDownWidth
///@attr ref android.R.styleable\#AutoCompleteTextView_dropDownHeight
///@attr ref android.R.styleable\#ListPopupWindow_dropDownVerticalOffset
///@attr ref android.R.styleable\#ListPopupWindow_dropDownHorizontalOffset
class AutoCompleteTextView extends edittext_.EditText {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/AutoCompleteTextView");
  AutoCompleteTextView.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new auto-complete text view with the given context's theme.
  ///@param context The Context the view is running in, through which it can
  ///                access the current theme, resources, etc.
  AutoCompleteTextView(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new auto-complete text view with the given context's theme
  /// and the supplied attribute set.
  ///@param context The Context the view is running in, through which it can
  ///                access the current theme, resources, etc.
  ///@param attrs The attributes of the XML tag that is inflating the view.
  AutoCompleteTextView.ctor1(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new auto-complete text view with the given context's theme,
  /// the supplied attribute set, and default style attribute.
  ///@param context The Context the view is running in, through which it can
  ///                access the current theme, resources, etc.
  ///@param attrs The attributes of the XML tag that is inflating the view.
  ///@param defStyleAttr An attribute in the current theme that contains a
  ///                     reference to a style resource that supplies default
  ///                     values for the view. Can be 0 to not look for
  ///                     defaults.
  AutoCompleteTextView.ctor2(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new auto-complete text view with the given context's theme,
  /// the supplied attribute set, and default styles.
  ///@param context The Context the view is running in, through which it can
  ///                access the current theme, resources, etc.
  ///@param attrs The attributes of the XML tag that is inflating the view.
  ///@param defStyleAttr An attribute in the current theme that contains a
  ///                     reference to a style resource that supplies default
  ///                     values for the view. Can be 0 to not look for
  ///                     defaults.
  ///@param defStyleRes A resource identifier of a style resource that
  ///                    supplies default values for the view, used only if
  ///                    defStyleAttr is 0 or can not be found in the theme.
  ///                    Can be 0 to not look for defaults.
  AutoCompleteTextView.ctor3(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;IILandroid/content/res/Resources\$Theme;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes, android.content.res.Resources.Theme popupTheme)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new auto-complete text view with the given context, the
  /// supplied attribute set, default styles, and the theme against which the
  /// completion popup should be inflated.
  ///@param context The context against which the view is inflated, which
  ///                provides access to the current theme, resources, etc.
  ///@param attrs The attributes of the XML tag that is inflating the view.
  ///@param defStyleAttr An attribute in the current theme that contains a
  ///                     reference to a style resource that supplies default
  ///                     values for the view. Can be 0 to not look for
  ///                     defaults.
  ///@param defStyleRes A resource identifier of a style resource that
  ///                    supplies default values for the view, used only if
  ///                    defStyleAttr is 0 or can not be found in the theme.
  ///                    Can be 0 to not look for defaults.
  ///@param popupTheme The theme against which the completion popup window
  ///                   should be inflated. May be {@code null} to use the
  ///                   view theme. If set, this will override any value
  ///                   specified by
  ///                   android.R.styleable\#AutoCompleteTextView_popupTheme.
  AutoCompleteTextView.ctor4(
      context_.Context context,
      attributeset_.AttributeSet attrs,
      int defStyleAttr,
      int defStyleRes,
      resources_.Resources_Theme popupTheme)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor4, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes,
          popupTheme.reference
        ]).object);

  static final _id_setOnClickListener1 = jniAccessors.getMethodIDOf(_classRef,
      "setOnClickListener", "(Landroid/view/View\$OnClickListener;)V");

  /// from: public void setOnClickListener(android.view.View.OnClickListener listener)
  void setOnClickListener1(view_.View_OnClickListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnClickListener1,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_setCompletionHint = jniAccessors.getMethodIDOf(
      _classRef, "setCompletionHint", "(Ljava/lang/CharSequence;)V");

  /// from: public void setCompletionHint(java.lang.CharSequence hint)
  ///
  /// Sets the optional hint text that is displayed at the bottom of the
  /// the matching list.  This can be used as a cue to the user on how to
  /// best use the list, or to provide extra information.
  ///
  ///@param hint the text to be displayed to the user
  ///@see \#getCompletionHint()
  ///@attr ref android.R.styleable\#AutoCompleteTextView_completionHint
  void setCompletionHint(jni.JniObject hint) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCompletionHint,
      jni.JniType.voidType,
      [hint.reference]).check();

  static final _id_getCompletionHint = jniAccessors.getMethodIDOf(
      _classRef, "getCompletionHint", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getCompletionHint()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the optional hint text displayed at the bottom of the the matching list.
  ///@return The hint text, if any
  ///@see \#setCompletionHint(CharSequence)
  ///@attr ref android.R.styleable\#AutoCompleteTextView_completionHint
  jni.JniObject getCompletionHint() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCompletionHint, jni.JniType.objectType, []).object);

  static final _id_getDropDownWidth =
      jniAccessors.getMethodIDOf(_classRef, "getDropDownWidth", "()I");

  /// from: public int getDropDownWidth()
  ///
  /// Returns the current width for the auto-complete drop down list. This can
  /// be a fixed width, or ViewGroup.LayoutParams\#MATCH_PARENT to fill the screen, or
  /// ViewGroup.LayoutParams\#WRAP_CONTENT to fit the width of its anchor view.
  ///
  ///@return the width for the drop down list
  ///@attr ref android.R.styleable\#AutoCompleteTextView_dropDownWidth
  int getDropDownWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getDropDownWidth, jni.JniType.intType, []).integer;

  static final _id_setDropDownWidth =
      jniAccessors.getMethodIDOf(_classRef, "setDropDownWidth", "(I)V");

  /// from: public void setDropDownWidth(int width)
  ///
  /// Sets the current width for the auto-complete drop down list. This can
  /// be a fixed width, or ViewGroup.LayoutParams\#MATCH_PARENT to fill the screen, or
  /// ViewGroup.LayoutParams\#WRAP_CONTENT to fit the width of its anchor view.
  ///
  ///@param width the width to use
  ///@attr ref android.R.styleable\#AutoCompleteTextView_dropDownWidth
  void setDropDownWidth(int width) => jniAccessors.callMethodWithArgs(
      reference, _id_setDropDownWidth, jni.JniType.voidType, [width]).check();

  static final _id_getDropDownHeight =
      jniAccessors.getMethodIDOf(_classRef, "getDropDownHeight", "()I");

  /// from: public int getDropDownHeight()
  ///
  /// Returns the current height for the auto-complete drop down list. This can
  /// be a fixed height, or ViewGroup.LayoutParams\#MATCH_PARENT to fill
  /// the screen, or ViewGroup.LayoutParams\#WRAP_CONTENT to fit the height
  /// of the drop down's content.
  ///
  ///@return the height for the drop down list
  ///@attr ref android.R.styleable\#AutoCompleteTextView_dropDownHeight
  int getDropDownHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getDropDownHeight, jni.JniType.intType, []).integer;

  static final _id_setDropDownHeight =
      jniAccessors.getMethodIDOf(_classRef, "setDropDownHeight", "(I)V");

  /// from: public void setDropDownHeight(int height)
  ///
  /// Sets the current height for the auto-complete drop down list. This can
  /// be a fixed height, or ViewGroup.LayoutParams\#MATCH_PARENT to fill
  /// the screen, or ViewGroup.LayoutParams\#WRAP_CONTENT to fit the height
  /// of the drop down's content.
  ///
  ///@param height the height to use
  ///@attr ref android.R.styleable\#AutoCompleteTextView_dropDownHeight
  void setDropDownHeight(int height) => jniAccessors.callMethodWithArgs(
      reference, _id_setDropDownHeight, jni.JniType.voidType, [height]).check();

  static final _id_getDropDownAnchor =
      jniAccessors.getMethodIDOf(_classRef, "getDropDownAnchor", "()I");

  /// from: public int getDropDownAnchor()
  ///
  /// Returns the id for the view that the auto-complete drop down list is anchored to.
  ///
  ///@return the view's id, or View\#NO_ID if none specified
  ///@attr ref android.R.styleable\#AutoCompleteTextView_dropDownAnchor
  int getDropDownAnchor() => jniAccessors.callMethodWithArgs(
      reference, _id_getDropDownAnchor, jni.JniType.intType, []).integer;

  static final _id_setDropDownAnchor =
      jniAccessors.getMethodIDOf(_classRef, "setDropDownAnchor", "(I)V");

  /// from: public void setDropDownAnchor(int id)
  ///
  /// Sets the view to which the auto-complete drop down list should anchor. The view
  /// corresponding to this id will not be loaded until the next time it is needed to avoid
  /// loading a view which is not yet instantiated.
  ///
  ///@param id the id to anchor the drop down list view to
  ///@attr ref android.R.styleable\#AutoCompleteTextView_dropDownAnchor
  void setDropDownAnchor(int id) => jniAccessors.callMethodWithArgs(
      reference, _id_setDropDownAnchor, jni.JniType.voidType, [id]).check();

  static final _id_getDropDownBackground = jniAccessors.getMethodIDOf(_classRef,
      "getDropDownBackground", "()Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getDropDownBackground()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the background of the auto-complete drop-down list.
  ///
  ///@return the background drawable
  ///@attr ref android.R.styleable\#PopupWindow_popupBackground
  drawable_.Drawable getDropDownBackground() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getDropDownBackground, jni.JniType.objectType, []).object);

  static final _id_setDropDownBackgroundDrawable = jniAccessors.getMethodIDOf(
      _classRef,
      "setDropDownBackgroundDrawable",
      "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable d)
  ///
  /// Sets the background of the auto-complete drop-down list.
  ///
  ///@param d the drawable to set as the background
  ///@attr ref android.R.styleable\#PopupWindow_popupBackground
  void setDropDownBackgroundDrawable(drawable_.Drawable d) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setDropDownBackgroundDrawable,
          jni.JniType.voidType,
          [d.reference]).check();

  static final _id_setDropDownBackgroundResource = jniAccessors.getMethodIDOf(
      _classRef, "setDropDownBackgroundResource", "(I)V");

  /// from: public void setDropDownBackgroundResource(int id)
  ///
  /// Sets the background of the auto-complete drop-down list.
  ///
  ///@param id the id of the drawable to set as the background
  ///@attr ref android.R.styleable\#PopupWindow_popupBackground
  void setDropDownBackgroundResource(int id) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setDropDownBackgroundResource,
      jni.JniType.voidType,
      [id]).check();

  static final _id_setDropDownVerticalOffset = jniAccessors.getMethodIDOf(
      _classRef, "setDropDownVerticalOffset", "(I)V");

  /// from: public void setDropDownVerticalOffset(int offset)
  ///
  /// Sets the vertical offset used for the auto-complete drop-down list.
  ///
  ///@param offset the vertical offset
  ///@attr ref android.R.styleable\#ListPopupWindow_dropDownVerticalOffset
  void setDropDownVerticalOffset(int offset) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setDropDownVerticalOffset,
      jni.JniType.voidType,
      [offset]).check();

  static final _id_getDropDownVerticalOffset =
      jniAccessors.getMethodIDOf(_classRef, "getDropDownVerticalOffset", "()I");

  /// from: public int getDropDownVerticalOffset()
  ///
  /// Gets the vertical offset used for the auto-complete drop-down list.
  ///
  ///@return the vertical offset
  ///@attr ref android.R.styleable\#ListPopupWindow_dropDownVerticalOffset
  int getDropDownVerticalOffset() => jniAccessors.callMethodWithArgs(reference,
      _id_getDropDownVerticalOffset, jni.JniType.intType, []).integer;

  static final _id_setDropDownHorizontalOffset = jniAccessors.getMethodIDOf(
      _classRef, "setDropDownHorizontalOffset", "(I)V");

  /// from: public void setDropDownHorizontalOffset(int offset)
  ///
  /// Sets the horizontal offset used for the auto-complete drop-down list.
  ///
  ///@param offset the horizontal offset
  ///@attr ref android.R.styleable\#ListPopupWindow_dropDownHorizontalOffset
  void setDropDownHorizontalOffset(int offset) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setDropDownHorizontalOffset,
          jni.JniType.voidType,
          [offset]).check();

  static final _id_getDropDownHorizontalOffset = jniAccessors.getMethodIDOf(
      _classRef, "getDropDownHorizontalOffset", "()I");

  /// from: public int getDropDownHorizontalOffset()
  ///
  /// Gets the horizontal offset used for the auto-complete drop-down list.
  ///
  ///@return the horizontal offset
  ///@attr ref android.R.styleable\#ListPopupWindow_dropDownHorizontalOffset
  int getDropDownHorizontalOffset() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getDropDownHorizontalOffset,
      jni.JniType.intType, []).integer;

  static final _id_getThreshold =
      jniAccessors.getMethodIDOf(_classRef, "getThreshold", "()I");

  /// from: public int getThreshold()
  ///
  /// Returns the number of characters the user must type before the drop
  /// down list is shown.
  ///
  ///@return the minimum number of characters to type to show the drop down
  ///@see \#setThreshold(int)
  ///@attr ref android.R.styleable\#AutoCompleteTextView_completionThreshold
  int getThreshold() => jniAccessors.callMethodWithArgs(
      reference, _id_getThreshold, jni.JniType.intType, []).integer;

  static final _id_setThreshold =
      jniAccessors.getMethodIDOf(_classRef, "setThreshold", "(I)V");

  /// from: public void setThreshold(int threshold)
  ///
  /// Specifies the minimum number of characters the user has to type in the
  /// edit box before the drop down list is shown.
  ///
  ///
  /// When <code>threshold</code> is less than or equals 0, a threshold of
  /// 1 is applied.
  ///
  ///@param threshold the number of characters to type before the drop down
  ///                  is shown
  ///@see \#getThreshold()
  ///@attr ref android.R.styleable\#AutoCompleteTextView_completionThreshold
  void setThreshold(int threshold) => jniAccessors.callMethodWithArgs(
      reference, _id_setThreshold, jni.JniType.voidType, [threshold]).check();

  static final _id_setOnItemClickListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnItemClickListener",
      "(Landroid/widget/AdapterView\$OnItemClickListener;)V");

  /// from: public void setOnItemClickListener(android.widget.AdapterView.OnItemClickListener l)
  ///
  /// Sets the listener that will be notified when the user clicks an item
  /// in the drop down list.
  ///
  ///@param l the item click listener
  void setOnItemClickListener(adapterview_.AdapterView_OnItemClickListener l) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnItemClickListener,
          jni.JniType.voidType, [l.reference]).check();

  static final _id_setOnItemSelectedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnItemSelectedListener",
      "(Landroid/widget/AdapterView\$OnItemSelectedListener;)V");

  /// from: public void setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener l)
  ///
  /// Sets the listener that will be notified when the user selects an item
  /// in the drop down list.
  ///
  ///@param l the item selected listener
  void setOnItemSelectedListener(
          adapterview_.AdapterView_OnItemSelectedListener l) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnItemSelectedListener,
          jni.JniType.voidType, [l.reference]).check();

  static final _id_getItemClickListener = jniAccessors.getMethodIDOf(
      _classRef,
      "getItemClickListener",
      "()Landroid/widget/AdapterView\$OnItemClickListener;");

  /// from: public android.widget.AdapterView.OnItemClickListener getItemClickListener()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the listener that is notified whenever the user clicks an item
  /// in the drop down list.
  ///
  ///@return the item click listener
  ///@deprecated Use \#getOnItemClickListener() intead
  adapterview_.AdapterView_OnItemClickListener getItemClickListener() =>
      adapterview_.AdapterView_OnItemClickListener.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getItemClickListener,
              jni.JniType.objectType, []).object);

  static final _id_getItemSelectedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "getItemSelectedListener",
      "()Landroid/widget/AdapterView\$OnItemSelectedListener;");

  /// from: public android.widget.AdapterView.OnItemSelectedListener getItemSelectedListener()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the listener that is notified whenever the user selects an
  /// item in the drop down list.
  ///
  ///@return the item selected listener
  ///@deprecated Use \#getOnItemSelectedListener() intead
  adapterview_.AdapterView_OnItemSelectedListener getItemSelectedListener() =>
      adapterview_.AdapterView_OnItemSelectedListener.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getItemSelectedListener,
              jni.JniType.objectType, []).object);

  static final _id_getOnItemClickListener = jniAccessors.getMethodIDOf(
      _classRef,
      "getOnItemClickListener",
      "()Landroid/widget/AdapterView\$OnItemClickListener;");

  /// from: public android.widget.AdapterView.OnItemClickListener getOnItemClickListener()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the listener that is notified whenever the user clicks an item
  /// in the drop down list.
  ///
  ///@return the item click listener
  adapterview_.AdapterView_OnItemClickListener getOnItemClickListener() =>
      adapterview_.AdapterView_OnItemClickListener.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getOnItemClickListener,
              jni.JniType.objectType, []).object);

  static final _id_getOnItemSelectedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "getOnItemSelectedListener",
      "()Landroid/widget/AdapterView\$OnItemSelectedListener;");

  /// from: public android.widget.AdapterView.OnItemSelectedListener getOnItemSelectedListener()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the listener that is notified whenever the user selects an
  /// item in the drop down list.
  ///
  ///@return the item selected listener
  adapterview_.AdapterView_OnItemSelectedListener getOnItemSelectedListener() =>
      adapterview_.AdapterView_OnItemSelectedListener.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getOnItemSelectedListener,
              jni.JniType.objectType, []).object);

  static final _id_setOnDismissListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnDismissListener",
      "(Landroid/widget/AutoCompleteTextView\$OnDismissListener;)V");

  /// from: public void setOnDismissListener(android.widget.AutoCompleteTextView.OnDismissListener dismissListener)
  ///
  /// Set a listener that will be invoked whenever the AutoCompleteTextView's
  /// list of completions is dismissed.
  ///@param dismissListener Listener to invoke when completions are dismissed
  void setOnDismissListener(
          AutoCompleteTextView_OnDismissListener dismissListener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnDismissListener,
          jni.JniType.voidType, [dismissListener.reference]).check();

  static final _id_getAdapter = jniAccessors.getMethodIDOf(
      _classRef, "getAdapter", "()Landroid/widget/ListAdapter;");

  /// from: public android.widget.ListAdapter getAdapter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a filterable list adapter used for auto completion.
  ///
  ///@return a data adapter used for auto completion
  listadapter_.ListAdapter getAdapter() =>
      listadapter_.ListAdapter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAdapter, jni.JniType.objectType, []).object);

  static final _id_onKeyPreIme1 = jniAccessors.getMethodIDOf(
      _classRef, "onKeyPreIme", "(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyPreIme(int keyCode, android.view.KeyEvent event)
  bool onKeyPreIme1(int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyPreIme1,
          jni.JniType.booleanType, [keyCode, event.reference]).boolean;

  static final _id_onKeyUp1 = jniAccessors.getMethodIDOf(
      _classRef, "onKeyUp", "(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyUp(int keyCode, android.view.KeyEvent event)
  bool onKeyUp1(int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyUp1,
          jni.JniType.booleanType, [keyCode, event.reference]).boolean;

  static final _id_onKeyDown1 = jniAccessors.getMethodIDOf(
      _classRef, "onKeyDown", "(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyDown(int keyCode, android.view.KeyEvent event)
  bool onKeyDown1(int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyDown1,
          jni.JniType.booleanType, [keyCode, event.reference]).boolean;

  static final _id_enoughToFilter =
      jniAccessors.getMethodIDOf(_classRef, "enoughToFilter", "()Z");

  /// from: public boolean enoughToFilter()
  ///
  /// Returns <code>true</code> if the amount of text in the field meets
  /// or exceeds the \#getThreshold requirement.  You can override
  /// this to impose a different standard for when filtering will be
  /// triggered.
  bool enoughToFilter() => jniAccessors.callMethodWithArgs(
      reference, _id_enoughToFilter, jni.JniType.booleanType, []).boolean;

  static final _id_isPopupShowing =
      jniAccessors.getMethodIDOf(_classRef, "isPopupShowing", "()Z");

  /// from: public boolean isPopupShowing()
  ///
  /// Indicates whether the popup menu is showing.
  ///
  ///@return true if the popup menu is showing, false otherwise
  bool isPopupShowing() => jniAccessors.callMethodWithArgs(
      reference, _id_isPopupShowing, jni.JniType.booleanType, []).boolean;

  static final _id_convertSelectionToString = jniAccessors.getMethodIDOf(
      _classRef,
      "convertSelectionToString",
      "(Ljava/lang/Object;)Ljava/lang/CharSequence;");

  /// from: protected java.lang.CharSequence convertSelectionToString(java.lang.Object selectedItem)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Converts the selected item from the drop down list into a sequence
  /// of character that can be used in the edit box.
  ///
  ///@param selectedItem the item selected by the user for completion
  ///@return a sequence of characters representing the selected suggestion
  jni.JniObject convertSelectionToString(jni.JniObject selectedItem) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_convertSelectionToString,
          jni.JniType.objectType,
          [selectedItem.reference]).object);

  static final _id_clearListSelection =
      jniAccessors.getMethodIDOf(_classRef, "clearListSelection", "()V");

  /// from: public void clearListSelection()
  ///
  /// Clear the list selection.  This may only be temporary, as user input will often bring
  /// it back.
  void clearListSelection() => jniAccessors.callMethodWithArgs(
      reference, _id_clearListSelection, jni.JniType.voidType, []).check();

  static final _id_setListSelection =
      jniAccessors.getMethodIDOf(_classRef, "setListSelection", "(I)V");

  /// from: public void setListSelection(int position)
  ///
  /// Set the position of the dropdown view selection.
  ///@param position The position to move the selector to.
  void setListSelection(int position) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setListSelection,
      jni.JniType.voidType,
      [position]).check();

  static final _id_getListSelection =
      jniAccessors.getMethodIDOf(_classRef, "getListSelection", "()I");

  /// from: public int getListSelection()
  ///
  /// Get the position of the dropdown view selection, if there is one.  Returns
  /// ListView\#INVALID_POSITION ListView.INVALID_POSITION if there is no dropdown or if
  /// there is no selection.
  ///@return the position of the current selection, if there is one, or
  /// ListView\#INVALID_POSITION ListView.INVALID_POSITION if not.
  ///@see ListView\#getSelectedItemPosition()
  int getListSelection() => jniAccessors.callMethodWithArgs(
      reference, _id_getListSelection, jni.JniType.intType, []).integer;

  static final _id_performFiltering = jniAccessors.getMethodIDOf(
      _classRef, "performFiltering", "(Ljava/lang/CharSequence;I)V");

  /// from: protected void performFiltering(java.lang.CharSequence text, int keyCode)
  ///
  /// Starts filtering the content of the drop down list. The filtering
  /// pattern is the content of the edit box. Subclasses should override this
  /// method to filter with a different pattern, for instance a substring of
  /// <code>text</code>.
  ///
  ///@param text the filtering pattern
  ///@param keyCode the last character inserted in the edit box; beware that
  /// this will be null when text is being added through a soft input method.
  void performFiltering(jni.JniObject text, int keyCode) =>
      jniAccessors.callMethodWithArgs(reference, _id_performFiltering,
          jni.JniType.voidType, [text.reference, keyCode]).check();

  static final _id_performCompletion =
      jniAccessors.getMethodIDOf(_classRef, "performCompletion", "()V");

  /// from: public void performCompletion()
  ///
  /// Performs the text completion by converting the selected item from
  /// the drop down list into a string, replacing the text box's content with
  /// this string and finally dismissing the drop down menu.
  ///
  void performCompletion() => jniAccessors.callMethodWithArgs(
      reference, _id_performCompletion, jni.JniType.voidType, []).check();

  static final _id_onCommitCompletion1 = jniAccessors.getMethodIDOf(_classRef,
      "onCommitCompletion", "(Landroid/view/inputmethod/CompletionInfo;)V");

  /// from: public void onCommitCompletion(android.view.inputmethod.CompletionInfo completion)
  void onCommitCompletion1(completioninfo_.CompletionInfo completion) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCommitCompletion1,
          jni.JniType.voidType, [completion.reference]).check();

  static final _id_isPerformingCompletion =
      jniAccessors.getMethodIDOf(_classRef, "isPerformingCompletion", "()Z");

  /// from: public boolean isPerformingCompletion()
  ///
  /// Identifies whether the view is currently performing a text completion, so subclasses
  /// can decide whether to respond to text changed events.
  bool isPerformingCompletion() => jniAccessors.callMethodWithArgs(reference,
      _id_isPerformingCompletion, jni.JniType.booleanType, []).boolean;

  static final _id_setText5 = jniAccessors.getMethodIDOf(
      _classRef, "setText", "(Ljava/lang/CharSequence;Z)V");

  /// from: public void setText(java.lang.CharSequence text, boolean filter)
  ///
  /// Like \#setText(CharSequence), except that it can disable filtering.
  ///@param filter If <code>false</code>, no filtering will be performed
  ///        as a result of this call.
  void setText5(jni.JniObject text, bool filter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setText5,
          jni.JniType.voidType, [text.reference, filter]).check();

  static final _id_replaceText = jniAccessors.getMethodIDOf(
      _classRef, "replaceText", "(Ljava/lang/CharSequence;)V");

  /// from: protected void replaceText(java.lang.CharSequence text)
  ///
  /// Performs the text completion by replacing the current text by the
  /// selected item. Subclasses should override this method to avoid replacing
  /// the whole content of the edit box.
  ///
  ///@param text the selected suggestion in the drop down list
  void replaceText(jni.JniObject text) => jniAccessors.callMethodWithArgs(
      reference,
      _id_replaceText,
      jni.JniType.voidType,
      [text.reference]).check();

  static final _id_onFilterComplete =
      jniAccessors.getMethodIDOf(_classRef, "onFilterComplete", "(I)V");

  /// from: public void onFilterComplete(int count)
  ///
  /// {@inheritDoc}
  void onFilterComplete(int count) => jniAccessors.callMethodWithArgs(
      reference, _id_onFilterComplete, jni.JniType.voidType, [count]).check();

  static final _id_onWindowFocusChanged1 =
      jniAccessors.getMethodIDOf(_classRef, "onWindowFocusChanged", "(Z)V");

  /// from: public void onWindowFocusChanged(boolean hasWindowFocus)
  void onWindowFocusChanged1(bool hasWindowFocus) =>
      jniAccessors.callMethodWithArgs(reference, _id_onWindowFocusChanged1,
          jni.JniType.voidType, [hasWindowFocus]).check();

  static final _id_onDisplayHint1 =
      jniAccessors.getMethodIDOf(_classRef, "onDisplayHint", "(I)V");

  /// from: protected void onDisplayHint(int hint)
  void onDisplayHint1(int hint) => jniAccessors.callMethodWithArgs(
      reference, _id_onDisplayHint1, jni.JniType.voidType, [hint]).check();

  static final _id_onFocusChanged1 = jniAccessors.getMethodIDOf(
      _classRef, "onFocusChanged", "(ZILandroid/graphics/Rect;)V");

  /// from: protected void onFocusChanged(boolean focused, int direction, android.graphics.Rect previouslyFocusedRect)
  void onFocusChanged1(
          bool focused, int direction, rect_.Rect previouslyFocusedRect) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onFocusChanged1,
          jni.JniType.voidType,
          [focused, direction, previouslyFocusedRect.reference]).check();

  static final _id_onAttachedToWindow1 =
      jniAccessors.getMethodIDOf(_classRef, "onAttachedToWindow", "()V");

  /// from: protected void onAttachedToWindow()
  void onAttachedToWindow1() => jniAccessors.callMethodWithArgs(
      reference, _id_onAttachedToWindow1, jni.JniType.voidType, []).check();

  static final _id_onDetachedFromWindow1 =
      jniAccessors.getMethodIDOf(_classRef, "onDetachedFromWindow", "()V");

  /// from: protected void onDetachedFromWindow()
  void onDetachedFromWindow1() => jniAccessors.callMethodWithArgs(
      reference, _id_onDetachedFromWindow1, jni.JniType.voidType, []).check();

  static final _id_dismissDropDown =
      jniAccessors.getMethodIDOf(_classRef, "dismissDropDown", "()V");

  /// from: public void dismissDropDown()
  ///
  /// Closes the drop down if present on screen.
  ///
  void dismissDropDown() => jniAccessors.callMethodWithArgs(
      reference, _id_dismissDropDown, jni.JniType.voidType, []).check();

  static final _id_setFrame1 =
      jniAccessors.getMethodIDOf(_classRef, "setFrame", "(IIII)Z");

  /// from: protected boolean setFrame(int l, int t, int r, int b)
  bool setFrame1(int l, int t, int r, int b) => jniAccessors.callMethodWithArgs(
      reference, _id_setFrame1, jni.JniType.booleanType, [l, t, r, b]).boolean;

  static final _id_showDropDown =
      jniAccessors.getMethodIDOf(_classRef, "showDropDown", "()V");

  /// from: public void showDropDown()
  ///
  /// Displays the drop down on screen.
  ///
  void showDropDown() => jniAccessors.callMethodWithArgs(
      reference, _id_showDropDown, jni.JniType.voidType, []).check();

  static final _id_setValidator = jniAccessors.getMethodIDOf(_classRef,
      "setValidator", "(Landroid/widget/AutoCompleteTextView\$Validator;)V");

  /// from: public void setValidator(android.widget.AutoCompleteTextView.Validator validator)
  ///
  /// Sets the validator used to perform text validation.
  ///@param validator The validator used to validate the text entered in this widget.
  ///@see \#getValidator()
  ///@see \#performValidation()
  void setValidator(AutoCompleteTextView_Validator validator) =>
      jniAccessors.callMethodWithArgs(reference, _id_setValidator,
          jni.JniType.voidType, [validator.reference]).check();

  static final _id_getValidator = jniAccessors.getMethodIDOf(_classRef,
      "getValidator", "()Landroid/widget/AutoCompleteTextView\$Validator;");

  /// from: public android.widget.AutoCompleteTextView.Validator getValidator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Validator set with \#setValidator,
  /// or <code>null</code> if it was not set.
  ///@see \#setValidator(android.widget.AutoCompleteTextView.Validator)
  ///@see \#performValidation()
  AutoCompleteTextView_Validator getValidator() =>
      AutoCompleteTextView_Validator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getValidator, jni.JniType.objectType, []).object);

  static final _id_performValidation =
      jniAccessors.getMethodIDOf(_classRef, "performValidation", "()V");

  /// from: public void performValidation()
  ///
  /// If a validator was set on this view and the current string is not valid,
  /// ask the validator to fix it.
  ///@see \#getValidator()
  ///@see \#setValidator(android.widget.AutoCompleteTextView.Validator)
  void performValidation() => jniAccessors.callMethodWithArgs(
      reference, _id_performValidation, jni.JniType.voidType, []).check();

  static final _id_getFilter = jniAccessors.getMethodIDOf(
      _classRef, "getFilter", "()Landroid/widget/Filter;");

  /// from: protected android.widget.Filter getFilter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Filter obtained from Filterable\#getFilter,
  /// or <code>null</code> if \#setAdapter was not called with
  /// a Filterable.
  filter_.Filter getFilter() =>
      filter_.Filter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFilter, jni.JniType.objectType, []).object);
}

/// from: android.widget.AutoCompleteTextView$Validator
///
/// This interface is used to make sure that the text entered in this TextView complies to
/// a certain format.  Since there is no foolproof way to prevent the user from leaving
/// this View with an incorrect value in it, all we can do is try to fix it ourselves
/// when this happens.
class AutoCompleteTextView_Validator extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/AutoCompleteTextView\$Validator");
  AutoCompleteTextView_Validator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_isValid = jniAccessors.getMethodIDOf(
      _classRef, "isValid", "(Ljava/lang/CharSequence;)Z");

  /// from: public abstract boolean isValid(java.lang.CharSequence text)
  ///
  /// Validates the specified text.
  ///@return true If the text currently in the text editor is valid.
  ///@see \#fixText(CharSequence)
  bool isValid(jni.JniObject text) => jniAccessors.callMethodWithArgs(reference,
      _id_isValid, jni.JniType.booleanType, [text.reference]).boolean;

  static final _id_fixText = jniAccessors.getMethodIDOf(_classRef, "fixText",
      "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");

  /// from: public abstract java.lang.CharSequence fixText(java.lang.CharSequence invalidText)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Corrects the specified text to make it valid.
  ///@param invalidText A string that doesn't pass validation: isValid(invalidText)
  ///        returns false
  ///@return A string based on invalidText such as invoking isValid() on it returns true.
  ///@see \#isValid(CharSequence)
  jni.JniObject fixText(jni.JniObject invalidText) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_fixText, jni.JniType.objectType, [invalidText.reference]).object);
}

/// from: android.widget.AutoCompleteTextView$OnDismissListener
///
/// Listener to respond to the AutoCompleteTextView's completion list being dismissed.
///@see AutoCompleteTextView\#setOnDismissListener(OnDismissListener)
class AutoCompleteTextView_OnDismissListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/widget/AutoCompleteTextView\$OnDismissListener");
  AutoCompleteTextView_OnDismissListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onDismiss =
      jniAccessors.getMethodIDOf(_classRef, "onDismiss", "()V");

  /// from: public abstract void onDismiss()
  ///
  /// This method will be invoked whenever the AutoCompleteTextView's list
  /// of completion options has been dismissed and is no longer available
  /// for user interaction.
  void onDismiss() => jniAccessors.callMethodWithArgs(
      reference, _id_onDismiss, jni.JniType.voidType, []).check();
}
