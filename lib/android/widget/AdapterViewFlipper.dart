// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AdapterViewAnimator.dart" as adapterviewanimator_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "Adapter.dart" as adapter_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.AdapterViewFlipper
///
/// Simple ViewAnimator that will animate between two or more views
/// that have been added to it.  Only one child is shown at a time.  If
/// requested, can automatically flip between each child at a regular interval.
///@attr ref android.R.styleable\#AdapterViewFlipper_flipInterval
///@attr ref android.R.styleable\#AdapterViewFlipper_autoStart
class AdapterViewFlipper extends adapterviewanimator_.AdapterViewAnimator {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/AdapterViewFlipper");
  AdapterViewFlipper.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AdapterViewFlipper(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AdapterViewFlipper.ctor1(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AdapterViewFlipper.ctor2(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AdapterViewFlipper.ctor3(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_onAttachedToWindow1 =
      jniAccessors.getMethodIDOf(_classRef, "onAttachedToWindow", "()V");

  /// from: protected void onAttachedToWindow()
  void onAttachedToWindow1() => jniAccessors.callMethodWithArgs(
      reference, _id_onAttachedToWindow1, jni.JniType.voidType, []).check();

  static final _id_onDetachedFromWindow1 =
      jniAccessors.getMethodIDOf(_classRef, "onDetachedFromWindow", "()V");

  /// from: protected void onDetachedFromWindow()
  void onDetachedFromWindow1() => jniAccessors.callMethodWithArgs(
      reference, _id_onDetachedFromWindow1, jni.JniType.voidType, []).check();

  static final _id_onWindowVisibilityChanged1 = jniAccessors.getMethodIDOf(
      _classRef, "onWindowVisibilityChanged", "(I)V");

  /// from: protected void onWindowVisibilityChanged(int visibility)
  void onWindowVisibilityChanged1(int visibility) =>
      jniAccessors.callMethodWithArgs(reference, _id_onWindowVisibilityChanged1,
          jni.JniType.voidType, [visibility]).check();

  static final _id_setAdapter1 = jniAccessors.getMethodIDOf(
      _classRef, "setAdapter", "(Landroid/widget/Adapter;)V");

  /// from: public void setAdapter(android.widget.Adapter adapter)
  void setAdapter1(adapter_.Adapter adapter) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setAdapter1,
      jni.JniType.voidType,
      [adapter.reference]).check();

  static final _id_getFlipInterval =
      jniAccessors.getMethodIDOf(_classRef, "getFlipInterval", "()I");

  /// from: public int getFlipInterval()
  ///
  /// Returns the flip interval, in milliseconds.
  ///@return the flip interval in milliseconds
  ///@see \#setFlipInterval(int)
  ///@attr ref android.R.styleable\#AdapterViewFlipper_flipInterval
  int getFlipInterval() => jniAccessors.callMethodWithArgs(
      reference, _id_getFlipInterval, jni.JniType.intType, []).integer;

  static final _id_setFlipInterval =
      jniAccessors.getMethodIDOf(_classRef, "setFlipInterval", "(I)V");

  /// from: public void setFlipInterval(int flipInterval)
  ///
  /// How long to wait before flipping to the next view.
  ///@param flipInterval flip interval in milliseconds
  ///@see \#getFlipInterval()
  ///@attr ref android.R.styleable\#AdapterViewFlipper_flipInterval
  void setFlipInterval(int flipInterval) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setFlipInterval,
      jni.JniType.voidType,
      [flipInterval]).check();

  static final _id_startFlipping =
      jniAccessors.getMethodIDOf(_classRef, "startFlipping", "()V");

  /// from: public void startFlipping()
  ///
  /// Start a timer to cycle through child views
  void startFlipping() => jniAccessors.callMethodWithArgs(
      reference, _id_startFlipping, jni.JniType.voidType, []).check();

  static final _id_stopFlipping =
      jniAccessors.getMethodIDOf(_classRef, "stopFlipping", "()V");

  /// from: public void stopFlipping()
  ///
  /// No more flips
  void stopFlipping() => jniAccessors.callMethodWithArgs(
      reference, _id_stopFlipping, jni.JniType.voidType, []).check();

  static final _id_showNext =
      jniAccessors.getMethodIDOf(_classRef, "showNext", "()V");

  /// from: public void showNext()
  ///
  /// {@inheritDoc}
  void showNext() => jniAccessors.callMethodWithArgs(
      reference, _id_showNext, jni.JniType.voidType, []).check();

  static final _id_showPrevious =
      jniAccessors.getMethodIDOf(_classRef, "showPrevious", "()V");

  /// from: public void showPrevious()
  ///
  /// {@inheritDoc}
  void showPrevious() => jniAccessors.callMethodWithArgs(
      reference, _id_showPrevious, jni.JniType.voidType, []).check();

  static final _id_isFlipping =
      jniAccessors.getMethodIDOf(_classRef, "isFlipping", "()Z");

  /// from: public boolean isFlipping()
  ///
  /// Returns true if the child views are flipping.
  bool isFlipping() => jniAccessors.callMethodWithArgs(
      reference, _id_isFlipping, jni.JniType.booleanType, []).boolean;

  static final _id_setAutoStart =
      jniAccessors.getMethodIDOf(_classRef, "setAutoStart", "(Z)V");

  /// from: public void setAutoStart(boolean autoStart)
  ///
  /// Set if this view automatically calls \#startFlipping() when it
  /// becomes attached to a window.
  void setAutoStart(bool autoStart) => jniAccessors.callMethodWithArgs(
      reference, _id_setAutoStart, jni.JniType.voidType, [autoStart]).check();

  static final _id_isAutoStart =
      jniAccessors.getMethodIDOf(_classRef, "isAutoStart", "()Z");

  /// from: public boolean isAutoStart()
  ///
  /// Returns true if this view automatically calls \#startFlipping()
  /// when it becomes attached to a window.
  bool isAutoStart() => jniAccessors.callMethodWithArgs(
      reference, _id_isAutoStart, jni.JniType.booleanType, []).boolean;

  static final _id_fyiWillBeAdvancedByHostKThx = jniAccessors.getMethodIDOf(
      _classRef, "fyiWillBeAdvancedByHostKThx", "()V");

  /// from: public void fyiWillBeAdvancedByHostKThx()
  ///
  /// Called by an android.appwidget.AppWidgetHost to indicate that it will be
  /// automatically advancing the views of this AdapterViewFlipper by calling
  /// AdapterViewFlipper\#advance() at some point in the future. This allows
  /// AdapterViewFlipper to prepare by no longer Advancing its children.
  void fyiWillBeAdvancedByHostKThx() => jniAccessors.callMethodWithArgs(
      reference,
      _id_fyiWillBeAdvancedByHostKThx,
      jni.JniType.voidType, []).check();

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);
}
