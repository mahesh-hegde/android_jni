// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../view/View.dart" as view_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.Magnifier
///
/// Android magnifier widget. Can be used by any view which is attached to a window.
class Magnifier extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/widget/Magnifier");
  Magnifier.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/view/View;)V");

  /// from: public void <init>(android.view.View view)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Initializes a magnifier.
  ///@param view the view for which this magnifier is attached
  ///
  /// This value must never be {@code null}.
  Magnifier(view_.View view)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [view.reference]).object);

  static final _id_show0 =
      jniAccessors.getMethodIDOf(_classRef, "show", "(FF)V");

  /// from: public void show(float xPosInView, float yPosInView)
  ///
  /// Shows the magnifier on the screen.
  ///@param xPosInView horizontal coordinate of the center point of the magnifier source relative
  ///        to the view. The lower end is clamped to 0 and the higher end is clamped to the view
  ///        width.
  /// Value is 0 or greater
  ///@param yPosInView vertical coordinate of the center point of the magnifier source
  ///        relative to the view. The lower end is clamped to 0 and the higher end is clamped to
  ///        the view height.
  ///
  /// Value is 0 or greater
  void show0(double xPosInView, double yPosInView) =>
      jniAccessors.callMethodWithArgs(reference, _id_show0,
          jni.JniType.voidType, [xPosInView, yPosInView]).check();

  static final _id_dismiss =
      jniAccessors.getMethodIDOf(_classRef, "dismiss", "()V");

  /// from: public void dismiss()
  ///
  /// Dismisses the magnifier from the screen. Calling this on a dismissed magnifier is a no-op.
  void dismiss() => jniAccessors.callMethodWithArgs(
      reference, _id_dismiss, jni.JniType.voidType, []).check();

  static final _id_update =
      jniAccessors.getMethodIDOf(_classRef, "update", "()V");

  /// from: public void update()
  ///
  /// Forces the magnifier to update its content. It uses the previous coordinates passed to
  /// \#show(float, float). This only happens if the magnifier is currently showing.
  void update() => jniAccessors.callMethodWithArgs(
      reference, _id_update, jni.JniType.voidType, []).check();

  static final _id_getWidth =
      jniAccessors.getMethodIDOf(_classRef, "getWidth", "()I");

  /// from: public int getWidth()
  ///
  /// @return The width of the magnifier window, in pixels.
  int getWidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getWidth, jni.JniType.intType, []).integer;

  static final _id_getHeight =
      jniAccessors.getMethodIDOf(_classRef, "getHeight", "()I");

  /// from: public int getHeight()
  ///
  /// @return The height of the magnifier window, in pixels.
  int getHeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getHeight, jni.JniType.intType, []).integer;

  static final _id_getZoom =
      jniAccessors.getMethodIDOf(_classRef, "getZoom", "()F");

  /// from: public float getZoom()
  ///
  /// @return The zoom applied to the magnified view region copied to the magnifier window.
  /// If the zoom is x and the magnifier window size is (width, height), the original size
  /// of the content copied in the magnifier will be (width / x, height / x).
  double getZoom() => jniAccessors.callMethodWithArgs(
      reference, _id_getZoom, jni.JniType.floatType, []).float;
}
