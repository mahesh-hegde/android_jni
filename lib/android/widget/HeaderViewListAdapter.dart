// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ListAdapter.dart" as listadapter_;

import "../view/View.dart" as view_;

import "../view/ViewGroup.dart" as viewgroup_;

import "../database/DataSetObserver.dart" as datasetobserver_;

import "Filter.dart" as filter_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.HeaderViewListAdapter
///
/// ListAdapter used when a ListView has header views. This ListAdapter
/// wraps another one and also keeps track of the header views and their
/// associated data objects.
///This is intended as a base class; you will probably not need to
/// use this class directly in your own code.
class HeaderViewListAdapter extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/HeaderViewListAdapter");
  HeaderViewListAdapter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/util/ArrayList;Ljava/util/ArrayList;Landroid/widget/ListAdapter;)V");

  /// from: public void <init>(java.util.ArrayList<android.widget.ListView.FixedViewInfo> headerViewInfos, java.util.ArrayList<android.widget.ListView.FixedViewInfo> footerViewInfos, android.widget.ListAdapter adapter)
  /// The returned object must be deleted after use, by calling the `delete` method.
  HeaderViewListAdapter(jni.JniObject headerViewInfos,
      jni.JniObject footerViewInfos, listadapter_.ListAdapter adapter)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          headerViewInfos.reference,
          footerViewInfos.reference,
          adapter.reference
        ]).object);

  static final _id_getHeadersCount =
      jniAccessors.getMethodIDOf(_classRef, "getHeadersCount", "()I");

  /// from: public int getHeadersCount()
  int getHeadersCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getHeadersCount, jni.JniType.intType, []).integer;

  static final _id_getFootersCount =
      jniAccessors.getMethodIDOf(_classRef, "getFootersCount", "()I");

  /// from: public int getFootersCount()
  int getFootersCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getFootersCount, jni.JniType.intType, []).integer;

  static final _id_isEmpty =
      jniAccessors.getMethodIDOf(_classRef, "isEmpty", "()Z");

  /// from: public boolean isEmpty()
  bool isEmpty() => jniAccessors.callMethodWithArgs(
      reference, _id_isEmpty, jni.JniType.booleanType, []).boolean;

  static final _id_removeHeader = jniAccessors.getMethodIDOf(
      _classRef, "removeHeader", "(Landroid/view/View;)Z");

  /// from: public boolean removeHeader(android.view.View v)
  bool removeHeader(view_.View v) => jniAccessors.callMethodWithArgs(reference,
      _id_removeHeader, jni.JniType.booleanType, [v.reference]).boolean;

  static final _id_removeFooter = jniAccessors.getMethodIDOf(
      _classRef, "removeFooter", "(Landroid/view/View;)Z");

  /// from: public boolean removeFooter(android.view.View v)
  bool removeFooter(view_.View v) => jniAccessors.callMethodWithArgs(reference,
      _id_removeFooter, jni.JniType.booleanType, [v.reference]).boolean;

  static final _id_getCount =
      jniAccessors.getMethodIDOf(_classRef, "getCount", "()I");

  /// from: public int getCount()
  int getCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getCount, jni.JniType.intType, []).integer;

  static final _id_areAllItemsEnabled =
      jniAccessors.getMethodIDOf(_classRef, "areAllItemsEnabled", "()Z");

  /// from: public boolean areAllItemsEnabled()
  bool areAllItemsEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_areAllItemsEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_isEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isEnabled", "(I)Z");

  /// from: public boolean isEnabled(int position)
  bool isEnabled(int position) => jniAccessors.callMethodWithArgs(
      reference, _id_isEnabled, jni.JniType.booleanType, [position]).boolean;

  static final _id_getItem =
      jniAccessors.getMethodIDOf(_classRef, "getItem", "(I)Ljava/lang/Object;");

  /// from: public java.lang.Object getItem(int position)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getItem(int position) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getItem, jni.JniType.objectType, [position]).object);

  static final _id_getItemId =
      jniAccessors.getMethodIDOf(_classRef, "getItemId", "(I)J");

  /// from: public long getItemId(int position)
  int getItemId(int position) => jniAccessors.callMethodWithArgs(
      reference, _id_getItemId, jni.JniType.longType, [position]).long;

  static final _id_hasStableIds =
      jniAccessors.getMethodIDOf(_classRef, "hasStableIds", "()Z");

  /// from: public boolean hasStableIds()
  bool hasStableIds() => jniAccessors.callMethodWithArgs(
      reference, _id_hasStableIds, jni.JniType.booleanType, []).boolean;

  static final _id_getView = jniAccessors.getMethodIDOf(_classRef, "getView",
      "(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;");

  /// from: public android.view.View getView(int position, android.view.View convertView, android.view.ViewGroup parent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  view_.View getView(
          int position, view_.View convertView, viewgroup_.ViewGroup parent) =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getView,
          jni.JniType.objectType,
          [position, convertView.reference, parent.reference]).object);

  static final _id_getItemViewType =
      jniAccessors.getMethodIDOf(_classRef, "getItemViewType", "(I)I");

  /// from: public int getItemViewType(int position)
  int getItemViewType(int position) => jniAccessors.callMethodWithArgs(
      reference, _id_getItemViewType, jni.JniType.intType, [position]).integer;

  static final _id_getViewTypeCount =
      jniAccessors.getMethodIDOf(_classRef, "getViewTypeCount", "()I");

  /// from: public int getViewTypeCount()
  int getViewTypeCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getViewTypeCount, jni.JniType.intType, []).integer;

  static final _id_registerDataSetObserver = jniAccessors.getMethodIDOf(
      _classRef,
      "registerDataSetObserver",
      "(Landroid/database/DataSetObserver;)V");

  /// from: public void registerDataSetObserver(android.database.DataSetObserver observer)
  void registerDataSetObserver(datasetobserver_.DataSetObserver observer) =>
      jniAccessors.callMethodWithArgs(reference, _id_registerDataSetObserver,
          jni.JniType.voidType, [observer.reference]).check();

  static final _id_unregisterDataSetObserver = jniAccessors.getMethodIDOf(
      _classRef,
      "unregisterDataSetObserver",
      "(Landroid/database/DataSetObserver;)V");

  /// from: public void unregisterDataSetObserver(android.database.DataSetObserver observer)
  void unregisterDataSetObserver(datasetobserver_.DataSetObserver observer) =>
      jniAccessors.callMethodWithArgs(reference, _id_unregisterDataSetObserver,
          jni.JniType.voidType, [observer.reference]).check();

  static final _id_getFilter = jniAccessors.getMethodIDOf(
      _classRef, "getFilter", "()Landroid/widget/Filter;");

  /// from: public android.widget.Filter getFilter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  filter_.Filter getFilter() =>
      filter_.Filter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFilter, jni.JniType.objectType, []).object);

  static final _id_getWrappedAdapter = jniAccessors.getMethodIDOf(
      _classRef, "getWrappedAdapter", "()Landroid/widget/ListAdapter;");

  /// from: public android.widget.ListAdapter getWrappedAdapter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  listadapter_.ListAdapter getWrappedAdapter() =>
      listadapter_.ListAdapter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getWrappedAdapter, jni.JniType.objectType, []).object);
}
