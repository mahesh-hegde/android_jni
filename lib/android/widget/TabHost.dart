// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "FrameLayout.dart" as framelayout_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../app/LocalActivityManager.dart" as localactivitymanager_;

import "TabWidget.dart" as tabwidget_;

import "../view/View.dart" as view_;

import "../view/KeyEvent.dart" as keyevent_;

import "../graphics/drawable/Drawable.dart" as drawable_;

import "../content/Intent.dart" as intent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.TabHost
///
/// Container for a tabbed window view. This object holds two children: a set of tab labels that the
/// user clicks to select a specific tab, and a FrameLayout object that displays the contents of that
/// page. The individual elements are typically controlled using this container object, rather than
/// setting values on the child elements themselves.
class TabHost extends framelayout_.FrameLayout {
  static final _classRef = jniAccessors.getClassOf("android/widget/TabHost");
  TabHost.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TabHost(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TabHost.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TabHost.ctor2(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  TabHost.ctor3(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_newTabSpec = jniAccessors.getMethodIDOf(_classRef,
      "newTabSpec", "(Ljava/lang/String;)Landroid/widget/TabHost\$TabSpec;");

  /// from: public android.widget.TabHost.TabSpec newTabSpec(java.lang.String tag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new TabSpec associated with this tab host.
  ///@param tag tag for the tab specification, must be non-null
  /// This value must never be {@code null}.
  ///@throws IllegalArgumentException If the passed tag is null
  TabHost_TabSpec newTabSpec(jni.JniString tag) =>
      TabHost_TabSpec.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_newTabSpec, jni.JniType.objectType, [tag.reference]).object);

  static final _id_setup =
      jniAccessors.getMethodIDOf(_classRef, "setup", "()V");

  /// from: public void setup()
  ///
  /// Call setup() before adding tabs if loading TabHost using findViewById().
  /// <i>__However</i>__: You do not need to call setup() after getTabHost()
  /// in android.app.TabActivity TabActivity.
  /// Example:
  ///
  /// <pre>mTabHost = (TabHost)findViewById(R.id.tabhost);
  /// mTabHost.setup();
  /// mTabHost.addTab(TAB_TAG_1, "Hello, world!", "Tab 1");
  void setup() => jniAccessors.callMethodWithArgs(
      reference, _id_setup, jni.JniType.voidType, []).check();

  static final _id_setup1 = jniAccessors.getMethodIDOf(
      _classRef, "setup", "(Landroid/app/LocalActivityManager;)V");

  /// from: public void setup(android.app.LocalActivityManager activityGroup)
  ///
  /// If you are using TabSpec\#setContent(android.content.Intent), this
  /// must be called since the activityGroup is needed to launch the local activity.
  ///
  /// This is done for you if you extend android.app.TabActivity.
  ///@param activityGroup Used to launch activities for tab content.
  void setup1(localactivitymanager_.LocalActivityManager activityGroup) =>
      jniAccessors.callMethodWithArgs(reference, _id_setup1,
          jni.JniType.voidType, [activityGroup.reference]).check();

  static final _id_onTouchModeChanged =
      jniAccessors.getMethodIDOf(_classRef, "onTouchModeChanged", "(Z)V");

  /// from: public void onTouchModeChanged(boolean isInTouchMode)
  void onTouchModeChanged(bool isInTouchMode) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTouchModeChanged,
          jni.JniType.voidType, [isInTouchMode]).check();

  static final _id_addTab = jniAccessors.getMethodIDOf(
      _classRef, "addTab", "(Landroid/widget/TabHost\$TabSpec;)V");

  /// from: public void addTab(android.widget.TabHost.TabSpec tabSpec)
  ///
  /// Add a tab.
  ///@param tabSpec Specifies how to create the indicator and content.
  ///@throws IllegalArgumentException If the passed tab spec has null indicator strategy and / or
  ///      null content strategy.
  void addTab(TabHost_TabSpec tabSpec) => jniAccessors.callMethodWithArgs(
      reference, _id_addTab, jni.JniType.voidType, [tabSpec.reference]).check();

  static final _id_clearAllTabs =
      jniAccessors.getMethodIDOf(_classRef, "clearAllTabs", "()V");

  /// from: public void clearAllTabs()
  ///
  /// Removes all tabs from the tab widget associated with this tab host.
  void clearAllTabs() => jniAccessors.callMethodWithArgs(
      reference, _id_clearAllTabs, jni.JniType.voidType, []).check();

  static final _id_getTabWidget = jniAccessors.getMethodIDOf(
      _classRef, "getTabWidget", "()Landroid/widget/TabWidget;");

  /// from: public android.widget.TabWidget getTabWidget()
  /// The returned object must be deleted after use, by calling the `delete` method.
  tabwidget_.TabWidget getTabWidget() =>
      tabwidget_.TabWidget.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTabWidget, jni.JniType.objectType, []).object);

  static final _id_getCurrentTab =
      jniAccessors.getMethodIDOf(_classRef, "getCurrentTab", "()I");

  /// from: public int getCurrentTab()
  ///
  /// Returns the current tab.
  ///@return the current tab, may be {@code null} if no tab is set as current
  int getCurrentTab() => jniAccessors.callMethodWithArgs(
      reference, _id_getCurrentTab, jni.JniType.intType, []).integer;

  static final _id_getCurrentTabTag = jniAccessors.getMethodIDOf(
      _classRef, "getCurrentTabTag", "()Ljava/lang/String;");

  /// from: public java.lang.String getCurrentTabTag()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the tag for the current tab.
  ///@return the tag for the current tab, may be {@code null} if no tab is
  ///         set as current
  jni.JniString getCurrentTabTag() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCurrentTabTag, jni.JniType.objectType, []).object);

  static final _id_getCurrentTabView = jniAccessors.getMethodIDOf(
      _classRef, "getCurrentTabView", "()Landroid/view/View;");

  /// from: public android.view.View getCurrentTabView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the view for the current tab.
  ///@return the view for the current tab, may be {@code null} if no tab is
  ///         set as current
  view_.View getCurrentTabView() =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCurrentTabView, jni.JniType.objectType, []).object);

  static final _id_getCurrentView = jniAccessors.getMethodIDOf(
      _classRef, "getCurrentView", "()Landroid/view/View;");

  /// from: public android.view.View getCurrentView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  view_.View getCurrentView() =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCurrentView, jni.JniType.objectType, []).object);

  static final _id_setCurrentTabByTag = jniAccessors.getMethodIDOf(
      _classRef, "setCurrentTabByTag", "(Ljava/lang/String;)V");

  /// from: public void setCurrentTabByTag(java.lang.String tag)
  ///
  /// Sets the current tab based on its tag.
  ///@param tag the tag for the tab to set as current
  void setCurrentTabByTag(jni.JniString tag) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCurrentTabByTag,
      jni.JniType.voidType,
      [tag.reference]).check();

  static final _id_getTabContentView = jniAccessors.getMethodIDOf(
      _classRef, "getTabContentView", "()Landroid/widget/FrameLayout;");

  /// from: public android.widget.FrameLayout getTabContentView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the FrameLayout which holds tab content
  framelayout_.FrameLayout getTabContentView() =>
      framelayout_.FrameLayout.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTabContentView, jni.JniType.objectType, []).object);

  static final _id_dispatchKeyEvent1 = jniAccessors.getMethodIDOf(
      _classRef, "dispatchKeyEvent", "(Landroid/view/KeyEvent;)Z");

  /// from: public boolean dispatchKeyEvent(android.view.KeyEvent event)
  bool dispatchKeyEvent1(keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_dispatchKeyEvent1,
          jni.JniType.booleanType, [event.reference]).boolean;

  static final _id_dispatchWindowFocusChanged1 = jniAccessors.getMethodIDOf(
      _classRef, "dispatchWindowFocusChanged", "(Z)V");

  /// from: public void dispatchWindowFocusChanged(boolean hasFocus)
  void dispatchWindowFocusChanged1(bool hasFocus) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_dispatchWindowFocusChanged1,
          jni.JniType.voidType,
          [hasFocus]).check();

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);

  static final _id_setCurrentTab =
      jniAccessors.getMethodIDOf(_classRef, "setCurrentTab", "(I)V");

  /// from: public void setCurrentTab(int index)
  void setCurrentTab(int index) => jniAccessors.callMethodWithArgs(
      reference, _id_setCurrentTab, jni.JniType.voidType, [index]).check();

  static final _id_setOnTabChangedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnTabChangedListener",
      "(Landroid/widget/TabHost\$OnTabChangeListener;)V");

  /// from: public void setOnTabChangedListener(android.widget.TabHost.OnTabChangeListener l)
  ///
  /// Register a callback to be invoked when the selected state of any of the items
  /// in this list changes
  ///@param l The callback that will run
  void setOnTabChangedListener(TabHost_OnTabChangeListener l) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnTabChangedListener,
          jni.JniType.voidType, [l.reference]).check();
}

/// from: android.widget.TabHost$TabSpec
///
/// A tab has a tab indicator, content, and a tag that is used to keep
/// track of it.  This builder helps choose among these options.
///
/// For the tab indicator, your choices are:
/// 1) set a label
/// 2) set a label and an icon
///
/// For the tab content, your choices are:
/// 1) the id of a View
/// 2) a TabContentFactory that creates the View content.
/// 3) an Intent that launches an android.app.Activity.
class TabHost_TabSpec extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/TabHost\$TabSpec");
  TabHost_TabSpec.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: void <init>(java.lang.String tag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new tab specification with the specified tag.
  ///@param tag the tag for the tag specification, must be non-null
  TabHost_TabSpec(jni.JniString tag)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [tag.reference]).object);

  static final _id_setIndicator = jniAccessors.getMethodIDOf(
      _classRef,
      "setIndicator",
      "(Ljava/lang/CharSequence;)Landroid/widget/TabHost\$TabSpec;");

  /// from: public android.widget.TabHost.TabSpec setIndicator(java.lang.CharSequence label)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specify a label as the tab indicator.
  TabHost_TabSpec setIndicator(jni.JniObject label) =>
      TabHost_TabSpec.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setIndicator, jni.JniType.objectType, [label.reference]).object);

  static final _id_setIndicator1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setIndicator",
      "(Ljava/lang/CharSequence;Landroid/graphics/drawable/Drawable;)Landroid/widget/TabHost\$TabSpec;");

  /// from: public android.widget.TabHost.TabSpec setIndicator(java.lang.CharSequence label, android.graphics.drawable.Drawable icon)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specify a label and icon as the tab indicator.
  TabHost_TabSpec setIndicator1(jni.JniObject label, drawable_.Drawable icon) =>
      TabHost_TabSpec.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setIndicator1,
          jni.JniType.objectType,
          [label.reference, icon.reference]).object);

  static final _id_setIndicator2 = jniAccessors.getMethodIDOf(_classRef,
      "setIndicator", "(Landroid/view/View;)Landroid/widget/TabHost\$TabSpec;");

  /// from: public android.widget.TabHost.TabSpec setIndicator(android.view.View view)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specify a view as the tab indicator.
  TabHost_TabSpec setIndicator2(view_.View view) =>
      TabHost_TabSpec.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setIndicator2, jni.JniType.objectType, [view.reference]).object);

  static final _id_setContent = jniAccessors.getMethodIDOf(
      _classRef, "setContent", "(I)Landroid/widget/TabHost\$TabSpec;");

  /// from: public android.widget.TabHost.TabSpec setContent(int viewId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specify the id of the view that should be used as the content
  /// of the tab.
  TabHost_TabSpec setContent(int viewId) =>
      TabHost_TabSpec.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setContent, jni.JniType.objectType, [viewId]).object);

  static final _id_setContent1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setContent",
      "(Landroid/widget/TabHost\$TabContentFactory;)Landroid/widget/TabHost\$TabSpec;");

  /// from: public android.widget.TabHost.TabSpec setContent(android.widget.TabHost.TabContentFactory contentFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specify a android.widget.TabHost.TabContentFactory to use to
  /// create the content of the tab.
  TabHost_TabSpec setContent1(TabHost_TabContentFactory contentFactory) =>
      TabHost_TabSpec.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setContent1,
          jni.JniType.objectType,
          [contentFactory.reference]).object);

  static final _id_setContent2 = jniAccessors.getMethodIDOf(
      _classRef,
      "setContent",
      "(Landroid/content/Intent;)Landroid/widget/TabHost\$TabSpec;");

  /// from: public android.widget.TabHost.TabSpec setContent(android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specify an intent to use to launch an activity as the tab content.
  TabHost_TabSpec setContent2(intent_.Intent intent) =>
      TabHost_TabSpec.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setContent2, jni.JniType.objectType, [intent.reference]).object);

  static final _id_getTag =
      jniAccessors.getMethodIDOf(_classRef, "getTag", "()Ljava/lang/String;");

  /// from: public java.lang.String getTag()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the tag for this tab specification.
  ///@return the tag for this tab specification
  ///
  /// This value will never be {@code null}.
  jni.JniString getTag() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTag, jni.JniType.objectType, []).object);
}

/// from: android.widget.TabHost$TabContentFactory
///
/// Makes the content of a tab when it is selected. Use this if your tab
/// content needs to be created on demand, i.e. you are not showing an
/// existing view or starting an activity.
class TabHost_TabContentFactory extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/TabHost\$TabContentFactory");
  TabHost_TabContentFactory.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_createTabContent = jniAccessors.getMethodIDOf(
      _classRef, "createTabContent", "(Ljava/lang/String;)Landroid/view/View;");

  /// from: public abstract android.view.View createTabContent(java.lang.String tag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Callback to make the tab contents
  ///@param tag Which tab was selected.
  ///@return The view to display the contents of the selected tab.
  view_.View createTabContent(jni.JniString tag) =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createTabContent,
          jni.JniType.objectType,
          [tag.reference]).object);
}

/// from: android.widget.TabHost$OnTabChangeListener
///
/// Interface definition for a callback to be invoked when tab changed
class TabHost_OnTabChangeListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/TabHost\$OnTabChangeListener");
  TabHost_OnTabChangeListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onTabChanged = jniAccessors.getMethodIDOf(
      _classRef, "onTabChanged", "(Ljava/lang/String;)V");

  /// from: public abstract void onTabChanged(java.lang.String tabId)
  void onTabChanged(jni.JniString tabId) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onTabChanged,
      jni.JniType.voidType,
      [tabId.reference]).check();
}
