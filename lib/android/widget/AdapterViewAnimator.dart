// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AdapterView.dart" as adapterview_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../view/MotionEvent.dart" as motionevent_;

import "../os/Parcelable.dart" as parcelable_;

import "../view/View.dart" as view_;

import "../animation/ObjectAnimator.dart" as objectanimator_;

import "Adapter.dart" as adapter_;

import "../content/Intent.dart" as intent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.AdapterViewAnimator
///
/// Base class for a AdapterView that will perform animations
/// when switching between its views.
///@attr ref android.R.styleable\#AdapterViewAnimator_inAnimation
///@attr ref android.R.styleable\#AdapterViewAnimator_outAnimation
///@attr ref android.R.styleable\#AdapterViewAnimator_animateFirstView
///@attr ref android.R.styleable\#AdapterViewAnimator_loopViews
class AdapterViewAnimator extends adapterview_.AdapterView {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/AdapterViewAnimator");
  AdapterViewAnimator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AdapterViewAnimator(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AdapterViewAnimator.ctor1(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AdapterViewAnimator.ctor2(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  AdapterViewAnimator.ctor3(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_setDisplayedChild =
      jniAccessors.getMethodIDOf(_classRef, "setDisplayedChild", "(I)V");

  /// from: public void setDisplayedChild(int whichChild)
  ///
  /// Sets which child view will be displayed.
  ///@param whichChild the index of the child view to display
  void setDisplayedChild(int whichChild) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setDisplayedChild,
      jni.JniType.voidType,
      [whichChild]).check();

  static final _id_getDisplayedChild =
      jniAccessors.getMethodIDOf(_classRef, "getDisplayedChild", "()I");

  /// from: public int getDisplayedChild()
  ///
  /// Returns the index of the currently displayed child view.
  int getDisplayedChild() => jniAccessors.callMethodWithArgs(
      reference, _id_getDisplayedChild, jni.JniType.intType, []).integer;

  static final _id_showNext =
      jniAccessors.getMethodIDOf(_classRef, "showNext", "()V");

  /// from: public void showNext()
  ///
  /// Manually shows the next child.
  void showNext() => jniAccessors.callMethodWithArgs(
      reference, _id_showNext, jni.JniType.voidType, []).check();

  static final _id_showPrevious =
      jniAccessors.getMethodIDOf(_classRef, "showPrevious", "()V");

  /// from: public void showPrevious()
  ///
  /// Manually shows the previous child.
  void showPrevious() => jniAccessors.callMethodWithArgs(
      reference, _id_showPrevious, jni.JniType.voidType, []).check();

  static final _id_onTouchEvent1 = jniAccessors.getMethodIDOf(
      _classRef, "onTouchEvent", "(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTouchEvent(android.view.MotionEvent ev)
  bool onTouchEvent1(motionevent_.MotionEvent ev) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTouchEvent1,
          jni.JniType.booleanType, [ev.reference]).boolean;

  static final _id_onMeasure1 =
      jniAccessors.getMethodIDOf(_classRef, "onMeasure", "(II)V");

  /// from: protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
  void onMeasure1(int widthMeasureSpec, int heightMeasureSpec) =>
      jniAccessors.callMethodWithArgs(reference, _id_onMeasure1,
          jni.JniType.voidType, [widthMeasureSpec, heightMeasureSpec]).check();

  static final _id_onLayout =
      jniAccessors.getMethodIDOf(_classRef, "onLayout", "(ZIIII)V");

  /// from: protected void onLayout(boolean changed, int left, int top, int right, int bottom)
  void onLayout(bool changed, int left, int top, int right, int bottom) =>
      jniAccessors.callMethodWithArgs(reference, _id_onLayout,
          jni.JniType.voidType, [changed, left, top, right, bottom]).check();

  static final _id_onSaveInstanceState1 = jniAccessors.getMethodIDOf(
      _classRef, "onSaveInstanceState", "()Landroid/os/Parcelable;");

  /// from: public android.os.Parcelable onSaveInstanceState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  parcelable_.Parcelable onSaveInstanceState1() =>
      parcelable_.Parcelable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onSaveInstanceState1, jni.JniType.objectType, []).object);

  static final _id_onRestoreInstanceState1 = jniAccessors.getMethodIDOf(
      _classRef, "onRestoreInstanceState", "(Landroid/os/Parcelable;)V");

  /// from: public void onRestoreInstanceState(android.os.Parcelable state)
  void onRestoreInstanceState1(parcelable_.Parcelable state) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRestoreInstanceState1,
          jni.JniType.voidType, [state.reference]).check();

  static final _id_getCurrentView = jniAccessors.getMethodIDOf(
      _classRef, "getCurrentView", "()Landroid/view/View;");

  /// from: public android.view.View getCurrentView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the View corresponding to the currently displayed child.
  ///@return The View currently displayed.
  ///@see \#getDisplayedChild()
  view_.View getCurrentView() =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCurrentView, jni.JniType.objectType, []).object);

  static final _id_getInAnimation = jniAccessors.getMethodIDOf(
      _classRef, "getInAnimation", "()Landroid/animation/ObjectAnimator;");

  /// from: public android.animation.ObjectAnimator getInAnimation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the current animation used to animate a View that enters the screen.
  ///@return An Animation or null if none is set.
  ///@see \#setInAnimation(android.animation.ObjectAnimator)
  ///@see \#setInAnimation(android.content.Context, int)
  objectanimator_.ObjectAnimator getInAnimation() =>
      objectanimator_.ObjectAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getInAnimation, jni.JniType.objectType, []).object);

  static final _id_setInAnimation = jniAccessors.getMethodIDOf(
      _classRef, "setInAnimation", "(Landroid/animation/ObjectAnimator;)V");

  /// from: public void setInAnimation(android.animation.ObjectAnimator inAnimation)
  ///
  /// Specifies the animation used to animate a View that enters the screen.
  ///@param inAnimation The animation started when a View enters the screen.
  ///@see \#getInAnimation()
  ///@see \#setInAnimation(android.content.Context, int)
  void setInAnimation(objectanimator_.ObjectAnimator inAnimation) =>
      jniAccessors.callMethodWithArgs(reference, _id_setInAnimation,
          jni.JniType.voidType, [inAnimation.reference]).check();

  static final _id_getOutAnimation = jniAccessors.getMethodIDOf(
      _classRef, "getOutAnimation", "()Landroid/animation/ObjectAnimator;");

  /// from: public android.animation.ObjectAnimator getOutAnimation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the current animation used to animate a View that exits the screen.
  ///@return An Animation or null if none is set.
  ///@see \#setOutAnimation(android.animation.ObjectAnimator)
  ///@see \#setOutAnimation(android.content.Context, int)
  objectanimator_.ObjectAnimator getOutAnimation() =>
      objectanimator_.ObjectAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getOutAnimation, jni.JniType.objectType, []).object);

  static final _id_setOutAnimation = jniAccessors.getMethodIDOf(
      _classRef, "setOutAnimation", "(Landroid/animation/ObjectAnimator;)V");

  /// from: public void setOutAnimation(android.animation.ObjectAnimator outAnimation)
  ///
  /// Specifies the animation used to animate a View that exit the screen.
  ///@param outAnimation The animation started when a View exit the screen.
  ///@see \#getOutAnimation()
  ///@see \#setOutAnimation(android.content.Context, int)
  void setOutAnimation(objectanimator_.ObjectAnimator outAnimation) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOutAnimation,
          jni.JniType.voidType, [outAnimation.reference]).check();

  static final _id_setInAnimation1 = jniAccessors.getMethodIDOf(
      _classRef, "setInAnimation", "(Landroid/content/Context;I)V");

  /// from: public void setInAnimation(android.content.Context context, int resourceID)
  ///
  /// Specifies the animation used to animate a View that enters the screen.
  ///@param context The application's environment.
  ///@param resourceID The resource id of the animation.
  ///@see \#getInAnimation()
  ///@see \#setInAnimation(android.animation.ObjectAnimator)
  void setInAnimation1(context_.Context context, int resourceID) =>
      jniAccessors.callMethodWithArgs(reference, _id_setInAnimation1,
          jni.JniType.voidType, [context.reference, resourceID]).check();

  static final _id_setOutAnimation1 = jniAccessors.getMethodIDOf(
      _classRef, "setOutAnimation", "(Landroid/content/Context;I)V");

  /// from: public void setOutAnimation(android.content.Context context, int resourceID)
  ///
  /// Specifies the animation used to animate a View that exit the screen.
  ///@param context The application's environment.
  ///@param resourceID The resource id of the animation.
  ///@see \#getOutAnimation()
  ///@see \#setOutAnimation(android.animation.ObjectAnimator)
  void setOutAnimation1(context_.Context context, int resourceID) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOutAnimation1,
          jni.JniType.voidType, [context.reference, resourceID]).check();

  static final _id_setAnimateFirstView =
      jniAccessors.getMethodIDOf(_classRef, "setAnimateFirstView", "(Z)V");

  /// from: public void setAnimateFirstView(boolean animate)
  ///
  /// Indicates whether the current View should be animated the first time
  /// the ViewAnimation is displayed.
  ///@param animate True to animate the current View the first time it is displayed,
  ///                false otherwise.
  void setAnimateFirstView(bool animate) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setAnimateFirstView,
      jni.JniType.voidType,
      [animate]).check();

  static final _id_getBaseline1 =
      jniAccessors.getMethodIDOf(_classRef, "getBaseline", "()I");

  /// from: public int getBaseline()
  int getBaseline1() => jniAccessors.callMethodWithArgs(
      reference, _id_getBaseline1, jni.JniType.intType, []).integer;

  static final _id_getAdapter1 = jniAccessors.getMethodIDOf(
      _classRef, "getAdapter", "()Landroid/widget/Adapter;");

  /// from: public android.widget.Adapter getAdapter()
  /// The returned object must be deleted after use, by calling the `delete` method.
  adapter_.Adapter getAdapter1() =>
      adapter_.Adapter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAdapter1, jni.JniType.objectType, []).object);

  static final _id_setAdapter1 = jniAccessors.getMethodIDOf(
      _classRef, "setAdapter", "(Landroid/widget/Adapter;)V");

  /// from: public void setAdapter(android.widget.Adapter adapter)
  void setAdapter1(adapter_.Adapter adapter) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setAdapter1,
      jni.JniType.voidType,
      [adapter.reference]).check();

  static final _id_setRemoteViewsAdapter = jniAccessors.getMethodIDOf(
      _classRef, "setRemoteViewsAdapter", "(Landroid/content/Intent;)V");

  /// from: public void setRemoteViewsAdapter(android.content.Intent intent)
  ///
  /// Sets up this AdapterViewAnimator to use a remote views adapter which connects to a
  /// RemoteViewsService through the specified intent.
  ///@param intent the intent used to identify the RemoteViewsService for the adapter to
  ///        connect to.
  void setRemoteViewsAdapter(intent_.Intent intent) =>
      jniAccessors.callMethodWithArgs(reference, _id_setRemoteViewsAdapter,
          jni.JniType.voidType, [intent.reference]).check();

  static final _id_setSelection =
      jniAccessors.getMethodIDOf(_classRef, "setSelection", "(I)V");

  /// from: public void setSelection(int position)
  void setSelection(int position) => jniAccessors.callMethodWithArgs(
      reference, _id_setSelection, jni.JniType.voidType, [position]).check();

  static final _id_getSelectedView = jniAccessors.getMethodIDOf(
      _classRef, "getSelectedView", "()Landroid/view/View;");

  /// from: public android.view.View getSelectedView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  view_.View getSelectedView() =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSelectedView, jni.JniType.objectType, []).object);

  static final _id_deferNotifyDataSetChanged =
      jniAccessors.getMethodIDOf(_classRef, "deferNotifyDataSetChanged", "()V");

  /// from: public void deferNotifyDataSetChanged()
  ///
  /// This defers a notifyDataSetChanged on the pending RemoteViewsAdapter if it has not
  /// connected yet.
  void deferNotifyDataSetChanged() => jniAccessors.callMethodWithArgs(reference,
      _id_deferNotifyDataSetChanged, jni.JniType.voidType, []).check();

  static final _id_onRemoteAdapterConnected =
      jniAccessors.getMethodIDOf(_classRef, "onRemoteAdapterConnected", "()Z");

  /// from: public boolean onRemoteAdapterConnected()
  ///
  /// Called back when the adapter connects to the RemoteViewsService.
  bool onRemoteAdapterConnected() => jniAccessors.callMethodWithArgs(reference,
      _id_onRemoteAdapterConnected, jni.JniType.booleanType, []).boolean;

  static final _id_onRemoteAdapterDisconnected = jniAccessors.getMethodIDOf(
      _classRef, "onRemoteAdapterDisconnected", "()V");

  /// from: public void onRemoteAdapterDisconnected()
  ///
  /// Called back when the adapter disconnects from the RemoteViewsService.
  void onRemoteAdapterDisconnected() => jniAccessors.callMethodWithArgs(
      reference,
      _id_onRemoteAdapterDisconnected,
      jni.JniType.voidType, []).check();

  static final _id_advance =
      jniAccessors.getMethodIDOf(_classRef, "advance", "()V");

  /// from: public void advance()
  ///
  /// Called by an android.appwidget.AppWidgetHost in order to advance the current view when
  /// it is being used within an app widget.
  void advance() => jniAccessors.callMethodWithArgs(
      reference, _id_advance, jni.JniType.voidType, []).check();

  static final _id_fyiWillBeAdvancedByHostKThx = jniAccessors.getMethodIDOf(
      _classRef, "fyiWillBeAdvancedByHostKThx", "()V");

  /// from: public void fyiWillBeAdvancedByHostKThx()
  ///
  /// Called by an android.appwidget.AppWidgetHost to indicate that it will be
  /// automatically advancing the views of this AdapterViewAnimator by calling
  /// AdapterViewAnimator\#advance() at some point in the future. This allows subclasses to
  /// perform any required setup, for example, to stop automatically advancing their children.
  void fyiWillBeAdvancedByHostKThx() => jniAccessors.callMethodWithArgs(
      reference,
      _id_fyiWillBeAdvancedByHostKThx,
      jni.JniType.voidType, []).check();

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);
}
