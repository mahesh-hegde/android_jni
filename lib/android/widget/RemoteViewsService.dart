// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../app/Service.dart" as service_;

import "../os/IBinder.dart" as ibinder_;

import "../content/Intent.dart" as intent_;

import "RemoteViews.dart" as remoteviews_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.RemoteViewsService
///
/// The service to be connected to for a remote adapter to request RemoteViews.  Users should
/// extend the RemoteViewsService to provide the appropriate RemoteViewsFactory's used to
/// populate the remote collection view (ListView, GridView, etc).
class RemoteViewsService extends service_.Service {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/RemoteViewsService");
  RemoteViewsService.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RemoteViewsService.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_onBind = jniAccessors.getMethodIDOf(
      _classRef, "onBind", "(Landroid/content/Intent;)Landroid/os/IBinder;");

  /// from: public android.os.IBinder onBind(android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ibinder_.IBinder onBind(intent_.Intent intent) =>
      ibinder_.IBinder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onBind, jni.JniType.objectType, [intent.reference]).object);

  static final _id_onGetViewFactory = jniAccessors.getMethodIDOf(
      _classRef,
      "onGetViewFactory",
      "(Landroid/content/Intent;)Landroid/widget/RemoteViewsService\$RemoteViewsFactory;");

  /// from: public abstract android.widget.RemoteViewsService.RemoteViewsFactory onGetViewFactory(android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// To be implemented by the derived service to generate appropriate factories for
  /// the data.
  RemoteViewsService_RemoteViewsFactory onGetViewFactory(
          intent_.Intent intent) =>
      RemoteViewsService_RemoteViewsFactory.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_onGetViewFactory,
              jni.JniType.objectType, [intent.reference]).object);
}

/// from: android.widget.RemoteViewsService$RemoteViewsFactory
///
/// An interface for an adapter between a remote collection view (ListView, GridView, etc) and
/// the underlying data for that view.  The implementor is responsible for making a RemoteView
/// for each item in the data set. This interface is a thin wrapper around Adapter.
///@see android.widget.Adapter
///@see android.appwidget.AppWidgetManager
class RemoteViewsService_RemoteViewsFactory extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/widget/RemoteViewsService\$RemoteViewsFactory");
  RemoteViewsService_RemoteViewsFactory.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onCreate =
      jniAccessors.getMethodIDOf(_classRef, "onCreate", "()V");

  /// from: public abstract void onCreate()
  ///
  /// Called when your factory is first constructed. The same factory may be shared across
  /// multiple RemoteViewAdapters depending on the intent passed.
  void onCreate() => jniAccessors.callMethodWithArgs(
      reference, _id_onCreate, jni.JniType.voidType, []).check();

  static final _id_onDataSetChanged =
      jniAccessors.getMethodIDOf(_classRef, "onDataSetChanged", "()V");

  /// from: public abstract void onDataSetChanged()
  ///
  /// Called when notifyDataSetChanged() is triggered on the remote adapter. This allows a
  /// RemoteViewsFactory to respond to data changes by updating any internal references.
  ///
  /// Note: expensive tasks can be safely performed synchronously within this method. In the
  /// interim, the old data will be displayed within the widget.
  ///@see android.appwidget.AppWidgetManager\#notifyAppWidgetViewDataChanged(int[], int)
  void onDataSetChanged() => jniAccessors.callMethodWithArgs(
      reference, _id_onDataSetChanged, jni.JniType.voidType, []).check();

  static final _id_onDestroy =
      jniAccessors.getMethodIDOf(_classRef, "onDestroy", "()V");

  /// from: public abstract void onDestroy()
  ///
  /// Called when the last RemoteViewsAdapter that is associated with this factory is
  /// unbound.
  void onDestroy() => jniAccessors.callMethodWithArgs(
      reference, _id_onDestroy, jni.JniType.voidType, []).check();

  static final _id_getCount =
      jniAccessors.getMethodIDOf(_classRef, "getCount", "()I");

  /// from: public abstract int getCount()
  ///
  /// See Adapter\#getCount()
  ///@return Count of items.
  int getCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getCount, jni.JniType.intType, []).integer;

  static final _id_getViewAt = jniAccessors.getMethodIDOf(
      _classRef, "getViewAt", "(I)Landroid/widget/RemoteViews;");

  /// from: public abstract android.widget.RemoteViews getViewAt(int position)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// See Adapter\#getView(int, android.view.View, android.view.ViewGroup).
  ///
  /// Note: expensive tasks can be safely performed synchronously within this method, and a
  /// loading view will be displayed in the interim. See \#getLoadingView().
  ///@param position The position of the item within the Factory's data set of the item whose
  ///        view we want.
  ///@return A RemoteViews object corresponding to the data at the specified position.
  remoteviews_.RemoteViews getViewAt(int position) =>
      remoteviews_.RemoteViews.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getViewAt, jni.JniType.objectType, [position]).object);

  static final _id_getLoadingView = jniAccessors.getMethodIDOf(
      _classRef, "getLoadingView", "()Landroid/widget/RemoteViews;");

  /// from: public abstract android.widget.RemoteViews getLoadingView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This allows for the use of a custom loading view which appears between the time that
  /// \#getViewAt(int) is called and returns. If null is returned, a default loading
  /// view will be used.
  ///@return The RemoteViews representing the desired loading view.
  remoteviews_.RemoteViews getLoadingView() =>
      remoteviews_.RemoteViews.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLoadingView, jni.JniType.objectType, []).object);

  static final _id_getViewTypeCount =
      jniAccessors.getMethodIDOf(_classRef, "getViewTypeCount", "()I");

  /// from: public abstract int getViewTypeCount()
  ///
  /// See Adapter\#getViewTypeCount().
  ///@return The number of types of Views that will be returned by this factory.
  int getViewTypeCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getViewTypeCount, jni.JniType.intType, []).integer;

  static final _id_getItemId =
      jniAccessors.getMethodIDOf(_classRef, "getItemId", "(I)J");

  /// from: public abstract long getItemId(int position)
  ///
  /// See Adapter\#getItemId(int).
  ///@param position The position of the item within the data set whose row id we want.
  ///@return The id of the item at the specified position.
  int getItemId(int position) => jniAccessors.callMethodWithArgs(
      reference, _id_getItemId, jni.JniType.longType, [position]).long;

  static final _id_hasStableIds =
      jniAccessors.getMethodIDOf(_classRef, "hasStableIds", "()Z");

  /// from: public abstract boolean hasStableIds()
  ///
  /// See Adapter\#hasStableIds().
  ///@return True if the same id always refers to the same object.
  bool hasStableIds() => jniAccessors.callMethodWithArgs(
      reference, _id_hasStableIds, jni.JniType.booleanType, []).boolean;
}
