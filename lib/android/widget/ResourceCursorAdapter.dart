// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "CursorAdapter.dart" as cursoradapter_;

import "../content/Context.dart" as context_;

import "../database/Cursor.dart" as cursor_;

import "../content/res/Resources.dart" as resources_;

import "../view/View.dart" as view_;

import "../view/ViewGroup.dart" as viewgroup_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.ResourceCursorAdapter
///
/// An easy adapter that creates views defined in an XML file. You can specify
/// the XML file that defines the appearance of the views.
class ResourceCursorAdapter extends cursoradapter_.CursorAdapter {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/ResourceCursorAdapter");
  ResourceCursorAdapter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;ILandroid/database/Cursor;)V");

  /// from: public void <init>(android.content.Context context, int layout, android.database.Cursor c)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor the enables auto-requery.
  ///@deprecated This option is discouraged, as it results in Cursor queries
  /// being performed on the application's UI thread and thus can cause poor
  /// responsiveness or even Application Not Responding errors.  As an alternative,
  /// use android.app.LoaderManager with a android.content.CursorLoader.
  ///@param context The context where the ListView associated with this adapter is running
  ///@param layout resource identifier of a layout file that defines the views
  ///            for this list item.  Unless you override them later, this will
  ///            define both the item views and the drop down views.
  ResourceCursorAdapter.ctor4(
      context_.Context context, int layout, cursor_.Cursor c)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor4,
            [context.reference, layout, c.reference]).object);

  static final _id_ctor5 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;ILandroid/database/Cursor;Z)V");

  /// from: public void <init>(android.content.Context context, int layout, android.database.Cursor c, boolean autoRequery)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor with default behavior as per
  /// CursorAdapter\#CursorAdapter(Context, Cursor, boolean); it is recommended
  /// you not use this, but instead \#ResourceCursorAdapter(Context, int, Cursor, int).
  /// When using this constructor, \#FLAG_REGISTER_CONTENT_OBSERVER
  /// will always be set.
  ///@param context The context where the ListView associated with this adapter is running
  ///@param layout resource identifier of a layout file that defines the views
  ///            for this list item.  Unless you override them later, this will
  ///            define both the item views and the drop down views.
  ///@param c The cursor from which to get the data.
  ///@param autoRequery If true the adapter will call requery() on the
  ///                    cursor whenever it changes so the most recent
  ///                    data is always displayed.  Using true here is discouraged.
  ResourceCursorAdapter.ctor5(
      context_.Context context, int layout, cursor_.Cursor c, bool autoRequery)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor5,
            [context.reference, layout, c.reference, autoRequery]).object);

  static final _id_ctor6 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;ILandroid/database/Cursor;I)V");

  /// from: public void <init>(android.content.Context context, int layout, android.database.Cursor c, int flags)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Standard constructor.
  ///@param context The context where the ListView associated with this adapter is running
  ///@param layout Resource identifier of a layout file that defines the views
  ///            for this list item.  Unless you override them later, this will
  ///            define both the item views and the drop down views.
  ///@param c The cursor from which to get the data.
  ///@param flags Flags used to determine the behavior of the adapter,
  /// as per CursorAdapter\#CursorAdapter(Context, Cursor, int).
  ResourceCursorAdapter.ctor6(
      context_.Context context, int layout, cursor_.Cursor c, int flags)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor6,
            [context.reference, layout, c.reference, flags]).object);

  static final _id_setDropDownViewTheme = jniAccessors.getMethodIDOf(_classRef,
      "setDropDownViewTheme", "(Landroid/content/res/Resources\$Theme;)V");

  /// from: public void setDropDownViewTheme(android.content.res.Resources.Theme theme)
  ///
  /// Sets the android.content.res.Resources.Theme against which drop-down views are
  /// inflated.
  ///
  /// By default, drop-down views are inflated against the theme of the
  /// Context passed to the adapter's constructor.
  ///@param theme the theme against which to inflate drop-down views or
  ///              {@code null} to use the theme from the adapter's context
  ///@see \#newDropDownView(Context, Cursor, ViewGroup)
  void setDropDownViewTheme(resources_.Resources_Theme theme) =>
      jniAccessors.callMethodWithArgs(reference, _id_setDropDownViewTheme,
          jni.JniType.voidType, [theme.reference]).check();

  static final _id_newView = jniAccessors.getMethodIDOf(_classRef, "newView",
      "(Landroid/content/Context;Landroid/database/Cursor;Landroid/view/ViewGroup;)Landroid/view/View;");

  /// from: public android.view.View newView(android.content.Context context, android.database.Cursor cursor, android.view.ViewGroup parent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Inflates view(s) from the specified XML file.
  ///@see android.widget.CursorAdapter\#newView(android.content.Context,
  ///      android.database.Cursor, ViewGroup)
  view_.View newView(context_.Context context, cursor_.Cursor cursor,
          viewgroup_.ViewGroup parent) =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_newView,
          jni.JniType.objectType,
          [context.reference, cursor.reference, parent.reference]).object);

  static final _id_newDropDownView = jniAccessors.getMethodIDOf(
      _classRef,
      "newDropDownView",
      "(Landroid/content/Context;Landroid/database/Cursor;Landroid/view/ViewGroup;)Landroid/view/View;");

  /// from: public android.view.View newDropDownView(android.content.Context context, android.database.Cursor cursor, android.view.ViewGroup parent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  view_.View newDropDownView(context_.Context context, cursor_.Cursor cursor,
          viewgroup_.ViewGroup parent) =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_newDropDownView,
          jni.JniType.objectType,
          [context.reference, cursor.reference, parent.reference]).object);

  static final _id_setViewResource =
      jniAccessors.getMethodIDOf(_classRef, "setViewResource", "(I)V");

  /// from: public void setViewResource(int layout)
  ///
  /// Sets the layout resource of the item views.
  ///
  ///@param layout the layout resources used to create item views
  void setViewResource(int layout) => jniAccessors.callMethodWithArgs(
      reference, _id_setViewResource, jni.JniType.voidType, [layout]).check();

  static final _id_setDropDownViewResource =
      jniAccessors.getMethodIDOf(_classRef, "setDropDownViewResource", "(I)V");

  /// from: public void setDropDownViewResource(int dropDownLayout)
  ///
  /// Sets the layout resource of the drop down views.
  ///
  ///@param dropDownLayout the layout resources used to create drop down views
  void setDropDownViewResource(int dropDownLayout) =>
      jniAccessors.callMethodWithArgs(reference, _id_setDropDownViewResource,
          jni.JniType.voidType, [dropDownLayout]).check();
}
