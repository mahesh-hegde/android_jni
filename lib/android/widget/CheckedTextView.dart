// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "TextView.dart" as textview_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../graphics/drawable/Drawable.dart" as drawable_;

import "../content/res/ColorStateList.dart" as colorstatelist_;

import "../graphics/PorterDuff.dart" as porterduff_;

import "../graphics/Canvas.dart" as canvas_;

import "../os/Parcelable.dart" as parcelable_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.CheckedTextView
///
/// An extension to TextView that supports the Checkable
/// interface and displays.
///
/// This is useful when used in a android.widget.ListView ListView where
/// the android.widget.ListView\#setChoiceMode(int) setChoiceMode has
/// been set to something other than
/// android.widget.ListView\#CHOICE_MODE_NONE CHOICE_MODE_NONE.
///@attr ref android.R.styleable\#CheckedTextView_checked
///@attr ref android.R.styleable\#CheckedTextView_checkMark
class CheckedTextView extends textview_.TextView {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/CheckedTextView");
  CheckedTextView.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CheckedTextView(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CheckedTextView.ctor1(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CheckedTextView.ctor2(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CheckedTextView.ctor3(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_toggle =
      jniAccessors.getMethodIDOf(_classRef, "toggle", "()V");

  /// from: public void toggle()
  void toggle() => jniAccessors.callMethodWithArgs(
      reference, _id_toggle, jni.JniType.voidType, []).check();

  static final _id_isChecked =
      jniAccessors.getMethodIDOf(_classRef, "isChecked", "()Z");

  /// from: public boolean isChecked()
  bool isChecked() => jniAccessors.callMethodWithArgs(
      reference, _id_isChecked, jni.JniType.booleanType, []).boolean;

  static final _id_setChecked =
      jniAccessors.getMethodIDOf(_classRef, "setChecked", "(Z)V");

  /// from: public void setChecked(boolean checked)
  ///
  /// Sets the checked state of this view.
  ///@param checked {@code true} set the state to checked, {@code false} to
  ///                uncheck
  void setChecked(bool checked) => jniAccessors.callMethodWithArgs(
      reference, _id_setChecked, jni.JniType.voidType, [checked]).check();

  static final _id_setCheckMarkDrawable =
      jniAccessors.getMethodIDOf(_classRef, "setCheckMarkDrawable", "(I)V");

  /// from: public void setCheckMarkDrawable(int resId)
  ///
  /// Sets the check mark to the drawable with the specified resource ID.
  ///
  /// When this view is checked, the drawable's state set will include
  /// android.R.attr\#state_checked.
  ///@param resId the resource identifier of drawable to use as the check
  ///              mark
  ///@attr ref android.R.styleable\#CheckedTextView_checkMark
  ///@see \#setCheckMarkDrawable(Drawable)
  ///@see \#getCheckMarkDrawable()
  void setCheckMarkDrawable(int resId) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCheckMarkDrawable,
      jni.JniType.voidType,
      [resId]).check();

  static final _id_setCheckMarkDrawable1 = jniAccessors.getMethodIDOf(_classRef,
      "setCheckMarkDrawable", "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void setCheckMarkDrawable(android.graphics.drawable.Drawable d)
  ///
  /// Set the check mark to the specified drawable.
  ///
  /// When this view is checked, the drawable's state set will include
  /// android.R.attr\#state_checked.
  ///@param d the drawable to use for the check mark
  /// This value may be {@code null}.
  ///@attr ref android.R.styleable\#CheckedTextView_checkMark
  ///@see \#setCheckMarkDrawable(int)
  ///@see \#getCheckMarkDrawable()
  void setCheckMarkDrawable1(drawable_.Drawable d) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCheckMarkDrawable1,
          jni.JniType.voidType, [d.reference]).check();

  static final _id_setCheckMarkTintList = jniAccessors.getMethodIDOf(_classRef,
      "setCheckMarkTintList", "(Landroid/content/res/ColorStateList;)V");

  /// from: public void setCheckMarkTintList(android.content.res.ColorStateList tint)
  ///
  /// Applies a tint to the check mark drawable. Does not modify the
  /// current tint mode, which is PorterDuff.Mode\#SRC_IN by default.
  ///
  /// Subsequent calls to \#setCheckMarkDrawable(Drawable) will
  /// automatically mutate the drawable and apply the specified tint and
  /// tint mode using
  /// Drawable\#setTintList(ColorStateList).
  ///@param tint the tint to apply, may be {@code null} to clear tint
  ///
  /// This value may be {@code null}.
  ///@attr ref android.R.styleable\#CheckedTextView_checkMarkTint
  ///@see \#getCheckMarkTintList()
  ///@see Drawable\#setTintList(ColorStateList)
  void setCheckMarkTintList(colorstatelist_.ColorStateList tint) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCheckMarkTintList,
          jni.JniType.voidType, [tint.reference]).check();

  static final _id_getCheckMarkTintList = jniAccessors.getMethodIDOf(_classRef,
      "getCheckMarkTintList", "()Landroid/content/res/ColorStateList;");

  /// from: public android.content.res.ColorStateList getCheckMarkTintList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the tint applied to the check mark drawable, if specified.
  ///@return the tint applied to the check mark drawable
  /// This value may be {@code null}.
  ///@attr ref android.R.styleable\#CheckedTextView_checkMarkTint
  ///@see \#setCheckMarkTintList(ColorStateList)
  colorstatelist_.ColorStateList getCheckMarkTintList() =>
      colorstatelist_.ColorStateList.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getCheckMarkTintList,
          jni.JniType.objectType, []).object);

  static final _id_setCheckMarkTintMode = jniAccessors.getMethodIDOf(_classRef,
      "setCheckMarkTintMode", "(Landroid/graphics/PorterDuff\$Mode;)V");

  /// from: public void setCheckMarkTintMode(android.graphics.PorterDuff.Mode tintMode)
  ///
  /// Specifies the blending mode used to apply the tint specified by
  /// \#setCheckMarkTintList(ColorStateList) to the check mark
  /// drawable. The default mode is PorterDuff.Mode\#SRC_IN.
  ///@param tintMode the blending mode used to apply the tint, may be
  ///                 {@code null} to clear tint
  /// This value may be {@code null}.
  ///@attr ref android.R.styleable\#CheckedTextView_checkMarkTintMode
  ///@see \#setCheckMarkTintList(ColorStateList)
  ///@see Drawable\#setTintMode(PorterDuff.Mode)
  void setCheckMarkTintMode(porterduff_.PorterDuff_Mode tintMode) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCheckMarkTintMode,
          jni.JniType.voidType, [tintMode.reference]).check();

  static final _id_getCheckMarkTintMode = jniAccessors.getMethodIDOf(_classRef,
      "getCheckMarkTintMode", "()Landroid/graphics/PorterDuff\$Mode;");

  /// from: public android.graphics.PorterDuff.Mode getCheckMarkTintMode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the blending mode used to apply the tint to the check mark
  /// drawable, if specified.
  ///@return the blending mode used to apply the tint to the check mark
  ///         drawable
  /// This value may be {@code null}.
  ///@attr ref android.R.styleable\#CheckedTextView_checkMarkTintMode
  ///@see \#setCheckMarkTintMode(PorterDuff.Mode)
  porterduff_.PorterDuff_Mode getCheckMarkTintMode() =>
      porterduff_.PorterDuff_Mode.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getCheckMarkTintMode,
          jni.JniType.objectType, []).object);

  static final _id_setVisibility1 =
      jniAccessors.getMethodIDOf(_classRef, "setVisibility", "(I)V");

  /// from: public void setVisibility(int visibility)
  void setVisibility1(int visibility) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setVisibility1,
      jni.JniType.voidType,
      [visibility]).check();

  static final _id_jumpDrawablesToCurrentState = jniAccessors.getMethodIDOf(
      _classRef, "jumpDrawablesToCurrentState", "()V");

  /// from: public void jumpDrawablesToCurrentState()
  void jumpDrawablesToCurrentState() => jniAccessors.callMethodWithArgs(
      reference,
      _id_jumpDrawablesToCurrentState,
      jni.JniType.voidType, []).check();

  static final _id_verifyDrawable = jniAccessors.getMethodIDOf(
      _classRef, "verifyDrawable", "(Landroid/graphics/drawable/Drawable;)Z");

  /// from: protected boolean verifyDrawable(android.graphics.drawable.Drawable who)
  ///
  /// @param who This value must never be {@code null}.
  bool verifyDrawable(drawable_.Drawable who) =>
      jniAccessors.callMethodWithArgs(reference, _id_verifyDrawable,
          jni.JniType.booleanType, [who.reference]).boolean;

  static final _id_getCheckMarkDrawable = jniAccessors.getMethodIDOf(_classRef,
      "getCheckMarkDrawable", "()Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getCheckMarkDrawable()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the checkmark drawable
  ///@return The drawable use to represent the checkmark, if any.
  ///@see \#setCheckMarkDrawable(Drawable)
  ///@see \#setCheckMarkDrawable(int)
  ///@attr ref android.R.styleable\#CheckedTextView_checkMark
  drawable_.Drawable getCheckMarkDrawable() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getCheckMarkDrawable, jni.JniType.objectType, []).object);

  static final _id_onRtlPropertiesChanged =
      jniAccessors.getMethodIDOf(_classRef, "onRtlPropertiesChanged", "(I)V");

  /// from: public void onRtlPropertiesChanged(int layoutDirection)
  void onRtlPropertiesChanged(int layoutDirection) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRtlPropertiesChanged,
          jni.JniType.voidType, [layoutDirection]).check();

  static final _id_onDraw = jniAccessors.getMethodIDOf(
      _classRef, "onDraw", "(Landroid/graphics/Canvas;)V");

  /// from: protected void onDraw(android.graphics.Canvas canvas)
  void onDraw(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_onDraw, jni.JniType.voidType, [canvas.reference]).check();

  static final _id_onCreateDrawableState =
      jniAccessors.getMethodIDOf(_classRef, "onCreateDrawableState", "(I)[I");

  /// from: protected int[] onCreateDrawableState(int extraSpace)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onCreateDrawableState(int extraSpace) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_onCreateDrawableState,
          jni.JniType.objectType,
          [extraSpace]).object);

  static final _id_drawableStateChanged =
      jniAccessors.getMethodIDOf(_classRef, "drawableStateChanged", "()V");

  /// from: protected void drawableStateChanged()
  void drawableStateChanged() => jniAccessors.callMethodWithArgs(
      reference, _id_drawableStateChanged, jni.JniType.voidType, []).check();

  static final _id_drawableHotspotChanged =
      jniAccessors.getMethodIDOf(_classRef, "drawableHotspotChanged", "(FF)V");

  /// from: public void drawableHotspotChanged(float x, float y)
  void drawableHotspotChanged(double x, double y) =>
      jniAccessors.callMethodWithArgs(reference, _id_drawableHotspotChanged,
          jni.JniType.voidType, [x, y]).check();

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);

  static final _id_onSaveInstanceState = jniAccessors.getMethodIDOf(
      _classRef, "onSaveInstanceState", "()Landroid/os/Parcelable;");

  /// from: public android.os.Parcelable onSaveInstanceState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  parcelable_.Parcelable onSaveInstanceState() =>
      parcelable_.Parcelable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onSaveInstanceState, jni.JniType.objectType, []).object);

  static final _id_onRestoreInstanceState = jniAccessors.getMethodIDOf(
      _classRef, "onRestoreInstanceState", "(Landroid/os/Parcelable;)V");

  /// from: public void onRestoreInstanceState(android.os.Parcelable state)
  void onRestoreInstanceState(parcelable_.Parcelable state) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRestoreInstanceState,
          jni.JniType.voidType, [state.reference]).check();
}
