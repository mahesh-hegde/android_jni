// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "TextView.dart" as textview_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../view/View.dart" as view_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.Chronometer
///
/// Class that implements a simple timer.
///
/// You can give it a start time in the SystemClock\#elapsedRealtime timebase,
/// and it counts up from that, or if you don't give it a base time, it will use the
/// time at which you call \#start.
///
/// The timer can also count downward towards the base time by
/// setting \#setCountDown(boolean) to true.
///
///  By default it will display the current
/// timer value in the form "MM:SS" or "H:MM:SS", or you can use \#setFormat
/// to format the timer value into an arbitrary string.
///@attr ref android.R.styleable\#Chronometer_format
///@attr ref android.R.styleable\#Chronometer_countDown
class Chronometer extends textview_.TextView {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/Chronometer");
  Chronometer.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Initialize this Chronometer object.
  /// Sets the base to the current time.
  Chronometer(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Initialize with standard view layout information.
  /// Sets the base to the current time.
  Chronometer.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Initialize with standard view layout information and style.
  /// Sets the base to the current time.
  Chronometer.ctor2(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Chronometer.ctor3(context_.Context context, attributeset_.AttributeSet attrs,
      int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_setCountDown =
      jniAccessors.getMethodIDOf(_classRef, "setCountDown", "(Z)V");

  /// from: public void setCountDown(boolean countDown)
  ///
  /// Set this view to count down to the base instead of counting up from it.
  ///@param countDown whether this view should count down
  ///@see \#setBase(long)
  void setCountDown(bool countDown) => jniAccessors.callMethodWithArgs(
      reference, _id_setCountDown, jni.JniType.voidType, [countDown]).check();

  static final _id_isCountDown =
      jniAccessors.getMethodIDOf(_classRef, "isCountDown", "()Z");

  /// from: public boolean isCountDown()
  ///
  /// @return whether this view counts down
  ///@see \#setCountDown(boolean)
  bool isCountDown() => jniAccessors.callMethodWithArgs(
      reference, _id_isCountDown, jni.JniType.booleanType, []).boolean;

  static final _id_isTheFinalCountDown =
      jniAccessors.getMethodIDOf(_classRef, "isTheFinalCountDown", "()Z");

  /// from: public boolean isTheFinalCountDown()
  ///
  /// @return whether this is the final countdown
  bool isTheFinalCountDown() => jniAccessors.callMethodWithArgs(
      reference, _id_isTheFinalCountDown, jni.JniType.booleanType, []).boolean;

  static final _id_setBase =
      jniAccessors.getMethodIDOf(_classRef, "setBase", "(J)V");

  /// from: public void setBase(long base)
  ///
  /// Set the time that the count-up timer is in reference to.
  ///@param base Use the SystemClock\#elapsedRealtime time base.
  void setBase(int base) => jniAccessors.callMethodWithArgs(
      reference, _id_setBase, jni.JniType.voidType, [base]).check();

  static final _id_getBase =
      jniAccessors.getMethodIDOf(_classRef, "getBase", "()J");

  /// from: public long getBase()
  ///
  /// Return the base time as set through \#setBase.
  int getBase() => jniAccessors.callMethodWithArgs(
      reference, _id_getBase, jni.JniType.longType, []).long;

  static final _id_setFormat = jniAccessors.getMethodIDOf(
      _classRef, "setFormat", "(Ljava/lang/String;)V");

  /// from: public void setFormat(java.lang.String format)
  ///
  /// Sets the format string used for display.  The Chronometer will display
  /// this string, with the first "%s" replaced by the current timer value in
  /// "MM:SS" or "H:MM:SS" form.
  ///
  /// If the format string is null, or if you never call setFormat(), the
  /// Chronometer will simply display the timer value in "MM:SS" or "H:MM:SS"
  /// form.
  ///@param format the format string.
  void setFormat(jni.JniString format) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setFormat,
      jni.JniType.voidType,
      [format.reference]).check();

  static final _id_getFormat = jniAccessors.getMethodIDOf(
      _classRef, "getFormat", "()Ljava/lang/String;");

  /// from: public java.lang.String getFormat()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the current format string as set through \#setFormat.
  jni.JniString getFormat() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFormat, jni.JniType.objectType, []).object);

  static final _id_setOnChronometerTickListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnChronometerTickListener",
      "(Landroid/widget/Chronometer\$OnChronometerTickListener;)V");

  /// from: public void setOnChronometerTickListener(android.widget.Chronometer.OnChronometerTickListener listener)
  ///
  /// Sets the listener to be called when the chronometer changes.
  ///@param listener The listener.
  void setOnChronometerTickListener(
          Chronometer_OnChronometerTickListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setOnChronometerTickListener,
          jni.JniType.voidType,
          [listener.reference]).check();

  static final _id_getOnChronometerTickListener = jniAccessors.getMethodIDOf(
      _classRef,
      "getOnChronometerTickListener",
      "()Landroid/widget/Chronometer\$OnChronometerTickListener;");

  /// from: public android.widget.Chronometer.OnChronometerTickListener getOnChronometerTickListener()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The listener (may be null) that is listening for chronometer change
  ///         events.
  Chronometer_OnChronometerTickListener getOnChronometerTickListener() =>
      Chronometer_OnChronometerTickListener.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getOnChronometerTickListener,
              jni.JniType.objectType, []).object);

  static final _id_start =
      jniAccessors.getMethodIDOf(_classRef, "start", "()V");

  /// from: public void start()
  ///
  /// Start counting up.  This does not affect the base as set from \#setBase, just
  /// the view display.
  ///
  /// Chronometer works by regularly scheduling messages to the handler, even when the
  /// Widget is not visible.  To make sure resource leaks do not occur, the user should
  /// make sure that each start() call has a reciprocal call to \#stop.
  void start() => jniAccessors.callMethodWithArgs(
      reference, _id_start, jni.JniType.voidType, []).check();

  static final _id_stop = jniAccessors.getMethodIDOf(_classRef, "stop", "()V");

  /// from: public void stop()
  ///
  /// Stop counting up.  This does not affect the base as set from \#setBase, just
  /// the view display.
  ///
  /// This stops the messages to the handler, effectively releasing resources that would
  /// be held as the chronometer is running, via \#start.
  void stop() => jniAccessors.callMethodWithArgs(
      reference, _id_stop, jni.JniType.voidType, []).check();

  static final _id_onDetachedFromWindow1 =
      jniAccessors.getMethodIDOf(_classRef, "onDetachedFromWindow", "()V");

  /// from: protected void onDetachedFromWindow()
  void onDetachedFromWindow1() => jniAccessors.callMethodWithArgs(
      reference, _id_onDetachedFromWindow1, jni.JniType.voidType, []).check();

  static final _id_onWindowVisibilityChanged1 = jniAccessors.getMethodIDOf(
      _classRef, "onWindowVisibilityChanged", "(I)V");

  /// from: protected void onWindowVisibilityChanged(int visibility)
  void onWindowVisibilityChanged1(int visibility) =>
      jniAccessors.callMethodWithArgs(reference, _id_onWindowVisibilityChanged1,
          jni.JniType.voidType, [visibility]).check();

  static final _id_onVisibilityChanged = jniAccessors.getMethodIDOf(
      _classRef, "onVisibilityChanged", "(Landroid/view/View;I)V");

  /// from: protected void onVisibilityChanged(android.view.View changedView, int visibility)
  void onVisibilityChanged(view_.View changedView, int visibility) =>
      jniAccessors.callMethodWithArgs(reference, _id_onVisibilityChanged,
          jni.JniType.voidType, [changedView.reference, visibility]).check();

  static final _id_getContentDescription1 = jniAccessors.getMethodIDOf(
      _classRef, "getContentDescription", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getContentDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getContentDescription1() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getContentDescription1, jni.JniType.objectType, []).object);

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);
}

/// from: android.widget.Chronometer$OnChronometerTickListener
///
/// A callback that notifies when the chronometer has incremented on its own.
class Chronometer_OnChronometerTickListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/widget/Chronometer\$OnChronometerTickListener");
  Chronometer_OnChronometerTickListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onChronometerTick = jniAccessors.getMethodIDOf(
      _classRef, "onChronometerTick", "(Landroid/widget/Chronometer;)V");

  /// from: public abstract void onChronometerTick(android.widget.Chronometer chronometer)
  ///
  /// Notification that the chronometer has changed.
  void onChronometerTick(Chronometer chronometer) =>
      jniAccessors.callMethodWithArgs(reference, _id_onChronometerTick,
          jni.JniType.voidType, [chronometer.reference]).check();
}
