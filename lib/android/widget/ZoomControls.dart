// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "LinearLayout.dart" as linearlayout_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../view/View.dart" as view_;

import "../view/MotionEvent.dart" as motionevent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.ZoomControls
///
/// The {@code ZoomControls} class displays a simple set of controls used for zooming and
/// provides callbacks to register for events.
class ZoomControls extends linearlayout_.LinearLayout {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/ZoomControls");
  ZoomControls.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ZoomControls(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ZoomControls.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_setOnZoomInClickListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnZoomInClickListener",
      "(Landroid/view/View\$OnClickListener;)V");

  /// from: public void setOnZoomInClickListener(android.view.View.OnClickListener listener)
  void setOnZoomInClickListener(view_.View_OnClickListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnZoomInClickListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_setOnZoomOutClickListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnZoomOutClickListener",
      "(Landroid/view/View\$OnClickListener;)V");

  /// from: public void setOnZoomOutClickListener(android.view.View.OnClickListener listener)
  void setOnZoomOutClickListener(view_.View_OnClickListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnZoomOutClickListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_setZoomSpeed =
      jniAccessors.getMethodIDOf(_classRef, "setZoomSpeed", "(J)V");

  /// from: public void setZoomSpeed(long speed)
  void setZoomSpeed(int speed) => jniAccessors.callMethodWithArgs(
      reference, _id_setZoomSpeed, jni.JniType.voidType, [speed]).check();

  static final _id_onTouchEvent1 = jniAccessors.getMethodIDOf(
      _classRef, "onTouchEvent", "(Landroid/view/MotionEvent;)Z");

  /// from: public boolean onTouchEvent(android.view.MotionEvent event)
  bool onTouchEvent1(motionevent_.MotionEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTouchEvent1,
          jni.JniType.booleanType, [event.reference]).boolean;

  static final _id_show0 = jniAccessors.getMethodIDOf(_classRef, "show", "()V");

  /// from: public void show()
  void show0() => jniAccessors.callMethodWithArgs(
      reference, _id_show0, jni.JniType.voidType, []).check();

  static final _id_hide0 = jniAccessors.getMethodIDOf(_classRef, "hide", "()V");

  /// from: public void hide()
  void hide0() => jniAccessors.callMethodWithArgs(
      reference, _id_hide0, jni.JniType.voidType, []).check();

  static final _id_setIsZoomInEnabled =
      jniAccessors.getMethodIDOf(_classRef, "setIsZoomInEnabled", "(Z)V");

  /// from: public void setIsZoomInEnabled(boolean isEnabled)
  void setIsZoomInEnabled(bool isEnabled) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setIsZoomInEnabled,
      jni.JniType.voidType,
      [isEnabled]).check();

  static final _id_setIsZoomOutEnabled =
      jniAccessors.getMethodIDOf(_classRef, "setIsZoomOutEnabled", "(Z)V");

  /// from: public void setIsZoomOutEnabled(boolean isEnabled)
  void setIsZoomOutEnabled(bool isEnabled) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setIsZoomOutEnabled,
      jni.JniType.voidType,
      [isEnabled]).check();

  static final _id_hasFocus1 =
      jniAccessors.getMethodIDOf(_classRef, "hasFocus", "()Z");

  /// from: public boolean hasFocus()
  bool hasFocus1() => jniAccessors.callMethodWithArgs(
      reference, _id_hasFocus1, jni.JniType.booleanType, []).boolean;

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);
}
