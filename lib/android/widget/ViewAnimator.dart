// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "FrameLayout.dart" as framelayout_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../view/View.dart" as view_;

import "../view/ViewGroup.dart" as viewgroup_;

import "../view/animation/Animation.dart" as animation_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.ViewAnimator
///
/// Base class for a FrameLayout container that will perform animations
/// when switching between its views.
///@attr ref android.R.styleable\#ViewAnimator_inAnimation
///@attr ref android.R.styleable\#ViewAnimator_outAnimation
///@attr ref android.R.styleable\#ViewAnimator_animateFirstView
class ViewAnimator extends framelayout_.FrameLayout {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/ViewAnimator");
  ViewAnimator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ViewAnimator(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ViewAnimator.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_setDisplayedChild =
      jniAccessors.getMethodIDOf(_classRef, "setDisplayedChild", "(I)V");

  /// from: public void setDisplayedChild(int whichChild)
  ///
  /// Sets which child view will be displayed.
  ///@param whichChild the index of the child view to display
  void setDisplayedChild(int whichChild) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setDisplayedChild,
      jni.JniType.voidType,
      [whichChild]).check();

  static final _id_getDisplayedChild =
      jniAccessors.getMethodIDOf(_classRef, "getDisplayedChild", "()I");

  /// from: public int getDisplayedChild()
  ///
  /// Returns the index of the currently displayed child view.
  int getDisplayedChild() => jniAccessors.callMethodWithArgs(
      reference, _id_getDisplayedChild, jni.JniType.intType, []).integer;

  static final _id_showNext =
      jniAccessors.getMethodIDOf(_classRef, "showNext", "()V");

  /// from: public void showNext()
  ///
  /// Manually shows the next child.
  void showNext() => jniAccessors.callMethodWithArgs(
      reference, _id_showNext, jni.JniType.voidType, []).check();

  static final _id_showPrevious =
      jniAccessors.getMethodIDOf(_classRef, "showPrevious", "()V");

  /// from: public void showPrevious()
  ///
  /// Manually shows the previous child.
  void showPrevious() => jniAccessors.callMethodWithArgs(
      reference, _id_showPrevious, jni.JniType.voidType, []).check();

  static final _id_addView5 = jniAccessors.getMethodIDOf(_classRef, "addView",
      "(Landroid/view/View;ILandroid/view/ViewGroup\$LayoutParams;)V");

  /// from: public void addView(android.view.View child, int index, android.view.ViewGroup.LayoutParams params)
  void addView5(view_.View child, int index,
          viewgroup_.ViewGroup_LayoutParams params) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addView5,
          jni.JniType.voidType,
          [child.reference, index, params.reference]).check();

  static final _id_removeAllViews1 =
      jniAccessors.getMethodIDOf(_classRef, "removeAllViews", "()V");

  /// from: public void removeAllViews()
  void removeAllViews1() => jniAccessors.callMethodWithArgs(
      reference, _id_removeAllViews1, jni.JniType.voidType, []).check();

  static final _id_removeView1 = jniAccessors.getMethodIDOf(
      _classRef, "removeView", "(Landroid/view/View;)V");

  /// from: public void removeView(android.view.View view)
  void removeView1(view_.View view) => jniAccessors.callMethodWithArgs(
      reference,
      _id_removeView1,
      jni.JniType.voidType,
      [view.reference]).check();

  static final _id_removeViewAt1 =
      jniAccessors.getMethodIDOf(_classRef, "removeViewAt", "(I)V");

  /// from: public void removeViewAt(int index)
  void removeViewAt1(int index) => jniAccessors.callMethodWithArgs(
      reference, _id_removeViewAt1, jni.JniType.voidType, [index]).check();

  static final _id_removeViewInLayout1 = jniAccessors.getMethodIDOf(
      _classRef, "removeViewInLayout", "(Landroid/view/View;)V");

  /// from: public void removeViewInLayout(android.view.View view)
  void removeViewInLayout1(view_.View view) => jniAccessors.callMethodWithArgs(
      reference,
      _id_removeViewInLayout1,
      jni.JniType.voidType,
      [view.reference]).check();

  static final _id_removeViews1 =
      jniAccessors.getMethodIDOf(_classRef, "removeViews", "(II)V");

  /// from: public void removeViews(int start, int count)
  void removeViews1(int start, int count) => jniAccessors.callMethodWithArgs(
      reference,
      _id_removeViews1,
      jni.JniType.voidType,
      [start, count]).check();

  static final _id_removeViewsInLayout1 =
      jniAccessors.getMethodIDOf(_classRef, "removeViewsInLayout", "(II)V");

  /// from: public void removeViewsInLayout(int start, int count)
  void removeViewsInLayout1(int start, int count) =>
      jniAccessors.callMethodWithArgs(reference, _id_removeViewsInLayout1,
          jni.JniType.voidType, [start, count]).check();

  static final _id_getCurrentView = jniAccessors.getMethodIDOf(
      _classRef, "getCurrentView", "()Landroid/view/View;");

  /// from: public android.view.View getCurrentView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the View corresponding to the currently displayed child.
  ///@return The View currently displayed.
  ///@see \#getDisplayedChild()
  view_.View getCurrentView() =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCurrentView, jni.JniType.objectType, []).object);

  static final _id_getInAnimation = jniAccessors.getMethodIDOf(
      _classRef, "getInAnimation", "()Landroid/view/animation/Animation;");

  /// from: public android.view.animation.Animation getInAnimation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the current animation used to animate a View that enters the screen.
  ///@return An Animation or null if none is set.
  ///@see \#setInAnimation(android.view.animation.Animation)
  ///@see \#setInAnimation(android.content.Context, int)
  animation_.Animation getInAnimation() =>
      animation_.Animation.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getInAnimation, jni.JniType.objectType, []).object);

  static final _id_setInAnimation = jniAccessors.getMethodIDOf(
      _classRef, "setInAnimation", "(Landroid/view/animation/Animation;)V");

  /// from: public void setInAnimation(android.view.animation.Animation inAnimation)
  ///
  /// Specifies the animation used to animate a View that enters the screen.
  ///@param inAnimation The animation started when a View enters the screen.
  ///@see \#getInAnimation()
  ///@see \#setInAnimation(android.content.Context, int)
  void setInAnimation(animation_.Animation inAnimation) =>
      jniAccessors.callMethodWithArgs(reference, _id_setInAnimation,
          jni.JniType.voidType, [inAnimation.reference]).check();

  static final _id_getOutAnimation = jniAccessors.getMethodIDOf(
      _classRef, "getOutAnimation", "()Landroid/view/animation/Animation;");

  /// from: public android.view.animation.Animation getOutAnimation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the current animation used to animate a View that exits the screen.
  ///@return An Animation or null if none is set.
  ///@see \#setOutAnimation(android.view.animation.Animation)
  ///@see \#setOutAnimation(android.content.Context, int)
  animation_.Animation getOutAnimation() =>
      animation_.Animation.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getOutAnimation, jni.JniType.objectType, []).object);

  static final _id_setOutAnimation = jniAccessors.getMethodIDOf(
      _classRef, "setOutAnimation", "(Landroid/view/animation/Animation;)V");

  /// from: public void setOutAnimation(android.view.animation.Animation outAnimation)
  ///
  /// Specifies the animation used to animate a View that exit the screen.
  ///@param outAnimation The animation started when a View exit the screen.
  ///@see \#getOutAnimation()
  ///@see \#setOutAnimation(android.content.Context, int)
  void setOutAnimation(animation_.Animation outAnimation) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOutAnimation,
          jni.JniType.voidType, [outAnimation.reference]).check();

  static final _id_setInAnimation1 = jniAccessors.getMethodIDOf(
      _classRef, "setInAnimation", "(Landroid/content/Context;I)V");

  /// from: public void setInAnimation(android.content.Context context, int resourceID)
  ///
  /// Specifies the animation used to animate a View that enters the screen.
  ///@param context The application's environment.
  ///@param resourceID The resource id of the animation.
  ///@see \#getInAnimation()
  ///@see \#setInAnimation(android.view.animation.Animation)
  void setInAnimation1(context_.Context context, int resourceID) =>
      jniAccessors.callMethodWithArgs(reference, _id_setInAnimation1,
          jni.JniType.voidType, [context.reference, resourceID]).check();

  static final _id_setOutAnimation1 = jniAccessors.getMethodIDOf(
      _classRef, "setOutAnimation", "(Landroid/content/Context;I)V");

  /// from: public void setOutAnimation(android.content.Context context, int resourceID)
  ///
  /// Specifies the animation used to animate a View that exit the screen.
  ///@param context The application's environment.
  ///@param resourceID The resource id of the animation.
  ///@see \#getOutAnimation()
  ///@see \#setOutAnimation(android.view.animation.Animation)
  void setOutAnimation1(context_.Context context, int resourceID) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOutAnimation1,
          jni.JniType.voidType, [context.reference, resourceID]).check();

  static final _id_getAnimateFirstView =
      jniAccessors.getMethodIDOf(_classRef, "getAnimateFirstView", "()Z");

  /// from: public boolean getAnimateFirstView()
  ///
  /// Returns whether the current View should be animated the first time the ViewAnimator
  /// is displayed.
  ///@return true if the current View will be animated the first time it is displayed,
  /// false otherwise.
  ///@see \#setAnimateFirstView(boolean)
  bool getAnimateFirstView() => jniAccessors.callMethodWithArgs(
      reference, _id_getAnimateFirstView, jni.JniType.booleanType, []).boolean;

  static final _id_setAnimateFirstView =
      jniAccessors.getMethodIDOf(_classRef, "setAnimateFirstView", "(Z)V");

  /// from: public void setAnimateFirstView(boolean animate)
  ///
  /// Indicates whether the current View should be animated the first time
  /// the ViewAnimator is displayed.
  ///@param animate True to animate the current View the first time it is displayed,
  ///                false otherwise.
  void setAnimateFirstView(bool animate) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setAnimateFirstView,
      jni.JniType.voidType,
      [animate]).check();

  static final _id_getBaseline1 =
      jniAccessors.getMethodIDOf(_classRef, "getBaseline", "()I");

  /// from: public int getBaseline()
  int getBaseline1() => jniAccessors.callMethodWithArgs(
      reference, _id_getBaseline1, jni.JniType.intType, []).integer;

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);
}
