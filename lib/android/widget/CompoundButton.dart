// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Button.dart" as button_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../graphics/drawable/Drawable.dart" as drawable_;

import "../content/res/ColorStateList.dart" as colorstatelist_;

import "../graphics/PorterDuff.dart" as porterduff_;

import "../graphics/Canvas.dart" as canvas_;

import "../os/Parcelable.dart" as parcelable_;

import "../view/ViewStructure.dart" as viewstructure_;

import "../view/autofill/AutofillValue.dart" as autofillvalue_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.CompoundButton
///
///
/// A button with two states, checked and unchecked. When the button is pressed
/// or clicked, the state changes automatically.
///
///
///
/// <strong>XML attributes</strong>
///
///
/// See android.R.styleable\#CompoundButton CompoundButton Attributes, android.R.styleable\#Button Button
/// Attributes, android.R.styleable\#TextView TextView Attributes, android.R.styleable\#View View Attributes
///
///
class CompoundButton extends button_.Button {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/CompoundButton");
  CompoundButton.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CompoundButton(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CompoundButton.ctor1(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;I)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CompoundButton.ctor2(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, attrs.reference, defStyleAttr]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;II)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs, int defStyleAttr, int defStyleRes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CompoundButton.ctor3(context_.Context context,
      attributeset_.AttributeSet attrs, int defStyleAttr, int defStyleRes)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          attrs.reference,
          defStyleAttr,
          defStyleRes
        ]).object);

  static final _id_toggle =
      jniAccessors.getMethodIDOf(_classRef, "toggle", "()V");

  /// from: public void toggle()
  void toggle() => jniAccessors.callMethodWithArgs(
      reference, _id_toggle, jni.JniType.voidType, []).check();

  static final _id_performClick1 =
      jniAccessors.getMethodIDOf(_classRef, "performClick", "()Z");

  /// from: public boolean performClick()
  bool performClick1() => jniAccessors.callMethodWithArgs(
      reference, _id_performClick1, jni.JniType.booleanType, []).boolean;

  static final _id_isChecked =
      jniAccessors.getMethodIDOf(_classRef, "isChecked", "()Z");

  /// from: public boolean isChecked()
  bool isChecked() => jniAccessors.callMethodWithArgs(
      reference, _id_isChecked, jni.JniType.booleanType, []).boolean;

  static final _id_setChecked =
      jniAccessors.getMethodIDOf(_classRef, "setChecked", "(Z)V");

  /// from: public void setChecked(boolean checked)
  ///
  /// Changes the checked state of this button.
  ///
  ///@param checked true to check the button, false to uncheck it
  void setChecked(bool checked) => jniAccessors.callMethodWithArgs(
      reference, _id_setChecked, jni.JniType.voidType, [checked]).check();

  static final _id_setOnCheckedChangeListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnCheckedChangeListener",
      "(Landroid/widget/CompoundButton\$OnCheckedChangeListener;)V");

  /// from: public void setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener listener)
  ///
  /// Register a callback to be invoked when the checked state of this button
  /// changes.
  ///@param listener the callback to call on checked state change
  ///
  /// This value may be {@code null}.
  void setOnCheckedChangeListener(
          CompoundButton_OnCheckedChangeListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnCheckedChangeListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_setButtonDrawable =
      jniAccessors.getMethodIDOf(_classRef, "setButtonDrawable", "(I)V");

  /// from: public void setButtonDrawable(int resId)
  ///
  /// Sets a drawable as the compound button image given its resource
  /// identifier.
  ///@param resId the resource identifier of the drawable
  ///@attr ref android.R.styleable\#CompoundButton_button
  void setButtonDrawable(int resId) => jniAccessors.callMethodWithArgs(
      reference, _id_setButtonDrawable, jni.JniType.voidType, [resId]).check();

  static final _id_setButtonDrawable1 = jniAccessors.getMethodIDOf(_classRef,
      "setButtonDrawable", "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void setButtonDrawable(android.graphics.drawable.Drawable drawable)
  ///
  /// Sets a drawable as the compound button image.
  ///@param drawable the drawable to set
  /// This value may be {@code null}.
  ///@attr ref android.R.styleable\#CompoundButton_button
  void setButtonDrawable1(drawable_.Drawable drawable) =>
      jniAccessors.callMethodWithArgs(reference, _id_setButtonDrawable1,
          jni.JniType.voidType, [drawable.reference]).check();

  static final _id_getButtonDrawable = jniAccessors.getMethodIDOf(
      _classRef, "getButtonDrawable", "()Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getButtonDrawable()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the drawable used as the compound button image
  /// This value may be {@code null}.
  ///@see \#setButtonDrawable(Drawable)
  ///@see \#setButtonDrawable(int)
  drawable_.Drawable getButtonDrawable() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getButtonDrawable, jni.JniType.objectType, []).object);

  static final _id_setButtonTintList = jniAccessors.getMethodIDOf(_classRef,
      "setButtonTintList", "(Landroid/content/res/ColorStateList;)V");

  /// from: public void setButtonTintList(android.content.res.ColorStateList tint)
  ///
  /// Applies a tint to the button drawable. Does not modify the current tint
  /// mode, which is PorterDuff.Mode\#SRC_IN by default.
  ///
  /// Subsequent calls to \#setButtonDrawable(Drawable) will
  /// automatically mutate the drawable and apply the specified tint and tint
  /// mode using
  /// Drawable\#setTintList(ColorStateList).
  ///@param tint the tint to apply, may be {@code null} to clear tint
  ///
  /// This value may be {@code null}.
  ///@attr ref android.R.styleable\#CompoundButton_buttonTint
  ///@see \#setButtonTintList(ColorStateList)
  ///@see Drawable\#setTintList(ColorStateList)
  void setButtonTintList(colorstatelist_.ColorStateList tint) =>
      jniAccessors.callMethodWithArgs(reference, _id_setButtonTintList,
          jni.JniType.voidType, [tint.reference]).check();

  static final _id_getButtonTintList = jniAccessors.getMethodIDOf(
      _classRef, "getButtonTintList", "()Landroid/content/res/ColorStateList;");

  /// from: public android.content.res.ColorStateList getButtonTintList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the tint applied to the button drawable
  /// This value may be {@code null}.
  ///@attr ref android.R.styleable\#CompoundButton_buttonTint
  ///@see \#setButtonTintList(ColorStateList)
  colorstatelist_.ColorStateList getButtonTintList() =>
      colorstatelist_.ColorStateList.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getButtonTintList, jni.JniType.objectType, []).object);

  static final _id_setButtonTintMode = jniAccessors.getMethodIDOf(
      _classRef, "setButtonTintMode", "(Landroid/graphics/PorterDuff\$Mode;)V");

  /// from: public void setButtonTintMode(android.graphics.PorterDuff.Mode tintMode)
  ///
  /// Specifies the blending mode used to apply the tint specified by
  /// \#setButtonTintList(ColorStateList)} to the button drawable. The
  /// default mode is PorterDuff.Mode\#SRC_IN.
  ///@param tintMode the blending mode used to apply the tint, may be
  ///                 {@code null} to clear tint
  /// This value may be {@code null}.
  ///@attr ref android.R.styleable\#CompoundButton_buttonTintMode
  ///@see \#getButtonTintMode()
  ///@see Drawable\#setTintMode(PorterDuff.Mode)
  void setButtonTintMode(porterduff_.PorterDuff_Mode tintMode) =>
      jniAccessors.callMethodWithArgs(reference, _id_setButtonTintMode,
          jni.JniType.voidType, [tintMode.reference]).check();

  static final _id_getButtonTintMode = jniAccessors.getMethodIDOf(
      _classRef, "getButtonTintMode", "()Landroid/graphics/PorterDuff\$Mode;");

  /// from: public android.graphics.PorterDuff.Mode getButtonTintMode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the blending mode used to apply the tint to the button drawable
  /// This value may be {@code null}.
  ///@attr ref android.R.styleable\#CompoundButton_buttonTintMode
  ///@see \#setButtonTintMode(PorterDuff.Mode)
  porterduff_.PorterDuff_Mode getButtonTintMode() =>
      porterduff_.PorterDuff_Mode.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getButtonTintMode, jni.JniType.objectType, []).object);

  static final _id_getAccessibilityClassName = jniAccessors.getMethodIDOf(
      _classRef, "getAccessibilityClassName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getAccessibilityClassName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAccessibilityClassName, jni.JniType.objectType, []).object);

  static final _id_getCompoundPaddingLeft1 =
      jniAccessors.getMethodIDOf(_classRef, "getCompoundPaddingLeft", "()I");

  /// from: public int getCompoundPaddingLeft()
  int getCompoundPaddingLeft1() => jniAccessors.callMethodWithArgs(
      reference, _id_getCompoundPaddingLeft1, jni.JniType.intType, []).integer;

  static final _id_getCompoundPaddingRight1 =
      jniAccessors.getMethodIDOf(_classRef, "getCompoundPaddingRight", "()I");

  /// from: public int getCompoundPaddingRight()
  int getCompoundPaddingRight1() => jniAccessors.callMethodWithArgs(
      reference, _id_getCompoundPaddingRight1, jni.JniType.intType, []).integer;

  static final _id_onDraw1 = jniAccessors.getMethodIDOf(
      _classRef, "onDraw", "(Landroid/graphics/Canvas;)V");

  /// from: protected void onDraw(android.graphics.Canvas canvas)
  void onDraw1(canvas_.Canvas canvas) => jniAccessors.callMethodWithArgs(
      reference, _id_onDraw1, jni.JniType.voidType, [canvas.reference]).check();

  static final _id_onCreateDrawableState1 =
      jniAccessors.getMethodIDOf(_classRef, "onCreateDrawableState", "(I)[I");

  /// from: protected int[] onCreateDrawableState(int extraSpace)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onCreateDrawableState1(int extraSpace) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_onCreateDrawableState1,
          jni.JniType.objectType,
          [extraSpace]).object);

  static final _id_drawableStateChanged1 =
      jniAccessors.getMethodIDOf(_classRef, "drawableStateChanged", "()V");

  /// from: protected void drawableStateChanged()
  void drawableStateChanged1() => jniAccessors.callMethodWithArgs(
      reference, _id_drawableStateChanged1, jni.JniType.voidType, []).check();

  static final _id_drawableHotspotChanged1 =
      jniAccessors.getMethodIDOf(_classRef, "drawableHotspotChanged", "(FF)V");

  /// from: public void drawableHotspotChanged(float x, float y)
  void drawableHotspotChanged1(double x, double y) =>
      jniAccessors.callMethodWithArgs(reference, _id_drawableHotspotChanged1,
          jni.JniType.voidType, [x, y]).check();

  static final _id_verifyDrawable1 = jniAccessors.getMethodIDOf(
      _classRef, "verifyDrawable", "(Landroid/graphics/drawable/Drawable;)Z");

  /// from: protected boolean verifyDrawable(android.graphics.drawable.Drawable who)
  ///
  /// @param who This value must never be {@code null}.
  bool verifyDrawable1(drawable_.Drawable who) =>
      jniAccessors.callMethodWithArgs(reference, _id_verifyDrawable1,
          jni.JniType.booleanType, [who.reference]).boolean;

  static final _id_jumpDrawablesToCurrentState1 = jniAccessors.getMethodIDOf(
      _classRef, "jumpDrawablesToCurrentState", "()V");

  /// from: public void jumpDrawablesToCurrentState()
  void jumpDrawablesToCurrentState1() => jniAccessors.callMethodWithArgs(
      reference,
      _id_jumpDrawablesToCurrentState1,
      jni.JniType.voidType, []).check();

  static final _id_onSaveInstanceState1 = jniAccessors.getMethodIDOf(
      _classRef, "onSaveInstanceState", "()Landroid/os/Parcelable;");

  /// from: public android.os.Parcelable onSaveInstanceState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  parcelable_.Parcelable onSaveInstanceState1() =>
      parcelable_.Parcelable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onSaveInstanceState1, jni.JniType.objectType, []).object);

  static final _id_onRestoreInstanceState1 = jniAccessors.getMethodIDOf(
      _classRef, "onRestoreInstanceState", "(Landroid/os/Parcelable;)V");

  /// from: public void onRestoreInstanceState(android.os.Parcelable state)
  void onRestoreInstanceState1(parcelable_.Parcelable state) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRestoreInstanceState1,
          jni.JniType.voidType, [state.reference]).check();

  static final _id_onProvideAutofillStructure1 = jniAccessors.getMethodIDOf(
      _classRef,
      "onProvideAutofillStructure",
      "(Landroid/view/ViewStructure;I)V");

  /// from: public void onProvideAutofillStructure(android.view.ViewStructure structure, int flags)
  void onProvideAutofillStructure1(
          viewstructure_.ViewStructure structure, int flags) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onProvideAutofillStructure1,
          jni.JniType.voidType,
          [structure.reference, flags]).check();

  static final _id_autofill2 = jniAccessors.getMethodIDOf(
      _classRef, "autofill", "(Landroid/view/autofill/AutofillValue;)V");

  /// from: public void autofill(android.view.autofill.AutofillValue value)
  void autofill2(autofillvalue_.AutofillValue value) =>
      jniAccessors.callMethodWithArgs(reference, _id_autofill2,
          jni.JniType.voidType, [value.reference]).check();

  static final _id_getAutofillType1 =
      jniAccessors.getMethodIDOf(_classRef, "getAutofillType", "()I");

  /// from: public int getAutofillType()
  ///
  /// @return Value is android.view.View\#AUTOFILL_TYPE_NONE, android.view.View\#AUTOFILL_TYPE_TEXT, android.view.View\#AUTOFILL_TYPE_TOGGLE, android.view.View\#AUTOFILL_TYPE_LIST, or android.view.View\#AUTOFILL_TYPE_DATE
  int getAutofillType1() => jniAccessors.callMethodWithArgs(
      reference, _id_getAutofillType1, jni.JniType.intType, []).integer;

  static final _id_getAutofillValue1 = jniAccessors.getMethodIDOf(
      _classRef, "getAutofillValue", "()Landroid/view/autofill/AutofillValue;");

  /// from: public android.view.autofill.AutofillValue getAutofillValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  autofillvalue_.AutofillValue getAutofillValue1() =>
      autofillvalue_.AutofillValue.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAutofillValue1, jni.JniType.objectType, []).object);
}

/// from: android.widget.CompoundButton$OnCheckedChangeListener
///
/// Interface definition for a callback to be invoked when the checked state
/// of a compound button changed.
class CompoundButton_OnCheckedChangeListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/widget/CompoundButton\$OnCheckedChangeListener");
  CompoundButton_OnCheckedChangeListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onCheckedChanged = jniAccessors.getMethodIDOf(
      _classRef, "onCheckedChanged", "(Landroid/widget/CompoundButton;Z)V");

  /// from: public abstract void onCheckedChanged(android.widget.CompoundButton buttonView, boolean isChecked)
  ///
  /// Called when the checked state of a compound button has changed.
  ///@param buttonView The compound button view whose state has changed.
  ///@param isChecked The new checked state of buttonView.
  void onCheckedChanged(CompoundButton buttonView, bool isChecked) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCheckedChanged,
          jni.JniType.voidType, [buttonView.reference, isChecked]).check();
}
