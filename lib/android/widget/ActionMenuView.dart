// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "LinearLayout.dart" as linearlayout_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../content/res/Configuration.dart" as configuration_;

import "../graphics/drawable/Drawable.dart" as drawable_;

import "../view/ViewGroup.dart" as viewgroup_;

import "../view/Menu.dart" as menu_;

import "../view/MenuItem.dart" as menuitem_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.widget.ActionMenuView
///
/// ActionMenuView is a presentation of a series of menu options as a View. It provides
/// several top level options as action buttons while spilling remaining options over as
/// items in an overflow menu. This allows applications to present packs of actions inline with
/// specific or repeating content.
class ActionMenuView extends linearlayout_.LinearLayout {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/ActionMenuView");
  ActionMenuView.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ActionMenuView(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ActionMenuView.ctor1(
      context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_setPopupTheme =
      jniAccessors.getMethodIDOf(_classRef, "setPopupTheme", "(I)V");

  /// from: public void setPopupTheme(int resId)
  ///
  /// Specifies the theme to use when inflating popup menus. By default, uses
  /// the same theme as the action menu view itself.
  ///@param resId theme used to inflate popup menus
  ///@see \#getPopupTheme()
  void setPopupTheme(int resId) => jniAccessors.callMethodWithArgs(
      reference, _id_setPopupTheme, jni.JniType.voidType, [resId]).check();

  static final _id_getPopupTheme =
      jniAccessors.getMethodIDOf(_classRef, "getPopupTheme", "()I");

  /// from: public int getPopupTheme()
  ///
  /// @return resource identifier of the theme used to inflate popup menus, or
  ///         0 if menus are inflated against the action menu view theme
  ///@see \#setPopupTheme(int)
  int getPopupTheme() => jniAccessors.callMethodWithArgs(
      reference, _id_getPopupTheme, jni.JniType.intType, []).integer;

  static final _id_onConfigurationChanged1 = jniAccessors.getMethodIDOf(
      _classRef,
      "onConfigurationChanged",
      "(Landroid/content/res/Configuration;)V");

  /// from: public void onConfigurationChanged(android.content.res.Configuration newConfig)
  void onConfigurationChanged1(configuration_.Configuration newConfig) =>
      jniAccessors.callMethodWithArgs(reference, _id_onConfigurationChanged1,
          jni.JniType.voidType, [newConfig.reference]).check();

  static final _id_setOnMenuItemClickListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnMenuItemClickListener",
      "(Landroid/widget/ActionMenuView\$OnMenuItemClickListener;)V");

  /// from: public void setOnMenuItemClickListener(android.widget.ActionMenuView.OnMenuItemClickListener listener)
  void setOnMenuItemClickListener(
          ActionMenuView_OnMenuItemClickListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnMenuItemClickListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_onMeasure1 =
      jniAccessors.getMethodIDOf(_classRef, "onMeasure", "(II)V");

  /// from: protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
  void onMeasure1(int widthMeasureSpec, int heightMeasureSpec) =>
      jniAccessors.callMethodWithArgs(reference, _id_onMeasure1,
          jni.JniType.voidType, [widthMeasureSpec, heightMeasureSpec]).check();

  static final _id_onLayout =
      jniAccessors.getMethodIDOf(_classRef, "onLayout", "(ZIIII)V");

  /// from: protected void onLayout(boolean changed, int left, int top, int right, int bottom)
  void onLayout(bool changed, int left, int top, int right, int bottom) =>
      jniAccessors.callMethodWithArgs(reference, _id_onLayout,
          jni.JniType.voidType, [changed, left, top, right, bottom]).check();

  static final _id_onDetachedFromWindow1 =
      jniAccessors.getMethodIDOf(_classRef, "onDetachedFromWindow", "()V");

  /// from: public void onDetachedFromWindow()
  void onDetachedFromWindow1() => jniAccessors.callMethodWithArgs(
      reference, _id_onDetachedFromWindow1, jni.JniType.voidType, []).check();

  static final _id_setOverflowIcon = jniAccessors.getMethodIDOf(
      _classRef, "setOverflowIcon", "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void setOverflowIcon(android.graphics.drawable.Drawable icon)
  ///
  /// Set the icon to use for the overflow button.
  ///@param icon Drawable to set, may be null to clear the icon
  ///
  /// This value may be {@code null}.
  void setOverflowIcon(drawable_.Drawable icon) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOverflowIcon,
          jni.JniType.voidType, [icon.reference]).check();

  static final _id_getOverflowIcon = jniAccessors.getMethodIDOf(
      _classRef, "getOverflowIcon", "()Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable getOverflowIcon()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the current drawable used as the overflow icon.
  ///@return The overflow icon drawable
  ///
  /// This value may be {@code null}.
  drawable_.Drawable getOverflowIcon() =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getOverflowIcon, jni.JniType.objectType, []).object);

  static final _id_generateDefaultLayoutParams2 = jniAccessors.getMethodIDOf(
      _classRef,
      "generateDefaultLayoutParams",
      "()Landroid/widget/ActionMenuView\$LayoutParams;");

  /// from: protected android.widget.ActionMenuView.LayoutParams generateDefaultLayoutParams()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ActionMenuView_LayoutParams generateDefaultLayoutParams2() =>
      ActionMenuView_LayoutParams.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_generateDefaultLayoutParams2,
          jni.JniType.objectType, []).object);

  static final _id_generateLayoutParams4 = jniAccessors.getMethodIDOf(
      _classRef,
      "generateLayoutParams",
      "(Landroid/util/AttributeSet;)Landroid/widget/ActionMenuView\$LayoutParams;");

  /// from: public android.widget.ActionMenuView.LayoutParams generateLayoutParams(android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ActionMenuView_LayoutParams generateLayoutParams4(
          attributeset_.AttributeSet attrs) =>
      ActionMenuView_LayoutParams.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_generateLayoutParams4,
          jni.JniType.objectType,
          [attrs.reference]).object);

  static final _id_generateLayoutParams5 = jniAccessors.getMethodIDOf(
      _classRef,
      "generateLayoutParams",
      "(Landroid/view/ViewGroup\$LayoutParams;)Landroid/widget/ActionMenuView\$LayoutParams;");

  /// from: protected android.widget.ActionMenuView.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams p)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ActionMenuView_LayoutParams generateLayoutParams5(
          viewgroup_.ViewGroup_LayoutParams p) =>
      ActionMenuView_LayoutParams.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_generateLayoutParams5,
          jni.JniType.objectType,
          [p.reference]).object);

  static final _id_checkLayoutParams = jniAccessors.getMethodIDOf(_classRef,
      "checkLayoutParams", "(Landroid/view/ViewGroup\$LayoutParams;)Z");

  /// from: protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams p)
  bool checkLayoutParams(viewgroup_.ViewGroup_LayoutParams p) =>
      jniAccessors.callMethodWithArgs(reference, _id_checkLayoutParams,
          jni.JniType.booleanType, [p.reference]).boolean;

  static final _id_getMenu =
      jniAccessors.getMethodIDOf(_classRef, "getMenu", "()Landroid/view/Menu;");

  /// from: public android.view.Menu getMenu()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Menu object that this ActionMenuView is currently presenting.
  ///
  /// Applications should use this method to obtain the ActionMenuView's Menu object
  /// and inflate or add content to it as necessary.
  ///
  ///@return the Menu presented by this view
  menu_.Menu getMenu() => menu_.Menu.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getMenu, jni.JniType.objectType, []).object);

  static final _id_showOverflowMenu =
      jniAccessors.getMethodIDOf(_classRef, "showOverflowMenu", "()Z");

  /// from: public boolean showOverflowMenu()
  ///
  /// Show the overflow items from the associated menu.
  ///@return true if the menu was able to be shown, false otherwise
  bool showOverflowMenu() => jniAccessors.callMethodWithArgs(
      reference, _id_showOverflowMenu, jni.JniType.booleanType, []).boolean;

  static final _id_hideOverflowMenu =
      jniAccessors.getMethodIDOf(_classRef, "hideOverflowMenu", "()Z");

  /// from: public boolean hideOverflowMenu()
  ///
  /// Hide the overflow items from the associated menu.
  ///@return true if the menu was able to be hidden, false otherwise
  bool hideOverflowMenu() => jniAccessors.callMethodWithArgs(
      reference, _id_hideOverflowMenu, jni.JniType.booleanType, []).boolean;

  static final _id_isOverflowMenuShowing =
      jniAccessors.getMethodIDOf(_classRef, "isOverflowMenuShowing", "()Z");

  /// from: public boolean isOverflowMenuShowing()
  ///
  /// Check whether the overflow menu is currently showing. This may not reflect
  /// a pending show operation in progress.
  ///@return true if the overflow menu is currently showing
  bool isOverflowMenuShowing() => jniAccessors.callMethodWithArgs(reference,
      _id_isOverflowMenuShowing, jni.JniType.booleanType, []).boolean;

  static final _id_dismissPopupMenus =
      jniAccessors.getMethodIDOf(_classRef, "dismissPopupMenus", "()V");

  /// from: public void dismissPopupMenus()
  ///
  /// Dismiss any popups associated with this menu view.
  void dismissPopupMenus() => jniAccessors.callMethodWithArgs(
      reference, _id_dismissPopupMenus, jni.JniType.voidType, []).check();
}

/// from: android.widget.ActionMenuView$OnMenuItemClickListener
///
/// Interface responsible for receiving menu item click events if the items themselves
/// do not have individual item click listeners.
class ActionMenuView_OnMenuItemClickListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/widget/ActionMenuView\$OnMenuItemClickListener");
  ActionMenuView_OnMenuItemClickListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onMenuItemClick = jniAccessors.getMethodIDOf(
      _classRef, "onMenuItemClick", "(Landroid/view/MenuItem;)Z");

  /// from: public abstract boolean onMenuItemClick(android.view.MenuItem item)
  ///
  /// This method will be invoked when a menu item is clicked if the item itself did
  /// not already handle the event.
  ///@param item MenuItem that was clicked
  ///@return <code>true</code> if the event was handled, <code>false</code> otherwise.
  bool onMenuItemClick(menuitem_.MenuItem item) =>
      jniAccessors.callMethodWithArgs(reference, _id_onMenuItemClick,
          jni.JniType.booleanType, [item.reference]).boolean;
}

/// from: android.widget.ActionMenuView$LayoutParams
class ActionMenuView_LayoutParams
    extends linearlayout_.LinearLayout_LayoutParams {
  static final _classRef =
      jniAccessors.getClassOf("android/widget/ActionMenuView\$LayoutParams");
  ActionMenuView_LayoutParams.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context c, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ActionMenuView_LayoutParams(
      context_.Context c, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [c.reference, attrs.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/view/ViewGroup\$LayoutParams;)V");

  /// from: public void <init>(android.view.ViewGroup.LayoutParams other)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ActionMenuView_LayoutParams.ctor2(viewgroup_.ViewGroup_LayoutParams other)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [other.reference]).object);

  static final _id_ctor6 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/widget/ActionMenuView\$LayoutParams;)V");

  /// from: public void <init>(android.widget.ActionMenuView.LayoutParams other)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ActionMenuView_LayoutParams.ctor6(ActionMenuView_LayoutParams other)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor6, [other.reference]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int width, int height)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ActionMenuView_LayoutParams.ctor1(int width, int height)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [width, height]).object);
}
