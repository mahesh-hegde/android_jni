// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.math.MathContext
///
/// The <code>MathContext</code> immutable class encapsulates the
/// settings understood by the operator methods of the BigDecimal
/// class (and potentially other classes).  Operator methods are those
/// that effect an operation on a number or a pair of numbers.
///
/// The settings, which are not base-dependent, comprise:
/// <ol>
/// <li><code>digits</code>:
/// the number of digits (precision) to be used for an operation
/// <li><code>form</code>:
/// the form of any exponent that results from the operation
/// <li><code>lostDigits</code>:
/// whether checking for lost digits is enabled
/// <li><code>roundingMode</code>:
/// the algorithm to be used for rounding.
/// </ol>
///
/// When provided, a <code>MathContext</code> object supplies the
/// settings for an operation directly.
///
/// When <code>MathContext.DEFAULT</code> is provided for a
/// <code>MathContext</code> parameter then the default settings are used
/// (<code>9, SCIENTIFIC, false, ROUND_HALF_UP</code>).
///
/// In the <code>BigDecimal</code> class, all methods which accept a
/// <code>MathContext</code> object defaults) also have a version of the
/// method which does not accept a MathContext parameter.  These versions
/// carry out unlimited precision fixed point arithmetic (as though the
/// settings were (<code>0, PLAIN, false, ROUND_HALF_UP</code>).
///
/// The instance variables are shared with default access (so they are
/// directly accessible to the <code>BigDecimal</code> class), but must
/// never be changed.
///
/// The rounding mode constants have the same names and values as the
/// constants of the same name in <code>java.math.BigDecimal</code>, to
/// maintain compatibility with earlier versions of
/// <code>BigDecimal</code>.
///@see BigDecimal
///@author Mike Cowlishaw
class MathContext extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/math/MathContext");
  MathContext.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_DEFAULT = jniAccessors.getStaticFieldIDOf(
      _classRef, "DEFAULT", "Landroid/icu/math/MathContext;");

  /// from: static public final android.icu.math.MathContext DEFAULT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A <code>MathContext</code> object initialized to the default
  /// settings for general-purpose arithmetic.  That is,
  /// <code>digits=9 form=SCIENTIFIC lostDigits=false
  /// roundingMode=ROUND_HALF_UP</code>.
  ///@see \#SCIENTIFIC
  ///@see \#ROUND_HALF_UP
  static MathContext get DEFAULT => MathContext.fromRef(jniAccessors
      .getStaticField(_classRef, _id_DEFAULT, jni.JniType.objectType)
      .object);

  /// from: static public final int ENGINEERING
  ///
  /// Standard floating point notation (with engineering exponential
  /// format, where the power of ten is a multiple of 3).
  /// Used as a setting to control the form of the result of a
  /// <code>BigDecimal</code> operation.
  /// A zero result in plain form may have a decimal part of one or
  /// more zeros.
  ///@see \#PLAIN
  ///@see \#SCIENTIFIC
  static const ENGINEERING = 2;

  /// from: static public final int PLAIN
  ///
  /// Plain (fixed point) notation, without any exponent.
  /// Used as a setting to control the form of the result of a
  /// <code>BigDecimal</code> operation.
  /// A zero result in plain form may have a decimal part of one or
  /// more zeros.
  ///@see \#ENGINEERING
  ///@see \#SCIENTIFIC
  static const PLAIN = 0;

  /// from: static public final int ROUND_CEILING
  ///
  /// Rounding mode to round to a more positive number.
  /// Used as a setting to control the rounding mode used during a
  /// <code>BigDecimal</code> operation.
  ///
  /// If any of the discarded digits are non-zero then the result
  /// should be rounded towards the next more positive digit.
  static const ROUND_CEILING = 2;

  /// from: static public final int ROUND_DOWN
  ///
  /// Rounding mode to round towards zero.
  /// Used as a setting to control the rounding mode used during a
  /// <code>BigDecimal</code> operation.
  ///
  /// All discarded digits are ignored (truncated).  The result is
  /// neither incremented nor decremented.
  static const ROUND_DOWN = 1;

  /// from: static public final int ROUND_FLOOR
  ///
  /// Rounding mode to round to a more negative number.
  /// Used as a setting to control the rounding mode used during a
  /// <code>BigDecimal</code> operation.
  ///
  /// If any of the discarded digits are non-zero then the result
  /// should be rounded towards the next more negative digit.
  static const ROUND_FLOOR = 3;

  /// from: static public final int ROUND_HALF_DOWN
  ///
  /// Rounding mode to round to nearest neighbor, where an equidistant
  /// value is rounded down.
  /// Used as a setting to control the rounding mode used during a
  /// <code>BigDecimal</code> operation.
  ///
  /// If the discarded digits represent greater than half (0.5 times)
  /// the value of a one in the next position then the result should be
  /// rounded up (away from zero).  Otherwise the discarded digits are
  /// ignored.
  static const ROUND_HALF_DOWN = 5;

  /// from: static public final int ROUND_HALF_EVEN
  ///
  /// Rounding mode to round to nearest neighbor, where an equidistant
  /// value is rounded to the nearest even neighbor.
  /// Used as a setting to control the rounding mode used during a
  /// <code>BigDecimal</code> operation.
  ///
  /// If the discarded digits represent greater than half (0.5 times)
  /// the value of a one in the next position then the result should be
  /// rounded up (away from zero).  If they represent less than half,
  /// then the result should be rounded down.
  ///
  /// Otherwise (they represent exactly half) the result is rounded
  /// down if its rightmost digit is even, or rounded up if its
  /// rightmost digit is odd (to make an even digit).
  static const ROUND_HALF_EVEN = 6;

  /// from: static public final int ROUND_HALF_UP
  ///
  /// Rounding mode to round to nearest neighbor, where an equidistant
  /// value is rounded up.
  /// Used as a setting to control the rounding mode used during a
  /// <code>BigDecimal</code> operation.
  ///
  /// If the discarded digits represent greater than or equal to half
  /// (0.5 times) the value of a one in the next position then the result
  /// should be rounded up (away from zero).  Otherwise the discarded
  /// digits are ignored.
  static const ROUND_HALF_UP = 4;

  /// from: static public final int ROUND_UNNECESSARY
  ///
  /// Rounding mode to assert that no rounding is necessary.
  /// Used as a setting to control the rounding mode used during a
  /// <code>BigDecimal</code> operation.
  ///
  /// Rounding (potential loss of information) is not permitted.
  /// If any of the discarded digits are non-zero then an
  /// <code>ArithmeticException</code> should be thrown.
  static const ROUND_UNNECESSARY = 7;

  /// from: static public final int ROUND_UP
  ///
  /// Rounding mode to round away from zero.
  /// Used as a setting to control the rounding mode used during a
  /// <code>BigDecimal</code> operation.
  ///
  /// If any of the discarded digits are non-zero then the result will
  /// be rounded up (away from zero).
  static const ROUND_UP = 0;

  /// from: static public final int SCIENTIFIC
  ///
  /// Standard floating point notation (with scientific exponential
  /// format, where there is one digit before any decimal point).
  /// Used as a setting to control the form of the result of a
  /// <code>BigDecimal</code> operation.
  /// A zero result in plain form may have a decimal part of one or
  /// more zeros.
  ///@see \#ENGINEERING
  ///@see \#PLAIN
  static const SCIENTIFIC = 1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int setdigits)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new <code>MathContext</code> with a specified
  /// precision.
  /// The other settings are set to the default values
  /// (see \#DEFAULT).
  ///
  /// An <code>IllegalArgumentException</code> is thrown if the
  /// <code>setdigits</code> parameter is out of range
  /// (&lt;0 or &gt;999999999).
  ///@param setdigits The <code>int</code> digits setting
  ///                      for this <code>MathContext</code>.
  ///@throws IllegalArgumentException parameter out of range.
  MathContext(int setdigits)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [setdigits]).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int setdigits, int setform)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new <code>MathContext</code> with a specified
  /// precision and form.
  /// The other settings are set to the default values
  /// (see \#DEFAULT).
  ///
  /// An <code>IllegalArgumentException</code> is thrown if the
  /// <code>setdigits</code> parameter is out of range
  /// (&lt;0 or &gt;999999999), or if the value given for the
  /// <code>setform</code> parameter is not one of the appropriate
  /// constants.
  ///@param setdigits The <code>int</code> digits setting
  ///                      for this <code>MathContext</code>.
  ///@param setform The <code>int</code> form setting
  ///                      for this <code>MathContext</code>.
  ///@throws IllegalArgumentException parameter out of range.
  MathContext.ctor1(int setdigits, int setform)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [setdigits, setform]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIZ)V");

  /// from: public void <init>(int setdigits, int setform, boolean setlostdigits)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new <code>MathContext</code> with a specified
  /// precision, form, and lostDigits setting.
  /// The roundingMode setting is set to its default value
  /// (see \#DEFAULT).
  ///
  /// An <code>IllegalArgumentException</code> is thrown if the
  /// <code>setdigits</code> parameter is out of range
  /// (&lt;0 or &gt;999999999), or if the value given for the
  /// <code>setform</code> parameter is not one of the appropriate
  /// constants.
  ///@param setdigits The <code>int</code> digits setting
  ///                      for this <code>MathContext</code>.
  ///@param setform The <code>int</code> form setting
  ///                      for this <code>MathContext</code>.
  ///@param setlostdigits The <code>boolean</code> lostDigits
  ///                      setting for this <code>MathContext</code>.
  ///@throws IllegalArgumentException parameter out of range.
  MathContext.ctor2(int setdigits, int setform, bool setlostdigits)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [setdigits, setform, setlostdigits]).object);

  static final _id_ctor3 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIZI)V");

  /// from: public void <init>(int setdigits, int setform, boolean setlostdigits, int setroundingmode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new <code>MathContext</code> with a specified
  /// precision, form, lostDigits, and roundingMode setting.
  ///
  /// An <code>IllegalArgumentException</code> is thrown if the
  /// <code>setdigits</code> parameter is out of range
  /// (&lt;0 or &gt;999999999), or if the value given for the
  /// <code>setform</code> or <code>setroundingmode</code> parameters is
  /// not one of the appropriate constants.
  ///@param setdigits The <code>int</code> digits setting
  ///                        for this <code>MathContext</code>.
  ///@param setform The <code>int</code> form setting
  ///                        for this <code>MathContext</code>.
  ///@param setlostdigits The <code>boolean</code> lostDigits
  ///                        setting for this <code>MathContext</code>.
  ///@param setroundingmode The <code>int</code> roundingMode setting
  ///                        for this <code>MathContext</code>.
  ///@throws IllegalArgumentException parameter out of range.
  MathContext.ctor3(
      int setdigits, int setform, bool setlostdigits, int setroundingmode)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3,
            [setdigits, setform, setlostdigits, setroundingmode]).object);

  static final _id_getDigits =
      jniAccessors.getMethodIDOf(_classRef, "getDigits", "()I");

  /// from: public int getDigits()
  ///
  /// Returns the digits setting.
  /// This value is always non-negative.
  ///@return an <code>int</code> which is the value of the digits
  ///         setting
  int getDigits() => jniAccessors.callMethodWithArgs(
      reference, _id_getDigits, jni.JniType.intType, []).integer;

  static final _id_getForm =
      jniAccessors.getMethodIDOf(_classRef, "getForm", "()I");

  /// from: public int getForm()
  ///
  /// Returns the form setting.
  /// This will be one of
  /// \#ENGINEERING,
  /// \#PLAIN, or
  /// \#SCIENTIFIC.
  ///@return an <code>int</code> which is the value of the form setting
  int getForm() => jniAccessors.callMethodWithArgs(
      reference, _id_getForm, jni.JniType.intType, []).integer;

  static final _id_getLostDigits =
      jniAccessors.getMethodIDOf(_classRef, "getLostDigits", "()Z");

  /// from: public boolean getLostDigits()
  ///
  /// Returns the lostDigits setting.
  /// This will be either <code>true</code> (enabled) or
  /// <code>false</code> (disabled).
  ///@return a <code>boolean</code> which is the value of the lostDigits
  ///           setting
  bool getLostDigits() => jniAccessors.callMethodWithArgs(
      reference, _id_getLostDigits, jni.JniType.booleanType, []).boolean;

  static final _id_getRoundingMode =
      jniAccessors.getMethodIDOf(_classRef, "getRoundingMode", "()I");

  /// from: public int getRoundingMode()
  ///
  /// Returns the roundingMode setting.
  /// This will be one of
  /// \#ROUND_CEILING,
  /// \#ROUND_DOWN,
  /// \#ROUND_FLOOR,
  /// \#ROUND_HALF_DOWN,
  /// \#ROUND_HALF_EVEN,
  /// \#ROUND_HALF_UP,
  /// \#ROUND_UNNECESSARY, or
  /// \#ROUND_UP.
  ///@return an <code>int</code> which is the value of the roundingMode
  ///         setting
  int getRoundingMode() => jniAccessors.callMethodWithArgs(
      reference, _id_getRoundingMode, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the <code>MathContext</code> as a readable string.
  /// The <code>String</code> returned represents the settings of the
  /// <code>MathContext</code> object as four blank-delimited words
  /// separated by a single blank and with no leading or trailing blanks,
  /// as follows:
  /// <ol>
  /// <li>
  /// <code>digits=</code>, immediately followed by
  /// the value of the digits setting as a numeric word.
  /// <li>
  /// <code>form=</code>, immediately followed by
  /// the value of the form setting as an uppercase word
  /// (one of <code>SCIENTIFIC</code>, <code>PLAIN</code>, or
  /// <code>ENGINEERING</code>).
  /// <li>
  /// <code>lostDigits=</code>, immediately followed by
  /// the value of the lostDigits setting
  /// (<code>1</code> if enabled, <code>0</code> if disabled).
  /// <li>
  /// <code>roundingMode=</code>, immediately followed by
  /// the value of the roundingMode setting as a word.
  /// This word will be the same as the name of the corresponding public
  /// constant.
  /// </ol>
  ///
  /// For example:
  /// <br><code>
  /// digits=9 form=SCIENTIFIC lostDigits=0 roundingMode=ROUND_HALF_UP
  /// </code>
  ///
  /// Additional words may be appended to the result of
  /// <code>toString</code> in the future if more properties are added
  /// to the class.
  ///@return a <code>String</code> representing the context settings.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
