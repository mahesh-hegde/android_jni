// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "MathContext.dart" as mathcontext_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.math.BigDecimal
///
/// The <code>BigDecimal</code> class implements immutable arbitrary-precision decimal numbers. The methods of the
/// <code>BigDecimal</code> class provide operations for fixed and floating point arithmetic, comparison, format
/// conversions, and hashing.
///
/// As the numbers are decimal, there is an exact correspondence between an instance of a <code>BigDecimal</code> object
/// and its <code>String</code> representation; the <code>BigDecimal</code> class provides direct conversions to and from
/// <code>String</code> and character array (<code>char[]</code>) objects, as well as conversions to and from the Java
/// primitive types (which may not be exact) and <code>BigInteger</code>.
///
/// In the descriptions of constructors and methods in this documentation, the value of a <code>BigDecimal</code> number
/// object is shown as the result of invoking the <code>toString()</code> method on the object. The internal
/// representation of a decimal number is neither defined nor exposed, and is not permitted to affect the result of any
/// operation.
///
/// The floating point arithmetic provided by this class is defined by the ANSI X3.274-1996 standard, and is also
/// documented at <code>http://www2.hursley.ibm.com/decimal</code> <br>
/// <i>[This URL will change.]</i>
///
/// <h3>Operator methods</h3>
///
/// Operations on <code>BigDecimal</code> numbers are controlled by a MathContext object, which provides the
/// context (precision and other information) for the operation. Methods that can take a <code>MathContext</code>
/// parameter implement the standard arithmetic operators for <code>BigDecimal</code> objects and are known as
/// <i>operator methods</i>. The default settings provided by the constant MathContext\#DEFAULT (<code>digits=9,
/// form=SCIENTIFIC, lostDigits=false, roundingMode=ROUND_HALF_UP</code>) perform general-purpose floating point
/// arithmetic to nine digits of precision. The <code>MathContext</code> parameter must not be <code>null</code>.
///
/// Each operator method also has a version provided which does not take a <code>MathContext</code> parameter. For this
/// version of each method, the context settings used are <code>digits=0,
/// form=PLAIN, lostDigits=false, roundingMode=ROUND_HALF_UP</code>; these settings perform fixed point arithmetic with
/// unlimited precision, as defined for the original BigDecimal class in Java 1.1 and Java 1.2.
///
/// For monadic operators, only the optional <code>MathContext</code> parameter is present; the operation acts upon the
/// current object.
///
/// For dyadic operators, a <code>BigDecimal</code> parameter is always present; it must not be <code>null</code>. The
/// operation acts with the current object being the left-hand operand and the <code>BigDecimal</code> parameter being
/// the right-hand operand.
///
/// For example, adding two <code>BigDecimal</code> objects referred to by the names <code>award</code> and
/// <code>extra</code> could be written as any of:
///
/// <code>
///     award.add(extra)
/// <br>award.add(extra, MathContext.DEFAULT)
/// <br>award.add(extra, acontext)
/// </code>
///
/// (where <code>acontext</code> is a <code>MathContext</code> object), which would return a <code>BigDecimal</code>
/// object whose value is the result of adding <code>award</code> and <code>extra</code> under the appropriate context
/// settings.
///
/// When a <code>BigDecimal</code> operator method is used, a set of rules define what the result will be (and, by
/// implication, how the result would be represented as a character string). These rules are defined in the BigDecimal
/// arithmetic documentation (see the URL above), but in summary:
/// <ul>
/// <li>Results are normally calculated with up to some maximum number of significant digits. For example, if the
/// <code>MathContext</code> parameter for an operation were <code>MathContext.DEFAULT</code> then the result would be
/// rounded to 9 digits; the division of 2 by 3 would then result in 0.666666667. <br>
/// You can change the default of 9 significant digits by providing the method with a suitable <code>MathContext</code>
/// object. This lets you calculate using as many digits as you need -- thousands, if necessary. Fixed point (scaled)
/// arithmetic is indicated by using a <code>digits</code> setting of 0 (or omitting the <code>MathContext</code>
/// parameter). <br>
/// Similarly, you can change the algorithm used for rounding from the default "classic" algorithm.
/// <li>
/// In standard arithmetic (that is, when the <code>form</code> setting is not <code>PLAIN</code>), a zero result is
/// always expressed as the single digit <code>'0'</code> (that is, with no sign, decimal point, or exponent part).
/// <li>
/// Except for the division and power operators in standard arithmetic, trailing zeros are preserved (this is in contrast
/// to binary floating point operations and most electronic calculators, which lose the information about trailing zeros
/// in the fractional part of results). <br>
/// So, for example:
///
/// <code>
///     new BigDecimal("2.40").add(     new BigDecimal("2"))      =&gt; "4.40"
/// <br>new BigDecimal("2.40").subtract(new BigDecimal("2"))      =&gt; "0.40"
/// <br>new BigDecimal("2.40").multiply(new BigDecimal("2"))      =&gt; "4.80"
/// <br>new BigDecimal("2.40").divide(  new BigDecimal("2"), def) =&gt; "1.2"
/// </code>
///
/// where the value on the right of the <code>=&gt;</code> would be the result of the operation, expressed as a
/// <code>String</code>, and <code>def</code> (in this and following examples) refers to <code>MathContext.DEFAULT</code>
/// ). This preservation of trailing zeros is desirable for most calculations (including financial calculations). If
/// necessary, trailing zeros may be easily removed using division by 1.
/// <li>
/// In standard arithmetic, exponential form is used for a result depending on its value and the current setting of
/// <code>digits</code> (the default is 9 digits). If the number of places needed before the decimal point exceeds the
/// <code>digits</code> setting, or the absolute value of the number is less than <code>0.000001</code>, then the number
/// will be expressed in exponential notation; thus
///
/// <code>
///   new BigDecimal("1e+6").multiply(new BigDecimal("1e+6"), def)
/// </code>
///
/// results in <code>1E+12</code> instead of <code>1000000000000</code>, and
///
/// <code>
///   new BigDecimal("1").divide(new BigDecimal("3E+10"), def)
/// </code>
///
/// results in <code>3.33333333E-11</code> instead of <code>0.0000000000333333333</code>.
///
/// The form of the exponential notation (scientific or engineering) is determined by the <code>form</code> setting.
/// </ul>
///
/// The names of methods in this class follow the conventions established by <code>java.lang.Number</code>,
/// <code>java.math.BigInteger</code>, and <code>java.math.BigDecimal</code> in Java 1.1 and Java 1.2.
///@see MathContext
///@author Mike Cowlishaw
class BigDecimal extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/math/BigDecimal");
  BigDecimal.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ONE = jniAccessors.getStaticFieldIDOf(
      _classRef, "ONE", "Landroid/icu/math/BigDecimal;");

  /// from: static public final android.icu.math.BigDecimal ONE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The <code>BigDecimal</code> constant "1".
  ///@see \#TEN
  ///@see \#ZERO
  static BigDecimal get ONE => BigDecimal.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ONE, jni.JniType.objectType)
      .object);

  /// from: static public final int ROUND_CEILING
  ///
  /// Rounding mode to round to a more positive number.
  ///@see MathContext\#ROUND_CEILING
  static const ROUND_CEILING = 2;

  /// from: static public final int ROUND_DOWN
  ///
  /// Rounding mode to round towards zero.
  ///@see MathContext\#ROUND_DOWN
  static const ROUND_DOWN = 1;

  /// from: static public final int ROUND_FLOOR
  ///
  /// Rounding mode to round to a more negative number.
  ///@see MathContext\#ROUND_FLOOR
  static const ROUND_FLOOR = 3;

  /// from: static public final int ROUND_HALF_DOWN
  ///
  /// Rounding mode to round to nearest neighbor, where an equidistant value is rounded down.
  ///@see MathContext\#ROUND_HALF_DOWN
  static const ROUND_HALF_DOWN = 5;

  /// from: static public final int ROUND_HALF_EVEN
  ///
  /// Rounding mode to round to nearest neighbor, where an equidistant value is rounded to the nearest even neighbor.
  ///@see MathContext\#ROUND_HALF_EVEN
  static const ROUND_HALF_EVEN = 6;

  /// from: static public final int ROUND_HALF_UP
  ///
  /// Rounding mode to round to nearest neighbor, where an equidistant value is rounded up.
  ///@see MathContext\#ROUND_HALF_UP
  static const ROUND_HALF_UP = 4;

  /// from: static public final int ROUND_UNNECESSARY
  ///
  /// Rounding mode to assert that no rounding is necessary.
  ///@see MathContext\#ROUND_UNNECESSARY
  static const ROUND_UNNECESSARY = 7;

  /// from: static public final int ROUND_UP
  ///
  /// Rounding mode to round away from zero.
  ///@see MathContext\#ROUND_UP
  static const ROUND_UP = 0;

  static final _id_TEN = jniAccessors.getStaticFieldIDOf(
      _classRef, "TEN", "Landroid/icu/math/BigDecimal;");

  /// from: static public final android.icu.math.BigDecimal TEN
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The <code>BigDecimal</code> constant "10".
  ///@see \#ONE
  ///@see \#ZERO
  static BigDecimal get TEN => BigDecimal.fromRef(jniAccessors
      .getStaticField(_classRef, _id_TEN, jni.JniType.objectType)
      .object);

  static final _id_ZERO = jniAccessors.getStaticFieldIDOf(
      _classRef, "ZERO", "Landroid/icu/math/BigDecimal;");

  /// from: static public final android.icu.math.BigDecimal ZERO
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The <code>BigDecimal</code> constant "0".
  ///@see \#ONE
  ///@see \#TEN
  static BigDecimal get ZERO => BigDecimal.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ZERO, jni.JniType.objectType)
      .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/math/BigDecimal;)V");

  /// from: public void <init>(java.math.BigDecimal bd)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>BigDecimal</code> object from a <code>java.math.BigDecimal</code>.
  ///
  /// Constructs a <code>BigDecimal</code> as though the parameter had been represented as a <code>String</code> (using
  /// its <code>toString</code> method) and the \#BigDecimal(java.lang.String) constructor had then been used.
  /// The parameter must not be <code>null</code>.
  ///
  /// <i>(Note: this constructor is provided only in the <code>android.icu.math</code> version of the BigDecimal class.
  /// It would not be present in a <code>java.math</code> version.)</i>
  ///@param bd The <code>BigDecimal</code> to be translated.
  BigDecimal(jni.JniObject bd)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [bd.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/math/BigInteger;)V");

  /// from: public void <init>(java.math.BigInteger bi)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>BigDecimal</code> object from a <code>BigInteger</code>, with scale 0.
  ///
  /// Constructs a <code>BigDecimal</code> which is the exact decimal representation of the <code>BigInteger</code>,
  /// with a scale of zero. The value of the <code>BigDecimal</code> is identical to the value of the <code>BigInteger
  /// </code>. The parameter must not be <code>null</code>.
  ///
  /// The <code>BigDecimal</code> will contain only decimal digits, prefixed with a leading minus sign (hyphen) if the
  /// <code>BigInteger</code> is negative. A leading zero will be present only if the <code>BigInteger</code> is zero.
  ///@param bi The <code>BigInteger</code> to be converted.
  BigDecimal.ctor1(jni.JniObject bi)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [bi.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/math/BigInteger;I)V");

  /// from: public void <init>(java.math.BigInteger bi, int scale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>BigDecimal</code> object from a <code>BigInteger</code> and a scale.
  ///
  /// Constructs a <code>BigDecimal</code> which is the exact decimal representation of the <code>BigInteger</code>,
  /// scaled by the second parameter, which may not be negative. The value of the <code>BigDecimal</code> is the <code>
  /// BigInteger</code> divided by ten to the power of the scale. The <code>BigInteger</code> parameter must not be
  /// <code>null</code>.
  ///
  /// The <code>BigDecimal</code> will contain only decimal digits, (with an embedded decimal point followed by <code>
  /// scale</code> decimal digits if the scale is positive), prefixed with a leading minus sign (hyphen) if the <code>
  /// BigInteger</code> is negative. A leading zero will be present only if the <code>BigInteger</code> is zero.
  ///@param bi The <code>BigInteger</code> to be converted.
  ///@param scale The <code>int</code> specifying the scale.
  ///@throws NumberFormatException If the scale is negative.
  BigDecimal.ctor2(jni.JniObject bi, int scale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [bi.reference, scale]).object);

  static final _id_ctor3 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "([C)V");

  /// from: public void <init>(char[] inchars)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>BigDecimal</code> object from an array of characters.
  ///
  /// Constructs a <code>BigDecimal</code> as though a <code>String</code> had been constructed from the character
  /// array and the \#BigDecimal(java.lang.String) constructor had then been used. The parameter must not be
  /// <code>null</code>.
  ///
  /// Using this constructor is faster than using the <code>BigDecimal(String)</code> constructor if the string is
  /// already available in character array form.
  ///@param inchars The <code>char[]</code> array containing the number to be converted.
  ///@throws NumberFormatException If the parameter is not a valid number.
  BigDecimal.ctor3(jni.JniObject inchars)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor3, [inchars.reference]).object);

  static final _id_ctor4 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "([CII)V");

  /// from: public void <init>(char[] inchars, int offset, int length)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>BigDecimal</code> object from an array of characters.
  ///
  /// Constructs a <code>BigDecimal</code> as though a <code>String</code> had been constructed from the character
  /// array (or a subarray of that array) and the \#BigDecimal(java.lang.String) constructor had then been used.
  /// The first parameter must not be <code>null</code>, and the subarray must be wholly contained within it.
  ///
  /// Using this constructor is faster than using the <code>BigDecimal(String)</code> constructor if the string is
  /// already available within a character array.
  ///@param inchars The <code>char[]</code> array containing the number to be converted.
  ///@param offset The <code>int</code> offset into the array of the start of the number to be converted.
  ///@param length The <code>int</code> length of the number.
  ///@throws NumberFormatException If the parameter is not a valid number for any reason.
  BigDecimal.ctor4(jni.JniObject inchars, int offset, int length)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [inchars.reference, offset, length]).object);

  static final _id_ctor5 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(D)V");

  /// from: public void <init>(double num)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>BigDecimal</code> object directly from a <code>double</code>.
  ///
  /// Constructs a <code>BigDecimal</code> which is the exact decimal representation of the 64-bit signed binary
  /// floating point parameter.
  ///
  /// Note that this constructor it an exact conversion; it does not give the same result as converting <code>num
  /// </code> to a <code>String</code> using the <code>Double.toString()</code> method and then using the
  /// \#BigDecimal(java.lang.String) constructor. To get that result, use the static \#valueOf(double)
  /// method to construct a <code>BigDecimal</code> from a <code>double</code>.
  ///@param num The <code>double</code> to be converted.
  ///@throws NumberFormatException If the parameter is infinite or not a number.
  BigDecimal.ctor5(double num)
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor5, [num]).object);

  static final _id_ctor6 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(I)V");

  /// from: public void <init>(int num)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>BigDecimal</code> object directly from a <code>int</code>.
  ///
  /// Constructs a <code>BigDecimal</code> which is the exact decimal representation of the 32-bit signed binary
  /// integer parameter. The <code>BigDecimal</code> will contain only decimal digits, prefixed with a leading minus
  /// sign (hyphen) if the parameter is negative. A leading zero will be present only if the parameter is zero.
  ///@param num The <code>int</code> to be converted.
  BigDecimal.ctor6(int num)
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor6, [num]).object);

  static final _id_ctor7 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(J)V");

  /// from: public void <init>(long num)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>BigDecimal</code> object directly from a <code>long</code>.
  ///
  /// Constructs a <code>BigDecimal</code> which is the exact decimal representation of the 64-bit signed binary
  /// integer parameter. The <code>BigDecimal</code> will contain only decimal digits, prefixed with a leading minus
  /// sign (hyphen) if the parameter is negative. A leading zero will be present only if the parameter is zero.
  ///@param num The <code>long</code> to be converted.
  BigDecimal.ctor7(int num)
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor7, [num]).object);

  static final _id_ctor8 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>BigDecimal</code> object from a <code>String</code>.
  ///
  /// Constructs a <code>BigDecimal</code> from the parameter, which must not be <code>null</code> and must represent a
  /// valid <i>number</i>, as described formally in the documentation referred to BigDecimal above.
  ///
  /// In summary, numbers in <code>String</code> form must have at least one digit, may have a leading sign, may have a
  /// decimal point, and exponential notation may be used. They follow conventional syntax, and may not contain blanks.
  ///
  /// Some valid strings from which a <code>BigDecimal</code> might be constructed are:
  ///
  /// <pre>
  ///
  /// "0" -- Zero "12" -- A whole number "-76" -- A signed whole number "12.70" -- Some decimal places "+0.003" -- Plus
  /// sign is allowed "17." -- The same as 17 ".5" -- The same as 0.5 "4E+9" -- Exponential notation "0.73e-7" --
  /// Exponential notation
  ///
  /// </pre>
  ///
  /// (Exponential notation means that the number includes an optional sign and a power of ten following an
  /// '<code>E</code>' that indicates how the decimal point will be shifted. Thus the <code>"4E+9"</code> above is
  /// just a short way of writing <code>4000000000</code>, and the <code>"0.73e-7"</code> is short for <code>
  /// 0.000000073</code>.)
  ///
  /// The <code>BigDecimal</code> constructed from the String is in a standard form, with no blanks, as though the
  /// \#add(BigDecimal) method had been used to add zero to the number with unlimited precision. If the string
  /// uses exponential notation (that is, includes an <code>e</code> or an <code>E</code>), then the <code>BigDecimal
  /// </code> number will be expressed in scientific notation (where the power of ten is adjusted so there is a single
  /// non-zero digit to the left of the decimal point); in this case if the number is zero then it will be expressed as
  /// the single digit 0, and if non-zero it will have an exponent unless that exponent would be 0. The exponent must
  /// fit in nine digits both before and after it is expressed in scientific notation.
  ///
  /// Any digits in the parameter must be decimal; that is, <code>Character.digit(c, 10)</code> (where <code>c</code>
  /// is the character in question) would not return -1.
  ///@param string The <code>String</code> to be converted.
  ///@throws NumberFormatException If the parameter is not a valid number.
  BigDecimal.ctor8(jni.JniString string)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor8, [string.reference]).object);

  static final _id_abs = jniAccessors.getMethodIDOf(
      _classRef, "abs", "()Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal abs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is the absolute value of this <code>BigDecimal</code>.
  ///
  /// The same as \#abs(MathContext), where the context is <code>new MathContext(0, MathContext.PLAIN)</code>.
  ///
  /// The length of the decimal part (the scale) of the result will be <code>this.scale()</code>
  ///@return A <code>BigDecimal</code> whose value is the absolute value of this <code>BigDecimal</code>.
  BigDecimal abs() => BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_abs, jni.JniType.objectType, []).object);

  static final _id_abs1 = jniAccessors.getMethodIDOf(_classRef, "abs",
      "(Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal abs(android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is the absolute value of this <code>BigDecimal</code>.
  ///
  /// If the current object is zero or positive, then the same result as invoking the \#plus(MathContext) method
  /// with the same parameter is returned. Otherwise, the same result as invoking the \#negate(MathContext)
  /// method with the same parameter is returned.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is the absolute value of this <code>BigDecimal</code>.
  BigDecimal abs1(mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference, _id_abs1,
          jni.JniType.objectType, [set0.reference]).object);

  static final _id_add = jniAccessors.getMethodIDOf(_classRef, "add",
      "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal add(android.icu.math.BigDecimal rhs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is <code>this+rhs</code>, using fixed point arithmetic.
  ///
  /// The same as \#add(BigDecimal, MathContext), where the <code>BigDecimal</code> is <code>rhs</code>, and the
  /// context is <code>new MathContext(0, MathContext.PLAIN)</code>.
  ///
  /// The length of the decimal part (the scale) of the result will be the maximum of the scales of the two operands.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the addition.
  ///@return A <code>BigDecimal</code> whose value is <code>this+rhs</code>, using fixed point arithmetic.
  BigDecimal add(BigDecimal rhs) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_add, jni.JniType.objectType, [rhs.reference]).object);

  static final _id_add1 = jniAccessors.getMethodIDOf(_classRef, "add",
      "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal add(android.icu.math.BigDecimal rhs, android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is <code>this+rhs</code>.
  ///
  /// Implements the addition (__<code>+</code>__) operator (as defined in the decimal documentation, see
  /// BigDecimal class header), and returns the result as a <code>BigDecimal</code> object.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the addition.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is <code>this+rhs</code>.
  BigDecimal add1(BigDecimal rhs, mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference, _id_add1,
          jni.JniType.objectType, [rhs.reference, set0.reference]).object);

  static final _id_compareTo = jniAccessors.getMethodIDOf(
      _classRef, "compareTo", "(Landroid/icu/math/BigDecimal;)I");

  /// from: public int compareTo(android.icu.math.BigDecimal rhs)
  ///
  /// Compares this <code>BigDecimal</code> to another, using unlimited precision.
  ///
  /// The same as \#compareTo(BigDecimal, MathContext), where the <code>BigDecimal</code> is <code>rhs</code>,
  /// and the context is <code>new MathContext(0, MathContext.PLAIN)</code>.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the comparison.
  ///@return An <code>int</code> whose value is -1, 0, or 1 as <code>this</code> is numerically less than, equal to,
  ///         or greater than <code>rhs</code>.
  int compareTo(BigDecimal rhs) => jniAccessors.callMethodWithArgs(
      reference, _id_compareTo, jni.JniType.intType, [rhs.reference]).integer;

  static final _id_compareTo1 = jniAccessors.getMethodIDOf(
      _classRef,
      "compareTo",
      "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)I");

  /// from: public int compareTo(android.icu.math.BigDecimal rhs, android.icu.math.MathContext set)
  ///
  /// Compares this <code>BigDecimal</code> to another.
  ///
  /// Implements numeric comparison, (as defined in the decimal documentation, see BigDecimal class header),
  /// and returns a result of type <code>int</code>.
  ///
  /// The result will be:
  /// <table cellpadding=2>
  /// <tr>
  /// <td align=right>__-1__</td> <td>if the current object is less than the first parameter</td>
  /// </tr>
  /// <tr>
  /// <td align=right>__0__</td> <td>if the current object is equal to the first parameter</td>
  /// </tr>
  /// <tr>
  /// <td align=right>__1__</td> <td>if the current object is greater than the first parameter.</td>
  /// </tr>
  /// </table>
  ///
  /// A \#compareTo(BigDecimal) method is also provided.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the comparison.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return An <code>int</code> whose value is -1, 0, or 1 as <code>this</code> is numerically less than, equal to,
  ///         or greater than <code>rhs</code>.
  int compareTo1(BigDecimal rhs, mathcontext_.MathContext set0) =>
      jniAccessors.callMethodWithArgs(reference, _id_compareTo1,
          jni.JniType.intType, [rhs.reference, set0.reference]).integer;

  static final _id_divide = jniAccessors.getMethodIDOf(_classRef, "divide",
      "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal divide(android.icu.math.BigDecimal rhs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is <code>this/rhs</code>, using fixed point arithmetic.
  ///
  /// The same as \#divide(BigDecimal, int), where the <code>BigDecimal</code> is <code>rhs</code>, and the
  /// rounding mode is MathContext\#ROUND_HALF_UP.
  ///
  /// The length of the decimal part (the scale) of the result will be the same as the scale of the current object, if
  /// the latter were formatted without exponential notation.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the division.
  ///@return A plain <code>BigDecimal</code> whose value is <code>this/rhs</code>, using fixed point arithmetic.
  ///@throws ArithmeticException If <code>rhs</code> is zero.
  BigDecimal divide(BigDecimal rhs) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference, _id_divide,
          jni.JniType.objectType, [rhs.reference]).object);

  static final _id_divide1 = jniAccessors.getMethodIDOf(_classRef, "divide",
      "(Landroid/icu/math/BigDecimal;I)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal divide(android.icu.math.BigDecimal rhs, int round)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is <code>this/rhs</code>, using fixed point arithmetic and a
  /// rounding mode.
  ///
  /// The same as \#divide(BigDecimal, int, int), where the <code>BigDecimal</code> is <code>rhs</code>, and the
  /// second parameter is <code>this.scale()</code>, and the third is <code>round</code>.
  ///
  /// The length of the decimal part (the scale) of the result will therefore be the same as the scale of the current
  /// object, if the latter were formatted without exponential notation.
  ///
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the division.
  ///@param round The <code>int</code> rounding mode to be used for the division (see the MathContext class).
  ///@return A plain <code>BigDecimal</code> whose value is <code>this/rhs</code>, using fixed point arithmetic and
  ///         the specified rounding mode.
  ///@throws IllegalArgumentException if <code>round</code> is not a valid rounding mode.
  ///@throws ArithmeticException if <code>rhs</code> is zero.
  ///@throws ArithmeticException if <code>round</code> is MathContext\#ROUND_UNNECESSARY and <code>this.scale()</code> is insufficient to represent the result exactly.
  BigDecimal divide1(BigDecimal rhs, int round) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference, _id_divide1,
          jni.JniType.objectType, [rhs.reference, round]).object);

  static final _id_divide2 = jniAccessors.getMethodIDOf(_classRef, "divide",
      "(Landroid/icu/math/BigDecimal;II)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal divide(android.icu.math.BigDecimal rhs, int scale, int round)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is <code>this/rhs</code>, using fixed point arithmetic and a
  /// given scale and rounding mode.
  ///
  /// The same as \#divide(BigDecimal, MathContext), where the <code>BigDecimal</code> is <code>rhs</code>,
  /// <code>new MathContext(0, MathContext.PLAIN, false, round)</code>, except that the length of the decimal part (the
  /// scale) to be used for the result is explicit rather than being taken from <code>this</code>.
  ///
  /// The length of the decimal part (the scale) of the result will be the same as the scale of the current object, if
  /// the latter were formatted without exponential notation.
  ///
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the division.
  ///@param scale The <code>int</code> scale to be used for the result.
  ///@param round The <code>int</code> rounding mode to be used for the division (see the MathContext class).
  ///@return A plain <code>BigDecimal</code> whose value is <code>this/rhs</code>, using fixed point arithmetic and
  ///         the specified rounding mode.
  ///@throws IllegalArgumentException if <code>round</code> is not a valid rounding mode.
  ///@throws ArithmeticException if <code>rhs</code> is zero.
  ///@throws ArithmeticException if <code>scale</code> is negative.
  ///@throws ArithmeticException if <code>round</code> is MathContext\#ROUND_UNNECESSARY and <code>scale</code> is insufficient
  ///             to represent the result exactly.
  BigDecimal divide2(BigDecimal rhs, int scale, int round) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference, _id_divide2,
          jni.JniType.objectType, [rhs.reference, scale, round]).object);

  static final _id_divide3 = jniAccessors.getMethodIDOf(_classRef, "divide",
      "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal divide(android.icu.math.BigDecimal rhs, android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is <code>this/rhs</code>.
  ///
  /// Implements the division (__<code>/</code>__) operator (as defined in the decimal documentation, see
  /// BigDecimal class header), and returns the result as a <code>BigDecimal</code> object.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the division.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is <code>this/rhs</code>.
  ///@throws ArithmeticException if <code>rhs</code> is zero.
  BigDecimal divide3(BigDecimal rhs, mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference, _id_divide3,
          jni.JniType.objectType, [rhs.reference, set0.reference]).object);

  static final _id_divideInteger = jniAccessors.getMethodIDOf(
      _classRef,
      "divideInteger",
      "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal divideInteger(android.icu.math.BigDecimal rhs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is the integer part of <code>this/rhs</code>.
  ///
  /// The same as \#divideInteger(BigDecimal, MathContext), where the <code>BigDecimal</code> is <code>rhs
  /// </code>, and the context is <code>new MathContext(0, MathContext.PLAIN)</code>.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the integer division.
  ///@return A <code>BigDecimal</code> whose value is the integer part of <code>this/rhs</code>.
  ///@throws ArithmeticException if <code>rhs</code> is zero.
  BigDecimal divideInteger(BigDecimal rhs) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_divideInteger, jni.JniType.objectType, [rhs.reference]).object);

  static final _id_divideInteger1 = jniAccessors.getMethodIDOf(
      _classRef,
      "divideInteger",
      "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal divideInteger(android.icu.math.BigDecimal rhs, android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is the integer part of <code>this/rhs</code>.
  ///
  /// Implements the integer division operator (as defined in the decimal documentation, see BigDecimal class
  /// header), and returns the result as a <code>BigDecimal</code> object.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the integer division.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is the integer part of <code>this/rhs</code>.
  ///@throws ArithmeticException if <code>rhs</code> is zero.
  ///@throws ArithmeticException if the result will not fit in the number of digits specified for the context.
  BigDecimal divideInteger1(BigDecimal rhs, mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_divideInteger1,
          jni.JniType.objectType,
          [rhs.reference, set0.reference]).object);

  static final _id_max = jniAccessors.getMethodIDOf(_classRef, "max",
      "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal max(android.icu.math.BigDecimal rhs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is the maximum of <code>this</code> and <code>rhs</code>.
  ///
  /// The same as \#max(BigDecimal, MathContext), where the <code>BigDecimal</code> is <code>rhs</code>, and the
  /// context is <code>new MathContext(0, MathContext.PLAIN)</code>.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the comparison.
  ///@return A <code>BigDecimal</code> whose value is the maximum of <code>this</code> and <code>rhs</code>.
  BigDecimal max(BigDecimal rhs) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_max, jni.JniType.objectType, [rhs.reference]).object);

  static final _id_max1 = jniAccessors.getMethodIDOf(_classRef, "max",
      "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal max(android.icu.math.BigDecimal rhs, android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is the maximum of <code>this</code> and <code>rhs</code>.
  ///
  /// Returns the larger of the current object and the first parameter.
  ///
  /// If calling the \#compareTo(BigDecimal, MathContext) method with the same parameters would return <code>1
  /// </code> or <code>0</code>, then the result of calling the \#plus(MathContext) method on the current object
  /// (using the same <code>MathContext</code> parameter) is returned. Otherwise, the result of calling the
  /// \#plus(MathContext) method on the first parameter object (using the same <code>MathContext</code>
  /// parameter) is returned.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the comparison.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is the maximum of <code>this</code> and <code>rhs</code>.
  BigDecimal max1(BigDecimal rhs, mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference, _id_max1,
          jni.JniType.objectType, [rhs.reference, set0.reference]).object);

  static final _id_min = jniAccessors.getMethodIDOf(_classRef, "min",
      "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal min(android.icu.math.BigDecimal rhs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is the minimum of <code>this</code> and <code>rhs</code>.
  ///
  /// The same as \#min(BigDecimal, MathContext), where the <code>BigDecimal</code> is <code>rhs</code>, and the
  /// context is <code>new MathContext(0, MathContext.PLAIN)</code>.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the comparison.
  ///@return A <code>BigDecimal</code> whose value is the minimum of <code>this</code> and <code>rhs</code>.
  BigDecimal min(BigDecimal rhs) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_min, jni.JniType.objectType, [rhs.reference]).object);

  static final _id_min1 = jniAccessors.getMethodIDOf(_classRef, "min",
      "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal min(android.icu.math.BigDecimal rhs, android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is the minimum of <code>this</code> and <code>rhs</code>.
  ///
  /// Returns the smaller of the current object and the first parameter.
  ///
  /// If calling the \#compareTo(BigDecimal, MathContext) method with the same parameters would return <code>-1
  /// </code> or <code>0</code>, then the result of calling the \#plus(MathContext) method on the current object
  /// (using the same <code>MathContext</code> parameter) is returned. Otherwise, the result of calling the
  /// \#plus(MathContext) method on the first parameter object (using the same <code>MathContext</code>
  /// parameter) is returned.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the comparison.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is the minimum of <code>this</code> and <code>rhs</code>.
  BigDecimal min1(BigDecimal rhs, mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference, _id_min1,
          jni.JniType.objectType, [rhs.reference, set0.reference]).object);

  static final _id_multiply = jniAccessors.getMethodIDOf(_classRef, "multiply",
      "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal multiply(android.icu.math.BigDecimal rhs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is <code>this*rhs</code>, using fixed point arithmetic.
  ///
  /// The same as \#add(BigDecimal, MathContext), where the <code>BigDecimal</code> is <code>rhs</code>, and the
  /// context is <code>new MathContext(0, MathContext.PLAIN)</code>.
  ///
  /// The length of the decimal part (the scale) of the result will be the sum of the scales of the operands, if they
  /// were formatted without exponential notation.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the multiplication.
  ///@return A <code>BigDecimal</code> whose value is <code>this*rhs</code>, using fixed point arithmetic.
  BigDecimal multiply(BigDecimal rhs) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_multiply, jni.JniType.objectType, [rhs.reference]).object);

  static final _id_multiply1 = jniAccessors.getMethodIDOf(_classRef, "multiply",
      "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal multiply(android.icu.math.BigDecimal rhs, android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is <code>this*rhs</code>.
  ///
  /// Implements the multiplication (__<code>&\#42;</code>__) operator (as defined in the decimal documentation, see
  /// BigDecimal class header), and returns the result as a <code>BigDecimal</code> object.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the multiplication.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is <code>this*rhs</code>.
  BigDecimal multiply1(BigDecimal rhs, mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_multiply1,
          jni.JniType.objectType,
          [rhs.reference, set0.reference]).object);

  static final _id_negate = jniAccessors.getMethodIDOf(
      _classRef, "negate", "()Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal negate()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is <code>-this</code>.
  ///
  /// The same as \#negate(MathContext), where the context is <code>new MathContext(0, MathContext.PLAIN)</code>
  /// .
  ///
  /// The length of the decimal part (the scale) of the result will be be <code>this.scale()</code>
  ///@return A <code>BigDecimal</code> whose value is <code>-this</code>.
  BigDecimal negate() => BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_negate, jni.JniType.objectType, []).object);

  static final _id_negate1 = jniAccessors.getMethodIDOf(_classRef, "negate",
      "(Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal negate(android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is <code>-this</code>.
  ///
  /// Implements the negation (Prefix __<code>-</code>__) operator (as defined in the decimal documentation, see
  /// BigDecimal class header), and returns the result as a <code>BigDecimal</code> object.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is <code>-this</code>.
  BigDecimal negate1(mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference, _id_negate1,
          jni.JniType.objectType, [set0.reference]).object);

  static final _id_plus = jniAccessors.getMethodIDOf(
      _classRef, "plus", "()Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal plus()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is <code>+this</code>. Note that <code>this</code> is not
  /// necessarily a plain <code>BigDecimal</code>, but the result will always be.
  ///
  /// The same as \#plus(MathContext), where the context is <code>new MathContext(0, MathContext.PLAIN)</code>.
  ///
  /// The length of the decimal part (the scale) of the result will be be <code>this.scale()</code>
  ///@return A <code>BigDecimal</code> whose value is <code>+this</code>.
  BigDecimal plus() => BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_plus, jni.JniType.objectType, []).object);

  static final _id_plus1 = jniAccessors.getMethodIDOf(_classRef, "plus",
      "(Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal plus(android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is <code>+this</code>.
  ///
  /// Implements the plus (Prefix __<code>+</code>__) operator (as defined in the decimal documentation, see
  /// BigDecimal class header), and returns the result as a <code>BigDecimal</code> object.
  ///
  /// This method is useful for rounding or otherwise applying a context to a decimal value.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is <code>+this</code>.
  BigDecimal plus1(mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference, _id_plus1,
          jni.JniType.objectType, [set0.reference]).object);

  static final _id_pow = jniAccessors.getMethodIDOf(_classRef, "pow",
      "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal pow(android.icu.math.BigDecimal rhs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is <code>this**rhs</code>, using fixed point arithmetic.
  ///
  /// The same as \#pow(BigDecimal, MathContext), where the <code>BigDecimal</code> is <code>rhs</code>, and the
  /// context is <code>new MathContext(0, MathContext.PLAIN)</code>.
  ///
  /// The parameter is the power to which the <code>this</code> will be raised; it must be in the range 0 through
  /// 999999999, and must have a decimal part of zero. Note that these restrictions may be removed in the future, so
  /// they should not be used as a test for a whole number.
  ///
  /// In addition, the power must not be negative, as no <code>MathContext</code> is used and so the result would then
  /// always be 0.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the operation (the power).
  ///@return A <code>BigDecimal</code> whose value is <code>this**rhs</code>, using fixed point arithmetic.
  ///@throws ArithmeticException if <code>rhs</code> is out of range or is not a whole number.
  BigDecimal pow(BigDecimal rhs) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_pow, jni.JniType.objectType, [rhs.reference]).object);

  static final _id_pow1 = jniAccessors.getMethodIDOf(_classRef, "pow",
      "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal pow(android.icu.math.BigDecimal rhs, android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is <code>this**rhs</code>.
  ///
  /// Implements the power (__<code>^</code>__) operator (as defined in the decimal documentation, see
  /// BigDecimal class header), and returns the result as a <code>BigDecimal</code> object.
  ///
  /// The first parameter is the power to which the <code>this</code> will be raised; it must be in the range
  /// -999999999 through 999999999, and must have a decimal part of zero. Note that these restrictions may be removed
  /// in the future, so they should not be used as a test for a whole number.
  ///
  /// If the <code>digits</code> setting of the <code>MathContext</code> parameter is 0, the power must be zero or
  /// positive.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the operation (the power).
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is <code>this**rhs</code>.
  ///@throws ArithmeticException if <code>rhs</code> is out of range or is not a whole number.
  BigDecimal pow1(BigDecimal rhs, mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference, _id_pow1,
          jni.JniType.objectType, [rhs.reference, set0.reference]).object);

  static final _id_remainder = jniAccessors.getMethodIDOf(
      _classRef,
      "remainder",
      "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal remainder(android.icu.math.BigDecimal rhs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is the remainder of <code>this/rhs</code>, using fixed point
  /// arithmetic.
  ///
  /// The same as \#remainder(BigDecimal, MathContext), where the <code>BigDecimal</code> is <code>rhs</code>,
  /// and the context is <code>new MathContext(0, MathContext.PLAIN)</code>.
  ///
  /// This is not the modulo operator -- the result may be negative.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the remainder operation.
  ///@return A <code>BigDecimal</code> whose value is the remainder of <code>this/rhs</code>, using fixed point
  ///         arithmetic.
  ///@throws ArithmeticException if <code>rhs</code> is zero.
  BigDecimal remainder(BigDecimal rhs) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_remainder, jni.JniType.objectType, [rhs.reference]).object);

  static final _id_remainder1 = jniAccessors.getMethodIDOf(
      _classRef,
      "remainder",
      "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal remainder(android.icu.math.BigDecimal rhs, android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is the remainder of <code>this/rhs</code>.
  ///
  /// Implements the remainder operator (as defined in the decimal documentation, see BigDecimal class header),
  /// and returns the result as a <code>BigDecimal</code> object.
  ///
  /// This is not the modulo operator -- the result may be negative.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the remainder operation.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is the remainder of <code>this+rhs</code>.
  ///@throws ArithmeticException if <code>rhs</code> is zero.
  ///@throws ArithmeticException if the integer part of the result will not fit in the number of digits specified for the context.
  BigDecimal remainder1(BigDecimal rhs, mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_remainder1,
          jni.JniType.objectType,
          [rhs.reference, set0.reference]).object);

  static final _id_subtract = jniAccessors.getMethodIDOf(_classRef, "subtract",
      "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal subtract(android.icu.math.BigDecimal rhs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose value is <code>this-rhs</code>, using fixed point arithmetic.
  ///
  /// The same as \#subtract(BigDecimal, MathContext), where the <code>BigDecimal</code> is <code>rhs</code>,
  /// and the context is <code>new MathContext(0, MathContext.PLAIN)</code>.
  ///
  /// The length of the decimal part (the scale) of the result will be the maximum of the scales of the two operands.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the subtraction.
  ///@return A <code>BigDecimal</code> whose value is <code>this-rhs</code>, using fixed point arithmetic.
  BigDecimal subtract(BigDecimal rhs) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_subtract, jni.JniType.objectType, [rhs.reference]).object);

  static final _id_subtract1 = jniAccessors.getMethodIDOf(_classRef, "subtract",
      "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal subtract(android.icu.math.BigDecimal rhs, android.icu.math.MathContext set)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>BigDecimal</code> whose value is <code>this-rhs</code>.
  ///
  /// Implements the subtraction (__<code>-</code>__) operator (as defined in the decimal documentation, see
  /// BigDecimal class header), and returns the result as a <code>BigDecimal</code> object.
  ///@param rhs The <code>BigDecimal</code> for the right hand side of the subtraction.
  ///@param set The <code>MathContext</code> arithmetic settings.
  ///@return A <code>BigDecimal</code> whose value is <code>this-rhs</code>.
  BigDecimal subtract1(BigDecimal rhs, mathcontext_.MathContext set0) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_subtract1,
          jni.JniType.objectType,
          [rhs.reference, set0.reference]).object);

  static final _id_byteValueExact =
      jniAccessors.getMethodIDOf(_classRef, "byteValueExact", "()B");

  /// from: public byte byteValueExact()
  ///
  /// Converts this <code>BigDecimal</code> to a <code>byte</code>. If the <code>BigDecimal</code> has a non-zero
  /// decimal part or is out of the possible range for a <code>byte</code> (8-bit signed integer) result then an <code>
  /// ArithmeticException</code> is thrown.
  ///@return A <code>byte</code> equal in value to <code>this</code>.
  ///@throws ArithmeticException if <code>this</code> has a non-zero decimal part, or will not fit in a <code>byte</code>.
  int byteValueExact() => jniAccessors.callMethodWithArgs(
      reference, _id_byteValueExact, jni.JniType.byteType, []).byte;

  static final _id_doubleValue =
      jniAccessors.getMethodIDOf(_classRef, "doubleValue", "()D");

  /// from: public double doubleValue()
  ///
  /// Converts this <code>BigDecimal</code> to a <code>double</code>. If the <code>BigDecimal</code> is out of the
  /// possible range for a <code>double</code> (64-bit signed floating point) result then an <code>ArithmeticException
  /// </code> is thrown.
  ///
  /// The double produced is identical to result of expressing the <code>BigDecimal</code> as a <code>String</code> and
  /// then converting it using the <code>Double(String)</code> constructor; this can result in values of <code>
  /// Double.NEGATIVE_INFINITY</code> or <code>Double.POSITIVE_INFINITY</code>.
  ///@return A <code>double</code> corresponding to <code>this</code>.
  double doubleValue() => jniAccessors.callMethodWithArgs(
      reference, _id_doubleValue, jni.JniType.doubleType, []).doubleFloat;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  ///
  /// Compares this <code>BigDecimal</code> with <code>rhs</code> for equality.
  ///
  /// If the parameter is <code>null</code>, or is not an instance of the BigDecimal type, or is not exactly equal to
  /// the current <code>BigDecimal</code> object, then <i>false</i> is returned. Otherwise, <i>true</i> is returned.
  ///
  /// "Exactly equal", here, means that the <code>String</code> representations of the <code>BigDecimal</code> numbers
  /// are identical (they have the same characters in the same sequence).
  ///
  /// The \#compareTo(BigDecimal, MathContext) method should be used for more general comparisons.
  ///@param obj The <code>Object</code> for the right hand side of the comparison.
  ///@return A <code>boolean</code> whose value <i>true</i> if and only if the operands have identical string
  ///         representations.
  ///@throws ClassCastException if <code>rhs</code> cannot be cast to a <code>BigDecimal</code> object.
  ///@see \#compareTo(BigDecimal)
  ///@see \#compareTo(BigDecimal, MathContext)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_floatValue =
      jniAccessors.getMethodIDOf(_classRef, "floatValue", "()F");

  /// from: public float floatValue()
  ///
  /// Converts this <code>BigDecimal</code> to a <code>float</code>. If the <code>BigDecimal</code> is out of the
  /// possible range for a <code>float</code> (32-bit signed floating point) result then an <code>ArithmeticException
  /// </code> is thrown.
  ///
  /// The float produced is identical to result of expressing the <code>BigDecimal</code> as a <code>String</code> and
  /// then converting it using the <code>Float(String)</code> constructor; this can result in values of <code>
  /// Float.NEGATIVE_INFINITY</code> or <code>Float.POSITIVE_INFINITY</code>.
  ///@return A <code>float</code> corresponding to <code>this</code>.
  double floatValue() => jniAccessors.callMethodWithArgs(
      reference, _id_floatValue, jni.JniType.floatType, []).float;

  static final _id_format =
      jniAccessors.getMethodIDOf(_classRef, "format", "(II)Ljava/lang/String;");

  /// from: public java.lang.String format(int before, int after)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the <code>String</code> representation of this <code>BigDecimal</code>, modified by layout parameters.
  ///
  /// <i>This method is provided as a primitive for use by more sophisticated classes, such as <code>DecimalFormat
  /// </code>, that can apply locale-sensitive editing of the result. The level of formatting that it provides is a
  /// necessary part of the BigDecimal class as it is sensitive to and must follow the calculation and rounding rules
  /// for BigDecimal arithmetic. However, if the function is provided elsewhere, it may be removed from this class.
  /// </i>
  ///
  /// The parameters, for both forms of the <code>format</code> method are all of type <code>int</code>. A value of -1
  /// for any parameter indicates that the default action or value for that parameter should be used.
  ///
  /// The parameters, <code>before</code> and <code>after</code>, specify the number of characters to be used for the
  /// integer part and decimal part of the result respectively. Exponential notation is not used. If either parameter
  /// is -1 (which indicates the default action), the number of characters used will be exactly as many as are needed
  /// for that part.
  ///
  /// <code>before</code> must be a positive number; if it is larger than is needed to contain the integer part, that
  /// part is padded on the left with blanks to the requested length. If <code>before</code> is not large enough to
  /// contain the integer part of the number (including the sign, for negative numbers) an exception is thrown.
  ///
  /// <code>after</code> must be a non-negative number; if it is not the same size as the decimal part of the number,
  /// the number will be rounded (or extended with zeros) to fit. Specifying 0 for <code>after</code> will cause the
  /// number to be rounded to an integer (that is, it will have no decimal part or decimal point). The rounding method
  /// will be the default, <code>MathContext.ROUND_HALF_UP</code>.
  ///
  /// Other rounding methods, and the use of exponential notation, can be selected by using
  /// \#format(int,int,int,int,int,int). Using the two-parameter form of the method has exactly the same effect
  /// as using the six-parameter form with the final four parameters all being -1.
  ///@param before The <code>int</code> specifying the number of places before the decimal point. Use -1 for 'as many as are needed'.
  ///@param after The <code>int</code> specifying the number of places after the decimal point. Use -1 for 'as many as are needed'.
  ///@return A <code>String</code> representing this <code>BigDecimal</code>, laid out according to the specified parameters
  ///@throws ArithmeticException if the number cannot be laid out as requested.
  ///@throws IllegalArgumentException if a parameter is out of range.
  ///@see \#toString
  ///@see \#toCharArray
  jni.JniString format(int before, int after) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_format, jni.JniType.objectType, [before, after]).object);

  static final _id_format1 = jniAccessors.getMethodIDOf(
      _classRef, "format", "(IIIIII)Ljava/lang/String;");

  /// from: public java.lang.String format(int before, int after, int explaces, int exdigits, int exformint, int exround)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the <code>String</code> representation of this <code>BigDecimal</code>, modified by layout parameters and
  /// allowing exponential notation.
  ///
  /// <i>This method is provided as a primitive for use by more sophisticated classes, such as <code>DecimalFormat
  /// </code>, that can apply locale-sensitive editing of the result. The level of formatting that it provides is a
  /// necessary part of the BigDecimal class as it is sensitive to and must follow the calculation and rounding rules
  /// for BigDecimal arithmetic. However, if the function is provided elsewhere, it may be removed from this class.
  /// </i>
  ///
  /// The parameters are all of type <code>int</code>. A value of -1 for any parameter indicates that the default
  /// action or value for that parameter should be used.
  ///
  /// The first two parameters (<code>before</code> and <code>after</code>) specify the number of characters to be used
  /// for the integer part and decimal part of the result respectively, as defined for \#format(int,int). If
  /// either of these is -1 (which indicates the default action), the number of characters used will be exactly as many
  /// as are needed for that part.
  ///
  /// The remaining parameters control the use of exponential notation and rounding. Three (<code>explaces</code>,
  /// <code>exdigits</code>, and <code>exform</code>) control the exponent part of the result. As before, the default
  /// action for any of these parameters may be selected by using the value -1.
  ///
  /// <code>explaces</code> must be a positive number; it sets the number of places (digits after the sign of the
  /// exponent) to be used for any exponent part, the default (when <code>explaces</code> is -1) being to use as many
  /// as are needed. If <code>explaces</code> is not -1, space is always reserved for an exponent; if one is not needed
  /// (for example, if the exponent will be 0) then <code>explaces</code>+2 blanks are appended to the result.
  /// (This preserves vertical alignment of similarly formatted numbers in a monospace font.) If <code>explaces
  /// </code> is not -1 and is not large enough to contain the exponent, an exception is thrown.
  ///
  /// <code>exdigits</code> sets the trigger point for use of exponential notation. If, before any rounding, the number
  /// of places needed before the decimal point exceeds <code>exdigits</code>, or if the absolute value of the result
  /// is less than <code>0.000001</code>, then exponential form will be used, provided that <code>exdigits</code> was
  /// specified. When <code>exdigits</code> is -1, exponential notation will never be used. If 0 is specified for
  /// <code>exdigits</code>, exponential notation is always used unless the exponent would be 0.
  ///
  /// <code>exform</code> sets the form for exponential notation (if needed). It may be either
  /// MathContext\#SCIENTIFIC or MathContext\#ENGINEERING. If the latter, engineering, form is requested,
  /// up to three digits (plus sign, if negative) may be needed for the integer part of the result (<code>before</code>
  /// ). Otherwise, only one digit (plus sign, if negative) is needed.
  ///
  /// Finally, the sixth argument, <code>exround</code>, selects the rounding algorithm to be used, and must be one of
  /// the values indicated by a public constant in the MathContext class whose name starts with <code>ROUND_
  /// </code>. The default (<code>ROUND_HALF_UP</code>) may also be selected by using the value -1, as before.
  ///
  /// The special value <code>MathContext.ROUND_UNNECESSARY</code> may be used to detect whether non-zero digits are
  /// discarded -- if <code>exround</code> has this value than if non-zero digits would be discarded (rounded) during
  /// formatting then an <code>ArithmeticException</code> is thrown.
  ///@param before The <code>int</code> specifying the number of places before the decimal point. Use -1 for 'as many as
  ///            are needed'.
  ///@param after The <code>int</code> specifying the number of places after the decimal point. Use -1 for 'as many as
  ///            are needed'.
  ///@param explaces The <code>int</code> specifying the number of places to be used for any exponent. Use -1 for 'as many
  ///            as are needed'.
  ///@param exdigits The <code>int</code> specifying the trigger (digits before the decimal point) which if exceeded causes
  ///            exponential notation to be used. Use 0 to force exponential notation. Use -1 to force plain notation
  ///            (no exponential notation).
  ///@param exformint The <code>int</code> specifying the form of exponential notation to be used (
  ///            MathContext\#SCIENTIFIC or MathContext\#ENGINEERING).
  ///@param exround The <code>int</code> specifying the rounding mode to use. Use -1 for the default,
  ///            MathContext\#ROUND_HALF_UP.
  ///@return A <code>String</code> representing this <code>BigDecimal</code>, laid out according to the specified
  ///         parameters
  ///@throws ArithmeticException if the number cannot be laid out as requested.
  ///@throws IllegalArgumentException if a parameter is out of range.
  ///@see \#toString
  ///@see \#toCharArray
  jni.JniString format1(int before, int after, int explaces, int exdigits,
          int exformint, int exround) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_format1,
          jni.JniType.objectType,
          [before, after, explaces, exdigits, exformint, exround]).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// Returns the hashcode for this <code>BigDecimal</code>. This hashcode is suitable for use by the <code>
  /// java.util.Hashtable</code> class.
  ///
  /// Note that two <code>BigDecimal</code> objects are only guaranteed to produce the same hashcode if they are
  /// exactly equal (that is, the <code>String</code> representations of the <code>BigDecimal</code> numbers are
  /// identical -- they have the same characters in the same sequence).
  ///@return An <code>int</code> that is the hashcode for <code>this</code>.
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_intValue =
      jniAccessors.getMethodIDOf(_classRef, "intValue", "()I");

  /// from: public int intValue()
  ///
  /// Converts this <code>BigDecimal</code> to an <code>int</code>. If the <code>BigDecimal</code> has a non-zero
  /// decimal part it is discarded. If the <code>BigDecimal</code> is out of the possible range for an <code>int</code>
  /// (32-bit signed integer) result then only the low-order 32 bits are used. (That is, the number may be
  /// <i>decapitated</i>.) To avoid unexpected errors when these conditions occur, use the \#intValueExact
  /// method.
  ///@return An <code>int</code> converted from <code>this</code>, truncated and decapitated if necessary.
  int intValue() => jniAccessors.callMethodWithArgs(
      reference, _id_intValue, jni.JniType.intType, []).integer;

  static final _id_intValueExact =
      jniAccessors.getMethodIDOf(_classRef, "intValueExact", "()I");

  /// from: public int intValueExact()
  ///
  /// Converts this <code>BigDecimal</code> to an <code>int</code>. If the <code>BigDecimal</code> has a non-zero
  /// decimal part or is out of the possible range for an <code>int</code> (32-bit signed integer) result then an
  /// <code>ArithmeticException</code> is thrown.
  ///@return An <code>int</code> equal in value to <code>this</code>.
  ///@throws ArithmeticException if <code>this</code> has a non-zero decimal part, or will not fit in an <code>int</code>.
  int intValueExact() => jniAccessors.callMethodWithArgs(
      reference, _id_intValueExact, jni.JniType.intType, []).integer;

  static final _id_longValue =
      jniAccessors.getMethodIDOf(_classRef, "longValue", "()J");

  /// from: public long longValue()
  ///
  /// Converts this <code>BigDecimal</code> to a <code>long</code>. If the <code>BigDecimal</code> has a non-zero
  /// decimal part it is discarded. If the <code>BigDecimal</code> is out of the possible range for a <code>long</code>
  /// (64-bit signed integer) result then only the low-order 64 bits are used. (That is, the number may be
  /// <i>decapitated</i>.) To avoid unexpected errors when these conditions occur, use the \#longValueExact
  /// method.
  ///@return A <code>long</code> converted from <code>this</code>, truncated and decapitated if necessary.
  int longValue() => jniAccessors.callMethodWithArgs(
      reference, _id_longValue, jni.JniType.longType, []).long;

  static final _id_longValueExact =
      jniAccessors.getMethodIDOf(_classRef, "longValueExact", "()J");

  /// from: public long longValueExact()
  ///
  /// Converts this <code>BigDecimal</code> to a <code>long</code>. If the <code>BigDecimal</code> has a non-zero
  /// decimal part or is out of the possible range for a <code>long</code> (64-bit signed integer) result then an
  /// <code>ArithmeticException</code> is thrown.
  ///@return A <code>long</code> equal in value to <code>this</code>.
  ///@throws ArithmeticException if <code>this</code> has a non-zero decimal part, or will not fit in a <code>long</code>.
  int longValueExact() => jniAccessors.callMethodWithArgs(
      reference, _id_longValueExact, jni.JniType.longType, []).long;

  static final _id_movePointLeft = jniAccessors.getMethodIDOf(
      _classRef, "movePointLeft", "(I)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal movePointLeft(int n)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose decimal point has been moved to the left by a specified number of
  /// positions. The parameter, <code>n</code>, specifies the number of positions to move the decimal point. That is,
  /// if <code>n</code> is 0 or positive, the number returned is given by:
  ///
  /// <code> this.multiply(TEN.pow(new BigDecimal(-n))) </code>
  ///
  /// <code>n</code> may be negative, in which case the method returns the same result as <code>movePointRight(-n)
  /// </code>.
  ///@param n The <code>int</code> specifying the number of places to move the decimal point leftwards.
  ///@return A <code>BigDecimal</code> derived from <code>this</code>, with the decimal point moved <code>n</code>
  ///         places to the left.
  BigDecimal movePointLeft(int n) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_movePointLeft, jni.JniType.objectType, [n]).object);

  static final _id_movePointRight = jniAccessors.getMethodIDOf(
      _classRef, "movePointRight", "(I)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal movePointRight(int n)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> whose decimal point has been moved to the right by a specified number of
  /// positions. The parameter, <code>n</code>, specifies the number of positions to move the decimal point. That is,
  /// if <code>n</code> is 0 or positive, the number returned is given by:
  ///
  /// <code> this.multiply(TEN.pow(new BigDecimal(n))) </code>
  ///
  /// <code>n</code> may be negative, in which case the method returns the same result as <code>movePointLeft(-n)
  /// </code>.
  ///@param n The <code>int</code> specifying the number of places to move the decimal point rightwards.
  ///@return A <code>BigDecimal</code> derived from <code>this</code>, with the decimal point moved <code>n</code>
  ///         places to the right.
  BigDecimal movePointRight(int n) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_movePointRight, jni.JniType.objectType, [n]).object);

  static final _id_scale =
      jniAccessors.getMethodIDOf(_classRef, "scale", "()I");

  /// from: public int scale()
  ///
  /// Returns the scale of this <code>BigDecimal</code>. Returns a non-negative <code>int</code> which is the scale of
  /// the number. The scale is the number of digits in the decimal part of the number if the number were formatted
  /// without exponential notation.
  ///@return An <code>int</code> whose value is the scale of this <code>BigDecimal</code>.
  int scale() => jniAccessors.callMethodWithArgs(
      reference, _id_scale, jni.JniType.intType, []).integer;

  static final _id_setScale = jniAccessors.getMethodIDOf(
      _classRef, "setScale", "(I)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal setScale(int scale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> with a given scale.
  ///
  /// If the given scale (which must be zero or positive) is the same as or greater than the length of the decimal part
  /// (the scale) of this <code>BigDecimal</code> then trailing zeros will be added to the decimal part as necessary.
  ///
  /// If the given scale is less than the length of the decimal part (the scale) of this <code>BigDecimal</code> then
  /// trailing digits will be removed, and in this case an <code>ArithmeticException</code> is thrown if any discarded
  /// digits are non-zero.
  ///
  /// The same as \#setScale(int, int), where the first parameter is the scale, and the second is <code>
  /// MathContext.ROUND_UNNECESSARY</code>.
  ///@param scale The <code>int</code> specifying the scale of the resulting <code>BigDecimal</code>.
  ///@return A plain <code>BigDecimal</code> with the given scale.
  ///@throws ArithmeticException if <code>scale</code> is negative.
  ///@throws ArithmeticException if reducing scale would discard non-zero digits.
  BigDecimal setScale(int scale) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setScale, jni.JniType.objectType, [scale]).object);

  static final _id_setScale1 = jniAccessors.getMethodIDOf(
      _classRef, "setScale", "(II)Landroid/icu/math/BigDecimal;");

  /// from: public android.icu.math.BigDecimal setScale(int scale, int round)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a plain <code>BigDecimal</code> with a given scale.
  ///
  /// If the given scale (which must be zero or positive) is the same as or greater than the length of the decimal part
  /// (the scale) of this <code>BigDecimal</code> then trailing zeros will be added to the decimal part as necessary.
  ///
  /// If the given scale is less than the length of the decimal part (the scale) of this <code>BigDecimal</code> then
  /// trailing digits will be removed, and the rounding mode given by the second parameter is used to determine if the
  /// remaining digits are affected by a carry. In this case, an <code>IllegalArgumentException</code> is thrown if
  /// <code>round</code> is not a valid rounding mode.
  ///
  /// If <code>round</code> is <code>MathContext.ROUND_UNNECESSARY</code>, an <code>ArithmeticException</code> is
  /// thrown if any discarded digits are non-zero.
  ///@param scale The <code>int</code> specifying the scale of the resulting <code>BigDecimal</code>.
  ///@param round The <code>int</code> rounding mode to be used for the division (see the MathContext class).
  ///@return A plain <code>BigDecimal</code> with the given scale.
  ///@throws IllegalArgumentException if <code>round</code> is not a valid rounding mode.
  ///@throws ArithmeticException if <code>scale</code> is negative.
  ///@throws ArithmeticException if <code>round</code> is <code>MathContext.ROUND_UNNECESSARY</code>, and reducing scale would discard
  ///             non-zero digits.
  BigDecimal setScale1(int scale, int round) =>
      BigDecimal.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setScale1, jni.JniType.objectType, [scale, round]).object);

  static final _id_shortValueExact =
      jniAccessors.getMethodIDOf(_classRef, "shortValueExact", "()S");

  /// from: public short shortValueExact()
  ///
  /// Converts this <code>BigDecimal</code> to a <code>short</code>. If the <code>BigDecimal</code> has a non-zero
  /// decimal part or is out of the possible range for a <code>short</code> (16-bit signed integer) result then an
  /// <code>ArithmeticException</code> is thrown.
  ///@return A <code>short</code> equal in value to <code>this</code>.
  ///@throws ArithmeticException if <code>this</code> has a non-zero decimal part, or will not fit in a <code>short</code>.
  int shortValueExact() => jniAccessors.callMethodWithArgs(
      reference, _id_shortValueExact, jni.JniType.shortType, []).short;

  static final _id_signum =
      jniAccessors.getMethodIDOf(_classRef, "signum", "()I");

  /// from: public int signum()
  ///
  /// Returns the sign of this <code>BigDecimal</code>, as an <code>int</code>. This returns the <i>signum</i> function
  /// value that represents the sign of this <code>BigDecimal</code>. That is, -1 if the <code>BigDecimal</code> is
  /// negative, 0 if it is numerically equal to zero, or 1 if it is positive.
  ///@return An <code>int</code> which is -1 if the <code>BigDecimal</code> is negative, 0 if it is numerically equal
  ///         to zero, or 1 if it is positive.
  int signum() => jniAccessors.callMethodWithArgs(
      reference, _id_signum, jni.JniType.intType, []).integer;

  static final _id_toBigDecimal = jniAccessors.getMethodIDOf(
      _classRef, "toBigDecimal", "()Ljava/math/BigDecimal;");

  /// from: public java.math.BigDecimal toBigDecimal()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Converts this <code>BigDecimal</code> to a <code>java.math.BigDecimal</code>.
  ///
  /// This is an exact conversion; the result is the same as if the <code>BigDecimal</code> were formatted as a plain
  /// number without any rounding or exponent and then the <code>java.math.BigDecimal(java.lang.String)</code>
  /// constructor were used to construct the result.
  ///
  /// <i>(Note: this method is provided only in the <code>android.icu.math</code> version of the BigDecimal class. It
  /// would not be present in a <code>java.math</code> version.)</i>
  ///@return The <code>java.math.BigDecimal</code> equal in value to this <code>BigDecimal</code>.
  jni.JniObject toBigDecimal() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toBigDecimal, jni.JniType.objectType, []).object);

  static final _id_toBigInteger = jniAccessors.getMethodIDOf(
      _classRef, "toBigInteger", "()Ljava/math/BigInteger;");

  /// from: public java.math.BigInteger toBigInteger()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Converts this <code>BigDecimal</code> to a <code>java.math.BigInteger</code>.
  ///
  /// Any decimal part is truncated (discarded). If an exception is desired should the decimal part be non-zero, use
  /// \#toBigIntegerExact().
  ///@return The <code>java.math.BigInteger</code> equal in value to the integer part of this <code>BigDecimal</code>.
  jni.JniObject toBigInteger() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toBigInteger, jni.JniType.objectType, []).object);

  static final _id_toBigIntegerExact = jniAccessors.getMethodIDOf(
      _classRef, "toBigIntegerExact", "()Ljava/math/BigInteger;");

  /// from: public java.math.BigInteger toBigIntegerExact()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Converts this <code>BigDecimal</code> to a <code>java.math.BigInteger</code>.
  ///
  /// An exception is thrown if the decimal part (if any) is non-zero.
  ///@return The <code>java.math.BigInteger</code> equal in value to the integer part of this <code>BigDecimal</code>.
  ///@throws ArithmeticException if <code>this</code> has a non-zero decimal part.
  jni.JniObject toBigIntegerExact() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toBigIntegerExact, jni.JniType.objectType, []).object);

  static final _id_toCharArray =
      jniAccessors.getMethodIDOf(_classRef, "toCharArray", "()[C");

  /// from: public char[] toCharArray()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the <code>BigDecimal</code> as a character array. The result of this method is the same as using the
  /// sequence <code>toString().toCharArray()</code>, but avoids creating the intermediate <code>String</code> and
  /// <code>char[]</code> objects.
  ///@return The <code>char[]</code> array corresponding to this <code>BigDecimal</code>.
  jni.JniObject toCharArray() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toCharArray, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the <code>BigDecimal</code> as a <code>String</code>. This returns a <code>String</code> that exactly
  /// represents this <code>BigDecimal</code>, as defined in the decimal documentation (see BigDecimal class
  /// header).
  ///
  /// By definition, using the \#BigDecimal(String) constructor on the result <code>String</code> will create a
  /// <code>BigDecimal</code> that is exactly equal to the original <code>BigDecimal</code>.
  ///@return The <code>String</code> exactly corresponding to this <code>BigDecimal</code>.
  ///@see \#format(int, int)
  ///@see \#format(int, int, int, int, int, int)
  ///@see \#toCharArray()
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_unscaledValue = jniAccessors.getMethodIDOf(
      _classRef, "unscaledValue", "()Ljava/math/BigInteger;");

  /// from: public java.math.BigInteger unscaledValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the number as a <code>BigInteger</code> after removing the scale. That is, the number is expressed as a
  /// plain number, any decimal point is then removed (retaining the digits of any decimal part), and the result is
  /// then converted to a <code>BigInteger</code>.
  ///@return The <code>java.math.BigInteger</code> equal in value to this <code>BigDecimal</code> multiplied by ten to
  ///         the power of <code>this.scale()</code>.
  jni.JniObject unscaledValue() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_unscaledValue, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef, "valueOf", "(D)Landroid/icu/math/BigDecimal;");

  /// from: static public android.icu.math.BigDecimal valueOf(double dub)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Translates a <code>double</code> to a <code>BigDecimal</code>.
  ///
  /// Returns a <code>BigDecimal</code> which is the decimal representation of the 64-bit signed binary floating point
  /// parameter. If the parameter is infinite, or is not a number (NaN), a <code>NumberFormatException</code> is
  /// thrown.
  ///
  /// The number is constructed as though <code>num</code> had been converted to a <code>String</code> using the <code>
  /// Double.toString()</code> method and the \#BigDecimal(java.lang.String) constructor had then been used.
  /// This is typically not an exact conversion.
  ///@param dub The <code>double</code> to be translated.
  ///@return The <code>BigDecimal</code> equal in value to <code>dub</code>.
  ///@throws NumberFormatException if the parameter is infinite or not a number.
  static BigDecimal valueOf(double dub) =>
      BigDecimal.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_valueOf, jni.JniType.objectType, [dub]).object);

  static final _id_valueOf1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "valueOf", "(J)Landroid/icu/math/BigDecimal;");

  /// from: static public android.icu.math.BigDecimal valueOf(long lint)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Translates a <code>long</code> to a <code>BigDecimal</code>. That is, returns a plain <code>BigDecimal</code>
  /// whose value is equal to the given <code>long</code>.
  ///@param lint The <code>long</code> to be translated.
  ///@return The <code>BigDecimal</code> equal in value to <code>lint</code>.
  static BigDecimal valueOf1(int lint) =>
      BigDecimal.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_valueOf1, jni.JniType.objectType, [lint]).object);

  static final _id_valueOf2 = jniAccessors.getStaticMethodIDOf(
      _classRef, "valueOf", "(JI)Landroid/icu/math/BigDecimal;");

  /// from: static public android.icu.math.BigDecimal valueOf(long lint, int scale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Translates a <code>long</code> to a <code>BigDecimal</code> with a given scale. That is, returns a plain <code>
  /// BigDecimal</code> whose unscaled value is equal to the given <code>long</code>, adjusted by the second parameter,
  /// <code>scale</code>.
  ///
  /// The result is given by:
  ///
  /// <code> (new BigDecimal(lint)).divide(TEN.pow(new BigDecimal(scale))) </code>
  ///
  /// A <code>NumberFormatException</code> is thrown if <code>scale</code> is negative.
  ///@param lint The <code>long</code> to be translated.
  ///@param scale The <code>int</code> scale to be applied.
  ///@return The <code>BigDecimal</code> equal in value to <code>lint</code>.
  ///@throws NumberFormatException if the scale is negative.
  static BigDecimal valueOf2(int lint, int scale) =>
      BigDecimal.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_valueOf2, jni.JniType.objectType, [lint, scale]).object);
}
