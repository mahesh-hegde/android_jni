// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../util/ULocale.dart" as ulocale_;

import "PluralRules.dart" as pluralrules_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.text.CurrencyPluralInfo
///
/// This class represents the information needed by
/// DecimalFormat to format currency plural,
/// such as "3.00 US dollars" or "1.00 US dollar".
/// DecimalFormat creates for itself an instance of
/// CurrencyPluralInfo from its locale data.
/// If you need to change any of these symbols, you can get the
/// CurrencyPluralInfo object from your
/// DecimalFormat and modify it.
///
/// Following are the information needed for currency plural format and parse:
/// locale information,
/// plural rule of the locale,
/// currency plural pattern of the locale.
class CurrencyPluralInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/CurrencyPluralInfo");
  CurrencyPluralInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a CurrencyPluralInfo object for the default <code>FORMAT</code> locale.
  ///@see Category\#FORMAT
  CurrencyPluralInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/Locale;)V");

  /// from: public void <init>(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a CurrencyPluralInfo object for the given locale.
  ///@param locale the locale
  CurrencyPluralInfo.ctor1(jni.JniObject locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [locale.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/ULocale;)V");

  /// from: public void <init>(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a CurrencyPluralInfo object for the given locale.
  ///@param locale the locale
  CurrencyPluralInfo.ctor2(ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [locale.reference]).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getInstance", "()Landroid/icu/text/CurrencyPluralInfo;");

  /// from: static public android.icu.text.CurrencyPluralInfo getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a CurrencyPluralInfo instance for the default locale.
  ///@return A CurrencyPluralInfo instance.
  static CurrencyPluralInfo getInstance() =>
      CurrencyPluralInfo.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getInstance, jni.JniType.objectType, []).object);

  static final _id_getInstance1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Ljava/util/Locale;)Landroid/icu/text/CurrencyPluralInfo;");

  /// from: static public android.icu.text.CurrencyPluralInfo getInstance(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a CurrencyPluralInfo instance for the given locale.
  ///@param locale the locale.
  ///@return A CurrencyPluralInfo instance.
  static CurrencyPluralInfo getInstance1(jni.JniObject locale) =>
      CurrencyPluralInfo.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance1,
          jni.JniType.objectType,
          [locale.reference]).object);

  static final _id_getInstance2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Landroid/icu/util/ULocale;)Landroid/icu/text/CurrencyPluralInfo;");

  /// from: static public android.icu.text.CurrencyPluralInfo getInstance(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a CurrencyPluralInfo instance for the given locale.
  ///@param locale the locale.
  ///@return A CurrencyPluralInfo instance.
  static CurrencyPluralInfo getInstance2(ulocale_.ULocale locale) =>
      CurrencyPluralInfo.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance2,
          jni.JniType.objectType,
          [locale.reference]).object);

  static final _id_getPluralRules = jniAccessors.getMethodIDOf(
      _classRef, "getPluralRules", "()Landroid/icu/text/PluralRules;");

  /// from: public android.icu.text.PluralRules getPluralRules()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets plural rules of this locale, used for currency plural format
  ///@return plural rule
  pluralrules_.PluralRules getPluralRules() =>
      pluralrules_.PluralRules.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPluralRules, jni.JniType.objectType, []).object);

  static final _id_getCurrencyPluralPattern = jniAccessors.getMethodIDOf(
      _classRef,
      "getCurrencyPluralPattern",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getCurrencyPluralPattern(java.lang.String pluralCount)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Given a plural count, gets currency plural pattern of this locale,
  /// used for currency plural format
  ///@param pluralCount currency plural count
  ///@return a currency plural pattern based on plural count
  jni.JniString getCurrencyPluralPattern(jni.JniString pluralCount) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getCurrencyPluralPattern,
          jni.JniType.objectType,
          [pluralCount.reference]).object);

  static final _id_getLocale = jniAccessors.getMethodIDOf(
      _classRef, "getLocale", "()Landroid/icu/util/ULocale;");

  /// from: public android.icu.util.ULocale getLocale()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get locale
  ///@return locale
  ulocale_.ULocale getLocale() =>
      ulocale_.ULocale.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLocale, jni.JniType.objectType, []).object);

  static final _id_setPluralRules = jniAccessors.getMethodIDOf(
      _classRef, "setPluralRules", "(Ljava/lang/String;)V");

  /// from: public void setPluralRules(java.lang.String ruleDescription)
  ///
  /// Set plural rules.  These are initially set in the constructor based on the locale,
  /// and usually do not need to be changed.
  ///@param ruleDescription new plural rule description
  void setPluralRules(jni.JniString ruleDescription) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPluralRules,
          jni.JniType.voidType, [ruleDescription.reference]).check();

  static final _id_setCurrencyPluralPattern = jniAccessors.getMethodIDOf(
      _classRef,
      "setCurrencyPluralPattern",
      "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void setCurrencyPluralPattern(java.lang.String pluralCount, java.lang.String pattern)
  ///
  /// Set currency plural patterns.  These are initially set in the constructor based on the
  /// locale, and usually do not need to be changed.
  ///
  /// The decimal digits part of the pattern cannot be specified via this method.  All plural
  /// forms will use the same decimal pattern as set in the constructor of DecimalFormat.  For
  /// example, you can't set "0.0" for plural "few" but "0.00" for plural "many".
  ///@param pluralCount the plural count for which the currency pattern will
  ///                    be overridden.
  ///@param pattern the new currency plural pattern
  void setCurrencyPluralPattern(
          jni.JniString pluralCount, jni.JniString pattern) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setCurrencyPluralPattern,
          jni.JniType.voidType,
          [pluralCount.reference, pattern.reference]).check();

  static final _id_setLocale = jniAccessors.getMethodIDOf(
      _classRef, "setLocale", "(Landroid/icu/util/ULocale;)V");

  /// from: public void setLocale(android.icu.util.ULocale loc)
  ///
  /// Set locale.  This also sets both the plural rules and the currency plural patterns to be
  /// the defaults for the locale.
  ///@param loc the new locale to set
  void setLocale(ulocale_.ULocale loc) => jniAccessors.callMethodWithArgs(
      reference, _id_setLocale, jni.JniType.voidType, [loc.reference]).check();

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, "clone", "()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Standard override
  jni.JniObject clone() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object a)
  ///
  /// Override equals
  bool equals1(jni.JniObject a) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [a.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// Override hashCode
  ///@deprecated This API is ICU internal only.
  ///@hide original deprecated declaration
  ///@hide draft / provisional / internal are hidden on Android
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}
