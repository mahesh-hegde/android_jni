// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../util/ULocale.dart" as ulocale_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.text.TimeZoneNames
///
/// <code>TimeZoneNames</code> is an abstract class representing the time zone display name data model defined
/// by <a href="http://www.unicode.org/reports/tr35/">UTS\#35 Unicode Locale Data Markup Language (LDML)</a>.
/// The model defines meta zone, which is used for storing a set of display names. A meta zone can be shared
/// by multiple time zones. Also a time zone may have multiple meta zone historic mappings.
///
/// For example, people in the United States refer the zone used by the east part of North America as "Eastern Time".
/// The tz database contains multiple time zones "America/New_York", "America/Detroit", "America/Montreal" and some
/// others that belong to "Eastern Time". However, assigning different display names to these time zones does not make
/// much sense for most of people.
///
/// In <a href="http://cldr.unicode.org/">CLDR</a> (which uses LDML for representing locale data), the display name
/// "Eastern Time" is stored as long generic display name of a meta zone identified by the ID "America_Eastern".
/// Then, there is another table maintaining the historic mapping to meta zones for each time zone. The time zones in
/// the above example ("America/New_York", "America/Detroit"...) are mapped to the meta zone "America_Eastern".
///
/// Sometimes, a time zone is mapped to a different time zone in the past. For example, "America/Indiana/Knox"
/// had been moving "Eastern Time" and "Central Time" back and forth. Therefore, it is necessary that time zone
/// to meta zones mapping data are stored by date range.
///
/// __Note:__
///
/// TimeZoneFormat assumes an instance of <code>TimeZoneNames</code> is immutable. If you want to provide
/// your own <code>TimeZoneNames</code> implementation and use it with TimeZoneFormat, you must follow
/// the contract.
///
/// The methods in this class assume that time zone IDs are already canonicalized. For example, you may not get proper
/// result returned by a method with time zone ID "America/Indiana/Indianapolis", because it's not a canonical time zone
/// ID (the canonical time zone ID for the time zone is "America/Indianapolis". See
/// TimeZone\#getCanonicalID(String) about ICU canonical time zone IDs.
///
///
/// In CLDR, most of time zone display names except location names are provided through meta zones. But a time zone may
/// have a specific name that is not shared with other time zones.
///
/// For example, time zone "Europe/London" has English long name for standard time "Greenwich Mean Time", which is also
/// shared with other time zones. However, the long name for daylight saving time is "British Summer Time", which is only
/// used for "Europe/London".
///
///
/// \#getTimeZoneDisplayName(String, NameType) is designed for accessing a name only used by a single time zone.
/// But is not necessarily mean that a subclass implementation use the same model with CLDR. A subclass implementation
/// may provide time zone names only through \#getTimeZoneDisplayName(String, NameType), or only through
/// \#getMetaZoneDisplayName(String, NameType), or both.
///
///
/// The default <code>TimeZoneNames</code> implementation returned by \#getInstance(ULocale) uses the locale data
/// imported from CLDR. In CLDR, set of meta zone IDs and mappings between zone IDs and meta zone IDs are shared by all
/// locales. Therefore, the behavior of \#getAvailableMetaZoneIDs(), \#getAvailableMetaZoneIDs(String),
/// \#getMetaZoneID(String, long), and \#getReferenceZoneID(String, String) won't be changed no matter
/// what locale is used for getting an instance of <code>TimeZoneNames</code>.
class TimeZoneNames extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/TimeZoneNames");
  TimeZoneNames.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sole constructor for invocation by subclass constructors.
  ///@hide draft / provisional / internal are hidden on Android
  TimeZoneNames()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Landroid/icu/util/ULocale;)Landroid/icu/text/TimeZoneNames;");

  /// from: static public android.icu.text.TimeZoneNames getInstance(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an instance of <code>TimeZoneNames</code> for the specified locale.
  ///@param locale The locale.
  ///@return An instance of <code>TimeZoneNames</code>
  static TimeZoneNames getInstance(ulocale_.ULocale locale) =>
      TimeZoneNames.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getInstance, jni.JniType.objectType, [locale.reference]).object);

  static final _id_getInstance1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInstance", "(Ljava/util/Locale;)Landroid/icu/text/TimeZoneNames;");

  /// from: static public android.icu.text.TimeZoneNames getInstance(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an instance of <code>TimeZoneNames</code> for the specified
  /// java.util.Locale.
  ///@param locale The java.util.Locale.
  ///@return An instance of <code>TimeZoneDisplayNames</code>
  static TimeZoneNames getInstance1(jni.JniObject locale) =>
      TimeZoneNames.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getInstance1, jni.JniType.objectType, [locale.reference]).object);

  static final _id_getTZDBInstance = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getTZDBInstance",
      "(Landroid/icu/util/ULocale;)Landroid/icu/text/TimeZoneNames;");

  /// from: static public android.icu.text.TimeZoneNames getTZDBInstance(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an instance of <code>TimeZoneNames</code> containing only short specific
  /// zone names (NameType\#SHORT_STANDARD and NameType\#SHORT_DAYLIGHT),
  /// compatible with the IANA tz database's zone abbreviations (not localized).
  /// <br>
  /// Note: The input locale is used for resolving ambiguous names (e.g. "IST" is parsed
  /// as Israel Standard Time for Israel, while it is parsed as India Standard Time for
  /// all other regions). The zone names returned by this instance are not localized.
  static TimeZoneNames getTZDBInstance(ulocale_.ULocale locale) =>
      TimeZoneNames.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getTZDBInstance,
          jni.JniType.objectType,
          [locale.reference]).object);

  static final _id_getAvailableMetaZoneIDs = jniAccessors.getMethodIDOf(
      _classRef, "getAvailableMetaZoneIDs", "()Ljava/util/Set;");

  /// from: public abstract java.util.Set<java.lang.String> getAvailableMetaZoneIDs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an immutable set of all available meta zone IDs.
  ///@return An immutable set of all available meta zone IDs.
  jni.JniObject getAvailableMetaZoneIDs() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAvailableMetaZoneIDs, jni.JniType.objectType, []).object);

  static final _id_getAvailableMetaZoneIDs1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getAvailableMetaZoneIDs",
      "(Ljava/lang/String;)Ljava/util/Set;");

  /// from: public abstract java.util.Set<java.lang.String> getAvailableMetaZoneIDs(java.lang.String tzID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an immutable set of all available meta zone IDs used by the given time zone.
  ///@param tzID The canonical time zone ID.
  ///@return An immutable set of all available meta zone IDs used by the given time zone.
  jni.JniObject getAvailableMetaZoneIDs1(jni.JniString tzID) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getAvailableMetaZoneIDs1,
          jni.JniType.objectType,
          [tzID.reference]).object);

  static final _id_getMetaZoneID = jniAccessors.getMethodIDOf(
      _classRef, "getMetaZoneID", "(Ljava/lang/String;J)Ljava/lang/String;");

  /// from: public abstract java.lang.String getMetaZoneID(java.lang.String tzID, long date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the meta zone ID for the given canonical time zone ID at the given date.
  ///@param tzID The canonical time zone ID.
  ///@param date The date.
  ///@return The meta zone ID for the given time zone ID at the given date. If the time zone does not have a
  ///         corresponding meta zone at the given date or the implementation does not support meta zones, null is
  ///         returned.
  jni.JniString getMetaZoneID(jni.JniString tzID, int date) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getMetaZoneID,
          jni.JniType.objectType,
          [tzID.reference, date]).object);

  static final _id_getReferenceZoneID = jniAccessors.getMethodIDOf(
      _classRef,
      "getReferenceZoneID",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: public abstract java.lang.String getReferenceZoneID(java.lang.String mzID, java.lang.String region)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the reference zone ID for the given meta zone ID for the region.
  ///
  /// Note: Each meta zone must have a reference zone associated with a special region "001" (world).
  /// Some meta zones may have region specific reference zone IDs other than the special region
  /// "001". When a meta zone does not have any region specific reference zone IDs, this method
  /// return the reference zone ID for the special region "001" (world).
  ///@param mzID The meta zone ID.
  ///@param region The region.
  ///@return The reference zone ID ("golden zone" in the LDML specification) for the given time zone ID for the
  ///         region. If the meta zone is unknown or the implementation does not support meta zones, null is returned.
  jni.JniString getReferenceZoneID(jni.JniString mzID, jni.JniString region) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getReferenceZoneID,
          jni.JniType.objectType,
          [mzID.reference, region.reference]).object);

  static final _id_getMetaZoneDisplayName = jniAccessors.getMethodIDOf(
      _classRef,
      "getMetaZoneDisplayName",
      "(Ljava/lang/String;Landroid/icu/text/TimeZoneNames\$NameType;)Ljava/lang/String;");

  /// from: public abstract java.lang.String getMetaZoneDisplayName(java.lang.String mzID, android.icu.text.TimeZoneNames.NameType type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name of the meta zone.
  ///@param mzID The meta zone ID.
  ///@param type The display name type. See TimeZoneNames.NameType.
  ///@return The display name of the meta zone. When this object does not have a localized display name for the given
  ///         meta zone with the specified type or the implementation does not provide any display names associated
  ///         with meta zones, null is returned.
  jni.JniString getMetaZoneDisplayName(
          jni.JniString mzID, TimeZoneNames_NameType type) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getMetaZoneDisplayName,
          jni.JniType.objectType,
          [mzID.reference, type.reference]).object);

  static final _id_getDisplayName = jniAccessors.getMethodIDOf(
      _classRef,
      "getDisplayName",
      "(Ljava/lang/String;Landroid/icu/text/TimeZoneNames\$NameType;J)Ljava/lang/String;");

  /// from: public final java.lang.String getDisplayName(java.lang.String tzID, android.icu.text.TimeZoneNames.NameType type, long date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name of the time zone at the given date.
  ///
  ///
  /// __Note:__ This method calls the subclass's \#getTimeZoneDisplayName(String, NameType) first. When the
  /// result is null, this method calls \#getMetaZoneID(String, long) to get the meta zone ID mapped from the
  /// time zone, then calls \#getMetaZoneDisplayName(String, NameType).
  ///@param tzID The canonical time zone ID.
  ///@param type The display name type. See TimeZoneNames.NameType.
  ///@param date The date
  ///@return The display name for the time zone at the given date. When this object does not have a localized display
  ///         name for the time zone with the specified type and date, null is returned.
  jni.JniString getDisplayName(
          jni.JniString tzID, TimeZoneNames_NameType type, int date) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayName,
          jni.JniType.objectType,
          [tzID.reference, type.reference, date]).object);

  static final _id_getTimeZoneDisplayName = jniAccessors.getMethodIDOf(
      _classRef,
      "getTimeZoneDisplayName",
      "(Ljava/lang/String;Landroid/icu/text/TimeZoneNames\$NameType;)Ljava/lang/String;");

  /// from: public abstract java.lang.String getTimeZoneDisplayName(java.lang.String tzID, android.icu.text.TimeZoneNames.NameType type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name of the time zone. Unlike \#getDisplayName(String, NameType, long),
  /// this method does not get a name from a meta zone used by the time zone.
  ///@param tzID The canonical time zone ID.
  ///@param type The display name type. See TimeZoneNames.NameType.
  ///@return The display name for the time zone. When this object does not have a localized display name for the given
  ///         time zone with the specified type, null is returned.
  jni.JniString getTimeZoneDisplayName(
          jni.JniString tzID, TimeZoneNames_NameType type) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getTimeZoneDisplayName,
          jni.JniType.objectType,
          [tzID.reference, type.reference]).object);

  static final _id_getExemplarLocationName = jniAccessors.getMethodIDOf(
      _classRef,
      "getExemplarLocationName",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getExemplarLocationName(java.lang.String tzID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the exemplar location name for the given time zone. When this object does not have a localized location
  /// name, the default implementation may still returns a programmatically generated name with the logic described
  /// below.
  /// <ol>
  /// <li>Check if the ID contains "/". If not, return null.
  /// <li>Check if the ID does not start with "Etc/" or "SystemV/". If it does, return null.
  /// <li>Extract a substring after the last occurrence of "/".
  /// <li>Replace "_" with " ".
  /// </ol>
  /// For example, "New York" is returned for the time zone ID "America/New_York" when this object does not have the
  /// localized location name.
  ///@param tzID The canonical time zone ID
  ///@return The exemplar location name for the given time zone, or null when a localized location name is not
  ///         available and the fallback logic described above cannot extract location from the ID.
  jni.JniString getExemplarLocationName(jni.JniString tzID) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getExemplarLocationName,
          jni.JniType.objectType,
          [tzID.reference]).object);
}

/// from: android.icu.text.TimeZoneNames$NameType
///
/// Time zone display name types
class TimeZoneNames_NameType extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/TimeZoneNames\$NameType");
  TimeZoneNames_NameType.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/icu/text/TimeZoneNames\$NameType;");

  /// from: static public android.icu.text.TimeZoneNames.NameType[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/text/TimeZoneNames\$NameType;");

  /// from: static public android.icu.text.TimeZoneNames.NameType valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeZoneNames_NameType valueOf(jni.JniString name) =>
      TimeZoneNames_NameType.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  TimeZoneNames_NameType()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
