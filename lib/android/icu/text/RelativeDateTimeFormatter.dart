// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "PluralRules.dart" as pluralrules_;

import "NumberFormat.dart" as numberformat_;

import "DisplayContext.dart" as displaycontext_;

import "BreakIterator.dart" as breakiterator_;

import "../util/ULocale.dart" as ulocale_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.text.RelativeDateTimeFormatter
///
/// Formats simple relative dates. There are two types of relative dates that
/// it handles:
/// <ul>
///   <li>relative dates with a quantity e.g "in 5 days"</li>
///   <li>relative dates without a quantity e.g "next Tuesday"</li>
/// </ul>
///
/// This API is very basic and is intended to be a building block for more
/// fancy APIs. The caller tells it exactly what to display in a locale
/// independent way. While this class automatically provides the correct plural
/// forms, the grammatical form is otherwise as neutral as possible. It is the
/// caller's responsibility to handle cut-off logic such as deciding between
/// displaying "in 7 days" or "in 1 week." This API supports relative dates
/// involving one single unit. This API does not support relative dates
/// involving compound units.
/// e.g "in 5 days and 4 hours" nor does it support parsing.
/// This class is both immutable and thread-safe.
///
/// Here are some examples of use:
/// <blockquote>
/// <pre>
/// RelativeDateTimeFormatter fmt = RelativeDateTimeFormatter.getInstance();
/// fmt.format(1, Direction.NEXT, RelativeUnit.DAYS); // "in 1 day"
/// fmt.format(3, Direction.NEXT, RelativeUnit.DAYS); // "in 3 days"
/// fmt.format(3.2, Direction.LAST, RelativeUnit.YEARS); // "3.2 years ago"
///
/// fmt.format(Direction.LAST, AbsoluteUnit.SUNDAY); // "last Sunday"
/// fmt.format(Direction.THIS, AbsoluteUnit.SUNDAY); // "this Sunday"
/// fmt.format(Direction.NEXT, AbsoluteUnit.SUNDAY); // "next Sunday"
/// fmt.format(Direction.PLAIN, AbsoluteUnit.SUNDAY); // "Sunday"
///
/// fmt.format(Direction.LAST, AbsoluteUnit.DAY); // "yesterday"
/// fmt.format(Direction.THIS, AbsoluteUnit.DAY); // "today"
/// fmt.format(Direction.NEXT, AbsoluteUnit.DAY); // "tomorrow"
///
/// fmt.format(Direction.PLAIN, AbsoluteUnit.NOW); // "now"
/// </pre>
/// </blockquote>
///
/// In the future, we may add more forms, such as abbreviated/short forms
/// (3 secs ago), and relative day periods ("yesterday afternoon"), etc.
class RelativeDateTimeFormatter extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/RelativeDateTimeFormatter");
  RelativeDateTimeFormatter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/util/EnumMap;Ljava/util/EnumMap;Ljava/lang/String;Landroid/icu/text/PluralRules;Landroid/icu/text/NumberFormat;Landroid/icu/text/RelativeDateTimeFormatter\$Style;Landroid/icu/text/DisplayContext;Landroid/icu/text/BreakIterator;Landroid/icu/util/ULocale;)V");

  /// from: void <init>(java.util.EnumMap<android.icu.text.RelativeDateTimeFormatter.Style,java.util.EnumMap<android.icu.text.RelativeDateTimeFormatter.AbsoluteUnit,java.util.EnumMap<android.icu.text.RelativeDateTimeFormatter.Direction,java.lang.String>>> qualitativeUnitMap, java.util.EnumMap<android.icu.text.RelativeDateTimeFormatter.Style,java.util.EnumMap<android.icu.text.RelativeDateTimeFormatter.RelativeUnit,java.lang.String[][]>> patternMap, java.lang.String combinedDateAndTime, android.icu.text.PluralRules pluralRules, android.icu.text.NumberFormat numberFormat, android.icu.text.RelativeDateTimeFormatter.Style style, android.icu.text.DisplayContext capitalizationContext, android.icu.text.BreakIterator breakIterator, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  RelativeDateTimeFormatter(
      jni.JniObject qualitativeUnitMap,
      jni.JniObject patternMap,
      jni.JniString combinedDateAndTime,
      pluralrules_.PluralRules pluralRules,
      numberformat_.NumberFormat numberFormat,
      RelativeDateTimeFormatter_Style style,
      displaycontext_.DisplayContext capitalizationContext,
      breakiterator_.BreakIterator breakIterator,
      ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          qualitativeUnitMap.reference,
          patternMap.reference,
          combinedDateAndTime.reference,
          pluralRules.reference,
          numberFormat.reference,
          style.reference,
          capitalizationContext.reference,
          breakIterator.reference,
          locale.reference
        ]).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInstance", "()Landroid/icu/text/RelativeDateTimeFormatter;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a RelativeDateTimeFormatter for the default locale.
  static RelativeDateTimeFormatter getInstance() =>
      RelativeDateTimeFormatter.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getInstance, jni.JniType.objectType, []).object);

  static final _id_getInstance1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Landroid/icu/util/ULocale;)Landroid/icu/text/RelativeDateTimeFormatter;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter getInstance(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a RelativeDateTimeFormatter for a particular locale.
  ///@param locale the locale.
  ///@return An instance of RelativeDateTimeFormatter.
  static RelativeDateTimeFormatter getInstance1(ulocale_.ULocale locale) =>
      RelativeDateTimeFormatter.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance1,
          jni.JniType.objectType,
          [locale.reference]).object);

  static final _id_getInstance2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Ljava/util/Locale;)Landroid/icu/text/RelativeDateTimeFormatter;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter getInstance(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a RelativeDateTimeFormatter for a particular java.util.Locale.
  ///@param locale the java.util.Locale.
  ///@return An instance of RelativeDateTimeFormatter.
  static RelativeDateTimeFormatter getInstance2(jni.JniObject locale) =>
      RelativeDateTimeFormatter.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance2,
          jni.JniType.objectType,
          [locale.reference]).object);

  static final _id_getInstance3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Landroid/icu/util/ULocale;Landroid/icu/text/NumberFormat;)Landroid/icu/text/RelativeDateTimeFormatter;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter getInstance(android.icu.util.ULocale locale, android.icu.text.NumberFormat nf)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a RelativeDateTimeFormatter for a particular locale that uses a particular
  /// NumberFormat object.
  ///@param locale the locale
  ///@param nf the number format object. It is defensively copied to ensure thread-safety
  /// and immutability of this class.
  ///@return An instance of RelativeDateTimeFormatter.
  static RelativeDateTimeFormatter getInstance3(
          ulocale_.ULocale locale, numberformat_.NumberFormat nf) =>
      RelativeDateTimeFormatter.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance3,
          jni.JniType.objectType,
          [locale.reference, nf.reference]).object);

  static final _id_getInstance4 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Landroid/icu/util/ULocale;Landroid/icu/text/NumberFormat;Landroid/icu/text/RelativeDateTimeFormatter\$Style;Landroid/icu/text/DisplayContext;)Landroid/icu/text/RelativeDateTimeFormatter;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter getInstance(android.icu.util.ULocale locale, android.icu.text.NumberFormat nf, android.icu.text.RelativeDateTimeFormatter.Style style, android.icu.text.DisplayContext capitalizationContext)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a RelativeDateTimeFormatter for a particular locale that uses a particular
  /// NumberFormat object, style, and capitalization context
  ///@param locale the locale
  ///@param nf the number format object. It is defensively copied to ensure thread-safety
  /// and immutability of this class. May be null.
  ///@param style the style.
  ///@param capitalizationContext the capitalization context.
  static RelativeDateTimeFormatter getInstance4(
          ulocale_.ULocale locale,
          numberformat_.NumberFormat nf,
          RelativeDateTimeFormatter_Style style,
          displaycontext_.DisplayContext capitalizationContext) =>
      RelativeDateTimeFormatter.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getInstance4, jni.JniType.objectType, [
        locale.reference,
        nf.reference,
        style.reference,
        capitalizationContext.reference
      ]).object);

  static final _id_getInstance5 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Ljava/util/Locale;Landroid/icu/text/NumberFormat;)Landroid/icu/text/RelativeDateTimeFormatter;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter getInstance(java.util.Locale locale, android.icu.text.NumberFormat nf)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a RelativeDateTimeFormatter for a particular java.util.Locale that uses a
  /// particular NumberFormat object.
  ///@param locale the java.util.Locale
  ///@param nf the number format object. It is defensively copied to ensure thread-safety
  /// and immutability of this class.
  ///@return An instance of RelativeDateTimeFormatter.
  static RelativeDateTimeFormatter getInstance5(
          jni.JniObject locale, numberformat_.NumberFormat nf) =>
      RelativeDateTimeFormatter.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance5,
          jni.JniType.objectType,
          [locale.reference, nf.reference]).object);

  static final _id_format = jniAccessors.getMethodIDOf(_classRef, "format",
      "(DLandroid/icu/text/RelativeDateTimeFormatter\$Direction;Landroid/icu/text/RelativeDateTimeFormatter\$RelativeUnit;)Ljava/lang/String;");

  /// from: public java.lang.String format(double quantity, android.icu.text.RelativeDateTimeFormatter.Direction direction, android.icu.text.RelativeDateTimeFormatter.RelativeUnit unit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Formats a relative date with a quantity such as "in 5 days" or
  /// "3 months ago"
  ///@param quantity The numerical amount e.g 5. This value is formatted
  /// according to this object's NumberFormat object.
  ///@param direction NEXT means a future relative date; LAST means a past
  /// relative date.
  ///@param unit the unit e.g day? month? year?
  ///@return the formatted string
  ///@throws IllegalArgumentException if direction is something other than
  /// NEXT or LAST.
  jni.JniString format(
          double quantity,
          RelativeDateTimeFormatter_Direction direction,
          RelativeDateTimeFormatter_RelativeUnit unit) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_format,
          jni.JniType.objectType,
          [quantity, direction.reference, unit.reference]).object);

  static final _id_formatNumeric = jniAccessors.getMethodIDOf(
      _classRef,
      "formatNumeric",
      "(DLandroid/icu/text/RelativeDateTimeFormatter\$RelativeDateTimeUnit;)Ljava/lang/String;");

  /// from: public java.lang.String formatNumeric(double offset, android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit unit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Format a combination of RelativeDateTimeUnit and numeric offset
  /// using a numeric style, e.g.&nbsp;"1 week ago", "in 1 week",
  /// "5 weeks ago", "in 5 weeks".
  ///@param offset The signed offset for the specified unit. This
  ///                  will be formatted according to this object's
  ///                  NumberFormat object.
  ///@param unit The unit to use when formatting the relative
  ///                  date, e.g. RelativeDateTimeUnit.WEEK,
  ///                  RelativeDateTimeUnit.FRIDAY.
  ///@return The formatted string (may be empty in case of error)
  jni.JniString formatNumeric(
          double offset, RelativeDateTimeFormatter_RelativeDateTimeUnit unit) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_formatNumeric,
          jni.JniType.objectType,
          [offset, unit.reference]).object);

  static final _id_format1 = jniAccessors.getMethodIDOf(_classRef, "format",
      "(Landroid/icu/text/RelativeDateTimeFormatter\$Direction;Landroid/icu/text/RelativeDateTimeFormatter\$AbsoluteUnit;)Ljava/lang/String;");

  /// from: public java.lang.String format(android.icu.text.RelativeDateTimeFormatter.Direction direction, android.icu.text.RelativeDateTimeFormatter.AbsoluteUnit unit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Formats a relative date without a quantity.
  ///@param direction NEXT, LAST, THIS, etc.
  ///@param unit e.g SATURDAY, DAY, MONTH
  ///@return the formatted string. If direction has a value that is documented as not being
  ///  fully supported in every locale (for example NEXT_2 or LAST_2) then this function may
  ///  return null to signal that no formatted string is available.
  ///@throws IllegalArgumentException if the direction is incompatible with
  /// unit this can occur with NOW which can only take PLAIN.
  jni.JniString format1(RelativeDateTimeFormatter_Direction direction,
          RelativeDateTimeFormatter_AbsoluteUnit unit) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_format1,
          jni.JniType.objectType,
          [direction.reference, unit.reference]).object);

  static final _id_format2 = jniAccessors.getMethodIDOf(_classRef, "format",
      "(DLandroid/icu/text/RelativeDateTimeFormatter\$RelativeDateTimeUnit;)Ljava/lang/String;");

  /// from: public java.lang.String format(double offset, android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit unit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Format a combination of RelativeDateTimeUnit and numeric offset
  /// using a text style if possible, e.g.&nbsp;"last week", "this week",
  /// "next week", "yesterday", "tomorrow". Falls back to numeric
  /// style if no appropriate text term is available for the specified
  /// offset in the object\u2019s locale.
  ///@param offset The signed offset for the specified field.
  ///@param unit The unit to use when formatting the relative
  ///                  date, e.g. RelativeDateTimeUnit.WEEK,
  ///                  RelativeDateTimeUnit.FRIDAY.
  ///@return The formatted string (may be empty in case of error)
  jni.JniString format2(
          double offset, RelativeDateTimeFormatter_RelativeDateTimeUnit unit) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_format2,
          jni.JniType.objectType,
          [offset, unit.reference]).object);

  static final _id_combineDateAndTime = jniAccessors.getMethodIDOf(
      _classRef,
      "combineDateAndTime",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String combineDateAndTime(java.lang.String relativeDateString, java.lang.String timeString)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Combines a relative date string and a time string in this object's
  /// locale. This is done with the same date-time separator used for the
  /// default calendar in this locale.
  ///@param relativeDateString the relative date e.g 'yesterday'
  ///@param timeString the time e.g '3:45'
  ///@return the date and time concatenated according to the default
  /// calendar in this locale e.g 'yesterday, 3:45'
  jni.JniString combineDateAndTime(
          jni.JniString relativeDateString, jni.JniString timeString) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_combineDateAndTime,
          jni.JniType.objectType,
          [relativeDateString.reference, timeString.reference]).object);

  static final _id_getNumberFormat = jniAccessors.getMethodIDOf(
      _classRef, "getNumberFormat", "()Landroid/icu/text/NumberFormat;");

  /// from: public android.icu.text.NumberFormat getNumberFormat()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a copy of the NumberFormat this object is using.
  ///@return A copy of the NumberFormat.
  numberformat_.NumberFormat getNumberFormat() =>
      numberformat_.NumberFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getNumberFormat, jni.JniType.objectType, []).object);

  static final _id_getCapitalizationContext = jniAccessors.getMethodIDOf(
      _classRef,
      "getCapitalizationContext",
      "()Landroid/icu/text/DisplayContext;");

  /// from: public android.icu.text.DisplayContext getCapitalizationContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return capitalization context.
  ///@return The capitalization context.
  displaycontext_.DisplayContext getCapitalizationContext() =>
      displaycontext_.DisplayContext.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getCapitalizationContext,
          jni.JniType.objectType, []).object);

  static final _id_getFormatStyle = jniAccessors.getMethodIDOf(
      _classRef,
      "getFormatStyle",
      "()Landroid/icu/text/RelativeDateTimeFormatter\$Style;");

  /// from: public android.icu.text.RelativeDateTimeFormatter.Style getFormatStyle()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return style
  ///@return The formatting style.
  RelativeDateTimeFormatter_Style getFormatStyle() =>
      RelativeDateTimeFormatter_Style.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFormatStyle, jni.JniType.objectType, []).object);
}

/// from: android.icu.text.RelativeDateTimeFormatter$Style
///
/// The formatting style
class RelativeDateTimeFormatter_Style extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/icu/text/RelativeDateTimeFormatter\$Style");
  RelativeDateTimeFormatter_Style.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(_classRef,
      "values", "()[Landroid/icu/text/RelativeDateTimeFormatter\$Style;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter.Style[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/text/RelativeDateTimeFormatter\$Style;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter.Style valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RelativeDateTimeFormatter_Style valueOf(jni.JniString name) =>
      RelativeDateTimeFormatter_Style.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_valueOf,
              jni.JniType.objectType, [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RelativeDateTimeFormatter_Style()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.icu.text.RelativeDateTimeFormatter$RelativeUnit
///
/// Represents the unit for formatting a relative date. e.g "in 5 days"
/// or "in 3 months"
class RelativeDateTimeFormatter_RelativeUnit extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/icu/text/RelativeDateTimeFormatter\$RelativeUnit");
  RelativeDateTimeFormatter_RelativeUnit.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "values",
      "()[Landroid/icu/text/RelativeDateTimeFormatter\$RelativeUnit;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter.RelativeUnit[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/text/RelativeDateTimeFormatter\$RelativeUnit;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter.RelativeUnit valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RelativeDateTimeFormatter_RelativeUnit valueOf(jni.JniString name) =>
      RelativeDateTimeFormatter_RelativeUnit.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_valueOf,
              jni.JniType.objectType, [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RelativeDateTimeFormatter_RelativeUnit()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.icu.text.RelativeDateTimeFormatter$RelativeDateTimeUnit
///
/// Represents the unit for formatting a relative date. e.g "in 5 days"
/// or "next year"
class RelativeDateTimeFormatter_RelativeDateTimeUnit extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/icu/text/RelativeDateTimeFormatter\$RelativeDateTimeUnit");
  RelativeDateTimeFormatter_RelativeDateTimeUnit.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "values",
      "()[Landroid/icu/text/RelativeDateTimeFormatter\$RelativeDateTimeUnit;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/text/RelativeDateTimeFormatter\$RelativeDateTimeUnit;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeUnit valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RelativeDateTimeFormatter_RelativeDateTimeUnit valueOf(
          jni.JniString name) =>
      RelativeDateTimeFormatter_RelativeDateTimeUnit.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_valueOf,
              jni.JniType.objectType, [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RelativeDateTimeFormatter_RelativeDateTimeUnit()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.icu.text.RelativeDateTimeFormatter$Direction
///
/// Represents a direction for an absolute unit e.g "Next Tuesday"
/// or "Last Tuesday"
class RelativeDateTimeFormatter_Direction extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/icu/text/RelativeDateTimeFormatter\$Direction");
  RelativeDateTimeFormatter_Direction.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(_classRef,
      "values", "()[Landroid/icu/text/RelativeDateTimeFormatter\$Direction;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter.Direction[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/text/RelativeDateTimeFormatter\$Direction;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter.Direction valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RelativeDateTimeFormatter_Direction valueOf(jni.JniString name) =>
      RelativeDateTimeFormatter_Direction.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_valueOf,
              jni.JniType.objectType, [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RelativeDateTimeFormatter_Direction()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit
///
/// Represents an absolute unit.
class RelativeDateTimeFormatter_AbsoluteUnit extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/icu/text/RelativeDateTimeFormatter\$AbsoluteUnit");
  RelativeDateTimeFormatter_AbsoluteUnit.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "values",
      "()[Landroid/icu/text/RelativeDateTimeFormatter\$AbsoluteUnit;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter.AbsoluteUnit[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/text/RelativeDateTimeFormatter\$AbsoluteUnit;");

  /// from: static public android.icu.text.RelativeDateTimeFormatter.AbsoluteUnit valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RelativeDateTimeFormatter_AbsoluteUnit valueOf(jni.JniString name) =>
      RelativeDateTimeFormatter_AbsoluteUnit.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_valueOf,
              jni.JniType.objectType, [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RelativeDateTimeFormatter_AbsoluteUnit()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
