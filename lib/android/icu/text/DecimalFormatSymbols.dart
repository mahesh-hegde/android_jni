// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../util/ULocale.dart" as ulocale_;

import "../util/Currency.dart" as currency_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.text.DecimalFormatSymbols
///
/// <strong>[icu enhancement]</strong> ICU's replacement for java.text.DecimalFormatSymbols.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.
///
/// This class represents the set of symbols (such as the decimal separator, the grouping
/// separator, and so on) needed by <code>DecimalFormat</code> to format
/// numbers. <code>DecimalFormat</code> creates for itself an instance of
/// <code>DecimalFormatSymbols</code> from its locale data.  If you need to change any of
/// these symbols, you can get the <code>DecimalFormatSymbols</code> object from your
/// <code>DecimalFormat</code> and modify it.
///@see java.util.Locale
///@see DecimalFormat
///@author Mark Davis
///@author Alan Liu
class DecimalFormatSymbols extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/DecimalFormatSymbols");
  DecimalFormatSymbols.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CURRENCY_SPC_CURRENCY_MATCH
  ///
  /// <strong>[icu]</strong> Indicates the currency match pattern used in \#getPatternForCurrencySpacing.
  static const CURRENCY_SPC_CURRENCY_MATCH = 0;

  /// from: static public final int CURRENCY_SPC_INSERT
  ///
  /// <strong>[icu]</strong> Indicates the insertion value used in \#getPatternForCurrencySpacing.
  static const CURRENCY_SPC_INSERT = 2;

  /// from: static public final int CURRENCY_SPC_SURROUNDING_MATCH
  ///
  /// <strong>[icu]</strong> Indicates the surrounding match pattern used in \#getPatternForCurrencySpacing.
  static const CURRENCY_SPC_SURROUNDING_MATCH = 1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DecimalFormatSymbols object for the default <code>FORMAT</code> locale.
  ///@see Category\#FORMAT
  DecimalFormatSymbols()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/Locale;)V");

  /// from: public void <init>(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DecimalFormatSymbols object for the given locale.
  ///@param locale the locale
  DecimalFormatSymbols.ctor1(jni.JniObject locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [locale.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/ULocale;)V");

  /// from: public void <init>(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Creates a DecimalFormatSymbols object for the given locale.
  ///@param locale the locale
  DecimalFormatSymbols.ctor2(ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [locale.reference]).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getInstance", "()Landroid/icu/text/DecimalFormatSymbols;");

  /// from: static public android.icu.text.DecimalFormatSymbols getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a DecimalFormatSymbols instance for the default locale.
  ///
  /// <strong>Note:</strong> Unlike
  /// <code>java.text.DecimalFormatSymbols\#getInstance</code>, this method simply returns
  /// <code>new android.icu.text.DecimalFormatSymbols()</code>.  ICU currently does not
  /// support <code>DecimalFormatSymbolsProvider</code>, which was introduced in Java 6.
  ///@return A DecimalFormatSymbols instance.
  static DecimalFormatSymbols getInstance() =>
      DecimalFormatSymbols.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getInstance, jni.JniType.objectType, []).object);

  static final _id_getInstance1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Ljava/util/Locale;)Landroid/icu/text/DecimalFormatSymbols;");

  /// from: static public android.icu.text.DecimalFormatSymbols getInstance(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a DecimalFormatSymbols instance for the given locale.
  ///
  /// <strong>Note:</strong> Unlike
  /// <code>java.text.DecimalFormatSymbols\#getInstance</code>, this method simply returns
  /// <code>new android.icu.text.DecimalFormatSymbols(locale)</code>.  ICU currently does
  /// not support <code>DecimalFormatSymbolsProvider</code>, which was introduced in Java
  /// 6.
  ///@param locale the locale.
  ///@return A DecimalFormatSymbols instance.
  static DecimalFormatSymbols getInstance1(jni.JniObject locale) =>
      DecimalFormatSymbols.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance1,
          jni.JniType.objectType,
          [locale.reference]).object);

  static final _id_getInstance2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Landroid/icu/util/ULocale;)Landroid/icu/text/DecimalFormatSymbols;");

  /// from: static public android.icu.text.DecimalFormatSymbols getInstance(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a DecimalFormatSymbols instance for the given locale.
  ///
  /// <strong>Note:</strong> Unlike
  /// <code>java.text.DecimalFormatSymbols\#getInstance</code>, this method simply returns
  /// <code>new android.icu.text.DecimalFormatSymbols(locale)</code>.  ICU currently does
  /// not support <code>DecimalFormatSymbolsProvider</code>, which was introduced in Java
  /// 6.
  ///@param locale the locale.
  ///@return A DecimalFormatSymbols instance.
  static DecimalFormatSymbols getInstance2(ulocale_.ULocale locale) =>
      DecimalFormatSymbols.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance2,
          jni.JniType.objectType,
          [locale.reference]).object);

  static final _id_getAvailableLocales = jniAccessors.getStaticMethodIDOf(
      _classRef, "getAvailableLocales", "()[Ljava/util/Locale;");

  /// from: static public java.util.Locale[] getAvailableLocales()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an array of all locales for which the <code>getInstance</code> methods of
  /// this class can return localized instances.
  ///
  /// <strong>Note:</strong> Unlike
  /// <code>java.text.DecimalFormatSymbols\#getAvailableLocales</code>, this method simply
  /// returns the array of <code>Locale</code>s available for this class.  ICU currently
  /// does not support <code>DecimalFormatSymbolsProvider</code>, which was introduced in
  /// Java 6.
  ///@return An array of <code>Locale</code>s for which localized
  /// <code>DecimalFormatSymbols</code> instances are available.
  static jni.JniObject getAvailableLocales() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getAvailableLocales, jni.JniType.objectType, []).object);

  static final _id_getZeroDigit =
      jniAccessors.getMethodIDOf(_classRef, "getZeroDigit", "()C");

  /// from: public char getZeroDigit()
  ///
  /// Returns the character used for zero. Different for Arabic, etc.
  ///@return the character
  int getZeroDigit() => jniAccessors.callMethodWithArgs(
      reference, _id_getZeroDigit, jni.JniType.charType, []).char;

  static final _id_getDigits =
      jniAccessors.getMethodIDOf(_classRef, "getDigits", "()[C");

  /// from: public char[] getDigits()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the array of characters used as digits, in order from 0 through 9
  ///@return The array
  jni.JniObject getDigits() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDigits, jni.JniType.objectType, []).object);

  static final _id_setZeroDigit =
      jniAccessors.getMethodIDOf(_classRef, "setZeroDigit", "(C)V");

  /// from: public void setZeroDigit(char zeroDigit)
  ///
  /// Sets the character used for zero.
  ///
  /// __Note:__ This method propagates digit 1 to
  /// digit 9 by incrementing code point one by one.
  ///@param zeroDigit the zero character.
  void setZeroDigit(int zeroDigit) => jniAccessors.callMethodWithArgs(
      reference, _id_setZeroDigit, jni.JniType.voidType, [zeroDigit]).check();

  static final _id_getDigitStrings = jniAccessors.getMethodIDOf(
      _classRef, "getDigitStrings", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] getDigitStrings()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the array of strings used as digits, in order from 0 through 9
  ///@return The array of ten digit strings
  ///@see \#setDigitStrings(String[])
  jni.JniObject getDigitStrings() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDigitStrings, jni.JniType.objectType, []).object);

  static final _id_setDigitStrings = jniAccessors.getMethodIDOf(
      _classRef, "setDigitStrings", "([Ljava/lang/String;)V");

  /// from: public void setDigitStrings(java.lang.String[] digitStrings)
  ///
  /// <strong>[icu]</strong> Sets the array of strings used as digits, in order from 0 through 9
  ///
  /// __Note:__
  ///
  /// When the input array of digit strings contains any strings
  /// represented by multiple Java chars, then \#getDigits() will return
  /// the default digits ('0' - '9') and \#getZeroDigit() will return the
  /// default zero digit ('0').
  ///@param digitStrings The array of digit strings. The length of the array must be exactly 10.
  ///@throws NullPointerException if the <code>digitStrings</code> is null.
  ///@throws IllegalArgumentException if the length of the array is not 10.
  ///@see \#getDigitStrings()
  void setDigitStrings(jni.JniObject digitStrings) =>
      jniAccessors.callMethodWithArgs(reference, _id_setDigitStrings,
          jni.JniType.voidType, [digitStrings.reference]).check();

  static final _id_getSignificantDigit =
      jniAccessors.getMethodIDOf(_classRef, "getSignificantDigit", "()C");

  /// from: public char getSignificantDigit()
  ///
  /// Returns the character used to represent a significant digit in a pattern.
  ///@return the significant digit pattern character
  int getSignificantDigit() => jniAccessors.callMethodWithArgs(
      reference, _id_getSignificantDigit, jni.JniType.charType, []).char;

  static final _id_setSignificantDigit =
      jniAccessors.getMethodIDOf(_classRef, "setSignificantDigit", "(C)V");

  /// from: public void setSignificantDigit(char sigDigit)
  ///
  /// Sets the character used to represent a significant digit in a pattern.
  ///@param sigDigit the significant digit pattern character
  void setSignificantDigit(int sigDigit) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setSignificantDigit,
      jni.JniType.voidType,
      [sigDigit]).check();

  static final _id_getGroupingSeparator =
      jniAccessors.getMethodIDOf(_classRef, "getGroupingSeparator", "()C");

  /// from: public char getGroupingSeparator()
  ///
  /// Returns the character used for grouping separator. Different for French, etc.
  ///@return the thousands character
  int getGroupingSeparator() => jniAccessors.callMethodWithArgs(
      reference, _id_getGroupingSeparator, jni.JniType.charType, []).char;

  static final _id_setGroupingSeparator =
      jniAccessors.getMethodIDOf(_classRef, "setGroupingSeparator", "(C)V");

  /// from: public void setGroupingSeparator(char groupingSeparator)
  ///
  /// Sets the character used for grouping separator. Different for French, etc.
  ///@param groupingSeparator the thousands character
  void setGroupingSeparator(int groupingSeparator) =>
      jniAccessors.callMethodWithArgs(reference, _id_setGroupingSeparator,
          jni.JniType.voidType, [groupingSeparator]).check();

  static final _id_getGroupingSeparatorString = jniAccessors.getMethodIDOf(
      _classRef, "getGroupingSeparatorString", "()Ljava/lang/String;");

  /// from: public java.lang.String getGroupingSeparatorString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the string used for grouping separator. Different for French, etc.
  ///@return the grouping separator string
  ///@see \#setGroupingSeparatorString(String)
  jni.JniString getGroupingSeparatorString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getGroupingSeparatorString, jni.JniType.objectType, []).object);

  static final _id_setGroupingSeparatorString = jniAccessors.getMethodIDOf(
      _classRef, "setGroupingSeparatorString", "(Ljava/lang/String;)V");

  /// from: public void setGroupingSeparatorString(java.lang.String groupingSeparatorString)
  ///
  /// <strong>[icu]</strong> Sets the string used for grouping separator.
  ///
  /// __Note:__ When the input grouping separator String is represented
  /// by multiple Java chars, then \#getGroupingSeparator() will
  /// return the default grouping separator character (',').
  ///@param groupingSeparatorString the grouping separator string
  ///@throws NullPointerException if <code>groupingSeparatorString</code> is null.
  ///@see \#getGroupingSeparatorString()
  void setGroupingSeparatorString(jni.JniString groupingSeparatorString) =>
      jniAccessors.callMethodWithArgs(reference, _id_setGroupingSeparatorString,
          jni.JniType.voidType, [groupingSeparatorString.reference]).check();

  static final _id_getDecimalSeparator =
      jniAccessors.getMethodIDOf(_classRef, "getDecimalSeparator", "()C");

  /// from: public char getDecimalSeparator()
  ///
  /// Returns the character used for decimal sign. Different for French, etc.
  ///@return the decimal character
  int getDecimalSeparator() => jniAccessors.callMethodWithArgs(
      reference, _id_getDecimalSeparator, jni.JniType.charType, []).char;

  static final _id_setDecimalSeparator =
      jniAccessors.getMethodIDOf(_classRef, "setDecimalSeparator", "(C)V");

  /// from: public void setDecimalSeparator(char decimalSeparator)
  ///
  /// Sets the character used for decimal sign. Different for French, etc.
  ///@param decimalSeparator the decimal character
  void setDecimalSeparator(int decimalSeparator) =>
      jniAccessors.callMethodWithArgs(reference, _id_setDecimalSeparator,
          jni.JniType.voidType, [decimalSeparator]).check();

  static final _id_getDecimalSeparatorString = jniAccessors.getMethodIDOf(
      _classRef, "getDecimalSeparatorString", "()Ljava/lang/String;");

  /// from: public java.lang.String getDecimalSeparatorString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the string used for decimal sign.
  ///@return the decimal sign string
  ///@see \#setDecimalSeparatorString(String)
  jni.JniString getDecimalSeparatorString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getDecimalSeparatorString, jni.JniType.objectType, []).object);

  static final _id_setDecimalSeparatorString = jniAccessors.getMethodIDOf(
      _classRef, "setDecimalSeparatorString", "(Ljava/lang/String;)V");

  /// from: public void setDecimalSeparatorString(java.lang.String decimalSeparatorString)
  ///
  /// <strong>[icu]</strong> Sets the string used for decimal sign.
  ///
  /// __Note:__ When the input decimal separator String is represented
  /// by multiple Java chars, then \#getDecimalSeparator() will
  /// return the default decimal separator character ('.').
  ///@param decimalSeparatorString the decimal sign string
  ///@throws NullPointerException if <code>decimalSeparatorString</code> is null.
  ///@see \#getDecimalSeparatorString()
  void setDecimalSeparatorString(jni.JniString decimalSeparatorString) =>
      jniAccessors.callMethodWithArgs(reference, _id_setDecimalSeparatorString,
          jni.JniType.voidType, [decimalSeparatorString.reference]).check();

  static final _id_getPerMill =
      jniAccessors.getMethodIDOf(_classRef, "getPerMill", "()C");

  /// from: public char getPerMill()
  ///
  /// Returns the character used for mille percent sign. Different for Arabic, etc.
  ///@return the mille percent character
  int getPerMill() => jniAccessors.callMethodWithArgs(
      reference, _id_getPerMill, jni.JniType.charType, []).char;

  static final _id_setPerMill =
      jniAccessors.getMethodIDOf(_classRef, "setPerMill", "(C)V");

  /// from: public void setPerMill(char perMill)
  ///
  /// Sets the character used for mille percent sign. Different for Arabic, etc.
  ///@param perMill the mille percent character
  void setPerMill(int perMill) => jniAccessors.callMethodWithArgs(
      reference, _id_setPerMill, jni.JniType.voidType, [perMill]).check();

  static final _id_getPerMillString = jniAccessors.getMethodIDOf(
      _classRef, "getPerMillString", "()Ljava/lang/String;");

  /// from: public java.lang.String getPerMillString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the string used for permille sign.
  ///@return the permille string
  ///@see \#setPerMillString(String)
  jni.JniString getPerMillString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPerMillString, jni.JniType.objectType, []).object);

  static final _id_setPerMillString = jniAccessors.getMethodIDOf(
      _classRef, "setPerMillString", "(Ljava/lang/String;)V");

  /// from: public void setPerMillString(java.lang.String perMillString)
  ///
  /// <strong>[icu]</strong> Sets the string used for permille sign.
  ///
  /// __Note:__ When the input permille String is represented
  /// by multiple Java chars, then \#getPerMill() will
  /// return the default permille character ('&\#x2030;').
  ///@param perMillString the permille string
  ///@throws NullPointerException if <code>perMillString</code> is null.
  ///@see \#getPerMillString()
  void setPerMillString(jni.JniString perMillString) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPerMillString,
          jni.JniType.voidType, [perMillString.reference]).check();

  static final _id_getPercent =
      jniAccessors.getMethodIDOf(_classRef, "getPercent", "()C");

  /// from: public char getPercent()
  ///
  /// Returns the character used for percent sign. Different for Arabic, etc.
  ///@return the percent character
  int getPercent() => jniAccessors.callMethodWithArgs(
      reference, _id_getPercent, jni.JniType.charType, []).char;

  static final _id_setPercent =
      jniAccessors.getMethodIDOf(_classRef, "setPercent", "(C)V");

  /// from: public void setPercent(char percent)
  ///
  /// Sets the character used for percent sign. Different for Arabic, etc.
  ///@param percent the percent character
  void setPercent(int percent) => jniAccessors.callMethodWithArgs(
      reference, _id_setPercent, jni.JniType.voidType, [percent]).check();

  static final _id_getPercentString = jniAccessors.getMethodIDOf(
      _classRef, "getPercentString", "()Ljava/lang/String;");

  /// from: public java.lang.String getPercentString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the string used for percent sign.
  ///@return the percent string
  ///@see \#setPercentString(String)
  jni.JniString getPercentString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPercentString, jni.JniType.objectType, []).object);

  static final _id_setPercentString = jniAccessors.getMethodIDOf(
      _classRef, "setPercentString", "(Ljava/lang/String;)V");

  /// from: public void setPercentString(java.lang.String percentString)
  ///
  /// <strong>[icu]</strong> Sets the string used for percent sign.
  ///
  /// __Note:__ When the input grouping separator String is represented
  /// by multiple Java chars, then \#getPercent() will
  /// return the default percent sign character ('%').
  ///@param percentString the percent string
  ///@throws NullPointerException if <code>percentString</code> is null.
  ///@see \#getPercentString()
  void setPercentString(jni.JniString percentString) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPercentString,
          jni.JniType.voidType, [percentString.reference]).check();

  static final _id_getDigit =
      jniAccessors.getMethodIDOf(_classRef, "getDigit", "()C");

  /// from: public char getDigit()
  ///
  /// Returns the character used for a digit in a pattern.
  ///@return the digit pattern character
  int getDigit() => jniAccessors.callMethodWithArgs(
      reference, _id_getDigit, jni.JniType.charType, []).char;

  static final _id_setDigit =
      jniAccessors.getMethodIDOf(_classRef, "setDigit", "(C)V");

  /// from: public void setDigit(char digit)
  ///
  /// Sets the character used for a digit in a pattern.
  ///@param digit the digit pattern character
  void setDigit(int digit) => jniAccessors.callMethodWithArgs(
      reference, _id_setDigit, jni.JniType.voidType, [digit]).check();

  static final _id_getPatternSeparator =
      jniAccessors.getMethodIDOf(_classRef, "getPatternSeparator", "()C");

  /// from: public char getPatternSeparator()
  ///
  /// Returns the character used to separate positive and negative subpatterns
  /// in a pattern.
  ///@return the pattern separator character
  int getPatternSeparator() => jniAccessors.callMethodWithArgs(
      reference, _id_getPatternSeparator, jni.JniType.charType, []).char;

  static final _id_setPatternSeparator =
      jniAccessors.getMethodIDOf(_classRef, "setPatternSeparator", "(C)V");

  /// from: public void setPatternSeparator(char patternSeparator)
  ///
  /// Sets the character used to separate positive and negative subpatterns
  /// in a pattern.
  ///@param patternSeparator the pattern separator character
  void setPatternSeparator(int patternSeparator) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPatternSeparator,
          jni.JniType.voidType, [patternSeparator]).check();

  static final _id_getInfinity = jniAccessors.getMethodIDOf(
      _classRef, "getInfinity", "()Ljava/lang/String;");

  /// from: public java.lang.String getInfinity()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the String used to represent infinity. Almost always left
  /// unchanged.
  ///@return the Infinity string
  jni.JniString getInfinity() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getInfinity, jni.JniType.objectType, []).object);

  static final _id_setInfinity = jniAccessors.getMethodIDOf(
      _classRef, "setInfinity", "(Ljava/lang/String;)V");

  /// from: public void setInfinity(java.lang.String infinity)
  ///
  /// Sets the String used to represent infinity. Almost always left
  /// unchanged.
  ///@param infinity the Infinity String
  void setInfinity(jni.JniString infinity) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setInfinity,
      jni.JniType.voidType,
      [infinity.reference]).check();

  static final _id_getNaN =
      jniAccessors.getMethodIDOf(_classRef, "getNaN", "()Ljava/lang/String;");

  /// from: public java.lang.String getNaN()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the String used to represent NaN. Almost always left
  /// unchanged.
  ///@return the NaN String
  jni.JniString getNaN() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getNaN, jni.JniType.objectType, []).object);

  static final _id_setNaN =
      jniAccessors.getMethodIDOf(_classRef, "setNaN", "(Ljava/lang/String;)V");

  /// from: public void setNaN(java.lang.String NaN)
  ///
  /// Sets the String used to represent NaN. Almost always left
  /// unchanged.
  ///@param NaN the NaN String
  void setNaN(jni.JniString NaN) => jniAccessors.callMethodWithArgs(
      reference, _id_setNaN, jni.JniType.voidType, [NaN.reference]).check();

  static final _id_getMinusSign =
      jniAccessors.getMethodIDOf(_classRef, "getMinusSign", "()C");

  /// from: public char getMinusSign()
  ///
  /// Returns the character used to represent minus sign. If no explicit
  /// negative format is specified, one is formed by prefixing
  /// minusSign to the positive format.
  ///@return the minus sign character
  int getMinusSign() => jniAccessors.callMethodWithArgs(
      reference, _id_getMinusSign, jni.JniType.charType, []).char;

  static final _id_setMinusSign =
      jniAccessors.getMethodIDOf(_classRef, "setMinusSign", "(C)V");

  /// from: public void setMinusSign(char minusSign)
  ///
  /// Sets the character used to represent minus sign. If no explicit
  /// negative format is specified, one is formed by prefixing
  /// minusSign to the positive format.
  ///@param minusSign the minus sign character
  void setMinusSign(int minusSign) => jniAccessors.callMethodWithArgs(
      reference, _id_setMinusSign, jni.JniType.voidType, [minusSign]).check();

  static final _id_getMinusSignString = jniAccessors.getMethodIDOf(
      _classRef, "getMinusSignString", "()Ljava/lang/String;");

  /// from: public java.lang.String getMinusSignString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the string used to represent minus sign.
  ///@return the minus sign string
  ///@see \#setMinusSignString(String)
  jni.JniString getMinusSignString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getMinusSignString, jni.JniType.objectType, []).object);

  static final _id_setMinusSignString = jniAccessors.getMethodIDOf(
      _classRef, "setMinusSignString", "(Ljava/lang/String;)V");

  /// from: public void setMinusSignString(java.lang.String minusSignString)
  ///
  /// <strong>[icu]</strong> Sets the string used to represent minus sign.
  ///
  /// __Note:__ When the input minus sign String is represented
  /// by multiple Java chars, then \#getMinusSign() will
  /// return the default minus sign character ('-').
  ///@param minusSignString the minus sign string
  ///@throws NullPointerException if <code>minusSignString</code> is null.
  ///@see \#getGroupingSeparatorString()
  void setMinusSignString(jni.JniString minusSignString) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMinusSignString,
          jni.JniType.voidType, [minusSignString.reference]).check();

  static final _id_getPlusSign =
      jniAccessors.getMethodIDOf(_classRef, "getPlusSign", "()C");

  /// from: public char getPlusSign()
  ///
  /// <strong>[icu]</strong> Returns the localized plus sign.
  ///@return the plus sign, used in localized patterns and formatted
  /// strings
  ///@see \#setPlusSign
  ///@see \#setMinusSign
  ///@see \#getMinusSign
  int getPlusSign() => jniAccessors.callMethodWithArgs(
      reference, _id_getPlusSign, jni.JniType.charType, []).char;

  static final _id_setPlusSign =
      jniAccessors.getMethodIDOf(_classRef, "setPlusSign", "(C)V");

  /// from: public void setPlusSign(char plus)
  ///
  /// <strong>[icu]</strong> Sets the localized plus sign.
  ///@param plus the plus sign, used in localized patterns and formatted
  /// strings
  ///@see \#getPlusSign
  ///@see \#setMinusSign
  ///@see \#getMinusSign
  void setPlusSign(int plus) => jniAccessors.callMethodWithArgs(
      reference, _id_setPlusSign, jni.JniType.voidType, [plus]).check();

  static final _id_getPlusSignString = jniAccessors.getMethodIDOf(
      _classRef, "getPlusSignString", "()Ljava/lang/String;");

  /// from: public java.lang.String getPlusSignString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the string used to represent plus sign.
  ///@return the plus sign string
  jni.JniString getPlusSignString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPlusSignString, jni.JniType.objectType, []).object);

  static final _id_setPlusSignString = jniAccessors.getMethodIDOf(
      _classRef, "setPlusSignString", "(Ljava/lang/String;)V");

  /// from: public void setPlusSignString(java.lang.String plusSignString)
  ///
  /// <strong>[icu]</strong> Sets the localized plus sign string.
  ///
  /// __Note:__ When the input plus sign String is represented
  /// by multiple Java chars, then \#getPlusSign() will
  /// return the default plus sign character ('+').
  ///@param plusSignString the plus sign string, used in localized patterns and formatted
  /// strings
  ///@throws NullPointerException if <code>plusSignString</code> is null.
  ///@see \#getPlusSignString()
  void setPlusSignString(jni.JniString plusSignString) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPlusSignString,
          jni.JniType.voidType, [plusSignString.reference]).check();

  static final _id_getCurrencySymbol = jniAccessors.getMethodIDOf(
      _classRef, "getCurrencySymbol", "()Ljava/lang/String;");

  /// from: public java.lang.String getCurrencySymbol()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the string denoting the local currency.
  ///@return the local currency String.
  jni.JniString getCurrencySymbol() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCurrencySymbol, jni.JniType.objectType, []).object);

  static final _id_setCurrencySymbol = jniAccessors.getMethodIDOf(
      _classRef, "setCurrencySymbol", "(Ljava/lang/String;)V");

  /// from: public void setCurrencySymbol(java.lang.String currency)
  ///
  /// Sets the string denoting the local currency.
  ///@param currency the local currency String.
  void setCurrencySymbol(jni.JniString currency) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCurrencySymbol,
          jni.JniType.voidType, [currency.reference]).check();

  static final _id_getInternationalCurrencySymbol = jniAccessors.getMethodIDOf(
      _classRef, "getInternationalCurrencySymbol", "()Ljava/lang/String;");

  /// from: public java.lang.String getInternationalCurrencySymbol()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the international string denoting the local currency.
  ///@return the international string denoting the local currency
  jni.JniString getInternationalCurrencySymbol() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getInternationalCurrencySymbol,
          jni.JniType.objectType, []).object);

  static final _id_setInternationalCurrencySymbol = jniAccessors.getMethodIDOf(
      _classRef, "setInternationalCurrencySymbol", "(Ljava/lang/String;)V");

  /// from: public void setInternationalCurrencySymbol(java.lang.String currency)
  ///
  /// Sets the international string denoting the local currency.
  ///@param currency the international string denoting the local currency.
  void setInternationalCurrencySymbol(jni.JniString currency) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setInternationalCurrencySymbol,
          jni.JniType.voidType,
          [currency.reference]).check();

  static final _id_getCurrency = jniAccessors.getMethodIDOf(
      _classRef, "getCurrency", "()Landroid/icu/util/Currency;");

  /// from: public android.icu.util.Currency getCurrency()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the currency symbol, for DecimalFormatSymbols\#getCurrency() API
  /// compatibility only. ICU clients should use the Currency API directly.
  ///@return the currency used, or null
  currency_.Currency getCurrency() =>
      currency_.Currency.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCurrency, jni.JniType.objectType, []).object);

  static final _id_setCurrency = jniAccessors.getMethodIDOf(
      _classRef, "setCurrency", "(Landroid/icu/util/Currency;)V");

  /// from: public void setCurrency(android.icu.util.Currency currency)
  ///
  /// Sets the currency.
  ///
  /// <strong>Note:</strong> ICU does not use the DecimalFormatSymbols for the currency
  /// any more.  This API is present for API compatibility only.
  ///
  /// This also sets the currency symbol attribute to the currency's symbol
  /// in the DecimalFormatSymbols' locale, and the international currency
  /// symbol attribute to the currency's ISO 4217 currency code.
  ///@param currency the new currency to be used
  ///@throws NullPointerException if <code>currency</code> is null
  ///@see \#setCurrencySymbol
  ///@see \#setInternationalCurrencySymbol
  void setCurrency(currency_.Currency currency) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCurrency,
          jni.JniType.voidType, [currency.reference]).check();

  static final _id_getMonetaryDecimalSeparator = jniAccessors.getMethodIDOf(
      _classRef, "getMonetaryDecimalSeparator", "()C");

  /// from: public char getMonetaryDecimalSeparator()
  ///
  /// Returns the monetary decimal separator.
  ///@return the monetary decimal separator character
  int getMonetaryDecimalSeparator() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getMonetaryDecimalSeparator,
      jni.JniType.charType, []).char;

  static final _id_setMonetaryDecimalSeparator = jniAccessors.getMethodIDOf(
      _classRef, "setMonetaryDecimalSeparator", "(C)V");

  /// from: public void setMonetaryDecimalSeparator(char sep)
  ///
  /// Sets the monetary decimal separator.
  ///@param sep the monetary decimal separator character
  void setMonetaryDecimalSeparator(int sep) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setMonetaryDecimalSeparator,
      jni.JniType.voidType,
      [sep]).check();

  static final _id_getMonetaryDecimalSeparatorString =
      jniAccessors.getMethodIDOf(_classRef, "getMonetaryDecimalSeparatorString",
          "()Ljava/lang/String;");

  /// from: public java.lang.String getMonetaryDecimalSeparatorString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the monetary decimal separator string.
  ///@return the monetary decimal separator string
  ///@see \#setMonetaryDecimalSeparatorString(String)
  jni.JniString getMonetaryDecimalSeparatorString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getMonetaryDecimalSeparatorString,
          jni.JniType.objectType, []).object);

  static final _id_setMonetaryDecimalSeparatorString =
      jniAccessors.getMethodIDOf(_classRef, "setMonetaryDecimalSeparatorString",
          "(Ljava/lang/String;)V");

  /// from: public void setMonetaryDecimalSeparatorString(java.lang.String sep)
  ///
  /// <strong>[icu]</strong> Sets the monetary decimal separator string.
  ///
  /// __Note:__ When the input monetary decimal separator String is represented
  /// by multiple Java chars, then \#getMonetaryDecimalSeparatorString() will
  /// return the default monetary decimal separator character ('.').
  ///@param sep the monetary decimal separator string
  ///@throws NullPointerException if <code>sep</code> is null.
  ///@see \#getMonetaryDecimalSeparatorString()
  void setMonetaryDecimalSeparatorString(jni.JniString sep) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setMonetaryDecimalSeparatorString,
          jni.JniType.voidType,
          [sep.reference]).check();

  static final _id_getMonetaryGroupingSeparator = jniAccessors.getMethodIDOf(
      _classRef, "getMonetaryGroupingSeparator", "()C");

  /// from: public char getMonetaryGroupingSeparator()
  ///
  /// <strong>[icu]</strong> Returns the monetary grouping separator.
  ///@return the monetary grouping separator character
  int getMonetaryGroupingSeparator() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getMonetaryGroupingSeparator,
      jni.JniType.charType, []).char;

  static final _id_setMonetaryGroupingSeparator = jniAccessors.getMethodIDOf(
      _classRef, "setMonetaryGroupingSeparator", "(C)V");

  /// from: public void setMonetaryGroupingSeparator(char sep)
  ///
  /// <strong>[icu]</strong> Sets the monetary grouping separator.
  ///@param sep the monetary grouping separator character
  void setMonetaryGroupingSeparator(int sep) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setMonetaryGroupingSeparator,
      jni.JniType.voidType,
      [sep]).check();

  static final _id_getMonetaryGroupingSeparatorString =
      jniAccessors.getMethodIDOf(_classRef,
          "getMonetaryGroupingSeparatorString", "()Ljava/lang/String;");

  /// from: public java.lang.String getMonetaryGroupingSeparatorString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the monetary grouping separator.
  ///@return the monetary grouping separator string
  ///@see \#setMonetaryGroupingSeparatorString(String)
  jni.JniString getMonetaryGroupingSeparatorString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getMonetaryGroupingSeparatorString,
          jni.JniType.objectType, []).object);

  static final _id_setMonetaryGroupingSeparatorString =
      jniAccessors.getMethodIDOf(_classRef,
          "setMonetaryGroupingSeparatorString", "(Ljava/lang/String;)V");

  /// from: public void setMonetaryGroupingSeparatorString(java.lang.String sep)
  ///
  /// <strong>[icu]</strong> Sets the monetary grouping separator string.
  ///
  /// __Note:__ When the input grouping separator String is represented
  /// by multiple Java chars, then \#getMonetaryGroupingSeparator() will
  /// return the default monetary grouping separator character (',').
  ///@param sep the monetary grouping separator string
  ///@throws NullPointerException if <code>sep</code> is null.
  ///@see \#getMonetaryGroupingSeparatorString()
  void setMonetaryGroupingSeparatorString(jni.JniString sep) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setMonetaryGroupingSeparatorString,
          jni.JniType.voidType,
          [sep.reference]).check();

  static final _id_getExponentMultiplicationSign = jniAccessors.getMethodIDOf(
      _classRef, "getExponentMultiplicationSign", "()Ljava/lang/String;");

  /// from: public java.lang.String getExponentMultiplicationSign()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the multiplication sign
  jni.JniString getExponentMultiplicationSign() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getExponentMultiplicationSign,
          jni.JniType.objectType, []).object);

  static final _id_setExponentMultiplicationSign = jniAccessors.getMethodIDOf(
      _classRef, "setExponentMultiplicationSign", "(Ljava/lang/String;)V");

  /// from: public void setExponentMultiplicationSign(java.lang.String exponentMultiplicationSign)
  ///
  /// Sets the multiplication sign
  void setExponentMultiplicationSign(
          jni.JniString exponentMultiplicationSign) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setExponentMultiplicationSign,
          jni.JniType.voidType,
          [exponentMultiplicationSign.reference]).check();

  static final _id_getExponentSeparator = jniAccessors.getMethodIDOf(
      _classRef, "getExponentSeparator", "()Ljava/lang/String;");

  /// from: public java.lang.String getExponentSeparator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the string used to separate the mantissa from the exponent.
  /// Examples: "x10^" for 1.23x10^4, "E" for 1.23E4.
  ///@return the localized exponent symbol, used in localized patterns
  /// and formatted strings
  ///@see \#setExponentSeparator
  jni.JniString getExponentSeparator() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getExponentSeparator, jni.JniType.objectType, []).object);

  static final _id_setExponentSeparator = jniAccessors.getMethodIDOf(
      _classRef, "setExponentSeparator", "(Ljava/lang/String;)V");

  /// from: public void setExponentSeparator(java.lang.String exp)
  ///
  /// <strong>[icu]</strong> Sets the string used to separate the mantissa from the exponent.
  /// Examples: "x10^" for 1.23x10^4, "E" for 1.23E4.
  ///@param exp the localized exponent symbol, used in localized patterns
  /// and formatted strings
  ///@see \#getExponentSeparator
  void setExponentSeparator(jni.JniString exp) =>
      jniAccessors.callMethodWithArgs(reference, _id_setExponentSeparator,
          jni.JniType.voidType, [exp.reference]).check();

  static final _id_getPadEscape =
      jniAccessors.getMethodIDOf(_classRef, "getPadEscape", "()C");

  /// from: public char getPadEscape()
  ///
  /// <strong>[icu]</strong> Returns the character used to pad numbers out to a specified width.  This is
  /// not the pad character itself; rather, it is the special pattern character
  /// _preceding_ the pad character.  In the pattern "*_\#,\#\#0", '*' is the pad
  /// escape, and '_' is the pad character.
  ///@return the character
  ///@see \#setPadEscape
  ///@see DecimalFormat\#getFormatWidth
  ///@see DecimalFormat\#getPadPosition
  ///@see DecimalFormat\#getPadCharacter
  int getPadEscape() => jniAccessors.callMethodWithArgs(
      reference, _id_getPadEscape, jni.JniType.charType, []).char;

  static final _id_setPadEscape =
      jniAccessors.getMethodIDOf(_classRef, "setPadEscape", "(C)V");

  /// from: public void setPadEscape(char c)
  ///
  /// <strong>[icu]</strong> Sets the character used to pad numbers out to a specified width.  This is not
  /// the pad character itself; rather, it is the special pattern character
  /// _preceding_ the pad character.  In the pattern "*_\#,\#\#0", '*' is the pad
  /// escape, and '_' is the pad character.
  ///@see \#getPadEscape
  ///@see DecimalFormat\#setFormatWidth
  ///@see DecimalFormat\#setPadPosition
  ///@see DecimalFormat\#setPadCharacter
  void setPadEscape(int c) => jniAccessors.callMethodWithArgs(
      reference, _id_setPadEscape, jni.JniType.voidType, [c]).check();

  static final _id_getPatternForCurrencySpacing = jniAccessors.getMethodIDOf(
      _classRef, "getPatternForCurrencySpacing", "(IZ)Ljava/lang/String;");

  /// from: public java.lang.String getPatternForCurrencySpacing(int itemType, boolean beforeCurrency)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the desired currency spacing value. Original values come from ICU's
  /// CLDR data based on the locale provided during construction, and can be null.  These
  /// values govern what and when text is inserted between a currency code/name/symbol
  /// and the currency amount when formatting money.
  ///
  /// For more information, see <a href="http://www.unicode.org/reports/tr35/\#Currencies">UTS\#35 section 5.10.2</a>.
  ///@param itemType one of CURRENCY_SPC_CURRENCY_MATCH, CURRENCY_SPC_SURROUNDING_MATCH
  /// or CURRENCY_SPC_INSERT
  ///@param beforeCurrency true to get the <code>beforeCurrency</code> values, false
  /// to get the <code>afterCurrency</code> values.
  ///@return the value, or null.
  ///@see \#setPatternForCurrencySpacing(int, boolean, String)
  jni.JniString getPatternForCurrencySpacing(
          int itemType, bool beforeCurrency) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getPatternForCurrencySpacing,
          jni.JniType.objectType,
          [itemType, beforeCurrency]).object);

  static final _id_setPatternForCurrencySpacing = jniAccessors.getMethodIDOf(
      _classRef, "setPatternForCurrencySpacing", "(IZLjava/lang/String;)V");

  /// from: public void setPatternForCurrencySpacing(int itemType, boolean beforeCurrency, java.lang.String pattern)
  ///
  /// <strong>[icu]</strong> Sets the indicated currency spacing pattern or value. See \#getPatternForCurrencySpacing for more information.
  ///
  /// Values for currency match and surrounding match must be android.icu.text.UnicodeSet patterns. Values for insert can be any string.
  ///
  /// <strong>Note:</strong> ICU4J does not currently use this information.
  ///@param itemType one of CURRENCY_SPC_CURRENCY_MATCH, CURRENCY_SPC_SURROUNDING_MATCH
  /// or CURRENCY_SPC_INSERT
  ///@param beforeCurrency true if the pattern is for before the currency symbol.
  /// false if the pattern is for after it.
  ///@param pattern string to override current setting; can be null.
  ///@see \#getPatternForCurrencySpacing(int, boolean)
  void setPatternForCurrencySpacing(
          int itemType, bool beforeCurrency, jni.JniString pattern) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setPatternForCurrencySpacing,
          jni.JniType.voidType,
          [itemType, beforeCurrency, pattern.reference]).check();

  static final _id_getLocale = jniAccessors.getMethodIDOf(
      _classRef, "getLocale", "()Ljava/util/Locale;");

  /// from: public java.util.Locale getLocale()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the locale for which this object was constructed.
  ///@return the locale for which this object was constructed
  jni.JniObject getLocale() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLocale, jni.JniType.objectType, []).object);

  static final _id_getULocale = jniAccessors.getMethodIDOf(
      _classRef, "getULocale", "()Landroid/icu/util/ULocale;");

  /// from: public android.icu.util.ULocale getULocale()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the locale for which this object was constructed.
  ///@return the locale for which this object was constructed
  ulocale_.ULocale getULocale() =>
      ulocale_.ULocale.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getULocale, jni.JniType.objectType, []).object);

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, "clone", "()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  jni.JniObject clone() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  ///
  /// {@inheritDoc}
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// {@inheritDoc}
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}
