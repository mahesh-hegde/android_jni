// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "UFormat.dart" as uformat_;

import "../util/ULocale.dart" as ulocale_;

import "TimeZoneNames.dart" as timezonenames_;

import "../util/TimeZone.dart" as timezone_;

import "../util/Output.dart" as output_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.text.TimeZoneFormat
///
/// <code>TimeZoneFormat</code> supports time zone display name formatting and parsing.
/// An instance of TimeZoneFormat works as a subformatter of SimpleDateFormat,
/// but you can also directly get a new instance of <code>TimeZoneFormat</code> and
/// formatting/parsing time zone display names.
///
/// ICU implements the time zone display names defined by <a href="http://www.unicode.org/reports/tr35/">UTS\#35
/// Unicode Locale Data Markup Language (LDML)</a>. TimeZoneNames represents the
/// time zone display name data model and this class implements the algorithm for actual
/// formatting and parsing.
///@see SimpleDateFormat
///@see TimeZoneNames
class TimeZoneFormat extends uformat_.UFormat {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/TimeZoneFormat");
  TimeZoneFormat.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/ULocale;)V");

  /// from: protected void <init>(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The protected constructor for subclassing.
  ///@param locale the locale
  TimeZoneFormat.ctor1(ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [locale.reference]).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Landroid/icu/util/ULocale;)Landroid/icu/text/TimeZoneFormat;");

  /// from: static public android.icu.text.TimeZoneFormat getInstance(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a frozen instance of <code>TimeZoneFormat</code> for the given locale.
  /// __Note__: The instance returned by this method is frozen. If you want to
  /// customize a TimeZoneFormat, you must use \#cloneAsThawed() to get a
  /// thawed copy first.
  ///@param locale the locale.
  ///@return a frozen instance of <code>TimeZoneFormat</code> for the given locale.
  static TimeZoneFormat getInstance(ulocale_.ULocale locale) =>
      TimeZoneFormat.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getInstance, jni.JniType.objectType, [locale.reference]).object);

  static final _id_getInstance1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInstance", "(Ljava/util/Locale;)Landroid/icu/text/TimeZoneFormat;");

  /// from: static public android.icu.text.TimeZoneFormat getInstance(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a frozen instance of <code>TimeZoneFormat</code> for the given
  /// java.util.Locale.
  /// __Note__: The instance returned by this method is frozen. If you want to
  /// customize a TimeZoneFormat, you must use \#cloneAsThawed() to get a
  /// thawed copy first.
  ///@param locale the Locale.
  ///@return a frozen instance of <code>TimeZoneFormat</code> for the given locale.
  static TimeZoneFormat getInstance1(jni.JniObject locale) =>
      TimeZoneFormat.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getInstance1, jni.JniType.objectType, [locale.reference]).object);

  static final _id_getTimeZoneNames = jniAccessors.getMethodIDOf(
      _classRef, "getTimeZoneNames", "()Landroid/icu/text/TimeZoneNames;");

  /// from: public android.icu.text.TimeZoneNames getTimeZoneNames()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the time zone display name data used by this instance.
  ///@return the time zone display name data.
  ///@see \#setTimeZoneNames(TimeZoneNames)
  timezonenames_.TimeZoneNames getTimeZoneNames() =>
      timezonenames_.TimeZoneNames.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTimeZoneNames, jni.JniType.objectType, []).object);

  static final _id_setTimeZoneNames = jniAccessors.getMethodIDOf(
      _classRef,
      "setTimeZoneNames",
      "(Landroid/icu/text/TimeZoneNames;)Landroid/icu/text/TimeZoneFormat;");

  /// from: public android.icu.text.TimeZoneFormat setTimeZoneNames(android.icu.text.TimeZoneNames tznames)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the time zone display name data to this instance.
  ///@param tznames the time zone display name data.
  ///@return this object.
  ///@throws UnsupportedOperationException when this object is frozen.
  ///@see \#getTimeZoneNames()
  TimeZoneFormat setTimeZoneNames(timezonenames_.TimeZoneNames tznames) =>
      TimeZoneFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setTimeZoneNames,
          jni.JniType.objectType,
          [tznames.reference]).object);

  static final _id_getGMTPattern = jniAccessors.getMethodIDOf(
      _classRef, "getGMTPattern", "()Ljava/lang/String;");

  /// from: public java.lang.String getGMTPattern()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the localized GMT format pattern.
  ///@return the localized GMT format pattern.
  ///@see \#setGMTPattern(String)
  jni.JniString getGMTPattern() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getGMTPattern, jni.JniType.objectType, []).object);

  static final _id_setGMTPattern = jniAccessors.getMethodIDOf(_classRef,
      "setGMTPattern", "(Ljava/lang/String;)Landroid/icu/text/TimeZoneFormat;");

  /// from: public android.icu.text.TimeZoneFormat setGMTPattern(java.lang.String pattern)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the localized GMT format pattern. The pattern must contain
  /// a single argument {0}, for example "GMT {0}".
  ///@param pattern the localized GMT format pattern string
  ///@return this object.
  ///@throws IllegalArgumentException when the pattern string does not contain "{0}"
  ///@throws UnsupportedOperationException when this object is frozen.
  ///@see \#getGMTPattern()
  TimeZoneFormat setGMTPattern(jni.JniString pattern) =>
      TimeZoneFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setGMTPattern,
          jni.JniType.objectType,
          [pattern.reference]).object);

  static final _id_getGMTOffsetPattern = jniAccessors.getMethodIDOf(
      _classRef,
      "getGMTOffsetPattern",
      "(Landroid/icu/text/TimeZoneFormat\$GMTOffsetPatternType;)Ljava/lang/String;");

  /// from: public java.lang.String getGMTOffsetPattern(android.icu.text.TimeZoneFormat.GMTOffsetPatternType type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the offset pattern used for localized GMT format.
  ///@param type the offset pattern enum
  ///@see \#setGMTOffsetPattern(GMTOffsetPatternType, String)
  jni.JniString getGMTOffsetPattern(TimeZoneFormat_GMTOffsetPatternType type) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getGMTOffsetPattern,
          jni.JniType.objectType,
          [type.reference]).object);

  static final _id_setGMTOffsetPattern = jniAccessors.getMethodIDOf(
      _classRef,
      "setGMTOffsetPattern",
      "(Landroid/icu/text/TimeZoneFormat\$GMTOffsetPatternType;Ljava/lang/String;)Landroid/icu/text/TimeZoneFormat;");

  /// from: public android.icu.text.TimeZoneFormat setGMTOffsetPattern(android.icu.text.TimeZoneFormat.GMTOffsetPatternType type, java.lang.String pattern)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the offset pattern for the given offset type.
  ///@param type the offset pattern.
  ///@param pattern the pattern string.
  ///@return this object.
  ///@throws IllegalArgumentException when the pattern string does not have required time field letters.
  ///@throws UnsupportedOperationException when this object is frozen.
  ///@see \#getGMTOffsetPattern(GMTOffsetPatternType)
  TimeZoneFormat setGMTOffsetPattern(
          TimeZoneFormat_GMTOffsetPatternType type, jni.JniString pattern) =>
      TimeZoneFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setGMTOffsetPattern,
          jni.JniType.objectType,
          [type.reference, pattern.reference]).object);

  static final _id_getGMTOffsetDigits = jniAccessors.getMethodIDOf(
      _classRef, "getGMTOffsetDigits", "()Ljava/lang/String;");

  /// from: public java.lang.String getGMTOffsetDigits()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the decimal digit characters used for localized GMT format in a single string
  /// containing from 0 to 9 in the ascending order.
  ///@return the decimal digits for localized GMT format.
  ///@see \#setGMTOffsetDigits(String)
  jni.JniString getGMTOffsetDigits() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getGMTOffsetDigits, jni.JniType.objectType, []).object);

  static final _id_setGMTOffsetDigits = jniAccessors.getMethodIDOf(
      _classRef,
      "setGMTOffsetDigits",
      "(Ljava/lang/String;)Landroid/icu/text/TimeZoneFormat;");

  /// from: public android.icu.text.TimeZoneFormat setGMTOffsetDigits(java.lang.String digits)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the decimal digit characters used for localized GMT format.
  ///@param digits a string contains the decimal digit characters from 0 to 9 n the ascending order.
  ///@return this object.
  ///@throws IllegalArgumentException when the string did not contain ten characters.
  ///@throws UnsupportedOperationException when this object is frozen.
  ///@see \#getGMTOffsetDigits()
  TimeZoneFormat setGMTOffsetDigits(jni.JniString digits) =>
      TimeZoneFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setGMTOffsetDigits,
          jni.JniType.objectType,
          [digits.reference]).object);

  static final _id_getGMTZeroFormat = jniAccessors.getMethodIDOf(
      _classRef, "getGMTZeroFormat", "()Ljava/lang/String;");

  /// from: public java.lang.String getGMTZeroFormat()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the localized GMT format string for GMT(UTC) itself (GMT offset is 0).
  ///@return the localized GMT string string for GMT(UTC) itself.
  ///@see \#setGMTZeroFormat(String)
  jni.JniString getGMTZeroFormat() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getGMTZeroFormat, jni.JniType.objectType, []).object);

  static final _id_setGMTZeroFormat = jniAccessors.getMethodIDOf(
      _classRef,
      "setGMTZeroFormat",
      "(Ljava/lang/String;)Landroid/icu/text/TimeZoneFormat;");

  /// from: public android.icu.text.TimeZoneFormat setGMTZeroFormat(java.lang.String gmtZeroFormat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the localized GMT format string for GMT(UTC) itself (GMT offset is 0).
  ///@param gmtZeroFormat the localized GMT format string for GMT(UTC).
  ///@return this object.
  ///@throws UnsupportedOperationException when this object is frozen.
  ///@see \#getGMTZeroFormat()
  TimeZoneFormat setGMTZeroFormat(jni.JniString gmtZeroFormat) =>
      TimeZoneFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setGMTZeroFormat,
          jni.JniType.objectType,
          [gmtZeroFormat.reference]).object);

  static final _id_setDefaultParseOptions = jniAccessors.getMethodIDOf(
      _classRef,
      "setDefaultParseOptions",
      "(Ljava/util/EnumSet;)Landroid/icu/text/TimeZoneFormat;");

  /// from: public android.icu.text.TimeZoneFormat setDefaultParseOptions(java.util.EnumSet<android.icu.text.TimeZoneFormat.ParseOption> options)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the default parse options.
  ///
  /// __Note:__ By default, an instance of <code>TimeZoneFormat</code>
  /// created by {\#link \#getInstance(ULocale) has no parse options set.
  ///@param options the default parse options.
  ///@return this object.
  ///@see ParseOption
  TimeZoneFormat setDefaultParseOptions(jni.JniObject options) =>
      TimeZoneFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setDefaultParseOptions,
          jni.JniType.objectType,
          [options.reference]).object);

  static final _id_getDefaultParseOptions = jniAccessors.getMethodIDOf(
      _classRef, "getDefaultParseOptions", "()Ljava/util/EnumSet;");

  /// from: public java.util.EnumSet<android.icu.text.TimeZoneFormat.ParseOption> getDefaultParseOptions()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the default parse options used by this <code>TimeZoneFormat</code> instance.
  ///@return the default parse options.
  ///@see ParseOption
  jni.JniObject getDefaultParseOptions() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getDefaultParseOptions, jni.JniType.objectType, []).object);

  static final _id_formatOffsetISO8601Basic = jniAccessors.getMethodIDOf(
      _classRef, "formatOffsetISO8601Basic", "(IZZZ)Ljava/lang/String;");

  /// from: public final java.lang.String formatOffsetISO8601Basic(int offset, boolean useUtcIndicator, boolean isShort, boolean ignoreSeconds)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the ISO 8601 basic time zone string for the given offset.
  /// For example, "-08", "-0830" and "Z"
  ///@param offset the offset from GMT(UTC) in milliseconds.
  ///@param useUtcIndicator true if ISO 8601 UTC indicator "Z" is used when the offset is 0.
  ///@param isShort true if shortest form is used.
  ///@param ignoreSeconds true if non-zero offset seconds is appended.
  ///@return the ISO 8601 basic format.
  ///@throws IllegalArgumentException if the specified offset is out of supported range
  /// (-24 hours &lt; offset &lt; +24 hours).
  ///@see \#formatOffsetISO8601Extended(int, boolean, boolean, boolean)
  ///@see \#parseOffsetISO8601(String, ParsePosition)
  jni.JniString formatOffsetISO8601Basic(
          int offset, bool useUtcIndicator, bool isShort, bool ignoreSeconds) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_formatOffsetISO8601Basic,
          jni.JniType.objectType,
          [offset, useUtcIndicator, isShort, ignoreSeconds]).object);

  static final _id_formatOffsetISO8601Extended = jniAccessors.getMethodIDOf(
      _classRef, "formatOffsetISO8601Extended", "(IZZZ)Ljava/lang/String;");

  /// from: public final java.lang.String formatOffsetISO8601Extended(int offset, boolean useUtcIndicator, boolean isShort, boolean ignoreSeconds)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the ISO 8601 extended time zone string for the given offset.
  /// For example, "-08:00", "-08:30" and "Z"
  ///@param offset the offset from GMT(UTC) in milliseconds.
  ///@param useUtcIndicator true if ISO 8601 UTC indicator "Z" is used when the offset is 0.
  ///@param isShort true if shortest form is used.
  ///@param ignoreSeconds true if non-zero offset seconds is appended.
  ///@return the ISO 8601 extended format.
  ///@throws IllegalArgumentException if the specified offset is out of supported range
  /// (-24 hours &lt; offset &lt; +24 hours).
  ///@see \#formatOffsetISO8601Basic(int, boolean, boolean, boolean)
  ///@see \#parseOffsetISO8601(String, ParsePosition)
  jni.JniString formatOffsetISO8601Extended(
          int offset, bool useUtcIndicator, bool isShort, bool ignoreSeconds) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_formatOffsetISO8601Extended,
          jni.JniType.objectType,
          [offset, useUtcIndicator, isShort, ignoreSeconds]).object);

  static final _id_formatOffsetLocalizedGMT = jniAccessors.getMethodIDOf(
      _classRef, "formatOffsetLocalizedGMT", "(I)Ljava/lang/String;");

  /// from: public java.lang.String formatOffsetLocalizedGMT(int offset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the localized GMT(UTC) offset format for the given offset.
  /// The localized GMT offset is defined by;
  /// <ul>
  /// <li>GMT format pattern (e.g. "GMT {0}" - see \#getGMTPattern())
  /// <li>Offset time pattern (e.g. "+HH:mm" - see \#getGMTOffsetPattern(GMTOffsetPatternType))
  /// <li>Offset digits (e.g. "0123456789" - see \#getGMTOffsetDigits())
  /// <li>GMT zero format (e.g. "GMT" - see \#getGMTZeroFormat())
  /// </ul>
  /// This format always uses 2 digit hours and minutes. When the given offset has non-zero
  /// seconds, 2 digit seconds field will be appended. For example,
  /// GMT+05:00 and GMT+05:28:06.
  ///@param offset the offset from GMT(UTC) in milliseconds.
  ///@return the localized GMT format string
  ///@see \#parseOffsetLocalizedGMT(String, ParsePosition)
  ///@throws IllegalArgumentException if the specified offset is out of supported range
  /// (-24 hours &lt; offset &lt; +24 hours).
  jni.JniString formatOffsetLocalizedGMT(int offset) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_formatOffsetLocalizedGMT,
          jni.JniType.objectType,
          [offset]).object);

  static final _id_formatOffsetShortLocalizedGMT = jniAccessors.getMethodIDOf(
      _classRef, "formatOffsetShortLocalizedGMT", "(I)Ljava/lang/String;");

  /// from: public java.lang.String formatOffsetShortLocalizedGMT(int offset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the short localized GMT(UTC) offset format for the given offset.
  /// The short localized GMT offset is defined by;
  /// <ul>
  /// <li>GMT format pattern (e.g. "GMT {0}" - see \#getGMTPattern())
  /// <li>Offset time pattern (e.g. "+HH:mm" - see \#getGMTOffsetPattern(GMTOffsetPatternType))
  /// <li>Offset digits (e.g. "0123456789" - see \#getGMTOffsetDigits())
  /// <li>GMT zero format (e.g. "GMT" - see \#getGMTZeroFormat())
  /// </ul>
  /// This format uses the shortest representation of offset. The hours field does not
  /// have leading zero and lower fields with zero will be truncated. For example,
  /// GMT+5 and GMT+530.
  ///@param offset the offset from GMT(UTC) in milliseconds.
  ///@return the short localized GMT format string
  ///@see \#parseOffsetLocalizedGMT(String, ParsePosition)
  ///@throws IllegalArgumentException if the specified offset is out of supported range
  /// (-24 hours &lt; offset &lt; +24 hours).
  jni.JniString formatOffsetShortLocalizedGMT(int offset) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_formatOffsetShortLocalizedGMT,
          jni.JniType.objectType,
          [offset]).object);

  static final _id_format = jniAccessors.getMethodIDOf(_classRef, "format",
      "(Landroid/icu/text/TimeZoneFormat\$Style;Landroid/icu/util/TimeZone;J)Ljava/lang/String;");

  /// from: public final java.lang.String format(android.icu.text.TimeZoneFormat.Style style, android.icu.util.TimeZone tz, long date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name of the time zone at the given date for
  /// the style.
  ///
  /// __Note__: A style may have fallback styles defined. For example,
  /// when <code>GENERIC_LONG</code> is requested, but there is no display name
  /// data available for <code>GENERIC_LONG</code> style, the implementation
  /// may use <code>GENERIC_LOCATION</code> or <code>LOCALIZED_GMT</code>.
  /// See UTS\#35 UNICODE LOCALE DATA MARKUP LANGUAGE (LDML)
  /// <a href="http://www.unicode.org/reports/tr35/\#Time_Zone_Fallback">Appendix J: Time Zone Display Name</a>
  /// for the details.
  ///@param style the style enum (e.g. <code>GENERIC_LONG</code>, <code>LOCALIZED_GMT</code>...)
  ///@param tz the time zone.
  ///@param date the date.
  ///@return the display name of the time zone.
  ///@see Style
  ///@see \#format(Style, TimeZone, long, Output)
  jni.JniString format(
          TimeZoneFormat_Style style, timezone_.TimeZone tz, int date) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_format,
          jni.JniType.objectType,
          [style.reference, tz.reference, date]).object);

  static final _id_format1 = jniAccessors.getMethodIDOf(_classRef, "format",
      "(Landroid/icu/text/TimeZoneFormat\$Style;Landroid/icu/util/TimeZone;JLandroid/icu/util/Output;)Ljava/lang/String;");

  /// from: public java.lang.String format(android.icu.text.TimeZoneFormat.Style style, android.icu.util.TimeZone tz, long date, android.icu.util.Output<android.icu.text.TimeZoneFormat.TimeType> timeType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name of the time zone at the given date for
  /// the style. This method takes an extra argument <code>Output&lt;TimeType&gt; timeType</code>
  /// in addition to the argument list of \#format(Style, TimeZone, long).
  /// The argument is used for receiving the time type (standard time
  /// or daylight saving time, or unknown) actually used for the display name.
  ///@param style the style enum (e.g. <code>GENERIC_LONG</code>, <code>LOCALIZED_GMT</code>...)
  ///@param tz the time zone.
  ///@param date the date.
  ///@param timeType the output argument for receiving the time type (standard/daylight/unknown)
  /// used for the display name, or specify null if the information is not necessary.
  ///@return the display name of the time zone.
  ///@see Style
  ///@see \#format(Style, TimeZone, long)
  jni.JniString format1(TimeZoneFormat_Style style, timezone_.TimeZone tz,
          int date, output_.Output timeType) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_format1,
          jni.JniType.objectType,
          [style.reference, tz.reference, date, timeType.reference]).object);

  static final _id_parseOffsetISO8601 = jniAccessors.getMethodIDOf(_classRef,
      "parseOffsetISO8601", "(Ljava/lang/String;Ljava/text/ParsePosition;)I");

  /// from: public final int parseOffsetISO8601(java.lang.String text, java.text.ParsePosition pos)
  ///
  /// Returns offset from GMT(UTC) in milliseconds for the given ISO 8601
  /// basic or extended time zone string. When the given string is not an ISO 8601 time
  /// zone string, this method sets the current position as the error index
  /// to <code>ParsePosition pos</code> and returns 0.
  ///@param text the text contains ISO 8601 style time zone string (e.g. "-08", "-0800", "-08:00", and "Z")
  /// at the position.
  ///@param pos the position.
  ///@return the offset from GMT(UTC) in milliseconds for the given ISO 8601 style
  /// time zone string.
  ///@see \#formatOffsetISO8601Basic(int, boolean, boolean, boolean)
  ///@see \#formatOffsetISO8601Extended(int, boolean, boolean, boolean)
  int parseOffsetISO8601(jni.JniString text, jni.JniObject pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_parseOffsetISO8601,
          jni.JniType.intType, [text.reference, pos.reference]).integer;

  static final _id_parseOffsetLocalizedGMT = jniAccessors.getMethodIDOf(
      _classRef,
      "parseOffsetLocalizedGMT",
      "(Ljava/lang/String;Ljava/text/ParsePosition;)I");

  /// from: public int parseOffsetLocalizedGMT(java.lang.String text, java.text.ParsePosition pos)
  ///
  /// Returns offset from GMT(UTC) in milliseconds for the given localized GMT
  /// offset format string. When the given string cannot be parsed, this method
  /// sets the current position as the error index to <code>ParsePosition pos</code>
  /// and returns 0.
  ///@param text the text contains a localized GMT offset string at the position.
  ///@param pos the position.
  ///@return the offset from GMT(UTC) in milliseconds for the given localized GMT
  /// offset format string.
  ///@see \#formatOffsetLocalizedGMT(int)
  int parseOffsetLocalizedGMT(jni.JniString text, jni.JniObject pos) =>
      jniAccessors.callMethodWithArgs(reference, _id_parseOffsetLocalizedGMT,
          jni.JniType.intType, [text.reference, pos.reference]).integer;

  static final _id_parseOffsetShortLocalizedGMT = jniAccessors.getMethodIDOf(
      _classRef,
      "parseOffsetShortLocalizedGMT",
      "(Ljava/lang/String;Ljava/text/ParsePosition;)I");

  /// from: public int parseOffsetShortLocalizedGMT(java.lang.String text, java.text.ParsePosition pos)
  ///
  /// Returns offset from GMT(UTC) in milliseconds for the given short localized GMT
  /// offset format string. When the given string cannot be parsed, this method
  /// sets the current position as the error index to <code>ParsePosition pos</code>
  /// and returns 0.
  ///@param text the text contains a short localized GMT offset string at the position.
  ///@param pos the position.
  ///@return the offset from GMT(UTC) in milliseconds for the given short localized GMT
  /// offset format string.
  ///@see \#formatOffsetShortLocalizedGMT(int)
  int parseOffsetShortLocalizedGMT(jni.JniString text, jni.JniObject pos) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_parseOffsetShortLocalizedGMT,
          jni.JniType.intType,
          [text.reference, pos.reference]).integer;

  static final _id_parse = jniAccessors.getMethodIDOf(_classRef, "parse",
      "(Landroid/icu/text/TimeZoneFormat\$Style;Ljava/lang/String;Ljava/text/ParsePosition;Ljava/util/EnumSet;Landroid/icu/util/Output;)Landroid/icu/util/TimeZone;");

  /// from: public android.icu.util.TimeZone parse(android.icu.text.TimeZoneFormat.Style style, java.lang.String text, java.text.ParsePosition pos, java.util.EnumSet<android.icu.text.TimeZoneFormat.ParseOption> options, android.icu.util.Output<android.icu.text.TimeZoneFormat.TimeType> timeType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>TimeZone</code> by parsing the time zone string according to
  /// the parse position, the style and the parse options.
  ///@param text the text contains a time zone string at the position.
  ///@param style the format style.
  ///@param pos the position.
  ///@param options the parse options.
  ///@param timeType The output argument for receiving the time type (standard/daylight/unknown),
  /// or specify null if the information is not necessary.
  ///@return A <code>TimeZone</code>, or null if the input could not be parsed.
  ///@see Style
  ///@see \#format(Style, TimeZone, long, Output)
  timezone_.TimeZone parse(TimeZoneFormat_Style style, jni.JniString text,
          jni.JniObject pos, jni.JniObject options, output_.Output timeType) =>
      timezone_.TimeZone.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_parse, jni.JniType.objectType, [
        style.reference,
        text.reference,
        pos.reference,
        options.reference,
        timeType.reference
      ]).object);

  static final _id_parse1 = jniAccessors.getMethodIDOf(_classRef, "parse",
      "(Landroid/icu/text/TimeZoneFormat\$Style;Ljava/lang/String;Ljava/text/ParsePosition;Landroid/icu/util/Output;)Landroid/icu/util/TimeZone;");

  /// from: public android.icu.util.TimeZone parse(android.icu.text.TimeZoneFormat.Style style, java.lang.String text, java.text.ParsePosition pos, android.icu.util.Output<android.icu.text.TimeZoneFormat.TimeType> timeType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>TimeZone</code> by parsing the time zone string according to
  /// the parse position, the style and the default parse options.
  ///
  /// __Note__: This method is equivalent to \#parse(Style, String, ParsePosition, EnumSet, Output) parse(style, text, pos, null, timeType).
  ///@param text the text contains a time zone string at the position.
  ///@param style the format style
  ///@param pos the position.
  ///@param timeType The output argument for receiving the time type (standard/daylight/unknown),
  /// or specify null if the information is not necessary.
  ///@return A <code>TimeZone</code>, or null if the input could not be parsed.
  ///@see Style
  ///@see \#parse(Style, String, ParsePosition, EnumSet, Output)
  ///@see \#format(Style, TimeZone, long, Output)
  ///@see \#setDefaultParseOptions(EnumSet)
  timezone_.TimeZone parse1(TimeZoneFormat_Style style, jni.JniString text,
          jni.JniObject pos, output_.Output timeType) =>
      timezone_.TimeZone.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_parse1, jni.JniType.objectType, [
        style.reference,
        text.reference,
        pos.reference,
        timeType.reference
      ]).object);

  static final _id_parse2 = jniAccessors.getMethodIDOf(_classRef, "parse",
      "(Ljava/lang/String;Ljava/text/ParsePosition;)Landroid/icu/util/TimeZone;");

  /// from: public final android.icu.util.TimeZone parse(java.lang.String text, java.text.ParsePosition pos)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>TimeZone</code> by parsing the time zone string according to
  /// the given parse position.
  ///
  /// __Note__: This method is equivalent to \#parse(Style, String, ParsePosition, EnumSet, Output) parse(Style.GENERIC_LOCATION, text, pos, EnumSet.of(ParseOption.ALL_STYLES), timeType).
  ///@param text the text contains a time zone string at the position.
  ///@param pos the position.
  ///@return A <code>TimeZone</code>, or null if the input could not be parsed.
  ///@see \#parse(Style, String, ParsePosition, EnumSet, Output)
  timezone_.TimeZone parse2(jni.JniString text, jni.JniObject pos) =>
      timezone_.TimeZone.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_parse2,
          jni.JniType.objectType,
          [text.reference, pos.reference]).object);

  static final _id_parse3 = jniAccessors.getMethodIDOf(
      _classRef, "parse", "(Ljava/lang/String;)Landroid/icu/util/TimeZone;");

  /// from: public final android.icu.util.TimeZone parse(java.lang.String text)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a <code>TimeZone</code> for the given text.
  ///
  /// __Note__: The behavior of this method is equivalent to \#parse(String, ParsePosition).
  ///@param text the time zone string
  ///@return A <code>TimeZone</code>.
  ///@throws ParseException when the input could not be parsed as a time zone string.
  ///@see \#parse(String, ParsePosition)
  timezone_.TimeZone parse3(jni.JniString text) =>
      timezone_.TimeZone.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_parse3, jni.JniType.objectType, [text.reference]).object);

  static final _id_format2 = jniAccessors.getMethodIDOf(_classRef, "format",
      "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;");

  /// from: public java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  jni.JniObject format2(
          jni.JniObject obj, jni.JniObject toAppendTo, jni.JniObject pos) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_format2,
          jni.JniType.objectType,
          [obj.reference, toAppendTo.reference, pos.reference]).object);

  static final _id_formatToCharacterIterator = jniAccessors.getMethodIDOf(
      _classRef,
      "formatToCharacterIterator",
      "(Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;");

  /// from: public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object obj)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  jni.JniObject formatToCharacterIterator(jni.JniObject obj) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_formatToCharacterIterator,
          jni.JniType.objectType,
          [obj.reference]).object);

  static final _id_parseObject = jniAccessors.getMethodIDOf(
      _classRef,
      "parseObject",
      "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;");

  /// from: public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  jni.JniObject parseObject(jni.JniString source, jni.JniObject pos) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_parseObject,
          jni.JniType.objectType,
          [source.reference, pos.reference]).object);

  static final _id_isFrozen =
      jniAccessors.getMethodIDOf(_classRef, "isFrozen", "()Z");

  /// from: public boolean isFrozen()
  ///
  /// {@inheritDoc}
  bool isFrozen() => jniAccessors.callMethodWithArgs(
      reference, _id_isFrozen, jni.JniType.booleanType, []).boolean;

  static final _id_freeze = jniAccessors.getMethodIDOf(
      _classRef, "freeze", "()Landroid/icu/text/TimeZoneFormat;");

  /// from: public android.icu.text.TimeZoneFormat freeze()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  TimeZoneFormat freeze() =>
      TimeZoneFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_freeze, jni.JniType.objectType, []).object);

  static final _id_cloneAsThawed = jniAccessors.getMethodIDOf(
      _classRef, "cloneAsThawed", "()Landroid/icu/text/TimeZoneFormat;");

  /// from: public android.icu.text.TimeZoneFormat cloneAsThawed()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  TimeZoneFormat cloneAsThawed() =>
      TimeZoneFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_cloneAsThawed, jni.JniType.objectType, []).object);
}

/// from: android.icu.text.TimeZoneFormat$TimeType
///
/// Time type enum used for receiving time type (standard time, daylight time or unknown)
/// in <code>TimeZoneFormat</code> APIs.
class TimeZoneFormat_TimeType extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/TimeZoneFormat\$TimeType");
  TimeZoneFormat_TimeType.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/icu/text/TimeZoneFormat\$TimeType;");

  /// from: static public android.icu.text.TimeZoneFormat.TimeType[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/text/TimeZoneFormat\$TimeType;");

  /// from: static public android.icu.text.TimeZoneFormat.TimeType valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeZoneFormat_TimeType valueOf(jni.JniString name) =>
      TimeZoneFormat_TimeType.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  TimeZoneFormat_TimeType()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.icu.text.TimeZoneFormat$Style
///
/// Time zone display format style enum used by format/parse APIs in <code>TimeZoneFormat</code>.
///@see TimeZoneFormat\#format(Style, TimeZone, long)
///@see TimeZoneFormat\#format(Style, TimeZone, long, Output)
///@see TimeZoneFormat\#parse(Style, String, ParsePosition, Output)
class TimeZoneFormat_Style extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/TimeZoneFormat\$Style");
  TimeZoneFormat_Style.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/icu/text/TimeZoneFormat\$Style;");

  /// from: static public android.icu.text.TimeZoneFormat.Style[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/text/TimeZoneFormat\$Style;");

  /// from: static public android.icu.text.TimeZoneFormat.Style valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeZoneFormat_Style valueOf(jni.JniString name) =>
      TimeZoneFormat_Style.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  TimeZoneFormat_Style()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.icu.text.TimeZoneFormat$ParseOption
///
/// Parse option enum, used for specifying optional parse behavior.
class TimeZoneFormat_ParseOption extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/TimeZoneFormat\$ParseOption");
  TimeZoneFormat_ParseOption.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/icu/text/TimeZoneFormat\$ParseOption;");

  /// from: static public android.icu.text.TimeZoneFormat.ParseOption[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/text/TimeZoneFormat\$ParseOption;");

  /// from: static public android.icu.text.TimeZoneFormat.ParseOption valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeZoneFormat_ParseOption valueOf(jni.JniString name) =>
      TimeZoneFormat_ParseOption.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  TimeZoneFormat_ParseOption()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.icu.text.TimeZoneFormat$GMTOffsetPatternType
///
/// Offset pattern type enum.
///@see TimeZoneFormat\#getGMTOffsetPattern(GMTOffsetPatternType)
///@see TimeZoneFormat\#setGMTOffsetPattern(GMTOffsetPatternType, String)
class TimeZoneFormat_GMTOffsetPatternType extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/icu/text/TimeZoneFormat\$GMTOffsetPatternType");
  TimeZoneFormat_GMTOffsetPatternType.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(_classRef,
      "values", "()[Landroid/icu/text/TimeZoneFormat\$GMTOffsetPatternType;");

  /// from: static public android.icu.text.TimeZoneFormat.GMTOffsetPatternType[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/text/TimeZoneFormat\$GMTOffsetPatternType;");

  /// from: static public android.icu.text.TimeZoneFormat.GMTOffsetPatternType valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeZoneFormat_GMTOffsetPatternType valueOf(jni.JniString name) =>
      TimeZoneFormat_GMTOffsetPatternType.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_valueOf,
              jni.JniType.objectType, [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  TimeZoneFormat_GMTOffsetPatternType()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
