// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "UFormat.dart" as uformat_;

import "../util/Calendar.dart" as calendar_;

import "NumberFormat.dart" as numberformat_;

import "../util/ULocale.dart" as ulocale_;

import "../util/TimeZone.dart" as timezone_;

import "DisplayContext.dart" as displaycontext_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.text.DateFormat
///
/// <strong>[icu enhancement]</strong> ICU's replacement for java.text.DateFormat.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.
///
///
/// DateFormat is an abstract class for date/time formatting subclasses which formats and parses dates or time in a
/// language-independent manner. The date/time formatting subclass, such as SimpleDateFormat, allows for formatting
/// (i.e., date -&gt; text), parsing (text -&gt; date), and normalization. The date is represented as a <code>Date</code>
/// object or as the milliseconds since January 1, 1970, 00:00:00 GMT.
///
///
/// DateFormat helps you to format and parse dates for any locale. Your code can be completely independent of the locale
/// conventions for months, days of the week, or even the calendar format: lunar vs. solar. It provides many class
/// methods for obtaining default date/time formatters based on the default for a given locale and a number of formatting
/// styles or arbitrary "skeletons".
/// <ol>
/// <li>The formatting styles include FULL, LONG, MEDIUM, and SHORT. More detail and examples of using these styles are
/// provided in the method descriptions.
/// <li>The formatting styles only cover a fraction of the necessary usage. You often need to have just certain
/// combinations of fields, like Month and Year, but have it to be formatted appropriate to a given locale. This is done
/// using the (misnamed) getPatternInstance() method, supplying a skeleton. There are a number of constants that have
/// common pre-defined skeletons, such as \#MINUTE_SECOND for something like "13:45" or \#YEAR_ABBR_MONTH
/// for something like "Sept 2012".
/// </ol>
///
///
/// To format a date for the current Locale, use one of the static factory methods:
///
/// <pre>
/// myString = DateFormat.getDateInstance().format(myDate);
/// myString = DateFormat.getPatternInstance(DateFormat.YEAR_ABBR_MONTH).format(myDate);
/// </pre>
///
/// If you are formatting multiple numbers, it is more efficient to get the format and use it multiple times so that the
/// system doesn't have to fetch the information about the local language and country conventions multiple times.
///
/// <pre>
/// DateFormat df = DateFormat.getDateInstance();
/// for (int i = 0; i &lt; a.length; ++i) {
///     output.println(df.format(myDate[i]) + &quot;; &quot;);
/// }
/// </pre>
///
/// To format a date for a different Locale, specify it in the call to getDateInstance().
///
/// <pre>
/// DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);
/// </pre>
///
/// You can use a DateFormat to parse also.
///
/// <pre>
/// myDate = df.parse(myString);
/// </pre>
///
/// There are many static factory methods available. Use getDateInstance to get the normal date format for that country.
/// Use getTimeInstance to get the time format for that country. Use getDateTimeInstance to get a date and time format.
/// You can pass in different options to these factory methods to control the length of the result; from SHORT to MEDIUM
/// to LONG to FULL. The exact result depends on the locale, but generally:
/// <ul>
/// <li>SHORT is completely numeric, such as 12.13.52 or 3:30pm
/// <li>MEDIUM is longer, such as Jan 12, 1952
/// <li>LONG is longer, such as January 12, 1952 or 3:30:32pm
/// <li>FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST.
/// </ul>
///
///
/// Use getPatternInstance to format with a skeleton. Typically this is with a predefined skeleton, like
/// \#YEAR_ABBR_MONTH for something like "Sept 2012". If you don't want to use one of the predefined skeletons,
/// you can supply your own. The skeletons are like the patterns in SimpleDateFormat, except they:
/// <ol>
/// <li>only keep the field pattern letter and ignore all other parts in a pattern, such as space, punctuation, and
/// string literals.
/// <li>are independent of the order of fields.
/// <li>ignore certain differences in the field's pattern letter length:
/// <ol>
/// <li>For those non-digit calendar fields, the pattern letter length is important, such as MMM, MMMM, and MMMMM; E and
/// EEEE, and the field's pattern letter length is honored.
/// <li>For the digit calendar fields, such as M or MM, d or dd, yy or yyyy, the field pattern length is ignored and the
/// best match, which is defined in date time patterns, will be returned without honor the field pattern letter length in
/// skeleton.
/// </ol>
/// </ol>
///
///
/// You can also set the time zone on the format if you wish. If you want even more control over the format or parsing,
/// (or want to give your users more control), you can try casting the DateFormat you get from the factory methods to a
/// SimpleDateFormat. This will work for the majority of countries; just remember to put it in a try block in case you
/// encounter an unusual one.
///
///
/// You can also use forms of the parse and format methods with ParsePosition and FieldPosition to allow you to
/// <ul>
/// <li>progressively parse through pieces of a string.
/// <li>align any particular field, or find out where it is for selection on the screen.
/// </ul>
///
/// <h3>Synchronization</h3>
///
/// Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple
/// threads access a format concurrently, it must be synchronized externally.
///@see UFormat
///@see NumberFormat
///@see SimpleDateFormat
///@see android.icu.util.Calendar
///@see android.icu.util.GregorianCalendar
///@see android.icu.util.TimeZone
///@author Mark Davis, Chen-Lieh Huang, Alan Liu
class DateFormat extends uformat_.UFormat {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/DateFormat");
  DateFormat.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ABBR_GENERIC_TZ
  ///
  /// <strong>[icu]</strong> Constant for <i>generic non-location format</i>, abbreviated if possible, such as PT;
  /// used in combinations date + time + zone, or time + zone.
  ///@see <a href="http://unicode.org/reports/tr35/\#Date_Format_Patterns">LDML Date Format Patterns</a>
  ///@see <a href="http://unicode.org/reports/tr35/\#Time_Zone_Fallback">LDML Time Zone Fallback</a>
  static const ABBR_GENERIC_TZ = "v";

  /// from: static public final java.lang.String ABBR_MONTH
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with abbreviated month.
  static const ABBR_MONTH = "MMM";

  /// from: static public final java.lang.String ABBR_MONTH_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with abbreviated month and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const ABBR_MONTH_DAY = "MMMd";

  /// from: static public final java.lang.String ABBR_MONTH_WEEKDAY_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with abbreviated month, weekday, and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const ABBR_MONTH_WEEKDAY_DAY = "MMMEd";

  /// from: static public final java.lang.String ABBR_QUARTER
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with abbreviated quarter.
  static const ABBR_QUARTER = "QQQ";

  /// from: static public final java.lang.String ABBR_SPECIFIC_TZ
  ///
  /// <strong>[icu]</strong> Constant for <i>specific non-location format</i>, abbreviated if possible, such as PDT;
  /// used in combinations date + time + zone, or time + zone.
  ///@see <a href="http://unicode.org/reports/tr35/\#Date_Format_Patterns">LDML Date Format Patterns</a>
  ///@see <a href="http://unicode.org/reports/tr35/\#Time_Zone_Fallback">LDML Time Zone Fallback</a>
  static const ABBR_SPECIFIC_TZ = "z";

  /// from: static public final java.lang.String ABBR_UTC_TZ
  ///
  /// <strong>[icu]</strong> Constant for <i>localized GMT/UTC format</i>, such as GMT+8:00 or HPG-8:00;
  /// used in combinations date + time + zone, or time + zone.
  ///@see <a href="http://unicode.org/reports/tr35/\#Date_Format_Patterns">LDML Date Format Patterns</a>
  ///@see <a href="http://unicode.org/reports/tr35/\#Time_Zone_Fallback">LDML Time Zone Fallback</a>
  static const ABBR_UTC_TZ = "ZZZZ";

  /// from: static public final java.lang.String ABBR_WEEKDAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with abbreviated weekday.
  static const ABBR_WEEKDAY = "E";

  /// from: static public final int AM_PM_FIELD
  ///
  /// FieldPosition selector for 'a' field alignment,
  /// corresponding to the Calendar\#AM_PM field.
  static const AM_PM_FIELD = 14;

  /// from: static public final int AM_PM_MIDNIGHT_NOON_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'b' field alignment.
  /// No related Calendar field.
  /// This displays the fixed day period (am/pm/midnight/noon).
  static const AM_PM_MIDNIGHT_NOON_FIELD = 35;

  /// from: static public final int DATE_FIELD
  ///
  /// FieldPosition selector for 'd' field alignment,
  /// corresponding to the Calendar\#DATE field.
  static const DATE_FIELD = 3;

  /// from: static public final java.lang.String DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with day.
  static const DAY = "d";

  /// from: static public final int DAY_OF_WEEK_FIELD
  ///
  /// FieldPosition selector for 'E' field alignment,
  /// corresponding to the Calendar\#DAY_OF_WEEK field.
  static const DAY_OF_WEEK_FIELD = 9;

  /// from: static public final int DAY_OF_WEEK_IN_MONTH_FIELD
  ///
  /// FieldPosition selector for 'F' field alignment,
  /// corresponding to the Calendar\#DAY_OF_WEEK_IN_MONTH field.
  static const DAY_OF_WEEK_IN_MONTH_FIELD = 11;

  /// from: static public final int DAY_OF_YEAR_FIELD
  ///
  /// FieldPosition selector for 'D' field alignment,
  /// corresponding to the Calendar\#DAY_OF_YEAR field.
  static const DAY_OF_YEAR_FIELD = 10;

  /// from: static public final int DEFAULT
  ///
  /// Constant for default style pattern.  Its value is MEDIUM.
  static const DEFAULT = 2;

  /// from: static public final int DOW_LOCAL_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'e' field alignment,
  /// corresponding to the Calendar\#DOW_LOCAL field.
  static const DOW_LOCAL_FIELD = 19;

  /// from: static public final int ERA_FIELD
  ///
  /// FieldPosition selector for 'G' field alignment,
  /// corresponding to the Calendar\#ERA field.
  static const ERA_FIELD = 0;

  /// from: static public final int EXTENDED_YEAR_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'u' field alignment,
  /// corresponding to the Calendar\#EXTENDED_YEAR field.
  static const EXTENDED_YEAR_FIELD = 20;

  /// from: static public final int FLEXIBLE_DAY_PERIOD_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'B' field alignment.
  /// No related Calendar field.
  /// This displays the flexible day period.
  static const FLEXIBLE_DAY_PERIOD_FIELD = 36;

  /// from: static public final int FRACTIONAL_SECOND_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'S' field alignment,
  /// corresponding to the Calendar\#MILLISECOND field.
  ///
  /// Note: Time formats that use 'S' can display a maximum of three
  /// significant digits for fractional seconds, corresponding to millisecond
  /// resolution and a fractional seconds sub-pattern of SSS. If the
  /// sub-pattern is S or SS, the fractional seconds value will be truncated
  /// (not rounded) to the number of display places specified. If the
  /// fractional seconds sub-pattern is longer than SSS, the additional
  /// display places will be filled with zeros.
  static const FRACTIONAL_SECOND_FIELD = 8;

  /// from: static public final int FULL
  ///
  /// Constant for full style pattern.
  static const FULL = 0;

  /// from: static public final java.lang.String GENERIC_TZ
  ///
  /// <strong>[icu]</strong> Constant for <i>generic non-location format</i>, such as Pacific Time;
  /// used in combinations date + time + zone, or time + zone.
  ///@see <a href="http://unicode.org/reports/tr35/\#Date_Format_Patterns">LDML Date Format Patterns</a>
  ///@see <a href="http://unicode.org/reports/tr35/\#Time_Zone_Fallback">LDML Time Zone Fallback</a>
  static const GENERIC_TZ = "vvvv";

  /// from: static public final java.lang.String HOUR
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with hour, with the locale's preferred hour format (12 or 24).
  static const HOUR = "j";

  /// from: static public final int HOUR0_FIELD
  ///
  /// FieldPosition selector for 'K' field alignment,
  /// corresponding to the Calendar\#HOUR field.
  /// HOUR0_FIELD is used for the zero-based 12-hour clock.
  /// For example, 11:30 PM + 1 hour results in 00:30 AM.
  static const HOUR0_FIELD = 16;

  /// from: static public final int HOUR1_FIELD
  ///
  /// FieldPosition selector for 'h' field alignment,
  /// corresponding to the Calendar\#HOUR field.
  /// HOUR1_FIELD is used for the one-based 12-hour clock.
  /// For example, 11:30 PM + 1 hour results in 12:30 AM.
  static const HOUR1_FIELD = 15;

  /// from: static public final java.lang.String HOUR24
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with hour in 24-hour presentation.
  static const HOUR24 = "H";

  /// from: static public final java.lang.String HOUR24_MINUTE
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with hour and minute in 24-hour presentation.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const HOUR24_MINUTE = "Hm";

  /// from: static public final java.lang.String HOUR24_MINUTE_SECOND
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with hour, minute, and second in
  /// 24-hour presentation.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const HOUR24_MINUTE_SECOND = "Hms";

  /// from: static public final java.lang.String HOUR_MINUTE
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with hour and minute, with the locale's preferred hour format (12 or 24).
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const HOUR_MINUTE = "jm";

  /// from: static public final java.lang.String HOUR_MINUTE_SECOND
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with hour, minute, and second,
  /// with the locale's preferred hour format (12 or 24).
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const HOUR_MINUTE_SECOND = "jms";

  /// from: static public final int HOUR_OF_DAY0_FIELD
  ///
  /// FieldPosition selector for 'H' field alignment,
  /// corresponding to the Calendar\#HOUR_OF_DAY field.
  /// HOUR_OF_DAY0_FIELD is used for the zero-based 24-hour clock.
  /// For example, 23:59 + 01:00 results in 00:59.
  static const HOUR_OF_DAY0_FIELD = 5;

  /// from: static public final int HOUR_OF_DAY1_FIELD
  ///
  /// FieldPosition selector for 'k' field alignment,
  /// corresponding to the Calendar\#HOUR_OF_DAY field.
  /// HOUR_OF_DAY1_FIELD is used for the one-based 24-hour clock.
  /// For example, 23:59 + 01:00 results in 24:59.
  static const HOUR_OF_DAY1_FIELD = 4;

  /// from: static public final int JULIAN_DAY_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'g' field alignment,
  /// corresponding to the Calendar\#JULIAN_DAY field.
  static const JULIAN_DAY_FIELD = 21;

  /// from: static public final java.lang.String LOCATION_TZ
  ///
  /// <strong>[icu]</strong> Constant for <i>generic location format</i>, such as Los Angeles Time;
  /// used in combinations date + time + zone, or time + zone.
  ///@see <a href="http://unicode.org/reports/tr35/\#Date_Format_Patterns">LDML Date Format Patterns</a>
  ///@see <a href="http://unicode.org/reports/tr35/\#Time_Zone_Fallback">LDML Time Zone Fallback</a>
  static const LOCATION_TZ = "VVVV";

  /// from: static public final int LONG
  ///
  /// Constant for long style pattern.
  static const LONG = 1;

  /// from: static public final int MEDIUM
  ///
  /// Constant for medium style pattern.
  static const MEDIUM = 2;

  /// from: static public final int MILLISECONDS_IN_DAY_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'A' field alignment,
  /// corresponding to the Calendar\#MILLISECONDS_IN_DAY field.
  static const MILLISECONDS_IN_DAY_FIELD = 22;

  /// from: static public final int MILLISECOND_FIELD
  ///
  /// Alias for FRACTIONAL_SECOND_FIELD.
  static const MILLISECOND_FIELD = 8;

  /// from: static public final java.lang.String MINUTE
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with minute.
  static const MINUTE = "m";

  /// from: static public final int MINUTE_FIELD
  ///
  /// FieldPosition selector for 'm' field alignment,
  /// corresponding to the Calendar\#MINUTE field.
  static const MINUTE_FIELD = 6;

  /// from: static public final java.lang.String MINUTE_SECOND
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with minute and second.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const MINUTE_SECOND = "ms";

  /// from: static public final java.lang.String MONTH
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with month.
  static const MONTH = "MMMM";

  /// from: static public final java.lang.String MONTH_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with long month and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const MONTH_DAY = "MMMMd";

  /// from: static public final int MONTH_FIELD
  ///
  /// FieldPosition selector for 'M' field alignment,
  /// corresponding to the Calendar\#MONTH field.
  static const MONTH_FIELD = 2;

  /// from: static public final java.lang.String MONTH_WEEKDAY_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with month, weekday, and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const MONTH_WEEKDAY_DAY = "MMMMEEEEd";

  /// from: static public final int NONE
  ///
  /// <strong>[icu]</strong> Constant for empty style pattern.
  static const NONE = -1;

  /// from: static public final java.lang.String NUM_MONTH
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with numeric month.
  static const NUM_MONTH = "M";

  /// from: static public final java.lang.String NUM_MONTH_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with numeric month and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const NUM_MONTH_DAY = "Md";

  /// from: static public final java.lang.String NUM_MONTH_WEEKDAY_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with numeric month, weekday, and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const NUM_MONTH_WEEKDAY_DAY = "MEd";

  /// from: static public final java.lang.String QUARTER
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with quarter.
  static const QUARTER = "QQQQ";

  /// from: static public final int QUARTER_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'Q' field alignment,
  /// corresponding to the Calendar\#MONTH field.
  /// This displays the quarter.
  static const QUARTER_FIELD = 27;

  /// from: static public final int RELATIVE
  ///
  /// <strong>[icu]</strong> Constant for relative style mask.
  static const RELATIVE = 128;

  /// from: static public final int RELATIVE_DEFAULT
  ///
  /// <strong>[icu]</strong> Constant for relative default style pattern.
  static const RELATIVE_DEFAULT = 130;

  /// from: static public final int RELATIVE_FULL
  ///
  /// <strong>[icu]</strong> Constant for relative full style pattern.
  static const RELATIVE_FULL = 128;

  /// from: static public final int RELATIVE_LONG
  ///
  /// <strong>[icu]</strong> Constant for relative style pattern.
  static const RELATIVE_LONG = 129;

  /// from: static public final int RELATIVE_MEDIUM
  ///
  /// <strong>[icu]</strong> Constant for relative style pattern.
  static const RELATIVE_MEDIUM = 130;

  /// from: static public final int RELATIVE_SHORT
  ///
  /// <strong>[icu]</strong> Constant for relative style pattern.
  static const RELATIVE_SHORT = 131;

  /// from: static public final java.lang.String SECOND
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with second.
  static const SECOND = "s";

  /// from: static public final int SECOND_FIELD
  ///
  /// FieldPosition selector for 's' field alignment,
  /// corresponding to the Calendar\#SECOND field.
  static const SECOND_FIELD = 7;

  /// from: static public final int SHORT
  ///
  /// Constant for short style pattern.
  static const SHORT = 3;

  /// from: static public final java.lang.String SPECIFIC_TZ
  ///
  /// <strong>[icu]</strong> Constant for <i>specific non-location format</i>, such as Pacific Daylight Time;
  /// used in combinations date + time + zone, or time + zone.
  ///@see <a href="http://unicode.org/reports/tr35/\#Date_Format_Patterns">LDML Date Format Patterns</a>
  ///@see <a href="http://unicode.org/reports/tr35/\#Time_Zone_Fallback">LDML Time Zone Fallback</a>
  static const SPECIFIC_TZ = "zzzz";

  /// from: static public final int STANDALONE_DAY_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'c' field alignment,
  /// corresponding to the Calendar\#DAY_OF_WEEK field.
  /// This displays the stand alone day name, if available.
  static const STANDALONE_DAY_FIELD = 25;

  /// from: static public final int STANDALONE_MONTH_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'L' field alignment,
  /// corresponding to the Calendar\#MONTH field.
  /// This displays the stand alone month name, if available.
  static const STANDALONE_MONTH_FIELD = 26;

  /// from: static public final int STANDALONE_QUARTER_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'q' field alignment,
  /// corresponding to the Calendar\#MONTH field.
  /// This displays the stand alone quarter, if available.
  static const STANDALONE_QUARTER_FIELD = 28;

  /// from: static public final int TIMEZONE_FIELD
  ///
  /// FieldPosition selector for 'z' field alignment,
  /// corresponding to the Calendar\#ZONE_OFFSET and
  /// Calendar\#DST_OFFSET fields.
  static const TIMEZONE_FIELD = 17;

  /// from: static public final int TIMEZONE_GENERIC_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'v' field alignment,
  /// corresponding to the Calendar\#ZONE_OFFSET and
  /// Calendar\#DST_OFFSET fields.  This displays the generic zone
  /// name, if available.
  static const TIMEZONE_GENERIC_FIELD = 24;

  /// from: static public final int TIMEZONE_ISO_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'X' field alignment,
  /// corresponding to the Calendar\#ZONE_OFFSET and
  /// Calendar\#DST_OFFSET fields.  This displays the
  /// ISO 8601 local time offset format or UTC indicator ("Z").
  static const TIMEZONE_ISO_FIELD = 32;

  /// from: static public final int TIMEZONE_ISO_LOCAL_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'x' field alignment,
  /// corresponding to the Calendar\#ZONE_OFFSET and
  /// Calendar\#DST_OFFSET fields.  This displays the
  /// ISO 8601 local time offset format.
  static const TIMEZONE_ISO_LOCAL_FIELD = 33;

  /// from: static public final int TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'O' field alignment,
  /// corresponding to the Calendar\#ZONE_OFFSET and
  /// Calendar\#DST_OFFSET fields.  This displays the
  /// localized GMT format.
  static const TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD = 31;

  /// from: static public final int TIMEZONE_RFC_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'Z' field alignment,
  /// corresponding to the Calendar\#ZONE_OFFSET and
  /// Calendar\#DST_OFFSET fields.
  static const TIMEZONE_RFC_FIELD = 23;

  /// from: static public final int TIMEZONE_SPECIAL_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'V' field alignment,
  /// corresponding to the Calendar\#ZONE_OFFSET and
  /// Calendar\#DST_OFFSET fields.  This displays the fallback timezone
  /// name when VVVV is specified, and the short standard or daylight
  /// timezone name ignoring commonlyUsed when a single V is specified.
  static const TIMEZONE_SPECIAL_FIELD = 29;

  /// from: static public final java.lang.String WEEKDAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with weekday.
  static const WEEKDAY = "EEEE";

  /// from: static public final int WEEK_OF_MONTH_FIELD
  ///
  /// FieldPosition selector for 'W' field alignment,
  /// corresponding to the Calendar\#WEEK_OF_MONTH field.
  static const WEEK_OF_MONTH_FIELD = 13;

  /// from: static public final int WEEK_OF_YEAR_FIELD
  ///
  /// FieldPosition selector for 'w' field alignment,
  /// corresponding to the Calendar\#WEEK_OF_YEAR field.
  static const WEEK_OF_YEAR_FIELD = 12;

  /// from: static public final java.lang.String YEAR
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year.
  static const YEAR = "y";

  /// from: static public final java.lang.String YEAR_ABBR_MONTH
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year and abbreviated month.
  static const YEAR_ABBR_MONTH = "yMMM";

  /// from: static public final java.lang.String YEAR_ABBR_MONTH_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year, abbreviated month, and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const YEAR_ABBR_MONTH_DAY = "yMMMd";

  /// from: static public final java.lang.String YEAR_ABBR_MONTH_WEEKDAY_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year, abbreviated month, weekday, and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const YEAR_ABBR_MONTH_WEEKDAY_DAY = "yMMMEd";

  /// from: static public final java.lang.String YEAR_ABBR_QUARTER
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year and abbreviated quarter.
  static const YEAR_ABBR_QUARTER = "yQQQ";

  /// from: static public final int YEAR_FIELD
  ///
  /// FieldPosition selector for 'y' field alignment,
  /// corresponding to the Calendar\#YEAR field.
  static const YEAR_FIELD = 1;

  /// from: static public final java.lang.String YEAR_MONTH
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year and month.
  static const YEAR_MONTH = "yMMMM";

  /// from: static public final java.lang.String YEAR_MONTH_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year, month, and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const YEAR_MONTH_DAY = "yMMMMd";

  /// from: static public final java.lang.String YEAR_MONTH_WEEKDAY_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year, month, weekday, and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const YEAR_MONTH_WEEKDAY_DAY = "yMMMMEEEEd";

  /// from: static public final int YEAR_NAME_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'U' field alignment,
  /// corresponding to the Calendar\#YEAR field.
  /// This displays the cyclic year name, if available.
  static const YEAR_NAME_FIELD = 30;

  /// from: static public final java.lang.String YEAR_NUM_MONTH
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year and numeric month.
  static const YEAR_NUM_MONTH = "yM";

  /// from: static public final java.lang.String YEAR_NUM_MONTH_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year, numeric month, and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const YEAR_NUM_MONTH_DAY = "yMd";

  /// from: static public final java.lang.String YEAR_NUM_MONTH_WEEKDAY_DAY
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year, numeric month, weekday, and day.
  /// Used in combinations date + time, date + time + zone, or time + zone.
  static const YEAR_NUM_MONTH_WEEKDAY_DAY = "yMEd";

  /// from: static public final java.lang.String YEAR_QUARTER
  ///
  /// <strong>[icu]</strong> Constant for date skeleton with year and quarter.
  static const YEAR_QUARTER = "yQQQQ";

  /// from: static public final int YEAR_WOY_FIELD
  ///
  /// <strong>[icu]</strong> FieldPosition selector for 'Y' field alignment,
  /// corresponding to the Calendar\#YEAR_WOY field.
  static const YEAR_WOY_FIELD = 18;

  static final _id_calendar = jniAccessors.getFieldIDOf(
      _classRef, "calendar", "Landroid/icu/util/Calendar;");

  /// from: protected android.icu.util.Calendar calendar
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The calendar that <code>DateFormat</code> uses to produce the time field
  /// values needed to implement date and time formatting.  Subclasses should
  /// initialize this to a calendar appropriate for the locale associated with
  /// this <code>DateFormat</code>.
  ///@serial
  calendar_.Calendar get calendar => calendar_.Calendar.fromRef(jniAccessors
      .getField(reference, _id_calendar, jni.JniType.objectType)
      .object);

  /// from: protected android.icu.util.Calendar calendar
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The calendar that <code>DateFormat</code> uses to produce the time field
  /// values needed to implement date and time formatting.  Subclasses should
  /// initialize this to a calendar appropriate for the locale associated with
  /// this <code>DateFormat</code>.
  ///@serial
  set calendar(calendar_.Calendar value) =>
      jniEnv.SetObjectField(reference, _id_calendar, value.reference);

  static final _id_numberFormat = jniAccessors.getFieldIDOf(
      _classRef, "numberFormat", "Landroid/icu/text/NumberFormat;");

  /// from: protected android.icu.text.NumberFormat numberFormat
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The number formatter that <code>DateFormat</code> uses to format numbers
  /// in dates and times.  Subclasses should initialize this to a number format
  /// appropriate for the locale associated with this <code>DateFormat</code>.
  ///@serial
  numberformat_.NumberFormat get numberFormat =>
      numberformat_.NumberFormat.fromRef(jniAccessors
          .getField(reference, _id_numberFormat, jni.JniType.objectType)
          .object);

  /// from: protected android.icu.text.NumberFormat numberFormat
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The number formatter that <code>DateFormat</code> uses to format numbers
  /// in dates and times.  Subclasses should initialize this to a number format
  /// appropriate for the locale associated with this <code>DateFormat</code>.
  ///@serial
  set numberFormat(numberformat_.NumberFormat value) =>
      jniEnv.SetObjectField(reference, _id_numberFormat, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: protected void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new date format.
  DateFormat()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_format = jniAccessors.getMethodIDOf(_classRef, "format",
      "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;");

  /// from: public final java.lang.StringBuffer format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition fieldPosition)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Formats a time object into a time string. Examples of time objects
  /// are a time value expressed in milliseconds and a Date object.
  ///@param obj must be a Number or a Date or a Calendar.
  ///@param toAppendTo the string buffer for the returning time string.
  ///@return the formatted time string.
  ///@param fieldPosition keeps track of the position of the field
  /// within the returned string.
  /// On input: an alignment field,
  /// if desired. On output: the offsets of the alignment field. For
  /// example, given a time text "1996.07.10 AD at 15:08:56 PDT",
  /// if the given fieldPosition is DateFormat.YEAR_FIELD, the
  /// begin index and end index of fieldPosition will be set to
  /// 0 and 4, respectively.
  /// Notice that if the same time field appears
  /// more than once in a pattern, the fieldPosition will be set for the first
  /// occurrence of that time field. For instance, formatting a Date to
  /// the time string "1 PM PDT (Pacific Daylight Time)" using the pattern
  /// "h a z (zzzz)" and the alignment field DateFormat.TIMEZONE_FIELD,
  /// the begin index and end index of fieldPosition will be set to
  /// 5 and 8, respectively, for the first occurrence of the timezone
  /// pattern character 'z'.
  ///@see java.text.Format
  jni.JniObject format(jni.JniObject obj, jni.JniObject toAppendTo,
          jni.JniObject fieldPosition) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_format, jni.JniType.objectType, [
        obj.reference,
        toAppendTo.reference,
        fieldPosition.reference
      ]).object);

  static final _id_format1 = jniAccessors.getMethodIDOf(_classRef, "format",
      "(Landroid/icu/util/Calendar;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;");

  /// from: public abstract java.lang.StringBuffer format(android.icu.util.Calendar cal, java.lang.StringBuffer toAppendTo, java.text.FieldPosition fieldPosition)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Formats a date into a date/time string.
  ///@param cal a Calendar set to the date and time to be formatted
  /// into a date/time string.  When the calendar type is different from
  /// the internal calendar held by this DateFormat instance, the date
  /// and the time zone will be inherited from the input calendar, but
  /// other calendar field values will be calculated by the internal calendar.
  ///@param toAppendTo the string buffer for the returning date/time string.
  ///@param fieldPosition keeps track of the position of the field
  /// within the returned string.
  /// On input: an alignment field,
  /// if desired. On output: the offsets of the alignment field. For
  /// example, given a time text "1996.07.10 AD at 15:08:56 PDT",
  /// if the given fieldPosition is DateFormat.YEAR_FIELD, the
  /// begin index and end index of fieldPosition will be set to
  /// 0 and 4, respectively.
  /// Notice that if the same time field appears
  /// more than once in a pattern, the fieldPosition will be set for the first
  /// occurrence of that time field. For instance, formatting a Date to
  /// the time string "1 PM PDT (Pacific Daylight Time)" using the pattern
  /// "h a z (zzzz)" and the alignment field DateFormat.TIMEZONE_FIELD,
  /// the begin index and end index of fieldPosition will be set to
  /// 5 and 8, respectively, for the first occurrence of the timezone
  /// pattern character 'z'.
  ///@return the formatted date/time string.
  jni.JniObject format1(calendar_.Calendar cal, jni.JniObject toAppendTo,
          jni.JniObject fieldPosition) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_format1, jni.JniType.objectType, [
        cal.reference,
        toAppendTo.reference,
        fieldPosition.reference
      ]).object);

  static final _id_format2 = jniAccessors.getMethodIDOf(_classRef, "format",
      "(Ljava/util/Date;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;");

  /// from: public java.lang.StringBuffer format(java.util.Date date, java.lang.StringBuffer toAppendTo, java.text.FieldPosition fieldPosition)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Formats a Date into a date/time string.
  ///@param date a Date to be formatted into a date/time string.
  ///@param toAppendTo the string buffer for the returning date/time string.
  ///@param fieldPosition keeps track of the position of the field
  /// within the returned string.
  /// On input: an alignment field,
  /// if desired. On output: the offsets of the alignment field. For
  /// example, given a time text "1996.07.10 AD at 15:08:56 PDT",
  /// if the given fieldPosition is DateFormat.YEAR_FIELD, the
  /// begin index and end index of fieldPosition will be set to
  /// 0 and 4, respectively.
  /// Notice that if the same time field appears
  /// more than once in a pattern, the fieldPosition will be set for the first
  /// occurrence of that time field. For instance, formatting a Date to
  /// the time string "1 PM PDT (Pacific Daylight Time)" using the pattern
  /// "h a z (zzzz)" and the alignment field DateFormat.TIMEZONE_FIELD,
  /// the begin index and end index of fieldPosition will be set to
  /// 5 and 8, respectively, for the first occurrence of the timezone
  /// pattern character 'z'.
  ///@return the formatted date/time string.
  jni.JniObject format2(jni.JniObject date, jni.JniObject toAppendTo,
          jni.JniObject fieldPosition) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_format2, jni.JniType.objectType, [
        date.reference,
        toAppendTo.reference,
        fieldPosition.reference
      ]).object);

  static final _id_format3 = jniAccessors.getMethodIDOf(
      _classRef, "format", "(Ljava/util/Date;)Ljava/lang/String;");

  /// from: public final java.lang.String format(java.util.Date date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Formats a Date into a date/time string.
  ///@param date the time value to be formatted into a time string.
  ///@return the formatted time string.
  jni.JniString format3(jni.JniObject date) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_format3, jni.JniType.objectType, [date.reference]).object);

  static final _id_parse = jniAccessors.getMethodIDOf(
      _classRef, "parse", "(Ljava/lang/String;)Ljava/util/Date;");

  /// from: public java.util.Date parse(java.lang.String text)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Parses a date/time string. For example, a time text "07/10/96 4:5 PM, PDT"
  /// will be parsed into a Date that is equivalent to Date(837039928046).
  /// Parsing begins at the beginning of the string and proceeds as far as
  /// possible.  Assuming no parse errors were encountered, this function
  /// doesn't return any information about how much of the string was consumed
  /// by the parsing.  If you need that information, use a version of
  /// parse() that takes a ParsePosition.
  ///
  ///  By default, parsing is lenient: If the input is not in the form used
  /// by this object's format method but can still be parsed as a date, then
  /// the parse succeeds.  Clients may insist on strict adherence to the
  /// format by calling setLenient(false).
  ///
  ///  Note that the normal date formats associated with some calendars - such
  /// as the Chinese lunar calendar - do not specify enough fields to enable
  /// dates to be parsed unambiguously. In the case of the Chinese lunar
  /// calendar, while the year within the current 60-year cycle is specified,
  /// the number of such cycles since the start date of the calendar (in the
  /// ERA field of the Calendar object) is not normally part of the format,
  /// and parsing may assume the wrong era. For cases such as this it is
  /// recommended that clients parse using the parse method that takes a Calendar
  /// with the Calendar passed in set to the current date, or to a date
  /// within the era/cycle that should be assumed if absent in the format.
  ///@param text The date/time string to be parsed
  ///@return A Date, or null if the input could not be parsed
  ///@exception ParseException If the given string cannot be parsed as a date.
  ///@see \#parse(String, ParsePosition)
  jni.JniObject parse(jni.JniString text) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_parse, jni.JniType.objectType, [text.reference]).object);

  static final _id_parse1 = jniAccessors.getMethodIDOf(_classRef, "parse",
      "(Ljava/lang/String;Landroid/icu/util/Calendar;Ljava/text/ParsePosition;)V");

  /// from: public abstract void parse(java.lang.String text, android.icu.util.Calendar cal, java.text.ParsePosition pos)
  ///
  /// Parses a date/time string according to the given parse position.
  /// For example, a time text "07/10/96 4:5 PM, PDT" will be parsed
  /// into a Calendar that is equivalent to Date(837039928046). Before
  /// calling this method the caller should initialize the calendar
  /// in one of two ways (unless existing field information is to be kept):
  /// (1) clear the calendar, or (2) set the calendar to the current date
  /// (or to any date whose fields should be used to supply values that
  /// are missing in the parsed date). For example, Chinese calendar dates
  /// do not normally provide an era/cycle; in this case the calendar that
  /// is passed in should be set to a date within the era that should be
  /// assumed, normally the current era.
  ///
  ///  By default, parsing is lenient: If the input is not in the form used
  /// by this object's format method but can still be parsed as a date, then
  /// the parse succeeds.  Clients may insist on strict adherence to the
  /// format by calling setLenient(false).
  ///@see \#setLenient(boolean)
  ///@param text The date/time string to be parsed
  ///@param cal The calendar set on input to the date and time to be used
  ///              for missing values in the date/time string being parsed,
  ///              and set on output to the parsed date/time. In general, this
  ///              should be initialized before calling this method - either
  ///              cleared or set to the current date, depending on desired
  ///              behavior. If this parse fails, the calendar may still
  ///              have been modified. When the calendar type is different
  ///              from the internal calendar held by this DateFormat
  ///              instance, calendar field values will be parsed based
  ///              on the internal calendar initialized with the time and
  ///              the time zone taken from this calendar, then the
  ///              parse result (time in milliseconds and time zone) will
  ///              be set back to this calendar.
  ///@param pos On input, the position at which to start parsing; on
  ///              output, the position at which parsing terminated, or the
  ///              start position if the parse failed.
  void parse1(jni.JniString text, calendar_.Calendar cal, jni.JniObject pos) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_parse1,
          jni.JniType.voidType,
          [text.reference, cal.reference, pos.reference]).check();

  static final _id_parse2 = jniAccessors.getMethodIDOf(_classRef, "parse",
      "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/util/Date;");

  /// from: public java.util.Date parse(java.lang.String text, java.text.ParsePosition pos)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Parses a date/time string according to the given parse position.  For
  /// example, a time text "07/10/96 4:5 PM, PDT" will be parsed into a Date
  /// that is equivalent to Date(837039928046).
  ///
  ///  By default, parsing is lenient: If the input is not in the form used
  /// by this object's format method but can still be parsed as a date, then
  /// the parse succeeds.  Clients may insist on strict adherence to the
  /// format by calling setLenient(false).
  ///
  ///  Note that the normal date formats associated with some calendars - such
  /// as the Chinese lunar calendar - do not specify enough fields to enable
  /// dates to be parsed unambiguously. In the case of the Chinese lunar
  /// calendar, while the year within the current 60-year cycle is specified,
  /// the number of such cycles since the start date of the calendar (in the
  /// ERA field of the Calendar object) is not normally part of the format,
  /// and parsing may assume the wrong era. For cases such as this it is
  /// recommended that clients parse using the parse method that takes a Calendar
  /// with the Calendar passed in set to the current date, or to a date
  /// within the era/cycle that should be assumed if absent in the format.
  ///@see \#setLenient(boolean)
  ///@param text The date/time string to be parsed
  ///@param pos On input, the position at which to start parsing; on
  ///              output, the position at which parsing terminated, or the
  ///              start position if the parse failed.
  ///@return A Date, or null if the input could not be parsed
  jni.JniObject parse2(jni.JniString text, jni.JniObject pos) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_parse2,
          jni.JniType.objectType,
          [text.reference, pos.reference]).object);

  static final _id_parseObject = jniAccessors.getMethodIDOf(
      _classRef,
      "parseObject",
      "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;");

  /// from: public java.lang.Object parseObject(java.lang.String source, java.text.ParsePosition pos)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Parses a date/time string into an Object.  This convenience method simply
  /// calls parse(String, ParsePosition).
  ///@see \#parse(String, ParsePosition)
  jni.JniObject parseObject(jni.JniString source, jni.JniObject pos) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_parseObject,
          jni.JniType.objectType,
          [source.reference, pos.reference]).object);

  static final _id_getTimeInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getTimeInstance", "()Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getTimeInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the time formatter with the default formatting style
  /// for the default <code>FORMAT</code> locale.
  ///@return a time formatter.
  ///@see Category\#FORMAT
  static DateFormat getTimeInstance() =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getTimeInstance, jni.JniType.objectType, []).object);

  static final _id_getTimeInstance1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getTimeInstance", "(I)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getTimeInstance(int style)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the time formatter with the given formatting style
  /// for the default <code>FORMAT</code> locale.
  ///@param style the given formatting style. For example,
  /// SHORT for "h:mm a" in the US locale. Relative time styles are not currently
  /// supported, and behave just like the corresponding non-relative style.
  ///@return a time formatter.
  ///@see Category\#FORMAT
  static DateFormat getTimeInstance1(int style) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getTimeInstance1, jni.JniType.objectType, [style]).object);

  static final _id_getTimeInstance2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getTimeInstance",
      "(ILjava/util/Locale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getTimeInstance(int style, java.util.Locale aLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the time formatter with the given formatting style
  /// for the given locale.
  ///@param style the given formatting style. For example,
  /// SHORT for "h:mm a" in the US locale. Relative time styles are not currently
  /// supported, and behave just like the corresponding non-relative style.
  ///@param aLocale the given locale.
  ///@return a time formatter.
  static DateFormat getTimeInstance2(int style, jni.JniObject aLocale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getTimeInstance2,
          jni.JniType.objectType,
          [style, aLocale.reference]).object);

  static final _id_getTimeInstance3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getTimeInstance",
      "(ILandroid/icu/util/ULocale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getTimeInstance(int style, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the time formatter with the given formatting style
  /// for the given locale.
  ///@param style the given formatting style. For example,
  /// SHORT for "h:mm a" in the US locale. Relative time styles are not currently
  /// supported, and behave just like the corresponding non-relative style.
  ///@param locale the given ulocale.
  ///@return a time formatter.
  static DateFormat getTimeInstance3(int style, ulocale_.ULocale locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getTimeInstance3,
          jni.JniType.objectType,
          [style, locale.reference]).object);

  static final _id_getDateInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getDateInstance", "()Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the date formatter with the default formatting style
  /// for the default <code>FORMAT</code> locale.
  ///@return a date formatter.
  ///@see Category\#FORMAT
  static DateFormat getDateInstance() =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getDateInstance, jni.JniType.objectType, []).object);

  static final _id_getDateInstance1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getDateInstance", "(I)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateInstance(int style)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the date formatter with the given formatting style
  /// for the default <code>FORMAT</code> locale.
  ///@param style the given formatting style. For example,
  /// SHORT for "M/d/yy" in the US locale. As currently implemented, relative date
  /// formatting only affects a limited range of calendar days before or after the
  /// current date, based on the CLDR &lt;field type="day"&gt;/&lt;relative&gt; data: For example,
  /// in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative
  /// dates are formatted using the corresponding non-relative style.
  ///@return a date formatter.
  ///@see Category\#FORMAT
  static DateFormat getDateInstance1(int style) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getDateInstance1, jni.JniType.objectType, [style]).object);

  static final _id_getDateInstance2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDateInstance",
      "(ILjava/util/Locale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateInstance(int style, java.util.Locale aLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the date formatter with the given formatting style
  /// for the given locale.
  ///@param style the given formatting style. For example,
  /// SHORT for "M/d/yy" in the US locale. As currently implemented, relative date
  /// formatting only affects a limited range of calendar days before or after the
  /// current date, based on the CLDR &lt;field type="day"&gt;/&lt;relative&gt; data: For example,
  /// in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative
  /// dates are formatted using the corresponding non-relative style.
  ///@param aLocale the given locale.
  ///@return a date formatter.
  static DateFormat getDateInstance2(int style, jni.JniObject aLocale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateInstance2,
          jni.JniType.objectType,
          [style, aLocale.reference]).object);

  static final _id_getDateInstance3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDateInstance",
      "(ILandroid/icu/util/ULocale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateInstance(int style, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the date formatter with the given formatting style
  /// for the given locale.
  ///@param style the given formatting style. For example,
  /// SHORT for "M/d/yy" in the US locale. As currently implemented, relative date
  /// formatting only affects a limited range of calendar days before or after the
  /// current date, based on the CLDR &lt;field type="day"&gt;/&lt;relative&gt; data: For example,
  /// in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative
  /// dates are formatted using the corresponding non-relative style.
  ///@param locale the given ulocale.
  ///@return a date formatter.
  static DateFormat getDateInstance3(int style, ulocale_.ULocale locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateInstance3,
          jni.JniType.objectType,
          [style, locale.reference]).object);

  static final _id_getDateTimeInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getDateTimeInstance", "()Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateTimeInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the date/time formatter with the default formatting style
  /// for the default <code>FORMAT</code> locale.
  ///@return a date/time formatter.
  ///@see Category\#FORMAT
  static DateFormat getDateTimeInstance() =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getDateTimeInstance, jni.JniType.objectType, []).object);

  static final _id_getDateTimeInstance1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getDateTimeInstance", "(II)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateTimeInstance(int dateStyle, int timeStyle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the date/time formatter with the given date and time
  /// formatting styles for the default <code>FORMAT</code> locale.
  ///@param dateStyle the given date formatting style. For example,
  /// SHORT for "M/d/yy" in the US locale. As currently implemented, relative date
  /// formatting only affects a limited range of calendar days before or after the
  /// current date, based on the CLDR &lt;field type="day"&gt;/&lt;relative&gt; data: For example,
  /// in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative
  /// dates are formatted using the corresponding non-relative style.
  ///@param timeStyle the given time formatting style. For example,
  /// SHORT for "h:mm a" in the US locale. Relative time styles are not currently
  /// supported, and behave just like the corresponding non-relative style.
  ///@return a date/time formatter.
  ///@see Category\#FORMAT
  static DateFormat getDateTimeInstance1(int dateStyle, int timeStyle) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateTimeInstance1,
          jni.JniType.objectType,
          [dateStyle, timeStyle]).object);

  static final _id_getDateTimeInstance2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDateTimeInstance",
      "(IILjava/util/Locale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale aLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the date/time formatter with the given formatting styles
  /// for the given locale.
  ///@param dateStyle the given date formatting style. As currently implemented, relative date
  /// formatting only affects a limited range of calendar days before or after the
  /// current date, based on the CLDR &lt;field type="day"&gt;/&lt;relative&gt; data: For example,
  /// in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative
  /// dates are formatted using the corresponding non-relative style.
  ///@param timeStyle the given time formatting style. Relative time styles are not
  /// currently supported, and behave just like the corresponding non-relative style.
  ///@param aLocale the given locale.
  ///@return a date/time formatter.
  static DateFormat getDateTimeInstance2(
          int dateStyle, int timeStyle, jni.JniObject aLocale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateTimeInstance2,
          jni.JniType.objectType,
          [dateStyle, timeStyle, aLocale.reference]).object);

  static final _id_getDateTimeInstance3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDateTimeInstance",
      "(IILandroid/icu/util/ULocale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateTimeInstance(int dateStyle, int timeStyle, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the date/time formatter with the given formatting styles
  /// for the given locale.
  ///@param dateStyle the given date formatting style. As currently implemented, relative date
  /// formatting only affects a limited range of calendar days before or after the
  /// current date, based on the CLDR &lt;field type="day"&gt;/&lt;relative&gt; data: For example,
  /// in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative
  /// dates are formatted using the corresponding non-relative style.
  ///@param timeStyle the given time formatting style. Relative time styles are not
  /// currently supported, and behave just like the corresponding non-relative style.
  ///@param locale the given ulocale.
  ///@return a date/time formatter.
  static DateFormat getDateTimeInstance3(
          int dateStyle, int timeStyle, ulocale_.ULocale locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateTimeInstance3,
          jni.JniType.objectType,
          [dateStyle, timeStyle, locale.reference]).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(
      _classRef, "getInstance", "()Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a default date/time formatter that uses the SHORT style for both the
  /// date and the time.
  static DateFormat getInstance() =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getInstance, jni.JniType.objectType, []).object);

  static final _id_getAvailableLocales = jniAccessors.getStaticMethodIDOf(
      _classRef, "getAvailableLocales", "()[Ljava/util/Locale;");

  /// from: static public java.util.Locale[] getAvailableLocales()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the set of locales for which DateFormats are installed.
  ///@return the set of locales for which DateFormats are installed.
  static jni.JniObject getAvailableLocales() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getAvailableLocales, jni.JniType.objectType, []).object);

  static final _id_setCalendar = jniAccessors.getMethodIDOf(
      _classRef, "setCalendar", "(Landroid/icu/util/Calendar;)V");

  /// from: public void setCalendar(android.icu.util.Calendar newCalendar)
  ///
  /// Sets the calendar to be used by this date format.  Initially, the default
  /// calendar for the specified or default locale is used.
  ///@param newCalendar the new Calendar to be used by the date format
  void setCalendar(calendar_.Calendar newCalendar) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCalendar,
          jni.JniType.voidType, [newCalendar.reference]).check();

  static final _id_getCalendar = jniAccessors.getMethodIDOf(
      _classRef, "getCalendar", "()Landroid/icu/util/Calendar;");

  /// from: public android.icu.util.Calendar getCalendar()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the calendar associated with this date/time formatter.
  ///@return the calendar associated with this date/time formatter.
  calendar_.Calendar getCalendar() =>
      calendar_.Calendar.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCalendar, jni.JniType.objectType, []).object);

  static final _id_setNumberFormat = jniAccessors.getMethodIDOf(
      _classRef, "setNumberFormat", "(Landroid/icu/text/NumberFormat;)V");

  /// from: public void setNumberFormat(android.icu.text.NumberFormat newNumberFormat)
  ///
  /// Sets the number formatter.
  ///@param newNumberFormat the given new NumberFormat.
  void setNumberFormat(numberformat_.NumberFormat newNumberFormat) =>
      jniAccessors.callMethodWithArgs(reference, _id_setNumberFormat,
          jni.JniType.voidType, [newNumberFormat.reference]).check();

  static final _id_getNumberFormat = jniAccessors.getMethodIDOf(
      _classRef, "getNumberFormat", "()Landroid/icu/text/NumberFormat;");

  /// from: public android.icu.text.NumberFormat getNumberFormat()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the number formatter which this date/time formatter uses to
  /// format and parse a time.
  ///@return the number formatter which this date/time formatter uses.
  numberformat_.NumberFormat getNumberFormat() =>
      numberformat_.NumberFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getNumberFormat, jni.JniType.objectType, []).object);

  static final _id_setTimeZone = jniAccessors.getMethodIDOf(
      _classRef, "setTimeZone", "(Landroid/icu/util/TimeZone;)V");

  /// from: public void setTimeZone(android.icu.util.TimeZone zone)
  ///
  /// Sets the time zone for the calendar of this DateFormat object.
  ///@param zone the given new time zone.
  void setTimeZone(timezone_.TimeZone zone) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setTimeZone,
      jni.JniType.voidType,
      [zone.reference]).check();

  static final _id_getTimeZone = jniAccessors.getMethodIDOf(
      _classRef, "getTimeZone", "()Landroid/icu/util/TimeZone;");

  /// from: public android.icu.util.TimeZone getTimeZone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the time zone.
  ///@return the time zone associated with the calendar of DateFormat.
  timezone_.TimeZone getTimeZone() =>
      timezone_.TimeZone.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTimeZone, jni.JniType.objectType, []).object);

  static final _id_setLenient =
      jniAccessors.getMethodIDOf(_classRef, "setLenient", "(Z)V");

  /// from: public void setLenient(boolean lenient)
  ///
  /// Specifies whether date/time parsing is to be lenient.  With
  /// lenient parsing, the parser may use heuristics to interpret inputs that
  /// do not precisely match this object's format.  Without lenient parsing,
  /// inputs must match this object's format more closely.
  /// <br><br>
  /// __Note:__ ICU 53 introduced finer grained control of leniency (and added
  /// new control points) making the preferred method a combination of
  /// setCalendarLenient() &amp; setBooleanAttribute() calls.
  /// This method supports prior functionality but may not support all
  /// future leniency control &amp; behavior of DateFormat. For control of pre 53 leniency,
  /// Calendar and DateFormat whitespace &amp; numeric tolerance, this method is safe to
  /// use. However, mixing leniency control via this method and modification of the
  /// newer attributes via setBooleanAttribute() may produce undesirable
  /// results.
  ///@param lenient True specifies date/time interpretation to be lenient.
  ///@see android.icu.util.Calendar\#setLenient
  ///@see \#setBooleanAttribute(BooleanAttribute, boolean)
  ///@see \#setCalendarLenient(boolean)
  void setLenient(bool lenient) => jniAccessors.callMethodWithArgs(
      reference, _id_setLenient, jni.JniType.voidType, [lenient]).check();

  static final _id_isLenient =
      jniAccessors.getMethodIDOf(_classRef, "isLenient", "()Z");

  /// from: public boolean isLenient()
  ///
  /// Returns whether both date/time parsing in the encapsulated Calendar object and DateFormat whitespace &amp;
  /// numeric processing is lenient.
  bool isLenient() => jniAccessors.callMethodWithArgs(
      reference, _id_isLenient, jni.JniType.booleanType, []).boolean;

  static final _id_setCalendarLenient =
      jniAccessors.getMethodIDOf(_classRef, "setCalendarLenient", "(Z)V");

  /// from: public void setCalendarLenient(boolean lenient)
  ///
  /// Specifies whether date/time parsing in the encapsulated Calendar object should be lenient.
  /// With lenient parsing, the parser may use heuristics to interpret inputs that
  /// do not precisely match this object's format.  Without lenient parsing,
  /// inputs must match this object's format more closely.
  ///@param lenient when true, Calendar parsing is lenient
  ///@see android.icu.util.Calendar\#setLenient
  void setCalendarLenient(bool lenient) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCalendarLenient,
      jni.JniType.voidType,
      [lenient]).check();

  static final _id_isCalendarLenient =
      jniAccessors.getMethodIDOf(_classRef, "isCalendarLenient", "()Z");

  /// from: public boolean isCalendarLenient()
  ///
  /// Returns whether date/time parsing in the encapsulated Calendar object is lenient.
  bool isCalendarLenient() => jniAccessors.callMethodWithArgs(
      reference, _id_isCalendarLenient, jni.JniType.booleanType, []).boolean;

  static final _id_setBooleanAttribute = jniAccessors.getMethodIDOf(
      _classRef,
      "setBooleanAttribute",
      "(Landroid/icu/text/DateFormat\$BooleanAttribute;Z)Landroid/icu/text/DateFormat;");

  /// from: public android.icu.text.DateFormat setBooleanAttribute(android.icu.text.DateFormat.BooleanAttribute key, boolean value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a boolean attribute for this instance. Aspects of DateFormat leniency are controlled by
  /// boolean attributes.
  ///@see BooleanAttribute
  DateFormat setBooleanAttribute(DateFormat_BooleanAttribute key, bool value) =>
      DateFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setBooleanAttribute,
          jni.JniType.objectType,
          [key.reference, value]).object);

  static final _id_getBooleanAttribute = jniAccessors.getMethodIDOf(
      _classRef,
      "getBooleanAttribute",
      "(Landroid/icu/text/DateFormat\$BooleanAttribute;)Z");

  /// from: public boolean getBooleanAttribute(android.icu.text.DateFormat.BooleanAttribute key)
  ///
  /// Returns the current value for the specified BooleanAttribute for this instance
  ///
  /// if attribute is missing false is returned.
  ///@see BooleanAttribute
  bool getBooleanAttribute(DateFormat_BooleanAttribute key) =>
      jniAccessors.callMethodWithArgs(reference, _id_getBooleanAttribute,
          jni.JniType.booleanType, [key.reference]).boolean;

  static final _id_setContext = jniAccessors.getMethodIDOf(
      _classRef, "setContext", "(Landroid/icu/text/DisplayContext;)V");

  /// from: public void setContext(android.icu.text.DisplayContext context)
  ///
  /// <strong>[icu]</strong> Set a particular DisplayContext value in the formatter,
  /// such as CAPITALIZATION_FOR_STANDALONE.
  ///@param context The DisplayContext value to set.
  void setContext(displaycontext_.DisplayContext context) =>
      jniAccessors.callMethodWithArgs(reference, _id_setContext,
          jni.JniType.voidType, [context.reference]).check();

  static final _id_getContext = jniAccessors.getMethodIDOf(
      _classRef,
      "getContext",
      "(Landroid/icu/text/DisplayContext\$Type;)Landroid/icu/text/DisplayContext;");

  /// from: public android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext.Type type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Get the formatter's DisplayContext value for the specified DisplayContext.Type,
  /// such as CAPITALIZATION.
  ///@param type the DisplayContext.Type whose value to return
  ///@return the current DisplayContext setting for the specified type
  displaycontext_.DisplayContext getContext(
          displaycontext_.DisplayContext_Type type) =>
      displaycontext_.DisplayContext.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getContext,
          jni.JniType.objectType,
          [type.reference]).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// Overrides hashCode.
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  ///
  /// Overrides equals.
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, "clone", "()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Overrides clone.
  jni.JniObject clone() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_getDateInstance4 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDateInstance",
      "(Landroid/icu/util/Calendar;ILjava/util/Locale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateInstance(android.icu.util.Calendar cal, int dateStyle, java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DateFormat object that can be used to format dates in
  /// the calendar system specified by <code>cal</code>.
  ///
  ///@param cal The calendar system for which a date format is desired.
  ///@param dateStyle The type of date format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  ///@param locale The locale for which the date format is desired.
  static DateFormat getDateInstance4(
          calendar_.Calendar cal, int dateStyle, jni.JniObject locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateInstance4,
          jni.JniType.objectType,
          [cal.reference, dateStyle, locale.reference]).object);

  static final _id_getDateInstance5 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDateInstance",
      "(Landroid/icu/util/Calendar;ILandroid/icu/util/ULocale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateInstance(android.icu.util.Calendar cal, int dateStyle, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DateFormat object that can be used to format dates in
  /// the calendar system specified by <code>cal</code>.
  ///
  ///@param cal The calendar system for which a date format is desired.
  ///@param dateStyle The type of date format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  ///@param locale The locale for which the date format is desired.
  static DateFormat getDateInstance5(
          calendar_.Calendar cal, int dateStyle, ulocale_.ULocale locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateInstance5,
          jni.JniType.objectType,
          [cal.reference, dateStyle, locale.reference]).object);

  static final _id_getTimeInstance4 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getTimeInstance",
      "(Landroid/icu/util/Calendar;ILjava/util/Locale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getTimeInstance(android.icu.util.Calendar cal, int timeStyle, java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DateFormat object that can be used to format times in
  /// the calendar system specified by <code>cal</code>.
  ///@param cal The calendar system for which a time format is desired.
  ///@param timeStyle The type of time format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  ///@param locale The locale for which the time format is desired.
  ///@see DateFormat\#getTimeInstance
  static DateFormat getTimeInstance4(
          calendar_.Calendar cal, int timeStyle, jni.JniObject locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getTimeInstance4,
          jni.JniType.objectType,
          [cal.reference, timeStyle, locale.reference]).object);

  static final _id_getTimeInstance5 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getTimeInstance",
      "(Landroid/icu/util/Calendar;ILandroid/icu/util/ULocale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getTimeInstance(android.icu.util.Calendar cal, int timeStyle, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DateFormat object that can be used to format times in
  /// the calendar system specified by <code>cal</code>.
  ///@param cal The calendar system for which a time format is desired.
  ///@param timeStyle The type of time format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  ///@param locale The locale for which the time format is desired.
  ///@see DateFormat\#getTimeInstance
  static DateFormat getTimeInstance5(
          calendar_.Calendar cal, int timeStyle, ulocale_.ULocale locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getTimeInstance5,
          jni.JniType.objectType,
          [cal.reference, timeStyle, locale.reference]).object);

  static final _id_getDateTimeInstance4 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDateTimeInstance",
      "(Landroid/icu/util/Calendar;IILjava/util/Locale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateTimeInstance(android.icu.util.Calendar cal, int dateStyle, int timeStyle, java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DateFormat object that can be used to format dates and times in
  /// the calendar system specified by <code>cal</code>.
  ///@param cal The calendar system for which a date/time format is desired.
  ///@param dateStyle The type of date format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  ///@param timeStyle The type of time format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  ///@param locale The locale for which the date/time format is desired.
  ///@see DateFormat\#getDateTimeInstance
  static DateFormat getDateTimeInstance4(calendar_.Calendar cal, int dateStyle,
          int timeStyle, jni.JniObject locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateTimeInstance4,
          jni.JniType.objectType,
          [cal.reference, dateStyle, timeStyle, locale.reference]).object);

  static final _id_getDateTimeInstance5 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDateTimeInstance",
      "(Landroid/icu/util/Calendar;IILandroid/icu/util/ULocale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateTimeInstance(android.icu.util.Calendar cal, int dateStyle, int timeStyle, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DateFormat object that can be used to format dates and times in
  /// the calendar system specified by <code>cal</code>.
  ///@param cal The calendar system for which a date/time format is desired.
  ///@param dateStyle The type of date format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  ///@param timeStyle The type of time format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  ///@param locale The locale for which the date/time format is desired.
  ///@see DateFormat\#getDateTimeInstance
  static DateFormat getDateTimeInstance5(calendar_.Calendar cal, int dateStyle,
          int timeStyle, ulocale_.ULocale locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateTimeInstance5,
          jni.JniType.objectType,
          [cal.reference, dateStyle, timeStyle, locale.reference]).object);

  static final _id_getInstance1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Landroid/icu/util/Calendar;Ljava/util/Locale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getInstance(android.icu.util.Calendar cal, java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a date/time formatter that uses the SHORT style
  /// for both the date and the time.
  ///@param cal The calendar system for which a date/time format is desired.
  ///@param locale The locale for which the date/time format is desired.
  static DateFormat getInstance1(
          calendar_.Calendar cal, jni.JniObject locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance1,
          jni.JniType.objectType,
          [cal.reference, locale.reference]).object);

  static final _id_getInstance2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstance",
      "(Landroid/icu/util/Calendar;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getInstance(android.icu.util.Calendar cal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a default date/time formatter that uses the SHORT style for both the
  /// date and the time.
  ///@param cal The calendar system for which a date/time format is desired.
  static DateFormat getInstance2(calendar_.Calendar cal) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getInstance2, jni.JniType.objectType, [cal.reference]).object);

  static final _id_getDateInstance6 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDateInstance",
      "(Landroid/icu/util/Calendar;I)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateInstance(android.icu.util.Calendar cal, int dateStyle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DateFormat object for the default locale that can be used
  /// to format dates in the calendar system specified by <code>cal</code>.
  ///
  ///@param cal The calendar system for which a date format is desired.
  ///@param dateStyle The type of date format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  static DateFormat getDateInstance6(calendar_.Calendar cal, int dateStyle) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateInstance6,
          jni.JniType.objectType,
          [cal.reference, dateStyle]).object);

  static final _id_getTimeInstance6 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getTimeInstance",
      "(Landroid/icu/util/Calendar;I)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getTimeInstance(android.icu.util.Calendar cal, int timeStyle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DateFormat object that can be used to format times in
  /// the calendar system specified by <code>cal</code>.
  ///@param cal The calendar system for which a time format is desired.
  ///@param timeStyle The type of time format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  ///@see DateFormat\#getTimeInstance
  static DateFormat getTimeInstance6(calendar_.Calendar cal, int timeStyle) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getTimeInstance6,
          jni.JniType.objectType,
          [cal.reference, timeStyle]).object);

  static final _id_getDateTimeInstance6 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDateTimeInstance",
      "(Landroid/icu/util/Calendar;II)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getDateTimeInstance(android.icu.util.Calendar cal, int dateStyle, int timeStyle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a DateFormat object for the default locale that can be used to format
  /// dates and times in the calendar system specified by <code>cal</code>.
  ///@param cal The calendar system for which a date/time format is desired.
  ///@param dateStyle The type of date format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  ///@param timeStyle The type of time format desired.  This can be
  ///              DateFormat\#SHORT, DateFormat\#MEDIUM,
  ///              etc.
  ///@see DateFormat\#getDateTimeInstance
  static DateFormat getDateTimeInstance6(
          calendar_.Calendar cal, int dateStyle, int timeStyle) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDateTimeInstance6,
          jni.JniType.objectType,
          [cal.reference, dateStyle, timeStyle]).object);

  static final _id_getInstanceForSkeleton = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstanceForSkeleton",
      "(Ljava/lang/String;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getInstanceForSkeleton(java.lang.String skeleton)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a DateFormat object that can be used to format dates and times in
  /// the default locale.
  ///@param skeleton The skeleton that selects the fields to be formatted. (Uses the
  ///              DateTimePatternGenerator.) This can be DateFormat\#ABBR_MONTH,
  ///              DateFormat\#MONTH_WEEKDAY_DAY, etc.
  static DateFormat getInstanceForSkeleton(jni.JniString skeleton) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstanceForSkeleton,
          jni.JniType.objectType,
          [skeleton.reference]).object);

  static final _id_getInstanceForSkeleton1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstanceForSkeleton",
      "(Ljava/lang/String;Ljava/util/Locale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getInstanceForSkeleton(java.lang.String skeleton, java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a DateFormat object that can be used to format dates and times in
  /// the given locale.
  ///@param skeleton The skeleton that selects the fields to be formatted. (Uses the
  ///              DateTimePatternGenerator.) This can be DateFormat\#ABBR_MONTH,
  ///              DateFormat\#MONTH_WEEKDAY_DAY, etc.
  ///@param locale The locale for which the date/time format is desired.
  static DateFormat getInstanceForSkeleton1(
          jni.JniString skeleton, jni.JniObject locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstanceForSkeleton1,
          jni.JniType.objectType,
          [skeleton.reference, locale.reference]).object);

  static final _id_getInstanceForSkeleton2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstanceForSkeleton",
      "(Ljava/lang/String;Landroid/icu/util/ULocale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getInstanceForSkeleton(java.lang.String skeleton, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a DateFormat object that can be used to format dates and times in
  /// the given locale.
  ///@param skeleton The skeleton that selects the fields to be formatted. (Uses the
  ///              DateTimePatternGenerator.) This can be DateFormat\#ABBR_MONTH,
  ///              DateFormat\#MONTH_WEEKDAY_DAY, etc.
  ///@param locale The locale for which the date/time format is desired.
  static DateFormat getInstanceForSkeleton2(
          jni.JniString skeleton, ulocale_.ULocale locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstanceForSkeleton2,
          jni.JniType.objectType,
          [skeleton.reference, locale.reference]).object);

  static final _id_getInstanceForSkeleton3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstanceForSkeleton",
      "(Landroid/icu/util/Calendar;Ljava/lang/String;Ljava/util/Locale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getInstanceForSkeleton(android.icu.util.Calendar cal, java.lang.String skeleton, java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Creates a DateFormat object that can be used to format dates and
  /// times in the calendar system specified by <code>cal</code>.
  ///@param cal The calendar system for which a date/time format is desired.
  ///@param skeleton The skeleton that selects the fields to be formatted. (Uses the
  ///              DateTimePatternGenerator.)  This can be
  ///              DateFormat\#ABBR_MONTH, DateFormat\#MONTH_WEEKDAY_DAY,
  ///              etc.
  ///@param locale The locale for which the date/time format is desired.
  static DateFormat getInstanceForSkeleton3(calendar_.Calendar cal,
          jni.JniString skeleton, jni.JniObject locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstanceForSkeleton3,
          jni.JniType.objectType,
          [cal.reference, skeleton.reference, locale.reference]).object);

  static final _id_getInstanceForSkeleton4 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getInstanceForSkeleton",
      "(Landroid/icu/util/Calendar;Ljava/lang/String;Landroid/icu/util/ULocale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getInstanceForSkeleton(android.icu.util.Calendar cal, java.lang.String skeleton, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Creates a DateFormat object that can be used to format dates and
  /// times in the calendar system specified by <code>cal</code>.
  ///@param cal The calendar system for which a date/time format is desired.
  ///@param skeleton The skeleton that selects the fields to be formatted. (Uses the
  ///              DateTimePatternGenerator.)  This can be
  ///              DateFormat\#ABBR_MONTH, DateFormat\#MONTH_WEEKDAY_DAY,
  ///              etc.
  ///@param locale The locale for which the date/time format is desired.
  static DateFormat getInstanceForSkeleton4(calendar_.Calendar cal,
          jni.JniString skeleton, ulocale_.ULocale locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstanceForSkeleton4,
          jni.JniType.objectType,
          [cal.reference, skeleton.reference, locale.reference]).object);

  static final _id_getPatternInstance = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getPatternInstance",
      "(Ljava/lang/String;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getPatternInstance(java.lang.String skeleton)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a DateFormat object that can be used to format dates and times in
  /// the default locale.
  /// The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.
  ///@param skeleton The skeleton that selects the fields to be formatted. (Uses the
  ///              DateTimePatternGenerator.) This can be DateFormat\#ABBR_MONTH,
  ///              DateFormat\#MONTH_WEEKDAY_DAY, etc.
  static DateFormat getPatternInstance(jni.JniString skeleton) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getPatternInstance,
          jni.JniType.objectType,
          [skeleton.reference]).object);

  static final _id_getPatternInstance1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getPatternInstance",
      "(Ljava/lang/String;Ljava/util/Locale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getPatternInstance(java.lang.String skeleton, java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a DateFormat object that can be used to format dates and times in
  /// the given locale.
  /// The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.
  ///@param skeleton The skeleton that selects the fields to be formatted. (Uses the
  ///              DateTimePatternGenerator.) This can be DateFormat\#ABBR_MONTH,
  ///              DateFormat\#MONTH_WEEKDAY_DAY, etc.
  ///@param locale The locale for which the date/time format is desired.
  static DateFormat getPatternInstance1(
          jni.JniString skeleton, jni.JniObject locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getPatternInstance1,
          jni.JniType.objectType,
          [skeleton.reference, locale.reference]).object);

  static final _id_getPatternInstance2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getPatternInstance",
      "(Ljava/lang/String;Landroid/icu/util/ULocale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getPatternInstance(java.lang.String skeleton, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a DateFormat object that can be used to format dates and times in
  /// the given locale.
  /// The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.
  ///@param skeleton The skeleton that selects the fields to be formatted. (Uses the
  ///              DateTimePatternGenerator.) This can be DateFormat\#ABBR_MONTH,
  ///              DateFormat\#MONTH_WEEKDAY_DAY, etc.
  ///@param locale The locale for which the date/time format is desired.
  static DateFormat getPatternInstance2(
          jni.JniString skeleton, ulocale_.ULocale locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getPatternInstance2,
          jni.JniType.objectType,
          [skeleton.reference, locale.reference]).object);

  static final _id_getPatternInstance3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getPatternInstance",
      "(Landroid/icu/util/Calendar;Ljava/lang/String;Ljava/util/Locale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getPatternInstance(android.icu.util.Calendar cal, java.lang.String skeleton, java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Creates a DateFormat object that can be used to format dates and
  /// times in the calendar system specified by <code>cal</code>.
  /// The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.
  ///@param cal The calendar system for which a date/time format is desired.
  ///@param skeleton The skeleton that selects the fields to be formatted. (Uses the
  ///              DateTimePatternGenerator.)  This can be
  ///              DateFormat\#ABBR_MONTH, DateFormat\#MONTH_WEEKDAY_DAY,
  ///              etc.
  ///@param locale The locale for which the date/time format is desired.
  static DateFormat getPatternInstance3(calendar_.Calendar cal,
          jni.JniString skeleton, jni.JniObject locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getPatternInstance3,
          jni.JniType.objectType,
          [cal.reference, skeleton.reference, locale.reference]).object);

  static final _id_getPatternInstance4 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getPatternInstance",
      "(Landroid/icu/util/Calendar;Ljava/lang/String;Landroid/icu/util/ULocale;)Landroid/icu/text/DateFormat;");

  /// from: static public final android.icu.text.DateFormat getPatternInstance(android.icu.util.Calendar cal, java.lang.String skeleton, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Creates a DateFormat object that can be used to format dates and
  /// times in the calendar system specified by <code>cal</code>.
  /// The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.
  ///@param cal The calendar system for which a date/time format is desired.
  ///@param skeleton The skeleton that selects the fields to be formatted. (Uses the
  ///              DateTimePatternGenerator.)  This can be
  ///              DateFormat\#ABBR_MONTH, DateFormat\#MONTH_WEEKDAY_DAY,
  ///              etc.
  ///@param locale The locale for which the date/time format is desired.
  static DateFormat getPatternInstance4(calendar_.Calendar cal,
          jni.JniString skeleton, ulocale_.ULocale locale) =>
      DateFormat.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getPatternInstance4,
          jni.JniType.objectType,
          [cal.reference, skeleton.reference, locale.reference]).object);
}

/// from: android.icu.text.DateFormat$Field
///
/// The instances of this inner class are used as attribute keys and values
/// in AttributedCharacterIterator that
/// DateFormat.formatToCharacterIterator() method returns.
///
/// There is no public constructor to this class, the only instances are the
/// constants defined here.
///
class DateFormat_Field extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/DateFormat\$Field");
  DateFormat_Field.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_AM_PM = jniAccessors.getStaticFieldIDOf(
      _classRef, "AM_PM", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field AM_PM
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the time of day indicator(am/pm).
  static DateFormat_Field get AM_PM => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_AM_PM, jni.JniType.objectType)
      .object);

  static final _id_AM_PM_MIDNIGHT_NOON = jniAccessors.getStaticFieldIDOf(
      _classRef, "AM_PM_MIDNIGHT_NOON", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field AM_PM_MIDNIGHT_NOON
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Constant identifying the am/pm/midnight/noon field.
  static DateFormat_Field get AM_PM_MIDNIGHT_NOON =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_AM_PM_MIDNIGHT_NOON, jni.JniType.objectType)
          .object);

  static final _id_DAY_OF_MONTH = jniAccessors.getStaticFieldIDOf(
      _classRef, "DAY_OF_MONTH", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field DAY_OF_MONTH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the day of month field.
  static DateFormat_Field get DAY_OF_MONTH =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(_classRef, _id_DAY_OF_MONTH, jni.JniType.objectType)
          .object);

  static final _id_DAY_OF_WEEK = jniAccessors.getStaticFieldIDOf(
      _classRef, "DAY_OF_WEEK", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field DAY_OF_WEEK
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the day of week field.
  static DateFormat_Field get DAY_OF_WEEK =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(_classRef, _id_DAY_OF_WEEK, jni.JniType.objectType)
          .object);

  static final _id_DAY_OF_WEEK_IN_MONTH = jniAccessors.getStaticFieldIDOf(
      _classRef,
      "DAY_OF_WEEK_IN_MONTH",
      "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field DAY_OF_WEEK_IN_MONTH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the day of week in month field.
  static DateFormat_Field get DAY_OF_WEEK_IN_MONTH =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_DAY_OF_WEEK_IN_MONTH, jni.JniType.objectType)
          .object);

  static final _id_DAY_OF_YEAR = jniAccessors.getStaticFieldIDOf(
      _classRef, "DAY_OF_YEAR", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field DAY_OF_YEAR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the day of year field.
  static DateFormat_Field get DAY_OF_YEAR =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(_classRef, _id_DAY_OF_YEAR, jni.JniType.objectType)
          .object);

  static final _id_DOW_LOCAL = jniAccessors.getStaticFieldIDOf(
      _classRef, "DOW_LOCAL", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field DOW_LOCAL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the local day of week field.
  static DateFormat_Field get DOW_LOCAL => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_DOW_LOCAL, jni.JniType.objectType)
      .object);

  static final _id_ERA = jniAccessors.getStaticFieldIDOf(
      _classRef, "ERA", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field ERA
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the era field.
  static DateFormat_Field get ERA => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ERA, jni.JniType.objectType)
      .object);

  static final _id_EXTENDED_YEAR = jniAccessors.getStaticFieldIDOf(
      _classRef, "EXTENDED_YEAR", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field EXTENDED_YEAR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the extended year field.
  static DateFormat_Field get EXTENDED_YEAR =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(_classRef, _id_EXTENDED_YEAR, jni.JniType.objectType)
          .object);

  static final _id_FLEXIBLE_DAY_PERIOD = jniAccessors.getStaticFieldIDOf(
      _classRef, "FLEXIBLE_DAY_PERIOD", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field FLEXIBLE_DAY_PERIOD
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Constant identifying the flexible day period field.
  static DateFormat_Field get FLEXIBLE_DAY_PERIOD =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_FLEXIBLE_DAY_PERIOD, jni.JniType.objectType)
          .object);

  static final _id_HOUR0 = jniAccessors.getStaticFieldIDOf(
      _classRef, "HOUR0", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field HOUR0
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the hour(0-11) field.
  static DateFormat_Field get HOUR0 => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_HOUR0, jni.JniType.objectType)
      .object);

  static final _id_HOUR1 = jniAccessors.getStaticFieldIDOf(
      _classRef, "HOUR1", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field HOUR1
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the hour(1-12) field.
  static DateFormat_Field get HOUR1 => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_HOUR1, jni.JniType.objectType)
      .object);

  static final _id_HOUR_OF_DAY0 = jniAccessors.getStaticFieldIDOf(
      _classRef, "HOUR_OF_DAY0", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field HOUR_OF_DAY0
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the hour(0-23) of day field.
  static DateFormat_Field get HOUR_OF_DAY0 =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(_classRef, _id_HOUR_OF_DAY0, jni.JniType.objectType)
          .object);

  static final _id_HOUR_OF_DAY1 = jniAccessors.getStaticFieldIDOf(
      _classRef, "HOUR_OF_DAY1", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field HOUR_OF_DAY1
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the hour(1-24) of day field.
  static DateFormat_Field get HOUR_OF_DAY1 =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(_classRef, _id_HOUR_OF_DAY1, jni.JniType.objectType)
          .object);

  static final _id_JULIAN_DAY = jniAccessors.getStaticFieldIDOf(
      _classRef, "JULIAN_DAY", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field JULIAN_DAY
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the Julian day field.
  static DateFormat_Field get JULIAN_DAY =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(_classRef, _id_JULIAN_DAY, jni.JniType.objectType)
          .object);

  static final _id_MILLISECOND = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLISECOND", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field MILLISECOND
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the millisecond field.
  static DateFormat_Field get MILLISECOND =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(_classRef, _id_MILLISECOND, jni.JniType.objectType)
          .object);

  static final _id_MILLISECONDS_IN_DAY = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLISECONDS_IN_DAY", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field MILLISECONDS_IN_DAY
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the milliseconds in day field.
  static DateFormat_Field get MILLISECONDS_IN_DAY =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_MILLISECONDS_IN_DAY, jni.JniType.objectType)
          .object);

  static final _id_MINUTE = jniAccessors.getStaticFieldIDOf(
      _classRef, "MINUTE", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field MINUTE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the minute field.
  static DateFormat_Field get MINUTE => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MINUTE, jni.JniType.objectType)
      .object);

  static final _id_MONTH = jniAccessors.getStaticFieldIDOf(
      _classRef, "MONTH", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field MONTH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the month field.
  static DateFormat_Field get MONTH => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MONTH, jni.JniType.objectType)
      .object);

  static final _id_QUARTER = jniAccessors.getStaticFieldIDOf(
      _classRef, "QUARTER", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field QUARTER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the quarter field.
  static DateFormat_Field get QUARTER => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_QUARTER, jni.JniType.objectType)
      .object);

  static final _id_SECOND = jniAccessors.getStaticFieldIDOf(
      _classRef, "SECOND", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field SECOND
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the second field.
  static DateFormat_Field get SECOND => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SECOND, jni.JniType.objectType)
      .object);

  static final _id_TIME_ZONE = jniAccessors.getStaticFieldIDOf(
      _classRef, "TIME_ZONE", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field TIME_ZONE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the time zone field.
  static DateFormat_Field get TIME_ZONE => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_TIME_ZONE, jni.JniType.objectType)
      .object);

  static final _id_WEEK_OF_MONTH = jniAccessors.getStaticFieldIDOf(
      _classRef, "WEEK_OF_MONTH", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field WEEK_OF_MONTH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the week of month field.
  static DateFormat_Field get WEEK_OF_MONTH =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(_classRef, _id_WEEK_OF_MONTH, jni.JniType.objectType)
          .object);

  static final _id_WEEK_OF_YEAR = jniAccessors.getStaticFieldIDOf(
      _classRef, "WEEK_OF_YEAR", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field WEEK_OF_YEAR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the week of year field.
  static DateFormat_Field get WEEK_OF_YEAR =>
      DateFormat_Field.fromRef(jniAccessors
          .getStaticField(_classRef, _id_WEEK_OF_YEAR, jni.JniType.objectType)
          .object);

  static final _id_YEAR = jniAccessors.getStaticFieldIDOf(
      _classRef, "YEAR", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field YEAR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the year field.
  static DateFormat_Field get YEAR => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_YEAR, jni.JniType.objectType)
      .object);

  static final _id_YEAR_WOY = jniAccessors.getStaticFieldIDOf(
      _classRef, "YEAR_WOY", "Landroid/icu/text/DateFormat\$Field;");

  /// from: static public final android.icu.text.DateFormat.Field YEAR_WOY
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant identifying the year used with week of year field.
  static DateFormat_Field get YEAR_WOY => DateFormat_Field.fromRef(jniAccessors
      .getStaticField(_classRef, _id_YEAR_WOY, jni.JniType.objectType)
      .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;I)V");

  /// from: protected void <init>(java.lang.String name, int calendarField)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>DateFormat.Field</code> with the given name and
  /// the <code>Calendar</code> field which this attribute represents.  Use -1 for
  /// <code>calendarField</code> if this field does not have a corresponding
  /// <code>Calendar</code> field.
  ///@param name Name of the attribute
  ///@param calendarField <code>Calendar</code> field constant
  DateFormat_Field(jni.JniString name, int calendarField)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [name.reference, calendarField]).object);

  static final _id_ofCalendarField = jniAccessors.getStaticMethodIDOf(
      _classRef, "ofCalendarField", "(I)Landroid/icu/text/DateFormat\$Field;");

  /// from: static public android.icu.text.DateFormat.Field ofCalendarField(int calendarField)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the <code>Field</code> constant that corresponds to the <code>
  /// Calendar</code> field <code>calendarField</code>.  If there is no
  /// corresponding <code>Field</code> is available, null is returned.
  ///@param calendarField <code>Calendar</code> field constant
  ///@return <code>Field</code> associated with the <code>calendarField</code>,
  /// or null if no associated <code>Field</code> is available.
  ///@throws IllegalArgumentException if <code>calendarField</code> is not
  /// a valid <code>Calendar</code> field constant.
  static DateFormat_Field ofCalendarField(int calendarField) =>
      DateFormat_Field.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_ofCalendarField, jni.JniType.objectType, [calendarField]).object);

  static final _id_getCalendarField =
      jniAccessors.getMethodIDOf(_classRef, "getCalendarField", "()I");

  /// from: public int getCalendarField()
  ///
  /// Returns the <code>Calendar</code> field associated with this attribute.
  /// If there is no corresponding <code>Calendar</code> available, this will
  /// return -1.
  ///@return <code>Calendar</code> constant for this attribute.
  int getCalendarField() => jniAccessors.callMethodWithArgs(
      reference, _id_getCalendarField, jni.JniType.intType, []).integer;

  static final _id_readResolve = jniAccessors.getMethodIDOf(
      _classRef, "readResolve", "()Ljava/lang/Object;");

  /// from: protected java.lang.Object readResolve()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Resolves instances being deserialized to the predefined constants.
  ///@throws InvalidObjectException if the constant could not be resolved.
  jni.JniObject readResolve() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_readResolve, jni.JniType.objectType, []).object);
}

/// from: android.icu.text.DateFormat$BooleanAttribute
///
/// boolean attributes
class DateFormat_BooleanAttribute extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/DateFormat\$BooleanAttribute");
  DateFormat_BooleanAttribute.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(_classRef,
      "values", "()[Landroid/icu/text/DateFormat\$BooleanAttribute;");

  /// from: static public android.icu.text.DateFormat.BooleanAttribute[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/text/DateFormat\$BooleanAttribute;");

  /// from: static public android.icu.text.DateFormat.BooleanAttribute valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static DateFormat_BooleanAttribute valueOf(jni.JniString name) =>
      DateFormat_BooleanAttribute.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  DateFormat_BooleanAttribute()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
