// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.text.DisplayContext
///
/// Display context settings.
/// Note, the specific numeric values are internal and may change.
class DisplayContext extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/DisplayContext");
  DisplayContext.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/icu/text/DisplayContext;");

  /// from: static public android.icu.text.DisplayContext[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(_classRef,
      "valueOf", "(Ljava/lang/String;)Landroid/icu/text/DisplayContext;");

  /// from: static public android.icu.text.DisplayContext valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static DisplayContext valueOf(jni.JniString name) =>
      DisplayContext.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_valueOf, jni.JniType.objectType, [name.reference]).object);

  static final _id_type = jniAccessors.getMethodIDOf(
      _classRef, "type", "()Landroid/icu/text/DisplayContext\$Type;");

  /// from: public android.icu.text.DisplayContext.Type type()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the Type part of the enum item
  /// (e.g.&nbsp;CAPITALIZATION)
  DisplayContext_Type type() =>
      DisplayContext_Type.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_type, jni.JniType.objectType, []).object);

  static final _id_value =
      jniAccessors.getMethodIDOf(_classRef, "value", "()I");

  /// from: public int value()
  ///
  /// Get the value part of the enum item
  /// (e.g.&nbsp;CAPITALIZATION_FOR_STANDALONE)
  int value() => jniAccessors.callMethodWithArgs(
      reference, _id_value, jni.JniType.intType, []).integer;
}

/// from: android.icu.text.DisplayContext$Type
///
/// Type values for DisplayContext
class DisplayContext_Type extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/text/DisplayContext\$Type");
  DisplayContext_Type.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/icu/text/DisplayContext\$Type;");

  /// from: static public android.icu.text.DisplayContext.Type[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(_classRef,
      "valueOf", "(Ljava/lang/String;)Landroid/icu/text/DisplayContext\$Type;");

  /// from: static public android.icu.text.DisplayContext.Type valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static DisplayContext_Type valueOf(jni.JniString name) =>
      DisplayContext_Type.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);
}
