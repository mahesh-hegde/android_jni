// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.lang.UProperty
///
/// Selection constants for Unicode properties.
/// These constants are used in functions like
/// UCharacter.hasBinaryProperty(int) to select one of the Unicode properties.
///
/// The properties APIs are intended to reflect Unicode properties as
/// defined in the Unicode Character Database (UCD) and Unicode Technical
/// Reports (UTR).
/// For details about the properties see
/// <a href="http://www.unicode.org/reports/tr44/">UAX \#44: Unicode Character Database</a>.
///
/// Important: If ICU is built with UCD files from Unicode versions below
/// 3.2, then properties marked with "new" are not or not fully
/// available. Check UCharacter.getUnicodeVersion() to be sure.
///@author Syn Wee Quek
///@see android.icu.lang.UCharacter
class UProperty extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/lang/UProperty");
  UProperty.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int AGE
  ///
  /// String property Age.
  /// Corresponds to UCharacter.getAge(int).
  static const AGE = 16384;

  /// from: static public final int ALPHABETIC
  ///
  /// Binary property Alphabetic.
  /// Property for UCharacter.isUAlphabetic(), different from the property
  /// in UCharacter.isalpha().
  /// Lu + Ll + Lt + Lm + Lo + Nl + Other_Alphabetic.
  static const ALPHABETIC = 0;

  /// from: static public final int ASCII_HEX_DIGIT
  ///
  /// Binary property ASCII_Hex_Digit (0-9 A-F a-f).
  static const ASCII_HEX_DIGIT = 1;

  /// from: static public final int BIDI_CLASS
  ///
  /// Enumerated property Bidi_Class.
  /// Same as UCharacter.getDirection(int), returns UCharacterDirection values.
  static const BIDI_CLASS = 4096;

  /// from: static public final int BIDI_CONTROL
  ///
  /// Binary property Bidi_Control.
  /// Format controls which have specific functions in the Bidi Algorithm.
  static const BIDI_CONTROL = 2;

  /// from: static public final int BIDI_MIRRORED
  ///
  /// Binary property Bidi_Mirrored.
  /// Characters that may change display in RTL text.
  /// Property for UCharacter.isMirrored().
  /// See Bidi Algorithm; UTR 9.
  static const BIDI_MIRRORED = 3;

  /// from: static public final int BIDI_MIRRORING_GLYPH
  ///
  /// String property Bidi_Mirroring_Glyph.
  /// Corresponds to UCharacter.getMirror(int).
  static const BIDI_MIRRORING_GLYPH = 16385;

  /// from: static public final int BIDI_PAIRED_BRACKET
  ///
  /// String property Bidi_Paired_Bracket (new in Unicode 6.3).
  /// Corresponds to UCharacter.getBidiPairedBracket.
  static const BIDI_PAIRED_BRACKET = 16397;

  /// from: static public final int BIDI_PAIRED_BRACKET_TYPE
  ///
  /// Enumerated property Bidi_Paired_Bracket_Type (new in Unicode 6.3).
  /// Used in UAX \#9: Unicode Bidirectional Algorithm
  /// (http://www.unicode.org/reports/tr9/)
  /// Returns UCharacter.BidiPairedBracketType values.
  static const BIDI_PAIRED_BRACKET_TYPE = 4117;

  /// from: static public final int BINARY_START
  ///
  /// First constant for binary Unicode properties.
  static const BINARY_START = 0;

  /// from: static public final int BLOCK
  ///
  /// Enumerated property Block.
  /// Same as UCharacter.UnicodeBlock.of(int), returns UCharacter.UnicodeBlock
  /// values.
  static const BLOCK = 4097;

  /// from: static public final int CANONICAL_COMBINING_CLASS
  ///
  /// Enumerated property Canonical_Combining_Class.
  /// Same as UCharacter.getCombiningClass(int), returns 8-bit numeric values.
  static const CANONICAL_COMBINING_CLASS = 4098;

  /// from: static public final int CASED
  ///
  /// Binary property Cased.
  /// For Lowercase, Uppercase and Titlecase characters.
  static const CASED = 49;

  /// from: static public final int CASE_FOLDING
  ///
  /// String property Case_Folding.
  /// Corresponds to UCharacter.foldCase(String, boolean).
  static const CASE_FOLDING = 16386;

  /// from: static public final int CASE_IGNORABLE
  ///
  /// Binary property Case_Ignorable.
  /// Used in context-sensitive case mappings.
  static const CASE_IGNORABLE = 50;

  /// from: static public final int CASE_SENSITIVE
  ///
  /// Binary property Case_Sensitive.
  /// Either the source of a case
  /// mapping or _in_ the target of a case mapping. Not the same as
  /// the general category Cased_Letter.
  static const CASE_SENSITIVE = 34;

  /// from: static public final int CHANGES_WHEN_CASEFOLDED
  ///
  /// Binary property Changes_When_Casefolded.
  static const CHANGES_WHEN_CASEFOLDED = 54;

  /// from: static public final int CHANGES_WHEN_CASEMAPPED
  ///
  /// Binary property Changes_When_Casemapped.
  static const CHANGES_WHEN_CASEMAPPED = 55;

  /// from: static public final int CHANGES_WHEN_LOWERCASED
  ///
  /// Binary property Changes_When_Lowercased.
  static const CHANGES_WHEN_LOWERCASED = 51;

  /// from: static public final int CHANGES_WHEN_NFKC_CASEFOLDED
  ///
  /// Binary property Changes_When_NFKC_Casefolded.
  static const CHANGES_WHEN_NFKC_CASEFOLDED = 56;

  /// from: static public final int CHANGES_WHEN_TITLECASED
  ///
  /// Binary property Changes_When_Titlecased.
  static const CHANGES_WHEN_TITLECASED = 53;

  /// from: static public final int CHANGES_WHEN_UPPERCASED
  ///
  /// Binary property Changes_When_Uppercased.
  static const CHANGES_WHEN_UPPERCASED = 52;

  /// from: static public final int DASH
  ///
  /// Binary property Dash.
  /// Variations of dashes.
  static const DASH = 4;

  /// from: static public final int DECOMPOSITION_TYPE
  ///
  /// Enumerated property Decomposition_Type.
  /// Returns UCharacter.DecompositionType values.
  static const DECOMPOSITION_TYPE = 4099;

  /// from: static public final int DEFAULT_IGNORABLE_CODE_POINT
  ///
  /// Binary property Default_Ignorable_Code_Point (new).
  ///
  /// Property that indicates codepoint is ignorable in most processing.
  ///
  /// Codepoints (2060..206F, FFF0..FFFB, E0000..E0FFF) +
  /// Other_Default_Ignorable_Code_Point + (Cf + Cc + Cs - White_Space)
  static const DEFAULT_IGNORABLE_CODE_POINT = 5;

  /// from: static public final int DEPRECATED
  ///
  /// Binary property Deprecated (new).
  /// The usage of deprecated characters is strongly discouraged.
  static const DEPRECATED = 6;

  /// from: static public final int DIACRITIC
  ///
  /// Binary property Diacritic.
  /// Characters that linguistically modify the meaning of another
  /// character to which they apply.
  static const DIACRITIC = 7;

  /// from: static public final int DOUBLE_START
  ///
  /// First constant for double Unicode properties.
  static const DOUBLE_START = 12288;

  /// from: static public final int EAST_ASIAN_WIDTH
  ///
  /// Enumerated property East_Asian_Width.
  /// See http://www.unicode.org/reports/tr11/
  /// Returns UCharacter.EastAsianWidth values.
  static const EAST_ASIAN_WIDTH = 4100;

  /// from: static public final int EMOJI
  ///
  /// Binary property Emoji.
  /// See http://www.unicode.org/reports/tr51/\#Emoji_Properties
  static const EMOJI = 57;

  /// from: static public final int EMOJI_COMPONENT
  ///
  /// Binary property Emoji_Component.
  /// See http://www.unicode.org/reports/tr51/\#Emoji_Properties
  static const EMOJI_COMPONENT = 61;

  /// from: static public final int EMOJI_MODIFIER
  ///
  /// Binary property Emoji_Modifier.
  /// See http://www.unicode.org/reports/tr51/\#Emoji_Properties
  static const EMOJI_MODIFIER = 59;

  /// from: static public final int EMOJI_MODIFIER_BASE
  ///
  /// Binary property Emoji_Modifier_Base.
  /// See http://www.unicode.org/reports/tr51/\#Emoji_Properties
  static const EMOJI_MODIFIER_BASE = 60;

  /// from: static public final int EMOJI_PRESENTATION
  ///
  /// Binary property Emoji_Presentation.
  /// See http://www.unicode.org/reports/tr51/\#Emoji_Properties
  static const EMOJI_PRESENTATION = 58;

  /// from: static public final int EXTENDER
  ///
  /// Binary property Extender.
  /// Extend the value or shape of a preceding alphabetic character, e.g.
  /// length and iteration marks.
  static const EXTENDER = 8;

  /// from: static public final int FULL_COMPOSITION_EXCLUSION
  ///
  /// Binary property Full_Composition_Exclusion.
  /// CompositionExclusions.txt + Singleton Decompositions +
  /// Non-Starter Decompositions.
  static const FULL_COMPOSITION_EXCLUSION = 9;

  /// from: static public final int GENERAL_CATEGORY
  ///
  /// Enumerated property General_Category.
  /// Same as UCharacter.getType(int), returns UCharacterCategory values.
  static const GENERAL_CATEGORY = 4101;

  /// from: static public final int GENERAL_CATEGORY_MASK
  ///
  /// Bitmask property General_Category_Mask.
  /// This is the General_Category property returned as a bit mask.
  /// When used in UCharacter.getIntPropertyValue(c),
  /// returns bit masks for UCharacterCategory values where exactly one bit is set.
  /// When used with UCharacter.getPropertyValueName() and UCharacter.getPropertyValueEnum(),
  /// a multi-bit mask is used for sets of categories like "Letters".
  static const GENERAL_CATEGORY_MASK = 8192;

  /// from: static public final int GRAPHEME_BASE
  ///
  /// Binary property Grapheme_Base (new).
  /// For programmatic determination of grapheme cluster boundaries.
  /// [0..10FFFF]-Cc-Cf-Cs-Co-Cn-Zl-Zp-Grapheme_Link-Grapheme_Extend-CGJ
  static const GRAPHEME_BASE = 10;

  /// from: static public final int GRAPHEME_CLUSTER_BREAK
  ///
  /// Enumerated property Grapheme_Cluster_Break (new in Unicode 4.1).
  /// Used in UAX \#29: Text Boundaries
  /// (http://www.unicode.org/reports/tr29/)
  /// Returns UCharacter.GraphemeClusterBreak values.
  static const GRAPHEME_CLUSTER_BREAK = 4114;

  /// from: static public final int GRAPHEME_EXTEND
  ///
  /// Binary property Grapheme_Extend (new).
  /// For programmatic determination of grapheme cluster boundaries.
  /// Me+Mn+Mc+Other_Grapheme_Extend-Grapheme_Link-CGJ
  static const GRAPHEME_EXTEND = 11;

  /// from: static public final int GRAPHEME_LINK
  ///
  /// Binary property Grapheme_Link (new).
  /// For programmatic determination of grapheme cluster boundaries.
  static const GRAPHEME_LINK = 12;

  /// from: static public final int HANGUL_SYLLABLE_TYPE
  ///
  /// Enumerated property Hangul_Syllable_Type, new in Unicode 4.
  /// Returns UCharacter.HangulSyllableType values.
  static const HANGUL_SYLLABLE_TYPE = 4107;

  /// from: static public final int HEX_DIGIT
  ///
  /// Binary property Hex_Digit.
  /// Characters commonly used for hexadecimal numbers.
  static const HEX_DIGIT = 13;

  /// from: static public final int HYPHEN
  ///
  /// Binary property Hyphen.
  /// Dashes used to mark connections between pieces of words, plus the
  /// Katakana middle dot.
  static const HYPHEN = 14;

  /// from: static public final int IDEOGRAPHIC
  ///
  /// Binary property Ideographic.
  /// CJKV ideographs.
  static const IDEOGRAPHIC = 17;

  /// from: static public final int IDS_BINARY_OPERATOR
  ///
  /// Binary property IDS_Binary_Operator (new).
  /// For programmatic determination of Ideographic Description Sequences.
  static const IDS_BINARY_OPERATOR = 18;

  /// from: static public final int IDS_TRINARY_OPERATOR
  ///
  /// Binary property IDS_Trinary_Operator (new).
  /// For programmatic determination of Ideographic Description
  /// Sequences.
  static const IDS_TRINARY_OPERATOR = 19;

  /// from: static public final int ID_CONTINUE
  ///
  /// Binary property ID_Continue.
  /// Characters that can continue an identifier.
  /// ID_Start+Mn+Mc+Nd+Pc
  static const ID_CONTINUE = 15;

  /// from: static public final int ID_START
  ///
  /// Binary property ID_Start.
  /// Characters that can start an identifier.
  /// Lu+Ll+Lt+Lm+Lo+Nl
  static const ID_START = 16;

  /// from: static public final int INT_START
  ///
  /// First constant for enumerated/integer Unicode properties.
  static const INT_START = 4096;

  /// from: static public final int JOINING_GROUP
  ///
  /// Enumerated property Joining_Group.
  /// Returns UCharacter.JoiningGroup values.
  static const JOINING_GROUP = 4102;

  /// from: static public final int JOINING_TYPE
  ///
  /// Enumerated property Joining_Type.
  /// Returns UCharacter.JoiningType values.
  static const JOINING_TYPE = 4103;

  /// from: static public final int JOIN_CONTROL
  ///
  /// Binary property Join_Control.
  /// Format controls for cursive joining and ligation.
  static const JOIN_CONTROL = 20;

  /// from: static public final int LEAD_CANONICAL_COMBINING_CLASS
  ///
  /// Enumerated property Lead_Canonical_Combining_Class.
  /// ICU-specific property for the ccc of the first code point
  /// of the decomposition, or lccc(c)=ccc(NFD(c)[0]).
  /// Useful for checking for canonically ordered text;
  /// see Normalizer.FCD and http://www.unicode.org/notes/tn5/\#FCD .
  /// Returns 8-bit numeric values like CANONICAL_COMBINING_CLASS.
  static const LEAD_CANONICAL_COMBINING_CLASS = 4112;

  /// from: static public final int LINE_BREAK
  ///
  /// Enumerated property Line_Break.
  /// Returns UCharacter.LineBreak values.
  static const LINE_BREAK = 4104;

  /// from: static public final int LOGICAL_ORDER_EXCEPTION
  ///
  /// Binary property Logical_Order_Exception (new).
  /// Characters that do not use logical order and require special
  /// handling in most processing.
  static const LOGICAL_ORDER_EXCEPTION = 21;

  /// from: static public final int LOWERCASE
  ///
  /// Binary property Lowercase.
  /// Same as UCharacter.isULowercase(), different from
  /// UCharacter.islower().
  /// Ll+Other_Lowercase
  static const LOWERCASE = 22;

  /// from: static public final int LOWERCASE_MAPPING
  ///
  /// String property Lowercase_Mapping.
  /// Corresponds to UCharacter.toLowerCase(String).
  static const LOWERCASE_MAPPING = 16388;

  /// from: static public final int MASK_START
  ///
  /// First constant for bit-mask Unicode properties.
  static const MASK_START = 8192;

  /// from: static public final int MATH
  ///
  /// Binary property Math.
  /// Sm+Other_Math
  static const MATH = 23;

  /// from: static public final int NAME
  ///
  /// String property Name.
  /// Corresponds to UCharacter.getName(int).
  static const NAME = 16389;

  /// from: static public final int NFC_INERT
  ///
  /// Binary property NFC_Inert.
  /// ICU-specific property for characters that are inert under NFC,
  /// i.e., they do not interact with adjacent characters.
  /// Used for example in normalizing transforms in incremental mode
  /// to find the boundary of safely normalizable text despite possible
  /// text additions.
  ///@see \#NFD_INERT
  static const NFC_INERT = 39;

  /// from: static public final int NFC_QUICK_CHECK
  ///
  /// Enumerated property NFC_Quick_Check.
  /// Returns numeric values compatible with Normalizer.QuickCheckResult.
  static const NFC_QUICK_CHECK = 4110;

  /// from: static public final int NFD_INERT
  ///
  /// Binary property NFD_Inert.
  /// ICU-specific property for characters that are inert under NFD,
  /// i.e., they do not interact with adjacent characters.
  /// Used for example in normalizing transforms in incremental mode
  /// to find the boundary of safely normalizable text despite possible
  /// text additions.
  ///
  /// There is one such property per normalization form.
  /// These properties are computed as follows - an inert character is:
  /// a) unassigned, or ALL of the following:
  /// b) of combining class 0.
  /// c) not decomposed by this normalization form.
  /// AND if NFC or NFKC,
  /// d) can never compose with a previous character.
  /// e) can never compose with a following character.
  /// f) can never change if another character is added.
  /// Example: a-breve might satisfy all but f, but if you
  /// add an ogonek it changes to a-ogonek + breve
  ///
  /// See also com.ibm.text.UCD.NFSkippable in the ICU4J repository,
  /// and icu/source/common/unormimp.h .
  static const NFD_INERT = 37;

  /// from: static public final int NFD_QUICK_CHECK
  ///
  /// Enumerated property NFD_Quick_Check.
  /// Returns numeric values compatible with Normalizer.QuickCheckResult.
  static const NFD_QUICK_CHECK = 4108;

  /// from: static public final int NFKC_INERT
  ///
  /// Binary property NFKC_Inert.
  /// ICU-specific property for characters that are inert under NFKC,
  /// i.e., they do not interact with adjacent characters.
  /// Used for example in normalizing transforms in incremental mode
  /// to find the boundary of safely normalizable text despite possible
  /// text additions.
  ///@see \#NFD_INERT
  static const NFKC_INERT = 40;

  /// from: static public final int NFKC_QUICK_CHECK
  ///
  /// Enumerated property NFKC_Quick_Check.
  /// Returns numeric values compatible with Normalizer.QuickCheckResult.
  static const NFKC_QUICK_CHECK = 4111;

  /// from: static public final int NFKD_INERT
  ///
  /// Binary property NFKD_Inert.
  /// ICU-specific property for characters that are inert under NFKD,
  /// i.e., they do not interact with adjacent characters.
  /// Used for example in normalizing transforms in incremental mode
  /// to find the boundary of safely normalizable text despite possible
  /// text additions.
  ///@see \#NFD_INERT
  static const NFKD_INERT = 38;

  /// from: static public final int NFKD_QUICK_CHECK
  ///
  /// Enumerated property NFKD_Quick_Check.
  /// Returns numeric values compatible with Normalizer.QuickCheckResult.
  static const NFKD_QUICK_CHECK = 4109;

  /// from: static public final int NONCHARACTER_CODE_POINT
  ///
  /// Binary property Noncharacter_Code_Point.
  /// Code points that are explicitly defined as illegal for the encoding
  /// of characters.
  static const NONCHARACTER_CODE_POINT = 24;

  /// from: static public final int NUMERIC_TYPE
  ///
  /// Enumerated property Numeric_Type.
  /// Returns UCharacter.NumericType values.
  static const NUMERIC_TYPE = 4105;

  /// from: static public final int NUMERIC_VALUE
  ///
  /// Double property Numeric_Value.
  /// Corresponds to UCharacter.getUnicodeNumericValue(int).
  static const NUMERIC_VALUE = 12288;

  /// from: static public final int OTHER_PROPERTY_START
  ///
  /// First constant for Unicode properties with unusual value types.
  static const OTHER_PROPERTY_START = 28672;

  /// from: static public final int PATTERN_SYNTAX
  ///
  /// Binary property Pattern_Syntax (new in Unicode 4.1).
  /// See UAX \#31 Identifier and Pattern Syntax
  /// (http://www.unicode.org/reports/tr31/)
  static const PATTERN_SYNTAX = 42;

  /// from: static public final int PATTERN_WHITE_SPACE
  ///
  /// Binary property Pattern_White_Space (new in Unicode 4.1).
  /// See UAX \#31 Identifier and Pattern Syntax
  /// (http://www.unicode.org/reports/tr31/)
  static const PATTERN_WHITE_SPACE = 43;

  /// from: static public final int POSIX_ALNUM
  ///
  /// Binary property alnum (a C/POSIX character class).
  /// Implemented according to the UTS \#18 Annex C Standard Recommendation.
  /// See the UCharacter class documentation.
  static const POSIX_ALNUM = 44;

  /// from: static public final int POSIX_BLANK
  ///
  /// Binary property blank (a C/POSIX character class).
  /// Implemented according to the UTS \#18 Annex C Standard Recommendation.
  /// See the UCharacter class documentation.
  static const POSIX_BLANK = 45;

  /// from: static public final int POSIX_GRAPH
  ///
  /// Binary property graph (a C/POSIX character class).
  /// Implemented according to the UTS \#18 Annex C Standard Recommendation.
  /// See the UCharacter class documentation.
  static const POSIX_GRAPH = 46;

  /// from: static public final int POSIX_PRINT
  ///
  /// Binary property print (a C/POSIX character class).
  /// Implemented according to the UTS \#18 Annex C Standard Recommendation.
  /// See the UCharacter class documentation.
  static const POSIX_PRINT = 47;

  /// from: static public final int POSIX_XDIGIT
  ///
  /// Binary property xdigit (a C/POSIX character class).
  /// Implemented according to the UTS \#18 Annex C Standard Recommendation.
  /// See the UCharacter class documentation.
  static const POSIX_XDIGIT = 48;

  /// from: static public final int PREPENDED_CONCATENATION_MARK
  ///
  /// Binary property Prepended_Concatenation_Mark.
  static const PREPENDED_CONCATENATION_MARK = 63;

  /// from: static public final int QUOTATION_MARK
  ///
  /// Binary property Quotation_Mark.
  static const QUOTATION_MARK = 25;

  /// from: static public final int RADICAL
  ///
  /// Binary property Radical (new).
  /// For programmatic determination of Ideographic Description
  /// Sequences.
  static const RADICAL = 26;

  /// from: static public final int REGIONAL_INDICATOR
  ///
  /// Binary property Regional_Indicator.
  static const REGIONAL_INDICATOR = 62;

  /// from: static public final int SCRIPT
  ///
  /// Enumerated property Script.
  /// Same as UScript.getScript(int), returns UScript values.
  static const SCRIPT = 4106;

  /// from: static public final int SCRIPT_EXTENSIONS
  ///
  /// Miscellaneous property Script_Extensions (new in Unicode 6.0).
  /// Some characters are commonly used in multiple scripts.
  /// For more information, see UAX \#24: http://www.unicode.org/reports/tr24/.
  /// Corresponds to UScript.hasScript and UScript.getScriptExtensions.
  static const SCRIPT_EXTENSIONS = 28672;

  /// from: static public final int SEGMENT_STARTER
  ///
  /// Binary Property Segment_Starter.
  /// ICU-specific property for characters that are starters in terms of
  /// Unicode normalization and combining character sequences.
  /// They have ccc=0 and do not occur in non-initial position of the
  /// canonical decomposition of any character
  /// (like " in NFD(a-umlaut) and a Jamo T in an NFD(Hangul LVT)).
  /// ICU uses this property for segmenting a string for generating a set of
  /// canonically equivalent strings, e.g. for canonical closure while
  /// processing collation tailoring rules.
  static const SEGMENT_STARTER = 41;

  /// from: static public final int SENTENCE_BREAK
  ///
  /// Enumerated property Sentence_Break (new in Unicode 4.1).
  /// Used in UAX \#29: Text Boundaries
  /// (http://www.unicode.org/reports/tr29/)
  /// Returns UCharacter.SentenceBreak values.
  static const SENTENCE_BREAK = 4115;

  /// from: static public final int SIMPLE_CASE_FOLDING
  ///
  /// String property Simple_Case_Folding.
  /// Corresponds to UCharacter.foldCase(int, boolean).
  static const SIMPLE_CASE_FOLDING = 16390;

  /// from: static public final int SIMPLE_LOWERCASE_MAPPING
  ///
  /// String property Simple_Lowercase_Mapping.
  /// Corresponds to UCharacter.toLowerCase(int).
  static const SIMPLE_LOWERCASE_MAPPING = 16391;

  /// from: static public final int SIMPLE_TITLECASE_MAPPING
  ///
  /// String property Simple_Titlecase_Mapping.
  /// Corresponds to UCharacter.toTitleCase(int).
  static const SIMPLE_TITLECASE_MAPPING = 16392;

  /// from: static public final int SIMPLE_UPPERCASE_MAPPING
  ///
  /// String property Simple_Uppercase_Mapping.
  /// Corresponds to UCharacter.toUpperCase(int).
  static const SIMPLE_UPPERCASE_MAPPING = 16393;

  /// from: static public final int SOFT_DOTTED
  ///
  /// Binary property Soft_Dotted (new).
  /// Characters with a "soft dot", like i or j.
  /// An accent placed on these characters causes the dot to disappear.
  static const SOFT_DOTTED = 27;

  /// from: static public final int STRING_START
  ///
  /// First constant for string Unicode properties.
  static const STRING_START = 16384;

  /// from: static public final int S_TERM
  ///
  /// Binary property STerm (new in Unicode 4.0.1).
  /// Sentence Terminal. Used in UAX \#29: Text Boundaries
  /// (http://www.unicode.org/reports/tr29/)
  static const S_TERM = 35;

  /// from: static public final int TERMINAL_PUNCTUATION
  ///
  /// Binary property Terminal_Punctuation.
  /// Punctuation characters that generally mark the end of textual
  /// units.
  static const TERMINAL_PUNCTUATION = 28;

  /// from: static public final int TITLECASE_MAPPING
  ///
  /// String property Titlecase_Mapping.
  /// Corresponds to UCharacter.toTitleCase(String).
  static const TITLECASE_MAPPING = 16394;

  /// from: static public final int TRAIL_CANONICAL_COMBINING_CLASS
  ///
  /// Enumerated property Trail_Canonical_Combining_Class.
  /// ICU-specific property for the ccc of the last code point
  /// of the decomposition, or lccc(c)=ccc(NFD(c)[last]).
  /// Useful for checking for canonically ordered text;
  /// see Normalizer.FCD and http://www.unicode.org/notes/tn5/\#FCD .
  /// Returns 8-bit numeric values like CANONICAL_COMBINING_CLASS.
  static const TRAIL_CANONICAL_COMBINING_CLASS = 4113;

  /// from: static public final int UNIFIED_IDEOGRAPH
  ///
  /// Binary property Unified_Ideograph (new).
  /// For programmatic determination of Ideographic Description
  /// Sequences.
  static const UNIFIED_IDEOGRAPH = 29;

  /// from: static public final int UPPERCASE
  ///
  /// Binary property Uppercase.
  /// Same as UCharacter.isUUppercase(), different from
  /// UCharacter.isUpperCase().
  /// Lu+Other_Uppercase
  static const UPPERCASE = 30;

  /// from: static public final int UPPERCASE_MAPPING
  ///
  /// String property Uppercase_Mapping.
  /// Corresponds to UCharacter.toUpperCase(String).
  static const UPPERCASE_MAPPING = 16396;

  /// from: static public final int VARIATION_SELECTOR
  ///
  /// Binary property Variation_Selector (new in Unicode 4.0.1).
  /// Indicates all those characters that qualify as Variation Selectors.
  /// For details on the behavior of these characters,
  /// see StandardizedVariants.html and 15.6 Variation Selectors.
  static const VARIATION_SELECTOR = 36;

  /// from: static public final int WHITE_SPACE
  ///
  /// Binary property White_Space.
  /// Same as UCharacter.isUWhiteSpace(), different from
  /// UCharacter.isSpace() and UCharacter.isWhitespace().
  /// Space characters+TAB+CR+LF-ZWSP-ZWNBSP
  static const WHITE_SPACE = 31;

  /// from: static public final int WORD_BREAK
  ///
  /// Enumerated property Word_Break (new in Unicode 4.1).
  /// Used in UAX \#29: Text Boundaries
  /// (http://www.unicode.org/reports/tr29/)
  /// Returns UCharacter.WordBreak values.
  static const WORD_BREAK = 4116;

  /// from: static public final int XID_CONTINUE
  ///
  /// Binary property XID_Continue.
  /// ID_Continue modified to allow closure under normalization forms
  /// NFKC and NFKD.
  static const XID_CONTINUE = 32;

  /// from: static public final int XID_START
  ///
  /// Binary property XID_Start.
  /// ID_Start modified to allow closure under normalization forms NFKC
  /// and NFKD.
  static const XID_START = 33;
}

/// from: android.icu.lang.UProperty$NameChoice
///
/// Selector constants for UCharacter.getPropertyName() and
/// UCharacter.getPropertyValueName().  These selectors are used to
/// choose which name is returned for a given property or value.
/// All properties and values have a long name.  Most have a short
/// name, but some do not.  Unicode allows for additional names,
/// beyond the long and short name, which would be indicated by
/// LONG + i, where i=1, 2,...
///@see UCharacter\#getPropertyName
///@see UCharacter\#getPropertyValueName
class UProperty_NameChoice extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/lang/UProperty\$NameChoice");
  UProperty_NameChoice.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int LONG
  ///
  /// Selector for the long name of a property or value.  All
  /// properties and values have a long name.
  static const LONG = 1;

  /// from: static public final int SHORT
  ///
  /// Selector for the abbreviated name of a property or value.
  /// Most properties and values have a short name; those that do
  /// not return null.
  static const SHORT = 0;
}
