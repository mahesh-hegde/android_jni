// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../util/ULocale.dart" as ulocale_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.lang.UScript
///
/// Constants for ISO 15924 script codes, and related functions.
///
/// The current set of script code constants supports at least all scripts
/// that are encoded in the version of Unicode which ICU currently supports.
/// The names of the constants are usually derived from the
/// Unicode script property value aliases.
/// See UAX \#24 Unicode Script Property (http://www.unicode.org/reports/tr24/)
/// and http://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt .
///
/// In addition, constants for many ISO 15924 script codes
/// are included, for use with language tags, CLDR data, and similar.
/// Some of those codes are not used in the Unicode Character Database (UCD).
/// For example, there are no characters that have a UCD script property value of
/// Hans or Hant. All Han ideographs have the Hani script property value in Unicode.
///
/// Private-use codes Qaaa..Qabx are not included, except as used in the UCD or in CLDR.
///
/// Starting with ICU 55, script codes are only added when their scripts
/// have been or will certainly be encoded in Unicode,
/// and have been assigned Unicode script property value aliases,
/// to ensure that their script names are stable and match the names of the constants.
/// Script codes like Latf and Aran that are not subject to separate encoding
/// may be added at any time.
class UScript extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/icu/lang/UScript");
  UScript.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ADLAM
  ///
  /// ISO 15924 script code
  static const ADLAM = 167;

  /// from: static public final int AFAKA
  ///
  /// ISO 15924 script code
  static const AFAKA = 147;

  /// from: static public final int AHOM
  ///
  /// ISO 15924 script code
  static const AHOM = 161;

  /// from: static public final int ANATOLIAN_HIEROGLYPHS
  ///
  /// ISO 15924 script code
  static const ANATOLIAN_HIEROGLYPHS = 156;

  /// from: static public final int ARABIC
  ///
  /// Arabic
  static const ARABIC = 2;

  /// from: static public final int ARMENIAN
  ///
  /// Armenian
  static const ARMENIAN = 3;

  /// from: static public final int AVESTAN
  ///
  /// ISO 15924 script code
  static const AVESTAN = 117;

  /// from: static public final int BALINESE
  ///
  /// ISO 15924 script code
  static const BALINESE = 62;

  /// from: static public final int BAMUM
  ///
  /// ISO 15924 script code
  static const BAMUM = 130;

  /// from: static public final int BASSA_VAH
  ///
  /// ISO 15924 script code
  static const BASSA_VAH = 134;

  /// from: static public final int BATAK
  ///
  /// ISO 15924 script code
  static const BATAK = 63;

  /// from: static public final int BENGALI
  ///
  /// Bengali
  static const BENGALI = 4;

  /// from: static public final int BHAIKSUKI
  ///
  /// ISO 15924 script code
  static const BHAIKSUKI = 168;

  /// from: static public final int BLISSYMBOLS
  ///
  /// ISO 15924 script code
  static const BLISSYMBOLS = 64;

  /// from: static public final int BOOK_PAHLAVI
  ///
  /// ISO 15924 script code
  static const BOOK_PAHLAVI = 124;

  /// from: static public final int BOPOMOFO
  ///
  /// Bopomofo
  static const BOPOMOFO = 5;

  /// from: static public final int BRAHMI
  ///
  /// ISO 15924 script code
  static const BRAHMI = 65;

  /// from: static public final int BRAILLE
  ///
  /// Braille
  /// Script in Unicode 4
  static const BRAILLE = 46;

  /// from: static public final int BUGINESE
  ///
  /// Script in Unicode 4.1
  static const BUGINESE = 55;

  /// from: static public final int BUHID
  ///
  /// Buhid
  static const BUHID = 44;

  /// from: static public final int CANADIAN_ABORIGINAL
  ///
  /// Unified Canadian Aboriginal Symbols
  static const CANADIAN_ABORIGINAL = 40;

  /// from: static public final int CARIAN
  ///
  /// ISO 15924 script code
  static const CARIAN = 104;

  /// from: static public final int CAUCASIAN_ALBANIAN
  ///
  /// ISO 15924 script code
  static const CAUCASIAN_ALBANIAN = 159;

  /// from: static public final int CHAKMA
  ///
  /// ISO 15924 script code
  static const CHAKMA = 118;

  /// from: static public final int CHAM
  ///
  /// ISO 15924 script code
  static const CHAM = 66;

  /// from: static public final int CHEROKEE
  ///
  /// Cherokee
  static const CHEROKEE = 6;

  /// from: static public final int CIRTH
  ///
  /// ISO 15924 script code
  static const CIRTH = 67;

  /// from: static public final int COMMON
  ///
  /// Common
  static const COMMON = 0;

  /// from: static public final int COPTIC
  ///
  /// Coptic
  static const COPTIC = 7;

  /// from: static public final int CUNEIFORM
  ///
  /// ISO 15924 script code
  static const CUNEIFORM = 101;

  /// from: static public final int CYPRIOT
  ///
  /// Cypriot
  /// Script in Unicode 4
  static const CYPRIOT = 47;

  /// from: static public final int CYRILLIC
  ///
  /// Cyrillic
  static const CYRILLIC = 8;

  /// from: static public final int DEMOTIC_EGYPTIAN
  ///
  /// ISO 15924 script code
  static const DEMOTIC_EGYPTIAN = 69;

  /// from: static public final int DESERET
  ///
  /// Deseret
  static const DESERET = 9;

  /// from: static public final int DEVANAGARI
  ///
  /// Devanagari
  static const DEVANAGARI = 10;

  /// from: static public final int DUPLOYAN
  ///
  /// ISO 15924 script code
  static const DUPLOYAN = 135;

  /// from: static public final int EASTERN_SYRIAC
  ///
  /// ISO 15924 script code
  static const EASTERN_SYRIAC = 97;

  /// from: static public final int EGYPTIAN_HIEROGLYPHS
  ///
  /// ISO 15924 script code
  static const EGYPTIAN_HIEROGLYPHS = 71;

  /// from: static public final int ELBASAN
  ///
  /// ISO 15924 script code
  static const ELBASAN = 136;

  /// from: static public final int ESTRANGELO_SYRIAC
  ///
  /// ISO 15924 script code
  static const ESTRANGELO_SYRIAC = 95;

  /// from: static public final int ETHIOPIC
  ///
  /// Ethiopic
  static const ETHIOPIC = 11;

  /// from: static public final int GEORGIAN
  ///
  /// Georgian
  static const GEORGIAN = 12;

  /// from: static public final int GLAGOLITIC
  ///
  /// Script in Unicode 4.1
  static const GLAGOLITIC = 56;

  /// from: static public final int GOTHIC
  ///
  /// Gothic
  static const GOTHIC = 13;

  /// from: static public final int GRANTHA
  ///
  /// ISO 15924 script code
  static const GRANTHA = 137;

  /// from: static public final int GREEK
  ///
  /// Greek
  static const GREEK = 14;

  /// from: static public final int GUJARATI
  ///
  /// Gujarati
  static const GUJARATI = 15;

  /// from: static public final int GURMUKHI
  ///
  /// Gurmukhi
  static const GURMUKHI = 16;

  /// from: static public final int HAN
  ///
  /// Han
  static const HAN = 17;

  /// from: static public final int HANGUL
  ///
  /// Hangul
  static const HANGUL = 18;

  /// from: static public final int HANUNOO
  ///
  /// Hanunooo
  static const HANUNOO = 43;

  /// from: static public final int HAN_WITH_BOPOMOFO
  ///
  /// ISO 15924 script code
  static const HAN_WITH_BOPOMOFO = 172;

  /// from: static public final int HARAPPAN_INDUS
  ///
  /// ISO 15924 script code
  static const HARAPPAN_INDUS = 77;

  /// from: static public final int HATRAN
  ///
  /// ISO 15924 script code
  static const HATRAN = 162;

  /// from: static public final int HEBREW
  ///
  /// Hebrew
  static const HEBREW = 19;

  /// from: static public final int HIERATIC_EGYPTIAN
  ///
  /// ISO 15924 script code
  static const HIERATIC_EGYPTIAN = 70;

  /// from: static public final int HIRAGANA
  ///
  /// Hiragana
  static const HIRAGANA = 20;

  /// from: static public final int IMPERIAL_ARAMAIC
  ///
  /// ISO 15924 script code
  static const IMPERIAL_ARAMAIC = 116;

  /// from: static public final int INHERITED
  ///
  /// Inherited
  static const INHERITED = 1;

  /// from: static public final int INSCRIPTIONAL_PAHLAVI
  ///
  /// ISO 15924 script code
  static const INSCRIPTIONAL_PAHLAVI = 122;

  /// from: static public final int INSCRIPTIONAL_PARTHIAN
  ///
  /// ISO 15924 script code
  static const INSCRIPTIONAL_PARTHIAN = 125;

  /// from: static public final int INVALID_CODE
  ///
  /// Invalid code
  static const INVALID_CODE = -1;

  /// from: static public final int JAMO
  ///
  /// ISO 15924 script code
  static const JAMO = 173;

  /// from: static public final int JAPANESE
  ///
  /// ISO 15924 script code
  static const JAPANESE = 105;

  /// from: static public final int JAVANESE
  ///
  /// ISO 15924 script code
  static const JAVANESE = 78;

  /// from: static public final int JURCHEN
  ///
  /// ISO 15924 script code
  static const JURCHEN = 148;

  /// from: static public final int KAITHI
  ///
  /// ISO 15924 script code
  static const KAITHI = 120;

  /// from: static public final int KANNADA
  ///
  /// Kannada
  static const KANNADA = 21;

  /// from: static public final int KATAKANA
  ///
  /// Katakana
  static const KATAKANA = 22;

  /// from: static public final int KATAKANA_OR_HIRAGANA
  ///
  /// Script in Unicode 4.0.1
  static const KATAKANA_OR_HIRAGANA = 54;

  /// from: static public final int KAYAH_LI
  ///
  /// ISO 15924 script code
  static const KAYAH_LI = 79;

  /// from: static public final int KHAROSHTHI
  ///
  /// Script in Unicode 4.1
  static const KHAROSHTHI = 57;

  /// from: static public final int KHMER
  ///
  /// Khmer
  static const KHMER = 23;

  /// from: static public final int KHOJKI
  ///
  /// ISO 15924 script code
  static const KHOJKI = 157;

  /// from: static public final int KHUDAWADI
  ///
  /// ISO 15924 script code
  static const KHUDAWADI = 145;

  /// from: static public final int KHUTSURI
  ///
  /// ISO 15924 script code
  static const KHUTSURI = 72;

  /// from: static public final int KOREAN
  ///
  /// ISO 15924 script code
  static const KOREAN = 119;

  /// from: static public final int KPELLE
  ///
  /// ISO 15924 script code
  static const KPELLE = 138;

  /// from: static public final int LANNA
  ///
  /// ISO 15924 script code
  static const LANNA = 106;

  /// from: static public final int LAO
  ///
  /// Lao
  static const LAO = 24;

  /// from: static public final int LATIN
  ///
  /// Latin
  static const LATIN = 25;

  /// from: static public final int LATIN_FRAKTUR
  ///
  /// ISO 15924 script code
  static const LATIN_FRAKTUR = 80;

  /// from: static public final int LATIN_GAELIC
  ///
  /// ISO 15924 script code
  static const LATIN_GAELIC = 81;

  /// from: static public final int LEPCHA
  ///
  /// ISO 15924 script code
  static const LEPCHA = 82;

  /// from: static public final int LIMBU
  ///
  /// Limbu
  /// Script in Unicode 4
  static const LIMBU = 48;

  /// from: static public final int LINEAR_A
  ///
  /// ISO 15924 script code
  static const LINEAR_A = 83;

  /// from: static public final int LINEAR_B
  ///
  /// Linear B
  /// Script in Unicode 4
  static const LINEAR_B = 49;

  /// from: static public final int LISU
  ///
  /// ISO 15924 script code
  static const LISU = 131;

  /// from: static public final int LOMA
  ///
  /// ISO 15924 script code
  static const LOMA = 139;

  /// from: static public final int LYCIAN
  ///
  /// ISO 15924 script code
  static const LYCIAN = 107;

  /// from: static public final int LYDIAN
  ///
  /// ISO 15924 script code
  static const LYDIAN = 108;

  /// from: static public final int MAHAJANI
  ///
  /// ISO 15924 script code
  static const MAHAJANI = 160;

  /// from: static public final int MALAYALAM
  ///
  /// Malayalam
  static const MALAYALAM = 26;

  /// from: static public final int MANDAEAN
  ///
  /// ISO 15924 script code
  static const MANDAEAN = 84;

  /// from: static public final int MANDAIC
  ///
  /// ISO 15924 script code
  static const MANDAIC = 84;

  /// from: static public final int MANICHAEAN
  ///
  /// ISO 15924 script code
  static const MANICHAEAN = 121;

  /// from: static public final int MARCHEN
  ///
  /// ISO 15924 script code
  static const MARCHEN = 169;

  /// from: static public final int MASARAM_GONDI
  ///
  /// ISO 15924 script code
  static const MASARAM_GONDI = 175;

  /// from: static public final int MATHEMATICAL_NOTATION
  ///
  /// ISO 15924 script code
  static const MATHEMATICAL_NOTATION = 128;

  /// from: static public final int MAYAN_HIEROGLYPHS
  ///
  /// ISO 15924 script code
  static const MAYAN_HIEROGLYPHS = 85;

  /// from: static public final int MEITEI_MAYEK
  ///
  /// ISO 15924 script code
  static const MEITEI_MAYEK = 115;

  /// from: static public final int MENDE
  ///
  /// Mende Kikakui
  /// ISO 15924 script code
  static const MENDE = 140;

  /// from: static public final int MEROITIC
  ///
  /// ISO 15924 script code
  static const MEROITIC = 86;

  /// from: static public final int MEROITIC_CURSIVE
  ///
  /// ISO 15924 script code
  static const MEROITIC_CURSIVE = 141;

  /// from: static public final int MEROITIC_HIEROGLYPHS
  ///
  /// ISO 15924 script code
  static const MEROITIC_HIEROGLYPHS = 86;

  /// from: static public final int MIAO
  ///
  /// ISO 15924 script code
  static const MIAO = 92;

  /// from: static public final int MODI
  ///
  /// ISO 15924 script code
  static const MODI = 163;

  /// from: static public final int MONGOLIAN
  ///
  /// Mangolian
  static const MONGOLIAN = 27;

  /// from: static public final int MOON
  ///
  /// ISO 15924 script code
  static const MOON = 114;

  /// from: static public final int MRO
  ///
  /// ISO 15924 script code
  static const MRO = 149;

  /// from: static public final int MULTANI
  ///
  /// ISO 15924 script code
  static const MULTANI = 164;

  /// from: static public final int MYANMAR
  ///
  /// Myammar
  static const MYANMAR = 28;

  /// from: static public final int NABATAEAN
  ///
  /// ISO 15924 script code
  static const NABATAEAN = 143;

  /// from: static public final int NAKHI_GEBA
  ///
  /// ISO 15924 script code
  static const NAKHI_GEBA = 132;

  /// from: static public final int NEWA
  ///
  /// ISO 15924 script code
  static const NEWA = 170;

  /// from: static public final int NEW_TAI_LUE
  ///
  /// Script in Unicode 4.1
  static const NEW_TAI_LUE = 59;

  /// from: static public final int NKO
  ///
  /// ISO 15924 script code
  static const NKO = 87;

  /// from: static public final int NUSHU
  ///
  /// ISO 15924 script code
  static const NUSHU = 150;

  /// from: static public final int OGHAM
  ///
  /// Ogham
  static const OGHAM = 29;

  /// from: static public final int OLD_CHURCH_SLAVONIC_CYRILLIC
  ///
  /// ISO 15924 script code
  static const OLD_CHURCH_SLAVONIC_CYRILLIC = 68;

  /// from: static public final int OLD_HUNGARIAN
  ///
  /// ISO 15924 script code
  static const OLD_HUNGARIAN = 76;

  /// from: static public final int OLD_ITALIC
  ///
  /// Old Itallic
  static const OLD_ITALIC = 30;

  /// from: static public final int OLD_NORTH_ARABIAN
  ///
  /// ISO 15924 script code
  static const OLD_NORTH_ARABIAN = 142;

  /// from: static public final int OLD_PERMIC
  ///
  /// ISO 15924 script code
  static const OLD_PERMIC = 89;

  /// from: static public final int OLD_PERSIAN
  ///
  /// Script in Unicode 4.1
  static const OLD_PERSIAN = 61;

  /// from: static public final int OLD_SOUTH_ARABIAN
  ///
  /// ISO 15924 script code
  static const OLD_SOUTH_ARABIAN = 133;

  /// from: static public final int OL_CHIKI
  ///
  /// ISO 15924 script code
  static const OL_CHIKI = 109;

  /// from: static public final int ORIYA
  ///
  /// Oriya
  static const ORIYA = 31;

  /// from: static public final int ORKHON
  ///
  /// ISO 15924 script code
  static const ORKHON = 88;

  /// from: static public final int OSAGE
  ///
  /// ISO 15924 script code
  static const OSAGE = 171;

  /// from: static public final int OSMANYA
  ///
  /// Osmanya
  /// Script in Unicode 4
  static const OSMANYA = 50;

  /// from: static public final int PAHAWH_HMONG
  ///
  /// ISO 15924 script code
  static const PAHAWH_HMONG = 75;

  /// from: static public final int PALMYRENE
  ///
  /// ISO 15924 script code
  static const PALMYRENE = 144;

  /// from: static public final int PAU_CIN_HAU
  ///
  /// ISO 15924 script code
  static const PAU_CIN_HAU = 165;

  /// from: static public final int PHAGS_PA
  ///
  /// ISO 15924 script code
  static const PHAGS_PA = 90;

  /// from: static public final int PHOENICIAN
  ///
  /// ISO 15924 script code
  static const PHOENICIAN = 91;

  /// from: static public final int PHONETIC_POLLARD
  ///
  /// ISO 15924 script code
  static const PHONETIC_POLLARD = 92;

  /// from: static public final int PSALTER_PAHLAVI
  ///
  /// ISO 15924 script code
  static const PSALTER_PAHLAVI = 123;

  /// from: static public final int REJANG
  ///
  /// ISO 15924 script code
  static const REJANG = 110;

  /// from: static public final int RONGORONGO
  ///
  /// ISO 15924 script code
  static const RONGORONGO = 93;

  /// from: static public final int RUNIC
  ///
  /// Runic
  static const RUNIC = 32;

  /// from: static public final int SAMARITAN
  ///
  /// ISO 15924 script code
  static const SAMARITAN = 126;

  /// from: static public final int SARATI
  ///
  /// ISO 15924 script code
  static const SARATI = 94;

  /// from: static public final int SAURASHTRA
  ///
  /// ISO 15924 script code
  static const SAURASHTRA = 111;

  /// from: static public final int SHARADA
  ///
  /// ISO 15924 script code
  static const SHARADA = 151;

  /// from: static public final int SHAVIAN
  ///
  /// Shavian
  /// Script in Unicode 4
  static const SHAVIAN = 51;

  /// from: static public final int SIDDHAM
  ///
  /// ISO 15924 script code
  static const SIDDHAM = 166;

  /// from: static public final int SIGN_WRITING
  ///
  /// ISO 15924 script code for Sutton SignWriting
  static const SIGN_WRITING = 112;

  /// from: static public final int SIMPLIFIED_HAN
  ///
  /// ISO 15924 script code
  static const SIMPLIFIED_HAN = 73;

  /// from: static public final int SINDHI
  ///
  /// ISO 15924 script code
  static const SINDHI = 145;

  /// from: static public final int SINHALA
  ///
  /// Sinhala
  static const SINHALA = 33;

  /// from: static public final int SORA_SOMPENG
  ///
  /// ISO 15924 script code
  static const SORA_SOMPENG = 152;

  /// from: static public final int SOYOMBO
  ///
  /// ISO 15924 script code
  static const SOYOMBO = 176;

  /// from: static public final int SUNDANESE
  ///
  /// ISO 15924 script code
  static const SUNDANESE = 113;

  /// from: static public final int SYLOTI_NAGRI
  ///
  /// Script in Unicode 4.1
  static const SYLOTI_NAGRI = 58;

  /// from: static public final int SYMBOLS
  ///
  /// ISO 15924 script code
  static const SYMBOLS = 129;

  /// from: static public final int SYMBOLS_EMOJI
  ///
  /// ISO 15924 script code
  static const SYMBOLS_EMOJI = 174;

  /// from: static public final int SYRIAC
  ///
  /// Syriac
  static const SYRIAC = 34;

  /// from: static public final int TAGALOG
  ///
  /// Tagalog
  static const TAGALOG = 42;

  /// from: static public final int TAGBANWA
  ///
  /// Tagbanwa
  static const TAGBANWA = 45;

  /// from: static public final int TAI_LE
  ///
  /// Tai Le
  /// Script in Unicode 4
  static const TAI_LE = 52;

  /// from: static public final int TAI_VIET
  ///
  /// ISO 15924 script code
  static const TAI_VIET = 127;

  /// from: static public final int TAKRI
  ///
  /// ISO 15924 script code
  static const TAKRI = 153;

  /// from: static public final int TAMIL
  ///
  /// Tamil
  static const TAMIL = 35;

  /// from: static public final int TANGUT
  ///
  /// ISO 15924 script code
  static const TANGUT = 154;

  /// from: static public final int TELUGU
  ///
  /// Telugu
  static const TELUGU = 36;

  /// from: static public final int TENGWAR
  ///
  /// ISO 15924 script code
  static const TENGWAR = 98;

  /// from: static public final int THAANA
  ///
  /// Thana
  static const THAANA = 37;

  /// from: static public final int THAI
  ///
  /// Thai
  static const THAI = 38;

  /// from: static public final int TIBETAN
  ///
  /// Tibetan
  static const TIBETAN = 39;

  /// from: static public final int TIFINAGH
  ///
  /// Script in Unicode 4.1
  static const TIFINAGH = 60;

  /// from: static public final int TIRHUTA
  ///
  /// ISO 15924 script code
  static const TIRHUTA = 158;

  /// from: static public final int TRADITIONAL_HAN
  ///
  /// ISO 15924 script code
  static const TRADITIONAL_HAN = 74;

  /// from: static public final int UCAS
  ///
  /// Unified Canadian Aboriginal Symbols (alias)
  static const UCAS = 40;

  /// from: static public final int UGARITIC
  ///
  /// Ugaritic
  /// Script in Unicode 4
  static const UGARITIC = 53;

  /// from: static public final int UNKNOWN
  ///
  /// ISO 15924 script code
  static const UNKNOWN = 103;

  /// from: static public final int UNWRITTEN_LANGUAGES
  ///
  /// ISO 15924 script code
  static const UNWRITTEN_LANGUAGES = 102;

  /// from: static public final int VAI
  ///
  /// ISO 15924 script code
  static const VAI = 99;

  /// from: static public final int VISIBLE_SPEECH
  ///
  /// ISO 15924 script code
  static const VISIBLE_SPEECH = 100;

  /// from: static public final int WARANG_CITI
  ///
  /// ISO 15924 script code
  static const WARANG_CITI = 146;

  /// from: static public final int WESTERN_SYRIAC
  ///
  /// ISO 15924 script code
  static const WESTERN_SYRIAC = 96;

  /// from: static public final int WOLEAI
  ///
  /// ISO 15924 script code
  static const WOLEAI = 155;

  /// from: static public final int YI
  ///
  /// Yi syllables
  static const YI = 41;

  /// from: static public final int ZANABAZAR_SQUARE
  ///
  /// ISO 15924 script code
  static const ZANABAZAR_SQUARE = 177;

  static final _id_getCode = jniAccessors.getStaticMethodIDOf(
      _classRef, "getCode", "(Ljava/util/Locale;)[I");

  /// from: static public int[] getCode(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a script codes associated with the given locale or ISO 15924 abbreviation or name.
  /// Returns MALAYAM given "Malayam" OR "Mlym".
  /// Returns LATIN given "en" OR "en_US"
  ///@param locale Locale
  ///@return The script codes array. null if the the code cannot be found.
  static jni.JniObject getCode(jni.JniObject locale) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getCode, jni.JniType.objectType, [locale.reference]).object);

  static final _id_getCode1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getCode", "(Landroid/icu/util/ULocale;)[I");

  /// from: static public int[] getCode(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a script codes associated with the given locale or ISO 15924 abbreviation or name.
  /// Returns MALAYAM given "Malayam" OR "Mlym".
  /// Returns LATIN given "en" OR "en_US"
  ///@param locale ULocale
  ///@return The script codes array. null if the the code cannot be found.
  static jni.JniObject getCode1(ulocale_.ULocale locale) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getCode1, jni.JniType.objectType, [locale.reference]).object);

  static final _id_getCode2 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getCode", "(Ljava/lang/String;)[I");

  /// from: static public int[] getCode(java.lang.String nameOrAbbrOrLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the script codes associated with the given locale or ISO 15924 abbreviation or name.
  /// Returns MALAYAM given "Malayam" OR "Mlym".
  /// Returns LATIN given "en" OR "en_US"
  ///
  /// Note: To search by short or long script alias only, use
  /// \#getCodeFromName(String) instead.
  /// That does a fast lookup with no access of the locale data.
  ///@param nameOrAbbrOrLocale name of the script or ISO 15924 code or locale
  ///@return The script codes array. null if the the code cannot be found.
  static jni.JniObject getCode2(jni.JniString nameOrAbbrOrLocale) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getCode2,
          jni.JniType.objectType,
          [nameOrAbbrOrLocale.reference]).object);

  static final _id_getCodeFromName = jniAccessors.getStaticMethodIDOf(
      _classRef, "getCodeFromName", "(Ljava/lang/String;)I");

  /// from: static public int getCodeFromName(java.lang.String nameOrAbbr)
  ///
  /// Returns the script code associated with the given Unicode script property alias
  /// (name or abbreviation).
  /// Short aliases are ISO 15924 script codes.
  /// Returns MALAYAM given "Malayam" OR "Mlym".
  ///@param nameOrAbbr name of the script or ISO 15924 code
  ///@return The script code value, or INVALID_CODE if the code cannot be found.
  static int getCodeFromName(jni.JniString nameOrAbbr) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getCodeFromName,
          jni.JniType.intType, [nameOrAbbr.reference]).integer;

  static final _id_getScript =
      jniAccessors.getStaticMethodIDOf(_classRef, "getScript", "(I)I");

  /// from: static public int getScript(int codepoint)
  ///
  /// Gets the script code associated with the given codepoint.
  /// Returns UScript.MALAYAM given 0x0D02
  ///@param codepoint UChar32 codepoint
  ///@return The script code
  static int getScript(int codepoint) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_getScript, jni.JniType.intType, [codepoint]).integer;

  static final _id_hasScript =
      jniAccessors.getStaticMethodIDOf(_classRef, "hasScript", "(II)Z");

  /// from: static public boolean hasScript(int c, int sc)
  ///
  /// Do the Script_Extensions of code point c contain script sc?
  /// If c does not have explicit Script_Extensions, then this tests whether
  /// c has the Script property value sc.
  ///
  /// Some characters are commonly used in multiple scripts.
  /// For more information, see UAX \#24: http://www.unicode.org/reports/tr24/.
  ///@param c code point
  ///@param sc script code
  ///@return true if sc is in Script_Extensions(c)
  static bool hasScript(int c, int sc) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_hasScript, jni.JniType.booleanType, [c, sc]).boolean;

  static final _id_getScriptExtensions = jniAccessors.getStaticMethodIDOf(
      _classRef, "getScriptExtensions", "(ILjava/util/BitSet;)I");

  /// from: static public int getScriptExtensions(int c, java.util.BitSet set)
  ///
  /// Sets code point c's Script_Extensions as script code integers into the output BitSet.
  /// <ul>
  /// <li>If c does have Script_Extensions, then the return value is
  /// the negative number of Script_Extensions codes (= -set.cardinality());
  /// in this case, the Script property value
  /// (normally Common or Inherited) is not included in the set.
  /// <li>If c does not have Script_Extensions, then the one Script code is put into the set
  /// and also returned.
  /// <li>If c is not a valid code point, then the one \#UNKNOWN code is put into the set
  /// and also returned.
  /// </ul>
  /// In other words, if the return value is non-negative, it is c's single Script code
  /// and the set contains exactly this Script code.
  /// If the return value is -n, then the set contains c's n&gt;=2 Script_Extensions script codes.
  ///
  /// Some characters are commonly used in multiple scripts.
  /// For more information, see UAX \#24: http://www.unicode.org/reports/tr24/.
  ///@param c code point
  ///@param set set of script code integers; will be cleared, then bits are set
  ///            corresponding to c's Script_Extensions
  ///@return negative number of script codes in c's Script_Extensions,
  ///         or the non-negative single Script value
  static int getScriptExtensions(int c, jni.JniObject set0) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getScriptExtensions,
          jni.JniType.intType, [c, set0.reference]).integer;

  static final _id_getName = jniAccessors.getStaticMethodIDOf(
      _classRef, "getName", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String getName(int scriptCode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the long Unicode script name, if there is one.
  /// Otherwise returns the 4-letter ISO 15924 script code.
  /// Returns "Malayam" given MALAYALAM.
  ///@param scriptCode int script code
  ///@return long script name as given in PropertyValueAliases.txt, or the 4-letter code
  ///@throws IllegalArgumentException if the script code is not valid
  static jni.JniString getName(int scriptCode) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getName, jni.JniType.objectType, [scriptCode]).object);

  static final _id_getShortName = jniAccessors.getStaticMethodIDOf(
      _classRef, "getShortName", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String getShortName(int scriptCode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the 4-letter ISO 15924 script code,
  /// which is the same as the short Unicode script name if Unicode has names for the script.
  /// Returns "Mlym" given MALAYALAM.
  ///@param scriptCode int script code
  ///@return short script name (4-letter code)
  ///@throws IllegalArgumentException if the script code is not valid
  static jni.JniString getShortName(int scriptCode) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getShortName, jni.JniType.objectType, [scriptCode]).object);

  static final _id_getSampleString = jniAccessors.getStaticMethodIDOf(
      _classRef, "getSampleString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String getSampleString(int script)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the script sample character string.
  /// This string normally consists of one code point but might be longer.
  /// The string is empty if the script is not encoded.
  ///@param script script code
  ///@return the sample character string
  static jni.JniString getSampleString(int script) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getSampleString, jni.JniType.objectType, [script]).object);

  static final _id_getUsage = jniAccessors.getStaticMethodIDOf(
      _classRef, "getUsage", "(I)Landroid/icu/lang/UScript\$ScriptUsage;");

  /// from: static public android.icu.lang.UScript.ScriptUsage getUsage(int script)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the script usage according to UAX \#31 Unicode Identifier and Pattern Syntax.
  /// Returns ScriptUsage\#NOT_ENCODED if the script is not encoded in Unicode.
  ///@param script script code
  ///@return script usage
  ///@see ScriptUsage
  static UScript_ScriptUsage getUsage(int script) =>
      UScript_ScriptUsage.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getUsage, jni.JniType.objectType, [script]).object);

  static final _id_isRightToLeft =
      jniAccessors.getStaticMethodIDOf(_classRef, "isRightToLeft", "(I)Z");

  /// from: static public boolean isRightToLeft(int script)
  ///
  /// Returns true if the script is written right-to-left.
  /// For example, Arab and Hebr.
  ///@param script script code
  ///@return true if the script is right-to-left
  static bool isRightToLeft(int script) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_isRightToLeft,
          jni.JniType.booleanType, [script]).boolean;

  static final _id_breaksBetweenLetters = jniAccessors.getStaticMethodIDOf(
      _classRef, "breaksBetweenLetters", "(I)Z");

  /// from: static public boolean breaksBetweenLetters(int script)
  ///
  /// Returns true if the script allows line breaks between letters (excluding hyphenation).
  /// Such a script typically requires dictionary-based line breaking.
  /// For example, Hani and Thai.
  ///@param script script code
  ///@return true if the script allows line breaks between letters
  static bool breaksBetweenLetters(int script) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_breaksBetweenLetters,
          jni.JniType.booleanType, [script]).boolean;

  static final _id_isCased =
      jniAccessors.getStaticMethodIDOf(_classRef, "isCased", "(I)Z");

  /// from: static public boolean isCased(int script)
  ///
  /// Returns true if in modern (or most recent) usage of the script case distinctions are customary.
  /// For example, Latn and Cyrl.
  ///@param script script code
  ///@return true if the script is cased
  static bool isCased(int script) => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_isCased, jni.JniType.booleanType, [script]).boolean;
}

/// from: android.icu.lang.UScript$ScriptUsage
///
/// Script usage constants.
/// See UAX \#31 Unicode Identifier and Pattern Syntax.
/// http://www.unicode.org/reports/tr31/\#Table_Candidate_Characters_for_Exclusion_from_Identifiers
class UScript_ScriptUsage extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/lang/UScript\$ScriptUsage");
  UScript_ScriptUsage.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/icu/lang/UScript\$ScriptUsage;");

  /// from: static public android.icu.lang.UScript.ScriptUsage[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(_classRef,
      "valueOf", "(Ljava/lang/String;)Landroid/icu/lang/UScript\$ScriptUsage;");

  /// from: static public android.icu.lang.UScript.ScriptUsage valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static UScript_ScriptUsage valueOf(jni.JniString name) =>
      UScript_ScriptUsage.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);
}
