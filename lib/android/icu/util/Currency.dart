// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "MeasureUnit.dart" as measureunit_;

import "ULocale.dart" as ulocale_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.util.Currency
///
/// A class encapsulating a currency, as defined by ISO 4217.  A
/// <tt>Currency</tt> object can be created given a <tt>Locale</tt> or
/// given an ISO 4217 code.  Once created, the <tt>Currency</tt> object
/// can return various data necessary to its proper display:
///
/// <ul><li>A display symbol, for a specific locale
/// <li>The number of fraction digits to display
/// <li>A rounding increment
/// </ul>
///
/// The <tt>DecimalFormat</tt> class uses these data to display
/// currencies.
///
/// Note: This class deliberately resembles
/// <tt>java.util.Currency</tt> but it has a completely independent
/// implementation, and adds features not present in the JDK.
///@author Alan Liu
class Currency extends measureunit_.MeasureUnit {
  static final _classRef = jniAccessors.getClassOf("android/icu/util/Currency");
  Currency.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int LONG_NAME
  ///
  /// Selector for getName() indicating the long name for a
  /// currency, such as "US Dollar" for USD.
  static const LONG_NAME = 1;

  /// from: static public final int PLURAL_LONG_NAME
  ///
  /// Selector for getName() indicating the plural long name for a
  /// currency, such as "US dollar" for USD in "1 US dollar",
  /// and "US dollars" for USD in "2 US dollars".
  static const PLURAL_LONG_NAME = 2;

  /// from: static public final int SYMBOL_NAME
  ///
  /// Selector for getName() indicating a symbolic name for a
  /// currency, such as "$" for USD.
  static const SYMBOL_NAME = 0;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: protected void <init>(java.lang.String theISOCode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a currency object for the given ISO 4217 3-letter
  /// code.  This constructor assumes that the code is valid.
  ///@param theISOCode The iso code used to construct the currency.
  Currency(jni.JniString theISOCode)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [theISOCode.reference]).object);

  static final _id_getInstance = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInstance", "(Ljava/util/Locale;)Landroid/icu/util/Currency;");

  /// from: static public android.icu.util.Currency getInstance(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a currency object for the default currency in the given
  /// locale.
  ///@param locale the locale
  ///@return the currency object for this locale
  static Currency getInstance(jni.JniObject locale) =>
      Currency.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getInstance, jni.JniType.objectType, [locale.reference]).object);

  static final _id_getInstance1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInstance", "(Landroid/icu/util/ULocale;)Landroid/icu/util/Currency;");

  /// from: static public android.icu.util.Currency getInstance(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a currency object for the default currency in the given
  /// locale.
  static Currency getInstance1(ulocale_.ULocale locale) =>
      Currency.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getInstance1, jni.JniType.objectType, [locale.reference]).object);

  static final _id_getAvailableCurrencyCodes = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getAvailableCurrencyCodes",
      "(Landroid/icu/util/ULocale;Ljava/util/Date;)[Ljava/lang/String;");

  /// from: static public java.lang.String[] getAvailableCurrencyCodes(android.icu.util.ULocale loc, java.util.Date d)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an array of Strings which contain the currency
  /// identifiers that are valid for the given locale on the
  /// given date.  If there are no such identifiers, returns null.
  /// Returned identifiers are in preference order.
  ///@param loc the locale for which to retrieve currency codes.
  ///@param d the date for which to retrieve currency codes for the given locale.
  ///@return The array of ISO currency codes.
  static jni.JniObject getAvailableCurrencyCodes(
          ulocale_.ULocale loc, jni.JniObject d) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getAvailableCurrencyCodes,
          jni.JniType.objectType,
          [loc.reference, d.reference]).object);

  static final _id_getAvailableCurrencyCodes1 =
      jniAccessors.getStaticMethodIDOf(_classRef, "getAvailableCurrencyCodes",
          "(Ljava/util/Locale;Ljava/util/Date;)[Ljava/lang/String;");

  /// from: static public java.lang.String[] getAvailableCurrencyCodes(java.util.Locale loc, java.util.Date d)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an array of Strings which contain the currency
  /// identifiers that are valid for the given java.util.Locale on the
  /// given date.  If there are no such identifiers, returns null.
  /// Returned identifiers are in preference order.
  ///@param loc the java.util.Locale for which to retrieve currency codes.
  ///@param d the date for which to retrieve currency codes for the given locale.
  ///@return The array of ISO currency codes.
  static jni.JniObject getAvailableCurrencyCodes1(
          jni.JniObject loc, jni.JniObject d) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getAvailableCurrencyCodes1,
          jni.JniType.objectType,
          [loc.reference, d.reference]).object);

  static final _id_getAvailableCurrencies = jniAccessors.getStaticMethodIDOf(
      _classRef, "getAvailableCurrencies", "()Ljava/util/Set;");

  /// from: static public java.util.Set<android.icu.util.Currency> getAvailableCurrencies()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the set of available currencies. The returned set of currencies contains all of the
  /// available currencies, including obsolete ones. The result set can be modified without
  /// affecting the available currencies in the runtime.
  ///@return The set of available currencies. The returned set could be empty if there is no
  /// currency data available.
  static jni.JniObject getAvailableCurrencies() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getAvailableCurrencies, jni.JniType.objectType, []).object);

  static final _id_getInstance2 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInstance", "(Ljava/lang/String;)Landroid/icu/util/Currency;");

  /// from: static public android.icu.util.Currency getInstance(java.lang.String theISOCode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a currency object given an ISO 4217 3-letter code.
  ///@param theISOCode the iso code
  ///@return the currency for this iso code
  ///@throws NullPointerException if <code>theISOCode</code> is null.
  ///@throws IllegalArgumentException if <code>theISOCode</code> is not a
  ///         3-letter alpha code.
  static Currency getInstance2(jni.JniString theISOCode) =>
      Currency.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getInstance2,
          jni.JniType.objectType,
          [theISOCode.reference]).object);

  static final _id_getAvailableLocales = jniAccessors.getStaticMethodIDOf(
      _classRef, "getAvailableLocales", "()[Ljava/util/Locale;");

  /// from: static public java.util.Locale[] getAvailableLocales()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an array of the locales for which a currency
  /// is defined.
  ///@return an array of the available locales
  static jni.JniObject getAvailableLocales() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getAvailableLocales, jni.JniType.objectType, []).object);

  static final _id_getAvailableULocales = jniAccessors.getStaticMethodIDOf(
      _classRef, "getAvailableULocales", "()[Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale[] getAvailableULocales()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an array of the ulocales for which a currency
  /// is defined.
  ///@return an array of the available ulocales
  static jni.JniObject getAvailableULocales() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getAvailableULocales, jni.JniType.objectType, []).object);

  static final _id_getKeywordValuesForLocale = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getKeywordValuesForLocale",
      "(Ljava/lang/String;Landroid/icu/util/ULocale;Z)[Ljava/lang/String;");

  /// from: static public final java.lang.String[] getKeywordValuesForLocale(java.lang.String key, android.icu.util.ULocale locale, boolean commonlyUsed)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Given a key and a locale, returns an array of values for the key for which data
  /// exists.  If commonlyUsed is true, these are the values that typically are used
  /// with this locale, otherwise these are all values for which data exists.
  /// This is a common service API.
  ///
  /// The only supported key is "currency", other values return an empty array.
  ///
  /// Currency information is based on the region of the locale.  If the locale does not
  /// indicate a region, ULocale\#addLikelySubtags(ULocale) is used to infer a region,
  /// except for the 'und' locale.
  ///
  /// If commonlyUsed is true, only the currencies known to be in use as of the current date
  /// are returned.  When there are more than one, these are returned in preference order
  /// (typically, this occurs when a country is transitioning to a new currency, and the
  /// newer currency is preferred), see
  /// <a href="http://unicode.org/reports/tr35/\#Supplemental_Currency_Data">Unicode TR\#35 Sec. C1</a>.
  /// If commonlyUsed is false, all currencies ever used in any locale are returned, in no
  /// particular order.
  ///@param key key whose values to look up.  the only recognized key is "currency"
  ///@param locale the locale
  ///@param commonlyUsed if true, return only values that are currently used in the locale.
  ///                      Otherwise returns all values.
  ///@return an array of values for the given key and the locale.  If there is no data, the
  ///   array will be empty.
  static jni.JniObject getKeywordValuesForLocale(
          jni.JniString key, ulocale_.ULocale locale, bool commonlyUsed) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getKeywordValuesForLocale,
          jni.JniType.objectType,
          [key.reference, locale.reference, commonlyUsed]).object);

  static final _id_getCurrencyCode = jniAccessors.getMethodIDOf(
      _classRef, "getCurrencyCode", "()Ljava/lang/String;");

  /// from: public java.lang.String getCurrencyCode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the ISO 4217 3-letter code for this currency object.
  jni.JniString getCurrencyCode() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCurrencyCode, jni.JniType.objectType, []).object);

  static final _id_getNumericCode =
      jniAccessors.getMethodIDOf(_classRef, "getNumericCode", "()I");

  /// from: public int getNumericCode()
  ///
  /// Returns the ISO 4217 numeric code for this currency object.
  /// Note: If the ISO 4217 numeric code is not assigned for the currency or
  /// the currency is unknown, this method returns 0.
  ///
  ///@return The ISO 4217 numeric code of this currency.
  int getNumericCode() => jniAccessors.callMethodWithArgs(
      reference, _id_getNumericCode, jni.JniType.intType, []).integer;

  static final _id_getSymbol = jniAccessors.getMethodIDOf(
      _classRef, "getSymbol", "()Ljava/lang/String;");

  /// from: public java.lang.String getSymbol()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience and compatibility override of getName that
  /// requests the symbol name for the default <code>DISPLAY</code> locale.
  ///@see \#getName
  ///@see Category\#DISPLAY
  jni.JniString getSymbol() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSymbol, jni.JniType.objectType, []).object);

  static final _id_getSymbol1 = jniAccessors.getMethodIDOf(
      _classRef, "getSymbol", "(Ljava/util/Locale;)Ljava/lang/String;");

  /// from: public java.lang.String getSymbol(java.util.Locale loc)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience and compatibility override of getName that
  /// requests the symbol name.
  ///@param loc the Locale for the symbol
  ///@see \#getName
  jni.JniString getSymbol1(jni.JniObject loc) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSymbol1, jni.JniType.objectType, [loc.reference]).object);

  static final _id_getSymbol2 = jniAccessors.getMethodIDOf(
      _classRef, "getSymbol", "(Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: public java.lang.String getSymbol(android.icu.util.ULocale uloc)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience and compatibility override of getName that
  /// requests the symbol name.
  ///@param uloc the ULocale for the symbol
  ///@see \#getName
  jni.JniString getSymbol2(ulocale_.ULocale uloc) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSymbol2, jni.JniType.objectType, [uloc.reference]).object);

  static final _id_getName = jniAccessors.getMethodIDOf(
      _classRef, "getName", "(Ljava/util/Locale;I[Z)Ljava/lang/String;");

  /// from: public java.lang.String getName(java.util.Locale locale, int nameStyle, boolean[] isChoiceFormat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name for the given currency in the
  /// given locale.
  /// This is a convenient method for
  /// getName(ULocale, int, boolean[]);
  jni.JniString getName(
          jni.JniObject locale, int nameStyle, jni.JniObject isChoiceFormat) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getName,
          jni.JniType.objectType,
          [locale.reference, nameStyle, isChoiceFormat.reference]).object);

  static final _id_getName1 = jniAccessors.getMethodIDOf(_classRef, "getName",
      "(Landroid/icu/util/ULocale;I[Z)Ljava/lang/String;");

  /// from: public java.lang.String getName(android.icu.util.ULocale locale, int nameStyle, boolean[] isChoiceFormat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name for the given currency in the
  /// given locale.  For example, the display name for the USD
  /// currency object in the en_US locale is "$".
  ///@param locale locale in which to display currency
  ///@param nameStyle selector for which kind of name to return.
  ///                  The nameStyle should be either SYMBOL_NAME or
  ///                  LONG_NAME. Otherwise, throw IllegalArgumentException.
  ///@param isChoiceFormat fill-in; isChoiceFormat[0] is set to true
  /// if the returned value is a ChoiceFormat pattern; otherwise it
  /// is set to false
  ///@return display string for this currency.  If the resource data
  /// contains no entry for this currency, then the ISO 4217 code is
  /// returned.  If isChoiceFormat[0] is true, then the result is a
  /// ChoiceFormat pattern.  Otherwise it is a static string. __Note:__
  /// as of ICU 4.4, choice formats are not used, and the value returned
  /// in isChoiceFormat is always false.
  ///
  ///@throws IllegalArgumentException if the nameStyle is not SYMBOL_NAME
  ///                                    or LONG_NAME.
  ///@see \#getName(ULocale, int, String, boolean[])
  jni.JniString getName1(ulocale_.ULocale locale, int nameStyle,
          jni.JniObject isChoiceFormat) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getName1,
          jni.JniType.objectType,
          [locale.reference, nameStyle, isChoiceFormat.reference]).object);

  static final _id_getName2 = jniAccessors.getMethodIDOf(_classRef, "getName",
      "(Ljava/util/Locale;ILjava/lang/String;[Z)Ljava/lang/String;");

  /// from: public java.lang.String getName(java.util.Locale locale, int nameStyle, java.lang.String pluralCount, boolean[] isChoiceFormat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name for the given currency in the given locale.
  /// This is a convenience overload of getName(ULocale, int, String, boolean[]);
  jni.JniString getName2(jni.JniObject locale, int nameStyle,
          jni.JniString pluralCount, jni.JniObject isChoiceFormat) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName2, jni.JniType.objectType, [
        locale.reference,
        nameStyle,
        pluralCount.reference,
        isChoiceFormat.reference
      ]).object);

  static final _id_getName3 = jniAccessors.getMethodIDOf(_classRef, "getName",
      "(Landroid/icu/util/ULocale;ILjava/lang/String;[Z)Ljava/lang/String;");

  /// from: public java.lang.String getName(android.icu.util.ULocale locale, int nameStyle, java.lang.String pluralCount, boolean[] isChoiceFormat)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name for the given currency in the
  /// given locale.  For example, the SYMBOL_NAME for the USD
  /// currency object in the en_US locale is "$".
  /// The PLURAL_LONG_NAME for the USD currency object when the currency
  /// amount is plural is "US dollars", such as in "3.00 US dollars";
  /// while the PLURAL_LONG_NAME for the USD currency object when the currency
  /// amount is singular is "US dollar", such as in "1.00 US dollar".
  ///@param locale locale in which to display currency
  ///@param nameStyle selector for which kind of name to return
  ///@param pluralCount plural count string for this locale
  ///@param isChoiceFormat fill-in; isChoiceFormat[0] is set to true
  /// if the returned value is a ChoiceFormat pattern; otherwise it
  /// is set to false
  ///@return display string for this currency.  If the resource data
  /// contains no entry for this currency, then the ISO 4217 code is
  /// returned.  If isChoiceFormat[0] is true, then the result is a
  /// ChoiceFormat pattern.  Otherwise it is a static string. __Note:__
  /// as of ICU 4.4, choice formats are not used, and the value returned
  /// in isChoiceFormat is always false.
  ///@throws IllegalArgumentException if the nameStyle is not SYMBOL_NAME,
  ///                                    LONG_NAME, or PLURAL_LONG_NAME.
  jni.JniString getName3(ulocale_.ULocale locale, int nameStyle,
          jni.JniString pluralCount, jni.JniObject isChoiceFormat) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName3, jni.JniType.objectType, [
        locale.reference,
        nameStyle,
        pluralCount.reference,
        isChoiceFormat.reference
      ]).object);

  static final _id_getDisplayName = jniAccessors.getMethodIDOf(
      _classRef, "getDisplayName", "()Ljava/lang/String;");

  /// from: public java.lang.String getDisplayName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name for this currency in the default locale.
  /// If the resource data for the default locale contains no entry for this currency,
  /// then the ISO 4217 code is returned.
  ///
  /// Note: This method is a convenience equivalent for
  /// java.util.Currency\#getDisplayName() and is equivalent to
  /// <code>getName(Locale.getDefault(), LONG_NAME, null)</code>.
  ///@return The display name of this currency
  ///@see \#getDisplayName(Locale)
  ///@see \#getName(Locale, int, boolean[])
  jni.JniString getDisplayName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDisplayName, jni.JniType.objectType, []).object);

  static final _id_getDisplayName1 = jniAccessors.getMethodIDOf(
      _classRef, "getDisplayName", "(Ljava/util/Locale;)Ljava/lang/String;");

  /// from: public java.lang.String getDisplayName(java.util.Locale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the display name for this currency in the given locale.
  /// If the resource data for the given locale contains no entry for this currency,
  /// then the ISO 4217 code is returned.
  ///
  /// Note: This method is a convenience equivalent for
  /// java.util.Currency\#getDisplayName(java.util.Locale) and is equivalent
  /// to <code>getName(locale, LONG_NAME, null)</code>.
  ///@param locale locale in which to display currency
  ///@return The display name of this currency for the specified locale
  ///@see \#getDisplayName(Locale)
  ///@see \#getName(Locale, int, boolean[])
  jni.JniString getDisplayName1(jni.JniObject locale) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayName1,
          jni.JniType.objectType,
          [locale.reference]).object);

  static final _id_getDefaultFractionDigits =
      jniAccessors.getMethodIDOf(_classRef, "getDefaultFractionDigits", "()I");

  /// from: public int getDefaultFractionDigits()
  ///
  /// Returns the number of the number of fraction digits that should
  /// be displayed for this currency.
  /// This is equivalent to getDefaultFractionDigits(CurrencyUsage.STANDARD);
  ///@return a non-negative number of fraction digits to be
  /// displayed
  int getDefaultFractionDigits() => jniAccessors.callMethodWithArgs(
      reference, _id_getDefaultFractionDigits, jni.JniType.intType, []).integer;

  static final _id_getDefaultFractionDigits1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getDefaultFractionDigits",
      "(Landroid/icu/util/Currency\$CurrencyUsage;)I");

  /// from: public int getDefaultFractionDigits(android.icu.util.Currency.CurrencyUsage Usage)
  ///
  /// Returns the number of the number of fraction digits that should
  /// be displayed for this currency with Usage.
  ///@param Usage the usage of currency(Standard or Cash)
  ///@return a non-negative number of fraction digits to be
  /// displayed
  int getDefaultFractionDigits1(Currency_CurrencyUsage Usage) =>
      jniAccessors.callMethodWithArgs(reference, _id_getDefaultFractionDigits1,
          jni.JniType.intType, [Usage.reference]).integer;

  static final _id_getRoundingIncrement =
      jniAccessors.getMethodIDOf(_classRef, "getRoundingIncrement", "()D");

  /// from: public double getRoundingIncrement()
  ///
  /// Returns the rounding increment for this currency, or 0.0 if no
  /// rounding is done by this currency.
  /// This is equivalent to getRoundingIncrement(CurrencyUsage.STANDARD);
  ///@return the non-negative rounding increment, or 0.0 if none
  double getRoundingIncrement() => jniAccessors.callMethodWithArgs(reference,
      _id_getRoundingIncrement, jni.JniType.doubleType, []).doubleFloat;

  static final _id_getRoundingIncrement1 = jniAccessors.getMethodIDOf(_classRef,
      "getRoundingIncrement", "(Landroid/icu/util/Currency\$CurrencyUsage;)D");

  /// from: public double getRoundingIncrement(android.icu.util.Currency.CurrencyUsage Usage)
  ///
  /// Returns the rounding increment for this currency, or 0.0 if no
  /// rounding is done by this currency with the Usage.
  ///@param Usage the usage of currency(Standard or Cash)
  ///@return the non-negative rounding increment, or 0.0 if none
  double getRoundingIncrement1(Currency_CurrencyUsage Usage) =>
      jniAccessors.callMethodWithArgs(reference, _id_getRoundingIncrement1,
          jni.JniType.doubleType, [Usage.reference]).doubleFloat;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the ISO 4217 code for this currency.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_isAvailable = jniAccessors.getStaticMethodIDOf(_classRef,
      "isAvailable", "(Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;)Z");

  /// from: static public boolean isAvailable(java.lang.String code, java.util.Date from, java.util.Date to)
  ///
  /// Queries if the given ISO 4217 3-letter code is available on the specified date range.
  ///
  /// Note: For checking availability of a currency on a specific date, specify the date on both <code>from</code> and
  /// <code>to</code>. When both <code>from</code> and <code>to</code> are null, this method checks if the specified
  /// currency is available all time.
  ///@param code The ISO 4217 3-letter code.
  ///@param from The lower bound of the date range, inclusive. When <code>from</code> is null, check the availability
  ///            of the currency any date before <code>to</code>
  ///@param to The upper bound of the date range, inclusive. When <code>to</code> is null, check the availability of
  ///            the currency any date after <code>from</code>
  ///@return true if the given ISO 4217 3-letter code is supported on the specified date range.
  ///@throws IllegalArgumentException when <code>to</code> is before <code>from</code>.
  static bool isAvailable(
          jni.JniString code, jni.JniObject from, jni.JniObject to) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_isAvailable,
          jni.JniType.booleanType,
          [code.reference, from.reference, to.reference]).boolean;
}

/// from: android.icu.util.Currency$CurrencyUsage
///
/// Currency Usage used for Decimal Format
class Currency_CurrencyUsage extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/util/Currency\$CurrencyUsage");
  Currency_CurrencyUsage.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/icu/util/Currency\$CurrencyUsage;");

  /// from: static public android.icu.util.Currency.CurrencyUsage[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/util/Currency\$CurrencyUsage;");

  /// from: static public android.icu.util.Currency.CurrencyUsage valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Currency_CurrencyUsage valueOf(jni.JniString name) =>
      Currency_CurrencyUsage.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_valueOf,
          jni.JniType.objectType,
          [name.reference]).object);
}
