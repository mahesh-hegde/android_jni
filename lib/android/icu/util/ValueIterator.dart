// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.util.ValueIterator
///
/// Interface for enabling iteration over sets of &lt;int, Object&gt;, where
/// int is the sorted integer index in ascending order, and Object its
/// associated value.
/// The ValueIterator allows iterations over integer indexes in the range
/// of Integer.MIN_VALUE to Integer.MAX_VALUE inclusive. Implementations of
/// ValueIterator should specify their own maximum subrange within the above
/// range that is meaningful to its applications.
/// Most implementations will be created by factory methods, such as the
/// character name iterator in UCharacter.getNameIterator. See example below.
///
/// Example of use:<br>
/// <pre>
/// ValueIterator iterator = UCharacter.getNameIterator();
/// ValueIterator.Element result = new ValueIterator.Element();
/// iterator.setRange(UCharacter.MIN_VALUE, UCharacter.MAX_VALUE);
/// while (iterator.next(result)) {
///     System.out.println("Codepoint \\u" +
///                        Integer.toHexString(result.integer) +
///                        " has the character name " + (String)result.value);
/// }
/// </pre>
///@author synwee
class ValueIterator extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/util/ValueIterator");
  ValueIterator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_next = jniAccessors.getMethodIDOf(
      _classRef, "next", "(Landroid/icu/util/ValueIterator\$Element;)Z");

  /// from: public abstract boolean next(android.icu.util.ValueIterator.Element element)
  ///
  /// Returns the next result for this iteration and returns
  /// true if we are not at the end of the iteration, false otherwise.
  /// If this returns a false, the contents of elements will not
  /// be updated.
  ///@param element for storing the result index and value
  ///@return true if we are not at the end of the iteration, false otherwise.
  ///@see Element
  bool next(ValueIterator_Element element) => jniAccessors.callMethodWithArgs(
      reference,
      _id_next,
      jni.JniType.booleanType,
      [element.reference]).boolean;

  static final _id_reset =
      jniAccessors.getMethodIDOf(_classRef, "reset", "()V");

  /// from: public abstract void reset()
  ///
  /// Resets the iterator to start iterating from the integer index
  /// Integer.MIN_VALUE or X if a setRange(X, Y) has been called previously.
  void reset() => jniAccessors.callMethodWithArgs(
      reference, _id_reset, jni.JniType.voidType, []).check();

  static final _id_setRange =
      jniAccessors.getMethodIDOf(_classRef, "setRange", "(II)V");

  /// from: public abstract void setRange(int start, int limit)
  ///
  /// Restricts the range of integers to iterate and resets the iteration
  /// to begin at the index argument start.
  /// If setRange(start, end) is not performed before next(element) is
  /// called, the iteration will start from the integer index
  /// Integer.MIN_VALUE and end at Integer.MAX_VALUE.
  ///
  /// If this range is set outside the meaningful range specified by the
  /// implementation, next(element) will always return false.
  ///@param start first integer in the range to iterate
  ///@param limit one more than the last integer in the range
  ///@exception IllegalArgumentException thrown when attempting to set an
  ///            illegal range. E.g limit &lt;= start
  void setRange(int start, int limit) => jniAccessors.callMethodWithArgs(
      reference, _id_setRange, jni.JniType.voidType, [start, limit]).check();
}

/// from: android.icu.util.ValueIterator$Element
///
/// The return result container of each iteration. Stores the next
/// integer index and its associated value Object.
class ValueIterator_Element extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/util/ValueIterator\$Element");
  ValueIterator_Element.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_integer =
      jniAccessors.getFieldIDOf(_classRef, "integer", "I");

  /// from: public int integer
  ///
  /// Integer index of the current iteration
  int get integer => jniAccessors
      .getField(reference, _id_integer, jni.JniType.intType)
      .integer;

  /// from: public int integer
  ///
  /// Integer index of the current iteration
  set integer(int value) => jniEnv.SetIntField(reference, _id_integer, value);

  static final _id_value =
      jniAccessors.getFieldIDOf(_classRef, "value", "Ljava/lang/Object;");

  /// from: public java.lang.Object value
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the Object value associated with the integer index.
  jni.JniObject get value => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_value, jni.JniType.objectType)
      .object);

  /// from: public java.lang.Object value
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the Object value associated with the integer index.
  set value(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_value, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Empty default constructor to make javadoc happy
  ValueIterator_Element()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
