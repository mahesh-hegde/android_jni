// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Calendar.dart" as calendar_;

import "TimeZone.dart" as timezone_;

import "ULocale.dart" as ulocale_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.util.IslamicCalendar
///
/// <code>IslamicCalendar</code> is a subclass of <code>Calendar</code>
/// that that implements the Islamic civil and religious calendars.  It
/// is used as the civil calendar in most of the Arab world and the
/// liturgical calendar of the Islamic faith worldwide.  This calendar
/// is also known as the "Hijri" calendar, since it starts at the time
/// of Mohammed's emigration (or "hijra") to Medinah on Thursday,
/// July 15, 622 AD (Julian).
///
/// The Islamic calendar is strictly lunar, and thus an Islamic year of twelve
/// lunar months does not correspond to the solar year used by most other
/// calendar systems, including the Gregorian.  An Islamic year is, on average,
/// about 354 days long, so each successive Islamic year starts about 11 days
/// earlier in the corresponding Gregorian year.
///
/// Each month of the calendar starts when the new moon's crescent is visible
/// at sunset.  However, in order to keep the time fields in this class
/// synchronized with those of the other calendars and with local clock time,
/// we treat days and months as beginning at midnight,
/// roughly 6 hours after the corresponding sunset.
///
/// There are three main variants of the Islamic calendar in existence.  The first
/// is the _civil_ calendar, which uses a fixed cycle of alternating 29-
/// and 30-day months, with a leap day added to the last month of 11 out of
/// every 30 years.  This calendar is easily calculated and thus predictable in
/// advance, so it is used as the civil calendar in a number of Arab countries.
/// This is the default behavior of a newly-created <code>IslamicCalendar</code>
/// object.
///
/// The Islamic _religious_ calendar and Saudi Arabia's _Umm al-Qura_
/// calendar, however, are based on the _observation_ of the crescent moon.
/// It is thus affected by the position at which the
/// observations are made, seasonal variations in the time of sunset, the
/// eccentricities of the moon's orbit, and even the weather at the observation
/// site.  This makes it impossible to calculate in advance, and it causes the
/// start of a month in the religious calendar to differ from the civil calendar
/// by up to three days.
///
/// Using astronomical calculations for the position of the sun and moon, the
/// moon's illumination, and other factors, it is possible to determine the start
/// of a lunar month with a fairly high degree of certainty.  However, these
/// calculations are extremely complicated and thus slow, so most algorithms,
/// including the one used here, are only approximations of the true astronomical
/// calculations.  At present, the approximations used in this class are fairly
/// simplistic; they will be improved in later versions of the code.
///
/// Like the Islamic religious calendar, _Umm al-Qura_ is also based
/// on the sighting method of the crescent moon but is standardized by Saudi Arabia.
///
/// The fixed-cycle _civil_ calendar is used.
///
/// This class should not be subclassed.
///
///
/// IslamicCalendar usually should be instantiated using
/// android.icu.util.Calendar\#getInstance(ULocale) passing in a <code>ULocale</code>
/// with the tag <code>"@calendar=islamic"</code> or <code>"@calendar=islamic-civil"</code>
/// or <code>"@calendar=islamic-umalqura"</code>.
///
///@see android.icu.util.GregorianCalendar
///@see android.icu.util.Calendar
///@author Laura Werner
///@author Alan Liu
class IslamicCalendar extends calendar_.Calendar {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/util/IslamicCalendar");
  IslamicCalendar.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int DHU_AL_HIJJAH
  ///
  /// Constant for Dhu al-Hijjah, the 12th month of the Islamic year.
  static const DHU_AL_HIJJAH = 11;

  /// from: static public final int DHU_AL_QIDAH
  ///
  /// Constant for Dhu al-Qi'dah, the 11th month of the Islamic year.
  static const DHU_AL_QIDAH = 10;

  /// from: static public final int JUMADA_1
  ///
  /// Constant for Jumada al-awwal or (Jumada I), the 5th month of the Islamic year.
  static const JUMADA_1 = 4;

  /// from: static public final int JUMADA_2
  ///
  /// Constant for Jumada al-thani or (Jumada II), the 6th month of the Islamic year.
  static const JUMADA_2 = 5;

  /// from: static public final int MUHARRAM
  ///
  /// Constant for Muharram, the 1st month of the Islamic year.
  static const MUHARRAM = 0;

  /// from: static public final int RABI_1
  ///
  /// Constant for Rabi' al-awwal (or Rabi' I), the 3rd month of the Islamic year.
  static const RABI_1 = 2;

  /// from: static public final int RABI_2
  ///
  /// Constant for Rabi' al-thani or (Rabi' II), the 4th month of the Islamic year.
  static const RABI_2 = 3;

  /// from: static public final int RAJAB
  ///
  /// Constant for Rajab, the 7th month of the Islamic year.
  static const RAJAB = 6;

  /// from: static public final int RAMADAN
  ///
  /// Constant for Ramadan, the 9th month of the Islamic year.
  static const RAMADAN = 8;

  /// from: static public final int SAFAR
  ///
  /// Constant for Safar, the 2nd month of the Islamic year.
  static const SAFAR = 1;

  /// from: static public final int SHABAN
  ///
  /// Constant for Sha'ban, the 8th month of the Islamic year.
  static const SHABAN = 7;

  /// from: static public final int SHAWWAL
  ///
  /// Constant for Shawwal, the 10th month of the Islamic year.
  static const SHAWWAL = 9;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a default <code>IslamicCalendar</code> using the current time
  /// in the default time zone with the default <code>FORMAT</code> locale.
  ///@see Category\#FORMAT
  IslamicCalendar()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/TimeZone;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an <code>IslamicCalendar</code> based on the current time
  /// in the given time zone with the default <code>FORMAT</code> locale.
  ///@param zone the given time zone.
  ///@see Category\#FORMAT
  IslamicCalendar.ctor3(timezone_.TimeZone zone)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor3, [zone.reference]).object);

  static final _id_ctor4 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/Locale;)V");

  /// from: public void <init>(java.util.Locale aLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an <code>IslamicCalendar</code> based on the current time
  /// in the default time zone with the given locale.
  ///@param aLocale the given locale.
  IslamicCalendar.ctor4(jni.JniObject aLocale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [aLocale.reference]).object);

  static final _id_ctor5 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/ULocale;)V");

  /// from: public void <init>(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an <code>IslamicCalendar</code> based on the current time
  /// in the default time zone with the given locale.
  ///@param locale the given ulocale.
  IslamicCalendar.ctor5(ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor5, [locale.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/TimeZone;Ljava/util/Locale;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone, java.util.Locale aLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an <code>IslamicCalendar</code> based on the current time
  /// in the given time zone with the given locale.
  ///@param zone the given time zone.
  ///@param aLocale the given locale.
  IslamicCalendar.ctor1(timezone_.TimeZone zone, jni.JniObject aLocale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [zone.reference, aLocale.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/icu/util/TimeZone;Landroid/icu/util/ULocale;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an <code>IslamicCalendar</code> based on the current time
  /// in the given time zone with the given locale.
  ///@param zone the given time zone.
  ///@param locale the given ulocale.
  IslamicCalendar.ctor2(timezone_.TimeZone zone, ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [zone.reference, locale.reference]).object);

  static final _id_ctor6 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/Date;)V");

  /// from: public void <init>(java.util.Date date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an <code>IslamicCalendar</code> with the given date set
  /// in the default time zone with the default <code>FORMAT</code> locale.
  ///@param date The date to which the new calendar is set.
  ///@see Category\#FORMAT
  IslamicCalendar.ctor6(jni.JniObject date)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor6, [date.reference]).object);

  static final _id_ctor7 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(III)V");

  /// from: public void <init>(int year, int month, int date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an <code>IslamicCalendar</code> with the given date set
  /// in the default time zone with the default <code>FORMAT</code> locale.
  ///@param year the value used to set the \#YEAR YEAR time field in the calendar.
  ///@param month the value used to set the \#MONTH MONTH time field in the calendar.
  ///              Note that the month value is 0-based. e.g., 0 for Muharram.
  ///@param date the value used to set the \#DATE DATE time field in the calendar.
  ///@see Category\#FORMAT
  IslamicCalendar.ctor7(int year, int month, int date)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor7, [year, month, date]).object);

  static final _id_ctor8 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIIIII)V");

  /// from: public void <init>(int year, int month, int date, int hour, int minute, int second)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an <code>IslamicCalendar</code> with the given date
  /// and time set for the default time zone with the default <code>FORMAT</code> locale.
  ///@param year the value used to set the \#YEAR YEAR time field in the calendar.
  ///@param month the value used to set the \#MONTH MONTH time field in the calendar.
  ///              Note that the month value is 0-based. e.g., 0 for Muharram.
  ///@param date the value used to set the \#DATE DATE time field in the calendar.
  ///@param hour the value used to set the \#HOUR_OF_DAY HOUR_OF_DAY time field
  ///              in the calendar.
  ///@param minute the value used to set the \#MINUTE MINUTE time field
  ///              in the calendar.
  ///@param second the value used to set the \#SECOND SECOND time field
  ///              in the calendar.
  ///@see Category\#FORMAT
  IslamicCalendar.ctor8(
      int year, int month, int date, int hour, int minute, int second)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor8,
            [year, month, date, hour, minute, second]).object);

  static final _id_handleGetLimit =
      jniAccessors.getMethodIDOf(_classRef, "handleGetLimit", "(II)I");

  /// from: protected int handleGetLimit(int field, int limitType)
  ///
  ///
  int handleGetLimit(int field, int limitType) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleGetLimit,
          jni.JniType.intType, [field, limitType]).integer;

  static final _id_handleGetMonthLength =
      jniAccessors.getMethodIDOf(_classRef, "handleGetMonthLength", "(II)I");

  /// from: protected int handleGetMonthLength(int extendedYear, int month)
  ///
  /// Return the length (in days) of the given month.
  ///@param extendedYear The hijri year
  ///@param month The hijri month, 0-based
  int handleGetMonthLength(int extendedYear, int month) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleGetMonthLength,
          jni.JniType.intType, [extendedYear, month]).integer;

  static final _id_handleGetYearLength =
      jniAccessors.getMethodIDOf(_classRef, "handleGetYearLength", "(I)I");

  /// from: protected int handleGetYearLength(int extendedYear)
  ///
  /// Return the number of days in the given Islamic year
  int handleGetYearLength(int extendedYear) => jniAccessors.callMethodWithArgs(
      reference,
      _id_handleGetYearLength,
      jni.JniType.intType,
      [extendedYear]).integer;

  static final _id_handleComputeMonthStart = jniAccessors.getMethodIDOf(
      _classRef, "handleComputeMonthStart", "(IIZ)I");

  /// from: protected int handleComputeMonthStart(int eyear, int month, boolean useMonth)
  ///
  ///
  int handleComputeMonthStart(int eyear, int month, bool useMonth) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleComputeMonthStart,
          jni.JniType.intType, [eyear, month, useMonth]).integer;

  static final _id_handleGetExtendedYear =
      jniAccessors.getMethodIDOf(_classRef, "handleGetExtendedYear", "()I");

  /// from: protected int handleGetExtendedYear()
  ///
  ///
  int handleGetExtendedYear() => jniAccessors.callMethodWithArgs(
      reference, _id_handleGetExtendedYear, jni.JniType.intType, []).integer;

  static final _id_handleComputeFields =
      jniAccessors.getMethodIDOf(_classRef, "handleComputeFields", "(I)V");

  /// from: protected void handleComputeFields(int julianDay)
  ///
  /// Override Calendar to compute several fields specific to the Islamic
  /// calendar system.  These are:
  ///
  /// <ul><li>ERA
  /// <li>YEAR
  /// <li>MONTH
  /// <li>DAY_OF_MONTH
  /// <li>DAY_OF_YEAR
  /// <li>EXTENDED_YEAR</ul>
  ///
  /// The DAY_OF_WEEK and DOW_LOCAL fields are already set when this
  /// method is called. The getGregorianXxx() methods return Gregorian
  /// calendar equivalents for the given Julian day.
  void handleComputeFields(int julianDay) => jniAccessors.callMethodWithArgs(
      reference,
      _id_handleComputeFields,
      jni.JniType.voidType,
      [julianDay]).check();

  static final _id_setCalculationType = jniAccessors.getMethodIDOf(
      _classRef,
      "setCalculationType",
      "(Landroid/icu/util/IslamicCalendar\$CalculationType;)V");

  /// from: public void setCalculationType(android.icu.util.IslamicCalendar.CalculationType type)
  ///
  /// sets the calculation type for this calendar.
  void setCalculationType(IslamicCalendar_CalculationType type) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCalculationType,
          jni.JniType.voidType, [type.reference]).check();

  static final _id_getCalculationType = jniAccessors.getMethodIDOf(
      _classRef,
      "getCalculationType",
      "()Landroid/icu/util/IslamicCalendar\$CalculationType;");

  /// from: public android.icu.util.IslamicCalendar.CalculationType getCalculationType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// gets the calculation type for this calendar.
  IslamicCalendar_CalculationType getCalculationType() =>
      IslamicCalendar_CalculationType.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getCalculationType,
          jni.JniType.objectType, []).object);

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  jni.JniString getType() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getType, jni.JniType.objectType, []).object);
}

/// from: android.icu.util.IslamicCalendar$CalculationType
///
/// enumeration of available calendar calculation types
class IslamicCalendar_CalculationType extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/icu/util/IslamicCalendar\$CalculationType");
  IslamicCalendar_CalculationType.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(_classRef,
      "values", "()[Landroid/icu/util/IslamicCalendar\$CalculationType;");

  /// from: static public android.icu.util.IslamicCalendar.CalculationType[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "valueOf",
      "(Ljava/lang/String;)Landroid/icu/util/IslamicCalendar\$CalculationType;");

  /// from: static public android.icu.util.IslamicCalendar.CalculationType valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static IslamicCalendar_CalculationType valueOf(jni.JniString name) =>
      IslamicCalendar_CalculationType.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_valueOf,
              jni.JniType.objectType, [name.reference]).object);
}
