// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Calendar.dart" as calendar_;

import "TimeZone.dart" as timezone_;

import "ULocale.dart" as ulocale_;

import "../text/DateFormat.dart" as dateformat_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.util.ChineseCalendar
///
/// <code>ChineseCalendar</code> is a concrete subclass of Calendar
/// that implements a traditional Chinese calendar.  The traditional Chinese
/// calendar is a lunisolar calendar: Each month starts on a new moon, and
/// the months are numbered according to solar events, specifically, to
/// guarantee that month 11 always contains the winter solstice.  In order
/// to accomplish this, leap months are inserted in certain years.  Leap
/// months are numbered the same as the month they follow.  The decision of
/// which month is a leap month depends on the relative movements of the sun
/// and moon.
///
/// All astronomical computations are performed with respect to a time
/// zone of GMT+8:00 and a longitude of 120 degrees east.  Although some
/// calendars implement a historically more accurate convention of using
/// Beijing's local longitude (116 degrees 25 minutes east) and time zone
/// (GMT+7:45:40) for dates before 1929, we do not implement this here.
///
/// Years are counted in two different ways in the Chinese calendar.  The
/// first method is by sequential numbering from the 61st year of the reign
/// of Huang Di, 2637 BCE, which is designated year 1 on the Chinese
/// calendar.  The second method uses 60-year cycles from the same starting
/// point, which is designated year 1 of cycle 1.  In this class, the
/// <code>EXTENDED_YEAR</code> field contains the sequential year count.
/// The <code>ERA</code> field contains the cycle number, and the
/// <code>YEAR</code> field contains the year of the cycle, a value between
/// 1 and 60.
///
/// There is some variation in what is considered the starting point of
/// the calendar, with some sources starting in the first year of the reign
/// of Huang Di, rather than the 61st.  This gives continuous year numbers
/// 60 years greater and cycle numbers one greater than what this class
/// implements.
///
/// Because <code>ChineseCalendar</code> defines an additional field and
/// redefines the way the <code>ERA</code> field is used, it requires a new
/// format class, <code>ChineseDateFormat</code>.  As always, use the
/// methods <code>DateFormat.getXxxInstance(Calendar cal,...)</code> to
/// obtain a formatter for this calendar.
///
/// References:<ul>
///
/// <li>Dershowitz and Reingold, <i>Calendrical Calculations</i>,
/// Cambridge University Press, 1997</li>
///
/// <li>Helmer Aslaksen's
/// <a href="http://www.math.nus.edu.sg/aslaksen/calendar/chinese.shtml">
/// Chinese Calendar page</a></li>
///
/// <li>The <a href="http://www.tondering.dk/claus/calendar.html">
/// Calendar FAQ</a></li>
///
/// </ul>
///
///
/// This class should not be subclassed.
///
///
/// ChineseCalendar usually should be instantiated using
/// android.icu.util.Calendar\#getInstance(ULocale) passing in a <code>ULocale</code>
/// with the tag <code>"@calendar=chinese"</code>.
///
///@see android.icu.util.Calendar
///@author Alan Liu
class ChineseCalendar extends calendar_.Calendar {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/util/ChineseCalendar");
  ChineseCalendar.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a <code>ChineseCalendar</code> with the default time zone and locale.
  ChineseCalendar()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor3 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/Date;)V");

  /// from: public void <init>(java.util.Date date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a <code>ChineseCalendar</code> with the give date set in the default time zone
  /// with the default locale.
  ///@param date The date to which the new calendar is set.
  ChineseCalendar.ctor3(jni.JniObject date)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor3, [date.reference]).object);

  static final _id_ctor4 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIII)V");

  /// from: public void <init>(int year, int month, int isLeapMonth, int date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>ChineseCalendar</code> with the given date set
  /// in the default time zone with the default <code>FORMAT</code> locale.
  ///@param year The value used to set the calendar's \#YEAR YEAR time field.
  ///@param month The value used to set the calendar's \#MONTH MONTH time field.
  ///                  The value is 0-based. e.g., 0 for January.
  ///@param isLeapMonth The value used to set the Chinese calendar's \#IS_LEAP_MONTH
  ///                  time field.
  ///@param date The value used to set the calendar's \#DATE DATE time field.
  ///@see Category\#FORMAT
  ChineseCalendar.ctor4(int year, int month, int isLeapMonth, int date)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [year, month, isLeapMonth, date]).object);

  static final _id_ctor5 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIIIIII)V");

  /// from: public void <init>(int year, int month, int isLeapMonth, int date, int hour, int minute, int second)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>ChineseCalendar</code> with the given date
  /// and time set for the default time zone with the default <code>FORMAT</code> locale.
  ///@param year the value used to set the \#YEAR YEAR time field in the calendar.
  ///@param month the value used to set the \#MONTH MONTH time field in the calendar.
  ///              Note that the month value is 0-based. e.g., 0 for January.
  ///@param isLeapMonth the value used to set the \#IS_LEAP_MONTH time field
  ///              in the calendar.
  ///@param date the value used to set the \#DATE DATE time field in the calendar.
  ///@param hour the value used to set the \#HOUR_OF_DAY HOUR_OF_DAY time field
  ///              in the calendar.
  ///@param minute the value used to set the \#MINUTE MINUTE time field
  ///              in the calendar.
  ///@param second the value used to set the \#SECOND SECOND time field
  ///              in the calendar.
  ///@see Category\#FORMAT
  ChineseCalendar.ctor5(int year, int month, int isLeapMonth, int date,
      int hour, int minute, int second)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor5,
            [year, month, isLeapMonth, date, hour, minute, second]).object);

  static final _id_ctor6 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIIII)V");

  /// from: public void <init>(int era, int year, int month, int isLeapMonth, int date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>ChineseCalendar</code> with the given date set
  /// in the default time zone with the default <code>FORMAT</code> locale.
  ///@param era The value used to set the calendar's \#ERA ERA time field.
  ///@param year The value used to set the calendar's \#YEAR YEAR time field.
  ///@param month The value used to set the calendar's \#MONTH MONTH time field.
  ///                  The value is 0-based. e.g., 0 for January.
  ///@param isLeapMonth The value used to set the Chinese calendar's \#IS_LEAP_MONTH
  ///                  time field.
  ///@param date The value used to set the calendar's \#DATE DATE time field.
  ///@see Category\#FORMAT
  ChineseCalendar.ctor6(int era, int year, int month, int isLeapMonth, int date)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor6,
            [era, year, month, isLeapMonth, date]).object);

  static final _id_ctor7 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIIIIIII)V");

  /// from: public void <init>(int era, int year, int month, int isLeapMonth, int date, int hour, int minute, int second)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>ChineseCalendar</code> with the given date
  /// and time set for the default time zone with the default <code>FORMAT</code> locale.
  ///@param era the value used to set the calendar's \#ERA ERA time field.
  ///@param year the value used to set the \#YEAR YEAR time field in the calendar.
  ///@param month the value used to set the \#MONTH MONTH time field in the calendar.
  ///              Note that the month value is 0-based. e.g., 0 for January.
  ///@param isLeapMonth the value used to set the \#IS_LEAP_MONTH time field
  ///              in the calendar.
  ///@param date the value used to set the \#DATE DATE time field in the calendar.
  ///@param hour the value used to set the \#HOUR_OF_DAY HOUR_OF_DAY time field
  ///              in the calendar.
  ///@param minute the value used to set the \#MINUTE MINUTE time field
  ///              in the calendar.
  ///@param second the value used to set the \#SECOND SECOND time field
  ///              in the calendar.
  ///@see Category\#FORMAT
  ChineseCalendar.ctor7(int era, int year, int month, int isLeapMonth, int date,
      int hour, int minute, int second)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor7, [
          era,
          year,
          month,
          isLeapMonth,
          date,
          hour,
          minute,
          second
        ]).object);

  static final _id_ctor8 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/Locale;)V");

  /// from: public void <init>(java.util.Locale aLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>ChineseCalendar</code> based on the current time
  /// in the default time zone with the given locale.
  ///@param aLocale The given locale
  ChineseCalendar.ctor8(jni.JniObject aLocale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor8, [aLocale.reference]).object);

  static final _id_ctor9 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/TimeZone;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a <code>ChineseCalendar</code> based on the current time
  /// in the given time zone with the default <code>FORMAT</code> locale.
  ///@param zone the given time zone
  ///@see Category\#FORMAT
  ChineseCalendar.ctor9(timezone_.TimeZone zone)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor9, [zone.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/TimeZone;Ljava/util/Locale;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone, java.util.Locale aLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a <code>ChineseCalendar</code> based on the current time
  /// in the given time zone with the given locale.
  ///@param zone the given time zone
  ///@param aLocale the given locale
  ChineseCalendar.ctor1(timezone_.TimeZone zone, jni.JniObject aLocale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [zone.reference, aLocale.reference]).object);

  static final _id_ctor10 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/ULocale;)V");

  /// from: public void <init>(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>ChineseCalendar</code> based on the current time
  /// in the default time zone with the given locale.
  ///@param locale the given ulocale
  ChineseCalendar.ctor10(ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor10, [locale.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/icu/util/TimeZone;Landroid/icu/util/ULocale;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a <code>ChineseCalendar</code>  based on the current time
  /// with the given time zone with the given locale.
  ///@param zone the given time zone
  ///@param locale the given ulocale
  ChineseCalendar.ctor2(timezone_.TimeZone zone, ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [zone.reference, locale.reference]).object);

  static final _id_handleGetLimit =
      jniAccessors.getMethodIDOf(_classRef, "handleGetLimit", "(II)I");

  /// from: protected int handleGetLimit(int field, int limitType)
  ///
  /// Override Calendar to return the limit value for the given field.
  int handleGetLimit(int field, int limitType) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleGetLimit,
          jni.JniType.intType, [field, limitType]).integer;

  static final _id_handleGetExtendedYear =
      jniAccessors.getMethodIDOf(_classRef, "handleGetExtendedYear", "()I");

  /// from: protected int handleGetExtendedYear()
  ///
  /// Implement abstract Calendar method to return the extended year
  /// defined by the current fields.  This will use either the ERA and
  /// YEAR field as the cycle and year-of-cycle, or the EXTENDED_YEAR
  /// field as the continuous year count, depending on which is newer.
  int handleGetExtendedYear() => jniAccessors.callMethodWithArgs(
      reference, _id_handleGetExtendedYear, jni.JniType.intType, []).integer;

  static final _id_handleGetMonthLength =
      jniAccessors.getMethodIDOf(_classRef, "handleGetMonthLength", "(II)I");

  /// from: protected int handleGetMonthLength(int extendedYear, int month)
  ///
  /// Override Calendar method to return the number of days in the given
  /// extended year and month.
  ///
  /// Note: This method also reads the IS_LEAP_MONTH field to determine
  /// whether or not the given month is a leap month.
  int handleGetMonthLength(int extendedYear, int month) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleGetMonthLength,
          jni.JniType.intType, [extendedYear, month]).integer;

  static final _id_handleGetDateFormat3 = jniAccessors.getMethodIDOf(
      _classRef,
      "handleGetDateFormat",
      "(Ljava/lang/String;Ljava/lang/String;Landroid/icu/util/ULocale;)Landroid/icu/text/DateFormat;");

  /// from: protected android.icu.text.DateFormat handleGetDateFormat(java.lang.String pattern, java.lang.String override, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  dateformat_.DateFormat handleGetDateFormat3(jni.JniString pattern,
          jni.JniString override, ulocale_.ULocale locale) =>
      dateformat_.DateFormat.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_handleGetDateFormat3,
          jni.JniType.objectType,
          [pattern.reference, override.reference, locale.reference]).object);

  static final _id_getFieldResolutionTable = jniAccessors.getMethodIDOf(
      _classRef, "getFieldResolutionTable", "()[[[I");

  /// from: protected int[][][] getFieldResolutionTable()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Override Calendar to add IS_LEAP_MONTH to the field resolution
  /// table.
  jni.JniObject getFieldResolutionTable() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getFieldResolutionTable, jni.JniType.objectType, []).object);

  static final _id_add = jniAccessors.getMethodIDOf(_classRef, "add", "(II)V");

  /// from: public void add(int field, int amount)
  ///
  /// Override Calendar to handle leap months properly.
  void add(int field, int amount) => jniAccessors.callMethodWithArgs(
      reference, _id_add, jni.JniType.voidType, [field, amount]).check();

  static final _id_roll1 =
      jniAccessors.getMethodIDOf(_classRef, "roll", "(II)V");

  /// from: public void roll(int field, int amount)
  ///
  /// Override Calendar to handle leap months properly.
  void roll1(int field, int amount) => jniAccessors.callMethodWithArgs(
      reference, _id_roll1, jni.JniType.voidType, [field, amount]).check();

  static final _id_handleComputeFields =
      jniAccessors.getMethodIDOf(_classRef, "handleComputeFields", "(I)V");

  /// from: protected void handleComputeFields(int julianDay)
  ///
  /// Override Calendar to compute several fields specific to the Chinese
  /// calendar system.  These are:
  ///
  /// <ul><li>ERA
  /// <li>YEAR
  /// <li>MONTH
  /// <li>DAY_OF_MONTH
  /// <li>DAY_OF_YEAR
  /// <li>EXTENDED_YEAR</ul>
  ///
  /// The DAY_OF_WEEK and DOW_LOCAL fields are already set when this
  /// method is called.  The getGregorianXxx() methods return Gregorian
  /// calendar equivalents for the given Julian day.
  ///
  /// Compute the ChineseCalendar-specific field IS_LEAP_MONTH.
  void handleComputeFields(int julianDay) => jniAccessors.callMethodWithArgs(
      reference,
      _id_handleComputeFields,
      jni.JniType.voidType,
      [julianDay]).check();

  static final _id_handleComputeMonthStart = jniAccessors.getMethodIDOf(
      _classRef, "handleComputeMonthStart", "(IIZ)I");

  /// from: protected int handleComputeMonthStart(int eyear, int month, boolean useMonth)
  ///
  /// Return the Julian day number of day before the first day of the
  /// given month in the given extended year.
  ///
  /// Note: This method reads the IS_LEAP_MONTH field to determine
  /// whether the given month is a leap month.
  ///@param eyear the extended year
  ///@param month the zero-based month.  The month is also determined
  /// by reading the IS_LEAP_MONTH field.
  ///@return the Julian day number of the day before the first
  /// day of the given month and year
  int handleComputeMonthStart(int eyear, int month, bool useMonth) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleComputeMonthStart,
          jni.JniType.intType, [eyear, month, useMonth]).integer;

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  jni.JniString getType() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getType, jni.JniType.objectType, []).object);
}
