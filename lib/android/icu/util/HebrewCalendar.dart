// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Calendar.dart" as calendar_;

import "TimeZone.dart" as timezone_;

import "ULocale.dart" as ulocale_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.util.HebrewCalendar
///
/// <code>HebrewCalendar</code> is a subclass of <code>Calendar</code>
/// that that implements the traditional Hebrew calendar.
/// This is the civil calendar in Israel and the liturgical calendar
/// of the Jewish faith worldwide.
///
/// The Hebrew calendar is lunisolar and thus has a number of interesting
/// properties that distinguish it from the Gregorian.  Months start
/// on the day of (an arithmetic approximation of) each new moon.  Since the
/// solar year (approximately 365.24 days) is not an even multiple of
/// the lunar month (approximately 29.53 days) an extra "leap month" is
/// inserted in 7 out of every 19 years.  To make matters even more
/// interesting, the start of a year can be delayed by up to three days
/// in order to prevent certain holidays from falling on the Sabbath and
/// to prevent certain illegal year lengths.  Finally, the lengths of certain
/// months can vary depending on the number of days in the year.
///
/// The leap month is known as "Adar 1" and is inserted between the
/// months of Shevat and Adar in leap years.  Since the leap month does
/// not come at the end of the year, calculations involving
/// month numbers are particularly complex.  Users of this class should
/// make sure to use the \#roll roll and \#add add methods
/// rather than attempting to perform date arithmetic by manipulating
/// the fields directly.
///
/// __Note:__ In the traditional Hebrew calendar, days start at sunset.
/// However, in order to keep the time fields in this class
/// synchronized with those of the other calendars and with local clock time,
/// we treat days and months as beginning at midnight,
/// roughly 6 hours after the corresponding sunset.
///
/// If you are interested in more information on the rules behind the Hebrew
/// calendar, see one of the following references:
/// <ul>
/// <li>"<a href="http://www.amazon.com/exec/obidos/ASIN/0521564743">Calendrical Calculations</a>",
///      by Nachum Dershowitz &amp; Edward Reingold, Cambridge University Press, 1997, pages 85-91.
///
/// <li>Hebrew Calendar Science and Myths,
///      <a href="http://web.archive.org/web/20090423084613/http://www.geocities.com/Athens/1584/">
///      http://web.archive.org/web/20090423084613/http://www.geocities.com/Athens/1584/</a>
///
/// <li>The Calendar FAQ,
///      <a href="http://www.faqs.org/faqs/calendars/faq/">
///      http://www.faqs.org/faqs/calendars/faq/</a>
/// </ul>
///
///
/// This class should not be subclassed.
///
///
/// HebrewCalendar usually should be instantiated using
/// android.icu.util.Calendar\#getInstance(ULocale) passing in a <code>ULocale</code>
/// with the tag <code>"@calendar=hebrew"</code>.
///
///@see android.icu.util.GregorianCalendar
///@see android.icu.util.Calendar
///@author Laura Werner
///@author Alan Liu
class HebrewCalendar extends calendar_.Calendar {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/util/HebrewCalendar");
  HebrewCalendar.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ADAR
  ///
  /// Constant for the Adar, the 7th month of the Hebrew year.
  static const ADAR = 6;

  /// from: static public final int ADAR_1
  ///
  /// Constant for Adar I, the 6th month of the Hebrew year
  /// (present in leap years only). In non-leap years, the calendar
  /// jumps from Shevat (5th month) to Adar (7th month).
  static const ADAR_1 = 5;

  /// from: static public final int AV
  ///
  /// Constant for Av, the 12th month of the Hebrew year.
  static const AV = 11;

  /// from: static public final int ELUL
  ///
  /// Constant for Elul, the 13th month of the Hebrew year.
  static const ELUL = 12;

  /// from: static public final int HESHVAN
  ///
  /// Constant for Heshvan, the 2nd month of the Hebrew year.
  static const HESHVAN = 1;

  /// from: static public final int IYAR
  ///
  /// Constant for Iyar, the 9th month of the Hebrew year.
  static const IYAR = 8;

  /// from: static public final int KISLEV
  ///
  /// Constant for Kislev, the 3rd month of the Hebrew year.
  static const KISLEV = 2;

  /// from: static public final int NISAN
  ///
  /// Constant for Nisan, the 8th month of the Hebrew year.
  static const NISAN = 7;

  /// from: static public final int SHEVAT
  ///
  /// Constant for Shevat, the 5th month of the Hebrew year.
  static const SHEVAT = 4;

  /// from: static public final int SIVAN
  ///
  /// Constant for Sivan, the 10th month of the Hebrew year.
  static const SIVAN = 9;

  /// from: static public final int TAMUZ
  ///
  /// Constant for Tammuz, the 11th month of the Hebrew year.
  static const TAMUZ = 10;

  /// from: static public final int TEVET
  ///
  /// Constant for Tevet, the 4th month of the Hebrew year.
  static const TEVET = 3;

  /// from: static public final int TISHRI
  ///
  /// Constant for Tishri, the 1st month of the Hebrew year.
  static const TISHRI = 0;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a default <code>HebrewCalendar</code> using the current time
  /// in the default time zone with the default <code>FORMAT</code> locale.
  ///@see Category\#FORMAT
  HebrewCalendar()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/TimeZone;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>HebrewCalendar</code> based on the current time
  /// in the given time zone with the default <code>FORMAT</code> locale.
  ///@param zone The time zone for the new calendar.
  ///@see Category\#FORMAT
  HebrewCalendar.ctor3(timezone_.TimeZone zone)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor3, [zone.reference]).object);

  static final _id_ctor4 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/Locale;)V");

  /// from: public void <init>(java.util.Locale aLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>HebrewCalendar</code> based on the current time
  /// in the default time zone with the given locale.
  ///@param aLocale The locale for the new calendar.
  HebrewCalendar.ctor4(jni.JniObject aLocale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [aLocale.reference]).object);

  static final _id_ctor5 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/ULocale;)V");

  /// from: public void <init>(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>HebrewCalendar</code> based on the current time
  /// in the default time zone with the given locale.
  ///@param locale The locale for the new calendar.
  HebrewCalendar.ctor5(ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor5, [locale.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/TimeZone;Ljava/util/Locale;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone, java.util.Locale aLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>HebrewCalendar</code> based on the current time
  /// in the given time zone with the given locale.
  ///@param zone The time zone for the new calendar.
  ///@param aLocale The locale for the new calendar.
  HebrewCalendar.ctor1(timezone_.TimeZone zone, jni.JniObject aLocale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [zone.reference, aLocale.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/icu/util/TimeZone;Landroid/icu/util/ULocale;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>HebrewCalendar</code> based on the current time
  /// in the given time zone with the given locale.
  ///@param zone The time zone for the new calendar.
  ///@param locale The locale for the new calendar.
  HebrewCalendar.ctor2(timezone_.TimeZone zone, ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [zone.reference, locale.reference]).object);

  static final _id_ctor6 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(III)V");

  /// from: public void <init>(int year, int month, int date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>HebrewCalendar</code> with the given date set
  /// in the default time zone with the default <code>FORMAT</code> locale.
  ///@param year The value used to set the calendar's \#YEAR YEAR time field.
  ///@param month The value used to set the calendar's \#MONTH MONTH time field.
  ///                  The value is 0-based. e.g., 0 for Tishri.
  ///@param date The value used to set the calendar's \#DATE DATE time field.
  ///@see Category\#FORMAT
  HebrewCalendar.ctor6(int year, int month, int date)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor6, [year, month, date]).object);

  static final _id_ctor7 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/Date;)V");

  /// from: public void <init>(java.util.Date date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>HebrewCalendar</code> with the given date set
  /// in the default time zone with the default <code>FORMAT</code> locale.
  ///@param date The date to which the new calendar is set.
  ///@see Category\#FORMAT
  HebrewCalendar.ctor7(jni.JniObject date)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor7, [date.reference]).object);

  static final _id_ctor8 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIIIII)V");

  /// from: public void <init>(int year, int month, int date, int hour, int minute, int second)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>HebrewCalendar</code> with the given date
  /// and time set for the default time zone with the default <code>FORMAT</code> locale.
  ///@param year The value used to set the calendar's \#YEAR YEAR time field.
  ///@param month The value used to set the calendar's \#MONTH MONTH time field.
  ///                  The value is 0-based. e.g., 0 for Tishri.
  ///@param date The value used to set the calendar's \#DATE DATE time field.
  ///@param hour The value used to set the calendar's \#HOUR_OF_DAY HOUR_OF_DAY time field.
  ///@param minute The value used to set the calendar's \#MINUTE MINUTE time field.
  ///@param second The value used to set the calendar's \#SECOND SECOND time field.
  ///@see Category\#FORMAT
  HebrewCalendar.ctor8(
      int year, int month, int date, int hour, int minute, int second)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor8,
            [year, month, date, hour, minute, second]).object);

  static final _id_add = jniAccessors.getMethodIDOf(_classRef, "add", "(II)V");

  /// from: public void add(int field, int amount)
  ///
  /// Add a signed amount to a specified field, using this calendar's rules.
  /// For example, to add three days to the current date, you can call
  /// <code>add(Calendar.DATE, 3)</code>.
  ///
  /// When adding to certain fields, the values of other fields may conflict and
  /// need to be changed.  For example, when adding one to the \#MONTH MONTH field
  /// for the date "30 Av 5758", the \#DAY_OF_MONTH DAY_OF_MONTH field
  /// must be adjusted so that the result is "29 Elul 5758" rather than the invalid
  /// "30 Elul 5758".
  ///
  /// This method is able to add to
  /// all fields except for \#ERA ERA, \#DST_OFFSET DST_OFFSET,
  /// and \#ZONE_OFFSET ZONE_OFFSET.
  ///
  /// __Note:__ You should always use \#roll roll and add rather
  /// than attempting to perform arithmetic operations directly on the fields
  /// of a <tt>HebrewCalendar</tt>.  Since the \#MONTH MONTH field behaves
  /// discontinuously in non-leap years, simple arithmetic can give invalid results.
  ///
  ///@param field the time field.
  ///@param amount the amount to add to the field.
  ///@exception IllegalArgumentException if the field is invalid or refers
  ///              to a field that cannot be handled by this method.
  void add(int field, int amount) => jniAccessors.callMethodWithArgs(
      reference, _id_add, jni.JniType.voidType, [field, amount]).check();

  static final _id_roll1 =
      jniAccessors.getMethodIDOf(_classRef, "roll", "(II)V");

  /// from: public void roll(int field, int amount)
  ///
  /// Rolls (up/down) a specified amount time on the given field.  For
  /// example, to roll the current date up by three days, you can call
  /// <code>roll(Calendar.DATE, 3)</code>.  If the
  /// field is rolled past its maximum allowable value, it will "wrap" back
  /// to its minimum and continue rolling.
  /// For example, calling <code>roll(Calendar.DATE, 10)</code>
  /// on a Hebrew calendar set to "25 Av 5758" will result in the date "5 Av 5758".
  ///
  /// When rolling certain fields, the values of other fields may conflict and
  /// need to be changed.  For example, when rolling the \#MONTH MONTH field
  /// upward by one for the date "30 Av 5758", the \#DAY_OF_MONTH DAY_OF_MONTH field
  /// must be adjusted so that the result is "29 Elul 5758" rather than the invalid
  /// "30 Elul".
  ///
  /// This method is able to roll
  /// all fields except for \#ERA ERA, \#DST_OFFSET DST_OFFSET,
  /// and \#ZONE_OFFSET ZONE_OFFSET.  Subclasses may, of course, add support for
  /// additional fields in their overrides of <code>roll</code>.
  ///
  /// __Note:__ You should always use roll and \#add add rather
  /// than attempting to perform arithmetic operations directly on the fields
  /// of a <tt>HebrewCalendar</tt>.  Since the \#MONTH MONTH field behaves
  /// discontinuously in non-leap years, simple arithmetic can give invalid results.
  ///
  ///@param field the time field.
  ///@param amount the amount by which the field should be rolled.
  ///@exception IllegalArgumentException if the field is invalid or refers
  ///              to a field that cannot be handled by this method.
  void roll1(int field, int amount) => jniAccessors.callMethodWithArgs(
      reference, _id_roll1, jni.JniType.voidType, [field, amount]).check();

  static final _id_handleGetLimit =
      jniAccessors.getMethodIDOf(_classRef, "handleGetLimit", "(II)I");

  /// from: protected int handleGetLimit(int field, int limitType)
  ///
  ///
  int handleGetLimit(int field, int limitType) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleGetLimit,
          jni.JniType.intType, [field, limitType]).integer;

  static final _id_handleGetMonthLength =
      jniAccessors.getMethodIDOf(_classRef, "handleGetMonthLength", "(II)I");

  /// from: protected int handleGetMonthLength(int extendedYear, int month)
  ///
  /// Returns the length of the given month in the given year
  int handleGetMonthLength(int extendedYear, int month) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleGetMonthLength,
          jni.JniType.intType, [extendedYear, month]).integer;

  static final _id_handleGetYearLength =
      jniAccessors.getMethodIDOf(_classRef, "handleGetYearLength", "(I)I");

  /// from: protected int handleGetYearLength(int eyear)
  ///
  /// Returns the number of days in the given Hebrew year
  int handleGetYearLength(int eyear) => jniAccessors.callMethodWithArgs(
      reference, _id_handleGetYearLength, jni.JniType.intType, [eyear]).integer;

  static final _id_validateField =
      jniAccessors.getMethodIDOf(_classRef, "validateField", "(I)V");

  /// from: protected void validateField(int field)
  ///
  /// {@inheritDoc}
  ///
  /// Overrides Calendar\#validateField(int) to provide
  /// special handling for month validation for Hebrew calendar.
  ///@deprecated This API is ICU internal only.
  ///@hide original deprecated declaration
  ///@hide draft / provisional / internal are hidden on Android
  void validateField(int field) => jniAccessors.callMethodWithArgs(
      reference, _id_validateField, jni.JniType.voidType, [field]).check();

  static final _id_handleComputeFields =
      jniAccessors.getMethodIDOf(_classRef, "handleComputeFields", "(I)V");

  /// from: protected void handleComputeFields(int julianDay)
  ///
  /// Subclasses may override this method to compute several fields
  /// specific to each calendar system.  These are:
  ///
  /// <ul><li>ERA
  /// <li>YEAR
  /// <li>MONTH
  /// <li>DAY_OF_MONTH
  /// <li>DAY_OF_YEAR
  /// <li>EXTENDED_YEAR</ul>
  ///
  /// Subclasses can refer to the DAY_OF_WEEK and DOW_LOCAL fields,
  /// which will be set when this method is called.  Subclasses can
  /// also call the getGregorianXxx() methods to obtain Gregorian
  /// calendar equivalents for the given Julian day.
  ///
  /// In addition, subclasses should compute any subclass-specific
  /// fields, that is, fields from BASE_FIELD_COUNT to
  /// getFieldCount() - 1.
  void handleComputeFields(int julianDay) => jniAccessors.callMethodWithArgs(
      reference,
      _id_handleComputeFields,
      jni.JniType.voidType,
      [julianDay]).check();

  static final _id_handleGetExtendedYear =
      jniAccessors.getMethodIDOf(_classRef, "handleGetExtendedYear", "()I");

  /// from: protected int handleGetExtendedYear()
  ///
  ///
  int handleGetExtendedYear() => jniAccessors.callMethodWithArgs(
      reference, _id_handleGetExtendedYear, jni.JniType.intType, []).integer;

  static final _id_handleComputeMonthStart = jniAccessors.getMethodIDOf(
      _classRef, "handleComputeMonthStart", "(IIZ)I");

  /// from: protected int handleComputeMonthStart(int eyear, int month, boolean useMonth)
  ///
  /// Return JD of start of given month/year.
  int handleComputeMonthStart(int eyear, int month, bool useMonth) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleComputeMonthStart,
          jni.JniType.intType, [eyear, month, useMonth]).integer;

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  jni.JniString getType() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getType, jni.JniType.objectType, []).object);
}
