// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "TimeUnit.dart" as timeunit_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.util.MeasureUnit
///
/// A unit such as length, mass, volume, currency, etc.  A unit is
/// coupled with a numeric amount to produce a Measure. MeasureUnit objects are immutable.
/// All subclasses must guarantee that. (However, subclassing is discouraged.)
///@see android.icu.util.Measure
///@author Alan Liu
class MeasureUnit extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/util/MeasureUnit");
  MeasureUnit.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ACRE = jniAccessors.getStaticFieldIDOf(
      _classRef, "ACRE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit ACRE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of area: acre
  static MeasureUnit get ACRE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ACRE, jni.JniType.objectType)
      .object);

  static final _id_ACRE_FOOT = jniAccessors.getStaticFieldIDOf(
      _classRef, "ACRE_FOOT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit ACRE_FOOT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: acre-foot
  static MeasureUnit get ACRE_FOOT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ACRE_FOOT, jni.JniType.objectType)
      .object);

  static final _id_AMPERE = jniAccessors.getStaticFieldIDOf(
      _classRef, "AMPERE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit AMPERE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of electric: ampere
  static MeasureUnit get AMPERE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_AMPERE, jni.JniType.objectType)
      .object);

  static final _id_ARC_MINUTE = jniAccessors.getStaticFieldIDOf(
      _classRef, "ARC_MINUTE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit ARC_MINUTE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of angle: arc-minute
  static MeasureUnit get ARC_MINUTE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ARC_MINUTE, jni.JniType.objectType)
      .object);

  static final _id_ARC_SECOND = jniAccessors.getStaticFieldIDOf(
      _classRef, "ARC_SECOND", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit ARC_SECOND
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of angle: arc-second
  static MeasureUnit get ARC_SECOND => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ARC_SECOND, jni.JniType.objectType)
      .object);

  static final _id_ASTRONOMICAL_UNIT = jniAccessors.getStaticFieldIDOf(
      _classRef, "ASTRONOMICAL_UNIT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit ASTRONOMICAL_UNIT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: astronomical-unit
  static MeasureUnit get ASTRONOMICAL_UNIT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ASTRONOMICAL_UNIT, jni.JniType.objectType)
      .object);

  static final _id_BIT = jniAccessors.getStaticFieldIDOf(
      _classRef, "BIT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit BIT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of digital: bit
  static MeasureUnit get BIT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_BIT, jni.JniType.objectType)
      .object);

  static final _id_BUSHEL = jniAccessors.getStaticFieldIDOf(
      _classRef, "BUSHEL", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit BUSHEL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: bushel
  static MeasureUnit get BUSHEL => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_BUSHEL, jni.JniType.objectType)
      .object);

  static final _id_BYTE = jniAccessors.getStaticFieldIDOf(
      _classRef, "BYTE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit BYTE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of digital: byte
  static MeasureUnit get BYTE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_BYTE, jni.JniType.objectType)
      .object);

  static final _id_CALORIE = jniAccessors.getStaticFieldIDOf(
      _classRef, "CALORIE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CALORIE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of energy: calorie
  static MeasureUnit get CALORIE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CALORIE, jni.JniType.objectType)
      .object);

  static final _id_CARAT = jniAccessors.getStaticFieldIDOf(
      _classRef, "CARAT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CARAT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of mass: carat
  static MeasureUnit get CARAT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CARAT, jni.JniType.objectType)
      .object);

  static final _id_CELSIUS = jniAccessors.getStaticFieldIDOf(
      _classRef, "CELSIUS", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CELSIUS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of temperature: celsius
  static MeasureUnit get CELSIUS => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CELSIUS, jni.JniType.objectType)
      .object);

  static final _id_CENTILITER = jniAccessors.getStaticFieldIDOf(
      _classRef, "CENTILITER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CENTILITER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: centiliter
  static MeasureUnit get CENTILITER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CENTILITER, jni.JniType.objectType)
      .object);

  static final _id_CENTIMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "CENTIMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CENTIMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: centimeter
  static MeasureUnit get CENTIMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CENTIMETER, jni.JniType.objectType)
      .object);

  static final _id_CENTURY = jniAccessors.getStaticFieldIDOf(
      _classRef, "CENTURY", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CENTURY
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of duration: century
  static MeasureUnit get CENTURY => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CENTURY, jni.JniType.objectType)
      .object);

  static final _id_CUBIC_CENTIMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "CUBIC_CENTIMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CUBIC_CENTIMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: cubic-centimeter
  static MeasureUnit get CUBIC_CENTIMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CUBIC_CENTIMETER, jni.JniType.objectType)
      .object);

  static final _id_CUBIC_FOOT = jniAccessors.getStaticFieldIDOf(
      _classRef, "CUBIC_FOOT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CUBIC_FOOT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: cubic-foot
  static MeasureUnit get CUBIC_FOOT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CUBIC_FOOT, jni.JniType.objectType)
      .object);

  static final _id_CUBIC_INCH = jniAccessors.getStaticFieldIDOf(
      _classRef, "CUBIC_INCH", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CUBIC_INCH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: cubic-inch
  static MeasureUnit get CUBIC_INCH => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CUBIC_INCH, jni.JniType.objectType)
      .object);

  static final _id_CUBIC_KILOMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "CUBIC_KILOMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CUBIC_KILOMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: cubic-kilometer
  static MeasureUnit get CUBIC_KILOMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CUBIC_KILOMETER, jni.JniType.objectType)
      .object);

  static final _id_CUBIC_METER = jniAccessors.getStaticFieldIDOf(
      _classRef, "CUBIC_METER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CUBIC_METER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: cubic-meter
  static MeasureUnit get CUBIC_METER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CUBIC_METER, jni.JniType.objectType)
      .object);

  static final _id_CUBIC_MILE = jniAccessors.getStaticFieldIDOf(
      _classRef, "CUBIC_MILE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CUBIC_MILE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: cubic-mile
  static MeasureUnit get CUBIC_MILE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CUBIC_MILE, jni.JniType.objectType)
      .object);

  static final _id_CUBIC_YARD = jniAccessors.getStaticFieldIDOf(
      _classRef, "CUBIC_YARD", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CUBIC_YARD
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: cubic-yard
  static MeasureUnit get CUBIC_YARD => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CUBIC_YARD, jni.JniType.objectType)
      .object);

  static final _id_CUP = jniAccessors.getStaticFieldIDOf(
      _classRef, "CUP", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CUP
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: cup
  static MeasureUnit get CUP => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CUP, jni.JniType.objectType)
      .object);

  static final _id_CUP_METRIC = jniAccessors.getStaticFieldIDOf(
      _classRef, "CUP_METRIC", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit CUP_METRIC
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: cup-metric
  static MeasureUnit get CUP_METRIC => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CUP_METRIC, jni.JniType.objectType)
      .object);

  static final _id_DAY = jniAccessors.getStaticFieldIDOf(
      _classRef, "DAY", "Landroid/icu/util/TimeUnit;");

  /// from: static public final android.icu.util.TimeUnit DAY
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of duration: day
  static timeunit_.TimeUnit get DAY => timeunit_.TimeUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_DAY, jni.JniType.objectType)
      .object);

  static final _id_DECILITER = jniAccessors.getStaticFieldIDOf(
      _classRef, "DECILITER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit DECILITER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: deciliter
  static MeasureUnit get DECILITER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_DECILITER, jni.JniType.objectType)
      .object);

  static final _id_DECIMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "DECIMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit DECIMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: decimeter
  static MeasureUnit get DECIMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_DECIMETER, jni.JniType.objectType)
      .object);

  static final _id_DEGREE = jniAccessors.getStaticFieldIDOf(
      _classRef, "DEGREE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit DEGREE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of angle: degree
  static MeasureUnit get DEGREE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_DEGREE, jni.JniType.objectType)
      .object);

  static final _id_FAHRENHEIT = jniAccessors.getStaticFieldIDOf(
      _classRef, "FAHRENHEIT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit FAHRENHEIT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of temperature: fahrenheit
  static MeasureUnit get FAHRENHEIT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_FAHRENHEIT, jni.JniType.objectType)
      .object);

  static final _id_FATHOM = jniAccessors.getStaticFieldIDOf(
      _classRef, "FATHOM", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit FATHOM
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: fathom
  static MeasureUnit get FATHOM => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_FATHOM, jni.JniType.objectType)
      .object);

  static final _id_FLUID_OUNCE = jniAccessors.getStaticFieldIDOf(
      _classRef, "FLUID_OUNCE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit FLUID_OUNCE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: fluid-ounce
  static MeasureUnit get FLUID_OUNCE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_FLUID_OUNCE, jni.JniType.objectType)
      .object);

  static final _id_FOODCALORIE = jniAccessors.getStaticFieldIDOf(
      _classRef, "FOODCALORIE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit FOODCALORIE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of energy: foodcalorie
  static MeasureUnit get FOODCALORIE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_FOODCALORIE, jni.JniType.objectType)
      .object);

  static final _id_FOOT = jniAccessors.getStaticFieldIDOf(
      _classRef, "FOOT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit FOOT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: foot
  static MeasureUnit get FOOT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_FOOT, jni.JniType.objectType)
      .object);

  static final _id_FURLONG = jniAccessors.getStaticFieldIDOf(
      _classRef, "FURLONG", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit FURLONG
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: furlong
  static MeasureUnit get FURLONG => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_FURLONG, jni.JniType.objectType)
      .object);

  static final _id_GALLON = jniAccessors.getStaticFieldIDOf(
      _classRef, "GALLON", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit GALLON
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: gallon
  static MeasureUnit get GALLON => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_GALLON, jni.JniType.objectType)
      .object);

  static final _id_GALLON_IMPERIAL = jniAccessors.getStaticFieldIDOf(
      _classRef, "GALLON_IMPERIAL", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit GALLON_IMPERIAL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: gallon-imperial
  static MeasureUnit get GALLON_IMPERIAL => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_GALLON_IMPERIAL, jni.JniType.objectType)
      .object);

  static final _id_GENERIC_TEMPERATURE = jniAccessors.getStaticFieldIDOf(
      _classRef, "GENERIC_TEMPERATURE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit GENERIC_TEMPERATURE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of temperature: generic
  static MeasureUnit get GENERIC_TEMPERATURE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(
          _classRef, _id_GENERIC_TEMPERATURE, jni.JniType.objectType)
      .object);

  static final _id_GIGABIT = jniAccessors.getStaticFieldIDOf(
      _classRef, "GIGABIT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit GIGABIT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of digital: gigabit
  static MeasureUnit get GIGABIT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_GIGABIT, jni.JniType.objectType)
      .object);

  static final _id_GIGABYTE = jniAccessors.getStaticFieldIDOf(
      _classRef, "GIGABYTE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit GIGABYTE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of digital: gigabyte
  static MeasureUnit get GIGABYTE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_GIGABYTE, jni.JniType.objectType)
      .object);

  static final _id_GIGAHERTZ = jniAccessors.getStaticFieldIDOf(
      _classRef, "GIGAHERTZ", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit GIGAHERTZ
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of frequency: gigahertz
  static MeasureUnit get GIGAHERTZ => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_GIGAHERTZ, jni.JniType.objectType)
      .object);

  static final _id_GIGAWATT = jniAccessors.getStaticFieldIDOf(
      _classRef, "GIGAWATT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit GIGAWATT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of power: gigawatt
  static MeasureUnit get GIGAWATT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_GIGAWATT, jni.JniType.objectType)
      .object);

  static final _id_GRAM = jniAccessors.getStaticFieldIDOf(
      _classRef, "GRAM", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit GRAM
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of mass: gram
  static MeasureUnit get GRAM => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_GRAM, jni.JniType.objectType)
      .object);

  static final _id_G_FORCE = jniAccessors.getStaticFieldIDOf(
      _classRef, "G_FORCE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit G_FORCE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of acceleration: g-force
  static MeasureUnit get G_FORCE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_G_FORCE, jni.JniType.objectType)
      .object);

  static final _id_HECTARE = jniAccessors.getStaticFieldIDOf(
      _classRef, "HECTARE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit HECTARE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of area: hectare
  static MeasureUnit get HECTARE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_HECTARE, jni.JniType.objectType)
      .object);

  static final _id_HECTOLITER = jniAccessors.getStaticFieldIDOf(
      _classRef, "HECTOLITER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit HECTOLITER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: hectoliter
  static MeasureUnit get HECTOLITER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_HECTOLITER, jni.JniType.objectType)
      .object);

  static final _id_HECTOPASCAL = jniAccessors.getStaticFieldIDOf(
      _classRef, "HECTOPASCAL", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit HECTOPASCAL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of pressure: hectopascal
  static MeasureUnit get HECTOPASCAL => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_HECTOPASCAL, jni.JniType.objectType)
      .object);

  static final _id_HERTZ = jniAccessors.getStaticFieldIDOf(
      _classRef, "HERTZ", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit HERTZ
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of frequency: hertz
  static MeasureUnit get HERTZ => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_HERTZ, jni.JniType.objectType)
      .object);

  static final _id_HORSEPOWER = jniAccessors.getStaticFieldIDOf(
      _classRef, "HORSEPOWER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit HORSEPOWER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of power: horsepower
  static MeasureUnit get HORSEPOWER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_HORSEPOWER, jni.JniType.objectType)
      .object);

  static final _id_HOUR = jniAccessors.getStaticFieldIDOf(
      _classRef, "HOUR", "Landroid/icu/util/TimeUnit;");

  /// from: static public final android.icu.util.TimeUnit HOUR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of duration: hour
  static timeunit_.TimeUnit get HOUR => timeunit_.TimeUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_HOUR, jni.JniType.objectType)
      .object);

  static final _id_INCH = jniAccessors.getStaticFieldIDOf(
      _classRef, "INCH", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit INCH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: inch
  static MeasureUnit get INCH => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_INCH, jni.JniType.objectType)
      .object);

  static final _id_INCH_HG = jniAccessors.getStaticFieldIDOf(
      _classRef, "INCH_HG", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit INCH_HG
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of pressure: inch-hg
  static MeasureUnit get INCH_HG => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_INCH_HG, jni.JniType.objectType)
      .object);

  static final _id_JOULE = jniAccessors.getStaticFieldIDOf(
      _classRef, "JOULE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit JOULE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of energy: joule
  static MeasureUnit get JOULE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_JOULE, jni.JniType.objectType)
      .object);

  static final _id_KARAT = jniAccessors.getStaticFieldIDOf(
      _classRef, "KARAT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KARAT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of concentr: karat
  static MeasureUnit get KARAT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KARAT, jni.JniType.objectType)
      .object);

  static final _id_KELVIN = jniAccessors.getStaticFieldIDOf(
      _classRef, "KELVIN", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KELVIN
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of temperature: kelvin
  static MeasureUnit get KELVIN => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KELVIN, jni.JniType.objectType)
      .object);

  static final _id_KILOBIT = jniAccessors.getStaticFieldIDOf(
      _classRef, "KILOBIT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KILOBIT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of digital: kilobit
  static MeasureUnit get KILOBIT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KILOBIT, jni.JniType.objectType)
      .object);

  static final _id_KILOBYTE = jniAccessors.getStaticFieldIDOf(
      _classRef, "KILOBYTE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KILOBYTE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of digital: kilobyte
  static MeasureUnit get KILOBYTE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KILOBYTE, jni.JniType.objectType)
      .object);

  static final _id_KILOCALORIE = jniAccessors.getStaticFieldIDOf(
      _classRef, "KILOCALORIE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KILOCALORIE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of energy: kilocalorie
  static MeasureUnit get KILOCALORIE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KILOCALORIE, jni.JniType.objectType)
      .object);

  static final _id_KILOGRAM = jniAccessors.getStaticFieldIDOf(
      _classRef, "KILOGRAM", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KILOGRAM
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of mass: kilogram
  static MeasureUnit get KILOGRAM => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KILOGRAM, jni.JniType.objectType)
      .object);

  static final _id_KILOHERTZ = jniAccessors.getStaticFieldIDOf(
      _classRef, "KILOHERTZ", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KILOHERTZ
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of frequency: kilohertz
  static MeasureUnit get KILOHERTZ => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KILOHERTZ, jni.JniType.objectType)
      .object);

  static final _id_KILOJOULE = jniAccessors.getStaticFieldIDOf(
      _classRef, "KILOJOULE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KILOJOULE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of energy: kilojoule
  static MeasureUnit get KILOJOULE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KILOJOULE, jni.JniType.objectType)
      .object);

  static final _id_KILOMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "KILOMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KILOMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: kilometer
  static MeasureUnit get KILOMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KILOMETER, jni.JniType.objectType)
      .object);

  static final _id_KILOMETER_PER_HOUR = jniAccessors.getStaticFieldIDOf(
      _classRef, "KILOMETER_PER_HOUR", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KILOMETER_PER_HOUR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of speed: kilometer-per-hour
  static MeasureUnit get KILOMETER_PER_HOUR => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KILOMETER_PER_HOUR, jni.JniType.objectType)
      .object);

  static final _id_KILOWATT = jniAccessors.getStaticFieldIDOf(
      _classRef, "KILOWATT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KILOWATT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of power: kilowatt
  static MeasureUnit get KILOWATT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KILOWATT, jni.JniType.objectType)
      .object);

  static final _id_KILOWATT_HOUR = jniAccessors.getStaticFieldIDOf(
      _classRef, "KILOWATT_HOUR", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KILOWATT_HOUR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of energy: kilowatt-hour
  static MeasureUnit get KILOWATT_HOUR => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KILOWATT_HOUR, jni.JniType.objectType)
      .object);

  static final _id_KNOT = jniAccessors.getStaticFieldIDOf(
      _classRef, "KNOT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit KNOT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of speed: knot
  static MeasureUnit get KNOT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KNOT, jni.JniType.objectType)
      .object);

  static final _id_LIGHT_YEAR = jniAccessors.getStaticFieldIDOf(
      _classRef, "LIGHT_YEAR", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit LIGHT_YEAR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: light-year
  static MeasureUnit get LIGHT_YEAR => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_LIGHT_YEAR, jni.JniType.objectType)
      .object);

  static final _id_LITER = jniAccessors.getStaticFieldIDOf(
      _classRef, "LITER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit LITER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: liter
  static MeasureUnit get LITER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_LITER, jni.JniType.objectType)
      .object);

  static final _id_LITER_PER_100KILOMETERS = jniAccessors.getStaticFieldIDOf(
      _classRef, "LITER_PER_100KILOMETERS", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit LITER_PER_100KILOMETERS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of consumption: liter-per-100kilometers
  static MeasureUnit get LITER_PER_100KILOMETERS => MeasureUnit.fromRef(
      jniAccessors
          .getStaticField(
              _classRef, _id_LITER_PER_100KILOMETERS, jni.JniType.objectType)
          .object);

  static final _id_LITER_PER_KILOMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "LITER_PER_KILOMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit LITER_PER_KILOMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of consumption: liter-per-kilometer
  static MeasureUnit get LITER_PER_KILOMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(
          _classRef, _id_LITER_PER_KILOMETER, jni.JniType.objectType)
      .object);

  static final _id_LUX = jniAccessors.getStaticFieldIDOf(
      _classRef, "LUX", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit LUX
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of light: lux
  static MeasureUnit get LUX => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_LUX, jni.JniType.objectType)
      .object);

  static final _id_MEGABIT = jniAccessors.getStaticFieldIDOf(
      _classRef, "MEGABIT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MEGABIT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of digital: megabit
  static MeasureUnit get MEGABIT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MEGABIT, jni.JniType.objectType)
      .object);

  static final _id_MEGABYTE = jniAccessors.getStaticFieldIDOf(
      _classRef, "MEGABYTE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MEGABYTE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of digital: megabyte
  static MeasureUnit get MEGABYTE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MEGABYTE, jni.JniType.objectType)
      .object);

  static final _id_MEGAHERTZ = jniAccessors.getStaticFieldIDOf(
      _classRef, "MEGAHERTZ", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MEGAHERTZ
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of frequency: megahertz
  static MeasureUnit get MEGAHERTZ => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MEGAHERTZ, jni.JniType.objectType)
      .object);

  static final _id_MEGALITER = jniAccessors.getStaticFieldIDOf(
      _classRef, "MEGALITER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MEGALITER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: megaliter
  static MeasureUnit get MEGALITER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MEGALITER, jni.JniType.objectType)
      .object);

  static final _id_MEGAWATT = jniAccessors.getStaticFieldIDOf(
      _classRef, "MEGAWATT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MEGAWATT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of power: megawatt
  static MeasureUnit get MEGAWATT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MEGAWATT, jni.JniType.objectType)
      .object);

  static final _id_METER = jniAccessors.getStaticFieldIDOf(
      _classRef, "METER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit METER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: meter
  static MeasureUnit get METER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_METER, jni.JniType.objectType)
      .object);

  static final _id_METER_PER_SECOND = jniAccessors.getStaticFieldIDOf(
      _classRef, "METER_PER_SECOND", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit METER_PER_SECOND
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of speed: meter-per-second
  static MeasureUnit get METER_PER_SECOND => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_METER_PER_SECOND, jni.JniType.objectType)
      .object);

  static final _id_METER_PER_SECOND_SQUARED = jniAccessors.getStaticFieldIDOf(
      _classRef, "METER_PER_SECOND_SQUARED", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit METER_PER_SECOND_SQUARED
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of acceleration: meter-per-second-squared
  static MeasureUnit get METER_PER_SECOND_SQUARED =>
      MeasureUnit.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_METER_PER_SECOND_SQUARED, jni.JniType.objectType)
          .object);

  static final _id_METRIC_TON = jniAccessors.getStaticFieldIDOf(
      _classRef, "METRIC_TON", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit METRIC_TON
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of mass: metric-ton
  static MeasureUnit get METRIC_TON => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_METRIC_TON, jni.JniType.objectType)
      .object);

  static final _id_MICROGRAM = jniAccessors.getStaticFieldIDOf(
      _classRef, "MICROGRAM", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MICROGRAM
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of mass: microgram
  static MeasureUnit get MICROGRAM => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MICROGRAM, jni.JniType.objectType)
      .object);

  static final _id_MICROMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "MICROMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MICROMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: micrometer
  static MeasureUnit get MICROMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MICROMETER, jni.JniType.objectType)
      .object);

  static final _id_MICROSECOND = jniAccessors.getStaticFieldIDOf(
      _classRef, "MICROSECOND", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MICROSECOND
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of duration: microsecond
  static MeasureUnit get MICROSECOND => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MICROSECOND, jni.JniType.objectType)
      .object);

  static final _id_MILE = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: mile
  static MeasureUnit get MILE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MILE, jni.JniType.objectType)
      .object);

  static final _id_MILE_PER_GALLON = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILE_PER_GALLON", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILE_PER_GALLON
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of consumption: mile-per-gallon
  static MeasureUnit get MILE_PER_GALLON => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MILE_PER_GALLON, jni.JniType.objectType)
      .object);

  static final _id_MILE_PER_GALLON_IMPERIAL = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILE_PER_GALLON_IMPERIAL", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILE_PER_GALLON_IMPERIAL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of consumption: mile-per-gallon-imperial
  static MeasureUnit get MILE_PER_GALLON_IMPERIAL =>
      MeasureUnit.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_MILE_PER_GALLON_IMPERIAL, jni.JniType.objectType)
          .object);

  static final _id_MILE_PER_HOUR = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILE_PER_HOUR", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILE_PER_HOUR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of speed: mile-per-hour
  static MeasureUnit get MILE_PER_HOUR => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MILE_PER_HOUR, jni.JniType.objectType)
      .object);

  static final _id_MILE_SCANDINAVIAN = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILE_SCANDINAVIAN", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILE_SCANDINAVIAN
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: mile-scandinavian
  static MeasureUnit get MILE_SCANDINAVIAN => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MILE_SCANDINAVIAN, jni.JniType.objectType)
      .object);

  static final _id_MILLIAMPERE = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLIAMPERE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILLIAMPERE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of electric: milliampere
  static MeasureUnit get MILLIAMPERE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MILLIAMPERE, jni.JniType.objectType)
      .object);

  static final _id_MILLIBAR = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLIBAR", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILLIBAR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of pressure: millibar
  static MeasureUnit get MILLIBAR => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MILLIBAR, jni.JniType.objectType)
      .object);

  static final _id_MILLIGRAM = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLIGRAM", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILLIGRAM
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of mass: milligram
  static MeasureUnit get MILLIGRAM => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MILLIGRAM, jni.JniType.objectType)
      .object);

  static final _id_MILLIGRAM_PER_DECILITER = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLIGRAM_PER_DECILITER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILLIGRAM_PER_DECILITER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of concentr: milligram-per-deciliter
  static MeasureUnit get MILLIGRAM_PER_DECILITER => MeasureUnit.fromRef(
      jniAccessors
          .getStaticField(
              _classRef, _id_MILLIGRAM_PER_DECILITER, jni.JniType.objectType)
          .object);

  static final _id_MILLILITER = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLILITER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILLILITER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: milliliter
  static MeasureUnit get MILLILITER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MILLILITER, jni.JniType.objectType)
      .object);

  static final _id_MILLIMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLIMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILLIMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: millimeter
  static MeasureUnit get MILLIMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MILLIMETER, jni.JniType.objectType)
      .object);

  static final _id_MILLIMETER_OF_MERCURY = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLIMETER_OF_MERCURY", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILLIMETER_OF_MERCURY
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of pressure: millimeter-of-mercury
  static MeasureUnit get MILLIMETER_OF_MERCURY =>
      MeasureUnit.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_MILLIMETER_OF_MERCURY, jni.JniType.objectType)
          .object);

  static final _id_MILLIMOLE_PER_LITER = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLIMOLE_PER_LITER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILLIMOLE_PER_LITER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of concentr: millimole-per-liter
  static MeasureUnit get MILLIMOLE_PER_LITER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(
          _classRef, _id_MILLIMOLE_PER_LITER, jni.JniType.objectType)
      .object);

  static final _id_MILLISECOND = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLISECOND", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILLISECOND
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of duration: millisecond
  static MeasureUnit get MILLISECOND => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MILLISECOND, jni.JniType.objectType)
      .object);

  static final _id_MILLIWATT = jniAccessors.getStaticFieldIDOf(
      _classRef, "MILLIWATT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit MILLIWATT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of power: milliwatt
  static MeasureUnit get MILLIWATT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MILLIWATT, jni.JniType.objectType)
      .object);

  static final _id_MINUTE = jniAccessors.getStaticFieldIDOf(
      _classRef, "MINUTE", "Landroid/icu/util/TimeUnit;");

  /// from: static public final android.icu.util.TimeUnit MINUTE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of duration: minute
  static timeunit_.TimeUnit get MINUTE =>
      timeunit_.TimeUnit.fromRef(jniAccessors
          .getStaticField(_classRef, _id_MINUTE, jni.JniType.objectType)
          .object);

  static final _id_MONTH = jniAccessors.getStaticFieldIDOf(
      _classRef, "MONTH", "Landroid/icu/util/TimeUnit;");

  /// from: static public final android.icu.util.TimeUnit MONTH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of duration: month
  static timeunit_.TimeUnit get MONTH => timeunit_.TimeUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_MONTH, jni.JniType.objectType)
      .object);

  static final _id_NANOMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "NANOMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit NANOMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: nanometer
  static MeasureUnit get NANOMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_NANOMETER, jni.JniType.objectType)
      .object);

  static final _id_NANOSECOND = jniAccessors.getStaticFieldIDOf(
      _classRef, "NANOSECOND", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit NANOSECOND
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of duration: nanosecond
  static MeasureUnit get NANOSECOND => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_NANOSECOND, jni.JniType.objectType)
      .object);

  static final _id_NAUTICAL_MILE = jniAccessors.getStaticFieldIDOf(
      _classRef, "NAUTICAL_MILE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit NAUTICAL_MILE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: nautical-mile
  static MeasureUnit get NAUTICAL_MILE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_NAUTICAL_MILE, jni.JniType.objectType)
      .object);

  static final _id_OHM = jniAccessors.getStaticFieldIDOf(
      _classRef, "OHM", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit OHM
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of electric: ohm
  static MeasureUnit get OHM => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_OHM, jni.JniType.objectType)
      .object);

  static final _id_OUNCE = jniAccessors.getStaticFieldIDOf(
      _classRef, "OUNCE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit OUNCE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of mass: ounce
  static MeasureUnit get OUNCE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_OUNCE, jni.JniType.objectType)
      .object);

  static final _id_OUNCE_TROY = jniAccessors.getStaticFieldIDOf(
      _classRef, "OUNCE_TROY", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit OUNCE_TROY
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of mass: ounce-troy
  static MeasureUnit get OUNCE_TROY => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_OUNCE_TROY, jni.JniType.objectType)
      .object);

  static final _id_PARSEC = jniAccessors.getStaticFieldIDOf(
      _classRef, "PARSEC", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit PARSEC
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: parsec
  static MeasureUnit get PARSEC => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_PARSEC, jni.JniType.objectType)
      .object);

  static final _id_PART_PER_MILLION = jniAccessors.getStaticFieldIDOf(
      _classRef, "PART_PER_MILLION", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit PART_PER_MILLION
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of concentr: part-per-million
  static MeasureUnit get PART_PER_MILLION => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_PART_PER_MILLION, jni.JniType.objectType)
      .object);

  static final _id_PICOMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "PICOMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit PICOMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: picometer
  static MeasureUnit get PICOMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_PICOMETER, jni.JniType.objectType)
      .object);

  static final _id_PINT = jniAccessors.getStaticFieldIDOf(
      _classRef, "PINT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit PINT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: pint
  static MeasureUnit get PINT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_PINT, jni.JniType.objectType)
      .object);

  static final _id_PINT_METRIC = jniAccessors.getStaticFieldIDOf(
      _classRef, "PINT_METRIC", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit PINT_METRIC
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: pint-metric
  static MeasureUnit get PINT_METRIC => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_PINT_METRIC, jni.JniType.objectType)
      .object);

  static final _id_POUND = jniAccessors.getStaticFieldIDOf(
      _classRef, "POUND", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit POUND
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of mass: pound
  static MeasureUnit get POUND => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_POUND, jni.JniType.objectType)
      .object);

  static final _id_POUND_PER_SQUARE_INCH = jniAccessors.getStaticFieldIDOf(
      _classRef, "POUND_PER_SQUARE_INCH", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit POUND_PER_SQUARE_INCH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of pressure: pound-per-square-inch
  static MeasureUnit get POUND_PER_SQUARE_INCH =>
      MeasureUnit.fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_POUND_PER_SQUARE_INCH, jni.JniType.objectType)
          .object);

  static final _id_QUART = jniAccessors.getStaticFieldIDOf(
      _classRef, "QUART", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit QUART
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: quart
  static MeasureUnit get QUART => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_QUART, jni.JniType.objectType)
      .object);

  static final _id_RADIAN = jniAccessors.getStaticFieldIDOf(
      _classRef, "RADIAN", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit RADIAN
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of angle: radian
  static MeasureUnit get RADIAN => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_RADIAN, jni.JniType.objectType)
      .object);

  static final _id_REVOLUTION_ANGLE = jniAccessors.getStaticFieldIDOf(
      _classRef, "REVOLUTION_ANGLE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit REVOLUTION_ANGLE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of angle: revolution
  static MeasureUnit get REVOLUTION_ANGLE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_REVOLUTION_ANGLE, jni.JniType.objectType)
      .object);

  static final _id_SECOND = jniAccessors.getStaticFieldIDOf(
      _classRef, "SECOND", "Landroid/icu/util/TimeUnit;");

  /// from: static public final android.icu.util.TimeUnit SECOND
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of duration: second
  static timeunit_.TimeUnit get SECOND =>
      timeunit_.TimeUnit.fromRef(jniAccessors
          .getStaticField(_classRef, _id_SECOND, jni.JniType.objectType)
          .object);

  static final _id_SQUARE_CENTIMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "SQUARE_CENTIMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit SQUARE_CENTIMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of area: square-centimeter
  static MeasureUnit get SQUARE_CENTIMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SQUARE_CENTIMETER, jni.JniType.objectType)
      .object);

  static final _id_SQUARE_FOOT = jniAccessors.getStaticFieldIDOf(
      _classRef, "SQUARE_FOOT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit SQUARE_FOOT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of area: square-foot
  static MeasureUnit get SQUARE_FOOT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SQUARE_FOOT, jni.JniType.objectType)
      .object);

  static final _id_SQUARE_INCH = jniAccessors.getStaticFieldIDOf(
      _classRef, "SQUARE_INCH", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit SQUARE_INCH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of area: square-inch
  static MeasureUnit get SQUARE_INCH => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SQUARE_INCH, jni.JniType.objectType)
      .object);

  static final _id_SQUARE_KILOMETER = jniAccessors.getStaticFieldIDOf(
      _classRef, "SQUARE_KILOMETER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit SQUARE_KILOMETER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of area: square-kilometer
  static MeasureUnit get SQUARE_KILOMETER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SQUARE_KILOMETER, jni.JniType.objectType)
      .object);

  static final _id_SQUARE_METER = jniAccessors.getStaticFieldIDOf(
      _classRef, "SQUARE_METER", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit SQUARE_METER
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of area: square-meter
  static MeasureUnit get SQUARE_METER => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SQUARE_METER, jni.JniType.objectType)
      .object);

  static final _id_SQUARE_MILE = jniAccessors.getStaticFieldIDOf(
      _classRef, "SQUARE_MILE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit SQUARE_MILE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of area: square-mile
  static MeasureUnit get SQUARE_MILE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SQUARE_MILE, jni.JniType.objectType)
      .object);

  static final _id_SQUARE_YARD = jniAccessors.getStaticFieldIDOf(
      _classRef, "SQUARE_YARD", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit SQUARE_YARD
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of area: square-yard
  static MeasureUnit get SQUARE_YARD => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SQUARE_YARD, jni.JniType.objectType)
      .object);

  static final _id_STONE = jniAccessors.getStaticFieldIDOf(
      _classRef, "STONE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit STONE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of mass: stone
  static MeasureUnit get STONE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_STONE, jni.JniType.objectType)
      .object);

  static final _id_TABLESPOON = jniAccessors.getStaticFieldIDOf(
      _classRef, "TABLESPOON", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit TABLESPOON
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: tablespoon
  static MeasureUnit get TABLESPOON => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_TABLESPOON, jni.JniType.objectType)
      .object);

  static final _id_TEASPOON = jniAccessors.getStaticFieldIDOf(
      _classRef, "TEASPOON", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit TEASPOON
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of volume: teaspoon
  static MeasureUnit get TEASPOON => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_TEASPOON, jni.JniType.objectType)
      .object);

  static final _id_TERABIT = jniAccessors.getStaticFieldIDOf(
      _classRef, "TERABIT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit TERABIT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of digital: terabit
  static MeasureUnit get TERABIT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_TERABIT, jni.JniType.objectType)
      .object);

  static final _id_TERABYTE = jniAccessors.getStaticFieldIDOf(
      _classRef, "TERABYTE", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit TERABYTE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of digital: terabyte
  static MeasureUnit get TERABYTE => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_TERABYTE, jni.JniType.objectType)
      .object);

  static final _id_TON = jniAccessors.getStaticFieldIDOf(
      _classRef, "TON", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit TON
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of mass: ton
  static MeasureUnit get TON => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_TON, jni.JniType.objectType)
      .object);

  static final _id_VOLT = jniAccessors.getStaticFieldIDOf(
      _classRef, "VOLT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit VOLT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of electric: volt
  static MeasureUnit get VOLT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_VOLT, jni.JniType.objectType)
      .object);

  static final _id_WATT = jniAccessors.getStaticFieldIDOf(
      _classRef, "WATT", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit WATT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of power: watt
  static MeasureUnit get WATT => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_WATT, jni.JniType.objectType)
      .object);

  static final _id_WEEK = jniAccessors.getStaticFieldIDOf(
      _classRef, "WEEK", "Landroid/icu/util/TimeUnit;");

  /// from: static public final android.icu.util.TimeUnit WEEK
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of duration: week
  static timeunit_.TimeUnit get WEEK => timeunit_.TimeUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_WEEK, jni.JniType.objectType)
      .object);

  static final _id_YARD = jniAccessors.getStaticFieldIDOf(
      _classRef, "YARD", "Landroid/icu/util/MeasureUnit;");

  /// from: static public final android.icu.util.MeasureUnit YARD
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of length: yard
  static MeasureUnit get YARD => MeasureUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_YARD, jni.JniType.objectType)
      .object);

  static final _id_YEAR = jniAccessors.getStaticFieldIDOf(
      _classRef, "YEAR", "Landroid/icu/util/TimeUnit;");

  /// from: static public final android.icu.util.TimeUnit YEAR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for unit of duration: year
  static timeunit_.TimeUnit get YEAR => timeunit_.TimeUnit.fromRef(jniAccessors
      .getStaticField(_classRef, _id_YEAR, jni.JniType.objectType)
      .object);

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the type, such as "length"
  jni.JniString getType() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getType, jni.JniType.objectType, []).object);

  static final _id_getSubtype = jniAccessors.getMethodIDOf(
      _classRef, "getSubtype", "()Ljava/lang/String;");

  /// from: public java.lang.String getSubtype()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the subType, such as \u201cfoot\u201d.
  jni.JniString getSubtype() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSubtype, jni.JniType.objectType, []).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// {@inheritDoc}
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object rhs)
  ///
  /// {@inheritDoc}
  bool equals1(jni.JniObject rhs) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [rhs.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_getAvailableTypes = jniAccessors.getStaticMethodIDOf(
      _classRef, "getAvailableTypes", "()Ljava/util/Set;");

  /// from: synchronized static public java.util.Set<java.lang.String> getAvailableTypes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get all of the available units' types. Returned set is unmodifiable.
  static jni.JniObject getAvailableTypes() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getAvailableTypes, jni.JniType.objectType, []).object);

  static final _id_getAvailable = jniAccessors.getStaticMethodIDOf(
      _classRef, "getAvailable", "(Ljava/lang/String;)Ljava/util/Set;");

  /// from: synchronized static public java.util.Set<android.icu.util.MeasureUnit> getAvailable(java.lang.String type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// For the given type, return the available units.
  ///@param type the type
  ///@return the available units for type. Returned set is unmodifiable.
  static jni.JniObject getAvailable(jni.JniString type) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getAvailable, jni.JniType.objectType, [type.reference]).object);

  static final _id_getAvailable1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getAvailable", "()Ljava/util/Set;");

  /// from: synchronized static public java.util.Set<android.icu.util.MeasureUnit> getAvailable()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get all of the available units. Returned set is unmodifiable.
  static jni.JniObject getAvailable1() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getAvailable1, jni.JniType.objectType, []).object);
}
