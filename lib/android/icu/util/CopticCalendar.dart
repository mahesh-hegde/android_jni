// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Calendar.dart" as calendar_;

import "TimeZone.dart" as timezone_;

import "ULocale.dart" as ulocale_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.util.CopticCalendar
///
/// Implement the Coptic calendar system.
///
/// CopticCalendar usually should be instantiated using
/// android.icu.util.Calendar\#getInstance(ULocale) passing in a <code>ULocale</code>
/// with the tag <code>"@calendar=coptic"</code>.
///
///@see android.icu.util.Calendar
class CopticCalendar extends calendar_.Calendar {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/util/CopticCalendar");
  CopticCalendar.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int AMSHIR
  ///
  /// Constant for \u039c\u03b5\u03e3\u03b9\u03c1 / \ufeae\ufef4\ufeb8\ufee3\u0623,
  /// the 6th month of the Coptic year.
  static const AMSHIR = 5;

  /// from: static public final int BABA
  ///
  /// Constant for \u03a0\u03b1\u03bf\u03c0\u03b9 / \ufeea\ufe91\ufe8e\ufe91,
  /// the 2nd month of the Coptic year.
  static const BABA = 1;

  /// from: static public final int BARAMHAT
  ///
  /// Constant for \u03a0\u03b1\u03c1\u03b5\u03bc\u03e9\u03b1\u03c4 / \u062a\ufe8e\ufeec\ufee3\ufeae\ufe91,
  /// the 7th month of the Coptic year.
  static const BARAMHAT = 6;

  /// from: static public final int BARAMOUDA
  ///
  /// Constant for \u03a6\u03b1\u03c1\u03bc\u03bf\u03b8\u03b9 / \u0647\u062f\ufeee\ufee3\ufeae\ufe91,
  /// the 8th month of the Coptic year.
  static const BARAMOUDA = 7;

  /// from: static public final int BASHANS
  ///
  /// Constant for \u03a0\u03b1\u03e3\u03b1\u03bd / \ufeb2\ufee8\ufeb8\ufe91;,
  /// the 9th month of the Coptic year.
  static const BASHANS = 8;

  /// from: static public final int EPEP
  ///
  /// Constant for \u0395\u03c0\u03b7\u03c0 / \ufe90\ufef4\ufe91\u0623,
  /// the 11th month of the Coptic year.
  static const EPEP = 10;

  /// from: static public final int HATOR
  ///
  /// Constant for \u0391\u03b8\u03bf\u03c1 / \u0631\ufeee\ufe97\ufe8e\ufeeb,
  /// the 3rd month of the Coptic year.
  static const HATOR = 2;

  /// from: static public final int KIAHK
  ///
  /// Constant for \u03a7\u03bf\u03b9\u03b1\u03ba / \ufeda\ufeec\ufef4\ufedb;,
  /// the 4th month of the Coptic year.
  static const KIAHK = 3;

  /// from: static public final int MESRA
  ///
  /// Constant for \u039c\u03b5\u03f2\u03c9\u03c1\u03b7 / \u0649\ufeae\ufeb4\ufee3,
  /// the 12th month of the Coptic year.
  static const MESRA = 11;

  /// from: static public final int NASIE
  ///
  /// Constant for \u03a0\u03b9\u03ba\u03bf\u03b3\u03eb\u03b9 \u03bc\u03b1\u03b2\u03bf\u03c4 / \ufeae\ufef4\ufed0\ufebc\ufedf\u0627\ufeae\ufeec\ufeb8\ufedf\u0627,
  /// the 13th month of the Coptic year.
  static const NASIE = 12;

  /// from: static public final int PAONA
  ///
  /// Constant for \u03a0\u03b1\u03c9\u03bd\u03b9 / \ufeea\ufee7\u0624\ufeee\ufe91,
  /// the 10th month of the Coptic year.
  static const PAONA = 9;

  /// from: static public final int TOBA
  ///
  /// Constant for \u03a4\u03c9\u03b2\u03b9 / \u0637\ufeee\ufe92\ufeeb,
  /// the 5th month of the Coptic year.
  static const TOBA = 4;

  /// from: static public final int TOUT
  ///
  /// Constant for \u03c9\u03bf\u03b3\u03c4 / \u062a\ufeee\ufe97,
  /// the 1st month of the Coptic year.
  static const TOUT = 0;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a default <code>CopticCalendar</code> using the current time
  /// in the default time zone with the default locale.
  CopticCalendar()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/TimeZone;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>CopticCalendar</code> based on the current time
  /// in the given time zone with the default locale.
  ///@param zone The time zone for the new calendar.
  CopticCalendar.ctor3(timezone_.TimeZone zone)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor3, [zone.reference]).object);

  static final _id_ctor4 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/Locale;)V");

  /// from: public void <init>(java.util.Locale aLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>CopticCalendar</code> based on the current time
  /// in the default time zone with the given locale.
  ///@param aLocale The locale for the new calendar.
  CopticCalendar.ctor4(jni.JniObject aLocale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [aLocale.reference]).object);

  static final _id_ctor5 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/ULocale;)V");

  /// from: public void <init>(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>CopticCalendar</code> based on the current time
  /// in the default time zone with the given locale.
  ///@param locale The icu locale for the new calendar.
  CopticCalendar.ctor5(ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor5, [locale.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/icu/util/TimeZone;Ljava/util/Locale;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone, java.util.Locale aLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>CopticCalendar</code> based on the current time
  /// in the given time zone with the given locale.
  ///@param zone The time zone for the new calendar.
  ///@param aLocale The locale for the new calendar.
  CopticCalendar.ctor1(timezone_.TimeZone zone, jni.JniObject aLocale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [zone.reference, aLocale.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/icu/util/TimeZone;Landroid/icu/util/ULocale;)V");

  /// from: public void <init>(android.icu.util.TimeZone zone, android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>CopticCalendar</code> based on the current time
  /// in the given time zone with the given locale.
  ///@param zone The time zone for the new calendar.
  ///@param locale The icu locale for the new calendar.
  CopticCalendar.ctor2(timezone_.TimeZone zone, ulocale_.ULocale locale)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor2, [zone.reference, locale.reference]).object);

  static final _id_ctor6 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(III)V");

  /// from: public void <init>(int year, int month, int date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>CopticCalendar</code> with the given date set
  /// in the default time zone with the default locale.
  ///@param year The value used to set the calendar's \#YEAR YEAR time field.
  ///@param month The value used to set the calendar's \#MONTH MONTH time field.
  ///                  The value is 0-based. e.g., 0 for Tout.
  ///@param date The value used to set the calendar's \#DATE DATE time field.
  CopticCalendar.ctor6(int year, int month, int date)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor6, [year, month, date]).object);

  static final _id_ctor7 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/util/Date;)V");

  /// from: public void <init>(java.util.Date date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>CopticCalendar</code> with the given date set
  /// in the default time zone with the default locale.
  ///@param date The date to which the new calendar is set.
  CopticCalendar.ctor7(jni.JniObject date)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor7, [date.reference]).object);

  static final _id_ctor8 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(IIIIII)V");

  /// from: public void <init>(int year, int month, int date, int hour, int minute, int second)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a <code>CopticCalendar</code> with the given date
  /// and time set for the default time zone with the default locale.
  ///@param year The value used to set the calendar's \#YEAR YEAR time field.
  ///@param month The value used to set the calendar's \#MONTH MONTH time field.
  ///                  The value is 0-based. e.g., 0 for Tout.
  ///@param date The value used to set the calendar's \#DATE DATE time field.
  ///@param hour The value used to set the calendar's \#HOUR_OF_DAY HOUR_OF_DAY time field.
  ///@param minute The value used to set the calendar's \#MINUTE MINUTE time field.
  ///@param second The value used to set the calendar's \#SECOND SECOND time field.
  CopticCalendar.ctor8(
      int year, int month, int date, int hour, int minute, int second)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor8,
            [year, month, date, hour, minute, second]).object);

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@inheritDoc}
  jni.JniString getType() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getType, jni.JniType.objectType, []).object);

  static final _id_handleGetExtendedYear =
      jniAccessors.getMethodIDOf(_classRef, "handleGetExtendedYear", "()I");

  /// from: protected int handleGetExtendedYear()
  ///
  /// {@inheritDoc}
  ///@deprecated This API is ICU internal only.
  ///@hide original deprecated declaration
  ///@hide draft / provisional / internal are hidden on Android
  int handleGetExtendedYear() => jniAccessors.callMethodWithArgs(
      reference, _id_handleGetExtendedYear, jni.JniType.intType, []).integer;

  static final _id_handleComputeFields =
      jniAccessors.getMethodIDOf(_classRef, "handleComputeFields", "(I)V");

  /// from: protected void handleComputeFields(int julianDay)
  ///
  /// {@inheritDoc}
  ///@deprecated This API is ICU internal only.
  ///@hide original deprecated declaration
  ///@hide draft / provisional / internal are hidden on Android
  void handleComputeFields(int julianDay) => jniAccessors.callMethodWithArgs(
      reference,
      _id_handleComputeFields,
      jni.JniType.voidType,
      [julianDay]).check();

  static final _id_handleGetMonthLength =
      jniAccessors.getMethodIDOf(_classRef, "handleGetMonthLength", "(II)I");

  /// from: protected int handleGetMonthLength(int extendedYear, int month)
  ///
  /// Return the number of days in the given month of the given extended
  /// year of this calendar system.  Subclasses should override this
  /// method if they can provide a more correct or more efficient
  /// implementation than the default implementation in Calendar.
  int handleGetMonthLength(int extendedYear, int month) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleGetMonthLength,
          jni.JniType.intType, [extendedYear, month]).integer;

  static final _id_handleComputeMonthStart = jniAccessors.getMethodIDOf(
      _classRef, "handleComputeMonthStart", "(IIZ)I");

  /// from: protected int handleComputeMonthStart(int eyear, int emonth, boolean useMonth)
  ///
  /// Return JD of start of given month/extended year
  int handleComputeMonthStart(int eyear, int emonth, bool useMonth) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleComputeMonthStart,
          jni.JniType.intType, [eyear, emonth, useMonth]).integer;

  static final _id_handleGetLimit =
      jniAccessors.getMethodIDOf(_classRef, "handleGetLimit", "(II)I");

  /// from: protected int handleGetLimit(int field, int limitType)
  ///
  /// Calculate the limit for a specified type of limit and field
  int handleGetLimit(int field, int limitType) =>
      jniAccessors.callMethodWithArgs(reference, _id_handleGetLimit,
          jni.JniType.intType, [field, limitType]).integer;
}
