// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.icu.util.ULocale
///
/// <strong>[icu enhancement]</strong> ICU's replacement for java.util.Locale.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.
///
/// A class analogous to java.util.Locale that provides additional
/// support for ICU protocol.  In ICU 3.0 this class is enhanced to support
/// RFC 3066 language identifiers.
///
/// Many classes and services in ICU follow a factory idiom, in
/// which a factory method or object responds to a client request with
/// an object.  The request includes a locale (the <i>requested</i>
/// locale), and the returned object is constructed using data for that
/// locale.  The system may lack data for the requested locale, in
/// which case the locale fallback mechanism will be invoked until a
/// populated locale is found (the <i>valid</i> locale).  Furthermore,
/// even when a populated locale is found (the <i>valid</i> locale),
/// further fallback may be required to reach a locale containing the
/// specific data required by the service (the <i>actual</i> locale).
///
/// ULocale performs __'normalization'__ and __'canonicalization'__ of locale ids.
/// Normalization 'cleans up' ICU locale ids as follows:
/// <ul>
/// <li>language, script, country, variant, and keywords are properly cased<br>
/// (lower, title, upper, upper, and lower case respectively)</li>
/// <li>hyphens used as separators are converted to underscores</li>
/// <li>three-letter language and country ids are converted to two-letter
/// equivalents where available</li>
/// <li>surrounding spaces are removed from keywords and values</li>
/// <li>if there are multiple keywords, they are put in sorted order</li>
/// </ul>
/// Canonicalization additionally performs the following:
/// <ul>
/// <li>POSIX ids are converted to ICU format IDs</li>
/// <li>'grandfathered' 3066 ids are converted to ICU standard form</li>
/// <li>'PREEURO' and 'EURO' variants are converted to currency keyword form,
/// with the currency
/// id appropriate to the country of the locale (for PREEURO) or EUR (for EURO).
/// </ul>
/// All ULocale constructors automatically normalize the locale id.  To handle
/// POSIX ids, <code>canonicalize</code> can be called to convert the id
/// to canonical form, or the <code>canonicalInstance</code> factory method
/// can be called.
///
/// Note: The <i>actual</i> locale is returned correctly, but the <i>valid</i>
/// locale is not, in most cases.
///@see java.util.Locale
///@author weiv
///@author Alan Liu
///@author Ram Viswanadha
class ULocale extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/icu/util/ULocale");
  ULocale.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CANADA = jniAccessors.getStaticFieldIDOf(
      _classRef, "CANADA", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale CANADA
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get CANADA => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CANADA, jni.JniType.objectType)
      .object);

  static final _id_CANADA_FRENCH = jniAccessors.getStaticFieldIDOf(
      _classRef, "CANADA_FRENCH", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale CANADA_FRENCH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get CANADA_FRENCH => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CANADA_FRENCH, jni.JniType.objectType)
      .object);

  static final _id_CHINA = jniAccessors.getStaticFieldIDOf(
      _classRef, "CHINA", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale CHINA
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get CHINA => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CHINA, jni.JniType.objectType)
      .object);

  static final _id_CHINESE = jniAccessors.getStaticFieldIDOf(
      _classRef, "CHINESE", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale CHINESE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for language.
  static ULocale get CHINESE => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CHINESE, jni.JniType.objectType)
      .object);

  static final _id_ENGLISH = jniAccessors.getStaticFieldIDOf(
      _classRef, "ENGLISH", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale ENGLISH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for language.
  static ULocale get ENGLISH => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ENGLISH, jni.JniType.objectType)
      .object);

  static final _id_FRANCE = jniAccessors.getStaticFieldIDOf(
      _classRef, "FRANCE", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale FRANCE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get FRANCE => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_FRANCE, jni.JniType.objectType)
      .object);

  static final _id_FRENCH = jniAccessors.getStaticFieldIDOf(
      _classRef, "FRENCH", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale FRENCH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for language.
  static ULocale get FRENCH => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_FRENCH, jni.JniType.objectType)
      .object);

  static final _id_GERMAN = jniAccessors.getStaticFieldIDOf(
      _classRef, "GERMAN", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale GERMAN
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for language.
  static ULocale get GERMAN => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_GERMAN, jni.JniType.objectType)
      .object);

  static final _id_GERMANY = jniAccessors.getStaticFieldIDOf(
      _classRef, "GERMANY", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale GERMANY
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get GERMANY => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_GERMANY, jni.JniType.objectType)
      .object);

  static final _id_ITALIAN = jniAccessors.getStaticFieldIDOf(
      _classRef, "ITALIAN", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale ITALIAN
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for language.
  static ULocale get ITALIAN => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ITALIAN, jni.JniType.objectType)
      .object);

  static final _id_ITALY = jniAccessors.getStaticFieldIDOf(
      _classRef, "ITALY", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale ITALY
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get ITALY => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ITALY, jni.JniType.objectType)
      .object);

  static final _id_JAPAN = jniAccessors.getStaticFieldIDOf(
      _classRef, "JAPAN", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale JAPAN
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get JAPAN => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_JAPAN, jni.JniType.objectType)
      .object);

  static final _id_JAPANESE = jniAccessors.getStaticFieldIDOf(
      _classRef, "JAPANESE", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale JAPANESE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for language.
  static ULocale get JAPANESE => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_JAPANESE, jni.JniType.objectType)
      .object);

  static final _id_KOREA = jniAccessors.getStaticFieldIDOf(
      _classRef, "KOREA", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale KOREA
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get KOREA => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KOREA, jni.JniType.objectType)
      .object);

  static final _id_KOREAN = jniAccessors.getStaticFieldIDOf(
      _classRef, "KOREAN", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale KOREAN
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for language.
  static ULocale get KOREAN => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_KOREAN, jni.JniType.objectType)
      .object);

  static final _id_PRC = jniAccessors.getStaticFieldIDOf(
      _classRef, "PRC", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale PRC
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get PRC => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_PRC, jni.JniType.objectType)
      .object);

  /// from: static public final char PRIVATE_USE_EXTENSION
  ///
  /// The key for the private use locale extension ('x').
  ///@see \#getExtension(char)
  ///@see Builder\#setExtension(char, String)
  static const PRIVATE_USE_EXTENSION = "x";

  static final _id_ROOT = jniAccessors.getStaticFieldIDOf(
      _classRef, "ROOT", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale ROOT
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The root ULocale.
  static ULocale get ROOT => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ROOT, jni.JniType.objectType)
      .object);

  static final _id_SIMPLIFIED_CHINESE = jniAccessors.getStaticFieldIDOf(
      _classRef, "SIMPLIFIED_CHINESE", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale SIMPLIFIED_CHINESE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for language.
  static ULocale get SIMPLIFIED_CHINESE => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_SIMPLIFIED_CHINESE, jni.JniType.objectType)
      .object);

  static final _id_TAIWAN = jniAccessors.getStaticFieldIDOf(
      _classRef, "TAIWAN", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale TAIWAN
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get TAIWAN => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_TAIWAN, jni.JniType.objectType)
      .object);

  static final _id_TRADITIONAL_CHINESE = jniAccessors.getStaticFieldIDOf(
      _classRef, "TRADITIONAL_CHINESE", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale TRADITIONAL_CHINESE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for language.
  static ULocale get TRADITIONAL_CHINESE => ULocale.fromRef(jniAccessors
      .getStaticField(
          _classRef, _id_TRADITIONAL_CHINESE, jni.JniType.objectType)
      .object);

  static final _id_UK = jniAccessors.getStaticFieldIDOf(
      _classRef, "UK", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale UK
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get UK => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_UK, jni.JniType.objectType)
      .object);

  /// from: static public final char UNICODE_LOCALE_EXTENSION
  ///
  /// The key for Unicode locale extension ('u').
  ///@see \#getExtension(char)
  ///@see Builder\#setExtension(char, String)
  static const UNICODE_LOCALE_EXTENSION = "u";

  static final _id_US = jniAccessors.getStaticFieldIDOf(
      _classRef, "US", "Landroid/icu/util/ULocale;");

  /// from: static public final android.icu.util.ULocale US
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Useful constant for country/region.
  static ULocale get US => ULocale.fromRef(jniAccessors
      .getStaticField(_classRef, _id_US, jni.JniType.objectType)
      .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Constructs a ULocale from a RFC 3066 locale ID. The locale ID consists
  /// of optional language, script, country, and variant fields in that order,
  /// separated by underscores, followed by an optional keyword list.  The
  /// script, if present, is four characters long-- this distinguishes it
  /// from a country code, which is two characters long.  Other fields
  /// are distinguished by position as indicated by the underscores.  The
  /// start of the keyword list is indicated by '@', and consists of two
  /// or more keyword/value pairs separated by semicolons(';').
  ///
  /// This constructor does not canonicalize the localeID.  So, for
  /// example, "zh__pinyin" remains unchanged instead of converting
  /// to "zh@collation=pinyin".  By default ICU only recognizes the
  /// latter as specifying pinyin collation.  Use \#createCanonical
  /// or \#canonicalize if you need to canonicalize the localeID.
  ///@param localeID string representation of the locale, e.g:
  /// "en_US", "sy_Cyrl_YU", "zh__pinyin", "es_ES@currency=EUR;collation=traditional"
  ULocale(jni.JniString localeID)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [localeID.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String a, java.lang.String b)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convenience overload of ULocale(String, String, String) for
  /// compatibility with java.util.Locale.
  ///@see \#ULocale(String, String, String)
  ULocale.ctor1(jni.JniString a, jni.JniString b)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [a.reference, b.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String a, java.lang.String b, java.lang.String c)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a ULocale from a localeID constructed from the three 'fields' a, b, and
  /// c.  These fields are concatenated using underscores to form a localeID of the form
  /// a_b_c, which is then handled like the localeID passed to <code>ULocale(String
  /// localeID)</code>.
  ///
  /// Java locale strings consisting of language, country, and
  /// variant will be handled by this form, since the country code
  /// (being shorter than four letters long) will not be interpreted
  /// as a script code.  If a script code is present, the final
  /// argument ('c') will be interpreted as the country code.  It is
  /// recommended that this constructor only be used to ease porting,
  /// and that clients instead use the single-argument constructor
  /// when constructing a ULocale from a localeID.
  ///@param a first component of the locale id
  ///@param b second component of the locale id
  ///@param c third component of the locale id
  ///@see \#ULocale(String)
  ULocale.ctor2(jni.JniString a, jni.JniString b, jni.JniString c)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [a.reference, b.reference, c.reference]).object);

  static final _id_forLocale = jniAccessors.getStaticMethodIDOf(
      _classRef, "forLocale", "(Ljava/util/Locale;)Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale forLocale(java.util.Locale loc)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a ULocale object for a java.util.Locale.
  /// The ULocale is canonicalized.
  ///@param loc a java.util.Locale
  static ULocale forLocale(jni.JniObject loc) =>
      ULocale.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_forLocale, jni.JniType.objectType, [loc.reference]).object);

  static final _id_createCanonical = jniAccessors.getStaticMethodIDOf(_classRef,
      "createCanonical", "(Ljava/lang/String;)Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale createCanonical(java.lang.String nonCanonicalID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Creates a ULocale from the id by first canonicalizing the id.
  ///@param nonCanonicalID the locale id to canonicalize
  ///@return the locale created from the canonical version of the ID.
  static ULocale createCanonical(jni.JniString nonCanonicalID) =>
      ULocale.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createCanonical,
          jni.JniType.objectType,
          [nonCanonicalID.reference]).object);

  static final _id_toLocale =
      jniAccessors.getMethodIDOf(_classRef, "toLocale", "()Ljava/util/Locale;");

  /// from: public java.util.Locale toLocale()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Converts this ULocale object to a java.util.Locale.
  ///@return a java.util.Locale that either exactly represents this object
  /// or is the closest approximation.
  jni.JniObject toLocale() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toLocale, jni.JniType.objectType, []).object);

  static final _id_getDefault = jniAccessors.getStaticMethodIDOf(
      _classRef, "getDefault", "()Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale getDefault()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the current default ULocale.
  ///
  /// The default ULocale is synchronized to the default Java Locale. This method checks
  /// the current default Java Locale and returns an equivalent ULocale.
  ///@return the default ULocale.
  static ULocale getDefault() =>
      ULocale.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getDefault, jni.JniType.objectType, []).object);

  static final _id_getDefault1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDefault",
      "(Landroid/icu/util/ULocale\$Category;)Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale getDefault(android.icu.util.ULocale.Category category)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the current default ULocale for the specified category.
  ///@param category the category
  ///@return the default ULocale for the specified category.
  static ULocale getDefault1(ULocale_Category category) =>
      ULocale.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDefault1,
          jni.JniType.objectType,
          [category.reference]).object);

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, "clone", "()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This is for compatibility with Locale-- in actuality, since ULocale is
  /// immutable, there is no reason to clone it, so this API returns 'this'.
  jni.JniObject clone() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  ///
  /// Returns the hashCode.
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  ///
  /// Returns true if the other object is another ULocale with the
  /// same full name.
  /// Note that since names are not canonicalized, two ULocales that
  /// function identically might not compare equal.
  ///@return true if this Locale is equal to the specified object.
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_compareTo = jniAccessors.getMethodIDOf(
      _classRef, "compareTo", "(Landroid/icu/util/ULocale;)I");

  /// from: public int compareTo(android.icu.util.ULocale other)
  ///
  /// Compares two ULocale for ordering.
  /// __Note:__ The order might change in future.
  ///@param other the ULocale to be compared.
  ///@return a negative integer, zero, or a positive integer as this ULocale is less than, equal to, or greater
  /// than the specified ULocale.
  ///@throws NullPointerException if <code>other</code> is null.
  int compareTo(ULocale other) => jniAccessors.callMethodWithArgs(
      reference, _id_compareTo, jni.JniType.intType, [other.reference]).integer;

  static final _id_getAvailableLocales = jniAccessors.getStaticMethodIDOf(
      _classRef, "getAvailableLocales", "()[Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale[] getAvailableLocales()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu] Note:</strong> Unlike the Locale API, this returns an array of <code>ULocale</code>,
  /// not <code>Locale</code>.  Returns a list of all installed locales.
  static jni.JniObject getAvailableLocales() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getAvailableLocales, jni.JniType.objectType, []).object);

  static final _id_getISOCountries = jniAccessors.getStaticMethodIDOf(
      _classRef, "getISOCountries", "()[Ljava/lang/String;");

  /// from: static public java.lang.String[] getISOCountries()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a list of all 2-letter country codes defined in ISO 3166.
  /// Can be used to create Locales.
  static jni.JniObject getISOCountries() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getISOCountries, jni.JniType.objectType, []).object);

  static final _id_getISOLanguages = jniAccessors.getStaticMethodIDOf(
      _classRef, "getISOLanguages", "()[Ljava/lang/String;");

  /// from: static public java.lang.String[] getISOLanguages()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a list of all 2-letter language codes defined in ISO 639.
  /// Can be used to create Locales.
  /// [NOTE:  ISO 639 is not a stable standard-- some languages' codes have changed.
  /// The list this function returns includes both the new and the old codes for the
  /// languages whose codes have changed.]
  static jni.JniObject getISOLanguages() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getISOLanguages, jni.JniType.objectType, []).object);

  static final _id_getLanguage = jniAccessors.getMethodIDOf(
      _classRef, "getLanguage", "()Ljava/lang/String;");

  /// from: public java.lang.String getLanguage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the language code for this locale, which will either be the empty string
  /// or a lowercase ISO 639 code.
  ///@see \#getDisplayLanguage()
  ///@see \#getDisplayLanguage(ULocale)
  jni.JniString getLanguage() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLanguage, jni.JniType.objectType, []).object);

  static final _id_getLanguage1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getLanguage", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getLanguage(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the language code for the locale ID,
  /// which will either be the empty string
  /// or a lowercase ISO 639 code.
  ///@see \#getDisplayLanguage()
  ///@see \#getDisplayLanguage(ULocale)
  static jni.JniString getLanguage1(jni.JniString localeID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getLanguage1,
          jni.JniType.objectType,
          [localeID.reference]).object);

  static final _id_getScript = jniAccessors.getMethodIDOf(
      _classRef, "getScript", "()Ljava/lang/String;");

  /// from: public java.lang.String getScript()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the script code for this locale, which might be the empty string.
  ///@see \#getDisplayScript()
  ///@see \#getDisplayScript(ULocale)
  jni.JniString getScript() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getScript, jni.JniType.objectType, []).object);

  static final _id_getScript1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getScript", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getScript(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the script code for the specified locale, which might be the empty
  /// string.
  ///@see \#getDisplayScript()
  ///@see \#getDisplayScript(ULocale)
  static jni.JniString getScript1(jni.JniString localeID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getScript1, jni.JniType.objectType, [localeID.reference]).object);

  static final _id_getCountry = jniAccessors.getMethodIDOf(
      _classRef, "getCountry", "()Ljava/lang/String;");

  /// from: public java.lang.String getCountry()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the country/region code for this locale, which will either be the empty string
  /// or an uppercase ISO 3166 2-letter code.
  ///@see \#getDisplayCountry()
  ///@see \#getDisplayCountry(ULocale)
  jni.JniString getCountry() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCountry, jni.JniType.objectType, []).object);

  static final _id_getCountry1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getCountry", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getCountry(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the country/region code for this locale, which will either be the empty string
  /// or an uppercase ISO 3166 2-letter code.
  ///@param localeID The locale identification string.
  ///@see \#getDisplayCountry()
  ///@see \#getDisplayCountry(ULocale)
  static jni.JniString getCountry1(jni.JniString localeID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getCountry1,
          jni.JniType.objectType,
          [localeID.reference]).object);

  static final _id_getVariant = jniAccessors.getMethodIDOf(
      _classRef, "getVariant", "()Ljava/lang/String;");

  /// from: public java.lang.String getVariant()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the variant code for this locale, which might be the empty string.
  ///@see \#getDisplayVariant()
  ///@see \#getDisplayVariant(ULocale)
  jni.JniString getVariant() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getVariant, jni.JniType.objectType, []).object);

  static final _id_getVariant1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getVariant", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getVariant(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the variant code for the specified locale, which might be the empty string.
  ///@see \#getDisplayVariant()
  ///@see \#getDisplayVariant(ULocale)
  static jni.JniString getVariant1(jni.JniString localeID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getVariant1,
          jni.JniType.objectType,
          [localeID.reference]).object);

  static final _id_getFallback = jniAccessors.getStaticMethodIDOf(
      _classRef, "getFallback", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getFallback(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the fallback locale for the specified locale, which might be the
  /// empty string.
  static jni.JniString getFallback(jni.JniString localeID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getFallback,
          jni.JniType.objectType,
          [localeID.reference]).object);

  static final _id_getFallback1 = jniAccessors.getMethodIDOf(
      _classRef, "getFallback", "()Landroid/icu/util/ULocale;");

  /// from: public android.icu.util.ULocale getFallback()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the fallback locale for this locale.  If this locale is root,
  /// returns null.
  ULocale getFallback1() => ULocale.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getFallback1, jni.JniType.objectType, []).object);

  static final _id_getBaseName = jniAccessors.getMethodIDOf(
      _classRef, "getBaseName", "()Ljava/lang/String;");

  /// from: public java.lang.String getBaseName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the (normalized) base name for this locale,
  /// like \#getName(), but without keywords.
  ///@return the base name as a String.
  jni.JniString getBaseName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getBaseName, jni.JniType.objectType, []).object);

  static final _id_getBaseName1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getBaseName", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getBaseName(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the (normalized) base name for the specified locale,
  /// like \#getName(String), but without keywords.
  ///@param localeID the locale ID as a string
  ///@return the base name as a String.
  static jni.JniString getBaseName1(jni.JniString localeID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getBaseName1,
          jni.JniType.objectType,
          [localeID.reference]).object);

  static final _id_getName =
      jniAccessors.getMethodIDOf(_classRef, "getName", "()Ljava/lang/String;");

  /// from: public java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the (normalized) full name for this locale.
  ///@return String the full name of the localeID
  jni.JniString getName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_getName1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getName", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getName(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the (normalized) full name for the specified locale.
  ///@param localeID the localeID as a string
  ///@return String the full name of the localeID
  static jni.JniString getName1(jni.JniString localeID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getName1, jni.JniType.objectType, [localeID.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a string representation of this object.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_getKeywords = jniAccessors.getMethodIDOf(
      _classRef, "getKeywords", "()Ljava/util/Iterator;");

  /// from: public java.util.Iterator<java.lang.String> getKeywords()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns an iterator over keywords for this locale.  If there
  /// are no keywords, returns null.
  ///@return iterator over keywords, or null if there are no keywords.
  jni.JniObject getKeywords() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKeywords, jni.JniType.objectType, []).object);

  static final _id_getKeywords1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getKeywords", "(Ljava/lang/String;)Ljava/util/Iterator;");

  /// from: static public java.util.Iterator<java.lang.String> getKeywords(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns an iterator over keywords for the specified locale.  If there
  /// are no keywords, returns null.
  ///@return an iterator over the keywords in the specified locale, or null
  /// if there are no keywords.
  static jni.JniObject getKeywords1(jni.JniString localeID) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getKeywords1,
          jni.JniType.objectType,
          [localeID.reference]).object);

  static final _id_getKeywordValue = jniAccessors.getMethodIDOf(
      _classRef, "getKeywordValue", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getKeywordValue(java.lang.String keywordName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the value for a keyword in this locale. If the keyword is not
  /// defined, returns null.
  ///@param keywordName name of the keyword whose value is desired. Case insensitive.
  ///@return the value of the keyword, or null.
  jni.JniString getKeywordValue(jni.JniString keywordName) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getKeywordValue,
          jni.JniType.objectType,
          [keywordName.reference]).object);

  static final _id_getKeywordValue1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getKeywordValue",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getKeywordValue(java.lang.String localeID, java.lang.String keywordName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the value for a keyword in the specified locale. If the keyword is
  /// not defined, returns null.  The locale name does not need to be normalized.
  ///@param keywordName name of the keyword whose value is desired. Case insensitive.
  ///@return String the value of the keyword as a string
  static jni.JniString getKeywordValue1(
          jni.JniString localeID, jni.JniString keywordName) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getKeywordValue1,
          jni.JniType.objectType,
          [localeID.reference, keywordName.reference]).object);

  static final _id_canonicalize = jniAccessors.getStaticMethodIDOf(
      _classRef, "canonicalize", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String canonicalize(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the canonical name for the specified locale ID.  This is used to
  /// convert POSIX and other grandfathered IDs to standard ICU form.
  ///@param localeID the locale id
  ///@return the canonicalized id
  static jni.JniString canonicalize(jni.JniString localeID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_canonicalize,
          jni.JniType.objectType,
          [localeID.reference]).object);

  static final _id_setKeywordValue = jniAccessors.getMethodIDOf(
      _classRef,
      "setKeywordValue",
      "(Ljava/lang/String;Ljava/lang/String;)Landroid/icu/util/ULocale;");

  /// from: public android.icu.util.ULocale setKeywordValue(java.lang.String keyword, java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Given a keyword and a value, return a new locale with an updated
  /// keyword and value.  If the keyword is null, this removes all keywords from the locale id.
  /// Otherwise, if the value is null, this removes the value for this keyword from the
  /// locale id.  Otherwise, this adds/replaces the value for this keyword in the locale id.
  /// The keyword and value must not be empty.
  ///
  /// Related: \#getBaseName() returns the locale ID string with all keywords removed.
  ///@param keyword the keyword to add/remove, or null to remove all keywords.
  ///@param value the value to add/set, or null to remove this particular keyword.
  ///@return the updated locale
  ULocale setKeywordValue(jni.JniString keyword, jni.JniString value) =>
      ULocale.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setKeywordValue,
          jni.JniType.objectType,
          [keyword.reference, value.reference]).object);

  static final _id_setKeywordValue1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "setKeywordValue",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String setKeywordValue(java.lang.String localeID, java.lang.String keyword, java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Given a locale id, a keyword, and a value, return a new locale id with an updated
  /// keyword and value.  If the keyword is null, this removes all keywords from the locale id.
  /// Otherwise, if the value is null, this removes the value for this keyword from the
  /// locale id.  Otherwise, this adds/replaces the value for this keyword in the locale id.
  /// The keyword and value must not be empty.
  ///
  /// Related: \#getBaseName(String) returns the locale ID string with all keywords removed.
  ///@param localeID the locale id to modify
  ///@param keyword the keyword to add/remove, or null to remove all keywords.
  ///@param value the value to add/set, or null to remove this particular keyword.
  ///@return the updated locale id
  static jni.JniString setKeywordValue1(
          jni.JniString localeID, jni.JniString keyword, jni.JniString value) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_setKeywordValue1,
          jni.JniType.objectType,
          [localeID.reference, keyword.reference, value.reference]).object);

  static final _id_getISO3Language = jniAccessors.getMethodIDOf(
      _classRef, "getISO3Language", "()Ljava/lang/String;");

  /// from: public java.lang.String getISO3Language()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a three-letter abbreviation for this locale's language.  If the locale
  /// doesn't specify a language, returns the empty string.  Otherwise, returns
  /// a lowercase ISO 639-2/T language code.
  /// The ISO 639-2 language codes can be found on-line at
  ///   <a href="ftp://dkuug.dk/i18n/iso-639-2.txt"><code>ftp://dkuug.dk/i18n/iso-639-2.txt</code></a>
  ///@exception MissingResourceException Throws MissingResourceException if the
  /// three-letter language abbreviation is not available for this locale.
  jni.JniString getISO3Language() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getISO3Language, jni.JniType.objectType, []).object);

  static final _id_getISO3Language1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getISO3Language", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getISO3Language(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a three-letter abbreviation for this locale's language.  If the locale
  /// doesn't specify a language, returns the empty string.  Otherwise, returns
  /// a lowercase ISO 639-2/T language code.
  /// The ISO 639-2 language codes can be found on-line at
  ///   <a href="ftp://dkuug.dk/i18n/iso-639-2.txt"><code>ftp://dkuug.dk/i18n/iso-639-2.txt</code></a>
  ///@exception MissingResourceException Throws MissingResourceException if the
  /// three-letter language abbreviation is not available for this locale.
  static jni.JniString getISO3Language1(jni.JniString localeID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getISO3Language1,
          jni.JniType.objectType,
          [localeID.reference]).object);

  static final _id_getISO3Country = jniAccessors.getMethodIDOf(
      _classRef, "getISO3Country", "()Ljava/lang/String;");

  /// from: public java.lang.String getISO3Country()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a three-letter abbreviation for this locale's country/region.  If the locale
  /// doesn't specify a country, returns the empty string.  Otherwise, returns
  /// an uppercase ISO 3166 3-letter country code.
  ///@exception MissingResourceException Throws MissingResourceException if the
  /// three-letter country abbreviation is not available for this locale.
  jni.JniString getISO3Country() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getISO3Country, jni.JniType.objectType, []).object);

  static final _id_getISO3Country1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getISO3Country", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getISO3Country(java.lang.String localeID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a three-letter abbreviation for this locale's country/region.  If the locale
  /// doesn't specify a country, returns the empty string.  Otherwise, returns
  /// an uppercase ISO 3166 3-letter country code.
  ///@exception MissingResourceException Throws MissingResourceException if the
  /// three-letter country abbreviation is not available for this locale.
  static jni.JniString getISO3Country1(jni.JniString localeID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getISO3Country1,
          jni.JniType.objectType,
          [localeID.reference]).object);

  static final _id_isRightToLeft =
      jniAccessors.getMethodIDOf(_classRef, "isRightToLeft", "()Z");

  /// from: public boolean isRightToLeft()
  ///
  /// <strong>[icu]</strong> Returns whether this locale's script is written right-to-left.
  /// If there is no script subtag, then the likely script is used,
  /// see \#addLikelySubtags(ULocale).
  /// If no likely script is known, then false is returned.
  ///
  /// A script is right-to-left according to the CLDR script metadata
  /// which corresponds to whether the script's letters have Bidi_Class=R or AL.
  ///
  /// Returns true for "ar" and "en-Hebr", false for "zh" and "fa-Cyrl".
  ///@return true if the locale's script is written right-to-left
  bool isRightToLeft() => jniAccessors.callMethodWithArgs(
      reference, _id_isRightToLeft, jni.JniType.booleanType, []).boolean;

  static final _id_getDisplayLanguage = jniAccessors.getMethodIDOf(
      _classRef, "getDisplayLanguage", "()Ljava/lang/String;");

  /// from: public java.lang.String getDisplayLanguage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns this locale's language localized for display in the default <code>DISPLAY</code> locale.
  ///@return the localized language name.
  ///@see Category\#DISPLAY
  jni.JniString getDisplayLanguage() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getDisplayLanguage, jni.JniType.objectType, []).object);

  static final _id_getDisplayLanguage1 = jniAccessors.getMethodIDOf(_classRef,
      "getDisplayLanguage", "(Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: public java.lang.String getDisplayLanguage(android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns this locale's language localized for display in the provided locale.
  ///@param displayLocale the locale in which to display the name.
  ///@return the localized language name.
  jni.JniString getDisplayLanguage1(ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayLanguage1,
          jni.JniType.objectType,
          [displayLocale.reference]).object);

  static final _id_getDisplayLanguage2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayLanguage",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayLanguage(java.lang.String localeID, java.lang.String displayLocaleID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.
  /// This is a cover for the ICU4C API.
  ///@param localeID the id of the locale whose language will be displayed
  ///@param displayLocaleID the id of the locale in which to display the name.
  ///@return the localized language name.
  static jni.JniString getDisplayLanguage2(
          jni.JniString localeID, jni.JniString displayLocaleID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayLanguage2,
          jni.JniType.objectType,
          [localeID.reference, displayLocaleID.reference]).object);

  static final _id_getDisplayLanguage3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayLanguage",
      "(Ljava/lang/String;Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayLanguage(java.lang.String localeID, android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.
  /// This is a cover for the ICU4C API.
  ///@param localeID the id of the locale whose language will be displayed.
  ///@param displayLocale the locale in which to display the name.
  ///@return the localized language name.
  static jni.JniString getDisplayLanguage3(
          jni.JniString localeID, ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayLanguage3,
          jni.JniType.objectType,
          [localeID.reference, displayLocale.reference]).object);

  static final _id_getDisplayLanguageWithDialect = jniAccessors.getMethodIDOf(
      _classRef, "getDisplayLanguageWithDialect", "()Ljava/lang/String;");

  /// from: public java.lang.String getDisplayLanguageWithDialect()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns this locale's language localized for display in the default <code>DISPLAY</code> locale.
  /// If a dialect name is present in the data, then it is returned.
  ///@return the localized language name.
  ///@see Category\#DISPLAY
  jni.JniString getDisplayLanguageWithDialect() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayLanguageWithDialect,
          jni.JniType.objectType, []).object);

  static final _id_getDisplayLanguageWithDialect1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getDisplayLanguageWithDialect",
      "(Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: public java.lang.String getDisplayLanguageWithDialect(android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns this locale's language localized for display in the provided locale.
  /// If a dialect name is present in the data, then it is returned.
  ///@param displayLocale the locale in which to display the name.
  ///@return the localized language name.
  jni.JniString getDisplayLanguageWithDialect1(ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayLanguageWithDialect1,
          jni.JniType.objectType,
          [displayLocale.reference]).object);

  static final _id_getDisplayLanguageWithDialect2 =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "getDisplayLanguageWithDialect",
          "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayLanguageWithDialect(java.lang.String localeID, java.lang.String displayLocaleID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.
  /// If a dialect name is present in the data, then it is returned.
  /// This is a cover for the ICU4C API.
  ///@param localeID the id of the locale whose language will be displayed
  ///@param displayLocaleID the id of the locale in which to display the name.
  ///@return the localized language name.
  static jni.JniString getDisplayLanguageWithDialect2(
          jni.JniString localeID, jni.JniString displayLocaleID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayLanguageWithDialect2,
          jni.JniType.objectType,
          [localeID.reference, displayLocaleID.reference]).object);

  static final _id_getDisplayLanguageWithDialect3 =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          "getDisplayLanguageWithDialect",
          "(Ljava/lang/String;Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayLanguageWithDialect(java.lang.String localeID, android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.
  /// If a dialect name is present in the data, then it is returned.
  /// This is a cover for the ICU4C API.
  ///@param localeID the id of the locale whose language will be displayed.
  ///@param displayLocale the locale in which to display the name.
  ///@return the localized language name.
  static jni.JniString getDisplayLanguageWithDialect3(
          jni.JniString localeID, ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayLanguageWithDialect3,
          jni.JniType.objectType,
          [localeID.reference, displayLocale.reference]).object);

  static final _id_getDisplayScript = jniAccessors.getMethodIDOf(
      _classRef, "getDisplayScript", "()Ljava/lang/String;");

  /// from: public java.lang.String getDisplayScript()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns this locale's script localized for display in the default <code>DISPLAY</code> locale.
  ///@return the localized script name.
  ///@see Category\#DISPLAY
  jni.JniString getDisplayScript() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDisplayScript, jni.JniType.objectType, []).object);

  static final _id_getDisplayScript1 = jniAccessors.getMethodIDOf(_classRef,
      "getDisplayScript", "(Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: public java.lang.String getDisplayScript(android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns this locale's script localized for display in the provided locale.
  ///@param displayLocale the locale in which to display the name.
  ///@return the localized script name.
  jni.JniString getDisplayScript1(ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayScript1,
          jni.JniType.objectType,
          [displayLocale.reference]).object);

  static final _id_getDisplayScript2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayScript",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayScript(java.lang.String localeID, java.lang.String displayLocaleID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a locale's script localized for display in the provided locale.
  /// This is a cover for the ICU4C API.
  ///@param localeID the id of the locale whose script will be displayed
  ///@param displayLocaleID the id of the locale in which to display the name.
  ///@return the localized script name.
  static jni.JniString getDisplayScript2(
          jni.JniString localeID, jni.JniString displayLocaleID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayScript2,
          jni.JniType.objectType,
          [localeID.reference, displayLocaleID.reference]).object);

  static final _id_getDisplayScript3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayScript",
      "(Ljava/lang/String;Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayScript(java.lang.String localeID, android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a locale's script localized for display in the provided locale.
  ///@param localeID the id of the locale whose script will be displayed.
  ///@param displayLocale the locale in which to display the name.
  ///@return the localized script name.
  static jni.JniString getDisplayScript3(
          jni.JniString localeID, ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayScript3,
          jni.JniType.objectType,
          [localeID.reference, displayLocale.reference]).object);

  static final _id_getDisplayCountry = jniAccessors.getMethodIDOf(
      _classRef, "getDisplayCountry", "()Ljava/lang/String;");

  /// from: public java.lang.String getDisplayCountry()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns this locale's country localized for display in the default <code>DISPLAY</code> locale.
  /// __Warning: __this is for the region part of a valid locale ID; it cannot just be the region code (like "FR").
  /// To get the display name for a region alone, or for other options, use LocaleDisplayNames instead.
  ///@return the localized country name.
  ///@see Category\#DISPLAY
  jni.JniString getDisplayCountry() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDisplayCountry, jni.JniType.objectType, []).object);

  static final _id_getDisplayCountry1 = jniAccessors.getMethodIDOf(_classRef,
      "getDisplayCountry", "(Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: public java.lang.String getDisplayCountry(android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns this locale's country localized for display in the provided locale.
  /// __Warning: __this is for the region part of a valid locale ID; it cannot just be the region code (like "FR").
  /// To get the display name for a region alone, or for other options, use LocaleDisplayNames instead.
  ///@param displayLocale the locale in which to display the name.
  ///@return the localized country name.
  jni.JniString getDisplayCountry1(ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayCountry1,
          jni.JniType.objectType,
          [displayLocale.reference]).object);

  static final _id_getDisplayCountry2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayCountry",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayCountry(java.lang.String localeID, java.lang.String displayLocaleID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a locale's country localized for display in the provided locale.
  /// __Warning: __this is for the region part of a valid locale ID; it cannot just be the region code (like "FR").
  /// To get the display name for a region alone, or for other options, use LocaleDisplayNames instead.
  /// This is a cover for the ICU4C API.
  ///@param localeID the id of the locale whose country will be displayed
  ///@param displayLocaleID the id of the locale in which to display the name.
  ///@return the localized country name.
  static jni.JniString getDisplayCountry2(
          jni.JniString localeID, jni.JniString displayLocaleID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayCountry2,
          jni.JniType.objectType,
          [localeID.reference, displayLocaleID.reference]).object);

  static final _id_getDisplayCountry3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayCountry",
      "(Ljava/lang/String;Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayCountry(java.lang.String localeID, android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a locale's country localized for display in the provided locale.
  /// __Warning: __this is for the region part of a valid locale ID; it cannot just be the region code (like "FR").
  /// To get the display name for a region alone, or for other options, use LocaleDisplayNames instead.
  /// This is a cover for the ICU4C API.
  ///@param localeID the id of the locale whose country will be displayed.
  ///@param displayLocale the locale in which to display the name.
  ///@return the localized country name.
  static jni.JniString getDisplayCountry3(
          jni.JniString localeID, ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayCountry3,
          jni.JniType.objectType,
          [localeID.reference, displayLocale.reference]).object);

  static final _id_getDisplayVariant = jniAccessors.getMethodIDOf(
      _classRef, "getDisplayVariant", "()Ljava/lang/String;");

  /// from: public java.lang.String getDisplayVariant()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns this locale's variant localized for display in the default <code>DISPLAY</code> locale.
  ///@return the localized variant name.
  ///@see Category\#DISPLAY
  jni.JniString getDisplayVariant() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDisplayVariant, jni.JniType.objectType, []).object);

  static final _id_getDisplayVariant1 = jniAccessors.getMethodIDOf(_classRef,
      "getDisplayVariant", "(Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: public java.lang.String getDisplayVariant(android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns this locale's variant localized for display in the provided locale.
  ///@param displayLocale the locale in which to display the name.
  ///@return the localized variant name.
  jni.JniString getDisplayVariant1(ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayVariant1,
          jni.JniType.objectType,
          [displayLocale.reference]).object);

  static final _id_getDisplayVariant2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayVariant",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayVariant(java.lang.String localeID, java.lang.String displayLocaleID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a locale's variant localized for display in the provided locale.
  /// This is a cover for the ICU4C API.
  ///@param localeID the id of the locale whose variant will be displayed
  ///@param displayLocaleID the id of the locale in which to display the name.
  ///@return the localized variant name.
  static jni.JniString getDisplayVariant2(
          jni.JniString localeID, jni.JniString displayLocaleID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayVariant2,
          jni.JniType.objectType,
          [localeID.reference, displayLocaleID.reference]).object);

  static final _id_getDisplayVariant3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayVariant",
      "(Ljava/lang/String;Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayVariant(java.lang.String localeID, android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a locale's variant localized for display in the provided locale.
  /// This is a cover for the ICU4C API.
  ///@param localeID the id of the locale whose variant will be displayed.
  ///@param displayLocale the locale in which to display the name.
  ///@return the localized variant name.
  static jni.JniString getDisplayVariant3(
          jni.JniString localeID, ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayVariant3,
          jni.JniType.objectType,
          [localeID.reference, displayLocale.reference]).object);

  static final _id_getDisplayKeyword = jniAccessors.getStaticMethodIDOf(
      _classRef, "getDisplayKeyword", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayKeyword(java.lang.String keyword)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a keyword localized for display in the default <code>DISPLAY</code> locale.
  ///@param keyword the keyword to be displayed.
  ///@return the localized keyword name.
  ///@see \#getKeywords()
  ///@see Category\#DISPLAY
  static jni.JniString getDisplayKeyword(jni.JniString keyword) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayKeyword,
          jni.JniType.objectType,
          [keyword.reference]).object);

  static final _id_getDisplayKeyword1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayKeyword",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayKeyword(java.lang.String keyword, java.lang.String displayLocaleID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a keyword localized for display in the specified locale.
  ///@param keyword the keyword to be displayed.
  ///@param displayLocaleID the id of the locale in which to display the keyword.
  ///@return the localized keyword name.
  ///@see \#getKeywords(String)
  static jni.JniString getDisplayKeyword1(
          jni.JniString keyword, jni.JniString displayLocaleID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayKeyword1,
          jni.JniType.objectType,
          [keyword.reference, displayLocaleID.reference]).object);

  static final _id_getDisplayKeyword2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayKeyword",
      "(Ljava/lang/String;Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayKeyword(java.lang.String keyword, android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a keyword localized for display in the specified locale.
  ///@param keyword the keyword to be displayed.
  ///@param displayLocale the locale in which to display the keyword.
  ///@return the localized keyword name.
  ///@see \#getKeywords(String)
  static jni.JniString getDisplayKeyword2(
          jni.JniString keyword, ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayKeyword2,
          jni.JniType.objectType,
          [keyword.reference, displayLocale.reference]).object);

  static final _id_getDisplayKeywordValue = jniAccessors.getMethodIDOf(
      _classRef,
      "getDisplayKeywordValue",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getDisplayKeywordValue(java.lang.String keyword)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a keyword value localized for display in the default <code>DISPLAY</code> locale.
  ///@param keyword the keyword whose value is to be displayed.
  ///@return the localized value name.
  ///@see Category\#DISPLAY
  jni.JniString getDisplayKeywordValue(jni.JniString keyword) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayKeywordValue,
          jni.JniType.objectType,
          [keyword.reference]).object);

  static final _id_getDisplayKeywordValue1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getDisplayKeywordValue",
      "(Ljava/lang/String;Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: public java.lang.String getDisplayKeywordValue(java.lang.String keyword, android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a keyword value localized for display in the specified locale.
  ///@param keyword the keyword whose value is to be displayed.
  ///@param displayLocale the locale in which to display the value.
  ///@return the localized value name.
  jni.JniString getDisplayKeywordValue1(
          jni.JniString keyword, ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayKeywordValue1,
          jni.JniType.objectType,
          [keyword.reference, displayLocale.reference]).object);

  static final _id_getDisplayKeywordValue2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayKeywordValue",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayKeywordValue(java.lang.String localeID, java.lang.String keyword, java.lang.String displayLocaleID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a keyword value localized for display in the specified locale.
  /// This is a cover for the ICU4C API.
  ///@param localeID the id of the locale whose keyword value is to be displayed.
  ///@param keyword the keyword whose value is to be displayed.
  ///@param displayLocaleID the id of the locale in which to display the value.
  ///@return the localized value name.
  static jni.JniString getDisplayKeywordValue2(jni.JniString localeID,
          jni.JniString keyword, jni.JniString displayLocaleID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getDisplayKeywordValue2, jni.JniType.objectType, [
        localeID.reference,
        keyword.reference,
        displayLocaleID.reference
      ]).object);

  static final _id_getDisplayKeywordValue3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayKeywordValue",
      "(Ljava/lang/String;Ljava/lang/String;Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayKeywordValue(java.lang.String localeID, java.lang.String keyword, android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns a keyword value localized for display in the specified locale.
  /// This is a cover for the ICU4C API.
  ///@param localeID the id of the locale whose keyword value is to be displayed.
  ///@param keyword the keyword whose value is to be displayed.
  ///@param displayLocale the id of the locale in which to display the value.
  ///@return the localized value name.
  static jni.JniString getDisplayKeywordValue3(jni.JniString localeID,
          jni.JniString keyword, ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getDisplayKeywordValue3, jni.JniType.objectType, [
        localeID.reference,
        keyword.reference,
        displayLocale.reference
      ]).object);

  static final _id_getDisplayName = jniAccessors.getMethodIDOf(
      _classRef, "getDisplayName", "()Ljava/lang/String;");

  /// from: public java.lang.String getDisplayName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns this locale name localized for display in the default <code>DISPLAY</code> locale.
  ///@return the localized locale name.
  ///@see Category\#DISPLAY
  jni.JniString getDisplayName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDisplayName, jni.JniType.objectType, []).object);

  static final _id_getDisplayName1 = jniAccessors.getMethodIDOf(_classRef,
      "getDisplayName", "(Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: public java.lang.String getDisplayName(android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns this locale name localized for display in the provided locale.
  ///@param displayLocale the locale in which to display the locale name.
  ///@return the localized locale name.
  jni.JniString getDisplayName1(ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayName1,
          jni.JniType.objectType,
          [displayLocale.reference]).object);

  static final _id_getDisplayName2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayName",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayName(java.lang.String localeID, java.lang.String displayLocaleID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.
  /// This is a cover for the ICU4C API.
  ///@param localeID the locale whose name is to be displayed.
  ///@param displayLocaleID the id of the locale in which to display the locale name.
  ///@return the localized locale name.
  static jni.JniString getDisplayName2(
          jni.JniString localeID, jni.JniString displayLocaleID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayName2,
          jni.JniType.objectType,
          [localeID.reference, displayLocaleID.reference]).object);

  static final _id_getDisplayName3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayName",
      "(Ljava/lang/String;Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayName(java.lang.String localeID, android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.
  /// This is a cover for the ICU4C API.
  ///@param localeID the locale whose name is to be displayed.
  ///@param displayLocale the locale in which to display the locale name.
  ///@return the localized locale name.
  static jni.JniString getDisplayName3(
          jni.JniString localeID, ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayName3,
          jni.JniType.objectType,
          [localeID.reference, displayLocale.reference]).object);

  static final _id_getDisplayNameWithDialect = jniAccessors.getMethodIDOf(
      _classRef, "getDisplayNameWithDialect", "()Ljava/lang/String;");

  /// from: public java.lang.String getDisplayNameWithDialect()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns this locale name localized for display in the default <code>DISPLAY</code> locale.
  /// If a dialect name is present in the locale data, then it is returned.
  ///@return the localized locale name.
  ///@see Category\#DISPLAY
  jni.JniString getDisplayNameWithDialect() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getDisplayNameWithDialect, jni.JniType.objectType, []).object);

  static final _id_getDisplayNameWithDialect1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getDisplayNameWithDialect",
      "(Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: public java.lang.String getDisplayNameWithDialect(android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns this locale name localized for display in the provided locale.
  /// If a dialect name is present in the locale data, then it is returned.
  ///@param displayLocale the locale in which to display the locale name.
  ///@return the localized locale name.
  jni.JniString getDisplayNameWithDialect1(ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getDisplayNameWithDialect1,
          jni.JniType.objectType,
          [displayLocale.reference]).object);

  static final _id_getDisplayNameWithDialect2 =
      jniAccessors.getStaticMethodIDOf(_classRef, "getDisplayNameWithDialect",
          "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayNameWithDialect(java.lang.String localeID, java.lang.String displayLocaleID)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.
  /// If a dialect name is present in the locale data, then it is returned.
  /// This is a cover for the ICU4C API.
  ///@param localeID the locale whose name is to be displayed.
  ///@param displayLocaleID the id of the locale in which to display the locale name.
  ///@return the localized locale name.
  static jni.JniString getDisplayNameWithDialect2(
          jni.JniString localeID, jni.JniString displayLocaleID) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayNameWithDialect2,
          jni.JniType.objectType,
          [localeID.reference, displayLocaleID.reference]).object);

  static final _id_getDisplayNameWithDialect3 =
      jniAccessors.getStaticMethodIDOf(_classRef, "getDisplayNameWithDialect",
          "(Ljava/lang/String;Landroid/icu/util/ULocale;)Ljava/lang/String;");

  /// from: static public java.lang.String getDisplayNameWithDialect(java.lang.String localeID, android.icu.util.ULocale displayLocale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.
  /// If a dialect name is present in the locale data, then it is returned.
  /// This is a cover for the ICU4C API.
  ///@param localeID the locale whose name is to be displayed.
  ///@param displayLocale the locale in which to display the locale name.
  ///@return the localized locale name.
  static jni.JniString getDisplayNameWithDialect3(
          jni.JniString localeID, ULocale displayLocale) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayNameWithDialect3,
          jni.JniType.objectType,
          [localeID.reference, displayLocale.reference]).object);

  static final _id_getCharacterOrientation = jniAccessors.getMethodIDOf(
      _classRef, "getCharacterOrientation", "()Ljava/lang/String;");

  /// from: public java.lang.String getCharacterOrientation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns this locale's layout orientation for characters.  The possible
  /// values are "left-to-right", "right-to-left", "top-to-bottom" or
  /// "bottom-to-top".
  ///@return The locale's layout orientation for characters.
  jni.JniString getCharacterOrientation() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getCharacterOrientation, jni.JniType.objectType, []).object);

  static final _id_getLineOrientation = jniAccessors.getMethodIDOf(
      _classRef, "getLineOrientation", "()Ljava/lang/String;");

  /// from: public java.lang.String getLineOrientation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Returns this locale's layout orientation for lines.  The possible
  /// values are "left-to-right", "right-to-left", "top-to-bottom" or
  /// "bottom-to-top".
  ///@return The locale's layout orientation for lines.
  jni.JniString getLineOrientation() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getLineOrientation, jni.JniType.objectType, []).object);

  static final _id_acceptLanguage = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "acceptLanguage",
      "(Ljava/lang/String;[Landroid/icu/util/ULocale;[Z)Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale acceptLanguage(java.lang.String acceptLanguageList, android.icu.util.ULocale[] availableLocales, boolean[] fallback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Based on a HTTP formatted list of acceptable locales, determine an available
  /// locale for the user.  NullPointerException is thrown if acceptLanguageList or
  /// availableLocales is null.  If fallback is non-null, it will contain true if a
  /// fallback locale (one not in the acceptLanguageList) was returned.  The value on
  /// entry is ignored.  ULocale will be one of the locales in availableLocales, or the
  /// ROOT ULocale if if a ROOT locale was used as a fallback (because nothing else in
  /// availableLocales matched).  No ULocale array element should be null; behavior is
  /// undefined if this is the case.
  ///@param acceptLanguageList list in HTTP "Accept-Language:" format of acceptable locales
  ///@param availableLocales list of available locales. One of these will be returned.
  ///@param fallback if non-null, a 1-element array containing a boolean to be set with
  /// the fallback status
  ///@return one of the locales from the availableLocales list, or null if none match
  static ULocale acceptLanguage(jni.JniString acceptLanguageList,
          jni.JniObject availableLocales, jni.JniObject fallback) =>
      ULocale.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_acceptLanguage, jni.JniType.objectType, [
        acceptLanguageList.reference,
        availableLocales.reference,
        fallback.reference
      ]).object);

  static final _id_acceptLanguage1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "acceptLanguage",
      "([Landroid/icu/util/ULocale;[Landroid/icu/util/ULocale;[Z)Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[] acceptLanguageList, android.icu.util.ULocale[] availableLocales, boolean[] fallback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Based on a list of acceptable locales, determine an available locale for the
  /// user.  NullPointerException is thrown if acceptLanguageList or availableLocales is
  /// null.  If fallback is non-null, it will contain true if a fallback locale (one not
  /// in the acceptLanguageList) was returned.  The value on entry is ignored.  ULocale
  /// will be one of the locales in availableLocales, or the ROOT ULocale if if a ROOT
  /// locale was used as a fallback (because nothing else in availableLocales matched).
  /// No ULocale array element should be null; behavior is undefined if this is the case.
  ///@param acceptLanguageList list of acceptable locales
  ///@param availableLocales list of available locales. One of these will be returned.
  ///@param fallback if non-null, a 1-element array containing a boolean to be set with
  /// the fallback status
  ///@return one of the locales from the availableLocales list, or null if none match
  static ULocale acceptLanguage1(jni.JniObject acceptLanguageList,
          jni.JniObject availableLocales, jni.JniObject fallback) =>
      ULocale.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_acceptLanguage1, jni.JniType.objectType, [
        acceptLanguageList.reference,
        availableLocales.reference,
        fallback.reference
      ]).object);

  static final _id_acceptLanguage2 = jniAccessors.getStaticMethodIDOf(_classRef,
      "acceptLanguage", "(Ljava/lang/String;[Z)Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale acceptLanguage(java.lang.String acceptLanguageList, boolean[] fallback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Based on a HTTP formatted list of acceptable locales, determine an available
  /// locale for the user.  NullPointerException is thrown if acceptLanguageList or
  /// availableLocales is null.  If fallback is non-null, it will contain true if a
  /// fallback locale (one not in the acceptLanguageList) was returned.  The value on
  /// entry is ignored.  ULocale will be one of the locales in availableLocales, or the
  /// ROOT ULocale if if a ROOT locale was used as a fallback (because nothing else in
  /// availableLocales matched).  No ULocale array element should be null; behavior is
  /// undefined if this is the case.  This function will choose a locale from the
  /// ULocale.getAvailableLocales() list as available.
  ///@param acceptLanguageList list in HTTP "Accept-Language:" format of acceptable locales
  ///@param fallback if non-null, a 1-element array containing a boolean to be set with
  /// the fallback status
  ///@return one of the locales from the ULocale.getAvailableLocales() list, or null if
  /// none match
  static ULocale acceptLanguage2(
          jni.JniString acceptLanguageList, jni.JniObject fallback) =>
      ULocale.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_acceptLanguage2,
          jni.JniType.objectType,
          [acceptLanguageList.reference, fallback.reference]).object);

  static final _id_acceptLanguage3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "acceptLanguage",
      "([Landroid/icu/util/ULocale;[Z)Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[] acceptLanguageList, boolean[] fallback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Based on an ordered array of acceptable locales, determine an available
  /// locale for the user.  NullPointerException is thrown if acceptLanguageList or
  /// availableLocales is null.  If fallback is non-null, it will contain true if a
  /// fallback locale (one not in the acceptLanguageList) was returned.  The value on
  /// entry is ignored.  ULocale will be one of the locales in availableLocales, or the
  /// ROOT ULocale if if a ROOT locale was used as a fallback (because nothing else in
  /// availableLocales matched).  No ULocale array element should be null; behavior is
  /// undefined if this is the case.  This function will choose a locale from the
  /// ULocale.getAvailableLocales() list as available.
  ///@param acceptLanguageList ordered array of acceptable locales (preferred are listed first)
  ///@param fallback if non-null, a 1-element array containing a boolean to be set with
  /// the fallback status
  ///@return one of the locales from the ULocale.getAvailableLocales() list, or null if none match
  static ULocale acceptLanguage3(
          jni.JniObject acceptLanguageList, jni.JniObject fallback) =>
      ULocale.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_acceptLanguage3,
          jni.JniType.objectType,
          [acceptLanguageList.reference, fallback.reference]).object);

  static final _id_addLikelySubtags = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "addLikelySubtags",
      "(Landroid/icu/util/ULocale;)Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale addLikelySubtags(android.icu.util.ULocale loc)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Adds the likely subtags for a provided locale ID, per the algorithm
  /// described in the following CLDR technical report:
  ///
  ///   http://www.unicode.org/reports/tr35/\#Likely_Subtags
  ///
  /// If the provided ULocale instance is already in the maximal form, or there is no
  /// data available available for maximization, it will be returned.  For example,
  /// "und-Zzzz" cannot be maximized, since there is no reasonable maximization.
  /// Otherwise, a new ULocale instance with the maximal form is returned.
  ///
  /// Examples:
  ///
  /// "en" maximizes to "en_Latn_US"
  ///
  /// "de" maximizes to "de_Latn_US"
  ///
  /// "sr" maximizes to "sr_Cyrl_RS"
  ///
  /// "sh" maximizes to "sr_Latn_RS" (Note this will not reverse.)
  ///
  /// "zh_Hani" maximizes to "zh_Hans_CN" (Note this will not reverse.)
  ///@param loc The ULocale to maximize
  ///@return The maximized ULocale instance.
  static ULocale addLikelySubtags(ULocale loc) =>
      ULocale.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_addLikelySubtags,
          jni.JniType.objectType,
          [loc.reference]).object);

  static final _id_minimizeSubtags = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "minimizeSubtags",
      "(Landroid/icu/util/ULocale;)Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale minimizeSubtags(android.icu.util.ULocale loc)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Minimizes the subtags for a provided locale ID, per the algorithm described
  /// in the following CLDR technical report:<blockquote>
  ///
  ///   <a href="http://www.unicode.org/reports/tr35/\#Likely_Subtags">http://www.unicode.org/reports/tr35/\#Likely_Subtags</a></blockquote>
  ///
  /// If the provided ULocale instance is already in the minimal form, or there
  /// is no data available for minimization, it will be returned.  Since the
  /// minimization algorithm relies on proper maximization, see the comments
  /// for addLikelySubtags for reasons why there might not be any data.
  ///
  /// Examples:<pre>
  ///
  /// "en_Latn_US" minimizes to "en"
  ///
  /// "de_Latn_US" minimizes to "de"
  ///
  /// "sr_Cyrl_RS" minimizes to "sr"
  ///
  /// "zh_Hant_TW" minimizes to "zh_TW" (The region is preferred to the
  /// script, and minimizing to "zh" would imply "zh_Hans_CN".) </pre>
  ///@param loc The ULocale to minimize
  ///@return The minimized ULocale instance.
  static ULocale minimizeSubtags(ULocale loc) =>
      ULocale.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_minimizeSubtags, jni.JniType.objectType, [loc.reference]).object);

  static final _id_getExtension = jniAccessors.getMethodIDOf(
      _classRef, "getExtension", "(C)Ljava/lang/String;");

  /// from: public java.lang.String getExtension(char key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the extension (or private use) value associated with
  /// the specified key, or null if there is no extension
  /// associated with the key. To be well-formed, the key must be one
  /// of <code>[0-9A-Za-z]</code>. Keys are case-insensitive, so
  /// for example 'z' and 'Z' represent the same extension.
  ///@param key the extension key
  ///@return The extension, or null if this locale defines no
  /// extension for the specified key.
  ///@throws IllegalArgumentException if key is not well-formed
  ///@see \#PRIVATE_USE_EXTENSION
  ///@see \#UNICODE_LOCALE_EXTENSION
  jni.JniString getExtension(int key) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtension, jni.JniType.objectType, [key]).object);

  static final _id_getExtensionKeys = jniAccessors.getMethodIDOf(
      _classRef, "getExtensionKeys", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.Character> getExtensionKeys()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the set of extension keys associated with this locale, or the
  /// empty set if it has no extensions. The returned set is unmodifiable.
  /// The keys will all be lower-case.
  ///@return the set of extension keys, or the empty set if this locale has
  /// no extensions
  jni.JniObject getExtensionKeys() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtensionKeys, jni.JniType.objectType, []).object);

  static final _id_getUnicodeLocaleAttributes = jniAccessors.getMethodIDOf(
      _classRef, "getUnicodeLocaleAttributes", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.String> getUnicodeLocaleAttributes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the set of unicode locale attributes associated with
  /// this locale, or the empty set if it has no attributes. The
  /// returned set is unmodifiable.
  ///@return The set of attributes.
  jni.JniObject getUnicodeLocaleAttributes() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getUnicodeLocaleAttributes, jni.JniType.objectType, []).object);

  static final _id_getUnicodeLocaleType = jniAccessors.getMethodIDOf(_classRef,
      "getUnicodeLocaleType", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getUnicodeLocaleType(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Unicode locale type associated with the specified Unicode locale key
  /// for this locale. Returns the empty string for keys that are defined with no type.
  /// Returns null if the key is not defined. Keys are case-insensitive. The key must
  /// be two alphanumeric characters ([0-9a-zA-Z]), or an IllegalArgumentException is
  /// thrown.
  ///@param key the Unicode locale key
  ///@return The Unicode locale type associated with the key, or null if the
  /// locale does not define the key.
  ///@throws IllegalArgumentException if the key is not well-formed
  ///@throws NullPointerException if <code>key</code> is null
  jni.JniString getUnicodeLocaleType(jni.JniString key) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getUnicodeLocaleType,
          jni.JniType.objectType,
          [key.reference]).object);

  static final _id_getUnicodeLocaleKeys = jniAccessors.getMethodIDOf(
      _classRef, "getUnicodeLocaleKeys", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.String> getUnicodeLocaleKeys()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the set of Unicode locale keys defined by this locale, or the empty set if
  /// this locale has none.  The returned set is immutable.  Keys are all lower case.
  ///@return The set of Unicode locale keys, or the empty set if this locale has
  /// no Unicode locale keywords.
  jni.JniObject getUnicodeLocaleKeys() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getUnicodeLocaleKeys, jni.JniType.objectType, []).object);

  static final _id_toLanguageTag = jniAccessors.getMethodIDOf(
      _classRef, "toLanguageTag", "()Ljava/lang/String;");

  /// from: public java.lang.String toLanguageTag()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a well-formed IETF BCP 47 language tag representing
  /// this locale.
  ///
  /// If this <code>ULocale</code> has a language, script, country, or
  /// variant that does not satisfy the IETF BCP 47 language tag
  /// syntax requirements, this method handles these fields as
  /// described below:
  ///
  /// __Language:__ If language is empty, or not well-formed
  /// (for example "a" or "e2"), it will be emitted as "und" (Undetermined).
  ///
  /// __Script:__ If script is not well-formed (for example "12"
  /// or "Latin"), it will be omitted.
  ///
  /// __Country:__ If country is not well-formed (for example "12"
  /// or "USA"), it will be omitted.
  ///
  /// __Variant:__ If variant __is__ well-formed, each sub-segment
  /// (delimited by '-' or '_') is emitted as a subtag.  Otherwise:
  /// <ul>
  ///
  /// <li>if all sub-segments match <code>[0-9a-zA-Z]{1,8}</code>
  /// (for example "WIN" or "Oracle_JDK_Standard_Edition"), the first
  /// ill-formed sub-segment and all following will be appended to
  /// the private use subtag.  The first appended subtag will be
  /// "lvariant", followed by the sub-segments in order, separated by
  /// hyphen. For example, "x-lvariant-WIN",
  /// "Oracle-x-lvariant-JDK-Standard-Edition".
  ///
  /// <li>if any sub-segment does not match
  /// <code>[0-9a-zA-Z]{1,8}</code>, the variant will be truncated
  /// and the problematic sub-segment and all following sub-segments
  /// will be omitted.  If the remainder is non-empty, it will be
  /// emitted as a private use subtag as above (even if the remainder
  /// turns out to be well-formed).  For example,
  /// "Solaris_isjustthecoolestthing" is emitted as
  /// "x-lvariant-Solaris", not as "solaris".</li></ul>
  ///
  /// __Note:__ Although the language tag created by this
  /// method is well-formed (satisfies the syntax requirements
  /// defined by the IETF BCP 47 specification), it is not
  /// necessarily a valid BCP 47 language tag.  For example,
  /// <pre>
  ///   new Locale("xx", "YY").toLanguageTag();</pre>
  ///
  /// will return "xx-YY", but the language subtag "xx" and the
  /// region subtag "YY" are invalid because they are not registered
  /// in the IANA Language Subtag Registry.
  ///@return a BCP47 language tag representing the locale
  ///@see \#forLanguageTag(String)
  jni.JniString toLanguageTag() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toLanguageTag, jni.JniType.objectType, []).object);

  static final _id_forLanguageTag = jniAccessors.getStaticMethodIDOf(_classRef,
      "forLanguageTag", "(Ljava/lang/String;)Landroid/icu/util/ULocale;");

  /// from: static public android.icu.util.ULocale forLanguageTag(java.lang.String languageTag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a locale for the specified IETF BCP 47 language tag string.
  ///
  /// If the specified language tag contains any ill-formed subtags,
  /// the first such subtag and all following subtags are ignored.  Compare
  /// to ULocale.Builder\#setLanguageTag which throws an exception
  /// in this case.
  ///
  /// The following __conversions__ are performed:
  /// <ul>
  ///
  /// <li>The language code "und" is mapped to language "".
  ///
  /// <li>The portion of a private use subtag prefixed by "lvariant",
  /// if any, is removed and appended to the variant field in the
  /// result locale (without case normalization).  If it is then
  /// empty, the private use subtag is discarded:
  ///
  /// <pre>
  ///     ULocale loc;
  ///     loc = ULocale.forLanguageTag("en-US-x-lvariant-icu4j);
  ///     loc.getVariant(); // returns "ICU4J"
  ///     loc.getExtension('x'); // returns null
  ///
  ///     loc = Locale.forLanguageTag("de-icu4j-x-URP-lvariant-Abc-Def");
  ///     loc.getVariant(); // returns "ICU4J_ABC_DEF"
  ///     loc.getExtension('x'); // returns "urp"
  /// </pre>
  ///
  /// <li>When the languageTag argument contains an extlang subtag,
  /// the first such subtag is used as the language, and the primary
  /// language subtag and other extlang subtags are ignored:
  ///
  /// <pre>
  ///     ULocale.forLanguageTag("ar-aao").getLanguage(); // returns "aao"
  ///     ULocale.forLanguageTag("en-abc-def-us").toString(); // returns "abc_US"
  /// </pre>
  ///
  /// <li>Case is normalized. Language is normalized to lower case,
  /// script to title case, country to upper case, variant to upper case,
  /// and extensions to lower case.
  ///
  /// </ul>
  ///
  /// This implements the 'Language-Tag' production of BCP47, and
  /// so supports grandfathered (regular and irregular) as well as
  /// private use language tags.  Stand alone private use tags are
  /// represented as empty language and extension 'x-whatever',
  /// and grandfathered tags are converted to their canonical replacements
  /// where they exist.
  ///
  /// Grandfathered tags with canonical replacements are as follows:
  ///
  /// <table>
  /// <tbody align="center">
  /// <tr><th>grandfathered tag</th><th>&nbsp;</th><th>modern replacement</th></tr>
  /// <tr><td>art-lojban</td><td>&nbsp;</td><td>jbo</td></tr>
  /// <tr><td>i-ami</td><td>&nbsp;</td><td>ami</td></tr>
  /// <tr><td>i-bnn</td><td>&nbsp;</td><td>bnn</td></tr>
  /// <tr><td>i-hak</td><td>&nbsp;</td><td>hak</td></tr>
  /// <tr><td>i-klingon</td><td>&nbsp;</td><td>tlh</td></tr>
  /// <tr><td>i-lux</td><td>&nbsp;</td><td>lb</td></tr>
  /// <tr><td>i-navajo</td><td>&nbsp;</td><td>nv</td></tr>
  /// <tr><td>i-pwn</td><td>&nbsp;</td><td>pwn</td></tr>
  /// <tr><td>i-tao</td><td>&nbsp;</td><td>tao</td></tr>
  /// <tr><td>i-tay</td><td>&nbsp;</td><td>tay</td></tr>
  /// <tr><td>i-tsu</td><td>&nbsp;</td><td>tsu</td></tr>
  /// <tr><td>no-bok</td><td>&nbsp;</td><td>nb</td></tr>
  /// <tr><td>no-nyn</td><td>&nbsp;</td><td>nn</td></tr>
  /// <tr><td>sgn-BE-FR</td><td>&nbsp;</td><td>sfb</td></tr>
  /// <tr><td>sgn-BE-NL</td><td>&nbsp;</td><td>vgt</td></tr>
  /// <tr><td>sgn-CH-DE</td><td>&nbsp;</td><td>sgg</td></tr>
  /// <tr><td>zh-guoyu</td><td>&nbsp;</td><td>cmn</td></tr>
  /// <tr><td>zh-hakka</td><td>&nbsp;</td><td>hak</td></tr>
  /// <tr><td>zh-min-nan</td><td>&nbsp;</td><td>nan</td></tr>
  /// <tr><td>zh-xiang</td><td>&nbsp;</td><td>hsn</td></tr>
  /// </tbody>
  /// </table>
  ///
  /// Grandfathered tags with no modern replacement will be
  /// converted as follows:
  ///
  /// <table>
  /// <tbody align="center">
  /// <tr><th>grandfathered tag</th><th>&nbsp;</th><th>converts to</th></tr>
  /// <tr><td>cel-gaulish</td><td>&nbsp;</td><td>xtg-x-cel-gaulish</td></tr>
  /// <tr><td>en-GB-oed</td><td>&nbsp;</td><td>en-GB-x-oed</td></tr>
  /// <tr><td>i-default</td><td>&nbsp;</td><td>en-x-i-default</td></tr>
  /// <tr><td>i-enochian</td><td>&nbsp;</td><td>und-x-i-enochian</td></tr>
  /// <tr><td>i-mingo</td><td>&nbsp;</td><td>see-x-i-mingo</td></tr>
  /// <tr><td>zh-min</td><td>&nbsp;</td><td>nan-x-zh-min</td></tr>
  /// </tbody>
  /// </table>
  ///
  /// For a list of all grandfathered tags, see the
  /// IANA Language Subtag Registry (search for "Type: grandfathered").
  ///
  /// __Note__: there is no guarantee that <code>toLanguageTag</code>
  /// and <code>forLanguageTag</code> will round-trip.
  ///@param languageTag the language tag
  ///@return The locale that best represents the language tag.
  ///@throws NullPointerException if <code>languageTag</code> is <code>null</code>
  ///@see \#toLanguageTag()
  ///@see ULocale.Builder\#setLanguageTag(String)
  static ULocale forLanguageTag(jni.JniString languageTag) =>
      ULocale.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_forLanguageTag,
          jni.JniType.objectType,
          [languageTag.reference]).object);

  static final _id_toUnicodeLocaleKey = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "toUnicodeLocaleKey",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String toUnicodeLocaleKey(java.lang.String keyword)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Converts the specified keyword (legacy key, or BCP 47 Unicode locale
  /// extension key) to the equivalent BCP 47 Unicode locale extension key.
  /// For example, BCP 47 Unicode locale extension key "co" is returned for
  /// the input keyword "collation".
  ///
  /// When the specified keyword is unknown, but satisfies the BCP syntax,
  /// then the lower-case version of the input keyword will be returned.
  /// For example,
  /// <code>toUnicodeLocaleKey("ZZ")</code> returns "zz".
  ///@param keyword the input locale keyword (either legacy key
  ///                      such as "collation" or BCP 47 Unicode locale extension
  ///                      key such as "co").
  ///@return the well-formed BCP 47 Unicode locale extension key,
  ///                      or null if the specified locale keyword cannot be mapped
  ///                      to a well-formed BCP 47 Unicode locale extension key.
  ///@see \#toLegacyKey(String)
  static jni.JniString toUnicodeLocaleKey(jni.JniString keyword) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_toUnicodeLocaleKey,
          jni.JniType.objectType,
          [keyword.reference]).object);

  static final _id_toUnicodeLocaleType = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "toUnicodeLocaleType",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String toUnicodeLocaleType(java.lang.String keyword, java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Converts the specified keyword value (legacy type, or BCP 47
  /// Unicode locale extension type) to the well-formed BCP 47 Unicode locale
  /// extension type for the specified keyword (category). For example, BCP 47
  /// Unicode locale extension type "phonebk" is returned for the input
  /// keyword value "phonebook", with the keyword "collation" (or "co").
  ///
  /// When the specified keyword is not recognized, but the specified value
  /// satisfies the syntax of the BCP 47 Unicode locale extension type,
  /// or when the specified keyword allows 'variable' type and the specified
  /// value satisfies the syntax, the lower-case version of the input value
  /// will be returned. For example,
  /// <code>toUnicodeLocaleType("Foo", "Bar")</code> returns "bar",
  /// <code>toUnicodeLocaleType("variableTop", "00A4")</code> returns "00a4".
  ///@param keyword the locale keyword (either legacy key such as
  ///                      "collation" or BCP 47 Unicode locale extension
  ///                      key such as "co").
  ///@param value the locale keyword value (either legacy type
  ///                      such as "phonebook" or BCP 47 Unicode locale extension
  ///                      type such as "phonebk").
  ///@return the well-formed BCP47 Unicode locale extension type,
  ///                      or null if the locale keyword value cannot be mapped to
  ///                      a well-formed BCP 47 Unicode locale extension type.
  ///@see \#toLegacyType(String, String)
  static jni.JniString toUnicodeLocaleType(
          jni.JniString keyword, jni.JniString value) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_toUnicodeLocaleType,
          jni.JniType.objectType,
          [keyword.reference, value.reference]).object);

  static final _id_toLegacyKey = jniAccessors.getStaticMethodIDOf(
      _classRef, "toLegacyKey", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String toLegacyKey(java.lang.String keyword)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Converts the specified keyword (BCP 47 Unicode locale extension key, or
  /// legacy key) to the legacy key. For example, legacy key "collation" is
  /// returned for the input BCP 47 Unicode locale extension key "co".
  ///@param keyword the input locale keyword (either BCP 47 Unicode locale
  ///                      extension key or legacy key).
  ///@return the well-formed legacy key, or null if the specified
  ///                      keyword cannot be mapped to a well-formed legacy key.
  ///@see \#toUnicodeLocaleKey(String)
  static jni.JniString toLegacyKey(jni.JniString keyword) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_toLegacyKey, jni.JniType.objectType, [keyword.reference]).object);

  static final _id_toLegacyType = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "toLegacyType",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String toLegacyType(java.lang.String keyword, java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <strong>[icu]</strong> Converts the specified keyword value (BCP 47 Unicode locale extension type,
  /// or legacy type or type alias) to the canonical legacy type. For example,
  /// the legacy type "phonebook" is returned for the input BCP 47 Unicode
  /// locale extension type "phonebk" with the keyword "collation" (or "co").
  ///
  /// When the specified keyword is not recognized, but the specified value
  /// satisfies the syntax of legacy key, or when the specified keyword
  /// allows 'variable' type and the specified value satisfies the syntax,
  /// the lower-case version of the input value will be returned.
  /// For example,
  /// <code>toLegacyType("Foo", "Bar")</code> returns "bar",
  /// <code>toLegacyType("vt", "00A4")</code> returns "00a4".
  ///@param keyword the locale keyword (either legacy keyword such as
  ///                      "collation" or BCP 47 Unicode locale extension
  ///                      key such as "co").
  ///@param value the locale keyword value (either BCP 47 Unicode locale
  ///                      extension type such as "phonebk" or legacy keyword value
  ///                      such as "phonebook").
  ///@return the well-formed legacy type, or null if the specified
  ///                      keyword value cannot be mapped to a well-formed legacy
  ///                      type.
  ///@see \#toUnicodeLocaleType(String, String)
  static jni.JniString toLegacyType(
          jni.JniString keyword, jni.JniString value) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_toLegacyType,
          jni.JniType.objectType,
          [keyword.reference, value.reference]).object);
}

/// from: android.icu.util.ULocale$Category
///
/// Enum for locale categories. These locale categories are used to get/set the default locale for
/// the specific functionality represented by the category.
class ULocale_Category extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/util/ULocale\$Category");
  ULocale_Category.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef, "values", "()[Landroid/icu/util/ULocale\$Category;");

  /// from: static public android.icu.util.ULocale.Category[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject values() =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_values, jni.JniType.objectType, []).object);

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(_classRef,
      "valueOf", "(Ljava/lang/String;)Landroid/icu/util/ULocale\$Category;");

  /// from: static public android.icu.util.ULocale.Category valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static ULocale_Category valueOf(jni.JniString name) =>
      ULocale_Category.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_valueOf, jni.JniType.objectType, [name.reference]).object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: private void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ULocale_Category()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.icu.util.ULocale$Builder
///
/// <code>Builder</code> is used to build instances of <code>ULocale</code>
/// from values configured by the setters.  Unlike the <code>ULocale</code>
/// constructors, the <code>Builder</code> checks if a value configured by a
/// setter satisfies the syntax requirements defined by the <code>ULocale</code>
/// class.  A <code>ULocale</code> object created by a <code>Builder</code> is
/// well-formed and can be transformed to a well-formed IETF BCP 47 language tag
/// without losing information.
///
/// __Note:__ The <code>ULocale</code> class does not provide any
/// syntactic restrictions on variant, while BCP 47 requires each variant
/// subtag to be 5 to 8 alphanumerics or a single numeric followed by 3
/// alphanumerics.  The method <code>setVariant</code> throws
/// <code>IllformedLocaleException</code> for a variant that does not satisfy
/// this restriction. If it is necessary to support such a variant, use a
/// ULocale constructor.  However, keep in mind that a <code>ULocale</code>
/// object created this way might lose the variant information when
/// transformed to a BCP 47 language tag.
///
/// The following example shows how to create a <code>Locale</code> object
/// with the <code>Builder</code>.
/// <blockquote>
/// <pre>
///     ULocale aLocale = new Builder().setLanguage("sr").setScript("Latn").setRegion("RS").build();
/// </pre>
/// </blockquote>
///
/// Builders can be reused; <code>clear()</code> resets all
/// fields to their default values.
///@see ULocale\#toLanguageTag()
class ULocale_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/icu/util/ULocale\$Builder");
  ULocale_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs an empty Builder. The default value of all
  /// fields, extensions, and private use information is the
  /// empty string.
  ULocale_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setLocale = jniAccessors.getMethodIDOf(
      _classRef,
      "setLocale",
      "(Landroid/icu/util/ULocale;)Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder setLocale(android.icu.util.ULocale locale)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Resets the <code>Builder</code> to match the provided
  /// <code>locale</code>.  Existing state is discarded.
  ///
  /// All fields of the locale must be well-formed, see Locale.
  ///
  /// Locales with any ill-formed fields cause
  /// <code>IllformedLocaleException</code> to be thrown.
  ///@param locale the locale
  ///@return This builder.
  ///@throws IllformedLocaleException if <code>locale</code> has
  /// any ill-formed fields.
  ///@throws NullPointerException if <code>locale</code> is null.
  ULocale_Builder setLocale(ULocale locale) =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setLocale, jni.JniType.objectType, [locale.reference]).object);

  static final _id_setLanguageTag = jniAccessors.getMethodIDOf(
      _classRef,
      "setLanguageTag",
      "(Ljava/lang/String;)Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder setLanguageTag(java.lang.String languageTag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Resets the Builder to match the provided IETF BCP 47
  /// language tag.  Discards the existing state.  Null and the
  /// empty string cause the builder to be reset, like \#clear.  Grandfathered tags (see ULocale\#forLanguageTag) are converted to their canonical
  /// form before being processed.  Otherwise, the language tag
  /// must be well-formed (see ULocale) or an exception is
  /// thrown (unlike <code>ULocale.forLanguageTag</code>, which
  /// just discards ill-formed and following portions of the
  /// tag).
  ///@param languageTag the language tag
  ///@return This builder.
  ///@throws IllformedLocaleException if <code>languageTag</code> is ill-formed
  ///@see ULocale\#forLanguageTag(String)
  ULocale_Builder setLanguageTag(jni.JniString languageTag) =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setLanguageTag,
          jni.JniType.objectType,
          [languageTag.reference]).object);

  static final _id_setLanguage = jniAccessors.getMethodIDOf(_classRef,
      "setLanguage", "(Ljava/lang/String;)Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder setLanguage(java.lang.String language)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the language.  If <code>language</code> is the empty string or
  /// null, the language in this <code>Builder</code> is removed.  Otherwise,
  /// the language must be <a href="./Locale.html\#def_language">well-formed</a>
  /// or an exception is thrown.
  ///
  /// The typical language value is a two or three-letter language
  /// code as defined in ISO639.
  ///@param language the language
  ///@return This builder.
  ///@throws IllformedLocaleException if <code>language</code> is ill-formed
  ULocale_Builder setLanguage(jni.JniString language) =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setLanguage,
          jni.JniType.objectType,
          [language.reference]).object);

  static final _id_setScript = jniAccessors.getMethodIDOf(_classRef,
      "setScript", "(Ljava/lang/String;)Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder setScript(java.lang.String script)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the script. If <code>script</code> is null or the empty string,
  /// the script in this <code>Builder</code> is removed.
  /// Otherwise, the script must be well-formed or an exception is thrown.
  ///
  /// The typical script value is a four-letter script code as defined by ISO 15924.
  ///@param script the script
  ///@return This builder.
  ///@throws IllformedLocaleException if <code>script</code> is ill-formed
  ULocale_Builder setScript(jni.JniString script) =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setScript, jni.JniType.objectType, [script.reference]).object);

  static final _id_setRegion = jniAccessors.getMethodIDOf(_classRef,
      "setRegion", "(Ljava/lang/String;)Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder setRegion(java.lang.String region)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the region.  If region is null or the empty string, the region
  /// in this <code>Builder</code> is removed.  Otherwise,
  /// the region must be well-formed or an exception is thrown.
  ///
  /// The typical region value is a two-letter ISO 3166 code or a
  /// three-digit UN M.49 area code.
  ///
  /// The country value in the <code>Locale</code> created by the
  /// <code>Builder</code> is always normalized to upper case.
  ///@param region the region
  ///@return This builder.
  ///@throws IllformedLocaleException if <code>region</code> is ill-formed
  ULocale_Builder setRegion(jni.JniString region) =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setRegion, jni.JniType.objectType, [region.reference]).object);

  static final _id_setVariant = jniAccessors.getMethodIDOf(_classRef,
      "setVariant", "(Ljava/lang/String;)Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder setVariant(java.lang.String variant)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the variant.  If variant is null or the empty string, the
  /// variant in this <code>Builder</code> is removed.  Otherwise, it
  /// must consist of one or more well-formed subtags, or an exception is thrown.
  ///
  /// __Note:__ This method checks if <code>variant</code>
  /// satisfies the IETF BCP 47 variant subtag's syntax requirements,
  /// and normalizes the value to lowercase letters.  However,
  /// the <code>ULocale</code> class does not impose any syntactic
  /// restriction on variant.  To set such a variant,
  /// use a ULocale constructor.
  ///@param variant the variant
  ///@return This builder.
  ///@throws IllformedLocaleException if <code>variant</code> is ill-formed
  ULocale_Builder setVariant(jni.JniString variant) =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setVariant, jni.JniType.objectType, [variant.reference]).object);

  static final _id_setExtension = jniAccessors.getMethodIDOf(
      _classRef,
      "setExtension",
      "(CLjava/lang/String;)Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder setExtension(char key, java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the extension for the given key. If the value is null or the
  /// empty string, the extension is removed.  Otherwise, the extension
  /// must be well-formed or an exception is thrown.
  ///
  /// __Note:__ The key ULocale\#UNICODE_LOCALE_EXTENSION UNICODE_LOCALE_EXTENSION ('u') is used for the Unicode locale extension.
  /// Setting a value for this key replaces any existing Unicode locale key/type
  /// pairs with those defined in the extension.
  ///
  /// __Note:__ The key ULocale\#PRIVATE_USE_EXTENSION PRIVATE_USE_EXTENSION ('x') is used for the private use code. To be
  /// well-formed, the value for this key needs only to have subtags of one to
  /// eight alphanumeric characters, not two to eight as in the general case.
  ///@param key the extension key
  ///@param value the extension value
  ///@return This builder.
  ///@throws IllformedLocaleException if <code>key</code> is illegal
  /// or <code>value</code> is ill-formed
  ///@see \#setUnicodeLocaleKeyword(String, String)
  ULocale_Builder setExtension(int key, jni.JniString value) =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setExtension,
          jni.JniType.objectType,
          [key, value.reference]).object);

  static final _id_setUnicodeLocaleKeyword = jniAccessors.getMethodIDOf(
      _classRef,
      "setUnicodeLocaleKeyword",
      "(Ljava/lang/String;Ljava/lang/String;)Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder setUnicodeLocaleKeyword(java.lang.String key, java.lang.String type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the Unicode locale keyword type for the given key.  If the type
  /// is null, the Unicode keyword is removed.  Otherwise, the key must be
  /// non-null and both key and type must be well-formed or an exception
  /// is thrown.
  ///
  /// Keys and types are converted to lower case.
  ///
  /// __Note__:Setting the 'u' extension via \#setExtension
  /// replaces all Unicode locale keywords with those defined in the
  /// extension.
  ///@param key the Unicode locale key
  ///@param type the Unicode locale type
  ///@return This builder.
  ///@throws IllformedLocaleException if <code>key</code> or <code>type</code>
  /// is ill-formed
  ///@throws NullPointerException if <code>key</code> is null
  ///@see \#setExtension(char, String)
  ULocale_Builder setUnicodeLocaleKeyword(
          jni.JniString key, jni.JniString type) =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setUnicodeLocaleKeyword,
          jni.JniType.objectType,
          [key.reference, type.reference]).object);

  static final _id_addUnicodeLocaleAttribute = jniAccessors.getMethodIDOf(
      _classRef,
      "addUnicodeLocaleAttribute",
      "(Ljava/lang/String;)Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder addUnicodeLocaleAttribute(java.lang.String attribute)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a unicode locale attribute, if not already present, otherwise
  /// has no effect.  The attribute must not be null and must be well-formed
  /// or an exception is thrown.
  ///@param attribute the attribute
  ///@return This builder.
  ///@throws NullPointerException if <code>attribute</code> is null
  ///@throws IllformedLocaleException if <code>attribute</code> is ill-formed
  ///@see \#setExtension(char, String)
  ULocale_Builder addUnicodeLocaleAttribute(jni.JniString attribute) =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addUnicodeLocaleAttribute,
          jni.JniType.objectType,
          [attribute.reference]).object);

  static final _id_removeUnicodeLocaleAttribute = jniAccessors.getMethodIDOf(
      _classRef,
      "removeUnicodeLocaleAttribute",
      "(Ljava/lang/String;)Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder removeUnicodeLocaleAttribute(java.lang.String attribute)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Removes a unicode locale attribute, if present, otherwise has no
  /// effect.  The attribute must not be null and must be well-formed
  /// or an exception is thrown.
  ///
  /// Attribute comparision for removal is case-insensitive.
  ///@param attribute the attribute
  ///@return This builder.
  ///@throws NullPointerException if <code>attribute</code> is null
  ///@throws IllformedLocaleException if <code>attribute</code> is ill-formed
  ///@see \#setExtension(char, String)
  ULocale_Builder removeUnicodeLocaleAttribute(jni.JniString attribute) =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_removeUnicodeLocaleAttribute,
          jni.JniType.objectType,
          [attribute.reference]).object);

  static final _id_clear = jniAccessors.getMethodIDOf(
      _classRef, "clear", "()Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder clear()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Resets the builder to its initial, empty state.
  ///@return this builder
  ULocale_Builder clear() =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clear, jni.JniType.objectType, []).object);

  static final _id_clearExtensions = jniAccessors.getMethodIDOf(
      _classRef, "clearExtensions", "()Landroid/icu/util/ULocale\$Builder;");

  /// from: public android.icu.util.ULocale.Builder clearExtensions()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Resets the extensions to their initial, empty state.
  /// Language, script, region and variant are unchanged.
  ///@return this builder
  ///@see \#setExtension(char, String)
  ULocale_Builder clearExtensions() =>
      ULocale_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clearExtensions, jni.JniType.objectType, []).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/icu/util/ULocale;");

  /// from: public android.icu.util.ULocale build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an instance of <code>ULocale</code> created from the fields set
  /// on this builder.
  ///@return a new Locale
  ULocale build() => ULocale.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
