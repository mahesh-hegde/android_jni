// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/ComponentName.dart" as componentname_;

import "../os/Bundle.dart" as bundle_;

import "../content/DialogInterface.dart" as dialoginterface_;

import "SearchableInfo.dart" as searchableinfo_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.SearchManager
///
/// This class provides access to the system search services.
///
/// In practice, you won't interact with this class directly, as search
/// services are provided through methods in android.app.Activity Activity
/// and the android.content.Intent\#ACTION_SEARCH ACTION_SEARCH
/// android.content.Intent Intent.
///
///
/// Configuration\#UI_MODE_TYPE_WATCH does not support this system service.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about using the search dialog and adding search
/// suggestions in your application, read the
/// <a href="{@docRoot}guide/topics/search/index.html">Search</a> developer guide.
///
/// </div>
class SearchManager extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/app/SearchManager");
  SearchManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_KEY
  ///
  /// Intent extra data key: Use this key with Intent.ACTION_SEARCH and
  /// android.content.Intent\#getIntExtra content.Intent.getIntExtra()
  /// to obtain the keycode that the user used to trigger this query.  It will be zero if the
  /// user simply pressed the "GO" button on the search UI.  This is primarily used in conjunction
  /// with the keycode attribute in the actionkey element of your searchable.xml configuration
  /// file.
  static const ACTION_KEY = "action_key";

  /// from: static public final java.lang.String ACTION_MSG
  ///
  /// Intent extra data key: Use this key with Intent.ACTION_SEARCH and
  /// android.content.Intent\#getStringExtra content.Intent.getStringExtra()
  /// to obtain the action message that was defined for a particular search action key and/or
  /// suggestion.  It will be null if the search was launched by typing "enter", touched the the
  /// "GO" button, or other means not involving any action key.
  static const ACTION_MSG = "action_msg";

  /// from: static public final java.lang.String APP_DATA
  ///
  /// Intent extra data key: Use this key with Intent.ACTION_SEARCH and
  /// android.content.Intent\#getBundleExtra content.Intent.getBundleExtra()
  /// to obtain any additional app-specific data that was inserted by the
  /// activity that launched the search.
  static const APP_DATA = "app_data";

  /// from: static public final java.lang.String CURSOR_EXTRA_KEY_IN_PROGRESS
  ///
  /// Boolean extra data key for a suggestion provider to return in Cursor\#getExtras to
  /// indicate that the search is not complete yet. This can be used by the search UI
  /// to indicate that a search is in progress. The suggestion provider can return partial results
  /// this way and send a change notification on the cursor when more results are available.
  static const CURSOR_EXTRA_KEY_IN_PROGRESS = "in_progress";

  /// from: static public final java.lang.String EXTRA_DATA_KEY
  ///
  /// Intent extra data key: This key will be used for the extra populated by the
  /// \#SUGGEST_COLUMN_INTENT_EXTRA_DATA column.
  static const EXTRA_DATA_KEY = "intent_extra_data_key";

  /// from: static public final java.lang.String EXTRA_NEW_SEARCH
  ///
  /// Boolean extra data key for Intent\#ACTION_WEB_SEARCH intents.  If {@code true},
  /// this search should open a new browser window, rather than using an existing one.
  static const EXTRA_NEW_SEARCH = "new_search";

  /// from: static public final java.lang.String EXTRA_SELECT_QUERY
  ///
  /// Boolean extra data key for \#INTENT_ACTION_GLOBAL_SEARCH intents. If {@code true},
  /// the initial query should be selected when the global search activity is started, so
  /// that the user can easily replace it with another query.
  static const EXTRA_SELECT_QUERY = "select_query";

  /// from: static public final java.lang.String EXTRA_WEB_SEARCH_PENDINGINTENT
  ///
  /// Extra data key for Intent\#ACTION_WEB_SEARCH. If set, the value must be a
  /// PendingIntent. The search activity handling the Intent\#ACTION_WEB_SEARCH
  /// intent will fill in and launch the pending intent. The data URI will be filled in with an
  /// http or https URI, and android.provider.Browser\#EXTRA_HEADERS may be filled in.
  static const EXTRA_WEB_SEARCH_PENDINGINTENT = "web_search_pendingintent";

  /// from: static public final int FLAG_QUERY_REFINEMENT
  ///
  /// Flag to specify that the entry can be used for query refinement, i.e., the query text
  /// in the search field can be replaced with the text in this entry, when a query refinement
  /// icon is clicked. The suggestion list should show such a clickable icon beside the entry.
  /// Use this flag as a bit-field for \#SUGGEST_COLUMN_FLAGS.
  static const FLAG_QUERY_REFINEMENT = 1;

  /// from: static public final java.lang.String INTENT_ACTION_GLOBAL_SEARCH
  ///
  /// Intent action for starting the global search activity.
  /// The global search provider should handle this intent.
  ///
  /// Supported extra data keys: \#QUERY,
  /// \#EXTRA_SELECT_QUERY,
  /// \#APP_DATA.
  static const INTENT_ACTION_GLOBAL_SEARCH =
      "android.search.action.GLOBAL_SEARCH";

  /// from: static public final java.lang.String INTENT_ACTION_SEARCHABLES_CHANGED
  ///
  /// Intent action broadcasted to inform that the searchables list or default have changed.
  /// Components should handle this intent if they cache any searchable data and wish to stay
  /// up to date on changes.
  static const INTENT_ACTION_SEARCHABLES_CHANGED =
      "android.search.action.SEARCHABLES_CHANGED";

  /// from: static public final java.lang.String INTENT_ACTION_SEARCH_SETTINGS
  ///
  /// Intent action for starting the global search settings activity.
  /// The global search provider should handle this intent.
  static const INTENT_ACTION_SEARCH_SETTINGS =
      "android.search.action.SEARCH_SETTINGS";

  /// from: static public final java.lang.String INTENT_ACTION_SEARCH_SETTINGS_CHANGED
  ///
  /// Intent action broadcasted to inform that the search settings have changed in some way.
  /// Either searchables have been enabled or disabled, or a different web search provider
  /// has been chosen.
  static const INTENT_ACTION_SEARCH_SETTINGS_CHANGED =
      "android.search.action.SETTINGS_CHANGED";

  /// from: static public final java.lang.String INTENT_ACTION_WEB_SEARCH_SETTINGS
  ///
  /// Intent action for starting a web search provider's settings activity.
  /// Web search providers should handle this intent if they have provider-specific
  /// settings to implement.
  static const INTENT_ACTION_WEB_SEARCH_SETTINGS =
      "android.search.action.WEB_SEARCH_SETTINGS";

  /// from: static public final java.lang.String INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED
  ///
  /// Intent action to be broadcast to inform that the global search provider
  /// has changed.
  static const INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED =
      "android.search.action.GLOBAL_SEARCH_ACTIVITY_CHANGED";

  /// from: static public final char MENU_KEY
  ///
  /// This is a shortcut definition for the default menu key to use for invoking search.
  ///
  /// See Menu.Item.setAlphabeticShortcut() for more information.
  static const MENU_KEY = "s";

  /// from: static public final int MENU_KEYCODE
  ///
  /// This is a shortcut definition for the default menu key to use for invoking search.
  ///
  /// See Menu.Item.setAlphabeticShortcut() for more information.
  static const MENU_KEYCODE = 47;

  /// from: static public final java.lang.String QUERY
  ///
  /// Intent extra data key: Use this key with
  /// android.content.Intent\#getStringExtra content.Intent.getStringExtra()
  /// to obtain the query string from Intent.ACTION_SEARCH.
  static const QUERY = "query";

  /// from: static public final java.lang.String SHORTCUT_MIME_TYPE
  ///
  /// MIME type for shortcut validation.  You'll use this in your suggestions content provider
  /// in the getType() function.
  static const SHORTCUT_MIME_TYPE =
      "vnd.android.cursor.item/vnd.android.search.suggest";

  /// from: static public final java.lang.String SUGGEST_COLUMN_AUDIO_CHANNEL_CONFIG
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  If your content contains audio, you
  /// should provide this column to specify the audio channel configuration. The data in the
  /// column is string with format like "channels.subchannels" such as "1.0" or "5.1".
  static const SUGGEST_COLUMN_AUDIO_CHANNEL_CONFIG =
      "suggest_audio_channel_config";

  /// from: static public final java.lang.String SUGGEST_COLUMN_CONTENT_TYPE
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  If your content is media type, you
  /// should provide this column so search app could understand more about your content. The data
  /// in the column must specify the MIME type of the content.
  static const SUGGEST_COLUMN_CONTENT_TYPE = "suggest_content_type";

  /// from: static public final java.lang.String SUGGEST_COLUMN_DURATION
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  If your content is video or audio, you
  /// should provide this column to specify the duration of your content in milliseconds. The data
  /// in the column is of long type.
  static const SUGGEST_COLUMN_DURATION = "suggest_duration";

  /// from: static public final java.lang.String SUGGEST_COLUMN_FLAGS
  ///
  /// Column name for suggestions cursor. <i>Optional.</i> This column is used to specify
  /// additional flags per item. Multiple flags can be specified.
  ///
  /// Must be one of \#FLAG_QUERY_REFINEMENT or 0 to indicate no flags.
  ///
  ///
  static const SUGGEST_COLUMN_FLAGS = "suggest_flags";

  /// from: static public final java.lang.String SUGGEST_COLUMN_FORMAT
  ///
  /// Column name for suggestions cursor.  <i>Unused - can be null or column can be omitted.</i>
  static const SUGGEST_COLUMN_FORMAT = "suggest_format";

  /// from: static public final java.lang.String SUGGEST_COLUMN_ICON_1
  ///
  /// Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,
  ///  then all suggestions will be provided in a format that includes space for two small icons,
  ///  one at the left and one at the right of each suggestion.  The data in the column must
  ///  be a resource ID of a drawable, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)</li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// See android.content.ContentResolver\#openAssetFileDescriptor(Uri, String)
  /// for more information on these schemes.
  static const SUGGEST_COLUMN_ICON_1 = "suggest_icon_1";

  /// from: static public final java.lang.String SUGGEST_COLUMN_ICON_2
  ///
  /// Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,
  ///  then all suggestions will be provided in a format that includes space for two small icons,
  ///  one at the left and one at the right of each suggestion.  The data in the column must
  ///  be a resource ID of a drawable, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)</li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// See android.content.ContentResolver\#openAssetFileDescriptor(Uri, String)
  /// for more information on these schemes.
  static const SUGGEST_COLUMN_ICON_2 = "suggest_icon_2";

  /// from: static public final java.lang.String SUGGEST_COLUMN_INTENT_ACTION
  ///
  /// Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
  /// this element exists at the given row, this is the action that will be used when
  /// forming the suggestion's intent.  If the element is not provided, the action will be taken
  /// from the android:searchSuggestIntentAction field in your XML metadata.  <i>At least one of
  /// these must be present for the suggestion to generate an intent.</i>  Note:  If your action is
  /// the same for all suggestions, it is more efficient to specify it using XML metadata and omit
  /// it from the cursor.
  static const SUGGEST_COLUMN_INTENT_ACTION = "suggest_intent_action";

  /// from: static public final java.lang.String SUGGEST_COLUMN_INTENT_DATA
  ///
  /// Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
  /// this element exists at the given row, this is the data that will be used when
  /// forming the suggestion's intent.  If the element is not provided, the data will be taken
  /// from the android:searchSuggestIntentData field in your XML metadata.  If neither source
  /// is provided, the Intent's data field will be null.  Note:  If your data is
  /// the same for all suggestions, or can be described using a constant part and a specific ID,
  /// it is more efficient to specify it using XML metadata and omit it from the cursor.
  static const SUGGEST_COLUMN_INTENT_DATA = "suggest_intent_data";

  /// from: static public final java.lang.String SUGGEST_COLUMN_INTENT_DATA_ID
  ///
  /// Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
  /// this element exists at the given row, then "/" and this value will be appended to the data
  /// field in the Intent.  This should only be used if the data field has already been set to an
  /// appropriate base string.
  static const SUGGEST_COLUMN_INTENT_DATA_ID = "suggest_intent_data_id";

  /// from: static public final java.lang.String SUGGEST_COLUMN_INTENT_EXTRA_DATA
  ///
  /// Column name for suggestions cursor.  <i>Optional.</i>  If this column exists <i>and</i>
  /// this element exists at the given row, this is the data that will be used when
  /// forming the suggestion's intent. If not provided, the Intent's extra data field will be null.
  /// This column allows suggestions to provide additional arbitrary data which will be included as
  /// an extra under the key \#EXTRA_DATA_KEY.
  static const SUGGEST_COLUMN_INTENT_EXTRA_DATA = "suggest_intent_extra_data";

  /// from: static public final java.lang.String SUGGEST_COLUMN_IS_LIVE
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  If your content is media type, you
  /// should provide this column to specify whether your content is live media such as live video
  /// or live audio. The value in the column is of integer type with value of either 0 indicating
  /// non-live content or 1 indicating live content.
  static const SUGGEST_COLUMN_IS_LIVE = "suggest_is_live";

  /// from: static public final java.lang.String SUGGEST_COLUMN_LAST_ACCESS_HINT
  ///
  /// Column name for suggestions cursor. <i>Optional.</i> This column may be
  /// used to specify the time in System\#currentTimeMillis System.currentTImeMillis() (wall time in UTC) when an item was last
  /// accessed within the results-providing application. If set, this may be
  /// used to show more-recently-used items first.
  static const SUGGEST_COLUMN_LAST_ACCESS_HINT = "suggest_last_access_hint";

  /// from: static public final java.lang.String SUGGEST_COLUMN_PRODUCTION_YEAR
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  If your content is video or audio and
  /// has a known production year, you should provide this column to specify the production year
  /// of your content. The data in the column is of integer type.
  static const SUGGEST_COLUMN_PRODUCTION_YEAR = "suggest_production_year";

  /// from: static public final java.lang.String SUGGEST_COLUMN_PURCHASE_PRICE
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  If your content is purchasable, you
  /// should provide this column to specify the displayable string representation of the purchase
  /// price of your content including the currency and the amount. If it's free, you should
  /// provide localized string to specify that it's free. This column can be omitted if the content
  /// is not applicable to purchase.
  static const SUGGEST_COLUMN_PURCHASE_PRICE = "suggest_purchase_price";

  /// from: static public final java.lang.String SUGGEST_COLUMN_QUERY
  ///
  /// Column name for suggestions cursor.  <i>Required if action is
  /// android.content.Intent\#ACTION_SEARCH ACTION_SEARCH, optional otherwise.</i>  If this
  /// column exists <i>and</i> this element exists at the given row, this is the data that will be
  /// used when forming the suggestion's query.
  static const SUGGEST_COLUMN_QUERY = "suggest_intent_query";

  /// from: static public final java.lang.String SUGGEST_COLUMN_RATING_SCORE
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  If your content has a rating, you
  /// should provide this column to specify the rating score of your content. The data in the
  /// column is of float type. See android.media.Rating about valid rating scores for each
  /// rating style.
  static const SUGGEST_COLUMN_RATING_SCORE = "suggest_rating_score";

  /// from: static public final java.lang.String SUGGEST_COLUMN_RATING_STYLE
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  If your content has a rating, you
  /// should provide this column to specify the rating style of your content. The data in the
  /// column must be one of the constant values specified in android.media.Rating
  static const SUGGEST_COLUMN_RATING_STYLE = "suggest_rating_style";

  /// from: static public final java.lang.String SUGGEST_COLUMN_RENTAL_PRICE
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  If your content is rentable, you
  /// should provide this column to specify the displayable string representation of the rental
  /// price of your content including the currency and the amount. If it's free, you should
  /// provide localized string to specify that it's free. This column can be ommitted if the
  /// content is not applicable to rent.
  static const SUGGEST_COLUMN_RENTAL_PRICE = "suggest_rental_price";

  /// from: static public final java.lang.String SUGGEST_COLUMN_RESULT_CARD_IMAGE
  ///
  /// Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,
  /// then the image will be displayed when forming the suggestion. The suggested dimension for
  /// the image is 270x400 px for portrait mode and 400x225 px for landscape mode. The data in the
  /// column must be a resource ID of a drawable, or a URI in one of the following formats:
  ///
  /// <ul>
  /// <li>content (android.content.ContentResolver\#SCHEME_CONTENT)</li>
  /// <li>android.resource (android.content.ContentResolver\#SCHEME_ANDROID_RESOURCE)</li>
  /// <li>file (android.content.ContentResolver\#SCHEME_FILE)</li>
  /// </ul>
  ///
  /// See android.content.ContentResolver\#openAssetFileDescriptor(Uri, String)
  /// for more information on these schemes.
  static const SUGGEST_COLUMN_RESULT_CARD_IMAGE = "suggest_result_card_image";

  /// from: static public final java.lang.String SUGGEST_COLUMN_SHORTCUT_ID
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  This column is used to indicate whether
  /// a search suggestion should be stored as a shortcut, and whether it should be refreshed.  If
  /// missing, the result will be stored as a shortcut and never validated.  If set to
  /// \#SUGGEST_NEVER_MAKE_SHORTCUT, the result will not be stored as a shortcut.
  /// Otherwise, the shortcut id will be used to check back for an up to date suggestion using
  /// \#SUGGEST_URI_PATH_SHORTCUT.
  static const SUGGEST_COLUMN_SHORTCUT_ID = "suggest_shortcut_id";

  /// from: static public final java.lang.String SUGGEST_COLUMN_SPINNER_WHILE_REFRESHING
  ///
  /// Column name for suggestions cursor. <i>Optional.</i> This column is used to specify
  /// that a spinner should be shown in lieu of an icon2 while the shortcut of this suggestion
  /// is being refreshed.
  static const SUGGEST_COLUMN_SPINNER_WHILE_REFRESHING =
      "suggest_spinner_while_refreshing";

  /// from: static public final java.lang.String SUGGEST_COLUMN_TEXT_1
  ///
  /// Column name for suggestions cursor.  <i>Required.</i>  This is the primary line of text that
  /// will be presented to the user as the suggestion.
  static const SUGGEST_COLUMN_TEXT_1 = "suggest_text_1";

  /// from: static public final java.lang.String SUGGEST_COLUMN_TEXT_2
  ///
  /// Column name for suggestions cursor.  <i>Optional.</i>  If your cursor includes this column,
  ///  then all suggestions will be provided in a two-line format.  The second line of text is in
  ///  a much smaller appearance.
  static const SUGGEST_COLUMN_TEXT_2 = "suggest_text_2";

  /// from: static public final java.lang.String SUGGEST_COLUMN_TEXT_2_URL
  ///
  /// Column name for suggestions cursor.  <i>Optional.</i> This is a URL that will be shown
  /// as the second line of text instead of \#SUGGEST_COLUMN_TEXT_2. This is a separate
  /// column so that the search UI knows to display the text as a URL, e.g. by using a different
  /// color. If this column is absent, or has the value {@code null},
  /// \#SUGGEST_COLUMN_TEXT_2 will be used instead.
  static const SUGGEST_COLUMN_TEXT_2_URL = "suggest_text_2_url";

  /// from: static public final java.lang.String SUGGEST_COLUMN_VIDEO_HEIGHT
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  If your content is video, you should
  /// provide this column to specify the number of horizontal lines. The data in the column is of
  /// integer type.
  static const SUGGEST_COLUMN_VIDEO_HEIGHT = "suggest_video_height";

  /// from: static public final java.lang.String SUGGEST_COLUMN_VIDEO_WIDTH
  ///
  /// Column name for suggestions cursor. <i>Optional.</i>  If your content is video, you should
  /// provide this column to specify the number of vertical lines. The data in the column is of
  /// integer type.
  static const SUGGEST_COLUMN_VIDEO_WIDTH = "suggest_video_width";

  /// from: static public final java.lang.String SUGGEST_MIME_TYPE
  ///
  /// MIME type for suggestions data.  You'll use this in your suggestions content provider
  /// in the getType() function.
  static const SUGGEST_MIME_TYPE =
      "vnd.android.cursor.dir/vnd.android.search.suggest";

  /// from: static public final java.lang.String SUGGEST_NEVER_MAKE_SHORTCUT
  ///
  /// Column value for suggestion column \#SUGGEST_COLUMN_SHORTCUT_ID when a suggestion
  /// should not be stored as a shortcut in global search.
  static const SUGGEST_NEVER_MAKE_SHORTCUT = "_-1";

  /// from: static public final java.lang.String SUGGEST_PARAMETER_LIMIT
  ///
  /// Query parameter added to suggestion queries to limit the number of suggestions returned.
  /// This limit is only advisory and suggestion providers may chose to ignore it.
  static const SUGGEST_PARAMETER_LIMIT = "limit";

  /// from: static public final java.lang.String SUGGEST_URI_PATH_QUERY
  ///
  /// Uri path for queried suggestions data.  This is the path that the search manager
  /// will use when querying your content provider for suggestions data based on user input
  /// (e.g. looking for partial matches).
  /// Typically you'll use this with a URI matcher.
  static const SUGGEST_URI_PATH_QUERY = "search_suggest_query";

  /// from: static public final java.lang.String SUGGEST_URI_PATH_SHORTCUT
  ///
  /// Uri path for shortcut validation.  This is the path that the search manager will use when
  /// querying your content provider to refresh a shortcutted suggestion result and to check if it
  /// is still valid.  When asked, a source may return an up to date result, or no result.  No
  /// result indicates the shortcut refers to a no longer valid sugggestion.
  ///@see \#SUGGEST_COLUMN_SHORTCUT_ID
  static const SUGGEST_URI_PATH_SHORTCUT = "search_suggest_shortcut";

  /// from: static public final java.lang.String USER_QUERY
  ///
  /// Intent extra data key: Use this key with
  /// android.content.Intent\#getStringExtra content.Intent.getStringExtra()
  /// to obtain the query string typed in by the user.
  /// This may be different from the value of \#QUERY
  /// if the intent is the result of selecting a suggestion.
  /// In that case, \#QUERY will contain the value of
  /// \#SUGGEST_COLUMN_QUERY for the suggestion, and
  /// \#USER_QUERY will contain the string typed by the
  /// user.
  static const USER_QUERY = "user_query";

  static final _id_startSearch = jniAccessors.getMethodIDOf(
      _classRef,
      "startSearch",
      "(Ljava/lang/String;ZLandroid/content/ComponentName;Landroid/os/Bundle;Z)V");

  /// from: public void startSearch(java.lang.String initialQuery, boolean selectInitialQuery, android.content.ComponentName launchActivity, android.os.Bundle appSearchData, boolean globalSearch)
  ///
  /// Launch search UI.
  ///
  /// The search manager will open a search widget in an overlapping
  /// window, and the underlying activity may be obscured.  The search
  /// entry state will remain in effect until one of the following events:
  /// <ul>
  /// <li>The user completes the search.  In most cases this will launch
  /// a search intent.</li>
  /// <li>The user uses the back, home, or other keys to exit the search.</li>
  /// <li>The application calls the \#stopSearch
  /// method, which will hide the search window and return focus to the
  /// activity from which it was launched.</li>
  ///
  /// Most applications will <i>not</i> use this interface to invoke search.
  /// The primary method for invoking search is to call
  /// android.app.Activity\#onSearchRequested Activity.onSearchRequested() or
  /// android.app.Activity\#startSearch Activity.startSearch().
  ///@param initialQuery A search string can be pre-entered here, but this
  /// is typically null or empty.
  ///@param selectInitialQuery If true, the intial query will be preselected, which means that
  /// any further typing will replace it.  This is useful for cases where an entire pre-formed
  /// query is being inserted.  If false, the selection point will be placed at the end of the
  /// inserted query.  This is useful when the inserted query is text that the user entered,
  /// and the user would expect to be able to keep typing.  <i>This parameter is only meaningful
  /// if initialQuery is a non-empty string.</i>
  ///@param launchActivity The ComponentName of the activity that has launched this search.
  ///@param appSearchData An application can insert application-specific
  /// context here, in order to improve quality or specificity of its own
  /// searches.  This data will be returned with SEARCH intent(s).  Null if
  /// no extra data is required.
  ///@param globalSearch If false, this will only launch the search that has been specifically
  /// defined by the application (which is usually defined as a local search).  If no default
  /// search is defined in the current application or activity, global search will be launched.
  /// If true, this will always launch a platform-global (e.g. web-based) search instead.
  ///@see android.app.Activity\#onSearchRequested
  ///@see \#stopSearch
  void startSearch(
          jni.JniString initialQuery,
          bool selectInitialQuery,
          componentname_.ComponentName launchActivity,
          bundle_.Bundle appSearchData,
          bool globalSearch) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_startSearch, jni.JniType.voidType, [
        initialQuery.reference,
        selectInitialQuery,
        launchActivity.reference,
        appSearchData.reference,
        globalSearch
      ]).check();

  static final _id_getGlobalSearchActivity = jniAccessors.getMethodIDOf(
      _classRef,
      "getGlobalSearchActivity",
      "()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getGlobalSearchActivity()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the name of the global search activity.
  componentname_.ComponentName getGlobalSearchActivity() =>
      componentname_.ComponentName.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getGlobalSearchActivity,
          jni.JniType.objectType, []).object);

  static final _id_triggerSearch = jniAccessors.getMethodIDOf(
      _classRef,
      "triggerSearch",
      "(Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/Bundle;)V");

  /// from: public void triggerSearch(java.lang.String query, android.content.ComponentName launchActivity, android.os.Bundle appSearchData)
  ///
  /// Similar to \#startSearch but actually fires off the search query after invoking
  /// the search dialog.  Made available for testing purposes.
  ///@param query The query to trigger.  If empty, request will be ignored.
  ///@param launchActivity The ComponentName of the activity that has launched this search.
  ///@param appSearchData An application can insert application-specific
  /// context here, in order to improve quality or specificity of its own
  /// searches.  This data will be returned with SEARCH intent(s).  Null if
  /// no extra data is required.
  ///@see \#startSearch
  void triggerSearch(
          jni.JniString query,
          componentname_.ComponentName launchActivity,
          bundle_.Bundle appSearchData) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_triggerSearch, jni.JniType.voidType, [
        query.reference,
        launchActivity.reference,
        appSearchData.reference
      ]).check();

  static final _id_stopSearch =
      jniAccessors.getMethodIDOf(_classRef, "stopSearch", "()V");

  /// from: public void stopSearch()
  ///
  /// Terminate search UI.
  ///
  /// Typically the user will terminate the search UI by launching a
  /// search or by canceling.  This function allows the underlying application
  /// or activity to cancel the search prematurely (for any reason).
  ///
  /// This function can be safely called at any time (even if no search is active.)
  ///
  /// Configuration\#UI_MODE_TYPE_TELEVISION does not support this method.
  ///@see \#startSearch
  void stopSearch() => jniAccessors.callMethodWithArgs(
      reference, _id_stopSearch, jni.JniType.voidType, []).check();

  static final _id_setOnDismissListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnDismissListener",
      "(Landroid/app/SearchManager\$OnDismissListener;)V");

  /// from: public void setOnDismissListener(android.app.SearchManager.OnDismissListener listener)
  ///
  /// Set or clear the callback that will be invoked whenever the search UI is dismissed.
  ///
  /// Configuration\#UI_MODE_TYPE_TELEVISION does not support this method.
  ///@param listener The OnDismissListener to use, or null.
  void setOnDismissListener(SearchManager_OnDismissListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnDismissListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_setOnCancelListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnCancelListener",
      "(Landroid/app/SearchManager\$OnCancelListener;)V");

  /// from: public void setOnCancelListener(android.app.SearchManager.OnCancelListener listener)
  ///
  /// Set or clear the callback that will be invoked whenever the search UI is canceled.
  ///
  /// Configuration\#UI_MODE_TYPE_TELEVISION does not support this method.
  ///@param listener The OnCancelListener to use, or null.
  void setOnCancelListener(SearchManager_OnCancelListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnCancelListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_onCancel = jniAccessors.getMethodIDOf(
      _classRef, "onCancel", "(Landroid/content/DialogInterface;)V");

  /// from: public void onCancel(android.content.DialogInterface dialog)
  ///
  /// @deprecated This method is an obsolete internal implementation detail. Do not use.
  void onCancel(dialoginterface_.DialogInterface dialog) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCancel,
          jni.JniType.voidType, [dialog.reference]).check();

  static final _id_onDismiss = jniAccessors.getMethodIDOf(
      _classRef, "onDismiss", "(Landroid/content/DialogInterface;)V");

  /// from: public void onDismiss(android.content.DialogInterface dialog)
  ///
  /// @deprecated This method is an obsolete internal implementation detail. Do not use.
  void onDismiss(dialoginterface_.DialogInterface dialog) =>
      jniAccessors.callMethodWithArgs(reference, _id_onDismiss,
          jni.JniType.voidType, [dialog.reference]).check();

  static final _id_getSearchableInfo = jniAccessors.getMethodIDOf(
      _classRef,
      "getSearchableInfo",
      "(Landroid/content/ComponentName;)Landroid/app/SearchableInfo;");

  /// from: public android.app.SearchableInfo getSearchableInfo(android.content.ComponentName componentName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets information about a searchable activity.
  ///@param componentName The activity to get searchable information for.
  ///@return Searchable information, or <code>null</code> if the activity does not
  ///         exist, or is not searchable.
  searchableinfo_.SearchableInfo getSearchableInfo(
          componentname_.ComponentName componentName) =>
      searchableinfo_.SearchableInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getSearchableInfo,
          jni.JniType.objectType,
          [componentName.reference]).object);

  static final _id_getSearchablesInGlobalSearch = jniAccessors.getMethodIDOf(
      _classRef, "getSearchablesInGlobalSearch", "()Ljava/util/List;");

  /// from: public java.util.List<android.app.SearchableInfo> getSearchablesInGlobalSearch()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a list of the searchable activities that can be included in global search.
  ///@return a list containing searchable information for all searchable activities
  ///         that have the <code>android:includeInGlobalSearch</code> attribute set
  ///         in their searchable meta-data.
  jni.JniObject getSearchablesInGlobalSearch() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSearchablesInGlobalSearch, jni.JniType.objectType, []).object);
}

/// from: android.app.SearchManager$OnDismissListener
///
/// See SearchManager\#setOnDismissListener for configuring your activity to monitor
/// search UI state.
class SearchManager_OnDismissListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/SearchManager\$OnDismissListener");
  SearchManager_OnDismissListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onDismiss =
      jniAccessors.getMethodIDOf(_classRef, "onDismiss", "()V");

  /// from: public abstract void onDismiss()
  ///
  /// This method will be called when the search UI is dismissed. To make use of it, you must
  /// implement this method in your activity, and call
  /// SearchManager\#setOnDismissListener to register it.
  void onDismiss() => jniAccessors.callMethodWithArgs(
      reference, _id_onDismiss, jni.JniType.voidType, []).check();
}

/// from: android.app.SearchManager$OnCancelListener
///
/// See SearchManager\#setOnCancelListener for configuring your activity to monitor
/// search UI state.
class SearchManager_OnCancelListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/SearchManager\$OnCancelListener");
  SearchManager_OnCancelListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onCancel =
      jniAccessors.getMethodIDOf(_classRef, "onCancel", "()V");

  /// from: public abstract void onCancel()
  ///
  /// This method will be called when the search UI is canceled. To make use if it, you must
  /// implement this method in your activity, and call
  /// SearchManager\#setOnCancelListener to register it.
  void onCancel() => jniAccessors.callMethodWithArgs(
      reference, _id_onCancel, jni.JniType.voidType, []).check();
}
