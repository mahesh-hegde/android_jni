// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Bundle.dart" as bundle_;

import "../content/Intent.dart" as intent_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.RemoteInput
///
/// A {@code RemoteInput} object specifies input to be collected from a user to be passed along with
/// an intent inside a android.app.PendingIntent that is sent.
/// Always use RemoteInput.Builder to create instances of this class.
/// <p class="note"> See
/// <a href="{@docRoot}guide/topics/ui/notifiers/notifications.html\#direct">Replying
/// to notifications</a> for more information on how to use this class.
///
/// The following example adds a {@code RemoteInput} to a Notification.Action,
/// sets the result key as {@code quick_reply}, and sets the label as {@code Quick reply}.
/// Users are prompted to input a response when they trigger the action. The results are sent along
/// with the intent and can be retrieved with the result key (provided to the Builder
/// constructor) from the Bundle returned by \#getResultsFromIntent.
///
/// <pre class="prettyprint">
/// public static final String KEY_QUICK_REPLY_TEXT = "quick_reply";
/// Notification.Action action = new Notification.Action.Builder(
///         R.drawable.reply, &quot;Reply&quot;, actionIntent)
///         __.addRemoteInput(new RemoteInput.Builder(KEY_QUICK_REPLY_TEXT)
///                 .setLabel("Quick reply").build()__)
///         .build();</pre>
///
/// When the android.app.PendingIntent is fired, the intent inside will contain the
/// input results if collected. To access these results, use the \#getResultsFromIntent
/// function. The result values will present under the result key passed to the Builder
/// constructor.
///
/// <pre class="prettyprint">
/// public static final String KEY_QUICK_REPLY_TEXT = "quick_reply";
/// Bundle results = RemoteInput.getResultsFromIntent(intent);
/// if (results != null) {
///     CharSequence quickReplyResult = results.getCharSequence(KEY_QUICK_REPLY_TEXT);
/// }</pre>
class RemoteInput extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/app/RemoteInput");
  RemoteInput.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.RemoteInput> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final java.lang.String EXTRA_RESULTS_DATA
  ///
  /// Extra added to a clip data intent object to hold the text results bundle.
  static const EXTRA_RESULTS_DATA = "android.remoteinput.resultsData";

  /// from: static public final java.lang.String RESULTS_CLIP_LABEL
  ///
  /// Label used to denote the clip data type used for remote input transport
  static const RESULTS_CLIP_LABEL = "android.remoteinput.results";

  /// from: static public final int SOURCE_CHOICE
  ///
  /// The user selected one of the choices from \#getChoices.
  static const SOURCE_CHOICE = 1;

  /// from: static public final int SOURCE_FREE_FORM_INPUT
  ///
  /// The user manually entered the data.
  static const SOURCE_FREE_FORM_INPUT = 0;

  static final _id_getResultKey = jniAccessors.getMethodIDOf(
      _classRef, "getResultKey", "()Ljava/lang/String;");

  /// from: public java.lang.String getResultKey()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the key that the result of this input will be set in from the Bundle returned by
  /// \#getResultsFromIntent when the android.app.PendingIntent is sent.
  jni.JniString getResultKey() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getResultKey, jni.JniType.objectType, []).object);

  static final _id_getLabel = jniAccessors.getMethodIDOf(
      _classRef, "getLabel", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getLabel()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the label to display to users when collecting this input.
  jni.JniObject getLabel() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLabel, jni.JniType.objectType, []).object);

  static final _id_getChoices = jniAccessors.getMethodIDOf(
      _classRef, "getChoices", "()[Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence[] getChoices()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get possible input choices. This can be {@code null} if there are no choices to present.
  jni.JniObject getChoices() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getChoices, jni.JniType.objectType, []).object);

  static final _id_getAllowedDataTypes = jniAccessors.getMethodIDOf(
      _classRef, "getAllowedDataTypes", "()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.String> getAllowedDataTypes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get possible non-textual inputs that are accepted.
  /// This can be {@code null} if the input does not accept non-textual values.
  /// See Builder\#setAllowDataType.
  jni.JniObject getAllowedDataTypes() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getAllowedDataTypes, jni.JniType.objectType, []).object);

  static final _id_isDataOnly =
      jniAccessors.getMethodIDOf(_classRef, "isDataOnly", "()Z");

  /// from: public boolean isDataOnly()
  ///
  /// Returns true if the input only accepts data, meaning \#getAllowFreeFormInput
  /// is false, \#getChoices is null or empty, and \#getAllowedDataTypes is
  /// non-null and not empty.
  bool isDataOnly() => jniAccessors.callMethodWithArgs(
      reference, _id_isDataOnly, jni.JniType.booleanType, []).boolean;

  static final _id_getAllowFreeFormInput =
      jniAccessors.getMethodIDOf(_classRef, "getAllowFreeFormInput", "()Z");

  /// from: public boolean getAllowFreeFormInput()
  ///
  /// Get whether or not users can provide an arbitrary value for
  /// input. If you set this to {@code false}, users must select one of the
  /// choices in \#getChoices. An IllegalArgumentException is thrown
  /// if you set this to false and \#getChoices returns {@code null} or empty.
  bool getAllowFreeFormInput() => jniAccessors.callMethodWithArgs(reference,
      _id_getAllowFreeFormInput, jni.JniType.booleanType, []).boolean;

  static final _id_getExtras = jniAccessors.getMethodIDOf(
      _classRef, "getExtras", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get additional metadata carried around with this remote input.
  bundle_.Bundle getExtras() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtras, jni.JniType.objectType, []).object);

  static final _id_getDataResultsFromIntent = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDataResultsFromIntent",
      "(Landroid/content/Intent;Ljava/lang/String;)Ljava/util/Map;");

  /// from: static public java.util.Map<java.lang.String,android.net.Uri> getDataResultsFromIntent(android.content.Intent intent, java.lang.String remoteInputResultKey)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Similar as \#getResultsFromIntent but retrieves data results for a
  /// specific RemoteInput result. To retrieve a value use:
  /// <pre>
  /// {@code
  /// Map<String, Uri> results =
  ///     RemoteInput.getDataResultsFromIntent(intent, REMOTE_INPUT_KEY);
  /// if (results != null) {
  ///   Uri data = results.get(MIME_TYPE_OF_INTEREST);
  /// }
  /// }
  /// </pre>
  ///@param intent The intent object that fired in response to an action or content intent
  ///               which also had one or more remote input requested.
  ///@param remoteInputResultKey The result key for the RemoteInput you want results for.
  static jni.JniObject getDataResultsFromIntent(
          intent_.Intent intent, jni.JniString remoteInputResultKey) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDataResultsFromIntent,
          jni.JniType.objectType,
          [intent.reference, remoteInputResultKey.reference]).object);

  static final _id_getResultsFromIntent = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getResultsFromIntent",
      "(Landroid/content/Intent;)Landroid/os/Bundle;");

  /// from: static public android.os.Bundle getResultsFromIntent(android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the remote input text results bundle from an intent. The returned Bundle will
  /// contain a key/value for every result key populated with text by remote input collector.
  /// Use the Bundle\#getCharSequence(String) method to retrieve a value. For non-text
  /// results use \#getDataResultsFromIntent.
  ///@param intent The intent object that fired in response to an action or content intent
  ///               which also had one or more remote input requested.
  static bundle_.Bundle getResultsFromIntent(intent_.Intent intent) =>
      bundle_.Bundle.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getResultsFromIntent,
          jni.JniType.objectType,
          [intent.reference]).object);

  static final _id_addResultsToIntent = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "addResultsToIntent",
      "([Landroid/app/RemoteInput;Landroid/content/Intent;Landroid/os/Bundle;)V");

  /// from: static public void addResultsToIntent(android.app.RemoteInput[] remoteInputs, android.content.Intent intent, android.os.Bundle results)
  ///
  /// Populate an intent object with the text results gathered from remote input. This method
  /// should only be called by remote input collection services when sending results to a
  /// pending intent.
  ///@param remoteInputs The remote inputs for which results are being provided
  ///@param intent The intent to add remote inputs to. The ClipData
  ///               field of the intent will be modified to contain the results.
  ///@param results A bundle holding the remote input results. This bundle should
  ///                be populated with keys matching the result keys specified in
  ///                {@code remoteInputs} with values being the CharSequence results per key.
  static void addResultsToIntent(jni.JniObject remoteInputs,
          intent_.Intent intent, bundle_.Bundle results) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_addResultsToIntent, jni.JniType.voidType, [
        remoteInputs.reference,
        intent.reference,
        results.reference
      ]).check();

  static final _id_addDataResultToIntent = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "addDataResultToIntent",
      "(Landroid/app/RemoteInput;Landroid/content/Intent;Ljava/util/Map;)V");

  /// from: static public void addDataResultToIntent(android.app.RemoteInput remoteInput, android.content.Intent intent, java.util.Map<java.lang.String,android.net.Uri> results)
  ///
  /// Same as \#addResultsToIntent but for setting data results. This is used
  /// for inputs that accept non-textual results (see Builder\#setAllowDataType).
  /// Only one result can be provided for every mime type accepted by the RemoteInput.
  /// If multiple inputs of the same mime type are expected then multiple RemoteInputs
  /// should be used.
  ///@param remoteInput The remote input for which results are being provided
  ///@param intent The intent to add remote input results to. The ClipData
  ///               field of the intent will be modified to contain the results.
  ///@param results A map of mime type to the Uri result for that mime type.
  static void addDataResultToIntent(RemoteInput remoteInput,
          intent_.Intent intent, jni.JniObject results) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_addDataResultToIntent,
          jni.JniType.voidType,
          [remoteInput.reference, intent.reference, results.reference]).check();

  static final _id_setResultsSource = jniAccessors.getStaticMethodIDOf(
      _classRef, "setResultsSource", "(Landroid/content/Intent;I)V");

  /// from: static public void setResultsSource(android.content.Intent intent, int source)
  ///
  /// Set the source of the RemoteInput results. This method should only be called by remote
  /// input collection services (e.g.
  /// android.service.notification.NotificationListenerService)
  /// when sending results to a pending intent.
  ///@see \#SOURCE_FREE_FORM_INPUT
  ///@see \#SOURCE_CHOICE
  ///@param intent The intent to add remote input source to. The ClipData
  ///               field of the intent will be modified to contain the source.
  ///@param source The source of the results.
  ///
  /// Value is android.app.RemoteInput\#SOURCE_FREE_FORM_INPUT, or android.app.RemoteInput\#SOURCE_CHOICE
  static void setResultsSource(intent_.Intent intent, int source) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_setResultsSource,
          jni.JniType.voidType, [intent.reference, source]).check();

  static final _id_getResultsSource = jniAccessors.getStaticMethodIDOf(
      _classRef, "getResultsSource", "(Landroid/content/Intent;)I");

  /// from: static public int getResultsSource(android.content.Intent intent)
  ///
  /// Get the source of the RemoteInput results.
  ///@see \#SOURCE_FREE_FORM_INPUT
  ///@see \#SOURCE_CHOICE
  ///@param intent The intent object that fired in response to an action or content intent
  ///               which also had one or more remote input requested.
  ///@return The source of the results. If no source was set, \#SOURCE_FREE_FORM_INPUT will
  /// be returned.
  ///
  /// Value is android.app.RemoteInput\#SOURCE_FREE_FORM_INPUT, or android.app.RemoteInput\#SOURCE_CHOICE
  static int getResultsSource(intent_.Intent intent) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getResultsSource,
          jni.JniType.intType, [intent.reference]).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();
}

/// from: android.app.RemoteInput$Builder
///
/// Builder class for RemoteInput objects.
class RemoteInput_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/RemoteInput\$Builder");
  RemoteInput_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String resultKey)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a builder object for RemoteInput objects.
  ///@param resultKey the Bundle key that refers to this input when collected from the user
  ///
  /// This value must never be {@code null}.
  RemoteInput_Builder(jni.JniString resultKey)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [resultKey.reference]).object);

  static final _id_setLabel = jniAccessors.getMethodIDOf(_classRef, "setLabel",
      "(Ljava/lang/CharSequence;)Landroid/app/RemoteInput\$Builder;");

  /// from: public android.app.RemoteInput.Builder setLabel(java.lang.CharSequence label)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a label to be displayed to the user when collecting this input.
  ///@param label The label to show to users when they input a response
  /// This value may be {@code null}.
  ///@return this object for method chaining
  ///
  /// This value will never be {@code null}.
  RemoteInput_Builder setLabel(jni.JniObject label) =>
      RemoteInput_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setLabel, jni.JniType.objectType, [label.reference]).object);

  static final _id_setChoices = jniAccessors.getMethodIDOf(
      _classRef,
      "setChoices",
      "([Ljava/lang/CharSequence;)Landroid/app/RemoteInput\$Builder;");

  /// from: public android.app.RemoteInput.Builder setChoices(java.lang.CharSequence[] choices)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specifies choices available to the user to satisfy this input.
  ///
  /// Note: Starting in Android P, these choices will always be shown on phones if the app's
  /// target SDK is >= P. However, these choices may also be rendered on other types of devices
  /// regardless of target SDK.
  ///@param choices an array of pre-defined choices for users input.
  ///        You must provide a non-null and non-empty array if
  ///        you disabled free form input using \#setAllowFreeFormInput
  /// This value may be {@code null}.
  ///@return this object for method chaining
  RemoteInput_Builder setChoices(jni.JniObject choices) =>
      RemoteInput_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setChoices, jni.JniType.objectType, [choices.reference]).object);

  static final _id_setAllowDataType = jniAccessors.getMethodIDOf(
      _classRef,
      "setAllowDataType",
      "(Ljava/lang/String;Z)Landroid/app/RemoteInput\$Builder;");

  /// from: public android.app.RemoteInput.Builder setAllowDataType(java.lang.String mimeType, boolean doAllow)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specifies whether the user can provide arbitrary values. This allows an input
  /// to accept non-textual values. Examples of usage are an input that wants audio
  /// or an image.
  ///@param mimeType A mime type that results are allowed to come in.
  ///         Be aware that text results (see \#setAllowFreeFormInput
  ///         are allowed by default. If you do not want text results you will have to
  ///         pass false to {@code setAllowFreeFormInput}
  /// This value must never be {@code null}.
  ///@param doAllow Whether the mime type should be allowed or not
  ///@return this object for method chaining
  ///
  /// This value will never be {@code null}.
  RemoteInput_Builder setAllowDataType(jni.JniString mimeType, bool doAllow) =>
      RemoteInput_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAllowDataType,
          jni.JniType.objectType,
          [mimeType.reference, doAllow]).object);

  static final _id_setAllowFreeFormInput = jniAccessors.getMethodIDOf(_classRef,
      "setAllowFreeFormInput", "(Z)Landroid/app/RemoteInput\$Builder;");

  /// from: public android.app.RemoteInput.Builder setAllowFreeFormInput(boolean allowFreeFormTextInput)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Specifies whether the user can provide arbitrary text values.
  ///@param allowFreeFormTextInput The default is {@code true}.
  ///         If you specify {@code false}, you must either provide a non-null
  ///         and non-empty array to \#setChoices, or enable a data result
  ///         in {@code setAllowDataType}. Otherwise an
  ///         IllegalArgumentException is thrown
  ///@return this object for method chaining
  RemoteInput_Builder setAllowFreeFormInput(bool allowFreeFormTextInput) =>
      RemoteInput_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAllowFreeFormInput,
          jni.JniType.objectType,
          [allowFreeFormTextInput]).object);

  static final _id_addExtras = jniAccessors.getMethodIDOf(_classRef,
      "addExtras", "(Landroid/os/Bundle;)Landroid/app/RemoteInput\$Builder;");

  /// from: public android.app.RemoteInput.Builder addExtras(android.os.Bundle extras)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Merge additional metadata into this builder.
  ///
  /// Values within the Bundle will replace existing extras values in this Builder.
  ///@see RemoteInput\#getExtras
  ///@param extras This value must never be {@code null}.
  ///@return This value will never be {@code null}.
  RemoteInput_Builder addExtras(bundle_.Bundle extras) =>
      RemoteInput_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_addExtras, jni.JniType.objectType, [extras.reference]).object);

  static final _id_getExtras = jniAccessors.getMethodIDOf(
      _classRef, "getExtras", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the metadata Bundle used by this Builder.
  ///
  /// The returned Bundle is shared with this Builder.
  ///@return This value will never be {@code null}.
  bundle_.Bundle getExtras() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getExtras, jni.JniType.objectType, []).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/app/RemoteInput;");

  /// from: public android.app.RemoteInput build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Combine all of the options that have been set and return a new RemoteInput
  /// object.
  ///@return This value will never be {@code null}.
  RemoteInput build() => RemoteInput.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
