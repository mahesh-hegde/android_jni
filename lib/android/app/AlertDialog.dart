// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Dialog.dart" as dialog_;

import "../content/Context.dart" as context_;

import "../content/DialogInterface.dart" as dialoginterface_;

import "../widget/Button.dart" as button_;

import "../widget/ListView.dart" as listview_;

import "../view/View.dart" as view_;

import "../os/Message.dart" as message_;

import "../graphics/drawable/Drawable.dart" as drawable_;

import "../os/Bundle.dart" as bundle_;

import "../view/KeyEvent.dart" as keyevent_;

import "../widget/ListAdapter.dart" as listadapter_;

import "../database/Cursor.dart" as cursor_;

import "../widget/AdapterView.dart" as adapterview_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.AlertDialog
///
/// A subclass of Dialog that can display one, two or three buttons. If you only want to
/// display a String in this dialog box, use the setMessage() method.  If you
/// want to display a more complex view, look up the FrameLayout called "custom"
/// and add your view to it:
///
/// <pre>
/// FrameLayout fl = findViewById(android.R.id.custom);
/// fl.addView(myView, new LayoutParams(MATCH_PARENT, WRAP_CONTENT));
/// </pre>
///
/// The AlertDialog class takes care of automatically setting
/// android.view.WindowManager.LayoutParams\#FLAG_ALT_FOCUSABLE_IM WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM for you based on whether
/// any views in the dialog return true from View\#onCheckIsTextEditor() View.onCheckIsTextEditor().  Generally you want this set for a Dialog
/// without text editors, so that it will be placed on top of the current
/// input method UI.  You can modify this behavior by forcing the flag to your
/// desired mode after calling \#onCreate.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about creating dialogs, read the
/// <a href="{@docRoot}guide/topics/ui/dialogs.html">Dialogs</a> developer guide.
///
/// </div>
class AlertDialog extends dialog_.Dialog {
  static final _classRef = jniAccessors.getClassOf("android/app/AlertDialog");
  AlertDialog.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int THEME_DEVICE_DEFAULT_DARK
  ///
  /// Special theme constant for \#AlertDialog(Context, int): use
  /// the device's default alert theme with a dark background.
  ///@deprecated Use android.R.style\#Theme_DeviceDefault_Dialog_Alert.
  static const THEME_DEVICE_DEFAULT_DARK = 4;

  /// from: static public final int THEME_DEVICE_DEFAULT_LIGHT
  ///
  /// Special theme constant for \#AlertDialog(Context, int): use
  /// the device's default alert theme with a light background.
  ///@deprecated Use android.R.style\#Theme_DeviceDefault_Light_Dialog_Alert.
  static const THEME_DEVICE_DEFAULT_LIGHT = 5;

  /// from: static public final int THEME_HOLO_DARK
  ///
  /// Special theme constant for \#AlertDialog(Context, int): use
  /// the holographic alert theme with a dark background.
  ///@deprecated Use android.R.style\#Theme_Material_Dialog_Alert.
  static const THEME_HOLO_DARK = 2;

  /// from: static public final int THEME_HOLO_LIGHT
  ///
  /// Special theme constant for \#AlertDialog(Context, int): use
  /// the holographic alert theme with a light background.
  ///@deprecated Use android.R.style\#Theme_Material_Light_Dialog_Alert.
  static const THEME_HOLO_LIGHT = 3;

  /// from: static public final int THEME_TRADITIONAL
  ///
  /// Special theme constant for \#AlertDialog(Context, int): use
  /// the traditional (pre-Holo) alert dialog theme.
  ///@deprecated Use android.R.style\#Theme_Material_Dialog_Alert.
  static const THEME_TRADITIONAL = 1;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: protected void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an alert dialog that uses the default alert dialog theme.
  ///
  /// The default alert dialog theme is defined by
  /// android.R.attr\#alertDialogTheme within the parent
  /// {@code context}'s theme.
  ///@param context the parent context
  ///@see android.R.styleable\#Theme_alertDialogTheme
  AlertDialog(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;ZLandroid/content/DialogInterface\$OnCancelListener;)V");

  /// from: protected void <init>(android.content.Context context, boolean cancelable, android.content.DialogInterface.OnCancelListener cancelListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an alert dialog that uses the default alert dialog theme and a
  /// custom cancel listener.
  ///
  /// This is functionally identical to:
  /// <pre>
  ///     AlertDialog dialog = new AlertDialog(context);
  ///     alertDialog.setCancelable(cancelable);
  ///     alertDialog.setOnCancelListener(cancelListener);
  /// </pre>
  ///
  /// The default alert dialog theme is defined by
  /// android.R.attr\#alertDialogTheme within the parent
  /// {@code context}'s theme.
  ///@param context the parent context
  ///@see android.R.styleable\#Theme_alertDialogTheme
  AlertDialog.ctor2(context_.Context context, bool cancelable,
      dialoginterface_.DialogInterface_OnCancelListener cancelListener)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [context.reference, cancelable, cancelListener.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;I)V");

  /// from: protected void <init>(android.content.Context context, int themeResId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an alert dialog that uses an explicit theme resource.
  ///
  /// The specified theme resource ({@code themeResId}) is applied on top of
  /// the parent {@code context}'s theme. It may be specified as a style
  /// resource containing a fully-populated theme, such as
  /// android.R.style\#Theme_Material_Dialog, to replace all attributes
  /// in the parent {@code context}'s theme including primary and accent
  /// colors.
  ///
  /// To preserve attributes such as primary and accent colors, the
  /// {@code themeResId} may instead be specified as an overlay theme such as
  /// android.R.style\#ThemeOverlay_Material_Dialog. This will override
  /// only the window attributes necessary to style the alert window as a
  /// dialog.
  ///
  /// Alternatively, the {@code themeResId} may be specified as {@code 0} to
  /// use the parent {@code context}'s resolved value for
  /// android.R.attr\#alertDialogTheme.
  ///@param context the parent context
  ///@param themeResId the resource ID of the theme against which to inflate
  ///                   this dialog, or {@code 0} to use the parent
  ///                   {@code context}'s default alert dialog theme
  ///@see android.R.styleable\#Theme_alertDialogTheme
  AlertDialog.ctor1(context_.Context context, int themeResId)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, themeResId]).object);

  static final _id_getButton = jniAccessors.getMethodIDOf(
      _classRef, "getButton", "(I)Landroid/widget/Button;");

  /// from: public android.widget.Button getButton(int whichButton)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets one of the buttons used in the dialog. Returns null if the specified
  /// button does not exist or the dialog has not yet been fully created (for
  /// example, via \#show() or \#create()).
  ///@param whichButton The identifier of the button that should be returned.
  ///            For example, this can be
  ///            DialogInterface\#BUTTON_POSITIVE.
  ///@return The button from the dialog, or null if a button does not exist.
  button_.Button getButton(int whichButton) =>
      button_.Button.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getButton, jni.JniType.objectType, [whichButton]).object);

  static final _id_getListView = jniAccessors.getMethodIDOf(
      _classRef, "getListView", "()Landroid/widget/ListView;");

  /// from: public android.widget.ListView getListView()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the list view used in the dialog.
  ///@return The ListView from the dialog.
  listview_.ListView getListView() =>
      listview_.ListView.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getListView, jni.JniType.objectType, []).object);

  static final _id_setTitle = jniAccessors.getMethodIDOf(
      _classRef, "setTitle", "(Ljava/lang/CharSequence;)V");

  /// from: public void setTitle(java.lang.CharSequence title)
  void setTitle(jni.JniObject title) => jniAccessors.callMethodWithArgs(
      reference, _id_setTitle, jni.JniType.voidType, [title.reference]).check();

  static final _id_setCustomTitle = jniAccessors.getMethodIDOf(
      _classRef, "setCustomTitle", "(Landroid/view/View;)V");

  /// from: public void setCustomTitle(android.view.View customTitleView)
  ///
  /// @see Builder\#setCustomTitle(View)
  void setCustomTitle(view_.View customTitleView) =>
      jniAccessors.callMethodWithArgs(reference, _id_setCustomTitle,
          jni.JniType.voidType, [customTitleView.reference]).check();

  static final _id_setMessage = jniAccessors.getMethodIDOf(
      _classRef, "setMessage", "(Ljava/lang/CharSequence;)V");

  /// from: public void setMessage(java.lang.CharSequence message)
  void setMessage(jni.JniObject message) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setMessage,
      jni.JniType.voidType,
      [message.reference]).check();

  static final _id_setView = jniAccessors.getMethodIDOf(
      _classRef, "setView", "(Landroid/view/View;)V");

  /// from: public void setView(android.view.View view)
  ///
  /// Set the view to display in that dialog.
  void setView(view_.View view) => jniAccessors.callMethodWithArgs(
      reference, _id_setView, jni.JniType.voidType, [view.reference]).check();

  static final _id_setView1 = jniAccessors.getMethodIDOf(
      _classRef, "setView", "(Landroid/view/View;IIII)V");

  /// from: public void setView(android.view.View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom)
  ///
  /// Set the view to display in that dialog, specifying the spacing to appear around that
  /// view.
  ///@param view The view to show in the content area of the dialog
  ///@param viewSpacingLeft Extra space to appear to the left of {@code view}
  ///@param viewSpacingTop Extra space to appear above {@code view}
  ///@param viewSpacingRight Extra space to appear to the right of {@code view}
  ///@param viewSpacingBottom Extra space to appear below {@code view}
  void setView1(view_.View view, int viewSpacingLeft, int viewSpacingTop,
          int viewSpacingRight, int viewSpacingBottom) =>
      jniAccessors
          .callMethodWithArgs(reference, _id_setView1, jni.JniType.voidType, [
        view.reference,
        viewSpacingLeft,
        viewSpacingTop,
        viewSpacingRight,
        viewSpacingBottom
      ]).check();

  static final _id_setButton = jniAccessors.getMethodIDOf(_classRef,
      "setButton", "(ILjava/lang/CharSequence;Landroid/os/Message;)V");

  /// from: public void setButton(int whichButton, java.lang.CharSequence text, android.os.Message msg)
  ///
  /// Set a message to be sent when a button is pressed.
  ///@param whichButton Which button to set the message for, can be one of
  ///            DialogInterface\#BUTTON_POSITIVE,
  ///            DialogInterface\#BUTTON_NEGATIVE, or
  ///            DialogInterface\#BUTTON_NEUTRAL
  ///@param text The text to display in positive button.
  ///@param msg The Message to be sent when clicked.
  void setButton(int whichButton, jni.JniObject text, message_.Message msg) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setButton,
          jni.JniType.voidType,
          [whichButton, text.reference, msg.reference]).check();

  static final _id_setButton1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setButton",
      "(ILjava/lang/CharSequence;Landroid/content/DialogInterface\$OnClickListener;)V");

  /// from: public void setButton(int whichButton, java.lang.CharSequence text, android.content.DialogInterface.OnClickListener listener)
  ///
  /// Set a listener to be invoked when the positive button of the dialog is pressed.
  ///@param whichButton Which button to set the listener on, can be one of
  ///            DialogInterface\#BUTTON_POSITIVE,
  ///            DialogInterface\#BUTTON_NEGATIVE, or
  ///            DialogInterface\#BUTTON_NEUTRAL
  ///@param text The text to display in positive button.
  ///@param listener The DialogInterface.OnClickListener to use.
  void setButton1(int whichButton, jni.JniObject text,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_setButton1,
          jni.JniType.voidType,
          [whichButton, text.reference, listener.reference]).check();

  static final _id_setButton2 = jniAccessors.getMethodIDOf(_classRef,
      "setButton", "(Ljava/lang/CharSequence;Landroid/os/Message;)V");

  /// from: public void setButton(java.lang.CharSequence text, android.os.Message msg)
  ///
  /// @deprecated Use \#setButton(int, CharSequence, Message) with
  ///             DialogInterface\#BUTTON_POSITIVE.
  void setButton2(jni.JniObject text, message_.Message msg) =>
      jniAccessors.callMethodWithArgs(reference, _id_setButton2,
          jni.JniType.voidType, [text.reference, msg.reference]).check();

  static final _id_setButton3 = jniAccessors.getMethodIDOf(
      _classRef,
      "setButton",
      "(Ljava/lang/CharSequence;Landroid/content/DialogInterface\$OnClickListener;)V");

  /// from: public void setButton(java.lang.CharSequence text, android.content.DialogInterface.OnClickListener listener)
  ///
  /// Set a listener to be invoked when button 1 of the dialog is pressed.
  ///@param text The text to display in button 1.
  ///@param listener The DialogInterface.OnClickListener to use.
  ///@deprecated Use
  ///             \#setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)
  ///             with DialogInterface\#BUTTON_POSITIVE
  void setButton3(jni.JniObject text,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setButton3,
          jni.JniType.voidType, [text.reference, listener.reference]).check();

  static final _id_setIcon =
      jniAccessors.getMethodIDOf(_classRef, "setIcon", "(I)V");

  /// from: public void setIcon(int resId)
  ///
  /// Set resId to 0 if you don't want an icon.
  ///@param resId the resourceId of the drawable to use as the icon or 0
  /// if you don't want an icon.
  void setIcon(int resId) => jniAccessors.callMethodWithArgs(
      reference, _id_setIcon, jni.JniType.voidType, [resId]).check();

  static final _id_setIcon1 = jniAccessors.getMethodIDOf(
      _classRef, "setIcon", "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void setIcon(android.graphics.drawable.Drawable icon)
  void setIcon1(drawable_.Drawable icon) => jniAccessors.callMethodWithArgs(
      reference, _id_setIcon1, jni.JniType.voidType, [icon.reference]).check();

  static final _id_setIconAttribute =
      jniAccessors.getMethodIDOf(_classRef, "setIconAttribute", "(I)V");

  /// from: public void setIconAttribute(int attrId)
  ///
  /// Set an icon as supplied by a theme attribute. e.g. android.R.attr.alertDialogIcon
  ///@param attrId ID of a theme attribute that points to a drawable resource.
  void setIconAttribute(int attrId) => jniAccessors.callMethodWithArgs(
      reference, _id_setIconAttribute, jni.JniType.voidType, [attrId]).check();

  static final _id_setInverseBackgroundForced = jniAccessors.getMethodIDOf(
      _classRef, "setInverseBackgroundForced", "(Z)V");

  /// from: public void setInverseBackgroundForced(boolean forceInverseBackground)
  void setInverseBackgroundForced(bool forceInverseBackground) =>
      jniAccessors.callMethodWithArgs(reference, _id_setInverseBackgroundForced,
          jni.JniType.voidType, [forceInverseBackground]).check();

  static final _id_onCreate = jniAccessors.getMethodIDOf(
      _classRef, "onCreate", "(Landroid/os/Bundle;)V");

  /// from: protected void onCreate(android.os.Bundle savedInstanceState)
  void onCreate(bundle_.Bundle savedInstanceState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCreate,
          jni.JniType.voidType, [savedInstanceState.reference]).check();

  static final _id_onKeyDown = jniAccessors.getMethodIDOf(
      _classRef, "onKeyDown", "(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyDown(int keyCode, android.view.KeyEvent event)
  bool onKeyDown(int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyDown,
          jni.JniType.booleanType, [keyCode, event.reference]).boolean;

  static final _id_onKeyUp = jniAccessors.getMethodIDOf(
      _classRef, "onKeyUp", "(ILandroid/view/KeyEvent;)Z");

  /// from: public boolean onKeyUp(int keyCode, android.view.KeyEvent event)
  bool onKeyUp(int keyCode, keyevent_.KeyEvent event) =>
      jniAccessors.callMethodWithArgs(reference, _id_onKeyUp,
          jni.JniType.booleanType, [keyCode, event.reference]).boolean;
}

/// from: android.app.AlertDialog$Builder
class AlertDialog_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/AlertDialog\$Builder");
  AlertDialog_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for an alert dialog that uses the default alert
  /// dialog theme.
  ///
  /// The default alert dialog theme is defined by
  /// android.R.attr\#alertDialogTheme within the parent
  /// {@code context}'s theme.
  ///@param context the parent context
  AlertDialog_Builder(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;I)V");

  /// from: public void <init>(android.content.Context context, int themeResId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a builder for an alert dialog that uses an explicit theme
  /// resource.
  ///
  /// The specified theme resource ({@code themeResId}) is applied on top
  /// of the parent {@code context}'s theme. It may be specified as a
  /// style resource containing a fully-populated theme, such as
  /// android.R.style\#Theme_Material_Dialog, to replace all
  /// attributes in the parent {@code context}'s theme including primary
  /// and accent colors.
  ///
  /// To preserve attributes such as primary and accent colors, the
  /// {@code themeResId} may instead be specified as an overlay theme such
  /// as android.R.style\#ThemeOverlay_Material_Dialog. This will
  /// override only the window attributes necessary to style the alert
  /// window as a dialog.
  ///
  /// Alternatively, the {@code themeResId} may be specified as {@code 0}
  /// to use the parent {@code context}'s resolved value for
  /// android.R.attr\#alertDialogTheme.
  ///@param context the parent context
  ///@param themeResId the resource ID of the theme against which to inflate
  ///                   this dialog, or {@code 0} to use the parent
  ///                   {@code context}'s default alert dialog theme
  AlertDialog_Builder.ctor1(context_.Context context, int themeResId)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, themeResId]).object);

  static final _id_getContext = jniAccessors.getMethodIDOf(
      _classRef, "getContext", "()Landroid/content/Context;");

  /// from: public android.content.Context getContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Context with the appropriate theme for dialogs created by this Builder.
  /// Applications should use this Context for obtaining LayoutInflaters for inflating views
  /// that will be used in the resulting dialogs, as it will cause views to be inflated with
  /// the correct theme.
  ///@return A Context for built Dialogs.
  context_.Context getContext() =>
      context_.Context.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getContext, jni.JniType.objectType, []).object);

  static final _id_setTitle = jniAccessors.getMethodIDOf(
      _classRef, "setTitle", "(I)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setTitle(int titleId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the title using the given resource id.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setTitle(int titleId) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setTitle, jni.JniType.objectType, [titleId]).object);

  static final _id_setTitle1 = jniAccessors.getMethodIDOf(_classRef, "setTitle",
      "(Ljava/lang/CharSequence;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setTitle(java.lang.CharSequence title)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the title displayed in the Dialog.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setTitle1(jni.JniObject title) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setTitle1, jni.JniType.objectType, [title.reference]).object);

  static final _id_setCustomTitle = jniAccessors.getMethodIDOf(
      _classRef,
      "setCustomTitle",
      "(Landroid/view/View;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setCustomTitle(android.view.View customTitleView)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the title using the custom view {@code customTitleView}.
  ///
  /// The methods \#setTitle(int) and \#setIcon(int) should
  /// be sufficient for most titles, but this is provided if the title
  /// needs more customization. Using this will replace the title and icon
  /// set via the other methods.
  ///
  /// <strong>Note:</strong> To ensure consistent styling, the custom view
  /// should be inflated or constructed using the alert dialog's themed
  /// context obtained via \#getContext().
  ///@param customTitleView the custom view to use as the title
  ///@return this Builder object to allow for chaining of calls to set
  ///         methods
  AlertDialog_Builder setCustomTitle(view_.View customTitleView) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setCustomTitle,
          jni.JniType.objectType,
          [customTitleView.reference]).object);

  static final _id_setMessage = jniAccessors.getMethodIDOf(
      _classRef, "setMessage", "(I)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setMessage(int messageId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the message to display using the given resource id.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setMessage(int messageId) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setMessage, jni.JniType.objectType, [messageId]).object);

  static final _id_setMessage1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setMessage",
      "(Ljava/lang/CharSequence;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setMessage(java.lang.CharSequence message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the message to display.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setMessage1(jni.JniObject message) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setMessage1, jni.JniType.objectType, [message.reference]).object);

  static final _id_setIcon = jniAccessors.getMethodIDOf(
      _classRef, "setIcon", "(I)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setIcon(int iconId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the resource id of the Drawable to be used in the title.
  ///
  /// Takes precedence over values set using \#setIcon(Drawable).
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setIcon(int iconId) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setIcon, jni.JniType.objectType, [iconId]).object);

  static final _id_setIcon1 = jniAccessors.getMethodIDOf(_classRef, "setIcon",
      "(Landroid/graphics/drawable/Drawable;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setIcon(android.graphics.drawable.Drawable icon)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the Drawable to be used in the title.
  ///
  /// <strong>Note:</strong> To ensure consistent styling, the drawable
  /// should be inflated or constructed using the alert dialog's themed
  /// context obtained via \#getContext().
  ///@return this Builder object to allow for chaining of calls to set
  ///         methods
  AlertDialog_Builder setIcon1(drawable_.Drawable icon) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setIcon1, jni.JniType.objectType, [icon.reference]).object);

  static final _id_setIconAttribute = jniAccessors.getMethodIDOf(
      _classRef, "setIconAttribute", "(I)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setIconAttribute(int attrId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set an icon as supplied by a theme attribute. e.g.
  /// android.R.attr\#alertDialogIcon.
  ///
  /// Takes precedence over values set using \#setIcon(int) or
  /// \#setIcon(Drawable).
  ///@param attrId ID of a theme attribute that points to a drawable resource.
  AlertDialog_Builder setIconAttribute(int attrId) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setIconAttribute, jni.JniType.objectType, [attrId]).object);

  static final _id_setPositiveButton = jniAccessors.getMethodIDOf(
      _classRef,
      "setPositiveButton",
      "(ILandroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setPositiveButton(int textId, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a listener to be invoked when the positive button of the dialog is pressed.
  ///@param textId The resource id of the text to display in the positive button
  ///@param listener The DialogInterface.OnClickListener to use.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setPositiveButton(int textId,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setPositiveButton,
          jni.JniType.objectType,
          [textId, listener.reference]).object);

  static final _id_setPositiveButton1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setPositiveButton",
      "(Ljava/lang/CharSequence;Landroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setPositiveButton(java.lang.CharSequence text, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a listener to be invoked when the positive button of the dialog is pressed.
  ///@param text The text to display in the positive button
  ///@param listener The DialogInterface.OnClickListener to use.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setPositiveButton1(jni.JniObject text,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setPositiveButton1,
          jni.JniType.objectType,
          [text.reference, listener.reference]).object);

  static final _id_setNegativeButton = jniAccessors.getMethodIDOf(
      _classRef,
      "setNegativeButton",
      "(ILandroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setNegativeButton(int textId, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a listener to be invoked when the negative button of the dialog is pressed.
  ///@param textId The resource id of the text to display in the negative button
  ///@param listener The DialogInterface.OnClickListener to use.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setNegativeButton(int textId,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setNegativeButton,
          jni.JniType.objectType,
          [textId, listener.reference]).object);

  static final _id_setNegativeButton1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setNegativeButton",
      "(Ljava/lang/CharSequence;Landroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setNegativeButton(java.lang.CharSequence text, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a listener to be invoked when the negative button of the dialog is pressed.
  ///@param text The text to display in the negative button
  ///@param listener The DialogInterface.OnClickListener to use.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setNegativeButton1(jni.JniObject text,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setNegativeButton1,
          jni.JniType.objectType,
          [text.reference, listener.reference]).object);

  static final _id_setNeutralButton = jniAccessors.getMethodIDOf(
      _classRef,
      "setNeutralButton",
      "(ILandroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setNeutralButton(int textId, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a listener to be invoked when the neutral button of the dialog is pressed.
  ///@param textId The resource id of the text to display in the neutral button
  ///@param listener The DialogInterface.OnClickListener to use.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setNeutralButton(int textId,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setNeutralButton,
          jni.JniType.objectType,
          [textId, listener.reference]).object);

  static final _id_setNeutralButton1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setNeutralButton",
      "(Ljava/lang/CharSequence;Landroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setNeutralButton(java.lang.CharSequence text, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a listener to be invoked when the neutral button of the dialog is pressed.
  ///@param text The text to display in the neutral button
  ///@param listener The DialogInterface.OnClickListener to use.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setNeutralButton1(jni.JniObject text,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setNeutralButton1,
          jni.JniType.objectType,
          [text.reference, listener.reference]).object);

  static final _id_setCancelable = jniAccessors.getMethodIDOf(
      _classRef, "setCancelable", "(Z)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setCancelable(boolean cancelable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets whether the dialog is cancelable or not.  Default is true.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setCancelable(bool cancelable) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setCancelable, jni.JniType.objectType, [cancelable]).object);

  static final _id_setOnCancelListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnCancelListener",
      "(Landroid/content/DialogInterface\$OnCancelListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setOnCancelListener(android.content.DialogInterface.OnCancelListener onCancelListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the callback that will be called if the dialog is canceled.
  ///
  /// Even in a cancelable dialog, the dialog may be dismissed for reasons other than
  /// being canceled or one of the supplied choices being selected.
  /// If you are interested in listening for all cases where the dialog is dismissed
  /// and not just when it is canceled, see
  /// \#setOnDismissListener(android.content.DialogInterface.OnDismissListener) setOnDismissListener.
  ///
  ///@see \#setCancelable(boolean)
  ///@see \#setOnDismissListener(android.content.DialogInterface.OnDismissListener)
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setOnCancelListener(
          dialoginterface_.DialogInterface_OnCancelListener onCancelListener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setOnCancelListener,
          jni.JniType.objectType,
          [onCancelListener.reference]).object);

  static final _id_setOnDismissListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnDismissListener",
      "(Landroid/content/DialogInterface\$OnDismissListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setOnDismissListener(android.content.DialogInterface.OnDismissListener onDismissListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the callback that will be called when the dialog is dismissed for any reason.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setOnDismissListener(
          dialoginterface_.DialogInterface_OnDismissListener
              onDismissListener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setOnDismissListener,
          jni.JniType.objectType,
          [onDismissListener.reference]).object);

  static final _id_setOnKeyListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnKeyListener",
      "(Landroid/content/DialogInterface\$OnKeyListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setOnKeyListener(android.content.DialogInterface.OnKeyListener onKeyListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the callback that will be called if a key is dispatched to the dialog.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setOnKeyListener(
          dialoginterface_.DialogInterface_OnKeyListener onKeyListener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setOnKeyListener,
          jni.JniType.objectType,
          [onKeyListener.reference]).object);

  static final _id_setItems = jniAccessors.getMethodIDOf(_classRef, "setItems",
      "(ILandroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setItems(int itemsId, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a list of items to be displayed in the dialog as the content, you will be notified of the
  /// selected item via the supplied listener. This should be an array type i.e. R.array.foo
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setItems(int itemsId,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setItems,
          jni.JniType.objectType,
          [itemsId, listener.reference]).object);

  static final _id_setItems1 = jniAccessors.getMethodIDOf(_classRef, "setItems",
      "([Ljava/lang/CharSequence;Landroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setItems(java.lang.CharSequence[] items, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a list of items to be displayed in the dialog as the content, you will be notified of the
  /// selected item via the supplied listener.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setItems1(jni.JniObject items,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setItems1,
          jni.JniType.objectType,
          [items.reference, listener.reference]).object);

  static final _id_setAdapter = jniAccessors.getMethodIDOf(
      _classRef,
      "setAdapter",
      "(Landroid/widget/ListAdapter;Landroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setAdapter(android.widget.ListAdapter adapter, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a list of items, which are supplied by the given ListAdapter, to be
  /// displayed in the dialog as the content, you will be notified of the
  /// selected item via the supplied listener.
  ///@param adapter The ListAdapter to supply the list of items
  ///@param listener The listener that will be called when an item is clicked.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setAdapter(listadapter_.ListAdapter adapter,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setAdapter,
          jni.JniType.objectType,
          [adapter.reference, listener.reference]).object);

  static final _id_setCursor = jniAccessors.getMethodIDOf(
      _classRef,
      "setCursor",
      "(Landroid/database/Cursor;Landroid/content/DialogInterface\$OnClickListener;Ljava/lang/String;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setCursor(android.database.Cursor cursor, android.content.DialogInterface.OnClickListener listener, java.lang.String labelColumn)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a list of items, which are supplied by the given Cursor, to be
  /// displayed in the dialog as the content, you will be notified of the
  /// selected item via the supplied listener.
  ///@param cursor The Cursor to supply the list of items
  ///@param listener The listener that will be called when an item is clicked.
  ///@param labelColumn The column name on the cursor containing the string to display
  ///          in the label.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setCursor(
          cursor_.Cursor cursor,
          dialoginterface_.DialogInterface_OnClickListener listener,
          jni.JniString labelColumn) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setCursor, jni.JniType.objectType, [
        cursor.reference,
        listener.reference,
        labelColumn.reference
      ]).object);

  static final _id_setMultiChoiceItems = jniAccessors.getMethodIDOf(
      _classRef,
      "setMultiChoiceItems",
      "(I[ZLandroid/content/DialogInterface\$OnMultiChoiceClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setMultiChoiceItems(int itemsId, boolean[] checkedItems, android.content.DialogInterface.OnMultiChoiceClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a list of items to be displayed in the dialog as the content,
  /// you will be notified of the selected item via the supplied listener.
  /// This should be an array type, e.g. R.array.foo. The list will have
  /// a check mark displayed to the right of the text for each checked
  /// item. Clicking on an item in the list will not dismiss the dialog.
  /// Clicking on a button will dismiss the dialog.
  ///@param itemsId the resource id of an array i.e. R.array.foo
  ///@param checkedItems specifies which items are checked. It should be null in which case no
  ///        items are checked. If non null it must be exactly the same length as the array of
  ///        items.
  ///@param listener notified when an item on the list is clicked. The dialog will not be
  ///        dismissed when an item is clicked. It will only be dismissed if clicked on a
  ///        button, if no buttons are supplied it's up to the user to dismiss the dialog.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setMultiChoiceItems(
          int itemsId,
          jni.JniObject checkedItems,
          dialoginterface_.DialogInterface_OnMultiChoiceClickListener
              listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setMultiChoiceItems,
          jni.JniType.objectType,
          [itemsId, checkedItems.reference, listener.reference]).object);

  static final _id_setMultiChoiceItems1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setMultiChoiceItems",
      "([Ljava/lang/CharSequence;[ZLandroid/content/DialogInterface\$OnMultiChoiceClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setMultiChoiceItems(java.lang.CharSequence[] items, boolean[] checkedItems, android.content.DialogInterface.OnMultiChoiceClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a list of items to be displayed in the dialog as the content,
  /// you will be notified of the selected item via the supplied listener.
  /// The list will have a check mark displayed to the right of the text
  /// for each checked item. Clicking on an item in the list will not
  /// dismiss the dialog. Clicking on a button will dismiss the dialog.
  ///@param items the text of the items to be displayed in the list.
  ///@param checkedItems specifies which items are checked. It should be null in which case no
  ///        items are checked. If non null it must be exactly the same length as the array of
  ///        items.
  ///@param listener notified when an item on the list is clicked. The dialog will not be
  ///        dismissed when an item is clicked. It will only be dismissed if clicked on a
  ///        button, if no buttons are supplied it's up to the user to dismiss the dialog.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setMultiChoiceItems1(
          jni.JniObject items,
          jni.JniObject checkedItems,
          dialoginterface_.DialogInterface_OnMultiChoiceClickListener
              listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setMultiChoiceItems1, jni.JniType.objectType, [
        items.reference,
        checkedItems.reference,
        listener.reference
      ]).object);

  static final _id_setMultiChoiceItems2 = jniAccessors.getMethodIDOf(
      _classRef,
      "setMultiChoiceItems",
      "(Landroid/database/Cursor;Ljava/lang/String;Ljava/lang/String;Landroid/content/DialogInterface\$OnMultiChoiceClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setMultiChoiceItems(android.database.Cursor cursor, java.lang.String isCheckedColumn, java.lang.String labelColumn, android.content.DialogInterface.OnMultiChoiceClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a list of items to be displayed in the dialog as the content,
  /// you will be notified of the selected item via the supplied listener.
  /// The list will have a check mark displayed to the right of the text
  /// for each checked item. Clicking on an item in the list will not
  /// dismiss the dialog. Clicking on a button will dismiss the dialog.
  ///@param cursor the cursor used to provide the items.
  ///@param isCheckedColumn specifies the column name on the cursor to use to determine
  ///        whether a checkbox is checked or not. It must return an integer value where 1
  ///        means checked and 0 means unchecked.
  ///@param labelColumn The column name on the cursor containing the string to display in the
  ///        label.
  ///@param listener notified when an item on the list is clicked. The dialog will not be
  ///        dismissed when an item is clicked. It will only be dismissed if clicked on a
  ///        button, if no buttons are supplied it's up to the user to dismiss the dialog.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setMultiChoiceItems2(
          cursor_.Cursor cursor,
          jni.JniString isCheckedColumn,
          jni.JniString labelColumn,
          dialoginterface_.DialogInterface_OnMultiChoiceClickListener
              listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setMultiChoiceItems2, jni.JniType.objectType, [
        cursor.reference,
        isCheckedColumn.reference,
        labelColumn.reference,
        listener.reference
      ]).object);

  static final _id_setSingleChoiceItems = jniAccessors.getMethodIDOf(
      _classRef,
      "setSingleChoiceItems",
      "(IILandroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setSingleChoiceItems(int itemsId, int checkedItem, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a list of items to be displayed in the dialog as the content, you will be notified of
  /// the selected item via the supplied listener. This should be an array type i.e.
  /// R.array.foo The list will have a check mark displayed to the right of the text for the
  /// checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a
  /// button will dismiss the dialog.
  ///@param itemsId the resource id of an array i.e. R.array.foo
  ///@param checkedItem specifies which item is checked. If -1 no items are checked.
  ///@param listener notified when an item on the list is clicked. The dialog will not be
  ///        dismissed when an item is clicked. It will only be dismissed if clicked on a
  ///        button, if no buttons are supplied it's up to the user to dismiss the dialog.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setSingleChoiceItems(int itemsId, int checkedItem,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setSingleChoiceItems,
          jni.JniType.objectType,
          [itemsId, checkedItem, listener.reference]).object);

  static final _id_setSingleChoiceItems1 = jniAccessors.getMethodIDOf(
      _classRef,
      "setSingleChoiceItems",
      "(Landroid/database/Cursor;ILjava/lang/String;Landroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setSingleChoiceItems(android.database.Cursor cursor, int checkedItem, java.lang.String labelColumn, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a list of items to be displayed in the dialog as the content, you will be notified of
  /// the selected item via the supplied listener. The list will have a check mark displayed to
  /// the right of the text for the checked item. Clicking on an item in the list will not
  /// dismiss the dialog. Clicking on a button will dismiss the dialog.
  ///@param cursor the cursor to retrieve the items from.
  ///@param checkedItem specifies which item is checked. If -1 no items are checked.
  ///@param labelColumn The column name on the cursor containing the string to display in the
  ///        label.
  ///@param listener notified when an item on the list is clicked. The dialog will not be
  ///        dismissed when an item is clicked. It will only be dismissed if clicked on a
  ///        button, if no buttons are supplied it's up to the user to dismiss the dialog.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setSingleChoiceItems1(
          cursor_.Cursor cursor,
          int checkedItem,
          jni.JniString labelColumn,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setSingleChoiceItems1, jni.JniType.objectType, [
        cursor.reference,
        checkedItem,
        labelColumn.reference,
        listener.reference
      ]).object);

  static final _id_setSingleChoiceItems2 = jniAccessors.getMethodIDOf(
      _classRef,
      "setSingleChoiceItems",
      "([Ljava/lang/CharSequence;ILandroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setSingleChoiceItems(java.lang.CharSequence[] items, int checkedItem, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a list of items to be displayed in the dialog as the content, you will be notified of
  /// the selected item via the supplied listener. The list will have a check mark displayed to
  /// the right of the text for the checked item. Clicking on an item in the list will not
  /// dismiss the dialog. Clicking on a button will dismiss the dialog.
  ///@param items the items to be displayed.
  ///@param checkedItem specifies which item is checked. If -1 no items are checked.
  ///@param listener notified when an item on the list is clicked. The dialog will not be
  ///        dismissed when an item is clicked. It will only be dismissed if clicked on a
  ///        button, if no buttons are supplied it's up to the user to dismiss the dialog.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setSingleChoiceItems2(
          jni.JniObject items,
          int checkedItem,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setSingleChoiceItems2,
          jni.JniType.objectType,
          [items.reference, checkedItem, listener.reference]).object);

  static final _id_setSingleChoiceItems3 = jniAccessors.getMethodIDOf(
      _classRef,
      "setSingleChoiceItems",
      "(Landroid/widget/ListAdapter;ILandroid/content/DialogInterface\$OnClickListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setSingleChoiceItems(android.widget.ListAdapter adapter, int checkedItem, android.content.DialogInterface.OnClickListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a list of items to be displayed in the dialog as the content, you will be notified of
  /// the selected item via the supplied listener. The list will have a check mark displayed to
  /// the right of the text for the checked item. Clicking on an item in the list will not
  /// dismiss the dialog. Clicking on a button will dismiss the dialog.
  ///@param adapter The ListAdapter to supply the list of items
  ///@param checkedItem specifies which item is checked. If -1 no items are checked.
  ///@param listener notified when an item on the list is clicked. The dialog will not be
  ///        dismissed when an item is clicked. It will only be dismissed if clicked on a
  ///        button, if no buttons are supplied it's up to the user to dismiss the dialog.
  ///@return This Builder object to allow for chaining of calls to set methods
  AlertDialog_Builder setSingleChoiceItems3(
          listadapter_.ListAdapter adapter,
          int checkedItem,
          dialoginterface_.DialogInterface_OnClickListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setSingleChoiceItems3,
          jni.JniType.objectType,
          [adapter.reference, checkedItem, listener.reference]).object);

  static final _id_setOnItemSelectedListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnItemSelectedListener",
      "(Landroid/widget/AdapterView\$OnItemSelectedListener;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a listener to be invoked when an item in the list is selected.
  ///@param listener the listener to be invoked
  ///@return this Builder object to allow for chaining of calls to set methods
  ///@see AdapterView\#setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)
  AlertDialog_Builder setOnItemSelectedListener(
          adapterview_.AdapterView_OnItemSelectedListener listener) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setOnItemSelectedListener,
          jni.JniType.objectType,
          [listener.reference]).object);

  static final _id_setView = jniAccessors.getMethodIDOf(
      _classRef, "setView", "(I)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setView(int layoutResId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a custom view resource to be the contents of the Dialog. The
  /// resource will be inflated, adding all top-level views to the screen.
  ///@param layoutResId Resource ID to be inflated.
  ///@return this Builder object to allow for chaining of calls to set
  ///         methods
  AlertDialog_Builder setView(int layoutResId) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setView, jni.JniType.objectType, [layoutResId]).object);

  static final _id_setView1 = jniAccessors.getMethodIDOf(_classRef, "setView",
      "(Landroid/view/View;)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setView(android.view.View view)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a custom view to be the contents of the alert dialog.
  ///
  /// When using a pre-Holo theme, if the supplied view is an instance of
  /// a ListView then the light background will be used.
  ///
  /// <strong>Note:</strong> To ensure consistent styling, the custom view
  /// should be inflated or constructed using the alert dialog's themed
  /// context obtained via \#getContext().
  ///@param view the view to use as the contents of the alert dialog
  ///@return this Builder object to allow for chaining of calls to set
  ///         methods
  AlertDialog_Builder setView1(view_.View view) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setView1, jni.JniType.objectType, [view.reference]).object);

  static final _id_setInverseBackgroundForced = jniAccessors.getMethodIDOf(
      _classRef,
      "setInverseBackgroundForced",
      "(Z)Landroid/app/AlertDialog\$Builder;");

  /// from: public android.app.AlertDialog.Builder setInverseBackgroundForced(boolean useInverseBackground)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the alert dialog to use the inverse background, regardless of
  /// what the contents is.
  ///@param useInverseBackground whether to use the inverse background
  ///@return this Builder object to allow for chaining of calls to set methods
  ///@deprecated This flag is only used for pre-Material themes. Instead,
  ///             specify the window background using on the alert dialog
  ///             theme.
  AlertDialog_Builder setInverseBackgroundForced(bool useInverseBackground) =>
      AlertDialog_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setInverseBackgroundForced,
          jni.JniType.objectType,
          [useInverseBackground]).object);

  static final _id_create = jniAccessors.getMethodIDOf(
      _classRef, "create", "()Landroid/app/AlertDialog;");

  /// from: public android.app.AlertDialog create()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an AlertDialog with the arguments supplied to this
  /// builder.
  ///
  /// Calling this method does not display the dialog. If no additional
  /// processing is needed, \#show() may be called instead to both
  /// create and display the dialog.
  AlertDialog create() => AlertDialog.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_create, jni.JniType.objectType, []).object);

  static final _id_show0 = jniAccessors.getMethodIDOf(
      _classRef, "show", "()Landroid/app/AlertDialog;");

  /// from: public android.app.AlertDialog show()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an AlertDialog with the arguments supplied to this
  /// builder and immediately displays the dialog.
  ///
  /// Calling this method is functionally identical to:
  /// <pre>
  ///     AlertDialog dialog = builder.create();
  ///     dialog.show();
  /// </pre>
  AlertDialog show0() => AlertDialog.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_show0, jni.JniType.objectType, []).object);
}
