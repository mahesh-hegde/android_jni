// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;

import "../content/ComponentName.dart" as componentname_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.SearchableInfo
///
/// Searchability meta-data for an activity. Only applications that search other applications
/// should need to use this class.
/// See <a href="{@docRoot}guide/topics/search/searchable-config.html">Searchable Configuration</a>
/// for more information about declaring searchability meta-data for your application.
///@see SearchManager\#getSearchableInfo(ComponentName)
///@see SearchManager\#getSearchablesInGlobalSearch()
class SearchableInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/SearchableInfo");
  SearchableInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.SearchableInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Support for parcelable and aidl operations.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Instantiates a new SearchableInfo from the data in a Parcel that was
  /// previously written with \#writeToParcel(Parcel, int).
  ///@param in The Parcel containing the previously written SearchableInfo,
  /// positioned at the location in the buffer where it was written.
  SearchableInfo(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [in0.reference]).object);

  static final _id_getSuggestAuthority = jniAccessors.getMethodIDOf(
      _classRef, "getSuggestAuthority", "()Ljava/lang/String;");

  /// from: public java.lang.String getSuggestAuthority()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the search suggestion content provider authority.
  ///@return The search suggestions authority, or {@code null} if not set.
  ///@see android.R.styleable\#Searchable_searchSuggestAuthority
  jni.JniString getSuggestAuthority() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSuggestAuthority, jni.JniType.objectType, []).object);

  static final _id_getSuggestPackage = jniAccessors.getMethodIDOf(
      _classRef, "getSuggestPackage", "()Ljava/lang/String;");

  /// from: public java.lang.String getSuggestPackage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the name of the package where the suggestion provider lives,
  /// or {@code null}.
  jni.JniString getSuggestPackage() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSuggestPackage, jni.JniType.objectType, []).object);

  static final _id_getSearchActivity = jniAccessors.getMethodIDOf(
      _classRef, "getSearchActivity", "()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getSearchActivity()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the component name of the searchable activity.
  ///@return A component name, never {@code null}.
  componentname_.ComponentName getSearchActivity() =>
      componentname_.ComponentName.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSearchActivity, jni.JniType.objectType, []).object);

  static final _id_shouldRewriteQueryFromData = jniAccessors.getMethodIDOf(
      _classRef, "shouldRewriteQueryFromData", "()Z");

  /// from: public boolean shouldRewriteQueryFromData()
  ///
  /// Checks whether the text in the query field should come from the suggestion intent data.
  ///@see android.R.styleable\#Searchable_searchMode
  bool shouldRewriteQueryFromData() => jniAccessors.callMethodWithArgs(
      reference,
      _id_shouldRewriteQueryFromData,
      jni.JniType.booleanType, []).boolean;

  static final _id_shouldRewriteQueryFromText = jniAccessors.getMethodIDOf(
      _classRef, "shouldRewriteQueryFromText", "()Z");

  /// from: public boolean shouldRewriteQueryFromText()
  ///
  /// Checks whether the text in the query field should come from the suggestion title.
  ///@see android.R.styleable\#Searchable_searchMode
  bool shouldRewriteQueryFromText() => jniAccessors.callMethodWithArgs(
      reference,
      _id_shouldRewriteQueryFromText,
      jni.JniType.booleanType, []).boolean;

  static final _id_getSettingsDescriptionId =
      jniAccessors.getMethodIDOf(_classRef, "getSettingsDescriptionId", "()I");

  /// from: public int getSettingsDescriptionId()
  ///
  /// Gets the resource id of the description string to use for this source in system search
  /// settings, or {@code 0} if none has been specified.
  ///@see android.R.styleable\#Searchable_searchSettingsDescription
  int getSettingsDescriptionId() => jniAccessors.callMethodWithArgs(
      reference, _id_getSettingsDescriptionId, jni.JniType.intType, []).integer;

  static final _id_getSuggestPath = jniAccessors.getMethodIDOf(
      _classRef, "getSuggestPath", "()Ljava/lang/String;");

  /// from: public java.lang.String getSuggestPath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the content provider path for obtaining search suggestions.
  ///@return The suggestion path, or {@code null} if not set.
  ///@see android.R.styleable\#Searchable_searchSuggestPath
  jni.JniString getSuggestPath() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSuggestPath, jni.JniType.objectType, []).object);

  static final _id_getSuggestSelection = jniAccessors.getMethodIDOf(
      _classRef, "getSuggestSelection", "()Ljava/lang/String;");

  /// from: public java.lang.String getSuggestSelection()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the selection for obtaining search suggestions.
  ///@see android.R.styleable\#Searchable_searchSuggestSelection
  jni.JniString getSuggestSelection() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSuggestSelection, jni.JniType.objectType, []).object);

  static final _id_getSuggestIntentAction = jniAccessors.getMethodIDOf(
      _classRef, "getSuggestIntentAction", "()Ljava/lang/String;");

  /// from: public java.lang.String getSuggestIntentAction()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the optional intent action for use with these suggestions. This is
  /// useful if all intents will have the same action
  /// (e.g. android.content.Intent\#ACTION_VIEW)
  ///
  /// This can be overriden in any given suggestion using the column
  /// SearchManager\#SUGGEST_COLUMN_INTENT_ACTION.
  ///@return The default intent action, or {@code null} if not set.
  ///@see android.R.styleable\#Searchable_searchSuggestIntentAction
  jni.JniString getSuggestIntentAction() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSuggestIntentAction, jni.JniType.objectType, []).object);

  static final _id_getSuggestIntentData = jniAccessors.getMethodIDOf(
      _classRef, "getSuggestIntentData", "()Ljava/lang/String;");

  /// from: public java.lang.String getSuggestIntentData()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the optional intent data for use with these suggestions.  This is
  /// useful if all intents will have similar data URIs,
  /// but you'll likely need to provide a specific ID as well via the column
  /// SearchManager\#SUGGEST_COLUMN_INTENT_DATA_ID, which will be appended to the
  /// intent data URI.
  ///
  /// This can be overriden in any given suggestion using the column
  /// SearchManager\#SUGGEST_COLUMN_INTENT_DATA.
  ///@return The default intent data, or {@code null} if not set.
  ///@see android.R.styleable\#Searchable_searchSuggestIntentData
  jni.JniString getSuggestIntentData() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSuggestIntentData, jni.JniType.objectType, []).object);

  static final _id_getSuggestThreshold =
      jniAccessors.getMethodIDOf(_classRef, "getSuggestThreshold", "()I");

  /// from: public int getSuggestThreshold()
  ///
  /// Gets the suggestion threshold.
  ///@return The suggestion threshold, or {@code 0} if not set.
  ///@see android.R.styleable\#Searchable_searchSuggestThreshold
  int getSuggestThreshold() => jniAccessors.callMethodWithArgs(
      reference, _id_getSuggestThreshold, jni.JniType.intType, []).integer;

  static final _id_getHintId =
      jniAccessors.getMethodIDOf(_classRef, "getHintId", "()I");

  /// from: public int getHintId()
  ///
  /// Gets the resource id of the hint text. This must be
  /// read using the searchable Activity's resources.
  ///@return A resource id, or {@code 0} if no hint was specified.
  ///@see android.R.styleable\#Searchable_hint
  int getHintId() => jniAccessors.callMethodWithArgs(
      reference, _id_getHintId, jni.JniType.intType, []).integer;

  static final _id_getVoiceSearchEnabled =
      jniAccessors.getMethodIDOf(_classRef, "getVoiceSearchEnabled", "()Z");

  /// from: public boolean getVoiceSearchEnabled()
  ///
  /// Checks if the searchable activity wants the voice search button to be shown.
  ///@see android.R.styleable\#Searchable_voiceSearchMode
  bool getVoiceSearchEnabled() => jniAccessors.callMethodWithArgs(reference,
      _id_getVoiceSearchEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_getVoiceSearchLaunchWebSearch = jniAccessors.getMethodIDOf(
      _classRef, "getVoiceSearchLaunchWebSearch", "()Z");

  /// from: public boolean getVoiceSearchLaunchWebSearch()
  ///
  /// Checks if voice search should start web search.
  ///@see android.R.styleable\#Searchable_voiceSearchMode
  bool getVoiceSearchLaunchWebSearch() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getVoiceSearchLaunchWebSearch,
      jni.JniType.booleanType, []).boolean;

  static final _id_getVoiceSearchLaunchRecognizer = jniAccessors.getMethodIDOf(
      _classRef, "getVoiceSearchLaunchRecognizer", "()Z");

  /// from: public boolean getVoiceSearchLaunchRecognizer()
  ///
  /// Checks if voice search should start in-app search.
  ///@see android.R.styleable\#Searchable_voiceSearchMode
  bool getVoiceSearchLaunchRecognizer() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getVoiceSearchLaunchRecognizer,
      jni.JniType.booleanType, []).boolean;

  static final _id_getVoiceLanguageModeId =
      jniAccessors.getMethodIDOf(_classRef, "getVoiceLanguageModeId", "()I");

  /// from: public int getVoiceLanguageModeId()
  ///
  /// Gets the resource id of the voice search language model string.
  ///@return A resource id, or {@code 0} if no language model was specified.
  ///@see android.R.styleable\#Searchable_voiceLanguageModel
  int getVoiceLanguageModeId() => jniAccessors.callMethodWithArgs(
      reference, _id_getVoiceLanguageModeId, jni.JniType.intType, []).integer;

  static final _id_getVoicePromptTextId =
      jniAccessors.getMethodIDOf(_classRef, "getVoicePromptTextId", "()I");

  /// from: public int getVoicePromptTextId()
  ///
  /// Gets the resource id of the voice prompt text string.
  ///@return A resource id, or {@code 0} if no voice prompt text was specified.
  ///@see android.R.styleable\#Searchable_voicePromptText
  int getVoicePromptTextId() => jniAccessors.callMethodWithArgs(
      reference, _id_getVoicePromptTextId, jni.JniType.intType, []).integer;

  static final _id_getVoiceLanguageId =
      jniAccessors.getMethodIDOf(_classRef, "getVoiceLanguageId", "()I");

  /// from: public int getVoiceLanguageId()
  ///
  /// Gets the resource id of the spoken language to recognize in voice search.
  ///@return A resource id, or {@code 0} if no language was specified.
  ///@see android.R.styleable\#Searchable_voiceLanguage
  int getVoiceLanguageId() => jniAccessors.callMethodWithArgs(
      reference, _id_getVoiceLanguageId, jni.JniType.intType, []).integer;

  static final _id_getVoiceMaxResults =
      jniAccessors.getMethodIDOf(_classRef, "getVoiceMaxResults", "()I");

  /// from: public int getVoiceMaxResults()
  ///
  /// The maximum number of voice recognition results to return.
  ///@return the max results count, if specified in the searchable
  ///         activity's metadata, or {@code 0} if not specified.
  ///@see android.R.styleable\#Searchable_voiceMaxResults
  int getVoiceMaxResults() => jniAccessors.callMethodWithArgs(
      reference, _id_getVoiceMaxResults, jni.JniType.intType, []).integer;

  static final _id_getInputType =
      jniAccessors.getMethodIDOf(_classRef, "getInputType", "()I");

  /// from: public int getInputType()
  ///
  /// Gets the input type as specified in the searchable attributes. This will default to
  /// InputType\#TYPE_CLASS_TEXT if not specified (which is appropriate
  /// for free text input).
  ///@return the input type
  ///@see android.R.styleable\#Searchable_inputType
  int getInputType() => jniAccessors.callMethodWithArgs(
      reference, _id_getInputType, jni.JniType.intType, []).integer;

  static final _id_getImeOptions =
      jniAccessors.getMethodIDOf(_classRef, "getImeOptions", "()I");

  /// from: public int getImeOptions()
  ///
  /// Gets the input method options specified in the searchable attributes.
  /// This will default to EditorInfo\#IME_ACTION_GO if not specified (which is
  /// appropriate for a search box).
  ///@return the input type
  ///@see android.R.styleable\#Searchable_imeOptions
  int getImeOptions() => jniAccessors.callMethodWithArgs(
      reference, _id_getImeOptions, jni.JniType.intType, []).integer;

  static final _id_shouldIncludeInGlobalSearch = jniAccessors.getMethodIDOf(
      _classRef, "shouldIncludeInGlobalSearch", "()Z");

  /// from: public boolean shouldIncludeInGlobalSearch()
  ///
  /// Checks whether the searchable should be included in global search.
  ///@return The value of the android.R.styleable\#Searchable_includeInGlobalSearch
  ///         attribute, or {@code false} if the attribute is not set.
  ///@see android.R.styleable\#Searchable_includeInGlobalSearch
  bool shouldIncludeInGlobalSearch() => jniAccessors.callMethodWithArgs(
      reference,
      _id_shouldIncludeInGlobalSearch,
      jni.JniType.booleanType, []).boolean;

  static final _id_queryAfterZeroResults =
      jniAccessors.getMethodIDOf(_classRef, "queryAfterZeroResults", "()Z");

  /// from: public boolean queryAfterZeroResults()
  ///
  /// Checks whether this searchable activity should be queried for suggestions if a prefix
  /// of the query has returned no results.
  ///@see android.R.styleable\#Searchable_queryAfterZeroResults
  bool queryAfterZeroResults() => jniAccessors.callMethodWithArgs(reference,
      _id_queryAfterZeroResults, jni.JniType.booleanType, []).boolean;

  static final _id_autoUrlDetect =
      jniAccessors.getMethodIDOf(_classRef, "autoUrlDetect", "()Z");

  /// from: public boolean autoUrlDetect()
  ///
  /// Checks whether this searchable activity has auto URL detection turned on.
  ///@see android.R.styleable\#Searchable_autoUrlDetect
  bool autoUrlDetect() => jniAccessors.callMethodWithArgs(
      reference, _id_autoUrlDetect, jni.JniType.booleanType, []).boolean;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
