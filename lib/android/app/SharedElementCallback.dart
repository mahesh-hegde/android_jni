// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../view/View.dart" as view_;

import "../graphics/Matrix.dart" as matrix_;

import "../graphics/RectF.dart" as rectf_;

import "../content/Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.SharedElementCallback
///
/// Listener provided in
/// Activity\#setEnterSharedElementCallback(SharedElementCallback) and
/// Activity\#setExitSharedElementCallback(SharedElementCallback) as well as
/// Fragment\#setEnterSharedElementCallback(SharedElementCallback) and
/// Fragment\#setExitSharedElementCallback(SharedElementCallback)
/// to monitor the Shared element transitions. The events can be used to customize Activity
/// and Fragment Transition behavior.
class SharedElementCallback extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/SharedElementCallback");
  SharedElementCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SharedElementCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onSharedElementStart = jniAccessors.getMethodIDOf(
      _classRef,
      "onSharedElementStart",
      "(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V");

  /// from: public void onSharedElementStart(java.util.List<java.lang.String> sharedElementNames, java.util.List<android.view.View> sharedElements, java.util.List<android.view.View> sharedElementSnapshots)
  ///
  /// In Activity Transitions, onSharedElementStart is called immediately before
  /// capturing the start of the shared element state on enter and reenter transitions and
  /// immediately before capturing the end of the shared element state for exit and return
  /// transitions.
  ///
  /// In Fragment Transitions, onSharedElementStart is called immediately before capturing the
  /// start state of all shared element transitions.
  ///
  /// This call can be used to adjust the transition start state by modifying the shared
  /// element Views. Note that no layout step will be executed between onSharedElementStart
  /// and the transition state capture.
  ///
  /// For Activity Transitions, any changes made in \#onSharedElementEnd(List, List, List)
  /// that are not updated during by layout should be corrected in onSharedElementStart for exit and
  /// return transitions. For example, rotation or scale will not be affected by layout and
  /// if changed in \#onSharedElementEnd(List, List, List), it will also have to be reset
  /// in onSharedElementStart again to correct the end state.
  ///@param sharedElementNames The names of the shared elements that were accepted into
  ///                           the View hierarchy.
  ///@param sharedElements The shared elements that are part of the View hierarchy.
  ///@param sharedElementSnapshots The Views containing snap shots of the shared element
  ///                               from the launching Window. These elements will not
  ///                               be part of the scene, but will be positioned relative
  ///                               to the Window decor View. This list is null for Fragment
  ///                               Transitions.
  void onSharedElementStart(jni.JniObject sharedElementNames,
          jni.JniObject sharedElements, jni.JniObject sharedElementSnapshots) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onSharedElementStart, jni.JniType.voidType, [
        sharedElementNames.reference,
        sharedElements.reference,
        sharedElementSnapshots.reference
      ]).check();

  static final _id_onSharedElementEnd = jniAccessors.getMethodIDOf(
      _classRef,
      "onSharedElementEnd",
      "(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V");

  /// from: public void onSharedElementEnd(java.util.List<java.lang.String> sharedElementNames, java.util.List<android.view.View> sharedElements, java.util.List<android.view.View> sharedElementSnapshots)
  ///
  /// In Activity Transitions, onSharedElementEnd is called immediately before
  /// capturing the end of the shared element state on enter and reenter transitions and
  /// immediately before capturing the start of the shared element state for exit and return
  /// transitions.
  ///
  /// In Fragment Transitions, onSharedElementEnd is called immediately before capturing the
  /// end state of all shared element transitions.
  ///
  /// This call can be used to adjust the transition end state by modifying the shared
  /// element Views. Note that no layout step will be executed between onSharedElementEnd
  /// and the transition state capture.
  ///
  /// Any changes made in \#onSharedElementStart(List, List, List) that are not updated
  /// during layout should be corrected in onSharedElementEnd. For example, rotation or scale
  /// will not be affected by layout and if changed in
  /// \#onSharedElementStart(List, List, List), it will also have to be reset in
  /// onSharedElementEnd again to correct the end state.
  ///@param sharedElementNames The names of the shared elements that were accepted into
  ///                           the View hierarchy.
  ///@param sharedElements The shared elements that are part of the View hierarchy.
  ///@param sharedElementSnapshots The Views containing snap shots of the shared element
  ///                               from the launching Window. These elements will not
  ///                               be part of the scene, but will be positioned relative
  ///                               to the Window decor View. This list will be null for
  ///                               Fragment Transitions.
  void onSharedElementEnd(jni.JniObject sharedElementNames,
          jni.JniObject sharedElements, jni.JniObject sharedElementSnapshots) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onSharedElementEnd, jni.JniType.voidType, [
        sharedElementNames.reference,
        sharedElements.reference,
        sharedElementSnapshots.reference
      ]).check();

  static final _id_onRejectSharedElements = jniAccessors.getMethodIDOf(
      _classRef, "onRejectSharedElements", "(Ljava/util/List;)V");

  /// from: public void onRejectSharedElements(java.util.List<android.view.View> rejectedSharedElements)
  ///
  /// Called after \#onMapSharedElements(java.util.List, java.util.Map) when
  /// transferring shared elements in. Any shared elements that have no mapping will be in
  /// <var>rejectedSharedElements</var>. The elements remaining in
  /// <var>rejectedSharedElements</var> will be transitioned out of the Scene. If a
  /// View is removed from <var>rejectedSharedElements</var>, it must be handled by the
  /// <code>SharedElementCallback</code>.
  ///
  /// Views in rejectedSharedElements will have their position and size set to the
  /// position of the calling shared element, relative to the Window decor View and contain
  /// snapshots of the View from the calling Activity or Fragment. This
  /// view may be safely added to the decor View's overlay to remain in position.
  ///
  ///
  /// This method is not called for Fragment Transitions. All rejected shared elements
  /// will be handled by the exit transition.
  ///
  ///@param rejectedSharedElements Views containing visual information of shared elements
  ///                               that are not part of the entering scene. These Views
  ///                               are positioned relative to the Window decor View. A
  ///                               View removed from this list will not be transitioned
  ///                               automatically.
  void onRejectSharedElements(jni.JniObject rejectedSharedElements) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRejectSharedElements,
          jni.JniType.voidType, [rejectedSharedElements.reference]).check();

  static final _id_onMapSharedElements = jniAccessors.getMethodIDOf(
      _classRef, "onMapSharedElements", "(Ljava/util/List;Ljava/util/Map;)V");

  /// from: public void onMapSharedElements(java.util.List<java.lang.String> names, java.util.Map<java.lang.String,android.view.View> sharedElements)
  ///
  /// Lets the SharedElementCallback adjust the mapping of shared element names to
  /// Views.
  ///@param names The names of all shared elements transferred from the calling Activity
  ///              or Fragment in the order they were provided.
  ///@param sharedElements The mapping of shared element names to Views. The best guess
  ///                       will be filled into sharedElements based on the transitionNames.
  void onMapSharedElements(jni.JniObject names, jni.JniObject sharedElements) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onMapSharedElements,
          jni.JniType.voidType,
          [names.reference, sharedElements.reference]).check();

  static final _id_onCaptureSharedElementSnapshot = jniAccessors.getMethodIDOf(
      _classRef,
      "onCaptureSharedElementSnapshot",
      "(Landroid/view/View;Landroid/graphics/Matrix;Landroid/graphics/RectF;)Landroid/os/Parcelable;");

  /// from: public android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View sharedElement, android.graphics.Matrix viewToGlobalMatrix, android.graphics.RectF screenBounds)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a snapshot of a shared element to be used by the remote Activity and reconstituted
  /// with \#onCreateSnapshotView(android.content.Context, android.os.Parcelable). A
  /// null return value will mean that the remote Activity will have a null snapshot View in
  /// \#onSharedElementStart(java.util.List, java.util.List, java.util.List) and
  /// \#onSharedElementEnd(java.util.List, java.util.List, java.util.List).
  ///
  /// This is not called for Fragment Transitions.
  ///
  ///@param sharedElement The shared element View to create a snapshot for.
  ///@param viewToGlobalMatrix A matrix containing a transform from the view to the screen
  ///                           coordinates.
  ///@param screenBounds The bounds of shared element in screen coordinate space. This is
  ///                     the bounds of the view with the viewToGlobalMatrix applied.
  ///@return A snapshot to send to the remote Activity to be reconstituted with
  /// \#onCreateSnapshotView(android.content.Context, android.os.Parcelable) and passed
  /// into \#onSharedElementStart(java.util.List, java.util.List, java.util.List) and
  /// \#onSharedElementEnd(java.util.List, java.util.List, java.util.List).
  parcelable_.Parcelable onCaptureSharedElementSnapshot(
          view_.View sharedElement,
          matrix_.Matrix viewToGlobalMatrix,
          rectf_.RectF screenBounds) =>
      parcelable_.Parcelable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onCaptureSharedElementSnapshot, jni.JniType.objectType, [
        sharedElement.reference,
        viewToGlobalMatrix.reference,
        screenBounds.reference
      ]).object);

  static final _id_onCreateSnapshotView = jniAccessors.getMethodIDOf(
      _classRef,
      "onCreateSnapshotView",
      "(Landroid/content/Context;Landroid/os/Parcelable;)Landroid/view/View;");

  /// from: public android.view.View onCreateSnapshotView(android.content.Context context, android.os.Parcelable snapshot)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Reconstitutes a snapshot View from a Parcelable returned in
  /// \#onCaptureSharedElementSnapshot(android.view.View, android.graphics.Matrix,
  /// android.graphics.RectF) to be used in \#onSharedElementStart(java.util.List,
  /// java.util.List, java.util.List) and \#onSharedElementEnd(java.util.List,
  /// java.util.List, java.util.List). The returned View will be sized and positioned after
  /// this call so that it is ready to be added to the decor View's overlay.
  ///
  /// This is not called for Fragment Transitions.
  ///
  ///@param context The Context used to create the snapshot View.
  ///@param snapshot The Parcelable returned by \#onCaptureSharedElementSnapshot(
  /// android.view.View, android.graphics.Matrix, android.graphics.RectF).
  ///@return A View to be sent in \#onSharedElementStart(java.util.List, java.util.List,
  /// java.util.List) and \#onSharedElementEnd(java.util.List, java.util.List,
  /// java.util.List). A null value will produce a null snapshot value for those two methods.
  view_.View onCreateSnapshotView(
          context_.Context context, parcelable_.Parcelable snapshot) =>
      view_.View.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_onCreateSnapshotView,
          jni.JniType.objectType,
          [context.reference, snapshot.reference]).object);

  static final _id_onSharedElementsArrived = jniAccessors.getMethodIDOf(
      _classRef,
      "onSharedElementsArrived",
      "(Ljava/util/List;Ljava/util/List;Landroid/app/SharedElementCallback\$OnSharedElementsReadyListener;)V");

  /// from: public void onSharedElementsArrived(java.util.List<java.lang.String> sharedElementNames, java.util.List<android.view.View> sharedElements, android.app.SharedElementCallback.OnSharedElementsReadyListener listener)
  ///
  /// Called during an Activity Transition when the shared elements have arrived at the
  /// final location and are ready to be transferred. This method is called for both the
  /// source and destination Activities.
  ///
  /// When the shared elements are ready to be transferred,
  /// OnSharedElementsReadyListener\#onSharedElementsReady()
  /// must be called to trigger the transfer.
  ///
  /// The default behavior is to trigger the transfer immediately.
  ///@param sharedElementNames The names of the shared elements that are being transferred..
  ///@param sharedElements The shared elements that are part of the View hierarchy.
  ///@param listener The listener to call when the shared elements are ready to be hidden
  ///                 in the source Activity or shown in the destination Activity.
  void onSharedElementsArrived(
          jni.JniObject sharedElementNames,
          jni.JniObject sharedElements,
          SharedElementCallback_OnSharedElementsReadyListener listener) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onSharedElementsArrived, jni.JniType.voidType, [
        sharedElementNames.reference,
        sharedElements.reference,
        listener.reference
      ]).check();
}

/// from: android.app.SharedElementCallback$OnSharedElementsReadyListener
///
/// Listener to be called after SharedElementCallback\#onSharedElementsArrived(List, List, OnSharedElementsReadyListener)
/// when the shared elements are ready to be hidden in the source Activity and shown in the
/// destination Activity.
class SharedElementCallback_OnSharedElementsReadyListener
    extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/app/SharedElementCallback\$OnSharedElementsReadyListener");
  SharedElementCallback_OnSharedElementsReadyListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onSharedElementsReady =
      jniAccessors.getMethodIDOf(_classRef, "onSharedElementsReady", "()V");

  /// from: public abstract void onSharedElementsReady()
  ///
  /// Call this method during or after the OnSharedElementsReadyListener has been received
  /// in SharedElementCallback\#onSharedElementsArrived(List, List,
  /// OnSharedElementsReadyListener) to indicate that the shared elements are ready to be
  /// hidden in the source and shown in the destination Activity.
  void onSharedElementsReady() => jniAccessors.callMethodWithArgs(
      reference, _id_onSharedElementsReady, jni.JniType.voidType, []).check();
}
