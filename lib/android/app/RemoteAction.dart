// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../graphics/drawable/Icon.dart" as icon_;

import "PendingIntent.dart" as pendingintent_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.RemoteAction
///
/// Represents a remote action that can be called from another process.  The action can have an
/// associated visualization including metadata like an icon or title.
class RemoteAction extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/app/RemoteAction");
  RemoteAction.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.RemoteAction> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/graphics/drawable/Icon;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/app/PendingIntent;)V");

  /// from: public void <init>(android.graphics.drawable.Icon icon, java.lang.CharSequence title, java.lang.CharSequence contentDescription, android.app.PendingIntent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param icon This value must never be {@code null}.
  ///@param title This value must never be {@code null}.
  ///@param contentDescription This value must never be {@code null}.
  ///@param intent This value must never be {@code null}.
  RemoteAction(icon_.Icon icon, jni.JniObject title,
      jni.JniObject contentDescription, pendingintent_.PendingIntent intent)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          icon.reference,
          title.reference,
          contentDescription.reference,
          intent.reference
        ]).object);

  static final _id_setEnabled =
      jniAccessors.getMethodIDOf(_classRef, "setEnabled", "(Z)V");

  /// from: public void setEnabled(boolean enabled)
  ///
  /// Sets whether this action is enabled.
  void setEnabled(bool enabled) => jniAccessors.callMethodWithArgs(
      reference, _id_setEnabled, jni.JniType.voidType, [enabled]).check();

  static final _id_isEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isEnabled", "()Z");

  /// from: public boolean isEnabled()
  ///
  /// Return whether this action is enabled.
  bool isEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_isEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_setShouldShowIcon =
      jniAccessors.getMethodIDOf(_classRef, "setShouldShowIcon", "(Z)V");

  /// from: public void setShouldShowIcon(boolean shouldShowIcon)
  ///
  /// Sets whether the icon should be shown.
  void setShouldShowIcon(bool shouldShowIcon) =>
      jniAccessors.callMethodWithArgs(reference, _id_setShouldShowIcon,
          jni.JniType.voidType, [shouldShowIcon]).check();

  static final _id_shouldShowIcon =
      jniAccessors.getMethodIDOf(_classRef, "shouldShowIcon", "()Z");

  /// from: public boolean shouldShowIcon()
  ///
  /// Return whether the icon should be shown.
  bool shouldShowIcon() => jniAccessors.callMethodWithArgs(
      reference, _id_shouldShowIcon, jni.JniType.booleanType, []).boolean;

  static final _id_getIcon = jniAccessors.getMethodIDOf(
      _classRef, "getIcon", "()Landroid/graphics/drawable/Icon;");

  /// from: public android.graphics.drawable.Icon getIcon()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an icon representing the action.
  ///@return This value will never be {@code null}.
  icon_.Icon getIcon() => icon_.Icon.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getIcon, jni.JniType.objectType, []).object);

  static final _id_getTitle = jniAccessors.getMethodIDOf(
      _classRef, "getTitle", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getTitle()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an title representing the action.
  ///@return This value will never be {@code null}.
  jni.JniObject getTitle() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTitle, jni.JniType.objectType, []).object);

  static final _id_getContentDescription = jniAccessors.getMethodIDOf(
      _classRef, "getContentDescription", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getContentDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a content description representing the action.
  ///@return This value will never be {@code null}.
  jni.JniObject getContentDescription() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getContentDescription, jni.JniType.objectType, []).object);

  static final _id_getActionIntent = jniAccessors.getMethodIDOf(
      _classRef, "getActionIntent", "()Landroid/app/PendingIntent;");

  /// from: public android.app.PendingIntent getActionIntent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the action intent.
  ///@return This value will never be {@code null}.
  pendingintent_.PendingIntent getActionIntent() =>
      pendingintent_.PendingIntent.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getActionIntent, jni.JniType.objectType, []).object);

  static final _id_clone = jniAccessors.getMethodIDOf(
      _classRef, "clone", "()Landroid/app/RemoteAction;");

  /// from: public android.app.RemoteAction clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RemoteAction clone() => RemoteAction.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_dump = jniAccessors.getMethodIDOf(
      _classRef, "dump", "(Ljava/lang/String;Ljava/io/PrintWriter;)V");

  /// from: public void dump(java.lang.String prefix, java.io.PrintWriter pw)
  void dump(jni.JniString prefix, jni.JniObject pw) =>
      jniAccessors.callMethodWithArgs(reference, _id_dump, jni.JniType.voidType,
          [prefix.reference, pw.reference]).check();
}
