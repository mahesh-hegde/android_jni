// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../content/Context.dart" as context_;

import "../content/pm/ResolveInfo.dart" as resolveinfo_;

import "../content/pm/ServiceInfo.dart" as serviceinfo_;

import "../content/ComponentName.dart" as componentname_;

import "../content/pm/PackageManager.dart" as packagemanager_;

import "../graphics/drawable/Drawable.dart" as drawable_;

import "../net/Uri.dart" as uri_;

import "../util/Printer.dart" as printer_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.WallpaperInfo
///
/// This class is used to specify meta information of a wallpaper service.
class WallpaperInfo extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/app/WallpaperInfo");
  WallpaperInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.WallpaperInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to make this class parcelable.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/content/pm/ResolveInfo;)V");

  /// from: public void <init>(android.content.Context context, android.content.pm.ResolveInfo service)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param context The Context in which we are parsing the wallpaper.
  ///@param service The ResolveInfo returned from the package manager about
  /// this wallpaper's component.
  WallpaperInfo(context_.Context context, resolveinfo_.ResolveInfo service)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [context.reference, service.reference]).object);

  static final _id_getPackageName = jniAccessors.getMethodIDOf(
      _classRef, "getPackageName", "()Ljava/lang/String;");

  /// from: public java.lang.String getPackageName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the .apk package that implements this wallpaper.
  jni.JniString getPackageName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPackageName, jni.JniType.objectType, []).object);

  static final _id_getServiceName = jniAccessors.getMethodIDOf(
      _classRef, "getServiceName", "()Ljava/lang/String;");

  /// from: public java.lang.String getServiceName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the class name of the service component that implements
  /// this wallpaper.
  jni.JniString getServiceName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getServiceName, jni.JniType.objectType, []).object);

  static final _id_getServiceInfo = jniAccessors.getMethodIDOf(
      _classRef, "getServiceInfo", "()Landroid/content/pm/ServiceInfo;");

  /// from: public android.content.pm.ServiceInfo getServiceInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the raw information about the Service implementing this
  /// wallpaper.  Do not modify the returned object.
  serviceinfo_.ServiceInfo getServiceInfo() =>
      serviceinfo_.ServiceInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getServiceInfo, jni.JniType.objectType, []).object);

  static final _id_getComponent = jniAccessors.getMethodIDOf(
      _classRef, "getComponent", "()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getComponent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the component of the service that implements this wallpaper.
  componentname_.ComponentName getComponent() =>
      componentname_.ComponentName.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getComponent, jni.JniType.objectType, []).object);

  static final _id_loadLabel = jniAccessors.getMethodIDOf(
      _classRef,
      "loadLabel",
      "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadLabel(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Load the user-displayed label for this wallpaper.
  ///@param pm Supply a PackageManager used to load the wallpaper's
  /// resources.
  jni.JniObject loadLabel(packagemanager_.PackageManager pm) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadLabel, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadIcon = jniAccessors.getMethodIDOf(_classRef, "loadIcon",
      "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Load the user-displayed icon for this wallpaper.
  ///@param pm Supply a PackageManager used to load the wallpaper's
  /// resources.
  drawable_.Drawable loadIcon(packagemanager_.PackageManager pm) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadIcon, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadThumbnail = jniAccessors.getMethodIDOf(
      _classRef,
      "loadThumbnail",
      "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadThumbnail(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Load the thumbnail image for this wallpaper.
  ///@param pm Supply a PackageManager used to load the wallpaper's
  /// resources.
  drawable_.Drawable loadThumbnail(packagemanager_.PackageManager pm) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadThumbnail, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadAuthor = jniAccessors.getMethodIDOf(
      _classRef,
      "loadAuthor",
      "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadAuthor(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a string indicating the author(s) of this wallpaper.
  jni.JniObject loadAuthor(packagemanager_.PackageManager pm) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadAuthor, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadDescription = jniAccessors.getMethodIDOf(
      _classRef,
      "loadDescription",
      "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadDescription(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a brief summary of this wallpaper's behavior.
  jni.JniObject loadDescription(packagemanager_.PackageManager pm) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadDescription, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadContextUri = jniAccessors.getMethodIDOf(
      _classRef,
      "loadContextUri",
      "(Landroid/content/pm/PackageManager;)Landroid/net/Uri;");

  /// from: public android.net.Uri loadContextUri(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an URI that specifies a link for further context about this wallpaper.
  ///@param pm An instance of PackageManager to retrieve the URI.
  ///@return The URI.
  uri_.Uri loadContextUri(packagemanager_.PackageManager pm) =>
      uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadContextUri, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadContextDescription = jniAccessors.getMethodIDOf(
      _classRef,
      "loadContextDescription",
      "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadContextDescription(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieves a title of the URI that specifies a link for further context about this wallpaper.
  ///@param pm An instance of PackageManager to retrieve the title.
  ///@return The title.
  jni.JniObject loadContextDescription(packagemanager_.PackageManager pm) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_loadContextDescription,
          jni.JniType.objectType,
          [pm.reference]).object);

  static final _id_getShowMetadataInPreview =
      jniAccessors.getMethodIDOf(_classRef, "getShowMetadataInPreview", "()Z");

  /// from: public boolean getShowMetadataInPreview()
  ///
  /// Queries whether any metadata should be shown when previewing the wallpaper. If this value is
  /// set to true, any component that shows a preview of this live wallpaper should also show
  /// accompanying information like \#loadLabel,
  /// \#loadDescription, \#loadAuthor and
  /// \#loadContextDescription(PackageManager), so the user gets to know further information
  /// about this wallpaper.
  ///@return Whether any metadata should be shown when previewing the wallpaper.
  bool getShowMetadataInPreview() => jniAccessors.callMethodWithArgs(reference,
      _id_getShowMetadataInPreview, jni.JniType.booleanType, []).boolean;

  static final _id_getSettingsActivity = jniAccessors.getMethodIDOf(
      _classRef, "getSettingsActivity", "()Ljava/lang/String;");

  /// from: public java.lang.String getSettingsActivity()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the class name of an activity that provides a settings UI for
  /// the wallpaper.  You can launch this activity be starting it with
  /// an android.content.Intent whose action is MAIN and with an
  /// explicit android.content.ComponentName
  /// composed of \#getPackageName and the class name returned here.
  ///
  /// A null will be returned if there is no settings activity associated
  /// with the wallpaper.
  jni.JniString getSettingsActivity() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSettingsActivity, jni.JniType.objectType, []).object);

  static final _id_dump = jniAccessors.getMethodIDOf(
      _classRef, "dump", "(Landroid/util/Printer;Ljava/lang/String;)V");

  /// from: public void dump(android.util.Printer pw, java.lang.String prefix)
  void dump(printer_.Printer pw, jni.JniString prefix) =>
      jniAccessors.callMethodWithArgs(reference, _id_dump, jni.JniType.voidType,
          [pw.reference, prefix.reference]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
