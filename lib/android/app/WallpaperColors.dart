// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;

import "../graphics/Color.dart" as color_;

import "../graphics/drawable/Drawable.dart" as drawable_;

import "../graphics/Bitmap.dart" as bitmap_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.WallpaperColors
///
/// Provides information about the colors of a wallpaper.
///
/// Exposes the 3 most visually representative colors of a wallpaper. Can be either
/// WallpaperColors\#getPrimaryColor(), WallpaperColors\#getSecondaryColor()
/// or WallpaperColors\#getTertiaryColor().
class WallpaperColors extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/WallpaperColors");
  WallpaperColors.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.WallpaperColors> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: public void <init>(android.os.Parcel parcel)
  /// The returned object must be deleted after use, by calling the `delete` method.
  WallpaperColors(parcel_.Parcel parcel)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [parcel.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/graphics/Color;Landroid/graphics/Color;Landroid/graphics/Color;)V");

  /// from: public void <init>(android.graphics.Color primaryColor, android.graphics.Color secondaryColor, android.graphics.Color tertiaryColor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new object from three colors.
  ///@param primaryColor Primary color.
  /// This value must never be {@code null}.
  ///@param secondaryColor Secondary color.
  /// This value may be {@code null}.
  ///@param tertiaryColor Tertiary color.
  /// This value may be {@code null}.
  ///@see WallpaperColors\#fromBitmap(Bitmap)
  ///@see WallpaperColors\#fromDrawable(Drawable)
  WallpaperColors.ctor1(color_.Color primaryColor, color_.Color secondaryColor,
      color_.Color tertiaryColor)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          primaryColor.reference,
          secondaryColor.reference,
          tertiaryColor.reference
        ]).object);

  static final _id_fromDrawable = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "fromDrawable",
      "(Landroid/graphics/drawable/Drawable;)Landroid/app/WallpaperColors;");

  /// from: static public android.app.WallpaperColors fromDrawable(android.graphics.drawable.Drawable drawable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs WallpaperColors from a drawable.
  ///
  /// Main colors will be extracted from the drawable.
  ///@param drawable Source where to extract from.
  static WallpaperColors fromDrawable(drawable_.Drawable drawable) =>
      WallpaperColors.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_fromDrawable,
          jni.JniType.objectType,
          [drawable.reference]).object);

  static final _id_fromBitmap = jniAccessors.getStaticMethodIDOf(_classRef,
      "fromBitmap", "(Landroid/graphics/Bitmap;)Landroid/app/WallpaperColors;");

  /// from: static public android.app.WallpaperColors fromBitmap(android.graphics.Bitmap bitmap)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs WallpaperColors from a bitmap.
  ///
  /// Main colors will be extracted from the bitmap.
  ///@param bitmap Source where to extract from.
  ///
  /// This value must never be {@code null}.
  static WallpaperColors fromBitmap(bitmap_.Bitmap bitmap) =>
      WallpaperColors.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_fromBitmap, jni.JniType.objectType, [bitmap.reference]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_getPrimaryColor = jniAccessors.getMethodIDOf(
      _classRef, "getPrimaryColor", "()Landroid/graphics/Color;");

  /// from: public android.graphics.Color getPrimaryColor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the most visually representative color of the wallpaper.
  /// "Visually representative" means easily noticeable in the image,
  /// probably happening at high frequency.
  ///@return A color.
  ///
  /// This value will never be {@code null}.
  color_.Color getPrimaryColor() =>
      color_.Color.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPrimaryColor, jni.JniType.objectType, []).object);

  static final _id_getSecondaryColor = jniAccessors.getMethodIDOf(
      _classRef, "getSecondaryColor", "()Landroid/graphics/Color;");

  /// from: public android.graphics.Color getSecondaryColor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the second most preeminent color of the wallpaper. Can be null.
  ///@return A color, may be null.
  color_.Color getSecondaryColor() =>
      color_.Color.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSecondaryColor, jni.JniType.objectType, []).object);

  static final _id_getTertiaryColor = jniAccessors.getMethodIDOf(
      _classRef, "getTertiaryColor", "()Landroid/graphics/Color;");

  /// from: public android.graphics.Color getTertiaryColor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the third most preeminent color of the wallpaper. Can be null.
  ///@return A color, may be null.
  color_.Color getTertiaryColor() =>
      color_.Color.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTertiaryColor, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
