// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AlertDialog.dart" as alertdialog_;

import "../content/Context.dart" as context_;

import "../widget/DatePicker.dart" as datepicker_;

import "../content/DialogInterface.dart" as dialoginterface_;

import "../os/Bundle.dart" as bundle_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.DatePickerDialog
///
/// A simple dialog containing an android.widget.DatePicker.
///
/// See the <a href="{@docRoot}guide/topics/ui/controls/pickers.html">Pickers</a>
/// guide.
class DatePickerDialog extends alertdialog_.AlertDialog {
  static final _classRef =
      jniAccessors.getClassOf("android/app/DatePickerDialog");
  DatePickerDialog.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new date picker dialog for the current date using the parent
  /// context's default date picker dialog theme.
  ///@param context the parent context
  ///
  /// This value must never be {@code null}.
  DatePickerDialog(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;I)V");

  /// from: public void <init>(android.content.Context context, int themeResId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new date picker dialog for the current date.
  ///@param context the parent context
  /// This value must never be {@code null}.
  ///@param themeResId the resource ID of the theme against which to inflate
  ///                   this dialog, or {@code 0} to use the parent
  ///                   {@code context}'s default alert dialog theme
  DatePickerDialog.ctor1(context_.Context context, int themeResId)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, themeResId]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/app/DatePickerDialog\$OnDateSetListener;III)V");

  /// from: public void <init>(android.content.Context context, android.app.DatePickerDialog.OnDateSetListener listener, int year, int month, int dayOfMonth)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new date picker dialog for the specified date using the parent
  /// context's default date picker dialog theme.
  ///@param context the parent context
  /// This value must never be {@code null}.
  ///@param listener the listener to call when the user sets the date
  /// This value may be {@code null}.
  ///@param year the initially selected year
  ///@param month the initially selected month (0-11 for compatibility with
  ///              Calendar\#MONTH)
  ///@param dayOfMonth the initially selected day of month (1-31, depending
  ///                   on month)
  DatePickerDialog.ctor3(
      context_.Context context,
      DatePickerDialog_OnDateSetListener listener,
      int year,
      int month,
      int dayOfMonth)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor3, [
          context.reference,
          listener.reference,
          year,
          month,
          dayOfMonth
        ]).object);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;ILandroid/app/DatePickerDialog\$OnDateSetListener;III)V");

  /// from: public void <init>(android.content.Context context, int themeResId, android.app.DatePickerDialog.OnDateSetListener listener, int year, int monthOfYear, int dayOfMonth)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new date picker dialog for the specified date.
  ///@param context the parent context
  /// This value must never be {@code null}.
  ///@param themeResId the resource ID of the theme against which to inflate
  ///                   this dialog, or {@code 0} to use the parent
  ///                   {@code context}'s default alert dialog theme
  ///@param listener the listener to call when the user sets the date
  /// This value may be {@code null}.
  ///@param year the initially selected year
  ///@param monthOfYear the initially selected month of the year (0-11 for
  ///                    compatibility with Calendar\#MONTH)
  ///@param dayOfMonth the initially selected day of month (1-31, depending
  ///                   on month)
  DatePickerDialog.ctor4(
      context_.Context context,
      int themeResId,
      DatePickerDialog_OnDateSetListener listener,
      int year,
      int monthOfYear,
      int dayOfMonth)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor4, [
          context.reference,
          themeResId,
          listener.reference,
          year,
          monthOfYear,
          dayOfMonth
        ]).object);

  static final _id_onDateChanged = jniAccessors.getMethodIDOf(
      _classRef, "onDateChanged", "(Landroid/widget/DatePicker;III)V");

  /// from: public void onDateChanged(android.widget.DatePicker view, int year, int month, int dayOfMonth)
  ///
  /// @param view This value must never be {@code null}.
  void onDateChanged(
          datepicker_.DatePicker view, int year, int month, int dayOfMonth) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onDateChanged,
          jni.JniType.voidType,
          [view.reference, year, month, dayOfMonth]).check();

  static final _id_setOnDateSetListener = jniAccessors.getMethodIDOf(
      _classRef,
      "setOnDateSetListener",
      "(Landroid/app/DatePickerDialog\$OnDateSetListener;)V");

  /// from: public void setOnDateSetListener(android.app.DatePickerDialog.OnDateSetListener listener)
  ///
  /// Sets the listener to call when the user sets the date.
  ///@param listener the listener to call when the user sets the date
  ///
  /// This value may be {@code null}.
  void setOnDateSetListener(DatePickerDialog_OnDateSetListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setOnDateSetListener,
          jni.JniType.voidType, [listener.reference]).check();

  static final _id_onClick = jniAccessors.getMethodIDOf(
      _classRef, "onClick", "(Landroid/content/DialogInterface;I)V");

  /// from: public void onClick(android.content.DialogInterface dialog, int which)
  ///
  /// @param dialog This value must never be {@code null}.
  void onClick(dialoginterface_.DialogInterface dialog, int which) =>
      jniAccessors.callMethodWithArgs(reference, _id_onClick,
          jni.JniType.voidType, [dialog.reference, which]).check();

  static final _id_getDatePicker = jniAccessors.getMethodIDOf(
      _classRef, "getDatePicker", "()Landroid/widget/DatePicker;");

  /// from: public android.widget.DatePicker getDatePicker()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the DatePicker contained in this dialog.
  ///@return the date picker
  ///
  /// This value will never be {@code null}.
  datepicker_.DatePicker getDatePicker() =>
      datepicker_.DatePicker.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDatePicker, jni.JniType.objectType, []).object);

  static final _id_updateDate =
      jniAccessors.getMethodIDOf(_classRef, "updateDate", "(III)V");

  /// from: public void updateDate(int year, int month, int dayOfMonth)
  ///
  /// Sets the current date.
  ///@param year the year
  ///@param month the month (0-11 for compatibility with
  ///              Calendar\#MONTH)
  ///@param dayOfMonth the day of month (1-31, depending on month)
  void updateDate(int year, int month, int dayOfMonth) =>
      jniAccessors.callMethodWithArgs(reference, _id_updateDate,
          jni.JniType.voidType, [year, month, dayOfMonth]).check();

  static final _id_onSaveInstanceState1 = jniAccessors.getMethodIDOf(
      _classRef, "onSaveInstanceState", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle onSaveInstanceState()
  /// The returned object must be deleted after use, by calling the `delete` method.
  bundle_.Bundle onSaveInstanceState1() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onSaveInstanceState1, jni.JniType.objectType, []).object);

  static final _id_onRestoreInstanceState1 = jniAccessors.getMethodIDOf(
      _classRef, "onRestoreInstanceState", "(Landroid/os/Bundle;)V");

  /// from: public void onRestoreInstanceState(android.os.Bundle savedInstanceState)
  void onRestoreInstanceState1(bundle_.Bundle savedInstanceState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRestoreInstanceState1,
          jni.JniType.voidType, [savedInstanceState.reference]).check();
}

/// from: android.app.DatePickerDialog$OnDateSetListener
///
/// The listener used to indicate the user has finished selecting a date.
class DatePickerDialog_OnDateSetListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/app/DatePickerDialog\$OnDateSetListener");
  DatePickerDialog_OnDateSetListener.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_onDateSet = jniAccessors.getMethodIDOf(
      _classRef, "onDateSet", "(Landroid/widget/DatePicker;III)V");

  /// from: public abstract void onDateSet(android.widget.DatePicker view, int year, int month, int dayOfMonth)
  ///
  /// @param view the picker associated with the dialog
  ///@param year the selected year
  ///@param month the selected month (0-11 for compatibility with
  ///              Calendar\#MONTH)
  ///@param dayOfMonth th selected day of the month (1-31, depending on
  ///                   month)
  void onDateSet(
          datepicker_.DatePicker view, int year, int month, int dayOfMonth) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onDateSet,
          jni.JniType.voidType,
          [view.reference, year, month, dayOfMonth]).check();
}
