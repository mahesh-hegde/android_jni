// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "AlertDialog.dart" as alertdialog_;

import "../content/Context.dart" as context_;

import "../content/DialogInterface.dart" as dialoginterface_;

import "../os/Bundle.dart" as bundle_;

import "../graphics/drawable/Drawable.dart" as drawable_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.ProgressDialog
///
/// A dialog showing a progress indicator and an optional text message or view.
/// Only a text message or a view can be used at the same time.
///
/// The dialog can be made cancelable on back key press.
///
///
/// The progress range is 0 to \#getMax() max.
///
///@deprecated <code>ProgressDialog</code> is a modal dialog, which prevents the
/// user from interacting with the app. Instead of using this class, you should
/// use a progress indicator like android.widget.ProgressBar, which can
/// be embedded in your app's UI. Alternatively, you can use a
/// <a href="/guide/topics/ui/notifiers/notifications.html">notification</a>
/// to inform the user of the task's progress.
class ProgressDialog extends alertdialog_.AlertDialog {
  static final _classRef =
      jniAccessors.getClassOf("android/app/ProgressDialog");
  ProgressDialog.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int STYLE_HORIZONTAL
  ///
  /// Creates a ProgressDialog with a horizontal progress bar.
  static const STYLE_HORIZONTAL = 1;

  /// from: static public final int STYLE_SPINNER
  ///
  /// Creates a ProgressDialog with a circular, spinning progress
  /// bar. This is the default.
  static const STYLE_SPINNER = 0;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a Progress dialog.
  ///@param context the parent context
  ProgressDialog(context_.Context context)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;I)V");

  /// from: public void <init>(android.content.Context context, int theme)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a Progress dialog.
  ///@param context the parent context
  ///@param theme the resource ID of the theme against which to inflate
  ///              this dialog, or {@code 0} to use the parent
  ///              {@code context}'s default alert dialog theme
  ProgressDialog.ctor1(context_.Context context, int theme)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, theme]).object);

  static final _id_show1 = jniAccessors.getStaticMethodIDOf(_classRef, "show",
      "(Landroid/content/Context;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Landroid/app/ProgressDialog;");

  /// from: static public android.app.ProgressDialog show(android.content.Context context, java.lang.CharSequence title, java.lang.CharSequence message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates and shows a ProgressDialog.
  ///@param context the parent context
  ///@param title the title text for the dialog's window
  ///@param message the text to be displayed in the dialog
  ///@return the ProgressDialog
  static ProgressDialog show1(context_.Context context, jni.JniObject title,
          jni.JniObject message) =>
      ProgressDialog.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_show1,
          jni.JniType.objectType,
          [context.reference, title.reference, message.reference]).object);

  static final _id_show2 = jniAccessors.getStaticMethodIDOf(_classRef, "show",
      "(Landroid/content/Context;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Z)Landroid/app/ProgressDialog;");

  /// from: static public android.app.ProgressDialog show(android.content.Context context, java.lang.CharSequence title, java.lang.CharSequence message, boolean indeterminate)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates and shows a ProgressDialog.
  ///@param context the parent context
  ///@param title the title text for the dialog's window
  ///@param message the text to be displayed in the dialog
  ///@param indeterminate true if the dialog should be \#setIndeterminate(boolean) indeterminate, false otherwise
  ///@return the ProgressDialog
  static ProgressDialog show2(context_.Context context, jni.JniObject title,
          jni.JniObject message, bool indeterminate) =>
      ProgressDialog.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_show2, jni.JniType.objectType, [
        context.reference,
        title.reference,
        message.reference,
        indeterminate
      ]).object);

  static final _id_show3 = jniAccessors.getStaticMethodIDOf(_classRef, "show",
      "(Landroid/content/Context;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ZZ)Landroid/app/ProgressDialog;");

  /// from: static public android.app.ProgressDialog show(android.content.Context context, java.lang.CharSequence title, java.lang.CharSequence message, boolean indeterminate, boolean cancelable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates and shows a ProgressDialog.
  ///@param context the parent context
  ///@param title the title text for the dialog's window
  ///@param message the text to be displayed in the dialog
  ///@param indeterminate true if the dialog should be \#setIndeterminate(boolean) indeterminate, false otherwise
  ///@param cancelable true if the dialog is \#setCancelable(boolean) cancelable,
  ///        false otherwise
  ///@return the ProgressDialog
  static ProgressDialog show3(context_.Context context, jni.JniObject title,
          jni.JniObject message, bool indeterminate, bool cancelable) =>
      ProgressDialog.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_show3, jni.JniType.objectType, [
        context.reference,
        title.reference,
        message.reference,
        indeterminate,
        cancelable
      ]).object);

  static final _id_show4 = jniAccessors.getStaticMethodIDOf(_classRef, "show",
      "(Landroid/content/Context;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ZZLandroid/content/DialogInterface\$OnCancelListener;)Landroid/app/ProgressDialog;");

  /// from: static public android.app.ProgressDialog show(android.content.Context context, java.lang.CharSequence title, java.lang.CharSequence message, boolean indeterminate, boolean cancelable, android.content.DialogInterface.OnCancelListener cancelListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates and shows a ProgressDialog.
  ///@param context the parent context
  ///@param title the title text for the dialog's window
  ///@param message the text to be displayed in the dialog
  ///@param indeterminate true if the dialog should be \#setIndeterminate(boolean) indeterminate, false otherwise
  ///@param cancelable true if the dialog is \#setCancelable(boolean) cancelable,
  ///        false otherwise
  ///@param cancelListener the \#setOnCancelListener(OnCancelListener) listener
  ///        to be invoked when the dialog is canceled
  ///@return the ProgressDialog
  static ProgressDialog show4(
          context_.Context context,
          jni.JniObject title,
          jni.JniObject message,
          bool indeterminate,
          bool cancelable,
          dialoginterface_.DialogInterface_OnCancelListener cancelListener) =>
      ProgressDialog.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_show4, jni.JniType.objectType, [
        context.reference,
        title.reference,
        message.reference,
        indeterminate,
        cancelable,
        cancelListener.reference
      ]).object);

  static final _id_onCreate = jniAccessors.getMethodIDOf(
      _classRef, "onCreate", "(Landroid/os/Bundle;)V");

  /// from: protected void onCreate(android.os.Bundle savedInstanceState)
  void onCreate(bundle_.Bundle savedInstanceState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCreate,
          jni.JniType.voidType, [savedInstanceState.reference]).check();

  static final _id_onStart1 =
      jniAccessors.getMethodIDOf(_classRef, "onStart", "()V");

  /// from: public void onStart()
  void onStart1() => jniAccessors.callMethodWithArgs(
      reference, _id_onStart1, jni.JniType.voidType, []).check();

  static final _id_onStop1 =
      jniAccessors.getMethodIDOf(_classRef, "onStop", "()V");

  /// from: protected void onStop()
  void onStop1() => jniAccessors.callMethodWithArgs(
      reference, _id_onStop1, jni.JniType.voidType, []).check();

  static final _id_setProgress =
      jniAccessors.getMethodIDOf(_classRef, "setProgress", "(I)V");

  /// from: public void setProgress(int value)
  ///
  /// Sets the current progress.
  ///@param value the current progress, a value between 0 and \#getMax()
  ///@see ProgressBar\#setProgress(int)
  void setProgress(int value) => jniAccessors.callMethodWithArgs(
      reference, _id_setProgress, jni.JniType.voidType, [value]).check();

  static final _id_setSecondaryProgress =
      jniAccessors.getMethodIDOf(_classRef, "setSecondaryProgress", "(I)V");

  /// from: public void setSecondaryProgress(int secondaryProgress)
  ///
  /// Sets the secondary progress.
  ///@param secondaryProgress the current secondary progress, a value between 0 and
  /// \#getMax()
  ///@see ProgressBar\#setSecondaryProgress(int)
  void setSecondaryProgress(int secondaryProgress) =>
      jniAccessors.callMethodWithArgs(reference, _id_setSecondaryProgress,
          jni.JniType.voidType, [secondaryProgress]).check();

  static final _id_getProgress =
      jniAccessors.getMethodIDOf(_classRef, "getProgress", "()I");

  /// from: public int getProgress()
  ///
  /// Gets the current progress.
  ///@return the current progress, a value between 0 and \#getMax()
  int getProgress() => jniAccessors.callMethodWithArgs(
      reference, _id_getProgress, jni.JniType.intType, []).integer;

  static final _id_getSecondaryProgress =
      jniAccessors.getMethodIDOf(_classRef, "getSecondaryProgress", "()I");

  /// from: public int getSecondaryProgress()
  ///
  /// Gets the current secondary progress.
  ///@return the current secondary progress, a value between 0 and \#getMax()
  int getSecondaryProgress() => jniAccessors.callMethodWithArgs(
      reference, _id_getSecondaryProgress, jni.JniType.intType, []).integer;

  static final _id_getMax =
      jniAccessors.getMethodIDOf(_classRef, "getMax", "()I");

  /// from: public int getMax()
  ///
  /// Gets the maximum allowed progress value. The default value is 100.
  ///@return the maximum value
  int getMax() => jniAccessors.callMethodWithArgs(
      reference, _id_getMax, jni.JniType.intType, []).integer;

  static final _id_setMax =
      jniAccessors.getMethodIDOf(_classRef, "setMax", "(I)V");

  /// from: public void setMax(int max)
  ///
  /// Sets the maximum allowed progress value.
  void setMax(int max) => jniAccessors.callMethodWithArgs(
      reference, _id_setMax, jni.JniType.voidType, [max]).check();

  static final _id_incrementProgressBy =
      jniAccessors.getMethodIDOf(_classRef, "incrementProgressBy", "(I)V");

  /// from: public void incrementProgressBy(int diff)
  ///
  /// Increments the current progress value.
  ///@param diff the amount by which the current progress will be incremented,
  /// up to \#getMax()
  void incrementProgressBy(int diff) => jniAccessors.callMethodWithArgs(
      reference, _id_incrementProgressBy, jni.JniType.voidType, [diff]).check();

  static final _id_incrementSecondaryProgressBy = jniAccessors.getMethodIDOf(
      _classRef, "incrementSecondaryProgressBy", "(I)V");

  /// from: public void incrementSecondaryProgressBy(int diff)
  ///
  /// Increments the current secondary progress value.
  ///@param diff the amount by which the current secondary progress will be incremented,
  /// up to \#getMax()
  void incrementSecondaryProgressBy(int diff) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_incrementSecondaryProgressBy,
          jni.JniType.voidType,
          [diff]).check();

  static final _id_setProgressDrawable = jniAccessors.getMethodIDOf(_classRef,
      "setProgressDrawable", "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void setProgressDrawable(android.graphics.drawable.Drawable d)
  ///
  /// Sets the drawable to be used to display the progress value.
  ///@param d the drawable to be used
  ///@see ProgressBar\#setProgressDrawable(Drawable)
  void setProgressDrawable(drawable_.Drawable d) =>
      jniAccessors.callMethodWithArgs(reference, _id_setProgressDrawable,
          jni.JniType.voidType, [d.reference]).check();

  static final _id_setIndeterminateDrawable = jniAccessors.getMethodIDOf(
      _classRef,
      "setIndeterminateDrawable",
      "(Landroid/graphics/drawable/Drawable;)V");

  /// from: public void setIndeterminateDrawable(android.graphics.drawable.Drawable d)
  ///
  /// Sets the drawable to be used to display the indeterminate progress value.
  ///@param d the drawable to be used
  ///@see ProgressBar\#setProgressDrawable(Drawable)
  ///@see \#setIndeterminate(boolean)
  void setIndeterminateDrawable(drawable_.Drawable d) =>
      jniAccessors.callMethodWithArgs(reference, _id_setIndeterminateDrawable,
          jni.JniType.voidType, [d.reference]).check();

  static final _id_setIndeterminate =
      jniAccessors.getMethodIDOf(_classRef, "setIndeterminate", "(Z)V");

  /// from: public void setIndeterminate(boolean indeterminate)
  ///
  /// Change the indeterminate mode for this ProgressDialog. In indeterminate
  /// mode, the progress is ignored and the dialog shows an infinite
  /// animation instead.
  ///
  /// <strong>Note:</strong> A ProgressDialog with style \#STYLE_SPINNER
  /// is always indeterminate and will ignore this setting.
  ///
  ///@param indeterminate true to enable indeterminate mode, false otherwise
  ///@see \#setProgressStyle(int)
  void setIndeterminate(bool indeterminate) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setIndeterminate,
      jni.JniType.voidType,
      [indeterminate]).check();

  static final _id_isIndeterminate =
      jniAccessors.getMethodIDOf(_classRef, "isIndeterminate", "()Z");

  /// from: public boolean isIndeterminate()
  ///
  /// Whether this ProgressDialog is in indeterminate mode.
  ///@return true if the dialog is in indeterminate mode, false otherwise
  bool isIndeterminate() => jniAccessors.callMethodWithArgs(
      reference, _id_isIndeterminate, jni.JniType.booleanType, []).boolean;

  static final _id_setMessage = jniAccessors.getMethodIDOf(
      _classRef, "setMessage", "(Ljava/lang/CharSequence;)V");

  /// from: public void setMessage(java.lang.CharSequence message)
  void setMessage(jni.JniObject message) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setMessage,
      jni.JniType.voidType,
      [message.reference]).check();

  static final _id_setProgressStyle =
      jniAccessors.getMethodIDOf(_classRef, "setProgressStyle", "(I)V");

  /// from: public void setProgressStyle(int style)
  ///
  /// Sets the style of this ProgressDialog, either \#STYLE_SPINNER or
  /// \#STYLE_HORIZONTAL. The default is \#STYLE_SPINNER.
  ///
  /// <strong>Note:</strong> A ProgressDialog with style \#STYLE_SPINNER
  /// is always indeterminate and will ignore the \#setIndeterminate(boolean) indeterminate setting.
  ///
  ///@param style the style of this ProgressDialog, either \#STYLE_SPINNER or
  /// \#STYLE_HORIZONTAL
  void setProgressStyle(int style) => jniAccessors.callMethodWithArgs(
      reference, _id_setProgressStyle, jni.JniType.voidType, [style]).check();

  static final _id_setProgressNumberFormat = jniAccessors.getMethodIDOf(
      _classRef, "setProgressNumberFormat", "(Ljava/lang/String;)V");

  /// from: public void setProgressNumberFormat(java.lang.String format)
  ///
  /// Change the format of the small text showing current and maximum units
  /// of progress.  The default is "%1d/%2d".
  /// Should not be called during the number is progressing.
  ///@param format A string passed to String\#format String.format();
  /// use "%1d" for the current number and "%2d" for the maximum.  If null,
  /// nothing will be shown.
  void setProgressNumberFormat(jni.JniString format) =>
      jniAccessors.callMethodWithArgs(reference, _id_setProgressNumberFormat,
          jni.JniType.voidType, [format.reference]).check();

  static final _id_setProgressPercentFormat = jniAccessors.getMethodIDOf(
      _classRef, "setProgressPercentFormat", "(Ljava/text/NumberFormat;)V");

  /// from: public void setProgressPercentFormat(java.text.NumberFormat format)
  ///
  /// Change the format of the small text showing the percentage of progress.
  /// The default is
  /// NumberFormat\#getPercentInstance() NumberFormat.getPercentageInstnace().
  /// Should not be called during the number is progressing.
  ///@param format An instance of a NumberFormat to generate the
  /// percentage text.  If null, nothing will be shown.
  void setProgressPercentFormat(jni.JniObject format) =>
      jniAccessors.callMethodWithArgs(reference, _id_setProgressPercentFormat,
          jni.JniType.voidType, [format.reference]).check();
}
