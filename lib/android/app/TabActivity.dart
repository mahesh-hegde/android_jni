// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ActivityGroup.dart" as activitygroup_;

import "../os/Bundle.dart" as bundle_;

import "Activity.dart" as activity_;

import "../widget/TabHost.dart" as tabhost_;

import "../widget/TabWidget.dart" as tabwidget_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.TabActivity
///
/// For apps developing against android.os.Build.VERSION_CODES\#HONEYCOMB
/// or later, tabs are typically presented in the UI using the new
/// ActionBar\#newTab() ActionBar.newTab() and
/// related APIs for placing tabs within their action bar area.
///
///@deprecated New applications should use Fragments instead of this class;
/// to continue to run on older devices, you can use the v4 support library
/// which provides a version of the Fragment API that is compatible down to
/// android.os.Build.VERSION_CODES\#DONUT.
class TabActivity extends activitygroup_.ActivityGroup {
  static final _classRef = jniAccessors.getClassOf("android/app/TabActivity");
  TabActivity.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  TabActivity.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_setDefaultTab = jniAccessors.getMethodIDOf(
      _classRef, "setDefaultTab", "(Ljava/lang/String;)V");

  /// from: public void setDefaultTab(java.lang.String tag)
  ///
  /// Sets the default tab that is the first tab highlighted.
  ///@param tag the name of the default tab
  void setDefaultTab(jni.JniString tag) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setDefaultTab,
      jni.JniType.voidType,
      [tag.reference]).check();

  static final _id_setDefaultTab1 =
      jniAccessors.getMethodIDOf(_classRef, "setDefaultTab", "(I)V");

  /// from: public void setDefaultTab(int index)
  ///
  /// Sets the default tab that is the first tab highlighted.
  ///@param index the index of the default tab
  void setDefaultTab1(int index) => jniAccessors.callMethodWithArgs(
      reference, _id_setDefaultTab1, jni.JniType.voidType, [index]).check();

  static final _id_onRestoreInstanceState2 = jniAccessors.getMethodIDOf(
      _classRef, "onRestoreInstanceState", "(Landroid/os/Bundle;)V");

  /// from: protected void onRestoreInstanceState(android.os.Bundle state)
  void onRestoreInstanceState2(bundle_.Bundle state) =>
      jniAccessors.callMethodWithArgs(reference, _id_onRestoreInstanceState2,
          jni.JniType.voidType, [state.reference]).check();

  static final _id_onPostCreate2 = jniAccessors.getMethodIDOf(
      _classRef, "onPostCreate", "(Landroid/os/Bundle;)V");

  /// from: protected void onPostCreate(android.os.Bundle icicle)
  void onPostCreate2(bundle_.Bundle icicle) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onPostCreate2,
      jni.JniType.voidType,
      [icicle.reference]).check();

  static final _id_onSaveInstanceState = jniAccessors.getMethodIDOf(
      _classRef, "onSaveInstanceState", "(Landroid/os/Bundle;)V");

  /// from: protected void onSaveInstanceState(android.os.Bundle outState)
  void onSaveInstanceState(bundle_.Bundle outState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSaveInstanceState,
          jni.JniType.voidType, [outState.reference]).check();

  static final _id_onContentChanged1 =
      jniAccessors.getMethodIDOf(_classRef, "onContentChanged", "()V");

  /// from: public void onContentChanged()
  ///
  /// Updates the screen state (current list and other views) when the
  /// content changes.
  ///@see Activity\#onContentChanged()
  void onContentChanged1() => jniAccessors.callMethodWithArgs(
      reference, _id_onContentChanged1, jni.JniType.voidType, []).check();

  static final _id_onChildTitleChanged1 = jniAccessors.getMethodIDOf(
      _classRef,
      "onChildTitleChanged",
      "(Landroid/app/Activity;Ljava/lang/CharSequence;)V");

  /// from: protected void onChildTitleChanged(android.app.Activity childActivity, java.lang.CharSequence title)
  void onChildTitleChanged1(
          activity_.Activity childActivity, jni.JniObject title) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onChildTitleChanged1,
          jni.JniType.voidType,
          [childActivity.reference, title.reference]).check();

  static final _id_getTabHost = jniAccessors.getMethodIDOf(
      _classRef, "getTabHost", "()Landroid/widget/TabHost;");

  /// from: public android.widget.TabHost getTabHost()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the TabHost the activity is using to host its tabs.
  ///@return the TabHost the activity is using to host its tabs.
  tabhost_.TabHost getTabHost() =>
      tabhost_.TabHost.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTabHost, jni.JniType.objectType, []).object);

  static final _id_getTabWidget = jniAccessors.getMethodIDOf(
      _classRef, "getTabWidget", "()Landroid/widget/TabWidget;");

  /// from: public android.widget.TabWidget getTabWidget()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the TabWidget the activity is using to draw the actual tabs.
  ///@return the TabWidget the activity is using to draw the actual tabs.
  tabwidget_.TabWidget getTabWidget() =>
      tabwidget_.TabWidget.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTabWidget, jni.JniType.objectType, []).object);
}
