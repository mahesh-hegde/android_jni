// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ListActivity.dart" as listactivity_;

import "../os/Bundle.dart" as bundle_;

import "../widget/ListView.dart" as listview_;

import "../view/View.dart" as view_;

import "../content/Intent.dart" as intent_;

import "../graphics/drawable/Drawable.dart" as drawable_;

import "../content/pm/ResolveInfo.dart" as resolveinfo_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.LauncherActivity
///
/// Displays a list of all activities which can be performed
/// for a given intent. Launches when clicked.
class LauncherActivity extends listactivity_.ListActivity {
  static final _classRef =
      jniAccessors.getClassOf("android/app/LauncherActivity");
  LauncherActivity.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  LauncherActivity.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_onCreate2 = jniAccessors.getMethodIDOf(
      _classRef, "onCreate", "(Landroid/os/Bundle;)V");

  /// from: protected void onCreate(android.os.Bundle icicle)
  void onCreate2(bundle_.Bundle icicle) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onCreate2,
      jni.JniType.voidType,
      [icicle.reference]).check();

  static final _id_setTitle2 = jniAccessors.getMethodIDOf(
      _classRef, "setTitle", "(Ljava/lang/CharSequence;)V");

  /// from: public void setTitle(java.lang.CharSequence title)
  void setTitle2(jni.JniObject title) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setTitle2,
      jni.JniType.voidType,
      [title.reference]).check();

  static final _id_setTitle3 =
      jniAccessors.getMethodIDOf(_classRef, "setTitle", "(I)V");

  /// from: public void setTitle(int titleId)
  void setTitle3(int titleId) => jniAccessors.callMethodWithArgs(
      reference, _id_setTitle3, jni.JniType.voidType, [titleId]).check();

  static final _id_onSetContentView =
      jniAccessors.getMethodIDOf(_classRef, "onSetContentView", "()V");

  /// from: protected void onSetContentView()
  ///
  /// Override to call setContentView() with your own content view to
  /// customize the list layout.
  void onSetContentView() => jniAccessors.callMethodWithArgs(
      reference, _id_onSetContentView, jni.JniType.voidType, []).check();

  static final _id_onListItemClick = jniAccessors.getMethodIDOf(_classRef,
      "onListItemClick", "(Landroid/widget/ListView;Landroid/view/View;IJ)V");

  /// from: protected void onListItemClick(android.widget.ListView l, android.view.View v, int position, long id)
  void onListItemClick(
          listview_.ListView l, view_.View v, int position, int id) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onListItemClick,
          jni.JniType.voidType,
          [l.reference, v.reference, position, id]).check();

  static final _id_intentForPosition = jniAccessors.getMethodIDOf(
      _classRef, "intentForPosition", "(I)Landroid/content/Intent;");

  /// from: protected android.content.Intent intentForPosition(int position)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the actual Intent for a specific position in our
  /// android.widget.ListView.
  ///@param position The item whose Intent to return
  intent_.Intent intentForPosition(int position) =>
      intent_.Intent.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_intentForPosition, jni.JniType.objectType, [position]).object);

  static final _id_itemForPosition = jniAccessors.getMethodIDOf(_classRef,
      "itemForPosition", "(I)Landroid/app/LauncherActivity\$ListItem;");

  /// from: protected android.app.LauncherActivity.ListItem itemForPosition(int position)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the ListItem for a specific position in our
  /// android.widget.ListView.
  ///@param position The item to return
  LauncherActivity_ListItem itemForPosition(int position) =>
      LauncherActivity_ListItem.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_itemForPosition,
          jni.JniType.objectType,
          [position]).object);

  static final _id_getTargetIntent = jniAccessors.getMethodIDOf(
      _classRef, "getTargetIntent", "()Landroid/content/Intent;");

  /// from: protected android.content.Intent getTargetIntent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the base intent to use when running
  /// PackageManager\#queryIntentActivities(Intent, int).
  intent_.Intent getTargetIntent() =>
      intent_.Intent.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTargetIntent, jni.JniType.objectType, []).object);

  static final _id_onQueryPackageManager = jniAccessors.getMethodIDOf(_classRef,
      "onQueryPackageManager", "(Landroid/content/Intent;)Ljava/util/List;");

  /// from: protected java.util.List<android.content.pm.ResolveInfo> onQueryPackageManager(android.content.Intent queryIntent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Perform query on package manager for list items.  The default
  /// implementation queries for activities.
  jni.JniObject onQueryPackageManager(intent_.Intent queryIntent) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_onQueryPackageManager,
          jni.JniType.objectType,
          [queryIntent.reference]).object);

  static final _id_makeListItems = jniAccessors.getMethodIDOf(
      _classRef, "makeListItems", "()Ljava/util/List;");

  /// from: public java.util.List<android.app.LauncherActivity.ListItem> makeListItems()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Perform the query to determine which results to show and return a list of them.
  jni.JniObject makeListItems() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_makeListItems, jni.JniType.objectType, []).object);
}

/// from: android.app.LauncherActivity$ListItem
///
/// An item in the list
class LauncherActivity_ListItem extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/LauncherActivity\$ListItem");
  LauncherActivity_ListItem.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_className =
      jniAccessors.getFieldIDOf(_classRef, "className", "Ljava/lang/String;");

  /// from: public java.lang.String className
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString get className => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_className, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String className
  /// The returned object must be deleted after use, by calling the `delete` method.
  set className(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_className, value.reference);

  static final _id_extras =
      jniAccessors.getFieldIDOf(_classRef, "extras", "Landroid/os/Bundle;");

  /// from: public android.os.Bundle extras
  /// The returned object must be deleted after use, by calling the `delete` method.
  bundle_.Bundle get extras => bundle_.Bundle.fromRef(jniAccessors
      .getField(reference, _id_extras, jni.JniType.objectType)
      .object);

  /// from: public android.os.Bundle extras
  /// The returned object must be deleted after use, by calling the `delete` method.
  set extras(bundle_.Bundle value) =>
      jniEnv.SetObjectField(reference, _id_extras, value.reference);

  static final _id_icon = jniAccessors.getFieldIDOf(
      _classRef, "icon", "Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable icon
  /// The returned object must be deleted after use, by calling the `delete` method.
  drawable_.Drawable get icon => drawable_.Drawable.fromRef(jniAccessors
      .getField(reference, _id_icon, jni.JniType.objectType)
      .object);

  /// from: public android.graphics.drawable.Drawable icon
  /// The returned object must be deleted after use, by calling the `delete` method.
  set icon(drawable_.Drawable value) =>
      jniEnv.SetObjectField(reference, _id_icon, value.reference);

  static final _id_label =
      jniAccessors.getFieldIDOf(_classRef, "label", "Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence label
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject get label => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_label, jni.JniType.objectType)
      .object);

  /// from: public java.lang.CharSequence label
  /// The returned object must be deleted after use, by calling the `delete` method.
  set label(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_label, value.reference);

  static final _id_packageName =
      jniAccessors.getFieldIDOf(_classRef, "packageName", "Ljava/lang/String;");

  /// from: public java.lang.String packageName
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString get packageName => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_packageName, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String packageName
  /// The returned object must be deleted after use, by calling the `delete` method.
  set packageName(jni.JniString value) =>
      jniEnv.SetObjectField(reference, _id_packageName, value.reference);

  static final _id_resolveInfo = jniAccessors.getFieldIDOf(
      _classRef, "resolveInfo", "Landroid/content/pm/ResolveInfo;");

  /// from: public android.content.pm.ResolveInfo resolveInfo
  /// The returned object must be deleted after use, by calling the `delete` method.
  resolveinfo_.ResolveInfo get resolveInfo =>
      resolveinfo_.ResolveInfo.fromRef(jniAccessors
          .getField(reference, _id_resolveInfo, jni.JniType.objectType)
          .object);

  /// from: public android.content.pm.ResolveInfo resolveInfo
  /// The returned object must be deleted after use, by calling the `delete` method.
  set resolveInfo(resolveinfo_.ResolveInfo value) =>
      jniEnv.SetObjectField(reference, _id_resolveInfo, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  LauncherActivity_ListItem()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.app.LauncherActivity$IconResizer
///
/// Utility class to resize icons to match default icon size.
class LauncherActivity_IconResizer extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/LauncherActivity\$IconResizer");
  LauncherActivity_IconResizer.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  LauncherActivity_IconResizer()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_createIconThumbnail = jniAccessors.getMethodIDOf(
      _classRef,
      "createIconThumbnail",
      "(Landroid/graphics/drawable/Drawable;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable createIconThumbnail(android.graphics.drawable.Drawable icon)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Drawable representing the thumbnail of the specified Drawable.
  /// The size of the thumbnail is defined by the dimension
  /// android.R.dimen.launcher_application_icon_size.
  ///
  /// This method is not thread-safe and should be invoked on the UI thread only.
  ///@param icon The icon to get a thumbnail of.
  ///@return A thumbnail for the specified icon or the icon itself if the
  ///         thumbnail could not be created.
  drawable_.Drawable createIconThumbnail(drawable_.Drawable icon) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createIconThumbnail,
          jni.JniType.objectType,
          [icon.reference]).object);
}
