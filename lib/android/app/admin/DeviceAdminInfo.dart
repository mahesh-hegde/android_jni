// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../content/Context.dart" as context_;

import "../../content/pm/ResolveInfo.dart" as resolveinfo_;

import "../../content/pm/ActivityInfo.dart" as activityinfo_;

import "../../content/ComponentName.dart" as componentname_;

import "../../content/pm/PackageManager.dart" as packagemanager_;

import "../../graphics/drawable/Drawable.dart" as drawable_;

import "../../util/Printer.dart" as printer_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.admin.DeviceAdminInfo
///
/// This class is used to specify meta information of a device administrator
/// component.
class DeviceAdminInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/admin/DeviceAdminInfo");
  DeviceAdminInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.admin.DeviceAdminInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Used to make this class parcelable.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int USES_ENCRYPTED_STORAGE
  ///
  /// A type of policy that this device admin can use: require encryption of stored data.
  ///
  /// To control this policy, the device admin must have a "encrypted-storage"
  /// tag in the "uses-policies" section of its meta-data.
  static const USES_ENCRYPTED_STORAGE = 7;

  /// from: static public final int USES_POLICY_DISABLE_CAMERA
  ///
  /// A type of policy that this device admin can use: disables use of all device cameras.
  ///
  /// To control this policy, the device admin must have a "disable-camera"
  /// tag in the "uses-policies" section of its meta-data.
  ///
  /// This policy is deprecated for use by a device admin.  In future releases, it will
  /// only be possible for a device owner or profile owner to disable use of the camera.
  static const USES_POLICY_DISABLE_CAMERA = 8;

  /// from: static public final int USES_POLICY_DISABLE_KEYGUARD_FEATURES
  ///
  /// A type of policy that this device admin can use: disables use of keyguard features.
  ///
  /// To control this policy, the device admin must have a "disable-keyguard-features"
  /// tag in the "uses-policies" section of its meta-data.
  ///
  /// This policy is deprecated for use by a device admin.  In future releases, it will
  /// only be possible for a device owner or profile owner to disable use of keyguard
  /// features.
  static const USES_POLICY_DISABLE_KEYGUARD_FEATURES = 9;

  /// from: static public final int USES_POLICY_EXPIRE_PASSWORD
  ///
  /// A type of policy that this device admin can use: force the user to
  /// change their password after an administrator-defined time limit.
  ///
  /// To control this policy, the device admin must have an "expire-password"
  /// tag in the "uses-policies" section of its meta-data.
  ///
  /// This policy is deprecated for use by a device admin.  In future releases, it will
  /// only be possible for a device owner or profile owner to enforce password expiry.
  static const USES_POLICY_EXPIRE_PASSWORD = 6;

  /// from: static public final int USES_POLICY_FORCE_LOCK
  ///
  /// A type of policy that this device admin can use: able to force the device
  /// to lock viaDevicePolicyManager\#lockNow or limit the
  /// maximum lock timeout for the device via
  /// DevicePolicyManager\#setMaximumTimeToLock.
  ///
  /// To control this policy, the device admin must have a "force-lock"
  /// tag in the "uses-policies" section of its meta-data.
  static const USES_POLICY_FORCE_LOCK = 3;

  /// from: static public final int USES_POLICY_LIMIT_PASSWORD
  ///
  /// A type of policy that this device admin can use: limit the passwords
  /// that the user can select, via DevicePolicyManager\#setPasswordQuality
  /// and DevicePolicyManager\#setPasswordMinimumLength.
  ///
  /// To control this policy, the device admin must have a "limit-password"
  /// tag in the "uses-policies" section of its meta-data.
  ///
  /// This policy is deprecated for use by a device admin.  In future releases, it will
  /// only be possible for a device owner or profile owner to enforce constraints on user
  /// passwords.
  static const USES_POLICY_LIMIT_PASSWORD = 0;

  /// from: static public final int USES_POLICY_RESET_PASSWORD
  ///
  /// A type of policy that this device admin can use: able to reset the
  /// user's password via
  /// DevicePolicyManager\#resetPassword.
  ///
  /// To control this policy, the device admin must have a "reset-password"
  /// tag in the "uses-policies" section of its meta-data.
  static const USES_POLICY_RESET_PASSWORD = 2;

  /// from: static public final int USES_POLICY_WATCH_LOGIN
  ///
  /// A type of policy that this device admin can use: able to watch login
  /// attempts from the user, via DeviceAdminReceiver\#ACTION_PASSWORD_FAILED,
  /// DeviceAdminReceiver\#ACTION_PASSWORD_SUCCEEDED, and
  /// DevicePolicyManager\#getCurrentFailedPasswordAttempts.
  ///
  /// To control this policy, the device admin must have a "watch-login"
  /// tag in the "uses-policies" section of its meta-data.
  static const USES_POLICY_WATCH_LOGIN = 1;

  /// from: static public final int USES_POLICY_WIPE_DATA
  ///
  /// A type of policy that this device admin can use: able to factory
  /// reset the device, erasing all of the user's data, via
  /// DevicePolicyManager\#wipeData.
  ///
  /// To control this policy, the device admin must have a "wipe-data"
  /// tag in the "uses-policies" section of its meta-data.
  static const USES_POLICY_WIPE_DATA = 4;

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/content/pm/ResolveInfo;)V");

  /// from: public void <init>(android.content.Context context, android.content.pm.ResolveInfo resolveInfo)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param context The Context in which we are parsing the device admin.
  ///@param resolveInfo The ResolveInfo returned from the package manager about
  /// this device admin's component.
  DeviceAdminInfo(
      context_.Context context, resolveinfo_.ResolveInfo resolveInfo)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [context.reference, resolveInfo.reference]).object);

  static final _id_getPackageName = jniAccessors.getMethodIDOf(
      _classRef, "getPackageName", "()Ljava/lang/String;");

  /// from: public java.lang.String getPackageName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the .apk package that implements this device admin.
  jni.JniString getPackageName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPackageName, jni.JniType.objectType, []).object);

  static final _id_getReceiverName = jniAccessors.getMethodIDOf(
      _classRef, "getReceiverName", "()Ljava/lang/String;");

  /// from: public java.lang.String getReceiverName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the class name of the receiver component that implements
  /// this device admin.
  jni.JniString getReceiverName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getReceiverName, jni.JniType.objectType, []).object);

  static final _id_getActivityInfo = jniAccessors.getMethodIDOf(
      _classRef, "getActivityInfo", "()Landroid/content/pm/ActivityInfo;");

  /// from: public android.content.pm.ActivityInfo getActivityInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the raw information about the receiver implementing this
  /// device admin.  Do not modify the returned object.
  activityinfo_.ActivityInfo getActivityInfo() =>
      activityinfo_.ActivityInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getActivityInfo, jni.JniType.objectType, []).object);

  static final _id_getComponent = jniAccessors.getMethodIDOf(
      _classRef, "getComponent", "()Landroid/content/ComponentName;");

  /// from: public android.content.ComponentName getComponent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the component of the receiver that implements this device admin.
  ///@return This value will never be {@code null}.
  componentname_.ComponentName getComponent() =>
      componentname_.ComponentName.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getComponent, jni.JniType.objectType, []).object);

  static final _id_loadLabel = jniAccessors.getMethodIDOf(
      _classRef,
      "loadLabel",
      "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadLabel(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Load the user-displayed label for this device admin.
  ///@param pm Supply a PackageManager used to load the device admin's
  /// resources.
  jni.JniObject loadLabel(packagemanager_.PackageManager pm) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadLabel, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadDescription = jniAccessors.getMethodIDOf(
      _classRef,
      "loadDescription",
      "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadDescription(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Load user-visible description associated with this device admin.
  ///@param pm Supply a PackageManager used to load the device admin's
  /// resources.
  jni.JniObject loadDescription(packagemanager_.PackageManager pm) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadDescription, jni.JniType.objectType, [pm.reference]).object);

  static final _id_loadIcon = jniAccessors.getMethodIDOf(_classRef, "loadIcon",
      "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;");

  /// from: public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager pm)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Load the user-displayed icon for this device admin.
  ///@param pm Supply a PackageManager used to load the device admin's
  /// resources.
  drawable_.Drawable loadIcon(packagemanager_.PackageManager pm) =>
      drawable_.Drawable.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_loadIcon, jni.JniType.objectType, [pm.reference]).object);

  static final _id_isVisible =
      jniAccessors.getMethodIDOf(_classRef, "isVisible", "()Z");

  /// from: public boolean isVisible()
  ///
  /// Returns whether this device admin would like to be visible to the
  /// user, even when it is not enabled.
  bool isVisible() => jniAccessors.callMethodWithArgs(
      reference, _id_isVisible, jni.JniType.booleanType, []).boolean;

  static final _id_usesPolicy =
      jniAccessors.getMethodIDOf(_classRef, "usesPolicy", "(I)Z");

  /// from: public boolean usesPolicy(int policyIdent)
  ///
  /// Return true if the device admin has requested that it be able to use
  /// the given policy control.  The possible policy identifier inputs are:
  /// \#USES_POLICY_LIMIT_PASSWORD, \#USES_POLICY_WATCH_LOGIN,
  /// \#USES_POLICY_RESET_PASSWORD, \#USES_POLICY_FORCE_LOCK,
  /// \#USES_POLICY_WIPE_DATA,
  /// \#USES_POLICY_EXPIRE_PASSWORD, \#USES_ENCRYPTED_STORAGE,
  /// \#USES_POLICY_DISABLE_CAMERA.
  bool usesPolicy(int policyIdent) => jniAccessors.callMethodWithArgs(reference,
      _id_usesPolicy, jni.JniType.booleanType, [policyIdent]).boolean;

  static final _id_getTagForPolicy = jniAccessors.getMethodIDOf(
      _classRef, "getTagForPolicy", "(I)Ljava/lang/String;");

  /// from: public java.lang.String getTagForPolicy(int policyIdent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the XML tag name for the given policy identifier.  Valid identifiers
  /// are as per \#usesPolicy(int).  If the given identifier is not
  /// known, null is returned.
  jni.JniString getTagForPolicy(int policyIdent) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getTagForPolicy, jni.JniType.objectType, [policyIdent]).object);

  static final _id_supportsTransferOwnership =
      jniAccessors.getMethodIDOf(_classRef, "supportsTransferOwnership", "()Z");

  /// from: public boolean supportsTransferOwnership()
  ///
  /// Return true if this administrator can be a target in an ownership transfer.
  bool supportsTransferOwnership() => jniAccessors.callMethodWithArgs(reference,
      _id_supportsTransferOwnership, jni.JniType.booleanType, []).boolean;

  static final _id_dump = jniAccessors.getMethodIDOf(
      _classRef, "dump", "(Landroid/util/Printer;Ljava/lang/String;)V");

  /// from: public void dump(android.util.Printer pw, java.lang.String prefix)
  void dump(printer_.Printer pw, jni.JniString prefix) =>
      jniAccessors.callMethodWithArgs(reference, _id_dump, jni.JniType.voidType,
          [pw.reference, prefix.reference]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Used to package this object into a Parcel.
  ///@param dest The Parcel to be written.
  ///@param flags The flags used for parceling.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
