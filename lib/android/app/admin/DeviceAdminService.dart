// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../Service.dart" as service_;

import "../../os/IBinder.dart" as ibinder_;

import "../../content/Intent.dart" as intent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.admin.DeviceAdminService
///
/// Base class for a service that device owner/profile owners can optionally have.
///
/// The system searches for it with an intent filter with the
/// DevicePolicyManager\#ACTION_DEVICE_ADMIN_SERVICE action, and tries to keep a bound
/// connection as long as the hosting user is running, so that the device/profile owner is always
/// considered to be in the foreground.  This is useful to receive implicit broadcasts that
/// can no longer be received by manifest receivers by apps targeting Android version
/// android.os.Build.VERSION_CODES\#O.  Device/profile owners can use a runtime-registered
/// broadcast receiver instead, and have a DeviceAdminService so that the process is always
/// running.
///
/// Device/profile owners can use
/// android.content.pm.PackageManager\#setComponentEnabledSetting(ComponentName, int, int)
/// to disable/enable its own service.  For example, when a device/profile owner no longer needs
/// to be in the foreground, it can (and should) disable its service.
///
/// The service must be protected with the permission
/// android.Manifest.permission\#BIND_DEVICE_ADMIN.  Otherwise the system would ignore it.
///
/// When the owner process crashes, the service will be re-bound automatically after a
/// back-off.
///
/// Note the process may still be killed if the system is under heavy memory pressure, in which
/// case the process will be re-started later.
class DeviceAdminService extends service_.Service {
  static final _classRef =
      jniAccessors.getClassOf("android/app/admin/DeviceAdminService");
  DeviceAdminService.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  DeviceAdminService.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_onBind = jniAccessors.getMethodIDOf(
      _classRef, "onBind", "(Landroid/content/Intent;)Landroid/os/IBinder;");

  /// from: public final android.os.IBinder onBind(android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ibinder_.IBinder onBind(intent_.Intent intent) =>
      ibinder_.IBinder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_onBind, jni.JniType.objectType, [intent.reference]).object);
}
