// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "NetworkEvent.dart" as networkevent_;

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.admin.DnsEvent
///
/// A class that represents a DNS lookup event initiated through the standard network stack.
///
/// It contains information about the originating app as well as the DNS hostname and resolved
/// IP addresses.
class DnsEvent extends networkevent_.NetworkEvent {
  static final _classRef =
      jniAccessors.getClassOf("android/app/admin/DnsEvent");
  DnsEvent.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR1 = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.admin.DnsEvent> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR1 =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR1, jni.JniType.objectType)
          .object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  DnsEvent.ctor1(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [in0.reference]).object);

  static final _id_getHostname = jniAccessors.getMethodIDOf(
      _classRef, "getHostname", "()Ljava/lang/String;");

  /// from: public java.lang.String getHostname()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the hostname that was looked up.
  jni.JniString getHostname() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getHostname, jni.JniType.objectType, []).object);

  static final _id_getInetAddresses = jniAccessors.getMethodIDOf(
      _classRef, "getInetAddresses", "()Ljava/util/List;");

  /// from: public java.util.List<java.net.InetAddress> getInetAddresses()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns (possibly a subset of) the IP addresses returned.
  jni.JniObject getInetAddresses() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getInetAddresses, jni.JniType.objectType, []).object);

  static final _id_getTotalResolvedAddressCount = jniAccessors.getMethodIDOf(
      _classRef, "getTotalResolvedAddressCount", "()I");

  /// from: public int getTotalResolvedAddressCount()
  ///
  /// Returns the number of IP addresses returned from the DNS lookup event. May be different from
  /// the length of the list returned by \#getInetAddresses() if there were too many
  /// addresses to log.
  int getTotalResolvedAddressCount() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getTotalResolvedAddressCount,
      jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();
}
