// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.admin.SystemUpdateInfo
///
/// A class containing information about a pending system update.
class SystemUpdateInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/admin/SystemUpdateInfo");
  SystemUpdateInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.admin.SystemUpdateInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int SECURITY_PATCH_STATE_FALSE
  ///
  /// Represents the system update is not a security patch.
  static const SECURITY_PATCH_STATE_FALSE = 1;

  /// from: static public final int SECURITY_PATCH_STATE_TRUE
  ///
  /// Represents the system update is a security patch.
  static const SECURITY_PATCH_STATE_TRUE = 2;

  /// from: static public final int SECURITY_PATCH_STATE_UNKNOWN
  ///
  /// Represents it is unknown whether the system update is a security patch.
  static const SECURITY_PATCH_STATE_UNKNOWN = 0;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  SystemUpdateInfo(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [in0.reference]).object);

  static final _id_getReceivedTime =
      jniAccessors.getMethodIDOf(_classRef, "getReceivedTime", "()J");

  /// from: public long getReceivedTime()
  ///
  /// Gets time when the update was first available in milliseconds since midnight, January 1,
  /// 1970 UTC.
  ///@return Time in milliseconds as given by System\#currentTimeMillis()
  int getReceivedTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getReceivedTime, jni.JniType.longType, []).long;

  static final _id_getSecurityPatchState =
      jniAccessors.getMethodIDOf(_classRef, "getSecurityPatchState", "()I");

  /// from: public int getSecurityPatchState()
  ///
  /// Gets whether the update is a security patch.
  ///@return \#SECURITY_PATCH_STATE_FALSE, \#SECURITY_PATCH_STATE_TRUE, or
  ///         \#SECURITY_PATCH_STATE_UNKNOWN.
  ///
  /// Value is android.app.admin.SystemUpdateInfo\#SECURITY_PATCH_STATE_FALSE, android.app.admin.SystemUpdateInfo\#SECURITY_PATCH_STATE_TRUE, or android.app.admin.SystemUpdateInfo\#SECURITY_PATCH_STATE_UNKNOWN
  int getSecurityPatchState() => jniAccessors.callMethodWithArgs(
      reference, _id_getSecurityPatchState, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}
