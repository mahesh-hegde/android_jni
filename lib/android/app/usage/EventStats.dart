// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.usage.EventStats
///
/// Contains usage statistics for an event type for a specific
/// time range.
class EventStats extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/usage/EventStats");
  EventStats.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.usage.EventStats> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/app/usage/EventStats;)V");

  /// from: public void <init>(android.app.usage.EventStats stats)
  /// The returned object must be deleted after use, by calling the `delete` method.
  EventStats(EventStats stats)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [stats.reference]).object);

  static final _id_getEventType =
      jniAccessors.getMethodIDOf(_classRef, "getEventType", "()I");

  /// from: public int getEventType()
  ///
  /// Return the type of event this is usage for.  May be one of the event
  /// constants in UsageEvents.Event.
  int getEventType() => jniAccessors.callMethodWithArgs(
      reference, _id_getEventType, jni.JniType.intType, []).integer;

  static final _id_getFirstTimeStamp =
      jniAccessors.getMethodIDOf(_classRef, "getFirstTimeStamp", "()J");

  /// from: public long getFirstTimeStamp()
  ///
  /// Get the beginning of the time range this android.app.usage.EventStats represents,
  /// measured in milliseconds since the epoch.
  /// <p/>
  /// See System\#currentTimeMillis().
  int getFirstTimeStamp() => jniAccessors.callMethodWithArgs(
      reference, _id_getFirstTimeStamp, jni.JniType.longType, []).long;

  static final _id_getLastTimeStamp =
      jniAccessors.getMethodIDOf(_classRef, "getLastTimeStamp", "()J");

  /// from: public long getLastTimeStamp()
  ///
  /// Get the end of the time range this android.app.usage.EventStats represents,
  /// measured in milliseconds since the epoch.
  /// <p/>
  /// See System\#currentTimeMillis().
  int getLastTimeStamp() => jniAccessors.callMethodWithArgs(
      reference, _id_getLastTimeStamp, jni.JniType.longType, []).long;

  static final _id_getLastEventTime =
      jniAccessors.getMethodIDOf(_classRef, "getLastEventTime", "()J");

  /// from: public long getLastEventTime()
  ///
  /// Get the last time this event triggered, measured in milliseconds since the epoch.
  /// <p/>
  /// See System\#currentTimeMillis().
  int getLastEventTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getLastEventTime, jni.JniType.longType, []).long;

  static final _id_getCount =
      jniAccessors.getMethodIDOf(_classRef, "getCount", "()I");

  /// from: public int getCount()
  ///
  /// Return the number of times that this event occurred over the interval.
  int getCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getCount, jni.JniType.intType, []).integer;

  static final _id_getTotalTime =
      jniAccessors.getMethodIDOf(_classRef, "getTotalTime", "()J");

  /// from: public long getTotalTime()
  ///
  /// Get the total time this event was active, measured in milliseconds.
  int getTotalTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getTotalTime, jni.JniType.longType, []).long;

  static final _id_add = jniAccessors.getMethodIDOf(
      _classRef, "add", "(Landroid/app/usage/EventStats;)V");

  /// from: public void add(android.app.usage.EventStats right)
  ///
  /// Add the statistics from the right EventStats to the left. The event type for
  /// both UsageStats objects must be the same.
  ///@param right The EventStats object to merge into this one.
  ///@throws java.lang.IllegalArgumentException if the event types of the two
  ///         UsageStats objects are different.
  void add(EventStats right) => jniAccessors.callMethodWithArgs(
      reference, _id_add, jni.JniType.voidType, [right.reference]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
