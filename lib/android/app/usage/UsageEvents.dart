// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;

import "../../content/res/Configuration.dart" as configuration_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.usage.UsageEvents
///
/// A result returned from android.app.usage.UsageStatsManager\#queryEvents(long, long)
/// from which to read android.app.usage.UsageEvents.Event objects.
class UsageEvents extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/usage/UsageEvents");
  UsageEvents.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.usage.UsageEvents> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_hasNextEvent =
      jniAccessors.getMethodIDOf(_classRef, "hasNextEvent", "()Z");

  /// from: public boolean hasNextEvent()
  ///
  /// Returns whether or not there are more events to read using
  /// \#getNextEvent(android.app.usage.UsageEvents.Event).
  ///@return true if there are more events, false otherwise.
  bool hasNextEvent() => jniAccessors.callMethodWithArgs(
      reference, _id_hasNextEvent, jni.JniType.booleanType, []).boolean;

  static final _id_getNextEvent = jniAccessors.getMethodIDOf(
      _classRef, "getNextEvent", "(Landroid/app/usage/UsageEvents\$Event;)Z");

  /// from: public boolean getNextEvent(android.app.usage.UsageEvents.Event eventOut)
  ///
  /// Retrieve the next android.app.usage.UsageEvents.Event from the collection and put the
  /// resulting data into {@code eventOut}.
  ///@param eventOut The android.app.usage.UsageEvents.Event object that will receive the
  ///                 next event data.
  ///@return true if an event was available, false if there are no more events.
  bool getNextEvent(UsageEvents_Event eventOut) =>
      jniAccessors.callMethodWithArgs(reference, _id_getNextEvent,
          jni.JniType.booleanType, [eventOut.reference]).boolean;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.app.usage.UsageEvents$Event
///
/// An event representing a state change for a component.
class UsageEvents_Event extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/usage/UsageEvents\$Event");
  UsageEvents_Event.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CONFIGURATION_CHANGE
  ///
  /// An event type denoting that the device configuration has changed.
  static const CONFIGURATION_CHANGE = 5;

  /// from: static public final int KEYGUARD_HIDDEN
  ///
  /// An event type denoting that the screen's keyguard has been hidden.  This typically
  /// happens when the user unlocks their phone after turning it on.
  static const KEYGUARD_HIDDEN = 18;

  /// from: static public final int KEYGUARD_SHOWN
  ///
  /// An event type denoting that the screen's keyguard has been shown, whether or not
  /// the screen is off.
  static const KEYGUARD_SHOWN = 17;

  /// from: static public final int MOVE_TO_BACKGROUND
  ///
  /// An event type denoting that a component moved to the background.
  static const MOVE_TO_BACKGROUND = 2;

  /// from: static public final int MOVE_TO_FOREGROUND
  ///
  /// An event type denoting that a component moved to the foreground.
  static const MOVE_TO_FOREGROUND = 1;

  /// from: static public final int NONE
  ///
  /// No event type.
  static const NONE = 0;

  /// from: static public final int SCREEN_INTERACTIVE
  ///
  /// An event type denoting that the screen has gone in to an interactive state (turned
  /// on for full user interaction, not ambient display or other non-interactive state).
  static const SCREEN_INTERACTIVE = 15;

  /// from: static public final int SCREEN_NON_INTERACTIVE
  ///
  /// An event type denoting that the screen has gone in to a non-interactive state
  /// (completely turned off or turned on only in a non-interactive state like ambient
  /// display).
  static const SCREEN_NON_INTERACTIVE = 16;

  /// from: static public final int SHORTCUT_INVOCATION
  ///
  /// An event type denoting that an action equivalent to a ShortcutInfo is taken by the user.
  ///@see android.content.pm.ShortcutManager\#reportShortcutUsed(String)
  static const SHORTCUT_INVOCATION = 8;

  /// from: static public final int STANDBY_BUCKET_CHANGED
  ///
  /// An event type denoting a change in App Standby Bucket. The new bucket can be
  /// retrieved by calling \#getAppStandbyBucket().
  ///@see UsageStatsManager\#getAppStandbyBucket()
  static const STANDBY_BUCKET_CHANGED = 11;

  /// from: static public final int USER_INTERACTION
  ///
  /// An event type denoting that a package was interacted with in some way by the user.
  static const USER_INTERACTION = 7;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  UsageEvents_Event()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getPackageName = jniAccessors.getMethodIDOf(
      _classRef, "getPackageName", "()Ljava/lang/String;");

  /// from: public java.lang.String getPackageName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The package name of the source of this event.
  jni.JniString getPackageName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPackageName, jni.JniType.objectType, []).object);

  static final _id_getClassName = jniAccessors.getMethodIDOf(
      _classRef, "getClassName", "()Ljava/lang/String;");

  /// from: public java.lang.String getClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The class name of the source of this event. This may be null for
  /// certain events.
  jni.JniString getClassName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getClassName, jni.JniType.objectType, []).object);

  static final _id_getTimeStamp =
      jniAccessors.getMethodIDOf(_classRef, "getTimeStamp", "()J");

  /// from: public long getTimeStamp()
  ///
  /// The time at which this event occurred, measured in milliseconds since the epoch.
  /// <p/>
  /// See System\#currentTimeMillis().
  int getTimeStamp() => jniAccessors.callMethodWithArgs(
      reference, _id_getTimeStamp, jni.JniType.longType, []).long;

  static final _id_getEventType =
      jniAccessors.getMethodIDOf(_classRef, "getEventType", "()I");

  /// from: public int getEventType()
  ///
  /// The event type.
  ///@see \#MOVE_TO_BACKGROUND
  ///@see \#MOVE_TO_FOREGROUND
  ///@see \#CONFIGURATION_CHANGE
  ///@see \#USER_INTERACTION
  ///@see \#STANDBY_BUCKET_CHANGED
  int getEventType() => jniAccessors.callMethodWithArgs(
      reference, _id_getEventType, jni.JniType.intType, []).integer;

  static final _id_getConfiguration = jniAccessors.getMethodIDOf(
      _classRef, "getConfiguration", "()Landroid/content/res/Configuration;");

  /// from: public android.content.res.Configuration getConfiguration()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Configuration for this event if the event is of type
  /// \#CONFIGURATION_CHANGE, otherwise it returns null.
  configuration_.Configuration getConfiguration() =>
      configuration_.Configuration.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getConfiguration, jni.JniType.objectType, []).object);

  static final _id_getShortcutId = jniAccessors.getMethodIDOf(
      _classRef, "getShortcutId", "()Ljava/lang/String;");

  /// from: public java.lang.String getShortcutId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the ID of a android.content.pm.ShortcutInfo for this event
  /// if the event is of type \#SHORTCUT_INVOCATION, otherwise it returns null.
  ///@see android.content.pm.ShortcutManager\#reportShortcutUsed(String)
  jni.JniString getShortcutId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getShortcutId, jni.JniType.objectType, []).object);

  static final _id_getAppStandbyBucket =
      jniAccessors.getMethodIDOf(_classRef, "getAppStandbyBucket", "()I");

  /// from: public int getAppStandbyBucket()
  ///
  /// Returns the standby bucket of the app, if the event is of type
  /// \#STANDBY_BUCKET_CHANGED, otherwise returns 0.
  ///@return the standby bucket associated with the event.
  int getAppStandbyBucket() => jniAccessors.callMethodWithArgs(
      reference, _id_getAppStandbyBucket, jni.JniType.intType, []).integer;
}
