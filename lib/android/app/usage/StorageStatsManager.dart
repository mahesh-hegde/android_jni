// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "StorageStats.dart" as storagestats_;

import "../../os/UserHandle.dart" as userhandle_;

import "ExternalStorageStats.dart" as externalstoragestats_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.usage.StorageStatsManager
///
/// Access to detailed storage statistics. This provides a summary of how apps,
/// users, and external/shared storage is utilizing disk space.
/// <p class="note">
/// Note: no permissions are required when calling these APIs for your own
/// package or UID. However, requesting details for any other package requires
/// the {@code android.Manifest.permission\#PACKAGE_USAGE_STATS} permission, which
/// is a system-level permission that will not be granted to normal apps.
/// Declaring that permission expresses your intention to use this API and an end
/// user can then choose to grant this permission through the Settings
/// application.
///
///
class StorageStatsManager extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/usage/StorageStatsManager");
  StorageStatsManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  StorageStatsManager()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getTotalBytes = jniAccessors.getMethodIDOf(
      _classRef, "getTotalBytes", "(Ljava/util/UUID;)J");

  /// from: public long getTotalBytes(java.util.UUID storageUuid)
  ///
  /// Return the total size of the underlying physical media that is hosting
  /// this storage volume.
  ///
  /// This value is best suited for visual display to end users, since it's
  /// designed to reflect the total storage size advertised in a retail
  /// environment.
  ///
  /// Apps making logical decisions about disk space should always use
  /// File\#getTotalSpace() instead of this value.
  ///
  /// This method may take several seconds to complete, so it should
  ///  *            only be called from a worker thread.
  /// Value is a non-negative number of bytes.
  ///@param storageUuid the UUID of the storage volume you're interested in,
  ///            such as StorageManager\#UUID_DEFAULT.
  /// This value must never be {@code null}.
  ///@throws IOException when the storage device isn't present.
  ///@return Value is a non-negative number of bytes.
  int getTotalBytes(jni.JniObject storageUuid) =>
      jniAccessors.callMethodWithArgs(reference, _id_getTotalBytes,
          jni.JniType.longType, [storageUuid.reference]).long;

  static final _id_getFreeBytes = jniAccessors.getMethodIDOf(
      _classRef, "getFreeBytes", "(Ljava/util/UUID;)J");

  /// from: public long getFreeBytes(java.util.UUID storageUuid)
  ///
  /// Return the free space on the requested storage volume.
  ///
  /// This value is best suited for visual display to end users, since it's
  /// designed to reflect both unused space _and_ and cached space that
  /// could be reclaimed by the system.
  ///
  /// Apps making logical decisions about disk space should always use
  /// StorageManager\#getAllocatableBytes(UUID) instead of this value.
  ///
  /// This method may take several seconds to complete, so it should
  ///  *            only be called from a worker thread.
  /// Value is a non-negative number of bytes.
  ///@param storageUuid the UUID of the storage volume you're interested in,
  ///            such as StorageManager\#UUID_DEFAULT.
  /// This value must never be {@code null}.
  ///@throws IOException when the storage device isn't present.
  ///@return Value is a non-negative number of bytes.
  int getFreeBytes(jni.JniObject storageUuid) =>
      jniAccessors.callMethodWithArgs(reference, _id_getFreeBytes,
          jni.JniType.longType, [storageUuid.reference]).long;

  static final _id_queryStatsForPackage = jniAccessors.getMethodIDOf(
      _classRef,
      "queryStatsForPackage",
      "(Ljava/util/UUID;Ljava/lang/String;Landroid/os/UserHandle;)Landroid/app/usage/StorageStats;");

  /// from: public android.app.usage.StorageStats queryStatsForPackage(java.util.UUID storageUuid, java.lang.String packageName, android.os.UserHandle user)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return storage statistics for a specific package on the requested storage
  /// volume.
  /// <p class="note">
  /// Note: no permissions are required when calling this API for your own
  /// package. However, requesting details for any other package requires the
  /// {@code android.Manifest.permission\#PACKAGE_USAGE_STATS} permission, which
  /// is a system-level permission that will not be granted to normal apps.
  /// Declaring that permission expresses your intention to use this API and an
  /// end user can then choose to grant this permission through the Settings
  /// application.
  ///
  ///
  /// <p class="note">
  /// Note: if the requested package uses the {@code android:sharedUserId}
  /// manifest feature, this call will be forced into a slower manual
  /// calculation path. If possible, consider always using
  /// \#queryStatsForUid(UUID, int), which is typically faster.
  ///
  ///
  ///
  /// This method may take several seconds to complete, so it should
  ///  *            only be called from a worker thread.
  ///@param storageUuid the UUID of the storage volume you're interested in,
  ///            such as StorageManager\#UUID_DEFAULT.
  /// This value must never be {@code null}.
  ///@param packageName the package name you're interested in.
  /// This value must never be {@code null}.
  ///@param user the user you're interested in.
  /// This value must never be {@code null}.
  ///@throws PackageManager.NameNotFoundException when the requested package
  ///             name isn't installed for the requested user.
  ///@throws IOException when the storage device isn't present.
  ///@see ApplicationInfo\#storageUuid
  ///@see PackageInfo\#packageName
  ///@return This value will never be {@code null}.
  storagestats_.StorageStats queryStatsForPackage(jni.JniObject storageUuid,
          jni.JniString packageName, userhandle_.UserHandle user) =>
      storagestats_.StorageStats.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_queryStatsForPackage, jni.JniType.objectType, [
        storageUuid.reference,
        packageName.reference,
        user.reference
      ]).object);

  static final _id_queryStatsForUid = jniAccessors.getMethodIDOf(
      _classRef,
      "queryStatsForUid",
      "(Ljava/util/UUID;I)Landroid/app/usage/StorageStats;");

  /// from: public android.app.usage.StorageStats queryStatsForUid(java.util.UUID storageUuid, int uid)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return storage statistics for a specific UID on the requested storage
  /// volume.
  /// <p class="note">
  /// Note: no permissions are required when calling this API for your own UID.
  /// However, requesting details for any other UID requires the
  /// {@code android.Manifest.permission\#PACKAGE_USAGE_STATS} permission, which
  /// is a system-level permission that will not be granted to normal apps.
  /// Declaring that permission expresses your intention to use this API and an
  /// end user can then choose to grant this permission through the Settings
  /// application.
  ///
  ///
  ///
  /// This method may take several seconds to complete, so it should
  ///  *            only be called from a worker thread.
  ///@param storageUuid the UUID of the storage volume you're interested in,
  ///            such as StorageManager\#UUID_DEFAULT.
  /// This value must never be {@code null}.
  ///@param uid the UID you're interested in.
  ///@throws IOException when the storage device isn't present.
  ///@see ApplicationInfo\#storageUuid
  ///@see ApplicationInfo\#uid
  ///@return This value will never be {@code null}.
  storagestats_.StorageStats queryStatsForUid(
          jni.JniObject storageUuid, int uid) =>
      storagestats_.StorageStats.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_queryStatsForUid,
          jni.JniType.objectType,
          [storageUuid.reference, uid]).object);

  static final _id_queryStatsForUser = jniAccessors.getMethodIDOf(
      _classRef,
      "queryStatsForUser",
      "(Ljava/util/UUID;Landroid/os/UserHandle;)Landroid/app/usage/StorageStats;");

  /// from: public android.app.usage.StorageStats queryStatsForUser(java.util.UUID storageUuid, android.os.UserHandle user)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return storage statistics for a specific UserHandle on the
  /// requested storage volume.
  /// <p class="note">
  /// Note: this API requires the
  /// {@code android.Manifest.permission\#PACKAGE_USAGE_STATS} permission, which
  /// is a system-level permission that will not be granted to normal apps.
  /// Declaring that permission expresses your intention to use this API and an
  /// end user can then choose to grant this permission through the Settings
  /// application.
  ///
  ///
  ///
  /// This method may take several seconds to complete, so it should
  ///  *            only be called from a worker thread.
  ///@param storageUuid the UUID of the storage volume you're interested in,
  ///            such as StorageManager\#UUID_DEFAULT.
  /// This value must never be {@code null}.
  ///@param user the user you're interested in.
  /// This value must never be {@code null}.
  ///@throws IOException when the storage device isn't present.
  ///@see android.os.Process\#myUserHandle()
  ///@return This value will never be {@code null}.
  storagestats_.StorageStats queryStatsForUser(
          jni.JniObject storageUuid, userhandle_.UserHandle user) =>
      storagestats_.StorageStats.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_queryStatsForUser,
          jni.JniType.objectType,
          [storageUuid.reference, user.reference]).object);

  static final _id_queryExternalStatsForUser = jniAccessors.getMethodIDOf(
      _classRef,
      "queryExternalStatsForUser",
      "(Ljava/util/UUID;Landroid/os/UserHandle;)Landroid/app/usage/ExternalStorageStats;");

  /// from: public android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.util.UUID storageUuid, android.os.UserHandle user)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return shared/external storage statistics for a specific
  /// UserHandle on the requested storage volume.
  /// <p class="note">
  /// Note: this API requires the
  /// {@code android.Manifest.permission\#PACKAGE_USAGE_STATS} permission, which
  /// is a system-level permission that will not be granted to normal apps.
  /// Declaring that permission expresses your intention to use this API and an
  /// end user can then choose to grant this permission through the Settings
  /// application.
  ///
  ///
  ///
  /// This method may take several seconds to complete, so it should
  ///  *            only be called from a worker thread.
  ///@param storageUuid the UUID of the storage volume you're interested in,
  ///            such as StorageManager\#UUID_DEFAULT.
  /// This value must never be {@code null}.
  ///@throws IOException when the storage device isn't present.
  ///@see android.os.Process\#myUserHandle()
  ///@param user This value must never be {@code null}.
  ///@return This value will never be {@code null}.
  externalstoragestats_.ExternalStorageStats queryExternalStatsForUser(
          jni.JniObject storageUuid, userhandle_.UserHandle user) =>
      externalstoragestats_.ExternalStorageStats.fromRef(jniAccessors
          .callMethodWithArgs(
              reference,
              _id_queryExternalStatsForUser,
              jni.JniType.objectType,
              [storageUuid.reference, user.reference]).object);
}
