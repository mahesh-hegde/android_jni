// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../content/res/Configuration.dart" as configuration_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.usage.ConfigurationStats
///
/// Represents the usage statistics of a device android.content.res.Configuration for a
/// specific time range.
class ConfigurationStats extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/usage/ConfigurationStats");
  ConfigurationStats.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.usage.ConfigurationStats> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/app/usage/ConfigurationStats;)V");

  /// from: public void <init>(android.app.usage.ConfigurationStats stats)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ConfigurationStats(ConfigurationStats stats)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [stats.reference]).object);

  static final _id_getConfiguration = jniAccessors.getMethodIDOf(
      _classRef, "getConfiguration", "()Landroid/content/res/Configuration;");

  /// from: public android.content.res.Configuration getConfiguration()
  /// The returned object must be deleted after use, by calling the `delete` method.
  configuration_.Configuration getConfiguration() =>
      configuration_.Configuration.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getConfiguration, jni.JniType.objectType, []).object);

  static final _id_getFirstTimeStamp =
      jniAccessors.getMethodIDOf(_classRef, "getFirstTimeStamp", "()J");

  /// from: public long getFirstTimeStamp()
  ///
  /// Get the beginning of the time range this ConfigurationStats represents,
  /// measured in milliseconds since the epoch.
  /// <p/>
  /// See System\#currentTimeMillis().
  int getFirstTimeStamp() => jniAccessors.callMethodWithArgs(
      reference, _id_getFirstTimeStamp, jni.JniType.longType, []).long;

  static final _id_getLastTimeStamp =
      jniAccessors.getMethodIDOf(_classRef, "getLastTimeStamp", "()J");

  /// from: public long getLastTimeStamp()
  ///
  /// Get the end of the time range this ConfigurationStats represents,
  /// measured in milliseconds since the epoch.
  /// <p/>
  /// See System\#currentTimeMillis().
  int getLastTimeStamp() => jniAccessors.callMethodWithArgs(
      reference, _id_getLastTimeStamp, jni.JniType.longType, []).long;

  static final _id_getLastTimeActive =
      jniAccessors.getMethodIDOf(_classRef, "getLastTimeActive", "()J");

  /// from: public long getLastTimeActive()
  ///
  /// Get the last time this configuration was active, measured in milliseconds since the epoch.
  /// <p/>
  /// See System\#currentTimeMillis().
  int getLastTimeActive() => jniAccessors.callMethodWithArgs(
      reference, _id_getLastTimeActive, jni.JniType.longType, []).long;

  static final _id_getTotalTimeActive =
      jniAccessors.getMethodIDOf(_classRef, "getTotalTimeActive", "()J");

  /// from: public long getTotalTimeActive()
  ///
  /// Get the total time this configuration was active, measured in milliseconds.
  int getTotalTimeActive() => jniAccessors.callMethodWithArgs(
      reference, _id_getTotalTimeActive, jni.JniType.longType, []).long;

  static final _id_getActivationCount =
      jniAccessors.getMethodIDOf(_classRef, "getActivationCount", "()I");

  /// from: public int getActivationCount()
  ///
  /// Get the number of times this configuration was active.
  int getActivationCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getActivationCount, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
