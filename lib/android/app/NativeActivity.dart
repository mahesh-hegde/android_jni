// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Activity.dart" as activity_;

import "../os/Bundle.dart" as bundle_;

import "../content/res/Configuration.dart" as configuration_;

import "../view/SurfaceHolder.dart" as surfaceholder_;

import "../view/InputQueue.dart" as inputqueue_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.NativeActivity
///
/// Convenience for implementing an activity that will be implemented
/// purely in native code.  That is, a game (or game-like thing).  There
/// is no need to derive from this class; you can simply declare it in your
/// manifest, and use the NDK APIs from there.
///
/// A <a href="https://github.com/googlesamples/android-ndk/tree/master/native-activity">sample
/// native activity</a> is available in the NDK samples.
class NativeActivity extends activity_.Activity {
  static final _classRef =
      jniAccessors.getClassOf("android/app/NativeActivity");
  NativeActivity.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String META_DATA_FUNC_NAME
  ///
  /// Optional meta-that can be in the manifest for this component, specifying
  /// the name of the main entry point for this native activity in the
  /// \#META_DATA_LIB_NAME native code.  If not specified,
  /// "ANativeActivity_onCreate" is used.
  static const META_DATA_FUNC_NAME = "android.app.func_name";

  /// from: static public final java.lang.String META_DATA_LIB_NAME
  ///
  /// Optional meta-that can be in the manifest for this component, specifying
  /// the name of the native shared library to load.  If not specified,
  /// "main" is used.
  static const META_DATA_LIB_NAME = "android.app.lib_name";

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  NativeActivity.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_onCreate = jniAccessors.getMethodIDOf(
      _classRef, "onCreate", "(Landroid/os/Bundle;)V");

  /// from: protected void onCreate(android.os.Bundle savedInstanceState)
  void onCreate(bundle_.Bundle savedInstanceState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCreate,
          jni.JniType.voidType, [savedInstanceState.reference]).check();

  static final _id_onDestroy =
      jniAccessors.getMethodIDOf(_classRef, "onDestroy", "()V");

  /// from: protected void onDestroy()
  void onDestroy() => jniAccessors.callMethodWithArgs(
      reference, _id_onDestroy, jni.JniType.voidType, []).check();

  static final _id_onPause =
      jniAccessors.getMethodIDOf(_classRef, "onPause", "()V");

  /// from: protected void onPause()
  void onPause() => jniAccessors.callMethodWithArgs(
      reference, _id_onPause, jni.JniType.voidType, []).check();

  static final _id_onResume =
      jniAccessors.getMethodIDOf(_classRef, "onResume", "()V");

  /// from: protected void onResume()
  void onResume() => jniAccessors.callMethodWithArgs(
      reference, _id_onResume, jni.JniType.voidType, []).check();

  static final _id_onSaveInstanceState = jniAccessors.getMethodIDOf(
      _classRef, "onSaveInstanceState", "(Landroid/os/Bundle;)V");

  /// from: protected void onSaveInstanceState(android.os.Bundle outState)
  void onSaveInstanceState(bundle_.Bundle outState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSaveInstanceState,
          jni.JniType.voidType, [outState.reference]).check();

  static final _id_onStart =
      jniAccessors.getMethodIDOf(_classRef, "onStart", "()V");

  /// from: protected void onStart()
  void onStart() => jniAccessors.callMethodWithArgs(
      reference, _id_onStart, jni.JniType.voidType, []).check();

  static final _id_onStop =
      jniAccessors.getMethodIDOf(_classRef, "onStop", "()V");

  /// from: protected void onStop()
  void onStop() => jniAccessors.callMethodWithArgs(
      reference, _id_onStop, jni.JniType.voidType, []).check();

  static final _id_onConfigurationChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onConfigurationChanged",
      "(Landroid/content/res/Configuration;)V");

  /// from: public void onConfigurationChanged(android.content.res.Configuration newConfig)
  void onConfigurationChanged(configuration_.Configuration newConfig) =>
      jniAccessors.callMethodWithArgs(reference, _id_onConfigurationChanged,
          jni.JniType.voidType, [newConfig.reference]).check();

  static final _id_onLowMemory =
      jniAccessors.getMethodIDOf(_classRef, "onLowMemory", "()V");

  /// from: public void onLowMemory()
  void onLowMemory() => jniAccessors.callMethodWithArgs(
      reference, _id_onLowMemory, jni.JniType.voidType, []).check();

  static final _id_onWindowFocusChanged =
      jniAccessors.getMethodIDOf(_classRef, "onWindowFocusChanged", "(Z)V");

  /// from: public void onWindowFocusChanged(boolean hasFocus)
  void onWindowFocusChanged(bool hasFocus) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onWindowFocusChanged,
      jni.JniType.voidType,
      [hasFocus]).check();

  static final _id_surfaceCreated = jniAccessors.getMethodIDOf(
      _classRef, "surfaceCreated", "(Landroid/view/SurfaceHolder;)V");

  /// from: public void surfaceCreated(android.view.SurfaceHolder holder)
  void surfaceCreated(surfaceholder_.SurfaceHolder holder) =>
      jniAccessors.callMethodWithArgs(reference, _id_surfaceCreated,
          jni.JniType.voidType, [holder.reference]).check();

  static final _id_surfaceChanged = jniAccessors.getMethodIDOf(
      _classRef, "surfaceChanged", "(Landroid/view/SurfaceHolder;III)V");

  /// from: public void surfaceChanged(android.view.SurfaceHolder holder, int format, int width, int height)
  void surfaceChanged(surfaceholder_.SurfaceHolder holder, int format,
          int width, int height) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_surfaceChanged,
          jni.JniType.voidType,
          [holder.reference, format, width, height]).check();

  static final _id_surfaceRedrawNeeded = jniAccessors.getMethodIDOf(
      _classRef, "surfaceRedrawNeeded", "(Landroid/view/SurfaceHolder;)V");

  /// from: public void surfaceRedrawNeeded(android.view.SurfaceHolder holder)
  void surfaceRedrawNeeded(surfaceholder_.SurfaceHolder holder) =>
      jniAccessors.callMethodWithArgs(reference, _id_surfaceRedrawNeeded,
          jni.JniType.voidType, [holder.reference]).check();

  static final _id_surfaceDestroyed = jniAccessors.getMethodIDOf(
      _classRef, "surfaceDestroyed", "(Landroid/view/SurfaceHolder;)V");

  /// from: public void surfaceDestroyed(android.view.SurfaceHolder holder)
  void surfaceDestroyed(surfaceholder_.SurfaceHolder holder) =>
      jniAccessors.callMethodWithArgs(reference, _id_surfaceDestroyed,
          jni.JniType.voidType, [holder.reference]).check();

  static final _id_onInputQueueCreated = jniAccessors.getMethodIDOf(
      _classRef, "onInputQueueCreated", "(Landroid/view/InputQueue;)V");

  /// from: public void onInputQueueCreated(android.view.InputQueue queue)
  void onInputQueueCreated(inputqueue_.InputQueue queue) =>
      jniAccessors.callMethodWithArgs(reference, _id_onInputQueueCreated,
          jni.JniType.voidType, [queue.reference]).check();

  static final _id_onInputQueueDestroyed = jniAccessors.getMethodIDOf(
      _classRef, "onInputQueueDestroyed", "(Landroid/view/InputQueue;)V");

  /// from: public void onInputQueueDestroyed(android.view.InputQueue queue)
  void onInputQueueDestroyed(inputqueue_.InputQueue queue) =>
      jniAccessors.callMethodWithArgs(reference, _id_onInputQueueDestroyed,
          jni.JniType.voidType, [queue.reference]).check();

  static final _id_onGlobalLayout =
      jniAccessors.getMethodIDOf(_classRef, "onGlobalLayout", "()V");

  /// from: public void onGlobalLayout()
  void onGlobalLayout() => jniAccessors.callMethodWithArgs(
      reference, _id_onGlobalLayout, jni.JniType.voidType, []).check();
}
