// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../content/Context.dart" as context_;

import "../../net/Uri.dart" as uri_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.slice.SliceMetrics
///
/// Metrics interface for slices.
///
/// This is called by SliceView, so Slice developers should
/// not need to reference this class.
///@see androidx.slice.widget.SliceView
class SliceMetrics extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/slice/SliceMetrics");
  SliceMetrics.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/content/Context;Landroid/net/Uri;)V");

  /// from: public void <init>(android.content.Context context, android.net.Uri uri)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// An object to be used throughout the life of a slice to register events.
  ///@param context This value must never be {@code null}.
  ///@param uri This value must never be {@code null}.
  SliceMetrics(context_.Context context, uri_.Uri uri)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [context.reference, uri.reference]).object);

  static final _id_logVisible =
      jniAccessors.getMethodIDOf(_classRef, "logVisible", "()V");

  /// from: public void logVisible()
  ///
  /// To be called whenever the slice becomes visible to the user.
  void logVisible() => jniAccessors.callMethodWithArgs(
      reference, _id_logVisible, jni.JniType.voidType, []).check();

  static final _id_logHidden =
      jniAccessors.getMethodIDOf(_classRef, "logHidden", "()V");

  /// from: public void logHidden()
  ///
  /// To be called whenever the slice becomes invisible to the user.
  void logHidden() => jniAccessors.callMethodWithArgs(
      reference, _id_logHidden, jni.JniType.voidType, []).check();

  static final _id_logTouch = jniAccessors.getMethodIDOf(
      _classRef, "logTouch", "(ILandroid/net/Uri;)V");

  /// from: public void logTouch(int actionType, android.net.Uri subSlice)
  ///
  /// To be called whenever the user invokes a discrete action via a slice.
  ///
  /// <P>
  ///     Use this for discrete events like a tap or the end of a drag,
  ///     not for a continuous streams of events, such as the motion during a gesture.
  /// </P>
  ///@see androidx.slice.widget.EventInfo\#actionType
  ///@param actionType The type of the event.
  ///@param subSlice The URI of the sub-slice that is the subject of the interaction.
  ///
  /// This value must never be {@code null}.
  void logTouch(int actionType, uri_.Uri subSlice) =>
      jniAccessors.callMethodWithArgs(reference, _id_logTouch,
          jni.JniType.voidType, [actionType, subSlice.reference]).check();
}
