// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.slice.SliceSpec
///
/// Class describing the structure of the data contained within a slice.
///
/// A data version contains a string which describes the type of structure
/// and a revision which denotes this specific implementation. Revisions are expected
/// to be backwards compatible and monotonically increasing. Meaning if a
/// SliceSpec has the same type and an equal or lesser revision,
/// it is expected to be compatible.
///
/// Apps rendering slices will provide a list of supported versions to the OS which
/// will also be given to the app. Apps should only return a Slice with a
/// SliceSpec that one of the supported SliceSpecs provided
/// \#canRender.
///@see Slice
///@see SliceProvider\#onBindSlice(Uri)
class SliceSpec extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/slice/SliceSpec");
  SliceSpec.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.slice.SliceSpec> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;I)V");

  /// from: public void <init>(java.lang.String type, int revision)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param type This value must never be {@code null}.
  SliceSpec(jni.JniString type, int revision)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [type.reference, revision]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()Ljava/lang/String;");

  /// from: public java.lang.String getType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the type of the version.
  jni.JniString getType() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getType, jni.JniType.objectType, []).object);

  static final _id_getRevision =
      jniAccessors.getMethodIDOf(_classRef, "getRevision", "()I");

  /// from: public int getRevision()
  ///
  /// Gets the revision of the version.
  int getRevision() => jniAccessors.callMethodWithArgs(
      reference, _id_getRevision, jni.JniType.intType, []).integer;

  static final _id_canRender = jniAccessors.getMethodIDOf(
      _classRef, "canRender", "(Landroid/app/slice/SliceSpec;)Z");

  /// from: public boolean canRender(android.app.slice.SliceSpec candidate)
  ///
  /// Indicates that this spec can be used to render the specified spec.
  ///
  /// Rendering support is not bi-directional (e.g. Spec v3 can render
  /// Spec v2, but Spec v2 cannot render Spec v3).
  ///@param candidate candidate format of data.
  /// This value must never be {@code null}.
  ///@return true if versions are compatible.
  ///@see androidx.slice.widget.SliceView
  bool canRender(SliceSpec candidate) => jniAccessors.callMethodWithArgs(
      reference,
      _id_canRender,
      jni.JniType.booleanType,
      [candidate.reference]).boolean;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
