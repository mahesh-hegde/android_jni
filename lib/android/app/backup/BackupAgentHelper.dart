// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BackupAgent.dart" as backupagent_;

import "../../os/ParcelFileDescriptor.dart" as parcelfiledescriptor_;

import "BackupDataOutput.dart" as backupdataoutput_;

import "BackupDataInput.dart" as backupdatainput_;

import "BackupHelper.dart" as backuphelper_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.backup.BackupAgentHelper
///
/// A convenient BackupAgent wrapper class that automatically manages
/// heterogeneous data sets within the backup data, each identified by a unique
/// key prefix.  When processing a backup or restore operation, the BackupAgentHelper
/// dispatches to one or more installed BackupHelper objects, each
/// of which is responsible for a defined subset of the data being processed.
///
/// An application will typically extend this class in its own
/// backup agent. Then, within the agent's BackupAgent\#onCreate() onCreate()
/// method, it will call \#addHelper(String, BackupHelper) addHelper() one or more times to
/// install the handlers for each kind of data it wishes to manage within its backups.
///
/// The Android framework currently provides two predefined BackupHelper classes:
///
/// <ul><li>FileBackupHelper - Manages the backup and restore of entire files
/// within an application's data directory hierarchy.</li>
/// <li>SharedPreferencesBackupHelper - Manages the backup and restore of an
/// application's android.content.SharedPreferences data.</li></ul>
///
/// An application can also implement its own helper classes to work within the
/// BackupAgentHelper framework.  See the BackupHelper interface
/// documentation for details.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about using BackupAgentHelper, read the
/// <a href="{@docRoot}guide/topics/data/backup.html">Data Backup</a> developer guide.
///
/// </div>
///@see BackupHelper
///@see FileBackupHelper
///@see SharedPreferencesBackupHelper
class BackupAgentHelper extends backupagent_.BackupAgent {
  static final _classRef =
      jniAccessors.getClassOf("android/app/backup/BackupAgentHelper");
  BackupAgentHelper.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  BackupAgentHelper.ctor2()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor2, []).object);

  static final _id_onBackup = jniAccessors.getMethodIDOf(_classRef, "onBackup",
      "(Landroid/os/ParcelFileDescriptor;Landroid/app/backup/BackupDataOutput;Landroid/os/ParcelFileDescriptor;)V");

  /// from: public void onBackup(android.os.ParcelFileDescriptor oldState, android.app.backup.BackupDataOutput data, android.os.ParcelFileDescriptor newState)
  ///
  /// Run the backup process on each of the configured handlers.
  void onBackup(
          parcelfiledescriptor_.ParcelFileDescriptor oldState,
          backupdataoutput_.BackupDataOutput data,
          parcelfiledescriptor_.ParcelFileDescriptor newState) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onBackup,
          jni.JniType.voidType,
          [oldState.reference, data.reference, newState.reference]).check();

  static final _id_onRestore = jniAccessors.getMethodIDOf(
      _classRef,
      "onRestore",
      "(Landroid/app/backup/BackupDataInput;ILandroid/os/ParcelFileDescriptor;)V");

  /// from: public void onRestore(android.app.backup.BackupDataInput data, int appVersionCode, android.os.ParcelFileDescriptor newState)
  ///
  /// Run the restore process on each of the configured handlers.
  void onRestore(backupdatainput_.BackupDataInput data, int appVersionCode,
          parcelfiledescriptor_.ParcelFileDescriptor newState) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onRestore,
          jni.JniType.voidType,
          [data.reference, appVersionCode, newState.reference]).check();

  static final _id_addHelper = jniAccessors.getMethodIDOf(_classRef,
      "addHelper", "(Ljava/lang/String;Landroid/app/backup/BackupHelper;)V");

  /// from: public void addHelper(java.lang.String keyPrefix, android.app.backup.BackupHelper helper)
  ///
  /// Add a helper for a given data subset to the agent's configuration.  Each helper
  /// must have a prefix string that is unique within this backup agent's set of
  /// helpers.
  ///@param keyPrefix A string used to disambiguate the various helpers within this agent
  ///@param helper A backup/restore helper object to be invoked during backup and restore
  ///    operations.
  void addHelper(jni.JniString keyPrefix, backuphelper_.BackupHelper helper) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addHelper,
          jni.JniType.voidType,
          [keyPrefix.reference, helper.reference]).check();
}
