// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.backup.FullBackupDataOutput
///
/// Provides the interface through which a BackupAgent writes entire files
/// to a full backup data set, via its BackupAgent\#onFullBackup(FullBackupDataOutput)
/// method.
class FullBackupDataOutput extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/backup/FullBackupDataOutput");
  FullBackupDataOutput.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(J)V");

  /// from: void <init>(long quota)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide - used only in measure operation
  FullBackupDataOutput(int quota)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [quota]).object);

  static final _id_getQuota =
      jniAccessors.getMethodIDOf(_classRef, "getQuota", "()J");

  /// from: public long getQuota()
  ///
  /// Returns the quota in bytes for the application's current backup operation.  The
  /// value can vary for each operation.
  ///@see BackupDataOutput\#getQuota()
  int getQuota() => jniAccessors.callMethodWithArgs(
      reference, _id_getQuota, jni.JniType.longType, []).long;

  static final _id_getTransportFlags =
      jniAccessors.getMethodIDOf(_classRef, "getTransportFlags", "()I");

  /// from: public int getTransportFlags()
  ///
  /// Returns flags with additional information about the backup transport. For supported flags see
  /// android.app.backup.BackupAgent
  ///@see BackupDataOutput\#getTransportFlags()
  int getTransportFlags() => jniAccessors.callMethodWithArgs(
      reference, _id_getTransportFlags, jni.JniType.intType, []).integer;
}
