// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.backup.BackupDataInput
///
/// Provides the structured interface through which a BackupAgent reads
/// information from the backup data set, via its
/// BackupAgent\#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()
/// method.  The data is presented as a set of "entities," each
/// representing one named record as previously stored by the agent's
/// BackupAgent\#onBackup(ParcelFileDescriptor,BackupDataOutput,ParcelFileDescriptor) onBackup() implementation.  An entity is composed of a descriptive header plus a
/// byte array that holds the raw data saved in the remote backup.
///
/// The agent must consume every entity in the data stream, otherwise the
/// restored state of the application will be incomplete.
/// <h3>Example</h3>
///
/// A typical
/// BackupAgent\#onRestore(BackupDataInput,int,ParcelFileDescriptor) onRestore() implementation might be structured something like this:
/// <pre>
/// public void onRestore(BackupDataInput data, int appVersionCode,
///                       ParcelFileDescriptor newState) {
///     while (data.readNextHeader()) {
///         String key = data.getKey();
///         int dataSize = data.getDataSize();
///
///         if (key.equals(MY_BACKUP_KEY_ONE)) {
///             // process this kind of record here
///             byte[] buffer = new byte[dataSize];
///             data.readEntityData(buffer, 0, dataSize); // reads the entire entity at once
///
///             // now 'buffer' holds the raw data and can be processed however
///             // the agent wishes
///             processBackupKeyOne(buffer);
///         } else if (key.equals(MY_BACKUP_KEY_TO_IGNORE) {
///             // a key we recognize but wish to discard
///             data.skipEntityData();
///         } // ... etc.
///    }
/// }</pre>
class BackupDataInput extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/backup/BackupDataInput");
  BackupDataInput.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_finalize =
      jniAccessors.getMethodIDOf(_classRef, "finalize", "()V");

  /// from: protected void finalize()
  ///
  /// @hide
  void finalize() => jniAccessors.callMethodWithArgs(
      reference, _id_finalize, jni.JniType.voidType, []).check();

  static final _id_readNextHeader =
      jniAccessors.getMethodIDOf(_classRef, "readNextHeader", "()Z");

  /// from: public boolean readNextHeader()
  ///
  /// Extract the next entity header from the restore stream.  After this method
  /// return success, the \#getKey() and \#getDataSize() methods can
  /// be used to inspect the entity that is now available for processing.
  ///@return <code>true</code> when there is an entity ready for consumption from the
  ///    restore stream, <code>false</code> if the restore stream has been fully consumed.
  ///@throws IOException if an error occurred while reading the restore stream
  bool readNextHeader() => jniAccessors.callMethodWithArgs(
      reference, _id_readNextHeader, jni.JniType.booleanType, []).boolean;

  static final _id_getKey =
      jniAccessors.getMethodIDOf(_classRef, "getKey", "()Ljava/lang/String;");

  /// from: public java.lang.String getKey()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Report the key associated with the current entity in the restore stream
  ///@return the current entity's key string
  ///@throws IllegalStateException if the next record header has not yet been read
  jni.JniString getKey() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKey, jni.JniType.objectType, []).object);

  static final _id_getDataSize =
      jniAccessors.getMethodIDOf(_classRef, "getDataSize", "()I");

  /// from: public int getDataSize()
  ///
  /// Report the size in bytes of the data associated with the current entity in the
  /// restore stream.
  ///@return The size of the record's raw data, in bytes
  ///@throws IllegalStateException if the next record header has not yet been read
  int getDataSize() => jniAccessors.callMethodWithArgs(
      reference, _id_getDataSize, jni.JniType.intType, []).integer;

  static final _id_readEntityData =
      jniAccessors.getMethodIDOf(_classRef, "readEntityData", "([BII)I");

  /// from: public int readEntityData(byte[] data, int offset, int size)
  ///
  /// Read a record's raw data from the restore stream.  The record's header must first
  /// have been processed by the \#readNextHeader() method.  Multiple calls to
  /// this method may be made in order to process the data in chunks; not all of it
  /// must be read in a single call.  Once all of the raw data for the current entity
  /// has been read, further calls to this method will simply return zero.
  ///@param data An allocated byte array of at least 'size' bytes
  ///@param offset Offset within the 'data' array at which the data will be placed
  ///    when read from the stream
  ///@param size The number of bytes to read in this pass
  ///@return The number of bytes of data read.  Once all of the data for this entity
  ///    has been read, further calls to this method will return zero.
  ///@throws IOException if an error occurred when trying to read the restore data stream
  int readEntityData(jni.JniObject data, int offset, int size) =>
      jniAccessors.callMethodWithArgs(reference, _id_readEntityData,
          jni.JniType.intType, [data.reference, offset, size]).integer;

  static final _id_skipEntityData =
      jniAccessors.getMethodIDOf(_classRef, "skipEntityData", "()V");

  /// from: public void skipEntityData()
  ///
  /// Consume the current entity's data without extracting it into a buffer
  /// for further processing.  This allows a android.app.backup.BackupAgent to
  /// efficiently discard obsolete or otherwise uninteresting records during the
  /// restore operation.
  ///@throws IOException if an error occurred when trying to read the restore data stream
  void skipEntityData() => jniAccessors.callMethodWithArgs(
      reference, _id_skipEntityData, jni.JniType.voidType, []).check();
}
