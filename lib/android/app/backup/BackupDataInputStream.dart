// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "BackupDataInput.dart" as backupdatainput_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.backup.BackupDataInputStream
///
/// Provides an java.io.InputStream-like interface for accessing an
/// entity's data during a restore operation. Used by BackupHelper classes within the BackupAgentHelper mechanism.
///
/// When BackupHelper\#restoreEntity(BackupDataInputStream) BackupHelper.restoreEntity()
/// is called, the current entity's header has already been read from the underlying
/// BackupDataInput.  The entity's key string and total data size are available
/// through this class's \#getKey() and \#size() methods, respectively.
/// <p class="note">
/// <strong>Note:</strong> The caller should take care not to seek or close the underlying data
/// source, nor read more than \#size() bytes from the stream.
///
///@see BackupAgentHelper
///@see BackupHelper
class BackupDataInputStream extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/backup/BackupDataInputStream");
  BackupDataInputStream.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/app/backup/BackupDataInput;)V");

  /// from: void <init>(android.app.backup.BackupDataInput data)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  BackupDataInputStream(backupdatainput_.BackupDataInput data)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [data.reference]).object);

  static final _id_read = jniAccessors.getMethodIDOf(_classRef, "read", "()I");

  /// from: public int read()
  ///
  /// Read one byte of entity data from the stream, returning it as
  /// an integer value.  If more than \#size() bytes of data
  /// are read from the stream, the output of this method is undefined.
  ///@return The byte read, or undefined if the end of the stream has been reached.
  int read() => jniAccessors
      .callMethodWithArgs(reference, _id_read, jni.JniType.intType, []).integer;

  static final _id_read1 =
      jniAccessors.getMethodIDOf(_classRef, "read", "([BII)I");

  /// from: public int read(byte[] b, int offset, int size)
  ///
  /// Read up to {@code size} bytes of data into a byte array, beginning at position
  /// {@code offset} within the array.
  ///@param b Byte array into which the data will be read
  ///@param offset The data will be stored in {@code b} beginning at this index
  ///   within the array.
  ///@param size The number of bytes to read in this operation.  If insufficient
  ///   data exists within the entity to fulfill this request, only as much data
  ///   will be read as is available.
  ///@return The number of bytes of data read, or zero if all of the entity's
  ///   data has already been read.
  int read1(jni.JniObject b, int offset, int size) =>
      jniAccessors.callMethodWithArgs(reference, _id_read1, jni.JniType.intType,
          [b.reference, offset, size]).integer;

  static final _id_read2 =
      jniAccessors.getMethodIDOf(_classRef, "read", "([B)I");

  /// from: public int read(byte[] b)
  ///
  /// Read enough entity data into a byte array to fill the array.
  ///@param b Byte array to fill with data from the stream.  If the stream does not
  ///   have sufficient data to fill the array, then the contents of the remainder of
  ///   the array will be undefined.
  ///@return The number of bytes of data read, or zero if all of the entity's
  ///   data has already been read.
  int read2(jni.JniObject b) => jniAccessors.callMethodWithArgs(
      reference, _id_read2, jni.JniType.intType, [b.reference]).integer;

  static final _id_getKey =
      jniAccessors.getMethodIDOf(_classRef, "getKey", "()Ljava/lang/String;");

  /// from: public java.lang.String getKey()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Report the key string associated with this entity within the backup data set.
  ///@return The key string for this entity, equivalent to calling
  ///   BackupDataInput\#getKey() on the underlying BackupDataInput.
  jni.JniString getKey() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getKey, jni.JniType.objectType, []).object);

  static final _id_size = jniAccessors.getMethodIDOf(_classRef, "size", "()I");

  /// from: public int size()
  ///
  /// Report the total number of bytes of data available for the current entity.
  ///@return The number of data bytes available, equivalent to calling
  ///   BackupDataInput\#getDataSize() on the underlying BackupDataInput.
  int size() => jniAccessors
      .callMethodWithArgs(reference, _id_size, jni.JniType.intType, []).integer;
}
