// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.FragmentContainer
///
/// Callbacks to a Fragment's container.
///@deprecated Use the <a href="{@docRoot}tools/extras/support-library.html">Support Library</a>
///      android.support.v4.app.FragmentContainer.
class FragmentContainer extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/FragmentContainer");
  FragmentContainer.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  FragmentContainer()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onHasView =
      jniAccessors.getMethodIDOf(_classRef, "onHasView", "()Z");

  /// from: public abstract boolean onHasView()
  ///
  /// Return {@code true} if the container holds any view.
  bool onHasView() => jniAccessors.callMethodWithArgs(
      reference, _id_onHasView, jni.JniType.booleanType, []).boolean;
}
