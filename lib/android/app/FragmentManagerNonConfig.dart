// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.FragmentManagerNonConfig
///
/// FragmentManagerNonConfig stores the retained instance fragments across
/// activity recreation events.
///
/// Apps should treat objects of this type as opaque, returned by
/// and passed to the state save and restore process for fragments in
/// FragmentController\#retainNonConfig() and
/// FragmentController\#restoreAllState(Parcelable, FragmentManagerNonConfig).
///
///@deprecated Use the <a href="{@docRoot}tools/extras/support-library.html">Support Library</a>
///      android.support.v4.app.FragmentManagerNonConfig
class FragmentManagerNonConfig extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/FragmentManagerNonConfig");
  FragmentManagerNonConfig.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/util/List;Ljava/util/List;)V");

  /// from: void <init>(java.util.List<android.app.Fragment> fragments, java.util.List<android.app.FragmentManagerNonConfig> childNonConfigs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  FragmentManagerNonConfig(
      jni.JniObject fragments, jni.JniObject childNonConfigs)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [fragments.reference, childNonConfigs.reference]).object);
}
