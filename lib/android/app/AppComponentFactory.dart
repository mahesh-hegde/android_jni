// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Application.dart" as application_;

import "Activity.dart" as activity_;

import "../content/Intent.dart" as intent_;

import "../content/BroadcastReceiver.dart" as broadcastreceiver_;

import "Service.dart" as service_;

import "../content/ContentProvider.dart" as contentprovider_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.AppComponentFactory
///
/// Interface used to control the instantiation of manifest elements.
///@see \#instantiateApplication
///@see \#instantiateActivity
///@see \#instantiateService
///@see \#instantiateReceiver
///@see \#instantiateProvider
class AppComponentFactory extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/AppComponentFactory");
  AppComponentFactory.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AppComponentFactory()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_instantiateApplication = jniAccessors.getMethodIDOf(
      _classRef,
      "instantiateApplication",
      "(Ljava/lang/ClassLoader;Ljava/lang/String;)Landroid/app/Application;");

  /// from: public android.app.Application instantiateApplication(java.lang.ClassLoader cl, java.lang.String className)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Allows application to override the creation of the application object. This can be used to
  /// perform things such as dependency injection or class loader changes to these
  /// classes.
  ///
  /// This method is only intended to provide a hook for instantiation. It does not provide
  /// earlier access to the Application object. The returned object will not be initialized
  /// as a Context yet and should not be used to interact with other android APIs.
  ///@param cl The default classloader to use for instantiation.
  /// This value must never be {@code null}.
  ///@param className The class to be instantiated.
  ///
  /// This value must never be {@code null}.
  ///@return This value will never be {@code null}.
  application_.Application instantiateApplication(
          jni.JniObject cl, jni.JniString className) =>
      application_.Application.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_instantiateApplication,
          jni.JniType.objectType,
          [cl.reference, className.reference]).object);

  static final _id_instantiateActivity = jniAccessors.getMethodIDOf(
      _classRef,
      "instantiateActivity",
      "(Ljava/lang/ClassLoader;Ljava/lang/String;Landroid/content/Intent;)Landroid/app/Activity;");

  /// from: public android.app.Activity instantiateActivity(java.lang.ClassLoader cl, java.lang.String className, android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Allows application to override the creation of activities. This can be used to
  /// perform things such as dependency injection or class loader changes to these
  /// classes.
  ///
  /// This method is only intended to provide a hook for instantiation. It does not provide
  /// earlier access to the Activity object. The returned object will not be initialized
  /// as a Context yet and should not be used to interact with other android APIs.
  ///@param cl The default classloader to use for instantiation.
  /// This value must never be {@code null}.
  ///@param className The class to be instantiated.
  /// This value must never be {@code null}.
  ///@param intent Intent creating the class.
  ///
  /// This value may be {@code null}.
  ///@return This value will never be {@code null}.
  activity_.Activity instantiateActivity(
          jni.JniObject cl, jni.JniString className, intent_.Intent intent) =>
      activity_.Activity.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_instantiateActivity,
          jni.JniType.objectType,
          [cl.reference, className.reference, intent.reference]).object);

  static final _id_instantiateReceiver = jniAccessors.getMethodIDOf(
      _classRef,
      "instantiateReceiver",
      "(Ljava/lang/ClassLoader;Ljava/lang/String;Landroid/content/Intent;)Landroid/content/BroadcastReceiver;");

  /// from: public android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader cl, java.lang.String className, android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Allows application to override the creation of receivers. This can be used to
  /// perform things such as dependency injection or class loader changes to these
  /// classes.
  ///@param cl The default classloader to use for instantiation.
  /// This value must never be {@code null}.
  ///@param className The class to be instantiated.
  /// This value must never be {@code null}.
  ///@param intent Intent creating the class.
  ///
  /// This value may be {@code null}.
  ///@return This value will never be {@code null}.
  broadcastreceiver_.BroadcastReceiver instantiateReceiver(
          jni.JniObject cl, jni.JniString className, intent_.Intent intent) =>
      broadcastreceiver_.BroadcastReceiver.fromRef(jniAccessors
          .callMethodWithArgs(
              reference,
              _id_instantiateReceiver,
              jni.JniType.objectType,
              [cl.reference, className.reference, intent.reference]).object);

  static final _id_instantiateService = jniAccessors.getMethodIDOf(
      _classRef,
      "instantiateService",
      "(Ljava/lang/ClassLoader;Ljava/lang/String;Landroid/content/Intent;)Landroid/app/Service;");

  /// from: public android.app.Service instantiateService(java.lang.ClassLoader cl, java.lang.String className, android.content.Intent intent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Allows application to override the creation of services. This can be used to
  /// perform things such as dependency injection or class loader changes to these
  /// classes.
  ///
  /// This method is only intended to provide a hook for instantiation. It does not provide
  /// earlier access to the Service object. The returned object will not be initialized
  /// as a Context yet and should not be used to interact with other android APIs.
  ///@param cl The default classloader to use for instantiation.
  /// This value must never be {@code null}.
  ///@param className The class to be instantiated.
  /// This value must never be {@code null}.
  ///@param intent Intent creating the class.
  ///
  /// This value may be {@code null}.
  ///@return This value will never be {@code null}.
  service_.Service instantiateService(
          jni.JniObject cl, jni.JniString className, intent_.Intent intent) =>
      service_.Service.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_instantiateService,
          jni.JniType.objectType,
          [cl.reference, className.reference, intent.reference]).object);

  static final _id_instantiateProvider = jniAccessors.getMethodIDOf(
      _classRef,
      "instantiateProvider",
      "(Ljava/lang/ClassLoader;Ljava/lang/String;)Landroid/content/ContentProvider;");

  /// from: public android.content.ContentProvider instantiateProvider(java.lang.ClassLoader cl, java.lang.String className)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Allows application to override the creation of providers. This can be used to
  /// perform things such as dependency injection or class loader changes to these
  /// classes.
  ///
  /// This method is only intended to provide a hook for instantiation. It does not provide
  /// earlier access to the ContentProvider object. The returned object will not be initialized
  /// with a Context yet and should not be used to interact with other android APIs.
  ///@param cl The default classloader to use for instantiation.
  /// This value must never be {@code null}.
  ///@param className The class to be instantiated.
  ///
  /// This value must never be {@code null}.
  ///@return This value will never be {@code null}.
  contentprovider_.ContentProvider instantiateProvider(
          jni.JniObject cl, jni.JniString className) =>
      contentprovider_.ContentProvider.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_instantiateProvider,
          jni.JniType.objectType,
          [cl.reference, className.reference]).object);
}
