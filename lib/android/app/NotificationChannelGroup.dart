// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.app.NotificationChannelGroup
///
/// A grouping of related notification channels. e.g., channels that all belong to a single account.
class NotificationChannelGroup extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/app/NotificationChannelGroup");
  NotificationChannelGroup.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.app.NotificationChannelGroup> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/String;Ljava/lang/CharSequence;)V");

  /// from: public void <init>(java.lang.String id, java.lang.CharSequence name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a notification channel group.
  ///@param id The id of the group. Must be unique per package.  the value may be truncated if
  ///           it is too long.
  ///@param name The user visible name of the group. You can rename this group when the system
  ///             locale changes by listening for the Intent\#ACTION_LOCALE_CHANGED
  ///             broadcast. The recommended maximum length is 40 characters; the value may be
  ///             truncated if it is too long.
  NotificationChannelGroup(jni.JniString id, jni.JniObject name)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [id.reference, name.reference]).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_getId =
      jniAccessors.getMethodIDOf(_classRef, "getId", "()Ljava/lang/String;");

  /// from: public java.lang.String getId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the id of this group.
  jni.JniString getId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getId, jni.JniType.objectType, []).object);

  static final _id_getName = jniAccessors.getMethodIDOf(
      _classRef, "getName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the user visible name of this group.
  jni.JniObject getName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_getDescription = jniAccessors.getMethodIDOf(
      _classRef, "getDescription", "()Ljava/lang/String;");

  /// from: public java.lang.String getDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the user visible description of this group.
  jni.JniString getDescription() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDescription, jni.JniType.objectType, []).object);

  static final _id_getChannels = jniAccessors.getMethodIDOf(
      _classRef, "getChannels", "()Ljava/util/List;");

  /// from: public java.util.List<android.app.NotificationChannel> getChannels()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the list of channels that belong to this group
  jni.JniObject getChannels() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getChannels, jni.JniType.objectType, []).object);

  static final _id_isBlocked =
      jniAccessors.getMethodIDOf(_classRef, "isBlocked", "()Z");

  /// from: public boolean isBlocked()
  ///
  /// Returns whether or not notifications posted to NotificationChannel channels belonging
  /// to this group are blocked. This value is independent of
  /// NotificationManager\#areNotificationsEnabled() and
  /// NotificationChannel\#getImportance().
  bool isBlocked() => jniAccessors.callMethodWithArgs(
      reference, _id_isBlocked, jni.JniType.booleanType, []).boolean;

  static final _id_setDescription = jniAccessors.getMethodIDOf(
      _classRef, "setDescription", "(Ljava/lang/String;)V");

  /// from: public void setDescription(java.lang.String description)
  ///
  /// Sets the user visible description of this group.
  ///
  /// The recommended maximum length is 300 characters; the value may be truncated if it is too
  /// long.
  void setDescription(jni.JniString description) =>
      jniAccessors.callMethodWithArgs(reference, _id_setDescription,
          jni.JniType.voidType, [description.reference]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_clone = jniAccessors.getMethodIDOf(
      _classRef, "clone", "()Landroid/app/NotificationChannelGroup;");

  /// from: public android.app.NotificationChannelGroup clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  NotificationChannelGroup clone() =>
      NotificationChannelGroup.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
