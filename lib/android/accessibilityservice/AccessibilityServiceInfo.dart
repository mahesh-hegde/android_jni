// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../content/pm/ResolveInfo.dart" as resolveinfo_;

import "../content/pm/PackageManager.dart" as packagemanager_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.accessibilityservice.AccessibilityServiceInfo
///
/// This class describes an AccessibilityService. The system notifies an
/// AccessibilityService for android.view.accessibility.AccessibilityEvents
/// according to the information encapsulated in this class.
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about creating AccessibilityServices, read the
/// <a href="{@docRoot}guide/topics/ui/accessibility/index.html">Accessibility</a>
/// developer guide.
///
/// </div>
///@attr ref android.R.styleable\#AccessibilityService_accessibilityEventTypes
///@attr ref android.R.styleable\#AccessibilityService_accessibilityFeedbackType
///@attr ref android.R.styleable\#AccessibilityService_accessibilityFlags
///@attr ref android.R.styleable\#AccessibilityService_canRequestEnhancedWebAccessibility
///@attr ref android.R.styleable\#AccessibilityService_canRequestFilterKeyEvents
///@attr ref android.R.styleable\#AccessibilityService_canRequestTouchExplorationMode
///@attr ref android.R.styleable\#AccessibilityService_canRetrieveWindowContent
///@attr ref android.R.styleable\#AccessibilityService_description
///@attr ref android.R.styleable\#AccessibilityService_summary
///@attr ref android.R.styleable\#AccessibilityService_notificationTimeout
///@attr ref android.R.styleable\#AccessibilityService_packageNames
///@attr ref android.R.styleable\#AccessibilityService_settingsActivity
///@see AccessibilityService
///@see android.view.accessibility.AccessibilityEvent
///@see android.view.accessibility.AccessibilityManager
class AccessibilityServiceInfo extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/accessibilityservice/AccessibilityServiceInfo");
  AccessibilityServiceInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CAPABILITY_CAN_CONTROL_MAGNIFICATION
  ///
  /// Capability: This accessibility service can control display magnification.
  ///@see android.R.styleable\#AccessibilityService_canControlMagnification
  static const CAPABILITY_CAN_CONTROL_MAGNIFICATION = 16;

  /// from: static public final int CAPABILITY_CAN_PERFORM_GESTURES
  ///
  /// Capability: This accessibility service can perform gestures.
  ///@see android.R.styleable\#AccessibilityService_canPerformGestures
  static const CAPABILITY_CAN_PERFORM_GESTURES = 32;

  /// from: static public final int CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY
  ///
  /// @deprecated No longer used
  static const CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY = 4;

  /// from: static public final int CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS
  ///
  /// Capability: This accessibility service can request to filter the key event stream.
  ///@see android.R.styleable\#AccessibilityService_canRequestFilterKeyEvents
  static const CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS = 8;

  /// from: static public final int CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES
  ///
  /// Capability: This accessibility service can capture gestures from the fingerprint sensor
  ///@see android.R.styleable\#AccessibilityService_canRequestFingerprintGestures
  static const CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES = 64;

  /// from: static public final int CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION
  ///
  /// Capability: This accessibility service can request touch exploration mode in which
  /// touched items are spoken aloud and the UI can be explored via gestures.
  ///@see android.R.styleable\#AccessibilityService_canRequestTouchExplorationMode
  static const CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION = 2;

  /// from: static public final int CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT
  ///
  /// Capability: This accessibility service can retrieve the active window content.
  ///@see android.R.styleable\#AccessibilityService_canRetrieveWindowContent
  static const CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT = 1;

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.accessibilityservice.AccessibilityServiceInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @see Parcelable.Creator
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int DEFAULT
  ///
  /// If an AccessibilityService is the default for a given type.
  /// Default service is invoked only if no package specific one exists. In case of
  /// more than one package specific service only the earlier registered is notified.
  static const DEFAULT = 1;

  /// from: static public final int FEEDBACK_ALL_MASK
  ///
  /// Mask for all feedback types.
  ///@see \#FEEDBACK_SPOKEN
  ///@see \#FEEDBACK_HAPTIC
  ///@see \#FEEDBACK_AUDIBLE
  ///@see \#FEEDBACK_VISUAL
  ///@see \#FEEDBACK_GENERIC
  ///@see \#FEEDBACK_BRAILLE
  static const FEEDBACK_ALL_MASK = -1;

  /// from: static public final int FEEDBACK_AUDIBLE
  ///
  /// Denotes audible (not spoken) feedback.
  static const FEEDBACK_AUDIBLE = 4;

  /// from: static public final int FEEDBACK_BRAILLE
  ///
  /// Denotes braille feedback.
  static const FEEDBACK_BRAILLE = 32;

  /// from: static public final int FEEDBACK_GENERIC
  ///
  /// Denotes generic feedback.
  static const FEEDBACK_GENERIC = 16;

  /// from: static public final int FEEDBACK_HAPTIC
  ///
  /// Denotes haptic feedback.
  static const FEEDBACK_HAPTIC = 2;

  /// from: static public final int FEEDBACK_SPOKEN
  ///
  /// Denotes spoken feedback.
  static const FEEDBACK_SPOKEN = 1;

  /// from: static public final int FEEDBACK_VISUAL
  ///
  /// Denotes visual feedback.
  static const FEEDBACK_VISUAL = 8;

  /// from: static public final int FLAG_ENABLE_ACCESSIBILITY_VOLUME
  ///
  /// This flag requests that all audio tracks system-wide with
  /// android.media.AudioAttributes\#USAGE_ASSISTANCE_ACCESSIBILITY be controlled by the
  /// android.media.AudioManager\#STREAM_ACCESSIBILITY volume.
  static const FLAG_ENABLE_ACCESSIBILITY_VOLUME = 128;

  /// from: static public final int FLAG_INCLUDE_NOT_IMPORTANT_VIEWS
  ///
  /// If this flag is set the system will regard views that are not important
  /// for accessibility in addition to the ones that are important for accessibility.
  /// That is, views that are marked as not important for accessibility via
  /// View\#IMPORTANT_FOR_ACCESSIBILITY_NO or
  /// View\#IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS and views that are
  /// marked as potentially important for accessibility via
  /// View\#IMPORTANT_FOR_ACCESSIBILITY_AUTO for which the system has determined
  /// that are not important for accessibility, are reported while querying the window
  /// content and also the accessibility service will receive accessibility events from
  /// them.
  ///
  /// <strong>Note:</strong> For accessibility services targeting API version
  /// Build.VERSION_CODES\#JELLY_BEAN or higher this flag has to be explicitly
  /// set for the system to regard views that are not important for accessibility. For
  /// accessibility services targeting API version lower than
  /// Build.VERSION_CODES\#JELLY_BEAN this flag is ignored and all views are
  /// regarded for accessibility purposes.
  ///
  ///
  ///
  /// Usually views not important for accessibility are layout managers that do not
  /// react to user actions, do not draw any content, and do not have any special
  /// semantics in the context of the screen content. For example, a three by three
  /// grid can be implemented as three horizontal linear layouts and one vertical,
  /// or three vertical linear layouts and one horizontal, or one grid layout, etc.
  /// In this context the actual layout mangers used to achieve the grid configuration
  /// are not important, rather it is important that there are nine evenly distributed
  /// elements.
  ///
  ///
  static const FLAG_INCLUDE_NOT_IMPORTANT_VIEWS = 2;

  /// from: static public final int FLAG_REPORT_VIEW_IDS
  ///
  /// This flag requests that the AccessibilityNodeInfos obtained
  /// by an AccessibilityService contain the id of the source view.
  /// The source view id will be a fully qualified resource name of the
  /// form "package:id/name", for example "foo.bar:id/my_list", and it is
  /// useful for UI test automation. This flag is not set by default.
  static const FLAG_REPORT_VIEW_IDS = 16;

  /// from: static public final int FLAG_REQUEST_ACCESSIBILITY_BUTTON
  ///
  /// This flag indicates to the system that the accessibility service requests that an
  /// accessibility button be shown within the system's navigation area, if available.
  static const FLAG_REQUEST_ACCESSIBILITY_BUTTON = 256;

  /// from: static public final int FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY
  ///
  /// @deprecated No longer used
  static const FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY = 8;

  /// from: static public final int FLAG_REQUEST_FILTER_KEY_EVENTS
  ///
  /// This flag requests from the system to filter key events. If this flag
  /// is set the accessibility service will receive the key events before
  /// applications allowing it implement global shortcuts.
  ///
  /// Services that want to set this flag have to declare this capability
  /// in their meta-data by setting the attribute android.R.attr \#canRequestFilterKeyEvents canRequestFilterKeyEvents to true,
  /// otherwise this flag will be ignored. For how to declare the meta-data
  /// of a service refer to {@value AccessibilityService\#SERVICE_META_DATA}.
  ///
  ///
  ///@see android.R.styleable\#AccessibilityService_canRequestFilterKeyEvents
  static const FLAG_REQUEST_FILTER_KEY_EVENTS = 32;

  /// from: static public final int FLAG_REQUEST_FINGERPRINT_GESTURES
  ///
  /// This flag requests that all fingerprint gestures be sent to the accessibility service.
  ///
  /// Services that want to set this flag have to declare the capability
  /// to retrieve window content in their meta-data by setting the attribute
  /// android.R.attr\#canRequestFingerprintGestures to
  /// true, otherwise this flag will be ignored. For how to declare the meta-data
  /// of a service refer to {@value AccessibilityService\#SERVICE_META_DATA}.
  ///
  ///
  ///@see android.R.styleable\#AccessibilityService_canRequestFingerprintGestures
  ///@see AccessibilityService\#getFingerprintGestureController()
  static const FLAG_REQUEST_FINGERPRINT_GESTURES = 512;

  /// from: static public final int FLAG_REQUEST_TOUCH_EXPLORATION_MODE
  ///
  /// This flag requests that the system gets into touch exploration mode.
  /// In this mode a single finger moving on the screen behaves as a mouse
  /// pointer hovering over the user interface. The system will also detect
  /// certain gestures performed on the touch screen and notify this service.
  /// The system will enable touch exploration mode if there is at least one
  /// accessibility service that has this flag set. Hence, clearing this
  /// flag does not guarantee that the device will not be in touch exploration
  /// mode since there may be another enabled service that requested it.
  ///
  /// For accessibility services targeting API version higher than
  /// Build.VERSION_CODES\#JELLY_BEAN_MR1 that want to set
  /// this flag have to declare this capability in their meta-data by setting
  /// the attribute android.R.attr\#canRequestTouchExplorationMode canRequestTouchExplorationMode to true, otherwise this flag will
  /// be ignored. For how to declare the meta-data of a service refer to
  /// {@value AccessibilityService\#SERVICE_META_DATA}.
  ///
  ///
  ///
  /// Services targeting API version equal to or lower than
  /// Build.VERSION_CODES\#JELLY_BEAN_MR1 will work normally, i.e.
  /// the first time they are run, if this flag is specified, a dialog is
  /// shown to the user to confirm enabling explore by touch.
  ///
  ///
  ///@see android.R.styleable\#AccessibilityService_canRequestTouchExplorationMode
  static const FLAG_REQUEST_TOUCH_EXPLORATION_MODE = 4;

  /// from: static public final int FLAG_RETRIEVE_INTERACTIVE_WINDOWS
  ///
  /// This flag indicates to the system that the accessibility service wants
  /// to access content of all interactive windows. An interactive window is a
  /// window that has input focus or can be touched by a sighted user when explore
  /// by touch is not enabled. If this flag is not set your service will not receive
  /// android.view.accessibility.AccessibilityEvent\#TYPE_WINDOWS_CHANGED
  /// events, calling AccessibilityServiceAccessibilityService\#getWindows() AccessibilityService.getWindows() will return an empty list, and AccessibilityNodeInfo\#getWindow() AccessibilityNodeInfo.getWindow() will
  /// return null.
  ///
  /// Services that want to set this flag have to declare the capability
  /// to retrieve window content in their meta-data by setting the attribute
  /// android.R.attr\#canRetrieveWindowContent canRetrieveWindowContent to
  /// true, otherwise this flag will be ignored. For how to declare the meta-data
  /// of a service refer to {@value AccessibilityService\#SERVICE_META_DATA}.
  ///
  ///
  ///@see android.R.styleable\#AccessibilityService_canRetrieveWindowContent
  static const FLAG_RETRIEVE_INTERACTIVE_WINDOWS = 64;

  static final _id_eventTypes =
      jniAccessors.getFieldIDOf(_classRef, "eventTypes", "I");

  /// from: public int eventTypes
  ///
  /// The event types an AccessibilityService is interested in.
  ///
  ///   <strong>Can be dynamically set at runtime.</strong>
  ///
  ///
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_CLICKED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_LONG_CLICKED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_FOCUSED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_SELECTED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_CHANGED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_WINDOW_STATE_CHANGED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_NOTIFICATION_STATE_CHANGED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_EXPLORATION_GESTURE_START
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_EXPLORATION_GESTURE_END
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_HOVER_ENTER
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_HOVER_EXIT
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_SCROLLED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_SELECTION_CHANGED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_WINDOW_CONTENT_CHANGED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_INTERACTION_START
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_INTERACTION_END
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_ANNOUNCEMENT
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_GESTURE_DETECTION_START
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_GESTURE_DETECTION_END
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_ACCESSIBILITY_FOCUSED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_WINDOWS_CHANGED
  int get eventTypes => jniAccessors
      .getField(reference, _id_eventTypes, jni.JniType.intType)
      .integer;

  /// from: public int eventTypes
  ///
  /// The event types an AccessibilityService is interested in.
  ///
  ///   <strong>Can be dynamically set at runtime.</strong>
  ///
  ///
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_CLICKED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_LONG_CLICKED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_FOCUSED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_SELECTED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_CHANGED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_WINDOW_STATE_CHANGED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_NOTIFICATION_STATE_CHANGED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_EXPLORATION_GESTURE_START
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_EXPLORATION_GESTURE_END
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_HOVER_ENTER
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_HOVER_EXIT
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_SCROLLED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_SELECTION_CHANGED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_WINDOW_CONTENT_CHANGED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_INTERACTION_START
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_TOUCH_INTERACTION_END
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_ANNOUNCEMENT
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_GESTURE_DETECTION_START
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_GESTURE_DETECTION_END
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_ACCESSIBILITY_FOCUSED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY
  ///@see android.view.accessibility.AccessibilityEvent\#TYPE_WINDOWS_CHANGED
  set eventTypes(int value) =>
      jniEnv.SetIntField(reference, _id_eventTypes, value);

  static final _id_feedbackType =
      jniAccessors.getFieldIDOf(_classRef, "feedbackType", "I");

  /// from: public int feedbackType
  ///
  /// The feedback type an AccessibilityService provides.
  ///
  ///   <strong>Can be dynamically set at runtime.</strong>
  ///
  ///
  /// Value is either <code>0</code> or a combination of android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_AUDIBLE, android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_GENERIC, android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_HAPTIC, android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_SPOKEN, android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_VISUAL, and android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_BRAILLE
  ///@see \#FEEDBACK_AUDIBLE
  ///@see \#FEEDBACK_GENERIC
  ///@see \#FEEDBACK_HAPTIC
  ///@see \#FEEDBACK_SPOKEN
  ///@see \#FEEDBACK_VISUAL
  ///@see \#FEEDBACK_BRAILLE
  int get feedbackType => jniAccessors
      .getField(reference, _id_feedbackType, jni.JniType.intType)
      .integer;

  /// from: public int feedbackType
  ///
  /// The feedback type an AccessibilityService provides.
  ///
  ///   <strong>Can be dynamically set at runtime.</strong>
  ///
  ///
  /// Value is either <code>0</code> or a combination of android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_AUDIBLE, android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_GENERIC, android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_HAPTIC, android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_SPOKEN, android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_VISUAL, and android.accessibilityservice.AccessibilityServiceInfo\#FEEDBACK_BRAILLE
  ///@see \#FEEDBACK_AUDIBLE
  ///@see \#FEEDBACK_GENERIC
  ///@see \#FEEDBACK_HAPTIC
  ///@see \#FEEDBACK_SPOKEN
  ///@see \#FEEDBACK_VISUAL
  ///@see \#FEEDBACK_BRAILLE
  set feedbackType(int value) =>
      jniEnv.SetIntField(reference, _id_feedbackType, value);

  static final _id_flags = jniAccessors.getFieldIDOf(_classRef, "flags", "I");

  /// from: public int flags
  ///
  /// This field represents a set of flags used for configuring an
  /// AccessibilityService.
  ///
  ///   <strong>Can be dynamically set at runtime.</strong>
  ///
  ///
  ///@see \#DEFAULT
  ///@see \#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS
  ///@see \#FLAG_REQUEST_TOUCH_EXPLORATION_MODE
  ///@see \#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY
  ///@see \#FLAG_REQUEST_FILTER_KEY_EVENTS
  ///@see \#FLAG_REPORT_VIEW_IDS
  ///@see \#FLAG_RETRIEVE_INTERACTIVE_WINDOWS
  ///@see \#FLAG_ENABLE_ACCESSIBILITY_VOLUME
  ///@see \#FLAG_REQUEST_ACCESSIBILITY_BUTTON
  int get flags =>
      jniAccessors.getField(reference, _id_flags, jni.JniType.intType).integer;

  /// from: public int flags
  ///
  /// This field represents a set of flags used for configuring an
  /// AccessibilityService.
  ///
  ///   <strong>Can be dynamically set at runtime.</strong>
  ///
  ///
  ///@see \#DEFAULT
  ///@see \#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS
  ///@see \#FLAG_REQUEST_TOUCH_EXPLORATION_MODE
  ///@see \#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY
  ///@see \#FLAG_REQUEST_FILTER_KEY_EVENTS
  ///@see \#FLAG_REPORT_VIEW_IDS
  ///@see \#FLAG_RETRIEVE_INTERACTIVE_WINDOWS
  ///@see \#FLAG_ENABLE_ACCESSIBILITY_VOLUME
  ///@see \#FLAG_REQUEST_ACCESSIBILITY_BUTTON
  set flags(int value) => jniEnv.SetIntField(reference, _id_flags, value);

  static final _id_notificationTimeout =
      jniAccessors.getFieldIDOf(_classRef, "notificationTimeout", "J");

  /// from: public long notificationTimeout
  ///
  /// The timeout after the most recent event of a given type before an
  /// AccessibilityService is notified.
  ///
  ///   <strong>Can be dynamically set at runtime.</strong>.
  ///
  ///
  ///
  /// <strong>Note:</strong> The event notification timeout is useful to avoid propagating
  ///       events to the client too frequently since this is accomplished via an expensive
  ///       interprocess call. One can think of the timeout as a criteria to determine when
  ///       event generation has settled down.
  int get notificationTimeout => jniAccessors
      .getField(reference, _id_notificationTimeout, jni.JniType.longType)
      .long;

  /// from: public long notificationTimeout
  ///
  /// The timeout after the most recent event of a given type before an
  /// AccessibilityService is notified.
  ///
  ///   <strong>Can be dynamically set at runtime.</strong>.
  ///
  ///
  ///
  /// <strong>Note:</strong> The event notification timeout is useful to avoid propagating
  ///       events to the client too frequently since this is accomplished via an expensive
  ///       interprocess call. One can think of the timeout as a criteria to determine when
  ///       event generation has settled down.
  set notificationTimeout(int value) =>
      jniEnv.SetLongField(reference, _id_notificationTimeout, value);

  static final _id_packageNames = jniAccessors.getFieldIDOf(
      _classRef, "packageNames", "[Ljava/lang/String;");

  /// from: public java.lang.String[] packageNames
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The package names an AccessibilityService is interested in. Setting
  /// to <code>null</code> is equivalent to all packages.
  ///
  ///   <strong>Can be dynamically set at runtime.</strong>
  ///
  ///
  jni.JniObject get packageNames => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_packageNames, jni.JniType.objectType)
      .object);

  /// from: public java.lang.String[] packageNames
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The package names an AccessibilityService is interested in. Setting
  /// to <code>null</code> is equivalent to all packages.
  ///
  ///   <strong>Can be dynamically set at runtime.</strong>
  ///
  ///
  set packageNames(jni.JniObject value) =>
      jniEnv.SetObjectField(reference, _id_packageNames, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new instance.
  AccessibilityServiceInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getId =
      jniAccessors.getMethodIDOf(_classRef, "getId", "()Ljava/lang/String;");

  /// from: public java.lang.String getId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The accessibility service id.
  ///
  ///   <strong>Generated by the system.</strong>
  ///
  ///
  ///@return The id.
  jni.JniString getId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getId, jni.JniType.objectType, []).object);

  static final _id_getResolveInfo = jniAccessors.getMethodIDOf(
      _classRef, "getResolveInfo", "()Landroid/content/pm/ResolveInfo;");

  /// from: public android.content.pm.ResolveInfo getResolveInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The service ResolveInfo.
  ///
  ///   <strong>Generated by the system.</strong>
  ///
  ///
  ///@return The info.
  resolveinfo_.ResolveInfo getResolveInfo() =>
      resolveinfo_.ResolveInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getResolveInfo, jni.JniType.objectType, []).object);

  static final _id_getSettingsActivityName = jniAccessors.getMethodIDOf(
      _classRef, "getSettingsActivityName", "()Ljava/lang/String;");

  /// from: public java.lang.String getSettingsActivityName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The settings activity name.
  ///
  ///    <strong>Statically set from
  ///    AccessibilityService\#SERVICE_META_DATA meta-data.</strong>
  ///
  ///
  ///@return The settings activity name.
  jni.JniString getSettingsActivityName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getSettingsActivityName, jni.JniType.objectType, []).object);

  static final _id_getCanRetrieveWindowContent = jniAccessors.getMethodIDOf(
      _classRef, "getCanRetrieveWindowContent", "()Z");

  /// from: public boolean getCanRetrieveWindowContent()
  ///
  /// Whether this service can retrieve the current window's content.
  ///
  ///    <strong>Statically set from
  ///    AccessibilityService\#SERVICE_META_DATA meta-data.</strong>
  ///
  ///
  ///@return True if window content can be retrieved.
  ///@deprecated Use \#getCapabilities().
  bool getCanRetrieveWindowContent() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getCanRetrieveWindowContent,
      jni.JniType.booleanType, []).boolean;

  static final _id_getCapabilities =
      jniAccessors.getMethodIDOf(_classRef, "getCapabilities", "()I");

  /// from: public int getCapabilities()
  ///
  /// Returns the bit mask of capabilities this accessibility service has such as
  /// being able to retrieve the active window content, etc.
  ///@return The capability bit mask.
  ///@see \#CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT
  ///@see \#CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION
  ///@see \#CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS
  ///@see \#CAPABILITY_CAN_CONTROL_MAGNIFICATION
  ///@see \#CAPABILITY_CAN_PERFORM_GESTURES
  int getCapabilities() => jniAccessors.callMethodWithArgs(
      reference, _id_getCapabilities, jni.JniType.intType, []).integer;

  static final _id_loadSummary = jniAccessors.getMethodIDOf(
      _classRef,
      "loadSummary",
      "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence loadSummary(android.content.pm.PackageManager packageManager)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The localized summary of the accessibility service.
  ///
  ///    <strong>Statically set from
  ///    AccessibilityService\#SERVICE_META_DATA meta-data.</strong>
  ///
  ///
  ///@return The localized summary if available, and {@code null} if a summary
  /// has not been provided.
  jni.JniObject loadSummary(packagemanager_.PackageManager packageManager) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_loadSummary,
          jni.JniType.objectType,
          [packageManager.reference]).object);

  static final _id_getDescription = jniAccessors.getMethodIDOf(
      _classRef, "getDescription", "()Ljava/lang/String;");

  /// from: public java.lang.String getDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the non-localized description of the accessibility service.
  ///
  ///    <strong>Statically set from
  ///    AccessibilityService\#SERVICE_META_DATA meta-data.</strong>
  ///
  ///
  ///@return The description.
  ///@deprecated Use \#loadDescription(PackageManager).
  jni.JniString getDescription() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDescription, jni.JniType.objectType, []).object);

  static final _id_loadDescription = jniAccessors.getMethodIDOf(
      _classRef,
      "loadDescription",
      "(Landroid/content/pm/PackageManager;)Ljava/lang/String;");

  /// from: public java.lang.String loadDescription(android.content.pm.PackageManager packageManager)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The localized description of the accessibility service.
  ///
  ///    <strong>Statically set from
  ///    AccessibilityService\#SERVICE_META_DATA meta-data.</strong>
  ///
  ///
  ///@return The localized description.
  jni.JniString loadDescription(
          packagemanager_.PackageManager packageManager) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_loadDescription,
          jni.JniType.objectType,
          [packageManager.reference]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// {@inheritDoc}
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flagz)
  void writeToParcel(parcel_.Parcel parcel, int flagz) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flagz]).check();

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_feedbackTypeToString = jniAccessors.getStaticMethodIDOf(
      _classRef, "feedbackTypeToString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String feedbackTypeToString(int feedbackType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the string representation of a feedback type. For example,
  /// \#FEEDBACK_SPOKEN is represented by the string FEEDBACK_SPOKEN.
  ///@param feedbackType The feedback type.
  ///@return The string representation.
  static jni.JniString feedbackTypeToString(int feedbackType) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_feedbackTypeToString,
          jni.JniType.objectType,
          [feedbackType]).object);

  static final _id_flagToString = jniAccessors.getStaticMethodIDOf(
      _classRef, "flagToString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String flagToString(int flag)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the string representation of a flag. For example,
  /// \#DEFAULT is represented by the string DEFAULT.
  ///@param flag The flag.
  ///@return The string representation.
  static jni.JniString flagToString(int flag) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_flagToString, jni.JniType.objectType, [flag]).object);

  static final _id_capabilityToString = jniAccessors.getStaticMethodIDOf(
      _classRef, "capabilityToString", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String capabilityToString(int capability)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the string representation of a capability. For example,
  /// \#CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT is represented
  /// by the string CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT.
  ///@param capability The capability.
  ///@return The string representation.
  static jni.JniString capabilityToString(int capability) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_capabilityToString, jni.JniType.objectType, [capability]).object);
}
