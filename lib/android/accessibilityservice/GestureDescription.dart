// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../graphics/Path.dart" as path_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.accessibilityservice.GestureDescription
///
/// Accessibility services with the
/// android.R.styleable\#AccessibilityService_canPerformGestures property can dispatch
/// gestures. This class describes those gestures. Gestures are made up of one or more strokes.
/// Gestures are immutable once built.
///
/// Spatial dimensions throughout are in screen pixels. Time is measured in milliseconds.
class GestureDescription extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/accessibilityservice/GestureDescription");
  GestureDescription.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GestureDescription()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getMaxStrokeCount =
      jniAccessors.getStaticMethodIDOf(_classRef, "getMaxStrokeCount", "()I");

  /// from: static public int getMaxStrokeCount()
  ///
  /// Get the upper limit for the number of strokes a gesture may contain.
  ///@return The maximum number of strokes.
  static int getMaxStrokeCount() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_getMaxStrokeCount, jni.JniType.intType, []).integer;

  static final _id_getMaxGestureDuration = jniAccessors.getStaticMethodIDOf(
      _classRef, "getMaxGestureDuration", "()J");

  /// from: static public long getMaxGestureDuration()
  ///
  /// Get the upper limit on a gesture's duration.
  ///@return The maximum duration in milliseconds.
  static int getMaxGestureDuration() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_getMaxGestureDuration, jni.JniType.longType, []).long;

  static final _id_getStrokeCount =
      jniAccessors.getMethodIDOf(_classRef, "getStrokeCount", "()I");

  /// from: public int getStrokeCount()
  ///
  /// Get the number of stroke in the gesture.
  ///@return the number of strokes in this gesture
  int getStrokeCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getStrokeCount, jni.JniType.intType, []).integer;

  static final _id_getStroke = jniAccessors.getMethodIDOf(
      _classRef,
      "getStroke",
      "(I)Landroid/accessibilityservice/GestureDescription\$StrokeDescription;");

  /// from: public android.accessibilityservice.GestureDescription.StrokeDescription getStroke(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Read a stroke from the gesture
  ///@param index the index of the stroke
  ///
  /// Value is 0 or greater
  ///@return A description of the stroke.
  GestureDescription_StrokeDescription getStroke(int index) =>
      GestureDescription_StrokeDescription.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getStroke, jni.JniType.objectType,
              [index]).object);
}

/// from: android.accessibilityservice.GestureDescription$StrokeDescription
///
/// Immutable description of stroke that can be part of a gesture.
class GestureDescription_StrokeDescription extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/accessibilityservice/GestureDescription\$StrokeDescription");
  GestureDescription_StrokeDescription.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/Path;JJ)V");

  /// from: public void <init>(android.graphics.Path path, long startTime, long duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param path The path to follow. Must have exactly one contour. The bounds of the path
  /// must not be negative. The path must not be empty. If the path has zero length
  /// (for example, a single {@code moveTo()}), the stroke is a touch that doesn't move.
  /// This value must never be {@code null}.
  ///@param startTime The time, in milliseconds, from the time the gesture starts to the
  /// time the stroke should start. Must not be negative.
  /// Value is 0 or greater
  ///@param duration The duration, in milliseconds, the stroke takes to traverse the path.
  /// Must be positive.
  ///
  /// Value is 0 or greater
  GestureDescription_StrokeDescription(
      path_.Path path, int startTime, int duration)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [path.reference, startTime, duration]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/graphics/Path;JJZ)V");

  /// from: public void <init>(android.graphics.Path path, long startTime, long duration, boolean willContinue)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param path The path to follow. Must have exactly one contour. The bounds of the path
  /// must not be negative. The path must not be empty. If the path has zero length
  /// (for example, a single {@code moveTo()}), the stroke is a touch that doesn't move.
  /// This value must never be {@code null}.
  ///@param startTime The time, in milliseconds, from the time the gesture starts to the
  /// time the stroke should start. Must not be negative.
  /// Value is 0 or greater
  ///@param duration The duration, in milliseconds, the stroke takes to traverse the path.
  /// Must be positive.
  /// Value is 0 or greater
  ///@param willContinue {@code true} if this stroke will be continued by one in the
  /// next gesture {@code false} otherwise. Continued strokes keep their pointers down when
  /// the gesture completes.
  GestureDescription_StrokeDescription.ctor1(
      path_.Path path, int startTime, int duration, bool willContinue)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [path.reference, startTime, duration, willContinue]).object);

  static final _id_getPath = jniAccessors.getMethodIDOf(
      _classRef, "getPath", "()Landroid/graphics/Path;");

  /// from: public android.graphics.Path getPath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Retrieve a copy of the path for this stroke
  ///@return A copy of the path
  path_.Path getPath() => path_.Path.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getPath, jni.JniType.objectType, []).object);

  static final _id_getStartTime =
      jniAccessors.getMethodIDOf(_classRef, "getStartTime", "()J");

  /// from: public long getStartTime()
  ///
  /// Get the stroke's start time
  ///@return the start time for this stroke.
  int getStartTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getStartTime, jni.JniType.longType, []).long;

  static final _id_getDuration =
      jniAccessors.getMethodIDOf(_classRef, "getDuration", "()J");

  /// from: public long getDuration()
  ///
  /// Get the stroke's duration
  ///@return the duration for this stroke
  int getDuration() => jniAccessors.callMethodWithArgs(
      reference, _id_getDuration, jni.JniType.longType, []).long;

  static final _id_continueStroke = jniAccessors.getMethodIDOf(
      _classRef,
      "continueStroke",
      "(Landroid/graphics/Path;JJZ)Landroid/accessibilityservice/GestureDescription\$StrokeDescription;");

  /// from: public android.accessibilityservice.GestureDescription.StrokeDescription continueStroke(android.graphics.Path path, long startTime, long duration, boolean willContinue)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new stroke that will continue this one. This is only possible if this stroke
  /// will continue.
  ///@param path The path for the stroke that continues this one. The starting point of
  ///             this path must match the ending point of the stroke it continues.
  ///@param startTime The time, in milliseconds, from the time the gesture starts to the
  ///                  time this stroke should start. Must not be negative. This time is from
  ///                  the start of the new gesture, not the one being continued.
  ///@param duration The duration for the new stroke. Must not be negative.
  ///@param willContinue {@code true} if this stroke will be continued by one in the
  ///             next gesture {@code false} otherwise.
  ///@return
  GestureDescription_StrokeDescription continueStroke(
          path_.Path path, int startTime, int duration, bool willContinue) =>
      GestureDescription_StrokeDescription.fromRef(jniAccessors
          .callMethodWithArgs(
              reference,
              _id_continueStroke,
              jni.JniType.objectType,
              [path.reference, startTime, duration, willContinue]).object);

  static final _id_willContinue =
      jniAccessors.getMethodIDOf(_classRef, "willContinue", "()Z");

  /// from: public boolean willContinue()
  ///
  /// Check if this stroke is marked to continue in the next gesture.
  ///@return {@code true} if the stroke is to be continued.
  bool willContinue() => jniAccessors.callMethodWithArgs(
      reference, _id_willContinue, jni.JniType.booleanType, []).boolean;
}

/// from: android.accessibilityservice.GestureDescription$Builder
///
/// Builder for a {@code GestureDescription}
class GestureDescription_Builder extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/accessibilityservice/GestureDescription\$Builder");
  GestureDescription_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GestureDescription_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_addStroke = jniAccessors.getMethodIDOf(
      _classRef,
      "addStroke",
      "(Landroid/accessibilityservice/GestureDescription\$StrokeDescription;)Landroid/accessibilityservice/GestureDescription\$Builder;");

  /// from: public android.accessibilityservice.GestureDescription.Builder addStroke(android.accessibilityservice.GestureDescription.StrokeDescription strokeDescription)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Add a stroke to the gesture description. Up to
  /// GestureDescription\#getMaxStrokeCount() paths may be
  /// added to a gesture, and the total gesture duration (earliest path start time to latest
  /// path end time) may not exceed GestureDescription\#getMaxGestureDuration().
  ///@param strokeDescription the stroke to add.
  ///
  /// This value must never be {@code null}.
  ///@return this
  GestureDescription_Builder addStroke(
          GestureDescription_StrokeDescription strokeDescription) =>
      GestureDescription_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addStroke,
          jni.JniType.objectType,
          [strokeDescription.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(_classRef, "build",
      "()Landroid/accessibilityservice/GestureDescription;");

  /// from: public android.accessibilityservice.GestureDescription build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GestureDescription build() =>
      GestureDescription.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
