// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Handler.dart" as handler_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.accessibilityservice.FingerprintGestureController
///
/// An AccessibilityService can capture gestures performed on a device's fingerprint
/// sensor, as long as the device has a sensor capable of detecting gestures.
///
/// This capability must be declared by the service as
/// AccessibilityServiceInfo\#CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES. It also requires
/// the permission android.Manifest.permission\#USE_FINGERPRINT.
///
/// Because capturing fingerprint gestures may have side effects, services with the capability only
/// capture gestures when AccessibilityServiceInfo\#FLAG_REQUEST_FINGERPRINT_GESTURES is set.
///
/// <strong>Note: </strong>The fingerprint sensor is used for authentication in critical use cases,
/// so services must carefully design their user's experience when performing gestures on the sensor.
/// When the sensor is in use by an app, for example, when authenticating or enrolling a user,
/// the sensor will not detect gestures. Services need to ensure that users understand when the
/// sensor is in-use for authentication to prevent users from authenticating unintentionally when
/// trying to interact with the service. They can use
/// FingerprintGestureCallback\#onGestureDetectionAvailabilityChanged(boolean) to learn when
/// gesture detection becomes unavailable.
///
/// Multiple accessibility services may listen for fingerprint gestures simultaneously, so services
/// should provide a way for the user to disable the use of this feature so multiple services don't
/// conflict with each other.
///
/// {@see android.hardware.fingerprint.FingerprintManager\#isHardwareDetected}
class FingerprintGestureController extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/accessibilityservice/FingerprintGestureController");
  FingerprintGestureController.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int FINGERPRINT_GESTURE_SWIPE_DOWN
  ///
  /// Identifier for a swipe down on the fingerprint sensor
  static const FINGERPRINT_GESTURE_SWIPE_DOWN = 8;

  /// from: static public final int FINGERPRINT_GESTURE_SWIPE_LEFT
  ///
  /// Identifier for a swipe left on the fingerprint sensor
  static const FINGERPRINT_GESTURE_SWIPE_LEFT = 2;

  /// from: static public final int FINGERPRINT_GESTURE_SWIPE_RIGHT
  ///
  /// Identifier for a swipe right on the fingerprint sensor
  static const FINGERPRINT_GESTURE_SWIPE_RIGHT = 1;

  /// from: static public final int FINGERPRINT_GESTURE_SWIPE_UP
  ///
  /// Identifier for a swipe up on the fingerprint sensor
  static const FINGERPRINT_GESTURE_SWIPE_UP = 4;

  static final _id_isGestureDetectionAvailable = jniAccessors.getMethodIDOf(
      _classRef, "isGestureDetectionAvailable", "()Z");

  /// from: public boolean isGestureDetectionAvailable()
  ///
  /// Gets if the fingerprint sensor's gesture detection is available.
  ///@return {@code true} if the sensor's gesture detection is available. {@code false} if it is
  /// not currently detecting gestures (for example, if it is enrolling a finger).
  bool isGestureDetectionAvailable() => jniAccessors.callMethodWithArgs(
      reference,
      _id_isGestureDetectionAvailable,
      jni.JniType.booleanType, []).boolean;

  static final _id_registerFingerprintGestureCallback = jniAccessors.getMethodIDOf(
      _classRef,
      "registerFingerprintGestureCallback",
      "(Landroid/accessibilityservice/FingerprintGestureController\$FingerprintGestureCallback;Landroid/os/Handler;)V");

  /// from: public void registerFingerprintGestureCallback(android.accessibilityservice.FingerprintGestureController.FingerprintGestureCallback callback, android.os.Handler handler)
  ///
  /// Register a callback to be informed of fingerprint sensor gesture events.
  ///@param callback The listener to be added.
  /// This value must never be {@code null}.
  ///@param handler The handler to use for the callback. If {@code null}, callbacks will happen
  /// on the service's main thread.
  ///
  /// This value may be {@code null}.
  void registerFingerprintGestureCallback(
          FingerprintGestureController_FingerprintGestureCallback callback,
          handler_.Handler handler) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_registerFingerprintGestureCallback,
          jni.JniType.voidType,
          [callback.reference, handler.reference]).check();

  static final _id_unregisterFingerprintGestureCallback =
      jniAccessors.getMethodIDOf(
          _classRef,
          "unregisterFingerprintGestureCallback",
          "(Landroid/accessibilityservice/FingerprintGestureController\$FingerprintGestureCallback;)V");

  /// from: public void unregisterFingerprintGestureCallback(android.accessibilityservice.FingerprintGestureController.FingerprintGestureCallback callback)
  ///
  /// Unregister a listener added with \#registerFingerprintGestureCallback.
  ///@param callback The callback to remove. Removing a callback that was never added has no
  /// effect.
  void unregisterFingerprintGestureCallback(
          FingerprintGestureController_FingerprintGestureCallback callback) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_unregisterFingerprintGestureCallback,
          jni.JniType.voidType,
          [callback.reference]).check();
}

/// from: android.accessibilityservice.FingerprintGestureController$FingerprintGestureCallback
///
/// Class that is called back when fingerprint gestures are being used for accessibility.
class FingerprintGestureController_FingerprintGestureCallback
    extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/accessibilityservice/FingerprintGestureController\$FingerprintGestureCallback");
  FingerprintGestureController_FingerprintGestureCallback.fromRef(
      jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  FingerprintGestureController_FingerprintGestureCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onGestureDetectionAvailabilityChanged =
      jniAccessors.getMethodIDOf(
          _classRef, "onGestureDetectionAvailabilityChanged", "(Z)V");

  /// from: public void onGestureDetectionAvailabilityChanged(boolean available)
  ///
  /// Called when the fingerprint sensor's gesture detection becomes available or unavailable.
  ///@param available Whether or not the sensor's gesture detection is now available.
  void onGestureDetectionAvailabilityChanged(bool available) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onGestureDetectionAvailabilityChanged,
          jni.JniType.voidType,
          [available]).check();

  static final _id_onGestureDetected =
      jniAccessors.getMethodIDOf(_classRef, "onGestureDetected", "(I)V");

  /// from: public void onGestureDetected(int gesture)
  ///
  /// Called when the fingerprint sensor detects gestures.
  ///@param gesture The id of the gesture that was detected. For example,
  /// \#FINGERPRINT_GESTURE_SWIPE_RIGHT.
  void onGestureDetected(int gesture) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onGestureDetected,
      jni.JniType.voidType,
      [gesture]).check();
}
