// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Observable.dart" as observable_;

import "ContentObserver.dart" as contentobserver_;

import "../net/Uri.dart" as uri_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.database.ContentObservable
///
/// A specialization of Observable for ContentObserver
/// that provides methods for sending notifications to a list of
/// ContentObserver objects.
class ContentObservable extends observable_.Observable {
  static final _classRef =
      jniAccessors.getClassOf("android/database/ContentObservable");
  ContentObservable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ContentObservable()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_registerObserver1 = jniAccessors.getMethodIDOf(
      _classRef, "registerObserver", "(Landroid/database/ContentObserver;)V");

  /// from: public void registerObserver(android.database.ContentObserver observer)
  void registerObserver1(contentobserver_.ContentObserver observer) =>
      jniAccessors.callMethodWithArgs(reference, _id_registerObserver1,
          jni.JniType.voidType, [observer.reference]).check();

  static final _id_dispatchChange =
      jniAccessors.getMethodIDOf(_classRef, "dispatchChange", "(Z)V");

  /// from: public void dispatchChange(boolean selfChange)
  ///
  /// Invokes ContentObserver\#dispatchChange(boolean) on each observer.
  ///
  /// If <code>selfChange</code> is true, only delivers the notification
  /// to the observer if it has indicated that it wants to receive self-change
  /// notifications by implementing ContentObserver\#deliverSelfNotifications
  /// to return true.
  ///
  ///
  ///@param selfChange True if this is a self-change notification.
  ///@deprecated Use \#dispatchChange(boolean, Uri) instead.
  void dispatchChange(bool selfChange) => jniAccessors.callMethodWithArgs(
      reference,
      _id_dispatchChange,
      jni.JniType.voidType,
      [selfChange]).check();

  static final _id_dispatchChange1 = jniAccessors.getMethodIDOf(
      _classRef, "dispatchChange", "(ZLandroid/net/Uri;)V");

  /// from: public void dispatchChange(boolean selfChange, android.net.Uri uri)
  ///
  /// Invokes ContentObserver\#dispatchChange(boolean, Uri) on each observer.
  /// Includes the changed content Uri when available.
  ///
  /// If <code>selfChange</code> is true, only delivers the notification
  /// to the observer if it has indicated that it wants to receive self-change
  /// notifications by implementing ContentObserver\#deliverSelfNotifications
  /// to return true.
  ///
  ///
  ///@param selfChange True if this is a self-change notification.
  ///@param uri The Uri of the changed content, or null if unknown.
  void dispatchChange1(bool selfChange, uri_.Uri uri) =>
      jniAccessors.callMethodWithArgs(reference, _id_dispatchChange1,
          jni.JniType.voidType, [selfChange, uri.reference]).check();

  static final _id_notifyChange =
      jniAccessors.getMethodIDOf(_classRef, "notifyChange", "(Z)V");

  /// from: public void notifyChange(boolean selfChange)
  ///
  /// Invokes ContentObserver\#onChange on each observer.
  ///@param selfChange True if this is a self-change notification.
  ///@deprecated Use \#dispatchChange instead.
  void notifyChange(bool selfChange) => jniAccessors.callMethodWithArgs(
      reference, _id_notifyChange, jni.JniType.voidType, [selfChange]).check();
}
