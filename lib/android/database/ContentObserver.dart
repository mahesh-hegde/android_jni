// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Handler.dart" as handler_;

import "../net/Uri.dart" as uri_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.database.ContentObserver
///
/// Receives call backs for changes to content.
/// Must be implemented by objects which are added to a ContentObservable.
class ContentObserver extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/database/ContentObserver");
  ContentObserver.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/os/Handler;)V");

  /// from: public void <init>(android.os.Handler handler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a content observer.
  ///@param handler The handler to run \#onChange on, or null if none.
  ContentObserver(handler_.Handler handler)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [handler.reference]).object);

  static final _id_deliverSelfNotifications =
      jniAccessors.getMethodIDOf(_classRef, "deliverSelfNotifications", "()Z");

  /// from: public boolean deliverSelfNotifications()
  ///
  /// Returns true if this observer is interested receiving self-change notifications.
  ///
  /// Subclasses should override this method to indicate whether the observer
  /// is interested in receiving notifications for changes that it made to the
  /// content itself.
  ///@return True if self-change notifications should be delivered to the observer.
  bool deliverSelfNotifications() => jniAccessors.callMethodWithArgs(reference,
      _id_deliverSelfNotifications, jni.JniType.booleanType, []).boolean;

  static final _id_onChange =
      jniAccessors.getMethodIDOf(_classRef, "onChange", "(Z)V");

  /// from: public void onChange(boolean selfChange)
  ///
  /// This method is called when a content change occurs.
  ///
  /// Subclasses should override this method to handle content changes.
  ///
  ///
  ///@param selfChange True if this is a self-change notification.
  void onChange(bool selfChange) => jniAccessors.callMethodWithArgs(
      reference, _id_onChange, jni.JniType.voidType, [selfChange]).check();

  static final _id_onChange1 = jniAccessors.getMethodIDOf(
      _classRef, "onChange", "(ZLandroid/net/Uri;)V");

  /// from: public void onChange(boolean selfChange, android.net.Uri uri)
  ///
  /// This method is called when a content change occurs.
  /// Includes the changed content Uri when available.
  ///
  /// Subclasses should override this method to handle content changes.
  /// To ensure correct operation on older versions of the framework that
  /// did not provide a Uri argument, applications should also implement
  /// the \#onChange(boolean) overload of this method whenever they
  /// implement the \#onChange(boolean, Uri) overload.
  ///
  ///
  /// Example implementation:
  /// <pre><code>
  /// // Implement the onChange(boolean) method to delegate the change notification to
  /// // the onChange(boolean, Uri) method to ensure correct operation on older versions
  /// // of the framework that did not have the onChange(boolean, Uri) method.
  /// {@literal @Override}
  /// public void onChange(boolean selfChange) {
  ///     onChange(selfChange, null);
  /// }
  ///
  /// // Implement the onChange(boolean, Uri) method to take advantage of the new Uri argument.
  /// {@literal @Override}
  /// public void onChange(boolean selfChange, Uri uri) {
  ///     // Handle change.
  /// }
  /// </code></pre>
  ///
  ///
  ///@param selfChange True if this is a self-change notification.
  ///@param uri The Uri of the changed content, or null if unknown.
  void onChange1(bool selfChange, uri_.Uri uri) =>
      jniAccessors.callMethodWithArgs(reference, _id_onChange1,
          jni.JniType.voidType, [selfChange, uri.reference]).check();

  static final _id_dispatchChange =
      jniAccessors.getMethodIDOf(_classRef, "dispatchChange", "(Z)V");

  /// from: public final void dispatchChange(boolean selfChange)
  ///
  /// Dispatches a change notification to the observer.
  ///
  /// If a Handler was supplied to the ContentObserver constructor,
  /// then a call to the \#onChange method is posted to the handler's message queue.
  /// Otherwise, the \#onChange method is invoked immediately on this thread.
  ///
  ///
  ///@param selfChange True if this is a self-change notification.
  ///@deprecated Use \#dispatchChange(boolean, Uri) instead.
  void dispatchChange(bool selfChange) => jniAccessors.callMethodWithArgs(
      reference,
      _id_dispatchChange,
      jni.JniType.voidType,
      [selfChange]).check();

  static final _id_dispatchChange1 = jniAccessors.getMethodIDOf(
      _classRef, "dispatchChange", "(ZLandroid/net/Uri;)V");

  /// from: public final void dispatchChange(boolean selfChange, android.net.Uri uri)
  ///
  /// Dispatches a change notification to the observer.
  /// Includes the changed content Uri when available.
  ///
  /// If a Handler was supplied to the ContentObserver constructor,
  /// then a call to the \#onChange method is posted to the handler's message queue.
  /// Otherwise, the \#onChange method is invoked immediately on this thread.
  ///
  ///
  ///@param selfChange True if this is a self-change notification.
  ///@param uri The Uri of the changed content, or null if unknown.
  void dispatchChange1(bool selfChange, uri_.Uri uri) =>
      jniAccessors.callMethodWithArgs(reference, _id_dispatchChange1,
          jni.JniType.voidType, [selfChange, uri.reference]).check();
}
