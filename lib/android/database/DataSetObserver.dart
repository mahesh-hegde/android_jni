// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.database.DataSetObserver
///
/// Receives call backs when a data set has been changed, or made invalid. The typically data sets
/// that are observed are Cursors or android.widget.Adapters.
/// DataSetObserver must be implemented by objects which are added to a DataSetObservable.
class DataSetObserver extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/database/DataSetObserver");
  DataSetObserver.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  DataSetObserver()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onChanged =
      jniAccessors.getMethodIDOf(_classRef, "onChanged", "()V");

  /// from: public void onChanged()
  ///
  /// This method is called when the entire data set has changed,
  /// most likely through a call to Cursor\#requery() on a Cursor.
  void onChanged() => jniAccessors.callMethodWithArgs(
      reference, _id_onChanged, jni.JniType.voidType, []).check();

  static final _id_onInvalidated =
      jniAccessors.getMethodIDOf(_classRef, "onInvalidated", "()V");

  /// from: public void onInvalidated()
  ///
  /// This method is called when the entire data becomes invalid,
  /// most likely through a call to Cursor\#deactivate() or Cursor\#close() on a
  /// Cursor.
  void onInvalidated() => jniAccessors.callMethodWithArgs(
      reference, _id_onInvalidated, jni.JniType.voidType, []).check();
}
