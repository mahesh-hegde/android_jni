// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.database.sqlite.SQLiteClosable
///
/// An object created from a SQLiteDatabase that can be closed.
///
/// This class implements a primitive reference counting scheme for database objects.
class SQLiteClosable extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/database/sqlite/SQLiteClosable");
  SQLiteClosable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SQLiteClosable()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onAllReferencesReleased =
      jniAccessors.getMethodIDOf(_classRef, "onAllReferencesReleased", "()V");

  /// from: protected abstract void onAllReferencesReleased()
  ///
  /// Called when the last reference to the object was released by
  /// a call to \#releaseReference() or \#close().
  void onAllReferencesReleased() => jniAccessors.callMethodWithArgs(
      reference, _id_onAllReferencesReleased, jni.JniType.voidType, []).check();

  static final _id_onAllReferencesReleasedFromContainer = jniAccessors
      .getMethodIDOf(_classRef, "onAllReferencesReleasedFromContainer", "()V");

  /// from: protected void onAllReferencesReleasedFromContainer()
  ///
  /// Called when the last reference to the object was released by
  /// a call to \#releaseReferenceFromContainer().
  ///@deprecated Do not use.
  void onAllReferencesReleasedFromContainer() =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onAllReferencesReleasedFromContainer,
          jni.JniType.voidType, []).check();

  static final _id_acquireReference =
      jniAccessors.getMethodIDOf(_classRef, "acquireReference", "()V");

  /// from: public void acquireReference()
  ///
  /// Acquires a reference to the object.
  ///@throws IllegalStateException if the last reference to the object has already
  /// been released.
  void acquireReference() => jniAccessors.callMethodWithArgs(
      reference, _id_acquireReference, jni.JniType.voidType, []).check();

  static final _id_releaseReference =
      jniAccessors.getMethodIDOf(_classRef, "releaseReference", "()V");

  /// from: public void releaseReference()
  ///
  /// Releases a reference to the object, closing the object if the last reference
  /// was released.
  ///@see \#onAllReferencesReleased()
  void releaseReference() => jniAccessors.callMethodWithArgs(
      reference, _id_releaseReference, jni.JniType.voidType, []).check();

  static final _id_releaseReferenceFromContainer = jniAccessors.getMethodIDOf(
      _classRef, "releaseReferenceFromContainer", "()V");

  /// from: public void releaseReferenceFromContainer()
  ///
  /// Releases a reference to the object that was owned by the container of the object,
  /// closing the object if the last reference was released.
  ///@see \#onAllReferencesReleasedFromContainer()
  ///@deprecated Do not use.
  void releaseReferenceFromContainer() => jniAccessors.callMethodWithArgs(
      reference,
      _id_releaseReferenceFromContainer,
      jni.JniType.voidType, []).check();

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  ///
  /// Releases a reference to the object, closing the object if the last reference
  /// was released.
  ///
  /// Calling this method is equivalent to calling \#releaseReference.
  ///@see \#releaseReference()
  ///@see \#onAllReferencesReleased()
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();
}
