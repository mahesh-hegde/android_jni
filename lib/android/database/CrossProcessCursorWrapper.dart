// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "CursorWrapper.dart" as cursorwrapper_;

import "Cursor.dart" as cursor_;

import "CursorWindow.dart" as cursorwindow_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.database.CrossProcessCursorWrapper
///
/// Cursor wrapper that implements CrossProcessCursor.
///
/// If the wrapped cursor implements CrossProcessCursor, then the wrapper
/// delegates \#fillWindow, \#getWindow() and \#onMove to it.
/// Otherwise, the wrapper provides default implementations of these methods that
/// traverse the contents of the cursor similar to AbstractCursor\#fillWindow.
///
///
/// This wrapper can be used to adapt an ordinary Cursor into a
/// CrossProcessCursor.
///
///
class CrossProcessCursorWrapper extends cursorwrapper_.CursorWrapper {
  static final _classRef =
      jniAccessors.getClassOf("android/database/CrossProcessCursorWrapper");
  CrossProcessCursorWrapper.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/database/Cursor;)V");

  /// from: public void <init>(android.database.Cursor cursor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a cross process cursor wrapper.
  ///@param cursor The underlying cursor to wrap.
  CrossProcessCursorWrapper(cursor_.Cursor cursor)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [cursor.reference]).object);

  static final _id_fillWindow = jniAccessors.getMethodIDOf(
      _classRef, "fillWindow", "(ILandroid/database/CursorWindow;)V");

  /// from: public void fillWindow(int position, android.database.CursorWindow window)
  void fillWindow(int position, cursorwindow_.CursorWindow window) =>
      jniAccessors.callMethodWithArgs(reference, _id_fillWindow,
          jni.JniType.voidType, [position, window.reference]).check();

  static final _id_getWindow = jniAccessors.getMethodIDOf(
      _classRef, "getWindow", "()Landroid/database/CursorWindow;");

  /// from: public android.database.CursorWindow getWindow()
  /// The returned object must be deleted after use, by calling the `delete` method.
  cursorwindow_.CursorWindow getWindow() =>
      cursorwindow_.CursorWindow.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getWindow, jni.JniType.objectType, []).object);

  static final _id_onMove =
      jniAccessors.getMethodIDOf(_classRef, "onMove", "(II)Z");

  /// from: public boolean onMove(int oldPosition, int newPosition)
  bool onMove(int oldPosition, int newPosition) =>
      jniAccessors.callMethodWithArgs(reference, _id_onMove,
          jni.JniType.booleanType, [oldPosition, newPosition]).boolean;
}
