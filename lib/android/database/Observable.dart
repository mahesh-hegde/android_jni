// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.database.Observable
///
/// Provides methods for registering or unregistering arbitrary observers in an ArrayList.
///
/// This abstract class is intended to be subclassed and specialized to maintain
/// a registry of observers of specific types and dispatch notifications to them.
///@param T The observer type.
class Observable extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/database/Observable");
  Observable.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_mObservers = jniAccessors.getFieldIDOf(
      _classRef, "mObservers", "Ljava/util/ArrayList;");

  /// from: protected final java.util.ArrayList<T> mObservers
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The list of observers.  An observer can be in the list at most
  /// once and will never be null.
  jni.JniObject get mObservers => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_mObservers, jni.JniType.objectType)
      .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Observable()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_unregisterAll =
      jniAccessors.getMethodIDOf(_classRef, "unregisterAll", "()V");

  /// from: public void unregisterAll()
  ///
  /// Remove all registered observers.
  void unregisterAll() => jniAccessors.callMethodWithArgs(
      reference, _id_unregisterAll, jni.JniType.voidType, []).check();
}
