// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../net/Uri.dart" as uri_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.provider.SettingsSlicesContract
///
/// Provides a contract for platform-supported Settings android.app.slice.Slice Slices.
///
/// Contains definitions for the supported android.app.slice.SliceProvider SliceProvider
/// authority, authority Uri, and key constants.
///
/// android.app.slice.Slice Slice presenters interested in learning meta-data about the
/// android.app.slice.Slice Slice should read the android.app.slice.Slice Slice
/// object at runtime.
///
/// Uri builder example:
/// <pre>
/// Uri wifiActionUri = BASE_URI
///         .buildUpon()
///         .appendPath(PATH_SETTING_ACTION)
///         .appendPath(KEY_WIFI)
///         .build();
/// Uri bluetoothIntentUri = BASE_URI
///         .buildUpon()
///         .appendPath(PATH_SETTING_INTENT)
///         .appendPath(KEY_BLUETOOTH)
///         .build();
/// </pre>
class SettingsSlicesContract extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/SettingsSlicesContract");
  SettingsSlicesContract.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String AUTHORITY
  ///
  /// Authority for platform Settings Slices.
  static const AUTHORITY = "android.settings.slices";

  static final _id_BASE_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "BASE_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri BASE_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A content:// style uri to the Settings Slices authority, \#AUTHORITY.
  static uri_.Uri get BASE_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_BASE_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String KEY_AIRPLANE_MODE
  ///
  /// Uri key for the Airplane Mode setting.
  static const KEY_AIRPLANE_MODE = "airplane_mode";

  /// from: static public final java.lang.String KEY_BATTERY_SAVER
  ///
  /// Uri key for the Battery Saver setting.
  static const KEY_BATTERY_SAVER = "battery_saver";

  /// from: static public final java.lang.String KEY_BLUETOOTH
  ///
  /// Uri key for the Bluetooth setting.
  static const KEY_BLUETOOTH = "bluetooth";

  /// from: static public final java.lang.String KEY_LOCATION
  ///
  /// Uri key for the Location setting.
  static const KEY_LOCATION = "location";

  /// from: static public final java.lang.String KEY_WIFI
  ///
  /// Uri key for the Wi-fi setting.
  static const KEY_WIFI = "wifi";

  /// from: static public final java.lang.String PATH_SETTING_ACTION
  ///
  /// Uri path indicating that the requested android.app.slice.Slice Slice should
  /// have inline controls for the corresponding setting.
  ///
  /// This path will only contain Slices defined by keys in this class.
  static const PATH_SETTING_ACTION = "action";

  /// from: static public final java.lang.String PATH_SETTING_INTENT
  ///
  /// Uri path indicating that the requested android.app.slice.Slice Slice should
  /// be android.content.Intent Intent-only.
  ///
  /// android.app.slice.Slice Slices with actions should use the \#PATH_SETTING_ACTION path.
  ///
  /// This path will only contain Slices defined by keys in this class
  static const PATH_SETTING_INTENT = "intent";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SettingsSlicesContract()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
