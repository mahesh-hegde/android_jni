// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../net/Uri.dart" as uri_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.provider.VoicemailContract
///
/// The contract between the voicemail provider and applications. Contains
/// definitions for the supported URIs and columns.
///
/// <P>The content providers exposes two tables through this interface:
/// <ul>
///   <li> Voicemails table: This stores the actual voicemail records. The
///   columns and URIs for accessing this table are defined by the
///   Voicemails class.
///   </li>
///   <li> Status table: This provides a way for the voicemail source application
///   to convey its current state to the system. The columns and URIS for
///   accessing this table are defined by the Status class.
///   </li>
/// </ul>
///
/// <P> The minimum permission needed to access this content provider is
/// android.Manifest.permission\#ADD_VOICEMAIL or carrier privileges (see
/// android.telephony.TelephonyManager\#hasCarrierPrivileges).
///
/// <P>Voicemails are inserted by what is called as a "voicemail source"
/// application, which is responsible for syncing voicemail data between a remote
/// server and the local voicemail content provider. "voicemail source"
/// application should always set the \#PARAM_KEY_SOURCE_PACKAGE in the
/// URI to identify its package.
///
/// <P>In addition to the ContentObserver notifications the voicemail
/// provider also generates broadcast intents to notify change for applications
/// that are not active and therefore cannot listen to ContentObserver
/// notifications. Broadcast intents with following actions are generated:
/// <ul>
///   <li> \#ACTION_NEW_VOICEMAIL is generated for each new voicemail
///   inserted.
///   </li>
///   <li> Intent\#ACTION_PROVIDER_CHANGED is generated for any change
///    made into the database, including new voicemail.
///   </li>
/// </ul>
class VoicemailContract extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/VoicemailContract");
  VoicemailContract.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_FETCH_VOICEMAIL
  ///
  /// Broadcast intent to request a voicemail source to fetch voicemail content of a specific
  /// voicemail from the remote server. The voicemail to fetch is specified by the data uri
  /// of the intent.
  ///
  /// All voicemail sources are expected to handle this event. After storing the content
  /// the application should also set Voicemails\#HAS_CONTENT to 1;
  static const ACTION_FETCH_VOICEMAIL = "android.intent.action.FETCH_VOICEMAIL";

  /// from: static public final java.lang.String ACTION_NEW_VOICEMAIL
  ///
  /// Broadcast intent when a new voicemail record is inserted.
  static const ACTION_NEW_VOICEMAIL = "android.intent.action.NEW_VOICEMAIL";

  /// from: static public final java.lang.String ACTION_SYNC_VOICEMAIL
  ///
  /// Broadcast intent to request all voicemail sources to perform a sync with the remote server.
  static const ACTION_SYNC_VOICEMAIL = "android.provider.action.SYNC_VOICEMAIL";

  /// from: static public final java.lang.String AUTHORITY
  ///
  /// The authority used by the voicemail provider.
  static const AUTHORITY = "com.android.voicemail";

  /// from: static public final java.lang.String EXTRA_PHONE_ACCOUNT_HANDLE
  ///
  /// Extra included in \#ACTION_SYNC_VOICEMAIL broadcast intents to indicate which PhoneAccountHandle to sync.
  static const EXTRA_PHONE_ACCOUNT_HANDLE =
      "android.provider.extra.PHONE_ACCOUNT_HANDLE";

  /// from: static public final java.lang.String EXTRA_SELF_CHANGE
  ///
  /// Extra included in Intent\#ACTION_PROVIDER_CHANGED broadcast intents to indicate if the
  /// receiving package made this change.
  static const EXTRA_SELF_CHANGE = "com.android.voicemail.extra.SELF_CHANGE";

  /// from: static public final java.lang.String PARAM_KEY_SOURCE_PACKAGE
  ///
  /// Parameter key used in the URI to specify the voicemail source package name.
  ///  This field must be set in all requests that originate from a voicemail source.
  static const PARAM_KEY_SOURCE_PACKAGE = "source_package";
}

/// from: android.provider.VoicemailContract$Voicemails
///
/// Defines fields exposed through the /voicemail path of this content provider.
class VoicemailContract_Voicemails extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/VoicemailContract\$Voicemails");
  VoicemailContract_Voicemails.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ARCHIVED
  ///
  /// Flag to indicate the voicemail was marked as archived. Archived voicemail should not be
  /// deleted even if it no longer exist on the server. The value will be 1 if archived true, 0
  /// if not.
  ///
  /// <P>Type: INTEGER (boolean)</P>
  static const ARCHIVED = "archived";

  /// from: static public final java.lang.String BACKED_UP
  ///
  /// Flag to indicate the voicemail was backed up. The value will be 1 if backed up, 0 if
  /// not.
  ///
  /// <P>Type: INTEGER (boolean)</P>
  static const BACKED_UP = "backed_up";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// URI to insert/retrieve voicemails.
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DATE
  ///
  /// The date the voicemail was sent, in milliseconds since the epoch
  /// <P>Type: INTEGER (long)</P>
  static const DATE = "date";

  /// from: static public final java.lang.String DELETED
  ///
  /// Flag used to indicate that the voicemail was deleted but not synced to the server.
  /// A deleted row should be ignored.
  /// The value will be 1 if deleted is true, 0 if false.
  /// <P>Type: INTEGER (boolean)</P>
  static const DELETED = "deleted";

  /// from: static public final java.lang.String DIRTY
  ///
  /// Flag used to indicate that local, unsynced changes are present.
  /// Currently, this is used to indicate that the voicemail was read or deleted.
  /// The value will be 1 if dirty is true, 0 if false.
  ///
  /// When a caller updates a voicemail row (either with ContentResolver\#update or
  /// ContentResolver\#applyBatch), and if the ContentValues doesn't contain
  /// this column, the voicemail provider implicitly sets it to 0 if the calling package is
  /// the \#SOURCE_PACKAGE or to 1 otherwise. To prevent this behavior, explicitly set
  /// \#DIRTY_RETAIN to DIRTY in the ContentValues.
  ///
  /// <P>Type: INTEGER (boolean)</P>
  ///@see \#DIRTY_RETAIN
  static const DIRTY = "dirty";

  /// from: static public final int DIRTY_RETAIN
  ///
  /// Value of \#DIRTY when updating to indicate that the value should not be updated
  /// during this operation.
  static const DIRTY_RETAIN = -1;

  /// from: static public final java.lang.String DIR_TYPE
  ///
  /// The MIME type for a collection of voicemails.
  static const DIR_TYPE = "vnd.android.cursor.dir/voicemails";

  /// from: static public final java.lang.String DURATION
  ///
  /// The duration of the voicemail in seconds.
  /// <P>Type: INTEGER (long)</P>
  static const DURATION = "duration";

  /// from: static public final java.lang.String HAS_CONTENT
  ///
  /// Whether the media content for this voicemail is available for
  /// consumption.
  /// <P>Type: INTEGER (boolean)</P>
  static const HAS_CONTENT = "has_content";

  /// from: static public final java.lang.String IS_OMTP_VOICEMAIL
  ///
  /// Flag to indicate the voicemail is a OMTP voicemail handled by the android.telephony.VisualVoicemailService. The UI should only show OMTP voicemails from
  /// the current visual voicemail package. For example, the selection could be
  /// {@code WHERE (IS_OMTP_VOICEMAIL == 0) OR ( IS_OMTP_VOICEMAIL == 1 AND SOURCE_PACKAGE ==
  /// "current.vvm.package")}
  ///
  /// <P>Type: INTEGER (boolean)</P>
  ///@see android.telephony.TelephonyManager\#getVisualVoicemailPackageName
  static const IS_OMTP_VOICEMAIL = "is_omtp_voicemail";

  /// from: static public final java.lang.String IS_READ
  ///
  /// Whether this item has been read or otherwise consumed by the user.
  /// <P>Type: INTEGER (boolean)</P>
  static const IS_READ = "is_read";

  /// from: static public final java.lang.String ITEM_TYPE
  ///
  /// The MIME type for a single voicemail.
  static const ITEM_TYPE = "vnd.android.cursor.item/voicemail";

  /// from: static public final java.lang.String LAST_MODIFIED
  ///
  /// The date the row is last inserted, updated, or marked as deleted, in milliseconds
  /// since the epoch. Read only.
  /// <P>Type: INTEGER (long)</P>
  static const LAST_MODIFIED = "last_modified";

  /// from: static public final java.lang.String MIME_TYPE
  ///
  /// MIME type of the media content for the voicemail.
  /// <P>Type: TEXT</P>
  static const MIME_TYPE = "mime_type";

  /// from: static public final java.lang.String NEW
  ///
  /// Whether or not the voicemail has been acknowledged (notification sent to the user).
  /// <P>Type: INTEGER (boolean)</P>
  static const NEW = "new";

  /// from: static public final java.lang.String NUMBER
  ///
  /// Phone number of the voicemail sender.
  /// <P>Type: TEXT</P>
  static const NUMBER = "number";

  /// from: static public final java.lang.String PHONE_ACCOUNT_COMPONENT_NAME
  ///
  /// The ComponentName of the PhoneAccount in string form. The
  /// PhoneAccount of the voicemail is used to differentiate voicemails from different
  /// sources.
  /// <P>Type: TEXT</P>
  static const PHONE_ACCOUNT_COMPONENT_NAME = "subscription_component_name";

  /// from: static public final java.lang.String PHONE_ACCOUNT_ID
  ///
  /// The identifier of a PhoneAccount that is unique to a specified
  /// ComponentName. The PhoneAccount of the voicemail is used to differentiate
  /// voicemails from different sources.
  /// <P>Type: TEXT</P>
  static const PHONE_ACCOUNT_ID = "subscription_id";

  /// from: static public final java.lang.String RESTORED
  ///
  /// Flag to indicate the voicemail was restored from a backup. The value will be 1 if
  /// restored, 0 if not.
  ///
  /// <P>Type: INTEGER (boolean)</P>
  static const RESTORED = "restored";

  /// from: static public final java.lang.String SOURCE_DATA
  ///
  /// Application-specific data available to the source application that
  /// inserted the voicemail. This is typically used to store the source
  /// specific message id to identify this voicemail on the remote
  /// voicemail server.
  /// <P>Type: TEXT</P>
  /// <P> Note that this is NOT the voicemail media content data.
  static const SOURCE_DATA = "source_data";

  /// from: static public final java.lang.String SOURCE_PACKAGE
  ///
  /// Package name of the source application that inserted the voicemail.
  /// <P>Type: TEXT</P>
  static const SOURCE_PACKAGE = "source_package";

  /// from: static public final java.lang.String TRANSCRIPTION
  ///
  /// The transcription of the voicemail entry. This will only be populated if the voicemail
  /// entry has a valid transcription.
  /// <P>Type: TEXT</P>
  static const TRANSCRIPTION = "transcription";

  static final _id_buildSourceUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "buildSourceUri", "(Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildSourceUri(java.lang.String packageName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A convenience method to build voicemail URI specific to a source package by appending
  /// VoicemailContract\#PARAM_KEY_SOURCE_PACKAGE param to the base URI.
  static uri_.Uri buildSourceUri(jni.JniString packageName) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildSourceUri,
          jni.JniType.objectType,
          [packageName.reference]).object);
}

/// from: android.provider.VoicemailContract$Status
///
/// Defines fields exposed through the /status path of this content provider.
class VoicemailContract_Status extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/VoicemailContract\$Status");
  VoicemailContract_Status.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONFIGURATION_STATE
  ///
  /// The configuration state of the voicemail source.
  ///
  /// <P>Negative values are reserved to the source for source-specific states, see
  /// \#SOURCE_TYPE
  ///
  /// <P> Possible values:
  /// \#CONFIGURATION_STATE_OK,
  /// \#CONFIGURATION_STATE_NOT_CONFIGURED,
  /// \#CONFIGURATION_STATE_CAN_BE_CONFIGURED
  /// \#CONFIGURATION_STATE_CONFIGURING
  /// \#CONFIGURATION_STATE_FAILED
  /// \#CONFIGURATION_STATE_DISABLED
  /// <P>Type: INTEGER</P>
  static const CONFIGURATION_STATE = "configuration_state";

  /// from: static public final int CONFIGURATION_STATE_CAN_BE_CONFIGURED
  ///
  /// Value of \#CONFIGURATION_STATE to indicate the visual voicemail is not
  /// yet configured on this device but can be configured by the user.
  ///  This state must be used when the source has verified that the current user can be
  /// upgraded to visual voicemail and would like to show a set up invitation message.
  static const CONFIGURATION_STATE_CAN_BE_CONFIGURED = 2;

  /// from: static public final int CONFIGURATION_STATE_CONFIGURING
  ///
  /// Value of \#CONFIGURATION_STATE to indicate that visual voicemail still is being
  /// configured.
  static const CONFIGURATION_STATE_CONFIGURING = 3;

  /// from: static public final int CONFIGURATION_STATE_DISABLED
  ///
  /// Value of \#CONFIGURATION_STATE to indicate that visual voicemail is disabled by
  /// the user.
  static const CONFIGURATION_STATE_DISABLED = 5;

  /// from: static public final int CONFIGURATION_STATE_FAILED
  ///
  /// Value of \#CONFIGURATION_STATE to indicate that visual voicemail has failed to
  /// be configured.
  static const CONFIGURATION_STATE_FAILED = 4;

  /// from: static public final int CONFIGURATION_STATE_NOT_CONFIGURED
  ///
  /// Value of \#CONFIGURATION_STATE to indicate the visual voicemail is not
  /// yet configured on this device.
  static const CONFIGURATION_STATE_NOT_CONFIGURED = 1;

  /// from: static public final int CONFIGURATION_STATE_OK
  ///
  /// Value of \#CONFIGURATION_STATE to indicate an all OK configuration status.
  static const CONFIGURATION_STATE_OK = 0;

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// URI to insert/retrieve status of voicemail source.
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DATA_CHANNEL_STATE
  ///
  /// The data channel state of the voicemail source. This the channel through which the source
  /// pulls voicemail data from a remote server.
  ///
  /// <P>Negative values are reserved to the source for source-specific states, see
  /// \#SOURCE_TYPE
  ///
  /// <P> Possible values:
  /// \#DATA_CHANNEL_STATE_OK,
  /// \#DATA_CHANNEL_STATE_NO_CONNECTION
  /// </P>
  /// <P>Type: INTEGER</P>
  static const DATA_CHANNEL_STATE = "data_channel_state";

  /// from: static public final int DATA_CHANNEL_STATE_BAD_CONFIGURATION
  ///
  /// Value of \#DATA_CHANNEL_STATE to indicate that data channel received incorrect
  ///  settings or credentials to connect to the server
  static const DATA_CHANNEL_STATE_BAD_CONFIGURATION = 3;

  /// from: static public final int DATA_CHANNEL_STATE_COMMUNICATION_ERROR
  ///
  /// Value of \#DATA_CHANNEL_STATE to indicate that a error has occurred in the data
  ///  channel while communicating with the server
  static const DATA_CHANNEL_STATE_COMMUNICATION_ERROR = 4;

  /// from: static public final int DATA_CHANNEL_STATE_NO_CONNECTION
  ///
  /// Value of \#DATA_CHANNEL_STATE to indicate that data channel failed to find a
  ///  suitable network to connect to the server.
  static const DATA_CHANNEL_STATE_NO_CONNECTION = 1;

  /// from: static public final int DATA_CHANNEL_STATE_NO_CONNECTION_CELLULAR_REQUIRED
  ///
  /// Value of \#DATA_CHANNEL_STATE to indicate that data channel failed to find a
  ///  suitable network to connect to the server, and the carrier requires using cellular
  ///  data network to connect to the server.
  static const DATA_CHANNEL_STATE_NO_CONNECTION_CELLULAR_REQUIRED = 2;

  /// from: static public final int DATA_CHANNEL_STATE_OK
  ///
  /// Value of \#DATA_CHANNEL_STATE to indicate that data channel is working fine.
  static const DATA_CHANNEL_STATE_OK = 0;

  /// from: static public final int DATA_CHANNEL_STATE_SERVER_CONNECTION_ERROR
  ///
  /// Value of \#DATA_CHANNEL_STATE to indicate that while there is a suitable network,
  ///  the data channel is unable to establish a connection with the server.
  static const DATA_CHANNEL_STATE_SERVER_CONNECTION_ERROR = 6;

  /// from: static public final int DATA_CHANNEL_STATE_SERVER_ERROR
  ///
  /// Value of \#DATA_CHANNEL_STATE to indicate that the server reported an internal
  ///  error to the data channel.
  static const DATA_CHANNEL_STATE_SERVER_ERROR = 5;

  /// from: static public final java.lang.String DIR_TYPE
  ///
  /// The MIME type for a collection of voicemail source statuses.
  static const DIR_TYPE = "vnd.android.cursor.dir/voicemail.source.status";

  /// from: static public final java.lang.String ITEM_TYPE
  ///
  /// The MIME type for a single voicemail source status entry.
  static const ITEM_TYPE = "vnd.android.cursor.item/voicemail.source.status";

  /// from: static public final java.lang.String NOTIFICATION_CHANNEL_STATE
  ///
  /// The notification channel state of the voicemail source. This is the channel through which
  /// the source gets notified of new voicemails on the remote server.
  ///
  /// <P>Negative values are reserved to the source for source-specific states, see
  /// \#SOURCE_TYPE
  ///
  /// <P> Possible values:
  /// \#NOTIFICATION_CHANNEL_STATE_OK,
  /// \#NOTIFICATION_CHANNEL_STATE_NO_CONNECTION,
  /// \#NOTIFICATION_CHANNEL_STATE_MESSAGE_WAITING
  /// </P>
  /// <P>Type: INTEGER</P>
  static const NOTIFICATION_CHANNEL_STATE = "notification_channel_state";

  /// from: static public final int NOTIFICATION_CHANNEL_STATE_MESSAGE_WAITING
  ///
  /// Value of \#NOTIFICATION_CHANNEL_STATE to indicate that there are messages waiting
  /// on the server but the details are not known.
  ///  Use this state when the notification can only tell that there are pending messages on
  /// the server but no details of the sender/time etc are known.
  static const NOTIFICATION_CHANNEL_STATE_MESSAGE_WAITING = 2;

  /// from: static public final int NOTIFICATION_CHANNEL_STATE_NO_CONNECTION
  ///
  /// Value of \#NOTIFICATION_CHANNEL_STATE to indicate that the notification channel
  /// connection is not working.
  static const NOTIFICATION_CHANNEL_STATE_NO_CONNECTION = 1;

  /// from: static public final int NOTIFICATION_CHANNEL_STATE_OK
  ///
  /// Value of \#NOTIFICATION_CHANNEL_STATE to indicate that the notification channel is
  /// working fine.
  static const NOTIFICATION_CHANNEL_STATE_OK = 0;

  /// from: static public final java.lang.String PHONE_ACCOUNT_COMPONENT_NAME
  ///
  /// The ComponentName of the PhoneAccount in string form. The
  /// PhoneAccount differentiates voicemail sources from the same package.
  /// <P>Type: TEXT</P>
  static const PHONE_ACCOUNT_COMPONENT_NAME = "phone_account_component_name";

  /// from: static public final java.lang.String PHONE_ACCOUNT_ID
  ///
  /// The identifier of a PhoneAccount that is unique to a specified component. The
  /// PhoneAccount differentiates voicemail sources from the same package.
  /// <P>Type: TEXT</P>
  static const PHONE_ACCOUNT_ID = "phone_account_id";

  /// from: static public final java.lang.String QUOTA_OCCUPIED
  ///
  /// Amount of resource that is used by existing voicemail in the visual voicemail inbox,
  /// or \#QUOTA_UNAVAILABLE if the quota has never been updated before. This value is
  /// used to inform the client the situation on the remote server. Unit is not specified.
  /// <P>Type: INTEGER</P>
  static const QUOTA_OCCUPIED = "quota_occupied";

  /// from: static public final java.lang.String QUOTA_TOTAL
  ///
  /// Total resource in the visual voicemail inbox that can be used, or
  /// \#QUOTA_UNAVAILABLE if server either has unlimited quota or does not provide quota
  /// information. This value is used to inform the client the situation on the remote server.
  /// Unit is not specified.
  /// <P>Type: INTEGER</P>
  static const QUOTA_TOTAL = "quota_total";

  /// from: static public final int QUOTA_UNAVAILABLE
  ///
  /// Value for \#QUOTA_OCCUPIED and \#QUOTA_TOTAL to indicate that no
  /// information is available.
  static const QUOTA_UNAVAILABLE = -1;

  /// from: static public final java.lang.String SETTINGS_URI
  ///
  /// The URI to call to invoke source specific voicemail settings screen. On a user request
  /// to setup voicemail an intent with action VIEW with this URI will be fired by the system.
  /// <P>Type: TEXT</P>
  static const SETTINGS_URI = "settings_uri";

  /// from: static public final java.lang.String SOURCE_PACKAGE
  ///
  /// The package name of the voicemail source. There can only be a one entry per account
  /// per source.
  /// <P>Type: TEXT</P>
  static const SOURCE_PACKAGE = "source_package";

  /// from: static public final java.lang.String SOURCE_TYPE
  ///
  /// The type of the source, which determines how to interpret source-specific states.
  /// Typically this will be set to the same string as
  /// android.telephony.CarrierConfigManager\#KEY_VVM_TYPE_STRING. For example,
  /// "vvm_type_omtp".
  ///
  /// <P>Type: TEXT</P>
  ///@see \#CONFIGURATION_STATE
  ///@see \#DATA_CHANNEL_STATE
  ///@see \#NOTIFICATION_CHANNEL_STATE
  static const SOURCE_TYPE = "source_type";

  /// from: static public final java.lang.String VOICEMAIL_ACCESS_URI
  ///
  /// The URI to call when the user requests to directly access the voicemail from the remote
  /// server. In case of an IVR voicemail system this is typically set to the the voicemail
  /// number specified using a tel:/ URI.
  /// <P>Type: TEXT</P>
  static const VOICEMAIL_ACCESS_URI = "voicemail_access_uri";

  static final _id_buildSourceUri = jniAccessors.getStaticMethodIDOf(
      _classRef, "buildSourceUri", "(Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri buildSourceUri(java.lang.String packageName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A convenience method to build status URI specific to a source package by appending
  /// VoicemailContract\#PARAM_KEY_SOURCE_PACKAGE param to the base URI.
  static uri_.Uri buildSourceUri(jni.JniString packageName) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_buildSourceUri,
          jni.JniType.objectType,
          [packageName.reference]).object);
}
