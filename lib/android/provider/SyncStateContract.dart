// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/ContentProviderClient.dart" as contentproviderclient_;

import "../net/Uri.dart" as uri_;

import "../accounts/Account.dart" as account_;

import "../util/Pair.dart" as pair_;

import "../content/ContentProviderOperation.dart" as contentprovideroperation_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.provider.SyncStateContract
///
/// The ContentProvider contract for associating data with ana data array account.
/// This may be used by providers that want to store this data in a standard way.
class SyncStateContract extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/SyncStateContract");
  SyncStateContract.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SyncStateContract()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.SyncStateContract$Helpers
class SyncStateContract_Helpers extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/SyncStateContract\$Helpers");
  SyncStateContract_Helpers.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SyncStateContract_Helpers()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_get0 = jniAccessors.getStaticMethodIDOf(_classRef, "get",
      "(Landroid/content/ContentProviderClient;Landroid/net/Uri;Landroid/accounts/Account;)[B");

  /// from: static public byte[] get(android.content.ContentProviderClient provider, android.net.Uri uri, android.accounts.Account account)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the sync state that is associated with the account or null.
  ///@param provider the ContentProviderClient that is to be used to communicate
  /// with the android.content.ContentProvider that contains the sync state.
  ///@param uri the uri of the sync state
  ///@param account the Account whose sync state should be returned
  ///@return the sync state or null if there is no sync state associated with the account
  ///@throws RemoteException if there is a failure communicating with the remote
  /// android.content.ContentProvider
  static jni.JniObject get0(
          contentproviderclient_.ContentProviderClient provider,
          uri_.Uri uri,
          account_.Account account) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_get0,
          jni.JniType.objectType,
          [provider.reference, uri.reference, account.reference]).object);

  static final _id_set0 = jniAccessors.getStaticMethodIDOf(_classRef, "set",
      "(Landroid/content/ContentProviderClient;Landroid/net/Uri;Landroid/accounts/Account;[B)V");

  /// from: static public void set(android.content.ContentProviderClient provider, android.net.Uri uri, android.accounts.Account account, byte[] data)
  ///
  /// Assigns the data array as the sync state for the given account.
  ///@param provider the ContentProviderClient that is to be used to communicate
  /// with the android.content.ContentProvider that contains the sync state.
  ///@param uri the uri of the sync state
  ///@param account the Account whose sync state should be set
  ///@param data the byte[] that contains the sync state
  ///@throws RemoteException if there is a failure communicating with the remote
  /// android.content.ContentProvider
  static void set0(contentproviderclient_.ContentProviderClient provider,
          uri_.Uri uri, account_.Account account, jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_set0, jni.JniType.voidType, [
        provider.reference,
        uri.reference,
        account.reference,
        data.reference
      ]).check();

  static final _id_insert = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "insert",
      "(Landroid/content/ContentProviderClient;Landroid/net/Uri;Landroid/accounts/Account;[B)Landroid/net/Uri;");

  /// from: static public android.net.Uri insert(android.content.ContentProviderClient provider, android.net.Uri uri, android.accounts.Account account, byte[] data)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static uri_.Uri insert(contentproviderclient_.ContentProviderClient provider,
          uri_.Uri uri, account_.Account account, jni.JniObject data) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_insert, jni.JniType.objectType, [
        provider.reference,
        uri.reference,
        account.reference,
        data.reference
      ]).object);

  static final _id_update = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "update",
      "(Landroid/content/ContentProviderClient;Landroid/net/Uri;[B)V");

  /// from: static public void update(android.content.ContentProviderClient provider, android.net.Uri uri, byte[] data)
  static void update(contentproviderclient_.ContentProviderClient provider,
          uri_.Uri uri, jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_update,
          jni.JniType.voidType,
          [provider.reference, uri.reference, data.reference]).check();

  static final _id_getWithUri = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getWithUri",
      "(Landroid/content/ContentProviderClient;Landroid/net/Uri;Landroid/accounts/Account;)Landroid/util/Pair;");

  /// from: static public android.util.Pair<android.net.Uri,byte[]> getWithUri(android.content.ContentProviderClient provider, android.net.Uri uri, android.accounts.Account account)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static pair_.Pair getWithUri(
          contentproviderclient_.ContentProviderClient provider,
          uri_.Uri uri,
          account_.Account account) =>
      pair_.Pair.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getWithUri,
          jni.JniType.objectType,
          [provider.reference, uri.reference, account.reference]).object);

  static final _id_newSetOperation = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "newSetOperation",
      "(Landroid/net/Uri;Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;");

  /// from: static public android.content.ContentProviderOperation newSetOperation(android.net.Uri uri, android.accounts.Account account, byte[] data)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates and returns a ContentProviderOperation that assigns the data array as the
  /// sync state for the given account.
  ///@param uri the uri of the sync state
  ///@param account the Account whose sync state should be set
  ///@param data the byte[] that contains the sync state
  ///@return the new ContentProviderOperation that assigns the data array as the
  /// account's sync state
  static contentprovideroperation_.ContentProviderOperation newSetOperation(
          uri_.Uri uri, account_.Account account, jni.JniObject data) =>
      contentprovideroperation_.ContentProviderOperation.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef,
              _id_newSetOperation,
              jni.JniType.objectType,
              [uri.reference, account.reference, data.reference]).object);

  static final _id_newUpdateOperation = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "newUpdateOperation",
      "(Landroid/net/Uri;[B)Landroid/content/ContentProviderOperation;");

  /// from: static public android.content.ContentProviderOperation newUpdateOperation(android.net.Uri uri, byte[] data)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates and returns a ContentProviderOperation that assigns the data array as the
  /// sync state for the given account.
  ///@param uri the uri of the specific sync state to set
  ///@param data the byte[] that contains the sync state
  ///@return the new ContentProviderOperation that assigns the data array as the
  /// account's sync state
  static contentprovideroperation_.ContentProviderOperation newUpdateOperation(
          uri_.Uri uri, jni.JniObject data) =>
      contentprovideroperation_.ContentProviderOperation.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_newUpdateOperation,
              jni.JniType.objectType, [uri.reference, data.reference]).object);
}

/// from: android.provider.SyncStateContract$Constants
class SyncStateContract_Constants extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/SyncStateContract\$Constants");
  SyncStateContract_Constants.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  static const CONTENT_DIRECTORY = "syncstate";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SyncStateContract_Constants()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.SyncStateContract$Columns
class SyncStateContract_Columns extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/SyncStateContract\$Columns");
  SyncStateContract_Columns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACCOUNT_NAME
  ///
  /// A reference to the name of the account to which this data belongs
  /// <P>Type: STRING</P>
  static const ACCOUNT_NAME = "account_name";

  /// from: static public final java.lang.String ACCOUNT_TYPE
  ///
  /// A reference to the type of the account to which this data belongs
  /// <P>Type: STRING</P>
  static const ACCOUNT_TYPE = "account_type";

  /// from: static public final java.lang.String DATA
  ///
  /// The sync data associated with this account.
  /// <P>Type: NONE</P>
  static const DATA = "data";
}
