// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../net/Uri.dart" as uri_;

import "../content/Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.provider.UserDictionary
///
/// A provider of user defined words for input methods to use for predictive text input.
/// Applications and input methods may add words into the dictionary. Words can have associated
/// frequency information and locale information.
///
/// <strong>NOTE: </strong>Starting on API 23, the user dictionary is only accessible through
/// IME and spellchecker.
class UserDictionary extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/UserDictionary");
  UserDictionary.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String AUTHORITY
  ///
  /// Authority string for this provider.
  static const AUTHORITY = "user_dictionary";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this provider
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  UserDictionary()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.UserDictionary$Words
///
/// Contains the user defined words.
class UserDictionary_Words extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/UserDictionary\$Words");
  UserDictionary_Words.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String APP_ID
  ///
  /// The uid of the application that inserted the word.
  /// TYPE: INTEGER
  ///
  static const APP_ID = "appid";

  /// from: static public final java.lang.String CONTENT_ITEM_TYPE
  ///
  /// The MIME type of a \#CONTENT_URI sub-directory of a single word.
  static const CONTENT_ITEM_TYPE =
      "vnd.android.cursor.item/vnd.google.userword";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of \#CONTENT_URI providing a directory of words.
  static const CONTENT_TYPE = "vnd.android.cursor.dir/vnd.google.userword";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// Sort by descending order of frequency.
  static const DEFAULT_SORT_ORDER = "frequency DESC";

  /// from: static public final java.lang.String FREQUENCY
  ///
  /// The frequency column. A value between 1 and 255. Higher values imply higher frequency.
  /// TYPE: INTEGER
  ///
  static const FREQUENCY = "frequency";

  /// from: static public final java.lang.String LOCALE
  ///
  /// The locale that this word belongs to. Null if it pertains to all
  /// locales. Locale is as defined by the string returned by Locale.toString().
  /// TYPE: TEXT
  ///
  static const LOCALE = "locale";

  /// from: static public final int LOCALE_TYPE_ALL
  ///
  /// @deprecated Use \#addWord(Context, String, int, String, Locale).
  static const LOCALE_TYPE_ALL = 0;

  /// from: static public final int LOCALE_TYPE_CURRENT
  ///
  /// @deprecated Use \#addWord(Context, String, int, String, Locale).
  static const LOCALE_TYPE_CURRENT = 1;

  /// from: static public final java.lang.String SHORTCUT
  ///
  /// An optional shortcut for this word. When the shortcut is typed, supporting IMEs should
  /// suggest the word in this row as an alternate spelling too.
  static const SHORTCUT = "shortcut";

  /// from: static public final java.lang.String WORD
  ///
  /// The word column.
  /// TYPE: TEXT
  ///
  static const WORD = "word";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  UserDictionary_Words()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_addWord = jniAccessors.getStaticMethodIDOf(
      _classRef, "addWord", "(Landroid/content/Context;Ljava/lang/String;II)V");

  /// from: static public void addWord(android.content.Context context, java.lang.String word, int frequency, int localeType)
  ///
  /// Adds a word to the dictionary, with the given frequency and the specified
  ///  specified locale type.
  ///@deprecated Please use
  ///  \#addWord(Context, String, int, String, Locale) instead.
  ///@param context the current application context
  ///@param word the word to add to the dictionary. This should not be null or
  ///  empty.
  ///@param localeType the locale type for this word. It should be one of
  ///  \#LOCALE_TYPE_ALL or \#LOCALE_TYPE_CURRENT.
  static void addWord(context_.Context context, jni.JniString word,
          int frequency, int localeType) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_addWord,
          jni.JniType.voidType,
          [context.reference, word.reference, frequency, localeType]).check();

  static final _id_addWord1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "addWord",
      "(Landroid/content/Context;Ljava/lang/String;ILjava/lang/String;Ljava/util/Locale;)V");

  /// from: static public void addWord(android.content.Context context, java.lang.String word, int frequency, java.lang.String shortcut, java.util.Locale locale)
  ///
  /// Adds a word to the dictionary, with the given frequency and the specified
  ///  locale type.
  ///@param context the current application context
  ///@param word the word to add to the dictionary. This should not be null or
  ///  empty.
  ///@param shortcut optional shortcut spelling for this word. When the shortcut
  ///  is typed, the word may be suggested by applications that support it. May be null.
  ///@param locale the locale to insert the word for, or null to insert the word
  ///  for all locales.
  static void addWord1(context_.Context context, jni.JniString word,
          int frequency, jni.JniString shortcut, jni.JniObject locale) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_addWord1, jni.JniType.voidType, [
        context.reference,
        word.reference,
        frequency,
        shortcut.reference,
        locale.reference
      ]).check();
}
