// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "FontRequest.dart" as fontrequest_;

import "../os/Handler.dart" as handler_;

import "../os/CancellationSignal.dart" as cancellationsignal_;

import "../graphics/Typeface.dart" as typeface_;

import "../net/Uri.dart" as uri_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.provider.FontsContract
///
/// Utility class to deal with Font ContentProviders.
class FontsContract extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/FontsContract");
  FontsContract.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  FontsContract()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_requestFonts = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "requestFonts",
      "(Landroid/content/Context;Landroid/provider/FontRequest;Landroid/os/Handler;Landroid/os/CancellationSignal;Landroid/provider/FontsContract\$FontRequestCallback;)V");

  /// from: static public void requestFonts(android.content.Context context, android.provider.FontRequest request, android.os.Handler handler, android.os.CancellationSignal cancellationSignal, android.provider.FontsContract.FontRequestCallback callback)
  ///
  /// Create a typeface object given a font request. The font will be asynchronously fetched,
  /// therefore the result is delivered to the given callback. See FontRequest.
  /// Only one of the methods in callback will be invoked, depending on whether the request
  /// succeeds or fails. These calls will happen on the caller thread.
  ///
  /// Note that the result Typeface may be cached internally and the same instance will be returned
  /// the next time you call this method with the same request. If you want to bypass this cache,
  /// use \#fetchFonts and \#buildTypeface instead.
  ///@param context A context to be used for fetching from font provider.
  /// This value must never be {@code null}.
  ///@param request A FontRequest object that identifies the provider and query for the
  ///                request. May not be null.
  /// This value must never be {@code null}.
  ///@param handler A handler to be processed the font fetching.
  /// This value must never be {@code null}.
  ///@param cancellationSignal A signal to cancel the operation in progress, or null if none. If
  ///                           the operation is canceled, then android.os.OperationCanceledException will be thrown.
  /// This value may be {@code null}.
  ///@param callback A callback that will be triggered when results are obtained. May not be null.
  ///
  /// This value must never be {@code null}.
  static void requestFonts(
          context_.Context context,
          fontrequest_.FontRequest request,
          handler_.Handler handler,
          cancellationsignal_.CancellationSignal cancellationSignal,
          FontsContract_FontRequestCallback callback) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_requestFonts, jni.JniType.voidType, [
        context.reference,
        request.reference,
        handler.reference,
        cancellationSignal.reference,
        callback.reference
      ]).check();

  static final _id_fetchFonts = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "fetchFonts",
      "(Landroid/content/Context;Landroid/os/CancellationSignal;Landroid/provider/FontRequest;)Landroid/provider/FontsContract\$FontFamilyResult;");

  /// from: static public android.provider.FontsContract.FontFamilyResult fetchFonts(android.content.Context context, android.os.CancellationSignal cancellationSignal, android.provider.FontRequest request)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Fetch fonts given a font request.
  ///@param context A Context to be used for fetching fonts.
  /// This value must never be {@code null}.
  ///@param cancellationSignal A signal to cancel the operation in progress, or null if none. If
  ///                           the operation is canceled, then android.os.OperationCanceledException will be thrown when the
  ///                           query is executed.
  /// This value may be {@code null}.
  ///@param request A FontRequest object that identifies the provider and query for the
  ///                request.
  ///
  /// This value must never be {@code null}.
  ///@return FontFamilyResult
  ///@throws NameNotFoundException If requested package or authority was not found in system.
  static FontsContract_FontFamilyResult fetchFonts(
          context_.Context context,
          cancellationsignal_.CancellationSignal cancellationSignal,
          fontrequest_.FontRequest request) =>
      FontsContract_FontFamilyResult.fromRef(jniAccessors
          .callStaticMethodWithArgs(
              _classRef, _id_fetchFonts, jni.JniType.objectType, [
        context.reference,
        cancellationSignal.reference,
        request.reference
      ]).object);

  static final _id_buildTypeface = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "buildTypeface",
      "(Landroid/content/Context;Landroid/os/CancellationSignal;[Landroid/provider/FontsContract\$FontInfo;)Landroid/graphics/Typeface;");

  /// from: static public android.graphics.Typeface buildTypeface(android.content.Context context, android.os.CancellationSignal cancellationSignal, android.provider.FontsContract.FontInfo[] fonts)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Build a Typeface from an array of FontInfo
  ///
  /// Results that are marked as not ready will be skipped.
  ///@param context A Context that will be used to fetch the font contents.
  /// This value must never be {@code null}.
  ///@param cancellationSignal A signal to cancel the operation in progress, or null if none. If
  ///                           the operation is canceled, then android.os.OperationCanceledException will be thrown.
  /// This value may be {@code null}.
  ///@param fonts An array of FontInfo to be used to create a Typeface.
  /// This value must never be {@code null}.
  ///@return A Typeface object. Returns null if typeface creation fails.
  static typeface_.Typeface buildTypeface(
          context_.Context context,
          cancellationsignal_.CancellationSignal cancellationSignal,
          jni.JniObject fonts) =>
      typeface_.Typeface.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_buildTypeface, jni.JniType.objectType, [
        context.reference,
        cancellationSignal.reference,
        fonts.reference
      ]).object);
}

/// from: android.provider.FontsContract$FontRequestCallback
///
/// Interface used to receive asynchronously fetched typefaces.
class FontsContract_FontRequestCallback extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/provider/FontsContract\$FontRequestCallback");
  FontsContract_FontRequestCallback.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  /// from: static public final int FAIL_REASON_FONT_LOAD_ERROR
  ///
  /// Constant returned by \#onTypefaceRequestFailed(int) signaling that the font
  /// returned by the provider was not loaded properly.
  static const FAIL_REASON_FONT_LOAD_ERROR = -3;

  /// from: static public final int FAIL_REASON_FONT_NOT_FOUND
  ///
  /// Constant returned by \#onTypefaceRequestFailed(int) signaling that the font
  /// provider did not return any results for the given query.
  static const FAIL_REASON_FONT_NOT_FOUND = 1;

  /// from: static public final int FAIL_REASON_FONT_UNAVAILABLE
  ///
  /// Constant returned by \#onTypefaceRequestFailed(int) signaling that the font
  /// provider found the queried font, but it is currently unavailable.
  static const FAIL_REASON_FONT_UNAVAILABLE = 2;

  /// from: static public final int FAIL_REASON_MALFORMED_QUERY
  ///
  /// Constant returned by \#onTypefaceRequestFailed(int) signaling that the given
  /// query was not supported by the provider.
  static const FAIL_REASON_MALFORMED_QUERY = 3;

  /// from: static public final int FAIL_REASON_PROVIDER_NOT_FOUND
  ///
  /// Constant returned by \#onTypefaceRequestFailed(int) signaling that the given
  /// provider was not found on the device.
  static const FAIL_REASON_PROVIDER_NOT_FOUND = -1;

  /// from: static public final int FAIL_REASON_WRONG_CERTIFICATES
  ///
  /// Constant returned by \#onTypefaceRequestFailed(int) signaling that the given
  /// provider must be authenticated and the given certificates do not match its signature.
  static const FAIL_REASON_WRONG_CERTIFICATES = -2;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  FontsContract_FontRequestCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onTypefaceRetrieved = jniAccessors.getMethodIDOf(
      _classRef, "onTypefaceRetrieved", "(Landroid/graphics/Typeface;)V");

  /// from: public void onTypefaceRetrieved(android.graphics.Typeface typeface)
  ///
  /// Called then a Typeface request done via \#requestFonts is complete. Note that this
  /// method will not be called if \#onTypefaceRequestFailed(int) is called instead.
  ///@param typeface The Typeface object retrieved.
  void onTypefaceRetrieved(typeface_.Typeface typeface) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTypefaceRetrieved,
          jni.JniType.voidType, [typeface.reference]).check();

  static final _id_onTypefaceRequestFailed =
      jniAccessors.getMethodIDOf(_classRef, "onTypefaceRequestFailed", "(I)V");

  /// from: public void onTypefaceRequestFailed(int reason)
  ///
  /// Called when a Typeface request done via \#requestFonts} fails.
  ///@param reason One of \#FAIL_REASON_PROVIDER_NOT_FOUND,
  ///               \#FAIL_REASON_FONT_NOT_FOUND,
  ///               \#FAIL_REASON_FONT_LOAD_ERROR,
  ///               \#FAIL_REASON_FONT_UNAVAILABLE or
  ///               \#FAIL_REASON_MALFORMED_QUERY if returned by the system. May also be
  ///               a positive value greater than 0 defined by the font provider as an
  ///               additional error code. Refer to the provider's documentation for more
  ///               information on possible returned error codes.
  ///
  /// Value is android.provider.FontsContract.FontRequestCallback\#FAIL_REASON_PROVIDER_NOT_FOUND, android.provider.FontsContract.FontRequestCallback\#FAIL_REASON_FONT_LOAD_ERROR, android.provider.FontsContract.FontRequestCallback\#FAIL_REASON_FONT_NOT_FOUND, android.provider.FontsContract.FontRequestCallback\#FAIL_REASON_FONT_UNAVAILABLE, or android.provider.FontsContract.FontRequestCallback\#FAIL_REASON_MALFORMED_QUERY
  void onTypefaceRequestFailed(int reason) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onTypefaceRequestFailed,
      jni.JniType.voidType,
      [reason]).check();
}

/// from: android.provider.FontsContract$FontInfo
///
/// Object represent a font entry in the family returned from \#fetchFonts.
class FontsContract_FontInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/FontsContract\$FontInfo");
  FontsContract_FontInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/net/Uri;I[Landroid/graphics/fonts/FontVariationAxis;IZI)V");

  /// from: void <init>(android.net.Uri uri, int ttcIndex, android.graphics.fonts.FontVariationAxis[] axes, int weight, boolean italic, int resultCode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  FontsContract_FontInfo(uri_.Uri uri, int ttcIndex, jni.JniObject axes,
      int weight, bool italic, int resultCode)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          uri.reference,
          ttcIndex,
          axes.reference,
          weight,
          italic,
          resultCode
        ]).object);

  static final _id_getUri =
      jniAccessors.getMethodIDOf(_classRef, "getUri", "()Landroid/net/Uri;");

  /// from: public android.net.Uri getUri()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a URI associated to this record.
  ///@return This value will never be {@code null}.
  uri_.Uri getUri() => uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getUri, jni.JniType.objectType, []).object);

  static final _id_getTtcIndex =
      jniAccessors.getMethodIDOf(_classRef, "getTtcIndex", "()I");

  /// from: public int getTtcIndex()
  ///
  /// Returns the index to be used to access this font when accessing a TTC file.
  ///@return Value is 0 or greater
  int getTtcIndex() => jniAccessors.callMethodWithArgs(
      reference, _id_getTtcIndex, jni.JniType.intType, []).integer;

  static final _id_getAxes = jniAccessors.getMethodIDOf(
      _classRef, "getAxes", "()[Landroid/graphics/fonts/FontVariationAxis;");

  /// from: public android.graphics.fonts.FontVariationAxis[] getAxes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the list of axes associated to this font.
  ///@return This value may be {@code null}.
  jni.JniObject getAxes() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAxes, jni.JniType.objectType, []).object);

  static final _id_getWeight =
      jniAccessors.getMethodIDOf(_classRef, "getWeight", "()I");

  /// from: public int getWeight()
  ///
  /// Returns the weight value for this font.
  ///@return Value is between 1 and 1000 inclusive
  int getWeight() => jniAccessors.callMethodWithArgs(
      reference, _id_getWeight, jni.JniType.intType, []).integer;

  static final _id_isItalic =
      jniAccessors.getMethodIDOf(_classRef, "isItalic", "()Z");

  /// from: public boolean isItalic()
  ///
  /// Returns whether this font is italic.
  bool isItalic() => jniAccessors.callMethodWithArgs(
      reference, _id_isItalic, jni.JniType.booleanType, []).boolean;

  static final _id_getResultCode =
      jniAccessors.getMethodIDOf(_classRef, "getResultCode", "()I");

  /// from: public int getResultCode()
  ///
  /// Returns result code.
  ///
  /// FontsContract.Columns\#RESULT_CODE
  int getResultCode() => jniAccessors.callMethodWithArgs(
      reference, _id_getResultCode, jni.JniType.intType, []).integer;
}

/// from: android.provider.FontsContract$FontFamilyResult
///
/// Object returned from \#fetchFonts.
class FontsContract_FontFamilyResult extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/provider/FontsContract\$FontFamilyResult");
  FontsContract_FontFamilyResult.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int STATUS_OK
  ///
  /// Constant represents that the font was successfully retrieved. Note that when this value
  /// is set and \#getFonts returns an empty array, it means there were no fonts
  /// matching the given query.
  static const STATUS_OK = 0;

  /// from: static public final int STATUS_REJECTED
  ///
  /// Constant represents that the fetching font data was rejected by system. This happens if
  /// the passed context is restricted.
  static const STATUS_REJECTED = 3;

  /// from: static public final int STATUS_UNEXPECTED_DATA_PROVIDED
  ///
  /// Constant represents that the provider returns unexpected data. \#getFonts returns
  /// null if this status was set. For example, this value is set when the font provider
  /// gives invalid format of variation settings.
  static const STATUS_UNEXPECTED_DATA_PROVIDED = 2;

  /// from: static public final int STATUS_WRONG_CERTIFICATES
  ///
  /// Constant represents that the given certificate was not matched with the provider's
  /// signature. \#getFonts returns null if this status was set.
  static const STATUS_WRONG_CERTIFICATES = 1;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(I[Landroid/provider/FontsContract\$FontInfo;)V");

  /// from: void <init>(int statusCode, android.provider.FontsContract.FontInfo[] fonts)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  FontsContract_FontFamilyResult(int statusCode, jni.JniObject fonts)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [statusCode, fonts.reference]).object);

  static final _id_getStatusCode =
      jniAccessors.getMethodIDOf(_classRef, "getStatusCode", "()I");

  /// from: public int getStatusCode()
  ///
  /// @return Value is android.provider.FontsContract.FontFamilyResult\#STATUS_OK, android.provider.FontsContract.FontFamilyResult\#STATUS_WRONG_CERTIFICATES, or android.provider.FontsContract.FontFamilyResult\#STATUS_UNEXPECTED_DATA_PROVIDED
  int getStatusCode() => jniAccessors.callMethodWithArgs(
      reference, _id_getStatusCode, jni.JniType.intType, []).integer;

  static final _id_getFonts = jniAccessors.getMethodIDOf(
      _classRef, "getFonts", "()[Landroid/provider/FontsContract\$FontInfo;");

  /// from: public android.provider.FontsContract.FontInfo[] getFonts()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return This value will never be {@code null}.
  jni.JniObject getFonts() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFonts, jni.JniType.objectType, []).object);
}

/// from: android.provider.FontsContract$Columns
///
/// Defines the constants used in a response from a Font Provider. The cursor returned from the
/// query should have the ID column populated with the content uri ID for the resulting font.
/// This should point to a real file or shared memory, as the client will mmap the given file
/// descriptor. Pipes, sockets and other non-mmap-able file descriptors will fail to load in the
/// client application.
class FontsContract_Columns extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/FontsContract\$Columns");
  FontsContract_Columns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String FILE_ID
  ///
  /// Constant used to request data from a font provider. The cursor returned from the query
  /// may populate this column with a long for the font file ID. The client will request a file
  /// descriptor to "file/FILE_ID" with this ID immediately under the top-level content URI. If
  /// not present, the client will request a file descriptor to the top-level URI with the
  /// given base font ID. Note that several results may return the same file ID, e.g. for TTC
  /// files with different indices.
  static const FILE_ID = "file_id";

  /// from: static public final java.lang.String ITALIC
  ///
  /// Constant used to request data from a font provider. The cursor returned from the query
  /// should have this column populated with the int italic for the resulting font. This should
  /// be 0 for regular style and 1 for italic.
  static const ITALIC = "font_italic";

  /// from: static public final java.lang.String RESULT_CODE
  ///
  /// Constant used to request data from a font provider. The cursor returned from the query
  /// should have this column populated to indicate the result status of the
  /// query. This will be checked before any other data in the cursor. Possible values are
  /// \#RESULT_CODE_OK, \#RESULT_CODE_FONT_NOT_FOUND,
  /// \#RESULT_CODE_MALFORMED_QUERY and \#RESULT_CODE_FONT_UNAVAILABLE for system
  /// defined values. You may also define your own values in the 0x000010000..0xFFFF0000 range.
  /// If not present, \#RESULT_CODE_OK will be assumed.
  static const RESULT_CODE = "result_code";

  /// from: static public final int RESULT_CODE_FONT_NOT_FOUND
  ///
  /// Constant used to represent a result was not found. See \#RESULT_CODE.
  static const RESULT_CODE_FONT_NOT_FOUND = 1;

  /// from: static public final int RESULT_CODE_FONT_UNAVAILABLE
  ///
  /// Constant used to represent a result was found, but cannot be provided at this moment. Use
  /// this to indicate, for example, that a font needs to be fetched from the network. See
  /// \#RESULT_CODE.
  static const RESULT_CODE_FONT_UNAVAILABLE = 2;

  /// from: static public final int RESULT_CODE_MALFORMED_QUERY
  ///
  /// Constant used to represent that the query was not in a supported format by the provider.
  /// See \#RESULT_CODE.
  static const RESULT_CODE_MALFORMED_QUERY = 3;

  /// from: static public final int RESULT_CODE_OK
  ///
  /// Constant used to represent a result was retrieved successfully. The given fonts will be
  /// attempted to retrieve immediately via
  /// android.content.ContentProvider\#openFile(Uri, String). See \#RESULT_CODE.
  static const RESULT_CODE_OK = 0;

  /// from: static public final java.lang.String TTC_INDEX
  ///
  /// Constant used to request data from a font provider. The cursor returned from the query
  /// should have this column populated with an int for the ttc index for the resulting font.
  static const TTC_INDEX = "font_ttc_index";

  /// from: static public final java.lang.String VARIATION_SETTINGS
  ///
  /// Constant used to request data from a font provider. The cursor returned from the query
  /// may populate this column with the font variation settings String information for the
  /// font.
  static const VARIATION_SETTINGS = "font_variation_settings";

  /// from: static public final java.lang.String WEIGHT
  ///
  /// Constant used to request data from a font provider. The cursor returned from the query
  /// should have this column populated with the int weight for the resulting font. This value
  /// should be between 100 and 900. The most common values are 400 for regular weight and 700
  /// for bold weight.
  static const WEIGHT = "font_weight";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  FontsContract_Columns()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}
