// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.provider.Browser
class Browser extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/provider/Browser");
  Browser.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String EXTRA_APPLICATION_ID
  ///
  /// The name of the extra data when starting the Browser from another
  /// application.
  ///
  /// The value is a unique identification string that will be used to
  /// identify the calling application. The Browser will attempt to reuse the
  /// same window each time the application launches the Browser with the same
  /// identifier.
  static const EXTRA_APPLICATION_ID = "com.android.browser.application_id";

  /// from: static public final java.lang.String EXTRA_CREATE_NEW_TAB
  ///
  /// Boolean extra passed along with an Intent to a browser, specifying that
  /// a new tab be created.  Overrides EXTRA_APPLICATION_ID; if both are set,
  /// a new tab will be used, rather than using the same one.
  static const EXTRA_CREATE_NEW_TAB = "create_new_tab";

  /// from: static public final java.lang.String EXTRA_HEADERS
  ///
  /// The name of the extra data in the VIEW intent. The data are key/value
  /// pairs in the format of Bundle. They will be sent in the HTTP request
  /// headers for the provided url. The keys can't be the standard HTTP headers
  /// as they are set by the WebView. The url's schema must be http(s).
  ///
  static const EXTRA_HEADERS = "com.android.browser.headers";

  /// from: static public final java.lang.String INITIAL_ZOOM_LEVEL
  ///
  /// The name of extra data when starting Browser with ACTION_VIEW or
  /// ACTION_SEARCH intent.
  ///
  /// The value should be an integer between 0 and 1000. If not set or set to
  /// 0, the Browser will use default. If set to 100, the Browser will start
  /// with 100%.
  static const INITIAL_ZOOM_LEVEL = "browser.initialZoomLevel";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Browser()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_sendString = jniAccessors.getStaticMethodIDOf(_classRef,
      "sendString", "(Landroid/content/Context;Ljava/lang/String;)V");

  /// from: static public final void sendString(android.content.Context context, java.lang.String string)
  ///
  /// Sends the given string using an Intent with Intent\#ACTION_SEND and a mime type
  /// of text/plain. The string is put into Intent\#EXTRA_TEXT.
  ///@param context the context used to start the activity
  ///@param string the string to send
  static void sendString(context_.Context context, jni.JniString string) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_sendString,
          jni.JniType.voidType, [context.reference, string.reference]).check();
}
