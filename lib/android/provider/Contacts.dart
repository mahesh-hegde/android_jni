// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../net/Uri.dart" as uri_;

import "../content/ContentResolver.dart" as contentresolver_;

import "../content/Context.dart" as context_;

import "../content/ContentValues.dart" as contentvalues_;

import "../database/Cursor.dart" as cursor_;

import "../graphics/Bitmap.dart" as bitmap_;

import "../graphics/BitmapFactory.dart" as bitmapfactory_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.provider.Contacts
///
/// The Contacts provider stores all information about contacts.
///@deprecated The APIs have been superseded by ContactsContract. The newer APIs allow
/// access multiple accounts and support aggregation of similar contacts. These APIs continue to
/// work but will only return data for the first Google account created, which matches the original
/// behavior.
class Contacts extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/provider/Contacts");
  Contacts.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String AUTHORITY
  ///
  /// @deprecated see android.provider.ContactsContract
  static const AUTHORITY = "contacts";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this provider
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final int KIND_EMAIL
  ///
  /// Signifies an email address row that is stored in the ContactMethods table
  ///@deprecated see android.provider.ContactsContract
  static const KIND_EMAIL = 1;

  /// from: static public final int KIND_IM
  ///
  /// Signifies an IM address row that is stored in the ContactMethods table
  ///@deprecated see android.provider.ContactsContract
  static const KIND_IM = 3;

  /// from: static public final int KIND_ORGANIZATION
  ///
  /// Signifies an Organization row that is stored in the Organizations table
  ///@deprecated see android.provider.ContactsContract
  static const KIND_ORGANIZATION = 4;

  /// from: static public final int KIND_PHONE
  ///
  /// Signifies a Phone row that is stored in the Phones table
  ///@deprecated see android.provider.ContactsContract
  static const KIND_PHONE = 5;

  /// from: static public final int KIND_POSTAL
  ///
  /// Signifies a postal address row that is stored in the ContactMethods table
  ///@deprecated see android.provider.ContactsContract
  static const KIND_POSTAL = 2;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  Contacts()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.Contacts$SettingsColumns
///
/// Columns from the Settings table that other columns join into themselves.
///@deprecated see android.provider.ContactsContract
class Contacts_SettingsColumns extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$SettingsColumns");
  Contacts_SettingsColumns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String KEY
  ///
  /// The key of this setting.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const KEY = "key";

  /// from: static public final java.lang.String VALUE
  ///
  /// The value of this setting.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const VALUE = "value";
}

/// from: android.provider.Contacts$Settings
///
/// The settings over all of the people
///@deprecated see android.provider.ContactsContract
class Contacts_Settings extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$Settings");
  Contacts_Settings.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  ///
  /// The directory twig for this sub-table
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_DIRECTORY = "settings";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "key ASC";

  /// from: static public final java.lang.String SYNC_EVERYTHING
  ///
  /// A setting that is used to indicate if we should sync down all groups for the
  /// specified account. For this setting the _SYNC_ACCOUNT column must be set.
  /// If this isn't set then we will only sync the groups whose SHOULD_SYNC column
  /// is set to true.
  ///
  /// This is a boolean setting. It is true if it is set and it is anything other than the
  /// emptry string or "0".
  ///@deprecated see android.provider.ContactsContract
  static const SYNC_EVERYTHING = "syncEverything";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  Contacts_Settings()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getSetting = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getSetting",
      "(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getSetting(android.content.ContentResolver cr, java.lang.String account, java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated see android.provider.ContactsContract
  static jni.JniString getSetting(contentresolver_.ContentResolver cr,
          jni.JniString account, jni.JniString key) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getSetting,
          jni.JniType.objectType,
          [cr.reference, account.reference, key.reference]).object);

  static final _id_setSetting = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "setSetting",
      "(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

  /// from: static public void setSetting(android.content.ContentResolver cr, java.lang.String account, java.lang.String key, java.lang.String value)
  ///
  /// @deprecated see android.provider.ContactsContract
  static void setSetting(contentresolver_.ContentResolver cr,
          jni.JniString account, jni.JniString key, jni.JniString value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_setSetting, jni.JniType.voidType, [
        cr.reference,
        account.reference,
        key.reference,
        value.reference
      ]).check();
}

/// from: android.provider.Contacts$PresenceColumns
///
/// The IM presence columns with some contacts specific columns mixed in.
///@deprecated see android.provider.ContactsContract
class Contacts_PresenceColumns extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$PresenceColumns");
  Contacts_PresenceColumns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int AVAILABLE
  static const AVAILABLE = 5;

  /// from: static public final int AWAY
  static const AWAY = 2;

  /// from: static public final int DO_NOT_DISTURB
  static const DO_NOT_DISTURB = 4;

  /// from: static public final int IDLE
  static const IDLE = 3;

  /// from: static public final java.lang.String IM_ACCOUNT
  ///
  /// The IM account for the local user that the presence data came from.
  /// <P>Type: STRING</P>
  ///@deprecated see android.provider.ContactsContract
  static const IM_ACCOUNT = "im_account";

  /// from: static public final java.lang.String IM_HANDLE
  ///
  /// The IM handle the presence item is for. The handle is scoped to
  /// the \#IM_PROTOCOL.
  /// <P>Type: STRING</P>
  ///@deprecated see android.provider.ContactsContract
  static const IM_HANDLE = "im_handle";

  /// from: static public final java.lang.String IM_PROTOCOL
  ///
  /// The IM service the presence is coming from. Formatted using either
  /// Contacts.ContactMethods\#encodePredefinedImProtocol or
  /// Contacts.ContactMethods\#encodeCustomImProtocol.
  /// <P>Type: STRING</P>
  ///@deprecated see android.provider.ContactsContract
  static const IM_PROTOCOL = "im_protocol";

  /// from: static public final int INVISIBLE
  static const INVISIBLE = 1;

  /// from: static public final int OFFLINE
  ///
  /// Presence Status definition
  static const OFFLINE = 0;

  /// from: static public final java.lang.String PRESENCE_CUSTOM_STATUS
  ///
  /// The user defined status line.
  /// <P>Type: TEXT</P>
  static const PRESENCE_CUSTOM_STATUS = "status";

  /// from: static public final java.lang.String PRESENCE_STATUS
  ///
  /// The server defined status.
  /// <P>Type: INTEGER (one of the values below)</P>
  static const PRESENCE_STATUS = "mode";

  /// from: static public final java.lang.String PRIORITY
  ///
  /// The priority, an integer, used by XMPP presence
  /// <P>Type: INTEGER</P>
  static const PRIORITY = "priority";
}

/// from: android.provider.Contacts$PhotosColumns
///
/// Columns from the Photos table that other columns join into themselves.
///@deprecated see android.provider.ContactsContract
class Contacts_PhotosColumns extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$PhotosColumns");
  Contacts_PhotosColumns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String DATA
  ///
  /// The image data, or null if there is no image.
  /// <P>Type: BLOB</P>
  ///@deprecated see android.provider.ContactsContract
  static const DATA = "data";

  /// from: static public final java.lang.String DOWNLOAD_REQUIRED
  ///
  /// non-zero if a download is required and the photo isn't marked as a bad resource.
  /// You must specify this in the columns in order to use it in the where clause.
  /// <P>Type: INTEGER(boolean)</P>
  ///@deprecated see android.provider.ContactsContract
  static const DOWNLOAD_REQUIRED = "download_required";

  /// from: static public final java.lang.String EXISTS_ON_SERVER
  ///
  /// non-zero if this photo is known to exist on the server
  /// <P>Type: INTEGER(boolean)</P>
  ///@deprecated see android.provider.ContactsContract
  static const EXISTS_ON_SERVER = "exists_on_server";

  /// from: static public final java.lang.String LOCAL_VERSION
  ///
  /// The _SYNC_VERSION of the photo that was last downloaded
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const LOCAL_VERSION = "local_version";

  /// from: static public final java.lang.String PERSON_ID
  ///
  /// The person this photo is associated with.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const PERSON_ID = "person";

  /// from: static public final java.lang.String SYNC_ERROR
  ///
  /// Contains the description of the upload or download error from
  /// the previous attempt. If null then the previous attempt succeeded.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const SYNC_ERROR = "sync_error";
}

/// from: android.provider.Contacts$Photos
///
/// The photos over all of the people
///@deprecated see android.provider.ContactsContract
class Contacts_Photos extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$Photos");
  Contacts_Photos.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  ///
  /// The directory twig for this sub-table
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_DIRECTORY = "photo";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "person ASC";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  Contacts_Photos()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.Contacts$PhonesColumns
///
/// Columns from the Phones table that other columns join into themselves.
///@deprecated see android.provider.ContactsContract
class Contacts_PhonesColumns extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$PhonesColumns");
  Contacts_PhonesColumns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ISPRIMARY
  ///
  /// Whether this is the primary phone number
  /// <P>Type: INTEGER (if set, non-0 means true)</P>
  ///@deprecated see android.provider.ContactsContract
  static const ISPRIMARY = "isprimary";

  /// from: static public final java.lang.String LABEL
  ///
  /// The user provided label for the phone number, only used if TYPE is TYPE_CUSTOM.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const LABEL = "label";

  /// from: static public final java.lang.String NUMBER
  ///
  /// The phone number as the user entered it.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const NUMBER = "number";

  /// from: static public final java.lang.String NUMBER_KEY
  ///
  /// The normalized phone number
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const NUMBER_KEY = "number_key";

  /// from: static public final java.lang.String TYPE
  ///
  /// The type of the the phone number.
  /// <P>Type: INTEGER (one of the constants below)</P>
  ///@deprecated see android.provider.ContactsContract
  static const TYPE = "type";

  /// from: static public final int TYPE_CUSTOM
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_CUSTOM = 0;

  /// from: static public final int TYPE_FAX_HOME
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_FAX_HOME = 5;

  /// from: static public final int TYPE_FAX_WORK
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_FAX_WORK = 4;

  /// from: static public final int TYPE_HOME
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_HOME = 1;

  /// from: static public final int TYPE_MOBILE
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_MOBILE = 2;

  /// from: static public final int TYPE_OTHER
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_OTHER = 7;

  /// from: static public final int TYPE_PAGER
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_PAGER = 6;

  /// from: static public final int TYPE_WORK
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_WORK = 3;
}

/// from: android.provider.Contacts$Phones
///
/// This table stores phone numbers and a reference to the person that the
/// contact method belongs to. Phone numbers are stored separately from
/// other contact methods to make caller ID lookup more efficient.
///@deprecated see android.provider.ContactsContract
class Contacts_Phones extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$Phones");
  Contacts_Phones.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CONTENT_FILTER_URL = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_FILTER_URL", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_FILTER_URL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for filtering phone numbers
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_FILTER_URL => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_FILTER_URL, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String CONTENT_ITEM_TYPE
  ///
  /// The MIME type of a \#CONTENT_URI subdirectory of a single
  /// phone.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_ITEM_TYPE = "vnd.android.cursor.item/phone";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of \#CONTENT_URI providing a directory of
  /// phones.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_TYPE = "vnd.android.cursor.dir/phone";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "name ASC";

  /// from: static public final java.lang.String PERSON_ID
  ///
  /// The ID of the person this phone number is assigned to.
  /// <P>Type: INTEGER (long)</P>
  ///@deprecated see android.provider.ContactsContract
  static const PERSON_ID = "person";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  Contacts_Phones()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getDisplayLabel = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayLabel",
      "(Landroid/content/Context;ILjava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");

  /// from: static public java.lang.CharSequence getDisplayLabel(android.content.Context context, int type, java.lang.CharSequence label, java.lang.CharSequence[] labelArray)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated see android.provider.ContactsContract
  static jni.JniObject getDisplayLabel(context_.Context context, int type,
          jni.JniObject label, jni.JniObject labelArray) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getDisplayLabel, jni.JniType.objectType, [
        context.reference,
        type,
        label.reference,
        labelArray.reference
      ]).object);

  static final _id_getDisplayLabel1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayLabel",
      "(Landroid/content/Context;ILjava/lang/CharSequence;)Ljava/lang/CharSequence;");

  /// from: static public java.lang.CharSequence getDisplayLabel(android.content.Context context, int type, java.lang.CharSequence label)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated see android.provider.ContactsContract
  static jni.JniObject getDisplayLabel1(
          context_.Context context, int type, jni.JniObject label) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayLabel1,
          jni.JniType.objectType,
          [context.reference, type, label.reference]).object);
}

/// from: android.provider.Contacts$PeopleColumns
///
/// Columns from the People table that other tables join into themselves.
///@deprecated see android.provider.ContactsContract
class Contacts_PeopleColumns extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$PeopleColumns");
  Contacts_PeopleColumns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CUSTOM_RINGTONE
  ///
  /// A custom ringtone associated with a person. Not always present.
  /// <P>Type: TEXT (URI to the ringtone)</P>
  ///@deprecated see android.provider.ContactsContract
  static const CUSTOM_RINGTONE = "custom_ringtone";

  /// from: static public final java.lang.String DISPLAY_NAME
  ///
  /// The display name. If name is not null name, else if number is not null number,
  /// else if email is not null email.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const DISPLAY_NAME = "display_name";

  /// from: static public final java.lang.String LAST_TIME_CONTACTED
  ///
  /// The last time a person was contacted.
  /// <P>Type: INTEGER</P>
  ///@deprecated see android.provider.ContactsContract
  static const LAST_TIME_CONTACTED = "last_time_contacted";

  /// from: static public final java.lang.String NAME
  ///
  /// The person's name.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const NAME = "name";

  /// from: static public final java.lang.String NOTES
  ///
  /// Notes about the person.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const NOTES = "notes";

  /// from: static public final java.lang.String PHONETIC_NAME
  ///
  /// Phonetic equivalent of the person's name, in a locale-dependent
  /// character set (e.g.&nbsp;hiragana for Japanese).
  /// Used for pronunciation and/or collation in some languages.
  /// Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const PHONETIC_NAME = "phonetic_name";

  /// from: static public final java.lang.String PHOTO_VERSION
  ///
  /// The server version of the photo
  /// <P>Type: TEXT (the version number portion of the photo URI)</P>
  ///@deprecated see android.provider.ContactsContract
  static const PHOTO_VERSION = "photo_version";

  /// from: static public final java.lang.String SEND_TO_VOICEMAIL
  ///
  /// Whether the person should always be sent to voicemail. Not always
  /// present.
  /// <P>Type: INTEGER (0 for false, 1 for true)</P>
  ///@deprecated see android.provider.ContactsContract
  static const SEND_TO_VOICEMAIL = "send_to_voicemail";

  /// from: static public final java.lang.String STARRED
  ///
  /// Is the contact starred?
  /// <P>Type: INTEGER (boolean)</P>
  ///@deprecated see android.provider.ContactsContract
  static const STARRED = "starred";

  /// from: static public final java.lang.String TIMES_CONTACTED
  ///
  /// The number of times a person has been contacted
  /// <P>Type: INTEGER</P>
  ///@deprecated see android.provider.ContactsContract
  static const TIMES_CONTACTED = "times_contacted";
}

/// from: android.provider.Contacts$People
///
/// This table contains people.
///@deprecated see android.provider.ContactsContract
class Contacts_People extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$People");
  Contacts_People.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CONTENT_FILTER_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_FILTER_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_FILTER_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for filtering people by name. The filter
  /// argument should be passed as an additional path segment after this URI.
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_FILTER_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_FILTER_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String CONTENT_ITEM_TYPE
  ///
  /// The MIME type of a \#CONTENT_URI subdirectory of a single
  /// person.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_ITEM_TYPE = "vnd.android.cursor.item/person";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of \#CONTENT_URI providing a directory of
  /// people.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_TYPE = "vnd.android.cursor.dir/person";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "name ASC";

  static final _id_DELETED_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "DELETED_CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri DELETED_CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for the table that holds the deleted
  /// contacts.
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get DELETED_CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(
          _classRef, _id_DELETED_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String PRIMARY_EMAIL_ID
  ///
  /// The ID of the persons preferred email.
  /// <P>Type: INTEGER (foreign key to contact_methods table on the
  /// _ID field)</P>
  ///@deprecated see android.provider.ContactsContract
  static const PRIMARY_EMAIL_ID = "primary_email";

  /// from: static public final java.lang.String PRIMARY_ORGANIZATION_ID
  ///
  /// The ID of the persons preferred organization.
  /// <P>Type: INTEGER (foreign key to organizations table on the
  /// _ID field)</P>
  ///@deprecated see android.provider.ContactsContract
  static const PRIMARY_ORGANIZATION_ID = "primary_organization";

  /// from: static public final java.lang.String PRIMARY_PHONE_ID
  ///
  /// The ID of the persons preferred phone number.
  /// <P>Type: INTEGER (foreign key to phones table on the _ID field)</P>
  ///@deprecated see android.provider.ContactsContract
  static const PRIMARY_PHONE_ID = "primary_phone";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  ///@deprecated see android.provider.ContactsContract
  Contacts_People()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_markAsContacted = jniAccessors.getStaticMethodIDOf(
      _classRef, "markAsContacted", "(Landroid/content/ContentResolver;J)V");

  /// from: static public void markAsContacted(android.content.ContentResolver resolver, long personId)
  ///
  /// This API is no longer supported as of O.
  static void markAsContacted(
          contentresolver_.ContentResolver resolver, int personId) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_markAsContacted,
          jni.JniType.voidType, [resolver.reference, personId]).check();

  static final _id_addToMyContactsGroup = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "addToMyContactsGroup",
      "(Landroid/content/ContentResolver;J)Landroid/net/Uri;");

  /// from: static public android.net.Uri addToMyContactsGroup(android.content.ContentResolver resolver, long personId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a person to the My Contacts group.
  ///@param resolver the resolver to use
  ///@param personId the person to add to the group
  ///@return the URI of the group membership row
  ///@throws IllegalStateException if the My Contacts group can't be found
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri addToMyContactsGroup(
          contentresolver_.ContentResolver resolver, int personId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_addToMyContactsGroup,
          jni.JniType.objectType,
          [resolver.reference, personId]).object);

  static final _id_addToGroup = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "addToGroup",
      "(Landroid/content/ContentResolver;JLjava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri addToGroup(android.content.ContentResolver resolver, long personId, java.lang.String groupName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a person to a group referred to by name.
  ///@param resolver the resolver to use
  ///@param personId the person to add to the group
  ///@param groupName the name of the group to add the contact to
  ///@return the URI of the group membership row
  ///@throws IllegalStateException if the group can't be found
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri addToGroup(contentresolver_.ContentResolver resolver,
          int personId, jni.JniString groupName) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_addToGroup,
          jni.JniType.objectType,
          [resolver.reference, personId, groupName.reference]).object);

  static final _id_addToGroup1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "addToGroup", "(Landroid/content/ContentResolver;JJ)Landroid/net/Uri;");

  /// from: static public android.net.Uri addToGroup(android.content.ContentResolver resolver, long personId, long groupId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a person to a group.
  ///@param resolver the resolver to use
  ///@param personId the person to add to the group
  ///@param groupId the group to add the person to
  ///@return the URI of the group membership row
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri addToGroup1(contentresolver_.ContentResolver resolver,
          int personId, int groupId) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_addToGroup1,
          jni.JniType.objectType,
          [resolver.reference, personId, groupId]).object);

  static final _id_createPersonInMyContactsGroup = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createPersonInMyContactsGroup",
      "(Landroid/content/ContentResolver;Landroid/content/ContentValues;)Landroid/net/Uri;");

  /// from: static public android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver resolver, android.content.ContentValues values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new contacts and adds it to the "My Contacts" group.
  ///@param resolver the ContentResolver to use
  ///@param values the values to use when creating the contact
  ///@return the URI of the contact, or null if the operation fails
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri createPersonInMyContactsGroup(
          contentresolver_.ContentResolver resolver,
          contentvalues_.ContentValues values) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createPersonInMyContactsGroup,
          jni.JniType.objectType,
          [resolver.reference, values.reference]).object);

  static final _id_queryGroups = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "queryGroups",
      "(Landroid/content/ContentResolver;J)Landroid/database/Cursor;");

  /// from: static public android.database.Cursor queryGroups(android.content.ContentResolver resolver, long person)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated see android.provider.ContactsContract
  static cursor_.Cursor queryGroups(
          contentresolver_.ContentResolver resolver, int person) =>
      cursor_.Cursor.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_queryGroups,
          jni.JniType.objectType,
          [resolver.reference, person]).object);

  static final _id_setPhotoData = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "setPhotoData",
      "(Landroid/content/ContentResolver;Landroid/net/Uri;[B)V");

  /// from: static public void setPhotoData(android.content.ContentResolver cr, android.net.Uri person, byte[] data)
  ///
  /// Set the photo for this person. data may be null
  ///@param cr the ContentResolver to use
  ///@param person the Uri of the person whose photo is to be updated
  ///@param data the byte[] that represents the photo
  ///@deprecated see android.provider.ContactsContract
  static void setPhotoData(contentresolver_.ContentResolver cr, uri_.Uri person,
          jni.JniObject data) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_setPhotoData,
          jni.JniType.voidType,
          [cr.reference, person.reference, data.reference]).check();

  static final _id_openContactPhotoInputStream = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "openContactPhotoInputStream",
      "(Landroid/content/ContentResolver;Landroid/net/Uri;)Ljava/io/InputStream;");

  /// from: static public java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver cr, android.net.Uri person)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Opens an InputStream for the person's photo and returns the photo as a Bitmap.
  /// If the person's photo isn't present returns the placeholderImageResource instead.
  ///@param person the person whose photo should be used
  ///@deprecated see android.provider.ContactsContract
  static jni.JniObject openContactPhotoInputStream(
          contentresolver_.ContentResolver cr, uri_.Uri person) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_openContactPhotoInputStream,
          jni.JniType.objectType,
          [cr.reference, person.reference]).object);

  static final _id_loadContactPhoto = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "loadContactPhoto",
      "(Landroid/content/Context;Landroid/net/Uri;ILandroid/graphics/BitmapFactory\$Options;)Landroid/graphics/Bitmap;");

  /// from: static public android.graphics.Bitmap loadContactPhoto(android.content.Context context, android.net.Uri person, int placeholderImageResource, android.graphics.BitmapFactory.Options options)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Opens an InputStream for the person's photo and returns the photo as a Bitmap.
  /// If the person's photo isn't present returns the placeholderImageResource instead.
  ///@param context the Context
  ///@param person the person whose photo should be used
  ///@param placeholderImageResource the image resource to use if the person doesn't
  ///   have a photo
  ///@param options the decoding options, can be set to null
  ///@deprecated see android.provider.ContactsContract
  static bitmap_.Bitmap loadContactPhoto(
          context_.Context context,
          uri_.Uri person,
          int placeholderImageResource,
          bitmapfactory_.BitmapFactory_Options options) =>
      bitmap_.Bitmap.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_loadContactPhoto, jni.JniType.objectType, [
        context.reference,
        person.reference,
        placeholderImageResource,
        options.reference
      ]).object);
}

/// from: android.provider.Contacts$People$Phones
///
/// A sub directory of a single person that contains all of their Phones.
///@deprecated see android.provider.ContactsContract
class Contacts_People_Phones extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$People\$Phones");
  Contacts_People_Phones.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  ///
  /// The directory twig for this sub-table
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_DIRECTORY = "phones";

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "number ASC";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  Contacts_People_Phones()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.Contacts$People$Extensions
///
/// The extensions for a person
///@deprecated see android.provider.ContactsContract
class Contacts_People_Extensions extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$People\$Extensions");
  Contacts_People_Extensions.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  ///
  /// The directory twig for this sub-table
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_DIRECTORY = "extensions";

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "name ASC";

  /// from: static public final java.lang.String PERSON_ID
  ///
  /// The ID of the person this phone number is assigned to.
  /// <P>Type: INTEGER (long)</P>
  ///@deprecated see android.provider.ContactsContract
  static const PERSON_ID = "person";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  ///@deprecated see android.provider.ContactsContract
  Contacts_People_Extensions()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.Contacts$People$ContactMethods
///
/// A subdirectory of a single person that contains all of their
/// ContactMethods.
///@deprecated see android.provider.ContactsContract
class Contacts_People_ContactMethods extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/provider/Contacts\$People\$ContactMethods");
  Contacts_People_ContactMethods.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  ///
  /// The directory twig for this sub-table
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_DIRECTORY = "contact_methods";

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "data ASC";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  Contacts_People_ContactMethods()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.Contacts$Organizations
///
/// A sub directory of a single person that contains all of their Phones.
///@deprecated see android.provider.ContactsContract
class Contacts_Organizations extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$Organizations");
  Contacts_Organizations.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  ///
  /// The directory twig for this sub-table
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_DIRECTORY = "organizations";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "company, title, isprimary ASC";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  Contacts_Organizations()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getDisplayLabel = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayLabel",
      "(Landroid/content/Context;ILjava/lang/CharSequence;)Ljava/lang/CharSequence;");

  /// from: static public java.lang.CharSequence getDisplayLabel(android.content.Context context, int type, java.lang.CharSequence label)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated see android.provider.ContactsContract
  static jni.JniObject getDisplayLabel(
          context_.Context context, int type, jni.JniObject label) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayLabel,
          jni.JniType.objectType,
          [context.reference, type, label.reference]).object);
}

/// from: android.provider.Contacts$OrganizationColumns
///
/// Columns from the Organizations table that other columns join into themselves.
///@deprecated see android.provider.ContactsContract
class Contacts_OrganizationColumns extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$OrganizationColumns");
  Contacts_OrganizationColumns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String COMPANY
  ///
  /// The name of the company for this organization.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const COMPANY = "company";

  /// from: static public final java.lang.String ISPRIMARY
  ///
  /// Whether this is the primary organization
  /// <P>Type: INTEGER (if set, non-0 means true)</P>
  ///@deprecated see android.provider.ContactsContract
  static const ISPRIMARY = "isprimary";

  /// from: static public final java.lang.String LABEL
  ///
  /// The user provided label, only used if TYPE is TYPE_CUSTOM.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const LABEL = "label";

  /// from: static public final java.lang.String PERSON_ID
  ///
  /// The person this organization is tied to.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const PERSON_ID = "person";

  /// from: static public final java.lang.String TITLE
  ///
  /// The title within this organization.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const TITLE = "title";

  /// from: static public final java.lang.String TYPE
  ///
  /// The type of the organizations.
  /// <P>Type: INTEGER (one of the constants below)</P>
  ///@deprecated see android.provider.ContactsContract
  static const TYPE = "type";

  /// from: static public final int TYPE_CUSTOM
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_CUSTOM = 0;

  /// from: static public final int TYPE_OTHER
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_OTHER = 2;

  /// from: static public final int TYPE_WORK
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_WORK = 1;
}

/// from: android.provider.Contacts$Intents
///
/// Contains helper classes used to create or manage android.content.Intent Intents
/// that involve contacts.
///@deprecated see android.provider.ContactsContract
class Contacts_Intents extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$Intents");
  Contacts_Intents.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ATTACH_IMAGE
  ///
  /// Starts an Activity that lets the user pick a contact to attach an image to.
  /// After picking the contact it launches the image cropper in face detection mode.
  ///@deprecated see android.provider.ContactsContract
  static const ATTACH_IMAGE = "com.android.contacts.action.ATTACH_IMAGE";

  /// from: static public final java.lang.String EXTRA_CREATE_DESCRIPTION
  ///
  /// Used with \#SHOW_OR_CREATE_CONTACT to specify an exact
  /// description to be shown when prompting user about creating a new
  /// contact.
  ///
  /// Type: STRING
  ///@deprecated see android.provider.ContactsContract
  static const EXTRA_CREATE_DESCRIPTION =
      "com.android.contacts.action.CREATE_DESCRIPTION";

  /// from: static public final java.lang.String EXTRA_FORCE_CREATE
  ///
  /// Used with \#SHOW_OR_CREATE_CONTACT to force creating a new
  /// contact if no matching contact found. Otherwise, default behavior is
  /// to prompt user with dialog before creating.
  ///
  /// Type: BOOLEAN
  ///@deprecated see android.provider.ContactsContract
  static const EXTRA_FORCE_CREATE = "com.android.contacts.action.FORCE_CREATE";

  /// from: static public final java.lang.String SEARCH_SUGGESTION_CLICKED
  ///
  /// This is the intent that is fired when a search suggestion is clicked on.
  ///@deprecated see android.provider.ContactsContract
  static const SEARCH_SUGGESTION_CLICKED =
      "android.provider.Contacts.SEARCH_SUGGESTION_CLICKED";

  /// from: static public final java.lang.String SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED
  ///
  /// This is the intent that is fired when a search suggestion for creating a contact
  /// is clicked on.
  ///@deprecated see android.provider.ContactsContract
  static const SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED =
      "android.provider.Contacts.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED";

  /// from: static public final java.lang.String SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED
  ///
  /// This is the intent that is fired when a search suggestion for dialing a number
  /// is clicked on.
  ///@deprecated see android.provider.ContactsContract
  static const SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED =
      "android.provider.Contacts.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED";

  /// from: static public final java.lang.String SHOW_OR_CREATE_CONTACT
  ///
  /// Takes as input a data URI with a mailto: or tel: scheme. If a single
  /// contact exists with the given data it will be shown. If no contact
  /// exists, a dialog will ask the user if they want to create a new
  /// contact with the provided details filled in. If multiple contacts
  /// share the data the user will be prompted to pick which contact they
  /// want to view.
  ///
  /// For <code>mailto:</code> URIs, the scheme specific portion must be a
  /// raw email address, such as one built using
  /// Uri\#fromParts(String, String, String).
  ///
  /// For <code>tel:</code> URIs, the scheme specific portion is compared
  /// to existing numbers using the standard caller ID lookup algorithm.
  /// The number must be properly encoded, for example using
  /// Uri\#fromParts(String, String, String).
  ///
  /// Any extras from the Insert class will be passed along to the
  /// create activity if there are no contacts to show.
  ///
  /// Passing true for the \#EXTRA_FORCE_CREATE extra will skip
  /// prompting the user when the contact doesn't exist.
  ///@deprecated see android.provider.ContactsContract
  static const SHOW_OR_CREATE_CONTACT =
      "com.android.contacts.action.SHOW_OR_CREATE_CONTACT";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated see android.provider.ContactsContract
  Contacts_Intents()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.Contacts$Intents$UI
///
/// Intents related to the Contacts app UI.
///@deprecated Do not use. This is not supported.
class Contacts_Intents_UI extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$Intents\$UI");
  Contacts_Intents_UI.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String FILTER_CONTACTS_ACTION
  ///
  /// Activity Action: Display a filtered list of contacts
  ///
  /// Input: Extra field \#FILTER_TEXT_EXTRA_KEY is the text to use for
  /// filtering
  ///
  /// Output: Nothing.
  ///@deprecated Do not use. This is not supported.
  static const FILTER_CONTACTS_ACTION =
      "com.android.contacts.action.FILTER_CONTACTS";

  /// from: static public final java.lang.String FILTER_TEXT_EXTRA_KEY
  ///
  /// Used as an int extra field in \#FILTER_CONTACTS_ACTION
  /// intents to supply the text on which to filter.
  ///@deprecated Do not use. This is not supported.
  static const FILTER_TEXT_EXTRA_KEY = "com.android.contacts.extra.FILTER_TEXT";

  /// from: static public final java.lang.String GROUP_NAME_EXTRA_KEY
  ///
  /// When in LIST_GROUP_ACTION mode, this is the group to display.
  ///@deprecated Do not use. This is not supported.
  static const GROUP_NAME_EXTRA_KEY = "com.android.contacts.extra.GROUP";

  /// from: static public final java.lang.String LIST_ALL_CONTACTS_ACTION
  ///
  /// The action for the all contacts list tab.
  ///@deprecated Do not use. This is not supported.
  static const LIST_ALL_CONTACTS_ACTION =
      "com.android.contacts.action.LIST_ALL_CONTACTS";

  /// from: static public final java.lang.String LIST_CONTACTS_WITH_PHONES_ACTION
  ///
  /// The action for the contacts with phone numbers list tab.
  ///@deprecated Do not use. This is not supported.
  static const LIST_CONTACTS_WITH_PHONES_ACTION =
      "com.android.contacts.action.LIST_CONTACTS_WITH_PHONES";

  /// from: static public final java.lang.String LIST_DEFAULT
  ///
  /// The action for the default contacts list tab.
  ///@deprecated Do not use. This is not supported.
  static const LIST_DEFAULT = "com.android.contacts.action.LIST_DEFAULT";

  /// from: static public final java.lang.String LIST_FREQUENT_ACTION
  ///
  /// The action for the frequent contacts list tab.
  ///@deprecated Do not use. This is not supported.
  static const LIST_FREQUENT_ACTION =
      "com.android.contacts.action.LIST_FREQUENT";

  /// from: static public final java.lang.String LIST_GROUP_ACTION
  ///
  /// The action for the contacts list tab.
  ///@deprecated Do not use. This is not supported.
  static const LIST_GROUP_ACTION = "com.android.contacts.action.LIST_GROUP";

  /// from: static public final java.lang.String LIST_STARRED_ACTION
  ///
  /// The action for the starred contacts list tab.
  ///@deprecated Do not use. This is not supported.
  static const LIST_STARRED_ACTION = "com.android.contacts.action.LIST_STARRED";

  /// from: static public final java.lang.String LIST_STREQUENT_ACTION
  ///
  /// The action for the "strequent" contacts list tab. It first lists the starred
  /// contacts in alphabetical order and then the frequent contacts in descending
  /// order of the number of times they have been contacted.
  ///@deprecated Do not use. This is not supported.
  static const LIST_STREQUENT_ACTION =
      "com.android.contacts.action.LIST_STREQUENT";

  /// from: static public final java.lang.String TITLE_EXTRA_KEY
  ///
  /// A key for to be used as an intent extra to set the activity
  /// title to a custom String value.
  ///@deprecated Do not use. This is not supported.
  static const TITLE_EXTRA_KEY = "com.android.contacts.extra.TITLE_EXTRA";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated Do not use. This is not supported.
  Contacts_Intents_UI()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.Contacts$Intents$Insert
///
/// Convenience class that contains string constants used
/// to create contact android.content.Intent Intents.
///@deprecated see android.provider.ContactsContract
class Contacts_Intents_Insert extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$Intents\$Insert");
  Contacts_Intents_Insert.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION
  ///
  /// The action code to use when adding a contact
  ///@deprecated see android.provider.ContactsContract
  static const ACTION = "android.intent.action.INSERT";

  /// from: static public final java.lang.String COMPANY
  ///
  /// The extra field for the contact company.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const COMPANY = "company";

  /// from: static public final java.lang.String EMAIL
  ///
  /// The extra field for the contact email address.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const EMAIL = "email";

  /// from: static public final java.lang.String EMAIL_ISPRIMARY
  ///
  /// The extra field for the email isprimary flag.
  /// <P>Type: boolean</P>
  ///@deprecated see android.provider.ContactsContract
  static const EMAIL_ISPRIMARY = "email_isprimary";

  /// from: static public final java.lang.String EMAIL_TYPE
  ///
  /// The extra field for the contact email type.
  /// <P>Type: Either an integer value from android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns
  ///  or a string specifying a custom label.</P>
  ///@deprecated see android.provider.ContactsContract
  static const EMAIL_TYPE = "email_type";

  /// from: static public final java.lang.String FULL_MODE
  ///
  /// If present, forces a bypass of quick insert mode.
  ///@deprecated see android.provider.ContactsContract
  static const FULL_MODE = "full_mode";

  /// from: static public final java.lang.String IM_HANDLE
  ///
  /// The extra field for an IM handle.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const IM_HANDLE = "im_handle";

  /// from: static public final java.lang.String IM_ISPRIMARY
  ///
  /// The extra field for the IM isprimary flag.
  /// <P>Type: boolean</P>
  ///@deprecated see android.provider.ContactsContract
  static const IM_ISPRIMARY = "im_isprimary";

  /// from: static public final java.lang.String IM_PROTOCOL
  ///
  /// The extra field for the IM protocol
  /// <P>Type: the result of Contacts.ContactMethods\#encodePredefinedImProtocol
  /// or Contacts.ContactMethods\#encodeCustomImProtocol.</P>
  ///@deprecated see android.provider.ContactsContract
  static const IM_PROTOCOL = "im_protocol";

  /// from: static public final java.lang.String JOB_TITLE
  ///
  /// The extra field for the contact job title.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const JOB_TITLE = "job_title";

  /// from: static public final java.lang.String NAME
  ///
  /// The extra field for the contact name.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const NAME = "name";

  /// from: static public final java.lang.String NOTES
  ///
  /// The extra field for the contact notes.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const NOTES = "notes";

  /// from: static public final java.lang.String PHONE
  ///
  /// The extra field for the contact phone number.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const PHONE = "phone";

  /// from: static public final java.lang.String PHONETIC_NAME
  ///
  /// The extra field for the contact phonetic name.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const PHONETIC_NAME = "phonetic_name";

  /// from: static public final java.lang.String PHONE_ISPRIMARY
  ///
  /// The extra field for the phone isprimary flag.
  /// <P>Type: boolean</P>
  ///@deprecated see android.provider.ContactsContract
  static const PHONE_ISPRIMARY = "phone_isprimary";

  /// from: static public final java.lang.String PHONE_TYPE
  ///
  /// The extra field for the contact phone number type.
  /// <P>Type: Either an integer value from android.provider.Contacts.PhonesColumns PhonesColumns,
  ///  or a string specifying a custom label.</P>
  ///@deprecated see android.provider.ContactsContract
  static const PHONE_TYPE = "phone_type";

  /// from: static public final java.lang.String POSTAL
  ///
  /// The extra field for the contact postal address.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const POSTAL = "postal";

  /// from: static public final java.lang.String POSTAL_ISPRIMARY
  ///
  /// The extra field for the postal isprimary flag.
  /// <P>Type: boolean</P>
  ///@deprecated see android.provider.ContactsContract
  static const POSTAL_ISPRIMARY = "postal_isprimary";

  /// from: static public final java.lang.String POSTAL_TYPE
  ///
  /// The extra field for the contact postal address type.
  /// <P>Type: Either an integer value from android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns
  ///  or a string specifying a custom label.</P>
  ///@deprecated see android.provider.ContactsContract
  static const POSTAL_TYPE = "postal_type";

  /// from: static public final java.lang.String SECONDARY_EMAIL
  ///
  /// The extra field for an optional second contact email address.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const SECONDARY_EMAIL = "secondary_email";

  /// from: static public final java.lang.String SECONDARY_EMAIL_TYPE
  ///
  /// The extra field for an optional second contact email type.
  /// <P>Type: Either an integer value from android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns
  ///  or a string specifying a custom label.</P>
  ///@deprecated see android.provider.ContactsContract
  static const SECONDARY_EMAIL_TYPE = "secondary_email_type";

  /// from: static public final java.lang.String SECONDARY_PHONE
  ///
  /// The extra field for an optional second contact phone number.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const SECONDARY_PHONE = "secondary_phone";

  /// from: static public final java.lang.String SECONDARY_PHONE_TYPE
  ///
  /// The extra field for an optional second contact phone number type.
  /// <P>Type: Either an integer value from android.provider.Contacts.PhonesColumns PhonesColumns,
  ///  or a string specifying a custom label.</P>
  ///@deprecated see android.provider.ContactsContract
  static const SECONDARY_PHONE_TYPE = "secondary_phone_type";

  /// from: static public final java.lang.String TERTIARY_EMAIL
  ///
  /// The extra field for an optional third contact email address.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const TERTIARY_EMAIL = "tertiary_email";

  /// from: static public final java.lang.String TERTIARY_EMAIL_TYPE
  ///
  /// The extra field for an optional third contact email type.
  /// <P>Type: Either an integer value from android.provider.Contacts.ContactMethodsColumns ContactMethodsColumns
  ///  or a string specifying a custom label.</P>
  ///@deprecated see android.provider.ContactsContract
  static const TERTIARY_EMAIL_TYPE = "tertiary_email_type";

  /// from: static public final java.lang.String TERTIARY_PHONE
  ///
  /// The extra field for an optional third contact phone number.
  /// <P>Type: String</P>
  ///@deprecated see android.provider.ContactsContract
  static const TERTIARY_PHONE = "tertiary_phone";

  /// from: static public final java.lang.String TERTIARY_PHONE_TYPE
  ///
  /// The extra field for an optional third contact phone number type.
  /// <P>Type: Either an integer value from android.provider.Contacts.PhonesColumns PhonesColumns,
  ///  or a string specifying a custom label.</P>
  ///@deprecated see android.provider.ContactsContract
  static const TERTIARY_PHONE_TYPE = "tertiary_phone_type";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated see android.provider.ContactsContract
  Contacts_Intents_Insert()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.Contacts$GroupsColumns
///
/// Columns from the groups table.
///@deprecated see android.provider.ContactsContract
class Contacts_GroupsColumns extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$GroupsColumns");
  Contacts_GroupsColumns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String NAME
  ///
  /// The group name.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const NAME = "name";

  /// from: static public final java.lang.String NOTES
  ///
  /// Notes about the group.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const NOTES = "notes";

  /// from: static public final java.lang.String SHOULD_SYNC
  ///
  /// Whether this group should be synced if the SYNC_EVERYTHING settings is false
  /// for this group's account.
  /// <P>Type: INTEGER (boolean)</P>
  ///@deprecated see android.provider.ContactsContract
  static const SHOULD_SYNC = "should_sync";

  /// from: static public final java.lang.String SYSTEM_ID
  ///
  /// The ID of this group if it is a System Group, null otherwise.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const SYSTEM_ID = "system_id";
}

/// from: android.provider.Contacts$Groups
///
/// This table contains the groups for an account.
///@deprecated see android.provider.ContactsContract
class Contacts_Groups extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$Groups");
  Contacts_Groups.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_ITEM_TYPE
  ///
  /// The MIME type of a \#CONTENT_URI subdirectory of a single
  /// group.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_ITEM_TYPE = "vnd.android.cursor.item/contactsgroup";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of \#CONTENT_URI providing a directory of
  /// groups.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_TYPE = "vnd.android.cursor.dir/contactsgroup";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "name ASC";

  static final _id_DELETED_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "DELETED_CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri DELETED_CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for the table that holds the deleted
  /// groups.
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get DELETED_CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(
          _classRef, _id_DELETED_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String GROUP_ANDROID_STARRED
  ///
  /// @deprecated see android.provider.ContactsContract
  static const GROUP_ANDROID_STARRED = "Starred in Android";

  /// from: static public final java.lang.String GROUP_MY_CONTACTS
  ///
  /// The "My Contacts" system group.
  ///@deprecated see android.provider.ContactsContract
  static const GROUP_MY_CONTACTS = "Contacts";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  Contacts_Groups()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.Contacts$GroupMembership
///
/// @deprecated see android.provider.ContactsContract
class Contacts_GroupMembership extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$GroupMembership");
  Contacts_GroupMembership.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_DIRECTORY
  ///
  /// The directory twig for this sub-table
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_DIRECTORY = "groupmembership";

  /// from: static public final java.lang.String CONTENT_ITEM_TYPE
  ///
  /// The MIME type of a \#CONTENT_URI subdirectory of a single
  /// person group.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_ITEM_TYPE =
      "vnd.android.cursor.item/contactsgroupmembership";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of \#CONTENT_URI providing a directory of all
  /// person groups.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_TYPE = "vnd.android.cursor.dir/contactsgroupmembership";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "group_id ASC";

  /// from: static public final java.lang.String GROUP_ID
  ///
  /// The row id of the accounts group.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const GROUP_ID = "group_id";

  /// from: static public final java.lang.String GROUP_SYNC_ACCOUNT
  ///
  /// The account of the group.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const GROUP_SYNC_ACCOUNT = "group_sync_account";

  /// from: static public final java.lang.String GROUP_SYNC_ACCOUNT_TYPE
  ///
  /// The account type of the group.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const GROUP_SYNC_ACCOUNT_TYPE = "group_sync_account_type";

  /// from: static public final java.lang.String GROUP_SYNC_ID
  ///
  /// The sync id of the group.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const GROUP_SYNC_ID = "group_sync_id";

  /// from: static public final java.lang.String PERSON_ID
  ///
  /// The row id of the person.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const PERSON_ID = "person";

  static final _id_RAW_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "RAW_CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri RAW_CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get RAW_CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_RAW_CONTENT_URI, jni.JniType.objectType)
      .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  Contacts_GroupMembership()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.Contacts$ExtensionsColumns
///
/// @deprecated see android.provider.ContactsContract
class Contacts_ExtensionsColumns extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$ExtensionsColumns");
  Contacts_ExtensionsColumns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String NAME
  ///
  /// The name of this extension. May not be null. There may be at most one row for each name.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const NAME = "name";

  /// from: static public final java.lang.String VALUE
  ///
  /// The value of this extension. May not be null.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const VALUE = "value";
}

/// from: android.provider.Contacts$Extensions
///
/// The extensions for a person
///@deprecated see android.provider.ContactsContract
class Contacts_Extensions extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$Extensions");
  Contacts_Extensions.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_ITEM_TYPE
  ///
  /// The MIME type of a \#CONTENT_URI subdirectory of a single
  /// phone.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_ITEM_TYPE = "vnd.android.cursor.item/contact_extensions";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of \#CONTENT_URI providing a directory of
  /// phones.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_TYPE = "vnd.android.cursor.dir/contact_extensions";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "person, name ASC";

  /// from: static public final java.lang.String PERSON_ID
  ///
  /// The ID of the person this phone number is assigned to.
  /// <P>Type: INTEGER (long)</P>
  ///@deprecated see android.provider.ContactsContract
  static const PERSON_ID = "person";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  Contacts_Extensions()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
}

/// from: android.provider.Contacts$ContactMethodsColumns
///
/// Columns from the ContactMethods table that other tables join into
/// themseleves.
///@deprecated see android.provider.ContactsContract
class Contacts_ContactMethodsColumns extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/provider/Contacts\$ContactMethodsColumns");
  Contacts_ContactMethodsColumns.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String AUX_DATA
  ///
  /// Auxiliary data for the contact method.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const AUX_DATA = "aux_data";

  /// from: static public final java.lang.String DATA
  ///
  /// The data for the contact method.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const DATA = "data";

  /// from: static public final java.lang.String ISPRIMARY
  ///
  /// Whether this is the primary organization
  /// <P>Type: INTEGER (if set, non-0 means true)</P>
  ///@deprecated see android.provider.ContactsContract
  static const ISPRIMARY = "isprimary";

  /// from: static public final java.lang.String KIND
  ///
  /// The kind of the the contact method. For example, email address,
  /// postal address, etc.
  /// <P>Type: INTEGER (one of the values below)</P>
  ///@deprecated see android.provider.ContactsContract
  static const KIND = "kind";

  /// from: static public final java.lang.String LABEL
  ///
  /// The user defined label for the the contact method.
  /// <P>Type: TEXT</P>
  ///@deprecated see android.provider.ContactsContract
  static const LABEL = "label";

  /// from: static public final java.lang.String TYPE
  ///
  /// The type of the contact method, must be one of the types below.
  /// <P>Type: INTEGER (one of the values below)</P>
  ///@deprecated see android.provider.ContactsContract
  static const TYPE = "type";

  /// from: static public final int TYPE_CUSTOM
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_CUSTOM = 0;

  /// from: static public final int TYPE_HOME
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_HOME = 1;

  /// from: static public final int TYPE_OTHER
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_OTHER = 3;

  /// from: static public final int TYPE_WORK
  ///
  /// @deprecated see android.provider.ContactsContract
  static const TYPE_WORK = 2;
}

/// from: android.provider.Contacts$ContactMethods
///
/// This table stores all non-phone contact methods and a reference to the
/// person that the contact method belongs to.
///@deprecated see android.provider.ContactsContract
class Contacts_ContactMethods extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Contacts\$ContactMethods");
  Contacts_ContactMethods.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String CONTENT_EMAIL_ITEM_TYPE
  ///
  /// The MIME type of a \#CONTENT_URI sub-directory of a single
  /// Contacts\#KIND_EMAIL entry.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_EMAIL_ITEM_TYPE = "vnd.android.cursor.item/email";

  /// from: static public final java.lang.String CONTENT_EMAIL_TYPE
  ///
  /// The MIME type of a \#CONTENT_EMAIL_URI sub-directory of
  /// multiple Contacts\#KIND_EMAIL entries.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_EMAIL_TYPE = "vnd.android.cursor.dir/email";

  static final _id_CONTENT_EMAIL_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_EMAIL_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_EMAIL_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for sub-directory of e-mail addresses.
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_EMAIL_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_EMAIL_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String CONTENT_IM_ITEM_TYPE
  ///
  /// The MIME type of a \#CONTENT_URI sub-directory of a single
  /// Contacts\#KIND_IM entry.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_IM_ITEM_TYPE = "vnd.android.cursor.item/jabber-im";

  /// from: static public final java.lang.String CONTENT_POSTAL_ITEM_TYPE
  ///
  /// The MIME type of a \#CONTENT_URI sub-directory of a single
  /// Contacts\#KIND_POSTAL entry.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_POSTAL_ITEM_TYPE =
      "vnd.android.cursor.item/postal-address";

  /// from: static public final java.lang.String CONTENT_POSTAL_TYPE
  ///
  /// The MIME type of a \#CONTENT_EMAIL_URI sub-directory of
  /// multiple Contacts\#KIND_POSTAL entries.
  ///@deprecated see android.provider.ContactsContract
  static const CONTENT_POSTAL_TYPE = "vnd.android.cursor.dir/postal-address";

  /// from: static public final java.lang.String CONTENT_TYPE
  ///
  /// The MIME type of \#CONTENT_URI providing a directory of
  ///@deprecated see android.provider.ContactsContract
  /// phones.
  static const CONTENT_TYPE = "vnd.android.cursor.dir/contact-methods";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  ///@deprecated see android.provider.ContactsContract
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DEFAULT_SORT_ORDER
  ///
  /// The default sort order for this table
  ///@deprecated see android.provider.ContactsContract
  static const DEFAULT_SORT_ORDER = "name ASC";

  /// from: static public final java.lang.String PERSON_ID
  ///
  /// The ID of the person this contact method is assigned to.
  /// <P>Type: INTEGER (long)</P>
  ///@deprecated see android.provider.ContactsContract
  static const PERSON_ID = "person";

  /// from: static public final java.lang.String POSTAL_LOCATION_LATITUDE
  ///
  /// The column with latitude data for postal locations
  /// <P>Type: REAL</P>
  ///@deprecated see android.provider.ContactsContract
  static const POSTAL_LOCATION_LATITUDE = "data";

  /// from: static public final java.lang.String POSTAL_LOCATION_LONGITUDE
  ///
  /// The column with longitude data for postal locations
  /// <P>Type: REAL</P>
  ///@deprecated see android.provider.ContactsContract
  static const POSTAL_LOCATION_LONGITUDE = "aux_data";

  /// from: static public final int PROTOCOL_AIM
  ///
  /// The predefined IM protocol types. The protocol can either be non-present, one
  /// of these types, or a free-form string. These cases are encoded in the AUX_DATA
  /// column as:
  ///  - null
  ///  - pre:<an integer, one of the protocols below>
  ///  - custom:<a string>
  ///@deprecated see android.provider.ContactsContract
  static const PROTOCOL_AIM = 0;

  /// from: static public final int PROTOCOL_GOOGLE_TALK
  ///
  /// @deprecated see android.provider.ContactsContract
  static const PROTOCOL_GOOGLE_TALK = 5;

  /// from: static public final int PROTOCOL_ICQ
  ///
  /// @deprecated see android.provider.ContactsContract
  static const PROTOCOL_ICQ = 6;

  /// from: static public final int PROTOCOL_JABBER
  ///
  /// @deprecated see android.provider.ContactsContract
  static const PROTOCOL_JABBER = 7;

  /// from: static public final int PROTOCOL_MSN
  ///
  /// @deprecated see android.provider.ContactsContract
  static const PROTOCOL_MSN = 1;

  /// from: static public final int PROTOCOL_QQ
  ///
  /// @deprecated see android.provider.ContactsContract
  static const PROTOCOL_QQ = 4;

  /// from: static public final int PROTOCOL_SKYPE
  ///
  /// @deprecated see android.provider.ContactsContract
  static const PROTOCOL_SKYPE = 3;

  /// from: static public final int PROTOCOL_YAHOO
  ///
  /// @deprecated see android.provider.ContactsContract
  static const PROTOCOL_YAHOO = 2;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// no public constructor since this is a utility class
  Contacts_ContactMethods()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_encodePredefinedImProtocol =
      jniAccessors.getStaticMethodIDOf(
          _classRef, "encodePredefinedImProtocol", "(I)Ljava/lang/String;");

  /// from: static public java.lang.String encodePredefinedImProtocol(int protocol)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated see android.provider.ContactsContract
  static jni.JniString encodePredefinedImProtocol(int protocol) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_encodePredefinedImProtocol,
          jni.JniType.objectType,
          [protocol]).object);

  static final _id_encodeCustomImProtocol = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "encodeCustomImProtocol",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String encodeCustomImProtocol(java.lang.String protocolString)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated see android.provider.ContactsContract
  static jni.JniString encodeCustomImProtocol(jni.JniString protocolString) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_encodeCustomImProtocol,
          jni.JniType.objectType,
          [protocolString.reference]).object);

  static final _id_decodeImProtocol = jniAccessors.getStaticMethodIDOf(
      _classRef, "decodeImProtocol", "(Ljava/lang/String;)Ljava/lang/Object;");

  /// from: static public java.lang.Object decodeImProtocol(java.lang.String encodedString)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated see android.provider.ContactsContract
  static jni.JniObject decodeImProtocol(jni.JniString encodedString) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_decodeImProtocol,
          jni.JniType.objectType,
          [encodedString.reference]).object);

  static final _id_getDisplayLabel = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getDisplayLabel",
      "(Landroid/content/Context;IILjava/lang/CharSequence;)Ljava/lang/CharSequence;");

  /// from: static public java.lang.CharSequence getDisplayLabel(android.content.Context context, int kind, int type, java.lang.CharSequence label)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @deprecated see android.provider.ContactsContract
  static jni.JniObject getDisplayLabel(
          context_.Context context, int kind, int type, jni.JniObject label) =>
      jni.JniObject.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getDisplayLabel,
          jni.JniType.objectType,
          [context.reference, kind, type, label.reference]).object);

  static final _id_addPostalLocation = jniAccessors.getMethodIDOf(
      _classRef, "addPostalLocation", "(Landroid/content/Context;JDD)V");

  /// from: public void addPostalLocation(android.content.Context context, long postalId, double latitude, double longitude)
  ///
  /// Add a longitude and latitude location to a postal address.
  ///@param context the context to use when updating the database
  ///@param postalId the address to update
  ///@param latitude the latitude for the address
  ///@param longitude the longitude for the address
  ///@deprecated see android.provider.ContactsContract
  void addPostalLocation(context_.Context context, int postalId,
          double latitude, double longitude) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_addPostalLocation,
          jni.JniType.voidType,
          [context.reference, postalId, latitude, longitude]).check();
}
