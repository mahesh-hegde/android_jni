// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.provider.FontRequest
///
/// Information about a font request that may be sent to a Font Provider.
class FontRequest extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/FontRequest");
  FontRequest.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String providerAuthority, java.lang.String providerPackage, java.lang.String query)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param providerAuthority The authority of the Font Provider to be used for the request. This
  ///         should be a system installed app.
  /// This value must never be {@code null}.
  ///@param providerPackage The package for the Font Provider to be used for the request. This is
  ///         used to verify the identity of the provider.
  /// This value must never be {@code null}.
  ///@param query The query to be sent over to the provider. Refer to your font provider's
  ///         documentation on the format of this string.
  ///
  /// This value must never be {@code null}.
  FontRequest(jni.JniString providerAuthority, jni.JniString providerPackage,
      jni.JniString query)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          providerAuthority.reference,
          providerPackage.reference,
          query.reference
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V");

  /// from: public void <init>(java.lang.String providerAuthority, java.lang.String providerPackage, java.lang.String query, java.util.List<java.util.List<byte[]>> certificates)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @param providerAuthority The authority of the Font Provider to be used for the request.
  /// This value must never be {@code null}.
  ///@param query The query to be sent over to the provider. Refer to your font provider's
  ///         documentation on the format of this string.
  /// This value must never be {@code null}.
  ///@param providerPackage The package for the Font Provider to be used for the request. This is
  ///         used to verify the identity of the provider.
  /// This value must never be {@code null}.
  ///@param certificates The list of sets of hashes for the certificates the provider should be
  ///         signed with. This is used to verify the identity of the provider. Each set in the
  ///         list represents one collection of signature hashes. Refer to your font provider's
  ///         documentation for these values.
  ///
  /// This value must never be {@code null}.
  FontRequest.ctor1(
      jni.JniString providerAuthority,
      jni.JniString providerPackage,
      jni.JniString query,
      jni.JniObject certificates)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1, [
          providerAuthority.reference,
          providerPackage.reference,
          query.reference,
          certificates.reference
        ]).object);

  static final _id_getProviderAuthority = jniAccessors.getMethodIDOf(
      _classRef, "getProviderAuthority", "()Ljava/lang/String;");

  /// from: public java.lang.String getProviderAuthority()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the selected font provider's authority. This tells the system what font provider
  /// it should request the font from.
  jni.JniString getProviderAuthority() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getProviderAuthority, jni.JniType.objectType, []).object);

  static final _id_getProviderPackage = jniAccessors.getMethodIDOf(
      _classRef, "getProviderPackage", "()Ljava/lang/String;");

  /// from: public java.lang.String getProviderPackage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the selected font provider's package. This helps the system verify that the provider
  /// identified by the given authority is the one requested.
  jni.JniString getProviderPackage() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getProviderPackage, jni.JniType.objectType, []).object);

  static final _id_getQuery =
      jniAccessors.getMethodIDOf(_classRef, "getQuery", "()Ljava/lang/String;");

  /// from: public java.lang.String getQuery()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the query string. Refer to your font provider's documentation on the format of this
  /// string.
  jni.JniString getQuery() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getQuery, jni.JniType.objectType, []).object);

  static final _id_getCertificates = jniAccessors.getMethodIDOf(
      _classRef, "getCertificates", "()Ljava/util/List;");

  /// from: public java.util.List<java.util.List<byte[]>> getCertificates()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the list of certificate sets given for this provider. This helps the system verify
  /// that the provider identified by the given authority is the one requested.
  jni.JniObject getCertificates() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCertificates, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
