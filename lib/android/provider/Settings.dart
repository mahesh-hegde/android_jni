// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "../net/Uri.dart" as uri_;

import "../content/ContentResolver.dart" as contentresolver_;

import "../content/res/Configuration.dart" as configuration_;

import "../util/AndroidException.dart" as androidexception_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.provider.Settings
///
/// The Settings provider contains global system-level device preferences.
class Settings extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/provider/Settings");
  Settings.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_ACCESSIBILITY_SETTINGS
  ///
  /// Activity Action: Show settings for accessibility modules.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_ACCESSIBILITY_SETTINGS =
      "android.settings.ACCESSIBILITY_SETTINGS";

  /// from: static public final java.lang.String ACTION_ADD_ACCOUNT
  ///
  /// Activity Action: Show add account screen for creating a new account.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// The account types available to add may be restricted by adding an \#EXTRA_AUTHORITIES
  /// extra to the Intent with one or more syncable content provider's authorities.  Only account
  /// types which can sync with that content provider will be offered to the user.
  ///
  /// Account types can also be filtered by adding an \#EXTRA_ACCOUNT_TYPES extra to the
  /// Intent with one or more account types.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_ADD_ACCOUNT = "android.settings.ADD_ACCOUNT_SETTINGS";

  /// from: static public final java.lang.String ACTION_AIRPLANE_MODE_SETTINGS
  ///
  /// Activity Action: Show settings to allow entering/exiting airplane mode.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_AIRPLANE_MODE_SETTINGS =
      "android.settings.AIRPLANE_MODE_SETTINGS";

  /// from: static public final java.lang.String ACTION_APN_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of APNs.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  ///
  /// <p class="note">
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  static const ACTION_APN_SETTINGS = "android.settings.APN_SETTINGS";

  /// from: static public final java.lang.String ACTION_APPLICATION_DETAILS_SETTINGS
  ///
  /// Activity Action: Show screen of details about a particular application.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: The Intent's data URI specifies the application package name
  /// to be shown, with the "package" scheme.  That is "package:com.my.app".
  ///
  /// Output: Nothing.
  static const ACTION_APPLICATION_DETAILS_SETTINGS =
      "android.settings.APPLICATION_DETAILS_SETTINGS";

  /// from: static public final java.lang.String ACTION_APPLICATION_DEVELOPMENT_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of application
  /// development-related settings.  As of
  /// android.os.Build.VERSION_CODES\#JELLY_BEAN_MR1 this action is
  /// a required part of the platform.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_APPLICATION_DEVELOPMENT_SETTINGS =
      "android.settings.APPLICATION_DEVELOPMENT_SETTINGS";

  /// from: static public final java.lang.String ACTION_APPLICATION_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of application-related settings.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_APPLICATION_SETTINGS =
      "android.settings.APPLICATION_SETTINGS";

  /// from: static public final java.lang.String ACTION_APP_NOTIFICATION_SETTINGS
  ///
  /// Activity Action: Show notification settings for a single app.
  ///
  ///     Input: \#EXTRA_APP_PACKAGE, the package to display.
  ///
  /// Output: Nothing.
  static const ACTION_APP_NOTIFICATION_SETTINGS =
      "android.settings.APP_NOTIFICATION_SETTINGS";

  /// from: static public final java.lang.String ACTION_BATTERY_SAVER_SETTINGS
  ///
  /// Activity Action: Show battery saver settings.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you safeguard
  /// against this.
  static const ACTION_BATTERY_SAVER_SETTINGS =
      "android.settings.BATTERY_SAVER_SETTINGS";

  /// from: static public final java.lang.String ACTION_BLUETOOTH_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of Bluetooth.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_BLUETOOTH_SETTINGS =
      "android.settings.BLUETOOTH_SETTINGS";

  /// from: static public final java.lang.String ACTION_CAPTIONING_SETTINGS
  ///
  /// Activity Action: Show settings for video captioning.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you safeguard
  /// against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_CAPTIONING_SETTINGS =
      "android.settings.CAPTIONING_SETTINGS";

  /// from: static public final java.lang.String ACTION_CAST_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of cast endpoints.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_CAST_SETTINGS = "android.settings.CAST_SETTINGS";

  /// from: static public final java.lang.String ACTION_CHANNEL_NOTIFICATION_SETTINGS
  ///
  /// Activity Action: Show notification settings for a single NotificationChannel.
  ///
  ///     Input: \#EXTRA_APP_PACKAGE, the package containing the channel to display.
  ///     Input: \#EXTRA_CHANNEL_ID, the id of the channel to display.
  ///
  /// Output: Nothing.
  static const ACTION_CHANNEL_NOTIFICATION_SETTINGS =
      "android.settings.CHANNEL_NOTIFICATION_SETTINGS";

  /// from: static public final java.lang.String ACTION_DATA_ROAMING_SETTINGS
  ///
  /// Activity Action: Show settings for selection of 2G/3G.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_DATA_ROAMING_SETTINGS =
      "android.settings.DATA_ROAMING_SETTINGS";

  /// from: static public final java.lang.String ACTION_DATA_USAGE_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of data and view data usage.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_DATA_USAGE_SETTINGS =
      "android.settings.DATA_USAGE_SETTINGS";

  /// from: static public final java.lang.String ACTION_DATE_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of date and time.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_DATE_SETTINGS = "android.settings.DATE_SETTINGS";

  /// from: static public final java.lang.String ACTION_DEVICE_INFO_SETTINGS
  ///
  /// Activity Action: Show general device information settings (serial
  /// number, software version, phone number, etc.).
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing
  static const ACTION_DEVICE_INFO_SETTINGS =
      "android.settings.DEVICE_INFO_SETTINGS";

  /// from: static public final java.lang.String ACTION_DISPLAY_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of display.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_DISPLAY_SETTINGS = "android.settings.DISPLAY_SETTINGS";

  /// from: static public final java.lang.String ACTION_DREAM_SETTINGS
  ///
  /// Activity Action: Show Daydream settings.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  ///@see android.service.dreams.DreamService
  static const ACTION_DREAM_SETTINGS = "android.settings.DREAM_SETTINGS";

  /// from: static public final java.lang.String ACTION_FINGERPRINT_ENROLL
  ///
  /// Activity Action: Show settings to enroll fingerprints, and setup PIN/Pattern/Pass if
  /// necessary.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_FINGERPRINT_ENROLL =
      "android.settings.FINGERPRINT_ENROLL";

  /// from: static public final java.lang.String ACTION_HARD_KEYBOARD_SETTINGS
  ///
  /// Activity Action: Show settings to configure the hardware keyboard.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_HARD_KEYBOARD_SETTINGS =
      "android.settings.HARD_KEYBOARD_SETTINGS";

  /// from: static public final java.lang.String ACTION_HOME_SETTINGS
  ///
  /// Activity Action: Show Home selection settings. If there are multiple activities
  /// that can satisfy the Intent\#CATEGORY_HOME intent, this screen allows you
  /// to pick your preferred activity.
  static const ACTION_HOME_SETTINGS = "android.settings.HOME_SETTINGS";

  /// from: static public final java.lang.String ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS
  ///
  /// Activity Action: Show screen for controlling background data
  /// restrictions for a particular application.
  ///
  /// Input: Intent's data URI set with an application name, using the
  /// "package" schema (like "package:com.my.app").
  ///
  ///
  /// Output: Nothing.
  ///
  /// Applications can also use android.net.ConnectivityManager\#getRestrictBackgroundStatus ConnectivityManager\#getRestrictBackgroundStatus() to determine the
  /// status of the background data restrictions for them.
  ///
  /// <p class="note">
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  static const ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS =
      "android.settings.IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS";

  /// from: static public final java.lang.String ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS
  ///
  /// Activity Action: Show screen for controlling which apps can ignore battery optimizations.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  ///
  /// You can use android.os.PowerManager\#isIgnoringBatteryOptimizations PowerManager.isIgnoringBatteryOptimizations() to determine if an application is
  /// already ignoring optimizations.  You can use
  /// \#ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS to ask the user to put you
  /// on this list.
  static const ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS =
      "android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS";

  /// from: static public final java.lang.String ACTION_INPUT_METHOD_SETTINGS
  ///
  /// Activity Action: Show settings to configure input methods, in particular
  /// allowing the user to enable input methods.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_INPUT_METHOD_SETTINGS =
      "android.settings.INPUT_METHOD_SETTINGS";

  /// from: static public final java.lang.String ACTION_INPUT_METHOD_SUBTYPE_SETTINGS
  ///
  /// Activity Action: Show settings to enable/disable input method subtypes.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// To tell which input method's subtypes are displayed in the settings, add
  /// \#EXTRA_INPUT_METHOD_ID extra to this Intent with the input method id.
  /// If there is no extra in this Intent, subtypes from all installed input methods
  /// will be displayed in the settings.
  ///@see android.view.inputmethod.InputMethodInfo\#getId
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_INPUT_METHOD_SUBTYPE_SETTINGS =
      "android.settings.INPUT_METHOD_SUBTYPE_SETTINGS";

  /// from: static public final java.lang.String ACTION_INTERNAL_STORAGE_SETTINGS
  ///
  /// Activity Action: Show settings for internal storage.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_INTERNAL_STORAGE_SETTINGS =
      "android.settings.INTERNAL_STORAGE_SETTINGS";

  /// from: static public final java.lang.String ACTION_LOCALE_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of locale.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_LOCALE_SETTINGS = "android.settings.LOCALE_SETTINGS";

  /// from: static public final java.lang.String ACTION_LOCATION_SOURCE_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of current location
  /// sources.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_LOCATION_SOURCE_SETTINGS =
      "android.settings.LOCATION_SOURCE_SETTINGS";

  /// from: static public final java.lang.String ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS
  ///
  /// Activity Action: Show settings to manage all applications.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS =
      "android.settings.MANAGE_ALL_APPLICATIONS_SETTINGS";

  /// from: static public final java.lang.String ACTION_MANAGE_APPLICATIONS_SETTINGS
  ///
  /// Activity Action: Show settings to manage installed applications.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_MANAGE_APPLICATIONS_SETTINGS =
      "android.settings.MANAGE_APPLICATIONS_SETTINGS";

  /// from: static public final java.lang.String ACTION_MANAGE_DEFAULT_APPS_SETTINGS
  ///
  /// Activity Action: Show Default apps settings.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_MANAGE_DEFAULT_APPS_SETTINGS =
      "android.settings.MANAGE_DEFAULT_APPS_SETTINGS";

  /// from: static public final java.lang.String ACTION_MANAGE_OVERLAY_PERMISSION
  ///
  /// Activity Action: Show screen for controlling which apps can draw on top of other apps.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Optionally, the Intent's data URI can specify the application package name to
  /// directly invoke the management GUI specific to the package name. For example
  /// "package:com.my.app".
  ///
  /// Output: Nothing.
  static const ACTION_MANAGE_OVERLAY_PERMISSION =
      "android.settings.action.MANAGE_OVERLAY_PERMISSION";

  /// from: static public final java.lang.String ACTION_MANAGE_UNKNOWN_APP_SOURCES
  ///
  /// Activity Action: Show settings to allow configuration of trusted external sources
  ///
  /// Input: Optionally, the Intent's data URI can specify the application package name to
  /// directly invoke the management GUI specific to the package name. For example
  /// "package:com.my.app".
  ///
  /// Output: Nothing.
  static const ACTION_MANAGE_UNKNOWN_APP_SOURCES =
      "android.settings.MANAGE_UNKNOWN_APP_SOURCES";

  /// from: static public final java.lang.String ACTION_MANAGE_WRITE_SETTINGS
  ///
  /// Activity Action: Show screen for controlling which apps are allowed to write/modify
  /// system settings.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Optionally, the Intent's data URI can specify the application package name to
  /// directly invoke the management GUI specific to the package name. For example
  /// "package:com.my.app".
  ///
  /// Output: Nothing.
  static const ACTION_MANAGE_WRITE_SETTINGS =
      "android.settings.action.MANAGE_WRITE_SETTINGS";

  /// from: static public final java.lang.String ACTION_MEMORY_CARD_SETTINGS
  ///
  /// Activity Action: Show settings for memory card storage.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_MEMORY_CARD_SETTINGS =
      "android.settings.MEMORY_CARD_SETTINGS";

  /// from: static public final java.lang.String ACTION_NETWORK_OPERATOR_SETTINGS
  ///
  /// Activity Action: Show settings for selecting the network operator.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// The subscription ID of the subscription for which available network operators should be
  /// displayed may be optionally specified with \#EXTRA_SUB_ID.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_NETWORK_OPERATOR_SETTINGS =
      "android.settings.NETWORK_OPERATOR_SETTINGS";

  /// from: static public final java.lang.String ACTION_NFCSHARING_SETTINGS
  ///
  /// Activity Action: Show NFC Sharing settings.
  ///
  /// This shows UI that allows NDEF Push (Android Beam) to be turned on or
  /// off.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing
  ///@see android.nfc.NfcAdapter\#isNdefPushEnabled()
  static const ACTION_NFCSHARING_SETTINGS =
      "android.settings.NFCSHARING_SETTINGS";

  /// from: static public final java.lang.String ACTION_NFC_PAYMENT_SETTINGS
  ///
  /// Activity Action: Show NFC Tap & Pay settings
  ///
  /// This shows UI that allows the user to configure Tap&Pay
  /// settings.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing
  static const ACTION_NFC_PAYMENT_SETTINGS =
      "android.settings.NFC_PAYMENT_SETTINGS";

  /// from: static public final java.lang.String ACTION_NFC_SETTINGS
  ///
  /// Activity Action: Show NFC settings.
  ///
  /// This shows UI that allows NFC to be turned on or off.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing
  ///@see android.nfc.NfcAdapter\#isEnabled()
  static const ACTION_NFC_SETTINGS = "android.settings.NFC_SETTINGS";

  /// from: static public final java.lang.String ACTION_NIGHT_DISPLAY_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of Night display.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_NIGHT_DISPLAY_SETTINGS =
      "android.settings.NIGHT_DISPLAY_SETTINGS";

  /// from: static public final java.lang.String ACTION_NOTIFICATION_LISTENER_SETTINGS
  ///
  /// Activity Action: Show Notification listener settings.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  ///@see android.service.notification.NotificationListenerService
  static const ACTION_NOTIFICATION_LISTENER_SETTINGS =
      "android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS";

  /// from: static public final java.lang.String ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS
  ///
  /// Activity Action: Show Do Not Disturb access settings.
  ///
  /// Users can grant and deny access to Do Not Disturb configuration from here.
  /// See android.app.NotificationManager\#isNotificationPolicyAccessGranted() for more
  /// details.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  ///
  /// <p class="note">
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  static const ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS =
      "android.settings.NOTIFICATION_POLICY_ACCESS_SETTINGS";

  /// from: static public final java.lang.String ACTION_PRINT_SETTINGS
  ///
  /// Activity Action: Show the top level print settings.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_PRINT_SETTINGS = "android.settings.ACTION_PRINT_SETTINGS";

  /// from: static public final java.lang.String ACTION_PRIVACY_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of privacy options.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_PRIVACY_SETTINGS = "android.settings.PRIVACY_SETTINGS";

  /// from: static public final java.lang.String ACTION_QUICK_LAUNCH_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of quick launch shortcuts.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_QUICK_LAUNCH_SETTINGS =
      "android.settings.QUICK_LAUNCH_SETTINGS";

  /// from: static public final java.lang.String ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS
  ///
  /// Activity Action: Ask the user to allow an app to ignore battery optimizations (that is,
  /// put them on the whitelist of apps shown by
  /// \#ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS).  For an app to use this, it also
  /// must hold the android.Manifest.permission\#REQUEST_IGNORE_BATTERY_OPTIMIZATIONS
  /// permission.
  /// __Note:__ most applications should _not_ use this; there are many facilities
  /// provided by the platform for applications to operate correctly in the various power
  /// saving modes.  This is only for unusual applications that need to deeply control their own
  /// execution, at the potential expense of the user's battery life.  Note that these applications
  /// greatly run the risk of showing to the user as high power consumers on their device.
  ///
  ///
  /// Input: The Intent's data URI must specify the application package name
  /// to be shown, with the "package" scheme.  That is "package:com.my.app".
  ///
  /// Output: Nothing.
  ///
  /// You can use android.os.PowerManager\#isIgnoringBatteryOptimizations PowerManager.isIgnoringBatteryOptimizations() to determine if an application is
  /// already ignoring optimizations.
  static const ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS =
      "android.settings.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS";

  /// from: static public final java.lang.String ACTION_REQUEST_SET_AUTOFILL_SERVICE
  ///
  /// Activity Action: Show screen that let user select its Autofill Service.
  ///
  /// Input: Intent's data URI set with an application name, using the
  /// "package" schema (like "package:com.my.app").
  ///
  ///
  /// Output: android.app.Activity\#RESULT_OK if user selected an Autofill Service belonging
  /// to the caller package.
  ///
  ///
  /// __NOTE: __ Applications should call
  /// android.view.autofill.AutofillManager\#hasEnabledAutofillServices() and
  /// android.view.autofill.AutofillManager\#isAutofillSupported(), and only use this action
  /// to start an activity if they return {@code false} and {@code true} respectively.
  static const ACTION_REQUEST_SET_AUTOFILL_SERVICE =
      "android.settings.REQUEST_SET_AUTOFILL_SERVICE";

  /// from: static public final java.lang.String ACTION_SEARCH_SETTINGS
  ///
  /// Activity Action: Show settings for global search.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing
  static const ACTION_SEARCH_SETTINGS = "android.search.action.SEARCH_SETTINGS";

  /// from: static public final java.lang.String ACTION_SECURITY_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of security and
  /// location privacy.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_SECURITY_SETTINGS = "android.settings.SECURITY_SETTINGS";

  /// from: static public final java.lang.String ACTION_SETTINGS
  ///
  /// Activity Action: Show system settings.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_SETTINGS = "android.settings.SETTINGS";

  /// from: static public final java.lang.String ACTION_SHOW_REGULATORY_INFO
  ///
  /// Activity Action: Show the regulatory information screen for the device.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you safeguard
  /// against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_SHOW_REGULATORY_INFO =
      "android.settings.SHOW_REGULATORY_INFO";

  /// from: static public final java.lang.String ACTION_SOUND_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of sound and volume.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_SOUND_SETTINGS = "android.settings.SOUND_SETTINGS";

  /// from: static public final java.lang.String ACTION_STORAGE_VOLUME_ACCESS_SETTINGS
  ///
  /// Activity Action: Show screen for controlling which apps have access on volume directories.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  ///
  /// Applications typically use this action to ask the user to revert the "Do not ask again"
  /// status of directory access requests made by
  /// android.os.storage.StorageVolume\#createAccessIntent(String).
  static const ACTION_STORAGE_VOLUME_ACCESS_SETTINGS =
      "android.settings.STORAGE_VOLUME_ACCESS_SETTINGS";

  /// from: static public final java.lang.String ACTION_SYNC_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of sync settings.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// The account types available to add via the add account button may be restricted by adding an
  /// \#EXTRA_AUTHORITIES extra to this Intent with one or more syncable content provider's
  /// authorities. Only account types which can sync with that content provider will be offered to
  /// the user.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_SYNC_SETTINGS = "android.settings.SYNC_SETTINGS";

  /// from: static public final java.lang.String ACTION_USAGE_ACCESS_SETTINGS
  ///
  /// Activity Action: Show settings to control access to usage information.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_USAGE_ACCESS_SETTINGS =
      "android.settings.USAGE_ACCESS_SETTINGS";

  /// from: static public final java.lang.String ACTION_USER_DICTIONARY_SETTINGS
  ///
  /// Activity Action: Show settings to manage the user input dictionary.
  ///
  /// Starting with android.os.Build.VERSION_CODES\#KITKAT,
  /// it is guaranteed there will always be an appropriate implementation for this Intent action.
  /// In prior releases of the platform this was optional, so ensure you safeguard against it.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_USER_DICTIONARY_SETTINGS =
      "android.settings.USER_DICTIONARY_SETTINGS";

  /// from: static public final java.lang.String ACTION_VOICE_CONTROL_AIRPLANE_MODE
  ///
  /// Activity Action: Modify Airplane mode settings using a voice command.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you safeguard against this.
  ///
  /// This intent MUST be started using
  /// android.service.voice.VoiceInteractionSession\#startVoiceActivity startVoiceActivity.
  ///
  /// Note: The activity implementing this intent MUST verify that
  /// android.app.Activity\#isVoiceInteraction isVoiceInteraction returns true before
  /// modifying the setting.
  ///
  /// Input: To tell which state airplane mode should be set to, add the
  /// \#EXTRA_AIRPLANE_MODE_ENABLED extra to this Intent with the state specified.
  /// If the extra is not included, no changes will be made.
  ///
  /// Output: Nothing.
  static const ACTION_VOICE_CONTROL_AIRPLANE_MODE =
      "android.settings.VOICE_CONTROL_AIRPLANE_MODE";

  /// from: static public final java.lang.String ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE
  ///
  /// Activity Action: Modify Battery Saver mode setting using a voice command.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you safeguard against this.
  ///
  /// This intent MUST be started using
  /// android.service.voice.VoiceInteractionSession\#startVoiceActivity startVoiceActivity.
  ///
  /// Note: The activity implementing this intent MUST verify that
  /// android.app.Activity\#isVoiceInteraction isVoiceInteraction returns true before
  /// modifying the setting.
  ///
  /// Input: To tell which state batter saver mode should be set to, add the
  /// \#EXTRA_BATTERY_SAVER_MODE_ENABLED extra to this Intent with the state specified.
  /// If the extra is not included, no changes will be made.
  ///
  /// Output: Nothing.
  static const ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE =
      "android.settings.VOICE_CONTROL_BATTERY_SAVER_MODE";

  /// from: static public final java.lang.String ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE
  ///
  /// Activity Action: Modify do not disturb mode settings.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you safeguard against this.
  ///
  /// This intent MUST be started using
  /// android.service.voice.VoiceInteractionSession\#startVoiceActivity startVoiceActivity.
  ///
  /// Note: The Activity implementing this intent MUST verify that
  /// android.app.Activity\#isVoiceInteraction isVoiceInteraction.
  /// returns true before modifying the setting.
  ///
  /// Input: The optional \#EXTRA_DO_NOT_DISTURB_MODE_MINUTES extra can be used to indicate
  /// how long the user wishes to avoid interruptions for. The optional
  /// \#EXTRA_DO_NOT_DISTURB_MODE_ENABLED extra can be to indicate if the user is
  /// enabling or disabling do not disturb mode. If either extra is not included, the
  /// user maybe asked to provide the value.
  ///
  /// Output: Nothing.
  static const ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE =
      "android.settings.VOICE_CONTROL_DO_NOT_DISTURB_MODE";

  /// from: static public final java.lang.String ACTION_VOICE_INPUT_SETTINGS
  ///
  /// Activity Action: Show settings to configure input methods, in particular
  /// allowing the user to enable input methods.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_VOICE_INPUT_SETTINGS =
      "android.settings.VOICE_INPUT_SETTINGS";

  /// from: static public final java.lang.String ACTION_VPN_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of VPN.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_VPN_SETTINGS = "android.settings.VPN_SETTINGS";

  /// from: static public final java.lang.String ACTION_VR_LISTENER_SETTINGS
  ///
  /// Activity Action: Show VR listener settings.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  ///@see android.service.vr.VrListenerService
  static const ACTION_VR_LISTENER_SETTINGS =
      "android.settings.VR_LISTENER_SETTINGS";

  /// from: static public final java.lang.String ACTION_WEBVIEW_SETTINGS
  ///
  /// Activity Action: Allows user to select current webview implementation.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_WEBVIEW_SETTINGS = "android.settings.WEBVIEW_SETTINGS";

  /// from: static public final java.lang.String ACTION_WIFI_IP_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of a static IP
  /// address for Wi-Fi.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you safeguard
  /// against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_WIFI_IP_SETTINGS = "android.settings.WIFI_IP_SETTINGS";

  /// from: static public final java.lang.String ACTION_WIFI_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of Wi-Fi.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_WIFI_SETTINGS = "android.settings.WIFI_SETTINGS";

  /// from: static public final java.lang.String ACTION_WIRELESS_SETTINGS
  ///
  /// Activity Action: Show settings to allow configuration of wireless controls
  /// such as Wi-Fi, Bluetooth and Mobile networks.
  ///
  /// In some cases, a matching Activity may not exist, so ensure you
  /// safeguard against this.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const ACTION_WIRELESS_SETTINGS = "android.settings.WIRELESS_SETTINGS";

  /// from: static public final java.lang.String ACTION_ZEN_MODE_PRIORITY_SETTINGS
  ///
  /// Activity Action: Show Zen Mode (aka Do Not Disturb) priority configuration settings.
  static const ACTION_ZEN_MODE_PRIORITY_SETTINGS =
      "android.settings.ZEN_MODE_PRIORITY_SETTINGS";

  /// from: static public final java.lang.String AUTHORITY
  static const AUTHORITY = "settings";

  /// from: static public final java.lang.String EXTRA_ACCOUNT_TYPES
  ///
  /// Activity Extra: Limit available options in launched activity based on the given account
  /// types.
  ///
  /// This can be passed as an extra field in an Activity Intent with one or more account types
  /// as a String[]. This field is used by some intents to alter the behavior of the called
  /// activity.
  ///
  /// Example: The \#ACTION_ADD_ACCOUNT intent restricts the account types to the specified
  /// list.
  static const EXTRA_ACCOUNT_TYPES = "account_types";

  /// from: static public final java.lang.String EXTRA_AIRPLANE_MODE_ENABLED
  ///
  /// Activity Extra: Enable or disable Airplane Mode.
  ///
  /// This can be passed as an extra field to the \#ACTION_VOICE_CONTROL_AIRPLANE_MODE
  /// intent as a boolean to indicate if it should be enabled.
  static const EXTRA_AIRPLANE_MODE_ENABLED = "airplane_mode_enabled";

  /// from: static public final java.lang.String EXTRA_APP_PACKAGE
  ///
  /// Activity Extra: The package owner of the notification channel settings to display.
  ///
  /// This must be passed as an extra field to the \#ACTION_CHANNEL_NOTIFICATION_SETTINGS.
  static const EXTRA_APP_PACKAGE = "android.provider.extra.APP_PACKAGE";

  /// from: static public final java.lang.String EXTRA_AUTHORITIES
  ///
  /// Activity Extra: Limit available options in launched activity based on the given authority.
  ///
  /// This can be passed as an extra field in an Activity Intent with one or more syncable content
  /// provider's authorities as a String[]. This field is used by some intents to alter the
  /// behavior of the called activity.
  ///
  /// Example: The \#ACTION_ADD_ACCOUNT intent restricts the account types available based
  /// on the authority given.
  static const EXTRA_AUTHORITIES = "authorities";

  /// from: static public final java.lang.String EXTRA_BATTERY_SAVER_MODE_ENABLED
  ///
  /// Activity Extra: Enable or disable Battery saver mode.
  ///
  /// This can be passed as an extra field to the \#ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE
  /// intent as a boolean to indicate if it should be enabled.
  static const EXTRA_BATTERY_SAVER_MODE_ENABLED =
      "android.settings.extra.battery_saver_mode_enabled";

  /// from: static public final java.lang.String EXTRA_CHANNEL_ID
  ///
  /// Activity Extra: The NotificationChannel\#getId() of the notification channel settings
  /// to display.
  ///
  /// This must be passed as an extra field to the \#ACTION_CHANNEL_NOTIFICATION_SETTINGS.
  static const EXTRA_CHANNEL_ID = "android.provider.extra.CHANNEL_ID";

  /// from: static public final java.lang.String EXTRA_DO_NOT_DISTURB_MODE_ENABLED
  ///
  /// Activity Extra: Enable or disable Do Not Disturb mode.
  ///
  /// This can be passed as an extra field to the \#ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE
  /// intent as a boolean to indicate if it should be enabled.
  static const EXTRA_DO_NOT_DISTURB_MODE_ENABLED =
      "android.settings.extra.do_not_disturb_mode_enabled";

  /// from: static public final java.lang.String EXTRA_DO_NOT_DISTURB_MODE_MINUTES
  ///
  /// Activity Extra: How many minutes to enable do not disturb mode for.
  ///
  /// This can be passed as an extra field to the \#ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE
  /// intent to indicate how long do not disturb mode should be enabled for.
  static const EXTRA_DO_NOT_DISTURB_MODE_MINUTES =
      "android.settings.extra.do_not_disturb_mode_minutes";

  /// from: static public final java.lang.String EXTRA_INPUT_METHOD_ID
  static const EXTRA_INPUT_METHOD_ID = "input_method_id";

  /// from: static public final java.lang.String EXTRA_SUB_ID
  ///
  /// An int extra specifying a subscription ID.
  ///@see android.telephony.SubscriptionInfo\#getSubscriptionId
  static const EXTRA_SUB_ID = "android.provider.extra.SUB_ID";

  /// from: static public final java.lang.String INTENT_CATEGORY_USAGE_ACCESS_CONFIG
  ///
  /// Activity Category: Show application settings related to usage access.
  ///
  /// An activity that provides a user interface for adjusting usage access related
  /// preferences for its containing application. Optional but recommended for apps that
  /// use android.Manifest.permission\#PACKAGE_USAGE_STATS.
  ///
  /// The activity may define meta-data to describe what usage access is
  /// used for within their app with \#METADATA_USAGE_ACCESS_REASON, which
  /// will be displayed in Settings.
  ///
  /// Input: Nothing.
  ///
  /// Output: Nothing.
  static const INTENT_CATEGORY_USAGE_ACCESS_CONFIG =
      "android.intent.category.USAGE_ACCESS_CONFIG";

  /// from: static public final java.lang.String METADATA_USAGE_ACCESS_REASON
  ///
  /// Metadata key: Reason for needing usage access.
  ///
  /// A key for metadata attached to an activity that receives action
  /// \#INTENT_CATEGORY_USAGE_ACCESS_CONFIG, shown to the
  /// user as description of how the app uses usage access.
  ///
  static const METADATA_USAGE_ACCESS_REASON =
      "android.settings.metadata.USAGE_ACCESS_REASON";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Settings()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_canDrawOverlays = jniAccessors.getStaticMethodIDOf(
      _classRef, "canDrawOverlays", "(Landroid/content/Context;)Z");

  /// from: static public boolean canDrawOverlays(android.content.Context context)
  ///
  /// Checks if the specified context can draw on top of other apps. As of API
  /// level 23, an app cannot draw on top of other apps unless it declares the
  /// android.Manifest.permission\#SYSTEM_ALERT_WINDOW permission in its
  /// manifest, _and_ the user specifically grants the app this
  /// capability. To prompt the user to grant this approval, the app must send an
  /// intent with the action
  /// android.provider.Settings\#ACTION_MANAGE_OVERLAY_PERMISSION, which
  /// causes the system to display a permission management screen.
  ///@param context App context.
  ///@return true if the specified context can draw on top of other apps, false otherwise
  static bool canDrawOverlays(context_.Context context) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_canDrawOverlays,
          jni.JniType.booleanType, [context.reference]).boolean;
}

/// from: android.provider.Settings$System
///
/// System settings, containing miscellaneous system preferences.  This
/// table holds simple name/value pairs.  There are convenience
/// functions for accessing individual settings entries.
class Settings_System extends Settings_NameValueTable {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Settings\$System");
  Settings_System.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACCELEROMETER_ROTATION
  ///
  /// Control whether the accelerometer will be used to change screen
  /// orientation.  If 0, it will not be used unless explicitly requested
  /// by the application; if 1, it will be used by default unless explicitly
  /// disabled by the application.
  static const ACCELEROMETER_ROTATION = "accelerometer_rotation";

  /// from: static public final java.lang.String ADB_ENABLED
  ///
  /// @deprecated Use android.provider.Settings.Global\#ADB_ENABLED
  /// instead
  static const ADB_ENABLED = "adb_enabled";

  /// from: static public final java.lang.String AIRPLANE_MODE_ON
  ///
  /// @deprecated Use android.provider.Settings.Global\#AIRPLANE_MODE_ON instead
  static const AIRPLANE_MODE_ON = "airplane_mode_on";

  /// from: static public final java.lang.String AIRPLANE_MODE_RADIOS
  ///
  /// @deprecated Use android.provider.Settings.Global\#AIRPLANE_MODE_RADIOS instead
  static const AIRPLANE_MODE_RADIOS = "airplane_mode_radios";

  /// from: static public final java.lang.String ALARM_ALERT
  ///
  /// Persistent store for the system-wide default alarm alert.
  ///@see \#RINGTONE
  ///@see \#DEFAULT_ALARM_ALERT_URI
  static const ALARM_ALERT = "alarm_alert";

  /// from: static public final java.lang.String ALWAYS_FINISH_ACTIVITIES
  ///
  /// If 1, the activity manager will aggressively finish activities and
  /// processes as soon as they are no longer needed.  If 0, the normal
  /// extended lifetime is used.
  ///@deprecated Use Global\#ALWAYS_FINISH_ACTIVITIES instead
  static const ALWAYS_FINISH_ACTIVITIES = "always_finish_activities";

  /// from: static public final java.lang.String ANDROID_ID
  ///
  /// @deprecated Use android.provider.Settings.Secure\#ANDROID_ID instead
  static const ANDROID_ID = "android_id";

  /// from: static public final java.lang.String ANIMATOR_DURATION_SCALE
  ///
  /// Scaling factor for Animator-based animations. This affects both the start delay and
  /// duration of all such animations. Setting to 0 will cause animations to end immediately.
  /// The default value is 1.
  ///@deprecated Use Global\#ANIMATOR_DURATION_SCALE instead
  static const ANIMATOR_DURATION_SCALE = "animator_duration_scale";

  /// from: static public final java.lang.String AUTO_TIME
  ///
  /// @deprecated Use android.provider.Settings.Global\#AUTO_TIME
  /// instead
  static const AUTO_TIME = "auto_time";

  /// from: static public final java.lang.String AUTO_TIME_ZONE
  ///
  /// @deprecated Use android.provider.Settings.Global\#AUTO_TIME_ZONE
  /// instead
  static const AUTO_TIME_ZONE = "auto_time_zone";

  /// from: static public final java.lang.String BLUETOOTH_DISCOVERABILITY
  ///
  /// Determines whether remote devices may discover and/or connect to
  /// this device.
  /// <P>Type: INT</P>
  /// 2 -- discoverable and connectable
  /// 1 -- connectable but not discoverable
  /// 0 -- neither connectable nor discoverable
  static const BLUETOOTH_DISCOVERABILITY = "bluetooth_discoverability";

  /// from: static public final java.lang.String BLUETOOTH_DISCOVERABILITY_TIMEOUT
  ///
  /// Bluetooth discoverability timeout.  If this value is nonzero, then
  /// Bluetooth becomes discoverable for a certain number of seconds,
  /// after which is becomes simply connectable.  The value is in seconds.
  static const BLUETOOTH_DISCOVERABILITY_TIMEOUT =
      "bluetooth_discoverability_timeout";

  /// from: static public final java.lang.String BLUETOOTH_ON
  ///
  /// @deprecated Use android.provider.Settings.Global\#BLUETOOTH_ON instead
  static const BLUETOOTH_ON = "bluetooth_on";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DATA_ROAMING
  ///
  /// @deprecated Use android.provider.Settings.Global\#DATA_ROAMING instead
  static const DATA_ROAMING = "data_roaming";

  /// from: static public final java.lang.String DATE_FORMAT
  ///
  /// Date format string
  ///   mm/dd/yyyy
  ///   dd/mm/yyyy
  ///   yyyy/mm/dd
  static const DATE_FORMAT = "date_format";

  /// from: static public final java.lang.String DEBUG_APP
  ///
  /// Name of an application package to be debugged.
  ///@deprecated Use Global\#DEBUG_APP instead
  static const DEBUG_APP = "debug_app";

  static final _id_DEFAULT_ALARM_ALERT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "DEFAULT_ALARM_ALERT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri DEFAULT_ALARM_ALERT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A Uri that will point to the current default alarm alert at
  /// any given time.
  ///@see \#DEFAULT_ALARM_ALERT_URI
  static uri_.Uri get DEFAULT_ALARM_ALERT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(
          _classRef, _id_DEFAULT_ALARM_ALERT_URI, jni.JniType.objectType)
      .object);

  static final _id_DEFAULT_NOTIFICATION_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "DEFAULT_NOTIFICATION_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri DEFAULT_NOTIFICATION_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A Uri that will point to the current default notification
  /// sound at any given time.
  ///@see \#DEFAULT_RINGTONE_URI
  static uri_.Uri get DEFAULT_NOTIFICATION_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(
          _classRef, _id_DEFAULT_NOTIFICATION_URI, jni.JniType.objectType)
      .object);

  static final _id_DEFAULT_RINGTONE_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "DEFAULT_RINGTONE_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri DEFAULT_RINGTONE_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// A Uri that will point to the current default ringtone at any
  /// given time.
  ///
  /// If the current default ringtone is in the DRM provider and the caller
  /// does not have permission, the exception will be a
  /// FileNotFoundException.
  static uri_.Uri get DEFAULT_RINGTONE_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(
          _classRef, _id_DEFAULT_RINGTONE_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DEVICE_PROVISIONED
  ///
  /// @deprecated Use android.provider.Settings.Global\#DEVICE_PROVISIONED instead
  static const DEVICE_PROVISIONED = "device_provisioned";

  /// from: static public final java.lang.String DIM_SCREEN
  ///
  /// Whether or not to dim the screen. 0=no  1=yes
  ///@deprecated This setting is no longer used.
  static const DIM_SCREEN = "dim_screen";

  /// from: static public final java.lang.String DTMF_TONE_TYPE_WHEN_DIALING
  ///
  /// CDMA only settings
  /// DTMF tone type played by the dialer when dialing.
  ///                 0 = Normal
  ///                 1 = Long
  static const DTMF_TONE_TYPE_WHEN_DIALING = "dtmf_tone_type";

  /// from: static public final java.lang.String DTMF_TONE_WHEN_DIALING
  ///
  /// Whether the audible DTMF tones are played by the dialer when dialing. The value is
  /// boolean (1 or 0).
  static const DTMF_TONE_WHEN_DIALING = "dtmf_tone";

  /// from: static public final java.lang.String END_BUTTON_BEHAVIOR
  ///
  /// What happens when the user presses the end call button if they're not
  /// on a call.<br/>
  /// __Values:__<br/>
  /// 0 - The end button does nothing.<br/>
  /// 1 - The end button goes to the home screen.<br/>
  /// 2 - The end button puts the device to sleep and locks the keyguard.<br/>
  /// 3 - The end button goes to the home screen.  If the user is already on the
  /// home screen, it puts the device to sleep.
  static const END_BUTTON_BEHAVIOR = "end_button_behavior";

  /// from: static public final java.lang.String FONT_SCALE
  ///
  /// Scaling factor for fonts, float.
  static const FONT_SCALE = "font_scale";

  /// from: static public final java.lang.String HAPTIC_FEEDBACK_ENABLED
  ///
  /// Whether haptic feedback (Vibrate on tap) is enabled. The value is
  /// boolean (1 or 0).
  static const HAPTIC_FEEDBACK_ENABLED = "haptic_feedback_enabled";

  /// from: static public final java.lang.String HTTP_PROXY
  ///
  /// @deprecated Use android.provider.Settings.Global\#HTTP_PROXY instead
  static const HTTP_PROXY = "http_proxy";

  /// from: static public final java.lang.String INSTALL_NON_MARKET_APPS
  ///
  /// @deprecated Use android.provider.Settings.Secure\#INSTALL_NON_MARKET_APPS instead
  static const INSTALL_NON_MARKET_APPS = "install_non_market_apps";

  /// from: static public final java.lang.String LOCATION_PROVIDERS_ALLOWED
  ///
  /// @deprecated Use android.provider.Settings.Secure\#LOCATION_PROVIDERS_ALLOWED
  /// instead
  static const LOCATION_PROVIDERS_ALLOWED = "location_providers_allowed";

  /// from: static public final java.lang.String LOCK_PATTERN_ENABLED
  ///
  /// @deprecated Use android.provider.Settings.Secure\#LOCK_PATTERN_ENABLED
  /// instead
  static const LOCK_PATTERN_ENABLED = "lock_pattern_autolock";

  /// from: static public final java.lang.String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED
  ///
  /// @deprecated Use
  /// android.provider.Settings.Secure\#LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED
  /// instead
  static const LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED =
      "lock_pattern_tactile_feedback_enabled";

  /// from: static public final java.lang.String LOCK_PATTERN_VISIBLE
  ///
  /// @deprecated Use android.provider.Settings.Secure\#LOCK_PATTERN_VISIBLE
  /// instead
  static const LOCK_PATTERN_VISIBLE = "lock_pattern_visible_pattern";

  /// from: static public final java.lang.String LOGGING_ID
  ///
  /// @deprecated Use android.provider.Settings.Secure\#LOGGING_ID instead
  static const LOGGING_ID = "logging_id";

  /// from: static public final java.lang.String MODE_RINGER
  ///
  /// @deprecated Use android.provider.Settings.Global\#MODE_RINGER instead
  static const MODE_RINGER = "mode_ringer";

  /// from: static public final java.lang.String MODE_RINGER_STREAMS_AFFECTED
  ///
  /// Determines which streams are affected by ringer and zen mode changes. The
  /// stream type's bit should be set to 1 if it should be muted when going
  /// into an inaudible ringer mode.
  static const MODE_RINGER_STREAMS_AFFECTED = "mode_ringer_streams_affected";

  /// from: static public final java.lang.String MUTE_STREAMS_AFFECTED
  ///
  /// Determines which streams are affected by mute. The
  /// stream type's bit should be set to 1 if it should be muted when a mute request
  /// is received.
  static const MUTE_STREAMS_AFFECTED = "mute_streams_affected";

  /// from: static public final java.lang.String NETWORK_PREFERENCE
  ///
  /// @deprecated Use android.provider.Settings.Global\#NETWORK_PREFERENCE instead
  static const NETWORK_PREFERENCE = "network_preference";

  /// from: static public final java.lang.String NEXT_ALARM_FORMATTED
  ///
  /// A formatted string of the next alarm that is set, or the empty string
  /// if there is no alarm set.
  ///@deprecated Use android.app.AlarmManager\#getNextAlarmClock().
  static const NEXT_ALARM_FORMATTED = "next_alarm_formatted";

  /// from: static public final java.lang.String NOTIFICATION_SOUND
  ///
  /// Persistent store for the system-wide default notification sound.
  ///@see \#RINGTONE
  ///@see \#DEFAULT_NOTIFICATION_URI
  static const NOTIFICATION_SOUND = "notification_sound";

  /// from: static public final java.lang.String PARENTAL_CONTROL_ENABLED
  ///
  /// @deprecated Use android.provider.Settings.Secure\#PARENTAL_CONTROL_ENABLED
  /// instead
  static const PARENTAL_CONTROL_ENABLED = "parental_control_enabled";

  /// from: static public final java.lang.String PARENTAL_CONTROL_LAST_UPDATE
  ///
  /// @deprecated Use android.provider.Settings.Secure\#PARENTAL_CONTROL_LAST_UPDATE
  /// instead
  static const PARENTAL_CONTROL_LAST_UPDATE = "parental_control_last_update";

  /// from: static public final java.lang.String PARENTAL_CONTROL_REDIRECT_URL
  ///
  /// @deprecated Use android.provider.Settings.Secure\#PARENTAL_CONTROL_REDIRECT_URL
  /// instead
  static const PARENTAL_CONTROL_REDIRECT_URL = "parental_control_redirect_url";

  /// from: static public final java.lang.String RADIO_BLUETOOTH
  ///
  /// @deprecated Use android.provider.Settings.Global\#RADIO_BLUETOOTH instead
  static const RADIO_BLUETOOTH = "bluetooth";

  /// from: static public final java.lang.String RADIO_CELL
  ///
  /// @deprecated Use android.provider.Settings.Global\#RADIO_CELL instead
  static const RADIO_CELL = "cell";

  /// from: static public final java.lang.String RADIO_NFC
  ///
  /// @deprecated Use android.provider.Settings.Global\#RADIO_NFC instead
  static const RADIO_NFC = "nfc";

  /// from: static public final java.lang.String RADIO_WIFI
  ///
  /// @deprecated Use android.provider.Settings.Global\#RADIO_WIFI instead
  static const RADIO_WIFI = "wifi";

  /// from: static public final java.lang.String RINGTONE
  ///
  /// Persistent store for the system-wide default ringtone URI.
  ///
  /// If you need to play the default ringtone at any given time, it is recommended
  /// you give \#DEFAULT_RINGTONE_URI to the media player.  It will resolve
  /// to the set default ringtone at the time of playing.
  ///@see \#DEFAULT_RINGTONE_URI
  static const RINGTONE = "ringtone";

  /// from: static public final java.lang.String SCREEN_BRIGHTNESS
  ///
  /// The screen backlight brightness between 0 and 255.
  static const SCREEN_BRIGHTNESS = "screen_brightness";

  /// from: static public final java.lang.String SCREEN_BRIGHTNESS_MODE
  ///
  /// Control whether to enable automatic brightness mode.
  static const SCREEN_BRIGHTNESS_MODE = "screen_brightness_mode";

  /// from: static public final int SCREEN_BRIGHTNESS_MODE_AUTOMATIC
  ///
  /// SCREEN_BRIGHTNESS_MODE value for automatic mode.
  static const SCREEN_BRIGHTNESS_MODE_AUTOMATIC = 1;

  /// from: static public final int SCREEN_BRIGHTNESS_MODE_MANUAL
  ///
  /// SCREEN_BRIGHTNESS_MODE value for manual mode.
  static const SCREEN_BRIGHTNESS_MODE_MANUAL = 0;

  /// from: static public final java.lang.String SCREEN_OFF_TIMEOUT
  ///
  /// The amount of time in milliseconds before the device goes to sleep or begins
  /// to dream after a period of inactivity.  This value is also known as the
  /// user activity timeout period since the screen isn't necessarily turned off
  /// when it expires.
  ///
  ///
  /// This value is bounded by maximum timeout set by
  /// android.app.admin.DevicePolicyManager\#setMaximumTimeToLock(ComponentName, long).
  static const SCREEN_OFF_TIMEOUT = "screen_off_timeout";

  /// from: static public final java.lang.String SETTINGS_CLASSNAME
  ///
  /// @deprecated Use android.provider.Settings.Secure\#SETTINGS_CLASSNAME instead
  static const SETTINGS_CLASSNAME = "settings_classname";

  /// from: static public final java.lang.String SETUP_WIZARD_HAS_RUN
  ///
  /// Whether the setup wizard has been run before (on first boot), or if
  /// it still needs to be run.
  ///
  /// nonzero = it has been run in the past
  /// 0 = it has not been run in the past
  static const SETUP_WIZARD_HAS_RUN = "setup_wizard_has_run";

  /// from: static public final java.lang.String SHOW_GTALK_SERVICE_STATUS
  static const SHOW_GTALK_SERVICE_STATUS = "SHOW_GTALK_SERVICE_STATUS";

  /// from: static public final java.lang.String SHOW_PROCESSES
  ///
  /// Control whether the process CPU usage meter should be shown.
  ///@deprecated This functionality is no longer available as of
  /// android.os.Build.VERSION_CODES\#N_MR1.
  static const SHOW_PROCESSES = "show_processes";

  /// from: static public final java.lang.String SHOW_WEB_SUGGESTIONS
  ///
  /// @deprecated Each application that shows web suggestions should have its own
  /// setting for this.
  static const SHOW_WEB_SUGGESTIONS = "show_web_suggestions";

  /// from: static public final java.lang.String SOUND_EFFECTS_ENABLED
  ///
  /// Whether the sounds effects (key clicks, lid open ...) are enabled. The value is
  /// boolean (1 or 0).
  static const SOUND_EFFECTS_ENABLED = "sound_effects_enabled";

  /// from: static public final java.lang.String STAY_ON_WHILE_PLUGGED_IN
  ///
  /// @deprecated Use android.provider.Settings.Global\#STAY_ON_WHILE_PLUGGED_IN instead
  static const STAY_ON_WHILE_PLUGGED_IN = "stay_on_while_plugged_in";

  /// from: static public final java.lang.String TEXT_AUTO_CAPS
  ///
  /// Setting to enable Auto Caps in text editors. 1 = On, 0 = Off
  static const TEXT_AUTO_CAPS = "auto_caps";

  /// from: static public final java.lang.String TEXT_AUTO_PUNCTUATE
  ///
  /// Setting to enable Auto Punctuate in text editors. 1 = On, 0 = Off. This
  /// feature converts two spaces to a "." and space.
  static const TEXT_AUTO_PUNCTUATE = "auto_punctuate";

  /// from: static public final java.lang.String TEXT_AUTO_REPLACE
  ///
  /// Setting to enable Auto Replace (AutoText) in text editors. 1 = On, 0 = Off
  static const TEXT_AUTO_REPLACE = "auto_replace";

  /// from: static public final java.lang.String TEXT_SHOW_PASSWORD
  ///
  /// Setting to showing password characters in text editors. 1 = On, 0 = Off
  static const TEXT_SHOW_PASSWORD = "show_password";

  /// from: static public final java.lang.String TIME_12_24
  ///
  /// Display times as 12 or 24 hours
  ///   12
  ///   24
  static const TIME_12_24 = "time_12_24";

  /// from: static public final java.lang.String TRANSITION_ANIMATION_SCALE
  ///
  /// Scaling factor for activity transition animations. Setting to 0 will disable window
  /// animations.
  ///@deprecated Use Global\#TRANSITION_ANIMATION_SCALE instead
  static const TRANSITION_ANIMATION_SCALE = "transition_animation_scale";

  /// from: static public final java.lang.String USB_MASS_STORAGE_ENABLED
  ///
  /// @deprecated Use android.provider.Settings.Global\#USB_MASS_STORAGE_ENABLED instead
  static const USB_MASS_STORAGE_ENABLED = "usb_mass_storage_enabled";

  /// from: static public final java.lang.String USER_ROTATION
  ///
  /// Default screen rotation when no other policy applies.
  /// When \#ACCELEROMETER_ROTATION is zero and no on-screen Activity expresses a
  /// preference, this rotation value will be used. Must be one of the
  /// android.view.Surface\#ROTATION_0 Surface rotation constants.
  ///@see android.view.Display\#getRotation
  static const USER_ROTATION = "user_rotation";

  /// from: static public final java.lang.String USE_GOOGLE_MAIL
  ///
  /// @deprecated Use android.provider.Settings.Global\#USE_GOOGLE_MAIL instead
  static const USE_GOOGLE_MAIL = "use_google_mail";

  /// from: static public final java.lang.String VIBRATE_ON
  ///
  /// Whether vibrate is on for different events. This is used internally,
  /// changing this value will not change the vibrate. See AudioManager.
  static const VIBRATE_ON = "vibrate_on";

  /// from: static public final java.lang.String VIBRATE_WHEN_RINGING
  ///
  /// Whether the phone vibrates when it is ringing due to an incoming call. This will
  /// be used by Phone and Setting apps; it shouldn't affect other apps.
  /// The value is boolean (1 or 0).
  ///
  /// Note: this is not same as "vibrate on ring", which had been available until ICS.
  /// It was about AudioManager's setting and thus affected all the applications which
  /// relied on the setting, while this is purely about the vibration setting for incoming
  /// calls.
  static const VIBRATE_WHEN_RINGING = "vibrate_when_ringing";

  /// from: static public final java.lang.String WAIT_FOR_DEBUGGER
  ///
  /// If 1, when launching DEBUG_APP it will wait for the debugger before
  /// starting user code.  If 0, it will run normally.
  ///@deprecated Use Global\#WAIT_FOR_DEBUGGER instead
  static const WAIT_FOR_DEBUGGER = "wait_for_debugger";

  /// from: static public final java.lang.String WALLPAPER_ACTIVITY
  ///
  /// Name of activity to use for wallpaper on the home screen.
  ///@deprecated Use WallpaperManager instead.
  static const WALLPAPER_ACTIVITY = "wallpaper_activity";

  /// from: static public final java.lang.String WIFI_MAX_DHCP_RETRY_COUNT
  ///
  /// @deprecated Use
  /// android.provider.Settings.Global\#WIFI_MAX_DHCP_RETRY_COUNT instead
  static const WIFI_MAX_DHCP_RETRY_COUNT = "wifi_max_dhcp_retry_count";

  /// from: static public final java.lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS
  ///
  /// @deprecated Use
  /// android.provider.Settings.Global\#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS instead
  static const WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS =
      "wifi_mobile_data_transition_wakelock_timeout_ms";

  /// from: static public final java.lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON
  ///
  /// @deprecated Use
  /// android.provider.Settings.Global\#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON instead
  static const WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON =
      "wifi_networks_available_notification_on";

  /// from: static public final java.lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY
  ///
  /// @deprecated Use
  /// android.provider.Settings.Global\#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY instead
  static const WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY =
      "wifi_networks_available_repeat_delay";

  /// from: static public final java.lang.String WIFI_NUM_OPEN_NETWORKS_KEPT
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_NUM_OPEN_NETWORKS_KEPT
  /// instead
  static const WIFI_NUM_OPEN_NETWORKS_KEPT = "wifi_num_open_networks_kept";

  /// from: static public final java.lang.String WIFI_ON
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_ON instead
  static const WIFI_ON = "wifi_on";

  /// from: static public final java.lang.String WIFI_SLEEP_POLICY
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_SLEEP_POLICY instead
  static const WIFI_SLEEP_POLICY = "wifi_sleep_policy";

  /// from: static public final int WIFI_SLEEP_POLICY_DEFAULT
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_SLEEP_POLICY_DEFAULT instead
  static const WIFI_SLEEP_POLICY_DEFAULT = 0;

  /// from: static public final int WIFI_SLEEP_POLICY_NEVER
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_SLEEP_POLICY_NEVER instead
  static const WIFI_SLEEP_POLICY_NEVER = 2;

  /// from: static public final int WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED instead
  static const WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED = 1;

  /// from: static public final java.lang.String WIFI_STATIC_DNS1
  ///
  /// If using static IP, the primary DNS's IP address.
  ///
  /// Example: "192.168.1.1"
  ///@deprecated Use WifiManager instead
  static const WIFI_STATIC_DNS1 = "wifi_static_dns1";

  /// from: static public final java.lang.String WIFI_STATIC_DNS2
  ///
  /// If using static IP, the secondary DNS's IP address.
  ///
  /// Example: "192.168.1.2"
  ///@deprecated Use WifiManager instead
  static const WIFI_STATIC_DNS2 = "wifi_static_dns2";

  /// from: static public final java.lang.String WIFI_STATIC_GATEWAY
  ///
  /// If using static IP, the gateway's IP address.
  ///
  /// Example: "192.168.1.1"
  ///@deprecated Use WifiManager instead
  static const WIFI_STATIC_GATEWAY = "wifi_static_gateway";

  /// from: static public final java.lang.String WIFI_STATIC_IP
  ///
  /// The static IP address.
  ///
  /// Example: "192.168.1.51"
  ///@deprecated Use WifiManager instead
  static const WIFI_STATIC_IP = "wifi_static_ip";

  /// from: static public final java.lang.String WIFI_STATIC_NETMASK
  ///
  /// If using static IP, the net mask.
  ///
  /// Example: "255.255.255.0"
  ///@deprecated Use WifiManager instead
  static const WIFI_STATIC_NETMASK = "wifi_static_netmask";

  /// from: static public final java.lang.String WIFI_USE_STATIC_IP
  ///
  /// Whether to use static IP and other static network attributes.
  ///
  /// Set to 1 for true and 0 for false.
  ///@deprecated Use WifiManager instead
  static const WIFI_USE_STATIC_IP = "wifi_use_static_ip";

  /// from: static public final java.lang.String WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE
  ///
  /// @deprecated Use
  /// android.provider.Settings.Secure\#WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE
  /// instead
  static const WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE =
      "wifi_watchdog_acceptable_packet_loss_percentage";

  /// from: static public final java.lang.String WIFI_WATCHDOG_AP_COUNT
  ///
  /// @deprecated Use android.provider.Settings.Secure\#WIFI_WATCHDOG_AP_COUNT instead
  static const WIFI_WATCHDOG_AP_COUNT = "wifi_watchdog_ap_count";

  /// from: static public final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS
  ///
  /// @deprecated Use
  /// android.provider.Settings.Secure\#WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS instead
  static const WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS =
      "wifi_watchdog_background_check_delay_ms";

  /// from: static public final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED
  ///
  /// @deprecated Use
  /// android.provider.Settings.Secure\#WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED instead
  static const WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED =
      "wifi_watchdog_background_check_enabled";

  /// from: static public final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS
  ///
  /// @deprecated Use
  /// android.provider.Settings.Secure\#WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS
  /// instead
  static const WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS =
      "wifi_watchdog_background_check_timeout_ms";

  /// from: static public final java.lang.String WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT
  ///
  /// @deprecated Use
  /// android.provider.Settings.Secure\#WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT instead
  static const WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT =
      "wifi_watchdog_initial_ignored_ping_count";

  /// from: static public final java.lang.String WIFI_WATCHDOG_MAX_AP_CHECKS
  ///
  /// @deprecated Use android.provider.Settings.Secure\#WIFI_WATCHDOG_MAX_AP_CHECKS
  /// instead
  static const WIFI_WATCHDOG_MAX_AP_CHECKS = "wifi_watchdog_max_ap_checks";

  /// from: static public final java.lang.String WIFI_WATCHDOG_ON
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_WATCHDOG_ON instead
  static const WIFI_WATCHDOG_ON = "wifi_watchdog_on";

  /// from: static public final java.lang.String WIFI_WATCHDOG_PING_COUNT
  ///
  /// @deprecated Use android.provider.Settings.Secure\#WIFI_WATCHDOG_PING_COUNT instead
  static const WIFI_WATCHDOG_PING_COUNT = "wifi_watchdog_ping_count";

  /// from: static public final java.lang.String WIFI_WATCHDOG_PING_DELAY_MS
  ///
  /// @deprecated Use android.provider.Settings.Secure\#WIFI_WATCHDOG_PING_DELAY_MS
  /// instead
  static const WIFI_WATCHDOG_PING_DELAY_MS = "wifi_watchdog_ping_delay_ms";

  /// from: static public final java.lang.String WIFI_WATCHDOG_PING_TIMEOUT_MS
  ///
  /// @deprecated Use android.provider.Settings.Secure\#WIFI_WATCHDOG_PING_TIMEOUT_MS
  /// instead
  static const WIFI_WATCHDOG_PING_TIMEOUT_MS = "wifi_watchdog_ping_timeout_ms";

  /// from: static public final java.lang.String WINDOW_ANIMATION_SCALE
  ///
  /// Scaling factor for normal window animations. Setting to 0 will disable window
  /// animations.
  ///@deprecated Use Global\#WINDOW_ANIMATION_SCALE instead
  static const WINDOW_ANIMATION_SCALE = "window_animation_scale";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Settings_System()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getString = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getString",
      "(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getString(android.content.ContentResolver resolver, java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Look up a name in the database.
  ///@param resolver to access the database with
  ///@param name to look up in the table
  ///@return the corresponding value, or null if not present
  static jni.JniString getString(
          contentresolver_.ContentResolver resolver, jni.JniString name) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getString,
          jni.JniType.objectType,
          [resolver.reference, name.reference]).object);

  static final _id_putString1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "putString",
      "(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z");

  /// from: static public boolean putString(android.content.ContentResolver resolver, java.lang.String name, java.lang.String value)
  ///
  /// Store a name/value pair into the database.
  ///@param resolver to access the database with
  ///@param name to store
  ///@param value to associate with the name
  ///@return true if the value was set, false on database errors
  static bool putString1(contentresolver_.ContentResolver resolver,
          jni.JniString name, jni.JniString value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putString1,
          jni.JniType.booleanType,
          [resolver.reference, name.reference, value.reference]).boolean;

  static final _id_getUriFor1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getUriFor", "(Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri getUriFor(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct the content URI for a particular name/value pair,
  /// useful for monitoring changes with a ContentObserver.
  ///@param name to look up in the table
  ///@return the corresponding content URI, or null if not present
  static uri_.Uri getUriFor1(jni.JniString name) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getUriFor1, jni.JniType.objectType, [name.reference]).object);

  static final _id_getInt = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInt", "(Landroid/content/ContentResolver;Ljava/lang/String;I)I");

  /// from: static public int getInt(android.content.ContentResolver cr, java.lang.String name, int def)
  ///
  /// Convenience function for retrieving a single system settings value
  /// as an integer.  Note that internally setting values are always
  /// stored as strings; this function converts the string to an integer
  /// for you.  The default value will be returned if the setting is
  /// not defined or not an integer.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@param def Value to return if the setting is not defined.
  ///@return The setting's current value, or 'def' if it is not defined
  /// or not a valid integer.
  static int getInt(
          contentresolver_.ContentResolver cr, jni.JniString name, int def) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getInt,
          jni.JniType.intType, [cr.reference, name.reference, def]).integer;

  static final _id_getInt1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInt", "(Landroid/content/ContentResolver;Ljava/lang/String;)I");

  /// from: static public int getInt(android.content.ContentResolver cr, java.lang.String name)
  ///
  /// Convenience function for retrieving a single system settings value
  /// as an integer.  Note that internally setting values are always
  /// stored as strings; this function converts the string to an integer
  /// for you.
  ///
  /// This version does not take a default value.  If the setting has not
  /// been set, or the string value is not a number,
  /// it throws SettingNotFoundException.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@throws SettingNotFoundException Thrown if a setting by the given
  /// name can't be found or the setting value is not an integer.
  ///@return The setting's current value.
  static int getInt1(contentresolver_.ContentResolver cr, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getInt1,
          jni.JniType.intType, [cr.reference, name.reference]).integer;

  static final _id_putInt = jniAccessors.getStaticMethodIDOf(_classRef,
      "putInt", "(Landroid/content/ContentResolver;Ljava/lang/String;I)Z");

  /// from: static public boolean putInt(android.content.ContentResolver cr, java.lang.String name, int value)
  ///
  /// Convenience function for updating a single settings value as an
  /// integer. This will either create a new entry in the table if the
  /// given name does not exist, or modify the value of the existing row
  /// with that name.  Note that internally setting values are always
  /// stored as strings, so this function converts the given value to a
  /// string before storing it.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to modify.
  ///@param value The new value for the setting.
  ///@return true if the value was set, false on database errors
  static bool putInt(
          contentresolver_.ContentResolver cr, jni.JniString name, int value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putInt,
          jni.JniType.booleanType,
          [cr.reference, name.reference, value]).boolean;

  static final _id_getLong = jniAccessors.getStaticMethodIDOf(_classRef,
      "getLong", "(Landroid/content/ContentResolver;Ljava/lang/String;J)J");

  /// from: static public long getLong(android.content.ContentResolver cr, java.lang.String name, long def)
  ///
  /// Convenience function for retrieving a single system settings value
  /// as a {@code long}.  Note that internally setting values are always
  /// stored as strings; this function converts the string to a {@code long}
  /// for you.  The default value will be returned if the setting is
  /// not defined or not a {@code long}.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@param def Value to return if the setting is not defined.
  ///@return The setting's current value, or 'def' if it is not defined
  /// or not a valid {@code long}.
  static int getLong(
          contentresolver_.ContentResolver cr, jni.JniString name, int def) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getLong,
          jni.JniType.longType, [cr.reference, name.reference, def]).long;

  static final _id_getLong1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getLong", "(Landroid/content/ContentResolver;Ljava/lang/String;)J");

  /// from: static public long getLong(android.content.ContentResolver cr, java.lang.String name)
  ///
  /// Convenience function for retrieving a single system settings value
  /// as a {@code long}.  Note that internally setting values are always
  /// stored as strings; this function converts the string to a {@code long}
  /// for you.
  ///
  /// This version does not take a default value.  If the setting has not
  /// been set, or the string value is not a number,
  /// it throws SettingNotFoundException.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@return The setting's current value.
  ///@throws SettingNotFoundException Thrown if a setting by the given
  /// name can't be found or the setting value is not an integer.
  static int getLong1(
          contentresolver_.ContentResolver cr, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getLong1,
          jni.JniType.longType, [cr.reference, name.reference]).long;

  static final _id_putLong = jniAccessors.getStaticMethodIDOf(_classRef,
      "putLong", "(Landroid/content/ContentResolver;Ljava/lang/String;J)Z");

  /// from: static public boolean putLong(android.content.ContentResolver cr, java.lang.String name, long value)
  ///
  /// Convenience function for updating a single settings value as a long
  /// integer. This will either create a new entry in the table if the
  /// given name does not exist, or modify the value of the existing row
  /// with that name.  Note that internally setting values are always
  /// stored as strings, so this function converts the given value to a
  /// string before storing it.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to modify.
  ///@param value The new value for the setting.
  ///@return true if the value was set, false on database errors
  static bool putLong(
          contentresolver_.ContentResolver cr, jni.JniString name, int value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putLong,
          jni.JniType.booleanType,
          [cr.reference, name.reference, value]).boolean;

  static final _id_getFloat = jniAccessors.getStaticMethodIDOf(_classRef,
      "getFloat", "(Landroid/content/ContentResolver;Ljava/lang/String;F)F");

  /// from: static public float getFloat(android.content.ContentResolver cr, java.lang.String name, float def)
  ///
  /// Convenience function for retrieving a single system settings value
  /// as a floating point number.  Note that internally setting values are
  /// always stored as strings; this function converts the string to an
  /// float for you. The default value will be returned if the setting
  /// is not defined or not a valid float.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@param def Value to return if the setting is not defined.
  ///@return The setting's current value, or 'def' if it is not defined
  /// or not a valid float.
  static double getFloat(contentresolver_.ContentResolver cr,
          jni.JniString name, double def) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getFloat,
          jni.JniType.floatType, [cr.reference, name.reference, def]).float;

  static final _id_getFloat1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getFloat", "(Landroid/content/ContentResolver;Ljava/lang/String;)F");

  /// from: static public float getFloat(android.content.ContentResolver cr, java.lang.String name)
  ///
  /// Convenience function for retrieving a single system settings value
  /// as a float.  Note that internally setting values are always
  /// stored as strings; this function converts the string to a float
  /// for you.
  ///
  /// This version does not take a default value.  If the setting has not
  /// been set, or the string value is not a number,
  /// it throws SettingNotFoundException.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@throws SettingNotFoundException Thrown if a setting by the given
  /// name can't be found or the setting value is not a float.
  ///@return The setting's current value.
  static double getFloat1(
          contentresolver_.ContentResolver cr, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getFloat1,
          jni.JniType.floatType, [cr.reference, name.reference]).float;

  static final _id_putFloat = jniAccessors.getStaticMethodIDOf(_classRef,
      "putFloat", "(Landroid/content/ContentResolver;Ljava/lang/String;F)Z");

  /// from: static public boolean putFloat(android.content.ContentResolver cr, java.lang.String name, float value)
  ///
  /// Convenience function for updating a single settings value as a
  /// floating point number. This will either create a new entry in the
  /// table if the given name does not exist, or modify the value of the
  /// existing row with that name.  Note that internally setting values
  /// are always stored as strings, so this function converts the given
  /// value to a string before storing it.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to modify.
  ///@param value The new value for the setting.
  ///@return true if the value was set, false on database errors
  static bool putFloat(contentresolver_.ContentResolver cr, jni.JniString name,
          double value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putFloat,
          jni.JniType.booleanType,
          [cr.reference, name.reference, value]).boolean;

  static final _id_getConfiguration = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getConfiguration",
      "(Landroid/content/ContentResolver;Landroid/content/res/Configuration;)V");

  /// from: static public void getConfiguration(android.content.ContentResolver cr, android.content.res.Configuration outConfig)
  ///
  /// Convenience function to read all of the current
  /// configuration-related settings into a
  /// Configuration object.
  ///@param cr The ContentResolver to access.
  ///@param outConfig Where to place the configuration settings.
  static void getConfiguration(contentresolver_.ContentResolver cr,
          configuration_.Configuration outConfig) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getConfiguration,
          jni.JniType.voidType, [cr.reference, outConfig.reference]).check();

  static final _id_putConfiguration = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "putConfiguration",
      "(Landroid/content/ContentResolver;Landroid/content/res/Configuration;)Z");

  /// from: static public boolean putConfiguration(android.content.ContentResolver cr, android.content.res.Configuration config)
  ///
  /// Convenience function to write a batch of configuration-related
  /// settings from a Configuration object.
  ///@param cr The ContentResolver to access.
  ///@param config The settings to write.
  ///@return true if the values were set, false on database errors
  static bool putConfiguration(contentresolver_.ContentResolver cr,
          configuration_.Configuration config) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_putConfiguration,
          jni.JniType.booleanType, [cr.reference, config.reference]).boolean;

  static final _id_getShowGTalkServiceStatus = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getShowGTalkServiceStatus",
      "(Landroid/content/ContentResolver;)Z");

  /// from: static public boolean getShowGTalkServiceStatus(android.content.ContentResolver cr)
  ///
  /// @deprecated - Do not use
  static bool getShowGTalkServiceStatus(contentresolver_.ContentResolver cr) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getShowGTalkServiceStatus,
          jni.JniType.booleanType,
          [cr.reference]).boolean;

  static final _id_setShowGTalkServiceStatus = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "setShowGTalkServiceStatus",
      "(Landroid/content/ContentResolver;Z)V");

  /// from: static public void setShowGTalkServiceStatus(android.content.ContentResolver cr, boolean flag)
  ///
  /// @deprecated - Do not use
  static void setShowGTalkServiceStatus(
          contentresolver_.ContentResolver cr, bool flag) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_setShowGTalkServiceStatus,
          jni.JniType.voidType,
          [cr.reference, flag]).check();

  static final _id_canWrite = jniAccessors.getStaticMethodIDOf(
      _classRef, "canWrite", "(Landroid/content/Context;)Z");

  /// from: static public boolean canWrite(android.content.Context context)
  ///
  /// Checks if the specified app can modify system settings. As of API
  /// level 23, an app cannot modify system settings unless it declares the
  /// android.Manifest.permission\#WRITE_SETTINGS
  /// permission in its manifest, _and_ the user specifically grants
  /// the app this capability. To prompt the user to grant this approval,
  /// the app must send an intent with the action android.provider.Settings\#ACTION_MANAGE_WRITE_SETTINGS, which causes
  /// the system to display a permission management screen.
  ///@param context App context.
  ///@return true if the calling app can write to system settings, false otherwise
  static bool canWrite(context_.Context context) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_canWrite,
          jni.JniType.booleanType, [context.reference]).boolean;
}

/// from: android.provider.Settings$SettingNotFoundException
class Settings_SettingNotFoundException
    extends androidexception_.AndroidException {
  static final _classRef = jniAccessors
      .getClassOf("android/provider/Settings\$SettingNotFoundException");
  Settings_SettingNotFoundException.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String msg)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Settings_SettingNotFoundException.ctor1(jni.JniString msg)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [msg.reference]).object);
}

/// from: android.provider.Settings$Secure
///
/// Secure system settings, containing system preferences that applications
/// can read but are not allowed to write.  These are for preferences that
/// the user must explicitly modify through the system UI or specialized
/// APIs for those values, not modified directly by applications.
class Settings_Secure extends Settings_NameValueTable {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Settings\$Secure");
  Settings_Secure.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACCESSIBILITY_DISPLAY_INVERSION_ENABLED
  ///
  /// Setting that specifies whether display color inversion is enabled.
  static const ACCESSIBILITY_DISPLAY_INVERSION_ENABLED =
      "accessibility_display_inversion_enabled";

  /// from: static public final java.lang.String ACCESSIBILITY_ENABLED
  ///
  /// If accessibility is enabled.
  static const ACCESSIBILITY_ENABLED = "accessibility_enabled";

  /// from: static public final java.lang.String ACCESSIBILITY_SPEAK_PASSWORD
  ///
  /// Whether to speak passwords while in accessibility mode.
  ///@deprecated The speaking of passwords is controlled by individual accessibility services.
  /// Apps should ignore this setting and provide complete information to accessibility
  /// at all times, which was the behavior when this value was {@code true}.
  static const ACCESSIBILITY_SPEAK_PASSWORD = "speak_password";

  /// from: static public final java.lang.String ADB_ENABLED
  ///
  /// @deprecated Use android.provider.Settings.Global\#ADB_ENABLED instead
  static const ADB_ENABLED = "adb_enabled";

  /// from: static public final java.lang.String ALLOWED_GEOLOCATION_ORIGINS
  ///
  /// Origins for which browsers should allow geolocation by default.
  /// The value is a space-separated list of origins.
  static const ALLOWED_GEOLOCATION_ORIGINS = "allowed_geolocation_origins";

  /// from: static public final java.lang.String ALLOW_MOCK_LOCATION
  ///
  /// Setting to allow mock locations and location provider status to be injected into the
  /// LocationManager service for testing purposes during application development.  These
  /// locations and status values  override actual location and status information generated
  /// by network, gps, or other location providers.
  ///@deprecated This settings is not used anymore.
  static const ALLOW_MOCK_LOCATION = "mock_location";

  /// from: static public final java.lang.String ANDROID_ID
  ///
  /// On Android 8.0 (API level 26) and higher versions of the platform,
  /// a 64-bit number (expressed as a hexadecimal string), unique to
  /// each combination of app-signing key, user, and device.
  /// Values of {@code ANDROID_ID} are scoped by signing key and user.
  /// The value may change if a factory reset is performed on the
  /// device or if an APK signing key changes.
  ///
  /// For more information about how the platform handles {@code ANDROID_ID}
  /// in Android 8.0 (API level 26) and higher, see <a href="{@docRoot}preview/behavior-changes.html\#privacy-all">
  /// Android 8.0 Behavior Changes</a>.
  ///
  /// <p class="note"><strong>Note:</strong> For apps that were installed
  /// prior to updating the device to a version of Android 8.0
  /// (API level 26) or higher, the value of {@code ANDROID_ID} changes
  /// if the app is uninstalled and then reinstalled after the OTA.
  /// To preserve values across uninstalls after an OTA to Android 8.0
  /// or higher, developers can use
  /// <a href="{@docRoot}guide/topics/data/keyvaluebackup.html">
  /// Key/Value Backup</a>.
  ///
  ///
  /// In versions of the platform lower than Android 8.0 (API level 26),
  /// a 64-bit number (expressed as a hexadecimal string) that is randomly
  /// generated when the user first sets up the device and should remain
  /// constant for the lifetime of the user's device.
  ///
  /// On devices that have
  /// <a href="{@docRoot}about/versions/android-4.2.html\#MultipleUsers">
  /// multiple users</a>, each user appears as a
  /// completely separate device, so the {@code ANDROID_ID} value is
  /// unique to each user.
  ///
  ///
  /// <p class="note"><strong>Note:</strong> If the caller is an Instant App the ID is scoped
  /// to the Instant App, it is generated when the Instant App is first installed and reset if
  /// the user clears the Instant App.
  static const ANDROID_ID = "android_id";

  /// from: static public final java.lang.String BACKGROUND_DATA
  ///
  /// Whether background data usage is allowed.
  ///@deprecated As of VERSION_CODES\#ICE_CREAM_SANDWICH,
  ///             availability of background data depends on several
  ///             combined factors. When background data is unavailable,
  ///             ConnectivityManager\#getActiveNetworkInfo() will
  ///             now appear disconnected.
  static const BACKGROUND_DATA = "background_data";

  /// from: static public final java.lang.String BLUETOOTH_ON
  ///
  /// @deprecated Use android.provider.Settings.Global\#BLUETOOTH_ON instead
  static const BLUETOOTH_ON = "bluetooth_on";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for this table
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DATA_ROAMING
  ///
  /// @deprecated Use android.provider.Settings.Global\#DATA_ROAMING instead
  static const DATA_ROAMING = "data_roaming";

  /// from: static public final java.lang.String DEFAULT_INPUT_METHOD
  ///
  /// Setting to record the input method used by default, holding the ID
  /// of the desired method.
  static const DEFAULT_INPUT_METHOD = "default_input_method";

  /// from: static public final java.lang.String DEVELOPMENT_SETTINGS_ENABLED
  ///
  /// @deprecated Use android.provider.Settings.Global\#DEVELOPMENT_SETTINGS_ENABLED
  /// instead
  static const DEVELOPMENT_SETTINGS_ENABLED = "development_settings_enabled";

  /// from: static public final java.lang.String DEVICE_PROVISIONED
  ///
  /// @deprecated Use android.provider.Settings.Global\#DEVICE_PROVISIONED instead
  static const DEVICE_PROVISIONED = "device_provisioned";

  /// from: static public final java.lang.String ENABLED_ACCESSIBILITY_SERVICES
  ///
  /// List of the enabled accessibility providers.
  static const ENABLED_ACCESSIBILITY_SERVICES =
      "enabled_accessibility_services";

  /// from: static public final java.lang.String ENABLED_INPUT_METHODS
  ///
  /// List of input methods that are currently enabled.  This is a string
  /// containing the IDs of all enabled input methods, each ID separated
  /// by ':'.
  ///
  /// Format like "ime0;subtype0;subtype1;subtype2:ime1:ime2;subtype0"
  /// where imeId is ComponentName and subtype is int32.
  static const ENABLED_INPUT_METHODS = "enabled_input_methods";

  /// from: static public final java.lang.String HTTP_PROXY
  ///
  /// Host name and port for global http proxy. Uses ':' seperator for
  /// between host and port.
  ///@deprecated Use Global\#HTTP_PROXY
  static const HTTP_PROXY = "http_proxy";

  /// from: static public final java.lang.String INPUT_METHOD_SELECTOR_VISIBILITY
  ///
  /// Setting to record the visibility of input method selector
  static const INPUT_METHOD_SELECTOR_VISIBILITY =
      "input_method_selector_visibility";

  /// from: static public final java.lang.String INSTALL_NON_MARKET_APPS
  ///
  /// Whether applications can be installed for this user via the system's
  /// Intent\#ACTION_INSTALL_PACKAGE mechanism.
  ///
  /// 1 = permit app installation via the system package installer intent
  /// 0 = do not allow use of the package installer
  ///@deprecated Starting from android.os.Build.VERSION_CODES\#O, apps should use
  /// PackageManager\#canRequestPackageInstalls()
  ///@see PackageManager\#canRequestPackageInstalls()
  static const INSTALL_NON_MARKET_APPS = "install_non_market_apps";

  /// from: static public final java.lang.String LOCATION_MODE
  ///
  /// The degree of location access enabled by the user.
  ///
  /// When used with \#putInt(ContentResolver, String, int), must be one of \#LOCATION_MODE_HIGH_ACCURACY, \#LOCATION_MODE_SENSORS_ONLY, \#LOCATION_MODE_BATTERY_SAVING, or \#LOCATION_MODE_OFF. When used with \#getInt(ContentResolver, String), the caller must gracefully handle additional location
  /// modes that might be added in the future.
  ///
  /// Note: do not rely on this value being present in settings.db or on ContentObserver
  /// notifications for the corresponding Uri. Use LocationManager\#MODE_CHANGED_ACTION
  /// to receive changes in this value.
  ///@deprecated To check location status, use LocationManager\#isLocationEnabled(). To
  ///             get the status of a location provider, use
  ///             LocationManager\#isProviderEnabled(String).
  static const LOCATION_MODE = "location_mode";

  /// from: static public final int LOCATION_MODE_BATTERY_SAVING
  ///
  /// Reduced power usage, such as limiting the number of GPS updates per hour. Requests
  /// with android.location.Criteria\#POWER_HIGH may be downgraded to
  /// android.location.Criteria\#POWER_MEDIUM.
  ///@deprecated To check location status, use LocationManager\#isLocationEnabled(). To
  ///             get the status of a location provider, use
  ///             LocationManager\#isProviderEnabled(String).
  static const LOCATION_MODE_BATTERY_SAVING = 2;

  /// from: static public final int LOCATION_MODE_HIGH_ACCURACY
  ///
  /// Best-effort location computation allowed.
  ///@deprecated To check location status, use LocationManager\#isLocationEnabled(). To
  ///             get the status of a location provider, use
  ///             LocationManager\#isProviderEnabled(String).
  static const LOCATION_MODE_HIGH_ACCURACY = 3;

  /// from: static public final int LOCATION_MODE_OFF
  ///
  /// Location access disabled.
  ///@deprecated To check location status, use LocationManager\#isLocationEnabled(). To
  ///             get the status of a location provider, use
  ///             LocationManager\#isProviderEnabled(String).
  static const LOCATION_MODE_OFF = 0;

  /// from: static public final int LOCATION_MODE_SENSORS_ONLY
  ///
  /// Network Location Provider disabled, but GPS and other sensors enabled.
  ///@deprecated To check location status, use LocationManager\#isLocationEnabled(). To
  ///             get the status of a location provider, use
  ///             LocationManager\#isProviderEnabled(String).
  static const LOCATION_MODE_SENSORS_ONLY = 1;

  /// from: static public final java.lang.String LOCATION_PROVIDERS_ALLOWED
  ///
  /// Comma-separated list of location providers that activities may access. Do not rely on
  /// this value being present in settings.db or on ContentObserver notifications on the
  /// corresponding Uri.
  ///@deprecated use \#LOCATION_MODE and
  /// LocationManager\#MODE_CHANGED_ACTION (or
  /// LocationManager\#PROVIDERS_CHANGED_ACTION)
  static const LOCATION_PROVIDERS_ALLOWED = "location_providers_allowed";

  /// from: static public final java.lang.String LOCK_PATTERN_ENABLED
  ///
  /// Whether autolock is enabled (0 = false, 1 = true)
  ///@deprecated Use android.app.KeyguardManager to determine the state and security
  ///             level of the keyguard. Accessing this setting from an app that is targeting
  ///             VERSION_CODES\#M or later throws a {@code SecurityException}.
  static const LOCK_PATTERN_ENABLED = "lock_pattern_autolock";

  /// from: static public final java.lang.String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED
  ///
  /// Whether lock pattern will vibrate as user enters (0 = false, 1 =
  /// true)
  ///@deprecated Starting in VERSION_CODES\#JELLY_BEAN_MR1 the
  ///             lockscreen uses
  ///             Settings.System\#HAPTIC_FEEDBACK_ENABLED.
  ///             Accessing this setting from an app that is targeting
  ///             VERSION_CODES\#M or later throws a {@code SecurityException}.
  static const LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED =
      "lock_pattern_tactile_feedback_enabled";

  /// from: static public final java.lang.String LOCK_PATTERN_VISIBLE
  ///
  /// Whether lock pattern is visible as user enters (0 = false, 1 = true)
  ///@deprecated Accessing this setting from an app that is targeting
  ///             VERSION_CODES\#M or later throws a {@code SecurityException}.
  static const LOCK_PATTERN_VISIBLE = "lock_pattern_visible_pattern";

  /// from: static public final java.lang.String LOGGING_ID
  ///
  /// The Logging ID (a unique 64-bit value) as a hex string.
  /// Used as a pseudonymous identifier for logging.
  ///@deprecated This identifier is poorly initialized and has
  /// many collisions.  It should not be used.
  static const LOGGING_ID = "logging_id";

  /// from: static public final java.lang.String NETWORK_PREFERENCE
  ///
  /// @deprecated Use android.provider.Settings.Global\#NETWORK_PREFERENCE instead
  static const NETWORK_PREFERENCE = "network_preference";

  /// from: static public final java.lang.String PARENTAL_CONTROL_ENABLED
  ///
  /// No longer supported.
  static const PARENTAL_CONTROL_ENABLED = "parental_control_enabled";

  /// from: static public final java.lang.String PARENTAL_CONTROL_LAST_UPDATE
  ///
  /// No longer supported.
  static const PARENTAL_CONTROL_LAST_UPDATE = "parental_control_last_update";

  /// from: static public final java.lang.String PARENTAL_CONTROL_REDIRECT_URL
  ///
  /// No longer supported.
  static const PARENTAL_CONTROL_REDIRECT_URL = "parental_control_redirect_url";

  /// from: static public final java.lang.String RTT_CALLING_MODE
  ///
  /// User-selected RTT mode. When on, outgoing and incoming calls will be answered as RTT
  /// calls when supported by the device and carrier. Boolean value.
  /// 0 = OFF
  /// 1 = ON
  static const RTT_CALLING_MODE = "rtt_calling_mode";

  /// from: static public final java.lang.String SELECTED_INPUT_METHOD_SUBTYPE
  ///
  /// Setting to record the input method subtype used by default, holding the ID
  /// of the desired method.
  static const SELECTED_INPUT_METHOD_SUBTYPE = "selected_input_method_subtype";

  /// from: static public final java.lang.String SETTINGS_CLASSNAME
  ///
  /// Settings classname to launch when Settings is clicked from All
  /// Applications.  Needed because of user testing between the old
  /// and new Settings apps.
  static const SETTINGS_CLASSNAME = "settings_classname";

  /// from: static public final java.lang.String SKIP_FIRST_USE_HINTS
  ///
  /// If enabled, apps should try to skip any introductory hints on first launch. This might
  /// apply to users that are already familiar with the environment or temporary users.
  ///
  /// Type : int (0 to show hints, 1 to skip showing hints)
  static const SKIP_FIRST_USE_HINTS = "skip_first_use_hints";

  /// from: static public final java.lang.String TOUCH_EXPLORATION_ENABLED
  ///
  /// If touch exploration is enabled.
  static const TOUCH_EXPLORATION_ENABLED = "touch_exploration_enabled";

  /// from: static public final java.lang.String TTS_DEFAULT_COUNTRY
  ///
  /// Default text-to-speech country.
  ///@deprecated this setting is no longer in use, as of the Ice Cream
  /// Sandwich release. Apps should never need to read this setting directly,
  /// instead can query the TextToSpeech framework classes for the default
  /// locale. TextToSpeech\#getLanguage().
  static const TTS_DEFAULT_COUNTRY = "tts_default_country";

  /// from: static public final java.lang.String TTS_DEFAULT_LANG
  ///
  /// Default text-to-speech language.
  ///@deprecated this setting is no longer in use, as of the Ice Cream
  /// Sandwich release. Apps should never need to read this setting directly,
  /// instead can query the TextToSpeech framework classes for the default
  /// locale. TextToSpeech\#getLanguage().
  static const TTS_DEFAULT_LANG = "tts_default_lang";

  /// from: static public final java.lang.String TTS_DEFAULT_PITCH
  ///
  /// Default text-to-speech engine pitch. 100 = 1x
  static const TTS_DEFAULT_PITCH = "tts_default_pitch";

  /// from: static public final java.lang.String TTS_DEFAULT_RATE
  ///
  /// Default text-to-speech engine speech rate. 100 = 1x
  static const TTS_DEFAULT_RATE = "tts_default_rate";

  /// from: static public final java.lang.String TTS_DEFAULT_SYNTH
  ///
  /// Default text-to-speech engine.
  static const TTS_DEFAULT_SYNTH = "tts_default_synth";

  /// from: static public final java.lang.String TTS_DEFAULT_VARIANT
  ///
  /// Default text-to-speech locale variant.
  ///@deprecated this setting is no longer in use, as of the Ice Cream
  /// Sandwich release. Apps should never need to read this setting directly,
  /// instead can query the TextToSpeech framework classes for the
  /// locale that is in use TextToSpeech\#getLanguage().
  static const TTS_DEFAULT_VARIANT = "tts_default_variant";

  /// from: static public final java.lang.String TTS_ENABLED_PLUGINS
  ///
  /// Space delimited list of plugin packages that are enabled.
  static const TTS_ENABLED_PLUGINS = "tts_enabled_plugins";

  /// from: static public final java.lang.String TTS_USE_DEFAULTS
  ///
  /// Setting to always use the default text-to-speech settings regardless
  /// of the application settings.
  /// 1 = override application settings,
  /// 0 = use application settings (if specified).
  ///@deprecated The value of this setting is no longer respected by
  /// the framework text to speech APIs as of the Ice Cream Sandwich release.
  static const TTS_USE_DEFAULTS = "tts_use_defaults";

  /// from: static public final java.lang.String USB_MASS_STORAGE_ENABLED
  ///
  /// @deprecated Use android.provider.Settings.Global\#USB_MASS_STORAGE_ENABLED instead
  static const USB_MASS_STORAGE_ENABLED = "usb_mass_storage_enabled";

  /// from: static public final java.lang.String USE_GOOGLE_MAIL
  ///
  /// @deprecated Use android.provider.Settings.Global\#USE_GOOGLE_MAIL instead
  static const USE_GOOGLE_MAIL = "use_google_mail";

  /// from: static public final java.lang.String WIFI_MAX_DHCP_RETRY_COUNT
  ///
  /// @deprecated Use
  /// android.provider.Settings.Global\#WIFI_MAX_DHCP_RETRY_COUNT instead
  static const WIFI_MAX_DHCP_RETRY_COUNT = "wifi_max_dhcp_retry_count";

  /// from: static public final java.lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS
  ///
  /// @deprecated Use
  /// android.provider.Settings.Global\#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS instead
  static const WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS =
      "wifi_mobile_data_transition_wakelock_timeout_ms";

  /// from: static public final java.lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON
  /// instead.
  static const WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON =
      "wifi_networks_available_notification_on";

  /// from: static public final java.lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY
  /// instead.
  static const WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY =
      "wifi_networks_available_repeat_delay";

  /// from: static public final java.lang.String WIFI_NUM_OPEN_NETWORKS_KEPT
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_NUM_OPEN_NETWORKS_KEPT
  /// instead.
  static const WIFI_NUM_OPEN_NETWORKS_KEPT = "wifi_num_open_networks_kept";

  /// from: static public final java.lang.String WIFI_ON
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_ON
  /// instead.
  static const WIFI_ON = "wifi_on";

  /// from: static public final java.lang.String WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE
  ///
  /// The acceptable packet loss percentage (range 0 - 100) before trying
  /// another AP on the same network.
  ///@deprecated This setting is not used.
  static const WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE =
      "wifi_watchdog_acceptable_packet_loss_percentage";

  /// from: static public final java.lang.String WIFI_WATCHDOG_AP_COUNT
  ///
  /// The number of access points required for a network in order for the
  /// watchdog to monitor it.
  ///@deprecated This setting is not used.
  static const WIFI_WATCHDOG_AP_COUNT = "wifi_watchdog_ap_count";

  /// from: static public final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS
  ///
  /// The delay between background checks.
  ///@deprecated This setting is not used.
  static const WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS =
      "wifi_watchdog_background_check_delay_ms";

  /// from: static public final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED
  ///
  /// Whether the Wi-Fi watchdog is enabled for background checking even
  /// after it thinks the user has connected to a good access point.
  ///@deprecated This setting is not used.
  static const WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED =
      "wifi_watchdog_background_check_enabled";

  /// from: static public final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS
  ///
  /// The timeout for a background ping
  ///@deprecated This setting is not used.
  static const WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS =
      "wifi_watchdog_background_check_timeout_ms";

  /// from: static public final java.lang.String WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT
  ///
  /// The number of initial pings to perform that *may* be ignored if they
  /// fail. Again, if these fail, they will *not* be used in packet loss
  /// calculation. For example, one network always seemed to time out for
  /// the first couple pings, so this is set to 3 by default.
  ///@deprecated This setting is not used.
  static const WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT =
      "wifi_watchdog_initial_ignored_ping_count";

  /// from: static public final java.lang.String WIFI_WATCHDOG_MAX_AP_CHECKS
  ///
  /// The maximum number of access points (per network) to attempt to test.
  /// If this number is reached, the watchdog will no longer monitor the
  /// initial connection state for the network. This is a safeguard for
  /// networks containing multiple APs whose DNS does not respond to pings.
  ///@deprecated This setting is not used.
  static const WIFI_WATCHDOG_MAX_AP_CHECKS = "wifi_watchdog_max_ap_checks";

  /// from: static public final java.lang.String WIFI_WATCHDOG_ON
  ///
  /// @deprecated Use android.provider.Settings.Global\#WIFI_WATCHDOG_ON instead
  static const WIFI_WATCHDOG_ON = "wifi_watchdog_on";

  /// from: static public final java.lang.String WIFI_WATCHDOG_PING_COUNT
  ///
  /// The number of pings to test if an access point is a good connection.
  ///@deprecated This setting is not used.
  static const WIFI_WATCHDOG_PING_COUNT = "wifi_watchdog_ping_count";

  /// from: static public final java.lang.String WIFI_WATCHDOG_PING_DELAY_MS
  ///
  /// The delay between pings.
  ///@deprecated This setting is not used.
  static const WIFI_WATCHDOG_PING_DELAY_MS = "wifi_watchdog_ping_delay_ms";

  /// from: static public final java.lang.String WIFI_WATCHDOG_PING_TIMEOUT_MS
  ///
  /// The timeout per ping.
  ///@deprecated This setting is not used.
  static const WIFI_WATCHDOG_PING_TIMEOUT_MS = "wifi_watchdog_ping_timeout_ms";

  /// from: static public final java.lang.String WIFI_WATCHDOG_WATCH_LIST
  ///
  /// A comma-separated list of SSIDs for which the Wi-Fi watchdog should be enabled.
  ///@deprecated This setting is not used.
  static const WIFI_WATCHDOG_WATCH_LIST = "wifi_watchdog_watch_list";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Settings_Secure()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getString = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getString",
      "(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getString(android.content.ContentResolver resolver, java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Look up a name in the database.
  ///@param resolver to access the database with
  ///@param name to look up in the table
  ///@return the corresponding value, or null if not present
  static jni.JniString getString(
          contentresolver_.ContentResolver resolver, jni.JniString name) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getString,
          jni.JniType.objectType,
          [resolver.reference, name.reference]).object);

  static final _id_putString1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "putString",
      "(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z");

  /// from: static public boolean putString(android.content.ContentResolver resolver, java.lang.String name, java.lang.String value)
  ///
  /// Store a name/value pair into the database.
  ///@param resolver to access the database with
  ///@param name to store
  ///@param value to associate with the name
  ///@return true if the value was set, false on database errors
  static bool putString1(contentresolver_.ContentResolver resolver,
          jni.JniString name, jni.JniString value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putString1,
          jni.JniType.booleanType,
          [resolver.reference, name.reference, value.reference]).boolean;

  static final _id_getUriFor1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getUriFor", "(Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri getUriFor(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct the content URI for a particular name/value pair,
  /// useful for monitoring changes with a ContentObserver.
  ///@param name to look up in the table
  ///@return the corresponding content URI, or null if not present
  static uri_.Uri getUriFor1(jni.JniString name) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getUriFor1, jni.JniType.objectType, [name.reference]).object);

  static final _id_getInt = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInt", "(Landroid/content/ContentResolver;Ljava/lang/String;I)I");

  /// from: static public int getInt(android.content.ContentResolver cr, java.lang.String name, int def)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as an integer.  Note that internally setting values are always
  /// stored as strings; this function converts the string to an integer
  /// for you.  The default value will be returned if the setting is
  /// not defined or not an integer.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@param def Value to return if the setting is not defined.
  ///@return The setting's current value, or 'def' if it is not defined
  /// or not a valid integer.
  static int getInt(
          contentresolver_.ContentResolver cr, jni.JniString name, int def) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getInt,
          jni.JniType.intType, [cr.reference, name.reference, def]).integer;

  static final _id_getInt1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInt", "(Landroid/content/ContentResolver;Ljava/lang/String;)I");

  /// from: static public int getInt(android.content.ContentResolver cr, java.lang.String name)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as an integer.  Note that internally setting values are always
  /// stored as strings; this function converts the string to an integer
  /// for you.
  ///
  /// This version does not take a default value.  If the setting has not
  /// been set, or the string value is not a number,
  /// it throws SettingNotFoundException.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@throws SettingNotFoundException Thrown if a setting by the given
  /// name can't be found or the setting value is not an integer.
  ///@return The setting's current value.
  static int getInt1(contentresolver_.ContentResolver cr, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getInt1,
          jni.JniType.intType, [cr.reference, name.reference]).integer;

  static final _id_putInt = jniAccessors.getStaticMethodIDOf(_classRef,
      "putInt", "(Landroid/content/ContentResolver;Ljava/lang/String;I)Z");

  /// from: static public boolean putInt(android.content.ContentResolver cr, java.lang.String name, int value)
  ///
  /// Convenience function for updating a single settings value as an
  /// integer. This will either create a new entry in the table if the
  /// given name does not exist, or modify the value of the existing row
  /// with that name.  Note that internally setting values are always
  /// stored as strings, so this function converts the given value to a
  /// string before storing it.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to modify.
  ///@param value The new value for the setting.
  ///@return true if the value was set, false on database errors
  static bool putInt(
          contentresolver_.ContentResolver cr, jni.JniString name, int value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putInt,
          jni.JniType.booleanType,
          [cr.reference, name.reference, value]).boolean;

  static final _id_getLong = jniAccessors.getStaticMethodIDOf(_classRef,
      "getLong", "(Landroid/content/ContentResolver;Ljava/lang/String;J)J");

  /// from: static public long getLong(android.content.ContentResolver cr, java.lang.String name, long def)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as a {@code long}.  Note that internally setting values are always
  /// stored as strings; this function converts the string to a {@code long}
  /// for you.  The default value will be returned if the setting is
  /// not defined or not a {@code long}.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@param def Value to return if the setting is not defined.
  ///@return The setting's current value, or 'def' if it is not defined
  /// or not a valid {@code long}.
  static int getLong(
          contentresolver_.ContentResolver cr, jni.JniString name, int def) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getLong,
          jni.JniType.longType, [cr.reference, name.reference, def]).long;

  static final _id_getLong1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getLong", "(Landroid/content/ContentResolver;Ljava/lang/String;)J");

  /// from: static public long getLong(android.content.ContentResolver cr, java.lang.String name)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as a {@code long}.  Note that internally setting values are always
  /// stored as strings; this function converts the string to a {@code long}
  /// for you.
  ///
  /// This version does not take a default value.  If the setting has not
  /// been set, or the string value is not a number,
  /// it throws SettingNotFoundException.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@return The setting's current value.
  ///@throws SettingNotFoundException Thrown if a setting by the given
  /// name can't be found or the setting value is not an integer.
  static int getLong1(
          contentresolver_.ContentResolver cr, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getLong1,
          jni.JniType.longType, [cr.reference, name.reference]).long;

  static final _id_putLong = jniAccessors.getStaticMethodIDOf(_classRef,
      "putLong", "(Landroid/content/ContentResolver;Ljava/lang/String;J)Z");

  /// from: static public boolean putLong(android.content.ContentResolver cr, java.lang.String name, long value)
  ///
  /// Convenience function for updating a secure settings value as a long
  /// integer. This will either create a new entry in the table if the
  /// given name does not exist, or modify the value of the existing row
  /// with that name.  Note that internally setting values are always
  /// stored as strings, so this function converts the given value to a
  /// string before storing it.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to modify.
  ///@param value The new value for the setting.
  ///@return true if the value was set, false on database errors
  static bool putLong(
          contentresolver_.ContentResolver cr, jni.JniString name, int value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putLong,
          jni.JniType.booleanType,
          [cr.reference, name.reference, value]).boolean;

  static final _id_getFloat = jniAccessors.getStaticMethodIDOf(_classRef,
      "getFloat", "(Landroid/content/ContentResolver;Ljava/lang/String;F)F");

  /// from: static public float getFloat(android.content.ContentResolver cr, java.lang.String name, float def)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as a floating point number.  Note that internally setting values are
  /// always stored as strings; this function converts the string to an
  /// float for you. The default value will be returned if the setting
  /// is not defined or not a valid float.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@param def Value to return if the setting is not defined.
  ///@return The setting's current value, or 'def' if it is not defined
  /// or not a valid float.
  static double getFloat(contentresolver_.ContentResolver cr,
          jni.JniString name, double def) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getFloat,
          jni.JniType.floatType, [cr.reference, name.reference, def]).float;

  static final _id_getFloat1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getFloat", "(Landroid/content/ContentResolver;Ljava/lang/String;)F");

  /// from: static public float getFloat(android.content.ContentResolver cr, java.lang.String name)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as a float.  Note that internally setting values are always
  /// stored as strings; this function converts the string to a float
  /// for you.
  ///
  /// This version does not take a default value.  If the setting has not
  /// been set, or the string value is not a number,
  /// it throws SettingNotFoundException.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@throws SettingNotFoundException Thrown if a setting by the given
  /// name can't be found or the setting value is not a float.
  ///@return The setting's current value.
  static double getFloat1(
          contentresolver_.ContentResolver cr, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getFloat1,
          jni.JniType.floatType, [cr.reference, name.reference]).float;

  static final _id_putFloat = jniAccessors.getStaticMethodIDOf(_classRef,
      "putFloat", "(Landroid/content/ContentResolver;Ljava/lang/String;F)Z");

  /// from: static public boolean putFloat(android.content.ContentResolver cr, java.lang.String name, float value)
  ///
  /// Convenience function for updating a single settings value as a
  /// floating point number. This will either create a new entry in the
  /// table if the given name does not exist, or modify the value of the
  /// existing row with that name.  Note that internally setting values
  /// are always stored as strings, so this function converts the given
  /// value to a string before storing it.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to modify.
  ///@param value The new value for the setting.
  ///@return true if the value was set, false on database errors
  static bool putFloat(contentresolver_.ContentResolver cr, jni.JniString name,
          double value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putFloat,
          jni.JniType.booleanType,
          [cr.reference, name.reference, value]).boolean;

  static final _id_isLocationProviderEnabled = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "isLocationProviderEnabled",
      "(Landroid/content/ContentResolver;Ljava/lang/String;)Z");

  /// from: static public boolean isLocationProviderEnabled(android.content.ContentResolver cr, java.lang.String provider)
  ///
  /// Helper method for determining if a location provider is enabled.
  ///@param cr the content resolver to use
  ///@param provider the location provider to query
  ///@return true if the provider is enabled
  ///@deprecated use LocationManager\#isProviderEnabled(String)
  static bool isLocationProviderEnabled(
          contentresolver_.ContentResolver cr, jni.JniString provider) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_isLocationProviderEnabled,
          jni.JniType.booleanType,
          [cr.reference, provider.reference]).boolean;

  static final _id_setLocationProviderEnabled =
      jniAccessors.getStaticMethodIDOf(_classRef, "setLocationProviderEnabled",
          "(Landroid/content/ContentResolver;Ljava/lang/String;Z)V");

  /// from: static public void setLocationProviderEnabled(android.content.ContentResolver cr, java.lang.String provider, boolean enabled)
  ///
  /// Thread-safe method for enabling or disabling a single location provider.
  ///@param cr the content resolver to use
  ///@param provider the location provider to enable or disable
  ///@param enabled true if the provider should be enabled
  ///@deprecated This API is deprecated. It requires WRITE_SECURE_SETTINGS permission to
  ///             change location settings.
  static void setLocationProviderEnabled(contentresolver_.ContentResolver cr,
          jni.JniString provider, bool enabled) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_setLocationProviderEnabled,
          jni.JniType.voidType,
          [cr.reference, provider.reference, enabled]).check();
}

/// from: android.provider.Settings$NameValueTable
///
/// Common base for tables of name/value settings.
class Settings_NameValueTable extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Settings\$NameValueTable");
  Settings_NameValueTable.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String NAME
  static const NAME = "name";

  /// from: static public final java.lang.String VALUE
  static const VALUE = "value";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Settings_NameValueTable()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_putString = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "putString",
      "(Landroid/content/ContentResolver;Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;)Z");

  /// from: static protected boolean putString(android.content.ContentResolver resolver, android.net.Uri uri, java.lang.String name, java.lang.String value)
  static bool putString(contentresolver_.ContentResolver resolver, uri_.Uri uri,
          jni.JniString name, jni.JniString value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_putString, jni.JniType.booleanType, [
        resolver.reference,
        uri.reference,
        name.reference,
        value.reference
      ]).boolean;

  static final _id_getUriFor = jniAccessors.getStaticMethodIDOf(_classRef,
      "getUriFor", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri getUriFor(android.net.Uri uri, java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static uri_.Uri getUriFor(uri_.Uri uri, jni.JniString name) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getUriFor,
          jni.JniType.objectType,
          [uri.reference, name.reference]).object);
}

/// from: android.provider.Settings$Global
///
/// Global system settings, containing preferences that always apply identically
/// to all defined users.  Applications can read these but are not allowed to write;
/// like the "Secure" settings, these are for preferences that the user must
/// explicitly modify through the system UI or specialized APIs for those values.
class Settings_Global extends Settings_NameValueTable {
  static final _classRef =
      jniAccessors.getClassOf("android/provider/Settings\$Global");
  Settings_Global.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ADB_ENABLED
  ///
  /// Whether ADB is enabled.
  static const ADB_ENABLED = "adb_enabled";

  /// from: static public final java.lang.String AIRPLANE_MODE_ON
  ///
  /// Whether Airplane Mode is on.
  static const AIRPLANE_MODE_ON = "airplane_mode_on";

  /// from: static public final java.lang.String AIRPLANE_MODE_RADIOS
  ///
  /// A comma separated list of radios that need to be disabled when airplane mode
  /// is on. This overrides WIFI_ON and BLUETOOTH_ON, if Wi-Fi and bluetooth are
  /// included in the comma separated list.
  static const AIRPLANE_MODE_RADIOS = "airplane_mode_radios";

  /// from: static public final java.lang.String ALWAYS_FINISH_ACTIVITIES
  ///
  /// If not 0, the activity manager will aggressively finish activities and
  /// processes as soon as they are no longer needed.  If 0, the normal
  /// extended lifetime is used.
  static const ALWAYS_FINISH_ACTIVITIES = "always_finish_activities";

  /// from: static public final java.lang.String ANIMATOR_DURATION_SCALE
  ///
  /// Scaling factor for Animator-based animations. This affects both the
  /// start delay and duration of all such animations. Setting to 0 will
  /// cause animations to end immediately. The default value is 1.
  static const ANIMATOR_DURATION_SCALE = "animator_duration_scale";

  /// from: static public final java.lang.String AUTO_TIME
  ///
  /// Value to specify if the user prefers the date, time and time zone
  /// to be automatically fetched from the network (NITZ). 1=yes, 0=no
  static const AUTO_TIME = "auto_time";

  /// from: static public final java.lang.String AUTO_TIME_ZONE
  ///
  /// Value to specify if the user prefers the time zone
  /// to be automatically fetched from the network (NITZ). 1=yes, 0=no
  static const AUTO_TIME_ZONE = "auto_time_zone";

  /// from: static public final java.lang.String BLUETOOTH_ON
  ///
  /// Whether bluetooth is enabled/disabled
  /// 0=disabled. 1=enabled.
  static const BLUETOOTH_ON = "bluetooth_on";

  /// from: static public final java.lang.String BOOT_COUNT
  ///
  /// Boot count since the device starts running API level 24.
  ///
  /// Type: int
  static const BOOT_COUNT = "boot_count";

  /// from: static public final java.lang.String CONTACT_METADATA_SYNC_ENABLED
  ///
  /// Whether to enable contacts metadata syncing or not
  /// The value 1 - enable, 0 - disable
  static const CONTACT_METADATA_SYNC_ENABLED = "contact_metadata_sync_enabled";

  static final _id_CONTENT_URI = jniAccessors.getStaticFieldIDOf(
      _classRef, "CONTENT_URI", "Landroid/net/Uri;");

  /// from: static public final android.net.Uri CONTENT_URI
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The content:// style URL for global secure settings items.  Not public.
  static uri_.Uri get CONTENT_URI => uri_.Uri.fromRef(jniAccessors
      .getStaticField(_classRef, _id_CONTENT_URI, jni.JniType.objectType)
      .object);

  /// from: static public final java.lang.String DATA_ROAMING
  ///
  /// Whether or not data roaming is enabled. (0 = false, 1 = true)
  static const DATA_ROAMING = "data_roaming";

  /// from: static public final java.lang.String DEBUG_APP
  ///
  /// Name of an application package to be debugged.
  static const DEBUG_APP = "debug_app";

  /// from: static public final java.lang.String DEVELOPMENT_SETTINGS_ENABLED
  ///
  /// Whether user has enabled development settings.
  static const DEVELOPMENT_SETTINGS_ENABLED = "development_settings_enabled";

  /// from: static public final java.lang.String DEVICE_NAME
  ///
  /// The name of the device
  static const DEVICE_NAME = "device_name";

  /// from: static public final java.lang.String DEVICE_PROVISIONED
  ///
  /// Whether the device has been provisioned (0 = false, 1 = true).
  /// On a multiuser device with a separate system user, the screen may be locked
  /// as soon as this is set to true and further activities cannot be launched on the
  /// system user unless they are marked to show over keyguard.
  static const DEVICE_PROVISIONED = "device_provisioned";

  /// from: static public final java.lang.String HTTP_PROXY
  ///
  /// Host name and port for global http proxy. Uses ':' seperator for
  /// between host and port.
  static const HTTP_PROXY = "http_proxy";

  /// from: static public final java.lang.String INSTALL_NON_MARKET_APPS
  ///
  /// @deprecated Use android.provider.Settings.Secure\#INSTALL_NON_MARKET_APPS instead
  static const INSTALL_NON_MARKET_APPS = "install_non_market_apps";

  /// from: static public final java.lang.String MODE_RINGER
  ///
  /// Ringer mode. This is used internally, changing this value will not
  /// change the ringer mode. See AudioManager.
  static const MODE_RINGER = "mode_ringer";

  /// from: static public final java.lang.String NETWORK_PREFERENCE
  ///
  /// User preference for which network(s) should be used. Only the
  /// connectivity service should touch this.
  static const NETWORK_PREFERENCE = "network_preference";

  /// from: static public final java.lang.String RADIO_BLUETOOTH
  ///
  /// Constant for use in AIRPLANE_MODE_RADIOS to specify Bluetooth radio.
  static const RADIO_BLUETOOTH = "bluetooth";

  /// from: static public final java.lang.String RADIO_CELL
  ///
  /// Constant for use in AIRPLANE_MODE_RADIOS to specify Cellular radio.
  static const RADIO_CELL = "cell";

  /// from: static public final java.lang.String RADIO_NFC
  ///
  /// Constant for use in AIRPLANE_MODE_RADIOS to specify NFC radio.
  static const RADIO_NFC = "nfc";

  /// from: static public final java.lang.String RADIO_WIFI
  ///
  /// Constant for use in AIRPLANE_MODE_RADIOS to specify Wi-Fi radio.
  static const RADIO_WIFI = "wifi";

  /// from: static public final java.lang.String SHOW_PROCESSES
  ///
  /// Control whether the process CPU usage meter should be shown.
  ///@deprecated This functionality is no longer available as of
  /// android.os.Build.VERSION_CODES\#N_MR1.
  static const SHOW_PROCESSES = "show_processes";

  /// from: static public final java.lang.String STAY_ON_WHILE_PLUGGED_IN
  ///
  /// Whether we keep the device on while the device is plugged in.
  /// Supported values are:
  /// <ul>
  /// <li>{@code 0} to never stay on while plugged in</li>
  /// <li>BatteryManager\#BATTERY_PLUGGED_AC to stay on for AC charger</li>
  /// <li>BatteryManager\#BATTERY_PLUGGED_USB to stay on for USB charger</li>
  /// <li>BatteryManager\#BATTERY_PLUGGED_WIRELESS to stay on for wireless charger</li>
  /// </ul>
  /// These values can be OR-ed together.
  static const STAY_ON_WHILE_PLUGGED_IN = "stay_on_while_plugged_in";

  /// from: static public final java.lang.String TRANSITION_ANIMATION_SCALE
  ///
  /// Scaling factor for activity transition animations. Setting to 0 will
  /// disable window animations.
  static const TRANSITION_ANIMATION_SCALE = "transition_animation_scale";

  /// from: static public final java.lang.String USB_MASS_STORAGE_ENABLED
  ///
  /// USB Mass Storage Enabled
  static const USB_MASS_STORAGE_ENABLED = "usb_mass_storage_enabled";

  /// from: static public final java.lang.String USE_GOOGLE_MAIL
  ///
  /// If this setting is set (to anything), then all references
  /// to Gmail on the device must change to Google Mail.
  static const USE_GOOGLE_MAIL = "use_google_mail";

  /// from: static public final java.lang.String WAIT_FOR_DEBUGGER
  ///
  /// If 1, when launching DEBUG_APP it will wait for the debugger before
  /// starting user code.  If 0, it will run normally.
  static const WAIT_FOR_DEBUGGER = "wait_for_debugger";

  /// from: static public final java.lang.String WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN
  ///
  /// This setting controls whether WiFi configurations created by a Device Owner app
  /// should be locked down (that is, be editable or removable only by the Device Owner App,
  /// not even by Settings app).
  /// This setting takes integer values. Non-zero values mean DO created configurations
  /// are locked down. Value of zero means they are not. Default value in the absence of
  /// actual value to this setting is 0.
  static const WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN =
      "wifi_device_owner_configs_lockdown";

  /// from: static public final java.lang.String WIFI_MAX_DHCP_RETRY_COUNT
  ///
  /// The maximum number of times we will retry a connection to an access
  /// point for which we have failed in acquiring an IP address from DHCP.
  /// A value of N means that we will make N+1 connection attempts in all.
  static const WIFI_MAX_DHCP_RETRY_COUNT = "wifi_max_dhcp_retry_count";

  /// from: static public final java.lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS
  ///
  /// Maximum amount of time in milliseconds to hold a wakelock while waiting for mobile
  /// data connectivity to be established after a disconnect from Wi-Fi.
  static const WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS =
      "wifi_mobile_data_transition_wakelock_timeout_ms";

  /// from: static public final java.lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON
  ///
  /// Whether to notify the user of open networks.
  ///
  /// If not connected and the scan results have an open network, we will
  /// put this notification up. If we attempt to connect to a network or
  /// the open network(s) disappear, we remove the notification. When we
  /// show the notification, we will not show it again for
  /// android.provider.Settings.Secure\#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY time.
  ///@deprecated This feature is no longer controlled by this setting in
  /// android.os.Build.VERSION_CODES\#O.
  static const WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON =
      "wifi_networks_available_notification_on";

  /// from: static public final java.lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY
  ///
  /// Delay (in seconds) before repeating the Wi-Fi networks available notification.
  /// Connecting to a network will reset the timer.
  static const WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY =
      "wifi_networks_available_repeat_delay";

  /// from: static public final java.lang.String WIFI_NUM_OPEN_NETWORKS_KEPT
  ///
  /// When the number of open networks exceeds this number, the
  /// least-recently-used excess networks will be removed.
  static const WIFI_NUM_OPEN_NETWORKS_KEPT = "wifi_num_open_networks_kept";

  /// from: static public final java.lang.String WIFI_ON
  ///
  /// Whether the Wi-Fi should be on.  Only the Wi-Fi service should touch this.
  static const WIFI_ON = "wifi_on";

  /// from: static public final java.lang.String WIFI_SLEEP_POLICY
  ///
  /// The policy for deciding when Wi-Fi should go to sleep (which will in
  /// turn switch to using the mobile data as an Internet connection).
  ///
  /// Set to one of \#WIFI_SLEEP_POLICY_DEFAULT,
  /// \#WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED, or
  /// \#WIFI_SLEEP_POLICY_NEVER.
  static const WIFI_SLEEP_POLICY = "wifi_sleep_policy";

  /// from: static public final int WIFI_SLEEP_POLICY_DEFAULT
  ///
  /// Value for \#WIFI_SLEEP_POLICY to use the default Wi-Fi sleep
  /// policy, which is to sleep shortly after the turning off
  /// according to the \#STAY_ON_WHILE_PLUGGED_IN setting.
  static const WIFI_SLEEP_POLICY_DEFAULT = 0;

  /// from: static public final int WIFI_SLEEP_POLICY_NEVER
  ///
  /// Value for \#WIFI_SLEEP_POLICY to never go to sleep.
  static const WIFI_SLEEP_POLICY_NEVER = 2;

  /// from: static public final int WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED
  ///
  /// Value for \#WIFI_SLEEP_POLICY to use the default policy when
  /// the device is on battery, and never go to sleep when the device is
  /// plugged in.
  static const WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED = 1;

  /// from: static public final java.lang.String WIFI_WATCHDOG_ON
  ///
  /// Whether the Wi-Fi watchdog is enabled.
  static const WIFI_WATCHDOG_ON = "wifi_watchdog_on";

  /// from: static public final java.lang.String WINDOW_ANIMATION_SCALE
  ///
  /// Scaling factor for normal window animations. Setting to 0 will
  /// disable window animations.
  static const WINDOW_ANIMATION_SCALE = "window_animation_scale";

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Settings_Global()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getString = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "getString",
      "(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getString(android.content.ContentResolver resolver, java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Look up a name in the database.
  ///@param resolver to access the database with
  ///@param name to look up in the table
  ///@return the corresponding value, or null if not present
  static jni.JniString getString(
          contentresolver_.ContentResolver resolver, jni.JniString name) =>
      jni.JniString.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_getString,
          jni.JniType.objectType,
          [resolver.reference, name.reference]).object);

  static final _id_putString1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "putString",
      "(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z");

  /// from: static public boolean putString(android.content.ContentResolver resolver, java.lang.String name, java.lang.String value)
  ///
  /// Store a name/value pair into the database.
  ///@param resolver to access the database with
  ///@param name to store
  ///@param value to associate with the name
  ///@return true if the value was set, false on database errors
  static bool putString1(contentresolver_.ContentResolver resolver,
          jni.JniString name, jni.JniString value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putString1,
          jni.JniType.booleanType,
          [resolver.reference, name.reference, value.reference]).boolean;

  static final _id_getUriFor1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "getUriFor", "(Ljava/lang/String;)Landroid/net/Uri;");

  /// from: static public android.net.Uri getUriFor(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct the content URI for a particular name/value pair,
  /// useful for monitoring changes with a ContentObserver.
  ///@param name to look up in the table
  ///@return the corresponding content URI, or null if not present
  static uri_.Uri getUriFor1(jni.JniString name) =>
      uri_.Uri.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_getUriFor1, jni.JniType.objectType, [name.reference]).object);

  static final _id_getInt = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInt", "(Landroid/content/ContentResolver;Ljava/lang/String;I)I");

  /// from: static public int getInt(android.content.ContentResolver cr, java.lang.String name, int def)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as an integer.  Note that internally setting values are always
  /// stored as strings; this function converts the string to an integer
  /// for you.  The default value will be returned if the setting is
  /// not defined or not an integer.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@param def Value to return if the setting is not defined.
  ///@return The setting's current value, or 'def' if it is not defined
  /// or not a valid integer.
  static int getInt(
          contentresolver_.ContentResolver cr, jni.JniString name, int def) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getInt,
          jni.JniType.intType, [cr.reference, name.reference, def]).integer;

  static final _id_getInt1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getInt", "(Landroid/content/ContentResolver;Ljava/lang/String;)I");

  /// from: static public int getInt(android.content.ContentResolver cr, java.lang.String name)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as an integer.  Note that internally setting values are always
  /// stored as strings; this function converts the string to an integer
  /// for you.
  ///
  /// This version does not take a default value.  If the setting has not
  /// been set, or the string value is not a number,
  /// it throws SettingNotFoundException.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@throws SettingNotFoundException Thrown if a setting by the given
  /// name can't be found or the setting value is not an integer.
  ///@return The setting's current value.
  static int getInt1(contentresolver_.ContentResolver cr, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getInt1,
          jni.JniType.intType, [cr.reference, name.reference]).integer;

  static final _id_putInt = jniAccessors.getStaticMethodIDOf(_classRef,
      "putInt", "(Landroid/content/ContentResolver;Ljava/lang/String;I)Z");

  /// from: static public boolean putInt(android.content.ContentResolver cr, java.lang.String name, int value)
  ///
  /// Convenience function for updating a single settings value as an
  /// integer. This will either create a new entry in the table if the
  /// given name does not exist, or modify the value of the existing row
  /// with that name.  Note that internally setting values are always
  /// stored as strings, so this function converts the given value to a
  /// string before storing it.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to modify.
  ///@param value The new value for the setting.
  ///@return true if the value was set, false on database errors
  static bool putInt(
          contentresolver_.ContentResolver cr, jni.JniString name, int value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putInt,
          jni.JniType.booleanType,
          [cr.reference, name.reference, value]).boolean;

  static final _id_getLong = jniAccessors.getStaticMethodIDOf(_classRef,
      "getLong", "(Landroid/content/ContentResolver;Ljava/lang/String;J)J");

  /// from: static public long getLong(android.content.ContentResolver cr, java.lang.String name, long def)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as a {@code long}.  Note that internally setting values are always
  /// stored as strings; this function converts the string to a {@code long}
  /// for you.  The default value will be returned if the setting is
  /// not defined or not a {@code long}.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@param def Value to return if the setting is not defined.
  ///@return The setting's current value, or 'def' if it is not defined
  /// or not a valid {@code long}.
  static int getLong(
          contentresolver_.ContentResolver cr, jni.JniString name, int def) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getLong,
          jni.JniType.longType, [cr.reference, name.reference, def]).long;

  static final _id_getLong1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getLong", "(Landroid/content/ContentResolver;Ljava/lang/String;)J");

  /// from: static public long getLong(android.content.ContentResolver cr, java.lang.String name)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as a {@code long}.  Note that internally setting values are always
  /// stored as strings; this function converts the string to a {@code long}
  /// for you.
  ///
  /// This version does not take a default value.  If the setting has not
  /// been set, or the string value is not a number,
  /// it throws SettingNotFoundException.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@return The setting's current value.
  ///@throws SettingNotFoundException Thrown if a setting by the given
  /// name can't be found or the setting value is not an integer.
  static int getLong1(
          contentresolver_.ContentResolver cr, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getLong1,
          jni.JniType.longType, [cr.reference, name.reference]).long;

  static final _id_putLong = jniAccessors.getStaticMethodIDOf(_classRef,
      "putLong", "(Landroid/content/ContentResolver;Ljava/lang/String;J)Z");

  /// from: static public boolean putLong(android.content.ContentResolver cr, java.lang.String name, long value)
  ///
  /// Convenience function for updating a secure settings value as a long
  /// integer. This will either create a new entry in the table if the
  /// given name does not exist, or modify the value of the existing row
  /// with that name.  Note that internally setting values are always
  /// stored as strings, so this function converts the given value to a
  /// string before storing it.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to modify.
  ///@param value The new value for the setting.
  ///@return true if the value was set, false on database errors
  static bool putLong(
          contentresolver_.ContentResolver cr, jni.JniString name, int value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putLong,
          jni.JniType.booleanType,
          [cr.reference, name.reference, value]).boolean;

  static final _id_getFloat = jniAccessors.getStaticMethodIDOf(_classRef,
      "getFloat", "(Landroid/content/ContentResolver;Ljava/lang/String;F)F");

  /// from: static public float getFloat(android.content.ContentResolver cr, java.lang.String name, float def)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as a floating point number.  Note that internally setting values are
  /// always stored as strings; this function converts the string to an
  /// float for you. The default value will be returned if the setting
  /// is not defined or not a valid float.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@param def Value to return if the setting is not defined.
  ///@return The setting's current value, or 'def' if it is not defined
  /// or not a valid float.
  static double getFloat(contentresolver_.ContentResolver cr,
          jni.JniString name, double def) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getFloat,
          jni.JniType.floatType, [cr.reference, name.reference, def]).float;

  static final _id_getFloat1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "getFloat", "(Landroid/content/ContentResolver;Ljava/lang/String;)F");

  /// from: static public float getFloat(android.content.ContentResolver cr, java.lang.String name)
  ///
  /// Convenience function for retrieving a single secure settings value
  /// as a float.  Note that internally setting values are always
  /// stored as strings; this function converts the string to a float
  /// for you.
  ///
  /// This version does not take a default value.  If the setting has not
  /// been set, or the string value is not a number,
  /// it throws SettingNotFoundException.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to retrieve.
  ///@throws SettingNotFoundException Thrown if a setting by the given
  /// name can't be found or the setting value is not a float.
  ///@return The setting's current value.
  static double getFloat1(
          contentresolver_.ContentResolver cr, jni.JniString name) =>
      jniAccessors.callStaticMethodWithArgs(_classRef, _id_getFloat1,
          jni.JniType.floatType, [cr.reference, name.reference]).float;

  static final _id_putFloat = jniAccessors.getStaticMethodIDOf(_classRef,
      "putFloat", "(Landroid/content/ContentResolver;Ljava/lang/String;F)Z");

  /// from: static public boolean putFloat(android.content.ContentResolver cr, java.lang.String name, float value)
  ///
  /// Convenience function for updating a single settings value as a
  /// floating point number. This will either create a new entry in the
  /// table if the given name does not exist, or modify the value of the
  /// existing row with that name.  Note that internally setting values
  /// are always stored as strings, so this function converts the given
  /// value to a string before storing it.
  ///@param cr The ContentResolver to access.
  ///@param name The name of the setting to modify.
  ///@param value The new value for the setting.
  ///@return true if the value was set, false on database errors
  static bool putFloat(contentresolver_.ContentResolver cr, jni.JniString name,
          double value) =>
      jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_putFloat,
          jni.JniType.booleanType,
          [cr.reference, name.reference, value]).boolean;
}
