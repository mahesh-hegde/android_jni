// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.CellSignalStrength
///
/// Abstract base class for cell phone signal strength related information.
class CellSignalStrength extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/CellSignalStrength");
  CellSignalStrength.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int SIGNAL_STRENGTH_GOOD
  static const SIGNAL_STRENGTH_GOOD = 3;

  /// from: static public final int SIGNAL_STRENGTH_GREAT
  static const SIGNAL_STRENGTH_GREAT = 4;

  /// from: static public final int SIGNAL_STRENGTH_MODERATE
  static const SIGNAL_STRENGTH_MODERATE = 2;

  /// from: static public final int SIGNAL_STRENGTH_NONE_OR_UNKNOWN
  static const SIGNAL_STRENGTH_NONE_OR_UNKNOWN = 0;

  /// from: static public final int SIGNAL_STRENGTH_POOR
  static const SIGNAL_STRENGTH_POOR = 1;

  static final _id_getLevel =
      jniAccessors.getMethodIDOf(_classRef, "getLevel", "()I");

  /// from: public abstract int getLevel()
  ///
  /// Get signal level as an int from 0..4
  ///
  ///@see SIGNAL_STRENGTH_NONE_OR_UNKNOWN
  ///@see SIGNAL_STRENGTH_POOR
  ///@see SIGNAL_STRENGTH_MODERATE
  ///@see SIGNAL_STRENGTH_GOOD
  ///@see SIGNAL_STRENGTH_GREAT
  int getLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getLevel, jni.JniType.intType, []).integer;

  static final _id_getAsuLevel =
      jniAccessors.getMethodIDOf(_classRef, "getAsuLevel", "()I");

  /// from: public abstract int getAsuLevel()
  ///
  /// Get the signal level as an asu value between 0..31, 99 is unknown
  int getAsuLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getAsuLevel, jni.JniType.intType, []).integer;

  static final _id_getDbm =
      jniAccessors.getMethodIDOf(_classRef, "getDbm", "()I");

  /// from: public abstract int getDbm()
  ///
  /// Get the signal strength as dBm
  int getDbm() => jniAccessors.callMethodWithArgs(
      reference, _id_getDbm, jni.JniType.intType, []).integer;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public abstract int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public abstract boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;
}
