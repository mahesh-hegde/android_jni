// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.VisualVoicemailSmsFilterSettings
///
/// Class to represent various settings for the visual voicemail SMS filter. When the filter is
/// enabled, incoming SMS matching the generalized OMTP format:
///
/// [clientPrefix]:[prefix]:([key]=[value];)*
///
/// will be regarded as a visual voicemail SMS, and removed before reaching the SMS provider. The
/// VisualVoicemailService in the current default dialer will be bound and
/// VisualVoicemailService\#onSmsReceived(VisualVoicemailTask, VisualVoicemailSms)
/// will called with the information extracted from the SMS.
///
/// Use android.telephony.VisualVoicemailSmsFilterSettings.Builder to construct this
/// class.
///@see TelephonyManager\#setVisualVoicemailSmsFilterSettings(VisualVoicemailSmsFilterSettings)
class VisualVoicemailSmsFilterSettings extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/telephony/VisualVoicemailSmsFilterSettings");
  VisualVoicemailSmsFilterSettings.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telephony.VisualVoicemailSmsFilterSettings> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int DESTINATION_PORT_ANY
  ///
  /// The visual voicemail SMS message does not have to be a data SMS, and can be directed to any
  /// port.
  static const DESTINATION_PORT_ANY = -1;

  /// from: static public final int DESTINATION_PORT_DATA_SMS
  ///
  /// The visual voicemail SMS message can be directed to any port, but must be a data SMS.
  static const DESTINATION_PORT_DATA_SMS = -2;

  static final _id_clientPrefix = jniAccessors.getFieldIDOf(
      _classRef, "clientPrefix", "Ljava/lang/String;");

  /// from: public final java.lang.String clientPrefix
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The client prefix for the visual voicemail SMS filter. The client prefix will appear at the
  /// start of a visual voicemail SMS message, followed by a colon(:).
  jni.JniString get clientPrefix => jni.JniString.fromRef(jniAccessors
      .getField(reference, _id_clientPrefix, jni.JniType.objectType)
      .object);

  static final _id_destinationPort =
      jniAccessors.getFieldIDOf(_classRef, "destinationPort", "I");

  /// from: public final int destinationPort
  ///
  /// The destination port for the visual voicemail SMS filter, or \#DESTINATION_PORT_ANY,
  /// or \#DESTINATION_PORT_DATA_SMS
  int get destinationPort => jniAccessors
      .getField(reference, _id_destinationPort, jni.JniType.intType)
      .integer;

  static final _id_originatingNumbers = jniAccessors.getFieldIDOf(
      _classRef, "originatingNumbers", "Ljava/util/List;");

  /// from: public final java.util.List<java.lang.String> originatingNumbers
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The originating number whitelist for the visual voicemail SMS filter of a phone account. If
  /// the list is not null only the SMS messages from a number in the list can be considered as a
  /// visual voicemail SMS. Otherwise, messages from any address will be considered.
  jni.JniObject get originatingNumbers => jni.JniObject.fromRef(jniAccessors
      .getField(reference, _id_originatingNumbers, jni.JniType.objectType)
      .object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.telephony.VisualVoicemailSmsFilterSettings$Builder
///
/// Builder class for VisualVoicemailSmsFilterSettings objects.
class VisualVoicemailSmsFilterSettings_Builder extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf(
      "android/telephony/VisualVoicemailSmsFilterSettings\$Builder");
  VisualVoicemailSmsFilterSettings_Builder.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  VisualVoicemailSmsFilterSettings_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_build = jniAccessors.getMethodIDOf(_classRef, "build",
      "()Landroid/telephony/VisualVoicemailSmsFilterSettings;");

  /// from: public android.telephony.VisualVoicemailSmsFilterSettings build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  VisualVoicemailSmsFilterSettings build() =>
      VisualVoicemailSmsFilterSettings.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);

  static final _id_setClientPrefix = jniAccessors.getMethodIDOf(
      _classRef,
      "setClientPrefix",
      "(Ljava/lang/String;)Landroid/telephony/VisualVoicemailSmsFilterSettings\$Builder;");

  /// from: public android.telephony.VisualVoicemailSmsFilterSettings.Builder setClientPrefix(java.lang.String clientPrefix)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the client prefix for the visual voicemail SMS filter. The client prefix will appear
  /// at the start of a visual voicemail SMS message, followed by a colon(:).
  VisualVoicemailSmsFilterSettings_Builder setClientPrefix(
          jni.JniString clientPrefix) =>
      VisualVoicemailSmsFilterSettings_Builder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setClientPrefix,
              jni.JniType.objectType, [clientPrefix.reference]).object);

  static final _id_setOriginatingNumbers = jniAccessors.getMethodIDOf(
      _classRef,
      "setOriginatingNumbers",
      "(Ljava/util/List;)Landroid/telephony/VisualVoicemailSmsFilterSettings\$Builder;");

  /// from: public android.telephony.VisualVoicemailSmsFilterSettings.Builder setOriginatingNumbers(java.util.List<java.lang.String> originatingNumbers)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the originating number whitelist for the visual voicemail SMS filter. If the list is
  /// not null only the SMS messages from a number in the list can be considered as a visual
  /// voicemail SMS. Otherwise, messages from any address will be considered.
  VisualVoicemailSmsFilterSettings_Builder setOriginatingNumbers(
          jni.JniObject originatingNumbers) =>
      VisualVoicemailSmsFilterSettings_Builder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setOriginatingNumbers,
              jni.JniType.objectType, [originatingNumbers.reference]).object);

  static final _id_setDestinationPort = jniAccessors.getMethodIDOf(
      _classRef,
      "setDestinationPort",
      "(I)Landroid/telephony/VisualVoicemailSmsFilterSettings\$Builder;");

  /// from: public android.telephony.VisualVoicemailSmsFilterSettings.Builder setDestinationPort(int destinationPort)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the destination port for the visual voicemail SMS filter.
  ///@param destinationPort The destination port, or \#DESTINATION_PORT_ANY, or \#DESTINATION_PORT_DATA_SMS
  VisualVoicemailSmsFilterSettings_Builder setDestinationPort(
          int destinationPort) =>
      VisualVoicemailSmsFilterSettings_Builder.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setDestinationPort,
              jni.JniType.objectType, [destinationPort]).object);
}
