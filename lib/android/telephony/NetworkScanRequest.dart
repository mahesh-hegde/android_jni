// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.NetworkScanRequest
///
/// Defines a request to peform a network scan.
///
/// This class defines whether the network scan will be performed only once or periodically until
/// cancelled, when the scan is performed periodically, the time interval is not controlled by the
/// user but defined by the modem vendor.
class NetworkScanRequest extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/NetworkScanRequest");
  NetworkScanRequest.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telephony.NetworkScanRequest> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int SCAN_TYPE_ONE_SHOT
  ///
  /// Performs the scan only once
  static const SCAN_TYPE_ONE_SHOT = 0;

  /// from: static public final int SCAN_TYPE_PERIODIC
  ///
  /// Performs the scan periodically until cancelled
  ///
  /// The modem will start new scans periodically, and the interval between two scans is usually
  /// multiple minutes.
  static const SCAN_TYPE_PERIODIC = 1;

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(I[Landroid/telephony/RadioAccessSpecifier;IIZILjava/util/ArrayList;)V");

  /// from: public void <init>(int scanType, android.telephony.RadioAccessSpecifier[] specifiers, int searchPeriodicity, int maxSearchTime, boolean incrementalResults, int incrementalResultsPeriodicity, java.util.ArrayList<java.lang.String> mccMncs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new NetworkScanRequest with mScanType and network mSpecifiers
  ///@param scanType The type of the scan, can be either one shot or periodic
  ///@param specifiers the radio network with bands / channels to be scanned
  ///@param searchPeriodicity The modem will restart the scan every searchPeriodicity seconds if
  ///                          no network has been found, until it reaches the maxSearchTime. Only
  ///                          valid when scan type is periodic scan.
  ///@param maxSearchTime Maximum duration of the search (in seconds)
  ///@param incrementalResults Indicates whether the modem should report incremental
  ///                           results of the network scan to the client
  ///@param incrementalResultsPeriodicity Indicates the periodicity with which the modem should
  ///                                      report incremental results to the client (in seconds),
  ///                                      only valid when incrementalResults is true
  ///@param mccMncs Describes the list of PLMN ids (MCC-MNC), once any network in the list has
  ///                been found, the scan will be terminated by the modem.
  NetworkScanRequest(
      int scanType,
      jni.JniObject specifiers,
      int searchPeriodicity,
      int maxSearchTime,
      bool incrementalResults,
      int incrementalResultsPeriodicity,
      jni.JniObject mccMncs)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          scanType,
          specifiers.reference,
          searchPeriodicity,
          maxSearchTime,
          incrementalResults,
          incrementalResultsPeriodicity,
          mccMncs.reference
        ]).object);

  static final _id_getScanType =
      jniAccessors.getMethodIDOf(_classRef, "getScanType", "()I");

  /// from: public int getScanType()
  ///
  /// Returns the type of the scan.
  ///@return Value is android.telephony.NetworkScanRequest\#SCAN_TYPE_ONE_SHOT, or android.telephony.NetworkScanRequest\#SCAN_TYPE_PERIODIC
  int getScanType() => jniAccessors.callMethodWithArgs(
      reference, _id_getScanType, jni.JniType.intType, []).integer;

  static final _id_getSearchPeriodicity =
      jniAccessors.getMethodIDOf(_classRef, "getSearchPeriodicity", "()I");

  /// from: public int getSearchPeriodicity()
  ///
  /// Returns the search periodicity in seconds.
  int getSearchPeriodicity() => jniAccessors.callMethodWithArgs(
      reference, _id_getSearchPeriodicity, jni.JniType.intType, []).integer;

  static final _id_getMaxSearchTime =
      jniAccessors.getMethodIDOf(_classRef, "getMaxSearchTime", "()I");

  /// from: public int getMaxSearchTime()
  ///
  /// Returns maximum duration of the periodic search in seconds.
  int getMaxSearchTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getMaxSearchTime, jni.JniType.intType, []).integer;

  static final _id_getIncrementalResults =
      jniAccessors.getMethodIDOf(_classRef, "getIncrementalResults", "()Z");

  /// from: public boolean getIncrementalResults()
  ///
  /// Returns whether incremental result is enabled.
  /// FALSE \u2013 Incremental results is not enabled.
  /// TRUE \u2013 Incremental results is reported.
  bool getIncrementalResults() => jniAccessors.callMethodWithArgs(reference,
      _id_getIncrementalResults, jni.JniType.booleanType, []).boolean;

  static final _id_getIncrementalResultsPeriodicity = jniAccessors
      .getMethodIDOf(_classRef, "getIncrementalResultsPeriodicity", "()I");

  /// from: public int getIncrementalResultsPeriodicity()
  ///
  /// Returns the periodicity in seconds of incremental results.
  int getIncrementalResultsPeriodicity() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getIncrementalResultsPeriodicity,
      jni.JniType.intType, []).integer;

  static final _id_getSpecifiers = jniAccessors.getMethodIDOf(_classRef,
      "getSpecifiers", "()[Landroid/telephony/RadioAccessSpecifier;");

  /// from: public android.telephony.RadioAccessSpecifier[] getSpecifiers()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the radio access technologies with bands or channels that need to be scanned.
  jni.JniObject getSpecifiers() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSpecifiers, jni.JniType.objectType, []).object);

  static final _id_getPlmns = jniAccessors.getMethodIDOf(
      _classRef, "getPlmns", "()Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList<java.lang.String> getPlmns()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the List of PLMN ids (MCC-MNC) for early termination of scan.
  /// If any PLMN of this list is found, search should end at that point and
  /// results with all PLMN found till that point should be sent as response.
  jni.JniObject getPlmns() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPlmns, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;
}
