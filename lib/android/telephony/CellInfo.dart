// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.CellInfo
///
/// Immutable cell information from a point in time.
class CellInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/CellInfo");
  CellInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CONNECTION_NONE
  ///
  /// Cell is not a serving cell.
  ///
  /// The cell has been measured but is neither a camped nor serving cell (3GPP 36.304).
  static const CONNECTION_NONE = 0;

  /// from: static public final int CONNECTION_PRIMARY_SERVING
  ///
  /// UE is connected to cell for signalling and possibly data (3GPP 36.331, 25.331).
  static const CONNECTION_PRIMARY_SERVING = 1;

  /// from: static public final int CONNECTION_SECONDARY_SERVING
  ///
  /// UE is connected to cell for data (3GPP 36.331, 25.331).
  static const CONNECTION_SECONDARY_SERVING = 2;

  /// from: static public final int CONNECTION_UNKNOWN
  ///
  /// Connection status is unknown.
  static const CONNECTION_UNKNOWN = 2147483647;

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telephony.CellInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Implement the Parcelable interface
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_isRegistered =
      jniAccessors.getMethodIDOf(_classRef, "isRegistered", "()Z");

  /// from: public boolean isRegistered()
  ///
  /// True if this cell is registered to the mobile network
  bool isRegistered() => jniAccessors.callMethodWithArgs(
      reference, _id_isRegistered, jni.JniType.booleanType, []).boolean;

  static final _id_getTimeStamp =
      jniAccessors.getMethodIDOf(_classRef, "getTimeStamp", "()J");

  /// from: public long getTimeStamp()
  ///
  /// Approximate time of this cell information in nanos since boot
  int getTimeStamp() => jniAccessors.callMethodWithArgs(
      reference, _id_getTimeStamp, jni.JniType.longType, []).long;

  static final _id_getCellConnectionStatus =
      jniAccessors.getMethodIDOf(_classRef, "getCellConnectionStatus", "()I");

  /// from: public int getCellConnectionStatus()
  ///
  /// Gets the connection status of this cell.
  ///@see \#CONNECTION_NONE
  ///@see \#CONNECTION_PRIMARY_SERVING
  ///@see \#CONNECTION_SECONDARY_SERVING
  ///@see \#CONNECTION_UNKNOWN
  ///@return The connection status of the cell.
  ///
  /// Value is android.telephony.CellInfo\#CONNECTION_NONE, android.telephony.CellInfo\#CONNECTION_PRIMARY_SERVING, android.telephony.CellInfo\#CONNECTION_SECONDARY_SERVING, or android.telephony.CellInfo\#CONNECTION_UNKNOWN
  int getCellConnectionStatus() => jniAccessors.callMethodWithArgs(
      reference, _id_getCellConnectionStatus, jni.JniType.intType, []).integer;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object other)
  bool equals1(jni.JniObject other) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [other.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Implement the Parcelable interface
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public abstract void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
