// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../app/PendingIntent.dart" as pendingintent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.gsm.SmsManager
///
/// Manages SMS operations such as sending data, text, and pdu SMS messages.
/// Get this object by calling the static method SmsManager.getDefault().
///@deprecated Replaced by android.telephony.SmsManager that supports both GSM and CDMA.
class SmsManager extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/gsm/SmsManager");
  SmsManager.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int RESULT_ERROR_GENERIC_FAILURE
  ///
  /// Generic failure cause
  ///@deprecated Use android.telephony.SmsManager.
  static const RESULT_ERROR_GENERIC_FAILURE = 1;

  /// from: static public final int RESULT_ERROR_NO_SERVICE
  ///
  /// Failed because service is currently unavailable
  ///@deprecated Use android.telephony.SmsManager.
  static const RESULT_ERROR_NO_SERVICE = 4;

  /// from: static public final int RESULT_ERROR_NULL_PDU
  ///
  /// Failed because no pdu provided
  ///@deprecated Use android.telephony.SmsManager.
  static const RESULT_ERROR_NULL_PDU = 3;

  /// from: static public final int RESULT_ERROR_RADIO_OFF
  ///
  /// Failed because radio was explicitly turned off
  ///@deprecated Use android.telephony.SmsManager.
  static const RESULT_ERROR_RADIO_OFF = 2;

  /// from: static public final int STATUS_ON_SIM_FREE
  ///
  /// Free space (TS 51.011 10.5.3).
  ///@deprecated Use android.telephony.SmsManager.
  static const STATUS_ON_SIM_FREE = 0;

  /// from: static public final int STATUS_ON_SIM_READ
  ///
  /// Received and read (TS 51.011 10.5.3).
  ///@deprecated Use android.telephony.SmsManager.
  static const STATUS_ON_SIM_READ = 1;

  /// from: static public final int STATUS_ON_SIM_SENT
  ///
  /// Stored and sent (TS 51.011 10.5.3).
  ///@deprecated Use android.telephony.SmsManager.
  static const STATUS_ON_SIM_SENT = 5;

  /// from: static public final int STATUS_ON_SIM_UNREAD
  ///
  /// Received and unread (TS 51.011 10.5.3).
  ///@deprecated Use android.telephony.SmsManager.
  static const STATUS_ON_SIM_UNREAD = 3;

  /// from: static public final int STATUS_ON_SIM_UNSENT
  ///
  /// Stored and unsent (TS 51.011 10.5.3).
  ///@deprecated Use android.telephony.SmsManager.
  static const STATUS_ON_SIM_UNSENT = 7;

  static final _id_getDefault = jniAccessors.getStaticMethodIDOf(
      _classRef, "getDefault", "()Landroid/telephony/gsm/SmsManager;");

  /// from: static public android.telephony.gsm.SmsManager getDefault()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the default instance of the SmsManager
  ///@return the default instance of the SmsManager
  ///@deprecated Use android.telephony.SmsManager.
  static SmsManager getDefault() =>
      SmsManager.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getDefault, jni.JniType.objectType, []).object);

  static final _id_sendTextMessage = jniAccessors.getMethodIDOf(
      _classRef,
      "sendTextMessage",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V");

  /// from: public void sendTextMessage(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent)
  ///
  /// Send a text based SMS.
  ///@param destinationAddress the address to send the message to
  ///@param scAddress is the service center address or null to use
  ///  the current default SMSC
  ///@param text the body of the message to send
  ///@param sentIntent if not NULL this <code>PendingIntent</code> is
  ///  broadcast when the message is successfully sent, or failed.
  ///  The result code will be <code>Activity.RESULT_OK<code> for success,
  ///  or one of these errors:
  ///  <code>RESULT_ERROR_GENERIC_FAILURE</code>
  ///  <code>RESULT_ERROR_RADIO_OFF</code>
  ///  <code>RESULT_ERROR_NULL_PDU</code>.
  ///  The per-application based SMS control checks sentIntent. If sentIntent
  ///  is NULL the caller will be checked against all unknown applications,
  ///  which cause smaller number of SMS to be sent in checking period.
  ///@param deliveryIntent if not NULL this <code>PendingIntent</code> is
  ///  broadcast when the message is delivered to the recipient.  The
  ///  raw pdu of the status report is in the extended data ("pdu").
  ///@throws IllegalArgumentException if destinationAddress or text are empty
  ///@deprecated Use android.telephony.SmsManager.
  void sendTextMessage(
          jni.JniString destinationAddress,
          jni.JniString scAddress,
          jni.JniString text,
          pendingintent_.PendingIntent sentIntent,
          pendingintent_.PendingIntent deliveryIntent) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_sendTextMessage, jni.JniType.voidType, [
        destinationAddress.reference,
        scAddress.reference,
        text.reference,
        sentIntent.reference,
        deliveryIntent.reference
      ]).check();

  static final _id_divideMessage = jniAccessors.getMethodIDOf(
      _classRef, "divideMessage", "(Ljava/lang/String;)Ljava/util/ArrayList;");

  /// from: public java.util.ArrayList<java.lang.String> divideMessage(java.lang.String text)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Divide a text message into several messages, none bigger than
  /// the maximum SMS message size.
  ///@param text the original message.  Must not be null.
  ///@return an <code>ArrayList</code> of strings that, in order,
  ///   comprise the original message
  ///@deprecated Use android.telephony.SmsManager.
  jni.JniObject divideMessage(jni.JniString text) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_divideMessage, jni.JniType.objectType, [text.reference]).object);

  static final _id_sendMultipartTextMessage = jniAccessors.getMethodIDOf(
      _classRef,
      "sendMultipartTextMessage",
      "(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V");

  /// from: public void sendMultipartTextMessage(java.lang.String destinationAddress, java.lang.String scAddress, java.util.ArrayList<java.lang.String> parts, java.util.ArrayList<android.app.PendingIntent> sentIntents, java.util.ArrayList<android.app.PendingIntent> deliveryIntents)
  ///
  /// Send a multi-part text based SMS.  The callee should have already
  /// divided the message into correctly sized parts by calling
  /// <code>divideMessage</code>.
  ///@param destinationAddress the address to send the message to
  ///@param scAddress is the service center address or null to use
  ///   the current default SMSC
  ///@param parts an <code>ArrayList</code> of strings that, in order,
  ///   comprise the original message
  ///@param sentIntents if not null, an <code>ArrayList</code> of
  ///   <code>PendingIntent</code>s (one for each message part) that is
  ///   broadcast when the corresponding message part has been sent.
  ///   The result code will be <code>Activity.RESULT_OK<code> for success,
  ///   or one of these errors:
  ///   <code>RESULT_ERROR_GENERIC_FAILURE</code>
  ///   <code>RESULT_ERROR_RADIO_OFF</code>
  ///   <code>RESULT_ERROR_NULL_PDU</code>.
  ///   The per-application based SMS control checks sentIntent. If sentIntent
  ///   is NULL the caller will be checked against all unknown applicaitons,
  ///   which cause smaller number of SMS to be sent in checking period.
  ///@param deliveryIntents if not null, an <code>ArrayList</code> of
  ///   <code>PendingIntent</code>s (one for each message part) that is
  ///   broadcast when the corresponding message part has been delivered
  ///   to the recipient.  The raw pdu of the status report is in the
  ///   extended data ("pdu").
  ///@throws IllegalArgumentException if destinationAddress or data are empty
  ///@deprecated Use android.telephony.SmsManager.
  void sendMultipartTextMessage(
          jni.JniString destinationAddress,
          jni.JniString scAddress,
          jni.JniObject parts,
          jni.JniObject sentIntents,
          jni.JniObject deliveryIntents) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_sendMultipartTextMessage, jni.JniType.voidType, [
        destinationAddress.reference,
        scAddress.reference,
        parts.reference,
        sentIntents.reference,
        deliveryIntents.reference
      ]).check();

  static final _id_sendDataMessage = jniAccessors.getMethodIDOf(
      _classRef,
      "sendDataMessage",
      "(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V");

  /// from: public void sendDataMessage(java.lang.String destinationAddress, java.lang.String scAddress, short destinationPort, byte[] data, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent)
  ///
  /// Send a data based SMS to a specific application port.
  ///@param destinationAddress the address to send the message to
  ///@param scAddress is the service center address or null to use
  ///  the current default SMSC
  ///@param destinationPort the port to deliver the message to
  ///@param data the body of the message to send
  ///@param sentIntent if not NULL this <code>PendingIntent</code> is
  ///  broadcast when the message is sucessfully sent, or failed.
  ///  The result code will be <code>Activity.RESULT_OK<code> for success,
  ///  or one of these errors:
  ///  <code>RESULT_ERROR_GENERIC_FAILURE</code>
  ///  <code>RESULT_ERROR_RADIO_OFF</code>
  ///  <code>RESULT_ERROR_NULL_PDU</code>.
  ///  The per-application based SMS control checks sentIntent. If sentIntent
  ///  is NULL the caller will be checked against all unknown applicaitons,
  ///  which cause smaller number of SMS to be sent in checking period.
  ///@param deliveryIntent if not NULL this <code>PendingIntent</code> is
  ///  broadcast when the message is delivered to the recipient.  The
  ///  raw pdu of the status report is in the extended data ("pdu").
  ///@throws IllegalArgumentException if destinationAddress or data are empty
  ///@deprecated Use android.telephony.SmsManager.
  void sendDataMessage(
          jni.JniString destinationAddress,
          jni.JniString scAddress,
          int destinationPort,
          jni.JniObject data,
          pendingintent_.PendingIntent sentIntent,
          pendingintent_.PendingIntent deliveryIntent) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_sendDataMessage, jni.JniType.voidType, [
        destinationAddress.reference,
        scAddress.reference,
        destinationPort,
        data.reference,
        sentIntent.reference,
        deliveryIntent.reference
      ]).check();
}
