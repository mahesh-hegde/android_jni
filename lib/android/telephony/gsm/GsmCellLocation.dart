// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../CellLocation.dart" as celllocation_;

import "../../os/Bundle.dart" as bundle_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.gsm.GsmCellLocation
///
/// Represents the cell location on a GSM phone.
class GsmCellLocation extends celllocation_.CellLocation {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/gsm/GsmCellLocation");
  GsmCellLocation.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Empty constructor.  Initializes the LAC and CID to -1.
  GsmCellLocation()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Bundle;)V");

  /// from: public void <init>(android.os.Bundle bundle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Initialize the object from a bundle.
  GsmCellLocation.ctor1(bundle_.Bundle bundle)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [bundle.reference]).object);

  static final _id_getLac =
      jniAccessors.getMethodIDOf(_classRef, "getLac", "()I");

  /// from: public int getLac()
  ///
  /// @return gsm location area code, -1 if unknown, 0xffff max legal value
  int getLac() => jniAccessors.callMethodWithArgs(
      reference, _id_getLac, jni.JniType.intType, []).integer;

  static final _id_getCid =
      jniAccessors.getMethodIDOf(_classRef, "getCid", "()I");

  /// from: public int getCid()
  ///
  /// @return gsm cell id, -1 if unknown, 0xffff max legal value
  int getCid() => jniAccessors.callMethodWithArgs(
      reference, _id_getCid, jni.JniType.intType, []).integer;

  static final _id_getPsc =
      jniAccessors.getMethodIDOf(_classRef, "getPsc", "()I");

  /// from: public int getPsc()
  ///
  /// On a UMTS network, returns the primary scrambling code of the serving
  /// cell.
  ///@return primary scrambling code for UMTS, -1 if unknown or GSM
  int getPsc() => jniAccessors.callMethodWithArgs(
      reference, _id_getPsc, jni.JniType.intType, []).integer;

  static final _id_setStateInvalid =
      jniAccessors.getMethodIDOf(_classRef, "setStateInvalid", "()V");

  /// from: public void setStateInvalid()
  ///
  /// Invalidate this object.  The location area code and the cell id are set to -1.
  void setStateInvalid() => jniAccessors.callMethodWithArgs(
      reference, _id_setStateInvalid, jni.JniType.voidType, []).check();

  static final _id_setLacAndCid =
      jniAccessors.getMethodIDOf(_classRef, "setLacAndCid", "(II)V");

  /// from: public void setLacAndCid(int lac, int cid)
  ///
  /// Set the location area code and the cell id.
  void setLacAndCid(int lac, int cid) => jniAccessors.callMethodWithArgs(
      reference, _id_setLacAndCid, jni.JniType.voidType, [lac, cid]).check();

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_fillInNotifierBundle = jniAccessors.getMethodIDOf(
      _classRef, "fillInNotifierBundle", "(Landroid/os/Bundle;)V");

  /// from: public void fillInNotifierBundle(android.os.Bundle m)
  ///
  /// Set intent notifier Bundle based on service state
  ///@param m intent notifier Bundle
  void fillInNotifierBundle(bundle_.Bundle m) =>
      jniAccessors.callMethodWithArgs(reference, _id_fillInNotifierBundle,
          jni.JniType.voidType, [m.reference]).check();
}
