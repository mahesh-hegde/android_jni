// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../text/Editable.dart" as editable_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.PhoneNumberFormattingTextWatcher
///
/// Watches a android.widget.TextView and if a phone number is entered
/// will format it.
///
/// Stop formatting when the user
/// <ul>
/// <li>Inputs non-dialable characters</li>
/// <li>Removes the separator in the middle of string.</li>
/// </ul>
///
/// The formatting will be restarted once the text is cleared.
class PhoneNumberFormattingTextWatcher extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/telephony/PhoneNumberFormattingTextWatcher");
  PhoneNumberFormattingTextWatcher.fromRef(jni.JObject ref)
      : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The formatting is based on the current system locale and future locale changes
  /// may not take effect on this instance.
  PhoneNumberFormattingTextWatcher()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String countryCode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The formatting is based on the given <code>countryCode</code>.
  ///@param countryCode the ISO 3166-1 two-letter country code that indicates the country/region
  /// where the phone number is being entered.
  PhoneNumberFormattingTextWatcher.ctor1(jni.JniString countryCode)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [countryCode.reference]).object);

  static final _id_beforeTextChanged = jniAccessors.getMethodIDOf(
      _classRef, "beforeTextChanged", "(Ljava/lang/CharSequence;III)V");

  /// from: public void beforeTextChanged(java.lang.CharSequence s, int start, int count, int after)
  void beforeTextChanged(jni.JniObject s, int start, int count, int after) =>
      jniAccessors.callMethodWithArgs(reference, _id_beforeTextChanged,
          jni.JniType.voidType, [s.reference, start, count, after]).check();

  static final _id_onTextChanged = jniAccessors.getMethodIDOf(
      _classRef, "onTextChanged", "(Ljava/lang/CharSequence;III)V");

  /// from: public void onTextChanged(java.lang.CharSequence s, int start, int before, int count)
  void onTextChanged(jni.JniObject s, int start, int before, int count) =>
      jniAccessors.callMethodWithArgs(reference, _id_onTextChanged,
          jni.JniType.voidType, [s.reference, start, before, count]).check();

  static final _id_afterTextChanged = jniAccessors.getMethodIDOf(
      _classRef, "afterTextChanged", "(Landroid/text/Editable;)V");

  /// from: synchronized public void afterTextChanged(android.text.Editable s)
  void afterTextChanged(editable_.Editable s) =>
      jniAccessors.callMethodWithArgs(reference, _id_afterTextChanged,
          jni.JniType.voidType, [s.reference]).check();
}
