// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.IccOpenLogicalChannelResponse
///
/// Response to the TelephonyManager\#iccOpenLogicalChannel command.
class IccOpenLogicalChannelResponse extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/telephony/IccOpenLogicalChannelResponse");
  IccOpenLogicalChannelResponse.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telephony.IccOpenLogicalChannelResponse> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int INVALID_CHANNEL
  ///
  /// Indicates an invalid channel.
  static const INVALID_CHANNEL = -1;

  /// from: static public final int STATUS_MISSING_RESOURCE
  static const STATUS_MISSING_RESOURCE = 2;

  /// from: static public final int STATUS_NO_ERROR
  ///
  /// Possible status values returned by open channel command.
  ///
  /// STATUS_NO_ERROR: Open channel command returned successfully.
  /// STATUS_MISSING_RESOURCE: No logical channels available.
  /// STATUS_NO_SUCH_ELEMENT: AID not found on UICC.
  /// STATUS_UNKNOWN_ERROR: Unknown error in open channel command.
  static const STATUS_NO_ERROR = 1;

  /// from: static public final int STATUS_NO_SUCH_ELEMENT
  static const STATUS_NO_SUCH_ELEMENT = 3;

  /// from: static public final int STATUS_UNKNOWN_ERROR
  static const STATUS_UNKNOWN_ERROR = 4;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Construct a IccOpenLogicalChannelResponse from a given parcel.
  IccOpenLogicalChannelResponse(parcel_.Parcel in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [in0.reference]).object);

  static final _id_getChannel =
      jniAccessors.getMethodIDOf(_classRef, "getChannel", "()I");

  /// from: public int getChannel()
  ///
  /// @return the channel id.
  int getChannel() => jniAccessors.callMethodWithArgs(
      reference, _id_getChannel, jni.JniType.intType, []).integer;

  static final _id_getStatus =
      jniAccessors.getMethodIDOf(_classRef, "getStatus", "()I");

  /// from: public int getStatus()
  ///
  /// @return the status of the command.
  int getStatus() => jniAccessors.callMethodWithArgs(
      reference, _id_getStatus, jni.JniType.intType, []).integer;

  static final _id_getSelectResponse =
      jniAccessors.getMethodIDOf(_classRef, "getSelectResponse", "()[B");

  /// from: public byte[] getSelectResponse()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the select response.
  jni.JniObject getSelectResponse() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSelectResponse, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(parcel_.Parcel out, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [out.reference, flags]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
