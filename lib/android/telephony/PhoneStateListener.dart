// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ServiceState.dart" as servicestate_;

import "CellLocation.dart" as celllocation_;

import "SignalStrength.dart" as signalstrength_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.PhoneStateListener
///
/// A listener class for monitoring changes in specific telephony states
/// on the device, including service state, signal strength, message
/// waiting indicator (voicemail), and others.
///
/// Override the methods for the state that you wish to receive updates for, and
/// pass your PhoneStateListener object, along with bitwise-or of the LISTEN_
/// flags to TelephonyManager\#listen TelephonyManager.listen().
///
/// Note that access to some telephony information is
/// permission-protected. Your application won't receive updates for protected
/// information unless it has the appropriate permissions declared in
/// its manifest file. Where permissions apply, they are noted in the
/// appropriate LISTEN_ flags.
class PhoneStateListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/PhoneStateListener");
  PhoneStateListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int LISTEN_CALL_FORWARDING_INDICATOR
  ///
  /// Listen for changes to the call-forwarding indicator.
  /// {@more }
  /// Requires Permission: android.Manifest.permission\#READ_PHONE_STATE READ_PHONE_STATE or that the calling app has carrier privileges (see
  /// TelephonyManager\#hasCarrierPrivileges).
  ///@see \#onCallForwardingIndicatorChanged
  static const LISTEN_CALL_FORWARDING_INDICATOR = 8;

  /// from: static public final int LISTEN_CALL_STATE
  ///
  /// Listen for changes to the device call state.
  /// {@more }
  ///@see \#onCallStateChanged
  static const LISTEN_CALL_STATE = 32;

  /// from: static public final int LISTEN_CELL_INFO
  ///
  /// Listen for changes to observed cell info.
  ///@see \#onCellInfoChanged
  static const LISTEN_CELL_INFO = 1024;

  /// from: static public final int LISTEN_CELL_LOCATION
  ///
  /// Listen for changes to the device's cell location. Note that
  /// this will result in frequent callbacks to the listener.
  /// {@more }
  /// Requires Permission: android.Manifest.permission\#ACCESS_COARSE_LOCATION ACCESS_COARSE_LOCATION
  ///
  /// If you need regular location updates but want more control over
  /// the update interval or location precision, you can set up a listener
  /// through the android.location.LocationManager location manager
  /// instead.
  ///@see \#onCellLocationChanged
  static const LISTEN_CELL_LOCATION = 16;

  /// from: static public final int LISTEN_DATA_ACTIVITY
  ///
  /// Listen for changes to the direction of data traffic on the data
  /// connection (cellular).
  /// {@more }
  /// Example: The status bar uses this to display the appropriate
  /// data-traffic icon.
  ///@see \#onDataActivity
  static const LISTEN_DATA_ACTIVITY = 128;

  /// from: static public final int LISTEN_DATA_CONNECTION_STATE
  ///
  /// Listen for changes to the data connection state (cellular).
  ///@see \#onDataConnectionStateChanged
  static const LISTEN_DATA_CONNECTION_STATE = 64;

  /// from: static public final int LISTEN_MESSAGE_WAITING_INDICATOR
  ///
  /// Listen for changes to the message-waiting indicator.
  /// {@more }
  /// Requires Permission: android.Manifest.permission\#READ_PHONE_STATE READ_PHONE_STATE or that the calling app has carrier privileges (see
  /// TelephonyManager\#hasCarrierPrivileges).
  ///
  /// Example: The status bar uses this to determine when to display the
  /// voicemail icon.
  ///@see \#onMessageWaitingIndicatorChanged
  static const LISTEN_MESSAGE_WAITING_INDICATOR = 4;

  /// from: static public final int LISTEN_NONE
  ///
  /// Stop listening for updates.
  static const LISTEN_NONE = 0;

  /// from: static public final int LISTEN_SERVICE_STATE
  ///
  /// Listen for changes to the network service state (cellular).
  ///@see \#onServiceStateChanged
  ///@see ServiceState
  static const LISTEN_SERVICE_STATE = 1;

  /// from: static public final int LISTEN_SIGNAL_STRENGTH
  ///
  /// Listen for changes to the network signal strength (cellular).
  /// {@more }
  ///@see \#onSignalStrengthChanged
  ///@deprecated by \#LISTEN_SIGNAL_STRENGTHS
  static const LISTEN_SIGNAL_STRENGTH = 2;

  /// from: static public final int LISTEN_SIGNAL_STRENGTHS
  ///
  /// Listen for changes to the network signal strengths (cellular).
  ///
  /// Example: The status bar uses this to control the signal-strength
  /// icon.
  ///@see \#onSignalStrengthsChanged
  static const LISTEN_SIGNAL_STRENGTHS = 256;

  /// from: static public final int LISTEN_USER_MOBILE_DATA_STATE
  ///
  /// Listen for changes to the user mobile data state
  ///@see \#onUserMobileDataStateChanged
  static const LISTEN_USER_MOBILE_DATA_STATE = 524288;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a PhoneStateListener for the Phone with the default subscription.
  /// This class requires Looper.myLooper() not return null.
  PhoneStateListener()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onServiceStateChanged = jniAccessors.getMethodIDOf(_classRef,
      "onServiceStateChanged", "(Landroid/telephony/ServiceState;)V");

  /// from: public void onServiceStateChanged(android.telephony.ServiceState serviceState)
  ///
  /// Callback invoked when device service state changes.
  ///@see ServiceState\#STATE_EMERGENCY_ONLY
  ///@see ServiceState\#STATE_IN_SERVICE
  ///@see ServiceState\#STATE_OUT_OF_SERVICE
  ///@see ServiceState\#STATE_POWER_OFF
  void onServiceStateChanged(servicestate_.ServiceState serviceState) =>
      jniAccessors.callMethodWithArgs(reference, _id_onServiceStateChanged,
          jni.JniType.voidType, [serviceState.reference]).check();

  static final _id_onSignalStrengthChanged =
      jniAccessors.getMethodIDOf(_classRef, "onSignalStrengthChanged", "(I)V");

  /// from: public void onSignalStrengthChanged(int asu)
  ///
  /// Callback invoked when network signal strength changes.
  ///@see ServiceState\#STATE_EMERGENCY_ONLY
  ///@see ServiceState\#STATE_IN_SERVICE
  ///@see ServiceState\#STATE_OUT_OF_SERVICE
  ///@see ServiceState\#STATE_POWER_OFF
  ///@deprecated Use \#onSignalStrengthsChanged(SignalStrength)
  void onSignalStrengthChanged(int asu) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onSignalStrengthChanged,
      jni.JniType.voidType,
      [asu]).check();

  static final _id_onMessageWaitingIndicatorChanged = jniAccessors
      .getMethodIDOf(_classRef, "onMessageWaitingIndicatorChanged", "(Z)V");

  /// from: public void onMessageWaitingIndicatorChanged(boolean mwi)
  ///
  /// Callback invoked when the message-waiting indicator changes.
  void onMessageWaitingIndicatorChanged(bool mwi) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onMessageWaitingIndicatorChanged,
          jni.JniType.voidType,
          [mwi]).check();

  static final _id_onCallForwardingIndicatorChanged = jniAccessors
      .getMethodIDOf(_classRef, "onCallForwardingIndicatorChanged", "(Z)V");

  /// from: public void onCallForwardingIndicatorChanged(boolean cfi)
  ///
  /// Callback invoked when the call-forwarding indicator changes.
  void onCallForwardingIndicatorChanged(bool cfi) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onCallForwardingIndicatorChanged,
          jni.JniType.voidType,
          [cfi]).check();

  static final _id_onCellLocationChanged = jniAccessors.getMethodIDOf(_classRef,
      "onCellLocationChanged", "(Landroid/telephony/CellLocation;)V");

  /// from: public void onCellLocationChanged(android.telephony.CellLocation location)
  ///
  /// Callback invoked when device cell location changes.
  void onCellLocationChanged(celllocation_.CellLocation location) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCellLocationChanged,
          jni.JniType.voidType, [location.reference]).check();

  static final _id_onCallStateChanged = jniAccessors.getMethodIDOf(
      _classRef, "onCallStateChanged", "(ILjava/lang/String;)V");

  /// from: public void onCallStateChanged(int state, java.lang.String phoneNumber)
  ///
  /// Callback invoked when device call state changes.
  ///@param state call state
  ///@param phoneNumber call phone number. If application does not have
  /// android.Manifest.permission\#READ_CALL_LOG READ_CALL_LOG permission or carrier
  /// privileges (see TelephonyManager\#hasCarrierPrivileges), an empty string will be
  /// passed as an argument.
  ///@see TelephonyManager\#CALL_STATE_IDLE
  ///@see TelephonyManager\#CALL_STATE_RINGING
  ///@see TelephonyManager\#CALL_STATE_OFFHOOK
  void onCallStateChanged(int state, jni.JniString phoneNumber) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCallStateChanged,
          jni.JniType.voidType, [state, phoneNumber.reference]).check();

  static final _id_onDataConnectionStateChanged = jniAccessors.getMethodIDOf(
      _classRef, "onDataConnectionStateChanged", "(I)V");

  /// from: public void onDataConnectionStateChanged(int state)
  ///
  /// Callback invoked when connection state changes.
  ///@see TelephonyManager\#DATA_DISCONNECTED
  ///@see TelephonyManager\#DATA_CONNECTING
  ///@see TelephonyManager\#DATA_CONNECTED
  ///@see TelephonyManager\#DATA_SUSPENDED
  void onDataConnectionStateChanged(int state) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onDataConnectionStateChanged,
          jni.JniType.voidType,
          [state]).check();

  static final _id_onDataConnectionStateChanged1 = jniAccessors.getMethodIDOf(
      _classRef, "onDataConnectionStateChanged", "(II)V");

  /// from: public void onDataConnectionStateChanged(int state, int networkType)
  ///
  /// same as above, but with the network type.  Both called.
  void onDataConnectionStateChanged1(int state, int networkType) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onDataConnectionStateChanged1,
          jni.JniType.voidType,
          [state, networkType]).check();

  static final _id_onDataActivity =
      jniAccessors.getMethodIDOf(_classRef, "onDataActivity", "(I)V");

  /// from: public void onDataActivity(int direction)
  ///
  /// Callback invoked when data activity state changes.
  ///@see TelephonyManager\#DATA_ACTIVITY_NONE
  ///@see TelephonyManager\#DATA_ACTIVITY_IN
  ///@see TelephonyManager\#DATA_ACTIVITY_OUT
  ///@see TelephonyManager\#DATA_ACTIVITY_INOUT
  ///@see TelephonyManager\#DATA_ACTIVITY_DORMANT
  void onDataActivity(int direction) => jniAccessors.callMethodWithArgs(
      reference, _id_onDataActivity, jni.JniType.voidType, [direction]).check();

  static final _id_onSignalStrengthsChanged = jniAccessors.getMethodIDOf(
      _classRef,
      "onSignalStrengthsChanged",
      "(Landroid/telephony/SignalStrength;)V");

  /// from: public void onSignalStrengthsChanged(android.telephony.SignalStrength signalStrength)
  ///
  /// Callback invoked when network signal strengths changes.
  ///@see ServiceState\#STATE_EMERGENCY_ONLY
  ///@see ServiceState\#STATE_IN_SERVICE
  ///@see ServiceState\#STATE_OUT_OF_SERVICE
  ///@see ServiceState\#STATE_POWER_OFF
  void onSignalStrengthsChanged(
          signalstrength_.SignalStrength signalStrength) =>
      jniAccessors.callMethodWithArgs(reference, _id_onSignalStrengthsChanged,
          jni.JniType.voidType, [signalStrength.reference]).check();

  static final _id_onCellInfoChanged = jniAccessors.getMethodIDOf(
      _classRef, "onCellInfoChanged", "(Ljava/util/List;)V");

  /// from: public void onCellInfoChanged(java.util.List<android.telephony.CellInfo> cellInfo)
  ///
  /// Callback invoked when a observed cell info has changed,
  /// or new cells have been added or removed.
  ///@param cellInfo is the list of currently visible cells.
  void onCellInfoChanged(jni.JniObject cellInfo) =>
      jniAccessors.callMethodWithArgs(reference, _id_onCellInfoChanged,
          jni.JniType.voidType, [cellInfo.reference]).check();

  static final _id_onUserMobileDataStateChanged = jniAccessors.getMethodIDOf(
      _classRef, "onUserMobileDataStateChanged", "(Z)V");

  /// from: public void onUserMobileDataStateChanged(boolean enabled)
  ///
  /// Callback invoked when the user mobile data state has changed
  ///@param enabled indicates whether the current user mobile data state is enabled or disabled.
  void onUserMobileDataStateChanged(bool enabled) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onUserMobileDataStateChanged,
          jni.JniType.voidType,
          [enabled]).check();
}
