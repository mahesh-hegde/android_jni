// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.CellLocation
///
/// Abstract class that represents the location of the device.  {@more }
class CellLocation extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/CellLocation");
  CellLocation.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  CellLocation()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_requestLocationUpdate = jniAccessors.getStaticMethodIDOf(
      _classRef, "requestLocationUpdate", "()V");

  /// from: static public void requestLocationUpdate()
  ///
  /// Request an update of the current location.  If the location has changed,
  /// a broadcast will be sent to everyone registered with PhoneStateListener\#LISTEN_CELL_LOCATION.
  static void requestLocationUpdate() => jniAccessors.callStaticMethodWithArgs(
      _classRef, _id_requestLocationUpdate, jni.JniType.voidType, []).check();

  static final _id_getEmpty = jniAccessors.getStaticMethodIDOf(
      _classRef, "getEmpty", "()Landroid/telephony/CellLocation;");

  /// from: static public android.telephony.CellLocation getEmpty()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a new CellLocation object representing an unknown
  /// location, or null for unknown/none phone radio types.
  static CellLocation getEmpty() =>
      CellLocation.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_getEmpty, jni.JniType.objectType, []).object);
}
