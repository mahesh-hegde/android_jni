// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../os/Parcelable.dart" as parcelable_;

import "../../net/Uri.dart" as uri_;

import "../../os/Parcel.dart" as parcel_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.data.ApnSetting
///
/// An Access Point Name (APN) configuration for a carrier data connection.
///
/// The APN provides configuration to connect a cellular network device to an IP data network. A
/// carrier uses the name, type and other configuration in an {@code APNSetting} to decide which IP
/// address to assign, any security methods to apply, and how the device might be connected to
/// private networks.
///
/// Use ApnSetting.Builder to create new instances.
class ApnSetting extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/data/ApnSetting");
  ApnSetting.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int AUTH_TYPE_CHAP
  ///
  /// Authentication type for CHAP.
  static const AUTH_TYPE_CHAP = 2;

  /// from: static public final int AUTH_TYPE_NONE
  ///
  /// No authentication type.
  static const AUTH_TYPE_NONE = 0;

  /// from: static public final int AUTH_TYPE_PAP
  ///
  /// Authentication type for PAP.
  static const AUTH_TYPE_PAP = 1;

  /// from: static public final int AUTH_TYPE_PAP_OR_CHAP
  ///
  /// Authentication type for PAP or CHAP.
  static const AUTH_TYPE_PAP_OR_CHAP = 3;

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telephony.data.ApnSetting> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int MVNO_TYPE_GID
  ///
  /// MVNO type for group identifier level 1.
  static const MVNO_TYPE_GID = 2;

  /// from: static public final int MVNO_TYPE_ICCID
  ///
  /// MVNO type for ICCID.
  static const MVNO_TYPE_ICCID = 3;

  /// from: static public final int MVNO_TYPE_IMSI
  ///
  /// MVNO type for IMSI.
  static const MVNO_TYPE_IMSI = 1;

  /// from: static public final int MVNO_TYPE_SPN
  ///
  /// MVNO type for service provider name.
  static const MVNO_TYPE_SPN = 0;

  /// from: static public final int PROTOCOL_IP
  ///
  /// Protocol type for IP.
  static const PROTOCOL_IP = 0;

  /// from: static public final int PROTOCOL_IPV4V6
  ///
  /// Protocol type for IPV4V6.
  static const PROTOCOL_IPV4V6 = 2;

  /// from: static public final int PROTOCOL_IPV6
  ///
  /// Protocol type for IPV6.
  static const PROTOCOL_IPV6 = 1;

  /// from: static public final int PROTOCOL_PPP
  ///
  /// Protocol type for PPP.
  static const PROTOCOL_PPP = 3;

  /// from: static public final int TYPE_CBS
  ///
  /// APN type for CBS.
  static const TYPE_CBS = 128;

  /// from: static public final int TYPE_DEFAULT
  ///
  /// APN type for default data traffic and HiPri traffic.
  static const TYPE_DEFAULT = 17;

  /// from: static public final int TYPE_DUN
  ///
  /// APN type for DUN traffic.
  static const TYPE_DUN = 8;

  /// from: static public final int TYPE_EMERGENCY
  ///
  /// APN type for Emergency PDN. This is not an IA apn, but is used
  /// for access to carrier services in an emergency call situation.
  static const TYPE_EMERGENCY = 512;

  /// from: static public final int TYPE_FOTA
  ///
  /// APN type for accessing the carrier's FOTA portal, used for over the air updates.
  static const TYPE_FOTA = 32;

  /// from: static public final int TYPE_HIPRI
  ///
  /// APN type for HiPri traffic.
  static const TYPE_HIPRI = 16;

  /// from: static public final int TYPE_IA
  ///
  /// APN type for IA Initial Attach APN.
  static const TYPE_IA = 256;

  /// from: static public final int TYPE_IMS
  ///
  /// APN type for IMS.
  static const TYPE_IMS = 64;

  /// from: static public final int TYPE_MMS
  ///
  /// APN type for MMS traffic.
  static const TYPE_MMS = 2;

  /// from: static public final int TYPE_SUPL
  ///
  /// APN type for SUPL assisted GPS.
  static const TYPE_SUPL = 4;

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/telephony/data/ApnSetting\$Builder;)V");

  /// from: void <init>(android.telephony.data.ApnSetting.Builder builder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ApnSetting(ApnSetting_Builder builder)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [builder.reference]).object);

  static final _id_getEntryName = jniAccessors.getMethodIDOf(
      _classRef, "getEntryName", "()Ljava/lang/String;");

  /// from: public java.lang.String getEntryName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the human-readable name that describes the APN.
  ///@return the entry name for the APN
  jni.JniString getEntryName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getEntryName, jni.JniType.objectType, []).object);

  static final _id_getApnName = jniAccessors.getMethodIDOf(
      _classRef, "getApnName", "()Ljava/lang/String;");

  /// from: public java.lang.String getApnName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the name of the APN.
  ///@return APN name
  jni.JniString getApnName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getApnName, jni.JniType.objectType, []).object);

  static final _id_getProxyAddress = jniAccessors.getMethodIDOf(
      _classRef, "getProxyAddress", "()Ljava/net/InetAddress;");

  /// from: public java.net.InetAddress getProxyAddress()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the HTTP proxy address configured for the APN. The proxy address might be an IP address
  /// or hostname. This method returns {@code null} if system networking (typically DNS) isn\u2019t
  /// available to resolve a hostname value\u2014values set as IP addresses don\u2019t have this restriction.
  /// This is a known problem and will be addressed in a future release.
  ///@return the HTTP proxy address or {@code null} if DNS isn\u2019t available to resolve a hostname
  jni.JniObject getProxyAddress() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getProxyAddress, jni.JniType.objectType, []).object);

  static final _id_getProxyPort =
      jniAccessors.getMethodIDOf(_classRef, "getProxyPort", "()I");

  /// from: public int getProxyPort()
  ///
  /// Returns the proxy address of the APN.
  ///@return proxy address.
  int getProxyPort() => jniAccessors.callMethodWithArgs(
      reference, _id_getProxyPort, jni.JniType.intType, []).integer;

  static final _id_getMmsc =
      jniAccessors.getMethodIDOf(_classRef, "getMmsc", "()Landroid/net/Uri;");

  /// from: public android.net.Uri getMmsc()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the MMSC Uri of the APN.
  ///@return MMSC Uri.
  uri_.Uri getMmsc() => uri_.Uri.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_getMmsc, jni.JniType.objectType, []).object);

  static final _id_getMmsProxyAddress = jniAccessors.getMethodIDOf(
      _classRef, "getMmsProxyAddress", "()Ljava/net/InetAddress;");

  /// from: public java.net.InetAddress getMmsProxyAddress()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the MMS proxy address configured for the APN. The MMS proxy address might be an IP
  /// address or hostname. This method returns {@code null} if system networking (typically DNS)
  /// isn\u2019t available to resolve a hostname value\u2014values set as IP addresses don\u2019t have this
  /// restriction. This is a known problem and will be addressed in a future release.
  ///@return the MMS proxy address or {@code null} if DNS isn\u2019t available to resolve a hostname
  jni.JniObject getMmsProxyAddress() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getMmsProxyAddress, jni.JniType.objectType, []).object);

  static final _id_getMmsProxyPort =
      jniAccessors.getMethodIDOf(_classRef, "getMmsProxyPort", "()I");

  /// from: public int getMmsProxyPort()
  ///
  /// Returns the MMS proxy port of the APN.
  ///@return MMS proxy port
  int getMmsProxyPort() => jniAccessors.callMethodWithArgs(
      reference, _id_getMmsProxyPort, jni.JniType.intType, []).integer;

  static final _id_getUser =
      jniAccessors.getMethodIDOf(_classRef, "getUser", "()Ljava/lang/String;");

  /// from: public java.lang.String getUser()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the APN username of the APN.
  ///@return APN username
  jni.JniString getUser() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getUser, jni.JniType.objectType, []).object);

  static final _id_getPassword = jniAccessors.getMethodIDOf(
      _classRef, "getPassword", "()Ljava/lang/String;");

  /// from: public java.lang.String getPassword()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the APN password of the APN.
  ///@return APN password
  jni.JniString getPassword() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPassword, jni.JniType.objectType, []).object);

  static final _id_getAuthType =
      jniAccessors.getMethodIDOf(_classRef, "getAuthType", "()I");

  /// from: public int getAuthType()
  ///
  /// Returns the authentication type of the APN.
  ///@return authentication type
  ///
  /// Value is android.telephony.data.ApnSetting\#AUTH_TYPE_NONE, android.telephony.data.ApnSetting\#AUTH_TYPE_PAP, android.telephony.data.ApnSetting\#AUTH_TYPE_CHAP, or android.telephony.data.ApnSetting\#AUTH_TYPE_PAP_OR_CHAP
  int getAuthType() => jniAccessors.callMethodWithArgs(
      reference, _id_getAuthType, jni.JniType.intType, []).integer;

  static final _id_getApnTypeBitmask =
      jniAccessors.getMethodIDOf(_classRef, "getApnTypeBitmask", "()I");

  /// from: public int getApnTypeBitmask()
  ///
  /// Returns the bitmask of APN types.
  ///
  /// Apn types are usage categories for an APN entry. One APN entry may support multiple
  /// APN types, eg, a single APN may service regular internet traffic ("default") as well as
  /// MMS-specific connections.
  ///
  /// The bitmask of APN types is calculated from APN types defined in ApnSetting.
  ///@see Builder\#setApnTypeBitmask(int)
  ///@return a bitmask describing the types of the APN
  ///
  /// Value is either <code>0</code> or a combination of android.telephony.data.ApnSetting\#TYPE_DEFAULT, android.telephony.data.ApnSetting\#TYPE_MMS, android.telephony.data.ApnSetting\#TYPE_SUPL, android.telephony.data.ApnSetting\#TYPE_DUN, android.telephony.data.ApnSetting\#TYPE_HIPRI, android.telephony.data.ApnSetting\#TYPE_FOTA, android.telephony.data.ApnSetting\#TYPE_IMS, android.telephony.data.ApnSetting\#TYPE_CBS, android.telephony.data.ApnSetting\#TYPE_IA, and android.telephony.data.ApnSetting\#TYPE_EMERGENCY
  int getApnTypeBitmask() => jniAccessors.callMethodWithArgs(
      reference, _id_getApnTypeBitmask, jni.JniType.intType, []).integer;

  static final _id_getId =
      jniAccessors.getMethodIDOf(_classRef, "getId", "()I");

  /// from: public int getId()
  ///
  /// Returns the unique database id for this entry.
  ///@return the unique database id
  int getId() => jniAccessors.callMethodWithArgs(
      reference, _id_getId, jni.JniType.intType, []).integer;

  static final _id_getOperatorNumeric = jniAccessors.getMethodIDOf(
      _classRef, "getOperatorNumeric", "()Ljava/lang/String;");

  /// from: public java.lang.String getOperatorNumeric()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the numeric operator ID for the APN. Numeric operator ID is defined as
  /// android.provider.Telephony.Carriers\#MCC +
  /// android.provider.Telephony.Carriers\#MNC.
  ///@return the numeric operator ID
  jni.JniString getOperatorNumeric() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getOperatorNumeric, jni.JniType.objectType, []).object);

  static final _id_getProtocol =
      jniAccessors.getMethodIDOf(_classRef, "getProtocol", "()I");

  /// from: public int getProtocol()
  ///
  /// Returns the protocol to use to connect to this APN.
  ///
  /// Protocol is one of the {@code PDP_type} values in TS 27.007 section 10.1.1.
  ///@see Builder\#setProtocol(int)
  ///@return the protocol
  ///
  /// Value is android.telephony.data.ApnSetting\#PROTOCOL_IP, android.telephony.data.ApnSetting\#PROTOCOL_IPV6, android.telephony.data.ApnSetting\#PROTOCOL_IPV4V6, or android.telephony.data.ApnSetting\#PROTOCOL_PPP
  int getProtocol() => jniAccessors.callMethodWithArgs(
      reference, _id_getProtocol, jni.JniType.intType, []).integer;

  static final _id_getRoamingProtocol =
      jniAccessors.getMethodIDOf(_classRef, "getRoamingProtocol", "()I");

  /// from: public int getRoamingProtocol()
  ///
  /// Returns the protocol to use to connect to this APN while the device is roaming.
  ///
  /// Roaming protocol is one of the {@code PDP_type} values in TS 27.007 section 10.1.1.
  ///@see Builder\#setRoamingProtocol(int)
  ///@return the roaming protocol
  ///
  /// Value is android.telephony.data.ApnSetting\#PROTOCOL_IP, android.telephony.data.ApnSetting\#PROTOCOL_IPV6, android.telephony.data.ApnSetting\#PROTOCOL_IPV4V6, or android.telephony.data.ApnSetting\#PROTOCOL_PPP
  int getRoamingProtocol() => jniAccessors.callMethodWithArgs(
      reference, _id_getRoamingProtocol, jni.JniType.intType, []).integer;

  static final _id_isEnabled =
      jniAccessors.getMethodIDOf(_classRef, "isEnabled", "()Z");

  /// from: public boolean isEnabled()
  ///
  /// Returns the current status of APN.
  ///
  /// {@code true} : enabled APN.
  /// {@code false} : disabled APN.
  ///@return the current status
  bool isEnabled() => jniAccessors.callMethodWithArgs(
      reference, _id_isEnabled, jni.JniType.booleanType, []).boolean;

  static final _id_getNetworkTypeBitmask =
      jniAccessors.getMethodIDOf(_classRef, "getNetworkTypeBitmask", "()I");

  /// from: public int getNetworkTypeBitmask()
  ///
  /// Returns a bitmask describing the Radio Technologies(Network Types) which this APN may use.
  ///
  /// NetworkType bitmask is calculated from NETWORK_TYPE defined in TelephonyManager.
  ///
  /// Examples of Network Types include TelephonyManager\#NETWORK_TYPE_UNKNOWN,
  /// TelephonyManager\#NETWORK_TYPE_GPRS, TelephonyManager\#NETWORK_TYPE_EDGE.
  ///@return a bitmask describing the Radio Technologies(Network Types)
  int getNetworkTypeBitmask() => jniAccessors.callMethodWithArgs(
      reference, _id_getNetworkTypeBitmask, jni.JniType.intType, []).integer;

  static final _id_getMvnoType =
      jniAccessors.getMethodIDOf(_classRef, "getMvnoType", "()I");

  /// from: public int getMvnoType()
  ///
  /// Returns the MVNO match type for this APN.
  ///@see Builder\#setMvnoType(int)
  ///@return the MVNO match type
  ///
  /// Value is android.telephony.data.ApnSetting\#MVNO_TYPE_SPN, android.telephony.data.ApnSetting\#MVNO_TYPE_IMSI, android.telephony.data.ApnSetting\#MVNO_TYPE_GID, or android.telephony.data.ApnSetting\#MVNO_TYPE_ICCID
  int getMvnoType() => jniAccessors.callMethodWithArgs(
      reference, _id_getMvnoType, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  ///
  /// @hide
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// @param dest This value must never be {@code null}.
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}

/// from: android.telephony.data.ApnSetting$Builder
///
/// Provides a convenient way to set the fields of a ApnSetting when creating a new
/// instance. The following settings are required to build an {@code ApnSetting}:
///
/// <ul><li>apnTypeBitmask</li>
/// <li>apnName</li>
/// <li>entryName</li></ul>
///
/// The example below shows how you might create a new {@code ApnSetting}:
///
/// <pre><code>
/// // Create an MMS proxy address with a hostname. A network might not be
/// // available, so supply a dummy (0.0.0.0) IPv4 address to avoid DNS lookup.
/// String host = "mms.example.com";
/// byte[] ipAddress = new byte[4];
/// InetAddress mmsProxy;
/// try {
///   mmsProxy = InetAddress.getByAddress(host, ipAddress);
/// } catch (UnknownHostException e) {
///   e.printStackTrace();
///   return;
/// }
///
/// ApnSetting apn = new ApnSetting.Builder()
///     .setApnTypeBitmask(ApnSetting.TYPE_DEFAULT | ApnSetting.TYPE_MMS)
///     .setApnName("apn.example.com")
///     .setEntryName("Example Carrier APN")
///     .setMmsc(Uri.parse("http://mms.example.com:8002"))
///     .setMmsProxyAddress(mmsProxy)
///     .setMmsProxyPort(8799)
///     .build();
/// </code></pre>
class ApnSetting_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/data/ApnSetting\$Builder");
  ApnSetting_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Default constructor for Builder.
  ApnSetting_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setEntryName = jniAccessors.getMethodIDOf(
      _classRef,
      "setEntryName",
      "(Ljava/lang/String;)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setEntryName(java.lang.String entryName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a human-readable name that describes the APN.
  ///@param entryName the entry name to set for the APN
  ApnSetting_Builder setEntryName(jni.JniString entryName) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setEntryName,
          jni.JniType.objectType,
          [entryName.reference]).object);

  static final _id_setApnName = jniAccessors.getMethodIDOf(
      _classRef,
      "setApnName",
      "(Ljava/lang/String;)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setApnName(java.lang.String apnName)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the name of the APN.
  ///@param apnName the name to set for the APN
  ApnSetting_Builder setApnName(jni.JniString apnName) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setApnName, jni.JniType.objectType, [apnName.reference]).object);

  static final _id_setProxyAddress = jniAccessors.getMethodIDOf(
      _classRef,
      "setProxyAddress",
      "(Ljava/net/InetAddress;)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setProxyAddress(java.net.InetAddress proxy)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the address of an HTTP proxy for the APN. The proxy address can be an IP address or
  /// hostname. If {@code proxy} contains both an IP address and hostname, this method ignores
  /// the IP address.
  ///
  /// The java.net.InetAddress methods
  /// java.net.InetAddress\#getAllByName getAllByName() require DNS for hostname
  /// resolution. To avoid this requirement when setting a hostname, call
  /// java.net.InetAddress\#getByAddress(java.lang.String, byte[]) with both the
  /// hostname and a dummy IP address. See ApnSetting.Builder above for an example.
  ///@param proxy the proxy address to set for the APN
  ApnSetting_Builder setProxyAddress(jni.JniObject proxy) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setProxyAddress,
          jni.JniType.objectType,
          [proxy.reference]).object);

  static final _id_setProxyPort = jniAccessors.getMethodIDOf(_classRef,
      "setProxyPort", "(I)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setProxyPort(int port)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the proxy port of the APN.
  ///@param port the proxy port to set for the APN
  ApnSetting_Builder setProxyPort(int port) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setProxyPort, jni.JniType.objectType, [port]).object);

  static final _id_setMmsc = jniAccessors.getMethodIDOf(_classRef, "setMmsc",
      "(Landroid/net/Uri;)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setMmsc(android.net.Uri mmsc)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the MMSC Uri of the APN.
  ///@param mmsc the MMSC Uri to set for the APN
  ApnSetting_Builder setMmsc(uri_.Uri mmsc) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setMmsc, jni.JniType.objectType, [mmsc.reference]).object);

  static final _id_setMmsProxyAddress = jniAccessors.getMethodIDOf(
      _classRef,
      "setMmsProxyAddress",
      "(Ljava/net/InetAddress;)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setMmsProxyAddress(java.net.InetAddress mmsProxy)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the address of an MMS proxy for the APN. The MMS proxy address can be an IP address
  /// or hostname. If {@code mmsProxy} contains both an IP address and hostname, this method
  /// ignores the IP address.
  ///
  /// The java.net.InetAddress methods
  /// java.net.InetAddress\#getByName getByName() and
  /// java.net.InetAddress\#getAllByName getAllByName() require DNS for hostname
  /// resolution. To avoid this requirement when setting a hostname, call
  /// java.net.InetAddress\#getByAddress(java.lang.String, byte[]) with both the
  /// hostname and a dummy IP address. See ApnSetting.Builder above for an example.
  ///@param mmsProxy the MMS proxy address to set for the APN
  ApnSetting_Builder setMmsProxyAddress(jni.JniObject mmsProxy) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setMmsProxyAddress,
          jni.JniType.objectType,
          [mmsProxy.reference]).object);

  static final _id_setMmsProxyPort = jniAccessors.getMethodIDOf(_classRef,
      "setMmsProxyPort", "(I)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setMmsProxyPort(int mmsPort)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the MMS proxy port of the APN.
  ///@param mmsPort the MMS proxy port to set for the APN
  ApnSetting_Builder setMmsProxyPort(int mmsPort) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setMmsProxyPort, jni.JniType.objectType, [mmsPort]).object);

  static final _id_setUser = jniAccessors.getMethodIDOf(_classRef, "setUser",
      "(Ljava/lang/String;)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setUser(java.lang.String user)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the APN username of the APN.
  ///@param user the APN username to set for the APN
  ApnSetting_Builder setUser(jni.JniString user) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setUser, jni.JniType.objectType, [user.reference]).object);

  static final _id_setPassword = jniAccessors.getMethodIDOf(
      _classRef,
      "setPassword",
      "(Ljava/lang/String;)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setPassword(java.lang.String password)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the APN password of the APN.
  ///@see android.provider.Telephony.Carriers\#PASSWORD
  ///@param password the APN password to set for the APN
  ApnSetting_Builder setPassword(jni.JniString password) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setPassword,
          jni.JniType.objectType,
          [password.reference]).object);

  static final _id_setAuthType = jniAccessors.getMethodIDOf(_classRef,
      "setAuthType", "(I)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setAuthType(int authType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the authentication type of the APN.
  ///@param authType the authentication type to set for the APN
  ///
  /// Value is android.telephony.data.ApnSetting\#AUTH_TYPE_NONE, android.telephony.data.ApnSetting\#AUTH_TYPE_PAP, android.telephony.data.ApnSetting\#AUTH_TYPE_CHAP, or android.telephony.data.ApnSetting\#AUTH_TYPE_PAP_OR_CHAP
  ApnSetting_Builder setAuthType(int authType) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setAuthType, jni.JniType.objectType, [authType]).object);

  static final _id_setApnTypeBitmask = jniAccessors.getMethodIDOf(_classRef,
      "setApnTypeBitmask", "(I)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setApnTypeBitmask(int apnTypeBitmask)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the bitmask of APN types.
  ///
  /// Apn types are usage categories for an APN entry. One APN entry may support multiple
  /// APN types, eg, a single APN may service regular internet traffic ("default") as well as
  /// MMS-specific connections.
  ///
  /// The bitmask of APN types is calculated from APN types defined in ApnSetting.
  ///@param apnTypeBitmask a bitmask describing the types of the APN
  ///
  /// Value is either <code>0</code> or a combination of android.telephony.data.ApnSetting\#TYPE_DEFAULT, android.telephony.data.ApnSetting\#TYPE_MMS, android.telephony.data.ApnSetting\#TYPE_SUPL, android.telephony.data.ApnSetting\#TYPE_DUN, android.telephony.data.ApnSetting\#TYPE_HIPRI, android.telephony.data.ApnSetting\#TYPE_FOTA, android.telephony.data.ApnSetting\#TYPE_IMS, android.telephony.data.ApnSetting\#TYPE_CBS, android.telephony.data.ApnSetting\#TYPE_IA, and android.telephony.data.ApnSetting\#TYPE_EMERGENCY
  ApnSetting_Builder setApnTypeBitmask(int apnTypeBitmask) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setApnTypeBitmask,
          jni.JniType.objectType,
          [apnTypeBitmask]).object);

  static final _id_setOperatorNumeric = jniAccessors.getMethodIDOf(
      _classRef,
      "setOperatorNumeric",
      "(Ljava/lang/String;)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setOperatorNumeric(java.lang.String operatorNumeric)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the numeric operator ID for the APN. Numeric operator ID is defined as
  /// android.provider.Telephony.Carriers\#MCC +
  /// android.provider.Telephony.Carriers\#MNC.
  ///@param operatorNumeric the numeric operator ID to set for this entry
  ApnSetting_Builder setOperatorNumeric(jni.JniString operatorNumeric) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setOperatorNumeric,
          jni.JniType.objectType,
          [operatorNumeric.reference]).object);

  static final _id_setProtocol = jniAccessors.getMethodIDOf(_classRef,
      "setProtocol", "(I)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setProtocol(int protocol)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the protocol to use to connect to this APN.
  ///
  /// Protocol is one of the {@code PDP_type} values in TS 27.007 section 10.1.1.
  ///@param protocol the protocol to set to use to connect to this APN
  ///
  /// Value is android.telephony.data.ApnSetting\#PROTOCOL_IP, android.telephony.data.ApnSetting\#PROTOCOL_IPV6, android.telephony.data.ApnSetting\#PROTOCOL_IPV4V6, or android.telephony.data.ApnSetting\#PROTOCOL_PPP
  ApnSetting_Builder setProtocol(int protocol) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setProtocol, jni.JniType.objectType, [protocol]).object);

  static final _id_setRoamingProtocol = jniAccessors.getMethodIDOf(_classRef,
      "setRoamingProtocol", "(I)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setRoamingProtocol(int roamingProtocol)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the protocol to use to connect to this APN when the device is roaming.
  ///
  /// Roaming protocol is one of the {@code PDP_type} values in TS 27.007 section 10.1.1.
  ///@param roamingProtocol the protocol to set to use to connect to this APN when roaming
  ///
  /// Value is android.telephony.data.ApnSetting\#PROTOCOL_IP, android.telephony.data.ApnSetting\#PROTOCOL_IPV6, android.telephony.data.ApnSetting\#PROTOCOL_IPV4V6, or android.telephony.data.ApnSetting\#PROTOCOL_PPP
  ApnSetting_Builder setRoamingProtocol(int roamingProtocol) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setRoamingProtocol,
          jni.JniType.objectType,
          [roamingProtocol]).object);

  static final _id_setCarrierEnabled = jniAccessors.getMethodIDOf(_classRef,
      "setCarrierEnabled", "(Z)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setCarrierEnabled(boolean carrierEnabled)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the current status for this APN.
  ///@param carrierEnabled the current status to set for this APN
  ApnSetting_Builder setCarrierEnabled(bool carrierEnabled) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setCarrierEnabled,
          jni.JniType.objectType,
          [carrierEnabled]).object);

  static final _id_setNetworkTypeBitmask = jniAccessors.getMethodIDOf(
      _classRef,
      "setNetworkTypeBitmask",
      "(I)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setNetworkTypeBitmask(int networkTypeBitmask)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets Radio Technology (Network Type) info for this APN.
  ///@param networkTypeBitmask the Radio Technology (Network Type) info
  ApnSetting_Builder setNetworkTypeBitmask(int networkTypeBitmask) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setNetworkTypeBitmask,
          jni.JniType.objectType,
          [networkTypeBitmask]).object);

  static final _id_setMvnoType = jniAccessors.getMethodIDOf(_classRef,
      "setMvnoType", "(I)Landroid/telephony/data/ApnSetting\$Builder;");

  /// from: public android.telephony.data.ApnSetting.Builder setMvnoType(int mvnoType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the MVNO match type for this APN.
  ///@param mvnoType the MVNO match type to set for this APN
  ///
  /// Value is android.telephony.data.ApnSetting\#MVNO_TYPE_SPN, android.telephony.data.ApnSetting\#MVNO_TYPE_IMSI, android.telephony.data.ApnSetting\#MVNO_TYPE_GID, or android.telephony.data.ApnSetting\#MVNO_TYPE_ICCID
  ApnSetting_Builder setMvnoType(int mvnoType) =>
      ApnSetting_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setMvnoType, jni.JniType.objectType, [mvnoType]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/telephony/data/ApnSetting;");

  /// from: public android.telephony.data.ApnSetting build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds ApnSetting from this builder.
  ///@return {@code null} if \#setApnName(String) or \#setEntryName(String)
  /// is empty, or \#setApnTypeBitmask(int) doesn't contain a valid bit,
  /// ApnSetting built from this builder otherwise.
  ApnSetting build() => ApnSetting.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
