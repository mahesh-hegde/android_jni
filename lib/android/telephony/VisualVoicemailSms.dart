// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../telecom/PhoneAccountHandle.dart" as phoneaccounthandle_;

import "../os/Bundle.dart" as bundle_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.VisualVoicemailSms
///
/// Represents the content of a visual voicemail SMS. If a incoming SMS matches the VisualVoicemailSmsFilterSettings set by the default dialer, VisualVoicemailService\#onSmsReceived(VisualVoicemailTask, VisualVoicemailSms) will be called.
class VisualVoicemailSms extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/VisualVoicemailSms");
  VisualVoicemailSms.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telephony.VisualVoicemailSms> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  VisualVoicemailSms()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getPhoneAccountHandle = jniAccessors.getMethodIDOf(_classRef,
      "getPhoneAccountHandle", "()Landroid/telecom/PhoneAccountHandle;");

  /// from: public android.telecom.PhoneAccountHandle getPhoneAccountHandle()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The PhoneAccountHandle that received the SMS.
  phoneaccounthandle_.PhoneAccountHandle getPhoneAccountHandle() =>
      phoneaccounthandle_.PhoneAccountHandle.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getPhoneAccountHandle,
              jni.JniType.objectType, []).object);

  static final _id_getPrefix = jniAccessors.getMethodIDOf(
      _classRef, "getPrefix", "()Ljava/lang/String;");

  /// from: public java.lang.String getPrefix()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The event type of the SMS or {@code null} if the framework cannot parse the SMS as voicemail
  /// but the carrier pattern indicates it is. Common values are "SYNC" or "STATUS".
  jni.JniString getPrefix() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPrefix, jni.JniType.objectType, []).object);

  static final _id_getFields = jniAccessors.getMethodIDOf(
      _classRef, "getFields", "()Landroid/os/Bundle;");

  /// from: public android.os.Bundle getFields()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The key-value pairs sent by the SMS, or {@code null} if the framework cannot parse the SMS as
  /// voicemail but the carrier pattern indicates it is. The interpretation of the fields is
  /// carrier dependent.
  bundle_.Bundle getFields() =>
      bundle_.Bundle.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getFields, jni.JniType.objectType, []).object);

  static final _id_getMessageBody = jniAccessors.getMethodIDOf(
      _classRef, "getMessageBody", "()Ljava/lang/String;");

  /// from: public java.lang.String getMessageBody()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Raw message body of the received SMS.
  jni.JniString getMessageBody() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMessageBody, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
