// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.mbms.MbmsStreamingSessionCallback
///
/// A callback class that is used to receive information from the middleware on MBMS streaming
/// services. An instance of this object should be passed into
/// MbmsStreamingSession\#create(Context, Executor, int, MbmsStreamingSessionCallback).
class MbmsStreamingSessionCallback extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/telephony/mbms/MbmsStreamingSessionCallback");
  MbmsStreamingSessionCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MbmsStreamingSessionCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onError = jniAccessors.getMethodIDOf(
      _classRef, "onError", "(ILjava/lang/String;)V");

  /// from: public void onError(int errorCode, java.lang.String message)
  ///
  /// Called by the middleware when it has detected an error condition. The possible error codes
  /// are listed in MbmsErrors.
  ///@param errorCode The error code.
  /// Value is android.telephony.mbms.MbmsErrors\#ERROR_NO_UNIQUE_MIDDLEWARE, android.telephony.mbms.MbmsErrors\#ERROR_MIDDLEWARE_LOST, android.telephony.mbms.MbmsErrors\#ERROR_MIDDLEWARE_NOT_BOUND, android.telephony.mbms.MbmsErrors.InitializationErrors\#ERROR_APP_PERMISSIONS_NOT_GRANTED, android.telephony.mbms.MbmsErrors.InitializationErrors\#ERROR_DUPLICATE_INITIALIZE, android.telephony.mbms.MbmsErrors.InitializationErrors\#ERROR_UNABLE_TO_INITIALIZE, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_MIDDLEWARE_NOT_YET_READY, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_OUT_OF_MEMORY, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_IN_E911, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_UNABLE_TO_READ_SIM, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_CARRIER_CHANGE_NOT_ALLOWED, android.telephony.mbms.MbmsErrors.StreamingErrors\#ERROR_CONCURRENT_SERVICE_LIMIT_REACHED, android.telephony.mbms.MbmsErrors.StreamingErrors\#ERROR_UNABLE_TO_START_SERVICE, or android.telephony.mbms.MbmsErrors.StreamingErrors\#ERROR_DUPLICATE_START_STREAM
  ///@param message A human-readable message generated by the middleware for debugging purposes.
  ///
  /// This value may be {@code null}.
  void onError(int errorCode, jni.JniString message) =>
      jniAccessors.callMethodWithArgs(reference, _id_onError,
          jni.JniType.voidType, [errorCode, message.reference]).check();

  static final _id_onStreamingServicesUpdated = jniAccessors.getMethodIDOf(
      _classRef, "onStreamingServicesUpdated", "(Ljava/util/List;)V");

  /// from: public void onStreamingServicesUpdated(java.util.List<android.telephony.mbms.StreamingServiceInfo> services)
  ///
  /// Called to indicate published Streaming Services have changed.
  ///
  /// This will only be called after the application has requested
  /// a list of streaming services and specified a service class list
  /// of interest AND the results of a subsequent getStreamServices
  /// call with the same service class list would return different
  /// results.
  ///@param services The list of available services.
  void onStreamingServicesUpdated(jni.JniObject services) =>
      jniAccessors.callMethodWithArgs(reference, _id_onStreamingServicesUpdated,
          jni.JniType.voidType, [services.reference]).check();

  static final _id_onMiddlewareReady =
      jniAccessors.getMethodIDOf(_classRef, "onMiddlewareReady", "()V");

  /// from: public void onMiddlewareReady()
  ///
  /// Called to indicate that the middleware has been initialized and is ready.
  ///
  /// Before this method is called, calling any method on an instance of
  /// MbmsStreamingSession will result in an IllegalStateException or an error
  /// delivered via \#onError(int, String) with error code
  /// MbmsErrors.GeneralErrors\#ERROR_MIDDLEWARE_NOT_YET_READY.
  void onMiddlewareReady() => jniAccessors.callMethodWithArgs(
      reference, _id_onMiddlewareReady, jni.JniType.voidType, []).check();
}
