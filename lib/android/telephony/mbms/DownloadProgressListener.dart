// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "DownloadRequest.dart" as downloadrequest_;

import "FileInfo.dart" as fileinfo_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.mbms.DownloadProgressListener
///
/// A optional listener class used by download clients to track progress. Apps should extend this
/// class and pass an instance into
/// MbmsDownloadSession\#download(DownloadRequest)
///
/// This is optionally specified when requesting a download and will only be called while the app
/// is running.
class DownloadProgressListener extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/telephony/mbms/DownloadProgressListener");
  DownloadProgressListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  DownloadProgressListener()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onProgressUpdated = jniAccessors.getMethodIDOf(
      _classRef,
      "onProgressUpdated",
      "(Landroid/telephony/mbms/DownloadRequest;Landroid/telephony/mbms/FileInfo;IIII)V");

  /// from: public void onProgressUpdated(android.telephony.mbms.DownloadRequest request, android.telephony.mbms.FileInfo fileInfo, int currentDownloadSize, int fullDownloadSize, int currentDecodedSize, int fullDecodedSize)
  ///
  /// Called when the middleware wants to report progress for a file in a DownloadRequest.
  ///@param request a DownloadRequest, indicating which download is being referenced.
  ///@param fileInfo a FileInfo specifying the file to report progress on.  Note that
  ///   the request may result in many files being downloaded and the client
  ///   may not have been able to get a list of them in advance.
  ///@param currentDownloadSize is the current amount downloaded.
  ///@param fullDownloadSize is the total number of bytes that make up the downloaded content.
  ///   This may be different from the decoded final size, but is useful in gauging download
  ///   progress.
  ///@param currentDecodedSize is the number of bytes that have been decoded.
  ///@param fullDecodedSize is the total number of bytes that make up the final decoded content.
  void onProgressUpdated(
          downloadrequest_.DownloadRequest request,
          fileinfo_.FileInfo fileInfo,
          int currentDownloadSize,
          int fullDownloadSize,
          int currentDecodedSize,
          int fullDecodedSize) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_onProgressUpdated, jni.JniType.voidType, [
        request.reference,
        fileInfo.reference,
        currentDownloadSize,
        fullDownloadSize,
        currentDecodedSize,
        fullDecodedSize
      ]).check();
}
