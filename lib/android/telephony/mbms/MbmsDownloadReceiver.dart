// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../content/BroadcastReceiver.dart" as broadcastreceiver_;

import "../../content/Context.dart" as context_;

import "../../content/Intent.dart" as intent_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.mbms.MbmsDownloadReceiver
///
/// The BroadcastReceiver responsible for handling intents sent from the middleware. Apps
/// that wish to download using MBMS APIs should declare this class in their AndroidManifest.xml as
/// follows:
/// <pre>{@code
/// <receiver
///    android:name="android.telephony.mbms.MbmsDownloadReceiver"
///    android:permission="android.permission.SEND_EMBMS_INTENTS"
///    android:enabled="true"
///    android:exported="true">
/// </receiver>}</pre>
class MbmsDownloadReceiver extends broadcastreceiver_.BroadcastReceiver {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/mbms/MbmsDownloadReceiver");
  MbmsDownloadReceiver.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MbmsDownloadReceiver()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onReceive = jniAccessors.getMethodIDOf(_classRef,
      "onReceive", "(Landroid/content/Context;Landroid/content/Intent;)V");

  /// from: public void onReceive(android.content.Context context, android.content.Intent intent)
  ///
  /// @hide
  void onReceive(context_.Context context, intent_.Intent intent) =>
      jniAccessors.callMethodWithArgs(reference, _id_onReceive,
          jni.JniType.voidType, [context.reference, intent.reference]).check();
}
