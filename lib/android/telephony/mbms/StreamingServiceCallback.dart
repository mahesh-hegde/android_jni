// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.mbms.StreamingServiceCallback
///
/// A callback class for use when the application is actively streaming content. The middleware
/// will provide updates on the status of the stream via this callback.
class StreamingServiceCallback extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/telephony/mbms/StreamingServiceCallback");
  StreamingServiceCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int SIGNAL_STRENGTH_UNAVAILABLE
  ///
  /// Indicates broadcast signal strength is not available for this service.
  ///
  /// This may be due to the service no longer being available due to geography
  /// or timing (end of service) or because lack of demand has caused the service
  /// to be delivered via unicast.
  static const SIGNAL_STRENGTH_UNAVAILABLE = -1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  StreamingServiceCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onError = jniAccessors.getMethodIDOf(
      _classRef, "onError", "(ILjava/lang/String;)V");

  /// from: public void onError(int errorCode, java.lang.String message)
  ///
  /// Called by the middleware when it has detected an error condition in this stream. The
  /// possible error codes are listed in MbmsErrors.
  ///@param errorCode The error code.
  /// Value is android.telephony.mbms.MbmsErrors\#ERROR_NO_UNIQUE_MIDDLEWARE, android.telephony.mbms.MbmsErrors\#ERROR_MIDDLEWARE_LOST, android.telephony.mbms.MbmsErrors\#ERROR_MIDDLEWARE_NOT_BOUND, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_MIDDLEWARE_NOT_YET_READY, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_OUT_OF_MEMORY, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_IN_E911, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_UNABLE_TO_READ_SIM, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_CARRIER_CHANGE_NOT_ALLOWED, android.telephony.mbms.MbmsErrors.StreamingErrors\#ERROR_CONCURRENT_SERVICE_LIMIT_REACHED, android.telephony.mbms.MbmsErrors.StreamingErrors\#ERROR_UNABLE_TO_START_SERVICE, or android.telephony.mbms.MbmsErrors.StreamingErrors\#ERROR_DUPLICATE_START_STREAM
  ///@param message A human-readable message generated by the middleware for debugging purposes.
  ///
  /// This value may be {@code null}.
  void onError(int errorCode, jni.JniString message) =>
      jniAccessors.callMethodWithArgs(reference, _id_onError,
          jni.JniType.voidType, [errorCode, message.reference]).check();

  static final _id_onStreamStateUpdated =
      jniAccessors.getMethodIDOf(_classRef, "onStreamStateUpdated", "(II)V");

  /// from: public void onStreamStateUpdated(int state, int reason)
  ///
  /// Called to indicate this stream has changed state.
  ///
  /// See StreamingService\#STATE_STOPPED, StreamingService\#STATE_STARTED
  /// and StreamingService\#STATE_STALLED.
  ///@param state Value is android.telephony.mbms.StreamingService\#STATE_STOPPED, android.telephony.mbms.StreamingService\#STATE_STARTED, or android.telephony.mbms.StreamingService\#STATE_STALLED
  ///@param reason Value is android.telephony.mbms.StreamingService\#REASON_BY_USER_REQUEST, android.telephony.mbms.StreamingService\#REASON_END_OF_SESSION, android.telephony.mbms.StreamingService\#REASON_FREQUENCY_CONFLICT, android.telephony.mbms.StreamingService\#REASON_OUT_OF_MEMORY, android.telephony.mbms.StreamingService\#REASON_NOT_CONNECTED_TO_HOMECARRIER_LTE, android.telephony.mbms.StreamingService\#REASON_LEFT_MBMS_BROADCAST_AREA, or android.telephony.mbms.StreamingService\#REASON_NONE
  void onStreamStateUpdated(int state, int reason) =>
      jniAccessors.callMethodWithArgs(reference, _id_onStreamStateUpdated,
          jni.JniType.voidType, [state, reason]).check();

  static final _id_onMediaDescriptionUpdated =
      jniAccessors.getMethodIDOf(_classRef, "onMediaDescriptionUpdated", "()V");

  /// from: public void onMediaDescriptionUpdated()
  ///
  /// Called to indicate the mpd of a the stream has changed.
  ///
  /// Depending on the Dash Client it may need to be either reset
  /// (less drastic, but original spec didn't allow mpd to change so not
  /// always supported) or restarted.
  ///
  /// This may be called when a looping stream hits the end or
  /// when parameters have changed to account for time drift.
  void onMediaDescriptionUpdated() => jniAccessors.callMethodWithArgs(reference,
      _id_onMediaDescriptionUpdated, jni.JniType.voidType, []).check();

  static final _id_onBroadcastSignalStrengthUpdated = jniAccessors
      .getMethodIDOf(_classRef, "onBroadcastSignalStrengthUpdated", "(I)V");

  /// from: public void onBroadcastSignalStrengthUpdated(int signalStrength)
  ///
  /// Broadcast Signal Strength updated.
  ///
  /// This signal strength is the BROADCAST signal strength which,
  /// depending on technology in play and it's deployment, may be
  /// stronger or weaker than the traditional UNICAST signal
  /// strength.  It a simple int from 0-4 for valid levels or
  /// \#SIGNAL_STRENGTH_UNAVAILABLE if broadcast is not available
  /// for this service due to timing, geography or popularity.
  void onBroadcastSignalStrengthUpdated(int signalStrength) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onBroadcastSignalStrengthUpdated,
          jni.JniType.voidType,
          [signalStrength]).check();

  static final _id_onStreamMethodUpdated =
      jniAccessors.getMethodIDOf(_classRef, "onStreamMethodUpdated", "(I)V");

  /// from: public void onStreamMethodUpdated(int methodType)
  ///
  /// Notify of bcast/unicast method being used.
  ///
  /// This is intended to be informational.  Indicates
  /// whether we're able to use cell broadcast or have
  /// had to fallback to unicast for this stream.
  ///
  /// This must be called once at the beginning of the stream
  /// around the same time as we change to STATE_STARTED, but
  /// strict ordering is not specified.  It must be called
  /// again if we change modes, but if that doesn't happen
  /// the callback won't be used again.
  ///
  /// See StreamingService\#BROADCAST_METHOD and
  /// StreamingService\#UNICAST_METHOD
  void onStreamMethodUpdated(int methodType) => jniAccessors.callMethodWithArgs(
      reference,
      _id_onStreamMethodUpdated,
      jni.JniType.voidType,
      [methodType]).check();
}
