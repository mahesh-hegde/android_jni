// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.mbms.MbmsDownloadSessionCallback
///
/// A callback class that apps should use to receive information on file downloads over
/// cell-broadcast.
class MbmsDownloadSessionCallback extends jni.JniObject {
  static final _classRef = jniAccessors
      .getClassOf("android/telephony/mbms/MbmsDownloadSessionCallback");
  MbmsDownloadSessionCallback.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MbmsDownloadSessionCallback()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_onError = jniAccessors.getMethodIDOf(
      _classRef, "onError", "(ILjava/lang/String;)V");

  /// from: public void onError(int errorCode, java.lang.String message)
  ///
  /// Indicates that the middleware has encountered an asynchronous error.
  ///@param errorCode Any error code listed in MbmsErrors
  /// Value is android.telephony.mbms.MbmsErrors\#ERROR_NO_UNIQUE_MIDDLEWARE, android.telephony.mbms.MbmsErrors\#ERROR_MIDDLEWARE_LOST, android.telephony.mbms.MbmsErrors\#ERROR_MIDDLEWARE_NOT_BOUND, android.telephony.mbms.MbmsErrors.InitializationErrors\#ERROR_APP_PERMISSIONS_NOT_GRANTED, android.telephony.mbms.MbmsErrors.InitializationErrors\#ERROR_DUPLICATE_INITIALIZE, android.telephony.mbms.MbmsErrors.InitializationErrors\#ERROR_UNABLE_TO_INITIALIZE, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_MIDDLEWARE_NOT_YET_READY, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_OUT_OF_MEMORY, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_IN_E911, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_UNABLE_TO_READ_SIM, android.telephony.mbms.MbmsErrors.GeneralErrors\#ERROR_CARRIER_CHANGE_NOT_ALLOWED, android.telephony.mbms.MbmsErrors.DownloadErrors\#ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT, android.telephony.mbms.MbmsErrors.DownloadErrors\#ERROR_UNKNOWN_DOWNLOAD_REQUEST, or android.telephony.mbms.MbmsErrors.DownloadErrors\#ERROR_UNKNOWN_FILE_INFO
  ///@param message A message, intended for debugging purposes, describing the error in further
  ///                detail.
  void onError(int errorCode, jni.JniString message) =>
      jniAccessors.callMethodWithArgs(reference, _id_onError,
          jni.JniType.voidType, [errorCode, message.reference]).check();

  static final _id_onFileServicesUpdated = jniAccessors.getMethodIDOf(
      _classRef, "onFileServicesUpdated", "(Ljava/util/List;)V");

  /// from: public void onFileServicesUpdated(java.util.List<android.telephony.mbms.FileServiceInfo> services)
  ///
  /// Called to indicate published File Services have changed.
  ///
  /// This will only be called after the application has requested a list of file services and
  /// specified a service class list of interest via
  /// MbmsDownloadSession\#requestUpdateFileServices(List). If there are subsequent calls to
  /// MbmsDownloadSession\#requestUpdateFileServices(List),
  /// this method may not be called again if
  /// the list of service classes would remain the same.
  ///@param services The most recently updated list of available file services.
  void onFileServicesUpdated(jni.JniObject services) =>
      jniAccessors.callMethodWithArgs(reference, _id_onFileServicesUpdated,
          jni.JniType.voidType, [services.reference]).check();

  static final _id_onMiddlewareReady =
      jniAccessors.getMethodIDOf(_classRef, "onMiddlewareReady", "()V");

  /// from: public void onMiddlewareReady()
  ///
  /// Called to indicate that the middleware has been initialized and is ready.
  ///
  /// Before this method is called, calling any method on an instance of
  /// MbmsDownloadSession will result in an IllegalStateException
  /// being thrown or \#onError(int, String) being called with error code
  /// MbmsErrors.GeneralErrors\#ERROR_MIDDLEWARE_NOT_YET_READY
  void onMiddlewareReady() => jniAccessors.callMethodWithArgs(
      reference, _id_onMiddlewareReady, jni.JniType.voidType, []).check();
}
