// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "CellIdentity.dart" as cellidentity_;

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.CellIdentityLte
///
/// CellIdentity is to represent a unique LTE cell
class CellIdentityLte extends cellidentity_.CellIdentity {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/CellIdentityLte");
  CellIdentityLte.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR1 = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telephony.CellIdentityLte> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Implement the Parcelable interface
  static parcelable_.Parcelable_Creator get CREATOR1 =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR1, jni.JniType.objectType)
          .object);

  static final _id_getMcc =
      jniAccessors.getMethodIDOf(_classRef, "getMcc", "()I");

  /// from: public int getMcc()
  ///
  /// @return 3-digit Mobile Country Code, 0..999, Integer.MAX_VALUE if unknown
  ///@deprecated Use \#getMccString instead.
  int getMcc() => jniAccessors.callMethodWithArgs(
      reference, _id_getMcc, jni.JniType.intType, []).integer;

  static final _id_getMnc =
      jniAccessors.getMethodIDOf(_classRef, "getMnc", "()I");

  /// from: public int getMnc()
  ///
  /// @return 2 or 3-digit Mobile Network Code, 0..999, Integer.MAX_VALUE if unknown
  ///@deprecated Use \#getMncString instead.
  int getMnc() => jniAccessors.callMethodWithArgs(
      reference, _id_getMnc, jni.JniType.intType, []).integer;

  static final _id_getCi =
      jniAccessors.getMethodIDOf(_classRef, "getCi", "()I");

  /// from: public int getCi()
  ///
  /// @return 28-bit Cell Identity, Integer.MAX_VALUE if unknown
  int getCi() => jniAccessors.callMethodWithArgs(
      reference, _id_getCi, jni.JniType.intType, []).integer;

  static final _id_getPci =
      jniAccessors.getMethodIDOf(_classRef, "getPci", "()I");

  /// from: public int getPci()
  ///
  /// @return Physical Cell Id 0..503, Integer.MAX_VALUE if unknown
  int getPci() => jniAccessors.callMethodWithArgs(
      reference, _id_getPci, jni.JniType.intType, []).integer;

  static final _id_getTac =
      jniAccessors.getMethodIDOf(_classRef, "getTac", "()I");

  /// from: public int getTac()
  ///
  /// @return 16-bit Tracking Area Code, Integer.MAX_VALUE if unknown
  int getTac() => jniAccessors.callMethodWithArgs(
      reference, _id_getTac, jni.JniType.intType, []).integer;

  static final _id_getEarfcn =
      jniAccessors.getMethodIDOf(_classRef, "getEarfcn", "()I");

  /// from: public int getEarfcn()
  ///
  /// @return 18-bit Absolute RF Channel Number, Integer.MAX_VALUE if unknown
  int getEarfcn() => jniAccessors.callMethodWithArgs(
      reference, _id_getEarfcn, jni.JniType.intType, []).integer;

  static final _id_getBandwidth =
      jniAccessors.getMethodIDOf(_classRef, "getBandwidth", "()I");

  /// from: public int getBandwidth()
  ///
  /// @return Cell bandwidth in kHz, Integer.MAX_VALUE if unknown
  int getBandwidth() => jniAccessors.callMethodWithArgs(
      reference, _id_getBandwidth, jni.JniType.intType, []).integer;

  static final _id_getMccString = jniAccessors.getMethodIDOf(
      _classRef, "getMccString", "()Ljava/lang/String;");

  /// from: public java.lang.String getMccString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return Mobile Country Code in string format, null if unknown
  jni.JniString getMccString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMccString, jni.JniType.objectType, []).object);

  static final _id_getMncString = jniAccessors.getMethodIDOf(
      _classRef, "getMncString", "()Ljava/lang/String;");

  /// from: public java.lang.String getMncString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return Mobile Network Code in string format, null if unknown
  jni.JniString getMncString() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMncString, jni.JniType.objectType, []).object);

  static final _id_getMobileNetworkOperator = jniAccessors.getMethodIDOf(
      _classRef, "getMobileNetworkOperator", "()Ljava/lang/String;");

  /// from: public java.lang.String getMobileNetworkOperator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return a 5 or 6 character string (MCC+MNC), null if any field is unknown
  jni.JniString getMobileNetworkOperator() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getMobileNetworkOperator, jni.JniType.objectType, []).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object other)
  bool equals1(jni.JniObject other) => jniAccessors.callMethodWithArgs(
      reference,
      _id_equals1,
      jni.JniType.booleanType,
      [other.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();
}
