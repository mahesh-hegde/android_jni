// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.SubscriptionPlan
///
/// Description of a billing relationship plan between a carrier and a specific
/// subscriber. This information is used to present more useful UI to users, such
/// as explaining how much mobile data they have remaining, and what will happen
/// when they run out.
///@see SubscriptionManager\#setSubscriptionPlans(int, java.util.List)
///@see SubscriptionManager\#getSubscriptionPlans(int)
class SubscriptionPlan extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/SubscriptionPlan");
  SubscriptionPlan.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final long BYTES_UNKNOWN
  ///
  /// Value indicating a number of bytes is unknown.
  static const BYTES_UNKNOWN = -1;

  /// from: static public final long BYTES_UNLIMITED
  ///
  /// Value indicating a number of bytes is unlimited.
  static const BYTES_UNLIMITED = 9223372036854775807;

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telephony.SubscriptionPlan> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int LIMIT_BEHAVIOR_BILLED
  ///
  /// When a resource limit is hit, the user is billed automatically.
  static const LIMIT_BEHAVIOR_BILLED = 1;

  /// from: static public final int LIMIT_BEHAVIOR_DISABLED
  ///
  /// When a resource limit is hit, access is disabled.
  static const LIMIT_BEHAVIOR_DISABLED = 0;

  /// from: static public final int LIMIT_BEHAVIOR_THROTTLED
  ///
  /// When a resource limit is hit, access is throttled to a slower rate.
  static const LIMIT_BEHAVIOR_THROTTLED = 2;

  /// from: static public final int LIMIT_BEHAVIOR_UNKNOWN
  ///
  /// When a resource limit is hit, the behavior is unknown.
  static const LIMIT_BEHAVIOR_UNKNOWN = -1;

  /// from: static public final long TIME_UNKNOWN
  ///
  /// Value indicating a timestamp is unknown.
  static const TIME_UNKNOWN = -1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel source)
  /// The returned object must be deleted after use, by calling the `delete` method.
  SubscriptionPlan(parcel_.Parcel source)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [source.reference]).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_getTitle = jniAccessors.getMethodIDOf(
      _classRef, "getTitle", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getTitle()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the short title of this plan.
  ///@return This value may be {@code null}.
  jni.JniObject getTitle() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTitle, jni.JniType.objectType, []).object);

  static final _id_getSummary = jniAccessors.getMethodIDOf(
      _classRef, "getSummary", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getSummary()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the short summary of this plan.
  ///@return This value may be {@code null}.
  jni.JniObject getSummary() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSummary, jni.JniType.objectType, []).object);

  static final _id_getDataLimitBytes =
      jniAccessors.getMethodIDOf(_classRef, "getDataLimitBytes", "()J");

  /// from: public long getDataLimitBytes()
  ///
  /// Return the usage threshold at which data access changes according to
  /// \#getDataLimitBehavior().
  ///
  /// Value is a non-negative number of bytes.
  ///@return Value is a non-negative number of bytes.
  int getDataLimitBytes() => jniAccessors.callMethodWithArgs(
      reference, _id_getDataLimitBytes, jni.JniType.longType, []).long;

  static final _id_getDataLimitBehavior =
      jniAccessors.getMethodIDOf(_classRef, "getDataLimitBehavior", "()I");

  /// from: public int getDataLimitBehavior()
  ///
  /// Return the behavior of data access when usage reaches
  /// \#getDataLimitBytes().
  ///@return Value is android.telephony.SubscriptionPlan\#LIMIT_BEHAVIOR_UNKNOWN, android.telephony.SubscriptionPlan\#LIMIT_BEHAVIOR_DISABLED, android.telephony.SubscriptionPlan\#LIMIT_BEHAVIOR_BILLED, or android.telephony.SubscriptionPlan\#LIMIT_BEHAVIOR_THROTTLED
  int getDataLimitBehavior() => jniAccessors.callMethodWithArgs(
      reference, _id_getDataLimitBehavior, jni.JniType.intType, []).integer;

  static final _id_getDataUsageBytes =
      jniAccessors.getMethodIDOf(_classRef, "getDataUsageBytes", "()J");

  /// from: public long getDataUsageBytes()
  ///
  /// Return a snapshot of currently known mobile data usage at
  /// \#getDataUsageTime().
  ///
  /// Value is a non-negative number of bytes.
  ///@return Value is a non-negative number of bytes.
  int getDataUsageBytes() => jniAccessors.callMethodWithArgs(
      reference, _id_getDataUsageBytes, jni.JniType.longType, []).long;

  static final _id_getDataUsageTime =
      jniAccessors.getMethodIDOf(_classRef, "getDataUsageTime", "()J");

  /// from: public long getDataUsageTime()
  ///
  /// Return the time at which \#getDataUsageBytes() was valid.
  ///
  /// Value is a non-negative timestamp in the
  ///  *            System\#currentTimeMillis() time base.
  ///@return Value is a non-negative timestamp in the
  ///  *            System\#currentTimeMillis() time base.
  int getDataUsageTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getDataUsageTime, jni.JniType.longType, []).long;

  static final _id_cycleIterator = jniAccessors.getMethodIDOf(
      _classRef, "cycleIterator", "()Ljava/util/Iterator;");

  /// from: public java.util.Iterator<android.util.Range<java.time.ZonedDateTime>> cycleIterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return an iterator that will return all valid data usage cycles based on
  /// any recurrence rules. The iterator starts from the currently active cycle
  /// and walks backwards through time.
  jni.JniObject cycleIterator() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_cycleIterator, jni.JniType.objectType, []).object);
}

/// from: android.telephony.SubscriptionPlan$Builder
///
/// Builder for a SubscriptionPlan.
class SubscriptionPlan_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/SubscriptionPlan\$Builder");
  SubscriptionPlan_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Ljava/time/ZonedDateTime;Ljava/time/ZonedDateTime;Ljava/time/Period;)V");

  /// from: void <init>(java.time.ZonedDateTime start, java.time.ZonedDateTime end, java.time.Period period)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// {@hide }
  SubscriptionPlan_Builder(
      jni.JniObject start, jni.JniObject end, jni.JniObject period)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [start.reference, end.reference, period.reference]).object);

  static final _id_createNonrecurring = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createNonrecurring",
      "(Ljava/time/ZonedDateTime;Ljava/time/ZonedDateTime;)Landroid/telephony/SubscriptionPlan\$Builder;");

  /// from: static public android.telephony.SubscriptionPlan.Builder createNonrecurring(java.time.ZonedDateTime start, java.time.ZonedDateTime end)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Start defining a SubscriptionPlan that covers a very specific
  /// window of time, and never automatically recurs.
  ///@param start The exact time at which the plan starts.
  ///@param end The exact time at which the plan ends.
  static SubscriptionPlan_Builder createNonrecurring(
          jni.JniObject start, jni.JniObject end) =>
      SubscriptionPlan_Builder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createNonrecurring,
          jni.JniType.objectType,
          [start.reference, end.reference]).object);

  static final _id_createRecurring = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "createRecurring",
      "(Ljava/time/ZonedDateTime;Ljava/time/Period;)Landroid/telephony/SubscriptionPlan\$Builder;");

  /// from: static public android.telephony.SubscriptionPlan.Builder createRecurring(java.time.ZonedDateTime start, java.time.Period period)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Start defining a SubscriptionPlan that starts at a specific
  /// time, and automatically recurs after each specific period of time,
  /// repeating indefinitely.
  ///
  /// When the given period is set to exactly one month, the plan will
  /// always recur on the day of the month defined by
  /// ZonedDateTime\#getDayOfMonth(). When a particular month ends
  /// before this day, the plan will recur on the last possible instant of
  /// that month.
  ///@param start The exact time at which the plan starts.
  ///@param period The period after which the plan automatically recurs.
  static SubscriptionPlan_Builder createRecurring(
          jni.JniObject start, jni.JniObject period) =>
      SubscriptionPlan_Builder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_createRecurring,
          jni.JniType.objectType,
          [start.reference, period.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/telephony/SubscriptionPlan;");

  /// from: public android.telephony.SubscriptionPlan build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SubscriptionPlan build() =>
      SubscriptionPlan.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);

  static final _id_setTitle = jniAccessors.getMethodIDOf(_classRef, "setTitle",
      "(Ljava/lang/CharSequence;)Landroid/telephony/SubscriptionPlan\$Builder;");

  /// from: public android.telephony.SubscriptionPlan.Builder setTitle(java.lang.CharSequence title)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the short title of this plan.
  ///@param title This value may be {@code null}.
  SubscriptionPlan_Builder setTitle(jni.JniObject title) =>
      SubscriptionPlan_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setTitle,
          jni.JniType.objectType,
          [title.reference]).object);

  static final _id_setSummary = jniAccessors.getMethodIDOf(
      _classRef,
      "setSummary",
      "(Ljava/lang/CharSequence;)Landroid/telephony/SubscriptionPlan\$Builder;");

  /// from: public android.telephony.SubscriptionPlan.Builder setSummary(java.lang.CharSequence summary)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the short summary of this plan.
  ///@param summary This value may be {@code null}.
  SubscriptionPlan_Builder setSummary(jni.JniObject summary) =>
      SubscriptionPlan_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setSummary,
          jni.JniType.objectType,
          [summary.reference]).object);

  static final _id_setDataLimit = jniAccessors.getMethodIDOf(_classRef,
      "setDataLimit", "(JI)Landroid/telephony/SubscriptionPlan\$Builder;");

  /// from: public android.telephony.SubscriptionPlan.Builder setDataLimit(long dataLimitBytes, int dataLimitBehavior)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set the usage threshold at which data access changes.
  ///@param dataLimitBytes the usage threshold at which data access
  ///            changes
  /// Value is a non-negative number of bytes.
  ///@param dataLimitBehavior the behavior of data access when usage
  ///            reaches the threshold
  ///
  /// Value is android.telephony.SubscriptionPlan\#LIMIT_BEHAVIOR_UNKNOWN, android.telephony.SubscriptionPlan\#LIMIT_BEHAVIOR_DISABLED, android.telephony.SubscriptionPlan\#LIMIT_BEHAVIOR_BILLED, or android.telephony.SubscriptionPlan\#LIMIT_BEHAVIOR_THROTTLED
  SubscriptionPlan_Builder setDataLimit(
          int dataLimitBytes, int dataLimitBehavior) =>
      SubscriptionPlan_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setDataLimit,
          jni.JniType.objectType,
          [dataLimitBytes, dataLimitBehavior]).object);

  static final _id_setDataUsage = jniAccessors.getMethodIDOf(_classRef,
      "setDataUsage", "(JJ)Landroid/telephony/SubscriptionPlan\$Builder;");

  /// from: public android.telephony.SubscriptionPlan.Builder setDataUsage(long dataUsageBytes, long dataUsageTime)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a snapshot of currently known mobile data usage.
  ///@param dataUsageBytes the currently known mobile data usage
  /// Value is a non-negative number of bytes.
  ///@param dataUsageTime the time at which this snapshot was valid
  ///
  /// Value is a non-negative timestamp in the
  ///  *           System\#currentTimeMillis() time base.
  SubscriptionPlan_Builder setDataUsage(
          int dataUsageBytes, int dataUsageTime) =>
      SubscriptionPlan_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setDataUsage,
          jni.JniType.objectType,
          [dataUsageBytes, dataUsageTime]).object);
}
