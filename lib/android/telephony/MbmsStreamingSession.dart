// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../content/Context.dart" as context_;

import "mbms/MbmsStreamingSessionCallback.dart"
    as mbmsstreamingsessioncallback_;

import "mbms/StreamingService.dart" as streamingservice_;

import "mbms/StreamingServiceInfo.dart" as streamingserviceinfo_;

import "mbms/StreamingServiceCallback.dart" as streamingservicecallback_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.MbmsStreamingSession
///
/// This class provides functionality for streaming media over MBMS.
class MbmsStreamingSession extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/MbmsStreamingSession");
  MbmsStreamingSession.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Ljava/util/concurrent/Executor;ILandroid/telephony/mbms/MbmsStreamingSessionCallback;)V");

  /// from: void <init>(android.content.Context context, java.util.concurrent.Executor executor, int subscriptionId, android.telephony.mbms.MbmsStreamingSessionCallback callback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  MbmsStreamingSession(
      context_.Context context,
      jni.JniObject executor,
      int subscriptionId,
      mbmsstreamingsessioncallback_.MbmsStreamingSessionCallback callback)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          context.reference,
          executor.reference,
          subscriptionId,
          callback.reference
        ]).object);

  static final _id_create = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "create",
      "(Landroid/content/Context;Ljava/util/concurrent/Executor;ILandroid/telephony/mbms/MbmsStreamingSessionCallback;)Landroid/telephony/MbmsStreamingSession;");

  /// from: static public android.telephony.MbmsStreamingSession create(android.content.Context context, java.util.concurrent.Executor executor, int subscriptionId, android.telephony.mbms.MbmsStreamingSessionCallback callback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new MbmsStreamingSession using the given subscription ID.
  ///
  /// Note that this call will bind a remote service. You may not call this method on your app's
  /// main thread.
  ///
  /// You may only have one instance of MbmsStreamingSession per UID. If you call this
  /// method while there is an active instance of MbmsStreamingSession in your process
  /// (in other words, one that has not had \#close() called on it), this method will
  /// throw an IllegalStateException. If you call this method in a different process
  /// running under the same UID, an error will be indicated via
  /// MbmsStreamingSessionCallback\#onError(int, String).
  ///
  /// Note that initialization may fail asynchronously. If you wish to try again after you
  /// receive such an asynchronous error, you must call \#close() on the instance of
  /// MbmsStreamingSession that you received before calling this method again.
  ///@param context The Context to use.
  /// This value must never be {@code null}.
  ///@param executor The executor on which you wish to execute callbacks.
  /// This value must never be {@code null}.
  ///@param subscriptionId The subscription ID to use.
  ///@param callback A callback object on which you wish to receive results of asynchronous
  ///                 operations.
  /// This value must never be {@code null}.
  ///@return An instance of MbmsStreamingSession, or null if an error occurred.
  static MbmsStreamingSession create(
          context_.Context context,
          jni.JniObject executor,
          int subscriptionId,
          mbmsstreamingsessioncallback_.MbmsStreamingSessionCallback
              callback) =>
      MbmsStreamingSession.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_create, jni.JniType.objectType, [
        context.reference,
        executor.reference,
        subscriptionId,
        callback.reference
      ]).object);

  static final _id_create1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "create",
      "(Landroid/content/Context;Ljava/util/concurrent/Executor;Landroid/telephony/mbms/MbmsStreamingSessionCallback;)Landroid/telephony/MbmsStreamingSession;");

  /// from: static public android.telephony.MbmsStreamingSession create(android.content.Context context, java.util.concurrent.Executor executor, android.telephony.mbms.MbmsStreamingSessionCallback callback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a new MbmsStreamingSession using the system default data subscription ID.
  /// See \#create(Context, Executor, int, MbmsStreamingSessionCallback).
  ///@param context This value must never be {@code null}.
  ///@param executor This value must never be {@code null}.
  ///@param callback This value must never be {@code null}.
  static MbmsStreamingSession create1(
          context_.Context context,
          jni.JniObject executor,
          mbmsstreamingsessioncallback_.MbmsStreamingSessionCallback
              callback) =>
      MbmsStreamingSession.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create1,
          jni.JniType.objectType,
          [context.reference, executor.reference, callback.reference]).object);

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  ///
  /// Terminates this instance. Also terminates
  /// any streaming services spawned from this instance as if
  /// StreamingService\#close() had been called on them. After this method returns,
  /// no further callbacks originating from the middleware will be enqueued on the provided
  /// instance of MbmsStreamingSessionCallback, but callbacks that have already been
  /// enqueued will still be delivered.
  ///
  /// It is safe to call \#create(Context, Executor, int, MbmsStreamingSessionCallback) to
  /// obtain another instance of MbmsStreamingSession immediately after this method
  /// returns.
  ///
  /// May throw an IllegalStateException
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniType.voidType, []).check();

  static final _id_requestUpdateStreamingServices = jniAccessors.getMethodIDOf(
      _classRef, "requestUpdateStreamingServices", "(Ljava/util/List;)V");

  /// from: public void requestUpdateStreamingServices(java.util.List<java.lang.String> serviceClassList)
  ///
  /// An inspection API to retrieve the list of streaming media currently be advertised.
  /// The results are returned asynchronously via
  /// MbmsStreamingSessionCallback\#onStreamingServicesUpdated(List) on the callback
  /// provided upon creation.
  ///
  /// Multiple calls replace the list of service classes of interest.
  ///
  /// May throw an IllegalArgumentException or an IllegalStateException.
  ///@param serviceClassList A list of streaming service classes that the app would like updates
  ///                         on. The exact names of these classes should be negotiated with the
  ///                         wireless carrier separately.
  void requestUpdateStreamingServices(jni.JniObject serviceClassList) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_requestUpdateStreamingServices,
          jni.JniType.voidType,
          [serviceClassList.reference]).check();

  static final _id_startStreaming = jniAccessors.getMethodIDOf(
      _classRef,
      "startStreaming",
      "(Landroid/telephony/mbms/StreamingServiceInfo;Ljava/util/concurrent/Executor;Landroid/telephony/mbms/StreamingServiceCallback;)Landroid/telephony/mbms/StreamingService;");

  /// from: public android.telephony.mbms.StreamingService startStreaming(android.telephony.mbms.StreamingServiceInfo serviceInfo, java.util.concurrent.Executor executor, android.telephony.mbms.StreamingServiceCallback callback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Starts streaming a requested service, reporting status to the indicated callback.
  /// Returns an object used to control that stream. The stream may not be ready for consumption
  /// immediately upon return from this method -- wait until the streaming state has been
  /// reported via
  /// android.telephony.mbms.StreamingServiceCallback\#onStreamStateUpdated(int, int)
  ///
  /// May throw an IllegalArgumentException or an IllegalStateException
  ///
  /// Asynchronous errors through the callback include any of the errors in
  /// MbmsErrors.GeneralErrors or
  /// MbmsErrors.StreamingErrors.
  ///@param serviceInfo The information about the service to stream.
  ///@param executor The executor on which you wish to execute callbacks for this stream.
  /// This value must never be {@code null}.
  ///@param callback A callback that'll be called when something about the stream changes.
  ///@return An instance of StreamingService through which the stream can be controlled.
  ///         May be {@code null} if an error occurred.
  streamingservice_.StreamingService startStreaming(
          streamingserviceinfo_.StreamingServiceInfo serviceInfo,
          jni.JniObject executor,
          streamingservicecallback_.StreamingServiceCallback callback) =>
      streamingservice_.StreamingService.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_startStreaming, jni.JniType.objectType, [
        serviceInfo.reference,
        executor.reference,
        callback.reference
      ]).object);
}
