// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../graphics/Bitmap.dart" as bitmap_;

import "../content/Context.dart" as context_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.SubscriptionInfo
///
/// A Parcelable class for Subscription Information.
class SubscriptionInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/SubscriptionInfo");
  SubscriptionInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telephony.SubscriptionInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(ILjava/lang/String;ILjava/lang/CharSequence;Ljava/lang/CharSequence;IILjava/lang/String;ILandroid/graphics/Bitmap;IILjava/lang/String;)V");

  /// from: void <init>(int id, java.lang.String iccId, int simSlotIndex, java.lang.CharSequence displayName, java.lang.CharSequence carrierName, int nameSource, int iconTint, java.lang.String number, int roaming, android.graphics.Bitmap icon, int mcc, int mnc, java.lang.String countryIso)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  SubscriptionInfo(
      int id,
      jni.JniString iccId,
      int simSlotIndex,
      jni.JniObject displayName,
      jni.JniObject carrierName,
      int nameSource,
      int iconTint,
      jni.JniString number,
      int roaming,
      bitmap_.Bitmap icon,
      int mcc,
      int mnc,
      jni.JniString countryIso)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          id,
          iccId.reference,
          simSlotIndex,
          displayName.reference,
          carrierName.reference,
          nameSource,
          iconTint,
          number.reference,
          roaming,
          icon.reference,
          mcc,
          mnc,
          countryIso.reference
        ]).object);

  static final _id_getSubscriptionId =
      jniAccessors.getMethodIDOf(_classRef, "getSubscriptionId", "()I");

  /// from: public int getSubscriptionId()
  ///
  /// @return the subscription ID.
  int getSubscriptionId() => jniAccessors.callMethodWithArgs(
      reference, _id_getSubscriptionId, jni.JniType.intType, []).integer;

  static final _id_getIccId =
      jniAccessors.getMethodIDOf(_classRef, "getIccId", "()Ljava/lang/String;");

  /// from: public java.lang.String getIccId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the ICC ID.
  jni.JniString getIccId() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getIccId, jni.JniType.objectType, []).object);

  static final _id_getSimSlotIndex =
      jniAccessors.getMethodIDOf(_classRef, "getSimSlotIndex", "()I");

  /// from: public int getSimSlotIndex()
  ///
  /// @return the slot index of this Subscription's SIM card.
  int getSimSlotIndex() => jniAccessors.callMethodWithArgs(
      reference, _id_getSimSlotIndex, jni.JniType.intType, []).integer;

  static final _id_getDisplayName = jniAccessors.getMethodIDOf(
      _classRef, "getDisplayName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getDisplayName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the name displayed to the user that identifies this subscription
  jni.JniObject getDisplayName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDisplayName, jni.JniType.objectType, []).object);

  static final _id_getCarrierName = jniAccessors.getMethodIDOf(
      _classRef, "getCarrierName", "()Ljava/lang/CharSequence;");

  /// from: public java.lang.CharSequence getCarrierName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the name displayed to the user that identifies Subscription provider name
  jni.JniObject getCarrierName() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCarrierName, jni.JniType.objectType, []).object);

  static final _id_createIconBitmap = jniAccessors.getMethodIDOf(
      _classRef,
      "createIconBitmap",
      "(Landroid/content/Context;)Landroid/graphics/Bitmap;");

  /// from: public android.graphics.Bitmap createIconBitmap(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates and returns an icon {@code Bitmap} to represent this {@code SubscriptionInfo} in a user
  /// interface.
  ///@param context A {@code Context} to get the {@code DisplayMetrics}s from.
  ///@return A bitmap icon for this {@code SubscriptionInfo}.
  bitmap_.Bitmap createIconBitmap(context_.Context context) =>
      bitmap_.Bitmap.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createIconBitmap,
          jni.JniType.objectType,
          [context.reference]).object);

  static final _id_getIconTint =
      jniAccessors.getMethodIDOf(_classRef, "getIconTint", "()I");

  /// from: public int getIconTint()
  ///
  /// A highlight color to use in displaying information about this {@code PhoneAccount}.
  ///@return A hexadecimal color value.
  int getIconTint() => jniAccessors.callMethodWithArgs(
      reference, _id_getIconTint, jni.JniType.intType, []).integer;

  static final _id_getNumber = jniAccessors.getMethodIDOf(
      _classRef, "getNumber", "()Ljava/lang/String;");

  /// from: public java.lang.String getNumber()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the number of this subscription.
  jni.JniString getNumber() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getNumber, jni.JniType.objectType, []).object);

  static final _id_getDataRoaming =
      jniAccessors.getMethodIDOf(_classRef, "getDataRoaming", "()I");

  /// from: public int getDataRoaming()
  ///
  /// @return the data roaming state for this subscription, either
  /// SubscriptionManager\#DATA_ROAMING_ENABLE or SubscriptionManager\#DATA_ROAMING_DISABLE.
  int getDataRoaming() => jniAccessors.callMethodWithArgs(
      reference, _id_getDataRoaming, jni.JniType.intType, []).integer;

  static final _id_getMcc =
      jniAccessors.getMethodIDOf(_classRef, "getMcc", "()I");

  /// from: public int getMcc()
  ///
  /// @return the MCC.
  int getMcc() => jniAccessors.callMethodWithArgs(
      reference, _id_getMcc, jni.JniType.intType, []).integer;

  static final _id_getMnc =
      jniAccessors.getMethodIDOf(_classRef, "getMnc", "()I");

  /// from: public int getMnc()
  ///
  /// @return the MNC.
  int getMnc() => jniAccessors.callMethodWithArgs(
      reference, _id_getMnc, jni.JniType.intType, []).integer;

  static final _id_getCountryIso = jniAccessors.getMethodIDOf(
      _classRef, "getCountryIso", "()Ljava/lang/String;");

  /// from: public java.lang.String getCountryIso()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return the ISO country code
  jni.JniString getCountryIso() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getCountryIso, jni.JniType.objectType, []).object);

  static final _id_isEmbedded =
      jniAccessors.getMethodIDOf(_classRef, "isEmbedded", "()Z");

  /// from: public boolean isEmbedded()
  ///
  /// @return whether the subscription is an eUICC one.
  bool isEmbedded() => jniAccessors.callMethodWithArgs(
      reference, _id_isEmbedded, jni.JniType.booleanType, []).boolean;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
