// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.NetworkScan
///
/// The caller of
/// TelephonyManager\#requestNetworkScan(NetworkScanRequest, Executor, NetworkScanCallback)
/// will receive an instance of NetworkScan, which contains a callback method
/// \#stopScan() for stopping the in-progress scan.
class NetworkScan extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/NetworkScan");
  NetworkScan.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int ERROR_INTERRUPTED
  ///
  /// The scan has been interrupted by another scan with higher priority.
  static const ERROR_INTERRUPTED = 10002;

  /// from: static public final int ERROR_INVALID_SCAN
  ///
  /// The parameters of the scan is invalid.
  static const ERROR_INVALID_SCAN = 2;

  /// from: static public final int ERROR_INVALID_SCANID
  ///
  /// The scan ID is invalid. The user is either trying to stop a scan which does not exist
  /// or started by others.
  static const ERROR_INVALID_SCANID = 10001;

  /// from: static public final int ERROR_MODEM_ERROR
  ///
  /// The scan has failed due to some modem errors.
  static const ERROR_MODEM_ERROR = 1;

  /// from: static public final int ERROR_MODEM_UNAVAILABLE
  ///
  /// The modem can not perform the scan because it is doing something else.
  static const ERROR_MODEM_UNAVAILABLE = 3;

  /// from: static public final int ERROR_RADIO_INTERFACE_ERROR
  ///
  /// The RIL returns nothing or exceptions.
  static const ERROR_RADIO_INTERFACE_ERROR = 10000;

  /// from: static public final int ERROR_UNSUPPORTED
  ///
  /// The modem does not support the request scan.
  static const ERROR_UNSUPPORTED = 4;

  /// from: static public final int SUCCESS
  ///
  /// The RIL has successfully performed the network scan.
  static const SUCCESS = 0;

  static final _id_stopScan =
      jniAccessors.getMethodIDOf(_classRef, "stopScan", "()V");

  /// from: public void stopScan()
  ///
  /// Stops the network scan
  ///
  /// Use this method to stop an ongoing scan. When user requests a new scan, a NetworkScan
  /// object will be returned, and the user can stop the scan by calling this method.
  void stopScan() => jniAccessors.callMethodWithArgs(
      reference, _id_stopScan, jni.JniType.voidType, []).check();
}
