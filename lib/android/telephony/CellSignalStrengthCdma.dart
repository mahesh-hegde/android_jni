// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "CellSignalStrength.dart" as cellsignalstrength_;

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.telephony.CellSignalStrengthCdma
///
/// Signal strength related information.
class CellSignalStrengthCdma extends cellsignalstrength_.CellSignalStrength {
  static final _classRef =
      jniAccessors.getClassOf("android/telephony/CellSignalStrengthCdma");
  CellSignalStrengthCdma.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.telephony.CellSignalStrengthCdma> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Implement the Parcelable interface
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  CellSignalStrengthCdma()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getLevel =
      jniAccessors.getMethodIDOf(_classRef, "getLevel", "()I");

  /// from: public int getLevel()
  ///
  /// Get signal level as an int from 0..4
  int getLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getLevel, jni.JniType.intType, []).integer;

  static final _id_getAsuLevel =
      jniAccessors.getMethodIDOf(_classRef, "getAsuLevel", "()I");

  /// from: public int getAsuLevel()
  ///
  /// Get the signal level as an asu value between 0..97, 99 is unknown
  int getAsuLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getAsuLevel, jni.JniType.intType, []).integer;

  static final _id_getCdmaLevel =
      jniAccessors.getMethodIDOf(_classRef, "getCdmaLevel", "()I");

  /// from: public int getCdmaLevel()
  ///
  /// Get cdma as level 0..4
  int getCdmaLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getCdmaLevel, jni.JniType.intType, []).integer;

  static final _id_getEvdoLevel =
      jniAccessors.getMethodIDOf(_classRef, "getEvdoLevel", "()I");

  /// from: public int getEvdoLevel()
  ///
  /// Get Evdo as level 0..4
  int getEvdoLevel() => jniAccessors.callMethodWithArgs(
      reference, _id_getEvdoLevel, jni.JniType.intType, []).integer;

  static final _id_getDbm =
      jniAccessors.getMethodIDOf(_classRef, "getDbm", "()I");

  /// from: public int getDbm()
  ///
  /// Get the signal strength as dBm
  int getDbm() => jniAccessors.callMethodWithArgs(
      reference, _id_getDbm, jni.JniType.intType, []).integer;

  static final _id_getCdmaDbm =
      jniAccessors.getMethodIDOf(_classRef, "getCdmaDbm", "()I");

  /// from: public int getCdmaDbm()
  ///
  /// Get the CDMA RSSI value in dBm
  int getCdmaDbm() => jniAccessors.callMethodWithArgs(
      reference, _id_getCdmaDbm, jni.JniType.intType, []).integer;

  static final _id_getCdmaEcio =
      jniAccessors.getMethodIDOf(_classRef, "getCdmaEcio", "()I");

  /// from: public int getCdmaEcio()
  ///
  /// Get the CDMA Ec/Io value in dB*10
  int getCdmaEcio() => jniAccessors.callMethodWithArgs(
      reference, _id_getCdmaEcio, jni.JniType.intType, []).integer;

  static final _id_getEvdoDbm =
      jniAccessors.getMethodIDOf(_classRef, "getEvdoDbm", "()I");

  /// from: public int getEvdoDbm()
  ///
  /// Get the EVDO RSSI value in dBm
  int getEvdoDbm() => jniAccessors.callMethodWithArgs(
      reference, _id_getEvdoDbm, jni.JniType.intType, []).integer;

  static final _id_getEvdoEcio =
      jniAccessors.getMethodIDOf(_classRef, "getEvdoEcio", "()I");

  /// from: public int getEvdoEcio()
  ///
  /// Get the EVDO Ec/Io value in dB*10
  int getEvdoEcio() => jniAccessors.callMethodWithArgs(
      reference, _id_getEvdoEcio, jni.JniType.intType, []).integer;

  static final _id_getEvdoSnr =
      jniAccessors.getMethodIDOf(_classRef, "getEvdoSnr", "()I");

  /// from: public int getEvdoSnr()
  ///
  /// Get the signal to noise ratio. Valid values are 0-8. 8 is the highest.
  int getEvdoSnr() => jniAccessors.callMethodWithArgs(
      reference, _id_getEvdoSnr, jni.JniType.intType, []).integer;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  bool equals1(jni.JniObject o) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [o.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return string representation.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  ///
  /// Implement the Parcelable interface
  void writeToParcel(parcel_.Parcel dest, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [dest.reference, flags]).check();

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  ///
  /// Implement the Parcelable interface
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;
}
