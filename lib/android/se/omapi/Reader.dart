// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Session.dart" as session_;

import "SEService.dart" as seservice_;
import "../../../_init.dart" show jniEnv, jniAccessors;

/// from: android.se.omapi.Reader
///
/// Instances of this class represent Secure Element Readers supported to this
/// device. These Readers can be physical devices or virtual devices. They can be
/// removable or not. They can contain Secure Element that can or cannot be
/// removed.
///@see <a href="http://globalplatform.org">GlobalPlatform Open Mobile API</a>
class Reader extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/se/omapi/Reader");
  Reader.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getName =
      jniAccessors.getMethodIDOf(_classRef, "getName", "()Ljava/lang/String;");

  /// from: public java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the name of this reader.
  /// <ul>
  /// <li>If this reader is a SIM reader, then its name must be "SIM[Slot]".</li>
  /// <li>If the reader is a SD or micro SD reader, then its name must be "SD[Slot]"</li>
  /// <li>If the reader is a embedded SE reader, then its name must be "eSE[Slot]"</li>
  /// </ul>
  /// Slot is a decimal number without leading zeros. The Numbering must start with 1
  /// (e.g. SIM1, SIM2, ... or SD1, SD2, ... or eSE1, eSE2, ...).
  /// The slot number \u201c1\u201d for a reader is optional
  /// (SIM and SIM1 are both valid for the first SIM-reader,
  /// but if there are two readers then the second reader must be named SIM2).
  /// This applies also for other SD or SE readers.
  ///@return the reader name, as a String.
  ///
  /// This value will never be {@code null}.
  jni.JniString getName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_openSession = jniAccessors.getMethodIDOf(
      _classRef, "openSession", "()Landroid/se/omapi/Session;");

  /// from: public android.se.omapi.Session openSession()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Connects to a Secure Element in this reader. <br>
  /// This method prepares (initialises) the Secure Element for communication
  /// before the Session object is returned (e.g. powers the Secure Element by
  /// ICC ON if its not already on). There might be multiple sessions opened at
  /// the same time on the same reader. The system ensures the interleaving of
  /// APDUs between the respective sessions.
  ///@throws IOException if something went wrong with the communicating to the
  ///             Secure Element or the reader.
  ///@return a Session object to be used to create Channels.
  ///
  /// This value will never be {@code null}.
  session_.Session openSession() =>
      session_.Session.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_openSession, jni.JniType.objectType, []).object);

  static final _id_isSecureElementPresent =
      jniAccessors.getMethodIDOf(_classRef, "isSecureElementPresent", "()Z");

  /// from: public boolean isSecureElementPresent()
  ///
  /// Check if a Secure Element is present in this reader.
  ///@throws IllegalStateException if the service is not connected
  ///@return <code>true</code> if the SE is present, <code>false</code> otherwise.
  bool isSecureElementPresent() => jniAccessors.callMethodWithArgs(reference,
      _id_isSecureElementPresent, jni.JniType.booleanType, []).boolean;

  static final _id_getSEService = jniAccessors.getMethodIDOf(
      _classRef, "getSEService", "()Landroid/se/omapi/SEService;");

  /// from: public android.se.omapi.SEService getSEService()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the Secure Element service this reader is bound to.
  ///@return the SEService object.
  ///
  /// This value will never be {@code null}.
  seservice_.SEService getSEService() =>
      seservice_.SEService.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getSEService, jni.JniType.objectType, []).object);

  static final _id_closeSessions =
      jniAccessors.getMethodIDOf(_classRef, "closeSessions", "()V");

  /// from: public void closeSessions()
  ///
  /// Close all the sessions opened on this reader.
  /// All the channels opened by all these sessions will be closed.
  void closeSessions() => jniAccessors.callMethodWithArgs(
      reference, _id_closeSessions, jni.JniType.voidType, []).check();
}
