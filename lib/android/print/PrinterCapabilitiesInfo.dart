// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "PrintAttributes.dart" as printattributes_;

import "../os/Parcel.dart" as parcel_;

import "PrinterId.dart" as printerid_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.print.PrinterCapabilitiesInfo
///
/// This class represents the capabilities of a printer. Instances
/// of this class are created by a print service to report the
/// capabilities of a printer it manages. The capabilities of a
/// printer specify how it can print content. For example, what
/// are the media sizes supported by the printer, what are the
/// minimal margins of the printer based on its technical design,
/// etc.
class PrinterCapabilitiesInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/print/PrinterCapabilitiesInfo");
  PrinterCapabilitiesInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.print.PrinterCapabilitiesInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  PrinterCapabilitiesInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getMediaSizes = jniAccessors.getMethodIDOf(
      _classRef, "getMediaSizes", "()Ljava/util/List;");

  /// from: public java.util.List<android.print.PrintAttributes.MediaSize> getMediaSizes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the supported media sizes.
  ///@return The media sizes.
  ///
  /// This value will never be {@code null}.
  jni.JniObject getMediaSizes() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getMediaSizes, jni.JniType.objectType, []).object);

  static final _id_getResolutions = jniAccessors.getMethodIDOf(
      _classRef, "getResolutions", "()Ljava/util/List;");

  /// from: public java.util.List<android.print.PrintAttributes.Resolution> getResolutions()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the supported resolutions.
  ///@return The resolutions.
  ///
  /// This value will never be {@code null}.
  jni.JniObject getResolutions() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getResolutions, jni.JniType.objectType, []).object);

  static final _id_getMinMargins = jniAccessors.getMethodIDOf(
      _classRef, "getMinMargins", "()Landroid/print/PrintAttributes\$Margins;");

  /// from: public android.print.PrintAttributes.Margins getMinMargins()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the minimal margins. These are the minimal margins
  /// the printer physically supports.
  ///@return The minimal margins.
  ///
  /// This value will never be {@code null}.
  printattributes_.PrintAttributes_Margins getMinMargins() =>
      printattributes_.PrintAttributes_Margins.fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_getMinMargins, jni.JniType.objectType, []).object);

  static final _id_getColorModes =
      jniAccessors.getMethodIDOf(_classRef, "getColorModes", "()I");

  /// from: public int getColorModes()
  ///
  /// Gets the bit mask of supported color modes.
  ///@return The bit mask of supported color modes.
  ///
  /// Value is either <code>0</code> or a combination of android.print.PrintAttributes\#COLOR_MODE_MONOCHROME, and android.print.PrintAttributes\#COLOR_MODE_COLOR
  ///@see PrintAttributes\#COLOR_MODE_COLOR
  ///@see PrintAttributes\#COLOR_MODE_MONOCHROME
  int getColorModes() => jniAccessors.callMethodWithArgs(
      reference, _id_getColorModes, jni.JniType.intType, []).integer;

  static final _id_getDuplexModes =
      jniAccessors.getMethodIDOf(_classRef, "getDuplexModes", "()I");

  /// from: public int getDuplexModes()
  ///
  /// Gets the bit mask of supported duplex modes.
  ///@return The bit mask of supported duplex modes.
  ///
  /// Value is either <code>0</code> or a combination of android.print.PrintAttributes\#DUPLEX_MODE_NONE, android.print.PrintAttributes\#DUPLEX_MODE_LONG_EDGE, and android.print.PrintAttributes\#DUPLEX_MODE_SHORT_EDGE
  ///@see PrintAttributes\#DUPLEX_MODE_NONE
  ///@see PrintAttributes\#DUPLEX_MODE_LONG_EDGE
  ///@see PrintAttributes\#DUPLEX_MODE_SHORT_EDGE
  int getDuplexModes() => jniAccessors.callMethodWithArgs(
      reference, _id_getDuplexModes, jni.JniType.intType, []).integer;

  static final _id_getDefaults = jniAccessors.getMethodIDOf(
      _classRef, "getDefaults", "()Landroid/print/PrintAttributes;");

  /// from: public android.print.PrintAttributes getDefaults()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the default print attributes.
  ///@return The default attributes.
  ///
  /// This value will never be {@code null}.
  printattributes_.PrintAttributes getDefaults() =>
      printattributes_.PrintAttributes.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDefaults, jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.print.PrinterCapabilitiesInfo$Builder
///
/// Builder for creating of a PrinterCapabilitiesInfo. This class is
/// responsible to enforce that all required attributes have at least one
/// default value. In other words, this class creates only well-formed PrinterCapabilitiesInfos.
///
/// Look at the individual methods for a reference whether a property is
/// required or if it is optional.
///
///
class PrinterCapabilitiesInfo_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/print/PrinterCapabilitiesInfo\$Builder");
  PrinterCapabilitiesInfo_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/print/PrinterId;)V");

  /// from: public void <init>(android.print.PrinterId printerId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new instance.
  ///@param printerId The printer id. Cannot be <code>null</code>.
  ///
  /// This value must never be {@code null}.
  ///@throws IllegalArgumentException If the printer id is <code>null</code>.
  PrinterCapabilitiesInfo_Builder(printerid_.PrinterId printerId)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [printerId.reference]).object);

  static final _id_addMediaSize = jniAccessors.getMethodIDOf(
      _classRef,
      "addMediaSize",
      "(Landroid/print/PrintAttributes\$MediaSize;Z)Landroid/print/PrinterCapabilitiesInfo\$Builder;");

  /// from: public android.print.PrinterCapabilitiesInfo.Builder addMediaSize(android.print.PrintAttributes.MediaSize mediaSize, boolean isDefault)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a supported media size.
  ///
  /// <strong>Required:</strong> Yes
  ///
  ///
  ///@param mediaSize A media size.
  /// This value must never be {@code null}.
  ///@param isDefault Whether this is the default.
  ///@return This builder.
  /// This value will never be {@code null}.
  ///@throws IllegalArgumentException If set as default and there
  ///     is already a default.
  ///@see PrintAttributes.MediaSize
  PrinterCapabilitiesInfo_Builder addMediaSize(
          printattributes_.PrintAttributes_MediaSize mediaSize,
          bool isDefault) =>
      PrinterCapabilitiesInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addMediaSize,
          jni.JniType.objectType,
          [mediaSize.reference, isDefault]).object);

  static final _id_addResolution = jniAccessors.getMethodIDOf(
      _classRef,
      "addResolution",
      "(Landroid/print/PrintAttributes\$Resolution;Z)Landroid/print/PrinterCapabilitiesInfo\$Builder;");

  /// from: public android.print.PrinterCapabilitiesInfo.Builder addResolution(android.print.PrintAttributes.Resolution resolution, boolean isDefault)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a supported resolution.
  ///
  /// <strong>Required:</strong> Yes
  ///
  ///
  ///@param resolution A resolution.
  /// This value must never be {@code null}.
  ///@param isDefault Whether this is the default.
  ///@return This builder.
  ///
  /// This value will never be {@code null}.
  ///@throws IllegalArgumentException If set as default and there
  ///     is already a default.
  ///@see PrintAttributes.Resolution
  PrinterCapabilitiesInfo_Builder addResolution(
          printattributes_.PrintAttributes_Resolution resolution,
          bool isDefault) =>
      PrinterCapabilitiesInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addResolution,
          jni.JniType.objectType,
          [resolution.reference, isDefault]).object);

  static final _id_setMinMargins = jniAccessors.getMethodIDOf(
      _classRef,
      "setMinMargins",
      "(Landroid/print/PrintAttributes\$Margins;)Landroid/print/PrinterCapabilitiesInfo\$Builder;");

  /// from: public android.print.PrinterCapabilitiesInfo.Builder setMinMargins(android.print.PrintAttributes.Margins margins)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the minimal margins. These are the minimal margins
  /// the printer physically supports.
  ///
  ///
  /// <strong>Required:</strong> Yes
  ///
  ///
  ///@param margins The margins.
  /// This value must never be {@code null}.
  ///@return This builder.
  ///@throws IllegalArgumentException If margins are <code>null</code>.
  ///@see PrintAttributes.Margins
  PrinterCapabilitiesInfo_Builder setMinMargins(
          printattributes_.PrintAttributes_Margins margins) =>
      PrinterCapabilitiesInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setMinMargins,
          jni.JniType.objectType,
          [margins.reference]).object);

  static final _id_setColorModes = jniAccessors.getMethodIDOf(_classRef,
      "setColorModes", "(II)Landroid/print/PrinterCapabilitiesInfo\$Builder;");

  /// from: public android.print.PrinterCapabilitiesInfo.Builder setColorModes(int colorModes, int defaultColorMode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the color modes.
  ///
  /// <strong>Required:</strong> Yes
  ///
  ///
  ///@param colorModes The color mode bit mask.
  /// Value is either <code>0</code> or a combination of android.print.PrintAttributes\#COLOR_MODE_MONOCHROME, and android.print.PrintAttributes\#COLOR_MODE_COLOR
  ///@param defaultColorMode The default color mode.
  /// Value is either <code>0</code> or a combination of android.print.PrintAttributes\#COLOR_MODE_MONOCHROME, and android.print.PrintAttributes\#COLOR_MODE_COLOR
  ///@return This builder.
  ///
  /// <strong>Note:</strong> On platform version 19 (KitKat) specifying
  /// only PrintAttributes\#COLOR_MODE_MONOCHROME leads to a print spooler
  /// crash. Hence, you should declare either both color modes or
  /// PrintAttributes\#COLOR_MODE_COLOR.
  ///
  ///
  ///
  /// This value will never be {@code null}.
  ///@throws IllegalArgumentException If color modes contains an invalid
  ///         mode bit or if the default color mode is invalid.
  ///@see PrintAttributes\#COLOR_MODE_COLOR
  ///@see PrintAttributes\#COLOR_MODE_MONOCHROME
  PrinterCapabilitiesInfo_Builder setColorModes(
          int colorModes, int defaultColorMode) =>
      PrinterCapabilitiesInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setColorModes,
          jni.JniType.objectType,
          [colorModes, defaultColorMode]).object);

  static final _id_setDuplexModes = jniAccessors.getMethodIDOf(_classRef,
      "setDuplexModes", "(II)Landroid/print/PrinterCapabilitiesInfo\$Builder;");

  /// from: public android.print.PrinterCapabilitiesInfo.Builder setDuplexModes(int duplexModes, int defaultDuplexMode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the duplex modes.
  ///
  /// <strong>Required:</strong> No
  ///
  ///
  ///@param duplexModes The duplex mode bit mask.
  /// Value is either <code>0</code> or a combination of android.print.PrintAttributes\#DUPLEX_MODE_NONE, android.print.PrintAttributes\#DUPLEX_MODE_LONG_EDGE, and android.print.PrintAttributes\#DUPLEX_MODE_SHORT_EDGE
  ///@param defaultDuplexMode The default duplex mode.
  /// Value is either <code>0</code> or a combination of android.print.PrintAttributes\#DUPLEX_MODE_NONE, android.print.PrintAttributes\#DUPLEX_MODE_LONG_EDGE, and android.print.PrintAttributes\#DUPLEX_MODE_SHORT_EDGE
  ///@return This builder.
  ///
  /// This value will never be {@code null}.
  ///@throws IllegalArgumentException If duplex modes contains an invalid
  ///         mode bit or if the default duplex mode is invalid.
  ///@see PrintAttributes\#DUPLEX_MODE_NONE
  ///@see PrintAttributes\#DUPLEX_MODE_LONG_EDGE
  ///@see PrintAttributes\#DUPLEX_MODE_SHORT_EDGE
  PrinterCapabilitiesInfo_Builder setDuplexModes(
          int duplexModes, int defaultDuplexMode) =>
      PrinterCapabilitiesInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setDuplexModes,
          jni.JniType.objectType,
          [duplexModes, defaultDuplexMode]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/print/PrinterCapabilitiesInfo;");

  /// from: public android.print.PrinterCapabilitiesInfo build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Crates a new PrinterCapabilitiesInfo enforcing that all
  /// required properties have been specified. See individual methods
  /// in this class for reference about required attributes.
  ///
  /// <strong>Note:</strong> If you do not add supported duplex modes,
  /// android.print.PrintAttributes\#DUPLEX_MODE_NONE will set
  /// as the only supported mode and also as the default duplex mode.
  ///
  ///
  ///@return A new PrinterCapabilitiesInfo.
  ///
  /// This value will never be {@code null}.
  ///@throws IllegalStateException If a required attribute was not specified.
  PrinterCapabilitiesInfo build() =>
      PrinterCapabilitiesInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
