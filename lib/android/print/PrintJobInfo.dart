// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "PrintJobId.dart" as printjobid_;

import "PrinterId.dart" as printerid_;

import "PrintAttributes.dart" as printattributes_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.print.PrintJobInfo
///
/// This class represents the description of a print job. The print job
/// state includes properties such as its id, print attributes used for
/// generating the content, and so on. Note that the print jobs state may
/// change over time and this class represents a snapshot of this state.
class PrintJobInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/print/PrintJobInfo");
  PrintJobInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.print.PrintJobInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int STATE_BLOCKED
  ///
  /// Print job state: The print job is blocked.
  ///
  /// Next valid states: \#STATE_FAILED, \#STATE_CANCELED,
  /// \#STATE_STARTED
  ///
  ///
  static const STATE_BLOCKED = 4;

  /// from: static public final int STATE_CANCELED
  ///
  /// Print job state: The print job is canceled.
  /// This is a terminal state.
  ///
  /// Next valid states: None
  ///
  ///
  static const STATE_CANCELED = 7;

  /// from: static public final int STATE_COMPLETED
  ///
  /// Print job state: The print job is successfully printed.
  /// This is a terminal state.
  ///
  /// Next valid states: None
  ///
  ///
  static const STATE_COMPLETED = 5;

  /// from: static public final int STATE_CREATED
  ///
  /// Print job state: The print job is being created but not yet
  /// ready to be printed.
  ///
  /// Next valid states: \#STATE_QUEUED
  ///
  ///
  static const STATE_CREATED = 1;

  /// from: static public final int STATE_FAILED
  ///
  /// Print job state: The print job was printing but printing failed.
  ///
  /// Next valid states: \#STATE_CANCELED, \#STATE_STARTED
  ///
  ///
  static const STATE_FAILED = 6;

  /// from: static public final int STATE_QUEUED
  ///
  /// Print job state: The print jobs is created, it is ready
  /// to be printed and should be processed.
  ///
  /// Next valid states: \#STATE_STARTED, \#STATE_FAILED,
  /// \#STATE_CANCELED
  ///
  ///
  static const STATE_QUEUED = 2;

  /// from: static public final int STATE_STARTED
  ///
  /// Print job state: The print job is being printed.
  ///
  /// Next valid states: \#STATE_COMPLETED, \#STATE_FAILED,
  /// \#STATE_CANCELED, \#STATE_BLOCKED
  ///
  ///
  static const STATE_STARTED = 3;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @hide
  PrintJobInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getId = jniAccessors.getMethodIDOf(
      _classRef, "getId", "()Landroid/print/PrintJobId;");

  /// from: public android.print.PrintJobId getId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the unique print job id.
  ///@return The id.
  ///
  /// This value may be {@code null}.
  printjobid_.PrintJobId getId() =>
      printjobid_.PrintJobId.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getId, jni.JniType.objectType, []).object);

  static final _id_getLabel =
      jniAccessors.getMethodIDOf(_classRef, "getLabel", "()Ljava/lang/String;");

  /// from: public java.lang.String getLabel()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the human readable job label.
  ///@return The label.
  ///
  /// This value will never be {@code null}.
  jni.JniString getLabel() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getLabel, jni.JniType.objectType, []).object);

  static final _id_getPrinterId = jniAccessors.getMethodIDOf(
      _classRef, "getPrinterId", "()Landroid/print/PrinterId;");

  /// from: public android.print.PrinterId getPrinterId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the unique target printer id.
  ///@return The target printer id.
  ///
  /// This value may be {@code null}.
  printerid_.PrinterId getPrinterId() =>
      printerid_.PrinterId.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPrinterId, jni.JniType.objectType, []).object);

  static final _id_getState =
      jniAccessors.getMethodIDOf(_classRef, "getState", "()I");

  /// from: public int getState()
  ///
  /// Gets the current job state.
  ///@return The job state.
  ///
  /// Value is android.print.PrintJobInfo\#STATE_CREATED, android.print.PrintJobInfo\#STATE_QUEUED, android.print.PrintJobInfo\#STATE_STARTED, android.print.PrintJobInfo\#STATE_BLOCKED, android.print.PrintJobInfo\#STATE_COMPLETED, android.print.PrintJobInfo\#STATE_FAILED, or android.print.PrintJobInfo\#STATE_CANCELED
  ///@see \#STATE_CREATED
  ///@see \#STATE_QUEUED
  ///@see \#STATE_STARTED
  ///@see \#STATE_COMPLETED
  ///@see \#STATE_BLOCKED
  ///@see \#STATE_FAILED
  ///@see \#STATE_CANCELED
  int getState() => jniAccessors.callMethodWithArgs(
      reference, _id_getState, jni.JniType.intType, []).integer;

  static final _id_getCreationTime =
      jniAccessors.getMethodIDOf(_classRef, "getCreationTime", "()J");

  /// from: public long getCreationTime()
  ///
  /// Gets the wall time in millisecond when this print job was created.
  ///@return The creation time in milliseconds.
  int getCreationTime() => jniAccessors.callMethodWithArgs(
      reference, _id_getCreationTime, jni.JniType.longType, []).long;

  static final _id_getCopies =
      jniAccessors.getMethodIDOf(_classRef, "getCopies", "()I");

  /// from: public int getCopies()
  ///
  /// Gets the number of copies.
  ///@return The number of copies or zero if not set.
  ///
  /// Value is 0 or greater
  int getCopies() => jniAccessors.callMethodWithArgs(
      reference, _id_getCopies, jni.JniType.intType, []).integer;

  static final _id_getPages = jniAccessors.getMethodIDOf(
      _classRef, "getPages", "()[Landroid/print/PageRange;");

  /// from: public android.print.PageRange[] getPages()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the included pages.
  ///@return The included pages or <code>null</code> if not set.
  jni.JniObject getPages() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPages, jni.JniType.objectType, []).object);

  static final _id_getAttributes = jniAccessors.getMethodIDOf(
      _classRef, "getAttributes", "()Landroid/print/PrintAttributes;");

  /// from: public android.print.PrintAttributes getAttributes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the print job attributes.
  ///@return The attributes.
  ///
  /// This value will never be {@code null}.
  printattributes_.PrintAttributes getAttributes() =>
      printattributes_.PrintAttributes.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getAttributes, jni.JniType.objectType, []).object);

  static final _id_hasAdvancedOption = jniAccessors.getMethodIDOf(
      _classRef, "hasAdvancedOption", "(Ljava/lang/String;)Z");

  /// from: public boolean hasAdvancedOption(java.lang.String key)
  ///
  /// Gets whether this job has a given advanced (printer specific) print
  /// option.
  ///@param key The option key.
  ///@return Whether the option is present.
  bool hasAdvancedOption(jni.JniString key) => jniAccessors.callMethodWithArgs(
      reference,
      _id_hasAdvancedOption,
      jni.JniType.booleanType,
      [key.reference]).boolean;

  static final _id_getAdvancedStringOption = jniAccessors.getMethodIDOf(
      _classRef,
      "getAdvancedStringOption",
      "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getAdvancedStringOption(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the value of an advanced (printer specific) print option.
  ///@param key The option key.
  ///@return The option value.
  jni.JniString getAdvancedStringOption(jni.JniString key) =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getAdvancedStringOption,
          jni.JniType.objectType,
          [key.reference]).object);

  static final _id_getAdvancedIntOption = jniAccessors.getMethodIDOf(
      _classRef, "getAdvancedIntOption", "(Ljava/lang/String;)I");

  /// from: public int getAdvancedIntOption(java.lang.String key)
  ///
  /// Gets the value of an advanced (printer specific) print option.
  ///@param key The option key.
  ///@return The option value.
  int getAdvancedIntOption(jni.JniString key) =>
      jniAccessors.callMethodWithArgs(reference, _id_getAdvancedIntOption,
          jni.JniType.intType, [key.reference]).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.print.PrintJobInfo$Builder
///
/// Builder for creating a PrintJobInfo.
class PrintJobInfo_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/print/PrintJobInfo\$Builder");
  PrintJobInfo_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/print/PrintJobInfo;)V");

  /// from: public void <init>(android.print.PrintJobInfo prototype)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param prototype Prototype to use as a starting point.
  /// Can be <code>null</code>.
  ///
  /// This value may be {@code null}.
  PrintJobInfo_Builder(PrintJobInfo prototype)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [prototype.reference]).object);

  static final _id_setCopies =
      jniAccessors.getMethodIDOf(_classRef, "setCopies", "(I)V");

  /// from: public void setCopies(int copies)
  ///
  /// Sets the number of copies.
  ///@param copies The number of copies.
  ///
  /// Value is 1 or greater
  void setCopies(int copies) => jniAccessors.callMethodWithArgs(
      reference, _id_setCopies, jni.JniType.voidType, [copies]).check();

  static final _id_setAttributes = jniAccessors.getMethodIDOf(
      _classRef, "setAttributes", "(Landroid/print/PrintAttributes;)V");

  /// from: public void setAttributes(android.print.PrintAttributes attributes)
  ///
  /// Sets the print job attributes.
  ///@param attributes The attributes.
  ///
  /// This value must never be {@code null}.
  void setAttributes(printattributes_.PrintAttributes attributes) =>
      jniAccessors.callMethodWithArgs(reference, _id_setAttributes,
          jni.JniType.voidType, [attributes.reference]).check();

  static final _id_setPages = jniAccessors.getMethodIDOf(
      _classRef, "setPages", "([Landroid/print/PageRange;)V");

  /// from: public void setPages(android.print.PageRange[] pages)
  ///
  /// Sets the included pages.
  ///@param pages The included pages.
  ///
  /// This value must never be {@code null}.
  void setPages(jni.JniObject pages) => jniAccessors.callMethodWithArgs(
      reference, _id_setPages, jni.JniType.voidType, [pages.reference]).check();

  static final _id_putAdvancedOption = jniAccessors.getMethodIDOf(_classRef,
      "putAdvancedOption", "(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void putAdvancedOption(java.lang.String key, java.lang.String value)
  ///
  /// Puts an advanced (printer specific) option.
  ///@param key The option key.
  /// This value must never be {@code null}.
  ///@param value The option value.
  ///
  /// This value may be {@code null}.
  void putAdvancedOption(jni.JniString key, jni.JniString value) =>
      jniAccessors.callMethodWithArgs(reference, _id_putAdvancedOption,
          jni.JniType.voidType, [key.reference, value.reference]).check();

  static final _id_putAdvancedOption1 = jniAccessors.getMethodIDOf(
      _classRef, "putAdvancedOption", "(Ljava/lang/String;I)V");

  /// from: public void putAdvancedOption(java.lang.String key, int value)
  ///
  /// Puts an advanced (printer specific) option.
  ///@param key The option key.
  /// This value must never be {@code null}.
  ///@param value The option value.
  void putAdvancedOption1(jni.JniString key, int value) =>
      jniAccessors.callMethodWithArgs(reference, _id_putAdvancedOption1,
          jni.JniType.voidType, [key.reference, value]).check();

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/print/PrintJobInfo;");

  /// from: public android.print.PrintJobInfo build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new PrintJobInfo instance.
  ///@return The new instance.
  ///
  /// This value will never be {@code null}.
  PrintJobInfo build() => PrintJobInfo.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
