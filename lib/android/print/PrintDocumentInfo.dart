// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.print.PrintDocumentInfo
///
/// This class encapsulates information about a document for printing
/// purposes. This meta-data is used by the platform and print services,
/// components that interact with printers. For example, this class
/// contains the number of pages contained in the document it describes and
/// this number of pages is shown to the user allowing him/her to select
/// the range to print. Also a print service may optimize the printing
/// process based on the content type, such as document or photo.
///
/// Instances of this class are created by the printing application and
/// passed to the PrintDocumentAdapter.LayoutResultCallback\#onLayoutFinished(
/// PrintDocumentInfo, boolean) PrintDocumentAdapter.LayoutResultCallback.onLayoutFinished(
/// PrintDocumentInfo, boolean) callback after successfully laying out the
/// content which is performed in PrintDocumentAdapter\#onLayout(PrintAttributes,
/// PrintAttributes, android.os.CancellationSignal, PrintDocumentAdapter.LayoutResultCallback,
/// android.os.Bundle) PrintDocumentAdapter.onLayout(PrintAttributes,
/// PrintAttributes, android.os.CancellationSignal,
/// PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle).
///
///
///
/// An example usage looks like this:
/// <pre>
///
/// . . .
///
/// public void onLayout(PrintAttributes oldAttributes, PrintAttributes newAttributes,
///         CancellationSignal cancellationSignal, LayoutResultCallback callback,
///         Bundle metadata) {
///
///        // Assume the app defined a LayoutResult class which contains
///        // the layout result data and that the content is a document.
///        LayoutResult result = doSomeLayoutWork();
///
///        PrintDocumentInfo info = new PrintDocumentInfo
///                .Builder("printed_file.pdf")
///                .setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)
///                .setPageCount(result.getPageCount())
///                .build();
///
///       callback.onLayoutFinished(info, result.getContentChanged());
///   }
///
///   . . .
///
/// </pre>
///
///
class PrintDocumentInfo extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/print/PrintDocumentInfo");
  PrintDocumentInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  /// from: static public final int CONTENT_TYPE_DOCUMENT
  ///
  /// Content type: document.
  ///
  /// A print service may use normal paper to print the content instead
  /// of dedicated photo paper. Also it may use a lower quality printing
  /// process as the content is not as sensitive to print quality variation
  /// as a photo is.
  ///
  ///
  static const CONTENT_TYPE_DOCUMENT = 0;

  /// from: static public final int CONTENT_TYPE_PHOTO
  ///
  /// Content type: photo.
  ///
  /// A print service may use dedicated photo paper to print the content
  /// instead of normal paper. Also it may use a higher quality printing
  /// process as the content is more sensitive to print quality variation
  /// than a document.
  ///
  ///
  static const CONTENT_TYPE_PHOTO = 1;

  /// from: static public final int CONTENT_TYPE_UNKNOWN
  ///
  /// Content type: unknown.
  static const CONTENT_TYPE_UNKNOWN = -1;

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.print.PrintDocumentInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int PAGE_COUNT_UNKNOWN
  ///
  /// Constant for unknown page count.
  static const PAGE_COUNT_UNKNOWN = -1;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new instance.
  PrintDocumentInfo()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_getName =
      jniAccessors.getMethodIDOf(_classRef, "getName", "()Ljava/lang/String;");

  /// from: public java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the document name. This name may be shown to
  /// the user.
  ///@return The document name.
  ///
  /// This value will never be {@code null}.
  jni.JniString getName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_getPageCount =
      jniAccessors.getMethodIDOf(_classRef, "getPageCount", "()I");

  /// from: public int getPageCount()
  ///
  /// Gets the total number of pages.
  ///@return The number of pages.
  ///
  /// Value is -1 or greater
  ///@see \#PAGE_COUNT_UNKNOWN
  int getPageCount() => jniAccessors.callMethodWithArgs(
      reference, _id_getPageCount, jni.JniType.intType, []).integer;

  static final _id_getContentType =
      jniAccessors.getMethodIDOf(_classRef, "getContentType", "()I");

  /// from: public int getContentType()
  ///
  /// Gets the content type.
  ///@return The content type.
  ///@see \#CONTENT_TYPE_UNKNOWN
  ///@see \#CONTENT_TYPE_DOCUMENT
  ///@see \#CONTENT_TYPE_PHOTO
  int getContentType() => jniAccessors.callMethodWithArgs(
      reference, _id_getContentType, jni.JniType.intType, []).integer;

  static final _id_getDataSize =
      jniAccessors.getMethodIDOf(_classRef, "getDataSize", "()J");

  /// from: public long getDataSize()
  ///
  /// Gets the document data size in bytes.
  ///@return The data size.
  ///
  /// Value is 0 or greater
  int getDataSize() => jniAccessors.callMethodWithArgs(
      reference, _id_getDataSize, jni.JniType.longType, []).long;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.print.PrintDocumentInfo$Builder
///
/// Builder for creating a PrintDocumentInfo.
class PrintDocumentInfo_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/print/PrintDocumentInfo\$Builder");
  PrintDocumentInfo_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///
  ///
  /// The values of the relevant properties are initialized with defaults.
  /// Please refer to the documentation of the individual setters for
  /// information about the default values.
  ///
  ///
  ///@param name The document name which may be shown to the user and
  /// is the file name if the content it describes is saved as a PDF.
  /// Cannot be empty.
  ///
  /// This value must never be {@code null}.
  PrintDocumentInfo_Builder(jni.JniString name)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [name.reference]).object);

  static final _id_setPageCount = jniAccessors.getMethodIDOf(_classRef,
      "setPageCount", "(I)Landroid/print/PrintDocumentInfo\$Builder;");

  /// from: public android.print.PrintDocumentInfo.Builder setPageCount(int pageCount)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the total number of pages.
  ///
  /// <strong>Default: </strong> \#PAGE_COUNT_UNKNOWN
  ///
  ///
  ///@param pageCount The number of pages. Must be greater than or equal to zero or
  ///            PrintDocumentInfo\#PAGE_COUNT_UNKNOWN.
  /// Value is -1 or greater
  ///@return This builder.
  ///
  /// This value will never be {@code null}.
  PrintDocumentInfo_Builder setPageCount(int pageCount) =>
      PrintDocumentInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setPageCount,
          jni.JniType.objectType,
          [pageCount]).object);

  static final _id_setContentType = jniAccessors.getMethodIDOf(_classRef,
      "setContentType", "(I)Landroid/print/PrintDocumentInfo\$Builder;");

  /// from: public android.print.PrintDocumentInfo.Builder setContentType(int type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the content type.
  ///
  /// <strong>Default: </strong> \#CONTENT_TYPE_DOCUMENT
  ///
  ///
  ///@param type The content type.
  /// Value is android.print.PrintDocumentInfo\#CONTENT_TYPE_UNKNOWN, android.print.PrintDocumentInfo\#CONTENT_TYPE_DOCUMENT, or android.print.PrintDocumentInfo\#CONTENT_TYPE_PHOTO
  ///@return This builder.
  /// This value will never be {@code null}.
  ///@see \#CONTENT_TYPE_UNKNOWN
  ///@see \#CONTENT_TYPE_DOCUMENT
  ///@see \#CONTENT_TYPE_PHOTO
  PrintDocumentInfo_Builder setContentType(int type) =>
      PrintDocumentInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setContentType,
          jni.JniType.objectType,
          [type]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/print/PrintDocumentInfo;");

  /// from: public android.print.PrintDocumentInfo build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new PrintDocumentInfo instance.
  ///@return The new instance.
  ///
  /// This value will never be {@code null}.
  PrintDocumentInfo build() =>
      PrintDocumentInfo.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniType.objectType, []).object);
}
