// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;

import "PrinterId.dart" as printerid_;

import "PrinterCapabilitiesInfo.dart" as printercapabilitiesinfo_;

import "../app/PendingIntent.dart" as pendingintent_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.print.PrinterInfo
///
/// This class represents the description of a printer. Instances of
/// this class are created by print services to report to the system
/// the printers they manage. The information of this class has two
/// major components, printer properties such as name, id, status,
/// description and printer capabilities which describe the various
/// print modes a printer supports such as media sizes, margins, etc.
///
/// Once PrinterInfo.Builder\#build() built the objects are immutable.
///
///
class PrinterInfo extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/print/PrinterInfo");
  PrinterInfo.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.print.PrinterInfo> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  /// from: static public final int STATUS_BUSY
  ///
  /// Printer status: the printer is busy printing.
  static const STATUS_BUSY = 2;

  /// from: static public final int STATUS_IDLE
  ///
  /// Printer status: the printer is idle and ready to print.
  static const STATUS_IDLE = 1;

  /// from: static public final int STATUS_UNAVAILABLE
  ///
  /// Printer status: the printer is not available.
  static const STATUS_UNAVAILABLE = 3;

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Landroid/os/Parcel;)V");

  /// from: void <init>(android.os.Parcel parcel)
  /// The returned object must be deleted after use, by calling the `delete` method.
  PrinterInfo(parcel_.Parcel parcel)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [parcel.reference]).object);

  static final _id_getId = jniAccessors.getMethodIDOf(
      _classRef, "getId", "()Landroid/print/PrinterId;");

  /// from: public android.print.PrinterId getId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the globally unique printer id.
  ///@return The printer id.
  ///
  /// This value will never be {@code null}.
  printerid_.PrinterId getId() =>
      printerid_.PrinterId.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getId, jni.JniType.objectType, []).object);

  static final _id_getName =
      jniAccessors.getMethodIDOf(_classRef, "getName", "()Ljava/lang/String;");

  /// from: public java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the printer name.
  ///@return The printer name.
  ///
  /// This value will never be {@code null}.
  jni.JniString getName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getName, jni.JniType.objectType, []).object);

  static final _id_getStatus =
      jniAccessors.getMethodIDOf(_classRef, "getStatus", "()I");

  /// from: public int getStatus()
  ///
  /// Gets the printer status.
  ///@return The status.
  ///
  /// Value is android.print.PrinterInfo\#STATUS_IDLE, android.print.PrinterInfo\#STATUS_BUSY, or android.print.PrinterInfo\#STATUS_UNAVAILABLE
  ///@see \#STATUS_BUSY
  ///@see \#STATUS_IDLE
  ///@see \#STATUS_UNAVAILABLE
  int getStatus() => jniAccessors.callMethodWithArgs(
      reference, _id_getStatus, jni.JniType.intType, []).integer;

  static final _id_getDescription = jniAccessors.getMethodIDOf(
      _classRef, "getDescription", "()Ljava/lang/String;");

  /// from: public java.lang.String getDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the  printer description.
  ///@return The description.
  ///
  /// This value may be {@code null}.
  jni.JniString getDescription() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getDescription, jni.JniType.objectType, []).object);

  static final _id_getCapabilities = jniAccessors.getMethodIDOf(_classRef,
      "getCapabilities", "()Landroid/print/PrinterCapabilitiesInfo;");

  /// from: public android.print.PrinterCapabilitiesInfo getCapabilities()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the printer capabilities.
  ///@return The capabilities.
  ///
  /// This value may be {@code null}.
  printercapabilitiesinfo_.PrinterCapabilitiesInfo getCapabilities() =>
      printercapabilitiesinfo_.PrinterCapabilitiesInfo.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getCapabilities,
              jni.JniType.objectType, []).object);

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}

/// from: android.print.PrinterInfo$Builder
///
/// Builder for creating of a PrinterInfo.
class PrinterInfo_Builder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/print/PrinterInfo\$Builder");
  PrinterInfo_Builder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/print/PrinterId;Ljava/lang/String;I)V");

  /// from: public void <init>(android.print.PrinterId printerId, java.lang.String name, int status)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param printerId The printer id. Cannot be null.
  /// This value must never be {@code null}.
  ///@param name The printer name. Cannot be empty.
  /// This value must never be {@code null}.
  ///@param status The printer status. Must be a valid status.
  /// Value is android.print.PrinterInfo\#STATUS_IDLE, android.print.PrinterInfo\#STATUS_BUSY, or android.print.PrinterInfo\#STATUS_UNAVAILABLE
  ///@throws IllegalArgumentException If the printer id is null, or the
  /// printer name is empty or the status is not a valid one.
  PrinterInfo_Builder(
      printerid_.PrinterId printerId, jni.JniString name, int status)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [printerId.reference, name.reference, status]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Landroid/print/PrinterInfo;)V");

  /// from: public void <init>(android.print.PrinterInfo other)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructor.
  ///@param other Other info from which to start building.
  ///
  /// This value must never be {@code null}.
  PrinterInfo_Builder.ctor1(PrinterInfo other)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [other.reference]).object);

  static final _id_setStatus = jniAccessors.getMethodIDOf(
      _classRef, "setStatus", "(I)Landroid/print/PrinterInfo\$Builder;");

  /// from: public android.print.PrinterInfo.Builder setStatus(int status)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the printer status.
  ///@param status The status.
  /// Value is android.print.PrinterInfo\#STATUS_IDLE, android.print.PrinterInfo\#STATUS_BUSY, or android.print.PrinterInfo\#STATUS_UNAVAILABLE
  ///@return This builder.
  /// This value will never be {@code null}.
  ///@see PrinterInfo\#STATUS_IDLE
  ///@see PrinterInfo\#STATUS_BUSY
  ///@see PrinterInfo\#STATUS_UNAVAILABLE
  PrinterInfo_Builder setStatus(int status) =>
      PrinterInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_setStatus, jni.JniType.objectType, [status]).object);

  static final _id_setIconResourceId = jniAccessors.getMethodIDOf(_classRef,
      "setIconResourceId", "(I)Landroid/print/PrinterInfo\$Builder;");

  /// from: public android.print.PrinterInfo.Builder setIconResourceId(int iconResourceId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Set a drawable resource as icon for this printer. If no icon is set the printer's
  /// service's icon is used for the printer.
  ///@param iconResourceId The resource ID of the icon.
  ///@return This builder.
  /// This value will never be {@code null}.
  ///@see PrinterInfo.Builder\#setHasCustomPrinterIcon
  PrinterInfo_Builder setIconResourceId(int iconResourceId) =>
      PrinterInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setIconResourceId,
          jni.JniType.objectType,
          [iconResourceId]).object);

  static final _id_setHasCustomPrinterIcon = jniAccessors.getMethodIDOf(
      _classRef,
      "setHasCustomPrinterIcon",
      "(Z)Landroid/print/PrinterInfo\$Builder;");

  /// from: public android.print.PrinterInfo.Builder setHasCustomPrinterIcon(boolean hasCustomPrinterIcon)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Declares that the print service can load a custom per printer's icon. If both
  /// PrinterInfo.Builder\#setIconResourceId and a custom icon are set the resource icon
  /// is shown while the custom icon loads but then the custom icon is used. If
  /// PrinterInfo.Builder\#setIconResourceId is not set the printer's service's icon is
  /// shown while loading.
  ///
  /// The icon is requested asynchronously and only when needed via
  /// android.printservice.PrinterDiscoverySession\#onRequestCustomPrinterIcon.
  ///
  ///
  ///@param hasCustomPrinterIcon If the printer has a custom icon or not.
  ///@return This builder.
  ///
  /// This value will never be {@code null}.
  PrinterInfo_Builder setHasCustomPrinterIcon(bool hasCustomPrinterIcon) =>
      PrinterInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setHasCustomPrinterIcon,
          jni.JniType.objectType,
          [hasCustomPrinterIcon]).object);

  static final _id_setName = jniAccessors.getMethodIDOf(_classRef, "setName",
      "(Ljava/lang/String;)Landroid/print/PrinterInfo\$Builder;");

  /// from: public android.print.PrinterInfo.Builder setName(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the <strong>localized</strong> printer name which
  /// is shown to the user
  ///@param name The name.
  /// This value must never be {@code null}.
  ///@return This builder.
  ///
  /// This value will never be {@code null}.
  PrinterInfo_Builder setName(jni.JniString name) =>
      PrinterInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setName, jni.JniType.objectType, [name.reference]).object);

  static final _id_setDescription = jniAccessors.getMethodIDOf(
      _classRef,
      "setDescription",
      "(Ljava/lang/String;)Landroid/print/PrinterInfo\$Builder;");

  /// from: public android.print.PrinterInfo.Builder setDescription(java.lang.String description)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the <strong>localized</strong> printer description
  /// which is shown to the user
  ///@param description The description.
  /// This value must never be {@code null}.
  ///@return This builder.
  ///
  /// This value will never be {@code null}.
  PrinterInfo_Builder setDescription(jni.JniString description) =>
      PrinterInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setDescription,
          jni.JniType.objectType,
          [description.reference]).object);

  static final _id_setInfoIntent = jniAccessors.getMethodIDOf(
      _classRef,
      "setInfoIntent",
      "(Landroid/app/PendingIntent;)Landroid/print/PrinterInfo\$Builder;");

  /// from: public android.print.PrinterInfo.Builder setInfoIntent(android.app.PendingIntent infoIntent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the PendingIntent that launches an activity showing more information about
  /// the printer.
  ///@param infoIntent The PendingIntent intent.
  /// This value must never be {@code null}.
  ///@return This builder.
  ///
  /// This value will never be {@code null}.
  PrinterInfo_Builder setInfoIntent(pendingintent_.PendingIntent infoIntent) =>
      PrinterInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setInfoIntent,
          jni.JniType.objectType,
          [infoIntent.reference]).object);

  static final _id_setCapabilities = jniAccessors.getMethodIDOf(
      _classRef,
      "setCapabilities",
      "(Landroid/print/PrinterCapabilitiesInfo;)Landroid/print/PrinterInfo\$Builder;");

  /// from: public android.print.PrinterInfo.Builder setCapabilities(android.print.PrinterCapabilitiesInfo capabilities)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the printer capabilities.
  ///@param capabilities The capabilities.
  /// This value must never be {@code null}.
  ///@return This builder.
  ///
  /// This value will never be {@code null}.
  PrinterInfo_Builder setCapabilities(
          printercapabilitiesinfo_.PrinterCapabilitiesInfo capabilities) =>
      PrinterInfo_Builder.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_setCapabilities,
          jni.JniType.objectType,
          [capabilities.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Landroid/print/PrinterInfo;");

  /// from: public android.print.PrinterInfo build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new PrinterInfo.
  ///@return A new PrinterInfo.
  ///
  /// This value will never be {@code null}.
  PrinterInfo build() => PrinterInfo.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_build, jni.JniType.objectType, []).object);
}
