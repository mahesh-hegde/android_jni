// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../os/Parcelable.dart" as parcelable_;

import "../os/Parcel.dart" as parcel_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.print.PageRange
///
/// Represents a range of pages. The start and end page indices of
/// the range are zero based and inclusive.
class PageRange extends jni.JniObject {
  static final _classRef = jniAccessors.getClassOf("android/print/PageRange");
  PageRange.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ALL_PAGES = jniAccessors.getStaticFieldIDOf(
      _classRef, "ALL_PAGES", "Landroid/print/PageRange;");

  /// from: static public final android.print.PageRange ALL_PAGES
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constant for specifying all pages.
  static PageRange get ALL_PAGES => PageRange.fromRef(jniAccessors
      .getStaticField(_classRef, _id_ALL_PAGES, jni.JniType.objectType)
      .object);

  static final _id_CREATOR = jniAccessors.getStaticFieldIDOf(
      _classRef, "CREATOR", "Landroid/os/Parcelable\$Creator;");

  /// from: static public final android.os.Parcelable.Creator<android.print.PageRange> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static parcelable_.Parcelable_Creator get CREATOR =>
      parcelable_.Parcelable_Creator.fromRef(jniAccessors
          .getStaticField(_classRef, _id_CREATOR, jni.JniType.objectType)
          .object);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(II)V");

  /// from: public void <init>(int start, int end)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new instance.
  ///@param start The start page index (zero based and inclusive).
  /// Value is 0 or greater
  ///@param end The end page index (zero based and inclusive).
  ///
  /// Value is 0 or greater
  ///@throws IllegalArgumentException If start is less than zero or end
  /// is less than zero or start greater than end.
  PageRange(int start, int end)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [start, end]).object);

  static final _id_getStart =
      jniAccessors.getMethodIDOf(_classRef, "getStart", "()I");

  /// from: public int getStart()
  ///
  /// Gets the start page index (zero based and inclusive).
  ///@return The start page index.
  ///
  /// Value is 0 or greater
  int getStart() => jniAccessors.callMethodWithArgs(
      reference, _id_getStart, jni.JniType.intType, []).integer;

  static final _id_getEnd =
      jniAccessors.getMethodIDOf(_classRef, "getEnd", "()I");

  /// from: public int getEnd()
  ///
  /// Gets the end page index (zero based and inclusive).
  ///@return The end page index.
  ///
  /// Value is 0 or greater
  int getEnd() => jniAccessors.callMethodWithArgs(
      reference, _id_getEnd, jni.JniType.intType, []).integer;

  static final _id_describeContents =
      jniAccessors.getMethodIDOf(_classRef, "describeContents", "()I");

  /// from: public int describeContents()
  int describeContents() => jniAccessors.callMethodWithArgs(
      reference, _id_describeContents, jni.JniType.intType, []).integer;

  static final _id_writeToParcel = jniAccessors.getMethodIDOf(
      _classRef, "writeToParcel", "(Landroid/os/Parcel;I)V");

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(parcel_.Parcel parcel, int flags) =>
      jniAccessors.callMethodWithArgs(reference, _id_writeToParcel,
          jni.JniType.voidType, [parcel.reference, flags]).check();

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniType.intType, []).integer;

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object obj)
  bool equals1(jni.JniObject obj) => jniAccessors.callMethodWithArgs(
      reference, _id_equals1, jni.JniType.booleanType, [obj.reference]).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
