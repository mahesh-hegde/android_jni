// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "PathMotion.dart" as pathmotion_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "../graphics/Path.dart" as path_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.transition.ArcMotion
///
/// A PathMotion that generates a curved path along an arc on an imaginary circle containing
/// the two points. If the horizontal distance between the points is less than the vertical
/// distance, then the circle's center point will be horizontally aligned with the end point. If the
/// vertical distance is less than the horizontal distance then the circle's center point
/// will be vertically aligned with the end point.
///
/// When the two points are near horizontal or vertical, the curve of the motion will be
/// small as the center of the circle will be far from both points. To force curvature of
/// the path, \#setMinimumHorizontalAngle(float) and
/// \#setMinimumVerticalAngle(float) may be used to set the minimum angle of the
/// arc between two points.
///
///
/// This may be used in XML as an element inside a transition.
///
/// <pre>{@code
/// <changeBounds>
///   <arcMotion android:minimumHorizontalAngle="15"
///              android:minimumVerticalAngle="0"
///              android:maximumAngle="90"/>
/// </changeBounds>}
/// </pre>
class ArcMotion extends pathmotion_.PathMotion {
  static final _classRef =
      jniAccessors.getClassOf("android/transition/ArcMotion");
  ArcMotion.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ArcMotion()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ArcMotion.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_setMinimumHorizontalAngle = jniAccessors.getMethodIDOf(
      _classRef, "setMinimumHorizontalAngle", "(F)V");

  /// from: public void setMinimumHorizontalAngle(float angleInDegrees)
  ///
  /// Sets the minimum arc along the circle between two points aligned near horizontally.
  /// When start and end points are close to horizontal, the calculated center point of the
  /// circle will be far from both points, giving a near straight path between the points.
  /// By setting a minimum angle, this forces the center point to be closer and give an
  /// exaggerated curve to the path.
  /// The default value is 0.
  ///
  ///@param angleInDegrees The minimum angle of the arc on a circle describing the Path
  ///                       between two nearly horizontally-separated points.
  ///@attr ref android.R.styleable\#ArcMotion_minimumHorizontalAngle
  void setMinimumHorizontalAngle(double angleInDegrees) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMinimumHorizontalAngle,
          jni.JniType.voidType, [angleInDegrees]).check();

  static final _id_getMinimumHorizontalAngle =
      jniAccessors.getMethodIDOf(_classRef, "getMinimumHorizontalAngle", "()F");

  /// from: public float getMinimumHorizontalAngle()
  ///
  /// Returns the minimum arc along the circle between two points aligned near horizontally.
  /// When start and end points are close to horizontal, the calculated center point of the
  /// circle will be far from both points, giving a near straight path between the points.
  /// By setting a minimum angle, this forces the center point to be closer and give an
  /// exaggerated curve to the path.
  /// The default value is 0.
  ///
  ///@return The minimum arc along the circle between two points aligned near horizontally.
  ///@attr ref android.R.styleable\#ArcMotion_minimumHorizontalAngle
  double getMinimumHorizontalAngle() => jniAccessors.callMethodWithArgs(
      reference,
      _id_getMinimumHorizontalAngle,
      jni.JniType.floatType, []).float;

  static final _id_setMinimumVerticalAngle =
      jniAccessors.getMethodIDOf(_classRef, "setMinimumVerticalAngle", "(F)V");

  /// from: public void setMinimumVerticalAngle(float angleInDegrees)
  ///
  /// Sets the minimum arc along the circle between two points aligned near vertically.
  /// When start and end points are close to vertical, the calculated center point of the
  /// circle will be far from both points, giving a near straight path between the points.
  /// By setting a minimum angle, this forces the center point to be closer and give an
  /// exaggerated curve to the path.
  /// The default value is 0.
  ///
  ///@param angleInDegrees The minimum angle of the arc on a circle describing the Path
  ///                       between two nearly vertically-separated points.
  ///@attr ref android.R.styleable\#ArcMotion_minimumVerticalAngle
  void setMinimumVerticalAngle(double angleInDegrees) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMinimumVerticalAngle,
          jni.JniType.voidType, [angleInDegrees]).check();

  static final _id_getMinimumVerticalAngle =
      jniAccessors.getMethodIDOf(_classRef, "getMinimumVerticalAngle", "()F");

  /// from: public float getMinimumVerticalAngle()
  ///
  /// Returns the minimum arc along the circle between two points aligned near vertically.
  /// When start and end points are close to vertical, the calculated center point of the
  /// circle will be far from both points, giving a near straight path between the points.
  /// By setting a minimum angle, this forces the center point to be closer and give an
  /// exaggerated curve to the path.
  /// The default value is 0.
  ///
  ///@return The minimum angle of the arc on a circle describing the Path
  ///         between two nearly vertically-separated points.
  ///@attr ref android.R.styleable\#ArcMotion_minimumVerticalAngle
  double getMinimumVerticalAngle() => jniAccessors.callMethodWithArgs(
      reference, _id_getMinimumVerticalAngle, jni.JniType.floatType, []).float;

  static final _id_setMaximumAngle =
      jniAccessors.getMethodIDOf(_classRef, "setMaximumAngle", "(F)V");

  /// from: public void setMaximumAngle(float angleInDegrees)
  ///
  /// Sets the maximum arc along the circle between two points. When start and end points
  /// have close to equal x and y differences, the curve between them is large. This forces
  /// the curved path to have an arc of at most the given angle.
  /// The default value is 70 degrees.
  ///
  ///@param angleInDegrees The maximum angle of the arc on a circle describing the Path
  ///                       between the start and end points.
  ///@attr ref android.R.styleable\#ArcMotion_maximumAngle
  void setMaximumAngle(double angleInDegrees) =>
      jniAccessors.callMethodWithArgs(reference, _id_setMaximumAngle,
          jni.JniType.voidType, [angleInDegrees]).check();

  static final _id_getMaximumAngle =
      jniAccessors.getMethodIDOf(_classRef, "getMaximumAngle", "()F");

  /// from: public float getMaximumAngle()
  ///
  /// Returns the maximum arc along the circle between two points. When start and end points
  /// have close to equal x and y differences, the curve between them is large. This forces
  /// the curved path to have an arc of at most the given angle.
  /// The default value is 70 degrees.
  ///
  ///@return The maximum angle of the arc on a circle describing the Path
  ///         between the start and end points.
  ///@attr ref android.R.styleable\#ArcMotion_maximumAngle
  double getMaximumAngle() => jniAccessors.callMethodWithArgs(
      reference, _id_getMaximumAngle, jni.JniType.floatType, []).float;

  static final _id_getPath = jniAccessors.getMethodIDOf(
      _classRef, "getPath", "(FFFF)Landroid/graphics/Path;");

  /// from: public android.graphics.Path getPath(float startX, float startY, float endX, float endY)
  /// The returned object must be deleted after use, by calling the `delete` method.
  path_.Path getPath(double startX, double startY, double endX, double endY) =>
      path_.Path.fromRef(jniAccessors.callMethodWithArgs(reference, _id_getPath,
          jni.JniType.objectType, [startX, startY, endX, endY]).object);
}
