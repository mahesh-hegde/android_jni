// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "VisibilityPropagation.dart" as visibilitypropagation_;

import "../view/ViewGroup.dart" as viewgroup_;

import "Transition.dart" as transition_;

import "TransitionValues.dart" as transitionvalues_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.transition.SidePropagation
///
/// A <code>TransitionPropagation</code> that propagates based on the distance to the side
/// and, orthogonally, the distance to epicenter. If the transitioning View is visible in
/// the start of the transition, then it will transition sooner when closer to the side and
/// later when farther. If the view is not visible in the start of the transition, then
/// it will transition later when closer to the side and sooner when farther from the edge.
/// This is the default TransitionPropagation used with android.transition.Slide.
class SidePropagation extends visibilitypropagation_.VisibilityPropagation {
  static final _classRef =
      jniAccessors.getClassOf("android/transition/SidePropagation");
  SidePropagation.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  SidePropagation()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setSide =
      jniAccessors.getMethodIDOf(_classRef, "setSide", "(I)V");

  /// from: public void setSide(int side)
  ///
  /// Sets the side that is used to calculate the transition propagation. If the transitioning
  /// View is visible in the start of the transition, then it will transition sooner when
  /// closer to the side and later when farther. If the view is not visible in the start of
  /// the transition, then it will transition later when closer to the side and sooner when
  /// farther from the edge. The default is Gravity\#BOTTOM.
  ///@param side The side that is used to calculate the transition propagation. Must be one of
  ///             Gravity\#LEFT, Gravity\#TOP, Gravity\#RIGHT,
  ///             Gravity\#BOTTOM, Gravity\#START, or Gravity\#END.
  ///
  /// Value is android.view.Gravity\#LEFT, android.view.Gravity\#TOP, android.view.Gravity\#RIGHT, android.view.Gravity\#BOTTOM, android.view.Gravity\#START, or android.view.Gravity\#END
  void setSide(int side) => jniAccessors.callMethodWithArgs(
      reference, _id_setSide, jni.JniType.voidType, [side]).check();

  static final _id_setPropagationSpeed =
      jniAccessors.getMethodIDOf(_classRef, "setPropagationSpeed", "(F)V");

  /// from: public void setPropagationSpeed(float propagationSpeed)
  ///
  /// Sets the speed at which transition propagation happens, relative to the duration of the
  /// Transition. A <code>propagationSpeed</code> of 1 means that a View centered at the side
  /// set in \#setSide(int) and View centered at the opposite edge will have a difference
  /// in start delay of approximately the duration of the Transition. A speed of 2 means the
  /// start delay difference will be approximately half of the duration of the transition. A
  /// value of 0 is illegal, but negative values will invert the propagation.
  ///@param propagationSpeed The speed at which propagation occurs, relative to the duration
  ///                         of the transition. A speed of 4 means it works 4 times as fast
  ///                         as the duration of the transition. May not be 0.
  void setPropagationSpeed(double propagationSpeed) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPropagationSpeed,
          jni.JniType.voidType, [propagationSpeed]).check();

  static final _id_getStartDelay1 = jniAccessors.getMethodIDOf(
      _classRef,
      "getStartDelay",
      "(Landroid/view/ViewGroup;Landroid/transition/Transition;Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)J");

  /// from: public long getStartDelay(android.view.ViewGroup sceneRoot, android.transition.Transition transition, android.transition.TransitionValues startValues, android.transition.TransitionValues endValues)
  int getStartDelay1(
          viewgroup_.ViewGroup sceneRoot,
          transition_.Transition transition,
          transitionvalues_.TransitionValues startValues,
          transitionvalues_.TransitionValues endValues) =>
      jniAccessors.callMethodWithArgs(
          reference, _id_getStartDelay1, jni.JniType.longType, [
        sceneRoot.reference,
        transition.reference,
        startValues.reference,
        endValues.reference
      ]).long;
}
