// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Transition.dart" as transition_;

import "../content/Context.dart" as context_;

import "../util/AttributeSet.dart" as attributeset_;

import "TransitionValues.dart" as transitionvalues_;

import "../animation/Animator.dart" as animator_;

import "../view/ViewGroup.dart" as viewgroup_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.transition.ChangeBounds
///
/// This transition captures the layout bounds of target views before and after
/// the scene change and animates those changes during the transition.
///
/// A ChangeBounds transition can be described in a resource file by using the
/// tag <code>changeBounds</code>, using its attributes of
/// android.R.styleable\#ChangeBounds along with the other standard
/// attributes of android.R.styleable\#Transition.
///
class ChangeBounds extends transition_.Transition {
  static final _classRef =
      jniAccessors.getClassOf("android/transition/ChangeBounds");
  ChangeBounds.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ChangeBounds()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, "<init>",
      "(Landroid/content/Context;Landroid/util/AttributeSet;)V");

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attrs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ChangeBounds.ctor1(context_.Context context, attributeset_.AttributeSet attrs)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [context.reference, attrs.reference]).object);

  static final _id_getTransitionProperties = jniAccessors.getMethodIDOf(
      _classRef, "getTransitionProperties", "()[Ljava/lang/String;");

  /// from: public java.lang.String[] getTransitionProperties()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getTransitionProperties() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getTransitionProperties, jni.JniType.objectType, []).object);

  static final _id_setResizeClip =
      jniAccessors.getMethodIDOf(_classRef, "setResizeClip", "(Z)V");

  /// from: public void setResizeClip(boolean resizeClip)
  ///
  /// When <code>resizeClip</code> is true, ChangeBounds resizes the view using the clipBounds
  /// instead of changing the dimensions of the view during the animation. When
  /// <code>resizeClip</code> is false, ChangeBounds resizes the View by changing its dimensions.
  ///
  /// When resizeClip is set to true, the clip bounds is modified by ChangeBounds. Therefore,
  /// android.transition.ChangeClipBounds is not compatible with ChangeBounds
  /// in this mode.
  ///
  ///@param resizeClip Used to indicate whether the view bounds should be modified or the
  ///                   clip bounds should be modified by ChangeBounds.
  ///@see android.view.View\#setClipBounds(android.graphics.Rect)
  ///@attr ref android.R.styleable\#ChangeBounds_resizeClip
  void setResizeClip(bool resizeClip) => jniAccessors.callMethodWithArgs(
      reference, _id_setResizeClip, jni.JniType.voidType, [resizeClip]).check();

  static final _id_getResizeClip =
      jniAccessors.getMethodIDOf(_classRef, "getResizeClip", "()Z");

  /// from: public boolean getResizeClip()
  ///
  /// Returns true when the ChangeBounds will resize by changing the clip bounds during the
  /// view animation or false when bounds are changed. The default value is false.
  ///@return true when the ChangeBounds will resize by changing the clip bounds during the
  /// view animation or false when bounds are changed. The default value is false.
  ///@attr ref android.R.styleable\#ChangeBounds_resizeClip
  bool getResizeClip() => jniAccessors.callMethodWithArgs(
      reference, _id_getResizeClip, jni.JniType.booleanType, []).boolean;

  static final _id_setReparent =
      jniAccessors.getMethodIDOf(_classRef, "setReparent", "(Z)V");

  /// from: public void setReparent(boolean reparent)
  ///
  /// Setting this flag tells ChangeBounds to track the before/after parent
  /// of every view using this transition. The flag is not enabled by
  /// default because it requires the parent instances to be the same
  /// in the two scenes or else all parents must use ids to allow
  /// the transition to determine which parents are the same.
  ///@param reparent true if the transition should track the parent
  /// container of target views and animate parent changes.
  ///@deprecated Use android.transition.ChangeTransform to handle
  /// transitions between different parents.
  void setReparent(bool reparent) => jniAccessors.callMethodWithArgs(
      reference, _id_setReparent, jni.JniType.voidType, [reparent]).check();

  static final _id_captureStartValues = jniAccessors.getMethodIDOf(_classRef,
      "captureStartValues", "(Landroid/transition/TransitionValues;)V");

  /// from: public void captureStartValues(android.transition.TransitionValues transitionValues)
  void captureStartValues(
          transitionvalues_.TransitionValues transitionValues) =>
      jniAccessors.callMethodWithArgs(reference, _id_captureStartValues,
          jni.JniType.voidType, [transitionValues.reference]).check();

  static final _id_captureEndValues = jniAccessors.getMethodIDOf(_classRef,
      "captureEndValues", "(Landroid/transition/TransitionValues;)V");

  /// from: public void captureEndValues(android.transition.TransitionValues transitionValues)
  void captureEndValues(transitionvalues_.TransitionValues transitionValues) =>
      jniAccessors.callMethodWithArgs(reference, _id_captureEndValues,
          jni.JniType.voidType, [transitionValues.reference]).check();

  static final _id_createAnimator = jniAccessors.getMethodIDOf(
      _classRef,
      "createAnimator",
      "(Landroid/view/ViewGroup;Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)Landroid/animation/Animator;");

  /// from: public android.animation.Animator createAnimator(android.view.ViewGroup sceneRoot, android.transition.TransitionValues startValues, android.transition.TransitionValues endValues)
  /// The returned object must be deleted after use, by calling the `delete` method.
  animator_.Animator createAnimator(
          viewgroup_.ViewGroup sceneRoot,
          transitionvalues_.TransitionValues startValues,
          transitionvalues_.TransitionValues endValues) =>
      animator_.Animator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_createAnimator, jni.JniType.objectType, [
        sceneRoot.reference,
        startValues.reference,
        endValues.reference
      ]).object);
}
