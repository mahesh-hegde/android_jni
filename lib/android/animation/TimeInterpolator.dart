// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.animation.TimeInterpolator
///
/// A time interpolator defines the rate of change of an animation. This allows animations
/// to have non-linear motion, such as acceleration and deceleration.
class TimeInterpolator extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/animation/TimeInterpolator");
  TimeInterpolator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_getInterpolation =
      jniAccessors.getMethodIDOf(_classRef, "getInterpolation", "(F)F");

  /// from: public abstract float getInterpolation(float input)
  ///
  /// Maps a value representing the elapsed fraction of an animation to a value that represents
  /// the interpolated fraction. This interpolated value is then multiplied by the change in
  /// value of an animation to derive the animated value at the current elapsed animation time.
  ///@param input A value between 0 and 1.0 indicating our current point
  ///        in the animation where 0 represents the start and 1.0 represents
  ///        the end
  ///@return The interpolation value. This value can be more than 1.0 for
  ///         interpolators which overshoot their targets, or less than 0 for
  ///         interpolators that undershoot their targets.
  double getInterpolation(double input) => jniAccessors.callMethodWithArgs(
      reference, _id_getInterpolation, jni.JniType.floatType, [input]).float;
}
