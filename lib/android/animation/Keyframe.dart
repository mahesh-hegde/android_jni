// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "TimeInterpolator.dart" as timeinterpolator_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.animation.Keyframe
///
/// This class holds a time/value pair for an animation. The Keyframe class is used
/// by ValueAnimator to define the values that the animation target will have over the course
/// of the animation. As the time proceeds from one keyframe to the other, the value of the
/// target object will animate between the value at the previous keyframe and the value at the
/// next keyframe. Each keyframe also holds an optional TimeInterpolator
/// object, which defines the time interpolation over the intervalue preceding the keyframe.
///
/// The Keyframe class itself is abstract. The type-specific factory methods will return
/// a subclass of Keyframe specific to the type of value being stored. This is done to improve
/// performance when dealing with the most common cases (e.g., <code>float</code> and
/// <code>int</code> values). Other types will fall into a more general Keyframe class that
/// treats its values as Objects. Unless your animation requires dealing with a custom type
/// or a data structure that needs to be animated directly (and evaluated using an implementation
/// of TypeEvaluator), you should stick to using float and int as animations using those
/// types have lower runtime overhead than other types.
///
class Keyframe extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/animation/Keyframe");
  Keyframe.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Keyframe()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ofInt = jniAccessors.getStaticMethodIDOf(
      _classRef, "ofInt", "(FI)Landroid/animation/Keyframe;");

  /// from: static public android.animation.Keyframe ofInt(float fraction, int value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a Keyframe object with the given time and value. The time defines the
  /// time, as a proportion of an overall animation's duration, at which the value will hold true
  /// for the animation. The value for the animation between keyframes will be calculated as
  /// an interpolation between the values at those keyframes.
  ///@param fraction The time, expressed as a value between 0 and 1, representing the fraction
  /// of time elapsed of the overall animation duration.
  ///@param value The value that the object will animate to as the animation time approaches
  /// the time in this keyframe, and the the value animated from as the time passes the time in
  /// this keyframe.
  static Keyframe ofInt(double fraction, int value) =>
      Keyframe.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_ofInt, jni.JniType.objectType, [fraction, value]).object);

  static final _id_ofInt1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "ofInt", "(F)Landroid/animation/Keyframe;");

  /// from: static public android.animation.Keyframe ofInt(float fraction)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a Keyframe object with the given time. The value at this time will be derived
  /// from the target object when the animation first starts (note that this implies that keyframes
  /// with no initial value must be used as part of an ObjectAnimator).
  /// The time defines the
  /// time, as a proportion of an overall animation's duration, at which the value will hold true
  /// for the animation. The value for the animation between keyframes will be calculated as
  /// an interpolation between the values at those keyframes.
  ///@param fraction The time, expressed as a value between 0 and 1, representing the fraction
  /// of time elapsed of the overall animation duration.
  static Keyframe ofInt1(double fraction) =>
      Keyframe.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofInt1, jni.JniType.objectType, [fraction]).object);

  static final _id_ofFloat = jniAccessors.getStaticMethodIDOf(
      _classRef, "ofFloat", "(FF)Landroid/animation/Keyframe;");

  /// from: static public android.animation.Keyframe ofFloat(float fraction, float value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a Keyframe object with the given time and value. The time defines the
  /// time, as a proportion of an overall animation's duration, at which the value will hold true
  /// for the animation. The value for the animation between keyframes will be calculated as
  /// an interpolation between the values at those keyframes.
  ///@param fraction The time, expressed as a value between 0 and 1, representing the fraction
  /// of time elapsed of the overall animation duration.
  ///@param value The value that the object will animate to as the animation time approaches
  /// the time in this keyframe, and the the value animated from as the time passes the time in
  /// this keyframe.
  static Keyframe ofFloat(double fraction, double value) =>
      Keyframe.fromRef(jniAccessors.callStaticMethodWithArgs(_classRef,
          _id_ofFloat, jni.JniType.objectType, [fraction, value]).object);

  static final _id_ofFloat1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "ofFloat", "(F)Landroid/animation/Keyframe;");

  /// from: static public android.animation.Keyframe ofFloat(float fraction)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a Keyframe object with the given time. The value at this time will be derived
  /// from the target object when the animation first starts (note that this implies that keyframes
  /// with no initial value must be used as part of an ObjectAnimator).
  /// The time defines the
  /// time, as a proportion of an overall animation's duration, at which the value will hold true
  /// for the animation. The value for the animation between keyframes will be calculated as
  /// an interpolation between the values at those keyframes.
  ///@param fraction The time, expressed as a value between 0 and 1, representing the fraction
  /// of time elapsed of the overall animation duration.
  static Keyframe ofFloat1(double fraction) =>
      Keyframe.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofFloat1, jni.JniType.objectType, [fraction]).object);

  static final _id_ofObject = jniAccessors.getStaticMethodIDOf(_classRef,
      "ofObject", "(FLjava/lang/Object;)Landroid/animation/Keyframe;");

  /// from: static public android.animation.Keyframe ofObject(float fraction, java.lang.Object value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a Keyframe object with the given time and value. The time defines the
  /// time, as a proportion of an overall animation's duration, at which the value will hold true
  /// for the animation. The value for the animation between keyframes will be calculated as
  /// an interpolation between the values at those keyframes.
  ///@param fraction The time, expressed as a value between 0 and 1, representing the fraction
  /// of time elapsed of the overall animation duration.
  ///@param value The value that the object will animate to as the animation time approaches
  /// the time in this keyframe, and the the value animated from as the time passes the time in
  /// this keyframe.
  static Keyframe ofObject(double fraction, jni.JniObject value) =>
      Keyframe.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofObject,
          jni.JniType.objectType,
          [fraction, value.reference]).object);

  static final _id_ofObject1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "ofObject", "(F)Landroid/animation/Keyframe;");

  /// from: static public android.animation.Keyframe ofObject(float fraction)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a Keyframe object with the given time. The value at this time will be derived
  /// from the target object when the animation first starts (note that this implies that keyframes
  /// with no initial value must be used as part of an ObjectAnimator).
  /// The time defines the
  /// time, as a proportion of an overall animation's duration, at which the value will hold true
  /// for the animation. The value for the animation between keyframes will be calculated as
  /// an interpolation between the values at those keyframes.
  ///@param fraction The time, expressed as a value between 0 and 1, representing the fraction
  /// of time elapsed of the overall animation duration.
  static Keyframe ofObject1(double fraction) =>
      Keyframe.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofObject1, jni.JniType.objectType, [fraction]).object);

  static final _id_hasValue =
      jniAccessors.getMethodIDOf(_classRef, "hasValue", "()Z");

  /// from: public boolean hasValue()
  ///
  /// Indicates whether this keyframe has a valid value. This method is called internally when
  /// an ObjectAnimator first starts; keyframes without values are assigned values at
  /// that time by deriving the value for the property from the target object.
  ///@return boolean Whether this object has a value assigned.
  bool hasValue() => jniAccessors.callMethodWithArgs(
      reference, _id_hasValue, jni.JniType.booleanType, []).boolean;

  static final _id_getValue =
      jniAccessors.getMethodIDOf(_classRef, "getValue", "()Ljava/lang/Object;");

  /// from: public abstract java.lang.Object getValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the value for this Keyframe.
  ///@return The value for this Keyframe.
  jni.JniObject getValue() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getValue, jni.JniType.objectType, []).object);

  static final _id_setValue = jniAccessors.getMethodIDOf(
      _classRef, "setValue", "(Ljava/lang/Object;)V");

  /// from: public abstract void setValue(java.lang.Object value)
  ///
  /// Sets the value for this Keyframe.
  ///@param value value for this Keyframe.
  void setValue(jni.JniObject value) => jniAccessors.callMethodWithArgs(
      reference, _id_setValue, jni.JniType.voidType, [value.reference]).check();

  static final _id_getFraction =
      jniAccessors.getMethodIDOf(_classRef, "getFraction", "()F");

  /// from: public float getFraction()
  ///
  /// Gets the time for this keyframe, as a fraction of the overall animation duration.
  ///@return The time associated with this keyframe, as a fraction of the overall animation
  /// duration. This should be a value between 0 and 1.
  double getFraction() => jniAccessors.callMethodWithArgs(
      reference, _id_getFraction, jni.JniType.floatType, []).float;

  static final _id_setFraction =
      jniAccessors.getMethodIDOf(_classRef, "setFraction", "(F)V");

  /// from: public void setFraction(float fraction)
  ///
  /// Sets the time for this keyframe, as a fraction of the overall animation duration.
  ///@param fraction time associated with this keyframe, as a fraction of the overall animation
  /// duration. This should be a value between 0 and 1.
  void setFraction(double fraction) => jniAccessors.callMethodWithArgs(
      reference, _id_setFraction, jni.JniType.voidType, [fraction]).check();

  static final _id_getInterpolator = jniAccessors.getMethodIDOf(
      _classRef, "getInterpolator", "()Landroid/animation/TimeInterpolator;");

  /// from: public android.animation.TimeInterpolator getInterpolator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the optional interpolator for this Keyframe. A value of <code>null</code> indicates
  /// that there is no interpolation, which is the same as linear interpolation.
  ///@return The optional interpolator for this Keyframe.
  timeinterpolator_.TimeInterpolator getInterpolator() =>
      timeinterpolator_.TimeInterpolator.fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getInterpolator,
              jni.JniType.objectType, []).object);

  static final _id_setInterpolator = jniAccessors.getMethodIDOf(
      _classRef, "setInterpolator", "(Landroid/animation/TimeInterpolator;)V");

  /// from: public void setInterpolator(android.animation.TimeInterpolator interpolator)
  ///
  /// Sets the optional interpolator for this Keyframe. A value of <code>null</code> indicates
  /// that there is no interpolation, which is the same as linear interpolation.
  ///@return The optional interpolator for this Keyframe.
  void setInterpolator(timeinterpolator_.TimeInterpolator interpolator) =>
      jniAccessors.callMethodWithArgs(reference, _id_setInterpolator,
          jni.JniType.voidType, [interpolator.reference]).check();

  static final _id_getType =
      jniAccessors.getMethodIDOf(_classRef, "getType", "()Ljava/lang/Class;");

  /// from: public java.lang.Class getType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the type of keyframe. This information is used by ValueAnimator to determine the type of
  /// TypeEvaluator to use when calculating values between keyframes. The type is based
  /// on the type of Keyframe created.
  ///@return The type of the value stored in the Keyframe.
  jni.JniObject getType() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getType, jni.JniType.objectType, []).object);

  static final _id_clone = jniAccessors.getMethodIDOf(
      _classRef, "clone", "()Landroid/animation/Keyframe;");

  /// from: public abstract android.animation.Keyframe clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Keyframe clone() => Keyframe.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_clone, jni.JniType.objectType, []).object);
}
