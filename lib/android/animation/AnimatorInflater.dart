// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "Animator.dart" as animator_;

import "../content/Context.dart" as context_;

import "StateListAnimator.dart" as statelistanimator_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.animation.AnimatorInflater
///
/// This class is used to instantiate animator XML files into Animator objects.
///
/// For performance reasons, inflation relies heavily on pre-processing of
/// XML files that is done at build time. Therefore, it is not currently possible
/// to use this inflater with an XmlPullParser over a plain XML file at runtime;
/// it only works with an XmlPullParser returned from a compiled resource (R.
/// _something_ file.)
class AnimatorInflater extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/animation/AnimatorInflater");
  AnimatorInflater.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  AnimatorInflater()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_loadAnimator = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "loadAnimator",
      "(Landroid/content/Context;I)Landroid/animation/Animator;");

  /// from: static public android.animation.Animator loadAnimator(android.content.Context context, int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Loads an Animator object from a resource
  ///@param context Application context used to access resources
  ///@param id The resource id of the animation to load
  ///@return The animator object reference by the specified id
  ///@throws android.content.res.Resources.NotFoundException when the animation cannot be loaded
  static animator_.Animator loadAnimator(context_.Context context, int id) =>
      animator_.Animator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_loadAnimator,
          jni.JniType.objectType,
          [context.reference, id]).object);

  static final _id_loadStateListAnimator = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "loadStateListAnimator",
      "(Landroid/content/Context;I)Landroid/animation/StateListAnimator;");

  /// from: static public android.animation.StateListAnimator loadStateListAnimator(android.content.Context context, int id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static statelistanimator_.StateListAnimator loadStateListAnimator(
          context_.Context context, int id) =>
      statelistanimator_.StateListAnimator.fromRef(jniAccessors
          .callStaticMethodWithArgs(_classRef, _id_loadStateListAnimator,
              jni.JniType.objectType, [context.reference, id]).object);
}
