// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ValueAnimator.dart" as valueanimator_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.animation.TimeAnimator
///
/// This class provides a simple callback mechanism to listeners that is synchronized with all
/// other animators in the system. There is no duration, interpolation, or object value-setting
/// with this Animator. Instead, it is simply started, after which it proceeds to send out events
/// on every animation frame to its TimeListener (if set), with information about this animator,
/// the total elapsed time, and the elapsed time since the previous animation frame.
class TimeAnimator extends valueanimator_.ValueAnimator {
  static final _classRef =
      jniAccessors.getClassOf("android/animation/TimeAnimator");
  TimeAnimator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  TimeAnimator()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_start =
      jniAccessors.getMethodIDOf(_classRef, "start", "()V");

  /// from: public void start()
  void start() => jniAccessors.callMethodWithArgs(
      reference, _id_start, jni.JniType.voidType, []).check();

  static final _id_setCurrentPlayTime =
      jniAccessors.getMethodIDOf(_classRef, "setCurrentPlayTime", "(J)V");

  /// from: public void setCurrentPlayTime(long playTime)
  void setCurrentPlayTime(int playTime) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setCurrentPlayTime,
      jni.JniType.voidType,
      [playTime]).check();

  static final _id_setTimeListener = jniAccessors.getMethodIDOf(_classRef,
      "setTimeListener", "(Landroid/animation/TimeAnimator\$TimeListener;)V");

  /// from: public void setTimeListener(android.animation.TimeAnimator.TimeListener listener)
  ///
  /// Sets a listener that is sent update events throughout the life of
  /// an animation.
  ///@param listener the listener to be set.
  void setTimeListener(TimeAnimator_TimeListener listener) =>
      jniAccessors.callMethodWithArgs(reference, _id_setTimeListener,
          jni.JniType.voidType, [listener.reference]).check();
}

/// from: android.animation.TimeAnimator$TimeListener
///
/// Implementors of this interface can set themselves as update listeners
/// to a <code>TimeAnimator</code> instance to receive callbacks on every animation
/// frame to receive the total time since the animator started and the delta time
/// since the last frame. The first time the listener is called,
/// deltaTime will be zero. The same is true for totalTime, unless the animator was
/// set to a specific ValueAnimator\#setCurrentPlayTime(long) currentPlayTime
/// prior to starting.
class TimeAnimator_TimeListener extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/animation/TimeAnimator\$TimeListener");
  TimeAnimator_TimeListener.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_onTimeUpdate = jniAccessors.getMethodIDOf(
      _classRef, "onTimeUpdate", "(Landroid/animation/TimeAnimator;JJ)V");

  /// from: public abstract void onTimeUpdate(android.animation.TimeAnimator animation, long totalTime, long deltaTime)
  ///
  /// Notifies listeners of the occurrence of another frame of the animation,
  /// along with information about the elapsed time.
  ///
  ///@param animation The animator sending out the notification.
  ///@param totalTime The total time elapsed since the animator started, in milliseconds.
  ///@param deltaTime The time elapsed since the previous frame, in milliseconds.
  void onTimeUpdate(TimeAnimator animation, int totalTime, int deltaTime) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_onTimeUpdate,
          jni.JniType.voidType,
          [animation.reference, totalTime, deltaTime]).check();
}
