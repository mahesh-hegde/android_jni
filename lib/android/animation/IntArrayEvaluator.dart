// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.animation.IntArrayEvaluator
///
/// This evaluator can be used to perform type interpolation between <code>int[]</code> values.
/// Each index into the array is treated as a separate value to interpolate. For example,
/// evaluating <code>{100, 200}</code> and <code>{300, 400}</code> will interpolate the value at
/// the first index between 100 and 300 and the value at the second index value between 200 and 400.
class IntArrayEvaluator extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/animation/IntArrayEvaluator");
  IntArrayEvaluator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an IntArrayEvaluator that does not reuse the animated value. Care must be taken
  /// when using this option because on every evaluation a new <code>int[]</code> will be
  /// allocated.
  ///@see \#IntArrayEvaluator(int[])
  IntArrayEvaluator()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "([I)V");

  /// from: public void <init>(int[] reuseArray)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create an IntArrayEvaluator that reuses <code>reuseArray</code> for every evaluate() call.
  /// Caution must be taken to ensure that the value returned from
  /// android.animation.ValueAnimator\#getAnimatedValue() is not cached, modified, or
  /// used across threads. The value will be modified on each <code>evaluate()</code> call.
  ///@param reuseArray The array to modify and return from <code>evaluate</code>.
  IntArrayEvaluator.ctor1(jni.JniObject reuseArray)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [reuseArray.reference]).object);

  static final _id_evaluate =
      jniAccessors.getMethodIDOf(_classRef, "evaluate", "(F[I[I)[I");

  /// from: public int[] evaluate(float fraction, int[] startValue, int[] endValue)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Interpolates the value at each index by the fraction. If \#IntArrayEvaluator(int[])
  /// was used to construct this object, <code>reuseArray</code> will be returned, otherwise
  /// a new <code>int[]</code> will be returned.
  ///@param fraction The fraction from the starting to the ending values
  ///@param startValue The start value.
  ///@param endValue The end value.
  ///@return An <code>int[]</code> where each element is an interpolation between
  ///         the same index in startValue and endValue.
  jni.JniObject evaluate(
          double fraction, jni.JniObject startValue, jni.JniObject endValue) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_evaluate,
          jni.JniType.objectType,
          [fraction, startValue.reference, endValue.reference]).object);
}
