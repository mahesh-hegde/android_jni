// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../util/Property.dart" as property_;

import "../graphics/Path.dart" as path_;

import "TypeConverter.dart" as typeconverter_;

import "TypeEvaluator.dart" as typeevaluator_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.animation.PropertyValuesHolder
///
/// This class holds information about a property and the values that that property
/// should take on during an animation. PropertyValuesHolder objects can be used to create
/// animations with ValueAnimator or ObjectAnimator that operate on several different properties
/// in parallel.
class PropertyValuesHolder extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/animation/PropertyValuesHolder");
  PropertyValuesHolder.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ofInt = jniAccessors.getStaticMethodIDOf(_classRef, "ofInt",
      "(Ljava/lang/String;[I)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofInt(java.lang.String propertyName, int[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property name and
  /// set of int values.
  ///@param propertyName The name of the property being animated.
  ///@param values The values that the named property will animate between.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  static PropertyValuesHolder ofInt(
          jni.JniString propertyName, jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofInt,
          jni.JniType.objectType,
          [propertyName.reference, values.reference]).object);

  static final _id_ofInt1 = jniAccessors.getStaticMethodIDOf(_classRef, "ofInt",
      "(Landroid/util/Property;[I)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofInt(android.util.Property<?,java.lang.Integer> property, int[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property and
  /// set of int values.
  ///@param property The property being animated. Should not be null.
  ///@param values The values that the property will animate between.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  static PropertyValuesHolder ofInt1(
          property_.Property property, jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofInt1,
          jni.JniType.objectType,
          [property.reference, values.reference]).object);

  static final _id_ofMultiInt = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiInt",
      "(Ljava/lang/String;[[I)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofMultiInt(java.lang.String propertyName, int[][] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property name and
  /// set of <code>int[]</code> values. At least two <code>int[]</code> values must be supplied,
  /// a start and end value. If more values are supplied, the values will be animated from the
  /// start, through all intermediate values to the end value. When used with ObjectAnimator,
  /// the elements of the array represent the parameters of the setter function.
  ///@param propertyName The name of the property being animated. Can also be the
  ///                     case-sensitive name of the entire setter method. Should not be null.
  ///@param values The values that the property will animate between.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  ///@see IntArrayEvaluator\#IntArrayEvaluator(int[])
  ///@see ObjectAnimator\#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])
  static PropertyValuesHolder ofMultiInt(
          jni.JniString propertyName, jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofMultiInt,
          jni.JniType.objectType,
          [propertyName.reference, values.reference]).object);

  static final _id_ofMultiInt1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiInt",
      "(Ljava/lang/String;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofMultiInt(java.lang.String propertyName, android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property name to use
  /// as a multi-int setter. The values are animated along the path, with the first
  /// parameter of the setter set to the x coordinate and the second set to the y coordinate.
  ///@param propertyName The name of the property being animated. Can also be the
  ///                     case-sensitive name of the entire setter method. Should not be null.
  ///                     The setter must take exactly two <code>int</code> parameters.
  ///@param path The Path along which the values should be animated.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  ///@see ObjectAnimator\#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
  static PropertyValuesHolder ofMultiInt1(
          jni.JniString propertyName, path_.Path path) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofMultiInt1,
          jni.JniType.objectType,
          [propertyName.reference, path.reference]).object);

  static final _id_ofMultiInt2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiInt",
      "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofMultiInt(java.lang.String propertyName, android.animation.TypeConverter<V,int[]> converter, android.animation.TypeEvaluator<V> evaluator, V[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property and
  /// set of Object values for use with ObjectAnimator multi-value setters. The Object
  /// values are converted to <code>int[]</code> using the converter.
  ///@param propertyName The property being animated or complete name of the setter.
  ///                     Should not be null.
  ///@param converter Used to convert the animated value to setter parameters.
  ///@param evaluator A TypeEvaluator that will be called on each animation frame to
  /// provide the necessary interpolation between the Object values to derive the animated
  /// value.
  ///@param values The values that the property will animate between.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  ///@see ObjectAnimator\#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])
  ///@see ObjectAnimator\#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
  static PropertyValuesHolder ofMultiInt2(
          jni.JniString propertyName,
          typeconverter_.TypeConverter converter,
          typeevaluator_.TypeEvaluator evaluator,
          jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofMultiInt2, jni.JniType.objectType, [
        propertyName.reference,
        converter.reference,
        evaluator.reference,
        values.reference
      ]).object);

  static final _id_ofMultiInt3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiInt",
      "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofMultiInt(java.lang.String propertyName, android.animation.TypeConverter<T,int[]> converter, android.animation.TypeEvaluator<T> evaluator, android.animation.Keyframe[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder object with the specified property name or
  /// setter name for use in a multi-int setter function using ObjectAnimator. The values can be
  /// of any type, but the type should be consistent so that the supplied
  /// android.animation.TypeEvaluator can be used to to evaluate the animated value. The
  /// <code>converter</code> converts the values to parameters in the setter function.
  ///
  /// At least two values must be supplied, a start and an end value.
  ///
  ///@param propertyName The name of the property to associate with the set of values. This
  ///                     may also be the complete name of a setter function.
  ///@param converter Converts <code>values</code> into int parameters for the setter.
  ///                     Can be null if the Keyframes have int[] values.
  ///@param evaluator Used to interpolate between values.
  ///@param values The values at specific fractional times to evaluate between
  ///@return A PropertyValuesHolder for a multi-int parameter setter.
  static PropertyValuesHolder ofMultiInt3(
          jni.JniString propertyName,
          typeconverter_.TypeConverter converter,
          typeevaluator_.TypeEvaluator evaluator,
          jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofMultiInt3, jni.JniType.objectType, [
        propertyName.reference,
        converter.reference,
        evaluator.reference,
        values.reference
      ]).object);

  static final _id_ofFloat = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofFloat",
      "(Ljava/lang/String;[F)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofFloat(java.lang.String propertyName, float[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property name and
  /// set of float values.
  ///@param propertyName The name of the property being animated.
  ///@param values The values that the named property will animate between.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  static PropertyValuesHolder ofFloat(
          jni.JniString propertyName, jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofFloat,
          jni.JniType.objectType,
          [propertyName.reference, values.reference]).object);

  static final _id_ofFloat1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofFloat",
      "(Landroid/util/Property;[F)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofFloat(android.util.Property<?,java.lang.Float> property, float[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property and
  /// set of float values.
  ///@param property The property being animated. Should not be null.
  ///@param values The values that the property will animate between.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  static PropertyValuesHolder ofFloat1(
          property_.Property property, jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofFloat1,
          jni.JniType.objectType,
          [property.reference, values.reference]).object);

  static final _id_ofMultiFloat = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiFloat",
      "(Ljava/lang/String;[[F)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String propertyName, float[][] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property name and
  /// set of <code>float[]</code> values. At least two <code>float[]</code> values must be supplied,
  /// a start and end value. If more values are supplied, the values will be animated from the
  /// start, through all intermediate values to the end value. When used with ObjectAnimator,
  /// the elements of the array represent the parameters of the setter function.
  ///@param propertyName The name of the property being animated. Can also be the
  ///                     case-sensitive name of the entire setter method. Should not be null.
  ///@param values The values that the property will animate between.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  ///@see FloatArrayEvaluator\#FloatArrayEvaluator(float[])
  ///@see ObjectAnimator\#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])
  static PropertyValuesHolder ofMultiFloat(
          jni.JniString propertyName, jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofMultiFloat,
          jni.JniType.objectType,
          [propertyName.reference, values.reference]).object);

  static final _id_ofMultiFloat1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiFloat",
      "(Ljava/lang/String;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String propertyName, android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property name to use
  /// as a multi-float setter. The values are animated along the path, with the first
  /// parameter of the setter set to the x coordinate and the second set to the y coordinate.
  ///@param propertyName The name of the property being animated. Can also be the
  ///                     case-sensitive name of the entire setter method. Should not be null.
  ///                     The setter must take exactly two <code>float</code> parameters.
  ///@param path The Path along which the values should be animated.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  ///@see ObjectAnimator\#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
  static PropertyValuesHolder ofMultiFloat1(
          jni.JniString propertyName, path_.Path path) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofMultiFloat1,
          jni.JniType.objectType,
          [propertyName.reference, path.reference]).object);

  static final _id_ofMultiFloat2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiFloat",
      "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String propertyName, android.animation.TypeConverter<V,float[]> converter, android.animation.TypeEvaluator<V> evaluator, V[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property and
  /// set of Object values for use with ObjectAnimator multi-value setters. The Object
  /// values are converted to <code>float[]</code> using the converter.
  ///@param propertyName The property being animated or complete name of the setter.
  ///                     Should not be null.
  ///@param converter Used to convert the animated value to setter parameters.
  ///@param evaluator A TypeEvaluator that will be called on each animation frame to
  /// provide the necessary interpolation between the Object values to derive the animated
  /// value.
  ///@param values The values that the property will animate between.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  ///@see ObjectAnimator\#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])
  static PropertyValuesHolder ofMultiFloat2(
          jni.JniString propertyName,
          typeconverter_.TypeConverter converter,
          typeevaluator_.TypeEvaluator evaluator,
          jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofMultiFloat2, jni.JniType.objectType, [
        propertyName.reference,
        converter.reference,
        evaluator.reference,
        values.reference
      ]).object);

  static final _id_ofMultiFloat3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiFloat",
      "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String propertyName, android.animation.TypeConverter<T,float[]> converter, android.animation.TypeEvaluator<T> evaluator, android.animation.Keyframe[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder object with the specified property name or
  /// setter name for use in a multi-float setter function using ObjectAnimator. The values can be
  /// of any type, but the type should be consistent so that the supplied
  /// android.animation.TypeEvaluator can be used to to evaluate the animated value. The
  /// <code>converter</code> converts the values to parameters in the setter function.
  ///
  /// At least two values must be supplied, a start and an end value.
  ///
  ///@param propertyName The name of the property to associate with the set of values. This
  ///                     may also be the complete name of a setter function.
  ///@param converter Converts <code>values</code> into float parameters for the setter.
  ///                     Can be null if the Keyframes have float[] values.
  ///@param evaluator Used to interpolate between values.
  ///@param values The values at specific fractional times to evaluate between
  ///@return A PropertyValuesHolder for a multi-float parameter setter.
  static PropertyValuesHolder ofMultiFloat3(
          jni.JniString propertyName,
          typeconverter_.TypeConverter converter,
          typeevaluator_.TypeEvaluator evaluator,
          jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofMultiFloat3, jni.JniType.objectType, [
        propertyName.reference,
        converter.reference,
        evaluator.reference,
        values.reference
      ]).object);

  static final _id_ofObject = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofObject",
      "(Ljava/lang/String;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofObject(java.lang.String propertyName, android.animation.TypeEvaluator evaluator, java.lang.Object[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property name and
  /// set of Object values. This variant also takes a TypeEvaluator because the system
  /// cannot automatically interpolate between objects of unknown type.
  ///
  /// <strong>Note:</strong> The Object values are stored as references to the original
  /// objects, which means that changes to those objects after this method is called will
  /// affect the values on the PropertyValuesHolder. If the objects will be mutated externally
  /// after this method is called, callers should pass a copy of those objects instead.
  ///@param propertyName The name of the property being animated.
  ///@param evaluator A TypeEvaluator that will be called on each animation frame to
  /// provide the necessary interpolation between the Object values to derive the animated
  /// value.
  ///@param values The values that the named property will animate between.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  static PropertyValuesHolder ofObject(jni.JniString propertyName,
          typeevaluator_.TypeEvaluator evaluator, jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofObject, jni.JniType.objectType, [
        propertyName.reference,
        evaluator.reference,
        values.reference
      ]).object);

  static final _id_ofObject1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofObject",
      "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofObject(java.lang.String propertyName, android.animation.TypeConverter<android.graphics.PointF,?> converter, android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property name and
  /// a Path along which the values should be animated. This variant supports a
  /// <code>TypeConverter</code> to convert from <code>PointF</code> to the target
  /// type.
  ///
  /// The PointF passed to <code>converter</code> or <code>property</code>, if
  /// <code>converter</code> is <code>null</code>, is reused on each animation frame and should
  /// not be stored by the setter or TypeConverter.
  ///
  ///@param propertyName The name of the property being animated.
  ///@param converter Converts a PointF to the type associated with the setter. May be
  ///                  null if conversion is unnecessary.
  ///@param path The Path along which the values should be animated.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  static PropertyValuesHolder ofObject1(jni.JniString propertyName,
          typeconverter_.TypeConverter converter, path_.Path path) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofObject1, jni.JniType.objectType, [
        propertyName.reference,
        converter.reference,
        path.reference
      ]).object);

  static final _id_ofObject2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofObject",
      "(Landroid/util/Property;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofObject(android.util.Property property, android.animation.TypeEvaluator<V> evaluator, V[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property and
  /// set of Object values. This variant also takes a TypeEvaluator because the system
  /// cannot automatically interpolate between objects of unknown type.
  ///
  /// <strong>Note:</strong> The Object values are stored as references to the original
  /// objects, which means that changes to those objects after this method is called will
  /// affect the values on the PropertyValuesHolder. If the objects will be mutated externally
  /// after this method is called, callers should pass a copy of those objects instead.
  ///@param property The property being animated. Should not be null.
  ///@param evaluator A TypeEvaluator that will be called on each animation frame to
  /// provide the necessary interpolation between the Object values to derive the animated
  /// value.
  ///@param values The values that the property will animate between.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  static PropertyValuesHolder ofObject2(property_.Property property,
          typeevaluator_.TypeEvaluator evaluator, jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofObject2,
          jni.JniType.objectType,
          [property.reference, evaluator.reference, values.reference]).object);

  static final _id_ofObject3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofObject",
      "(Landroid/util/Property;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofObject(android.util.Property<?,V> property, android.animation.TypeConverter<T,V> converter, android.animation.TypeEvaluator<T> evaluator, T[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property and
  /// set of Object values. This variant also takes a TypeEvaluator because the system
  /// cannot automatically interpolate between objects of unknown type. This variant also
  /// takes a <code>TypeConverter</code> to convert from animated values to the type
  /// of the property. If only one value is supplied, the <code>TypeConverter</code>
  /// must be a android.animation.BidirectionalTypeConverter to retrieve the current
  /// value.
  ///
  /// <strong>Note:</strong> The Object values are stored as references to the original
  /// objects, which means that changes to those objects after this method is called will
  /// affect the values on the PropertyValuesHolder. If the objects will be mutated externally
  /// after this method is called, callers should pass a copy of those objects instead.
  ///@param property The property being animated. Should not be null.
  ///@param converter Converts the animated object to the Property type.
  ///@param evaluator A TypeEvaluator that will be called on each animation frame to
  /// provide the necessary interpolation between the Object values to derive the animated
  /// value.
  ///@param values The values that the property will animate between.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  ///@see \#setConverter(TypeConverter)
  ///@see TypeConverter
  static PropertyValuesHolder ofObject3(
          property_.Property property,
          typeconverter_.TypeConverter converter,
          typeevaluator_.TypeEvaluator evaluator,
          jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofObject3, jni.JniType.objectType, [
        property.reference,
        converter.reference,
        evaluator.reference,
        values.reference
      ]).object);

  static final _id_ofObject4 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofObject",
      "(Landroid/util/Property;Landroid/animation/TypeConverter;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofObject(android.util.Property<?,V> property, android.animation.TypeConverter<android.graphics.PointF,V> converter, android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder with a given property and
  /// a Path along which the values should be animated. This variant supports a
  /// <code>TypeConverter</code> to convert from <code>PointF</code> to the target
  /// type.
  ///
  /// The PointF passed to <code>converter</code> or <code>property</code>, if
  /// <code>converter</code> is <code>null</code>, is reused on each animation frame and should
  /// not be stored by the setter or TypeConverter.
  ///
  ///@param property The property being animated. Should not be null.
  ///@param converter Converts a PointF to the type associated with the setter. May be
  ///                  null if conversion is unnecessary.
  ///@param path The Path along which the values should be animated.
  ///@return PropertyValuesHolder The constructed PropertyValuesHolder object.
  static PropertyValuesHolder ofObject4(property_.Property property,
          typeconverter_.TypeConverter converter, path_.Path path) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofObject4,
          jni.JniType.objectType,
          [property.reference, converter.reference, path.reference]).object);

  static final _id_ofKeyframe = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofKeyframe",
      "(Ljava/lang/String;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofKeyframe(java.lang.String propertyName, android.animation.Keyframe[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder object with the specified property name and set
  /// of values. These values can be of any type, but the type should be consistent so that
  /// an appropriate android.animation.TypeEvaluator can be found that matches
  /// the common type.
  /// If there is only one value, it is assumed to be the end value of an animation,
  /// and an initial value will be derived, if possible, by calling a getter function
  /// on the object. Also, if any value is null, the value will be filled in when the animation
  /// starts in the same way. This mechanism of automatically getting null values only works
  /// if the PropertyValuesHolder object is used in conjunction
  /// ObjectAnimator, and with a getter function
  /// derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
  /// no way of determining what the value should be.
  ///@param propertyName The name of the property associated with this set of values. This
  /// can be the actual property name to be used when using a ObjectAnimator object, or
  /// just a name used to get animated values, such as if this object is used with an
  /// ValueAnimator object.
  ///@param values The set of values to animate between.
  static PropertyValuesHolder ofKeyframe(
          jni.JniString propertyName, jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofKeyframe,
          jni.JniType.objectType,
          [propertyName.reference, values.reference]).object);

  static final _id_ofKeyframe1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofKeyframe",
      "(Landroid/util/Property;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;");

  /// from: static public android.animation.PropertyValuesHolder ofKeyframe(android.util.Property property, android.animation.Keyframe[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns a PropertyValuesHolder object with the specified property and set
  /// of values. These values can be of any type, but the type should be consistent so that
  /// an appropriate android.animation.TypeEvaluator can be found that matches
  /// the common type.
  /// If there is only one value, it is assumed to be the end value of an animation,
  /// and an initial value will be derived, if possible, by calling the property's
  /// android.util.Property\#get(Object) function.
  /// Also, if any value is null, the value will be filled in when the animation
  /// starts in the same way. This mechanism of automatically getting null values only works
  /// if the PropertyValuesHolder object is used in conjunction with
  /// ObjectAnimator, since otherwise PropertyValuesHolder has
  /// no way of determining what the value should be.
  ///@param property The property associated with this set of values. Should not be null.
  ///@param values The set of values to animate between.
  static PropertyValuesHolder ofKeyframe1(
          property_.Property property, jni.JniObject values) =>
      PropertyValuesHolder.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofKeyframe1,
          jni.JniType.objectType,
          [property.reference, values.reference]).object);

  static final _id_setIntValues =
      jniAccessors.getMethodIDOf(_classRef, "setIntValues", "([I)V");

  /// from: public void setIntValues(int[] values)
  ///
  /// Set the animated values for this object to this set of ints.
  /// If there is only one value, it is assumed to be the end value of an animation,
  /// and an initial value will be derived, if possible, by calling a getter function
  /// on the object. Also, if any value is null, the value will be filled in when the animation
  /// starts in the same way. This mechanism of automatically getting null values only works
  /// if the PropertyValuesHolder object is used in conjunction
  /// ObjectAnimator, and with a getter function
  /// derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
  /// no way of determining what the value should be.
  ///@param values One or more values that the animation will animate between.
  void setIntValues(jni.JniObject values) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setIntValues,
      jni.JniType.voidType,
      [values.reference]).check();

  static final _id_setFloatValues =
      jniAccessors.getMethodIDOf(_classRef, "setFloatValues", "([F)V");

  /// from: public void setFloatValues(float[] values)
  ///
  /// Set the animated values for this object to this set of floats.
  /// If there is only one value, it is assumed to be the end value of an animation,
  /// and an initial value will be derived, if possible, by calling a getter function
  /// on the object. Also, if any value is null, the value will be filled in when the animation
  /// starts in the same way. This mechanism of automatically getting null values only works
  /// if the PropertyValuesHolder object is used in conjunction
  /// ObjectAnimator, and with a getter function
  /// derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
  /// no way of determining what the value should be.
  ///@param values One or more values that the animation will animate between.
  void setFloatValues(jni.JniObject values) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setFloatValues,
      jni.JniType.voidType,
      [values.reference]).check();

  static final _id_setKeyframes = jniAccessors.getMethodIDOf(
      _classRef, "setKeyframes", "([Landroid/animation/Keyframe;)V");

  /// from: public void setKeyframes(android.animation.Keyframe[] values)
  ///
  /// Set the animated values for this object to this set of Keyframes.
  ///@param values One or more values that the animation will animate between.
  void setKeyframes(jni.JniObject values) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setKeyframes,
      jni.JniType.voidType,
      [values.reference]).check();

  static final _id_setObjectValues = jniAccessors.getMethodIDOf(
      _classRef, "setObjectValues", "([Ljava/lang/Object;)V");

  /// from: public void setObjectValues(java.lang.Object[] values)
  ///
  /// Set the animated values for this object to this set of Objects.
  /// If there is only one value, it is assumed to be the end value of an animation,
  /// and an initial value will be derived, if possible, by calling a getter function
  /// on the object. Also, if any value is null, the value will be filled in when the animation
  /// starts in the same way. This mechanism of automatically getting null values only works
  /// if the PropertyValuesHolder object is used in conjunction
  /// ObjectAnimator, and with a getter function
  /// derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
  /// no way of determining what the value should be.
  ///
  /// <strong>Note:</strong> The Object values are stored as references to the original
  /// objects, which means that changes to those objects after this method is called will
  /// affect the values on the PropertyValuesHolder. If the objects will be mutated externally
  /// after this method is called, callers should pass a copy of those objects instead.
  ///@param values One or more values that the animation will animate between.
  void setObjectValues(jni.JniObject values) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setObjectValues,
      jni.JniType.voidType,
      [values.reference]).check();

  static final _id_setConverter = jniAccessors.getMethodIDOf(
      _classRef, "setConverter", "(Landroid/animation/TypeConverter;)V");

  /// from: public void setConverter(android.animation.TypeConverter converter)
  ///
  /// Sets the converter to convert from the values type to the setter's parameter type.
  /// If only one value is supplied, <var>converter</var> must be a
  /// android.animation.BidirectionalTypeConverter.
  ///@param converter The converter to use to convert values.
  void setConverter(typeconverter_.TypeConverter converter) =>
      jniAccessors.callMethodWithArgs(reference, _id_setConverter,
          jni.JniType.voidType, [converter.reference]).check();

  static final _id_clone = jniAccessors.getMethodIDOf(
      _classRef, "clone", "()Landroid/animation/PropertyValuesHolder;");

  /// from: public android.animation.PropertyValuesHolder clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PropertyValuesHolder clone() =>
      PropertyValuesHolder.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniType.objectType, []).object);

  static final _id_setEvaluator = jniAccessors.getMethodIDOf(
      _classRef, "setEvaluator", "(Landroid/animation/TypeEvaluator;)V");

  /// from: public void setEvaluator(android.animation.TypeEvaluator evaluator)
  ///
  /// The TypeEvaluator will be automatically determined based on the type of values
  /// supplied to PropertyValuesHolder. The evaluator can be manually set, however, if so
  /// desired. This may be important in cases where either the type of the values supplied
  /// do not match the way that they should be interpolated between, or if the values
  /// are of a custom type or one not currently understood by the animation system. Currently,
  /// only values of type float and int (and their Object equivalents: Float
  /// and Integer) are  correctly interpolated; all other types require setting a TypeEvaluator.
  ///@param evaluator
  void setEvaluator(typeevaluator_.TypeEvaluator evaluator) =>
      jniAccessors.callMethodWithArgs(reference, _id_setEvaluator,
          jni.JniType.voidType, [evaluator.reference]).check();

  static final _id_setPropertyName = jniAccessors.getMethodIDOf(
      _classRef, "setPropertyName", "(Ljava/lang/String;)V");

  /// from: public void setPropertyName(java.lang.String propertyName)
  ///
  /// Sets the name of the property that will be animated. This name is used to derive
  /// a setter function that will be called to set animated values.
  /// For example, a property name of <code>foo</code> will result
  /// in a call to the function <code>setFoo()</code> on the target object. If either
  /// <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
  /// also be derived and called.
  ///
  /// Note that the setter function derived from this property name
  /// must take the same parameter type as the
  /// <code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
  /// the setter function will fail.
  ///
  ///@param propertyName The name of the property being animated.
  void setPropertyName(jni.JniString propertyName) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPropertyName,
          jni.JniType.voidType, [propertyName.reference]).check();

  static final _id_setProperty = jniAccessors.getMethodIDOf(
      _classRef, "setProperty", "(Landroid/util/Property;)V");

  /// from: public void setProperty(android.util.Property property)
  ///
  /// Sets the property that will be animated.
  ///
  /// Note that if this PropertyValuesHolder object is used with ObjectAnimator, the property
  /// must exist on the target object specified in that ObjectAnimator.
  ///
  ///@param property The property being animated.
  void setProperty(property_.Property property) =>
      jniAccessors.callMethodWithArgs(reference, _id_setProperty,
          jni.JniType.voidType, [property.reference]).check();

  static final _id_getPropertyName = jniAccessors.getMethodIDOf(
      _classRef, "getPropertyName", "()Ljava/lang/String;");

  /// from: public java.lang.String getPropertyName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the name of the property that will be animated. This name will be used to derive
  /// a setter function that will be called to set animated values.
  /// For example, a property name of <code>foo</code> will result
  /// in a call to the function <code>setFoo()</code> on the target object. If either
  /// <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
  /// also be derived and called.
  jni.JniString getPropertyName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPropertyName, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
