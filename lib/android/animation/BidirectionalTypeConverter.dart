// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "TypeConverter.dart" as typeconverter_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.animation.BidirectionalTypeConverter
///
/// Abstract base class used convert type T to another type V and back again. This
/// is necessary when the value types of in animation are different from the property
/// type. BidirectionalTypeConverter is needed when only the final value for the
/// animation is supplied to animators.
///@see PropertyValuesHolder\#setConverter(TypeConverter)
class BidirectionalTypeConverter extends typeconverter_.TypeConverter {
  static final _classRef =
      jniAccessors.getClassOf("android/animation/BidirectionalTypeConverter");
  BidirectionalTypeConverter.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, "<init>", "(Ljava/lang/Class;Ljava/lang/Class;)V");

  /// from: public void <init>(java.lang.Class<T> fromClass, java.lang.Class<V> toClass)
  /// The returned object must be deleted after use, by calling the `delete` method.
  BidirectionalTypeConverter(jni.JniObject fromClass, jni.JniObject toClass)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [fromClass.reference, toClass.reference]).object);

  static final _id_invert = jniAccessors.getMethodIDOf(
      _classRef, "invert", "()Landroid/animation/BidirectionalTypeConverter;");

  /// from: public android.animation.BidirectionalTypeConverter<V,T> invert()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the inverse of this converter, where the from and to classes are reversed.
  /// The inverted converter uses this convert to call \#convertBack(Object) for
  /// \#convert(Object) calls and \#convert(Object) for
  /// \#convertBack(Object) calls.
  ///@return The inverse of this converter, where the from and to classes are reversed.
  BidirectionalTypeConverter invert() =>
      BidirectionalTypeConverter.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_invert, jni.JniType.objectType, []).object);
}
