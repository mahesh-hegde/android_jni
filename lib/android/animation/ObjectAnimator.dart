// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: unused_shown_name
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_import
// ignore_for_file: unused_element
// ignore_for_file: unused_field

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "ValueAnimator.dart" as valueanimator_;

import "../util/Property.dart" as property_;

import "../graphics/Path.dart" as path_;

import "TypeConverter.dart" as typeconverter_;

import "TypeEvaluator.dart" as typeevaluator_;
import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.animation.ObjectAnimator
///
/// This subclass of ValueAnimator provides support for animating properties on target objects.
/// The constructors of this class take parameters to define the target object that will be animated
/// as well as the name of the property that will be animated. Appropriate set/get functions
/// are then determined internally and the animation will call these functions as necessary to
/// animate the property.
///
/// Animators can be created from either code or resource files, as shown here:
///
///
/// {@sample development/samples/ApiDemos/res/anim/object_animator.xml ObjectAnimatorResources}
///
/// Starting from API 23, it is possible to use PropertyValuesHolder and
/// Keyframe in resource files to create more complex animations. Using PropertyValuesHolders
/// allows animators to animate several properties in parallel, as shown in this sample:
///
///
/// {@sample development/samples/ApiDemos/res/anim/object_animator_pvh.xml
/// PropertyValuesHolderResources}
///
/// Using Keyframes allows animations to follow more complex paths from the start
/// to the end values. Note that you can specify explicit fractional values (from 0 to 1) for
/// each keyframe to determine when, in the overall duration, the animation should arrive at that
/// value. Alternatively, you can leave the fractions off and the keyframes will be equally
/// distributed within the total duration. Also, a keyframe with no value will derive its value
/// from the target object when the animator starts, just like animators with only one
/// value specified. In addition, an optional interpolator can be specified. The interpolator will
/// be applied on the interval between the keyframe that the interpolator is set on and the previous
/// keyframe. When no interpolator is supplied, the default AccelerateDecelerateInterpolator
/// will be used.
///
///
/// {@sample development/samples/ApiDemos/res/anim/object_animator_pvh_kf_interpolated.xml KeyframeResources}
///
/// <div class="special reference">
/// <h3>Developer Guides</h3>
/// For more information about animating with {@code ObjectAnimator}, read the
/// <a href="{@docRoot}guide/topics/graphics/prop-animation.html\#object-animator">Property
/// Animation</a> developer guide.
///
/// </div>
///@see \#setPropertyName(String)
class ObjectAnimator extends valueanimator_.ValueAnimator {
  static final _classRef =
      jniAccessors.getClassOf("android/animation/ObjectAnimator");
  ObjectAnimator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new ObjectAnimator object. This default constructor is primarily for
  /// use internally; the other constructors which take parameters are more generally
  /// useful.
  ObjectAnimator()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_setPropertyName = jniAccessors.getMethodIDOf(
      _classRef, "setPropertyName", "(Ljava/lang/String;)V");

  /// from: public void setPropertyName(java.lang.String propertyName)
  ///
  /// Sets the name of the property that will be animated. This name is used to derive
  /// a setter function that will be called to set animated values.
  /// For example, a property name of <code>foo</code> will result
  /// in a call to the function <code>setFoo()</code> on the target object. If either
  /// <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
  /// also be derived and called.
  ///
  /// For best performance of the mechanism that calls the setter function determined by the
  /// name of the property being animated, use <code>float</code> or <code>int</code> typed values,
  /// and make the setter function for those properties have a <code>void</code> return value. This
  /// will cause the code to take an optimized path for these constrained circumstances. Other
  /// property types and return types will work, but will have more overhead in processing
  /// the requests due to normal reflection mechanisms.
  ///
  ///
  /// Note that the setter function derived from this property name
  /// must take the same parameter type as the
  /// <code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
  /// the setter function will fail.
  ///
  ///
  /// If this ObjectAnimator has been set up to animate several properties together,
  /// using more than one PropertyValuesHolder objects, then setting the propertyName simply
  /// sets the propertyName in the first of those PropertyValuesHolder objects.
  ///
  ///@param propertyName The name of the property being animated. Should not be null.
  ///
  /// This value must never be {@code null}.
  void setPropertyName(jni.JniString propertyName) =>
      jniAccessors.callMethodWithArgs(reference, _id_setPropertyName,
          jni.JniType.voidType, [propertyName.reference]).check();

  static final _id_setProperty = jniAccessors.getMethodIDOf(
      _classRef, "setProperty", "(Landroid/util/Property;)V");

  /// from: public void setProperty(android.util.Property property)
  ///
  /// Sets the property that will be animated. Property objects will take precedence over
  /// properties specified by the \#setPropertyName(String) method. Animations should
  /// be set up to use one or the other, not both.
  ///@param property The property being animated. Should not be null.
  ///
  /// This value must never be {@code null}.
  void setProperty(property_.Property property) =>
      jniAccessors.callMethodWithArgs(reference, _id_setProperty,
          jni.JniType.voidType, [property.reference]).check();

  static final _id_getPropertyName = jniAccessors.getMethodIDOf(
      _classRef, "getPropertyName", "()Ljava/lang/String;");

  /// from: public java.lang.String getPropertyName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the name of the property that will be animated. This name will be used to derive
  /// a setter function that will be called to set animated values.
  /// For example, a property name of <code>foo</code> will result
  /// in a call to the function <code>setFoo()</code> on the target object. If either
  /// <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
  /// also be derived and called.
  ///
  /// If this animator was created with a Property object instead of the
  /// string name of a property, then this method will return the Property\#getName() name of that Property object instead. If this animator was
  /// created with one or more PropertyValuesHolder objects, then this method
  /// will return the PropertyValuesHolder\#getPropertyName() name of that
  /// object (if there was just one) or a comma-separated list of all of the
  /// names (if there are more than one).
  ///
  jni.JniString getPropertyName() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getPropertyName, jni.JniType.objectType, []).object);

  static final _id_ofInt1 = jniAccessors.getStaticMethodIDOf(_classRef, "ofInt",
      "(Ljava/lang/Object;Ljava/lang/String;[I)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofInt(java.lang.Object target, java.lang.String propertyName, int[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates between int values. A single
  /// value implies that that value is the one being animated to, in which case the start value
  /// will be derived from the property being animated and the target object when \#start()
  /// is called for the first time. Two values imply starting and ending values. More than two
  /// values imply a starting value, values to animate through along the way, and an ending value
  /// (these values will be distributed evenly across the duration of the animation).
  ///@param target The object whose property is to be animated. This object should
  /// have a public method on it called <code>setName()</code>, where <code>name</code> is
  /// the value of the <code>propertyName</code> parameter.
  ///@param propertyName The name of the property being animated.
  ///@param values A set of values that the animation will animate between over time.
  ///@return An ObjectAnimator object that is set up to animate between the given values.
  static ObjectAnimator ofInt1(jni.JniObject target, jni.JniString propertyName,
          jni.JniObject values) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofInt1,
          jni.JniType.objectType,
          [target.reference, propertyName.reference, values.reference]).object);

  static final _id_ofInt2 = jniAccessors.getStaticMethodIDOf(_classRef, "ofInt",
      "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Path;)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofInt(java.lang.Object target, java.lang.String xPropertyName, java.lang.String yPropertyName, android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
  /// using two properties. A <code>Path</code></> animation moves in two dimensions, animating
  /// coordinates <code>(x, y)</code> together to follow the line. In this variation, the
  /// coordinates are integers that are set to separate properties designated by
  /// <code>xPropertyName</code> and <code>yPropertyName</code>.
  ///@param target The object whose properties are to be animated. This object should
  ///               have public methods on it called <code>setNameX()</code> and
  ///               <code>setNameY</code>, where <code>nameX</code> and <code>nameY</code>
  ///               are the value of <code>xPropertyName</code> and <code>yPropertyName</code>
  ///               parameters, respectively.
  ///@param xPropertyName The name of the property for the x coordinate being animated.
  ///@param yPropertyName The name of the property for the y coordinate being animated.
  ///@param path The <code>Path</code> to animate values along.
  ///@return An ObjectAnimator object that is set up to animate along <code>path</code>.
  static ObjectAnimator ofInt2(
          jni.JniObject target,
          jni.JniString xPropertyName,
          jni.JniString yPropertyName,
          path_.Path path) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofInt2, jni.JniType.objectType, [
        target.reference,
        xPropertyName.reference,
        yPropertyName.reference,
        path.reference
      ]).object);

  static final _id_ofMultiInt = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiInt",
      "(Ljava/lang/Object;Ljava/lang/String;[[I)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofMultiInt(java.lang.Object target, java.lang.String propertyName, int[][] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates over int values for a multiple
  /// parameters setter. Only public methods that take only int parameters are supported.
  /// Each <code>int[]</code> contains a complete set of parameters to the setter method.
  /// At least two <code>int[]</code> values must be provided, a start and end. More than two
  /// values imply a starting value, values to animate through along the way, and an ending
  /// value (these values will be distributed evenly across the duration of the animation).
  ///@param target The object whose property is to be animated. This object may
  /// have a public method on it called <code>setName()</code>, where <code>name</code> is
  /// the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
  /// be the case-sensitive complete name of the public setter method.
  ///@param propertyName The name of the property being animated or the name of the setter method.
  ///@param values A set of values that the animation will animate between over time.
  ///@return An ObjectAnimator object that is set up to animate between the given values.
  static ObjectAnimator ofMultiInt(jni.JniObject target,
          jni.JniString propertyName, jni.JniObject values) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofMultiInt,
          jni.JniType.objectType,
          [target.reference, propertyName.reference, values.reference]).object);

  static final _id_ofMultiInt1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiInt",
      "(Ljava/lang/Object;Ljava/lang/String;Landroid/graphics/Path;)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofMultiInt(java.lang.Object target, java.lang.String propertyName, android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates the target using a multi-int setter
  /// along the given <code>Path</code>. A <code>Path</code></> animation moves in two dimensions,
  /// animating coordinates <code>(x, y)</code> together to follow the line. In this variation, the
  /// coordinates are integer x and y coordinates used in the first and second parameter of the
  /// setter, respectively.
  ///@param target The object whose property is to be animated. This object may
  /// have a public method on it called <code>setName()</code>, where <code>name</code> is
  /// the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
  /// be the case-sensitive complete name of the public setter method.
  ///@param propertyName The name of the property being animated or the name of the setter method.
  ///@param path The <code>Path</code> to animate values along.
  ///@return An ObjectAnimator object that is set up to animate along <code>path</code>.
  static ObjectAnimator ofMultiInt1(
          jni.JniObject target, jni.JniString propertyName, path_.Path path) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofMultiInt1,
          jni.JniType.objectType,
          [target.reference, propertyName.reference, path.reference]).object);

  static final _id_ofMultiInt2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiInt",
      "(Ljava/lang/Object;Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofMultiInt(java.lang.Object target, java.lang.String propertyName, android.animation.TypeConverter<T,int[]> converter, android.animation.TypeEvaluator<T> evaluator, T[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates over values for a multiple int
  /// parameters setter. Only public methods that take only int parameters are supported.
  /// At least two values must be provided, a start and end. More than two
  /// values imply a starting value, values to animate through along the way, and an ending
  /// value (these values will be distributed evenly across the duration of the animation).
  ///
  ///@param target The object whose property is to be animated. This object may
  /// have a public method on it called <code>setName()</code>, where <code>name</code> is
  /// the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
  /// be the case-sensitive complete name of the public setter method.
  ///@param propertyName The name of the property being animated or the name of the setter method.
  ///@param converter Converts T objects into int parameters for the multi-value setter.
  ///@param evaluator A TypeEvaluator that will be called on each animation frame to
  /// provide the necessary interpolation between the Object values to derive the animated
  /// value.
  ///@param values A set of values that the animation will animate between over time.
  ///@return An ObjectAnimator object that is set up to animate between the given values.
  static ObjectAnimator ofMultiInt2(
          jni.JniObject target,
          jni.JniString propertyName,
          typeconverter_.TypeConverter converter,
          typeevaluator_.TypeEvaluator evaluator,
          jni.JniObject values) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofMultiInt2, jni.JniType.objectType, [
        target.reference,
        propertyName.reference,
        converter.reference,
        evaluator.reference,
        values.reference
      ]).object);

  static final _id_ofArgb1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofArgb",
      "(Ljava/lang/Object;Ljava/lang/String;[I)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofArgb(java.lang.Object target, java.lang.String propertyName, int[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates between color values. A single
  /// value implies that that value is the one being animated to, in which case the start value
  /// will be derived from the property being animated and the target object when \#start()
  /// is called for the first time. Two values imply starting and ending values. More than two
  /// values imply a starting value, values to animate through along the way, and an ending value
  /// (these values will be distributed evenly across the duration of the animation).
  ///@param target The object whose property is to be animated. This object should
  /// have a public method on it called <code>setName()</code>, where <code>name</code> is
  /// the value of the <code>propertyName</code> parameter.
  ///@param propertyName The name of the property being animated.
  ///@param values A set of values that the animation will animate between over time.
  ///@return An ObjectAnimator object that is set up to animate between the given values.
  static ObjectAnimator ofArgb1(jni.JniObject target,
          jni.JniString propertyName, jni.JniObject values) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofArgb1,
          jni.JniType.objectType,
          [target.reference, propertyName.reference, values.reference]).object);

  static final _id_ofFloat1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofFloat",
      "(Ljava/lang/Object;Ljava/lang/String;[F)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofFloat(java.lang.Object target, java.lang.String propertyName, float[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates between float values. A single
  /// value implies that that value is the one being animated to, in which case the start value
  /// will be derived from the property being animated and the target object when \#start()
  /// is called for the first time. Two values imply starting and ending values. More than two
  /// values imply a starting value, values to animate through along the way, and an ending value
  /// (these values will be distributed evenly across the duration of the animation).
  ///@param target The object whose property is to be animated. This object should
  /// have a public method on it called <code>setName()</code>, where <code>name</code> is
  /// the value of the <code>propertyName</code> parameter.
  ///@param propertyName The name of the property being animated.
  ///@param values A set of values that the animation will animate between over time.
  ///@return An ObjectAnimator object that is set up to animate between the given values.
  static ObjectAnimator ofFloat1(jni.JniObject target,
          jni.JniString propertyName, jni.JniObject values) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofFloat1,
          jni.JniType.objectType,
          [target.reference, propertyName.reference, values.reference]).object);

  static final _id_ofFloat2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofFloat",
      "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Path;)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofFloat(java.lang.Object target, java.lang.String xPropertyName, java.lang.String yPropertyName, android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
  /// using two properties. A <code>Path</code></> animation moves in two dimensions, animating
  /// coordinates <code>(x, y)</code> together to follow the line. In this variation, the
  /// coordinates are floats that are set to separate properties designated by
  /// <code>xPropertyName</code> and <code>yPropertyName</code>.
  ///@param target The object whose properties are to be animated. This object should
  ///               have public methods on it called <code>setNameX()</code> and
  ///               <code>setNameY</code>, where <code>nameX</code> and <code>nameY</code>
  ///               are the value of the <code>xPropertyName</code> and <code>yPropertyName</code>
  ///               parameters, respectively.
  ///@param xPropertyName The name of the property for the x coordinate being animated.
  ///@param yPropertyName The name of the property for the y coordinate being animated.
  ///@param path The <code>Path</code> to animate values along.
  ///@return An ObjectAnimator object that is set up to animate along <code>path</code>.
  static ObjectAnimator ofFloat2(
          jni.JniObject target,
          jni.JniString xPropertyName,
          jni.JniString yPropertyName,
          path_.Path path) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofFloat2, jni.JniType.objectType, [
        target.reference,
        xPropertyName.reference,
        yPropertyName.reference,
        path.reference
      ]).object);

  static final _id_ofMultiFloat = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiFloat",
      "(Ljava/lang/Object;Ljava/lang/String;[[F)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofMultiFloat(java.lang.Object target, java.lang.String propertyName, float[][] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates over float values for a multiple
  /// parameters setter. Only public methods that take only float parameters are supported.
  /// Each <code>float[]</code> contains a complete set of parameters to the setter method.
  /// At least two <code>float[]</code> values must be provided, a start and end. More than two
  /// values imply a starting value, values to animate through along the way, and an ending
  /// value (these values will be distributed evenly across the duration of the animation).
  ///@param target The object whose property is to be animated. This object may
  /// have a public method on it called <code>setName()</code>, where <code>name</code> is
  /// the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
  /// be the case-sensitive complete name of the public setter method.
  ///@param propertyName The name of the property being animated or the name of the setter method.
  ///@param values A set of values that the animation will animate between over time.
  ///@return An ObjectAnimator object that is set up to animate between the given values.
  static ObjectAnimator ofMultiFloat(jni.JniObject target,
          jni.JniString propertyName, jni.JniObject values) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofMultiFloat,
          jni.JniType.objectType,
          [target.reference, propertyName.reference, values.reference]).object);

  static final _id_ofMultiFloat1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiFloat",
      "(Ljava/lang/Object;Ljava/lang/String;Landroid/graphics/Path;)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofMultiFloat(java.lang.Object target, java.lang.String propertyName, android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates the target using a multi-float setter
  /// along the given <code>Path</code>. A <code>Path</code></> animation moves in two dimensions,
  /// animating coordinates <code>(x, y)</code> together to follow the line. In this variation, the
  /// coordinates are float x and y coordinates used in the first and second parameter of the
  /// setter, respectively.
  ///@param target The object whose property is to be animated. This object may
  /// have a public method on it called <code>setName()</code>, where <code>name</code> is
  /// the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
  /// be the case-sensitive complete name of the public setter method.
  ///@param propertyName The name of the property being animated or the name of the setter method.
  ///@param path The <code>Path</code> to animate values along.
  ///@return An ObjectAnimator object that is set up to animate along <code>path</code>.
  static ObjectAnimator ofMultiFloat1(
          jni.JniObject target, jni.JniString propertyName, path_.Path path) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofMultiFloat1,
          jni.JniType.objectType,
          [target.reference, propertyName.reference, path.reference]).object);

  static final _id_ofMultiFloat2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofMultiFloat",
      "(Ljava/lang/Object;Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofMultiFloat(java.lang.Object target, java.lang.String propertyName, android.animation.TypeConverter<T,float[]> converter, android.animation.TypeEvaluator<T> evaluator, T[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates over values for a multiple float
  /// parameters setter. Only public methods that take only float parameters are supported.
  /// At least two values must be provided, a start and end. More than two
  /// values imply a starting value, values to animate through along the way, and an ending
  /// value (these values will be distributed evenly across the duration of the animation).
  ///
  ///@param target The object whose property is to be animated. This object may
  /// have a public method on it called <code>setName()</code>, where <code>name</code> is
  /// the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also
  /// be the case-sensitive complete name of the public setter method.
  ///@param propertyName The name of the property being animated or the name of the setter method.
  ///@param converter Converts T objects into float parameters for the multi-value setter.
  ///@param evaluator A TypeEvaluator that will be called on each animation frame to
  /// provide the necessary interpolation between the Object values to derive the animated
  /// value.
  ///@param values A set of values that the animation will animate between over time.
  ///@return An ObjectAnimator object that is set up to animate between the given values.
  static ObjectAnimator ofMultiFloat2(
          jni.JniObject target,
          jni.JniString propertyName,
          typeconverter_.TypeConverter converter,
          typeevaluator_.TypeEvaluator evaluator,
          jni.JniObject values) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofMultiFloat2, jni.JniType.objectType, [
        target.reference,
        propertyName.reference,
        converter.reference,
        evaluator.reference,
        values.reference
      ]).object);

  static final _id_ofObject1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofObject",
      "(Ljava/lang/Object;Ljava/lang/String;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofObject(java.lang.Object target, java.lang.String propertyName, android.animation.TypeEvaluator evaluator, java.lang.Object[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates between Object values. A single
  /// value implies that that value is the one being animated to, in which case the start value
  /// will be derived from the property being animated and the target object when \#start()
  /// is called for the first time. Two values imply starting and ending values. More than two
  /// values imply a starting value, values to animate through along the way, and an ending value
  /// (these values will be distributed evenly across the duration of the animation).
  ///
  /// <strong>Note:</strong> The values are stored as references to the original
  /// objects, which means that changes to those objects after this method is called will
  /// affect the values on the animator. If the objects will be mutated externally after
  /// this method is called, callers should pass a copy of those objects instead.
  ///@param target The object whose property is to be animated. This object should
  /// have a public method on it called <code>setName()</code>, where <code>name</code> is
  /// the value of the <code>propertyName</code> parameter.
  ///@param propertyName The name of the property being animated.
  ///@param evaluator A TypeEvaluator that will be called on each animation frame to
  /// provide the necessary interpolation between the Object values to derive the animated
  /// value.
  ///@param values A set of values that the animation will animate between over time.
  ///@return An ObjectAnimator object that is set up to animate between the given values.
  static ObjectAnimator ofObject1(
          jni.JniObject target,
          jni.JniString propertyName,
          typeevaluator_.TypeEvaluator evaluator,
          jni.JniObject values) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofObject1, jni.JniType.objectType, [
        target.reference,
        propertyName.reference,
        evaluator.reference,
        values.reference
      ]).object);

  static final _id_ofObject2 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofObject",
      "(Ljava/lang/Object;Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/graphics/Path;)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofObject(java.lang.Object target, java.lang.String propertyName, android.animation.TypeConverter<android.graphics.PointF,?> converter, android.graphics.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates a property along a <code>Path</code>.
  /// A <code>Path</code></> animation moves in two dimensions, animating coordinates
  /// <code>(x, y)</code> together to follow the line. This variant animates the coordinates
  /// in a <code>PointF</code> to follow the <code>Path</code>. If the <code>Property</code>
  /// associated with <code>propertyName</code> uses a type other than <code>PointF</code>,
  /// <code>converter</code> can be used to change from <code>PointF</code> to the type
  /// associated with the <code>Property</code>.
  ///@param target The object whose property is to be animated. This object should
  /// have a public method on it called <code>setName()</code>, where <code>name</code> is
  /// the value of the <code>propertyName</code> parameter.
  ///@param propertyName The name of the property being animated.
  ///@param converter Converts a PointF to the type associated with the setter. May be
  ///                  null if conversion is unnecessary.
  /// This value may be {@code null}.
  ///@param path The <code>Path</code> to animate values along.
  ///@return An ObjectAnimator object that is set up to animate along <code>path</code>.
  static ObjectAnimator ofObject2(
          jni.JniObject target,
          jni.JniString propertyName,
          typeconverter_.TypeConverter converter,
          path_.Path path) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef, _id_ofObject2, jni.JniType.objectType, [
        target.reference,
        propertyName.reference,
        converter.reference,
        path.reference
      ]).object);

  static final _id_ofPropertyValuesHolder1 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "ofPropertyValuesHolder",
      "(Ljava/lang/Object;[Landroid/animation/PropertyValuesHolder;)Landroid/animation/ObjectAnimator;");

  /// from: static public android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object target, android.animation.PropertyValuesHolder[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs and returns an ObjectAnimator that animates between the sets of values specified
  /// in <code>PropertyValueHolder</code> objects. This variant should be used when animating
  /// several properties at once with the same ObjectAnimator, since PropertyValuesHolder allows
  /// you to associate a set of animation values with a property name.
  ///@param target The object whose property is to be animated. Depending on how the
  /// PropertyValuesObjects were constructed, the target object should either have the android.util.Property objects used to construct the PropertyValuesHolder objects or (if the
  /// PropertyValuesHOlder objects were created with property names) the target object should have
  /// public methods on it called <code>setName()</code>, where <code>name</code> is the name of
  /// the property passed in as the <code>propertyName</code> parameter for each of the
  /// PropertyValuesHolder objects.
  ///@param values A set of PropertyValuesHolder objects whose values will be animated between
  /// over time.
  ///@return An ObjectAnimator object that is set up to animate between the given values.
  ///
  /// This value will never be {@code null}.
  static ObjectAnimator ofPropertyValuesHolder1(
          jni.JniObject target, jni.JniObject values) =>
      ObjectAnimator.fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_ofPropertyValuesHolder1,
          jni.JniType.objectType,
          [target.reference, values.reference]).object);

  static final _id_setIntValues =
      jniAccessors.getMethodIDOf(_classRef, "setIntValues", "([I)V");

  /// from: public void setIntValues(int[] values)
  void setIntValues(jni.JniObject values) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setIntValues,
      jni.JniType.voidType,
      [values.reference]).check();

  static final _id_setFloatValues =
      jniAccessors.getMethodIDOf(_classRef, "setFloatValues", "([F)V");

  /// from: public void setFloatValues(float[] values)
  void setFloatValues(jni.JniObject values) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setFloatValues,
      jni.JniType.voidType,
      [values.reference]).check();

  static final _id_setObjectValues = jniAccessors.getMethodIDOf(
      _classRef, "setObjectValues", "([Ljava/lang/Object;)V");

  /// from: public void setObjectValues(java.lang.Object[] values)
  void setObjectValues(jni.JniObject values) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setObjectValues,
      jni.JniType.voidType,
      [values.reference]).check();

  static final _id_setAutoCancel =
      jniAccessors.getMethodIDOf(_classRef, "setAutoCancel", "(Z)V");

  /// from: public void setAutoCancel(boolean cancel)
  ///
  /// autoCancel controls whether an ObjectAnimator will be canceled automatically
  /// when any other ObjectAnimator with the same target and properties is started.
  /// Setting this flag may make it easier to run different animators on the same target
  /// object without having to keep track of whether there are conflicting animators that
  /// need to be manually canceled. Canceling animators must have the same exact set of
  /// target properties, in the same order.
  ///@param cancel Whether future ObjectAnimators with the same target and properties
  /// as this ObjectAnimator will cause this ObjectAnimator to be canceled.
  void setAutoCancel(bool cancel) => jniAccessors.callMethodWithArgs(
      reference, _id_setAutoCancel, jni.JniType.voidType, [cancel]).check();

  static final _id_start =
      jniAccessors.getMethodIDOf(_classRef, "start", "()V");

  /// from: public void start()
  void start() => jniAccessors.callMethodWithArgs(
      reference, _id_start, jni.JniType.voidType, []).check();

  static final _id_setDuration2 = jniAccessors.getMethodIDOf(
      _classRef, "setDuration", "(J)Landroid/animation/ObjectAnimator;");

  /// from: public android.animation.ObjectAnimator setDuration(long duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets the length of the animation. The default duration is 300 milliseconds.
  ///@param duration The length of the animation, in milliseconds.
  ///@return ObjectAnimator The object called with setDuration(). This return
  /// value makes it easier to compose statements together that construct and then set the
  /// duration, as in
  /// <code>ObjectAnimator.ofInt(target, propertyName, 0, 10).setDuration(500).start()</code>.
  ///
  /// This value will never be {@code null}.
  ObjectAnimator setDuration2(int duration) =>
      ObjectAnimator.fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_setDuration2, jni.JniType.objectType, [duration]).object);

  static final _id_getTarget = jniAccessors.getMethodIDOf(
      _classRef, "getTarget", "()Ljava/lang/Object;");

  /// from: public java.lang.Object getTarget()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The target object whose property will be animated by this animation
  ///@return The object being animated
  ///
  /// This value may be {@code null}.
  jni.JniObject getTarget() =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getTarget, jni.JniType.objectType, []).object);

  static final _id_setTarget1 = jniAccessors.getMethodIDOf(
      _classRef, "setTarget", "(Ljava/lang/Object;)V");

  /// from: public void setTarget(java.lang.Object target)
  ///
  /// @param target This value may be {@code null}.
  void setTarget1(jni.JniObject target) => jniAccessors.callMethodWithArgs(
      reference,
      _id_setTarget1,
      jni.JniType.voidType,
      [target.reference]).check();

  static final _id_setupStartValues1 =
      jniAccessors.getMethodIDOf(_classRef, "setupStartValues", "()V");

  /// from: public void setupStartValues()
  void setupStartValues1() => jniAccessors.callMethodWithArgs(
      reference, _id_setupStartValues1, jni.JniType.voidType, []).check();

  static final _id_setupEndValues1 =
      jniAccessors.getMethodIDOf(_classRef, "setupEndValues", "()V");

  /// from: public void setupEndValues()
  void setupEndValues1() => jniAccessors.callMethodWithArgs(
      reference, _id_setupEndValues1, jni.JniType.voidType, []).check();

  static final _id_clone2 = jniAccessors.getMethodIDOf(
      _classRef, "clone", "()Landroid/animation/ObjectAnimator;");

  /// from: public android.animation.ObjectAnimator clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ObjectAnimator clone2() =>
      ObjectAnimator.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone2, jni.JniType.objectType, []).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return This value will never be {@code null}.
  jni.JniString toString1() =>
      jni.JniString.fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniType.objectType, []).object);
}
