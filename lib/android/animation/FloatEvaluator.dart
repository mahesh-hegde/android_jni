// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

import "../../_init.dart" show jniEnv, jniAccessors;

/// from: android.animation.FloatEvaluator
///
/// This evaluator can be used to perform type interpolation between <code>float</code> values.
class FloatEvaluator extends jni.JniObject {
  static final _classRef =
      jniAccessors.getClassOf("android/animation/FloatEvaluator");
  FloatEvaluator.fromRef(jni.JObject ref) : super.fromRef(ref);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  FloatEvaluator()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_evaluate = jniAccessors.getMethodIDOf(_classRef, "evaluate",
      "(FLjava/lang/Number;Ljava/lang/Number;)Ljava/lang/Float;");

  /// from: public java.lang.Float evaluate(float fraction, java.lang.Number startValue, java.lang.Number endValue)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This function returns the result of linearly interpolating the start and end values, with
  /// <code>fraction</code> representing the proportion between the start and end values. The
  /// calculation is a simple parametric calculation: <code>result = x0 + t * (v1 - v0)</code>,
  /// where <code>x0</code> is <code>startValue</code>, <code>x1</code> is <code>endValue</code>,
  /// and <code>t</code> is <code>fraction</code>.
  ///@param fraction The fraction from the starting to the ending values
  ///@param startValue The start value; should be of type <code>float</code> or
  ///                   <code>Float</code>
  ///@param endValue The end value; should be of type <code>float</code> or <code>Float</code>
  ///@return A linear interpolation between the start and end values, given the
  ///         <code>fraction</code> parameter.
  jni.JniObject evaluate(
          double fraction, jni.JniObject startValue, jni.JniObject endValue) =>
      jni.JniObject.fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_evaluate,
          jni.JniType.objectType,
          [fraction, startValue.reference, endValue.reference]).object);
}
